
stm32f407VETx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016d94  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f5c  08016f24  08016f24  00026f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018e80  08018e80  000304e4  2**0
                  CONTENTS
  4 .ARM          00000008  08018e80  08018e80  00028e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018e88  08018e88  000304e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018e88  08018e88  00028e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018e8c  08018e8c  00028e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004e4  20000000  08018e90  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008134  200004e8  08019374  000304e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000861c  08019374  0003861c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000304e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004988d  00000000  00000000  00030514  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000091ca  00000000  00000000  00079da1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000028d0  00000000  00000000  00082f70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000026d0  00000000  00000000  00085840  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002ee14  00000000  00000000  00087f10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002ea3b  00000000  00000000  000b6d24  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e9631  00000000  00000000  000e575f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001ced90  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a958  00000000  00000000  001cee0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200004e8 	.word	0x200004e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08016f0c 	.word	0x08016f0c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200004ec 	.word	0x200004ec
 80001cc:	08016f0c 	.word	0x08016f0c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr

080001f4 <__aeabi_uldivmod>:
 80001f4:	b953      	cbnz	r3, 800020c <__aeabi_uldivmod+0x18>
 80001f6:	b94a      	cbnz	r2, 800020c <__aeabi_uldivmod+0x18>
 80001f8:	2900      	cmp	r1, #0
 80001fa:	bf08      	it	eq
 80001fc:	2800      	cmpeq	r0, #0
 80001fe:	bf1c      	itt	ne
 8000200:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000204:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000208:	f000 b972 	b.w	80004f0 <__aeabi_idiv0>
 800020c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000210:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000214:	f000 f806 	bl	8000224 <__udivmoddi4>
 8000218:	f8dd e004 	ldr.w	lr, [sp, #4]
 800021c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000220:	b004      	add	sp, #16
 8000222:	4770      	bx	lr

08000224 <__udivmoddi4>:
 8000224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000228:	9e08      	ldr	r6, [sp, #32]
 800022a:	4604      	mov	r4, r0
 800022c:	4688      	mov	r8, r1
 800022e:	2b00      	cmp	r3, #0
 8000230:	d14b      	bne.n	80002ca <__udivmoddi4+0xa6>
 8000232:	428a      	cmp	r2, r1
 8000234:	4615      	mov	r5, r2
 8000236:	d967      	bls.n	8000308 <__udivmoddi4+0xe4>
 8000238:	fab2 f282 	clz	r2, r2
 800023c:	b14a      	cbz	r2, 8000252 <__udivmoddi4+0x2e>
 800023e:	f1c2 0720 	rsb	r7, r2, #32
 8000242:	fa01 f302 	lsl.w	r3, r1, r2
 8000246:	fa20 f707 	lsr.w	r7, r0, r7
 800024a:	4095      	lsls	r5, r2
 800024c:	ea47 0803 	orr.w	r8, r7, r3
 8000250:	4094      	lsls	r4, r2
 8000252:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000256:	0c23      	lsrs	r3, r4, #16
 8000258:	fbb8 f7fe 	udiv	r7, r8, lr
 800025c:	fa1f fc85 	uxth.w	ip, r5
 8000260:	fb0e 8817 	mls	r8, lr, r7, r8
 8000264:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000268:	fb07 f10c 	mul.w	r1, r7, ip
 800026c:	4299      	cmp	r1, r3
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x60>
 8000270:	18eb      	adds	r3, r5, r3
 8000272:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000276:	f080 811b 	bcs.w	80004b0 <__udivmoddi4+0x28c>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 8118 	bls.w	80004b0 <__udivmoddi4+0x28c>
 8000280:	3f02      	subs	r7, #2
 8000282:	442b      	add	r3, r5
 8000284:	1a5b      	subs	r3, r3, r1
 8000286:	b2a4      	uxth	r4, r4
 8000288:	fbb3 f0fe 	udiv	r0, r3, lr
 800028c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000290:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000294:	fb00 fc0c 	mul.w	ip, r0, ip
 8000298:	45a4      	cmp	ip, r4
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x8c>
 800029c:	192c      	adds	r4, r5, r4
 800029e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002a2:	f080 8107 	bcs.w	80004b4 <__udivmoddi4+0x290>
 80002a6:	45a4      	cmp	ip, r4
 80002a8:	f240 8104 	bls.w	80004b4 <__udivmoddi4+0x290>
 80002ac:	3802      	subs	r0, #2
 80002ae:	442c      	add	r4, r5
 80002b0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b4:	eba4 040c 	sub.w	r4, r4, ip
 80002b8:	2700      	movs	r7, #0
 80002ba:	b11e      	cbz	r6, 80002c4 <__udivmoddi4+0xa0>
 80002bc:	40d4      	lsrs	r4, r2
 80002be:	2300      	movs	r3, #0
 80002c0:	e9c6 4300 	strd	r4, r3, [r6]
 80002c4:	4639      	mov	r1, r7
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0xbe>
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	f000 80eb 	beq.w	80004aa <__udivmoddi4+0x286>
 80002d4:	2700      	movs	r7, #0
 80002d6:	e9c6 0100 	strd	r0, r1, [r6]
 80002da:	4638      	mov	r0, r7
 80002dc:	4639      	mov	r1, r7
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	fab3 f783 	clz	r7, r3
 80002e6:	2f00      	cmp	r7, #0
 80002e8:	d147      	bne.n	800037a <__udivmoddi4+0x156>
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xd0>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 80fa 	bhi.w	80004e8 <__udivmoddi4+0x2c4>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb61 0303 	sbc.w	r3, r1, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	4698      	mov	r8, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d0e0      	beq.n	80002c4 <__udivmoddi4+0xa0>
 8000302:	e9c6 4800 	strd	r4, r8, [r6]
 8000306:	e7dd      	b.n	80002c4 <__udivmoddi4+0xa0>
 8000308:	b902      	cbnz	r2, 800030c <__udivmoddi4+0xe8>
 800030a:	deff      	udf	#255	; 0xff
 800030c:	fab2 f282 	clz	r2, r2
 8000310:	2a00      	cmp	r2, #0
 8000312:	f040 808f 	bne.w	8000434 <__udivmoddi4+0x210>
 8000316:	1b49      	subs	r1, r1, r5
 8000318:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800031c:	fa1f f885 	uxth.w	r8, r5
 8000320:	2701      	movs	r7, #1
 8000322:	fbb1 fcfe 	udiv	ip, r1, lr
 8000326:	0c23      	lsrs	r3, r4, #16
 8000328:	fb0e 111c 	mls	r1, lr, ip, r1
 800032c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000330:	fb08 f10c 	mul.w	r1, r8, ip
 8000334:	4299      	cmp	r1, r3
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x124>
 8000338:	18eb      	adds	r3, r5, r3
 800033a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x122>
 8000340:	4299      	cmp	r1, r3
 8000342:	f200 80cd 	bhi.w	80004e0 <__udivmoddi4+0x2bc>
 8000346:	4684      	mov	ip, r0
 8000348:	1a59      	subs	r1, r3, r1
 800034a:	b2a3      	uxth	r3, r4
 800034c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000350:	fb0e 1410 	mls	r4, lr, r0, r1
 8000354:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000358:	fb08 f800 	mul.w	r8, r8, r0
 800035c:	45a0      	cmp	r8, r4
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x14c>
 8000360:	192c      	adds	r4, r5, r4
 8000362:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x14a>
 8000368:	45a0      	cmp	r8, r4
 800036a:	f200 80b6 	bhi.w	80004da <__udivmoddi4+0x2b6>
 800036e:	4618      	mov	r0, r3
 8000370:	eba4 0408 	sub.w	r4, r4, r8
 8000374:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000378:	e79f      	b.n	80002ba <__udivmoddi4+0x96>
 800037a:	f1c7 0c20 	rsb	ip, r7, #32
 800037e:	40bb      	lsls	r3, r7
 8000380:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000384:	ea4e 0e03 	orr.w	lr, lr, r3
 8000388:	fa01 f407 	lsl.w	r4, r1, r7
 800038c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000390:	fa21 f30c 	lsr.w	r3, r1, ip
 8000394:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000398:	4325      	orrs	r5, r4
 800039a:	fbb3 f9f8 	udiv	r9, r3, r8
 800039e:	0c2c      	lsrs	r4, r5, #16
 80003a0:	fb08 3319 	mls	r3, r8, r9, r3
 80003a4:	fa1f fa8e 	uxth.w	sl, lr
 80003a8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003ac:	fb09 f40a 	mul.w	r4, r9, sl
 80003b0:	429c      	cmp	r4, r3
 80003b2:	fa02 f207 	lsl.w	r2, r2, r7
 80003b6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b0>
 80003bc:	eb1e 0303 	adds.w	r3, lr, r3
 80003c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003c4:	f080 8087 	bcs.w	80004d6 <__udivmoddi4+0x2b2>
 80003c8:	429c      	cmp	r4, r3
 80003ca:	f240 8084 	bls.w	80004d6 <__udivmoddi4+0x2b2>
 80003ce:	f1a9 0902 	sub.w	r9, r9, #2
 80003d2:	4473      	add	r3, lr
 80003d4:	1b1b      	subs	r3, r3, r4
 80003d6:	b2ad      	uxth	r5, r5
 80003d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003dc:	fb08 3310 	mls	r3, r8, r0, r3
 80003e0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003e4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e8:	45a2      	cmp	sl, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1da>
 80003ec:	eb1e 0404 	adds.w	r4, lr, r4
 80003f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f4:	d26b      	bcs.n	80004ce <__udivmoddi4+0x2aa>
 80003f6:	45a2      	cmp	sl, r4
 80003f8:	d969      	bls.n	80004ce <__udivmoddi4+0x2aa>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4474      	add	r4, lr
 80003fe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000402:	fba0 8902 	umull	r8, r9, r0, r2
 8000406:	eba4 040a 	sub.w	r4, r4, sl
 800040a:	454c      	cmp	r4, r9
 800040c:	46c2      	mov	sl, r8
 800040e:	464b      	mov	r3, r9
 8000410:	d354      	bcc.n	80004bc <__udivmoddi4+0x298>
 8000412:	d051      	beq.n	80004b8 <__udivmoddi4+0x294>
 8000414:	2e00      	cmp	r6, #0
 8000416:	d069      	beq.n	80004ec <__udivmoddi4+0x2c8>
 8000418:	ebb1 050a 	subs.w	r5, r1, sl
 800041c:	eb64 0403 	sbc.w	r4, r4, r3
 8000420:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000424:	40fd      	lsrs	r5, r7
 8000426:	40fc      	lsrs	r4, r7
 8000428:	ea4c 0505 	orr.w	r5, ip, r5
 800042c:	e9c6 5400 	strd	r5, r4, [r6]
 8000430:	2700      	movs	r7, #0
 8000432:	e747      	b.n	80002c4 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f703 	lsr.w	r7, r0, r3
 800043c:	4095      	lsls	r5, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	fa21 f303 	lsr.w	r3, r1, r3
 8000446:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800044a:	4338      	orrs	r0, r7
 800044c:	0c01      	lsrs	r1, r0, #16
 800044e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000452:	fa1f f885 	uxth.w	r8, r5
 8000456:	fb0e 3317 	mls	r3, lr, r7, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb07 f308 	mul.w	r3, r7, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x256>
 800046a:	1869      	adds	r1, r5, r1
 800046c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000470:	d22f      	bcs.n	80004d2 <__udivmoddi4+0x2ae>
 8000472:	428b      	cmp	r3, r1
 8000474:	d92d      	bls.n	80004d2 <__udivmoddi4+0x2ae>
 8000476:	3f02      	subs	r7, #2
 8000478:	4429      	add	r1, r5
 800047a:	1acb      	subs	r3, r1, r3
 800047c:	b281      	uxth	r1, r0
 800047e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000482:	fb0e 3310 	mls	r3, lr, r0, r3
 8000486:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048a:	fb00 f308 	mul.w	r3, r0, r8
 800048e:	428b      	cmp	r3, r1
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x27e>
 8000492:	1869      	adds	r1, r5, r1
 8000494:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000498:	d217      	bcs.n	80004ca <__udivmoddi4+0x2a6>
 800049a:	428b      	cmp	r3, r1
 800049c:	d915      	bls.n	80004ca <__udivmoddi4+0x2a6>
 800049e:	3802      	subs	r0, #2
 80004a0:	4429      	add	r1, r5
 80004a2:	1ac9      	subs	r1, r1, r3
 80004a4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a8:	e73b      	b.n	8000322 <__udivmoddi4+0xfe>
 80004aa:	4637      	mov	r7, r6
 80004ac:	4630      	mov	r0, r6
 80004ae:	e709      	b.n	80002c4 <__udivmoddi4+0xa0>
 80004b0:	4607      	mov	r7, r0
 80004b2:	e6e7      	b.n	8000284 <__udivmoddi4+0x60>
 80004b4:	4618      	mov	r0, r3
 80004b6:	e6fb      	b.n	80002b0 <__udivmoddi4+0x8c>
 80004b8:	4541      	cmp	r1, r8
 80004ba:	d2ab      	bcs.n	8000414 <__udivmoddi4+0x1f0>
 80004bc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004c0:	eb69 020e 	sbc.w	r2, r9, lr
 80004c4:	3801      	subs	r0, #1
 80004c6:	4613      	mov	r3, r2
 80004c8:	e7a4      	b.n	8000414 <__udivmoddi4+0x1f0>
 80004ca:	4660      	mov	r0, ip
 80004cc:	e7e9      	b.n	80004a2 <__udivmoddi4+0x27e>
 80004ce:	4618      	mov	r0, r3
 80004d0:	e795      	b.n	80003fe <__udivmoddi4+0x1da>
 80004d2:	4667      	mov	r7, ip
 80004d4:	e7d1      	b.n	800047a <__udivmoddi4+0x256>
 80004d6:	4681      	mov	r9, r0
 80004d8:	e77c      	b.n	80003d4 <__udivmoddi4+0x1b0>
 80004da:	3802      	subs	r0, #2
 80004dc:	442c      	add	r4, r5
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0x14c>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	442b      	add	r3, r5
 80004e6:	e72f      	b.n	8000348 <__udivmoddi4+0x124>
 80004e8:	4638      	mov	r0, r7
 80004ea:	e708      	b.n	80002fe <__udivmoddi4+0xda>
 80004ec:	4637      	mov	r7, r6
 80004ee:	e6e9      	b.n	80002c4 <__udivmoddi4+0xa0>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <bh>:
	}

}

void bh(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0

}
 80004f8:	bf00      	nop
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
	...

08000504 <HAL_UART_TxCpltCallback>:
{
	bh();
}*/

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	tx_on_progress=0;
 800050c:	4b04      	ldr	r3, [pc, #16]	; (8000520 <HAL_UART_TxCpltCallback+0x1c>)
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
	//bh();
}
 8000512:	bf00      	nop
 8000514:	370c      	adds	r7, #12
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	2000050c 	.word	0x2000050c

08000524 <HAL_UART_RxCpltCallback>:

static int num_empty_rx = 0;
volatile int num_rx = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b086      	sub	sp, #24
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
	rx_on_progress=0;
 800052c:	4b20      	ldr	r3, [pc, #128]	; (80005b0 <HAL_UART_RxCpltCallback+0x8c>)
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
	int l = sizeof(buf0) - __HAL_DMA_GET_COUNTER(hdma_uart_rx); // buf0 and buf1 same size
 8000532:	4b20      	ldr	r3, [pc, #128]	; (80005b4 <HAL_UART_RxCpltCallback+0x90>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	685b      	ldr	r3, [r3, #4]
 800053a:	f1c3 0320 	rsb	r3, r3, #32
 800053e:	617b      	str	r3, [r7, #20]
	at_msg_t m;
	m.numbuf = curbuf;
 8000540:	4b1d      	ldr	r3, [pc, #116]	; (80005b8 <HAL_UART_RxCpltCallback+0x94>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	733b      	strb	r3, [r7, #12]
	m.len = l;
 8000546:	697b      	ldr	r3, [r7, #20]
 8000548:	b2db      	uxtb	r3, r3
 800054a:	737b      	strb	r3, [r7, #13]
	num_rx++;
 800054c:	4b1b      	ldr	r3, [pc, #108]	; (80005bc <HAL_UART_RxCpltCallback+0x98>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	3301      	adds	r3, #1
 8000552:	4a1a      	ldr	r2, [pc, #104]	; (80005bc <HAL_UART_RxCpltCallback+0x98>)
 8000554:	6013      	str	r3, [r2, #0]
	if (l) {
 8000556:	697b      	ldr	r3, [r7, #20]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d012      	beq.n	8000582 <HAL_UART_RxCpltCallback+0x5e>
		curbuf = curbuf ? 0 : 1;
 800055c:	4b16      	ldr	r3, [pc, #88]	; (80005b8 <HAL_UART_RxCpltCallback+0x94>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	2b00      	cmp	r3, #0
 8000562:	bf0c      	ite	eq
 8000564:	2301      	moveq	r3, #1
 8000566:	2300      	movne	r3, #0
 8000568:	b2db      	uxtb	r3, r3
 800056a:	461a      	mov	r2, r3
 800056c:	4b12      	ldr	r3, [pc, #72]	; (80005b8 <HAL_UART_RxCpltCallback+0x94>)
 800056e:	701a      	strb	r2, [r3, #0]
		osMessageQueuePut(bleRespQ, &m, 0, 0);
 8000570:	4b13      	ldr	r3, [pc, #76]	; (80005c0 <HAL_UART_RxCpltCallback+0x9c>)
 8000572:	6818      	ldr	r0, [r3, #0]
 8000574:	f107 010c 	add.w	r1, r7, #12
 8000578:	2300      	movs	r3, #0
 800057a:	2200      	movs	r2, #0
 800057c:	f00c fee4 	bl	800d348 <osMessageQueuePut>
 8000580:	e004      	b.n	800058c <HAL_UART_RxCpltCallback+0x68>
	} else {
		num_empty_rx++;
 8000582:	4b10      	ldr	r3, [pc, #64]	; (80005c4 <HAL_UART_RxCpltCallback+0xa0>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	3301      	adds	r3, #1
 8000588:	4a0e      	ldr	r2, [pc, #56]	; (80005c4 <HAL_UART_RxCpltCallback+0xa0>)
 800058a:	6013      	str	r3, [r2, #0]
	}
	uint8_t *newbuf = curbuf ? buf1 : buf0;
 800058c:	4b0a      	ldr	r3, [pc, #40]	; (80005b8 <HAL_UART_RxCpltCallback+0x94>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <HAL_UART_RxCpltCallback+0x74>
 8000594:	4b0c      	ldr	r3, [pc, #48]	; (80005c8 <HAL_UART_RxCpltCallback+0xa4>)
 8000596:	e000      	b.n	800059a <HAL_UART_RxCpltCallback+0x76>
 8000598:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <HAL_UART_RxCpltCallback+0xa8>)
 800059a:	613b      	str	r3, [r7, #16]

	HAL_UART_Receive_DMA(huart, newbuf, sizeof(buf0));
 800059c:	2220      	movs	r2, #32
 800059e:	6939      	ldr	r1, [r7, #16]
 80005a0:	6878      	ldr	r0, [r7, #4]
 80005a2:	f008 ff15 	bl	80093d0 <HAL_UART_Receive_DMA>
	//__HAL_UART_ENABLE_IT(huart, UART_IT_IDLE );
	//__HAL_DMA_ENABLE_IT(hdma_uart_rx, DMA_IT_TC /*|DMA_IT_HT*/);
}
 80005a6:	bf00      	nop
 80005a8:	3718      	adds	r7, #24
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	20000510 	.word	0x20000510
 80005b4:	20000504 	.word	0x20000504
 80005b8:	20000554 	.word	0x20000554
 80005bc:	2000055c 	.word	0x2000055c
 80005c0:	20000508 	.word	0x20000508
 80005c4:	20000558 	.word	0x20000558
 80005c8:	20000534 	.word	0x20000534
 80005cc:	20000514 	.word	0x20000514

080005d0 <HAL_UART_RxHalfCpltCallback>:
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
	//bh();
}
 80005d8:	bf00      	nop
 80005da:	370c      	adds	r7, #12
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr

080005e4 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	bh();
 80005ec:	f7ff ff82 	bl	80004f4 <bh>
}
 80005f0:	bf00      	nop
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <itm_debug1>:
//void _itm_debug1(const char *msg, int v);
//void _itm_debug2(const char *msg, int v1, int v2);
void _itm_debug3(const char *msg, int v1, int v2, int v3, int n);

static inline void itm_debug1(uint32_t f, const char *msg, int v)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b086      	sub	sp, #24
 80005fc:	af02      	add	r7, sp, #8
 80005fe:	60f8      	str	r0, [r7, #12]
 8000600:	60b9      	str	r1, [r7, #8]
 8000602:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 8000604:	4b08      	ldr	r3, [pc, #32]	; (8000628 <itm_debug1+0x30>)
 8000606:	681a      	ldr	r2, [r3, #0]
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	4013      	ands	r3, r2
 800060c:	2b00      	cmp	r3, #0
 800060e:	d007      	beq.n	8000620 <itm_debug1+0x28>
 8000610:	2301      	movs	r3, #1
 8000612:	9300      	str	r3, [sp, #0]
 8000614:	2300      	movs	r3, #0
 8000616:	2200      	movs	r2, #0
 8000618:	6879      	ldr	r1, [r7, #4]
 800061a:	68b8      	ldr	r0, [r7, #8]
 800061c:	f016 f958 	bl	80168d0 <_itm_debug3>
}
 8000620:	bf00      	nop
 8000622:	3710      	adds	r7, #16
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	2000047c 	.word	0x2000047c

0800062c <itm_debug2>:
static inline void itm_debug2(uint32_t f, const char *msg, int v1, int v2)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af02      	add	r7, sp, #8
 8000632:	60f8      	str	r0, [r7, #12]
 8000634:	60b9      	str	r1, [r7, #8]
 8000636:	607a      	str	r2, [r7, #4]
 8000638:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, 0, 2);
 800063a:	4b09      	ldr	r3, [pc, #36]	; (8000660 <itm_debug2+0x34>)
 800063c:	681a      	ldr	r2, [r3, #0]
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	4013      	ands	r3, r2
 8000642:	2b00      	cmp	r3, #0
 8000644:	d007      	beq.n	8000656 <itm_debug2+0x2a>
 8000646:	2302      	movs	r3, #2
 8000648:	9300      	str	r3, [sp, #0]
 800064a:	2300      	movs	r3, #0
 800064c:	683a      	ldr	r2, [r7, #0]
 800064e:	6879      	ldr	r1, [r7, #4]
 8000650:	68b8      	ldr	r0, [r7, #8]
 8000652:	f016 f93d 	bl	80168d0 <_itm_debug3>
}
 8000656:	bf00      	nop
 8000658:	3710      	adds	r7, #16
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	2000047c 	.word	0x2000047c

08000664 <GetCurrentMicro>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t GetCurrentMicro(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
  uint32_t m0 = HAL_GetTick();
 800066a:	f001 fcc9 	bl	8002000 <HAL_GetTick>
 800066e:	60f8      	str	r0, [r7, #12]
  uint32_t u0 = SysTick->LOAD - SysTick->VAL;
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <GetCurrentMicro+0x78>)
 8000672:	685a      	ldr	r2, [r3, #4]
 8000674:	4b19      	ldr	r3, [pc, #100]	; (80006dc <GetCurrentMicro+0x78>)
 8000676:	689b      	ldr	r3, [r3, #8]
 8000678:	1ad3      	subs	r3, r2, r3
 800067a:	60bb      	str	r3, [r7, #8]
  uint32_t m1 = HAL_GetTick();
 800067c:	f001 fcc0 	bl	8002000 <HAL_GetTick>
 8000680:	6078      	str	r0, [r7, #4]
  uint32_t u1 = SysTick->LOAD - SysTick->VAL;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <GetCurrentMicro+0x78>)
 8000684:	685a      	ldr	r2, [r3, #4]
 8000686:	4b15      	ldr	r3, [pc, #84]	; (80006dc <GetCurrentMicro+0x78>)
 8000688:	689b      	ldr	r3, [r3, #8]
 800068a:	1ad3      	subs	r3, r2, r3
 800068c:	603b      	str	r3, [r7, #0]

  if (m1 > m0) {
 800068e:	687a      	ldr	r2, [r7, #4]
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	429a      	cmp	r2, r3
 8000694:	d90f      	bls.n	80006b6 <GetCurrentMicro+0x52>
    return ( m1 * 1000 + (u1 * 1000) / SysTick->LOAD);
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800069c:	fb02 f203 	mul.w	r2, r2, r3
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006a6:	fb01 f103 	mul.w	r1, r1, r3
 80006aa:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <GetCurrentMicro+0x78>)
 80006ac:	685b      	ldr	r3, [r3, #4]
 80006ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80006b2:	4413      	add	r3, r2
 80006b4:	e00e      	b.n	80006d4 <GetCurrentMicro+0x70>
  } else {
    return ( m0 * 1000 + (u0 * 1000) / SysTick->LOAD);
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006bc:	fb02 f203 	mul.w	r2, r2, r3
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006c6:	fb01 f103 	mul.w	r1, r1, r3
 80006ca:	4b04      	ldr	r3, [pc, #16]	; (80006dc <GetCurrentMicro+0x78>)
 80006cc:	685b      	ldr	r3, [r3, #4]
 80006ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80006d2:	4413      	add	r3, r2
  }
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3710      	adds	r7, #16
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	e000e010 	.word	0xe000e010

080006e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e4:	f001 fc56 	bl	8001f94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e8:	f000 f856 	bl	8000798 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ec:	f000 fdb6 	bl	800125c <MX_GPIO_Init>
  MX_DMA_Init();
 80006f0:	f000 fd76 	bl	80011e0 <MX_DMA_Init>
  MX_ADC1_Init();
 80006f4:	f000 f8d2 	bl	800089c <MX_ADC1_Init>
  MX_I2C1_Init();
 80006f8:	f000 f9a6 	bl	8000a48 <MX_I2C1_Init>
  MX_TIM1_Init();
 80006fc:	f000 fa30 	bl	8000b60 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000700:	f000 faf2 	bl	8000ce8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000704:	f000 fb88 	bl	8000e18 <MX_TIM3_Init>
  MX_RTC_Init();
 8000708:	f000 f9fa 	bl	8000b00 <MX_RTC_Init>
  MX_UART4_Init();
 800070c:	f000 fd3e 	bl	800118c <MX_UART4_Init>
  MX_TIM4_Init();
 8000710:	f000 fc30 	bl	8000f74 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000714:	f000 fc82 	bl	800101c <MX_TIM8_Init>
  MX_I2C3_Init();
 8000718:	f000 f9c4 	bl	8000aa4 <MX_I2C3_Init>
  MX_TIM12_Init();
 800071c:	f000 fce6 	bl	80010ec <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000720:	f00c fc4e 	bl	800cfc0 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of frameQueue */
  frameQueueHandle = osMessageQueueNew (48, sizeof(frame_msg_t), &frameQueue_attributes);
 8000724:	4a11      	ldr	r2, [pc, #68]	; (800076c <main+0x8c>)
 8000726:	2121      	movs	r1, #33	; 0x21
 8000728:	2030      	movs	r0, #48	; 0x30
 800072a:	f00c fd87 	bl	800d23c <osMessageQueueNew>
 800072e:	4602      	mov	r2, r0
 8000730:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <main+0x90>)
 8000732:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of uiTask */
  uiTaskHandle = osThreadNew(StartUiTask, NULL, &uiTask_attributes);
 8000734:	4a0f      	ldr	r2, [pc, #60]	; (8000774 <main+0x94>)
 8000736:	2100      	movs	r1, #0
 8000738:	480f      	ldr	r0, [pc, #60]	; (8000778 <main+0x98>)
 800073a:	f00c fcab 	bl	800d094 <osThreadNew>
 800073e:	4602      	mov	r2, r0
 8000740:	4b0e      	ldr	r3, [pc, #56]	; (800077c <main+0x9c>)
 8000742:	601a      	str	r2, [r3, #0]

  /* creation of ctrlTask */
  ctrlTaskHandle = osThreadNew(StartCtrlTask, NULL, &ctrlTask_attributes);
 8000744:	4a0e      	ldr	r2, [pc, #56]	; (8000780 <main+0xa0>)
 8000746:	2100      	movs	r1, #0
 8000748:	480e      	ldr	r0, [pc, #56]	; (8000784 <main+0xa4>)
 800074a:	f00c fca3 	bl	800d094 <osThreadNew>
 800074e:	4602      	mov	r2, r0
 8000750:	4b0d      	ldr	r3, [pc, #52]	; (8000788 <main+0xa8>)
 8000752:	601a      	str	r2, [r3, #0]

  /* creation of txrxFrameTask */
  txrxFrameTaskHandle = osThreadNew(StartTxRxFrameTask, NULL, &txrxFrameTask_attributes);
 8000754:	4a0d      	ldr	r2, [pc, #52]	; (800078c <main+0xac>)
 8000756:	2100      	movs	r1, #0
 8000758:	480d      	ldr	r0, [pc, #52]	; (8000790 <main+0xb0>)
 800075a:	f00c fc9b 	bl	800d094 <osThreadNew>
 800075e:	4602      	mov	r2, r0
 8000760:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <main+0xb4>)
 8000762:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000764:	f00c fc60 	bl	800d028 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000768:	e7fe      	b.n	8000768 <main+0x88>
 800076a:	bf00      	nop
 800076c:	08017584 	.word	0x08017584
 8000770:	20005afc 	.word	0x20005afc
 8000774:	08017518 	.word	0x08017518
 8000778:	08016531 	.word	0x08016531
 800077c:	20005fa4 	.word	0x20005fa4
 8000780:	0801753c 	.word	0x0801753c
 8000784:	08016229 	.word	0x08016229
 8000788:	20005fe8 	.word	0x20005fe8
 800078c:	08017560 	.word	0x08017560
 8000790:	08016571 	.word	0x08016571
 8000794:	200066f4 	.word	0x200066f4

08000798 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b098      	sub	sp, #96	; 0x60
 800079c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007a2:	2230      	movs	r2, #48	; 0x30
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f016 fa99 	bl	8016cde <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ac:	f107 031c 	add.w	r3, r7, #28
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007bc:	f107 030c 	add.w	r3, r7, #12
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	60bb      	str	r3, [r7, #8]
 80007ce:	4b31      	ldr	r3, [pc, #196]	; (8000894 <SystemClock_Config+0xfc>)
 80007d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d2:	4a30      	ldr	r2, [pc, #192]	; (8000894 <SystemClock_Config+0xfc>)
 80007d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d8:	6413      	str	r3, [r2, #64]	; 0x40
 80007da:	4b2e      	ldr	r3, [pc, #184]	; (8000894 <SystemClock_Config+0xfc>)
 80007dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007e6:	2300      	movs	r3, #0
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	4b2b      	ldr	r3, [pc, #172]	; (8000898 <SystemClock_Config+0x100>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a2a      	ldr	r2, [pc, #168]	; (8000898 <SystemClock_Config+0x100>)
 80007f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007f4:	6013      	str	r3, [r2, #0]
 80007f6:	4b28      	ldr	r3, [pc, #160]	; (8000898 <SystemClock_Config+0x100>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000802:	2305      	movs	r3, #5
 8000804:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000806:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800080a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800080c:	2301      	movs	r3, #1
 800080e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000810:	2302      	movs	r3, #2
 8000812:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000814:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000818:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800081a:	2304      	movs	r3, #4
 800081c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 96;
 800081e:	2360      	movs	r3, #96	; 0x60
 8000820:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000822:	2302      	movs	r3, #2
 8000824:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000826:	2304      	movs	r3, #4
 8000828:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800082a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800082e:	4618      	mov	r0, r3
 8000830:	f006 fde2 	bl	80073f8 <HAL_RCC_OscConfig>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800083a:	f000 fe35 	bl	80014a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083e:	230f      	movs	r3, #15
 8000840:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000842:	2302      	movs	r3, #2
 8000844:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000846:	2300      	movs	r3, #0
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800084a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800084e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 8000850:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000854:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000856:	f107 031c 	add.w	r3, r7, #28
 800085a:	2103      	movs	r1, #3
 800085c:	4618      	mov	r0, r3
 800085e:	f007 f83b 	bl	80078d8 <HAL_RCC_ClockConfig>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000868:	f000 fe1e 	bl	80014a8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800086c:	2302      	movs	r3, #2
 800086e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000870:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000874:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000876:	f107 030c 	add.w	r3, r7, #12
 800087a:	4618      	mov	r0, r3
 800087c:	f007 fa50 	bl	8007d20 <HAL_RCCEx_PeriphCLKConfig>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000886:	f000 fe0f 	bl	80014a8 <Error_Handler>
  }
}
 800088a:	bf00      	nop
 800088c:	3760      	adds	r7, #96	; 0x60
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40023800 	.word	0x40023800
 8000898:	40007000 	.word	0x40007000

0800089c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008a2:	463b      	mov	r3, r7
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN ADC1_Init 1 */
  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008ae:	4b64      	ldr	r3, [pc, #400]	; (8000a40 <MX_ADC1_Init+0x1a4>)
 80008b0:	4a64      	ldr	r2, [pc, #400]	; (8000a44 <MX_ADC1_Init+0x1a8>)
 80008b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80008b4:	4b62      	ldr	r3, [pc, #392]	; (8000a40 <MX_ADC1_Init+0x1a4>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008ba:	4b61      	ldr	r3, [pc, #388]	; (8000a40 <MX_ADC1_Init+0x1a4>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80008c0:	4b5f      	ldr	r3, [pc, #380]	; (8000a40 <MX_ADC1_Init+0x1a4>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008c6:	4b5e      	ldr	r3, [pc, #376]	; (8000a40 <MX_ADC1_Init+0x1a4>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008cc:	4b5c      	ldr	r3, [pc, #368]	; (8000a40 <MX_ADC1_Init+0x1a4>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80008d4:	4b5a      	ldr	r3, [pc, #360]	; (8000a40 <MX_ADC1_Init+0x1a4>)
 80008d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 80008dc:	4b58      	ldr	r3, [pc, #352]	; (8000a40 <MX_ADC1_Init+0x1a4>)
 80008de:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80008e2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008e4:	4b56      	ldr	r3, [pc, #344]	; (8000a40 <MX_ADC1_Init+0x1a4>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 10;
 80008ea:	4b55      	ldr	r3, [pc, #340]	; (8000a40 <MX_ADC1_Init+0x1a4>)
 80008ec:	220a      	movs	r2, #10
 80008ee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80008f0:	4b53      	ldr	r3, [pc, #332]	; (8000a40 <MX_ADC1_Init+0x1a4>)
 80008f2:	2201      	movs	r2, #1
 80008f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80008f8:	4b51      	ldr	r3, [pc, #324]	; (8000a40 <MX_ADC1_Init+0x1a4>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008fe:	4850      	ldr	r0, [pc, #320]	; (8000a40 <MX_ADC1_Init+0x1a4>)
 8000900:	f001 fbac 	bl	800205c <HAL_ADC_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 800090a:	f000 fdcd 	bl	80014a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800090e:	2300      	movs	r3, #0
 8000910:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000912:	2301      	movs	r3, #1
 8000914:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000916:	2302      	movs	r3, #2
 8000918:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800091a:	463b      	mov	r3, r7
 800091c:	4619      	mov	r1, r3
 800091e:	4848      	ldr	r0, [pc, #288]	; (8000a40 <MX_ADC1_Init+0x1a4>)
 8000920:	f001 fcd2 	bl	80022c8 <HAL_ADC_ConfigChannel>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800092a:	f000 fdbd 	bl	80014a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800092e:	2301      	movs	r3, #1
 8000930:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000932:	2302      	movs	r3, #2
 8000934:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000936:	463b      	mov	r3, r7
 8000938:	4619      	mov	r1, r3
 800093a:	4841      	ldr	r0, [pc, #260]	; (8000a40 <MX_ADC1_Init+0x1a4>)
 800093c:	f001 fcc4 	bl	80022c8 <HAL_ADC_ConfigChannel>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000946:	f000 fdaf 	bl	80014a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800094a:	2302      	movs	r3, #2
 800094c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800094e:	2303      	movs	r3, #3
 8000950:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000952:	463b      	mov	r3, r7
 8000954:	4619      	mov	r1, r3
 8000956:	483a      	ldr	r0, [pc, #232]	; (8000a40 <MX_ADC1_Init+0x1a4>)
 8000958:	f001 fcb6 	bl	80022c8 <HAL_ADC_ConfigChannel>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8000962:	f000 fda1 	bl	80014a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000966:	2303      	movs	r3, #3
 8000968:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800096a:	2304      	movs	r3, #4
 800096c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800096e:	463b      	mov	r3, r7
 8000970:	4619      	mov	r1, r3
 8000972:	4833      	ldr	r0, [pc, #204]	; (8000a40 <MX_ADC1_Init+0x1a4>)
 8000974:	f001 fca8 	bl	80022c8 <HAL_ADC_ConfigChannel>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 800097e:	f000 fd93 	bl	80014a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000982:	2304      	movs	r3, #4
 8000984:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000986:	2305      	movs	r3, #5
 8000988:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800098a:	463b      	mov	r3, r7
 800098c:	4619      	mov	r1, r3
 800098e:	482c      	ldr	r0, [pc, #176]	; (8000a40 <MX_ADC1_Init+0x1a4>)
 8000990:	f001 fc9a 	bl	80022c8 <HAL_ADC_ConfigChannel>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 800099a:	f000 fd85 	bl	80014a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800099e:	2305      	movs	r3, #5
 80009a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80009a2:	2306      	movs	r3, #6
 80009a4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009a6:	463b      	mov	r3, r7
 80009a8:	4619      	mov	r1, r3
 80009aa:	4825      	ldr	r0, [pc, #148]	; (8000a40 <MX_ADC1_Init+0x1a4>)
 80009ac:	f001 fc8c 	bl	80022c8 <HAL_ADC_ConfigChannel>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 80009b6:	f000 fd77 	bl	80014a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80009ba:	2307      	movs	r3, #7
 80009bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80009be:	2307      	movs	r3, #7
 80009c0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009c2:	463b      	mov	r3, r7
 80009c4:	4619      	mov	r1, r3
 80009c6:	481e      	ldr	r0, [pc, #120]	; (8000a40 <MX_ADC1_Init+0x1a4>)
 80009c8:	f001 fc7e 	bl	80022c8 <HAL_ADC_ConfigChannel>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_ADC1_Init+0x13a>
  {
    Error_Handler();
 80009d2:	f000 fd69 	bl	80014a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80009d6:	2308      	movs	r3, #8
 80009d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80009da:	2308      	movs	r3, #8
 80009dc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009de:	463b      	mov	r3, r7
 80009e0:	4619      	mov	r1, r3
 80009e2:	4817      	ldr	r0, [pc, #92]	; (8000a40 <MX_ADC1_Init+0x1a4>)
 80009e4:	f001 fc70 	bl	80022c8 <HAL_ADC_ConfigChannel>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_ADC1_Init+0x156>
  {
    Error_Handler();
 80009ee:	f000 fd5b 	bl	80014a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80009f2:	230a      	movs	r3, #10
 80009f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80009f6:	2309      	movs	r3, #9
 80009f8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009fa:	463b      	mov	r3, r7
 80009fc:	4619      	mov	r1, r3
 80009fe:	4810      	ldr	r0, [pc, #64]	; (8000a40 <MX_ADC1_Init+0x1a4>)
 8000a00:	f001 fc62 	bl	80022c8 <HAL_ADC_ConfigChannel>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_ADC1_Init+0x172>
  {
    Error_Handler();
 8000a0a:	f000 fd4d 	bl	80014a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000a0e:	230b      	movs	r3, #11
 8000a10:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8000a12:	230a      	movs	r3, #10
 8000a14:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a16:	463b      	mov	r3, r7
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4809      	ldr	r0, [pc, #36]	; (8000a40 <MX_ADC1_Init+0x1a4>)
 8000a1c:	f001 fc54 	bl	80022c8 <HAL_ADC_ConfigChannel>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 8000a26:	f000 fd3f 	bl	80014a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  if (hadc1.Init.NbrOfConversion != NUM_LOCAL_CANTONS_HW*2) {
 8000a2a:	4b05      	ldr	r3, [pc, #20]	; (8000a40 <MX_ADC1_Init+0x1a4>)
 8000a2c:	69db      	ldr	r3, [r3, #28]
 8000a2e:	2b0a      	cmp	r3, #10
 8000a30:	d001      	beq.n	8000a36 <MX_ADC1_Init+0x19a>
	    Error_Handler();
 8000a32:	f000 fd39 	bl	80014a8 <Error_Handler>
  }
  /* USER CODE END ADC1_Init 2 */

}
 8000a36:	bf00      	nop
 8000a38:	3710      	adds	r7, #16
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	20005fec 	.word	0x20005fec
 8000a44:	40012000 	.word	0x40012000

08000a48 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a4c:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <MX_I2C1_Init+0x50>)
 8000a4e:	4a13      	ldr	r2, [pc, #76]	; (8000a9c <MX_I2C1_Init+0x54>)
 8000a50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000a52:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <MX_I2C1_Init+0x50>)
 8000a54:	4a12      	ldr	r2, [pc, #72]	; (8000aa0 <MX_I2C1_Init+0x58>)
 8000a56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a58:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <MX_I2C1_Init+0x50>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <MX_I2C1_Init+0x50>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <MX_I2C1_Init+0x50>)
 8000a66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a6a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a6c:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <MX_I2C1_Init+0x50>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a72:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <MX_I2C1_Init+0x50>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a78:	4b07      	ldr	r3, [pc, #28]	; (8000a98 <MX_I2C1_Init+0x50>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a7e:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <MX_I2C1_Init+0x50>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a84:	4804      	ldr	r0, [pc, #16]	; (8000a98 <MX_I2C1_Init+0x50>)
 8000a86:	f002 fcf3 	bl	8003470 <HAL_I2C_Init>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a90:	f000 fd0a 	bl	80014a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20005b00 	.word	0x20005b00
 8000a9c:	40005400 	.word	0x40005400
 8000aa0:	00061a80 	.word	0x00061a80

08000aa4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000aa8:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <MX_I2C3_Init+0x50>)
 8000aaa:	4a13      	ldr	r2, [pc, #76]	; (8000af8 <MX_I2C3_Init+0x54>)
 8000aac:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8000aae:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <MX_I2C3_Init+0x50>)
 8000ab0:	4a12      	ldr	r2, [pc, #72]	; (8000afc <MX_I2C3_Init+0x58>)
 8000ab2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <MX_I2C3_Init+0x50>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000aba:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <MX_I2C3_Init+0x50>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <MX_I2C3_Init+0x50>)
 8000ac2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ac6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ac8:	4b0a      	ldr	r3, [pc, #40]	; (8000af4 <MX_I2C3_Init+0x50>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000ace:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <MX_I2C3_Init+0x50>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ad4:	4b07      	ldr	r3, [pc, #28]	; (8000af4 <MX_I2C3_Init+0x50>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <MX_I2C3_Init+0x50>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000ae0:	4804      	ldr	r0, [pc, #16]	; (8000af4 <MX_I2C3_Init+0x50>)
 8000ae2:	f002 fcc5 	bl	8003470 <HAL_I2C_Init>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000aec:	f000 fcdc 	bl	80014a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	2000539c 	.word	0x2000539c
 8000af8:	40005c00 	.word	0x40005c00
 8000afc:	00061a80 	.word	0x00061a80

08000b00 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000b06:	1d3b      	adds	r3, r7, #4
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000b14:	2300      	movs	r3, #0
 8000b16:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b18:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <MX_RTC_Init+0x58>)
 8000b1a:	4a10      	ldr	r2, [pc, #64]	; (8000b5c <MX_RTC_Init+0x5c>)
 8000b1c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <MX_RTC_Init+0x58>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <MX_RTC_Init+0x58>)
 8000b26:	227f      	movs	r2, #127	; 0x7f
 8000b28:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <MX_RTC_Init+0x58>)
 8000b2c:	22ff      	movs	r2, #255	; 0xff
 8000b2e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b30:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <MX_RTC_Init+0x58>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b36:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <MX_RTC_Init+0x58>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <MX_RTC_Init+0x58>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b42:	4805      	ldr	r0, [pc, #20]	; (8000b58 <MX_RTC_Init+0x58>)
 8000b44:	f007 f9ce 	bl	8007ee4 <HAL_RTC_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000b4e:	f000 fcab 	bl	80014a8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b52:	3718      	adds	r7, #24
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20006094 	.word	0x20006094
 8000b5c:	40002800 	.word	0x40002800

08000b60 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b096      	sub	sp, #88	; 0x58
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b66:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]
 8000b72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b74:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	609a      	str	r2, [r3, #8]
 8000b8a:	60da      	str	r2, [r3, #12]
 8000b8c:	611a      	str	r2, [r3, #16]
 8000b8e:	615a      	str	r2, [r3, #20]
 8000b90:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b92:	1d3b      	adds	r3, r7, #4
 8000b94:	2220      	movs	r2, #32
 8000b96:	2100      	movs	r1, #0
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f016 f8a0 	bl	8016cde <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b9e:	4b50      	ldr	r3, [pc, #320]	; (8000ce0 <MX_TIM1_Init+0x180>)
 8000ba0:	4a50      	ldr	r2, [pc, #320]	; (8000ce4 <MX_TIM1_Init+0x184>)
 8000ba2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1199;
 8000ba4:	4b4e      	ldr	r3, [pc, #312]	; (8000ce0 <MX_TIM1_Init+0x180>)
 8000ba6:	f240 42af 	movw	r2, #1199	; 0x4af
 8000baa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8000bac:	4b4c      	ldr	r3, [pc, #304]	; (8000ce0 <MX_TIM1_Init+0x180>)
 8000bae:	2260      	movs	r2, #96	; 0x60
 8000bb0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 200;
 8000bb2:	4b4b      	ldr	r3, [pc, #300]	; (8000ce0 <MX_TIM1_Init+0x180>)
 8000bb4:	22c8      	movs	r2, #200	; 0xc8
 8000bb6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bb8:	4b49      	ldr	r3, [pc, #292]	; (8000ce0 <MX_TIM1_Init+0x180>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bbe:	4b48      	ldr	r3, [pc, #288]	; (8000ce0 <MX_TIM1_Init+0x180>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bc4:	4b46      	ldr	r3, [pc, #280]	; (8000ce0 <MX_TIM1_Init+0x180>)
 8000bc6:	2280      	movs	r2, #128	; 0x80
 8000bc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000bca:	4845      	ldr	r0, [pc, #276]	; (8000ce0 <MX_TIM1_Init+0x180>)
 8000bcc:	f007 fa6f 	bl	80080ae <HAL_TIM_Base_Init>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000bd6:	f000 fc67 	bl	80014a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bde:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000be0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000be4:	4619      	mov	r1, r3
 8000be6:	483e      	ldr	r0, [pc, #248]	; (8000ce0 <MX_TIM1_Init+0x180>)
 8000be8:	f007 fe0a 	bl	8008800 <HAL_TIM_ConfigClockSource>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000bf2:	f000 fc59 	bl	80014a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000bf6:	483a      	ldr	r0, [pc, #232]	; (8000ce0 <MX_TIM1_Init+0x180>)
 8000bf8:	f007 faa8 	bl	800814c <HAL_TIM_PWM_Init>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000c02:	f000 fc51 	bl	80014a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000c06:	2320      	movs	r3, #32
 8000c08:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000c0a:	2380      	movs	r3, #128	; 0x80
 8000c0c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c0e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c12:	4619      	mov	r1, r3
 8000c14:	4832      	ldr	r0, [pc, #200]	; (8000ce0 <MX_TIM1_Init+0x180>)
 8000c16:	f008 faab 	bl	8009170 <HAL_TIMEx_MasterConfigSynchronization>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000c20:	f000 fc42 	bl	80014a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c24:	2360      	movs	r3, #96	; 0x60
 8000c26:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c30:	2300      	movs	r3, #0
 8000c32:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c34:	2300      	movs	r3, #0
 8000c36:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c44:	2200      	movs	r2, #0
 8000c46:	4619      	mov	r1, r3
 8000c48:	4825      	ldr	r0, [pc, #148]	; (8000ce0 <MX_TIM1_Init+0x180>)
 8000c4a:	f007 fd13 	bl	8008674 <HAL_TIM_PWM_ConfigChannel>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000c54:	f000 fc28 	bl	80014a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5c:	2204      	movs	r2, #4
 8000c5e:	4619      	mov	r1, r3
 8000c60:	481f      	ldr	r0, [pc, #124]	; (8000ce0 <MX_TIM1_Init+0x180>)
 8000c62:	f007 fd07 	bl	8008674 <HAL_TIM_PWM_ConfigChannel>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000c6c:	f000 fc1c 	bl	80014a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c74:	2208      	movs	r2, #8
 8000c76:	4619      	mov	r1, r3
 8000c78:	4819      	ldr	r0, [pc, #100]	; (8000ce0 <MX_TIM1_Init+0x180>)
 8000c7a:	f007 fcfb 	bl	8008674 <HAL_TIM_PWM_ConfigChannel>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000c84:	f000 fc10 	bl	80014a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c8c:	220c      	movs	r2, #12
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4813      	ldr	r0, [pc, #76]	; (8000ce0 <MX_TIM1_Init+0x180>)
 8000c92:	f007 fcef 	bl	8008674 <HAL_TIM_PWM_ConfigChannel>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000c9c:	f000 fc04 	bl	80014a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cb8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000cbe:	1d3b      	adds	r3, r7, #4
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4807      	ldr	r0, [pc, #28]	; (8000ce0 <MX_TIM1_Init+0x180>)
 8000cc4:	f008 fad0 	bl	8009268 <HAL_TIMEx_ConfigBreakDeadTime>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8000cce:	f000 fbeb 	bl	80014a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000cd2:	4803      	ldr	r0, [pc, #12]	; (8000ce0 <MX_TIM1_Init+0x180>)
 8000cd4:	f000 fe6e 	bl	80019b4 <HAL_TIM_MspPostInit>

}
 8000cd8:	bf00      	nop
 8000cda:	3758      	adds	r7, #88	; 0x58
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	200064b4 	.word	0x200064b4
 8000ce4:	40010000 	.word	0x40010000

08000ce8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b092      	sub	sp, #72	; 0x48
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
 8000cf8:	609a      	str	r2, [r3, #8]
 8000cfa:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000cfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d0c:	f107 031c 	add.w	r3, r7, #28
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d16:	463b      	mov	r3, r7
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
 8000d22:	611a      	str	r2, [r3, #16]
 8000d24:	615a      	str	r2, [r3, #20]
 8000d26:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d28:	4b3a      	ldr	r3, [pc, #232]	; (8000e14 <MX_TIM2_Init+0x12c>)
 8000d2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d2e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1199;
 8000d30:	4b38      	ldr	r3, [pc, #224]	; (8000e14 <MX_TIM2_Init+0x12c>)
 8000d32:	f240 42af 	movw	r2, #1199	; 0x4af
 8000d36:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8000d38:	4b36      	ldr	r3, [pc, #216]	; (8000e14 <MX_TIM2_Init+0x12c>)
 8000d3a:	2260      	movs	r2, #96	; 0x60
 8000d3c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200;
 8000d3e:	4b35      	ldr	r3, [pc, #212]	; (8000e14 <MX_TIM2_Init+0x12c>)
 8000d40:	22c8      	movs	r2, #200	; 0xc8
 8000d42:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d44:	4b33      	ldr	r3, [pc, #204]	; (8000e14 <MX_TIM2_Init+0x12c>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d4a:	4b32      	ldr	r3, [pc, #200]	; (8000e14 <MX_TIM2_Init+0x12c>)
 8000d4c:	2280      	movs	r2, #128	; 0x80
 8000d4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d50:	4830      	ldr	r0, [pc, #192]	; (8000e14 <MX_TIM2_Init+0x12c>)
 8000d52:	f007 f9ac 	bl	80080ae <HAL_TIM_Base_Init>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000d5c:	f000 fba4 	bl	80014a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d64:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d66:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4829      	ldr	r0, [pc, #164]	; (8000e14 <MX_TIM2_Init+0x12c>)
 8000d6e:	f007 fd47 	bl	8008800 <HAL_TIM_ConfigClockSource>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000d78:	f000 fb96 	bl	80014a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d7c:	4825      	ldr	r0, [pc, #148]	; (8000e14 <MX_TIM2_Init+0x12c>)
 8000d7e:	f007 f9e5 	bl	800814c <HAL_TIM_PWM_Init>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8000d88:	f000 fb8e 	bl	80014a8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000d8c:	2304      	movs	r3, #4
 8000d8e:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000d94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d98:	4619      	mov	r1, r3
 8000d9a:	481e      	ldr	r0, [pc, #120]	; (8000e14 <MX_TIM2_Init+0x12c>)
 8000d9c:	f007 fde7 	bl	800896e <HAL_TIM_SlaveConfigSynchro>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 8000da6:	f000 fb7f 	bl	80014a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000daa:	2300      	movs	r3, #0
 8000dac:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dae:	2300      	movs	r3, #0
 8000db0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000db2:	f107 031c 	add.w	r3, r7, #28
 8000db6:	4619      	mov	r1, r3
 8000db8:	4816      	ldr	r0, [pc, #88]	; (8000e14 <MX_TIM2_Init+0x12c>)
 8000dba:	f008 f9d9 	bl	8009170 <HAL_TIMEx_MasterConfigSynchronization>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8000dc4:	f000 fb70 	bl	80014a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dc8:	2360      	movs	r3, #96	; 0x60
 8000dca:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000dd8:	463b      	mov	r3, r7
 8000dda:	2208      	movs	r2, #8
 8000ddc:	4619      	mov	r1, r3
 8000dde:	480d      	ldr	r0, [pc, #52]	; (8000e14 <MX_TIM2_Init+0x12c>)
 8000de0:	f007 fc48 	bl	8008674 <HAL_TIM_PWM_ConfigChannel>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8000dea:	f000 fb5d 	bl	80014a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000dee:	463b      	mov	r3, r7
 8000df0:	220c      	movs	r2, #12
 8000df2:	4619      	mov	r1, r3
 8000df4:	4807      	ldr	r0, [pc, #28]	; (8000e14 <MX_TIM2_Init+0x12c>)
 8000df6:	f007 fc3d 	bl	8008674 <HAL_TIM_PWM_ConfigChannel>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 8000e00:	f000 fb52 	bl	80014a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e04:	4803      	ldr	r0, [pc, #12]	; (8000e14 <MX_TIM2_Init+0x12c>)
 8000e06:	f000 fdd5 	bl	80019b4 <HAL_TIM_MspPostInit>

}
 8000e0a:	bf00      	nop
 8000e0c:	3748      	adds	r7, #72	; 0x48
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	200067f0 	.word	0x200067f0

08000e18 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b092      	sub	sp, #72	; 0x48
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e1e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	609a      	str	r2, [r3, #8]
 8000e2a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000e2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
 8000e3a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e3c:	f107 031c 	add.w	r3, r7, #28
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e46:	463b      	mov	r3, r7
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
 8000e54:	615a      	str	r2, [r3, #20]
 8000e56:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e58:	4b44      	ldr	r3, [pc, #272]	; (8000f6c <MX_TIM3_Init+0x154>)
 8000e5a:	4a45      	ldr	r2, [pc, #276]	; (8000f70 <MX_TIM3_Init+0x158>)
 8000e5c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000e5e:	4b43      	ldr	r3, [pc, #268]	; (8000f6c <MX_TIM3_Init+0x154>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e64:	4b41      	ldr	r3, [pc, #260]	; (8000f6c <MX_TIM3_Init+0x154>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000e6a:	4b40      	ldr	r3, [pc, #256]	; (8000f6c <MX_TIM3_Init+0x154>)
 8000e6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e70:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e72:	4b3e      	ldr	r3, [pc, #248]	; (8000f6c <MX_TIM3_Init+0x154>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e78:	4b3c      	ldr	r3, [pc, #240]	; (8000f6c <MX_TIM3_Init+0x154>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e7e:	483b      	ldr	r0, [pc, #236]	; (8000f6c <MX_TIM3_Init+0x154>)
 8000e80:	f007 f915 	bl	80080ae <HAL_TIM_Base_Init>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000e8a:	f000 fb0d 	bl	80014a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e92:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e94:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4834      	ldr	r0, [pc, #208]	; (8000f6c <MX_TIM3_Init+0x154>)
 8000e9c:	f007 fcb0 	bl	8008800 <HAL_TIM_ConfigClockSource>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000ea6:	f000 faff 	bl	80014a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000eaa:	4830      	ldr	r0, [pc, #192]	; (8000f6c <MX_TIM3_Init+0x154>)
 8000eac:	f007 f94e 	bl	800814c <HAL_TIM_PWM_Init>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 8000eb6:	f000 faf7 	bl	80014a8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000eba:	2304      	movs	r3, #4
 8000ebc:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000ec2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4828      	ldr	r0, [pc, #160]	; (8000f6c <MX_TIM3_Init+0x154>)
 8000eca:	f007 fd50 	bl	800896e <HAL_TIM_SlaveConfigSynchro>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 8000ed4:	f000 fae8 	bl	80014a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000edc:	2300      	movs	r3, #0
 8000ede:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ee0:	f107 031c 	add.w	r3, r7, #28
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4821      	ldr	r0, [pc, #132]	; (8000f6c <MX_TIM3_Init+0x154>)
 8000ee8:	f008 f942 	bl	8009170 <HAL_TIMEx_MasterConfigSynchronization>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8000ef2:	f000 fad9 	bl	80014a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ef6:	2360      	movs	r3, #96	; 0x60
 8000ef8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000efa:	2300      	movs	r3, #0
 8000efc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000efe:	2300      	movs	r3, #0
 8000f00:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f02:	2300      	movs	r3, #0
 8000f04:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f06:	463b      	mov	r3, r7
 8000f08:	2200      	movs	r2, #0
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4817      	ldr	r0, [pc, #92]	; (8000f6c <MX_TIM3_Init+0x154>)
 8000f0e:	f007 fbb1 	bl	8008674 <HAL_TIM_PWM_ConfigChannel>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8000f18:	f000 fac6 	bl	80014a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f1c:	463b      	mov	r3, r7
 8000f1e:	2204      	movs	r2, #4
 8000f20:	4619      	mov	r1, r3
 8000f22:	4812      	ldr	r0, [pc, #72]	; (8000f6c <MX_TIM3_Init+0x154>)
 8000f24:	f007 fba6 	bl	8008674 <HAL_TIM_PWM_ConfigChannel>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8000f2e:	f000 fabb 	bl	80014a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f32:	463b      	mov	r3, r7
 8000f34:	2208      	movs	r2, #8
 8000f36:	4619      	mov	r1, r3
 8000f38:	480c      	ldr	r0, [pc, #48]	; (8000f6c <MX_TIM3_Init+0x154>)
 8000f3a:	f007 fb9b 	bl	8008674 <HAL_TIM_PWM_ConfigChannel>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_TIM3_Init+0x130>
  {
    Error_Handler();
 8000f44:	f000 fab0 	bl	80014a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f48:	463b      	mov	r3, r7
 8000f4a:	220c      	movs	r2, #12
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4807      	ldr	r0, [pc, #28]	; (8000f6c <MX_TIM3_Init+0x154>)
 8000f50:	f007 fb90 	bl	8008674 <HAL_TIM_PWM_ConfigChannel>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_TIM3_Init+0x146>
  {
    Error_Handler();
 8000f5a:	f000 faa5 	bl	80014a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f5e:	4803      	ldr	r0, [pc, #12]	; (8000f6c <MX_TIM3_Init+0x154>)
 8000f60:	f000 fd28 	bl	80019b4 <HAL_TIM_MspPostInit>

}
 8000f64:	bf00      	nop
 8000f66:	3748      	adds	r7, #72	; 0x48
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20005fa8 	.word	0x20005fa8
 8000f70:	40000400 	.word	0x40000400

08000f74 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08c      	sub	sp, #48	; 0x30
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f7a:	f107 030c 	add.w	r3, r7, #12
 8000f7e:	2224      	movs	r2, #36	; 0x24
 8000f80:	2100      	movs	r1, #0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f015 feab 	bl	8016cde <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f88:	1d3b      	adds	r3, r7, #4
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f90:	4b20      	ldr	r3, [pc, #128]	; (8001014 <MX_TIM4_Init+0xa0>)
 8000f92:	4a21      	ldr	r2, [pc, #132]	; (8001018 <MX_TIM4_Init+0xa4>)
 8000f94:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000f96:	4b1f      	ldr	r3, [pc, #124]	; (8001014 <MX_TIM4_Init+0xa0>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f9c:	4b1d      	ldr	r3, [pc, #116]	; (8001014 <MX_TIM4_Init+0xa0>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff;
 8000fa2:	4b1c      	ldr	r3, [pc, #112]	; (8001014 <MX_TIM4_Init+0xa0>)
 8000fa4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fa8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000faa:	4b1a      	ldr	r3, [pc, #104]	; (8001014 <MX_TIM4_Init+0xa0>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fb0:	4b18      	ldr	r3, [pc, #96]	; (8001014 <MX_TIM4_Init+0xa0>)
 8000fb2:	2280      	movs	r2, #128	; 0x80
 8000fb4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000fc6:	230a      	movs	r3, #10
 8000fc8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8000fd6:	230a      	movs	r3, #10
 8000fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000fda:	f107 030c 	add.w	r3, r7, #12
 8000fde:	4619      	mov	r1, r3
 8000fe0:	480c      	ldr	r0, [pc, #48]	; (8001014 <MX_TIM4_Init+0xa0>)
 8000fe2:	f007 f975 	bl	80082d0 <HAL_TIM_Encoder_Init>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000fec:	f000 fa5c 	bl	80014a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ff8:	1d3b      	adds	r3, r7, #4
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4805      	ldr	r0, [pc, #20]	; (8001014 <MX_TIM4_Init+0xa0>)
 8000ffe:	f008 f8b7 	bl	8009170 <HAL_TIMEx_MasterConfigSynchronization>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001008:	f000 fa4e 	bl	80014a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800100c:	bf00      	nop
 800100e:	3730      	adds	r7, #48	; 0x30
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20005abc 	.word	0x20005abc
 8001018:	40000800 	.word	0x40000800

0800101c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08c      	sub	sp, #48	; 0x30
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001022:	f107 0320 	add.w	r3, r7, #32
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	609a      	str	r2, [r3, #8]
 800102e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001030:	f107 030c 	add.w	r3, r7, #12
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001040:	1d3b      	adds	r3, r7, #4
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001048:	4b26      	ldr	r3, [pc, #152]	; (80010e4 <MX_TIM8_Init+0xc8>)
 800104a:	4a27      	ldr	r2, [pc, #156]	; (80010e8 <MX_TIM8_Init+0xcc>)
 800104c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 1199;
 800104e:	4b25      	ldr	r3, [pc, #148]	; (80010e4 <MX_TIM8_Init+0xc8>)
 8001050:	f240 42af 	movw	r2, #1199	; 0x4af
 8001054:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001056:	4b23      	ldr	r3, [pc, #140]	; (80010e4 <MX_TIM8_Init+0xc8>)
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 210;
 800105c:	4b21      	ldr	r3, [pc, #132]	; (80010e4 <MX_TIM8_Init+0xc8>)
 800105e:	22d2      	movs	r2, #210	; 0xd2
 8001060:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001062:	4b20      	ldr	r3, [pc, #128]	; (80010e4 <MX_TIM8_Init+0xc8>)
 8001064:	2200      	movs	r2, #0
 8001066:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001068:	4b1e      	ldr	r3, [pc, #120]	; (80010e4 <MX_TIM8_Init+0xc8>)
 800106a:	2200      	movs	r2, #0
 800106c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800106e:	4b1d      	ldr	r3, [pc, #116]	; (80010e4 <MX_TIM8_Init+0xc8>)
 8001070:	2280      	movs	r2, #128	; 0x80
 8001072:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001074:	481b      	ldr	r0, [pc, #108]	; (80010e4 <MX_TIM8_Init+0xc8>)
 8001076:	f007 f81a 	bl	80080ae <HAL_TIM_Base_Init>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_TIM8_Init+0x68>
  {
    Error_Handler();
 8001080:	f000 fa12 	bl	80014a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001084:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001088:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800108a:	f107 0320 	add.w	r3, r7, #32
 800108e:	4619      	mov	r1, r3
 8001090:	4814      	ldr	r0, [pc, #80]	; (80010e4 <MX_TIM8_Init+0xc8>)
 8001092:	f007 fbb5 	bl	8008800 <HAL_TIM_ConfigClockSource>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 800109c:	f000 fa04 	bl	80014a8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80010a0:	2304      	movs	r3, #4
 80010a2:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 80010a8:	f107 030c 	add.w	r3, r7, #12
 80010ac:	4619      	mov	r1, r3
 80010ae:	480d      	ldr	r0, [pc, #52]	; (80010e4 <MX_TIM8_Init+0xc8>)
 80010b0:	f007 fc5d 	bl	800896e <HAL_TIM_SlaveConfigSynchro>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_TIM8_Init+0xa2>
  {
    Error_Handler();
 80010ba:	f000 f9f5 	bl	80014a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80010be:	2320      	movs	r3, #32
 80010c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80010c2:	2380      	movs	r3, #128	; 0x80
 80010c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	4619      	mov	r1, r3
 80010ca:	4806      	ldr	r0, [pc, #24]	; (80010e4 <MX_TIM8_Init+0xc8>)
 80010cc:	f008 f850 	bl	8009170 <HAL_TIMEx_MasterConfigSynchronization>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 80010d6:	f000 f9e7 	bl	80014a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80010da:	bf00      	nop
 80010dc:	3730      	adds	r7, #48	; 0x30
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20005a20 	.word	0x20005a20
 80010e8:	40010400 	.word	0x40010400

080010ec <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b088      	sub	sp, #32
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80010f2:	1d3b      	adds	r3, r7, #4
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
 8001100:	615a      	str	r2, [r3, #20]
 8001102:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001104:	4b1f      	ldr	r3, [pc, #124]	; (8001184 <MX_TIM12_Init+0x98>)
 8001106:	4a20      	ldr	r2, [pc, #128]	; (8001188 <MX_TIM12_Init+0x9c>)
 8001108:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800110a:	4b1e      	ldr	r3, [pc, #120]	; (8001184 <MX_TIM12_Init+0x98>)
 800110c:	2200      	movs	r2, #0
 800110e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001110:	4b1c      	ldr	r3, [pc, #112]	; (8001184 <MX_TIM12_Init+0x98>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8001116:	4b1b      	ldr	r3, [pc, #108]	; (8001184 <MX_TIM12_Init+0x98>)
 8001118:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800111c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800111e:	4b19      	ldr	r3, [pc, #100]	; (8001184 <MX_TIM12_Init+0x98>)
 8001120:	2200      	movs	r2, #0
 8001122:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001124:	4b17      	ldr	r3, [pc, #92]	; (8001184 <MX_TIM12_Init+0x98>)
 8001126:	2200      	movs	r2, #0
 8001128:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800112a:	4816      	ldr	r0, [pc, #88]	; (8001184 <MX_TIM12_Init+0x98>)
 800112c:	f007 f80e 	bl	800814c <HAL_TIM_PWM_Init>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001136:	f000 f9b7 	bl	80014a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800113a:	2360      	movs	r3, #96	; 0x60
 800113c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800113e:	2300      	movs	r3, #0
 8001140:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001142:	2300      	movs	r3, #0
 8001144:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800114a:	1d3b      	adds	r3, r7, #4
 800114c:	2200      	movs	r2, #0
 800114e:	4619      	mov	r1, r3
 8001150:	480c      	ldr	r0, [pc, #48]	; (8001184 <MX_TIM12_Init+0x98>)
 8001152:	f007 fa8f 	bl	8008674 <HAL_TIM_PWM_ConfigChannel>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 800115c:	f000 f9a4 	bl	80014a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	2204      	movs	r2, #4
 8001164:	4619      	mov	r1, r3
 8001166:	4807      	ldr	r0, [pc, #28]	; (8001184 <MX_TIM12_Init+0x98>)
 8001168:	f007 fa84 	bl	8008674 <HAL_TIM_PWM_ConfigChannel>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8001172:	f000 f999 	bl	80014a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001176:	4803      	ldr	r0, [pc, #12]	; (8001184 <MX_TIM12_Init+0x98>)
 8001178:	f000 fc1c 	bl	80019b4 <HAL_TIM_MspPostInit>

}
 800117c:	bf00      	nop
 800117e:	3720      	adds	r7, #32
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20006830 	.word	0x20006830
 8001188:	40001800 	.word	0x40001800

0800118c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001190:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <MX_UART4_Init+0x4c>)
 8001192:	4a12      	ldr	r2, [pc, #72]	; (80011dc <MX_UART4_Init+0x50>)
 8001194:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001196:	4b10      	ldr	r3, [pc, #64]	; (80011d8 <MX_UART4_Init+0x4c>)
 8001198:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800119c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800119e:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <MX_UART4_Init+0x4c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80011a4:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <MX_UART4_Init+0x4c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80011aa:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <MX_UART4_Init+0x4c>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80011b0:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <MX_UART4_Init+0x4c>)
 80011b2:	220c      	movs	r2, #12
 80011b4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011b6:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <MX_UART4_Init+0x4c>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80011bc:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <MX_UART4_Init+0x4c>)
 80011be:	2200      	movs	r2, #0
 80011c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80011c2:	4805      	ldr	r0, [pc, #20]	; (80011d8 <MX_UART4_Init+0x4c>)
 80011c4:	f008 f8b6 	bl	8009334 <HAL_UART_Init>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80011ce:	f000 f96b 	bl	80014a8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20006754 	.word	0x20006754
 80011dc:	40004c00 	.word	0x40004c00

080011e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	607b      	str	r3, [r7, #4]
 80011ea:	4b1b      	ldr	r3, [pc, #108]	; (8001258 <MX_DMA_Init+0x78>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a1a      	ldr	r2, [pc, #104]	; (8001258 <MX_DMA_Init+0x78>)
 80011f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b18      	ldr	r3, [pc, #96]	; (8001258 <MX_DMA_Init+0x78>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011fe:	607b      	str	r3, [r7, #4]
 8001200:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	603b      	str	r3, [r7, #0]
 8001206:	4b14      	ldr	r3, [pc, #80]	; (8001258 <MX_DMA_Init+0x78>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	4a13      	ldr	r2, [pc, #76]	; (8001258 <MX_DMA_Init+0x78>)
 800120c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001210:	6313      	str	r3, [r2, #48]	; 0x30
 8001212:	4b11      	ldr	r3, [pc, #68]	; (8001258 <MX_DMA_Init+0x78>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800121a:	603b      	str	r3, [r7, #0]
 800121c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 6, 0);
 800121e:	2200      	movs	r2, #0
 8001220:	2106      	movs	r1, #6
 8001222:	200d      	movs	r0, #13
 8001224:	f001 fba8 	bl	8002978 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001228:	200d      	movs	r0, #13
 800122a:	f001 fbc1 	bl	80029b0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 6, 0);
 800122e:	2200      	movs	r2, #0
 8001230:	2106      	movs	r1, #6
 8001232:	200f      	movs	r0, #15
 8001234:	f001 fba0 	bl	8002978 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001238:	200f      	movs	r0, #15
 800123a:	f001 fbb9 	bl	80029b0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 7, 0);
 800123e:	2200      	movs	r2, #0
 8001240:	2107      	movs	r1, #7
 8001242:	2038      	movs	r0, #56	; 0x38
 8001244:	f001 fb98 	bl	8002978 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001248:	2038      	movs	r0, #56	; 0x38
 800124a:	f001 fbb1 	bl	80029b0 <HAL_NVIC_EnableIRQ>

}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40023800 	.word	0x40023800

0800125c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08c      	sub	sp, #48	; 0x30
 8001260:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001262:	f107 031c 	add.w	r3, r7, #28
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]
 800126c:	609a      	str	r2, [r3, #8]
 800126e:	60da      	str	r2, [r3, #12]
 8001270:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	61bb      	str	r3, [r7, #24]
 8001276:	4b65      	ldr	r3, [pc, #404]	; (800140c <MX_GPIO_Init+0x1b0>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a64      	ldr	r2, [pc, #400]	; (800140c <MX_GPIO_Init+0x1b0>)
 800127c:	f043 0310 	orr.w	r3, r3, #16
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b62      	ldr	r3, [pc, #392]	; (800140c <MX_GPIO_Init+0x1b0>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0310 	and.w	r3, r3, #16
 800128a:	61bb      	str	r3, [r7, #24]
 800128c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	617b      	str	r3, [r7, #20]
 8001292:	4b5e      	ldr	r3, [pc, #376]	; (800140c <MX_GPIO_Init+0x1b0>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a5d      	ldr	r2, [pc, #372]	; (800140c <MX_GPIO_Init+0x1b0>)
 8001298:	f043 0304 	orr.w	r3, r3, #4
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b5b      	ldr	r3, [pc, #364]	; (800140c <MX_GPIO_Init+0x1b0>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f003 0304 	and.w	r3, r3, #4
 80012a6:	617b      	str	r3, [r7, #20]
 80012a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	613b      	str	r3, [r7, #16]
 80012ae:	4b57      	ldr	r3, [pc, #348]	; (800140c <MX_GPIO_Init+0x1b0>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	4a56      	ldr	r2, [pc, #344]	; (800140c <MX_GPIO_Init+0x1b0>)
 80012b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012b8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ba:	4b54      	ldr	r3, [pc, #336]	; (800140c <MX_GPIO_Init+0x1b0>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012c2:	613b      	str	r3, [r7, #16]
 80012c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	4b50      	ldr	r3, [pc, #320]	; (800140c <MX_GPIO_Init+0x1b0>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	4a4f      	ldr	r2, [pc, #316]	; (800140c <MX_GPIO_Init+0x1b0>)
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	6313      	str	r3, [r2, #48]	; 0x30
 80012d6:	4b4d      	ldr	r3, [pc, #308]	; (800140c <MX_GPIO_Init+0x1b0>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	60bb      	str	r3, [r7, #8]
 80012e6:	4b49      	ldr	r3, [pc, #292]	; (800140c <MX_GPIO_Init+0x1b0>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4a48      	ldr	r2, [pc, #288]	; (800140c <MX_GPIO_Init+0x1b0>)
 80012ec:	f043 0302 	orr.w	r3, r3, #2
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b46      	ldr	r3, [pc, #280]	; (800140c <MX_GPIO_Init+0x1b0>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	60bb      	str	r3, [r7, #8]
 80012fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	607b      	str	r3, [r7, #4]
 8001302:	4b42      	ldr	r3, [pc, #264]	; (800140c <MX_GPIO_Init+0x1b0>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	4a41      	ldr	r2, [pc, #260]	; (800140c <MX_GPIO_Init+0x1b0>)
 8001308:	f043 0308 	orr.w	r3, r3, #8
 800130c:	6313      	str	r3, [r2, #48]	; 0x30
 800130e:	4b3f      	ldr	r3, [pc, #252]	; (800140c <MX_GPIO_Init+0x1b0>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	f003 0308 	and.w	r3, r3, #8
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VOLT_4_SEL0_Pin|VOLT_4_SEL1_Pin|VOLT_4_SEL2_Pin|TURN3A_Pin
 800131a:	2200      	movs	r2, #0
 800131c:	f249 116f 	movw	r1, #37231	; 0x916f
 8001320:	483b      	ldr	r0, [pc, #236]	; (8001410 <MX_GPIO_Init+0x1b4>)
 8001322:	f002 f88b 	bl	800343c <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_12|GPIO_PIN_15|TURN2A_Pin
                          |TURN2B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TURN3B_Pin|GPIO_PIN_12, GPIO_PIN_RESET);
 8001326:	2200      	movs	r2, #0
 8001328:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800132c:	4839      	ldr	r0, [pc, #228]	; (8001414 <MX_GPIO_Init+0x1b8>)
 800132e:	f002 f885 	bl	800343c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
 8001332:	2200      	movs	r2, #0
 8001334:	f248 6140 	movw	r1, #34368	; 0x8640
 8001338:	4837      	ldr	r0, [pc, #220]	; (8001418 <MX_GPIO_Init+0x1bc>)
 800133a:	f002 f87f 	bl	800343c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|VOLT_3_SEL0_Pin|GPIO_PIN_13|TURN1B_Pin
 800133e:	2200      	movs	r2, #0
 8001340:	f243 3134 	movw	r1, #13108	; 0x3334
 8001344:	4835      	ldr	r0, [pc, #212]	; (800141c <MX_GPIO_Init+0x1c0>)
 8001346:	f002 f879 	bl	800343c <HAL_GPIO_WritePin>
                          |TURN1A_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, VOLT_2_SEL2_Pin|VOLT_3_SEL0D9_Pin|VOLT_3_SEL1_Pin|VOLT_3_SEL2_Pin
 800134a:	2200      	movs	r2, #0
 800134c:	f640 71ff 	movw	r1, #4095	; 0xfff
 8001350:	4833      	ldr	r0, [pc, #204]	; (8001420 <MX_GPIO_Init+0x1c4>)
 8001352:	f002 f873 	bl	800343c <HAL_GPIO_WritePin>
                          |VOLT_1_SEL1_Pin|VOLT_1_SEL2_Pin|VOLT_2_SEL0_Pin|VOLT_2_SEL1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : VOLT_4_SEL0_Pin VOLT_4_SEL1_Pin VOLT_4_SEL2_Pin TURN3A_Pin
                           PE8 PE12 PE15 TURN2A_Pin
                           TURN2B_Pin */
  GPIO_InitStruct.Pin = VOLT_4_SEL0_Pin|VOLT_4_SEL1_Pin|VOLT_4_SEL2_Pin|TURN3A_Pin
 8001356:	f249 136f 	movw	r3, #37231	; 0x916f
 800135a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_8|GPIO_PIN_12|GPIO_PIN_15|TURN2A_Pin
                          |TURN2B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135c:	2301      	movs	r3, #1
 800135e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001364:	2300      	movs	r3, #0
 8001366:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001368:	f107 031c 	add.w	r3, r7, #28
 800136c:	4619      	mov	r1, r3
 800136e:	4828      	ldr	r0, [pc, #160]	; (8001410 <MX_GPIO_Init+0x1b4>)
 8001370:	f001 feca 	bl	8003108 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BTN_Pin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 8001374:	2310      	movs	r3, #16
 8001376:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001378:	2300      	movs	r3, #0
 800137a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800137c:	2301      	movs	r3, #1
 800137e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 8001380:	f107 031c 	add.w	r3, r7, #28
 8001384:	4619      	mov	r1, r3
 8001386:	4822      	ldr	r0, [pc, #136]	; (8001410 <MX_GPIO_Init+0x1b4>)
 8001388:	f001 febe 	bl	8003108 <HAL_GPIO_Init>

  /*Configure GPIO pins : TURN3B_Pin PC12 */
  GPIO_InitStruct.Pin = TURN3B_Pin|GPIO_PIN_12;
 800138c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001390:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001392:	2301      	movs	r3, #1
 8001394:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139a:	2300      	movs	r3, #0
 800139c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800139e:	f107 031c 	add.w	r3, r7, #28
 80013a2:	4619      	mov	r1, r3
 80013a4:	481b      	ldr	r0, [pc, #108]	; (8001414 <MX_GPIO_Init+0x1b8>)
 80013a6:	f001 feaf 	bl	8003108 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = LED1_Pin|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
 80013aa:	f248 6340 	movw	r3, #34368	; 0x8640
 80013ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b0:	2301      	movs	r3, #1
 80013b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b8:	2300      	movs	r3, #0
 80013ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013bc:	f107 031c 	add.w	r3, r7, #28
 80013c0:	4619      	mov	r1, r3
 80013c2:	4815      	ldr	r0, [pc, #84]	; (8001418 <MX_GPIO_Init+0x1bc>)
 80013c4:	f001 fea0 	bl	8003108 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 VOLT_3_SEL0_Pin PB13 TURN1B_Pin
                           TURN1A_Pin PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|VOLT_3_SEL0_Pin|GPIO_PIN_13|TURN1B_Pin
 80013c8:	f243 3334 	movw	r3, #13108	; 0x3334
 80013cc:	61fb      	str	r3, [r7, #28]
                          |TURN1A_Pin|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ce:	2301      	movs	r3, #1
 80013d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d6:	2300      	movs	r3, #0
 80013d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013da:	f107 031c 	add.w	r3, r7, #28
 80013de:	4619      	mov	r1, r3
 80013e0:	480e      	ldr	r0, [pc, #56]	; (800141c <MX_GPIO_Init+0x1c0>)
 80013e2:	f001 fe91 	bl	8003108 <HAL_GPIO_Init>

  /*Configure GPIO pins : VOLT_2_SEL2_Pin VOLT_3_SEL0D9_Pin VOLT_3_SEL1_Pin VOLT_3_SEL2_Pin
                           VOLT_0_SEL0_Pin VOLT_0_SEL1_Pin VOLT_0_SEL2_Pin VOLT_1_SEL0_Pin
                           VOLT_1_SEL1_Pin VOLT_1_SEL2_Pin VOLT_2_SEL0_Pin VOLT_2_SEL1_Pin */
  GPIO_InitStruct.Pin = VOLT_2_SEL2_Pin|VOLT_3_SEL0D9_Pin|VOLT_3_SEL1_Pin|VOLT_3_SEL2_Pin
 80013e6:	f640 73ff 	movw	r3, #4095	; 0xfff
 80013ea:	61fb      	str	r3, [r7, #28]
                          |VOLT_0_SEL0_Pin|VOLT_0_SEL1_Pin|VOLT_0_SEL2_Pin|VOLT_1_SEL0_Pin
                          |VOLT_1_SEL1_Pin|VOLT_1_SEL2_Pin|VOLT_2_SEL0_Pin|VOLT_2_SEL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ec:	2301      	movs	r3, #1
 80013ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f4:	2300      	movs	r3, #0
 80013f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013f8:	f107 031c 	add.w	r3, r7, #28
 80013fc:	4619      	mov	r1, r3
 80013fe:	4808      	ldr	r0, [pc, #32]	; (8001420 <MX_GPIO_Init+0x1c4>)
 8001400:	f001 fe82 	bl	8003108 <HAL_GPIO_Init>

}
 8001404:	bf00      	nop
 8001406:	3730      	adds	r7, #48	; 0x30
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40023800 	.word	0x40023800
 8001410:	40021000 	.word	0x40021000
 8001414:	40020800 	.word	0x40020800
 8001418:	40020000 	.word	0x40020000
 800141c:	40020400 	.word	0x40020400
 8001420:	40020c00 	.word	0x40020c00

08001424 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a16      	ldr	r2, [pc, #88]	; (800148c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d101      	bne.n	800143a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001436:	f000 fdcf 	bl	8001fd8 <HAL_IncTick>
		  xTaskNotifyFromISR(uiTaskHandle, NOTIF_TICKUI, eSetBits, &higher);
		  portYIELD_FROM_ISR(higher);
	  }
  }
  */
  if (htim->Instance == TIM8) {
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a14      	ldr	r2, [pc, #80]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d104      	bne.n	800144e <HAL_TIM_PeriodElapsedCallback+0x2a>
		  ina3221_trigger_conversion();
		  //BaseType_t higher=0;
		  //xTaskNotifyFromISR(ctrlTaskHandle, NOTIF_TIM8, eSetBits, &higher);
		  //portYIELD_FROM_ISR(higher);
	  } else {
		  itm_debug1(DBG_TIM, "tim8",0);
 8001444:	2200      	movs	r2, #0
 8001446:	4913      	ldr	r1, [pc, #76]	; (8001494 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001448:	2001      	movs	r0, #1
 800144a:	f7ff f8d5 	bl	80005f8 <itm_debug1>
	  }
  }
  if (htim->Instance == TIM1) {
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a11      	ldr	r2, [pc, #68]	; (8001498 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d115      	bne.n	8001484 <HAL_TIM_PeriodElapsedCallback+0x60>
	  uint32_t t1 = __HAL_TIM_GET_COUNTER(&htim1);
 8001458:	4b10      	ldr	r3, [pc, #64]	; (800149c <HAL_TIM_PeriodElapsedCallback+0x78>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145e:	60fb      	str	r3, [r7, #12]
	  if (/*1||*/ (t1<50)) {
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	2b31      	cmp	r3, #49	; 0x31
 8001464:	d80e      	bhi.n	8001484 <HAL_TIM_PeriodElapsedCallback+0x60>
		  static uint32_t cnt = 0;
		  itm_debug2(DBG_TIM|DBG_INA3221, "tim1",cnt, t1);
 8001466:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	461a      	mov	r2, r3
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	490d      	ldr	r1, [pc, #52]	; (80014a4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001470:	2021      	movs	r0, #33	; 0x21
 8001472:	f7ff f8db 	bl	800062c <itm_debug2>
		  cnt++;
 8001476:	4b0a      	ldr	r3, [pc, #40]	; (80014a0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	3301      	adds	r3, #1
 800147c:	4a08      	ldr	r2, [pc, #32]	; (80014a0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800147e:	6013      	str	r3, [r2, #0]
		  void ina3221_trigger_conversion(void);
		  ina3221_trigger_conversion();
 8001480:	f010 f870 	bl	8011564 <ina3221_trigger_conversion>
	  }
  }
  /* USER CODE END Callback 1 */
}
 8001484:	bf00      	nop
 8001486:	3710      	adds	r7, #16
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40001400 	.word	0x40001400
 8001490:	40010400 	.word	0x40010400
 8001494:	08016f54 	.word	0x08016f54
 8001498:	40010000 	.word	0x40010000
 800149c:	200064b4 	.word	0x200064b4
 80014a0:	20000560 	.word	0x20000560
 80014a4:	08016f5c 	.word	0x08016f5c

080014a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	for (;;) {
 80014ac:	e7fe      	b.n	80014ac <Error_Handler+0x4>
	...

080014b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	607b      	str	r3, [r7, #4]
 80014ba:	4b10      	ldr	r3, [pc, #64]	; (80014fc <HAL_MspInit+0x4c>)
 80014bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014be:	4a0f      	ldr	r2, [pc, #60]	; (80014fc <HAL_MspInit+0x4c>)
 80014c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014c4:	6453      	str	r3, [r2, #68]	; 0x44
 80014c6:	4b0d      	ldr	r3, [pc, #52]	; (80014fc <HAL_MspInit+0x4c>)
 80014c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ce:	607b      	str	r3, [r7, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	603b      	str	r3, [r7, #0]
 80014d6:	4b09      	ldr	r3, [pc, #36]	; (80014fc <HAL_MspInit+0x4c>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	4a08      	ldr	r2, [pc, #32]	; (80014fc <HAL_MspInit+0x4c>)
 80014dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e0:	6413      	str	r3, [r2, #64]	; 0x40
 80014e2:	4b06      	ldr	r3, [pc, #24]	; (80014fc <HAL_MspInit+0x4c>)
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ea:	603b      	str	r3, [r7, #0]
 80014ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ee:	bf00      	nop
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	40023800 	.word	0x40023800

08001500 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08c      	sub	sp, #48	; 0x30
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001508:	f107 031c 	add.w	r3, r7, #28
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a4a      	ldr	r2, [pc, #296]	; (8001648 <HAL_ADC_MspInit+0x148>)
 800151e:	4293      	cmp	r3, r2
 8001520:	f040 808d 	bne.w	800163e <HAL_ADC_MspInit+0x13e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001524:	2300      	movs	r3, #0
 8001526:	61bb      	str	r3, [r7, #24]
 8001528:	4b48      	ldr	r3, [pc, #288]	; (800164c <HAL_ADC_MspInit+0x14c>)
 800152a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152c:	4a47      	ldr	r2, [pc, #284]	; (800164c <HAL_ADC_MspInit+0x14c>)
 800152e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001532:	6453      	str	r3, [r2, #68]	; 0x44
 8001534:	4b45      	ldr	r3, [pc, #276]	; (800164c <HAL_ADC_MspInit+0x14c>)
 8001536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800153c:	61bb      	str	r3, [r7, #24]
 800153e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]
 8001544:	4b41      	ldr	r3, [pc, #260]	; (800164c <HAL_ADC_MspInit+0x14c>)
 8001546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001548:	4a40      	ldr	r2, [pc, #256]	; (800164c <HAL_ADC_MspInit+0x14c>)
 800154a:	f043 0304 	orr.w	r3, r3, #4
 800154e:	6313      	str	r3, [r2, #48]	; 0x30
 8001550:	4b3e      	ldr	r3, [pc, #248]	; (800164c <HAL_ADC_MspInit+0x14c>)
 8001552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001554:	f003 0304 	and.w	r3, r3, #4
 8001558:	617b      	str	r3, [r7, #20]
 800155a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800155c:	2300      	movs	r3, #0
 800155e:	613b      	str	r3, [r7, #16]
 8001560:	4b3a      	ldr	r3, [pc, #232]	; (800164c <HAL_ADC_MspInit+0x14c>)
 8001562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001564:	4a39      	ldr	r2, [pc, #228]	; (800164c <HAL_ADC_MspInit+0x14c>)
 8001566:	f043 0301 	orr.w	r3, r3, #1
 800156a:	6313      	str	r3, [r2, #48]	; 0x30
 800156c:	4b37      	ldr	r3, [pc, #220]	; (800164c <HAL_ADC_MspInit+0x14c>)
 800156e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	613b      	str	r3, [r7, #16]
 8001576:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001578:	2300      	movs	r3, #0
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	4b33      	ldr	r3, [pc, #204]	; (800164c <HAL_ADC_MspInit+0x14c>)
 800157e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001580:	4a32      	ldr	r2, [pc, #200]	; (800164c <HAL_ADC_MspInit+0x14c>)
 8001582:	f043 0302 	orr.w	r3, r3, #2
 8001586:	6313      	str	r3, [r2, #48]	; 0x30
 8001588:	4b30      	ldr	r3, [pc, #192]	; (800164c <HAL_ADC_MspInit+0x14c>)
 800158a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158c:	f003 0302 	and.w	r3, r3, #2
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = ADC_4_V0_Pin|ADC_4_V1_Pin;
 8001594:	2303      	movs	r3, #3
 8001596:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001598:	2303      	movs	r3, #3
 800159a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a0:	f107 031c 	add.w	r3, r7, #28
 80015a4:	4619      	mov	r1, r3
 80015a6:	482a      	ldr	r0, [pc, #168]	; (8001650 <HAL_ADC_MspInit+0x150>)
 80015a8:	f001 fdae 	bl	8003108 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_0_V0_Pin|GPIO_PIN_1|ADC_1_V0_Pin|ADC_1_V1_Pin
 80015ac:	23bf      	movs	r3, #191	; 0xbf
 80015ae:	61fb      	str	r3, [r7, #28]
                          |ADC_2_V0_Pin|ADC_2_V1_Pin|ADC_3_V0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015b0:	2303      	movs	r3, #3
 80015b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b8:	f107 031c 	add.w	r3, r7, #28
 80015bc:	4619      	mov	r1, r3
 80015be:	4825      	ldr	r0, [pc, #148]	; (8001654 <HAL_ADC_MspInit+0x154>)
 80015c0:	f001 fda2 	bl	8003108 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_3_V1_Pin;
 80015c4:	2301      	movs	r3, #1
 80015c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015c8:	2303      	movs	r3, #3
 80015ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_3_V1_GPIO_Port, &GPIO_InitStruct);
 80015d0:	f107 031c 	add.w	r3, r7, #28
 80015d4:	4619      	mov	r1, r3
 80015d6:	4820      	ldr	r0, [pc, #128]	; (8001658 <HAL_ADC_MspInit+0x158>)
 80015d8:	f001 fd96 	bl	8003108 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80015dc:	4b1f      	ldr	r3, [pc, #124]	; (800165c <HAL_ADC_MspInit+0x15c>)
 80015de:	4a20      	ldr	r2, [pc, #128]	; (8001660 <HAL_ADC_MspInit+0x160>)
 80015e0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80015e2:	4b1e      	ldr	r3, [pc, #120]	; (800165c <HAL_ADC_MspInit+0x15c>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015e8:	4b1c      	ldr	r3, [pc, #112]	; (800165c <HAL_ADC_MspInit+0x15c>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015ee:	4b1b      	ldr	r3, [pc, #108]	; (800165c <HAL_ADC_MspInit+0x15c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80015f4:	4b19      	ldr	r3, [pc, #100]	; (800165c <HAL_ADC_MspInit+0x15c>)
 80015f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015fa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015fc:	4b17      	ldr	r3, [pc, #92]	; (800165c <HAL_ADC_MspInit+0x15c>)
 80015fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001602:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001604:	4b15      	ldr	r3, [pc, #84]	; (800165c <HAL_ADC_MspInit+0x15c>)
 8001606:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800160a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800160c:	4b13      	ldr	r3, [pc, #76]	; (800165c <HAL_ADC_MspInit+0x15c>)
 800160e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001612:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001614:	4b11      	ldr	r3, [pc, #68]	; (800165c <HAL_ADC_MspInit+0x15c>)
 8001616:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800161a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800161c:	4b0f      	ldr	r3, [pc, #60]	; (800165c <HAL_ADC_MspInit+0x15c>)
 800161e:	2200      	movs	r2, #0
 8001620:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001622:	480e      	ldr	r0, [pc, #56]	; (800165c <HAL_ADC_MspInit+0x15c>)
 8001624:	f001 f9d2 	bl	80029cc <HAL_DMA_Init>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <HAL_ADC_MspInit+0x132>
    {
      Error_Handler();
 800162e:	f7ff ff3b 	bl	80014a8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a09      	ldr	r2, [pc, #36]	; (800165c <HAL_ADC_MspInit+0x15c>)
 8001636:	639a      	str	r2, [r3, #56]	; 0x38
 8001638:	4a08      	ldr	r2, [pc, #32]	; (800165c <HAL_ADC_MspInit+0x15c>)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800163e:	bf00      	nop
 8001640:	3730      	adds	r7, #48	; 0x30
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40012000 	.word	0x40012000
 800164c:	40023800 	.word	0x40023800
 8001650:	40020800 	.word	0x40020800
 8001654:	40020000 	.word	0x40020000
 8001658:	40020400 	.word	0x40020400
 800165c:	20006034 	.word	0x20006034
 8001660:	40026410 	.word	0x40026410

08001664 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b08c      	sub	sp, #48	; 0x30
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166c:	f107 031c 	add.w	r3, r7, #28
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
 800167a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a52      	ldr	r2, [pc, #328]	; (80017cc <HAL_I2C_MspInit+0x168>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d13c      	bne.n	8001700 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	61bb      	str	r3, [r7, #24]
 800168a:	4b51      	ldr	r3, [pc, #324]	; (80017d0 <HAL_I2C_MspInit+0x16c>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	4a50      	ldr	r2, [pc, #320]	; (80017d0 <HAL_I2C_MspInit+0x16c>)
 8001690:	f043 0302 	orr.w	r3, r3, #2
 8001694:	6313      	str	r3, [r2, #48]	; 0x30
 8001696:	4b4e      	ldr	r3, [pc, #312]	; (80017d0 <HAL_I2C_MspInit+0x16c>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	61bb      	str	r3, [r7, #24]
 80016a0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016a2:	23c0      	movs	r3, #192	; 0xc0
 80016a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016a6:	2312      	movs	r3, #18
 80016a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016aa:	2301      	movs	r3, #1
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ae:	2303      	movs	r3, #3
 80016b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016b2:	2304      	movs	r3, #4
 80016b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b6:	f107 031c 	add.w	r3, r7, #28
 80016ba:	4619      	mov	r1, r3
 80016bc:	4845      	ldr	r0, [pc, #276]	; (80017d4 <HAL_I2C_MspInit+0x170>)
 80016be:	f001 fd23 	bl	8003108 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	617b      	str	r3, [r7, #20]
 80016c6:	4b42      	ldr	r3, [pc, #264]	; (80017d0 <HAL_I2C_MspInit+0x16c>)
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	4a41      	ldr	r2, [pc, #260]	; (80017d0 <HAL_I2C_MspInit+0x16c>)
 80016cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016d0:	6413      	str	r3, [r2, #64]	; 0x40
 80016d2:	4b3f      	ldr	r3, [pc, #252]	; (80017d0 <HAL_I2C_MspInit+0x16c>)
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016da:	617b      	str	r3, [r7, #20]
 80016dc:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80016de:	2200      	movs	r2, #0
 80016e0:	2100      	movs	r1, #0
 80016e2:	201f      	movs	r0, #31
 80016e4:	f001 f948 	bl	8002978 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80016e8:	201f      	movs	r0, #31
 80016ea:	f001 f961 	bl	80029b0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2100      	movs	r1, #0
 80016f2:	2020      	movs	r0, #32
 80016f4:	f001 f940 	bl	8002978 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80016f8:	2020      	movs	r0, #32
 80016fa:	f001 f959 	bl	80029b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80016fe:	e060      	b.n	80017c2 <HAL_I2C_MspInit+0x15e>
  else if(hi2c->Instance==I2C3)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a34      	ldr	r2, [pc, #208]	; (80017d8 <HAL_I2C_MspInit+0x174>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d15b      	bne.n	80017c2 <HAL_I2C_MspInit+0x15e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	613b      	str	r3, [r7, #16]
 800170e:	4b30      	ldr	r3, [pc, #192]	; (80017d0 <HAL_I2C_MspInit+0x16c>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	4a2f      	ldr	r2, [pc, #188]	; (80017d0 <HAL_I2C_MspInit+0x16c>)
 8001714:	f043 0304 	orr.w	r3, r3, #4
 8001718:	6313      	str	r3, [r2, #48]	; 0x30
 800171a:	4b2d      	ldr	r3, [pc, #180]	; (80017d0 <HAL_I2C_MspInit+0x16c>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	f003 0304 	and.w	r3, r3, #4
 8001722:	613b      	str	r3, [r7, #16]
 8001724:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	4b29      	ldr	r3, [pc, #164]	; (80017d0 <HAL_I2C_MspInit+0x16c>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	4a28      	ldr	r2, [pc, #160]	; (80017d0 <HAL_I2C_MspInit+0x16c>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	6313      	str	r3, [r2, #48]	; 0x30
 8001736:	4b26      	ldr	r3, [pc, #152]	; (80017d0 <HAL_I2C_MspInit+0x16c>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001742:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001746:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001748:	2312      	movs	r3, #18
 800174a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800174c:	2301      	movs	r3, #1
 800174e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001750:	2303      	movs	r3, #3
 8001752:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001754:	2304      	movs	r3, #4
 8001756:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001758:	f107 031c 	add.w	r3, r7, #28
 800175c:	4619      	mov	r1, r3
 800175e:	481f      	ldr	r0, [pc, #124]	; (80017dc <HAL_I2C_MspInit+0x178>)
 8001760:	f001 fcd2 	bl	8003108 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001764:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001768:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800176a:	2312      	movs	r3, #18
 800176c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800176e:	2301      	movs	r3, #1
 8001770:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001772:	2303      	movs	r3, #3
 8001774:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001776:	2304      	movs	r3, #4
 8001778:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177a:	f107 031c 	add.w	r3, r7, #28
 800177e:	4619      	mov	r1, r3
 8001780:	4817      	ldr	r0, [pc, #92]	; (80017e0 <HAL_I2C_MspInit+0x17c>)
 8001782:	f001 fcc1 	bl	8003108 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	60bb      	str	r3, [r7, #8]
 800178a:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <HAL_I2C_MspInit+0x16c>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	4a10      	ldr	r2, [pc, #64]	; (80017d0 <HAL_I2C_MspInit+0x16c>)
 8001790:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001794:	6413      	str	r3, [r2, #64]	; 0x40
 8001796:	4b0e      	ldr	r3, [pc, #56]	; (80017d0 <HAL_I2C_MspInit+0x16c>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800179e:	60bb      	str	r3, [r7, #8]
 80017a0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 80017a2:	2200      	movs	r2, #0
 80017a4:	2100      	movs	r1, #0
 80017a6:	2048      	movs	r0, #72	; 0x48
 80017a8:	f001 f8e6 	bl	8002978 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80017ac:	2048      	movs	r0, #72	; 0x48
 80017ae:	f001 f8ff 	bl	80029b0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 80017b2:	2200      	movs	r2, #0
 80017b4:	2100      	movs	r1, #0
 80017b6:	2049      	movs	r0, #73	; 0x49
 80017b8:	f001 f8de 	bl	8002978 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 80017bc:	2049      	movs	r0, #73	; 0x49
 80017be:	f001 f8f7 	bl	80029b0 <HAL_NVIC_EnableIRQ>
}
 80017c2:	bf00      	nop
 80017c4:	3730      	adds	r7, #48	; 0x30
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40005400 	.word	0x40005400
 80017d0:	40023800 	.word	0x40023800
 80017d4:	40020400 	.word	0x40020400
 80017d8:	40005c00 	.word	0x40005c00
 80017dc:	40020800 	.word	0x40020800
 80017e0:	40020000 	.word	0x40020000

080017e4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a05      	ldr	r2, [pc, #20]	; (8001808 <HAL_RTC_MspInit+0x24>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d102      	bne.n	80017fc <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80017f6:	4b05      	ldr	r3, [pc, #20]	; (800180c <HAL_RTC_MspInit+0x28>)
 80017f8:	2201      	movs	r2, #1
 80017fa:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80017fc:	bf00      	nop
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	40002800 	.word	0x40002800
 800180c:	42470e3c 	.word	0x42470e3c

08001810 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a2c      	ldr	r2, [pc, #176]	; (80018d0 <HAL_TIM_Base_MspInit+0xc0>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d116      	bne.n	8001850 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	617b      	str	r3, [r7, #20]
 8001826:	4b2b      	ldr	r3, [pc, #172]	; (80018d4 <HAL_TIM_Base_MspInit+0xc4>)
 8001828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182a:	4a2a      	ldr	r2, [pc, #168]	; (80018d4 <HAL_TIM_Base_MspInit+0xc4>)
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	6453      	str	r3, [r2, #68]	; 0x44
 8001832:	4b28      	ldr	r3, [pc, #160]	; (80018d4 <HAL_TIM_Base_MspInit+0xc4>)
 8001834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	617b      	str	r3, [r7, #20]
 800183c:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 7, 0);
 800183e:	2200      	movs	r2, #0
 8001840:	2107      	movs	r1, #7
 8001842:	2019      	movs	r0, #25
 8001844:	f001 f898 	bl	8002978 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001848:	2019      	movs	r0, #25
 800184a:	f001 f8b1 	bl	80029b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800184e:	e03a      	b.n	80018c6 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM2)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001858:	d10e      	bne.n	8001878 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	613b      	str	r3, [r7, #16]
 800185e:	4b1d      	ldr	r3, [pc, #116]	; (80018d4 <HAL_TIM_Base_MspInit+0xc4>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	4a1c      	ldr	r2, [pc, #112]	; (80018d4 <HAL_TIM_Base_MspInit+0xc4>)
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	6413      	str	r3, [r2, #64]	; 0x40
 800186a:	4b1a      	ldr	r3, [pc, #104]	; (80018d4 <HAL_TIM_Base_MspInit+0xc4>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	613b      	str	r3, [r7, #16]
 8001874:	693b      	ldr	r3, [r7, #16]
}
 8001876:	e026      	b.n	80018c6 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a16      	ldr	r2, [pc, #88]	; (80018d8 <HAL_TIM_Base_MspInit+0xc8>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d10e      	bne.n	80018a0 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	60fb      	str	r3, [r7, #12]
 8001886:	4b13      	ldr	r3, [pc, #76]	; (80018d4 <HAL_TIM_Base_MspInit+0xc4>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	4a12      	ldr	r2, [pc, #72]	; (80018d4 <HAL_TIM_Base_MspInit+0xc4>)
 800188c:	f043 0302 	orr.w	r3, r3, #2
 8001890:	6413      	str	r3, [r2, #64]	; 0x40
 8001892:	4b10      	ldr	r3, [pc, #64]	; (80018d4 <HAL_TIM_Base_MspInit+0xc4>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	68fb      	ldr	r3, [r7, #12]
}
 800189e:	e012      	b.n	80018c6 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM8)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a0d      	ldr	r2, [pc, #52]	; (80018dc <HAL_TIM_Base_MspInit+0xcc>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d10d      	bne.n	80018c6 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	60bb      	str	r3, [r7, #8]
 80018ae:	4b09      	ldr	r3, [pc, #36]	; (80018d4 <HAL_TIM_Base_MspInit+0xc4>)
 80018b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b2:	4a08      	ldr	r2, [pc, #32]	; (80018d4 <HAL_TIM_Base_MspInit+0xc4>)
 80018b4:	f043 0302 	orr.w	r3, r3, #2
 80018b8:	6453      	str	r3, [r2, #68]	; 0x44
 80018ba:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <HAL_TIM_Base_MspInit+0xc4>)
 80018bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	60bb      	str	r3, [r7, #8]
 80018c4:	68bb      	ldr	r3, [r7, #8]
}
 80018c6:	bf00      	nop
 80018c8:	3718      	adds	r7, #24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40010000 	.word	0x40010000
 80018d4:	40023800 	.word	0x40023800
 80018d8:	40000400 	.word	0x40000400
 80018dc:	40010400 	.word	0x40010400

080018e0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b08a      	sub	sp, #40	; 0x28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e8:	f107 0314 	add.w	r3, r7, #20
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a19      	ldr	r2, [pc, #100]	; (8001964 <HAL_TIM_Encoder_MspInit+0x84>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d12c      	bne.n	800195c <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	613b      	str	r3, [r7, #16]
 8001906:	4b18      	ldr	r3, [pc, #96]	; (8001968 <HAL_TIM_Encoder_MspInit+0x88>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	4a17      	ldr	r2, [pc, #92]	; (8001968 <HAL_TIM_Encoder_MspInit+0x88>)
 800190c:	f043 0304 	orr.w	r3, r3, #4
 8001910:	6413      	str	r3, [r2, #64]	; 0x40
 8001912:	4b15      	ldr	r3, [pc, #84]	; (8001968 <HAL_TIM_Encoder_MspInit+0x88>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	f003 0304 	and.w	r3, r3, #4
 800191a:	613b      	str	r3, [r7, #16]
 800191c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	4b11      	ldr	r3, [pc, #68]	; (8001968 <HAL_TIM_Encoder_MspInit+0x88>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	4a10      	ldr	r2, [pc, #64]	; (8001968 <HAL_TIM_Encoder_MspInit+0x88>)
 8001928:	f043 0308 	orr.w	r3, r3, #8
 800192c:	6313      	str	r3, [r2, #48]	; 0x30
 800192e:	4b0e      	ldr	r3, [pc, #56]	; (8001968 <HAL_TIM_Encoder_MspInit+0x88>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	f003 0308 	and.w	r3, r3, #8
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800193a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800193e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001940:	2302      	movs	r3, #2
 8001942:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001944:	2301      	movs	r3, #1
 8001946:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001948:	2300      	movs	r3, #0
 800194a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800194c:	2302      	movs	r3, #2
 800194e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001950:	f107 0314 	add.w	r3, r7, #20
 8001954:	4619      	mov	r1, r3
 8001956:	4805      	ldr	r0, [pc, #20]	; (800196c <HAL_TIM_Encoder_MspInit+0x8c>)
 8001958:	f001 fbd6 	bl	8003108 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800195c:	bf00      	nop
 800195e:	3728      	adds	r7, #40	; 0x28
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40000800 	.word	0x40000800
 8001968:	40023800 	.word	0x40023800
 800196c:	40020c00 	.word	0x40020c00

08001970 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a0b      	ldr	r2, [pc, #44]	; (80019ac <HAL_TIM_PWM_MspInit+0x3c>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d10d      	bne.n	800199e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	4b0a      	ldr	r3, [pc, #40]	; (80019b0 <HAL_TIM_PWM_MspInit+0x40>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	4a09      	ldr	r2, [pc, #36]	; (80019b0 <HAL_TIM_PWM_MspInit+0x40>)
 800198c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001990:	6413      	str	r3, [r2, #64]	; 0x40
 8001992:	4b07      	ldr	r3, [pc, #28]	; (80019b0 <HAL_TIM_PWM_MspInit+0x40>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800199e:	bf00      	nop
 80019a0:	3714      	adds	r7, #20
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	40001800 	.word	0x40001800
 80019b0:	40023800 	.word	0x40023800

080019b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b08c      	sub	sp, #48	; 0x30
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019bc:	f107 031c 	add.w	r3, r7, #28
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	605a      	str	r2, [r3, #4]
 80019c6:	609a      	str	r2, [r3, #8]
 80019c8:	60da      	str	r2, [r3, #12]
 80019ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a61      	ldr	r2, [pc, #388]	; (8001b58 <HAL_TIM_MspPostInit+0x1a4>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d130      	bne.n	8001a38 <HAL_TIM_MspPostInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	61bb      	str	r3, [r7, #24]
 80019da:	4b60      	ldr	r3, [pc, #384]	; (8001b5c <HAL_TIM_MspPostInit+0x1a8>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	4a5f      	ldr	r2, [pc, #380]	; (8001b5c <HAL_TIM_MspPostInit+0x1a8>)
 80019e0:	f043 0310 	orr.w	r3, r3, #16
 80019e4:	6313      	str	r3, [r2, #48]	; 0x30
 80019e6:	4b5d      	ldr	r3, [pc, #372]	; (8001b5c <HAL_TIM_MspPostInit+0x1a8>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	f003 0310 	and.w	r3, r3, #16
 80019ee:	61bb      	str	r3, [r7, #24]
 80019f0:	69bb      	ldr	r3, [r7, #24]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = PWM_0_1_Pin|PWM_0_1E11_Pin;
 80019f2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80019f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f8:	2302      	movs	r3, #2
 80019fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a00:	2300      	movs	r3, #0
 8001a02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a04:	2301      	movs	r3, #1
 8001a06:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a08:	f107 031c 	add.w	r3, r7, #28
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4854      	ldr	r0, [pc, #336]	; (8001b60 <HAL_TIM_MspPostInit+0x1ac>)
 8001a10:	f001 fb7a 	bl	8003108 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_1_0_Pin|PWM_1_1_Pin;
 8001a14:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001a18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001a22:	2301      	movs	r3, #1
 8001a24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a26:	2301      	movs	r3, #1
 8001a28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a2a:	f107 031c 	add.w	r3, r7, #28
 8001a2e:	4619      	mov	r1, r3
 8001a30:	484b      	ldr	r0, [pc, #300]	; (8001b60 <HAL_TIM_MspPostInit+0x1ac>)
 8001a32:	f001 fb69 	bl	8003108 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001a36:	e08b      	b.n	8001b50 <HAL_TIM_MspPostInit+0x19c>
  else if(htim->Instance==TIM2)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a40:	d11f      	bne.n	8001a82 <HAL_TIM_MspPostInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	617b      	str	r3, [r7, #20]
 8001a46:	4b45      	ldr	r3, [pc, #276]	; (8001b5c <HAL_TIM_MspPostInit+0x1a8>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	4a44      	ldr	r2, [pc, #272]	; (8001b5c <HAL_TIM_MspPostInit+0x1a8>)
 8001a4c:	f043 0302 	orr.w	r3, r3, #2
 8001a50:	6313      	str	r3, [r2, #48]	; 0x30
 8001a52:	4b42      	ldr	r3, [pc, #264]	; (8001b5c <HAL_TIM_MspPostInit+0x1a8>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	617b      	str	r3, [r7, #20]
 8001a5c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PWM_2_0_Pin|PWM_2_1_Pin;
 8001a5e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a64:	2302      	movs	r3, #2
 8001a66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a70:	2301      	movs	r3, #1
 8001a72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a74:	f107 031c 	add.w	r3, r7, #28
 8001a78:	4619      	mov	r1, r3
 8001a7a:	483a      	ldr	r0, [pc, #232]	; (8001b64 <HAL_TIM_MspPostInit+0x1b0>)
 8001a7c:	f001 fb44 	bl	8003108 <HAL_GPIO_Init>
}
 8001a80:	e066      	b.n	8001b50 <HAL_TIM_MspPostInit+0x19c>
  else if(htim->Instance==TIM3)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a38      	ldr	r2, [pc, #224]	; (8001b68 <HAL_TIM_MspPostInit+0x1b4>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d13d      	bne.n	8001b08 <HAL_TIM_MspPostInit+0x154>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	613b      	str	r3, [r7, #16]
 8001a90:	4b32      	ldr	r3, [pc, #200]	; (8001b5c <HAL_TIM_MspPostInit+0x1a8>)
 8001a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a94:	4a31      	ldr	r2, [pc, #196]	; (8001b5c <HAL_TIM_MspPostInit+0x1a8>)
 8001a96:	f043 0302 	orr.w	r3, r3, #2
 8001a9a:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9c:	4b2f      	ldr	r3, [pc, #188]	; (8001b5c <HAL_TIM_MspPostInit+0x1a8>)
 8001a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa0:	f003 0302 	and.w	r3, r3, #2
 8001aa4:	613b      	str	r3, [r7, #16]
 8001aa6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	4b2b      	ldr	r3, [pc, #172]	; (8001b5c <HAL_TIM_MspPostInit+0x1a8>)
 8001aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab0:	4a2a      	ldr	r2, [pc, #168]	; (8001b5c <HAL_TIM_MspPostInit+0x1a8>)
 8001ab2:	f043 0304 	orr.w	r3, r3, #4
 8001ab6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab8:	4b28      	ldr	r3, [pc, #160]	; (8001b5c <HAL_TIM_MspPostInit+0x1a8>)
 8001aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abc:	f003 0304 	and.w	r3, r3, #4
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_4_1_Pin;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PWM_4_1_GPIO_Port, &GPIO_InitStruct);
 8001ad8:	f107 031c 	add.w	r3, r7, #28
 8001adc:	4619      	mov	r1, r3
 8001ade:	4821      	ldr	r0, [pc, #132]	; (8001b64 <HAL_TIM_MspPostInit+0x1b0>)
 8001ae0:	f001 fb12 	bl	8003108 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_3_0_Pin|PWM_3_1_Pin|PWM_4_0_Pin;
 8001ae4:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001ae8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aea:	2302      	movs	r3, #2
 8001aec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aee:	2300      	movs	r3, #0
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af2:	2300      	movs	r3, #0
 8001af4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001af6:	2302      	movs	r3, #2
 8001af8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001afa:	f107 031c 	add.w	r3, r7, #28
 8001afe:	4619      	mov	r1, r3
 8001b00:	481a      	ldr	r0, [pc, #104]	; (8001b6c <HAL_TIM_MspPostInit+0x1b8>)
 8001b02:	f001 fb01 	bl	8003108 <HAL_GPIO_Init>
}
 8001b06:	e023      	b.n	8001b50 <HAL_TIM_MspPostInit+0x19c>
  else if(htim->Instance==TIM12)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a18      	ldr	r2, [pc, #96]	; (8001b70 <HAL_TIM_MspPostInit+0x1bc>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d11e      	bne.n	8001b50 <HAL_TIM_MspPostInit+0x19c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	60bb      	str	r3, [r7, #8]
 8001b16:	4b11      	ldr	r3, [pc, #68]	; (8001b5c <HAL_TIM_MspPostInit+0x1a8>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	4a10      	ldr	r2, [pc, #64]	; (8001b5c <HAL_TIM_MspPostInit+0x1a8>)
 8001b1c:	f043 0302 	orr.w	r3, r3, #2
 8001b20:	6313      	str	r3, [r2, #48]	; 0x30
 8001b22:	4b0e      	ldr	r3, [pc, #56]	; (8001b5c <HAL_TIM_MspPostInit+0x1a8>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	60bb      	str	r3, [r7, #8]
 8001b2c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001b2e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001b32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b34:	2302      	movs	r3, #2
 8001b36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001b40:	2309      	movs	r3, #9
 8001b42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b44:	f107 031c 	add.w	r3, r7, #28
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4806      	ldr	r0, [pc, #24]	; (8001b64 <HAL_TIM_MspPostInit+0x1b0>)
 8001b4c:	f001 fadc 	bl	8003108 <HAL_GPIO_Init>
}
 8001b50:	bf00      	nop
 8001b52:	3730      	adds	r7, #48	; 0x30
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40010000 	.word	0x40010000
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	40021000 	.word	0x40021000
 8001b64:	40020400 	.word	0x40020400
 8001b68:	40000400 	.word	0x40000400
 8001b6c:	40020800 	.word	0x40020800
 8001b70:	40001800 	.word	0x40001800

08001b74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b08a      	sub	sp, #40	; 0x28
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b7c:	f107 0314 	add.w	r3, r7, #20
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	605a      	str	r2, [r3, #4]
 8001b86:	609a      	str	r2, [r3, #8]
 8001b88:	60da      	str	r2, [r3, #12]
 8001b8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a4d      	ldr	r2, [pc, #308]	; (8001cc8 <HAL_UART_MspInit+0x154>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	f040 8093 	bne.w	8001cbe <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001b98:	2300      	movs	r3, #0
 8001b9a:	613b      	str	r3, [r7, #16]
 8001b9c:	4b4b      	ldr	r3, [pc, #300]	; (8001ccc <HAL_UART_MspInit+0x158>)
 8001b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba0:	4a4a      	ldr	r2, [pc, #296]	; (8001ccc <HAL_UART_MspInit+0x158>)
 8001ba2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001ba6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ba8:	4b48      	ldr	r3, [pc, #288]	; (8001ccc <HAL_UART_MspInit+0x158>)
 8001baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bb0:	613b      	str	r3, [r7, #16]
 8001bb2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	4b44      	ldr	r3, [pc, #272]	; (8001ccc <HAL_UART_MspInit+0x158>)
 8001bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbc:	4a43      	ldr	r2, [pc, #268]	; (8001ccc <HAL_UART_MspInit+0x158>)
 8001bbe:	f043 0304 	orr.w	r3, r3, #4
 8001bc2:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc4:	4b41      	ldr	r3, [pc, #260]	; (8001ccc <HAL_UART_MspInit+0x158>)
 8001bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc8:	f003 0304 	and.w	r3, r3, #4
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001bd0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001bd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bde:	2303      	movs	r3, #3
 8001be0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001be2:	2308      	movs	r3, #8
 8001be4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001be6:	f107 0314 	add.w	r3, r7, #20
 8001bea:	4619      	mov	r1, r3
 8001bec:	4838      	ldr	r0, [pc, #224]	; (8001cd0 <HAL_UART_MspInit+0x15c>)
 8001bee:	f001 fa8b 	bl	8003108 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001bf2:	4b38      	ldr	r3, [pc, #224]	; (8001cd4 <HAL_UART_MspInit+0x160>)
 8001bf4:	4a38      	ldr	r2, [pc, #224]	; (8001cd8 <HAL_UART_MspInit+0x164>)
 8001bf6:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001bf8:	4b36      	ldr	r3, [pc, #216]	; (8001cd4 <HAL_UART_MspInit+0x160>)
 8001bfa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bfe:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c00:	4b34      	ldr	r3, [pc, #208]	; (8001cd4 <HAL_UART_MspInit+0x160>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c06:	4b33      	ldr	r3, [pc, #204]	; (8001cd4 <HAL_UART_MspInit+0x160>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c0c:	4b31      	ldr	r3, [pc, #196]	; (8001cd4 <HAL_UART_MspInit+0x160>)
 8001c0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c12:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c14:	4b2f      	ldr	r3, [pc, #188]	; (8001cd4 <HAL_UART_MspInit+0x160>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c1a:	4b2e      	ldr	r3, [pc, #184]	; (8001cd4 <HAL_UART_MspInit+0x160>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001c20:	4b2c      	ldr	r3, [pc, #176]	; (8001cd4 <HAL_UART_MspInit+0x160>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001c26:	4b2b      	ldr	r3, [pc, #172]	; (8001cd4 <HAL_UART_MspInit+0x160>)
 8001c28:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c2c:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c2e:	4b29      	ldr	r3, [pc, #164]	; (8001cd4 <HAL_UART_MspInit+0x160>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001c34:	4827      	ldr	r0, [pc, #156]	; (8001cd4 <HAL_UART_MspInit+0x160>)
 8001c36:	f000 fec9 	bl	80029cc <HAL_DMA_Init>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8001c40:	f7ff fc32 	bl	80014a8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4a23      	ldr	r2, [pc, #140]	; (8001cd4 <HAL_UART_MspInit+0x160>)
 8001c48:	635a      	str	r2, [r3, #52]	; 0x34
 8001c4a:	4a22      	ldr	r2, [pc, #136]	; (8001cd4 <HAL_UART_MspInit+0x160>)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8001c50:	4b22      	ldr	r3, [pc, #136]	; (8001cdc <HAL_UART_MspInit+0x168>)
 8001c52:	4a23      	ldr	r2, [pc, #140]	; (8001ce0 <HAL_UART_MspInit+0x16c>)
 8001c54:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8001c56:	4b21      	ldr	r3, [pc, #132]	; (8001cdc <HAL_UART_MspInit+0x168>)
 8001c58:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c5c:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c5e:	4b1f      	ldr	r3, [pc, #124]	; (8001cdc <HAL_UART_MspInit+0x168>)
 8001c60:	2240      	movs	r2, #64	; 0x40
 8001c62:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c64:	4b1d      	ldr	r3, [pc, #116]	; (8001cdc <HAL_UART_MspInit+0x168>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c6a:	4b1c      	ldr	r3, [pc, #112]	; (8001cdc <HAL_UART_MspInit+0x168>)
 8001c6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c70:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c72:	4b1a      	ldr	r3, [pc, #104]	; (8001cdc <HAL_UART_MspInit+0x168>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c78:	4b18      	ldr	r3, [pc, #96]	; (8001cdc <HAL_UART_MspInit+0x168>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001c7e:	4b17      	ldr	r3, [pc, #92]	; (8001cdc <HAL_UART_MspInit+0x168>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001c84:	4b15      	ldr	r3, [pc, #84]	; (8001cdc <HAL_UART_MspInit+0x168>)
 8001c86:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c8a:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c8c:	4b13      	ldr	r3, [pc, #76]	; (8001cdc <HAL_UART_MspInit+0x168>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8001c92:	4812      	ldr	r0, [pc, #72]	; (8001cdc <HAL_UART_MspInit+0x168>)
 8001c94:	f000 fe9a 	bl	80029cc <HAL_DMA_Init>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8001c9e:	f7ff fc03 	bl	80014a8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a0d      	ldr	r2, [pc, #52]	; (8001cdc <HAL_UART_MspInit+0x168>)
 8001ca6:	631a      	str	r2, [r3, #48]	; 0x30
 8001ca8:	4a0c      	ldr	r2, [pc, #48]	; (8001cdc <HAL_UART_MspInit+0x168>)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001cae:	2200      	movs	r2, #0
 8001cb0:	2105      	movs	r1, #5
 8001cb2:	2034      	movs	r0, #52	; 0x34
 8001cb4:	f000 fe60 	bl	8002978 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001cb8:	2034      	movs	r0, #52	; 0x34
 8001cba:	f000 fe79 	bl	80029b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001cbe:	bf00      	nop
 8001cc0:	3728      	adds	r7, #40	; 0x28
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40004c00 	.word	0x40004c00
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	40020800 	.word	0x40020800
 8001cd4:	2000533c 	.word	0x2000533c
 8001cd8:	40026040 	.word	0x40026040
 8001cdc:	20006870 	.word	0x20006870
 8001ce0:	40026070 	.word	0x40026070

08001ce4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08c      	sub	sp, #48	; 0x30
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001cec:	2300      	movs	r3, #0
 8001cee:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	6879      	ldr	r1, [r7, #4]
 8001cf8:	2037      	movs	r0, #55	; 0x37
 8001cfa:	f000 fe3d 	bl	8002978 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001cfe:	2037      	movs	r0, #55	; 0x37
 8001d00:	f000 fe56 	bl	80029b0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001d04:	2300      	movs	r3, #0
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	4b1f      	ldr	r3, [pc, #124]	; (8001d88 <HAL_InitTick+0xa4>)
 8001d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0c:	4a1e      	ldr	r2, [pc, #120]	; (8001d88 <HAL_InitTick+0xa4>)
 8001d0e:	f043 0320 	orr.w	r3, r3, #32
 8001d12:	6413      	str	r3, [r2, #64]	; 0x40
 8001d14:	4b1c      	ldr	r3, [pc, #112]	; (8001d88 <HAL_InitTick+0xa4>)
 8001d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d18:	f003 0320 	and.w	r3, r3, #32
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d20:	f107 0210 	add.w	r2, r7, #16
 8001d24:	f107 0314 	add.w	r3, r7, #20
 8001d28:	4611      	mov	r1, r2
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f005 ffc6 	bl	8007cbc <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001d30:	f005 ff9c 	bl	8007c6c <HAL_RCC_GetPCLK1Freq>
 8001d34:	4603      	mov	r3, r0
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d3c:	4a13      	ldr	r2, [pc, #76]	; (8001d8c <HAL_InitTick+0xa8>)
 8001d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d42:	0c9b      	lsrs	r3, r3, #18
 8001d44:	3b01      	subs	r3, #1
 8001d46:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001d48:	4b11      	ldr	r3, [pc, #68]	; (8001d90 <HAL_InitTick+0xac>)
 8001d4a:	4a12      	ldr	r2, [pc, #72]	; (8001d94 <HAL_InitTick+0xb0>)
 8001d4c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 8001d4e:	4b10      	ldr	r3, [pc, #64]	; (8001d90 <HAL_InitTick+0xac>)
 8001d50:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d54:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001d56:	4a0e      	ldr	r2, [pc, #56]	; (8001d90 <HAL_InitTick+0xac>)
 8001d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d5a:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001d5c:	4b0c      	ldr	r3, [pc, #48]	; (8001d90 <HAL_InitTick+0xac>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d62:	4b0b      	ldr	r3, [pc, #44]	; (8001d90 <HAL_InitTick+0xac>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8001d68:	4809      	ldr	r0, [pc, #36]	; (8001d90 <HAL_InitTick+0xac>)
 8001d6a:	f006 f9a0 	bl	80080ae <HAL_TIM_Base_Init>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d104      	bne.n	8001d7e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8001d74:	4806      	ldr	r0, [pc, #24]	; (8001d90 <HAL_InitTick+0xac>)
 8001d76:	f006 f9c5 	bl	8008104 <HAL_TIM_Base_Start_IT>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	e000      	b.n	8001d80 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3730      	adds	r7, #48	; 0x30
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	431bde83 	.word	0x431bde83
 8001d90:	200068d0 	.word	0x200068d0
 8001d94:	40001400 	.word	0x40001400

08001d98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d9c:	bf00      	nop
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001da6:	b480      	push	{r7}
 8001da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001daa:	e7fe      	b.n	8001daa <HardFault_Handler+0x4>

08001dac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001db0:	e7fe      	b.n	8001db0 <MemManage_Handler+0x4>

08001db2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001db2:	b480      	push	{r7}
 8001db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001db6:	e7fe      	b.n	8001db6 <BusFault_Handler+0x4>

08001db8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dbc:	e7fe      	b.n	8001dbc <UsageFault_Handler+0x4>

08001dbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001dd0:	4802      	ldr	r0, [pc, #8]	; (8001ddc <DMA1_Stream2_IRQHandler+0x10>)
 8001dd2:	f000 ff23 	bl	8002c1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	2000533c 	.word	0x2000533c

08001de0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001de4:	4802      	ldr	r0, [pc, #8]	; (8001df0 <DMA1_Stream4_IRQHandler+0x10>)
 8001de6:	f000 ff19 	bl	8002c1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20006870 	.word	0x20006870

08001df4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001df8:	4802      	ldr	r0, [pc, #8]	; (8001e04 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001dfa:	f006 fb32 	bl	8008462 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	200064b4 	.word	0x200064b4

08001e08 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001e0c:	4802      	ldr	r0, [pc, #8]	; (8001e18 <I2C1_EV_IRQHandler+0x10>)
 8001e0e:	f002 f973 	bl	80040f8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	20005b00 	.word	0x20005b00

08001e1c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001e20:	4802      	ldr	r0, [pc, #8]	; (8001e2c <I2C1_ER_IRQHandler+0x10>)
 8001e22:	f002 fad6 	bl	80043d2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20005b00 	.word	0x20005b00

08001e30 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001e34:	4802      	ldr	r0, [pc, #8]	; (8001e40 <UART4_IRQHandler+0x10>)
 8001e36:	f007 fb4b 	bl	80094d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20006754 	.word	0x20006754

08001e44 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001e48:	4802      	ldr	r0, [pc, #8]	; (8001e54 <TIM7_IRQHandler+0x10>)
 8001e4a:	f006 fb0a 	bl	8008462 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	200068d0 	.word	0x200068d0

08001e58 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e5c:	4802      	ldr	r0, [pc, #8]	; (8001e68 <DMA2_Stream0_IRQHandler+0x10>)
 8001e5e:	f000 fedd 	bl	8002c1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20006034 	.word	0x20006034

08001e6c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001e70:	4802      	ldr	r0, [pc, #8]	; (8001e7c <OTG_FS_IRQHandler+0x10>)
 8001e72:	f004 fa8d 	bl	8006390 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	20007e24 	.word	0x20007e24

08001e80 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8001e84:	4802      	ldr	r0, [pc, #8]	; (8001e90 <I2C3_EV_IRQHandler+0x10>)
 8001e86:	f002 f937 	bl	80040f8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	2000539c 	.word	0x2000539c

08001e94 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8001e98:	4802      	ldr	r0, [pc, #8]	; (8001ea4 <I2C3_ER_IRQHandler+0x10>)
 8001e9a:	f002 fa9a 	bl	80043d2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	2000539c 	.word	0x2000539c

08001ea8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001eb0:	4a14      	ldr	r2, [pc, #80]	; (8001f04 <_sbrk+0x5c>)
 8001eb2:	4b15      	ldr	r3, [pc, #84]	; (8001f08 <_sbrk+0x60>)
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ebc:	4b13      	ldr	r3, [pc, #76]	; (8001f0c <_sbrk+0x64>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d102      	bne.n	8001eca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ec4:	4b11      	ldr	r3, [pc, #68]	; (8001f0c <_sbrk+0x64>)
 8001ec6:	4a12      	ldr	r2, [pc, #72]	; (8001f10 <_sbrk+0x68>)
 8001ec8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eca:	4b10      	ldr	r3, [pc, #64]	; (8001f0c <_sbrk+0x64>)
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d207      	bcs.n	8001ee8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ed8:	f014 fea2 	bl	8016c20 <__errno>
 8001edc:	4602      	mov	r2, r0
 8001ede:	230c      	movs	r3, #12
 8001ee0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001ee2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ee6:	e009      	b.n	8001efc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ee8:	4b08      	ldr	r3, [pc, #32]	; (8001f0c <_sbrk+0x64>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eee:	4b07      	ldr	r3, [pc, #28]	; (8001f0c <_sbrk+0x64>)
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	4a05      	ldr	r2, [pc, #20]	; (8001f0c <_sbrk+0x64>)
 8001ef8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001efa:	68fb      	ldr	r3, [r7, #12]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3718      	adds	r7, #24
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	20020000 	.word	0x20020000
 8001f08:	00000400 	.word	0x00000400
 8001f0c:	20000564 	.word	0x20000564
 8001f10:	20008620 	.word	0x20008620

08001f14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f18:	4b08      	ldr	r3, [pc, #32]	; (8001f3c <SystemInit+0x28>)
 8001f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f1e:	4a07      	ldr	r2, [pc, #28]	; (8001f3c <SystemInit+0x28>)
 8001f20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f28:	4b04      	ldr	r3, [pc, #16]	; (8001f3c <SystemInit+0x28>)
 8001f2a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f2e:	609a      	str	r2, [r3, #8]
#endif
}
 8001f30:	bf00      	nop
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	e000ed00 	.word	0xe000ed00

08001f40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001f40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f78 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001f44:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001f46:	e003      	b.n	8001f50 <LoopCopyDataInit>

08001f48 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001f48:	4b0c      	ldr	r3, [pc, #48]	; (8001f7c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001f4a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001f4c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001f4e:	3104      	adds	r1, #4

08001f50 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001f50:	480b      	ldr	r0, [pc, #44]	; (8001f80 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001f52:	4b0c      	ldr	r3, [pc, #48]	; (8001f84 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001f54:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001f56:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001f58:	d3f6      	bcc.n	8001f48 <CopyDataInit>
  ldr  r2, =_sbss
 8001f5a:	4a0b      	ldr	r2, [pc, #44]	; (8001f88 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001f5c:	e002      	b.n	8001f64 <LoopFillZerobss>

08001f5e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001f5e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001f60:	f842 3b04 	str.w	r3, [r2], #4

08001f64 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001f64:	4b09      	ldr	r3, [pc, #36]	; (8001f8c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001f66:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001f68:	d3f9      	bcc.n	8001f5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f6a:	f7ff ffd3 	bl	8001f14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f6e:	f014 fe5d 	bl	8016c2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f72:	f7fe fbb5 	bl	80006e0 <main>
  bx  lr    
 8001f76:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f78:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001f7c:	08018e90 	.word	0x08018e90
  ldr  r0, =_sdata
 8001f80:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001f84:	200004e4 	.word	0x200004e4
  ldr  r2, =_sbss
 8001f88:	200004e8 	.word	0x200004e8
  ldr  r3, = _ebss
 8001f8c:	2000861c 	.word	0x2000861c

08001f90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f90:	e7fe      	b.n	8001f90 <ADC_IRQHandler>
	...

08001f94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f98:	4b0e      	ldr	r3, [pc, #56]	; (8001fd4 <HAL_Init+0x40>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a0d      	ldr	r2, [pc, #52]	; (8001fd4 <HAL_Init+0x40>)
 8001f9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fa2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fa4:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <HAL_Init+0x40>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a0a      	ldr	r2, [pc, #40]	; (8001fd4 <HAL_Init+0x40>)
 8001faa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fb0:	4b08      	ldr	r3, [pc, #32]	; (8001fd4 <HAL_Init+0x40>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a07      	ldr	r2, [pc, #28]	; (8001fd4 <HAL_Init+0x40>)
 8001fb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fbc:	2003      	movs	r0, #3
 8001fbe:	f000 fcd0 	bl	8002962 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fc2:	2000      	movs	r0, #0
 8001fc4:	f7ff fe8e 	bl	8001ce4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fc8:	f7ff fa72 	bl	80014b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40023c00 	.word	0x40023c00

08001fd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fdc:	4b06      	ldr	r3, [pc, #24]	; (8001ff8 <HAL_IncTick+0x20>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	4b06      	ldr	r3, [pc, #24]	; (8001ffc <HAL_IncTick+0x24>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	4a04      	ldr	r2, [pc, #16]	; (8001ffc <HAL_IncTick+0x24>)
 8001fea:	6013      	str	r3, [r2, #0]
}
 8001fec:	bf00      	nop
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	20000008 	.word	0x20000008
 8001ffc:	20006910 	.word	0x20006910

08002000 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  return uwTick;
 8002004:	4b03      	ldr	r3, [pc, #12]	; (8002014 <HAL_GetTick+0x14>)
 8002006:	681b      	ldr	r3, [r3, #0]
}
 8002008:	4618      	mov	r0, r3
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	20006910 	.word	0x20006910

08002018 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002020:	f7ff ffee 	bl	8002000 <HAL_GetTick>
 8002024:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002030:	d005      	beq.n	800203e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002032:	4b09      	ldr	r3, [pc, #36]	; (8002058 <HAL_Delay+0x40>)
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	461a      	mov	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	4413      	add	r3, r2
 800203c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800203e:	bf00      	nop
 8002040:	f7ff ffde 	bl	8002000 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	429a      	cmp	r2, r3
 800204e:	d8f7      	bhi.n	8002040 <HAL_Delay+0x28>
  {
  }
}
 8002050:	bf00      	nop
 8002052:	3710      	adds	r7, #16
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	20000008 	.word	0x20000008

0800205c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002064:	2300      	movs	r3, #0
 8002066:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d101      	bne.n	8002072 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e033      	b.n	80020da <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	2b00      	cmp	r3, #0
 8002078:	d109      	bne.n	800208e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f7ff fa40 	bl	8001500 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	f003 0310 	and.w	r3, r3, #16
 8002096:	2b00      	cmp	r3, #0
 8002098:	d118      	bne.n	80020cc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020a2:	f023 0302 	bic.w	r3, r3, #2
 80020a6:	f043 0202 	orr.w	r2, r3, #2
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 fa2c 	bl	800250c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	f023 0303 	bic.w	r3, r3, #3
 80020c2:	f043 0201 	orr.w	r2, r3, #1
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	641a      	str	r2, [r3, #64]	; 0x40
 80020ca:	e001      	b.n	80020d0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80020d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
	...

080020e4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80020f0:	2300      	movs	r3, #0
 80020f2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d101      	bne.n	8002102 <HAL_ADC_Start_DMA+0x1e>
 80020fe:	2302      	movs	r3, #2
 8002100:	e0cc      	b.n	800229c <HAL_ADC_Start_DMA+0x1b8>
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	2b01      	cmp	r3, #1
 8002116:	d018      	beq.n	800214a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	689a      	ldr	r2, [r3, #8]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f042 0201 	orr.w	r2, r2, #1
 8002126:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002128:	4b5e      	ldr	r3, [pc, #376]	; (80022a4 <HAL_ADC_Start_DMA+0x1c0>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a5e      	ldr	r2, [pc, #376]	; (80022a8 <HAL_ADC_Start_DMA+0x1c4>)
 800212e:	fba2 2303 	umull	r2, r3, r2, r3
 8002132:	0c9a      	lsrs	r2, r3, #18
 8002134:	4613      	mov	r3, r2
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	4413      	add	r3, r2
 800213a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800213c:	e002      	b.n	8002144 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	3b01      	subs	r3, #1
 8002142:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1f9      	bne.n	800213e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	2b01      	cmp	r3, #1
 8002156:	f040 80a0 	bne.w	800229a <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002162:	f023 0301 	bic.w	r3, r3, #1
 8002166:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002178:	2b00      	cmp	r3, #0
 800217a:	d007      	beq.n	800218c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002180:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002184:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002190:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002194:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002198:	d106      	bne.n	80021a8 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219e:	f023 0206 	bic.w	r2, r3, #6
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	645a      	str	r2, [r3, #68]	; 0x44
 80021a6:	e002      	b.n	80021ae <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2200      	movs	r2, #0
 80021ac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021b6:	4b3d      	ldr	r3, [pc, #244]	; (80022ac <HAL_ADC_Start_DMA+0x1c8>)
 80021b8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021be:	4a3c      	ldr	r2, [pc, #240]	; (80022b0 <HAL_ADC_Start_DMA+0x1cc>)
 80021c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021c6:	4a3b      	ldr	r2, [pc, #236]	; (80022b4 <HAL_ADC_Start_DMA+0x1d0>)
 80021c8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ce:	4a3a      	ldr	r2, [pc, #232]	; (80022b8 <HAL_ADC_Start_DMA+0x1d4>)
 80021d0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80021da:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	685a      	ldr	r2, [r3, #4]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80021ea:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689a      	ldr	r2, [r3, #8]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021fa:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	334c      	adds	r3, #76	; 0x4c
 8002206:	4619      	mov	r1, r3
 8002208:	68ba      	ldr	r2, [r7, #8]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f000 fc8c 	bl	8002b28 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f003 031f 	and.w	r3, r3, #31
 8002218:	2b00      	cmp	r3, #0
 800221a:	d12a      	bne.n	8002272 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a26      	ldr	r2, [pc, #152]	; (80022bc <HAL_ADC_Start_DMA+0x1d8>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d015      	beq.n	8002252 <HAL_ADC_Start_DMA+0x16e>
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a25      	ldr	r2, [pc, #148]	; (80022c0 <HAL_ADC_Start_DMA+0x1dc>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d105      	bne.n	800223c <HAL_ADC_Start_DMA+0x158>
 8002230:	4b1e      	ldr	r3, [pc, #120]	; (80022ac <HAL_ADC_Start_DMA+0x1c8>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f003 031f 	and.w	r3, r3, #31
 8002238:	2b00      	cmp	r3, #0
 800223a:	d00a      	beq.n	8002252 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a20      	ldr	r2, [pc, #128]	; (80022c4 <HAL_ADC_Start_DMA+0x1e0>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d129      	bne.n	800229a <HAL_ADC_Start_DMA+0x1b6>
 8002246:	4b19      	ldr	r3, [pc, #100]	; (80022ac <HAL_ADC_Start_DMA+0x1c8>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f003 031f 	and.w	r3, r3, #31
 800224e:	2b0f      	cmp	r3, #15
 8002250:	d823      	bhi.n	800229a <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d11c      	bne.n	800229a <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	689a      	ldr	r2, [r3, #8]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800226e:	609a      	str	r2, [r3, #8]
 8002270:	e013      	b.n	800229a <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a11      	ldr	r2, [pc, #68]	; (80022bc <HAL_ADC_Start_DMA+0x1d8>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d10e      	bne.n	800229a <HAL_ADC_Start_DMA+0x1b6>
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d107      	bne.n	800229a <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002298:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	3718      	adds	r7, #24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	20000000 	.word	0x20000000
 80022a8:	431bde83 	.word	0x431bde83
 80022ac:	40012300 	.word	0x40012300
 80022b0:	08002705 	.word	0x08002705
 80022b4:	080027bf 	.word	0x080027bf
 80022b8:	080027db 	.word	0x080027db
 80022bc:	40012000 	.word	0x40012000
 80022c0:	40012100 	.word	0x40012100
 80022c4:	40012200 	.word	0x40012200

080022c8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80022d2:	2300      	movs	r3, #0
 80022d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d101      	bne.n	80022e4 <HAL_ADC_ConfigChannel+0x1c>
 80022e0:	2302      	movs	r3, #2
 80022e2:	e105      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x228>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2b09      	cmp	r3, #9
 80022f2:	d925      	bls.n	8002340 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68d9      	ldr	r1, [r3, #12]
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	b29b      	uxth	r3, r3
 8002300:	461a      	mov	r2, r3
 8002302:	4613      	mov	r3, r2
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	4413      	add	r3, r2
 8002308:	3b1e      	subs	r3, #30
 800230a:	2207      	movs	r2, #7
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	43da      	mvns	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	400a      	ands	r2, r1
 8002318:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68d9      	ldr	r1, [r3, #12]
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	689a      	ldr	r2, [r3, #8]
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	b29b      	uxth	r3, r3
 800232a:	4618      	mov	r0, r3
 800232c:	4603      	mov	r3, r0
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	4403      	add	r3, r0
 8002332:	3b1e      	subs	r3, #30
 8002334:	409a      	lsls	r2, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	430a      	orrs	r2, r1
 800233c:	60da      	str	r2, [r3, #12]
 800233e:	e022      	b.n	8002386 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6919      	ldr	r1, [r3, #16]
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	b29b      	uxth	r3, r3
 800234c:	461a      	mov	r2, r3
 800234e:	4613      	mov	r3, r2
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	4413      	add	r3, r2
 8002354:	2207      	movs	r2, #7
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43da      	mvns	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	400a      	ands	r2, r1
 8002362:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6919      	ldr	r1, [r3, #16]
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	689a      	ldr	r2, [r3, #8]
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	b29b      	uxth	r3, r3
 8002374:	4618      	mov	r0, r3
 8002376:	4603      	mov	r3, r0
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	4403      	add	r3, r0
 800237c:	409a      	lsls	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	430a      	orrs	r2, r1
 8002384:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	2b06      	cmp	r3, #6
 800238c:	d824      	bhi.n	80023d8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685a      	ldr	r2, [r3, #4]
 8002398:	4613      	mov	r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	3b05      	subs	r3, #5
 80023a0:	221f      	movs	r2, #31
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	43da      	mvns	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	400a      	ands	r2, r1
 80023ae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	4618      	mov	r0, r3
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685a      	ldr	r2, [r3, #4]
 80023c2:	4613      	mov	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	4413      	add	r3, r2
 80023c8:	3b05      	subs	r3, #5
 80023ca:	fa00 f203 	lsl.w	r2, r0, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	430a      	orrs	r2, r1
 80023d4:	635a      	str	r2, [r3, #52]	; 0x34
 80023d6:	e04c      	b.n	8002472 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	2b0c      	cmp	r3, #12
 80023de:	d824      	bhi.n	800242a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685a      	ldr	r2, [r3, #4]
 80023ea:	4613      	mov	r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	4413      	add	r3, r2
 80023f0:	3b23      	subs	r3, #35	; 0x23
 80023f2:	221f      	movs	r2, #31
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	43da      	mvns	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	400a      	ands	r2, r1
 8002400:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	b29b      	uxth	r3, r3
 800240e:	4618      	mov	r0, r3
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685a      	ldr	r2, [r3, #4]
 8002414:	4613      	mov	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	4413      	add	r3, r2
 800241a:	3b23      	subs	r3, #35	; 0x23
 800241c:	fa00 f203 	lsl.w	r2, r0, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	430a      	orrs	r2, r1
 8002426:	631a      	str	r2, [r3, #48]	; 0x30
 8002428:	e023      	b.n	8002472 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685a      	ldr	r2, [r3, #4]
 8002434:	4613      	mov	r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	4413      	add	r3, r2
 800243a:	3b41      	subs	r3, #65	; 0x41
 800243c:	221f      	movs	r2, #31
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	43da      	mvns	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	400a      	ands	r2, r1
 800244a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	b29b      	uxth	r3, r3
 8002458:	4618      	mov	r0, r3
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	4613      	mov	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	4413      	add	r3, r2
 8002464:	3b41      	subs	r3, #65	; 0x41
 8002466:	fa00 f203 	lsl.w	r2, r0, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	430a      	orrs	r2, r1
 8002470:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002472:	4b22      	ldr	r3, [pc, #136]	; (80024fc <HAL_ADC_ConfigChannel+0x234>)
 8002474:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a21      	ldr	r2, [pc, #132]	; (8002500 <HAL_ADC_ConfigChannel+0x238>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d109      	bne.n	8002494 <HAL_ADC_ConfigChannel+0x1cc>
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2b12      	cmp	r3, #18
 8002486:	d105      	bne.n	8002494 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a19      	ldr	r2, [pc, #100]	; (8002500 <HAL_ADC_ConfigChannel+0x238>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d123      	bne.n	80024e6 <HAL_ADC_ConfigChannel+0x21e>
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2b10      	cmp	r3, #16
 80024a4:	d003      	beq.n	80024ae <HAL_ADC_ConfigChannel+0x1e6>
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2b11      	cmp	r3, #17
 80024ac:	d11b      	bne.n	80024e6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2b10      	cmp	r3, #16
 80024c0:	d111      	bne.n	80024e6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024c2:	4b10      	ldr	r3, [pc, #64]	; (8002504 <HAL_ADC_ConfigChannel+0x23c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a10      	ldr	r2, [pc, #64]	; (8002508 <HAL_ADC_ConfigChannel+0x240>)
 80024c8:	fba2 2303 	umull	r2, r3, r2, r3
 80024cc:	0c9a      	lsrs	r2, r3, #18
 80024ce:	4613      	mov	r3, r2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	4413      	add	r3, r2
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024d8:	e002      	b.n	80024e0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	3b01      	subs	r3, #1
 80024de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1f9      	bne.n	80024da <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3714      	adds	r7, #20
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	40012300 	.word	0x40012300
 8002500:	40012000 	.word	0x40012000
 8002504:	20000000 	.word	0x20000000
 8002508:	431bde83 	.word	0x431bde83

0800250c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002514:	4b79      	ldr	r3, [pc, #484]	; (80026fc <ADC_Init+0x1f0>)
 8002516:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	685a      	ldr	r2, [r3, #4]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	431a      	orrs	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	685a      	ldr	r2, [r3, #4]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002540:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	6859      	ldr	r1, [r3, #4]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	021a      	lsls	r2, r3, #8
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	430a      	orrs	r2, r1
 8002554:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002564:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	6859      	ldr	r1, [r3, #4]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	430a      	orrs	r2, r1
 8002576:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	689a      	ldr	r2, [r3, #8]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002586:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	6899      	ldr	r1, [r3, #8]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68da      	ldr	r2, [r3, #12]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	430a      	orrs	r2, r1
 8002598:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259e:	4a58      	ldr	r2, [pc, #352]	; (8002700 <ADC_Init+0x1f4>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d022      	beq.n	80025ea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	689a      	ldr	r2, [r3, #8]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	6899      	ldr	r1, [r3, #8]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	430a      	orrs	r2, r1
 80025c4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	689a      	ldr	r2, [r3, #8]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	6899      	ldr	r1, [r3, #8]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	430a      	orrs	r2, r1
 80025e6:	609a      	str	r2, [r3, #8]
 80025e8:	e00f      	b.n	800260a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	689a      	ldr	r2, [r3, #8]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002608:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f022 0202 	bic.w	r2, r2, #2
 8002618:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	6899      	ldr	r1, [r3, #8]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	7e1b      	ldrb	r3, [r3, #24]
 8002624:	005a      	lsls	r2, r3, #1
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	430a      	orrs	r2, r1
 800262c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d01b      	beq.n	8002670 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	685a      	ldr	r2, [r3, #4]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002646:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	685a      	ldr	r2, [r3, #4]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002656:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6859      	ldr	r1, [r3, #4]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002662:	3b01      	subs	r3, #1
 8002664:	035a      	lsls	r2, r3, #13
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	430a      	orrs	r2, r1
 800266c:	605a      	str	r2, [r3, #4]
 800266e:	e007      	b.n	8002680 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	685a      	ldr	r2, [r3, #4]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800267e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800268e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	69db      	ldr	r3, [r3, #28]
 800269a:	3b01      	subs	r3, #1
 800269c:	051a      	lsls	r2, r3, #20
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	430a      	orrs	r2, r1
 80026a4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	689a      	ldr	r2, [r3, #8]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80026b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	6899      	ldr	r1, [r3, #8]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026c2:	025a      	lsls	r2, r3, #9
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	430a      	orrs	r2, r1
 80026ca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689a      	ldr	r2, [r3, #8]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6899      	ldr	r1, [r3, #8]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	029a      	lsls	r2, r3, #10
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	430a      	orrs	r2, r1
 80026ee:	609a      	str	r2, [r3, #8]
}
 80026f0:	bf00      	nop
 80026f2:	3714      	adds	r7, #20
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	40012300 	.word	0x40012300
 8002700:	0f000001 	.word	0x0f000001

08002704 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002710:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800271a:	2b00      	cmp	r3, #0
 800271c:	d13c      	bne.n	8002798 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d12b      	bne.n	8002790 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800273c:	2b00      	cmp	r3, #0
 800273e:	d127      	bne.n	8002790 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002746:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800274a:	2b00      	cmp	r3, #0
 800274c:	d006      	beq.n	800275c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002758:	2b00      	cmp	r3, #0
 800275a:	d119      	bne.n	8002790 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	685a      	ldr	r2, [r3, #4]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f022 0220 	bic.w	r2, r2, #32
 800276a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002770:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d105      	bne.n	8002790 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002788:	f043 0201 	orr.w	r2, r3, #1
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002790:	68f8      	ldr	r0, [r7, #12]
 8002792:	f013 fe39 	bl	8016408 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002796:	e00e      	b.n	80027b6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279c:	f003 0310 	and.w	r3, r3, #16
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d003      	beq.n	80027ac <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80027a4:	68f8      	ldr	r0, [r7, #12]
 80027a6:	f013 fe83 	bl	80164b0 <HAL_ADC_ErrorCallback>
}
 80027aa:	e004      	b.n	80027b6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	4798      	blx	r3
}
 80027b6:	bf00      	nop
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b084      	sub	sp, #16
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ca:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80027cc:	68f8      	ldr	r0, [r7, #12]
 80027ce:	f013 fe45 	bl	801645c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027d2:	bf00      	nop
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b084      	sub	sp, #16
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027e6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2240      	movs	r2, #64	; 0x40
 80027ec:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f2:	f043 0204 	orr.w	r2, r3, #4
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80027fa:	68f8      	ldr	r0, [r7, #12]
 80027fc:	f013 fe58 	bl	80164b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002800:	bf00      	nop
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f003 0307 	and.w	r3, r3, #7
 8002816:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002818:	4b0c      	ldr	r3, [pc, #48]	; (800284c <__NVIC_SetPriorityGrouping+0x44>)
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800281e:	68ba      	ldr	r2, [r7, #8]
 8002820:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002824:	4013      	ands	r3, r2
 8002826:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002830:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002834:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002838:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800283a:	4a04      	ldr	r2, [pc, #16]	; (800284c <__NVIC_SetPriorityGrouping+0x44>)
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	60d3      	str	r3, [r2, #12]
}
 8002840:	bf00      	nop
 8002842:	3714      	adds	r7, #20
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr
 800284c:	e000ed00 	.word	0xe000ed00

08002850 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002854:	4b04      	ldr	r3, [pc, #16]	; (8002868 <__NVIC_GetPriorityGrouping+0x18>)
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	0a1b      	lsrs	r3, r3, #8
 800285a:	f003 0307 	and.w	r3, r3, #7
}
 800285e:	4618      	mov	r0, r3
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	e000ed00 	.word	0xe000ed00

0800286c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	4603      	mov	r3, r0
 8002874:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287a:	2b00      	cmp	r3, #0
 800287c:	db0b      	blt.n	8002896 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800287e:	79fb      	ldrb	r3, [r7, #7]
 8002880:	f003 021f 	and.w	r2, r3, #31
 8002884:	4907      	ldr	r1, [pc, #28]	; (80028a4 <__NVIC_EnableIRQ+0x38>)
 8002886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288a:	095b      	lsrs	r3, r3, #5
 800288c:	2001      	movs	r0, #1
 800288e:	fa00 f202 	lsl.w	r2, r0, r2
 8002892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002896:	bf00      	nop
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	e000e100 	.word	0xe000e100

080028a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	4603      	mov	r3, r0
 80028b0:	6039      	str	r1, [r7, #0]
 80028b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	db0a      	blt.n	80028d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	b2da      	uxtb	r2, r3
 80028c0:	490c      	ldr	r1, [pc, #48]	; (80028f4 <__NVIC_SetPriority+0x4c>)
 80028c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c6:	0112      	lsls	r2, r2, #4
 80028c8:	b2d2      	uxtb	r2, r2
 80028ca:	440b      	add	r3, r1
 80028cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028d0:	e00a      	b.n	80028e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	4908      	ldr	r1, [pc, #32]	; (80028f8 <__NVIC_SetPriority+0x50>)
 80028d8:	79fb      	ldrb	r3, [r7, #7]
 80028da:	f003 030f 	and.w	r3, r3, #15
 80028de:	3b04      	subs	r3, #4
 80028e0:	0112      	lsls	r2, r2, #4
 80028e2:	b2d2      	uxtb	r2, r2
 80028e4:	440b      	add	r3, r1
 80028e6:	761a      	strb	r2, [r3, #24]
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr
 80028f4:	e000e100 	.word	0xe000e100
 80028f8:	e000ed00 	.word	0xe000ed00

080028fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b089      	sub	sp, #36	; 0x24
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f003 0307 	and.w	r3, r3, #7
 800290e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	f1c3 0307 	rsb	r3, r3, #7
 8002916:	2b04      	cmp	r3, #4
 8002918:	bf28      	it	cs
 800291a:	2304      	movcs	r3, #4
 800291c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	3304      	adds	r3, #4
 8002922:	2b06      	cmp	r3, #6
 8002924:	d902      	bls.n	800292c <NVIC_EncodePriority+0x30>
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	3b03      	subs	r3, #3
 800292a:	e000      	b.n	800292e <NVIC_EncodePriority+0x32>
 800292c:	2300      	movs	r3, #0
 800292e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002930:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	43da      	mvns	r2, r3
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	401a      	ands	r2, r3
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002944:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	fa01 f303 	lsl.w	r3, r1, r3
 800294e:	43d9      	mvns	r1, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002954:	4313      	orrs	r3, r2
         );
}
 8002956:	4618      	mov	r0, r3
 8002958:	3724      	adds	r7, #36	; 0x24
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr

08002962 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b082      	sub	sp, #8
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f7ff ff4c 	bl	8002808 <__NVIC_SetPriorityGrouping>
}
 8002970:	bf00      	nop
 8002972:	3708      	adds	r7, #8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002978:	b580      	push	{r7, lr}
 800297a:	b086      	sub	sp, #24
 800297c:	af00      	add	r7, sp, #0
 800297e:	4603      	mov	r3, r0
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
 8002984:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002986:	2300      	movs	r3, #0
 8002988:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800298a:	f7ff ff61 	bl	8002850 <__NVIC_GetPriorityGrouping>
 800298e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	68b9      	ldr	r1, [r7, #8]
 8002994:	6978      	ldr	r0, [r7, #20]
 8002996:	f7ff ffb1 	bl	80028fc <NVIC_EncodePriority>
 800299a:	4602      	mov	r2, r0
 800299c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029a0:	4611      	mov	r1, r2
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff ff80 	bl	80028a8 <__NVIC_SetPriority>
}
 80029a8:	bf00      	nop
 80029aa:	3718      	adds	r7, #24
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	4603      	mov	r3, r0
 80029b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029be:	4618      	mov	r0, r3
 80029c0:	f7ff ff54 	bl	800286c <__NVIC_EnableIRQ>
}
 80029c4:	bf00      	nop
 80029c6:	3708      	adds	r7, #8
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029d4:	2300      	movs	r3, #0
 80029d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80029d8:	f7ff fb12 	bl	8002000 <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d101      	bne.n	80029e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e099      	b.n	8002b1c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2202      	movs	r2, #2
 80029f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f022 0201 	bic.w	r2, r2, #1
 8002a06:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a08:	e00f      	b.n	8002a2a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a0a:	f7ff faf9 	bl	8002000 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	2b05      	cmp	r3, #5
 8002a16:	d908      	bls.n	8002a2a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2220      	movs	r2, #32
 8002a1c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2203      	movs	r2, #3
 8002a22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e078      	b.n	8002b1c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0301 	and.w	r3, r3, #1
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d1e8      	bne.n	8002a0a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a40:	697a      	ldr	r2, [r7, #20]
 8002a42:	4b38      	ldr	r3, [pc, #224]	; (8002b24 <HAL_DMA_Init+0x158>)
 8002a44:	4013      	ands	r3, r2
 8002a46:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685a      	ldr	r2, [r3, #4]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a56:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a1b      	ldr	r3, [r3, #32]
 8002a74:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a80:	2b04      	cmp	r3, #4
 8002a82:	d107      	bne.n	8002a94 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	697a      	ldr	r2, [r7, #20]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	697a      	ldr	r2, [r7, #20]
 8002a9a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	f023 0307 	bic.w	r3, r3, #7
 8002aaa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab0:	697a      	ldr	r2, [r7, #20]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aba:	2b04      	cmp	r3, #4
 8002abc:	d117      	bne.n	8002aee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00e      	beq.n	8002aee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f000 fa9f 	bl	8003014 <DMA_CheckFifoParam>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d008      	beq.n	8002aee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2240      	movs	r2, #64	; 0x40
 8002ae0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002aea:	2301      	movs	r3, #1
 8002aec:	e016      	b.n	8002b1c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	697a      	ldr	r2, [r7, #20]
 8002af4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 fa56 	bl	8002fa8 <DMA_CalcBaseAndBitshift>
 8002afc:	4603      	mov	r3, r0
 8002afe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b04:	223f      	movs	r2, #63	; 0x3f
 8002b06:	409a      	lsls	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2201      	movs	r2, #1
 8002b16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3718      	adds	r7, #24
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	f010803f 	.word	0xf010803f

08002b28 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
 8002b34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b36:	2300      	movs	r3, #0
 8002b38:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b3e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d101      	bne.n	8002b4e <HAL_DMA_Start_IT+0x26>
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	e040      	b.n	8002bd0 <HAL_DMA_Start_IT+0xa8>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d12f      	bne.n	8002bc2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2202      	movs	r2, #2
 8002b66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	68b9      	ldr	r1, [r7, #8]
 8002b76:	68f8      	ldr	r0, [r7, #12]
 8002b78:	f000 f9e8 	bl	8002f4c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b80:	223f      	movs	r2, #63	; 0x3f
 8002b82:	409a      	lsls	r2, r3
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f042 0216 	orr.w	r2, r2, #22
 8002b96:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d007      	beq.n	8002bb0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f042 0208 	orr.w	r2, r2, #8
 8002bae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f042 0201 	orr.w	r2, r2, #1
 8002bbe:	601a      	str	r2, [r3, #0]
 8002bc0:	e005      	b.n	8002bce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002bca:	2302      	movs	r3, #2
 8002bcc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002bce:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3718      	adds	r7, #24
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d004      	beq.n	8002bf6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2280      	movs	r2, #128	; 0x80
 8002bf0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e00c      	b.n	8002c10 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2205      	movs	r2, #5
 8002bfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f022 0201 	bic.w	r2, r2, #1
 8002c0c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c24:	2300      	movs	r3, #0
 8002c26:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c28:	4b92      	ldr	r3, [pc, #584]	; (8002e74 <HAL_DMA_IRQHandler+0x258>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a92      	ldr	r2, [pc, #584]	; (8002e78 <HAL_DMA_IRQHandler+0x25c>)
 8002c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c32:	0a9b      	lsrs	r3, r3, #10
 8002c34:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c3a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c46:	2208      	movs	r2, #8
 8002c48:	409a      	lsls	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d01a      	beq.n	8002c88 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0304 	and.w	r3, r3, #4
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d013      	beq.n	8002c88 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f022 0204 	bic.w	r2, r2, #4
 8002c6e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c74:	2208      	movs	r2, #8
 8002c76:	409a      	lsls	r2, r3
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c80:	f043 0201 	orr.w	r2, r3, #1
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	409a      	lsls	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	4013      	ands	r3, r2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d012      	beq.n	8002cbe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00b      	beq.n	8002cbe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002caa:	2201      	movs	r2, #1
 8002cac:	409a      	lsls	r2, r3
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb6:	f043 0202 	orr.w	r2, r3, #2
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc2:	2204      	movs	r2, #4
 8002cc4:	409a      	lsls	r2, r3
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d012      	beq.n	8002cf4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00b      	beq.n	8002cf4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce0:	2204      	movs	r2, #4
 8002ce2:	409a      	lsls	r2, r3
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cec:	f043 0204 	orr.w	r2, r3, #4
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf8:	2210      	movs	r2, #16
 8002cfa:	409a      	lsls	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	4013      	ands	r3, r2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d043      	beq.n	8002d8c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0308 	and.w	r3, r3, #8
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d03c      	beq.n	8002d8c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d16:	2210      	movs	r2, #16
 8002d18:	409a      	lsls	r2, r3
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d018      	beq.n	8002d5e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d108      	bne.n	8002d4c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d024      	beq.n	8002d8c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	4798      	blx	r3
 8002d4a:	e01f      	b.n	8002d8c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d01b      	beq.n	8002d8c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	4798      	blx	r3
 8002d5c:	e016      	b.n	8002d8c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d107      	bne.n	8002d7c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f022 0208 	bic.w	r2, r2, #8
 8002d7a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d003      	beq.n	8002d8c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d90:	2220      	movs	r2, #32
 8002d92:	409a      	lsls	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	4013      	ands	r3, r2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	f000 808e 	beq.w	8002eba <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0310 	and.w	r3, r3, #16
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	f000 8086 	beq.w	8002eba <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db2:	2220      	movs	r2, #32
 8002db4:	409a      	lsls	r2, r3
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b05      	cmp	r3, #5
 8002dc4:	d136      	bne.n	8002e34 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f022 0216 	bic.w	r2, r2, #22
 8002dd4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	695a      	ldr	r2, [r3, #20]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002de4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d103      	bne.n	8002df6 <HAL_DMA_IRQHandler+0x1da>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d007      	beq.n	8002e06 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f022 0208 	bic.w	r2, r2, #8
 8002e04:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e0a:	223f      	movs	r2, #63	; 0x3f
 8002e0c:	409a      	lsls	r2, r3
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d07d      	beq.n	8002f26 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	4798      	blx	r3
        }
        return;
 8002e32:	e078      	b.n	8002f26 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d01c      	beq.n	8002e7c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d108      	bne.n	8002e62 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d030      	beq.n	8002eba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	4798      	blx	r3
 8002e60:	e02b      	b.n	8002eba <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d027      	beq.n	8002eba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	4798      	blx	r3
 8002e72:	e022      	b.n	8002eba <HAL_DMA_IRQHandler+0x29e>
 8002e74:	20000000 	.word	0x20000000
 8002e78:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10f      	bne.n	8002eaa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 0210 	bic.w	r2, r2, #16
 8002e98:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d003      	beq.n	8002eba <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d032      	beq.n	8002f28 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d022      	beq.n	8002f14 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2205      	movs	r2, #5
 8002ed2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 0201 	bic.w	r2, r2, #1
 8002ee4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	3301      	adds	r3, #1
 8002eea:	60bb      	str	r3, [r7, #8]
 8002eec:	697a      	ldr	r2, [r7, #20]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d307      	bcc.n	8002f02 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0301 	and.w	r3, r3, #1
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d1f2      	bne.n	8002ee6 <HAL_DMA_IRQHandler+0x2ca>
 8002f00:	e000      	b.n	8002f04 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002f02:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d005      	beq.n	8002f28 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	4798      	blx	r3
 8002f24:	e000      	b.n	8002f28 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002f26:	bf00      	nop
    }
  }
}
 8002f28:	3718      	adds	r7, #24
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop

08002f30 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f3e:	b2db      	uxtb	r3, r3
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b085      	sub	sp, #20
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
 8002f58:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f68:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	2b40      	cmp	r3, #64	; 0x40
 8002f78:	d108      	bne.n	8002f8c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68ba      	ldr	r2, [r7, #8]
 8002f88:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002f8a:	e007      	b.n	8002f9c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68ba      	ldr	r2, [r7, #8]
 8002f92:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	60da      	str	r2, [r3, #12]
}
 8002f9c:	bf00      	nop
 8002f9e:	3714      	adds	r7, #20
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	3b10      	subs	r3, #16
 8002fb8:	4a14      	ldr	r2, [pc, #80]	; (800300c <DMA_CalcBaseAndBitshift+0x64>)
 8002fba:	fba2 2303 	umull	r2, r3, r2, r3
 8002fbe:	091b      	lsrs	r3, r3, #4
 8002fc0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002fc2:	4a13      	ldr	r2, [pc, #76]	; (8003010 <DMA_CalcBaseAndBitshift+0x68>)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	461a      	mov	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2b03      	cmp	r3, #3
 8002fd4:	d909      	bls.n	8002fea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002fde:	f023 0303 	bic.w	r3, r3, #3
 8002fe2:	1d1a      	adds	r2, r3, #4
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	659a      	str	r2, [r3, #88]	; 0x58
 8002fe8:	e007      	b.n	8002ffa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ff2:	f023 0303 	bic.w	r3, r3, #3
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3714      	adds	r7, #20
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	aaaaaaab 	.word	0xaaaaaaab
 8003010:	080175b4 	.word	0x080175b4

08003014 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800301c:	2300      	movs	r3, #0
 800301e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003024:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d11f      	bne.n	800306e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	2b03      	cmp	r3, #3
 8003032:	d855      	bhi.n	80030e0 <DMA_CheckFifoParam+0xcc>
 8003034:	a201      	add	r2, pc, #4	; (adr r2, 800303c <DMA_CheckFifoParam+0x28>)
 8003036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800303a:	bf00      	nop
 800303c:	0800304d 	.word	0x0800304d
 8003040:	0800305f 	.word	0x0800305f
 8003044:	0800304d 	.word	0x0800304d
 8003048:	080030e1 	.word	0x080030e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003050:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d045      	beq.n	80030e4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800305c:	e042      	b.n	80030e4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003062:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003066:	d13f      	bne.n	80030e8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800306c:	e03c      	b.n	80030e8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003076:	d121      	bne.n	80030bc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	2b03      	cmp	r3, #3
 800307c:	d836      	bhi.n	80030ec <DMA_CheckFifoParam+0xd8>
 800307e:	a201      	add	r2, pc, #4	; (adr r2, 8003084 <DMA_CheckFifoParam+0x70>)
 8003080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003084:	08003095 	.word	0x08003095
 8003088:	0800309b 	.word	0x0800309b
 800308c:	08003095 	.word	0x08003095
 8003090:	080030ad 	.word	0x080030ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	73fb      	strb	r3, [r7, #15]
      break;
 8003098:	e02f      	b.n	80030fa <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d024      	beq.n	80030f0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030aa:	e021      	b.n	80030f0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030b4:	d11e      	bne.n	80030f4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80030ba:	e01b      	b.n	80030f4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d902      	bls.n	80030c8 <DMA_CheckFifoParam+0xb4>
 80030c2:	2b03      	cmp	r3, #3
 80030c4:	d003      	beq.n	80030ce <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80030c6:	e018      	b.n	80030fa <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	73fb      	strb	r3, [r7, #15]
      break;
 80030cc:	e015      	b.n	80030fa <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00e      	beq.n	80030f8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	73fb      	strb	r3, [r7, #15]
      break;
 80030de:	e00b      	b.n	80030f8 <DMA_CheckFifoParam+0xe4>
      break;
 80030e0:	bf00      	nop
 80030e2:	e00a      	b.n	80030fa <DMA_CheckFifoParam+0xe6>
      break;
 80030e4:	bf00      	nop
 80030e6:	e008      	b.n	80030fa <DMA_CheckFifoParam+0xe6>
      break;
 80030e8:	bf00      	nop
 80030ea:	e006      	b.n	80030fa <DMA_CheckFifoParam+0xe6>
      break;
 80030ec:	bf00      	nop
 80030ee:	e004      	b.n	80030fa <DMA_CheckFifoParam+0xe6>
      break;
 80030f0:	bf00      	nop
 80030f2:	e002      	b.n	80030fa <DMA_CheckFifoParam+0xe6>
      break;   
 80030f4:	bf00      	nop
 80030f6:	e000      	b.n	80030fa <DMA_CheckFifoParam+0xe6>
      break;
 80030f8:	bf00      	nop
    }
  } 
  
  return status; 
 80030fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3714      	adds	r7, #20
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003108:	b480      	push	{r7}
 800310a:	b089      	sub	sp, #36	; 0x24
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003112:	2300      	movs	r3, #0
 8003114:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003116:	2300      	movs	r3, #0
 8003118:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800311a:	2300      	movs	r3, #0
 800311c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800311e:	2300      	movs	r3, #0
 8003120:	61fb      	str	r3, [r7, #28]
 8003122:	e16b      	b.n	80033fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003124:	2201      	movs	r2, #1
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	fa02 f303 	lsl.w	r3, r2, r3
 800312c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	697a      	ldr	r2, [r7, #20]
 8003134:	4013      	ands	r3, r2
 8003136:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	429a      	cmp	r2, r3
 800313e:	f040 815a 	bne.w	80033f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d00b      	beq.n	8003162 <HAL_GPIO_Init+0x5a>
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	2b02      	cmp	r3, #2
 8003150:	d007      	beq.n	8003162 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003156:	2b11      	cmp	r3, #17
 8003158:	d003      	beq.n	8003162 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	2b12      	cmp	r3, #18
 8003160:	d130      	bne.n	80031c4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	2203      	movs	r2, #3
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
 8003172:	43db      	mvns	r3, r3
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	4013      	ands	r3, r2
 8003178:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	68da      	ldr	r2, [r3, #12]
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	fa02 f303 	lsl.w	r3, r2, r3
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	4313      	orrs	r3, r2
 800318a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003198:	2201      	movs	r2, #1
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	fa02 f303 	lsl.w	r3, r2, r3
 80031a0:	43db      	mvns	r3, r3
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	4013      	ands	r3, r2
 80031a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	091b      	lsrs	r3, r3, #4
 80031ae:	f003 0201 	and.w	r2, r3, #1
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	2203      	movs	r2, #3
 80031d0:	fa02 f303 	lsl.w	r3, r2, r3
 80031d4:	43db      	mvns	r3, r3
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	4013      	ands	r3, r2
 80031da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	689a      	ldr	r2, [r3, #8]
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	005b      	lsls	r3, r3, #1
 80031e4:	fa02 f303 	lsl.w	r3, r2, r3
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d003      	beq.n	8003204 <HAL_GPIO_Init+0xfc>
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	2b12      	cmp	r3, #18
 8003202:	d123      	bne.n	800324c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	08da      	lsrs	r2, r3, #3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	3208      	adds	r2, #8
 800320c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003210:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	f003 0307 	and.w	r3, r3, #7
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	220f      	movs	r2, #15
 800321c:	fa02 f303 	lsl.w	r3, r2, r3
 8003220:	43db      	mvns	r3, r3
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	4013      	ands	r3, r2
 8003226:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	691a      	ldr	r2, [r3, #16]
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	f003 0307 	and.w	r3, r3, #7
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	4313      	orrs	r3, r2
 800323c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	08da      	lsrs	r2, r3, #3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	3208      	adds	r2, #8
 8003246:	69b9      	ldr	r1, [r7, #24]
 8003248:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	2203      	movs	r2, #3
 8003258:	fa02 f303 	lsl.w	r3, r2, r3
 800325c:	43db      	mvns	r3, r3
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	4013      	ands	r3, r2
 8003262:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f003 0203 	and.w	r2, r3, #3
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	005b      	lsls	r3, r3, #1
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	4313      	orrs	r3, r2
 8003278:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003288:	2b00      	cmp	r3, #0
 800328a:	f000 80b4 	beq.w	80033f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800328e:	2300      	movs	r3, #0
 8003290:	60fb      	str	r3, [r7, #12]
 8003292:	4b5f      	ldr	r3, [pc, #380]	; (8003410 <HAL_GPIO_Init+0x308>)
 8003294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003296:	4a5e      	ldr	r2, [pc, #376]	; (8003410 <HAL_GPIO_Init+0x308>)
 8003298:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800329c:	6453      	str	r3, [r2, #68]	; 0x44
 800329e:	4b5c      	ldr	r3, [pc, #368]	; (8003410 <HAL_GPIO_Init+0x308>)
 80032a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032a6:	60fb      	str	r3, [r7, #12]
 80032a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032aa:	4a5a      	ldr	r2, [pc, #360]	; (8003414 <HAL_GPIO_Init+0x30c>)
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	089b      	lsrs	r3, r3, #2
 80032b0:	3302      	adds	r3, #2
 80032b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	f003 0303 	and.w	r3, r3, #3
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	220f      	movs	r2, #15
 80032c2:	fa02 f303 	lsl.w	r3, r2, r3
 80032c6:	43db      	mvns	r3, r3
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	4013      	ands	r3, r2
 80032cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a51      	ldr	r2, [pc, #324]	; (8003418 <HAL_GPIO_Init+0x310>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d02b      	beq.n	800332e <HAL_GPIO_Init+0x226>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a50      	ldr	r2, [pc, #320]	; (800341c <HAL_GPIO_Init+0x314>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d025      	beq.n	800332a <HAL_GPIO_Init+0x222>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a4f      	ldr	r2, [pc, #316]	; (8003420 <HAL_GPIO_Init+0x318>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d01f      	beq.n	8003326 <HAL_GPIO_Init+0x21e>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a4e      	ldr	r2, [pc, #312]	; (8003424 <HAL_GPIO_Init+0x31c>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d019      	beq.n	8003322 <HAL_GPIO_Init+0x21a>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a4d      	ldr	r2, [pc, #308]	; (8003428 <HAL_GPIO_Init+0x320>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d013      	beq.n	800331e <HAL_GPIO_Init+0x216>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a4c      	ldr	r2, [pc, #304]	; (800342c <HAL_GPIO_Init+0x324>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d00d      	beq.n	800331a <HAL_GPIO_Init+0x212>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a4b      	ldr	r2, [pc, #300]	; (8003430 <HAL_GPIO_Init+0x328>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d007      	beq.n	8003316 <HAL_GPIO_Init+0x20e>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a4a      	ldr	r2, [pc, #296]	; (8003434 <HAL_GPIO_Init+0x32c>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d101      	bne.n	8003312 <HAL_GPIO_Init+0x20a>
 800330e:	2307      	movs	r3, #7
 8003310:	e00e      	b.n	8003330 <HAL_GPIO_Init+0x228>
 8003312:	2308      	movs	r3, #8
 8003314:	e00c      	b.n	8003330 <HAL_GPIO_Init+0x228>
 8003316:	2306      	movs	r3, #6
 8003318:	e00a      	b.n	8003330 <HAL_GPIO_Init+0x228>
 800331a:	2305      	movs	r3, #5
 800331c:	e008      	b.n	8003330 <HAL_GPIO_Init+0x228>
 800331e:	2304      	movs	r3, #4
 8003320:	e006      	b.n	8003330 <HAL_GPIO_Init+0x228>
 8003322:	2303      	movs	r3, #3
 8003324:	e004      	b.n	8003330 <HAL_GPIO_Init+0x228>
 8003326:	2302      	movs	r3, #2
 8003328:	e002      	b.n	8003330 <HAL_GPIO_Init+0x228>
 800332a:	2301      	movs	r3, #1
 800332c:	e000      	b.n	8003330 <HAL_GPIO_Init+0x228>
 800332e:	2300      	movs	r3, #0
 8003330:	69fa      	ldr	r2, [r7, #28]
 8003332:	f002 0203 	and.w	r2, r2, #3
 8003336:	0092      	lsls	r2, r2, #2
 8003338:	4093      	lsls	r3, r2
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	4313      	orrs	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003340:	4934      	ldr	r1, [pc, #208]	; (8003414 <HAL_GPIO_Init+0x30c>)
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	089b      	lsrs	r3, r3, #2
 8003346:	3302      	adds	r3, #2
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800334e:	4b3a      	ldr	r3, [pc, #232]	; (8003438 <HAL_GPIO_Init+0x330>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	43db      	mvns	r3, r3
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	4013      	ands	r3, r2
 800335c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d003      	beq.n	8003372 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800336a:	69ba      	ldr	r2, [r7, #24]
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	4313      	orrs	r3, r2
 8003370:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003372:	4a31      	ldr	r2, [pc, #196]	; (8003438 <HAL_GPIO_Init+0x330>)
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003378:	4b2f      	ldr	r3, [pc, #188]	; (8003438 <HAL_GPIO_Init+0x330>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	43db      	mvns	r3, r3
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	4013      	ands	r3, r2
 8003386:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d003      	beq.n	800339c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	4313      	orrs	r3, r2
 800339a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800339c:	4a26      	ldr	r2, [pc, #152]	; (8003438 <HAL_GPIO_Init+0x330>)
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033a2:	4b25      	ldr	r3, [pc, #148]	; (8003438 <HAL_GPIO_Init+0x330>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	43db      	mvns	r3, r3
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	4013      	ands	r3, r2
 80033b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80033be:	69ba      	ldr	r2, [r7, #24]
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033c6:	4a1c      	ldr	r2, [pc, #112]	; (8003438 <HAL_GPIO_Init+0x330>)
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033cc:	4b1a      	ldr	r3, [pc, #104]	; (8003438 <HAL_GPIO_Init+0x330>)
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	43db      	mvns	r3, r3
 80033d6:	69ba      	ldr	r2, [r7, #24]
 80033d8:	4013      	ands	r3, r2
 80033da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d003      	beq.n	80033f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033f0:	4a11      	ldr	r2, [pc, #68]	; (8003438 <HAL_GPIO_Init+0x330>)
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	3301      	adds	r3, #1
 80033fa:	61fb      	str	r3, [r7, #28]
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	2b0f      	cmp	r3, #15
 8003400:	f67f ae90 	bls.w	8003124 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003404:	bf00      	nop
 8003406:	3724      	adds	r7, #36	; 0x24
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	40023800 	.word	0x40023800
 8003414:	40013800 	.word	0x40013800
 8003418:	40020000 	.word	0x40020000
 800341c:	40020400 	.word	0x40020400
 8003420:	40020800 	.word	0x40020800
 8003424:	40020c00 	.word	0x40020c00
 8003428:	40021000 	.word	0x40021000
 800342c:	40021400 	.word	0x40021400
 8003430:	40021800 	.word	0x40021800
 8003434:	40021c00 	.word	0x40021c00
 8003438:	40013c00 	.word	0x40013c00

0800343c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	460b      	mov	r3, r1
 8003446:	807b      	strh	r3, [r7, #2]
 8003448:	4613      	mov	r3, r2
 800344a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800344c:	787b      	ldrb	r3, [r7, #1]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d003      	beq.n	800345a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003452:	887a      	ldrh	r2, [r7, #2]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003458:	e003      	b.n	8003462 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800345a:	887b      	ldrh	r3, [r7, #2]
 800345c:	041a      	lsls	r2, r3, #16
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	619a      	str	r2, [r3, #24]
}
 8003462:	bf00      	nop
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
	...

08003470 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e11f      	b.n	80036c2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b00      	cmp	r3, #0
 800348c:	d106      	bne.n	800349c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f7fe f8e4 	bl	8001664 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2224      	movs	r2, #36	; 0x24
 80034a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f022 0201 	bic.w	r2, r2, #1
 80034b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80034d4:	f004 fbca 	bl	8007c6c <HAL_RCC_GetPCLK1Freq>
 80034d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	4a7b      	ldr	r2, [pc, #492]	; (80036cc <HAL_I2C_Init+0x25c>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d807      	bhi.n	80034f4 <HAL_I2C_Init+0x84>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	4a7a      	ldr	r2, [pc, #488]	; (80036d0 <HAL_I2C_Init+0x260>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	bf94      	ite	ls
 80034ec:	2301      	movls	r3, #1
 80034ee:	2300      	movhi	r3, #0
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	e006      	b.n	8003502 <HAL_I2C_Init+0x92>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	4a77      	ldr	r2, [pc, #476]	; (80036d4 <HAL_I2C_Init+0x264>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	bf94      	ite	ls
 80034fc:	2301      	movls	r3, #1
 80034fe:	2300      	movhi	r3, #0
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e0db      	b.n	80036c2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	4a72      	ldr	r2, [pc, #456]	; (80036d8 <HAL_I2C_Init+0x268>)
 800350e:	fba2 2303 	umull	r2, r3, r2, r3
 8003512:	0c9b      	lsrs	r3, r3, #18
 8003514:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68ba      	ldr	r2, [r7, #8]
 8003526:	430a      	orrs	r2, r1
 8003528:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	6a1b      	ldr	r3, [r3, #32]
 8003530:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	4a64      	ldr	r2, [pc, #400]	; (80036cc <HAL_I2C_Init+0x25c>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d802      	bhi.n	8003544 <HAL_I2C_Init+0xd4>
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	3301      	adds	r3, #1
 8003542:	e009      	b.n	8003558 <HAL_I2C_Init+0xe8>
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800354a:	fb02 f303 	mul.w	r3, r2, r3
 800354e:	4a63      	ldr	r2, [pc, #396]	; (80036dc <HAL_I2C_Init+0x26c>)
 8003550:	fba2 2303 	umull	r2, r3, r2, r3
 8003554:	099b      	lsrs	r3, r3, #6
 8003556:	3301      	adds	r3, #1
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	6812      	ldr	r2, [r2, #0]
 800355c:	430b      	orrs	r3, r1
 800355e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	69db      	ldr	r3, [r3, #28]
 8003566:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800356a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	4956      	ldr	r1, [pc, #344]	; (80036cc <HAL_I2C_Init+0x25c>)
 8003574:	428b      	cmp	r3, r1
 8003576:	d80d      	bhi.n	8003594 <HAL_I2C_Init+0x124>
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	1e59      	subs	r1, r3, #1
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	005b      	lsls	r3, r3, #1
 8003582:	fbb1 f3f3 	udiv	r3, r1, r3
 8003586:	3301      	adds	r3, #1
 8003588:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800358c:	2b04      	cmp	r3, #4
 800358e:	bf38      	it	cc
 8003590:	2304      	movcc	r3, #4
 8003592:	e04f      	b.n	8003634 <HAL_I2C_Init+0x1c4>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d111      	bne.n	80035c0 <HAL_I2C_Init+0x150>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	1e58      	subs	r0, r3, #1
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6859      	ldr	r1, [r3, #4]
 80035a4:	460b      	mov	r3, r1
 80035a6:	005b      	lsls	r3, r3, #1
 80035a8:	440b      	add	r3, r1
 80035aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80035ae:	3301      	adds	r3, #1
 80035b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	bf0c      	ite	eq
 80035b8:	2301      	moveq	r3, #1
 80035ba:	2300      	movne	r3, #0
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	e012      	b.n	80035e6 <HAL_I2C_Init+0x176>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	1e58      	subs	r0, r3, #1
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6859      	ldr	r1, [r3, #4]
 80035c8:	460b      	mov	r3, r1
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	440b      	add	r3, r1
 80035ce:	0099      	lsls	r1, r3, #2
 80035d0:	440b      	add	r3, r1
 80035d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80035d6:	3301      	adds	r3, #1
 80035d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035dc:	2b00      	cmp	r3, #0
 80035de:	bf0c      	ite	eq
 80035e0:	2301      	moveq	r3, #1
 80035e2:	2300      	movne	r3, #0
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <HAL_I2C_Init+0x17e>
 80035ea:	2301      	movs	r3, #1
 80035ec:	e022      	b.n	8003634 <HAL_I2C_Init+0x1c4>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10e      	bne.n	8003614 <HAL_I2C_Init+0x1a4>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	1e58      	subs	r0, r3, #1
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6859      	ldr	r1, [r3, #4]
 80035fe:	460b      	mov	r3, r1
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	440b      	add	r3, r1
 8003604:	fbb0 f3f3 	udiv	r3, r0, r3
 8003608:	3301      	adds	r3, #1
 800360a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800360e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003612:	e00f      	b.n	8003634 <HAL_I2C_Init+0x1c4>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	1e58      	subs	r0, r3, #1
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6859      	ldr	r1, [r3, #4]
 800361c:	460b      	mov	r3, r1
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	440b      	add	r3, r1
 8003622:	0099      	lsls	r1, r3, #2
 8003624:	440b      	add	r3, r1
 8003626:	fbb0 f3f3 	udiv	r3, r0, r3
 800362a:	3301      	adds	r3, #1
 800362c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003630:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003634:	6879      	ldr	r1, [r7, #4]
 8003636:	6809      	ldr	r1, [r1, #0]
 8003638:	4313      	orrs	r3, r2
 800363a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	69da      	ldr	r2, [r3, #28]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a1b      	ldr	r3, [r3, #32]
 800364e:	431a      	orrs	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	430a      	orrs	r2, r1
 8003656:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003662:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	6911      	ldr	r1, [r2, #16]
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	68d2      	ldr	r2, [r2, #12]
 800366e:	4311      	orrs	r1, r2
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	6812      	ldr	r2, [r2, #0]
 8003674:	430b      	orrs	r3, r1
 8003676:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	695a      	ldr	r2, [r3, #20]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	431a      	orrs	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	430a      	orrs	r2, r1
 8003692:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f042 0201 	orr.w	r2, r2, #1
 80036a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2220      	movs	r2, #32
 80036ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	000186a0 	.word	0x000186a0
 80036d0:	001e847f 	.word	0x001e847f
 80036d4:	003d08ff 	.word	0x003d08ff
 80036d8:	431bde83 	.word	0x431bde83
 80036dc:	10624dd3 	.word	0x10624dd3

080036e0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b088      	sub	sp, #32
 80036e4:	af02      	add	r7, sp, #8
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	4608      	mov	r0, r1
 80036ea:	4611      	mov	r1, r2
 80036ec:	461a      	mov	r2, r3
 80036ee:	4603      	mov	r3, r0
 80036f0:	817b      	strh	r3, [r7, #10]
 80036f2:	460b      	mov	r3, r1
 80036f4:	813b      	strh	r3, [r7, #8]
 80036f6:	4613      	mov	r3, r2
 80036f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80036fa:	f7fe fc81 	bl	8002000 <HAL_GetTick>
 80036fe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b20      	cmp	r3, #32
 800370a:	f040 80d9 	bne.w	80038c0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	9300      	str	r3, [sp, #0]
 8003712:	2319      	movs	r3, #25
 8003714:	2201      	movs	r2, #1
 8003716:	496d      	ldr	r1, [pc, #436]	; (80038cc <HAL_I2C_Mem_Write+0x1ec>)
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	f002 fabf 	bl	8005c9c <I2C_WaitOnFlagUntilTimeout>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d001      	beq.n	8003728 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003724:	2302      	movs	r3, #2
 8003726:	e0cc      	b.n	80038c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800372e:	2b01      	cmp	r3, #1
 8003730:	d101      	bne.n	8003736 <HAL_I2C_Mem_Write+0x56>
 8003732:	2302      	movs	r3, #2
 8003734:	e0c5      	b.n	80038c2 <HAL_I2C_Mem_Write+0x1e2>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0301 	and.w	r3, r3, #1
 8003748:	2b01      	cmp	r3, #1
 800374a:	d007      	beq.n	800375c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f042 0201 	orr.w	r2, r2, #1
 800375a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800376a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2221      	movs	r2, #33	; 0x21
 8003770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2240      	movs	r2, #64	; 0x40
 8003778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6a3a      	ldr	r2, [r7, #32]
 8003786:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800378c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003792:	b29a      	uxth	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	4a4d      	ldr	r2, [pc, #308]	; (80038d0 <HAL_I2C_Mem_Write+0x1f0>)
 800379c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800379e:	88f8      	ldrh	r0, [r7, #6]
 80037a0:	893a      	ldrh	r2, [r7, #8]
 80037a2:	8979      	ldrh	r1, [r7, #10]
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	9301      	str	r3, [sp, #4]
 80037a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037aa:	9300      	str	r3, [sp, #0]
 80037ac:	4603      	mov	r3, r0
 80037ae:	68f8      	ldr	r0, [r7, #12]
 80037b0:	f002 f84e 	bl	8005850 <I2C_RequestMemoryWrite>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d052      	beq.n	8003860 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e081      	b.n	80038c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037be:	697a      	ldr	r2, [r7, #20]
 80037c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037c2:	68f8      	ldr	r0, [r7, #12]
 80037c4:	f002 fb40 	bl	8005e48 <I2C_WaitOnTXEFlagUntilTimeout>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00d      	beq.n	80037ea <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d2:	2b04      	cmp	r3, #4
 80037d4:	d107      	bne.n	80037e6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e06b      	b.n	80038c2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ee:	781a      	ldrb	r2, [r3, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fa:	1c5a      	adds	r2, r3, #1
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003804:	3b01      	subs	r3, #1
 8003806:	b29a      	uxth	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003810:	b29b      	uxth	r3, r3
 8003812:	3b01      	subs	r3, #1
 8003814:	b29a      	uxth	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	695b      	ldr	r3, [r3, #20]
 8003820:	f003 0304 	and.w	r3, r3, #4
 8003824:	2b04      	cmp	r3, #4
 8003826:	d11b      	bne.n	8003860 <HAL_I2C_Mem_Write+0x180>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800382c:	2b00      	cmp	r3, #0
 800382e:	d017      	beq.n	8003860 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003834:	781a      	ldrb	r2, [r3, #0]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003840:	1c5a      	adds	r2, r3, #1
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800384a:	3b01      	subs	r3, #1
 800384c:	b29a      	uxth	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003856:	b29b      	uxth	r3, r3
 8003858:	3b01      	subs	r3, #1
 800385a:	b29a      	uxth	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003864:	2b00      	cmp	r3, #0
 8003866:	d1aa      	bne.n	80037be <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003868:	697a      	ldr	r2, [r7, #20]
 800386a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800386c:	68f8      	ldr	r0, [r7, #12]
 800386e:	f002 fb2c 	bl	8005eca <I2C_WaitOnBTFFlagUntilTimeout>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d00d      	beq.n	8003894 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387c:	2b04      	cmp	r3, #4
 800387e:	d107      	bne.n	8003890 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800388e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e016      	b.n	80038c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2220      	movs	r2, #32
 80038a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80038bc:	2300      	movs	r3, #0
 80038be:	e000      	b.n	80038c2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80038c0:	2302      	movs	r3, #2
  }
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3718      	adds	r7, #24
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	00100002 	.word	0x00100002
 80038d0:	ffff0000 	.word	0xffff0000

080038d4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b08c      	sub	sp, #48	; 0x30
 80038d8:	af02      	add	r7, sp, #8
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	4608      	mov	r0, r1
 80038de:	4611      	mov	r1, r2
 80038e0:	461a      	mov	r2, r3
 80038e2:	4603      	mov	r3, r0
 80038e4:	817b      	strh	r3, [r7, #10]
 80038e6:	460b      	mov	r3, r1
 80038e8:	813b      	strh	r3, [r7, #8]
 80038ea:	4613      	mov	r3, r2
 80038ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80038ee:	f7fe fb87 	bl	8002000 <HAL_GetTick>
 80038f2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	2b20      	cmp	r3, #32
 80038fe:	f040 8208 	bne.w	8003d12 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003904:	9300      	str	r3, [sp, #0]
 8003906:	2319      	movs	r3, #25
 8003908:	2201      	movs	r2, #1
 800390a:	497b      	ldr	r1, [pc, #492]	; (8003af8 <HAL_I2C_Mem_Read+0x224>)
 800390c:	68f8      	ldr	r0, [r7, #12]
 800390e:	f002 f9c5 	bl	8005c9c <I2C_WaitOnFlagUntilTimeout>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d001      	beq.n	800391c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003918:	2302      	movs	r3, #2
 800391a:	e1fb      	b.n	8003d14 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003922:	2b01      	cmp	r3, #1
 8003924:	d101      	bne.n	800392a <HAL_I2C_Mem_Read+0x56>
 8003926:	2302      	movs	r3, #2
 8003928:	e1f4      	b.n	8003d14 <HAL_I2C_Mem_Read+0x440>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2201      	movs	r2, #1
 800392e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0301 	and.w	r3, r3, #1
 800393c:	2b01      	cmp	r3, #1
 800393e:	d007      	beq.n	8003950 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f042 0201 	orr.w	r2, r2, #1
 800394e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800395e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2222      	movs	r2, #34	; 0x22
 8003964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2240      	movs	r2, #64	; 0x40
 800396c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2200      	movs	r2, #0
 8003974:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800397a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003980:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003986:	b29a      	uxth	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	4a5b      	ldr	r2, [pc, #364]	; (8003afc <HAL_I2C_Mem_Read+0x228>)
 8003990:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003992:	88f8      	ldrh	r0, [r7, #6]
 8003994:	893a      	ldrh	r2, [r7, #8]
 8003996:	8979      	ldrh	r1, [r7, #10]
 8003998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399a:	9301      	str	r3, [sp, #4]
 800399c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800399e:	9300      	str	r3, [sp, #0]
 80039a0:	4603      	mov	r3, r0
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f001 ffea 	bl	800597c <I2C_RequestMemoryRead>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e1b0      	b.n	8003d14 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d113      	bne.n	80039e2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039ba:	2300      	movs	r3, #0
 80039bc:	623b      	str	r3, [r7, #32]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	695b      	ldr	r3, [r3, #20]
 80039c4:	623b      	str	r3, [r7, #32]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	699b      	ldr	r3, [r3, #24]
 80039cc:	623b      	str	r3, [r7, #32]
 80039ce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039de:	601a      	str	r2, [r3, #0]
 80039e0:	e184      	b.n	8003cec <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d11b      	bne.n	8003a22 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039fa:	2300      	movs	r3, #0
 80039fc:	61fb      	str	r3, [r7, #28]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	695b      	ldr	r3, [r3, #20]
 8003a04:	61fb      	str	r3, [r7, #28]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	61fb      	str	r3, [r7, #28]
 8003a0e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a1e:	601a      	str	r2, [r3, #0]
 8003a20:	e164      	b.n	8003cec <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d11b      	bne.n	8003a62 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a38:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	61bb      	str	r3, [r7, #24]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	695b      	ldr	r3, [r3, #20]
 8003a54:	61bb      	str	r3, [r7, #24]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	61bb      	str	r3, [r7, #24]
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	e144      	b.n	8003cec <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a62:	2300      	movs	r3, #0
 8003a64:	617b      	str	r3, [r7, #20]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	695b      	ldr	r3, [r3, #20]
 8003a6c:	617b      	str	r3, [r7, #20]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	617b      	str	r3, [r7, #20]
 8003a76:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003a78:	e138      	b.n	8003cec <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a7e:	2b03      	cmp	r3, #3
 8003a80:	f200 80f1 	bhi.w	8003c66 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d123      	bne.n	8003ad4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a8e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a90:	68f8      	ldr	r0, [r7, #12]
 8003a92:	f002 fa8d 	bl	8005fb0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d001      	beq.n	8003aa0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e139      	b.n	8003d14 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	691a      	ldr	r2, [r3, #16]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aaa:	b2d2      	uxtb	r2, r2
 8003aac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab2:	1c5a      	adds	r2, r3, #1
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003abc:	3b01      	subs	r3, #1
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	3b01      	subs	r3, #1
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ad2:	e10b      	b.n	8003cec <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d14e      	bne.n	8003b7a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ade:	9300      	str	r3, [sp, #0]
 8003ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	4906      	ldr	r1, [pc, #24]	; (8003b00 <HAL_I2C_Mem_Read+0x22c>)
 8003ae6:	68f8      	ldr	r0, [r7, #12]
 8003ae8:	f002 f8d8 	bl	8005c9c <I2C_WaitOnFlagUntilTimeout>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d008      	beq.n	8003b04 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e10e      	b.n	8003d14 <HAL_I2C_Mem_Read+0x440>
 8003af6:	bf00      	nop
 8003af8:	00100002 	.word	0x00100002
 8003afc:	ffff0000 	.word	0xffff0000
 8003b00:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	691a      	ldr	r2, [r3, #16]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1e:	b2d2      	uxtb	r2, r2
 8003b20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b26:	1c5a      	adds	r2, r3, #1
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b30:	3b01      	subs	r3, #1
 8003b32:	b29a      	uxth	r2, r3
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	b29a      	uxth	r2, r3
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	691a      	ldr	r2, [r3, #16]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b50:	b2d2      	uxtb	r2, r2
 8003b52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b58:	1c5a      	adds	r2, r3, #1
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b62:	3b01      	subs	r3, #1
 8003b64:	b29a      	uxth	r2, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	3b01      	subs	r3, #1
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b78:	e0b8      	b.n	8003cec <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7c:	9300      	str	r3, [sp, #0]
 8003b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b80:	2200      	movs	r2, #0
 8003b82:	4966      	ldr	r1, [pc, #408]	; (8003d1c <HAL_I2C_Mem_Read+0x448>)
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f002 f889 	bl	8005c9c <I2C_WaitOnFlagUntilTimeout>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d001      	beq.n	8003b94 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e0bf      	b.n	8003d14 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ba2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	691a      	ldr	r2, [r3, #16]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bae:	b2d2      	uxtb	r2, r2
 8003bb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb6:	1c5a      	adds	r2, r3, #1
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd8:	9300      	str	r3, [sp, #0]
 8003bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bdc:	2200      	movs	r2, #0
 8003bde:	494f      	ldr	r1, [pc, #316]	; (8003d1c <HAL_I2C_Mem_Read+0x448>)
 8003be0:	68f8      	ldr	r0, [r7, #12]
 8003be2:	f002 f85b 	bl	8005c9c <I2C_WaitOnFlagUntilTimeout>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d001      	beq.n	8003bf0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e091      	b.n	8003d14 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bfe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	691a      	ldr	r2, [r3, #16]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0a:	b2d2      	uxtb	r2, r2
 8003c0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c12:	1c5a      	adds	r2, r3, #1
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	691a      	ldr	r2, [r3, #16]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3c:	b2d2      	uxtb	r2, r2
 8003c3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c44:	1c5a      	adds	r2, r3, #1
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c64:	e042      	b.n	8003cec <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c68:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f002 f9a0 	bl	8005fb0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e04c      	b.n	8003d14 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	691a      	ldr	r2, [r3, #16]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c84:	b2d2      	uxtb	r2, r2
 8003c86:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8c:	1c5a      	adds	r2, r3, #1
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c96:	3b01      	subs	r3, #1
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	f003 0304 	and.w	r3, r3, #4
 8003cb6:	2b04      	cmp	r3, #4
 8003cb8:	d118      	bne.n	8003cec <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	691a      	ldr	r2, [r3, #16]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc4:	b2d2      	uxtb	r2, r2
 8003cc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ccc:	1c5a      	adds	r2, r3, #1
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	b29a      	uxth	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f47f aec2 	bne.w	8003a7a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2220      	movs	r2, #32
 8003cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	e000      	b.n	8003d14 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003d12:	2302      	movs	r3, #2
  }
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3728      	adds	r7, #40	; 0x28
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	00010004 	.word	0x00010004

08003d20 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b087      	sub	sp, #28
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	4608      	mov	r0, r1
 8003d2a:	4611      	mov	r1, r2
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	4603      	mov	r3, r0
 8003d30:	817b      	strh	r3, [r7, #10]
 8003d32:	460b      	mov	r3, r1
 8003d34:	813b      	strh	r3, [r7, #8]
 8003d36:	4613      	mov	r3, r2
 8003d38:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b20      	cmp	r3, #32
 8003d48:	f040 809a 	bne.w	8003e80 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003d4c:	4b50      	ldr	r3, [pc, #320]	; (8003e90 <HAL_I2C_Mem_Read_IT+0x170>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	08db      	lsrs	r3, r3, #3
 8003d52:	4a50      	ldr	r2, [pc, #320]	; (8003e94 <HAL_I2C_Mem_Read_IT+0x174>)
 8003d54:	fba2 2303 	umull	r2, r3, r2, r3
 8003d58:	0a1a      	lsrs	r2, r3, #8
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	4413      	add	r3, r2
 8003d60:	009a      	lsls	r2, r3, #2
 8003d62:	4413      	add	r3, r2
 8003d64:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d116      	bne.n	8003da0 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2200      	movs	r2, #0
 8003d76:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2220      	movs	r2, #32
 8003d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8c:	f043 0220 	orr.w	r2, r3, #32
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e070      	b.n	8003e82 <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d0db      	beq.n	8003d66 <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d101      	bne.n	8003dbc <HAL_I2C_Mem_Read_IT+0x9c>
 8003db8:	2302      	movs	r3, #2
 8003dba:	e062      	b.n	8003e82 <HAL_I2C_Mem_Read_IT+0x162>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0301 	and.w	r3, r3, #1
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d007      	beq.n	8003de2 <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f042 0201 	orr.w	r2, r2, #1
 8003de0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003df0:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2222      	movs	r2, #34	; 0x22
 8003df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2240      	movs	r2, #64	; 0x40
 8003dfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2200      	movs	r2, #0
 8003e06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6a3a      	ldr	r2, [r7, #32]
 8003e0c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003e12:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	4a1d      	ldr	r2, [pc, #116]	; (8003e98 <HAL_I2C_Mem_Read_IT+0x178>)
 8003e22:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003e24:	897a      	ldrh	r2, [r7, #10]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8003e2a:	893a      	ldrh	r2, [r7, #8]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8003e30:	88fa      	ldrh	r2, [r7, #6]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e4a:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e5a:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d007      	beq.n	8003e7c <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	685a      	ldr	r2, [r3, #4]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003e7a:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	e000      	b.n	8003e82 <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 8003e80:	2302      	movs	r3, #2
  }
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	371c      	adds	r7, #28
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	20000000 	.word	0x20000000
 8003e94:	14f8b589 	.word	0x14f8b589
 8003e98:	ffff0000 	.word	0xffff0000

08003e9c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b08a      	sub	sp, #40	; 0x28
 8003ea0:	af02      	add	r7, sp, #8
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	607a      	str	r2, [r7, #4]
 8003ea6:	603b      	str	r3, [r7, #0]
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003eac:	f7fe f8a8 	bl	8002000 <HAL_GetTick>
 8003eb0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b20      	cmp	r3, #32
 8003ec0:	f040 8111 	bne.w	80040e6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	9300      	str	r3, [sp, #0]
 8003ec8:	2319      	movs	r3, #25
 8003eca:	2201      	movs	r2, #1
 8003ecc:	4988      	ldr	r1, [pc, #544]	; (80040f0 <HAL_I2C_IsDeviceReady+0x254>)
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f001 fee4 	bl	8005c9c <I2C_WaitOnFlagUntilTimeout>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003eda:	2302      	movs	r3, #2
 8003edc:	e104      	b.n	80040e8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d101      	bne.n	8003eec <HAL_I2C_IsDeviceReady+0x50>
 8003ee8:	2302      	movs	r3, #2
 8003eea:	e0fd      	b.n	80040e8 <HAL_I2C_IsDeviceReady+0x24c>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d007      	beq.n	8003f12 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f042 0201 	orr.w	r2, r2, #1
 8003f10:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f20:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2224      	movs	r2, #36	; 0x24
 8003f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	4a70      	ldr	r2, [pc, #448]	; (80040f4 <HAL_I2C_IsDeviceReady+0x258>)
 8003f34:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f44:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	9300      	str	r3, [sp, #0]
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	f001 fea2 	bl	8005c9c <I2C_WaitOnFlagUntilTimeout>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00d      	beq.n	8003f7a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f6c:	d103      	bne.n	8003f76 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f74:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e0b6      	b.n	80040e8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f7a:	897b      	ldrh	r3, [r7, #10]
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	461a      	mov	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f88:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003f8a:	f7fe f839 	bl	8002000 <HAL_GetTick>
 8003f8e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	bf0c      	ite	eq
 8003f9e:	2301      	moveq	r3, #1
 8003fa0:	2300      	movne	r3, #0
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	695b      	ldr	r3, [r3, #20]
 8003fac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fb4:	bf0c      	ite	eq
 8003fb6:	2301      	moveq	r3, #1
 8003fb8:	2300      	movne	r3, #0
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003fbe:	e025      	b.n	800400c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003fc0:	f7fe f81e 	bl	8002000 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	683a      	ldr	r2, [r7, #0]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d302      	bcc.n	8003fd6 <HAL_I2C_IsDeviceReady+0x13a>
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d103      	bne.n	8003fde <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	22a0      	movs	r2, #160	; 0xa0
 8003fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	695b      	ldr	r3, [r3, #20]
 8003fe4:	f003 0302 	and.w	r3, r3, #2
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	bf0c      	ite	eq
 8003fec:	2301      	moveq	r3, #1
 8003fee:	2300      	movne	r3, #0
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ffe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004002:	bf0c      	ite	eq
 8004004:	2301      	moveq	r3, #1
 8004006:	2300      	movne	r3, #0
 8004008:	b2db      	uxtb	r3, r3
 800400a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004012:	b2db      	uxtb	r3, r3
 8004014:	2ba0      	cmp	r3, #160	; 0xa0
 8004016:	d005      	beq.n	8004024 <HAL_I2C_IsDeviceReady+0x188>
 8004018:	7dfb      	ldrb	r3, [r7, #23]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d102      	bne.n	8004024 <HAL_I2C_IsDeviceReady+0x188>
 800401e:	7dbb      	ldrb	r3, [r7, #22]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d0cd      	beq.n	8003fc0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2220      	movs	r2, #32
 8004028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b02      	cmp	r3, #2
 8004038:	d129      	bne.n	800408e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004048:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800404a:	2300      	movs	r3, #0
 800404c:	613b      	str	r3, [r7, #16]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	695b      	ldr	r3, [r3, #20]
 8004054:	613b      	str	r3, [r7, #16]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	613b      	str	r3, [r7, #16]
 800405e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	9300      	str	r3, [sp, #0]
 8004064:	2319      	movs	r3, #25
 8004066:	2201      	movs	r2, #1
 8004068:	4921      	ldr	r1, [pc, #132]	; (80040f0 <HAL_I2C_IsDeviceReady+0x254>)
 800406a:	68f8      	ldr	r0, [r7, #12]
 800406c:	f001 fe16 	bl	8005c9c <I2C_WaitOnFlagUntilTimeout>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d001      	beq.n	800407a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e036      	b.n	80040e8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2220      	movs	r2, #32
 800407e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800408a:	2300      	movs	r3, #0
 800408c:	e02c      	b.n	80040e8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800409c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80040a6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	9300      	str	r3, [sp, #0]
 80040ac:	2319      	movs	r3, #25
 80040ae:	2201      	movs	r2, #1
 80040b0:	490f      	ldr	r1, [pc, #60]	; (80040f0 <HAL_I2C_IsDeviceReady+0x254>)
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f001 fdf2 	bl	8005c9c <I2C_WaitOnFlagUntilTimeout>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e012      	b.n	80040e8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	3301      	adds	r3, #1
 80040c6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80040c8:	69ba      	ldr	r2, [r7, #24]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	f4ff af32 	bcc.w	8003f36 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2220      	movs	r2, #32
 80040d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e000      	b.n	80040e8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80040e6:	2302      	movs	r3, #2
  }
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3720      	adds	r7, #32
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	00100002 	.word	0x00100002
 80040f4:	ffff0000 	.word	0xffff0000

080040f8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b088      	sub	sp, #32
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004100:	2300      	movs	r3, #0
 8004102:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004110:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004118:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004120:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004122:	7bfb      	ldrb	r3, [r7, #15]
 8004124:	2b10      	cmp	r3, #16
 8004126:	d003      	beq.n	8004130 <HAL_I2C_EV_IRQHandler+0x38>
 8004128:	7bfb      	ldrb	r3, [r7, #15]
 800412a:	2b40      	cmp	r3, #64	; 0x40
 800412c:	f040 80bd 	bne.w	80042aa <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	f003 0301 	and.w	r3, r3, #1
 8004146:	2b00      	cmp	r3, #0
 8004148:	d10d      	bne.n	8004166 <HAL_I2C_EV_IRQHandler+0x6e>
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004150:	d003      	beq.n	800415a <HAL_I2C_EV_IRQHandler+0x62>
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004158:	d101      	bne.n	800415e <HAL_I2C_EV_IRQHandler+0x66>
 800415a:	2301      	movs	r3, #1
 800415c:	e000      	b.n	8004160 <HAL_I2C_EV_IRQHandler+0x68>
 800415e:	2300      	movs	r3, #0
 8004160:	2b01      	cmp	r3, #1
 8004162:	f000 812e 	beq.w	80043c2 <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	f003 0301 	and.w	r3, r3, #1
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00c      	beq.n	800418a <HAL_I2C_EV_IRQHandler+0x92>
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	0a5b      	lsrs	r3, r3, #9
 8004174:	f003 0301 	and.w	r3, r3, #1
 8004178:	2b00      	cmp	r3, #0
 800417a:	d006      	beq.n	800418a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f001 ff9c 	bl	80060ba <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 fd4e 	bl	8004c24 <I2C_Master_SB>
 8004188:	e08e      	b.n	80042a8 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	08db      	lsrs	r3, r3, #3
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b00      	cmp	r3, #0
 8004194:	d009      	beq.n	80041aa <HAL_I2C_EV_IRQHandler+0xb2>
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	0a5b      	lsrs	r3, r3, #9
 800419a:	f003 0301 	and.w	r3, r3, #1
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d003      	beq.n	80041aa <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 fdc4 	bl	8004d30 <I2C_Master_ADD10>
 80041a8:	e07e      	b.n	80042a8 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	085b      	lsrs	r3, r3, #1
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d009      	beq.n	80041ca <HAL_I2C_EV_IRQHandler+0xd2>
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	0a5b      	lsrs	r3, r3, #9
 80041ba:	f003 0301 	and.w	r3, r3, #1
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d003      	beq.n	80041ca <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 fdde 	bl	8004d84 <I2C_Master_ADDR>
 80041c8:	e06e      	b.n	80042a8 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	089b      	lsrs	r3, r3, #2
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d037      	beq.n	8004246 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041e4:	f000 80ef 	beq.w	80043c6 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	09db      	lsrs	r3, r3, #7
 80041ec:	f003 0301 	and.w	r3, r3, #1
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00f      	beq.n	8004214 <HAL_I2C_EV_IRQHandler+0x11c>
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	0a9b      	lsrs	r3, r3, #10
 80041f8:	f003 0301 	and.w	r3, r3, #1
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d009      	beq.n	8004214 <HAL_I2C_EV_IRQHandler+0x11c>
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	089b      	lsrs	r3, r3, #2
 8004204:	f003 0301 	and.w	r3, r3, #1
 8004208:	2b00      	cmp	r3, #0
 800420a:	d103      	bne.n	8004214 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f000 f9db 	bl	80045c8 <I2C_MasterTransmit_TXE>
 8004212:	e049      	b.n	80042a8 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	089b      	lsrs	r3, r3, #2
 8004218:	f003 0301 	and.w	r3, r3, #1
 800421c:	2b00      	cmp	r3, #0
 800421e:	f000 80d2 	beq.w	80043c6 <HAL_I2C_EV_IRQHandler+0x2ce>
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	0a5b      	lsrs	r3, r3, #9
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	2b00      	cmp	r3, #0
 800422c:	f000 80cb 	beq.w	80043c6 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8004230:	7bfb      	ldrb	r3, [r7, #15]
 8004232:	2b10      	cmp	r3, #16
 8004234:	d103      	bne.n	800423e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 fa62 	bl	8004700 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800423c:	e0c3      	b.n	80043c6 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 fac6 	bl	80047d0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004244:	e0bf      	b.n	80043c6 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004250:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004254:	f000 80b7 	beq.w	80043c6 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	099b      	lsrs	r3, r3, #6
 800425c:	f003 0301 	and.w	r3, r3, #1
 8004260:	2b00      	cmp	r3, #0
 8004262:	d00f      	beq.n	8004284 <HAL_I2C_EV_IRQHandler+0x18c>
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	0a9b      	lsrs	r3, r3, #10
 8004268:	f003 0301 	and.w	r3, r3, #1
 800426c:	2b00      	cmp	r3, #0
 800426e:	d009      	beq.n	8004284 <HAL_I2C_EV_IRQHandler+0x18c>
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	089b      	lsrs	r3, r3, #2
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	2b00      	cmp	r3, #0
 800427a:	d103      	bne.n	8004284 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f000 fb36 	bl	80048ee <I2C_MasterReceive_RXNE>
 8004282:	e011      	b.n	80042a8 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	089b      	lsrs	r3, r3, #2
 8004288:	f003 0301 	and.w	r3, r3, #1
 800428c:	2b00      	cmp	r3, #0
 800428e:	f000 809a 	beq.w	80043c6 <HAL_I2C_EV_IRQHandler+0x2ce>
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	0a5b      	lsrs	r3, r3, #9
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	2b00      	cmp	r3, #0
 800429c:	f000 8093 	beq.w	80043c6 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 fbd5 	bl	8004a50 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042a6:	e08e      	b.n	80043c6 <HAL_I2C_EV_IRQHandler+0x2ce>
 80042a8:	e08d      	b.n	80043c6 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d004      	beq.n	80042bc <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	695b      	ldr	r3, [r3, #20]
 80042b8:	61fb      	str	r3, [r7, #28]
 80042ba:	e007      	b.n	80042cc <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	085b      	lsrs	r3, r3, #1
 80042d0:	f003 0301 	and.w	r3, r3, #1
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d012      	beq.n	80042fe <HAL_I2C_EV_IRQHandler+0x206>
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	0a5b      	lsrs	r3, r3, #9
 80042dc:	f003 0301 	and.w	r3, r3, #1
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d00c      	beq.n	80042fe <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d003      	beq.n	80042f4 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80042f4:	69b9      	ldr	r1, [r7, #24]
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 ff93 	bl	8005222 <I2C_Slave_ADDR>
 80042fc:	e066      	b.n	80043cc <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	091b      	lsrs	r3, r3, #4
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	2b00      	cmp	r3, #0
 8004308:	d009      	beq.n	800431e <HAL_I2C_EV_IRQHandler+0x226>
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	0a5b      	lsrs	r3, r3, #9
 800430e:	f003 0301 	and.w	r3, r3, #1
 8004312:	2b00      	cmp	r3, #0
 8004314:	d003      	beq.n	800431e <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 ffc8 	bl	80052ac <I2C_Slave_STOPF>
 800431c:	e056      	b.n	80043cc <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800431e:	7bbb      	ldrb	r3, [r7, #14]
 8004320:	2b21      	cmp	r3, #33	; 0x21
 8004322:	d002      	beq.n	800432a <HAL_I2C_EV_IRQHandler+0x232>
 8004324:	7bbb      	ldrb	r3, [r7, #14]
 8004326:	2b29      	cmp	r3, #41	; 0x29
 8004328:	d125      	bne.n	8004376 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	09db      	lsrs	r3, r3, #7
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00f      	beq.n	8004356 <HAL_I2C_EV_IRQHandler+0x25e>
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	0a9b      	lsrs	r3, r3, #10
 800433a:	f003 0301 	and.w	r3, r3, #1
 800433e:	2b00      	cmp	r3, #0
 8004340:	d009      	beq.n	8004356 <HAL_I2C_EV_IRQHandler+0x25e>
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	089b      	lsrs	r3, r3, #2
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	2b00      	cmp	r3, #0
 800434c:	d103      	bne.n	8004356 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 fea9 	bl	80050a6 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004354:	e039      	b.n	80043ca <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	089b      	lsrs	r3, r3, #2
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	2b00      	cmp	r3, #0
 8004360:	d033      	beq.n	80043ca <HAL_I2C_EV_IRQHandler+0x2d2>
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	0a5b      	lsrs	r3, r3, #9
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b00      	cmp	r3, #0
 800436c:	d02d      	beq.n	80043ca <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 fed6 	bl	8005120 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004374:	e029      	b.n	80043ca <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	099b      	lsrs	r3, r3, #6
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00f      	beq.n	80043a2 <HAL_I2C_EV_IRQHandler+0x2aa>
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	0a9b      	lsrs	r3, r3, #10
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	2b00      	cmp	r3, #0
 800438c:	d009      	beq.n	80043a2 <HAL_I2C_EV_IRQHandler+0x2aa>
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	089b      	lsrs	r3, r3, #2
 8004392:	f003 0301 	and.w	r3, r3, #1
 8004396:	2b00      	cmp	r3, #0
 8004398:	d103      	bne.n	80043a2 <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 fee1 	bl	8005162 <I2C_SlaveReceive_RXNE>
 80043a0:	e014      	b.n	80043cc <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	089b      	lsrs	r3, r3, #2
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00e      	beq.n	80043cc <HAL_I2C_EV_IRQHandler+0x2d4>
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	0a5b      	lsrs	r3, r3, #9
 80043b2:	f003 0301 	and.w	r3, r3, #1
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d008      	beq.n	80043cc <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 ff0f 	bl	80051de <I2C_SlaveReceive_BTF>
 80043c0:	e004      	b.n	80043cc <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 80043c2:	bf00      	nop
 80043c4:	e002      	b.n	80043cc <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043c6:	bf00      	nop
 80043c8:	e000      	b.n	80043cc <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80043ca:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80043cc:	3720      	adds	r7, #32
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b08a      	sub	sp, #40	; 0x28
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	695b      	ldr	r3, [r3, #20]
 80043e0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80043ea:	2300      	movs	r3, #0
 80043ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043f4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80043f6:	6a3b      	ldr	r3, [r7, #32]
 80043f8:	0a1b      	lsrs	r3, r3, #8
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00e      	beq.n	8004420 <HAL_I2C_ER_IRQHandler+0x4e>
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	0a1b      	lsrs	r3, r3, #8
 8004406:	f003 0301 	and.w	r3, r3, #1
 800440a:	2b00      	cmp	r3, #0
 800440c:	d008      	beq.n	8004420 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800440e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004410:	f043 0301 	orr.w	r3, r3, #1
 8004414:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800441e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004420:	6a3b      	ldr	r3, [r7, #32]
 8004422:	0a5b      	lsrs	r3, r3, #9
 8004424:	f003 0301 	and.w	r3, r3, #1
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00e      	beq.n	800444a <HAL_I2C_ER_IRQHandler+0x78>
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	0a1b      	lsrs	r3, r3, #8
 8004430:	f003 0301 	and.w	r3, r3, #1
 8004434:	2b00      	cmp	r3, #0
 8004436:	d008      	beq.n	800444a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443a:	f043 0302 	orr.w	r3, r3, #2
 800443e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004448:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800444a:	6a3b      	ldr	r3, [r7, #32]
 800444c:	0a9b      	lsrs	r3, r3, #10
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	2b00      	cmp	r3, #0
 8004454:	d03f      	beq.n	80044d6 <HAL_I2C_ER_IRQHandler+0x104>
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	0a1b      	lsrs	r3, r3, #8
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	2b00      	cmp	r3, #0
 8004460:	d039      	beq.n	80044d6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004462:	7efb      	ldrb	r3, [r7, #27]
 8004464:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800446a:	b29b      	uxth	r3, r3
 800446c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004474:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800447c:	7ebb      	ldrb	r3, [r7, #26]
 800447e:	2b20      	cmp	r3, #32
 8004480:	d112      	bne.n	80044a8 <HAL_I2C_ER_IRQHandler+0xd6>
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d10f      	bne.n	80044a8 <HAL_I2C_ER_IRQHandler+0xd6>
 8004488:	7cfb      	ldrb	r3, [r7, #19]
 800448a:	2b21      	cmp	r3, #33	; 0x21
 800448c:	d008      	beq.n	80044a0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800448e:	7cfb      	ldrb	r3, [r7, #19]
 8004490:	2b29      	cmp	r3, #41	; 0x29
 8004492:	d005      	beq.n	80044a0 <HAL_I2C_ER_IRQHandler+0xce>
 8004494:	7cfb      	ldrb	r3, [r7, #19]
 8004496:	2b28      	cmp	r3, #40	; 0x28
 8004498:	d106      	bne.n	80044a8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2b21      	cmp	r3, #33	; 0x21
 800449e:	d103      	bne.n	80044a8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f001 f833 	bl	800550c <I2C_Slave_AF>
 80044a6:	e016      	b.n	80044d6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044b0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80044b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b4:	f043 0304 	orr.w	r3, r3, #4
 80044b8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80044ba:	7efb      	ldrb	r3, [r7, #27]
 80044bc:	2b10      	cmp	r3, #16
 80044be:	d002      	beq.n	80044c6 <HAL_I2C_ER_IRQHandler+0xf4>
 80044c0:	7efb      	ldrb	r3, [r7, #27]
 80044c2:	2b40      	cmp	r3, #64	; 0x40
 80044c4:	d107      	bne.n	80044d6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044d4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80044d6:	6a3b      	ldr	r3, [r7, #32]
 80044d8:	0adb      	lsrs	r3, r3, #11
 80044da:	f003 0301 	and.w	r3, r3, #1
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00e      	beq.n	8004500 <HAL_I2C_ER_IRQHandler+0x12e>
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	0a1b      	lsrs	r3, r3, #8
 80044e6:	f003 0301 	and.w	r3, r3, #1
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d008      	beq.n	8004500 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80044ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f0:	f043 0308 	orr.w	r3, r3, #8
 80044f4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80044fe:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004502:	2b00      	cmp	r3, #0
 8004504:	d008      	beq.n	8004518 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800450a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450c:	431a      	orrs	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f001 f86a 	bl	80055ec <I2C_ITError>
  }
}
 8004518:	bf00      	nop
 800451a:	3728      	adds	r7, #40	; 0x28
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004528:	bf00      	nop
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800453c:	bf00      	nop
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004550:	bf00      	nop
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004564:	bf00      	nop
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	460b      	mov	r3, r1
 800457a:	70fb      	strb	r3, [r7, #3]
 800457c:	4613      	mov	r3, r2
 800457e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004580:	bf00      	nop
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80045a8:	bf00      	nop
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80045bc:	bf00      	nop
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045d6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045de:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d150      	bne.n	8004690 <I2C_MasterTransmit_TXE+0xc8>
 80045ee:	7bfb      	ldrb	r3, [r7, #15]
 80045f0:	2b21      	cmp	r3, #33	; 0x21
 80045f2:	d14d      	bne.n	8004690 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	2b08      	cmp	r3, #8
 80045f8:	d01d      	beq.n	8004636 <I2C_MasterTransmit_TXE+0x6e>
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	2b20      	cmp	r3, #32
 80045fe:	d01a      	beq.n	8004636 <I2C_MasterTransmit_TXE+0x6e>
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004606:	d016      	beq.n	8004636 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	685a      	ldr	r2, [r3, #4]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004616:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2211      	movs	r2, #17
 800461c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2220      	movs	r2, #32
 800462a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f7ff ff76 	bl	8004520 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004634:	e060      	b.n	80046f8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	685a      	ldr	r2, [r3, #4]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004644:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004654:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2220      	movs	r2, #32
 8004660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800466a:	b2db      	uxtb	r3, r3
 800466c:	2b40      	cmp	r3, #64	; 0x40
 800466e:	d107      	bne.n	8004680 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f7ff ff91 	bl	80045a0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800467e:	e03b      	b.n	80046f8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f7ff ff49 	bl	8004520 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800468e:	e033      	b.n	80046f8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004690:	7bfb      	ldrb	r3, [r7, #15]
 8004692:	2b21      	cmp	r3, #33	; 0x21
 8004694:	d005      	beq.n	80046a2 <I2C_MasterTransmit_TXE+0xda>
 8004696:	7bbb      	ldrb	r3, [r7, #14]
 8004698:	2b40      	cmp	r3, #64	; 0x40
 800469a:	d12d      	bne.n	80046f8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800469c:	7bfb      	ldrb	r3, [r7, #15]
 800469e:	2b22      	cmp	r3, #34	; 0x22
 80046a0:	d12a      	bne.n	80046f8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d108      	bne.n	80046be <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	685a      	ldr	r2, [r3, #4]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046ba:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80046bc:	e01c      	b.n	80046f8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b40      	cmp	r3, #64	; 0x40
 80046c8:	d103      	bne.n	80046d2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 f880 	bl	80047d0 <I2C_MemoryTransmit_TXE_BTF>
}
 80046d0:	e012      	b.n	80046f8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d6:	781a      	ldrb	r2, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e2:	1c5a      	adds	r2, r3, #1
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	3b01      	subs	r3, #1
 80046f0:	b29a      	uxth	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80046f6:	e7ff      	b.n	80046f8 <I2C_MasterTransmit_TXE+0x130>
 80046f8:	bf00      	nop
 80046fa:	3710      	adds	r7, #16
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b21      	cmp	r3, #33	; 0x21
 8004718:	d156      	bne.n	80047c8 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800471e:	b29b      	uxth	r3, r3
 8004720:	2b00      	cmp	r3, #0
 8004722:	d012      	beq.n	800474a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004728:	781a      	ldrb	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004734:	1c5a      	adds	r2, r3, #1
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800473e:	b29b      	uxth	r3, r3
 8004740:	3b01      	subs	r3, #1
 8004742:	b29a      	uxth	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004748:	e03e      	b.n	80047c8 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2b08      	cmp	r3, #8
 800474e:	d01d      	beq.n	800478c <I2C_MasterTransmit_BTF+0x8c>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2b20      	cmp	r3, #32
 8004754:	d01a      	beq.n	800478c <I2C_MasterTransmit_BTF+0x8c>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800475c:	d016      	beq.n	800478c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	685a      	ldr	r2, [r3, #4]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800476c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2211      	movs	r2, #17
 8004772:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2220      	movs	r2, #32
 8004780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f7ff fecb 	bl	8004520 <HAL_I2C_MasterTxCpltCallback>
}
 800478a:	e01d      	b.n	80047c8 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	685a      	ldr	r2, [r3, #4]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800479a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047aa:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2220      	movs	r2, #32
 80047b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f7ff feac 	bl	8004520 <HAL_I2C_MasterTxCpltCallback>
}
 80047c8:	bf00      	nop
 80047ca:	3710      	adds	r7, #16
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047de:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d11d      	bne.n	8004824 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d10b      	bne.n	8004808 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047f4:	b2da      	uxtb	r2, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004800:	1c9a      	adds	r2, r3, #2
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004806:	e06e      	b.n	80048e6 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800480c:	b29b      	uxth	r3, r3
 800480e:	121b      	asrs	r3, r3, #8
 8004810:	b2da      	uxtb	r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800481c:	1c5a      	adds	r2, r3, #1
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004822:	e060      	b.n	80048e6 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004828:	2b01      	cmp	r3, #1
 800482a:	d10b      	bne.n	8004844 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004830:	b2da      	uxtb	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800483c:	1c5a      	adds	r2, r3, #1
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004842:	e050      	b.n	80048e6 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004848:	2b02      	cmp	r3, #2
 800484a:	d14c      	bne.n	80048e6 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800484c:	7bfb      	ldrb	r3, [r7, #15]
 800484e:	2b22      	cmp	r3, #34	; 0x22
 8004850:	d108      	bne.n	8004864 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004860:	601a      	str	r2, [r3, #0]
}
 8004862:	e040      	b.n	80048e6 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004868:	b29b      	uxth	r3, r3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d015      	beq.n	800489a <I2C_MemoryTransmit_TXE_BTF+0xca>
 800486e:	7bfb      	ldrb	r3, [r7, #15]
 8004870:	2b21      	cmp	r3, #33	; 0x21
 8004872:	d112      	bne.n	800489a <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004878:	781a      	ldrb	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004884:	1c5a      	adds	r2, r3, #1
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800488e:	b29b      	uxth	r3, r3
 8004890:	3b01      	subs	r3, #1
 8004892:	b29a      	uxth	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004898:	e025      	b.n	80048e6 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800489e:	b29b      	uxth	r3, r3
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d120      	bne.n	80048e6 <I2C_MemoryTransmit_TXE_BTF+0x116>
 80048a4:	7bfb      	ldrb	r3, [r7, #15]
 80048a6:	2b21      	cmp	r3, #33	; 0x21
 80048a8:	d11d      	bne.n	80048e6 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	685a      	ldr	r2, [r3, #4]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80048b8:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048c8:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2220      	movs	r2, #32
 80048d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f7ff fe5d 	bl	80045a0 <HAL_I2C_MemTxCpltCallback>
}
 80048e6:	bf00      	nop
 80048e8:	3710      	adds	r7, #16
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}

080048ee <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80048ee:	b580      	push	{r7, lr}
 80048f0:	b084      	sub	sp, #16
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b22      	cmp	r3, #34	; 0x22
 8004900:	f040 80a2 	bne.w	8004a48 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004908:	b29b      	uxth	r3, r3
 800490a:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2b03      	cmp	r3, #3
 8004910:	d921      	bls.n	8004956 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	691a      	ldr	r2, [r3, #16]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491c:	b2d2      	uxtb	r2, r2
 800491e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004924:	1c5a      	adds	r2, r3, #1
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800492e:	b29b      	uxth	r3, r3
 8004930:	3b01      	subs	r3, #1
 8004932:	b29a      	uxth	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800493c:	b29b      	uxth	r3, r3
 800493e:	2b03      	cmp	r3, #3
 8004940:	f040 8082 	bne.w	8004a48 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	685a      	ldr	r2, [r3, #4]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004952:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004954:	e078      	b.n	8004a48 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495a:	2b02      	cmp	r3, #2
 800495c:	d074      	beq.n	8004a48 <I2C_MasterReceive_RXNE+0x15a>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2b01      	cmp	r3, #1
 8004962:	d002      	beq.n	800496a <I2C_MasterReceive_RXNE+0x7c>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d16e      	bne.n	8004a48 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f001 faee 	bl	8005f4c <I2C_WaitOnSTOPRequestThroughIT>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d142      	bne.n	80049fc <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004984:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	685a      	ldr	r2, [r3, #4]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004994:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	691a      	ldr	r2, [r3, #16]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a0:	b2d2      	uxtb	r2, r2
 80049a2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a8:	1c5a      	adds	r2, r3, #1
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	3b01      	subs	r3, #1
 80049b6:	b29a      	uxth	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2220      	movs	r2, #32
 80049c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	2b40      	cmp	r3, #64	; 0x40
 80049ce:	d10a      	bne.n	80049e6 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f00c ff5c 	bl	801189c <HAL_I2C_MemRxCpltCallback>
}
 80049e4:	e030      	b.n	8004a48 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2212      	movs	r2, #18
 80049f2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f7ff fd9d 	bl	8004534 <HAL_I2C_MasterRxCpltCallback>
}
 80049fa:	e025      	b.n	8004a48 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	685a      	ldr	r2, [r3, #4]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a0a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	691a      	ldr	r2, [r3, #16]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a16:	b2d2      	uxtb	r2, r2
 8004a18:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1e:	1c5a      	adds	r2, r3, #1
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	b29a      	uxth	r2, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2220      	movs	r2, #32
 8004a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f00c ff34 	bl	80118b0 <HAL_I2C_ErrorCallback>
}
 8004a48:	bf00      	nop
 8004a4a:	3710      	adds	r7, #16
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	2b04      	cmp	r3, #4
 8004a66:	d11b      	bne.n	8004aa0 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	685a      	ldr	r2, [r3, #4]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a76:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	691a      	ldr	r2, [r3, #16]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a82:	b2d2      	uxtb	r2, r2
 8004a84:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8a:	1c5a      	adds	r2, r3, #1
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	3b01      	subs	r3, #1
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004a9e:	e0bd      	b.n	8004c1c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	2b03      	cmp	r3, #3
 8004aa8:	d129      	bne.n	8004afe <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	685a      	ldr	r2, [r3, #4]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ab8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2b04      	cmp	r3, #4
 8004abe:	d00a      	beq.n	8004ad6 <I2C_MasterReceive_BTF+0x86>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2b02      	cmp	r3, #2
 8004ac4:	d007      	beq.n	8004ad6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ad4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	691a      	ldr	r2, [r3, #16]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae0:	b2d2      	uxtb	r2, r2
 8004ae2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae8:	1c5a      	adds	r2, r3, #1
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	3b01      	subs	r3, #1
 8004af6:	b29a      	uxth	r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004afc:	e08e      	b.n	8004c1c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d176      	bne.n	8004bf6 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d002      	beq.n	8004b14 <I2C_MasterReceive_BTF+0xc4>
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2b10      	cmp	r3, #16
 8004b12:	d108      	bne.n	8004b26 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b22:	601a      	str	r2, [r3, #0]
 8004b24:	e019      	b.n	8004b5a <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2b04      	cmp	r3, #4
 8004b2a:	d002      	beq.n	8004b32 <I2C_MasterReceive_BTF+0xe2>
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d108      	bne.n	8004b44 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b40:	601a      	str	r2, [r3, #0]
 8004b42:	e00a      	b.n	8004b5a <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2b10      	cmp	r3, #16
 8004b48:	d007      	beq.n	8004b5a <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b58:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	691a      	ldr	r2, [r3, #16]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b64:	b2d2      	uxtb	r2, r2
 8004b66:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6c:	1c5a      	adds	r2, r3, #1
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	3b01      	subs	r3, #1
 8004b7a:	b29a      	uxth	r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	691a      	ldr	r2, [r3, #16]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8a:	b2d2      	uxtb	r2, r2
 8004b8c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b92:	1c5a      	adds	r2, r3, #1
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	b29a      	uxth	r2, r3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	685a      	ldr	r2, [r3, #4]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004bb4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2220      	movs	r2, #32
 8004bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	2b40      	cmp	r3, #64	; 0x40
 8004bc8:	d10a      	bne.n	8004be0 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f00c fe5f 	bl	801189c <HAL_I2C_MemRxCpltCallback>
}
 8004bde:	e01d      	b.n	8004c1c <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2212      	movs	r2, #18
 8004bec:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f7ff fca0 	bl	8004534 <HAL_I2C_MasterRxCpltCallback>
}
 8004bf4:	e012      	b.n	8004c1c <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	691a      	ldr	r2, [r3, #16]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c00:	b2d2      	uxtb	r2, r2
 8004c02:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c08:	1c5a      	adds	r2, r3, #1
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	3b01      	subs	r3, #1
 8004c16:	b29a      	uxth	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004c1c:	bf00      	nop
 8004c1e:	3710      	adds	r7, #16
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	2b40      	cmp	r3, #64	; 0x40
 8004c36:	d117      	bne.n	8004c68 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d109      	bne.n	8004c54 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	461a      	mov	r2, r3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c50:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004c52:	e067      	b.n	8004d24 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	f043 0301 	orr.w	r3, r3, #1
 8004c5e:	b2da      	uxtb	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	611a      	str	r2, [r3, #16]
}
 8004c66:	e05d      	b.n	8004d24 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	691b      	ldr	r3, [r3, #16]
 8004c6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c70:	d133      	bne.n	8004cda <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b21      	cmp	r3, #33	; 0x21
 8004c7c:	d109      	bne.n	8004c92 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	461a      	mov	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c8e:	611a      	str	r2, [r3, #16]
 8004c90:	e008      	b.n	8004ca4 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	f043 0301 	orr.w	r3, r3, #1
 8004c9c:	b2da      	uxtb	r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d004      	beq.n	8004cb6 <I2C_Master_SB+0x92>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d108      	bne.n	8004cc8 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d032      	beq.n	8004d24 <I2C_Master_SB+0x100>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d02d      	beq.n	8004d24 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	685a      	ldr	r2, [r3, #4]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cd6:	605a      	str	r2, [r3, #4]
}
 8004cd8:	e024      	b.n	8004d24 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d10e      	bne.n	8004d00 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	11db      	asrs	r3, r3, #7
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	f003 0306 	and.w	r3, r3, #6
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	f063 030f 	orn	r3, r3, #15
 8004cf6:	b2da      	uxtb	r2, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	611a      	str	r2, [r3, #16]
}
 8004cfe:	e011      	b.n	8004d24 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d10d      	bne.n	8004d24 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	11db      	asrs	r3, r3, #7
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	f003 0306 	and.w	r3, r3, #6
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	f063 030e 	orn	r3, r3, #14
 8004d1c:	b2da      	uxtb	r2, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	611a      	str	r2, [r3, #16]
}
 8004d24:	bf00      	nop
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d3c:	b2da      	uxtb	r2, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d103      	bne.n	8004d54 <I2C_Master_ADD10+0x24>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d011      	beq.n	8004d78 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d104      	bne.n	8004d68 <I2C_Master_ADD10+0x38>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d007      	beq.n	8004d78 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	685a      	ldr	r2, [r3, #4]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d76:	605a      	str	r2, [r3, #4]
    }
  }
}
 8004d78:	bf00      	nop
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b091      	sub	sp, #68	; 0x44
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d92:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d9a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da0:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	2b22      	cmp	r3, #34	; 0x22
 8004dac:	f040 8169 	bne.w	8005082 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d10f      	bne.n	8004dd8 <I2C_Master_ADDR+0x54>
 8004db8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004dbc:	2b40      	cmp	r3, #64	; 0x40
 8004dbe:	d10b      	bne.n	8004dd8 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	633b      	str	r3, [r7, #48]	; 0x30
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	633b      	str	r3, [r7, #48]	; 0x30
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	699b      	ldr	r3, [r3, #24]
 8004dd2:	633b      	str	r3, [r7, #48]	; 0x30
 8004dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd6:	e160      	b.n	800509a <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d11d      	bne.n	8004e1c <I2C_Master_ADDR+0x98>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004de8:	d118      	bne.n	8004e1c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dea:	2300      	movs	r3, #0
 8004dec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	695b      	ldr	r3, [r3, #20]
 8004df4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	699b      	ldr	r3, [r3, #24]
 8004dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e0e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e14:	1c5a      	adds	r2, r3, #1
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	651a      	str	r2, [r3, #80]	; 0x50
 8004e1a:	e13e      	b.n	800509a <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d113      	bne.n	8004e4e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e26:	2300      	movs	r3, #0
 8004e28:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	695b      	ldr	r3, [r3, #20]
 8004e30:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	699b      	ldr	r3, [r3, #24]
 8004e38:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e4a:	601a      	str	r2, [r3, #0]
 8004e4c:	e115      	b.n	800507a <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	f040 808a 	bne.w	8004f6e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e5c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e60:	d137      	bne.n	8004ed2 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e70:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e80:	d113      	bne.n	8004eaa <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e90:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e92:	2300      	movs	r3, #0
 8004e94:	627b      	str	r3, [r7, #36]	; 0x24
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	695b      	ldr	r3, [r3, #20]
 8004e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	699b      	ldr	r3, [r3, #24]
 8004ea4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea8:	e0e7      	b.n	800507a <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eaa:	2300      	movs	r3, #0
 8004eac:	623b      	str	r3, [r7, #32]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	695b      	ldr	r3, [r3, #20]
 8004eb4:	623b      	str	r3, [r7, #32]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	699b      	ldr	r3, [r3, #24]
 8004ebc:	623b      	str	r3, [r7, #32]
 8004ebe:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ece:	601a      	str	r2, [r3, #0]
 8004ed0:	e0d3      	b.n	800507a <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed4:	2b08      	cmp	r3, #8
 8004ed6:	d02e      	beq.n	8004f36 <I2C_Master_ADDR+0x1b2>
 8004ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eda:	2b20      	cmp	r3, #32
 8004edc:	d02b      	beq.n	8004f36 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ee0:	2b12      	cmp	r3, #18
 8004ee2:	d102      	bne.n	8004eea <I2C_Master_ADDR+0x166>
 8004ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d125      	bne.n	8004f36 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eec:	2b04      	cmp	r3, #4
 8004eee:	d00e      	beq.n	8004f0e <I2C_Master_ADDR+0x18a>
 8004ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d00b      	beq.n	8004f0e <I2C_Master_ADDR+0x18a>
 8004ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef8:	2b10      	cmp	r3, #16
 8004efa:	d008      	beq.n	8004f0e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f0a:	601a      	str	r2, [r3, #0]
 8004f0c:	e007      	b.n	8004f1e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f1c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f1e:	2300      	movs	r3, #0
 8004f20:	61fb      	str	r3, [r7, #28]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	695b      	ldr	r3, [r3, #20]
 8004f28:	61fb      	str	r3, [r7, #28]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	699b      	ldr	r3, [r3, #24]
 8004f30:	61fb      	str	r3, [r7, #28]
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	e0a1      	b.n	800507a <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f44:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f46:	2300      	movs	r3, #0
 8004f48:	61bb      	str	r3, [r7, #24]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	695b      	ldr	r3, [r3, #20]
 8004f50:	61bb      	str	r3, [r7, #24]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	699b      	ldr	r3, [r3, #24]
 8004f58:	61bb      	str	r3, [r7, #24]
 8004f5a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f6a:	601a      	str	r2, [r3, #0]
 8004f6c:	e085      	b.n	800507a <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d14d      	bne.n	8005014 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f7a:	2b04      	cmp	r3, #4
 8004f7c:	d016      	beq.n	8004fac <I2C_Master_ADDR+0x228>
 8004f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d013      	beq.n	8004fac <I2C_Master_ADDR+0x228>
 8004f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f86:	2b10      	cmp	r3, #16
 8004f88:	d010      	beq.n	8004fac <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f98:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fa8:	601a      	str	r2, [r3, #0]
 8004faa:	e007      	b.n	8004fbc <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004fba:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fca:	d117      	bne.n	8004ffc <I2C_Master_ADDR+0x278>
 8004fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004fd2:	d00b      	beq.n	8004fec <I2C_Master_ADDR+0x268>
 8004fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d008      	beq.n	8004fec <I2C_Master_ADDR+0x268>
 8004fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fdc:	2b08      	cmp	r3, #8
 8004fde:	d005      	beq.n	8004fec <I2C_Master_ADDR+0x268>
 8004fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe2:	2b10      	cmp	r3, #16
 8004fe4:	d002      	beq.n	8004fec <I2C_Master_ADDR+0x268>
 8004fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe8:	2b20      	cmp	r3, #32
 8004fea:	d107      	bne.n	8004ffc <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	685a      	ldr	r2, [r3, #4]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ffa:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	617b      	str	r3, [r7, #20]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	695b      	ldr	r3, [r3, #20]
 8005006:	617b      	str	r3, [r7, #20]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	617b      	str	r3, [r7, #20]
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	e032      	b.n	800507a <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005022:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800502e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005032:	d117      	bne.n	8005064 <I2C_Master_ADDR+0x2e0>
 8005034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005036:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800503a:	d00b      	beq.n	8005054 <I2C_Master_ADDR+0x2d0>
 800503c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800503e:	2b01      	cmp	r3, #1
 8005040:	d008      	beq.n	8005054 <I2C_Master_ADDR+0x2d0>
 8005042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005044:	2b08      	cmp	r3, #8
 8005046:	d005      	beq.n	8005054 <I2C_Master_ADDR+0x2d0>
 8005048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800504a:	2b10      	cmp	r3, #16
 800504c:	d002      	beq.n	8005054 <I2C_Master_ADDR+0x2d0>
 800504e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005050:	2b20      	cmp	r3, #32
 8005052:	d107      	bne.n	8005064 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	685a      	ldr	r2, [r3, #4]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005062:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005064:	2300      	movs	r3, #0
 8005066:	613b      	str	r3, [r7, #16]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	613b      	str	r3, [r7, #16]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	613b      	str	r3, [r7, #16]
 8005078:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005080:	e00b      	b.n	800509a <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005082:	2300      	movs	r3, #0
 8005084:	60fb      	str	r3, [r7, #12]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	695b      	ldr	r3, [r3, #20]
 800508c:	60fb      	str	r3, [r7, #12]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	60fb      	str	r3, [r7, #12]
 8005096:	68fb      	ldr	r3, [r7, #12]
}
 8005098:	e7ff      	b.n	800509a <I2C_Master_ADDR+0x316>
 800509a:	bf00      	nop
 800509c:	3744      	adds	r7, #68	; 0x44
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr

080050a6 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b084      	sub	sp, #16
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050b4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d02b      	beq.n	8005118 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c4:	781a      	ldrb	r2, [r3, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d0:	1c5a      	adds	r2, r3, #1
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050da:	b29b      	uxth	r3, r3
 80050dc:	3b01      	subs	r3, #1
 80050de:	b29a      	uxth	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d114      	bne.n	8005118 <I2C_SlaveTransmit_TXE+0x72>
 80050ee:	7bfb      	ldrb	r3, [r7, #15]
 80050f0:	2b29      	cmp	r3, #41	; 0x29
 80050f2:	d111      	bne.n	8005118 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	685a      	ldr	r2, [r3, #4]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005102:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2221      	movs	r2, #33	; 0x21
 8005108:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2228      	movs	r2, #40	; 0x28
 800510e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f7ff fa18 	bl	8004548 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005118:	bf00      	nop
 800511a:	3710      	adds	r7, #16
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800512c:	b29b      	uxth	r3, r3
 800512e:	2b00      	cmp	r3, #0
 8005130:	d011      	beq.n	8005156 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005136:	781a      	ldrb	r2, [r3, #0]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005142:	1c5a      	adds	r2, r3, #1
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800514c:	b29b      	uxth	r3, r3
 800514e:	3b01      	subs	r3, #1
 8005150:	b29a      	uxth	r2, r3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005156:	bf00      	nop
 8005158:	370c      	adds	r7, #12
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr

08005162 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005162:	b580      	push	{r7, lr}
 8005164:	b084      	sub	sp, #16
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005170:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005176:	b29b      	uxth	r3, r3
 8005178:	2b00      	cmp	r3, #0
 800517a:	d02c      	beq.n	80051d6 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	691a      	ldr	r2, [r3, #16]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005186:	b2d2      	uxtb	r2, r2
 8005188:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518e:	1c5a      	adds	r2, r3, #1
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005198:	b29b      	uxth	r3, r3
 800519a:	3b01      	subs	r3, #1
 800519c:	b29a      	uxth	r2, r3
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d114      	bne.n	80051d6 <I2C_SlaveReceive_RXNE+0x74>
 80051ac:	7bfb      	ldrb	r3, [r7, #15]
 80051ae:	2b2a      	cmp	r3, #42	; 0x2a
 80051b0:	d111      	bne.n	80051d6 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	685a      	ldr	r2, [r3, #4]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051c0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2222      	movs	r2, #34	; 0x22
 80051c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2228      	movs	r2, #40	; 0x28
 80051cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f7ff f9c3 	bl	800455c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80051d6:	bf00      	nop
 80051d8:	3710      	adds	r7, #16
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}

080051de <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80051de:	b480      	push	{r7}
 80051e0:	b083      	sub	sp, #12
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d012      	beq.n	8005216 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	691a      	ldr	r2, [r3, #16]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fa:	b2d2      	uxtb	r2, r2
 80051fc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005202:	1c5a      	adds	r2, r3, #1
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800520c:	b29b      	uxth	r3, r3
 800520e:	3b01      	subs	r3, #1
 8005210:	b29a      	uxth	r2, r3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005216:	bf00      	nop
 8005218:	370c      	adds	r7, #12
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr

08005222 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005222:	b580      	push	{r7, lr}
 8005224:	b084      	sub	sp, #16
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
 800522a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800522c:	2300      	movs	r3, #0
 800522e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005236:	b2db      	uxtb	r3, r3
 8005238:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800523c:	2b28      	cmp	r3, #40	; 0x28
 800523e:	d127      	bne.n	8005290 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	685a      	ldr	r2, [r3, #4]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800524e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	089b      	lsrs	r3, r3, #2
 8005254:	f003 0301 	and.w	r3, r3, #1
 8005258:	2b00      	cmp	r3, #0
 800525a:	d101      	bne.n	8005260 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800525c:	2301      	movs	r3, #1
 800525e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	09db      	lsrs	r3, r3, #7
 8005264:	f003 0301 	and.w	r3, r3, #1
 8005268:	2b00      	cmp	r3, #0
 800526a:	d103      	bne.n	8005274 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	81bb      	strh	r3, [r7, #12]
 8005272:	e002      	b.n	800527a <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	699b      	ldr	r3, [r3, #24]
 8005278:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005282:	89ba      	ldrh	r2, [r7, #12]
 8005284:	7bfb      	ldrb	r3, [r7, #15]
 8005286:	4619      	mov	r1, r3
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f7ff f971 	bl	8004570 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800528e:	e008      	b.n	80052a2 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f06f 0202 	mvn.w	r2, #2
 8005298:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80052a2:	bf00      	nop
 80052a4:	3710      	adds	r7, #16
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
	...

080052ac <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052ba:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	685a      	ldr	r2, [r3, #4]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80052ca:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80052cc:	2300      	movs	r3, #0
 80052ce:	60bb      	str	r3, [r7, #8]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	695b      	ldr	r3, [r3, #20]
 80052d6:	60bb      	str	r3, [r7, #8]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f042 0201 	orr.w	r2, r2, #1
 80052e6:	601a      	str	r2, [r3, #0]
 80052e8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052f8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005304:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005308:	d172      	bne.n	80053f0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800530a:	7bfb      	ldrb	r3, [r7, #15]
 800530c:	2b22      	cmp	r3, #34	; 0x22
 800530e:	d002      	beq.n	8005316 <I2C_Slave_STOPF+0x6a>
 8005310:	7bfb      	ldrb	r3, [r7, #15]
 8005312:	2b2a      	cmp	r3, #42	; 0x2a
 8005314:	d135      	bne.n	8005382 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	b29a      	uxth	r2, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005328:	b29b      	uxth	r3, r3
 800532a:	2b00      	cmp	r3, #0
 800532c:	d005      	beq.n	800533a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005332:	f043 0204 	orr.w	r2, r3, #4
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	685a      	ldr	r2, [r3, #4]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005348:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534e:	4618      	mov	r0, r3
 8005350:	f7fd fdee 	bl	8002f30 <HAL_DMA_GetState>
 8005354:	4603      	mov	r3, r0
 8005356:	2b01      	cmp	r3, #1
 8005358:	d049      	beq.n	80053ee <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800535e:	4a69      	ldr	r2, [pc, #420]	; (8005504 <I2C_Slave_STOPF+0x258>)
 8005360:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005366:	4618      	mov	r0, r3
 8005368:	f7fd fc36 	bl	8002bd8 <HAL_DMA_Abort_IT>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d03d      	beq.n	80053ee <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800537c:	4610      	mov	r0, r2
 800537e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005380:	e035      	b.n	80053ee <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	b29a      	uxth	r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005394:	b29b      	uxth	r3, r3
 8005396:	2b00      	cmp	r3, #0
 8005398:	d005      	beq.n	80053a6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539e:	f043 0204 	orr.w	r2, r3, #4
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	685a      	ldr	r2, [r3, #4]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053b4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ba:	4618      	mov	r0, r3
 80053bc:	f7fd fdb8 	bl	8002f30 <HAL_DMA_GetState>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d014      	beq.n	80053f0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ca:	4a4e      	ldr	r2, [pc, #312]	; (8005504 <I2C_Slave_STOPF+0x258>)
 80053cc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053d2:	4618      	mov	r0, r3
 80053d4:	f7fd fc00 	bl	8002bd8 <HAL_DMA_Abort_IT>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d008      	beq.n	80053f0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80053e8:	4610      	mov	r0, r2
 80053ea:	4798      	blx	r3
 80053ec:	e000      	b.n	80053f0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80053ee:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d03e      	beq.n	8005478 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	695b      	ldr	r3, [r3, #20]
 8005400:	f003 0304 	and.w	r3, r3, #4
 8005404:	2b04      	cmp	r3, #4
 8005406:	d112      	bne.n	800542e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	691a      	ldr	r2, [r3, #16]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005412:	b2d2      	uxtb	r2, r2
 8005414:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541a:	1c5a      	adds	r2, r3, #1
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005424:	b29b      	uxth	r3, r3
 8005426:	3b01      	subs	r3, #1
 8005428:	b29a      	uxth	r2, r3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	695b      	ldr	r3, [r3, #20]
 8005434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005438:	2b40      	cmp	r3, #64	; 0x40
 800543a:	d112      	bne.n	8005462 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	691a      	ldr	r2, [r3, #16]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005446:	b2d2      	uxtb	r2, r2
 8005448:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544e:	1c5a      	adds	r2, r3, #1
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005458:	b29b      	uxth	r3, r3
 800545a:	3b01      	subs	r3, #1
 800545c:	b29a      	uxth	r2, r3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005466:	b29b      	uxth	r3, r3
 8005468:	2b00      	cmp	r3, #0
 800546a:	d005      	beq.n	8005478 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005470:	f043 0204 	orr.w	r2, r3, #4
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547c:	2b00      	cmp	r3, #0
 800547e:	d003      	beq.n	8005488 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 f8b3 	bl	80055ec <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005486:	e039      	b.n	80054fc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005488:	7bfb      	ldrb	r3, [r7, #15]
 800548a:	2b2a      	cmp	r3, #42	; 0x2a
 800548c:	d109      	bne.n	80054a2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2228      	movs	r2, #40	; 0x28
 8005498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f7ff f85d 	bl	800455c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	2b28      	cmp	r3, #40	; 0x28
 80054ac:	d111      	bne.n	80054d2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a15      	ldr	r2, [pc, #84]	; (8005508 <I2C_Slave_STOPF+0x25c>)
 80054b2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2220      	movs	r2, #32
 80054be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f7ff f85e 	bl	800458c <HAL_I2C_ListenCpltCallback>
}
 80054d0:	e014      	b.n	80054fc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d6:	2b22      	cmp	r3, #34	; 0x22
 80054d8:	d002      	beq.n	80054e0 <I2C_Slave_STOPF+0x234>
 80054da:	7bfb      	ldrb	r3, [r7, #15]
 80054dc:	2b22      	cmp	r3, #34	; 0x22
 80054de:	d10d      	bne.n	80054fc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2220      	movs	r2, #32
 80054ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f7ff f830 	bl	800455c <HAL_I2C_SlaveRxCpltCallback>
}
 80054fc:	bf00      	nop
 80054fe:	3710      	adds	r7, #16
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}
 8005504:	08005b4d 	.word	0x08005b4d
 8005508:	ffff0000 	.word	0xffff0000

0800550c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800551a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005520:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	2b08      	cmp	r3, #8
 8005526:	d002      	beq.n	800552e <I2C_Slave_AF+0x22>
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	2b20      	cmp	r3, #32
 800552c:	d129      	bne.n	8005582 <I2C_Slave_AF+0x76>
 800552e:	7bfb      	ldrb	r3, [r7, #15]
 8005530:	2b28      	cmp	r3, #40	; 0x28
 8005532:	d126      	bne.n	8005582 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a2c      	ldr	r2, [pc, #176]	; (80055e8 <I2C_Slave_AF+0xdc>)
 8005538:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	685a      	ldr	r2, [r3, #4]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005548:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005552:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005562:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2220      	movs	r2, #32
 800556e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f7ff f806 	bl	800458c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005580:	e02e      	b.n	80055e0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005582:	7bfb      	ldrb	r3, [r7, #15]
 8005584:	2b21      	cmp	r3, #33	; 0x21
 8005586:	d126      	bne.n	80055d6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	4a17      	ldr	r2, [pc, #92]	; (80055e8 <I2C_Slave_AF+0xdc>)
 800558c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2221      	movs	r2, #33	; 0x21
 8005592:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2220      	movs	r2, #32
 8005598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	685a      	ldr	r2, [r3, #4]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80055b2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80055bc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055cc:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f7fe ffba 	bl	8004548 <HAL_I2C_SlaveTxCpltCallback>
}
 80055d4:	e004      	b.n	80055e0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80055de:	615a      	str	r2, [r3, #20]
}
 80055e0:	bf00      	nop
 80055e2:	3710      	adds	r7, #16
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	ffff0000 	.word	0xffff0000

080055ec <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055fa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005602:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005604:	7bbb      	ldrb	r3, [r7, #14]
 8005606:	2b10      	cmp	r3, #16
 8005608:	d002      	beq.n	8005610 <I2C_ITError+0x24>
 800560a:	7bbb      	ldrb	r3, [r7, #14]
 800560c:	2b40      	cmp	r3, #64	; 0x40
 800560e:	d10a      	bne.n	8005626 <I2C_ITError+0x3a>
 8005610:	7bfb      	ldrb	r3, [r7, #15]
 8005612:	2b22      	cmp	r3, #34	; 0x22
 8005614:	d107      	bne.n	8005626 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005624:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005626:	7bfb      	ldrb	r3, [r7, #15]
 8005628:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800562c:	2b28      	cmp	r3, #40	; 0x28
 800562e:	d107      	bne.n	8005640 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2228      	movs	r2, #40	; 0x28
 800563a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800563e:	e015      	b.n	800566c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800564a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800564e:	d00a      	beq.n	8005666 <I2C_ITError+0x7a>
 8005650:	7bfb      	ldrb	r3, [r7, #15]
 8005652:	2b60      	cmp	r3, #96	; 0x60
 8005654:	d007      	beq.n	8005666 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2220      	movs	r2, #32
 800565a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005676:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800567a:	d162      	bne.n	8005742 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	685a      	ldr	r2, [r3, #4]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800568a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005690:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005694:	b2db      	uxtb	r3, r3
 8005696:	2b01      	cmp	r3, #1
 8005698:	d020      	beq.n	80056dc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800569e:	4a6a      	ldr	r2, [pc, #424]	; (8005848 <I2C_ITError+0x25c>)
 80056a0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056a6:	4618      	mov	r0, r3
 80056a8:	f7fd fa96 	bl	8002bd8 <HAL_DMA_Abort_IT>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	f000 8089 	beq.w	80057c6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f022 0201 	bic.w	r2, r2, #1
 80056c2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2220      	movs	r2, #32
 80056c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80056d6:	4610      	mov	r0, r2
 80056d8:	4798      	blx	r3
 80056da:	e074      	b.n	80057c6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e0:	4a59      	ldr	r2, [pc, #356]	; (8005848 <I2C_ITError+0x25c>)
 80056e2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e8:	4618      	mov	r0, r3
 80056ea:	f7fd fa75 	bl	8002bd8 <HAL_DMA_Abort_IT>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d068      	beq.n	80057c6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	695b      	ldr	r3, [r3, #20]
 80056fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056fe:	2b40      	cmp	r3, #64	; 0x40
 8005700:	d10b      	bne.n	800571a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	691a      	ldr	r2, [r3, #16]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570c:	b2d2      	uxtb	r2, r2
 800570e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005714:	1c5a      	adds	r2, r3, #1
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f022 0201 	bic.w	r2, r2, #1
 8005728:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2220      	movs	r2, #32
 800572e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800573c:	4610      	mov	r0, r2
 800573e:	4798      	blx	r3
 8005740:	e041      	b.n	80057c6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005748:	b2db      	uxtb	r3, r3
 800574a:	2b60      	cmp	r3, #96	; 0x60
 800574c:	d125      	bne.n	800579a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2220      	movs	r2, #32
 8005752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	695b      	ldr	r3, [r3, #20]
 8005762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005766:	2b40      	cmp	r3, #64	; 0x40
 8005768:	d10b      	bne.n	8005782 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	691a      	ldr	r2, [r3, #16]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005774:	b2d2      	uxtb	r2, r2
 8005776:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577c:	1c5a      	adds	r2, r3, #1
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f022 0201 	bic.w	r2, r2, #1
 8005790:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f7fe ff0e 	bl	80045b4 <HAL_I2C_AbortCpltCallback>
 8005798:	e015      	b.n	80057c6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	695b      	ldr	r3, [r3, #20]
 80057a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a4:	2b40      	cmp	r3, #64	; 0x40
 80057a6:	d10b      	bne.n	80057c0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	691a      	ldr	r2, [r3, #16]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b2:	b2d2      	uxtb	r2, r2
 80057b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ba:	1c5a      	adds	r2, r3, #1
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f00c f875 	bl	80118b0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ca:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	f003 0301 	and.w	r3, r3, #1
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d10e      	bne.n	80057f4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d109      	bne.n	80057f4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d104      	bne.n	80057f4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d007      	beq.n	8005804 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	685a      	ldr	r2, [r3, #4]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005802:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800580a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005810:	f003 0304 	and.w	r3, r3, #4
 8005814:	2b04      	cmp	r3, #4
 8005816:	d113      	bne.n	8005840 <I2C_ITError+0x254>
 8005818:	7bfb      	ldrb	r3, [r7, #15]
 800581a:	2b28      	cmp	r3, #40	; 0x28
 800581c:	d110      	bne.n	8005840 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a0a      	ldr	r2, [pc, #40]	; (800584c <I2C_ITError+0x260>)
 8005822:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2220      	movs	r2, #32
 800582e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f7fe fea6 	bl	800458c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005840:	bf00      	nop
 8005842:	3710      	adds	r7, #16
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}
 8005848:	08005b4d 	.word	0x08005b4d
 800584c:	ffff0000 	.word	0xffff0000

08005850 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b088      	sub	sp, #32
 8005854:	af02      	add	r7, sp, #8
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	4608      	mov	r0, r1
 800585a:	4611      	mov	r1, r2
 800585c:	461a      	mov	r2, r3
 800585e:	4603      	mov	r3, r0
 8005860:	817b      	strh	r3, [r7, #10]
 8005862:	460b      	mov	r3, r1
 8005864:	813b      	strh	r3, [r7, #8]
 8005866:	4613      	mov	r3, r2
 8005868:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005878:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800587a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587c:	9300      	str	r3, [sp, #0]
 800587e:	6a3b      	ldr	r3, [r7, #32]
 8005880:	2200      	movs	r2, #0
 8005882:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005886:	68f8      	ldr	r0, [r7, #12]
 8005888:	f000 fa08 	bl	8005c9c <I2C_WaitOnFlagUntilTimeout>
 800588c:	4603      	mov	r3, r0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d00d      	beq.n	80058ae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800589c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058a0:	d103      	bne.n	80058aa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80058aa:	2303      	movs	r3, #3
 80058ac:	e05f      	b.n	800596e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80058ae:	897b      	ldrh	r3, [r7, #10]
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	461a      	mov	r2, r3
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80058bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80058be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c0:	6a3a      	ldr	r2, [r7, #32]
 80058c2:	492d      	ldr	r1, [pc, #180]	; (8005978 <I2C_RequestMemoryWrite+0x128>)
 80058c4:	68f8      	ldr	r0, [r7, #12]
 80058c6:	f000 fa40 	bl	8005d4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d001      	beq.n	80058d4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e04c      	b.n	800596e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058d4:	2300      	movs	r3, #0
 80058d6:	617b      	str	r3, [r7, #20]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	695b      	ldr	r3, [r3, #20]
 80058de:	617b      	str	r3, [r7, #20]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	617b      	str	r3, [r7, #20]
 80058e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058ec:	6a39      	ldr	r1, [r7, #32]
 80058ee:	68f8      	ldr	r0, [r7, #12]
 80058f0:	f000 faaa 	bl	8005e48 <I2C_WaitOnTXEFlagUntilTimeout>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d00d      	beq.n	8005916 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fe:	2b04      	cmp	r3, #4
 8005900:	d107      	bne.n	8005912 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005910:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e02b      	b.n	800596e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005916:	88fb      	ldrh	r3, [r7, #6]
 8005918:	2b01      	cmp	r3, #1
 800591a:	d105      	bne.n	8005928 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800591c:	893b      	ldrh	r3, [r7, #8]
 800591e:	b2da      	uxtb	r2, r3
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	611a      	str	r2, [r3, #16]
 8005926:	e021      	b.n	800596c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005928:	893b      	ldrh	r3, [r7, #8]
 800592a:	0a1b      	lsrs	r3, r3, #8
 800592c:	b29b      	uxth	r3, r3
 800592e:	b2da      	uxtb	r2, r3
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005938:	6a39      	ldr	r1, [r7, #32]
 800593a:	68f8      	ldr	r0, [r7, #12]
 800593c:	f000 fa84 	bl	8005e48 <I2C_WaitOnTXEFlagUntilTimeout>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00d      	beq.n	8005962 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594a:	2b04      	cmp	r3, #4
 800594c:	d107      	bne.n	800595e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800595c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e005      	b.n	800596e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005962:	893b      	ldrh	r3, [r7, #8]
 8005964:	b2da      	uxtb	r2, r3
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	3718      	adds	r7, #24
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	00010002 	.word	0x00010002

0800597c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b088      	sub	sp, #32
 8005980:	af02      	add	r7, sp, #8
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	4608      	mov	r0, r1
 8005986:	4611      	mov	r1, r2
 8005988:	461a      	mov	r2, r3
 800598a:	4603      	mov	r3, r0
 800598c:	817b      	strh	r3, [r7, #10]
 800598e:	460b      	mov	r3, r1
 8005990:	813b      	strh	r3, [r7, #8]
 8005992:	4613      	mov	r3, r2
 8005994:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80059a4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80059b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b8:	9300      	str	r3, [sp, #0]
 80059ba:	6a3b      	ldr	r3, [r7, #32]
 80059bc:	2200      	movs	r2, #0
 80059be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80059c2:	68f8      	ldr	r0, [r7, #12]
 80059c4:	f000 f96a 	bl	8005c9c <I2C_WaitOnFlagUntilTimeout>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00d      	beq.n	80059ea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059dc:	d103      	bne.n	80059e6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e0aa      	b.n	8005b40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80059ea:	897b      	ldrh	r3, [r7, #10]
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	461a      	mov	r2, r3
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80059f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80059fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fc:	6a3a      	ldr	r2, [r7, #32]
 80059fe:	4952      	ldr	r1, [pc, #328]	; (8005b48 <I2C_RequestMemoryRead+0x1cc>)
 8005a00:	68f8      	ldr	r0, [r7, #12]
 8005a02:	f000 f9a2 	bl	8005d4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a06:	4603      	mov	r3, r0
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d001      	beq.n	8005a10 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e097      	b.n	8005b40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a10:	2300      	movs	r3, #0
 8005a12:	617b      	str	r3, [r7, #20]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	695b      	ldr	r3, [r3, #20]
 8005a1a:	617b      	str	r3, [r7, #20]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	617b      	str	r3, [r7, #20]
 8005a24:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a28:	6a39      	ldr	r1, [r7, #32]
 8005a2a:	68f8      	ldr	r0, [r7, #12]
 8005a2c:	f000 fa0c 	bl	8005e48 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d00d      	beq.n	8005a52 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3a:	2b04      	cmp	r3, #4
 8005a3c:	d107      	bne.n	8005a4e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a4c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e076      	b.n	8005b40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005a52:	88fb      	ldrh	r3, [r7, #6]
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d105      	bne.n	8005a64 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a58:	893b      	ldrh	r3, [r7, #8]
 8005a5a:	b2da      	uxtb	r2, r3
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	611a      	str	r2, [r3, #16]
 8005a62:	e021      	b.n	8005aa8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005a64:	893b      	ldrh	r3, [r7, #8]
 8005a66:	0a1b      	lsrs	r3, r3, #8
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	b2da      	uxtb	r2, r3
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a74:	6a39      	ldr	r1, [r7, #32]
 8005a76:	68f8      	ldr	r0, [r7, #12]
 8005a78:	f000 f9e6 	bl	8005e48 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00d      	beq.n	8005a9e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a86:	2b04      	cmp	r3, #4
 8005a88:	d107      	bne.n	8005a9a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a98:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e050      	b.n	8005b40 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a9e:	893b      	ldrh	r3, [r7, #8]
 8005aa0:	b2da      	uxtb	r2, r3
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aaa:	6a39      	ldr	r1, [r7, #32]
 8005aac:	68f8      	ldr	r0, [r7, #12]
 8005aae:	f000 f9cb 	bl	8005e48 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d00d      	beq.n	8005ad4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005abc:	2b04      	cmp	r3, #4
 8005abe:	d107      	bne.n	8005ad0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ace:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e035      	b.n	8005b40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ae2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae6:	9300      	str	r3, [sp, #0]
 8005ae8:	6a3b      	ldr	r3, [r7, #32]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005af0:	68f8      	ldr	r0, [r7, #12]
 8005af2:	f000 f8d3 	bl	8005c9c <I2C_WaitOnFlagUntilTimeout>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d00d      	beq.n	8005b18 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b0a:	d103      	bne.n	8005b14 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b12:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005b14:	2303      	movs	r3, #3
 8005b16:	e013      	b.n	8005b40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005b18:	897b      	ldrh	r3, [r7, #10]
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	f043 0301 	orr.w	r3, r3, #1
 8005b20:	b2da      	uxtb	r2, r3
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2a:	6a3a      	ldr	r2, [r7, #32]
 8005b2c:	4906      	ldr	r1, [pc, #24]	; (8005b48 <I2C_RequestMemoryRead+0x1cc>)
 8005b2e:	68f8      	ldr	r0, [r7, #12]
 8005b30:	f000 f90b 	bl	8005d4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d001      	beq.n	8005b3e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e000      	b.n	8005b40 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005b3e:	2300      	movs	r3, #0
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3718      	adds	r7, #24
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	00010002 	.word	0x00010002

08005b4c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b086      	sub	sp, #24
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b54:	2300      	movs	r3, #0
 8005b56:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b5c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b64:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005b66:	4b4b      	ldr	r3, [pc, #300]	; (8005c94 <I2C_DMAAbort+0x148>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	08db      	lsrs	r3, r3, #3
 8005b6c:	4a4a      	ldr	r2, [pc, #296]	; (8005c98 <I2C_DMAAbort+0x14c>)
 8005b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b72:	0a1a      	lsrs	r2, r3, #8
 8005b74:	4613      	mov	r3, r2
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	4413      	add	r3, r2
 8005b7a:	00da      	lsls	r2, r3, #3
 8005b7c:	1ad3      	subs	r3, r2, r3
 8005b7e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d106      	bne.n	8005b94 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8a:	f043 0220 	orr.w	r2, r3, #32
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005b92:	e00a      	b.n	8005baa <I2C_DMAAbort+0x5e>
    }
    count--;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	3b01      	subs	r3, #1
 8005b98:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ba4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ba8:	d0ea      	beq.n	8005b80 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d003      	beq.n	8005bba <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d003      	beq.n	8005bca <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bd8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d003      	beq.n	8005bf0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bec:	2200      	movs	r2, #0
 8005bee:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d003      	beq.n	8005c00 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f022 0201 	bic.w	r2, r2, #1
 8005c0e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	2b60      	cmp	r3, #96	; 0x60
 8005c1a:	d10e      	bne.n	8005c3a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	2220      	movs	r2, #32
 8005c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005c32:	6978      	ldr	r0, [r7, #20]
 8005c34:	f7fe fcbe 	bl	80045b4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005c38:	e027      	b.n	8005c8a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005c3a:	7cfb      	ldrb	r3, [r7, #19]
 8005c3c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005c40:	2b28      	cmp	r3, #40	; 0x28
 8005c42:	d117      	bne.n	8005c74 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f042 0201 	orr.w	r2, r2, #1
 8005c52:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c62:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	2200      	movs	r2, #0
 8005c68:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	2228      	movs	r2, #40	; 0x28
 8005c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005c72:	e007      	b.n	8005c84 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	2220      	movs	r2, #32
 8005c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005c84:	6978      	ldr	r0, [r7, #20]
 8005c86:	f00b fe13 	bl	80118b0 <HAL_I2C_ErrorCallback>
}
 8005c8a:	bf00      	nop
 8005c8c:	3718      	adds	r7, #24
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop
 8005c94:	20000000 	.word	0x20000000
 8005c98:	14f8b589 	.word	0x14f8b589

08005c9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b084      	sub	sp, #16
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	603b      	str	r3, [r7, #0]
 8005ca8:	4613      	mov	r3, r2
 8005caa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005cac:	e025      	b.n	8005cfa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cb4:	d021      	beq.n	8005cfa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cb6:	f7fc f9a3 	bl	8002000 <HAL_GetTick>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	683a      	ldr	r2, [r7, #0]
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d302      	bcc.n	8005ccc <I2C_WaitOnFlagUntilTimeout+0x30>
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d116      	bne.n	8005cfa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2220      	movs	r2, #32
 8005cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce6:	f043 0220 	orr.w	r2, r3, #32
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e023      	b.n	8005d42 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	0c1b      	lsrs	r3, r3, #16
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d10d      	bne.n	8005d20 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	695b      	ldr	r3, [r3, #20]
 8005d0a:	43da      	mvns	r2, r3
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	4013      	ands	r3, r2
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	bf0c      	ite	eq
 8005d16:	2301      	moveq	r3, #1
 8005d18:	2300      	movne	r3, #0
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	e00c      	b.n	8005d3a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	699b      	ldr	r3, [r3, #24]
 8005d26:	43da      	mvns	r2, r3
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	bf0c      	ite	eq
 8005d32:	2301      	moveq	r3, #1
 8005d34:	2300      	movne	r3, #0
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	461a      	mov	r2, r3
 8005d3a:	79fb      	ldrb	r3, [r7, #7]
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d0b6      	beq.n	8005cae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d40:	2300      	movs	r3, #0
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3710      	adds	r7, #16
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}

08005d4a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005d4a:	b580      	push	{r7, lr}
 8005d4c:	b084      	sub	sp, #16
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	60f8      	str	r0, [r7, #12]
 8005d52:	60b9      	str	r1, [r7, #8]
 8005d54:	607a      	str	r2, [r7, #4]
 8005d56:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d58:	e051      	b.n	8005dfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	695b      	ldr	r3, [r3, #20]
 8005d60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d68:	d123      	bne.n	8005db2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d78:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005d82:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2200      	movs	r2, #0
 8005d88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2220      	movs	r2, #32
 8005d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9e:	f043 0204 	orr.w	r2, r3, #4
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e046      	b.n	8005e40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005db8:	d021      	beq.n	8005dfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dba:	f7fc f921 	bl	8002000 <HAL_GetTick>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	1ad3      	subs	r3, r2, r3
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d302      	bcc.n	8005dd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d116      	bne.n	8005dfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2220      	movs	r2, #32
 8005dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dea:	f043 0220 	orr.w	r2, r3, #32
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e020      	b.n	8005e40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	0c1b      	lsrs	r3, r3, #16
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d10c      	bne.n	8005e22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	695b      	ldr	r3, [r3, #20]
 8005e0e:	43da      	mvns	r2, r3
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	4013      	ands	r3, r2
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	bf14      	ite	ne
 8005e1a:	2301      	movne	r3, #1
 8005e1c:	2300      	moveq	r3, #0
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	e00b      	b.n	8005e3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	699b      	ldr	r3, [r3, #24]
 8005e28:	43da      	mvns	r2, r3
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	bf14      	ite	ne
 8005e34:	2301      	movne	r3, #1
 8005e36:	2300      	moveq	r3, #0
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d18d      	bne.n	8005d5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3710      	adds	r7, #16
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e54:	e02d      	b.n	8005eb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005e56:	68f8      	ldr	r0, [r7, #12]
 8005e58:	f000 f900 	bl	800605c <I2C_IsAcknowledgeFailed>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d001      	beq.n	8005e66 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e02d      	b.n	8005ec2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e6c:	d021      	beq.n	8005eb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e6e:	f7fc f8c7 	bl	8002000 <HAL_GetTick>
 8005e72:	4602      	mov	r2, r0
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	1ad3      	subs	r3, r2, r3
 8005e78:	68ba      	ldr	r2, [r7, #8]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d302      	bcc.n	8005e84 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d116      	bne.n	8005eb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2200      	movs	r2, #0
 8005e88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2220      	movs	r2, #32
 8005e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2200      	movs	r2, #0
 8005e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9e:	f043 0220 	orr.w	r2, r3, #32
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e007      	b.n	8005ec2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	695b      	ldr	r3, [r3, #20]
 8005eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ebc:	2b80      	cmp	r3, #128	; 0x80
 8005ebe:	d1ca      	bne.n	8005e56 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ec0:	2300      	movs	r3, #0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3710      	adds	r7, #16
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}

08005eca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005eca:	b580      	push	{r7, lr}
 8005ecc:	b084      	sub	sp, #16
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	60f8      	str	r0, [r7, #12]
 8005ed2:	60b9      	str	r1, [r7, #8]
 8005ed4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005ed6:	e02d      	b.n	8005f34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005ed8:	68f8      	ldr	r0, [r7, #12]
 8005eda:	f000 f8bf 	bl	800605c <I2C_IsAcknowledgeFailed>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d001      	beq.n	8005ee8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e02d      	b.n	8005f44 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005eee:	d021      	beq.n	8005f34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ef0:	f7fc f886 	bl	8002000 <HAL_GetTick>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	68ba      	ldr	r2, [r7, #8]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d302      	bcc.n	8005f06 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d116      	bne.n	8005f34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2220      	movs	r2, #32
 8005f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f20:	f043 0220 	orr.w	r2, r3, #32
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	e007      	b.n	8005f44 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	695b      	ldr	r3, [r3, #20]
 8005f3a:	f003 0304 	and.w	r3, r3, #4
 8005f3e:	2b04      	cmp	r3, #4
 8005f40:	d1ca      	bne.n	8005ed8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3710      	adds	r7, #16
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b085      	sub	sp, #20
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f54:	2300      	movs	r3, #0
 8005f56:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005f58:	4b13      	ldr	r3, [pc, #76]	; (8005fa8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	08db      	lsrs	r3, r3, #3
 8005f5e:	4a13      	ldr	r2, [pc, #76]	; (8005fac <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005f60:	fba2 2303 	umull	r2, r3, r2, r3
 8005f64:	0a1a      	lsrs	r2, r3, #8
 8005f66:	4613      	mov	r3, r2
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	4413      	add	r3, r2
 8005f6c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	3b01      	subs	r3, #1
 8005f72:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d107      	bne.n	8005f8a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7e:	f043 0220 	orr.w	r2, r3, #32
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e008      	b.n	8005f9c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f98:	d0e9      	beq.n	8005f6e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3714      	adds	r7, #20
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr
 8005fa8:	20000000 	.word	0x20000000
 8005fac:	14f8b589 	.word	0x14f8b589

08005fb0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	60f8      	str	r0, [r7, #12]
 8005fb8:	60b9      	str	r1, [r7, #8]
 8005fba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005fbc:	e042      	b.n	8006044 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	695b      	ldr	r3, [r3, #20]
 8005fc4:	f003 0310 	and.w	r3, r3, #16
 8005fc8:	2b10      	cmp	r3, #16
 8005fca:	d119      	bne.n	8006000 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f06f 0210 	mvn.w	r2, #16
 8005fd4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2220      	movs	r2, #32
 8005fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e029      	b.n	8006054 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006000:	f7fb fffe 	bl	8002000 <HAL_GetTick>
 8006004:	4602      	mov	r2, r0
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	68ba      	ldr	r2, [r7, #8]
 800600c:	429a      	cmp	r2, r3
 800600e:	d302      	bcc.n	8006016 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d116      	bne.n	8006044 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2200      	movs	r2, #0
 800601a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2220      	movs	r2, #32
 8006020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2200      	movs	r2, #0
 8006028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006030:	f043 0220 	orr.w	r2, r3, #32
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2200      	movs	r2, #0
 800603c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	e007      	b.n	8006054 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	695b      	ldr	r3, [r3, #20]
 800604a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800604e:	2b40      	cmp	r3, #64	; 0x40
 8006050:	d1b5      	bne.n	8005fbe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006052:	2300      	movs	r3, #0
}
 8006054:	4618      	mov	r0, r3
 8006056:	3710      	adds	r7, #16
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	695b      	ldr	r3, [r3, #20]
 800606a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800606e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006072:	d11b      	bne.n	80060ac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800607c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2220      	movs	r2, #32
 8006088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006098:	f043 0204 	orr.w	r2, r3, #4
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
 80060aa:	e000      	b.n	80060ae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80060ac:	2300      	movs	r3, #0
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	370c      	adds	r7, #12
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr

080060ba <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80060ba:	b480      	push	{r7}
 80060bc:	b083      	sub	sp, #12
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c6:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80060ca:	d103      	bne.n	80060d4 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80060d2:	e007      	b.n	80060e4 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80060dc:	d102      	bne.n	80060e4 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2208      	movs	r2, #8
 80060e2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80060e4:	bf00      	nop
 80060e6:	370c      	adds	r7, #12
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80060f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060f2:	b08f      	sub	sp, #60	; 0x3c
 80060f4:	af0a      	add	r7, sp, #40	; 0x28
 80060f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d101      	bne.n	8006102 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e10f      	b.n	8006322 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800610e:	b2db      	uxtb	r3, r3
 8006110:	2b00      	cmp	r3, #0
 8006112:	d106      	bne.n	8006122 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f00a facb 	bl	80106b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2203      	movs	r2, #3
 8006126:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800612e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006132:	2b00      	cmp	r3, #0
 8006134:	d102      	bne.n	800613c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4618      	mov	r0, r3
 8006142:	f004 f91a 	bl	800a37a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	603b      	str	r3, [r7, #0]
 800614c:	687e      	ldr	r6, [r7, #4]
 800614e:	466d      	mov	r5, sp
 8006150:	f106 0410 	add.w	r4, r6, #16
 8006154:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006156:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006158:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800615a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800615c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006160:	e885 0003 	stmia.w	r5, {r0, r1}
 8006164:	1d33      	adds	r3, r6, #4
 8006166:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006168:	6838      	ldr	r0, [r7, #0]
 800616a:	f003 fff1 	bl	800a150 <USB_CoreInit>
 800616e:	4603      	mov	r3, r0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d005      	beq.n	8006180 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2202      	movs	r2, #2
 8006178:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	e0d0      	b.n	8006322 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	2100      	movs	r1, #0
 8006186:	4618      	mov	r0, r3
 8006188:	f004 f908 	bl	800a39c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800618c:	2300      	movs	r3, #0
 800618e:	73fb      	strb	r3, [r7, #15]
 8006190:	e04a      	b.n	8006228 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006192:	7bfa      	ldrb	r2, [r7, #15]
 8006194:	6879      	ldr	r1, [r7, #4]
 8006196:	4613      	mov	r3, r2
 8006198:	00db      	lsls	r3, r3, #3
 800619a:	1a9b      	subs	r3, r3, r2
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	440b      	add	r3, r1
 80061a0:	333d      	adds	r3, #61	; 0x3d
 80061a2:	2201      	movs	r2, #1
 80061a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80061a6:	7bfa      	ldrb	r2, [r7, #15]
 80061a8:	6879      	ldr	r1, [r7, #4]
 80061aa:	4613      	mov	r3, r2
 80061ac:	00db      	lsls	r3, r3, #3
 80061ae:	1a9b      	subs	r3, r3, r2
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	440b      	add	r3, r1
 80061b4:	333c      	adds	r3, #60	; 0x3c
 80061b6:	7bfa      	ldrb	r2, [r7, #15]
 80061b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80061ba:	7bfa      	ldrb	r2, [r7, #15]
 80061bc:	7bfb      	ldrb	r3, [r7, #15]
 80061be:	b298      	uxth	r0, r3
 80061c0:	6879      	ldr	r1, [r7, #4]
 80061c2:	4613      	mov	r3, r2
 80061c4:	00db      	lsls	r3, r3, #3
 80061c6:	1a9b      	subs	r3, r3, r2
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	440b      	add	r3, r1
 80061cc:	3342      	adds	r3, #66	; 0x42
 80061ce:	4602      	mov	r2, r0
 80061d0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80061d2:	7bfa      	ldrb	r2, [r7, #15]
 80061d4:	6879      	ldr	r1, [r7, #4]
 80061d6:	4613      	mov	r3, r2
 80061d8:	00db      	lsls	r3, r3, #3
 80061da:	1a9b      	subs	r3, r3, r2
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	440b      	add	r3, r1
 80061e0:	333f      	adds	r3, #63	; 0x3f
 80061e2:	2200      	movs	r2, #0
 80061e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80061e6:	7bfa      	ldrb	r2, [r7, #15]
 80061e8:	6879      	ldr	r1, [r7, #4]
 80061ea:	4613      	mov	r3, r2
 80061ec:	00db      	lsls	r3, r3, #3
 80061ee:	1a9b      	subs	r3, r3, r2
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	440b      	add	r3, r1
 80061f4:	3344      	adds	r3, #68	; 0x44
 80061f6:	2200      	movs	r2, #0
 80061f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80061fa:	7bfa      	ldrb	r2, [r7, #15]
 80061fc:	6879      	ldr	r1, [r7, #4]
 80061fe:	4613      	mov	r3, r2
 8006200:	00db      	lsls	r3, r3, #3
 8006202:	1a9b      	subs	r3, r3, r2
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	440b      	add	r3, r1
 8006208:	3348      	adds	r3, #72	; 0x48
 800620a:	2200      	movs	r2, #0
 800620c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800620e:	7bfa      	ldrb	r2, [r7, #15]
 8006210:	6879      	ldr	r1, [r7, #4]
 8006212:	4613      	mov	r3, r2
 8006214:	00db      	lsls	r3, r3, #3
 8006216:	1a9b      	subs	r3, r3, r2
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	440b      	add	r3, r1
 800621c:	3350      	adds	r3, #80	; 0x50
 800621e:	2200      	movs	r2, #0
 8006220:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006222:	7bfb      	ldrb	r3, [r7, #15]
 8006224:	3301      	adds	r3, #1
 8006226:	73fb      	strb	r3, [r7, #15]
 8006228:	7bfa      	ldrb	r2, [r7, #15]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	429a      	cmp	r2, r3
 8006230:	d3af      	bcc.n	8006192 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006232:	2300      	movs	r3, #0
 8006234:	73fb      	strb	r3, [r7, #15]
 8006236:	e044      	b.n	80062c2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006238:	7bfa      	ldrb	r2, [r7, #15]
 800623a:	6879      	ldr	r1, [r7, #4]
 800623c:	4613      	mov	r3, r2
 800623e:	00db      	lsls	r3, r3, #3
 8006240:	1a9b      	subs	r3, r3, r2
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	440b      	add	r3, r1
 8006246:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800624a:	2200      	movs	r2, #0
 800624c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800624e:	7bfa      	ldrb	r2, [r7, #15]
 8006250:	6879      	ldr	r1, [r7, #4]
 8006252:	4613      	mov	r3, r2
 8006254:	00db      	lsls	r3, r3, #3
 8006256:	1a9b      	subs	r3, r3, r2
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	440b      	add	r3, r1
 800625c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8006260:	7bfa      	ldrb	r2, [r7, #15]
 8006262:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006264:	7bfa      	ldrb	r2, [r7, #15]
 8006266:	6879      	ldr	r1, [r7, #4]
 8006268:	4613      	mov	r3, r2
 800626a:	00db      	lsls	r3, r3, #3
 800626c:	1a9b      	subs	r3, r3, r2
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	440b      	add	r3, r1
 8006272:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006276:	2200      	movs	r2, #0
 8006278:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800627a:	7bfa      	ldrb	r2, [r7, #15]
 800627c:	6879      	ldr	r1, [r7, #4]
 800627e:	4613      	mov	r3, r2
 8006280:	00db      	lsls	r3, r3, #3
 8006282:	1a9b      	subs	r3, r3, r2
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	440b      	add	r3, r1
 8006288:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800628c:	2200      	movs	r2, #0
 800628e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006290:	7bfa      	ldrb	r2, [r7, #15]
 8006292:	6879      	ldr	r1, [r7, #4]
 8006294:	4613      	mov	r3, r2
 8006296:	00db      	lsls	r3, r3, #3
 8006298:	1a9b      	subs	r3, r3, r2
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	440b      	add	r3, r1
 800629e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80062a2:	2200      	movs	r2, #0
 80062a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80062a6:	7bfa      	ldrb	r2, [r7, #15]
 80062a8:	6879      	ldr	r1, [r7, #4]
 80062aa:	4613      	mov	r3, r2
 80062ac:	00db      	lsls	r3, r3, #3
 80062ae:	1a9b      	subs	r3, r3, r2
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	440b      	add	r3, r1
 80062b4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80062b8:	2200      	movs	r2, #0
 80062ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80062bc:	7bfb      	ldrb	r3, [r7, #15]
 80062be:	3301      	adds	r3, #1
 80062c0:	73fb      	strb	r3, [r7, #15]
 80062c2:	7bfa      	ldrb	r2, [r7, #15]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d3b5      	bcc.n	8006238 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	603b      	str	r3, [r7, #0]
 80062d2:	687e      	ldr	r6, [r7, #4]
 80062d4:	466d      	mov	r5, sp
 80062d6:	f106 0410 	add.w	r4, r6, #16
 80062da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80062dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80062de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80062e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80062e2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80062e6:	e885 0003 	stmia.w	r5, {r0, r1}
 80062ea:	1d33      	adds	r3, r6, #4
 80062ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80062ee:	6838      	ldr	r0, [r7, #0]
 80062f0:	f004 f87e 	bl	800a3f0 <USB_DevInit>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d005      	beq.n	8006306 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2202      	movs	r2, #2
 80062fe:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	e00d      	b.n	8006322 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2201      	movs	r2, #1
 8006312:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4618      	mov	r0, r3
 800631c:	f005 f8c6 	bl	800b4ac <USB_DevDisconnect>

  return HAL_OK;
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	3714      	adds	r7, #20
 8006326:	46bd      	mov	sp, r7
 8006328:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800632a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800632a:	b580      	push	{r7, lr}
 800632c:	b084      	sub	sp, #16
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800633e:	2b01      	cmp	r3, #1
 8006340:	d101      	bne.n	8006346 <HAL_PCD_Start+0x1c>
 8006342:	2302      	movs	r3, #2
 8006344:	e020      	b.n	8006388 <HAL_PCD_Start+0x5e>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2201      	movs	r2, #1
 800634a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006352:	2b01      	cmp	r3, #1
 8006354:	d109      	bne.n	800636a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800635a:	2b01      	cmp	r3, #1
 800635c:	d005      	beq.n	800636a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006362:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4618      	mov	r0, r3
 8006370:	f003 fff2 	bl	800a358 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4618      	mov	r0, r3
 800637a:	f005 f876 	bl	800b46a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006386:	2300      	movs	r3, #0
}
 8006388:	4618      	mov	r0, r3
 800638a:	3710      	adds	r7, #16
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}

08006390 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006390:	b590      	push	{r4, r7, lr}
 8006392:	b08d      	sub	sp, #52	; 0x34
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800639e:	6a3b      	ldr	r3, [r7, #32]
 80063a0:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4618      	mov	r0, r3
 80063a8:	f005 f934 	bl	800b614 <USB_GetMode>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	f040 839d 	bne.w	8006aee <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4618      	mov	r0, r3
 80063ba:	f005 f898 	bl	800b4ee <USB_ReadInterrupts>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	f000 8393 	beq.w	8006aec <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4618      	mov	r0, r3
 80063cc:	f005 f88f 	bl	800b4ee <USB_ReadInterrupts>
 80063d0:	4603      	mov	r3, r0
 80063d2:	f003 0302 	and.w	r3, r3, #2
 80063d6:	2b02      	cmp	r3, #2
 80063d8:	d107      	bne.n	80063ea <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	695a      	ldr	r2, [r3, #20]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f002 0202 	and.w	r2, r2, #2
 80063e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4618      	mov	r0, r3
 80063f0:	f005 f87d 	bl	800b4ee <USB_ReadInterrupts>
 80063f4:	4603      	mov	r3, r0
 80063f6:	f003 0310 	and.w	r3, r3, #16
 80063fa:	2b10      	cmp	r3, #16
 80063fc:	d161      	bne.n	80064c2 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	699a      	ldr	r2, [r3, #24]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f022 0210 	bic.w	r2, r2, #16
 800640c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800640e:	6a3b      	ldr	r3, [r7, #32]
 8006410:	6a1b      	ldr	r3, [r3, #32]
 8006412:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	f003 020f 	and.w	r2, r3, #15
 800641a:	4613      	mov	r3, r2
 800641c:	00db      	lsls	r3, r3, #3
 800641e:	1a9b      	subs	r3, r3, r2
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	4413      	add	r3, r2
 800642a:	3304      	adds	r3, #4
 800642c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	0c5b      	lsrs	r3, r3, #17
 8006432:	f003 030f 	and.w	r3, r3, #15
 8006436:	2b02      	cmp	r3, #2
 8006438:	d124      	bne.n	8006484 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800643a:	69ba      	ldr	r2, [r7, #24]
 800643c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006440:	4013      	ands	r3, r2
 8006442:	2b00      	cmp	r3, #0
 8006444:	d035      	beq.n	80064b2 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800644a:	69bb      	ldr	r3, [r7, #24]
 800644c:	091b      	lsrs	r3, r3, #4
 800644e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006450:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006454:	b29b      	uxth	r3, r3
 8006456:	461a      	mov	r2, r3
 8006458:	6a38      	ldr	r0, [r7, #32]
 800645a:	f004 fee3 	bl	800b224 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	68da      	ldr	r2, [r3, #12]
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	091b      	lsrs	r3, r3, #4
 8006466:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800646a:	441a      	add	r2, r3
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	699a      	ldr	r2, [r3, #24]
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	091b      	lsrs	r3, r3, #4
 8006478:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800647c:	441a      	add	r2, r3
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	619a      	str	r2, [r3, #24]
 8006482:	e016      	b.n	80064b2 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	0c5b      	lsrs	r3, r3, #17
 8006488:	f003 030f 	and.w	r3, r3, #15
 800648c:	2b06      	cmp	r3, #6
 800648e:	d110      	bne.n	80064b2 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006496:	2208      	movs	r2, #8
 8006498:	4619      	mov	r1, r3
 800649a:	6a38      	ldr	r0, [r7, #32]
 800649c:	f004 fec2 	bl	800b224 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	699a      	ldr	r2, [r3, #24]
 80064a4:	69bb      	ldr	r3, [r7, #24]
 80064a6:	091b      	lsrs	r3, r3, #4
 80064a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80064ac:	441a      	add	r2, r3
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	699a      	ldr	r2, [r3, #24]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f042 0210 	orr.w	r2, r2, #16
 80064c0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4618      	mov	r0, r3
 80064c8:	f005 f811 	bl	800b4ee <USB_ReadInterrupts>
 80064cc:	4603      	mov	r3, r0
 80064ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80064d2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80064d6:	d16e      	bne.n	80065b6 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80064d8:	2300      	movs	r3, #0
 80064da:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4618      	mov	r0, r3
 80064e2:	f005 f817 	bl	800b514 <USB_ReadDevAllOutEpInterrupt>
 80064e6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80064e8:	e062      	b.n	80065b0 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80064ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ec:	f003 0301 	and.w	r3, r3, #1
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d057      	beq.n	80065a4 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064fa:	b2d2      	uxtb	r2, r2
 80064fc:	4611      	mov	r1, r2
 80064fe:	4618      	mov	r0, r3
 8006500:	f005 f83c 	bl	800b57c <USB_ReadDevOutEPInterrupt>
 8006504:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	f003 0301 	and.w	r3, r3, #1
 800650c:	2b00      	cmp	r3, #0
 800650e:	d00c      	beq.n	800652a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006512:	015a      	lsls	r2, r3, #5
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	4413      	add	r3, r2
 8006518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800651c:	461a      	mov	r2, r3
 800651e:	2301      	movs	r3, #1
 8006520:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006522:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 fdb1 	bl	800708c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	f003 0308 	and.w	r3, r3, #8
 8006530:	2b00      	cmp	r3, #0
 8006532:	d00c      	beq.n	800654e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006536:	015a      	lsls	r2, r3, #5
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	4413      	add	r3, r2
 800653c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006540:	461a      	mov	r2, r3
 8006542:	2308      	movs	r3, #8
 8006544:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006546:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 feab 	bl	80072a4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	f003 0310 	and.w	r3, r3, #16
 8006554:	2b00      	cmp	r3, #0
 8006556:	d008      	beq.n	800656a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655a:	015a      	lsls	r2, r3, #5
 800655c:	69fb      	ldr	r3, [r7, #28]
 800655e:	4413      	add	r3, r2
 8006560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006564:	461a      	mov	r2, r3
 8006566:	2310      	movs	r3, #16
 8006568:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	f003 0320 	and.w	r3, r3, #32
 8006570:	2b00      	cmp	r3, #0
 8006572:	d008      	beq.n	8006586 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006576:	015a      	lsls	r2, r3, #5
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	4413      	add	r3, r2
 800657c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006580:	461a      	mov	r2, r3
 8006582:	2320      	movs	r3, #32
 8006584:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800658c:	2b00      	cmp	r3, #0
 800658e:	d009      	beq.n	80065a4 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006592:	015a      	lsls	r2, r3, #5
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	4413      	add	r3, r2
 8006598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800659c:	461a      	mov	r2, r3
 800659e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80065a2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80065a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a6:	3301      	adds	r3, #1
 80065a8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80065aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ac:	085b      	lsrs	r3, r3, #1
 80065ae:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80065b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d199      	bne.n	80064ea <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4618      	mov	r0, r3
 80065bc:	f004 ff97 	bl	800b4ee <USB_ReadInterrupts>
 80065c0:	4603      	mov	r3, r0
 80065c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80065ca:	f040 80c0 	bne.w	800674e <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4618      	mov	r0, r3
 80065d4:	f004 ffb8 	bl	800b548 <USB_ReadDevAllInEpInterrupt>
 80065d8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80065da:	2300      	movs	r3, #0
 80065dc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80065de:	e0b2      	b.n	8006746 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80065e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e2:	f003 0301 	and.w	r3, r3, #1
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	f000 80a7 	beq.w	800673a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065f2:	b2d2      	uxtb	r2, r2
 80065f4:	4611      	mov	r1, r2
 80065f6:	4618      	mov	r0, r3
 80065f8:	f004 ffde 	bl	800b5b8 <USB_ReadDevInEPInterrupt>
 80065fc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	f003 0301 	and.w	r3, r3, #1
 8006604:	2b00      	cmp	r3, #0
 8006606:	d057      	beq.n	80066b8 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660a:	f003 030f 	and.w	r3, r3, #15
 800660e:	2201      	movs	r2, #1
 8006610:	fa02 f303 	lsl.w	r3, r2, r3
 8006614:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006616:	69fb      	ldr	r3, [r7, #28]
 8006618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800661c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	43db      	mvns	r3, r3
 8006622:	69f9      	ldr	r1, [r7, #28]
 8006624:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006628:	4013      	ands	r3, r2
 800662a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800662c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662e:	015a      	lsls	r2, r3, #5
 8006630:	69fb      	ldr	r3, [r7, #28]
 8006632:	4413      	add	r3, r2
 8006634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006638:	461a      	mov	r2, r3
 800663a:	2301      	movs	r3, #1
 800663c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	2b01      	cmp	r3, #1
 8006644:	d132      	bne.n	80066ac <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006646:	6879      	ldr	r1, [r7, #4]
 8006648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800664a:	4613      	mov	r3, r2
 800664c:	00db      	lsls	r3, r3, #3
 800664e:	1a9b      	subs	r3, r3, r2
 8006650:	009b      	lsls	r3, r3, #2
 8006652:	440b      	add	r3, r1
 8006654:	3348      	adds	r3, #72	; 0x48
 8006656:	6819      	ldr	r1, [r3, #0]
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800665c:	4613      	mov	r3, r2
 800665e:	00db      	lsls	r3, r3, #3
 8006660:	1a9b      	subs	r3, r3, r2
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	4403      	add	r3, r0
 8006666:	3344      	adds	r3, #68	; 0x44
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4419      	add	r1, r3
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006670:	4613      	mov	r3, r2
 8006672:	00db      	lsls	r3, r3, #3
 8006674:	1a9b      	subs	r3, r3, r2
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	4403      	add	r3, r0
 800667a:	3348      	adds	r3, #72	; 0x48
 800667c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800667e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006680:	2b00      	cmp	r3, #0
 8006682:	d113      	bne.n	80066ac <HAL_PCD_IRQHandler+0x31c>
 8006684:	6879      	ldr	r1, [r7, #4]
 8006686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006688:	4613      	mov	r3, r2
 800668a:	00db      	lsls	r3, r3, #3
 800668c:	1a9b      	subs	r3, r3, r2
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	440b      	add	r3, r1
 8006692:	3350      	adds	r3, #80	; 0x50
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d108      	bne.n	80066ac <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6818      	ldr	r0, [r3, #0]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80066a4:	461a      	mov	r2, r3
 80066a6:	2101      	movs	r1, #1
 80066a8:	f004 ffe6 	bl	800b678 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80066ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	4619      	mov	r1, r3
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f00a f881 	bl	80107ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	f003 0308 	and.w	r3, r3, #8
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d008      	beq.n	80066d4 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80066c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c4:	015a      	lsls	r2, r3, #5
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	4413      	add	r3, r2
 80066ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ce:	461a      	mov	r2, r3
 80066d0:	2308      	movs	r3, #8
 80066d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	f003 0310 	and.w	r3, r3, #16
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d008      	beq.n	80066f0 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80066de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e0:	015a      	lsls	r2, r3, #5
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	4413      	add	r3, r2
 80066e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ea:	461a      	mov	r2, r3
 80066ec:	2310      	movs	r3, #16
 80066ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d008      	beq.n	800670c <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80066fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fc:	015a      	lsls	r2, r3, #5
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	4413      	add	r3, r2
 8006702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006706:	461a      	mov	r2, r3
 8006708:	2340      	movs	r3, #64	; 0x40
 800670a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	f003 0302 	and.w	r3, r3, #2
 8006712:	2b00      	cmp	r3, #0
 8006714:	d008      	beq.n	8006728 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006718:	015a      	lsls	r2, r3, #5
 800671a:	69fb      	ldr	r3, [r7, #28]
 800671c:	4413      	add	r3, r2
 800671e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006722:	461a      	mov	r2, r3
 8006724:	2302      	movs	r3, #2
 8006726:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800672e:	2b00      	cmp	r3, #0
 8006730:	d003      	beq.n	800673a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006732:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 fc1b 	bl	8006f70 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800673a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673c:	3301      	adds	r3, #1
 800673e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006742:	085b      	lsrs	r3, r3, #1
 8006744:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006748:	2b00      	cmp	r3, #0
 800674a:	f47f af49 	bne.w	80065e0 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4618      	mov	r0, r3
 8006754:	f004 fecb 	bl	800b4ee <USB_ReadInterrupts>
 8006758:	4603      	mov	r3, r0
 800675a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800675e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006762:	d122      	bne.n	80067aa <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	69fa      	ldr	r2, [r7, #28]
 800676e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006772:	f023 0301 	bic.w	r3, r3, #1
 8006776:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800677e:	2b01      	cmp	r3, #1
 8006780:	d108      	bne.n	8006794 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800678a:	2100      	movs	r1, #0
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 fe27 	bl	80073e0 <HAL_PCDEx_LPM_Callback>
 8006792:	e002      	b.n	800679a <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f00a f887 	bl	80108a8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	695a      	ldr	r2, [r3, #20]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80067a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4618      	mov	r0, r3
 80067b0:	f004 fe9d 	bl	800b4ee <USB_ReadInterrupts>
 80067b4:	4603      	mov	r3, r0
 80067b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067be:	d112      	bne.n	80067e6 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	f003 0301 	and.w	r3, r3, #1
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d102      	bne.n	80067d6 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f00a f843 	bl	801085c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	695a      	ldr	r2, [r3, #20]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80067e4:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4618      	mov	r0, r3
 80067ec:	f004 fe7f 	bl	800b4ee <USB_ReadInterrupts>
 80067f0:	4603      	mov	r3, r0
 80067f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80067f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067fa:	f040 80c7 	bne.w	800698c <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80067fe:	69fb      	ldr	r3, [r7, #28]
 8006800:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	69fa      	ldr	r2, [r7, #28]
 8006808:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800680c:	f023 0301 	bic.w	r3, r3, #1
 8006810:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	2110      	movs	r1, #16
 8006818:	4618      	mov	r0, r3
 800681a:	f003 ff4d 	bl	800a6b8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800681e:	2300      	movs	r3, #0
 8006820:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006822:	e056      	b.n	80068d2 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006826:	015a      	lsls	r2, r3, #5
 8006828:	69fb      	ldr	r3, [r7, #28]
 800682a:	4413      	add	r3, r2
 800682c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006830:	461a      	mov	r2, r3
 8006832:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006836:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800683a:	015a      	lsls	r2, r3, #5
 800683c:	69fb      	ldr	r3, [r7, #28]
 800683e:	4413      	add	r3, r2
 8006840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006848:	0151      	lsls	r1, r2, #5
 800684a:	69fa      	ldr	r2, [r7, #28]
 800684c:	440a      	add	r2, r1
 800684e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006852:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006856:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800685a:	015a      	lsls	r2, r3, #5
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	4413      	add	r3, r2
 8006860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006868:	0151      	lsls	r1, r2, #5
 800686a:	69fa      	ldr	r2, [r7, #28]
 800686c:	440a      	add	r2, r1
 800686e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006872:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006876:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800687a:	015a      	lsls	r2, r3, #5
 800687c:	69fb      	ldr	r3, [r7, #28]
 800687e:	4413      	add	r3, r2
 8006880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006884:	461a      	mov	r2, r3
 8006886:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800688a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800688c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800688e:	015a      	lsls	r2, r3, #5
 8006890:	69fb      	ldr	r3, [r7, #28]
 8006892:	4413      	add	r3, r2
 8006894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800689c:	0151      	lsls	r1, r2, #5
 800689e:	69fa      	ldr	r2, [r7, #28]
 80068a0:	440a      	add	r2, r1
 80068a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80068aa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80068ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ae:	015a      	lsls	r2, r3, #5
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	4413      	add	r3, r2
 80068b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068bc:	0151      	lsls	r1, r2, #5
 80068be:	69fa      	ldr	r2, [r7, #28]
 80068c0:	440a      	add	r2, r1
 80068c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80068ca:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80068cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ce:	3301      	adds	r3, #1
 80068d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068d8:	429a      	cmp	r2, r3
 80068da:	d3a3      	bcc.n	8006824 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068e2:	69db      	ldr	r3, [r3, #28]
 80068e4:	69fa      	ldr	r2, [r7, #28]
 80068e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068ea:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80068ee:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d016      	beq.n	8006926 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80068f8:	69fb      	ldr	r3, [r7, #28]
 80068fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006902:	69fa      	ldr	r2, [r7, #28]
 8006904:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006908:	f043 030b 	orr.w	r3, r3, #11
 800690c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006910:	69fb      	ldr	r3, [r7, #28]
 8006912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006918:	69fa      	ldr	r2, [r7, #28]
 800691a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800691e:	f043 030b 	orr.w	r3, r3, #11
 8006922:	6453      	str	r3, [r2, #68]	; 0x44
 8006924:	e015      	b.n	8006952 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800692c:	695b      	ldr	r3, [r3, #20]
 800692e:	69fa      	ldr	r2, [r7, #28]
 8006930:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006934:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006938:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800693c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800693e:	69fb      	ldr	r3, [r7, #28]
 8006940:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006944:	691b      	ldr	r3, [r3, #16]
 8006946:	69fa      	ldr	r2, [r7, #28]
 8006948:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800694c:	f043 030b 	orr.w	r3, r3, #11
 8006950:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006952:	69fb      	ldr	r3, [r7, #28]
 8006954:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	69fa      	ldr	r2, [r7, #28]
 800695c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006960:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006964:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6818      	ldr	r0, [r3, #0]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	691b      	ldr	r3, [r3, #16]
 800696e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006976:	461a      	mov	r2, r3
 8006978:	f004 fe7e 	bl	800b678 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	695a      	ldr	r2, [r3, #20]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800698a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4618      	mov	r0, r3
 8006992:	f004 fdac 	bl	800b4ee <USB_ReadInterrupts>
 8006996:	4603      	mov	r3, r0
 8006998:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800699c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069a0:	d124      	bne.n	80069ec <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4618      	mov	r0, r3
 80069a8:	f004 fe42 	bl	800b630 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4618      	mov	r0, r3
 80069b2:	f003 fee2 	bl	800a77a <USB_GetDevSpeed>
 80069b6:	4603      	mov	r3, r0
 80069b8:	461a      	mov	r2, r3
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681c      	ldr	r4, [r3, #0]
 80069c2:	f001 f947 	bl	8007c54 <HAL_RCC_GetHCLKFreq>
 80069c6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	461a      	mov	r2, r3
 80069d0:	4620      	mov	r0, r4
 80069d2:	f003 fc1f 	bl	800a214 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f009 ff17 	bl	801080a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	695a      	ldr	r2, [r3, #20]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80069ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4618      	mov	r0, r3
 80069f2:	f004 fd7c 	bl	800b4ee <USB_ReadInterrupts>
 80069f6:	4603      	mov	r3, r0
 80069f8:	f003 0308 	and.w	r3, r3, #8
 80069fc:	2b08      	cmp	r3, #8
 80069fe:	d10a      	bne.n	8006a16 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f009 fef4 	bl	80107ee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	695a      	ldr	r2, [r3, #20]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f002 0208 	and.w	r2, r2, #8
 8006a14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f004 fd67 	bl	800b4ee <USB_ReadInterrupts>
 8006a20:	4603      	mov	r3, r0
 8006a22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a2a:	d10f      	bne.n	8006a4c <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	4619      	mov	r1, r3
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f009 ff56 	bl	80108e8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	695a      	ldr	r2, [r3, #20]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006a4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4618      	mov	r0, r3
 8006a52:	f004 fd4c 	bl	800b4ee <USB_ReadInterrupts>
 8006a56:	4603      	mov	r3, r0
 8006a58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a60:	d10f      	bne.n	8006a82 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006a62:	2300      	movs	r3, #0
 8006a64:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f009 ff29 	bl	80108c4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	695a      	ldr	r2, [r3, #20]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006a80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4618      	mov	r0, r3
 8006a88:	f004 fd31 	bl	800b4ee <USB_ReadInterrupts>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006a92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a96:	d10a      	bne.n	8006aae <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f009 ff37 	bl	801090c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	695a      	ldr	r2, [r3, #20]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006aac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f004 fd1b 	bl	800b4ee <USB_ReadInterrupts>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	f003 0304 	and.w	r3, r3, #4
 8006abe:	2b04      	cmp	r3, #4
 8006ac0:	d115      	bne.n	8006aee <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006aca:	69bb      	ldr	r3, [r7, #24]
 8006acc:	f003 0304 	and.w	r3, r3, #4
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d002      	beq.n	8006ada <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f009 ff27 	bl	8010928 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	6859      	ldr	r1, [r3, #4]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	69ba      	ldr	r2, [r7, #24]
 8006ae6:	430a      	orrs	r2, r1
 8006ae8:	605a      	str	r2, [r3, #4]
 8006aea:	e000      	b.n	8006aee <HAL_PCD_IRQHandler+0x75e>
      return;
 8006aec:	bf00      	nop
    }
  }
}
 8006aee:	3734      	adds	r7, #52	; 0x34
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd90      	pop	{r4, r7, pc}

08006af4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b082      	sub	sp, #8
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	460b      	mov	r3, r1
 8006afe:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d101      	bne.n	8006b0e <HAL_PCD_SetAddress+0x1a>
 8006b0a:	2302      	movs	r3, #2
 8006b0c:	e013      	b.n	8006b36 <HAL_PCD_SetAddress+0x42>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2201      	movs	r2, #1
 8006b12:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	78fa      	ldrb	r2, [r7, #3]
 8006b1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	78fa      	ldrb	r2, [r7, #3]
 8006b24:	4611      	mov	r1, r2
 8006b26:	4618      	mov	r0, r3
 8006b28:	f004 fc79 	bl	800b41e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006b34:	2300      	movs	r3, #0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3708      	adds	r7, #8
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b084      	sub	sp, #16
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
 8006b46:	4608      	mov	r0, r1
 8006b48:	4611      	mov	r1, r2
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	70fb      	strb	r3, [r7, #3]
 8006b50:	460b      	mov	r3, r1
 8006b52:	803b      	strh	r3, [r7, #0]
 8006b54:	4613      	mov	r3, r2
 8006b56:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006b5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	da0f      	bge.n	8006b84 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b64:	78fb      	ldrb	r3, [r7, #3]
 8006b66:	f003 020f 	and.w	r2, r3, #15
 8006b6a:	4613      	mov	r3, r2
 8006b6c:	00db      	lsls	r3, r3, #3
 8006b6e:	1a9b      	subs	r3, r3, r2
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	3338      	adds	r3, #56	; 0x38
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	4413      	add	r3, r2
 8006b78:	3304      	adds	r3, #4
 8006b7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	705a      	strb	r2, [r3, #1]
 8006b82:	e00f      	b.n	8006ba4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006b84:	78fb      	ldrb	r3, [r7, #3]
 8006b86:	f003 020f 	and.w	r2, r3, #15
 8006b8a:	4613      	mov	r3, r2
 8006b8c:	00db      	lsls	r3, r3, #3
 8006b8e:	1a9b      	subs	r3, r3, r2
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	4413      	add	r3, r2
 8006b9a:	3304      	adds	r3, #4
 8006b9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006ba4:	78fb      	ldrb	r3, [r7, #3]
 8006ba6:	f003 030f 	and.w	r3, r3, #15
 8006baa:	b2da      	uxtb	r2, r3
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006bb0:	883a      	ldrh	r2, [r7, #0]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	78ba      	ldrb	r2, [r7, #2]
 8006bba:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	785b      	ldrb	r3, [r3, #1]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d004      	beq.n	8006bce <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	b29a      	uxth	r2, r3
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006bce:	78bb      	ldrb	r3, [r7, #2]
 8006bd0:	2b02      	cmp	r3, #2
 8006bd2:	d102      	bne.n	8006bda <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d101      	bne.n	8006be8 <HAL_PCD_EP_Open+0xaa>
 8006be4:	2302      	movs	r3, #2
 8006be6:	e00e      	b.n	8006c06 <HAL_PCD_EP_Open+0xc8>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2201      	movs	r2, #1
 8006bec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	68f9      	ldr	r1, [r7, #12]
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f003 fde4 	bl	800a7c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8006c04:	7afb      	ldrb	r3, [r7, #11]
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3710      	adds	r7, #16
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}

08006c0e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006c0e:	b580      	push	{r7, lr}
 8006c10:	b084      	sub	sp, #16
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
 8006c16:	460b      	mov	r3, r1
 8006c18:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006c1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	da0f      	bge.n	8006c42 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006c22:	78fb      	ldrb	r3, [r7, #3]
 8006c24:	f003 020f 	and.w	r2, r3, #15
 8006c28:	4613      	mov	r3, r2
 8006c2a:	00db      	lsls	r3, r3, #3
 8006c2c:	1a9b      	subs	r3, r3, r2
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	3338      	adds	r3, #56	; 0x38
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	4413      	add	r3, r2
 8006c36:	3304      	adds	r3, #4
 8006c38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	705a      	strb	r2, [r3, #1]
 8006c40:	e00f      	b.n	8006c62 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006c42:	78fb      	ldrb	r3, [r7, #3]
 8006c44:	f003 020f 	and.w	r2, r3, #15
 8006c48:	4613      	mov	r3, r2
 8006c4a:	00db      	lsls	r3, r3, #3
 8006c4c:	1a9b      	subs	r3, r3, r2
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	4413      	add	r3, r2
 8006c58:	3304      	adds	r3, #4
 8006c5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006c62:	78fb      	ldrb	r3, [r7, #3]
 8006c64:	f003 030f 	and.w	r3, r3, #15
 8006c68:	b2da      	uxtb	r2, r3
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d101      	bne.n	8006c7c <HAL_PCD_EP_Close+0x6e>
 8006c78:	2302      	movs	r3, #2
 8006c7a:	e00e      	b.n	8006c9a <HAL_PCD_EP_Close+0x8c>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	68f9      	ldr	r1, [r7, #12]
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f003 fe22 	bl	800a8d4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006c98:	2300      	movs	r3, #0
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3710      	adds	r7, #16
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}

08006ca2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006ca2:	b580      	push	{r7, lr}
 8006ca4:	b086      	sub	sp, #24
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	60f8      	str	r0, [r7, #12]
 8006caa:	607a      	str	r2, [r7, #4]
 8006cac:	603b      	str	r3, [r7, #0]
 8006cae:	460b      	mov	r3, r1
 8006cb0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006cb2:	7afb      	ldrb	r3, [r7, #11]
 8006cb4:	f003 020f 	and.w	r2, r3, #15
 8006cb8:	4613      	mov	r3, r2
 8006cba:	00db      	lsls	r3, r3, #3
 8006cbc:	1a9b      	subs	r3, r3, r2
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006cc4:	68fa      	ldr	r2, [r7, #12]
 8006cc6:	4413      	add	r3, r2
 8006cc8:	3304      	adds	r3, #4
 8006cca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	683a      	ldr	r2, [r7, #0]
 8006cd6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006ce4:	7afb      	ldrb	r3, [r7, #11]
 8006ce6:	f003 030f 	and.w	r3, r3, #15
 8006cea:	b2da      	uxtb	r2, r3
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	691b      	ldr	r3, [r3, #16]
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d102      	bne.n	8006cfe <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006cf8:	687a      	ldr	r2, [r7, #4]
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006cfe:	7afb      	ldrb	r3, [r7, #11]
 8006d00:	f003 030f 	and.w	r3, r3, #15
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d109      	bne.n	8006d1c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6818      	ldr	r0, [r3, #0]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	691b      	ldr	r3, [r3, #16]
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	461a      	mov	r2, r3
 8006d14:	6979      	ldr	r1, [r7, #20]
 8006d16:	f004 f8fd 	bl	800af14 <USB_EP0StartXfer>
 8006d1a:	e008      	b.n	8006d2e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6818      	ldr	r0, [r3, #0]
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	691b      	ldr	r3, [r3, #16]
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	461a      	mov	r2, r3
 8006d28:	6979      	ldr	r1, [r7, #20]
 8006d2a:	f003 feaf 	bl	800aa8c <USB_EPStartXfer>
  }

  return HAL_OK;
 8006d2e:	2300      	movs	r3, #0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3718      	adds	r7, #24
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b083      	sub	sp, #12
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	460b      	mov	r3, r1
 8006d42:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006d44:	78fb      	ldrb	r3, [r7, #3]
 8006d46:	f003 020f 	and.w	r2, r3, #15
 8006d4a:	6879      	ldr	r1, [r7, #4]
 8006d4c:	4613      	mov	r3, r2
 8006d4e:	00db      	lsls	r3, r3, #3
 8006d50:	1a9b      	subs	r3, r3, r2
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	440b      	add	r3, r1
 8006d56:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006d5a:	681b      	ldr	r3, [r3, #0]
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	370c      	adds	r7, #12
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr

08006d68 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b086      	sub	sp, #24
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	607a      	str	r2, [r7, #4]
 8006d72:	603b      	str	r3, [r7, #0]
 8006d74:	460b      	mov	r3, r1
 8006d76:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006d78:	7afb      	ldrb	r3, [r7, #11]
 8006d7a:	f003 020f 	and.w	r2, r3, #15
 8006d7e:	4613      	mov	r3, r2
 8006d80:	00db      	lsls	r3, r3, #3
 8006d82:	1a9b      	subs	r3, r3, r2
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	3338      	adds	r3, #56	; 0x38
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	4413      	add	r3, r2
 8006d8c:	3304      	adds	r3, #4
 8006d8e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	683a      	ldr	r2, [r7, #0]
 8006d9a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	2201      	movs	r2, #1
 8006da6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006da8:	7afb      	ldrb	r3, [r7, #11]
 8006daa:	f003 030f 	and.w	r3, r3, #15
 8006dae:	b2da      	uxtb	r2, r3
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	691b      	ldr	r3, [r3, #16]
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d102      	bne.n	8006dc2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006dbc:	687a      	ldr	r2, [r7, #4]
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006dc2:	7afb      	ldrb	r3, [r7, #11]
 8006dc4:	f003 030f 	and.w	r3, r3, #15
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d109      	bne.n	8006de0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	6818      	ldr	r0, [r3, #0]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	691b      	ldr	r3, [r3, #16]
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	6979      	ldr	r1, [r7, #20]
 8006dda:	f004 f89b 	bl	800af14 <USB_EP0StartXfer>
 8006dde:	e008      	b.n	8006df2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	6818      	ldr	r0, [r3, #0]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	691b      	ldr	r3, [r3, #16]
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	461a      	mov	r2, r3
 8006dec:	6979      	ldr	r1, [r7, #20]
 8006dee:	f003 fe4d 	bl	800aa8c <USB_EPStartXfer>
  }

  return HAL_OK;
 8006df2:	2300      	movs	r3, #0
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3718      	adds	r7, #24
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}

08006dfc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	460b      	mov	r3, r1
 8006e06:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006e08:	78fb      	ldrb	r3, [r7, #3]
 8006e0a:	f003 020f 	and.w	r2, r3, #15
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d901      	bls.n	8006e1a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	e050      	b.n	8006ebc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006e1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	da0f      	bge.n	8006e42 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006e22:	78fb      	ldrb	r3, [r7, #3]
 8006e24:	f003 020f 	and.w	r2, r3, #15
 8006e28:	4613      	mov	r3, r2
 8006e2a:	00db      	lsls	r3, r3, #3
 8006e2c:	1a9b      	subs	r3, r3, r2
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	3338      	adds	r3, #56	; 0x38
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	4413      	add	r3, r2
 8006e36:	3304      	adds	r3, #4
 8006e38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	705a      	strb	r2, [r3, #1]
 8006e40:	e00d      	b.n	8006e5e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006e42:	78fa      	ldrb	r2, [r7, #3]
 8006e44:	4613      	mov	r3, r2
 8006e46:	00db      	lsls	r3, r3, #3
 8006e48:	1a9b      	subs	r3, r3, r2
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	4413      	add	r3, r2
 8006e54:	3304      	adds	r3, #4
 8006e56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2201      	movs	r2, #1
 8006e62:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006e64:	78fb      	ldrb	r3, [r7, #3]
 8006e66:	f003 030f 	and.w	r3, r3, #15
 8006e6a:	b2da      	uxtb	r2, r3
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d101      	bne.n	8006e7e <HAL_PCD_EP_SetStall+0x82>
 8006e7a:	2302      	movs	r3, #2
 8006e7c:	e01e      	b.n	8006ebc <HAL_PCD_EP_SetStall+0xc0>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2201      	movs	r2, #1
 8006e82:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	68f9      	ldr	r1, [r7, #12]
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f004 f9f2 	bl	800b276 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006e92:	78fb      	ldrb	r3, [r7, #3]
 8006e94:	f003 030f 	and.w	r3, r3, #15
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d10a      	bne.n	8006eb2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6818      	ldr	r0, [r3, #0]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	691b      	ldr	r3, [r3, #16]
 8006ea4:	b2d9      	uxtb	r1, r3
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006eac:	461a      	mov	r2, r3
 8006eae:	f004 fbe3 	bl	800b678 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006eba:	2300      	movs	r3, #0
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3710      	adds	r7, #16
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	460b      	mov	r3, r1
 8006ece:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006ed0:	78fb      	ldrb	r3, [r7, #3]
 8006ed2:	f003 020f 	and.w	r2, r3, #15
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d901      	bls.n	8006ee2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e042      	b.n	8006f68 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006ee2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	da0f      	bge.n	8006f0a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006eea:	78fb      	ldrb	r3, [r7, #3]
 8006eec:	f003 020f 	and.w	r2, r3, #15
 8006ef0:	4613      	mov	r3, r2
 8006ef2:	00db      	lsls	r3, r3, #3
 8006ef4:	1a9b      	subs	r3, r3, r2
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	3338      	adds	r3, #56	; 0x38
 8006efa:	687a      	ldr	r2, [r7, #4]
 8006efc:	4413      	add	r3, r2
 8006efe:	3304      	adds	r3, #4
 8006f00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2201      	movs	r2, #1
 8006f06:	705a      	strb	r2, [r3, #1]
 8006f08:	e00f      	b.n	8006f2a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006f0a:	78fb      	ldrb	r3, [r7, #3]
 8006f0c:	f003 020f 	and.w	r2, r3, #15
 8006f10:	4613      	mov	r3, r2
 8006f12:	00db      	lsls	r3, r3, #3
 8006f14:	1a9b      	subs	r3, r3, r2
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	4413      	add	r3, r2
 8006f20:	3304      	adds	r3, #4
 8006f22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2200      	movs	r2, #0
 8006f28:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006f30:	78fb      	ldrb	r3, [r7, #3]
 8006f32:	f003 030f 	and.w	r3, r3, #15
 8006f36:	b2da      	uxtb	r2, r3
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d101      	bne.n	8006f4a <HAL_PCD_EP_ClrStall+0x86>
 8006f46:	2302      	movs	r3, #2
 8006f48:	e00e      	b.n	8006f68 <HAL_PCD_EP_ClrStall+0xa4>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	68f9      	ldr	r1, [r7, #12]
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f004 f9fa 	bl	800b352 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006f66:	2300      	movs	r3, #0
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3710      	adds	r7, #16
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b08a      	sub	sp, #40	; 0x28
 8006f74:	af02      	add	r7, sp, #8
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006f84:	683a      	ldr	r2, [r7, #0]
 8006f86:	4613      	mov	r3, r2
 8006f88:	00db      	lsls	r3, r3, #3
 8006f8a:	1a9b      	subs	r3, r3, r2
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	3338      	adds	r3, #56	; 0x38
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	4413      	add	r3, r2
 8006f94:	3304      	adds	r3, #4
 8006f96:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	699a      	ldr	r2, [r3, #24]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	695b      	ldr	r3, [r3, #20]
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d901      	bls.n	8006fa8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e06c      	b.n	8007082 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	695a      	ldr	r2, [r3, #20]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	699b      	ldr	r3, [r3, #24]
 8006fb0:	1ad3      	subs	r3, r2, r3
 8006fb2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	69fa      	ldr	r2, [r7, #28]
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d902      	bls.n	8006fc4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006fc4:	69fb      	ldr	r3, [r7, #28]
 8006fc6:	3303      	adds	r3, #3
 8006fc8:	089b      	lsrs	r3, r3, #2
 8006fca:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006fcc:	e02b      	b.n	8007026 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	695a      	ldr	r2, [r3, #20]
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	699b      	ldr	r3, [r3, #24]
 8006fd6:	1ad3      	subs	r3, r2, r3
 8006fd8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	69fa      	ldr	r2, [r7, #28]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d902      	bls.n	8006fea <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006fea:	69fb      	ldr	r3, [r7, #28]
 8006fec:	3303      	adds	r3, #3
 8006fee:	089b      	lsrs	r3, r3, #2
 8006ff0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	68d9      	ldr	r1, [r3, #12]
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	b2da      	uxtb	r2, r3
 8006ffa:	69fb      	ldr	r3, [r7, #28]
 8006ffc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007002:	b2db      	uxtb	r3, r3
 8007004:	9300      	str	r3, [sp, #0]
 8007006:	4603      	mov	r3, r0
 8007008:	6978      	ldr	r0, [r7, #20]
 800700a:	f004 f8d6 	bl	800b1ba <USB_WritePacket>

    ep->xfer_buff  += len;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	68da      	ldr	r2, [r3, #12]
 8007012:	69fb      	ldr	r3, [r7, #28]
 8007014:	441a      	add	r2, r3
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	699a      	ldr	r2, [r3, #24]
 800701e:	69fb      	ldr	r3, [r7, #28]
 8007020:	441a      	add	r2, r3
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	015a      	lsls	r2, r3, #5
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	4413      	add	r3, r2
 800702e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007032:	699b      	ldr	r3, [r3, #24]
 8007034:	b29b      	uxth	r3, r3
 8007036:	69ba      	ldr	r2, [r7, #24]
 8007038:	429a      	cmp	r2, r3
 800703a:	d809      	bhi.n	8007050 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	699a      	ldr	r2, [r3, #24]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007044:	429a      	cmp	r2, r3
 8007046:	d203      	bcs.n	8007050 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	695b      	ldr	r3, [r3, #20]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d1be      	bne.n	8006fce <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	695a      	ldr	r2, [r3, #20]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	699b      	ldr	r3, [r3, #24]
 8007058:	429a      	cmp	r2, r3
 800705a:	d811      	bhi.n	8007080 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	f003 030f 	and.w	r3, r3, #15
 8007062:	2201      	movs	r2, #1
 8007064:	fa02 f303 	lsl.w	r3, r2, r3
 8007068:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007070:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	43db      	mvns	r3, r3
 8007076:	6939      	ldr	r1, [r7, #16]
 8007078:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800707c:	4013      	ands	r3, r2
 800707e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	3720      	adds	r7, #32
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
	...

0800708c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b086      	sub	sp, #24
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	333c      	adds	r3, #60	; 0x3c
 80070a4:	3304      	adds	r3, #4
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	015a      	lsls	r2, r3, #5
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	4413      	add	r3, r2
 80070b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	691b      	ldr	r3, [r3, #16]
 80070be:	2b01      	cmp	r3, #1
 80070c0:	f040 80a0 	bne.w	8007204 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	f003 0308 	and.w	r3, r3, #8
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d015      	beq.n	80070fa <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	4a72      	ldr	r2, [pc, #456]	; (800729c <PCD_EP_OutXfrComplete_int+0x210>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	f240 80dd 	bls.w	8007292 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80070de:	2b00      	cmp	r3, #0
 80070e0:	f000 80d7 	beq.w	8007292 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	015a      	lsls	r2, r3, #5
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	4413      	add	r3, r2
 80070ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070f0:	461a      	mov	r2, r3
 80070f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070f6:	6093      	str	r3, [r2, #8]
 80070f8:	e0cb      	b.n	8007292 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	f003 0320 	and.w	r3, r3, #32
 8007100:	2b00      	cmp	r3, #0
 8007102:	d009      	beq.n	8007118 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	015a      	lsls	r2, r3, #5
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	4413      	add	r3, r2
 800710c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007110:	461a      	mov	r2, r3
 8007112:	2320      	movs	r3, #32
 8007114:	6093      	str	r3, [r2, #8]
 8007116:	e0bc      	b.n	8007292 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800711e:	2b00      	cmp	r3, #0
 8007120:	f040 80b7 	bne.w	8007292 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	4a5d      	ldr	r2, [pc, #372]	; (800729c <PCD_EP_OutXfrComplete_int+0x210>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d90f      	bls.n	800714c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007132:	2b00      	cmp	r3, #0
 8007134:	d00a      	beq.n	800714c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	015a      	lsls	r2, r3, #5
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	4413      	add	r3, r2
 800713e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007142:	461a      	mov	r2, r3
 8007144:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007148:	6093      	str	r3, [r2, #8]
 800714a:	e0a2      	b.n	8007292 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800714c:	6879      	ldr	r1, [r7, #4]
 800714e:	683a      	ldr	r2, [r7, #0]
 8007150:	4613      	mov	r3, r2
 8007152:	00db      	lsls	r3, r3, #3
 8007154:	1a9b      	subs	r3, r3, r2
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	440b      	add	r3, r1
 800715a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800715e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	0159      	lsls	r1, r3, #5
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	440b      	add	r3, r1
 8007168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8007172:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	683a      	ldr	r2, [r7, #0]
 8007178:	4613      	mov	r3, r2
 800717a:	00db      	lsls	r3, r3, #3
 800717c:	1a9b      	subs	r3, r3, r2
 800717e:	009b      	lsls	r3, r3, #2
 8007180:	4403      	add	r3, r0
 8007182:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007186:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8007188:	6879      	ldr	r1, [r7, #4]
 800718a:	683a      	ldr	r2, [r7, #0]
 800718c:	4613      	mov	r3, r2
 800718e:	00db      	lsls	r3, r3, #3
 8007190:	1a9b      	subs	r3, r3, r2
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	440b      	add	r3, r1
 8007196:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800719a:	6819      	ldr	r1, [r3, #0]
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	683a      	ldr	r2, [r7, #0]
 80071a0:	4613      	mov	r3, r2
 80071a2:	00db      	lsls	r3, r3, #3
 80071a4:	1a9b      	subs	r3, r3, r2
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	4403      	add	r3, r0
 80071aa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4419      	add	r1, r3
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	683a      	ldr	r2, [r7, #0]
 80071b6:	4613      	mov	r3, r2
 80071b8:	00db      	lsls	r3, r3, #3
 80071ba:	1a9b      	subs	r3, r3, r2
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	4403      	add	r3, r0
 80071c0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80071c4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d114      	bne.n	80071f6 <PCD_EP_OutXfrComplete_int+0x16a>
 80071cc:	6879      	ldr	r1, [r7, #4]
 80071ce:	683a      	ldr	r2, [r7, #0]
 80071d0:	4613      	mov	r3, r2
 80071d2:	00db      	lsls	r3, r3, #3
 80071d4:	1a9b      	subs	r3, r3, r2
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	440b      	add	r3, r1
 80071da:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d108      	bne.n	80071f6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6818      	ldr	r0, [r3, #0]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80071ee:	461a      	mov	r2, r3
 80071f0:	2101      	movs	r1, #1
 80071f2:	f004 fa41 	bl	800b678 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	4619      	mov	r1, r3
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f009 fac1 	bl	8010784 <HAL_PCD_DataOutStageCallback>
 8007202:	e046      	b.n	8007292 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	4a26      	ldr	r2, [pc, #152]	; (80072a0 <PCD_EP_OutXfrComplete_int+0x214>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d124      	bne.n	8007256 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007212:	2b00      	cmp	r3, #0
 8007214:	d00a      	beq.n	800722c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	015a      	lsls	r2, r3, #5
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	4413      	add	r3, r2
 800721e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007222:	461a      	mov	r2, r3
 8007224:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007228:	6093      	str	r3, [r2, #8]
 800722a:	e032      	b.n	8007292 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	f003 0320 	and.w	r3, r3, #32
 8007232:	2b00      	cmp	r3, #0
 8007234:	d008      	beq.n	8007248 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	015a      	lsls	r2, r3, #5
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	4413      	add	r3, r2
 800723e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007242:	461a      	mov	r2, r3
 8007244:	2320      	movs	r3, #32
 8007246:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	b2db      	uxtb	r3, r3
 800724c:	4619      	mov	r1, r3
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f009 fa98 	bl	8010784 <HAL_PCD_DataOutStageCallback>
 8007254:	e01d      	b.n	8007292 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d114      	bne.n	8007286 <PCD_EP_OutXfrComplete_int+0x1fa>
 800725c:	6879      	ldr	r1, [r7, #4]
 800725e:	683a      	ldr	r2, [r7, #0]
 8007260:	4613      	mov	r3, r2
 8007262:	00db      	lsls	r3, r3, #3
 8007264:	1a9b      	subs	r3, r3, r2
 8007266:	009b      	lsls	r3, r3, #2
 8007268:	440b      	add	r3, r1
 800726a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d108      	bne.n	8007286 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6818      	ldr	r0, [r3, #0]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800727e:	461a      	mov	r2, r3
 8007280:	2100      	movs	r1, #0
 8007282:	f004 f9f9 	bl	800b678 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	b2db      	uxtb	r3, r3
 800728a:	4619      	mov	r1, r3
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f009 fa79 	bl	8010784 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007292:	2300      	movs	r3, #0
}
 8007294:	4618      	mov	r0, r3
 8007296:	3718      	adds	r7, #24
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}
 800729c:	4f54300a 	.word	0x4f54300a
 80072a0:	4f54310a 	.word	0x4f54310a

080072a4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b086      	sub	sp, #24
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	333c      	adds	r3, #60	; 0x3c
 80072bc:	3304      	adds	r3, #4
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	015a      	lsls	r2, r3, #5
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	4413      	add	r3, r2
 80072ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	4a15      	ldr	r2, [pc, #84]	; (800732c <PCD_EP_OutSetupPacket_int+0x88>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d90e      	bls.n	80072f8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d009      	beq.n	80072f8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	015a      	lsls	r2, r3, #5
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	4413      	add	r3, r2
 80072ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072f0:	461a      	mov	r2, r3
 80072f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072f6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f009 fa31 	bl	8010760 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	4a0a      	ldr	r2, [pc, #40]	; (800732c <PCD_EP_OutSetupPacket_int+0x88>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d90c      	bls.n	8007320 <PCD_EP_OutSetupPacket_int+0x7c>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	2b01      	cmp	r3, #1
 800730c:	d108      	bne.n	8007320 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6818      	ldr	r0, [r3, #0]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007318:	461a      	mov	r2, r3
 800731a:	2101      	movs	r1, #1
 800731c:	f004 f9ac 	bl	800b678 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007320:	2300      	movs	r3, #0
}
 8007322:	4618      	mov	r0, r3
 8007324:	3718      	adds	r7, #24
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop
 800732c:	4f54300a 	.word	0x4f54300a

08007330 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007330:	b480      	push	{r7}
 8007332:	b085      	sub	sp, #20
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	460b      	mov	r3, r1
 800733a:	70fb      	strb	r3, [r7, #3]
 800733c:	4613      	mov	r3, r2
 800733e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007346:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007348:	78fb      	ldrb	r3, [r7, #3]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d107      	bne.n	800735e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800734e:	883b      	ldrh	r3, [r7, #0]
 8007350:	0419      	lsls	r1, r3, #16
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	68ba      	ldr	r2, [r7, #8]
 8007358:	430a      	orrs	r2, r1
 800735a:	629a      	str	r2, [r3, #40]	; 0x28
 800735c:	e028      	b.n	80073b0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007364:	0c1b      	lsrs	r3, r3, #16
 8007366:	68ba      	ldr	r2, [r7, #8]
 8007368:	4413      	add	r3, r2
 800736a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800736c:	2300      	movs	r3, #0
 800736e:	73fb      	strb	r3, [r7, #15]
 8007370:	e00d      	b.n	800738e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	7bfb      	ldrb	r3, [r7, #15]
 8007378:	3340      	adds	r3, #64	; 0x40
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	4413      	add	r3, r2
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	0c1b      	lsrs	r3, r3, #16
 8007382:	68ba      	ldr	r2, [r7, #8]
 8007384:	4413      	add	r3, r2
 8007386:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007388:	7bfb      	ldrb	r3, [r7, #15]
 800738a:	3301      	adds	r3, #1
 800738c:	73fb      	strb	r3, [r7, #15]
 800738e:	7bfa      	ldrb	r2, [r7, #15]
 8007390:	78fb      	ldrb	r3, [r7, #3]
 8007392:	3b01      	subs	r3, #1
 8007394:	429a      	cmp	r2, r3
 8007396:	d3ec      	bcc.n	8007372 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007398:	883b      	ldrh	r3, [r7, #0]
 800739a:	0418      	lsls	r0, r3, #16
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6819      	ldr	r1, [r3, #0]
 80073a0:	78fb      	ldrb	r3, [r7, #3]
 80073a2:	3b01      	subs	r3, #1
 80073a4:	68ba      	ldr	r2, [r7, #8]
 80073a6:	4302      	orrs	r2, r0
 80073a8:	3340      	adds	r3, #64	; 0x40
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	440b      	add	r3, r1
 80073ae:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80073b0:	2300      	movs	r3, #0
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3714      	adds	r7, #20
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr

080073be <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80073be:	b480      	push	{r7}
 80073c0:	b083      	sub	sp, #12
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
 80073c6:	460b      	mov	r3, r1
 80073c8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	887a      	ldrh	r2, [r7, #2]
 80073d0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80073d2:	2300      	movs	r3, #0
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	370c      	adds	r7, #12
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr

080073e0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b083      	sub	sp, #12
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	460b      	mov	r3, r1
 80073ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80073ec:	bf00      	nop
 80073ee:	370c      	adds	r7, #12
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr

080073f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b086      	sub	sp, #24
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d101      	bne.n	800740a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	e25b      	b.n	80078c2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f003 0301 	and.w	r3, r3, #1
 8007412:	2b00      	cmp	r3, #0
 8007414:	d075      	beq.n	8007502 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007416:	4ba3      	ldr	r3, [pc, #652]	; (80076a4 <HAL_RCC_OscConfig+0x2ac>)
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	f003 030c 	and.w	r3, r3, #12
 800741e:	2b04      	cmp	r3, #4
 8007420:	d00c      	beq.n	800743c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007422:	4ba0      	ldr	r3, [pc, #640]	; (80076a4 <HAL_RCC_OscConfig+0x2ac>)
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800742a:	2b08      	cmp	r3, #8
 800742c:	d112      	bne.n	8007454 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800742e:	4b9d      	ldr	r3, [pc, #628]	; (80076a4 <HAL_RCC_OscConfig+0x2ac>)
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007436:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800743a:	d10b      	bne.n	8007454 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800743c:	4b99      	ldr	r3, [pc, #612]	; (80076a4 <HAL_RCC_OscConfig+0x2ac>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007444:	2b00      	cmp	r3, #0
 8007446:	d05b      	beq.n	8007500 <HAL_RCC_OscConfig+0x108>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d157      	bne.n	8007500 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007450:	2301      	movs	r3, #1
 8007452:	e236      	b.n	80078c2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800745c:	d106      	bne.n	800746c <HAL_RCC_OscConfig+0x74>
 800745e:	4b91      	ldr	r3, [pc, #580]	; (80076a4 <HAL_RCC_OscConfig+0x2ac>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a90      	ldr	r2, [pc, #576]	; (80076a4 <HAL_RCC_OscConfig+0x2ac>)
 8007464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007468:	6013      	str	r3, [r2, #0]
 800746a:	e01d      	b.n	80074a8 <HAL_RCC_OscConfig+0xb0>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007474:	d10c      	bne.n	8007490 <HAL_RCC_OscConfig+0x98>
 8007476:	4b8b      	ldr	r3, [pc, #556]	; (80076a4 <HAL_RCC_OscConfig+0x2ac>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a8a      	ldr	r2, [pc, #552]	; (80076a4 <HAL_RCC_OscConfig+0x2ac>)
 800747c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007480:	6013      	str	r3, [r2, #0]
 8007482:	4b88      	ldr	r3, [pc, #544]	; (80076a4 <HAL_RCC_OscConfig+0x2ac>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a87      	ldr	r2, [pc, #540]	; (80076a4 <HAL_RCC_OscConfig+0x2ac>)
 8007488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800748c:	6013      	str	r3, [r2, #0]
 800748e:	e00b      	b.n	80074a8 <HAL_RCC_OscConfig+0xb0>
 8007490:	4b84      	ldr	r3, [pc, #528]	; (80076a4 <HAL_RCC_OscConfig+0x2ac>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a83      	ldr	r2, [pc, #524]	; (80076a4 <HAL_RCC_OscConfig+0x2ac>)
 8007496:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800749a:	6013      	str	r3, [r2, #0]
 800749c:	4b81      	ldr	r3, [pc, #516]	; (80076a4 <HAL_RCC_OscConfig+0x2ac>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a80      	ldr	r2, [pc, #512]	; (80076a4 <HAL_RCC_OscConfig+0x2ac>)
 80074a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80074a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d013      	beq.n	80074d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074b0:	f7fa fda6 	bl	8002000 <HAL_GetTick>
 80074b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074b6:	e008      	b.n	80074ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80074b8:	f7fa fda2 	bl	8002000 <HAL_GetTick>
 80074bc:	4602      	mov	r2, r0
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	1ad3      	subs	r3, r2, r3
 80074c2:	2b64      	cmp	r3, #100	; 0x64
 80074c4:	d901      	bls.n	80074ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80074c6:	2303      	movs	r3, #3
 80074c8:	e1fb      	b.n	80078c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074ca:	4b76      	ldr	r3, [pc, #472]	; (80076a4 <HAL_RCC_OscConfig+0x2ac>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d0f0      	beq.n	80074b8 <HAL_RCC_OscConfig+0xc0>
 80074d6:	e014      	b.n	8007502 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074d8:	f7fa fd92 	bl	8002000 <HAL_GetTick>
 80074dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80074de:	e008      	b.n	80074f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80074e0:	f7fa fd8e 	bl	8002000 <HAL_GetTick>
 80074e4:	4602      	mov	r2, r0
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	1ad3      	subs	r3, r2, r3
 80074ea:	2b64      	cmp	r3, #100	; 0x64
 80074ec:	d901      	bls.n	80074f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80074ee:	2303      	movs	r3, #3
 80074f0:	e1e7      	b.n	80078c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80074f2:	4b6c      	ldr	r3, [pc, #432]	; (80076a4 <HAL_RCC_OscConfig+0x2ac>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d1f0      	bne.n	80074e0 <HAL_RCC_OscConfig+0xe8>
 80074fe:	e000      	b.n	8007502 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007500:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f003 0302 	and.w	r3, r3, #2
 800750a:	2b00      	cmp	r3, #0
 800750c:	d063      	beq.n	80075d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800750e:	4b65      	ldr	r3, [pc, #404]	; (80076a4 <HAL_RCC_OscConfig+0x2ac>)
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	f003 030c 	and.w	r3, r3, #12
 8007516:	2b00      	cmp	r3, #0
 8007518:	d00b      	beq.n	8007532 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800751a:	4b62      	ldr	r3, [pc, #392]	; (80076a4 <HAL_RCC_OscConfig+0x2ac>)
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007522:	2b08      	cmp	r3, #8
 8007524:	d11c      	bne.n	8007560 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007526:	4b5f      	ldr	r3, [pc, #380]	; (80076a4 <HAL_RCC_OscConfig+0x2ac>)
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800752e:	2b00      	cmp	r3, #0
 8007530:	d116      	bne.n	8007560 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007532:	4b5c      	ldr	r3, [pc, #368]	; (80076a4 <HAL_RCC_OscConfig+0x2ac>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f003 0302 	and.w	r3, r3, #2
 800753a:	2b00      	cmp	r3, #0
 800753c:	d005      	beq.n	800754a <HAL_RCC_OscConfig+0x152>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	68db      	ldr	r3, [r3, #12]
 8007542:	2b01      	cmp	r3, #1
 8007544:	d001      	beq.n	800754a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007546:	2301      	movs	r3, #1
 8007548:	e1bb      	b.n	80078c2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800754a:	4b56      	ldr	r3, [pc, #344]	; (80076a4 <HAL_RCC_OscConfig+0x2ac>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	691b      	ldr	r3, [r3, #16]
 8007556:	00db      	lsls	r3, r3, #3
 8007558:	4952      	ldr	r1, [pc, #328]	; (80076a4 <HAL_RCC_OscConfig+0x2ac>)
 800755a:	4313      	orrs	r3, r2
 800755c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800755e:	e03a      	b.n	80075d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	68db      	ldr	r3, [r3, #12]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d020      	beq.n	80075aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007568:	4b4f      	ldr	r3, [pc, #316]	; (80076a8 <HAL_RCC_OscConfig+0x2b0>)
 800756a:	2201      	movs	r2, #1
 800756c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800756e:	f7fa fd47 	bl	8002000 <HAL_GetTick>
 8007572:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007574:	e008      	b.n	8007588 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007576:	f7fa fd43 	bl	8002000 <HAL_GetTick>
 800757a:	4602      	mov	r2, r0
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	1ad3      	subs	r3, r2, r3
 8007580:	2b02      	cmp	r3, #2
 8007582:	d901      	bls.n	8007588 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007584:	2303      	movs	r3, #3
 8007586:	e19c      	b.n	80078c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007588:	4b46      	ldr	r3, [pc, #280]	; (80076a4 <HAL_RCC_OscConfig+0x2ac>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f003 0302 	and.w	r3, r3, #2
 8007590:	2b00      	cmp	r3, #0
 8007592:	d0f0      	beq.n	8007576 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007594:	4b43      	ldr	r3, [pc, #268]	; (80076a4 <HAL_RCC_OscConfig+0x2ac>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	691b      	ldr	r3, [r3, #16]
 80075a0:	00db      	lsls	r3, r3, #3
 80075a2:	4940      	ldr	r1, [pc, #256]	; (80076a4 <HAL_RCC_OscConfig+0x2ac>)
 80075a4:	4313      	orrs	r3, r2
 80075a6:	600b      	str	r3, [r1, #0]
 80075a8:	e015      	b.n	80075d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80075aa:	4b3f      	ldr	r3, [pc, #252]	; (80076a8 <HAL_RCC_OscConfig+0x2b0>)
 80075ac:	2200      	movs	r2, #0
 80075ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075b0:	f7fa fd26 	bl	8002000 <HAL_GetTick>
 80075b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80075b6:	e008      	b.n	80075ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80075b8:	f7fa fd22 	bl	8002000 <HAL_GetTick>
 80075bc:	4602      	mov	r2, r0
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	1ad3      	subs	r3, r2, r3
 80075c2:	2b02      	cmp	r3, #2
 80075c4:	d901      	bls.n	80075ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80075c6:	2303      	movs	r3, #3
 80075c8:	e17b      	b.n	80078c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80075ca:	4b36      	ldr	r3, [pc, #216]	; (80076a4 <HAL_RCC_OscConfig+0x2ac>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f003 0302 	and.w	r3, r3, #2
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d1f0      	bne.n	80075b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f003 0308 	and.w	r3, r3, #8
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d030      	beq.n	8007644 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	695b      	ldr	r3, [r3, #20]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d016      	beq.n	8007618 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80075ea:	4b30      	ldr	r3, [pc, #192]	; (80076ac <HAL_RCC_OscConfig+0x2b4>)
 80075ec:	2201      	movs	r2, #1
 80075ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075f0:	f7fa fd06 	bl	8002000 <HAL_GetTick>
 80075f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80075f6:	e008      	b.n	800760a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80075f8:	f7fa fd02 	bl	8002000 <HAL_GetTick>
 80075fc:	4602      	mov	r2, r0
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	1ad3      	subs	r3, r2, r3
 8007602:	2b02      	cmp	r3, #2
 8007604:	d901      	bls.n	800760a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007606:	2303      	movs	r3, #3
 8007608:	e15b      	b.n	80078c2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800760a:	4b26      	ldr	r3, [pc, #152]	; (80076a4 <HAL_RCC_OscConfig+0x2ac>)
 800760c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800760e:	f003 0302 	and.w	r3, r3, #2
 8007612:	2b00      	cmp	r3, #0
 8007614:	d0f0      	beq.n	80075f8 <HAL_RCC_OscConfig+0x200>
 8007616:	e015      	b.n	8007644 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007618:	4b24      	ldr	r3, [pc, #144]	; (80076ac <HAL_RCC_OscConfig+0x2b4>)
 800761a:	2200      	movs	r2, #0
 800761c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800761e:	f7fa fcef 	bl	8002000 <HAL_GetTick>
 8007622:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007624:	e008      	b.n	8007638 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007626:	f7fa fceb 	bl	8002000 <HAL_GetTick>
 800762a:	4602      	mov	r2, r0
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	1ad3      	subs	r3, r2, r3
 8007630:	2b02      	cmp	r3, #2
 8007632:	d901      	bls.n	8007638 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007634:	2303      	movs	r3, #3
 8007636:	e144      	b.n	80078c2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007638:	4b1a      	ldr	r3, [pc, #104]	; (80076a4 <HAL_RCC_OscConfig+0x2ac>)
 800763a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800763c:	f003 0302 	and.w	r3, r3, #2
 8007640:	2b00      	cmp	r3, #0
 8007642:	d1f0      	bne.n	8007626 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f003 0304 	and.w	r3, r3, #4
 800764c:	2b00      	cmp	r3, #0
 800764e:	f000 80a0 	beq.w	8007792 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007652:	2300      	movs	r3, #0
 8007654:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007656:	4b13      	ldr	r3, [pc, #76]	; (80076a4 <HAL_RCC_OscConfig+0x2ac>)
 8007658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800765a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800765e:	2b00      	cmp	r3, #0
 8007660:	d10f      	bne.n	8007682 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007662:	2300      	movs	r3, #0
 8007664:	60bb      	str	r3, [r7, #8]
 8007666:	4b0f      	ldr	r3, [pc, #60]	; (80076a4 <HAL_RCC_OscConfig+0x2ac>)
 8007668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800766a:	4a0e      	ldr	r2, [pc, #56]	; (80076a4 <HAL_RCC_OscConfig+0x2ac>)
 800766c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007670:	6413      	str	r3, [r2, #64]	; 0x40
 8007672:	4b0c      	ldr	r3, [pc, #48]	; (80076a4 <HAL_RCC_OscConfig+0x2ac>)
 8007674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800767a:	60bb      	str	r3, [r7, #8]
 800767c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800767e:	2301      	movs	r3, #1
 8007680:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007682:	4b0b      	ldr	r3, [pc, #44]	; (80076b0 <HAL_RCC_OscConfig+0x2b8>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800768a:	2b00      	cmp	r3, #0
 800768c:	d121      	bne.n	80076d2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800768e:	4b08      	ldr	r3, [pc, #32]	; (80076b0 <HAL_RCC_OscConfig+0x2b8>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a07      	ldr	r2, [pc, #28]	; (80076b0 <HAL_RCC_OscConfig+0x2b8>)
 8007694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007698:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800769a:	f7fa fcb1 	bl	8002000 <HAL_GetTick>
 800769e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076a0:	e011      	b.n	80076c6 <HAL_RCC_OscConfig+0x2ce>
 80076a2:	bf00      	nop
 80076a4:	40023800 	.word	0x40023800
 80076a8:	42470000 	.word	0x42470000
 80076ac:	42470e80 	.word	0x42470e80
 80076b0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80076b4:	f7fa fca4 	bl	8002000 <HAL_GetTick>
 80076b8:	4602      	mov	r2, r0
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	1ad3      	subs	r3, r2, r3
 80076be:	2b02      	cmp	r3, #2
 80076c0:	d901      	bls.n	80076c6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80076c2:	2303      	movs	r3, #3
 80076c4:	e0fd      	b.n	80078c2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076c6:	4b81      	ldr	r3, [pc, #516]	; (80078cc <HAL_RCC_OscConfig+0x4d4>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d0f0      	beq.n	80076b4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d106      	bne.n	80076e8 <HAL_RCC_OscConfig+0x2f0>
 80076da:	4b7d      	ldr	r3, [pc, #500]	; (80078d0 <HAL_RCC_OscConfig+0x4d8>)
 80076dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076de:	4a7c      	ldr	r2, [pc, #496]	; (80078d0 <HAL_RCC_OscConfig+0x4d8>)
 80076e0:	f043 0301 	orr.w	r3, r3, #1
 80076e4:	6713      	str	r3, [r2, #112]	; 0x70
 80076e6:	e01c      	b.n	8007722 <HAL_RCC_OscConfig+0x32a>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	2b05      	cmp	r3, #5
 80076ee:	d10c      	bne.n	800770a <HAL_RCC_OscConfig+0x312>
 80076f0:	4b77      	ldr	r3, [pc, #476]	; (80078d0 <HAL_RCC_OscConfig+0x4d8>)
 80076f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076f4:	4a76      	ldr	r2, [pc, #472]	; (80078d0 <HAL_RCC_OscConfig+0x4d8>)
 80076f6:	f043 0304 	orr.w	r3, r3, #4
 80076fa:	6713      	str	r3, [r2, #112]	; 0x70
 80076fc:	4b74      	ldr	r3, [pc, #464]	; (80078d0 <HAL_RCC_OscConfig+0x4d8>)
 80076fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007700:	4a73      	ldr	r2, [pc, #460]	; (80078d0 <HAL_RCC_OscConfig+0x4d8>)
 8007702:	f043 0301 	orr.w	r3, r3, #1
 8007706:	6713      	str	r3, [r2, #112]	; 0x70
 8007708:	e00b      	b.n	8007722 <HAL_RCC_OscConfig+0x32a>
 800770a:	4b71      	ldr	r3, [pc, #452]	; (80078d0 <HAL_RCC_OscConfig+0x4d8>)
 800770c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800770e:	4a70      	ldr	r2, [pc, #448]	; (80078d0 <HAL_RCC_OscConfig+0x4d8>)
 8007710:	f023 0301 	bic.w	r3, r3, #1
 8007714:	6713      	str	r3, [r2, #112]	; 0x70
 8007716:	4b6e      	ldr	r3, [pc, #440]	; (80078d0 <HAL_RCC_OscConfig+0x4d8>)
 8007718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800771a:	4a6d      	ldr	r2, [pc, #436]	; (80078d0 <HAL_RCC_OscConfig+0x4d8>)
 800771c:	f023 0304 	bic.w	r3, r3, #4
 8007720:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	689b      	ldr	r3, [r3, #8]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d015      	beq.n	8007756 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800772a:	f7fa fc69 	bl	8002000 <HAL_GetTick>
 800772e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007730:	e00a      	b.n	8007748 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007732:	f7fa fc65 	bl	8002000 <HAL_GetTick>
 8007736:	4602      	mov	r2, r0
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	1ad3      	subs	r3, r2, r3
 800773c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007740:	4293      	cmp	r3, r2
 8007742:	d901      	bls.n	8007748 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007744:	2303      	movs	r3, #3
 8007746:	e0bc      	b.n	80078c2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007748:	4b61      	ldr	r3, [pc, #388]	; (80078d0 <HAL_RCC_OscConfig+0x4d8>)
 800774a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800774c:	f003 0302 	and.w	r3, r3, #2
 8007750:	2b00      	cmp	r3, #0
 8007752:	d0ee      	beq.n	8007732 <HAL_RCC_OscConfig+0x33a>
 8007754:	e014      	b.n	8007780 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007756:	f7fa fc53 	bl	8002000 <HAL_GetTick>
 800775a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800775c:	e00a      	b.n	8007774 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800775e:	f7fa fc4f 	bl	8002000 <HAL_GetTick>
 8007762:	4602      	mov	r2, r0
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	1ad3      	subs	r3, r2, r3
 8007768:	f241 3288 	movw	r2, #5000	; 0x1388
 800776c:	4293      	cmp	r3, r2
 800776e:	d901      	bls.n	8007774 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007770:	2303      	movs	r3, #3
 8007772:	e0a6      	b.n	80078c2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007774:	4b56      	ldr	r3, [pc, #344]	; (80078d0 <HAL_RCC_OscConfig+0x4d8>)
 8007776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007778:	f003 0302 	and.w	r3, r3, #2
 800777c:	2b00      	cmp	r3, #0
 800777e:	d1ee      	bne.n	800775e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007780:	7dfb      	ldrb	r3, [r7, #23]
 8007782:	2b01      	cmp	r3, #1
 8007784:	d105      	bne.n	8007792 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007786:	4b52      	ldr	r3, [pc, #328]	; (80078d0 <HAL_RCC_OscConfig+0x4d8>)
 8007788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800778a:	4a51      	ldr	r2, [pc, #324]	; (80078d0 <HAL_RCC_OscConfig+0x4d8>)
 800778c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007790:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	699b      	ldr	r3, [r3, #24]
 8007796:	2b00      	cmp	r3, #0
 8007798:	f000 8092 	beq.w	80078c0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800779c:	4b4c      	ldr	r3, [pc, #304]	; (80078d0 <HAL_RCC_OscConfig+0x4d8>)
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	f003 030c 	and.w	r3, r3, #12
 80077a4:	2b08      	cmp	r3, #8
 80077a6:	d05c      	beq.n	8007862 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	699b      	ldr	r3, [r3, #24]
 80077ac:	2b02      	cmp	r3, #2
 80077ae:	d141      	bne.n	8007834 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80077b0:	4b48      	ldr	r3, [pc, #288]	; (80078d4 <HAL_RCC_OscConfig+0x4dc>)
 80077b2:	2200      	movs	r2, #0
 80077b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077b6:	f7fa fc23 	bl	8002000 <HAL_GetTick>
 80077ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077bc:	e008      	b.n	80077d0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80077be:	f7fa fc1f 	bl	8002000 <HAL_GetTick>
 80077c2:	4602      	mov	r2, r0
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	1ad3      	subs	r3, r2, r3
 80077c8:	2b02      	cmp	r3, #2
 80077ca:	d901      	bls.n	80077d0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80077cc:	2303      	movs	r3, #3
 80077ce:	e078      	b.n	80078c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077d0:	4b3f      	ldr	r3, [pc, #252]	; (80078d0 <HAL_RCC_OscConfig+0x4d8>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d1f0      	bne.n	80077be <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	69da      	ldr	r2, [r3, #28]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6a1b      	ldr	r3, [r3, #32]
 80077e4:	431a      	orrs	r2, r3
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ea:	019b      	lsls	r3, r3, #6
 80077ec:	431a      	orrs	r2, r3
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f2:	085b      	lsrs	r3, r3, #1
 80077f4:	3b01      	subs	r3, #1
 80077f6:	041b      	lsls	r3, r3, #16
 80077f8:	431a      	orrs	r2, r3
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077fe:	061b      	lsls	r3, r3, #24
 8007800:	4933      	ldr	r1, [pc, #204]	; (80078d0 <HAL_RCC_OscConfig+0x4d8>)
 8007802:	4313      	orrs	r3, r2
 8007804:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007806:	4b33      	ldr	r3, [pc, #204]	; (80078d4 <HAL_RCC_OscConfig+0x4dc>)
 8007808:	2201      	movs	r2, #1
 800780a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800780c:	f7fa fbf8 	bl	8002000 <HAL_GetTick>
 8007810:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007812:	e008      	b.n	8007826 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007814:	f7fa fbf4 	bl	8002000 <HAL_GetTick>
 8007818:	4602      	mov	r2, r0
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	1ad3      	subs	r3, r2, r3
 800781e:	2b02      	cmp	r3, #2
 8007820:	d901      	bls.n	8007826 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007822:	2303      	movs	r3, #3
 8007824:	e04d      	b.n	80078c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007826:	4b2a      	ldr	r3, [pc, #168]	; (80078d0 <HAL_RCC_OscConfig+0x4d8>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800782e:	2b00      	cmp	r3, #0
 8007830:	d0f0      	beq.n	8007814 <HAL_RCC_OscConfig+0x41c>
 8007832:	e045      	b.n	80078c0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007834:	4b27      	ldr	r3, [pc, #156]	; (80078d4 <HAL_RCC_OscConfig+0x4dc>)
 8007836:	2200      	movs	r2, #0
 8007838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800783a:	f7fa fbe1 	bl	8002000 <HAL_GetTick>
 800783e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007840:	e008      	b.n	8007854 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007842:	f7fa fbdd 	bl	8002000 <HAL_GetTick>
 8007846:	4602      	mov	r2, r0
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	1ad3      	subs	r3, r2, r3
 800784c:	2b02      	cmp	r3, #2
 800784e:	d901      	bls.n	8007854 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007850:	2303      	movs	r3, #3
 8007852:	e036      	b.n	80078c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007854:	4b1e      	ldr	r3, [pc, #120]	; (80078d0 <HAL_RCC_OscConfig+0x4d8>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800785c:	2b00      	cmp	r3, #0
 800785e:	d1f0      	bne.n	8007842 <HAL_RCC_OscConfig+0x44a>
 8007860:	e02e      	b.n	80078c0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	699b      	ldr	r3, [r3, #24]
 8007866:	2b01      	cmp	r3, #1
 8007868:	d101      	bne.n	800786e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800786a:	2301      	movs	r3, #1
 800786c:	e029      	b.n	80078c2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800786e:	4b18      	ldr	r3, [pc, #96]	; (80078d0 <HAL_RCC_OscConfig+0x4d8>)
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	69db      	ldr	r3, [r3, #28]
 800787e:	429a      	cmp	r2, r3
 8007880:	d11c      	bne.n	80078bc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800788c:	429a      	cmp	r2, r3
 800788e:	d115      	bne.n	80078bc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007890:	68fa      	ldr	r2, [r7, #12]
 8007892:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007896:	4013      	ands	r3, r2
 8007898:	687a      	ldr	r2, [r7, #4]
 800789a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800789c:	4293      	cmp	r3, r2
 800789e:	d10d      	bne.n	80078bc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80078aa:	429a      	cmp	r2, r3
 80078ac:	d106      	bne.n	80078bc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d001      	beq.n	80078c0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	e000      	b.n	80078c2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80078c0:	2300      	movs	r3, #0
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3718      	adds	r7, #24
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	bf00      	nop
 80078cc:	40007000 	.word	0x40007000
 80078d0:	40023800 	.word	0x40023800
 80078d4:	42470060 	.word	0x42470060

080078d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d101      	bne.n	80078ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80078e8:	2301      	movs	r3, #1
 80078ea:	e0cc      	b.n	8007a86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80078ec:	4b68      	ldr	r3, [pc, #416]	; (8007a90 <HAL_RCC_ClockConfig+0x1b8>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f003 030f 	and.w	r3, r3, #15
 80078f4:	683a      	ldr	r2, [r7, #0]
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d90c      	bls.n	8007914 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078fa:	4b65      	ldr	r3, [pc, #404]	; (8007a90 <HAL_RCC_ClockConfig+0x1b8>)
 80078fc:	683a      	ldr	r2, [r7, #0]
 80078fe:	b2d2      	uxtb	r2, r2
 8007900:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007902:	4b63      	ldr	r3, [pc, #396]	; (8007a90 <HAL_RCC_ClockConfig+0x1b8>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f003 030f 	and.w	r3, r3, #15
 800790a:	683a      	ldr	r2, [r7, #0]
 800790c:	429a      	cmp	r2, r3
 800790e:	d001      	beq.n	8007914 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007910:	2301      	movs	r3, #1
 8007912:	e0b8      	b.n	8007a86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f003 0302 	and.w	r3, r3, #2
 800791c:	2b00      	cmp	r3, #0
 800791e:	d020      	beq.n	8007962 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f003 0304 	and.w	r3, r3, #4
 8007928:	2b00      	cmp	r3, #0
 800792a:	d005      	beq.n	8007938 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800792c:	4b59      	ldr	r3, [pc, #356]	; (8007a94 <HAL_RCC_ClockConfig+0x1bc>)
 800792e:	689b      	ldr	r3, [r3, #8]
 8007930:	4a58      	ldr	r2, [pc, #352]	; (8007a94 <HAL_RCC_ClockConfig+0x1bc>)
 8007932:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007936:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f003 0308 	and.w	r3, r3, #8
 8007940:	2b00      	cmp	r3, #0
 8007942:	d005      	beq.n	8007950 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007944:	4b53      	ldr	r3, [pc, #332]	; (8007a94 <HAL_RCC_ClockConfig+0x1bc>)
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	4a52      	ldr	r2, [pc, #328]	; (8007a94 <HAL_RCC_ClockConfig+0x1bc>)
 800794a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800794e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007950:	4b50      	ldr	r3, [pc, #320]	; (8007a94 <HAL_RCC_ClockConfig+0x1bc>)
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	494d      	ldr	r1, [pc, #308]	; (8007a94 <HAL_RCC_ClockConfig+0x1bc>)
 800795e:	4313      	orrs	r3, r2
 8007960:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f003 0301 	and.w	r3, r3, #1
 800796a:	2b00      	cmp	r3, #0
 800796c:	d044      	beq.n	80079f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	2b01      	cmp	r3, #1
 8007974:	d107      	bne.n	8007986 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007976:	4b47      	ldr	r3, [pc, #284]	; (8007a94 <HAL_RCC_ClockConfig+0x1bc>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800797e:	2b00      	cmp	r3, #0
 8007980:	d119      	bne.n	80079b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007982:	2301      	movs	r3, #1
 8007984:	e07f      	b.n	8007a86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	2b02      	cmp	r3, #2
 800798c:	d003      	beq.n	8007996 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007992:	2b03      	cmp	r3, #3
 8007994:	d107      	bne.n	80079a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007996:	4b3f      	ldr	r3, [pc, #252]	; (8007a94 <HAL_RCC_ClockConfig+0x1bc>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d109      	bne.n	80079b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80079a2:	2301      	movs	r3, #1
 80079a4:	e06f      	b.n	8007a86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079a6:	4b3b      	ldr	r3, [pc, #236]	; (8007a94 <HAL_RCC_ClockConfig+0x1bc>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f003 0302 	and.w	r3, r3, #2
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d101      	bne.n	80079b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80079b2:	2301      	movs	r3, #1
 80079b4:	e067      	b.n	8007a86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80079b6:	4b37      	ldr	r3, [pc, #220]	; (8007a94 <HAL_RCC_ClockConfig+0x1bc>)
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	f023 0203 	bic.w	r2, r3, #3
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	4934      	ldr	r1, [pc, #208]	; (8007a94 <HAL_RCC_ClockConfig+0x1bc>)
 80079c4:	4313      	orrs	r3, r2
 80079c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80079c8:	f7fa fb1a 	bl	8002000 <HAL_GetTick>
 80079cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079ce:	e00a      	b.n	80079e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80079d0:	f7fa fb16 	bl	8002000 <HAL_GetTick>
 80079d4:	4602      	mov	r2, r0
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	1ad3      	subs	r3, r2, r3
 80079da:	f241 3288 	movw	r2, #5000	; 0x1388
 80079de:	4293      	cmp	r3, r2
 80079e0:	d901      	bls.n	80079e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80079e2:	2303      	movs	r3, #3
 80079e4:	e04f      	b.n	8007a86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079e6:	4b2b      	ldr	r3, [pc, #172]	; (8007a94 <HAL_RCC_ClockConfig+0x1bc>)
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	f003 020c 	and.w	r2, r3, #12
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	009b      	lsls	r3, r3, #2
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d1eb      	bne.n	80079d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80079f8:	4b25      	ldr	r3, [pc, #148]	; (8007a90 <HAL_RCC_ClockConfig+0x1b8>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f003 030f 	and.w	r3, r3, #15
 8007a00:	683a      	ldr	r2, [r7, #0]
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d20c      	bcs.n	8007a20 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a06:	4b22      	ldr	r3, [pc, #136]	; (8007a90 <HAL_RCC_ClockConfig+0x1b8>)
 8007a08:	683a      	ldr	r2, [r7, #0]
 8007a0a:	b2d2      	uxtb	r2, r2
 8007a0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a0e:	4b20      	ldr	r3, [pc, #128]	; (8007a90 <HAL_RCC_ClockConfig+0x1b8>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f003 030f 	and.w	r3, r3, #15
 8007a16:	683a      	ldr	r2, [r7, #0]
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d001      	beq.n	8007a20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	e032      	b.n	8007a86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f003 0304 	and.w	r3, r3, #4
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d008      	beq.n	8007a3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007a2c:	4b19      	ldr	r3, [pc, #100]	; (8007a94 <HAL_RCC_ClockConfig+0x1bc>)
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	68db      	ldr	r3, [r3, #12]
 8007a38:	4916      	ldr	r1, [pc, #88]	; (8007a94 <HAL_RCC_ClockConfig+0x1bc>)
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f003 0308 	and.w	r3, r3, #8
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d009      	beq.n	8007a5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007a4a:	4b12      	ldr	r3, [pc, #72]	; (8007a94 <HAL_RCC_ClockConfig+0x1bc>)
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	691b      	ldr	r3, [r3, #16]
 8007a56:	00db      	lsls	r3, r3, #3
 8007a58:	490e      	ldr	r1, [pc, #56]	; (8007a94 <HAL_RCC_ClockConfig+0x1bc>)
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007a5e:	f000 f821 	bl	8007aa4 <HAL_RCC_GetSysClockFreq>
 8007a62:	4601      	mov	r1, r0
 8007a64:	4b0b      	ldr	r3, [pc, #44]	; (8007a94 <HAL_RCC_ClockConfig+0x1bc>)
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	091b      	lsrs	r3, r3, #4
 8007a6a:	f003 030f 	and.w	r3, r3, #15
 8007a6e:	4a0a      	ldr	r2, [pc, #40]	; (8007a98 <HAL_RCC_ClockConfig+0x1c0>)
 8007a70:	5cd3      	ldrb	r3, [r2, r3]
 8007a72:	fa21 f303 	lsr.w	r3, r1, r3
 8007a76:	4a09      	ldr	r2, [pc, #36]	; (8007a9c <HAL_RCC_ClockConfig+0x1c4>)
 8007a78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007a7a:	4b09      	ldr	r3, [pc, #36]	; (8007aa0 <HAL_RCC_ClockConfig+0x1c8>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f7fa f930 	bl	8001ce4 <HAL_InitTick>

  return HAL_OK;
 8007a84:	2300      	movs	r3, #0
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3710      	adds	r7, #16
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
 8007a8e:	bf00      	nop
 8007a90:	40023c00 	.word	0x40023c00
 8007a94:	40023800 	.word	0x40023800
 8007a98:	0801759c 	.word	0x0801759c
 8007a9c:	20000000 	.word	0x20000000
 8007aa0:	20000004 	.word	0x20000004

08007aa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007aa6:	b085      	sub	sp, #20
 8007aa8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	607b      	str	r3, [r7, #4]
 8007aae:	2300      	movs	r3, #0
 8007ab0:	60fb      	str	r3, [r7, #12]
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007aba:	4b63      	ldr	r3, [pc, #396]	; (8007c48 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	f003 030c 	and.w	r3, r3, #12
 8007ac2:	2b04      	cmp	r3, #4
 8007ac4:	d007      	beq.n	8007ad6 <HAL_RCC_GetSysClockFreq+0x32>
 8007ac6:	2b08      	cmp	r3, #8
 8007ac8:	d008      	beq.n	8007adc <HAL_RCC_GetSysClockFreq+0x38>
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	f040 80b4 	bne.w	8007c38 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007ad0:	4b5e      	ldr	r3, [pc, #376]	; (8007c4c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007ad2:	60bb      	str	r3, [r7, #8]
       break;
 8007ad4:	e0b3      	b.n	8007c3e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007ad6:	4b5e      	ldr	r3, [pc, #376]	; (8007c50 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8007ad8:	60bb      	str	r3, [r7, #8]
      break;
 8007ada:	e0b0      	b.n	8007c3e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007adc:	4b5a      	ldr	r3, [pc, #360]	; (8007c48 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ae4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007ae6:	4b58      	ldr	r3, [pc, #352]	; (8007c48 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d04a      	beq.n	8007b88 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007af2:	4b55      	ldr	r3, [pc, #340]	; (8007c48 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	099b      	lsrs	r3, r3, #6
 8007af8:	f04f 0400 	mov.w	r4, #0
 8007afc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007b00:	f04f 0200 	mov.w	r2, #0
 8007b04:	ea03 0501 	and.w	r5, r3, r1
 8007b08:	ea04 0602 	and.w	r6, r4, r2
 8007b0c:	4629      	mov	r1, r5
 8007b0e:	4632      	mov	r2, r6
 8007b10:	f04f 0300 	mov.w	r3, #0
 8007b14:	f04f 0400 	mov.w	r4, #0
 8007b18:	0154      	lsls	r4, r2, #5
 8007b1a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007b1e:	014b      	lsls	r3, r1, #5
 8007b20:	4619      	mov	r1, r3
 8007b22:	4622      	mov	r2, r4
 8007b24:	1b49      	subs	r1, r1, r5
 8007b26:	eb62 0206 	sbc.w	r2, r2, r6
 8007b2a:	f04f 0300 	mov.w	r3, #0
 8007b2e:	f04f 0400 	mov.w	r4, #0
 8007b32:	0194      	lsls	r4, r2, #6
 8007b34:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007b38:	018b      	lsls	r3, r1, #6
 8007b3a:	1a5b      	subs	r3, r3, r1
 8007b3c:	eb64 0402 	sbc.w	r4, r4, r2
 8007b40:	f04f 0100 	mov.w	r1, #0
 8007b44:	f04f 0200 	mov.w	r2, #0
 8007b48:	00e2      	lsls	r2, r4, #3
 8007b4a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007b4e:	00d9      	lsls	r1, r3, #3
 8007b50:	460b      	mov	r3, r1
 8007b52:	4614      	mov	r4, r2
 8007b54:	195b      	adds	r3, r3, r5
 8007b56:	eb44 0406 	adc.w	r4, r4, r6
 8007b5a:	f04f 0100 	mov.w	r1, #0
 8007b5e:	f04f 0200 	mov.w	r2, #0
 8007b62:	0262      	lsls	r2, r4, #9
 8007b64:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8007b68:	0259      	lsls	r1, r3, #9
 8007b6a:	460b      	mov	r3, r1
 8007b6c:	4614      	mov	r4, r2
 8007b6e:	4618      	mov	r0, r3
 8007b70:	4621      	mov	r1, r4
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f04f 0400 	mov.w	r4, #0
 8007b78:	461a      	mov	r2, r3
 8007b7a:	4623      	mov	r3, r4
 8007b7c:	f7f8 fb3a 	bl	80001f4 <__aeabi_uldivmod>
 8007b80:	4603      	mov	r3, r0
 8007b82:	460c      	mov	r4, r1
 8007b84:	60fb      	str	r3, [r7, #12]
 8007b86:	e049      	b.n	8007c1c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007b88:	4b2f      	ldr	r3, [pc, #188]	; (8007c48 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	099b      	lsrs	r3, r3, #6
 8007b8e:	f04f 0400 	mov.w	r4, #0
 8007b92:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007b96:	f04f 0200 	mov.w	r2, #0
 8007b9a:	ea03 0501 	and.w	r5, r3, r1
 8007b9e:	ea04 0602 	and.w	r6, r4, r2
 8007ba2:	4629      	mov	r1, r5
 8007ba4:	4632      	mov	r2, r6
 8007ba6:	f04f 0300 	mov.w	r3, #0
 8007baa:	f04f 0400 	mov.w	r4, #0
 8007bae:	0154      	lsls	r4, r2, #5
 8007bb0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007bb4:	014b      	lsls	r3, r1, #5
 8007bb6:	4619      	mov	r1, r3
 8007bb8:	4622      	mov	r2, r4
 8007bba:	1b49      	subs	r1, r1, r5
 8007bbc:	eb62 0206 	sbc.w	r2, r2, r6
 8007bc0:	f04f 0300 	mov.w	r3, #0
 8007bc4:	f04f 0400 	mov.w	r4, #0
 8007bc8:	0194      	lsls	r4, r2, #6
 8007bca:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007bce:	018b      	lsls	r3, r1, #6
 8007bd0:	1a5b      	subs	r3, r3, r1
 8007bd2:	eb64 0402 	sbc.w	r4, r4, r2
 8007bd6:	f04f 0100 	mov.w	r1, #0
 8007bda:	f04f 0200 	mov.w	r2, #0
 8007bde:	00e2      	lsls	r2, r4, #3
 8007be0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007be4:	00d9      	lsls	r1, r3, #3
 8007be6:	460b      	mov	r3, r1
 8007be8:	4614      	mov	r4, r2
 8007bea:	195b      	adds	r3, r3, r5
 8007bec:	eb44 0406 	adc.w	r4, r4, r6
 8007bf0:	f04f 0100 	mov.w	r1, #0
 8007bf4:	f04f 0200 	mov.w	r2, #0
 8007bf8:	02a2      	lsls	r2, r4, #10
 8007bfa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007bfe:	0299      	lsls	r1, r3, #10
 8007c00:	460b      	mov	r3, r1
 8007c02:	4614      	mov	r4, r2
 8007c04:	4618      	mov	r0, r3
 8007c06:	4621      	mov	r1, r4
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f04f 0400 	mov.w	r4, #0
 8007c0e:	461a      	mov	r2, r3
 8007c10:	4623      	mov	r3, r4
 8007c12:	f7f8 faef 	bl	80001f4 <__aeabi_uldivmod>
 8007c16:	4603      	mov	r3, r0
 8007c18:	460c      	mov	r4, r1
 8007c1a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007c1c:	4b0a      	ldr	r3, [pc, #40]	; (8007c48 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	0c1b      	lsrs	r3, r3, #16
 8007c22:	f003 0303 	and.w	r3, r3, #3
 8007c26:	3301      	adds	r3, #1
 8007c28:	005b      	lsls	r3, r3, #1
 8007c2a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007c2c:	68fa      	ldr	r2, [r7, #12]
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c34:	60bb      	str	r3, [r7, #8]
      break;
 8007c36:	e002      	b.n	8007c3e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007c38:	4b04      	ldr	r3, [pc, #16]	; (8007c4c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007c3a:	60bb      	str	r3, [r7, #8]
      break;
 8007c3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007c3e:	68bb      	ldr	r3, [r7, #8]
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3714      	adds	r7, #20
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c48:	40023800 	.word	0x40023800
 8007c4c:	00f42400 	.word	0x00f42400
 8007c50:	007a1200 	.word	0x007a1200

08007c54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007c54:	b480      	push	{r7}
 8007c56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007c58:	4b03      	ldr	r3, [pc, #12]	; (8007c68 <HAL_RCC_GetHCLKFreq+0x14>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr
 8007c66:	bf00      	nop
 8007c68:	20000000 	.word	0x20000000

08007c6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007c70:	f7ff fff0 	bl	8007c54 <HAL_RCC_GetHCLKFreq>
 8007c74:	4601      	mov	r1, r0
 8007c76:	4b05      	ldr	r3, [pc, #20]	; (8007c8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	0a9b      	lsrs	r3, r3, #10
 8007c7c:	f003 0307 	and.w	r3, r3, #7
 8007c80:	4a03      	ldr	r2, [pc, #12]	; (8007c90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007c82:	5cd3      	ldrb	r3, [r2, r3]
 8007c84:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	bd80      	pop	{r7, pc}
 8007c8c:	40023800 	.word	0x40023800
 8007c90:	080175ac 	.word	0x080175ac

08007c94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007c98:	f7ff ffdc 	bl	8007c54 <HAL_RCC_GetHCLKFreq>
 8007c9c:	4601      	mov	r1, r0
 8007c9e:	4b05      	ldr	r3, [pc, #20]	; (8007cb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007ca0:	689b      	ldr	r3, [r3, #8]
 8007ca2:	0b5b      	lsrs	r3, r3, #13
 8007ca4:	f003 0307 	and.w	r3, r3, #7
 8007ca8:	4a03      	ldr	r2, [pc, #12]	; (8007cb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007caa:	5cd3      	ldrb	r3, [r2, r3]
 8007cac:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	bd80      	pop	{r7, pc}
 8007cb4:	40023800 	.word	0x40023800
 8007cb8:	080175ac 	.word	0x080175ac

08007cbc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b083      	sub	sp, #12
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	220f      	movs	r2, #15
 8007cca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007ccc:	4b12      	ldr	r3, [pc, #72]	; (8007d18 <HAL_RCC_GetClockConfig+0x5c>)
 8007cce:	689b      	ldr	r3, [r3, #8]
 8007cd0:	f003 0203 	and.w	r2, r3, #3
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007cd8:	4b0f      	ldr	r3, [pc, #60]	; (8007d18 <HAL_RCC_GetClockConfig+0x5c>)
 8007cda:	689b      	ldr	r3, [r3, #8]
 8007cdc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007ce4:	4b0c      	ldr	r3, [pc, #48]	; (8007d18 <HAL_RCC_GetClockConfig+0x5c>)
 8007ce6:	689b      	ldr	r3, [r3, #8]
 8007ce8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007cf0:	4b09      	ldr	r3, [pc, #36]	; (8007d18 <HAL_RCC_GetClockConfig+0x5c>)
 8007cf2:	689b      	ldr	r3, [r3, #8]
 8007cf4:	08db      	lsrs	r3, r3, #3
 8007cf6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007cfe:	4b07      	ldr	r3, [pc, #28]	; (8007d1c <HAL_RCC_GetClockConfig+0x60>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f003 020f 	and.w	r2, r3, #15
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	601a      	str	r2, [r3, #0]
}
 8007d0a:	bf00      	nop
 8007d0c:	370c      	adds	r7, #12
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d14:	4770      	bx	lr
 8007d16:	bf00      	nop
 8007d18:	40023800 	.word	0x40023800
 8007d1c:	40023c00 	.word	0x40023c00

08007d20 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b086      	sub	sp, #24
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f003 0301 	and.w	r3, r3, #1
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d105      	bne.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d035      	beq.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007d48:	4b62      	ldr	r3, [pc, #392]	; (8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007d4e:	f7fa f957 	bl	8002000 <HAL_GetTick>
 8007d52:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007d54:	e008      	b.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007d56:	f7fa f953 	bl	8002000 <HAL_GetTick>
 8007d5a:	4602      	mov	r2, r0
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	1ad3      	subs	r3, r2, r3
 8007d60:	2b02      	cmp	r3, #2
 8007d62:	d901      	bls.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007d64:	2303      	movs	r3, #3
 8007d66:	e0b0      	b.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007d68:	4b5b      	ldr	r3, [pc, #364]	; (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d1f0      	bne.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	019a      	lsls	r2, r3, #6
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	071b      	lsls	r3, r3, #28
 8007d80:	4955      	ldr	r1, [pc, #340]	; (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007d82:	4313      	orrs	r3, r2
 8007d84:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007d88:	4b52      	ldr	r3, [pc, #328]	; (8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007d8e:	f7fa f937 	bl	8002000 <HAL_GetTick>
 8007d92:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007d94:	e008      	b.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007d96:	f7fa f933 	bl	8002000 <HAL_GetTick>
 8007d9a:	4602      	mov	r2, r0
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	1ad3      	subs	r3, r2, r3
 8007da0:	2b02      	cmp	r3, #2
 8007da2:	d901      	bls.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007da4:	2303      	movs	r3, #3
 8007da6:	e090      	b.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007da8:	4b4b      	ldr	r3, [pc, #300]	; (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d0f0      	beq.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f003 0302 	and.w	r3, r3, #2
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	f000 8083 	beq.w	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	60fb      	str	r3, [r7, #12]
 8007dc6:	4b44      	ldr	r3, [pc, #272]	; (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dca:	4a43      	ldr	r2, [pc, #268]	; (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8007dd2:	4b41      	ldr	r3, [pc, #260]	; (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dda:	60fb      	str	r3, [r7, #12]
 8007ddc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007dde:	4b3f      	ldr	r3, [pc, #252]	; (8007edc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a3e      	ldr	r2, [pc, #248]	; (8007edc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007de8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007dea:	f7fa f909 	bl	8002000 <HAL_GetTick>
 8007dee:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007df0:	e008      	b.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007df2:	f7fa f905 	bl	8002000 <HAL_GetTick>
 8007df6:	4602      	mov	r2, r0
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	1ad3      	subs	r3, r2, r3
 8007dfc:	2b02      	cmp	r3, #2
 8007dfe:	d901      	bls.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007e00:	2303      	movs	r3, #3
 8007e02:	e062      	b.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007e04:	4b35      	ldr	r3, [pc, #212]	; (8007edc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d0f0      	beq.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007e10:	4b31      	ldr	r3, [pc, #196]	; (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e18:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d02f      	beq.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	68db      	ldr	r3, [r3, #12]
 8007e24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e28:	693a      	ldr	r2, [r7, #16]
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d028      	beq.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007e2e:	4b2a      	ldr	r3, [pc, #168]	; (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e36:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007e38:	4b29      	ldr	r3, [pc, #164]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007e3e:	4b28      	ldr	r3, [pc, #160]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007e40:	2200      	movs	r2, #0
 8007e42:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007e44:	4a24      	ldr	r2, [pc, #144]	; (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007e4a:	4b23      	ldr	r3, [pc, #140]	; (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e4e:	f003 0301 	and.w	r3, r3, #1
 8007e52:	2b01      	cmp	r3, #1
 8007e54:	d114      	bne.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007e56:	f7fa f8d3 	bl	8002000 <HAL_GetTick>
 8007e5a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e5c:	e00a      	b.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007e5e:	f7fa f8cf 	bl	8002000 <HAL_GetTick>
 8007e62:	4602      	mov	r2, r0
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	1ad3      	subs	r3, r2, r3
 8007e68:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d901      	bls.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007e70:	2303      	movs	r3, #3
 8007e72:	e02a      	b.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e74:	4b18      	ldr	r3, [pc, #96]	; (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e78:	f003 0302 	and.w	r3, r3, #2
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d0ee      	beq.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	68db      	ldr	r3, [r3, #12]
 8007e84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e8c:	d10d      	bne.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007e8e:	4b12      	ldr	r3, [pc, #72]	; (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	68db      	ldr	r3, [r3, #12]
 8007e9a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007e9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ea2:	490d      	ldr	r1, [pc, #52]	; (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	608b      	str	r3, [r1, #8]
 8007ea8:	e005      	b.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007eaa:	4b0b      	ldr	r3, [pc, #44]	; (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007eac:	689b      	ldr	r3, [r3, #8]
 8007eae:	4a0a      	ldr	r2, [pc, #40]	; (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007eb0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007eb4:	6093      	str	r3, [r2, #8]
 8007eb6:	4b08      	ldr	r3, [pc, #32]	; (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007eb8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	68db      	ldr	r3, [r3, #12]
 8007ebe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ec2:	4905      	ldr	r1, [pc, #20]	; (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007ec8:	2300      	movs	r3, #0
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3718      	adds	r7, #24
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
 8007ed2:	bf00      	nop
 8007ed4:	42470068 	.word	0x42470068
 8007ed8:	40023800 	.word	0x40023800
 8007edc:	40007000 	.word	0x40007000
 8007ee0:	42470e40 	.word	0x42470e40

08007ee4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b082      	sub	sp, #8
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d101      	bne.n	8007ef6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	e083      	b.n	8007ffe <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	7f5b      	ldrb	r3, [r3, #29]
 8007efa:	b2db      	uxtb	r3, r3
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d105      	bne.n	8007f0c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2200      	movs	r2, #0
 8007f04:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f7f9 fc6c 	bl	80017e4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2202      	movs	r2, #2
 8007f10:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	22ca      	movs	r2, #202	; 0xca
 8007f18:	625a      	str	r2, [r3, #36]	; 0x24
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	2253      	movs	r2, #83	; 0x53
 8007f20:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f000 f897 	bl	8008056 <RTC_EnterInitMode>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d008      	beq.n	8007f40 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	22ff      	movs	r2, #255	; 0xff
 8007f34:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2204      	movs	r2, #4
 8007f3a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	e05e      	b.n	8007ffe <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	689b      	ldr	r3, [r3, #8]
 8007f46:	687a      	ldr	r2, [r7, #4]
 8007f48:	6812      	ldr	r2, [r2, #0]
 8007f4a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007f4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f52:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	6899      	ldr	r1, [r3, #8]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	685a      	ldr	r2, [r3, #4]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	691b      	ldr	r3, [r3, #16]
 8007f62:	431a      	orrs	r2, r3
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	695b      	ldr	r3, [r3, #20]
 8007f68:	431a      	orrs	r2, r3
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	430a      	orrs	r2, r1
 8007f70:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	687a      	ldr	r2, [r7, #4]
 8007f78:	68d2      	ldr	r2, [r2, #12]
 8007f7a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	6919      	ldr	r1, [r3, #16]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	689b      	ldr	r3, [r3, #8]
 8007f86:	041a      	lsls	r2, r3, #16
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	430a      	orrs	r2, r1
 8007f8e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	68da      	ldr	r2, [r3, #12]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f9e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	689b      	ldr	r3, [r3, #8]
 8007fa6:	f003 0320 	and.w	r3, r3, #32
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d10e      	bne.n	8007fcc <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f000 f829 	bl	8008006 <HAL_RTC_WaitForSynchro>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d008      	beq.n	8007fcc <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	22ff      	movs	r2, #255	; 0xff
 8007fc0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2204      	movs	r2, #4
 8007fc6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8007fc8:	2301      	movs	r3, #1
 8007fca:	e018      	b.n	8007ffe <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007fda:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	699a      	ldr	r2, [r3, #24]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	430a      	orrs	r2, r1
 8007fec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	22ff      	movs	r2, #255	; 0xff
 8007ff4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007ffc:	2300      	movs	r3, #0
  }
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3708      	adds	r7, #8
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}

08008006 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8008006:	b580      	push	{r7, lr}
 8008008:	b084      	sub	sp, #16
 800800a:	af00      	add	r7, sp, #0
 800800c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800800e:	2300      	movs	r3, #0
 8008010:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	68da      	ldr	r2, [r3, #12]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008020:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008022:	f7f9 ffed 	bl	8002000 <HAL_GetTick>
 8008026:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008028:	e009      	b.n	800803e <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800802a:	f7f9 ffe9 	bl	8002000 <HAL_GetTick>
 800802e:	4602      	mov	r2, r0
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	1ad3      	subs	r3, r2, r3
 8008034:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008038:	d901      	bls.n	800803e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800803a:	2303      	movs	r3, #3
 800803c:	e007      	b.n	800804e <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	68db      	ldr	r3, [r3, #12]
 8008044:	f003 0320 	and.w	r3, r3, #32
 8008048:	2b00      	cmp	r3, #0
 800804a:	d0ee      	beq.n	800802a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800804c:	2300      	movs	r3, #0
}
 800804e:	4618      	mov	r0, r3
 8008050:	3710      	adds	r7, #16
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}

08008056 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008056:	b580      	push	{r7, lr}
 8008058:	b084      	sub	sp, #16
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800805e:	2300      	movs	r3, #0
 8008060:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	68db      	ldr	r3, [r3, #12]
 8008068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800806c:	2b00      	cmp	r3, #0
 800806e:	d119      	bne.n	80080a4 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008078:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800807a:	f7f9 ffc1 	bl	8002000 <HAL_GetTick>
 800807e:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008080:	e009      	b.n	8008096 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008082:	f7f9 ffbd 	bl	8002000 <HAL_GetTick>
 8008086:	4602      	mov	r2, r0
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	1ad3      	subs	r3, r2, r3
 800808c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008090:	d901      	bls.n	8008096 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8008092:	2303      	movs	r3, #3
 8008094:	e007      	b.n	80080a6 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	68db      	ldr	r3, [r3, #12]
 800809c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d0ee      	beq.n	8008082 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80080a4:	2300      	movs	r3, #0
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3710      	adds	r7, #16
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}

080080ae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80080ae:	b580      	push	{r7, lr}
 80080b0:	b082      	sub	sp, #8
 80080b2:	af00      	add	r7, sp, #0
 80080b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d101      	bne.n	80080c0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80080bc:	2301      	movs	r3, #1
 80080be:	e01d      	b.n	80080fc <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d106      	bne.n	80080da <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f7f9 fb9b 	bl	8001810 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2202      	movs	r2, #2
 80080de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	3304      	adds	r3, #4
 80080ea:	4619      	mov	r1, r3
 80080ec:	4610      	mov	r0, r2
 80080ee:	f000 fca9 	bl	8008a44 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2201      	movs	r2, #1
 80080f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80080fa:	2300      	movs	r3, #0
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3708      	adds	r7, #8
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}

08008104 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008104:	b480      	push	{r7}
 8008106:	b085      	sub	sp, #20
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	68da      	ldr	r2, [r3, #12]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f042 0201 	orr.w	r2, r2, #1
 800811a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	f003 0307 	and.w	r3, r3, #7
 8008126:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2b06      	cmp	r3, #6
 800812c:	d007      	beq.n	800813e <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	681a      	ldr	r2, [r3, #0]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f042 0201 	orr.w	r2, r2, #1
 800813c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800813e:	2300      	movs	r3, #0
}
 8008140:	4618      	mov	r0, r3
 8008142:	3714      	adds	r7, #20
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr

0800814c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b082      	sub	sp, #8
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d101      	bne.n	800815e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800815a:	2301      	movs	r3, #1
 800815c:	e01d      	b.n	800819a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008164:	b2db      	uxtb	r3, r3
 8008166:	2b00      	cmp	r3, #0
 8008168:	d106      	bne.n	8008178 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2200      	movs	r2, #0
 800816e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f7f9 fbfc 	bl	8001970 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2202      	movs	r2, #2
 800817c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681a      	ldr	r2, [r3, #0]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	3304      	adds	r3, #4
 8008188:	4619      	mov	r1, r3
 800818a:	4610      	mov	r0, r2
 800818c:	f000 fc5a 	bl	8008a44 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2201      	movs	r2, #1
 8008194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008198:	2300      	movs	r3, #0
}
 800819a:	4618      	mov	r0, r3
 800819c:	3708      	adds	r7, #8
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}
	...

080081a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b084      	sub	sp, #16
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	2201      	movs	r2, #1
 80081b4:	6839      	ldr	r1, [r7, #0]
 80081b6:	4618      	mov	r0, r3
 80081b8:	f000 ffb4 	bl	8009124 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a15      	ldr	r2, [pc, #84]	; (8008218 <HAL_TIM_PWM_Start+0x74>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d004      	beq.n	80081d0 <HAL_TIM_PWM_Start+0x2c>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a14      	ldr	r2, [pc, #80]	; (800821c <HAL_TIM_PWM_Start+0x78>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d101      	bne.n	80081d4 <HAL_TIM_PWM_Start+0x30>
 80081d0:	2301      	movs	r3, #1
 80081d2:	e000      	b.n	80081d6 <HAL_TIM_PWM_Start+0x32>
 80081d4:	2300      	movs	r3, #0
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d007      	beq.n	80081ea <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80081e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	f003 0307 	and.w	r3, r3, #7
 80081f4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2b06      	cmp	r3, #6
 80081fa:	d007      	beq.n	800820c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	681a      	ldr	r2, [r3, #0]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f042 0201 	orr.w	r2, r2, #1
 800820a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800820c:	2300      	movs	r3, #0
}
 800820e:	4618      	mov	r0, r3
 8008210:	3710      	adds	r7, #16
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}
 8008216:	bf00      	nop
 8008218:	40010000 	.word	0x40010000
 800821c:	40010400 	.word	0x40010400

08008220 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b082      	sub	sp, #8
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	2200      	movs	r2, #0
 8008230:	6839      	ldr	r1, [r7, #0]
 8008232:	4618      	mov	r0, r3
 8008234:	f000 ff76 	bl	8009124 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a22      	ldr	r2, [pc, #136]	; (80082c8 <HAL_TIM_PWM_Stop+0xa8>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d004      	beq.n	800824c <HAL_TIM_PWM_Stop+0x2c>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a21      	ldr	r2, [pc, #132]	; (80082cc <HAL_TIM_PWM_Stop+0xac>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d101      	bne.n	8008250 <HAL_TIM_PWM_Stop+0x30>
 800824c:	2301      	movs	r3, #1
 800824e:	e000      	b.n	8008252 <HAL_TIM_PWM_Stop+0x32>
 8008250:	2300      	movs	r3, #0
 8008252:	2b00      	cmp	r3, #0
 8008254:	d017      	beq.n	8008286 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	6a1a      	ldr	r2, [r3, #32]
 800825c:	f241 1311 	movw	r3, #4369	; 0x1111
 8008260:	4013      	ands	r3, r2
 8008262:	2b00      	cmp	r3, #0
 8008264:	d10f      	bne.n	8008286 <HAL_TIM_PWM_Stop+0x66>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	6a1a      	ldr	r2, [r3, #32]
 800826c:	f240 4344 	movw	r3, #1092	; 0x444
 8008270:	4013      	ands	r3, r2
 8008272:	2b00      	cmp	r3, #0
 8008274:	d107      	bne.n	8008286 <HAL_TIM_PWM_Stop+0x66>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008284:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	6a1a      	ldr	r2, [r3, #32]
 800828c:	f241 1311 	movw	r3, #4369	; 0x1111
 8008290:	4013      	ands	r3, r2
 8008292:	2b00      	cmp	r3, #0
 8008294:	d10f      	bne.n	80082b6 <HAL_TIM_PWM_Stop+0x96>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	6a1a      	ldr	r2, [r3, #32]
 800829c:	f240 4344 	movw	r3, #1092	; 0x444
 80082a0:	4013      	ands	r3, r2
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d107      	bne.n	80082b6 <HAL_TIM_PWM_Stop+0x96>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	681a      	ldr	r2, [r3, #0]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f022 0201 	bic.w	r2, r2, #1
 80082b4:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2201      	movs	r2, #1
 80082ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80082be:	2300      	movs	r3, #0
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3708      	adds	r7, #8
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}
 80082c8:	40010000 	.word	0x40010000
 80082cc:	40010400 	.word	0x40010400

080082d0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b086      	sub	sp, #24
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d101      	bne.n	80082e4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80082e0:	2301      	movs	r3, #1
 80082e2:	e083      	b.n	80083ec <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082ea:	b2db      	uxtb	r3, r3
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d106      	bne.n	80082fe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2200      	movs	r2, #0
 80082f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f7f9 faf1 	bl	80018e0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2202      	movs	r2, #2
 8008302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	689b      	ldr	r3, [r3, #8]
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	6812      	ldr	r2, [r2, #0]
 8008310:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008314:	f023 0307 	bic.w	r3, r3, #7
 8008318:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681a      	ldr	r2, [r3, #0]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	3304      	adds	r3, #4
 8008322:	4619      	mov	r1, r3
 8008324:	4610      	mov	r0, r2
 8008326:	f000 fb8d 	bl	8008a44 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	689b      	ldr	r3, [r3, #8]
 8008330:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	699b      	ldr	r3, [r3, #24]
 8008338:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	6a1b      	ldr	r3, [r3, #32]
 8008340:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	697a      	ldr	r2, [r7, #20]
 8008348:	4313      	orrs	r3, r2
 800834a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008352:	f023 0303 	bic.w	r3, r3, #3
 8008356:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	689a      	ldr	r2, [r3, #8]
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	699b      	ldr	r3, [r3, #24]
 8008360:	021b      	lsls	r3, r3, #8
 8008362:	4313      	orrs	r3, r2
 8008364:	693a      	ldr	r2, [r7, #16]
 8008366:	4313      	orrs	r3, r2
 8008368:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008370:	f023 030c 	bic.w	r3, r3, #12
 8008374:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800837c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008380:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	68da      	ldr	r2, [r3, #12]
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	69db      	ldr	r3, [r3, #28]
 800838a:	021b      	lsls	r3, r3, #8
 800838c:	4313      	orrs	r3, r2
 800838e:	693a      	ldr	r2, [r7, #16]
 8008390:	4313      	orrs	r3, r2
 8008392:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	691b      	ldr	r3, [r3, #16]
 8008398:	011a      	lsls	r2, r3, #4
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	6a1b      	ldr	r3, [r3, #32]
 800839e:	031b      	lsls	r3, r3, #12
 80083a0:	4313      	orrs	r3, r2
 80083a2:	693a      	ldr	r2, [r7, #16]
 80083a4:	4313      	orrs	r3, r2
 80083a6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80083ae:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80083b6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	685a      	ldr	r2, [r3, #4]
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	695b      	ldr	r3, [r3, #20]
 80083c0:	011b      	lsls	r3, r3, #4
 80083c2:	4313      	orrs	r3, r2
 80083c4:	68fa      	ldr	r2, [r7, #12]
 80083c6:	4313      	orrs	r3, r2
 80083c8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	697a      	ldr	r2, [r7, #20]
 80083d0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	693a      	ldr	r2, [r7, #16]
 80083d8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	68fa      	ldr	r2, [r7, #12]
 80083e0:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2201      	movs	r2, #1
 80083e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80083ea:	2300      	movs	r3, #0
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3718      	adds	r7, #24
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}

080083f4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b082      	sub	sp, #8
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d002      	beq.n	800840a <HAL_TIM_Encoder_Start+0x16>
 8008404:	2b04      	cmp	r3, #4
 8008406:	d008      	beq.n	800841a <HAL_TIM_Encoder_Start+0x26>
 8008408:	e00f      	b.n	800842a <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	2201      	movs	r2, #1
 8008410:	2100      	movs	r1, #0
 8008412:	4618      	mov	r0, r3
 8008414:	f000 fe86 	bl	8009124 <TIM_CCxChannelCmd>
      break;
 8008418:	e016      	b.n	8008448 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	2201      	movs	r2, #1
 8008420:	2104      	movs	r1, #4
 8008422:	4618      	mov	r0, r3
 8008424:	f000 fe7e 	bl	8009124 <TIM_CCxChannelCmd>
      break;
 8008428:	e00e      	b.n	8008448 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	2201      	movs	r2, #1
 8008430:	2100      	movs	r1, #0
 8008432:	4618      	mov	r0, r3
 8008434:	f000 fe76 	bl	8009124 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	2201      	movs	r2, #1
 800843e:	2104      	movs	r1, #4
 8008440:	4618      	mov	r0, r3
 8008442:	f000 fe6f 	bl	8009124 <TIM_CCxChannelCmd>
      break;
 8008446:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	681a      	ldr	r2, [r3, #0]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f042 0201 	orr.w	r2, r2, #1
 8008456:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008458:	2300      	movs	r3, #0
}
 800845a:	4618      	mov	r0, r3
 800845c:	3708      	adds	r7, #8
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}

08008462 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008462:	b580      	push	{r7, lr}
 8008464:	b082      	sub	sp, #8
 8008466:	af00      	add	r7, sp, #0
 8008468:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	691b      	ldr	r3, [r3, #16]
 8008470:	f003 0302 	and.w	r3, r3, #2
 8008474:	2b02      	cmp	r3, #2
 8008476:	d122      	bne.n	80084be <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	68db      	ldr	r3, [r3, #12]
 800847e:	f003 0302 	and.w	r3, r3, #2
 8008482:	2b02      	cmp	r3, #2
 8008484:	d11b      	bne.n	80084be <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f06f 0202 	mvn.w	r2, #2
 800848e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2201      	movs	r2, #1
 8008494:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	699b      	ldr	r3, [r3, #24]
 800849c:	f003 0303 	and.w	r3, r3, #3
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d003      	beq.n	80084ac <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f000 faae 	bl	8008a06 <HAL_TIM_IC_CaptureCallback>
 80084aa:	e005      	b.n	80084b8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 faa0 	bl	80089f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f000 fab1 	bl	8008a1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2200      	movs	r2, #0
 80084bc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	691b      	ldr	r3, [r3, #16]
 80084c4:	f003 0304 	and.w	r3, r3, #4
 80084c8:	2b04      	cmp	r3, #4
 80084ca:	d122      	bne.n	8008512 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	68db      	ldr	r3, [r3, #12]
 80084d2:	f003 0304 	and.w	r3, r3, #4
 80084d6:	2b04      	cmp	r3, #4
 80084d8:	d11b      	bne.n	8008512 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f06f 0204 	mvn.w	r2, #4
 80084e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2202      	movs	r2, #2
 80084e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	699b      	ldr	r3, [r3, #24]
 80084f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d003      	beq.n	8008500 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f000 fa84 	bl	8008a06 <HAL_TIM_IC_CaptureCallback>
 80084fe:	e005      	b.n	800850c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f000 fa76 	bl	80089f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 fa87 	bl	8008a1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2200      	movs	r2, #0
 8008510:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	691b      	ldr	r3, [r3, #16]
 8008518:	f003 0308 	and.w	r3, r3, #8
 800851c:	2b08      	cmp	r3, #8
 800851e:	d122      	bne.n	8008566 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	68db      	ldr	r3, [r3, #12]
 8008526:	f003 0308 	and.w	r3, r3, #8
 800852a:	2b08      	cmp	r3, #8
 800852c:	d11b      	bne.n	8008566 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f06f 0208 	mvn.w	r2, #8
 8008536:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2204      	movs	r2, #4
 800853c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	69db      	ldr	r3, [r3, #28]
 8008544:	f003 0303 	and.w	r3, r3, #3
 8008548:	2b00      	cmp	r3, #0
 800854a:	d003      	beq.n	8008554 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 fa5a 	bl	8008a06 <HAL_TIM_IC_CaptureCallback>
 8008552:	e005      	b.n	8008560 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f000 fa4c 	bl	80089f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 fa5d 	bl	8008a1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2200      	movs	r2, #0
 8008564:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	691b      	ldr	r3, [r3, #16]
 800856c:	f003 0310 	and.w	r3, r3, #16
 8008570:	2b10      	cmp	r3, #16
 8008572:	d122      	bne.n	80085ba <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	68db      	ldr	r3, [r3, #12]
 800857a:	f003 0310 	and.w	r3, r3, #16
 800857e:	2b10      	cmp	r3, #16
 8008580:	d11b      	bne.n	80085ba <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f06f 0210 	mvn.w	r2, #16
 800858a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2208      	movs	r2, #8
 8008590:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	69db      	ldr	r3, [r3, #28]
 8008598:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800859c:	2b00      	cmp	r3, #0
 800859e:	d003      	beq.n	80085a8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f000 fa30 	bl	8008a06 <HAL_TIM_IC_CaptureCallback>
 80085a6:	e005      	b.n	80085b4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f000 fa22 	bl	80089f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 fa33 	bl	8008a1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2200      	movs	r2, #0
 80085b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	691b      	ldr	r3, [r3, #16]
 80085c0:	f003 0301 	and.w	r3, r3, #1
 80085c4:	2b01      	cmp	r3, #1
 80085c6:	d10e      	bne.n	80085e6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	68db      	ldr	r3, [r3, #12]
 80085ce:	f003 0301 	and.w	r3, r3, #1
 80085d2:	2b01      	cmp	r3, #1
 80085d4:	d107      	bne.n	80085e6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f06f 0201 	mvn.w	r2, #1
 80085de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f7f8 ff1f 	bl	8001424 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	691b      	ldr	r3, [r3, #16]
 80085ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085f0:	2b80      	cmp	r3, #128	; 0x80
 80085f2:	d10e      	bne.n	8008612 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	68db      	ldr	r3, [r3, #12]
 80085fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085fe:	2b80      	cmp	r3, #128	; 0x80
 8008600:	d107      	bne.n	8008612 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800860a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f000 fe87 	bl	8009320 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	691b      	ldr	r3, [r3, #16]
 8008618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800861c:	2b40      	cmp	r3, #64	; 0x40
 800861e:	d10e      	bne.n	800863e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	68db      	ldr	r3, [r3, #12]
 8008626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800862a:	2b40      	cmp	r3, #64	; 0x40
 800862c:	d107      	bne.n	800863e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008636:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f000 f9f8 	bl	8008a2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	691b      	ldr	r3, [r3, #16]
 8008644:	f003 0320 	and.w	r3, r3, #32
 8008648:	2b20      	cmp	r3, #32
 800864a:	d10e      	bne.n	800866a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	68db      	ldr	r3, [r3, #12]
 8008652:	f003 0320 	and.w	r3, r3, #32
 8008656:	2b20      	cmp	r3, #32
 8008658:	d107      	bne.n	800866a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f06f 0220 	mvn.w	r2, #32
 8008662:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f000 fe51 	bl	800930c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800866a:	bf00      	nop
 800866c:	3708      	adds	r7, #8
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}
	...

08008674 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b084      	sub	sp, #16
 8008678:	af00      	add	r7, sp, #0
 800867a:	60f8      	str	r0, [r7, #12]
 800867c:	60b9      	str	r1, [r7, #8]
 800867e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008686:	2b01      	cmp	r3, #1
 8008688:	d101      	bne.n	800868e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800868a:	2302      	movs	r3, #2
 800868c:	e0b4      	b.n	80087f8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	2201      	movs	r2, #1
 8008692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2202      	movs	r2, #2
 800869a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2b0c      	cmp	r3, #12
 80086a2:	f200 809f 	bhi.w	80087e4 <HAL_TIM_PWM_ConfigChannel+0x170>
 80086a6:	a201      	add	r2, pc, #4	; (adr r2, 80086ac <HAL_TIM_PWM_ConfigChannel+0x38>)
 80086a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ac:	080086e1 	.word	0x080086e1
 80086b0:	080087e5 	.word	0x080087e5
 80086b4:	080087e5 	.word	0x080087e5
 80086b8:	080087e5 	.word	0x080087e5
 80086bc:	08008721 	.word	0x08008721
 80086c0:	080087e5 	.word	0x080087e5
 80086c4:	080087e5 	.word	0x080087e5
 80086c8:	080087e5 	.word	0x080087e5
 80086cc:	08008763 	.word	0x08008763
 80086d0:	080087e5 	.word	0x080087e5
 80086d4:	080087e5 	.word	0x080087e5
 80086d8:	080087e5 	.word	0x080087e5
 80086dc:	080087a3 	.word	0x080087a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	68b9      	ldr	r1, [r7, #8]
 80086e6:	4618      	mov	r0, r3
 80086e8:	f000 fa4c 	bl	8008b84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	699a      	ldr	r2, [r3, #24]
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f042 0208 	orr.w	r2, r2, #8
 80086fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	699a      	ldr	r2, [r3, #24]
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f022 0204 	bic.w	r2, r2, #4
 800870a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	6999      	ldr	r1, [r3, #24]
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	691a      	ldr	r2, [r3, #16]
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	430a      	orrs	r2, r1
 800871c:	619a      	str	r2, [r3, #24]
      break;
 800871e:	e062      	b.n	80087e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	68b9      	ldr	r1, [r7, #8]
 8008726:	4618      	mov	r0, r3
 8008728:	f000 fa9c 	bl	8008c64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	699a      	ldr	r2, [r3, #24]
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800873a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	699a      	ldr	r2, [r3, #24]
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800874a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	6999      	ldr	r1, [r3, #24]
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	691b      	ldr	r3, [r3, #16]
 8008756:	021a      	lsls	r2, r3, #8
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	430a      	orrs	r2, r1
 800875e:	619a      	str	r2, [r3, #24]
      break;
 8008760:	e041      	b.n	80087e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	68b9      	ldr	r1, [r7, #8]
 8008768:	4618      	mov	r0, r3
 800876a:	f000 faf1 	bl	8008d50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	69da      	ldr	r2, [r3, #28]
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f042 0208 	orr.w	r2, r2, #8
 800877c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	69da      	ldr	r2, [r3, #28]
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f022 0204 	bic.w	r2, r2, #4
 800878c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	69d9      	ldr	r1, [r3, #28]
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	691a      	ldr	r2, [r3, #16]
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	430a      	orrs	r2, r1
 800879e:	61da      	str	r2, [r3, #28]
      break;
 80087a0:	e021      	b.n	80087e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	68b9      	ldr	r1, [r7, #8]
 80087a8:	4618      	mov	r0, r3
 80087aa:	f000 fb45 	bl	8008e38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	69da      	ldr	r2, [r3, #28]
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80087bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	69da      	ldr	r2, [r3, #28]
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	69d9      	ldr	r1, [r3, #28]
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	691b      	ldr	r3, [r3, #16]
 80087d8:	021a      	lsls	r2, r3, #8
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	430a      	orrs	r2, r1
 80087e0:	61da      	str	r2, [r3, #28]
      break;
 80087e2:	e000      	b.n	80087e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80087e4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	2201      	movs	r2, #1
 80087ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	2200      	movs	r2, #0
 80087f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80087f6:	2300      	movs	r3, #0
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3710      	adds	r7, #16
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}

08008800 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b084      	sub	sp, #16
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008810:	2b01      	cmp	r3, #1
 8008812:	d101      	bne.n	8008818 <HAL_TIM_ConfigClockSource+0x18>
 8008814:	2302      	movs	r3, #2
 8008816:	e0a6      	b.n	8008966 <HAL_TIM_ConfigClockSource+0x166>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2201      	movs	r2, #1
 800881c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2202      	movs	r2, #2
 8008824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	689b      	ldr	r3, [r3, #8]
 800882e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008836:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800883e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	68fa      	ldr	r2, [r7, #12]
 8008846:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	2b40      	cmp	r3, #64	; 0x40
 800884e:	d067      	beq.n	8008920 <HAL_TIM_ConfigClockSource+0x120>
 8008850:	2b40      	cmp	r3, #64	; 0x40
 8008852:	d80b      	bhi.n	800886c <HAL_TIM_ConfigClockSource+0x6c>
 8008854:	2b10      	cmp	r3, #16
 8008856:	d073      	beq.n	8008940 <HAL_TIM_ConfigClockSource+0x140>
 8008858:	2b10      	cmp	r3, #16
 800885a:	d802      	bhi.n	8008862 <HAL_TIM_ConfigClockSource+0x62>
 800885c:	2b00      	cmp	r3, #0
 800885e:	d06f      	beq.n	8008940 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008860:	e078      	b.n	8008954 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008862:	2b20      	cmp	r3, #32
 8008864:	d06c      	beq.n	8008940 <HAL_TIM_ConfigClockSource+0x140>
 8008866:	2b30      	cmp	r3, #48	; 0x30
 8008868:	d06a      	beq.n	8008940 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800886a:	e073      	b.n	8008954 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800886c:	2b70      	cmp	r3, #112	; 0x70
 800886e:	d00d      	beq.n	800888c <HAL_TIM_ConfigClockSource+0x8c>
 8008870:	2b70      	cmp	r3, #112	; 0x70
 8008872:	d804      	bhi.n	800887e <HAL_TIM_ConfigClockSource+0x7e>
 8008874:	2b50      	cmp	r3, #80	; 0x50
 8008876:	d033      	beq.n	80088e0 <HAL_TIM_ConfigClockSource+0xe0>
 8008878:	2b60      	cmp	r3, #96	; 0x60
 800887a:	d041      	beq.n	8008900 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800887c:	e06a      	b.n	8008954 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800887e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008882:	d066      	beq.n	8008952 <HAL_TIM_ConfigClockSource+0x152>
 8008884:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008888:	d017      	beq.n	80088ba <HAL_TIM_ConfigClockSource+0xba>
      break;
 800888a:	e063      	b.n	8008954 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6818      	ldr	r0, [r3, #0]
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	6899      	ldr	r1, [r3, #8]
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	685a      	ldr	r2, [r3, #4]
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	68db      	ldr	r3, [r3, #12]
 800889c:	f000 fc22 	bl	80090e4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	689b      	ldr	r3, [r3, #8]
 80088a6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80088ae:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	68fa      	ldr	r2, [r7, #12]
 80088b6:	609a      	str	r2, [r3, #8]
      break;
 80088b8:	e04c      	b.n	8008954 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6818      	ldr	r0, [r3, #0]
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	6899      	ldr	r1, [r3, #8]
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	685a      	ldr	r2, [r3, #4]
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	68db      	ldr	r3, [r3, #12]
 80088ca:	f000 fc0b 	bl	80090e4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	689a      	ldr	r2, [r3, #8]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80088dc:	609a      	str	r2, [r3, #8]
      break;
 80088de:	e039      	b.n	8008954 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6818      	ldr	r0, [r3, #0]
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	6859      	ldr	r1, [r3, #4]
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	68db      	ldr	r3, [r3, #12]
 80088ec:	461a      	mov	r2, r3
 80088ee:	f000 fb7f 	bl	8008ff0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	2150      	movs	r1, #80	; 0x50
 80088f8:	4618      	mov	r0, r3
 80088fa:	f000 fbd8 	bl	80090ae <TIM_ITRx_SetConfig>
      break;
 80088fe:	e029      	b.n	8008954 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6818      	ldr	r0, [r3, #0]
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	6859      	ldr	r1, [r3, #4]
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	68db      	ldr	r3, [r3, #12]
 800890c:	461a      	mov	r2, r3
 800890e:	f000 fb9e 	bl	800904e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	2160      	movs	r1, #96	; 0x60
 8008918:	4618      	mov	r0, r3
 800891a:	f000 fbc8 	bl	80090ae <TIM_ITRx_SetConfig>
      break;
 800891e:	e019      	b.n	8008954 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6818      	ldr	r0, [r3, #0]
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	6859      	ldr	r1, [r3, #4]
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	68db      	ldr	r3, [r3, #12]
 800892c:	461a      	mov	r2, r3
 800892e:	f000 fb5f 	bl	8008ff0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	2140      	movs	r1, #64	; 0x40
 8008938:	4618      	mov	r0, r3
 800893a:	f000 fbb8 	bl	80090ae <TIM_ITRx_SetConfig>
      break;
 800893e:	e009      	b.n	8008954 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681a      	ldr	r2, [r3, #0]
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4619      	mov	r1, r3
 800894a:	4610      	mov	r0, r2
 800894c:	f000 fbaf 	bl	80090ae <TIM_ITRx_SetConfig>
      break;
 8008950:	e000      	b.n	8008954 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8008952:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2201      	movs	r2, #1
 8008958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2200      	movs	r2, #0
 8008960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008964:	2300      	movs	r3, #0
}
 8008966:	4618      	mov	r0, r3
 8008968:	3710      	adds	r7, #16
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}

0800896e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800896e:	b580      	push	{r7, lr}
 8008970:	b082      	sub	sp, #8
 8008972:	af00      	add	r7, sp, #0
 8008974:	6078      	str	r0, [r7, #4]
 8008976:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800897e:	2b01      	cmp	r3, #1
 8008980:	d101      	bne.n	8008986 <HAL_TIM_SlaveConfigSynchro+0x18>
 8008982:	2302      	movs	r3, #2
 8008984:	e031      	b.n	80089ea <HAL_TIM_SlaveConfigSynchro+0x7c>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2201      	movs	r2, #1
 800898a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2202      	movs	r2, #2
 8008992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8008996:	6839      	ldr	r1, [r7, #0]
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f000 faa3 	bl	8008ee4 <TIM_SlaveTimer_SetConfig>
 800899e:	4603      	mov	r3, r0
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d009      	beq.n	80089b8 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2201      	movs	r2, #1
 80089a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2200      	movs	r2, #0
 80089b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80089b4:	2301      	movs	r3, #1
 80089b6:	e018      	b.n	80089ea <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	68da      	ldr	r2, [r3, #12]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089c6:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	68da      	ldr	r2, [r3, #12]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80089d6:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2201      	movs	r2, #1
 80089dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2200      	movs	r2, #0
 80089e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80089e8:	2300      	movs	r3, #0
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3708      	adds	r7, #8
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}

080089f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80089f2:	b480      	push	{r7}
 80089f4:	b083      	sub	sp, #12
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80089fa:	bf00      	nop
 80089fc:	370c      	adds	r7, #12
 80089fe:	46bd      	mov	sp, r7
 8008a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a04:	4770      	bx	lr

08008a06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008a06:	b480      	push	{r7}
 8008a08:	b083      	sub	sp, #12
 8008a0a:	af00      	add	r7, sp, #0
 8008a0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008a0e:	bf00      	nop
 8008a10:	370c      	adds	r7, #12
 8008a12:	46bd      	mov	sp, r7
 8008a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a18:	4770      	bx	lr

08008a1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008a1a:	b480      	push	{r7}
 8008a1c:	b083      	sub	sp, #12
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008a22:	bf00      	nop
 8008a24:	370c      	adds	r7, #12
 8008a26:	46bd      	mov	sp, r7
 8008a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2c:	4770      	bx	lr

08008a2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008a2e:	b480      	push	{r7}
 8008a30:	b083      	sub	sp, #12
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008a36:	bf00      	nop
 8008a38:	370c      	adds	r7, #12
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a40:	4770      	bx	lr
	...

08008a44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b085      	sub	sp, #20
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	4a40      	ldr	r2, [pc, #256]	; (8008b58 <TIM_Base_SetConfig+0x114>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d013      	beq.n	8008a84 <TIM_Base_SetConfig+0x40>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a62:	d00f      	beq.n	8008a84 <TIM_Base_SetConfig+0x40>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	4a3d      	ldr	r2, [pc, #244]	; (8008b5c <TIM_Base_SetConfig+0x118>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d00b      	beq.n	8008a84 <TIM_Base_SetConfig+0x40>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	4a3c      	ldr	r2, [pc, #240]	; (8008b60 <TIM_Base_SetConfig+0x11c>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d007      	beq.n	8008a84 <TIM_Base_SetConfig+0x40>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	4a3b      	ldr	r2, [pc, #236]	; (8008b64 <TIM_Base_SetConfig+0x120>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d003      	beq.n	8008a84 <TIM_Base_SetConfig+0x40>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	4a3a      	ldr	r2, [pc, #232]	; (8008b68 <TIM_Base_SetConfig+0x124>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d108      	bne.n	8008a96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	68fa      	ldr	r2, [r7, #12]
 8008a92:	4313      	orrs	r3, r2
 8008a94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	4a2f      	ldr	r2, [pc, #188]	; (8008b58 <TIM_Base_SetConfig+0x114>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d02b      	beq.n	8008af6 <TIM_Base_SetConfig+0xb2>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008aa4:	d027      	beq.n	8008af6 <TIM_Base_SetConfig+0xb2>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	4a2c      	ldr	r2, [pc, #176]	; (8008b5c <TIM_Base_SetConfig+0x118>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d023      	beq.n	8008af6 <TIM_Base_SetConfig+0xb2>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	4a2b      	ldr	r2, [pc, #172]	; (8008b60 <TIM_Base_SetConfig+0x11c>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d01f      	beq.n	8008af6 <TIM_Base_SetConfig+0xb2>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	4a2a      	ldr	r2, [pc, #168]	; (8008b64 <TIM_Base_SetConfig+0x120>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d01b      	beq.n	8008af6 <TIM_Base_SetConfig+0xb2>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	4a29      	ldr	r2, [pc, #164]	; (8008b68 <TIM_Base_SetConfig+0x124>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d017      	beq.n	8008af6 <TIM_Base_SetConfig+0xb2>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	4a28      	ldr	r2, [pc, #160]	; (8008b6c <TIM_Base_SetConfig+0x128>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d013      	beq.n	8008af6 <TIM_Base_SetConfig+0xb2>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	4a27      	ldr	r2, [pc, #156]	; (8008b70 <TIM_Base_SetConfig+0x12c>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d00f      	beq.n	8008af6 <TIM_Base_SetConfig+0xb2>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	4a26      	ldr	r2, [pc, #152]	; (8008b74 <TIM_Base_SetConfig+0x130>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d00b      	beq.n	8008af6 <TIM_Base_SetConfig+0xb2>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	4a25      	ldr	r2, [pc, #148]	; (8008b78 <TIM_Base_SetConfig+0x134>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d007      	beq.n	8008af6 <TIM_Base_SetConfig+0xb2>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	4a24      	ldr	r2, [pc, #144]	; (8008b7c <TIM_Base_SetConfig+0x138>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d003      	beq.n	8008af6 <TIM_Base_SetConfig+0xb2>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	4a23      	ldr	r2, [pc, #140]	; (8008b80 <TIM_Base_SetConfig+0x13c>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d108      	bne.n	8008b08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008afc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	68db      	ldr	r3, [r3, #12]
 8008b02:	68fa      	ldr	r2, [r7, #12]
 8008b04:	4313      	orrs	r3, r2
 8008b06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	695b      	ldr	r3, [r3, #20]
 8008b12:	4313      	orrs	r3, r2
 8008b14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	68fa      	ldr	r2, [r7, #12]
 8008b1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	689a      	ldr	r2, [r3, #8]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	681a      	ldr	r2, [r3, #0]
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	4a0a      	ldr	r2, [pc, #40]	; (8008b58 <TIM_Base_SetConfig+0x114>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d003      	beq.n	8008b3c <TIM_Base_SetConfig+0xf8>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	4a0c      	ldr	r2, [pc, #48]	; (8008b68 <TIM_Base_SetConfig+0x124>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d103      	bne.n	8008b44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	691a      	ldr	r2, [r3, #16]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2201      	movs	r2, #1
 8008b48:	615a      	str	r2, [r3, #20]
}
 8008b4a:	bf00      	nop
 8008b4c:	3714      	adds	r7, #20
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b54:	4770      	bx	lr
 8008b56:	bf00      	nop
 8008b58:	40010000 	.word	0x40010000
 8008b5c:	40000400 	.word	0x40000400
 8008b60:	40000800 	.word	0x40000800
 8008b64:	40000c00 	.word	0x40000c00
 8008b68:	40010400 	.word	0x40010400
 8008b6c:	40014000 	.word	0x40014000
 8008b70:	40014400 	.word	0x40014400
 8008b74:	40014800 	.word	0x40014800
 8008b78:	40001800 	.word	0x40001800
 8008b7c:	40001c00 	.word	0x40001c00
 8008b80:	40002000 	.word	0x40002000

08008b84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b087      	sub	sp, #28
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6a1b      	ldr	r3, [r3, #32]
 8008b92:	f023 0201 	bic.w	r2, r3, #1
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6a1b      	ldr	r3, [r3, #32]
 8008b9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	699b      	ldr	r3, [r3, #24]
 8008baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f023 0303 	bic.w	r3, r3, #3
 8008bba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	68fa      	ldr	r2, [r7, #12]
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	f023 0302 	bic.w	r3, r3, #2
 8008bcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	689b      	ldr	r3, [r3, #8]
 8008bd2:	697a      	ldr	r2, [r7, #20]
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	4a20      	ldr	r2, [pc, #128]	; (8008c5c <TIM_OC1_SetConfig+0xd8>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d003      	beq.n	8008be8 <TIM_OC1_SetConfig+0x64>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	4a1f      	ldr	r2, [pc, #124]	; (8008c60 <TIM_OC1_SetConfig+0xdc>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d10c      	bne.n	8008c02 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	f023 0308 	bic.w	r3, r3, #8
 8008bee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	68db      	ldr	r3, [r3, #12]
 8008bf4:	697a      	ldr	r2, [r7, #20]
 8008bf6:	4313      	orrs	r3, r2
 8008bf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	f023 0304 	bic.w	r3, r3, #4
 8008c00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	4a15      	ldr	r2, [pc, #84]	; (8008c5c <TIM_OC1_SetConfig+0xd8>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d003      	beq.n	8008c12 <TIM_OC1_SetConfig+0x8e>
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	4a14      	ldr	r2, [pc, #80]	; (8008c60 <TIM_OC1_SetConfig+0xdc>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d111      	bne.n	8008c36 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008c12:	693b      	ldr	r3, [r7, #16]
 8008c14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008c20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	695b      	ldr	r3, [r3, #20]
 8008c26:	693a      	ldr	r2, [r7, #16]
 8008c28:	4313      	orrs	r3, r2
 8008c2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	699b      	ldr	r3, [r3, #24]
 8008c30:	693a      	ldr	r2, [r7, #16]
 8008c32:	4313      	orrs	r3, r2
 8008c34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	693a      	ldr	r2, [r7, #16]
 8008c3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	68fa      	ldr	r2, [r7, #12]
 8008c40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	685a      	ldr	r2, [r3, #4]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	697a      	ldr	r2, [r7, #20]
 8008c4e:	621a      	str	r2, [r3, #32]
}
 8008c50:	bf00      	nop
 8008c52:	371c      	adds	r7, #28
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr
 8008c5c:	40010000 	.word	0x40010000
 8008c60:	40010400 	.word	0x40010400

08008c64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b087      	sub	sp, #28
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6a1b      	ldr	r3, [r3, #32]
 8008c72:	f023 0210 	bic.w	r2, r3, #16
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6a1b      	ldr	r3, [r3, #32]
 8008c7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	699b      	ldr	r3, [r3, #24]
 8008c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	021b      	lsls	r3, r3, #8
 8008ca2:	68fa      	ldr	r2, [r7, #12]
 8008ca4:	4313      	orrs	r3, r2
 8008ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	f023 0320 	bic.w	r3, r3, #32
 8008cae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	689b      	ldr	r3, [r3, #8]
 8008cb4:	011b      	lsls	r3, r3, #4
 8008cb6:	697a      	ldr	r2, [r7, #20]
 8008cb8:	4313      	orrs	r3, r2
 8008cba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	4a22      	ldr	r2, [pc, #136]	; (8008d48 <TIM_OC2_SetConfig+0xe4>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d003      	beq.n	8008ccc <TIM_OC2_SetConfig+0x68>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	4a21      	ldr	r2, [pc, #132]	; (8008d4c <TIM_OC2_SetConfig+0xe8>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d10d      	bne.n	8008ce8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008cd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	68db      	ldr	r3, [r3, #12]
 8008cd8:	011b      	lsls	r3, r3, #4
 8008cda:	697a      	ldr	r2, [r7, #20]
 8008cdc:	4313      	orrs	r3, r2
 8008cde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ce6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	4a17      	ldr	r2, [pc, #92]	; (8008d48 <TIM_OC2_SetConfig+0xe4>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d003      	beq.n	8008cf8 <TIM_OC2_SetConfig+0x94>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	4a16      	ldr	r2, [pc, #88]	; (8008d4c <TIM_OC2_SetConfig+0xe8>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d113      	bne.n	8008d20 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008cfe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008d06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	695b      	ldr	r3, [r3, #20]
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	693a      	ldr	r2, [r7, #16]
 8008d10:	4313      	orrs	r3, r2
 8008d12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	699b      	ldr	r3, [r3, #24]
 8008d18:	009b      	lsls	r3, r3, #2
 8008d1a:	693a      	ldr	r2, [r7, #16]
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	693a      	ldr	r2, [r7, #16]
 8008d24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	68fa      	ldr	r2, [r7, #12]
 8008d2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	685a      	ldr	r2, [r3, #4]
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	697a      	ldr	r2, [r7, #20]
 8008d38:	621a      	str	r2, [r3, #32]
}
 8008d3a:	bf00      	nop
 8008d3c:	371c      	adds	r7, #28
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d44:	4770      	bx	lr
 8008d46:	bf00      	nop
 8008d48:	40010000 	.word	0x40010000
 8008d4c:	40010400 	.word	0x40010400

08008d50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b087      	sub	sp, #28
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6a1b      	ldr	r3, [r3, #32]
 8008d5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6a1b      	ldr	r3, [r3, #32]
 8008d6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	685b      	ldr	r3, [r3, #4]
 8008d70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	69db      	ldr	r3, [r3, #28]
 8008d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f023 0303 	bic.w	r3, r3, #3
 8008d86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	68fa      	ldr	r2, [r7, #12]
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008d98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	689b      	ldr	r3, [r3, #8]
 8008d9e:	021b      	lsls	r3, r3, #8
 8008da0:	697a      	ldr	r2, [r7, #20]
 8008da2:	4313      	orrs	r3, r2
 8008da4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	4a21      	ldr	r2, [pc, #132]	; (8008e30 <TIM_OC3_SetConfig+0xe0>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d003      	beq.n	8008db6 <TIM_OC3_SetConfig+0x66>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	4a20      	ldr	r2, [pc, #128]	; (8008e34 <TIM_OC3_SetConfig+0xe4>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d10d      	bne.n	8008dd2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008dbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	68db      	ldr	r3, [r3, #12]
 8008dc2:	021b      	lsls	r3, r3, #8
 8008dc4:	697a      	ldr	r2, [r7, #20]
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008dd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	4a16      	ldr	r2, [pc, #88]	; (8008e30 <TIM_OC3_SetConfig+0xe0>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d003      	beq.n	8008de2 <TIM_OC3_SetConfig+0x92>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	4a15      	ldr	r2, [pc, #84]	; (8008e34 <TIM_OC3_SetConfig+0xe4>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d113      	bne.n	8008e0a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008de8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008df0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	695b      	ldr	r3, [r3, #20]
 8008df6:	011b      	lsls	r3, r3, #4
 8008df8:	693a      	ldr	r2, [r7, #16]
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	699b      	ldr	r3, [r3, #24]
 8008e02:	011b      	lsls	r3, r3, #4
 8008e04:	693a      	ldr	r2, [r7, #16]
 8008e06:	4313      	orrs	r3, r2
 8008e08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	693a      	ldr	r2, [r7, #16]
 8008e0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	68fa      	ldr	r2, [r7, #12]
 8008e14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	685a      	ldr	r2, [r3, #4]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	697a      	ldr	r2, [r7, #20]
 8008e22:	621a      	str	r2, [r3, #32]
}
 8008e24:	bf00      	nop
 8008e26:	371c      	adds	r7, #28
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr
 8008e30:	40010000 	.word	0x40010000
 8008e34:	40010400 	.word	0x40010400

08008e38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b087      	sub	sp, #28
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
 8008e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6a1b      	ldr	r3, [r3, #32]
 8008e46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6a1b      	ldr	r3, [r3, #32]
 8008e52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	69db      	ldr	r3, [r3, #28]
 8008e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	021b      	lsls	r3, r3, #8
 8008e76:	68fa      	ldr	r2, [r7, #12]
 8008e78:	4313      	orrs	r3, r2
 8008e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008e82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	689b      	ldr	r3, [r3, #8]
 8008e88:	031b      	lsls	r3, r3, #12
 8008e8a:	693a      	ldr	r2, [r7, #16]
 8008e8c:	4313      	orrs	r3, r2
 8008e8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	4a12      	ldr	r2, [pc, #72]	; (8008edc <TIM_OC4_SetConfig+0xa4>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d003      	beq.n	8008ea0 <TIM_OC4_SetConfig+0x68>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	4a11      	ldr	r2, [pc, #68]	; (8008ee0 <TIM_OC4_SetConfig+0xa8>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d109      	bne.n	8008eb4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ea6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	695b      	ldr	r3, [r3, #20]
 8008eac:	019b      	lsls	r3, r3, #6
 8008eae:	697a      	ldr	r2, [r7, #20]
 8008eb0:	4313      	orrs	r3, r2
 8008eb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	697a      	ldr	r2, [r7, #20]
 8008eb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	68fa      	ldr	r2, [r7, #12]
 8008ebe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	685a      	ldr	r2, [r3, #4]
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	693a      	ldr	r2, [r7, #16]
 8008ecc:	621a      	str	r2, [r3, #32]
}
 8008ece:	bf00      	nop
 8008ed0:	371c      	adds	r7, #28
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed8:	4770      	bx	lr
 8008eda:	bf00      	nop
 8008edc:	40010000 	.word	0x40010000
 8008ee0:	40010400 	.word	0x40010400

08008ee4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b086      	sub	sp, #24
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
 8008eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	689b      	ldr	r3, [r3, #8]
 8008ef4:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008efc:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	685b      	ldr	r3, [r3, #4]
 8008f02:	697a      	ldr	r2, [r7, #20]
 8008f04:	4313      	orrs	r3, r2
 8008f06:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	f023 0307 	bic.w	r3, r3, #7
 8008f0e:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	697a      	ldr	r2, [r7, #20]
 8008f16:	4313      	orrs	r3, r2
 8008f18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	697a      	ldr	r2, [r7, #20]
 8008f20:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	2b30      	cmp	r3, #48	; 0x30
 8008f28:	d05c      	beq.n	8008fe4 <TIM_SlaveTimer_SetConfig+0x100>
 8008f2a:	2b30      	cmp	r3, #48	; 0x30
 8008f2c:	d806      	bhi.n	8008f3c <TIM_SlaveTimer_SetConfig+0x58>
 8008f2e:	2b10      	cmp	r3, #16
 8008f30:	d058      	beq.n	8008fe4 <TIM_SlaveTimer_SetConfig+0x100>
 8008f32:	2b20      	cmp	r3, #32
 8008f34:	d056      	beq.n	8008fe4 <TIM_SlaveTimer_SetConfig+0x100>
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d054      	beq.n	8008fe4 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8008f3a:	e054      	b.n	8008fe6 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8008f3c:	2b50      	cmp	r3, #80	; 0x50
 8008f3e:	d03d      	beq.n	8008fbc <TIM_SlaveTimer_SetConfig+0xd8>
 8008f40:	2b50      	cmp	r3, #80	; 0x50
 8008f42:	d802      	bhi.n	8008f4a <TIM_SlaveTimer_SetConfig+0x66>
 8008f44:	2b40      	cmp	r3, #64	; 0x40
 8008f46:	d010      	beq.n	8008f6a <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8008f48:	e04d      	b.n	8008fe6 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8008f4a:	2b60      	cmp	r3, #96	; 0x60
 8008f4c:	d040      	beq.n	8008fd0 <TIM_SlaveTimer_SetConfig+0xec>
 8008f4e:	2b70      	cmp	r3, #112	; 0x70
 8008f50:	d000      	beq.n	8008f54 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8008f52:	e048      	b.n	8008fe6 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6818      	ldr	r0, [r3, #0]
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	68d9      	ldr	r1, [r3, #12]
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	689a      	ldr	r2, [r3, #8]
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	691b      	ldr	r3, [r3, #16]
 8008f64:	f000 f8be 	bl	80090e4 <TIM_ETR_SetConfig>
      break;
 8008f68:	e03d      	b.n	8008fe6 <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	2b05      	cmp	r3, #5
 8008f70:	d101      	bne.n	8008f76 <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8008f72:	2301      	movs	r3, #1
 8008f74:	e038      	b.n	8008fe8 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	6a1b      	ldr	r3, [r3, #32]
 8008f7c:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	6a1a      	ldr	r2, [r3, #32]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f022 0201 	bic.w	r2, r2, #1
 8008f8c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	699b      	ldr	r3, [r3, #24]
 8008f94:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008f9c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	691b      	ldr	r3, [r3, #16]
 8008fa2:	011b      	lsls	r3, r3, #4
 8008fa4:	68fa      	ldr	r2, [r7, #12]
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	68fa      	ldr	r2, [r7, #12]
 8008fb0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	693a      	ldr	r2, [r7, #16]
 8008fb8:	621a      	str	r2, [r3, #32]
      break;
 8008fba:	e014      	b.n	8008fe6 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6818      	ldr	r0, [r3, #0]
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	6899      	ldr	r1, [r3, #8]
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	691b      	ldr	r3, [r3, #16]
 8008fc8:	461a      	mov	r2, r3
 8008fca:	f000 f811 	bl	8008ff0 <TIM_TI1_ConfigInputStage>
      break;
 8008fce:	e00a      	b.n	8008fe6 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6818      	ldr	r0, [r3, #0]
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	6899      	ldr	r1, [r3, #8]
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	691b      	ldr	r3, [r3, #16]
 8008fdc:	461a      	mov	r2, r3
 8008fde:	f000 f836 	bl	800904e <TIM_TI2_ConfigInputStage>
      break;
 8008fe2:	e000      	b.n	8008fe6 <TIM_SlaveTimer_SetConfig+0x102>
      break;
 8008fe4:	bf00      	nop
  }
  return HAL_OK;
 8008fe6:	2300      	movs	r3, #0
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3718      	adds	r7, #24
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b087      	sub	sp, #28
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	60f8      	str	r0, [r7, #12]
 8008ff8:	60b9      	str	r1, [r7, #8]
 8008ffa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	6a1b      	ldr	r3, [r3, #32]
 8009000:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	6a1b      	ldr	r3, [r3, #32]
 8009006:	f023 0201 	bic.w	r2, r3, #1
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	699b      	ldr	r3, [r3, #24]
 8009012:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800901a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	011b      	lsls	r3, r3, #4
 8009020:	693a      	ldr	r2, [r7, #16]
 8009022:	4313      	orrs	r3, r2
 8009024:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	f023 030a 	bic.w	r3, r3, #10
 800902c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800902e:	697a      	ldr	r2, [r7, #20]
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	4313      	orrs	r3, r2
 8009034:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	693a      	ldr	r2, [r7, #16]
 800903a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	697a      	ldr	r2, [r7, #20]
 8009040:	621a      	str	r2, [r3, #32]
}
 8009042:	bf00      	nop
 8009044:	371c      	adds	r7, #28
 8009046:	46bd      	mov	sp, r7
 8009048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904c:	4770      	bx	lr

0800904e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800904e:	b480      	push	{r7}
 8009050:	b087      	sub	sp, #28
 8009052:	af00      	add	r7, sp, #0
 8009054:	60f8      	str	r0, [r7, #12]
 8009056:	60b9      	str	r1, [r7, #8]
 8009058:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	6a1b      	ldr	r3, [r3, #32]
 800905e:	f023 0210 	bic.w	r2, r3, #16
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	699b      	ldr	r3, [r3, #24]
 800906a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	6a1b      	ldr	r3, [r3, #32]
 8009070:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009078:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	031b      	lsls	r3, r3, #12
 800907e:	697a      	ldr	r2, [r7, #20]
 8009080:	4313      	orrs	r3, r2
 8009082:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800908a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	011b      	lsls	r3, r3, #4
 8009090:	693a      	ldr	r2, [r7, #16]
 8009092:	4313      	orrs	r3, r2
 8009094:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	697a      	ldr	r2, [r7, #20]
 800909a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	693a      	ldr	r2, [r7, #16]
 80090a0:	621a      	str	r2, [r3, #32]
}
 80090a2:	bf00      	nop
 80090a4:	371c      	adds	r7, #28
 80090a6:	46bd      	mov	sp, r7
 80090a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ac:	4770      	bx	lr

080090ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80090ae:	b480      	push	{r7}
 80090b0:	b085      	sub	sp, #20
 80090b2:	af00      	add	r7, sp, #0
 80090b4:	6078      	str	r0, [r7, #4]
 80090b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	689b      	ldr	r3, [r3, #8]
 80090bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80090c6:	683a      	ldr	r2, [r7, #0]
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	4313      	orrs	r3, r2
 80090cc:	f043 0307 	orr.w	r3, r3, #7
 80090d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	68fa      	ldr	r2, [r7, #12]
 80090d6:	609a      	str	r2, [r3, #8]
}
 80090d8:	bf00      	nop
 80090da:	3714      	adds	r7, #20
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr

080090e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b087      	sub	sp, #28
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	60f8      	str	r0, [r7, #12]
 80090ec:	60b9      	str	r1, [r7, #8]
 80090ee:	607a      	str	r2, [r7, #4]
 80090f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	689b      	ldr	r3, [r3, #8]
 80090f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80090fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	021a      	lsls	r2, r3, #8
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	431a      	orrs	r2, r3
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	4313      	orrs	r3, r2
 800910c:	697a      	ldr	r2, [r7, #20]
 800910e:	4313      	orrs	r3, r2
 8009110:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	697a      	ldr	r2, [r7, #20]
 8009116:	609a      	str	r2, [r3, #8]
}
 8009118:	bf00      	nop
 800911a:	371c      	adds	r7, #28
 800911c:	46bd      	mov	sp, r7
 800911e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009122:	4770      	bx	lr

08009124 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009124:	b480      	push	{r7}
 8009126:	b087      	sub	sp, #28
 8009128:	af00      	add	r7, sp, #0
 800912a:	60f8      	str	r0, [r7, #12]
 800912c:	60b9      	str	r1, [r7, #8]
 800912e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	f003 031f 	and.w	r3, r3, #31
 8009136:	2201      	movs	r2, #1
 8009138:	fa02 f303 	lsl.w	r3, r2, r3
 800913c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	6a1a      	ldr	r2, [r3, #32]
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	43db      	mvns	r3, r3
 8009146:	401a      	ands	r2, r3
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	6a1a      	ldr	r2, [r3, #32]
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	f003 031f 	and.w	r3, r3, #31
 8009156:	6879      	ldr	r1, [r7, #4]
 8009158:	fa01 f303 	lsl.w	r3, r1, r3
 800915c:	431a      	orrs	r2, r3
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	621a      	str	r2, [r3, #32]
}
 8009162:	bf00      	nop
 8009164:	371c      	adds	r7, #28
 8009166:	46bd      	mov	sp, r7
 8009168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916c:	4770      	bx	lr
	...

08009170 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009170:	b480      	push	{r7}
 8009172:	b085      	sub	sp, #20
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009180:	2b01      	cmp	r3, #1
 8009182:	d101      	bne.n	8009188 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009184:	2302      	movs	r3, #2
 8009186:	e05a      	b.n	800923e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2201      	movs	r2, #1
 800918c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2202      	movs	r2, #2
 8009194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	685b      	ldr	r3, [r3, #4]
 800919e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	689b      	ldr	r3, [r3, #8]
 80091a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	68fa      	ldr	r2, [r7, #12]
 80091b6:	4313      	orrs	r3, r2
 80091b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	68fa      	ldr	r2, [r7, #12]
 80091c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	4a21      	ldr	r2, [pc, #132]	; (800924c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d022      	beq.n	8009212 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091d4:	d01d      	beq.n	8009212 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	4a1d      	ldr	r2, [pc, #116]	; (8009250 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	d018      	beq.n	8009212 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4a1b      	ldr	r2, [pc, #108]	; (8009254 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d013      	beq.n	8009212 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	4a1a      	ldr	r2, [pc, #104]	; (8009258 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d00e      	beq.n	8009212 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4a18      	ldr	r2, [pc, #96]	; (800925c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d009      	beq.n	8009212 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	4a17      	ldr	r2, [pc, #92]	; (8009260 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d004      	beq.n	8009212 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	4a15      	ldr	r2, [pc, #84]	; (8009264 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d10c      	bne.n	800922c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009218:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	685b      	ldr	r3, [r3, #4]
 800921e:	68ba      	ldr	r2, [r7, #8]
 8009220:	4313      	orrs	r3, r2
 8009222:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	68ba      	ldr	r2, [r7, #8]
 800922a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2201      	movs	r2, #1
 8009230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2200      	movs	r2, #0
 8009238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800923c:	2300      	movs	r3, #0
}
 800923e:	4618      	mov	r0, r3
 8009240:	3714      	adds	r7, #20
 8009242:	46bd      	mov	sp, r7
 8009244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009248:	4770      	bx	lr
 800924a:	bf00      	nop
 800924c:	40010000 	.word	0x40010000
 8009250:	40000400 	.word	0x40000400
 8009254:	40000800 	.word	0x40000800
 8009258:	40000c00 	.word	0x40000c00
 800925c:	40010400 	.word	0x40010400
 8009260:	40014000 	.word	0x40014000
 8009264:	40001800 	.word	0x40001800

08009268 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009268:	b480      	push	{r7}
 800926a:	b085      	sub	sp, #20
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009272:	2300      	movs	r3, #0
 8009274:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800927c:	2b01      	cmp	r3, #1
 800927e:	d101      	bne.n	8009284 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009280:	2302      	movs	r3, #2
 8009282:	e03d      	b.n	8009300 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2201      	movs	r2, #1
 8009288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	68db      	ldr	r3, [r3, #12]
 8009296:	4313      	orrs	r3, r2
 8009298:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	689b      	ldr	r3, [r3, #8]
 80092a4:	4313      	orrs	r3, r2
 80092a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	685b      	ldr	r3, [r3, #4]
 80092b2:	4313      	orrs	r3, r2
 80092b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	4313      	orrs	r3, r2
 80092c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	691b      	ldr	r3, [r3, #16]
 80092ce:	4313      	orrs	r3, r2
 80092d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	695b      	ldr	r3, [r3, #20]
 80092dc:	4313      	orrs	r3, r2
 80092de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	69db      	ldr	r3, [r3, #28]
 80092ea:	4313      	orrs	r3, r2
 80092ec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	68fa      	ldr	r2, [r7, #12]
 80092f4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2200      	movs	r2, #0
 80092fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80092fe:	2300      	movs	r3, #0
}
 8009300:	4618      	mov	r0, r3
 8009302:	3714      	adds	r7, #20
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr

0800930c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800930c:	b480      	push	{r7}
 800930e:	b083      	sub	sp, #12
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009314:	bf00      	nop
 8009316:	370c      	adds	r7, #12
 8009318:	46bd      	mov	sp, r7
 800931a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931e:	4770      	bx	lr

08009320 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009320:	b480      	push	{r7}
 8009322:	b083      	sub	sp, #12
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009328:	bf00      	nop
 800932a:	370c      	adds	r7, #12
 800932c:	46bd      	mov	sp, r7
 800932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009332:	4770      	bx	lr

08009334 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b082      	sub	sp, #8
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d101      	bne.n	8009346 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009342:	2301      	movs	r3, #1
 8009344:	e03f      	b.n	80093c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800934c:	b2db      	uxtb	r3, r3
 800934e:	2b00      	cmp	r3, #0
 8009350:	d106      	bne.n	8009360 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2200      	movs	r2, #0
 8009356:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f7f8 fc0a 	bl	8001b74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2224      	movs	r2, #36	; 0x24
 8009364:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	68da      	ldr	r2, [r3, #12]
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009376:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f000 fb6d 	bl	8009a58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	691a      	ldr	r2, [r3, #16]
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800938c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	695a      	ldr	r2, [r3, #20]
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800939c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	68da      	ldr	r2, [r3, #12]
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80093ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2200      	movs	r2, #0
 80093b2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2220      	movs	r2, #32
 80093b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2220      	movs	r2, #32
 80093c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80093c4:	2300      	movs	r3, #0
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3708      	adds	r7, #8
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}
	...

080093d0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b086      	sub	sp, #24
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	60f8      	str	r0, [r7, #12]
 80093d8:	60b9      	str	r1, [r7, #8]
 80093da:	4613      	mov	r3, r2
 80093dc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80093e4:	b2db      	uxtb	r3, r3
 80093e6:	2b20      	cmp	r3, #32
 80093e8:	d166      	bne.n	80094b8 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d002      	beq.n	80093f6 <HAL_UART_Receive_DMA+0x26>
 80093f0:	88fb      	ldrh	r3, [r7, #6]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d101      	bne.n	80093fa <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80093f6:	2301      	movs	r3, #1
 80093f8:	e05f      	b.n	80094ba <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009400:	2b01      	cmp	r3, #1
 8009402:	d101      	bne.n	8009408 <HAL_UART_Receive_DMA+0x38>
 8009404:	2302      	movs	r3, #2
 8009406:	e058      	b.n	80094ba <HAL_UART_Receive_DMA+0xea>
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	2201      	movs	r2, #1
 800940c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8009410:	68ba      	ldr	r2, [r7, #8]
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	88fa      	ldrh	r2, [r7, #6]
 800941a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	2200      	movs	r2, #0
 8009420:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	2222      	movs	r2, #34	; 0x22
 8009426:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800942e:	4a25      	ldr	r2, [pc, #148]	; (80094c4 <HAL_UART_Receive_DMA+0xf4>)
 8009430:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009436:	4a24      	ldr	r2, [pc, #144]	; (80094c8 <HAL_UART_Receive_DMA+0xf8>)
 8009438:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800943e:	4a23      	ldr	r2, [pc, #140]	; (80094cc <HAL_UART_Receive_DMA+0xfc>)
 8009440:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009446:	2200      	movs	r2, #0
 8009448:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800944a:	f107 0308 	add.w	r3, r7, #8
 800944e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	3304      	adds	r3, #4
 800945a:	4619      	mov	r1, r3
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	681a      	ldr	r2, [r3, #0]
 8009460:	88fb      	ldrh	r3, [r7, #6]
 8009462:	f7f9 fb61 	bl	8002b28 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8009466:	2300      	movs	r3, #0
 8009468:	613b      	str	r3, [r7, #16]
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	613b      	str	r3, [r7, #16]
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	685b      	ldr	r3, [r3, #4]
 8009478:	613b      	str	r3, [r7, #16]
 800947a:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	2200      	movs	r2, #0
 8009480:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	68da      	ldr	r2, [r3, #12]
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009492:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	695a      	ldr	r2, [r3, #20]
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f042 0201 	orr.w	r2, r2, #1
 80094a2:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	695a      	ldr	r2, [r3, #20]
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80094b2:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80094b4:	2300      	movs	r3, #0
 80094b6:	e000      	b.n	80094ba <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80094b8:	2302      	movs	r3, #2
  }
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	3718      	adds	r7, #24
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}
 80094c2:	bf00      	nop
 80094c4:	080096d1 	.word	0x080096d1
 80094c8:	08009739 	.word	0x08009739
 80094cc:	08009755 	.word	0x08009755

080094d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b088      	sub	sp, #32
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	68db      	ldr	r3, [r3, #12]
 80094e6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	695b      	ldr	r3, [r3, #20]
 80094ee:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80094f0:	2300      	movs	r3, #0
 80094f2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80094f4:	2300      	movs	r3, #0
 80094f6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80094f8:	69fb      	ldr	r3, [r7, #28]
 80094fa:	f003 030f 	and.w	r3, r3, #15
 80094fe:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d10d      	bne.n	8009522 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009506:	69fb      	ldr	r3, [r7, #28]
 8009508:	f003 0320 	and.w	r3, r3, #32
 800950c:	2b00      	cmp	r3, #0
 800950e:	d008      	beq.n	8009522 <HAL_UART_IRQHandler+0x52>
 8009510:	69bb      	ldr	r3, [r7, #24]
 8009512:	f003 0320 	and.w	r3, r3, #32
 8009516:	2b00      	cmp	r3, #0
 8009518:	d003      	beq.n	8009522 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f000 fa1a 	bl	8009954 <UART_Receive_IT>
      return;
 8009520:	e0d1      	b.n	80096c6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009522:	693b      	ldr	r3, [r7, #16]
 8009524:	2b00      	cmp	r3, #0
 8009526:	f000 80b0 	beq.w	800968a <HAL_UART_IRQHandler+0x1ba>
 800952a:	697b      	ldr	r3, [r7, #20]
 800952c:	f003 0301 	and.w	r3, r3, #1
 8009530:	2b00      	cmp	r3, #0
 8009532:	d105      	bne.n	8009540 <HAL_UART_IRQHandler+0x70>
 8009534:	69bb      	ldr	r3, [r7, #24]
 8009536:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800953a:	2b00      	cmp	r3, #0
 800953c:	f000 80a5 	beq.w	800968a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009540:	69fb      	ldr	r3, [r7, #28]
 8009542:	f003 0301 	and.w	r3, r3, #1
 8009546:	2b00      	cmp	r3, #0
 8009548:	d00a      	beq.n	8009560 <HAL_UART_IRQHandler+0x90>
 800954a:	69bb      	ldr	r3, [r7, #24]
 800954c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009550:	2b00      	cmp	r3, #0
 8009552:	d005      	beq.n	8009560 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009558:	f043 0201 	orr.w	r2, r3, #1
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009560:	69fb      	ldr	r3, [r7, #28]
 8009562:	f003 0304 	and.w	r3, r3, #4
 8009566:	2b00      	cmp	r3, #0
 8009568:	d00a      	beq.n	8009580 <HAL_UART_IRQHandler+0xb0>
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	f003 0301 	and.w	r3, r3, #1
 8009570:	2b00      	cmp	r3, #0
 8009572:	d005      	beq.n	8009580 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009578:	f043 0202 	orr.w	r2, r3, #2
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009580:	69fb      	ldr	r3, [r7, #28]
 8009582:	f003 0302 	and.w	r3, r3, #2
 8009586:	2b00      	cmp	r3, #0
 8009588:	d00a      	beq.n	80095a0 <HAL_UART_IRQHandler+0xd0>
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	f003 0301 	and.w	r3, r3, #1
 8009590:	2b00      	cmp	r3, #0
 8009592:	d005      	beq.n	80095a0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009598:	f043 0204 	orr.w	r2, r3, #4
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80095a0:	69fb      	ldr	r3, [r7, #28]
 80095a2:	f003 0308 	and.w	r3, r3, #8
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d00f      	beq.n	80095ca <HAL_UART_IRQHandler+0xfa>
 80095aa:	69bb      	ldr	r3, [r7, #24]
 80095ac:	f003 0320 	and.w	r3, r3, #32
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d104      	bne.n	80095be <HAL_UART_IRQHandler+0xee>
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	f003 0301 	and.w	r3, r3, #1
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d005      	beq.n	80095ca <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095c2:	f043 0208 	orr.w	r2, r3, #8
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d078      	beq.n	80096c4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80095d2:	69fb      	ldr	r3, [r7, #28]
 80095d4:	f003 0320 	and.w	r3, r3, #32
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d007      	beq.n	80095ec <HAL_UART_IRQHandler+0x11c>
 80095dc:	69bb      	ldr	r3, [r7, #24]
 80095de:	f003 0320 	and.w	r3, r3, #32
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d002      	beq.n	80095ec <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f000 f9b4 	bl	8009954 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	695b      	ldr	r3, [r3, #20]
 80095f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095f6:	2b40      	cmp	r3, #64	; 0x40
 80095f8:	bf0c      	ite	eq
 80095fa:	2301      	moveq	r3, #1
 80095fc:	2300      	movne	r3, #0
 80095fe:	b2db      	uxtb	r3, r3
 8009600:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009606:	f003 0308 	and.w	r3, r3, #8
 800960a:	2b00      	cmp	r3, #0
 800960c:	d102      	bne.n	8009614 <HAL_UART_IRQHandler+0x144>
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d031      	beq.n	8009678 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f000 f8fd 	bl	8009814 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	695b      	ldr	r3, [r3, #20]
 8009620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009624:	2b40      	cmp	r3, #64	; 0x40
 8009626:	d123      	bne.n	8009670 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	695a      	ldr	r2, [r3, #20]
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009636:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800963c:	2b00      	cmp	r3, #0
 800963e:	d013      	beq.n	8009668 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009644:	4a21      	ldr	r2, [pc, #132]	; (80096cc <HAL_UART_IRQHandler+0x1fc>)
 8009646:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800964c:	4618      	mov	r0, r3
 800964e:	f7f9 fac3 	bl	8002bd8 <HAL_DMA_Abort_IT>
 8009652:	4603      	mov	r3, r0
 8009654:	2b00      	cmp	r3, #0
 8009656:	d016      	beq.n	8009686 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800965c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800965e:	687a      	ldr	r2, [r7, #4]
 8009660:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009662:	4610      	mov	r0, r2
 8009664:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009666:	e00e      	b.n	8009686 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f7f6 ffbb 	bl	80005e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800966e:	e00a      	b.n	8009686 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f7f6 ffb7 	bl	80005e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009676:	e006      	b.n	8009686 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f7f6 ffb3 	bl	80005e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2200      	movs	r2, #0
 8009682:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8009684:	e01e      	b.n	80096c4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009686:	bf00      	nop
    return;
 8009688:	e01c      	b.n	80096c4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800968a:	69fb      	ldr	r3, [r7, #28]
 800968c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009690:	2b00      	cmp	r3, #0
 8009692:	d008      	beq.n	80096a6 <HAL_UART_IRQHandler+0x1d6>
 8009694:	69bb      	ldr	r3, [r7, #24]
 8009696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800969a:	2b00      	cmp	r3, #0
 800969c:	d003      	beq.n	80096a6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f000 f8ea 	bl	8009878 <UART_Transmit_IT>
    return;
 80096a4:	e00f      	b.n	80096c6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80096a6:	69fb      	ldr	r3, [r7, #28]
 80096a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d00a      	beq.n	80096c6 <HAL_UART_IRQHandler+0x1f6>
 80096b0:	69bb      	ldr	r3, [r7, #24]
 80096b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d005      	beq.n	80096c6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f000 f932 	bl	8009924 <UART_EndTransmit_IT>
    return;
 80096c0:	bf00      	nop
 80096c2:	e000      	b.n	80096c6 <HAL_UART_IRQHandler+0x1f6>
    return;
 80096c4:	bf00      	nop
  }
}
 80096c6:	3720      	adds	r7, #32
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}
 80096cc:	08009851 	.word	0x08009851

080096d0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b084      	sub	sp, #16
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096dc:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d11e      	bne.n	800972a <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	2200      	movs	r2, #0
 80096f0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	68da      	ldr	r2, [r3, #12]
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009700:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	695a      	ldr	r2, [r3, #20]
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f022 0201 	bic.w	r2, r2, #1
 8009710:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	695a      	ldr	r2, [r3, #20]
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009720:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	2220      	movs	r2, #32
 8009726:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800972a:	68f8      	ldr	r0, [r7, #12]
 800972c:	f7f6 fefa 	bl	8000524 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009730:	bf00      	nop
 8009732:	3710      	adds	r7, #16
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}

08009738 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b084      	sub	sp, #16
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009744:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8009746:	68f8      	ldr	r0, [r7, #12]
 8009748:	f7f6 ff42 	bl	80005d0 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800974c:	bf00      	nop
 800974e:	3710      	adds	r7, #16
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}

08009754 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b084      	sub	sp, #16
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800975c:	2300      	movs	r3, #0
 800975e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009764:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	695b      	ldr	r3, [r3, #20]
 800976c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009770:	2b80      	cmp	r3, #128	; 0x80
 8009772:	bf0c      	ite	eq
 8009774:	2301      	moveq	r3, #1
 8009776:	2300      	movne	r3, #0
 8009778:	b2db      	uxtb	r3, r3
 800977a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009782:	b2db      	uxtb	r3, r3
 8009784:	2b21      	cmp	r3, #33	; 0x21
 8009786:	d108      	bne.n	800979a <UART_DMAError+0x46>
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d005      	beq.n	800979a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	2200      	movs	r2, #0
 8009792:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009794:	68b8      	ldr	r0, [r7, #8]
 8009796:	f000 f827 	bl	80097e8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	695b      	ldr	r3, [r3, #20]
 80097a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097a4:	2b40      	cmp	r3, #64	; 0x40
 80097a6:	bf0c      	ite	eq
 80097a8:	2301      	moveq	r3, #1
 80097aa:	2300      	movne	r3, #0
 80097ac:	b2db      	uxtb	r3, r3
 80097ae:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80097b6:	b2db      	uxtb	r3, r3
 80097b8:	2b22      	cmp	r3, #34	; 0x22
 80097ba:	d108      	bne.n	80097ce <UART_DMAError+0x7a>
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d005      	beq.n	80097ce <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	2200      	movs	r2, #0
 80097c6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80097c8:	68b8      	ldr	r0, [r7, #8]
 80097ca:	f000 f823 	bl	8009814 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097d2:	f043 0210 	orr.w	r2, r3, #16
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80097da:	68b8      	ldr	r0, [r7, #8]
 80097dc:	f7f6 ff02 	bl	80005e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097e0:	bf00      	nop
 80097e2:	3710      	adds	r7, #16
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}

080097e8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80097e8:	b480      	push	{r7}
 80097ea:	b083      	sub	sp, #12
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	68da      	ldr	r2, [r3, #12]
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80097fe:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2220      	movs	r2, #32
 8009804:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8009808:	bf00      	nop
 800980a:	370c      	adds	r7, #12
 800980c:	46bd      	mov	sp, r7
 800980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009812:	4770      	bx	lr

08009814 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009814:	b480      	push	{r7}
 8009816:	b083      	sub	sp, #12
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	68da      	ldr	r2, [r3, #12]
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800982a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	695a      	ldr	r2, [r3, #20]
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f022 0201 	bic.w	r2, r2, #1
 800983a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2220      	movs	r2, #32
 8009840:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8009844:	bf00      	nop
 8009846:	370c      	adds	r7, #12
 8009848:	46bd      	mov	sp, r7
 800984a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984e:	4770      	bx	lr

08009850 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b084      	sub	sp, #16
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800985c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	2200      	movs	r2, #0
 8009862:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	2200      	movs	r2, #0
 8009868:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800986a:	68f8      	ldr	r0, [r7, #12]
 800986c:	f7f6 feba 	bl	80005e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009870:	bf00      	nop
 8009872:	3710      	adds	r7, #16
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}

08009878 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009878:	b480      	push	{r7}
 800987a:	b085      	sub	sp, #20
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009886:	b2db      	uxtb	r3, r3
 8009888:	2b21      	cmp	r3, #33	; 0x21
 800988a:	d144      	bne.n	8009916 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	689b      	ldr	r3, [r3, #8]
 8009890:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009894:	d11a      	bne.n	80098cc <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6a1b      	ldr	r3, [r3, #32]
 800989a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	881b      	ldrh	r3, [r3, #0]
 80098a0:	461a      	mov	r2, r3
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80098aa:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	691b      	ldr	r3, [r3, #16]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d105      	bne.n	80098c0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6a1b      	ldr	r3, [r3, #32]
 80098b8:	1c9a      	adds	r2, r3, #2
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	621a      	str	r2, [r3, #32]
 80098be:	e00e      	b.n	80098de <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6a1b      	ldr	r3, [r3, #32]
 80098c4:	1c5a      	adds	r2, r3, #1
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	621a      	str	r2, [r3, #32]
 80098ca:	e008      	b.n	80098de <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6a1b      	ldr	r3, [r3, #32]
 80098d0:	1c59      	adds	r1, r3, #1
 80098d2:	687a      	ldr	r2, [r7, #4]
 80098d4:	6211      	str	r1, [r2, #32]
 80098d6:	781a      	ldrb	r2, [r3, #0]
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80098e2:	b29b      	uxth	r3, r3
 80098e4:	3b01      	subs	r3, #1
 80098e6:	b29b      	uxth	r3, r3
 80098e8:	687a      	ldr	r2, [r7, #4]
 80098ea:	4619      	mov	r1, r3
 80098ec:	84d1      	strh	r1, [r2, #38]	; 0x26
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d10f      	bne.n	8009912 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	68da      	ldr	r2, [r3, #12]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009900:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	68da      	ldr	r2, [r3, #12]
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009910:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009912:	2300      	movs	r3, #0
 8009914:	e000      	b.n	8009918 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8009916:	2302      	movs	r3, #2
  }
}
 8009918:	4618      	mov	r0, r3
 800991a:	3714      	adds	r7, #20
 800991c:	46bd      	mov	sp, r7
 800991e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009922:	4770      	bx	lr

08009924 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b082      	sub	sp, #8
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	68da      	ldr	r2, [r3, #12]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800993a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2220      	movs	r2, #32
 8009940:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f7f6 fddd 	bl	8000504 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800994a:	2300      	movs	r3, #0
}
 800994c:	4618      	mov	r0, r3
 800994e:	3708      	adds	r7, #8
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}

08009954 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b084      	sub	sp, #16
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009962:	b2db      	uxtb	r3, r3
 8009964:	2b22      	cmp	r3, #34	; 0x22
 8009966:	d171      	bne.n	8009a4c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	689b      	ldr	r3, [r3, #8]
 800996c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009970:	d123      	bne.n	80099ba <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009976:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	691b      	ldr	r3, [r3, #16]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d10e      	bne.n	800999e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	685b      	ldr	r3, [r3, #4]
 8009986:	b29b      	uxth	r3, r3
 8009988:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800998c:	b29a      	uxth	r2, r3
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009996:	1c9a      	adds	r2, r3, #2
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	629a      	str	r2, [r3, #40]	; 0x28
 800999c:	e029      	b.n	80099f2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	685b      	ldr	r3, [r3, #4]
 80099a4:	b29b      	uxth	r3, r3
 80099a6:	b2db      	uxtb	r3, r3
 80099a8:	b29a      	uxth	r2, r3
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099b2:	1c5a      	adds	r2, r3, #1
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	629a      	str	r2, [r3, #40]	; 0x28
 80099b8:	e01b      	b.n	80099f2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	691b      	ldr	r3, [r3, #16]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d10a      	bne.n	80099d8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	6858      	ldr	r0, [r3, #4]
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099cc:	1c59      	adds	r1, r3, #1
 80099ce:	687a      	ldr	r2, [r7, #4]
 80099d0:	6291      	str	r1, [r2, #40]	; 0x28
 80099d2:	b2c2      	uxtb	r2, r0
 80099d4:	701a      	strb	r2, [r3, #0]
 80099d6:	e00c      	b.n	80099f2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	685b      	ldr	r3, [r3, #4]
 80099de:	b2da      	uxtb	r2, r3
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099e4:	1c58      	adds	r0, r3, #1
 80099e6:	6879      	ldr	r1, [r7, #4]
 80099e8:	6288      	str	r0, [r1, #40]	; 0x28
 80099ea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80099ee:	b2d2      	uxtb	r2, r2
 80099f0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80099f6:	b29b      	uxth	r3, r3
 80099f8:	3b01      	subs	r3, #1
 80099fa:	b29b      	uxth	r3, r3
 80099fc:	687a      	ldr	r2, [r7, #4]
 80099fe:	4619      	mov	r1, r3
 8009a00:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d120      	bne.n	8009a48 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	68da      	ldr	r2, [r3, #12]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f022 0220 	bic.w	r2, r2, #32
 8009a14:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	68da      	ldr	r2, [r3, #12]
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009a24:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	695a      	ldr	r2, [r3, #20]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f022 0201 	bic.w	r2, r2, #1
 8009a34:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2220      	movs	r2, #32
 8009a3a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f7f6 fd70 	bl	8000524 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8009a44:	2300      	movs	r3, #0
 8009a46:	e002      	b.n	8009a4e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	e000      	b.n	8009a4e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8009a4c:	2302      	movs	r3, #2
  }
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3710      	adds	r7, #16
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}
	...

08009a58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a5c:	b085      	sub	sp, #20
 8009a5e:	af00      	add	r7, sp, #0
 8009a60:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	691b      	ldr	r3, [r3, #16]
 8009a68:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	68da      	ldr	r2, [r3, #12]
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	430a      	orrs	r2, r1
 8009a76:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	689a      	ldr	r2, [r3, #8]
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	691b      	ldr	r3, [r3, #16]
 8009a80:	431a      	orrs	r2, r3
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	695b      	ldr	r3, [r3, #20]
 8009a86:	431a      	orrs	r2, r3
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	69db      	ldr	r3, [r3, #28]
 8009a8c:	4313      	orrs	r3, r2
 8009a8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	68db      	ldr	r3, [r3, #12]
 8009a96:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8009a9a:	f023 030c 	bic.w	r3, r3, #12
 8009a9e:	687a      	ldr	r2, [r7, #4]
 8009aa0:	6812      	ldr	r2, [r2, #0]
 8009aa2:	68f9      	ldr	r1, [r7, #12]
 8009aa4:	430b      	orrs	r3, r1
 8009aa6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	695b      	ldr	r3, [r3, #20]
 8009aae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	699a      	ldr	r2, [r3, #24]
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	430a      	orrs	r2, r1
 8009abc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	69db      	ldr	r3, [r3, #28]
 8009ac2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ac6:	f040 818b 	bne.w	8009de0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	4ac1      	ldr	r2, [pc, #772]	; (8009dd4 <UART_SetConfig+0x37c>)
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	d005      	beq.n	8009ae0 <UART_SetConfig+0x88>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	4abf      	ldr	r2, [pc, #764]	; (8009dd8 <UART_SetConfig+0x380>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	f040 80bd 	bne.w	8009c5a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009ae0:	f7fe f8d8 	bl	8007c94 <HAL_RCC_GetPCLK2Freq>
 8009ae4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	461d      	mov	r5, r3
 8009aea:	f04f 0600 	mov.w	r6, #0
 8009aee:	46a8      	mov	r8, r5
 8009af0:	46b1      	mov	r9, r6
 8009af2:	eb18 0308 	adds.w	r3, r8, r8
 8009af6:	eb49 0409 	adc.w	r4, r9, r9
 8009afa:	4698      	mov	r8, r3
 8009afc:	46a1      	mov	r9, r4
 8009afe:	eb18 0805 	adds.w	r8, r8, r5
 8009b02:	eb49 0906 	adc.w	r9, r9, r6
 8009b06:	f04f 0100 	mov.w	r1, #0
 8009b0a:	f04f 0200 	mov.w	r2, #0
 8009b0e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009b12:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009b16:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009b1a:	4688      	mov	r8, r1
 8009b1c:	4691      	mov	r9, r2
 8009b1e:	eb18 0005 	adds.w	r0, r8, r5
 8009b22:	eb49 0106 	adc.w	r1, r9, r6
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	685b      	ldr	r3, [r3, #4]
 8009b2a:	461d      	mov	r5, r3
 8009b2c:	f04f 0600 	mov.w	r6, #0
 8009b30:	196b      	adds	r3, r5, r5
 8009b32:	eb46 0406 	adc.w	r4, r6, r6
 8009b36:	461a      	mov	r2, r3
 8009b38:	4623      	mov	r3, r4
 8009b3a:	f7f6 fb5b 	bl	80001f4 <__aeabi_uldivmod>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	460c      	mov	r4, r1
 8009b42:	461a      	mov	r2, r3
 8009b44:	4ba5      	ldr	r3, [pc, #660]	; (8009ddc <UART_SetConfig+0x384>)
 8009b46:	fba3 2302 	umull	r2, r3, r3, r2
 8009b4a:	095b      	lsrs	r3, r3, #5
 8009b4c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	461d      	mov	r5, r3
 8009b54:	f04f 0600 	mov.w	r6, #0
 8009b58:	46a9      	mov	r9, r5
 8009b5a:	46b2      	mov	sl, r6
 8009b5c:	eb19 0309 	adds.w	r3, r9, r9
 8009b60:	eb4a 040a 	adc.w	r4, sl, sl
 8009b64:	4699      	mov	r9, r3
 8009b66:	46a2      	mov	sl, r4
 8009b68:	eb19 0905 	adds.w	r9, r9, r5
 8009b6c:	eb4a 0a06 	adc.w	sl, sl, r6
 8009b70:	f04f 0100 	mov.w	r1, #0
 8009b74:	f04f 0200 	mov.w	r2, #0
 8009b78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009b7c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009b80:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009b84:	4689      	mov	r9, r1
 8009b86:	4692      	mov	sl, r2
 8009b88:	eb19 0005 	adds.w	r0, r9, r5
 8009b8c:	eb4a 0106 	adc.w	r1, sl, r6
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	685b      	ldr	r3, [r3, #4]
 8009b94:	461d      	mov	r5, r3
 8009b96:	f04f 0600 	mov.w	r6, #0
 8009b9a:	196b      	adds	r3, r5, r5
 8009b9c:	eb46 0406 	adc.w	r4, r6, r6
 8009ba0:	461a      	mov	r2, r3
 8009ba2:	4623      	mov	r3, r4
 8009ba4:	f7f6 fb26 	bl	80001f4 <__aeabi_uldivmod>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	460c      	mov	r4, r1
 8009bac:	461a      	mov	r2, r3
 8009bae:	4b8b      	ldr	r3, [pc, #556]	; (8009ddc <UART_SetConfig+0x384>)
 8009bb0:	fba3 1302 	umull	r1, r3, r3, r2
 8009bb4:	095b      	lsrs	r3, r3, #5
 8009bb6:	2164      	movs	r1, #100	; 0x64
 8009bb8:	fb01 f303 	mul.w	r3, r1, r3
 8009bbc:	1ad3      	subs	r3, r2, r3
 8009bbe:	00db      	lsls	r3, r3, #3
 8009bc0:	3332      	adds	r3, #50	; 0x32
 8009bc2:	4a86      	ldr	r2, [pc, #536]	; (8009ddc <UART_SetConfig+0x384>)
 8009bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8009bc8:	095b      	lsrs	r3, r3, #5
 8009bca:	005b      	lsls	r3, r3, #1
 8009bcc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009bd0:	4498      	add	r8, r3
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	461d      	mov	r5, r3
 8009bd6:	f04f 0600 	mov.w	r6, #0
 8009bda:	46a9      	mov	r9, r5
 8009bdc:	46b2      	mov	sl, r6
 8009bde:	eb19 0309 	adds.w	r3, r9, r9
 8009be2:	eb4a 040a 	adc.w	r4, sl, sl
 8009be6:	4699      	mov	r9, r3
 8009be8:	46a2      	mov	sl, r4
 8009bea:	eb19 0905 	adds.w	r9, r9, r5
 8009bee:	eb4a 0a06 	adc.w	sl, sl, r6
 8009bf2:	f04f 0100 	mov.w	r1, #0
 8009bf6:	f04f 0200 	mov.w	r2, #0
 8009bfa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009bfe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009c02:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009c06:	4689      	mov	r9, r1
 8009c08:	4692      	mov	sl, r2
 8009c0a:	eb19 0005 	adds.w	r0, r9, r5
 8009c0e:	eb4a 0106 	adc.w	r1, sl, r6
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	685b      	ldr	r3, [r3, #4]
 8009c16:	461d      	mov	r5, r3
 8009c18:	f04f 0600 	mov.w	r6, #0
 8009c1c:	196b      	adds	r3, r5, r5
 8009c1e:	eb46 0406 	adc.w	r4, r6, r6
 8009c22:	461a      	mov	r2, r3
 8009c24:	4623      	mov	r3, r4
 8009c26:	f7f6 fae5 	bl	80001f4 <__aeabi_uldivmod>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	460c      	mov	r4, r1
 8009c2e:	461a      	mov	r2, r3
 8009c30:	4b6a      	ldr	r3, [pc, #424]	; (8009ddc <UART_SetConfig+0x384>)
 8009c32:	fba3 1302 	umull	r1, r3, r3, r2
 8009c36:	095b      	lsrs	r3, r3, #5
 8009c38:	2164      	movs	r1, #100	; 0x64
 8009c3a:	fb01 f303 	mul.w	r3, r1, r3
 8009c3e:	1ad3      	subs	r3, r2, r3
 8009c40:	00db      	lsls	r3, r3, #3
 8009c42:	3332      	adds	r3, #50	; 0x32
 8009c44:	4a65      	ldr	r2, [pc, #404]	; (8009ddc <UART_SetConfig+0x384>)
 8009c46:	fba2 2303 	umull	r2, r3, r2, r3
 8009c4a:	095b      	lsrs	r3, r3, #5
 8009c4c:	f003 0207 	and.w	r2, r3, #7
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	4442      	add	r2, r8
 8009c56:	609a      	str	r2, [r3, #8]
 8009c58:	e26f      	b.n	800a13a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009c5a:	f7fe f807 	bl	8007c6c <HAL_RCC_GetPCLK1Freq>
 8009c5e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	461d      	mov	r5, r3
 8009c64:	f04f 0600 	mov.w	r6, #0
 8009c68:	46a8      	mov	r8, r5
 8009c6a:	46b1      	mov	r9, r6
 8009c6c:	eb18 0308 	adds.w	r3, r8, r8
 8009c70:	eb49 0409 	adc.w	r4, r9, r9
 8009c74:	4698      	mov	r8, r3
 8009c76:	46a1      	mov	r9, r4
 8009c78:	eb18 0805 	adds.w	r8, r8, r5
 8009c7c:	eb49 0906 	adc.w	r9, r9, r6
 8009c80:	f04f 0100 	mov.w	r1, #0
 8009c84:	f04f 0200 	mov.w	r2, #0
 8009c88:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009c8c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009c90:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009c94:	4688      	mov	r8, r1
 8009c96:	4691      	mov	r9, r2
 8009c98:	eb18 0005 	adds.w	r0, r8, r5
 8009c9c:	eb49 0106 	adc.w	r1, r9, r6
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	461d      	mov	r5, r3
 8009ca6:	f04f 0600 	mov.w	r6, #0
 8009caa:	196b      	adds	r3, r5, r5
 8009cac:	eb46 0406 	adc.w	r4, r6, r6
 8009cb0:	461a      	mov	r2, r3
 8009cb2:	4623      	mov	r3, r4
 8009cb4:	f7f6 fa9e 	bl	80001f4 <__aeabi_uldivmod>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	460c      	mov	r4, r1
 8009cbc:	461a      	mov	r2, r3
 8009cbe:	4b47      	ldr	r3, [pc, #284]	; (8009ddc <UART_SetConfig+0x384>)
 8009cc0:	fba3 2302 	umull	r2, r3, r3, r2
 8009cc4:	095b      	lsrs	r3, r3, #5
 8009cc6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	461d      	mov	r5, r3
 8009cce:	f04f 0600 	mov.w	r6, #0
 8009cd2:	46a9      	mov	r9, r5
 8009cd4:	46b2      	mov	sl, r6
 8009cd6:	eb19 0309 	adds.w	r3, r9, r9
 8009cda:	eb4a 040a 	adc.w	r4, sl, sl
 8009cde:	4699      	mov	r9, r3
 8009ce0:	46a2      	mov	sl, r4
 8009ce2:	eb19 0905 	adds.w	r9, r9, r5
 8009ce6:	eb4a 0a06 	adc.w	sl, sl, r6
 8009cea:	f04f 0100 	mov.w	r1, #0
 8009cee:	f04f 0200 	mov.w	r2, #0
 8009cf2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009cf6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009cfa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009cfe:	4689      	mov	r9, r1
 8009d00:	4692      	mov	sl, r2
 8009d02:	eb19 0005 	adds.w	r0, r9, r5
 8009d06:	eb4a 0106 	adc.w	r1, sl, r6
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	685b      	ldr	r3, [r3, #4]
 8009d0e:	461d      	mov	r5, r3
 8009d10:	f04f 0600 	mov.w	r6, #0
 8009d14:	196b      	adds	r3, r5, r5
 8009d16:	eb46 0406 	adc.w	r4, r6, r6
 8009d1a:	461a      	mov	r2, r3
 8009d1c:	4623      	mov	r3, r4
 8009d1e:	f7f6 fa69 	bl	80001f4 <__aeabi_uldivmod>
 8009d22:	4603      	mov	r3, r0
 8009d24:	460c      	mov	r4, r1
 8009d26:	461a      	mov	r2, r3
 8009d28:	4b2c      	ldr	r3, [pc, #176]	; (8009ddc <UART_SetConfig+0x384>)
 8009d2a:	fba3 1302 	umull	r1, r3, r3, r2
 8009d2e:	095b      	lsrs	r3, r3, #5
 8009d30:	2164      	movs	r1, #100	; 0x64
 8009d32:	fb01 f303 	mul.w	r3, r1, r3
 8009d36:	1ad3      	subs	r3, r2, r3
 8009d38:	00db      	lsls	r3, r3, #3
 8009d3a:	3332      	adds	r3, #50	; 0x32
 8009d3c:	4a27      	ldr	r2, [pc, #156]	; (8009ddc <UART_SetConfig+0x384>)
 8009d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8009d42:	095b      	lsrs	r3, r3, #5
 8009d44:	005b      	lsls	r3, r3, #1
 8009d46:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009d4a:	4498      	add	r8, r3
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	461d      	mov	r5, r3
 8009d50:	f04f 0600 	mov.w	r6, #0
 8009d54:	46a9      	mov	r9, r5
 8009d56:	46b2      	mov	sl, r6
 8009d58:	eb19 0309 	adds.w	r3, r9, r9
 8009d5c:	eb4a 040a 	adc.w	r4, sl, sl
 8009d60:	4699      	mov	r9, r3
 8009d62:	46a2      	mov	sl, r4
 8009d64:	eb19 0905 	adds.w	r9, r9, r5
 8009d68:	eb4a 0a06 	adc.w	sl, sl, r6
 8009d6c:	f04f 0100 	mov.w	r1, #0
 8009d70:	f04f 0200 	mov.w	r2, #0
 8009d74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009d78:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009d7c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009d80:	4689      	mov	r9, r1
 8009d82:	4692      	mov	sl, r2
 8009d84:	eb19 0005 	adds.w	r0, r9, r5
 8009d88:	eb4a 0106 	adc.w	r1, sl, r6
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	685b      	ldr	r3, [r3, #4]
 8009d90:	461d      	mov	r5, r3
 8009d92:	f04f 0600 	mov.w	r6, #0
 8009d96:	196b      	adds	r3, r5, r5
 8009d98:	eb46 0406 	adc.w	r4, r6, r6
 8009d9c:	461a      	mov	r2, r3
 8009d9e:	4623      	mov	r3, r4
 8009da0:	f7f6 fa28 	bl	80001f4 <__aeabi_uldivmod>
 8009da4:	4603      	mov	r3, r0
 8009da6:	460c      	mov	r4, r1
 8009da8:	461a      	mov	r2, r3
 8009daa:	4b0c      	ldr	r3, [pc, #48]	; (8009ddc <UART_SetConfig+0x384>)
 8009dac:	fba3 1302 	umull	r1, r3, r3, r2
 8009db0:	095b      	lsrs	r3, r3, #5
 8009db2:	2164      	movs	r1, #100	; 0x64
 8009db4:	fb01 f303 	mul.w	r3, r1, r3
 8009db8:	1ad3      	subs	r3, r2, r3
 8009dba:	00db      	lsls	r3, r3, #3
 8009dbc:	3332      	adds	r3, #50	; 0x32
 8009dbe:	4a07      	ldr	r2, [pc, #28]	; (8009ddc <UART_SetConfig+0x384>)
 8009dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8009dc4:	095b      	lsrs	r3, r3, #5
 8009dc6:	f003 0207 	and.w	r2, r3, #7
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	4442      	add	r2, r8
 8009dd0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8009dd2:	e1b2      	b.n	800a13a <UART_SetConfig+0x6e2>
 8009dd4:	40011000 	.word	0x40011000
 8009dd8:	40011400 	.word	0x40011400
 8009ddc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	4ad7      	ldr	r2, [pc, #860]	; (800a144 <UART_SetConfig+0x6ec>)
 8009de6:	4293      	cmp	r3, r2
 8009de8:	d005      	beq.n	8009df6 <UART_SetConfig+0x39e>
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	4ad6      	ldr	r2, [pc, #856]	; (800a148 <UART_SetConfig+0x6f0>)
 8009df0:	4293      	cmp	r3, r2
 8009df2:	f040 80d1 	bne.w	8009f98 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8009df6:	f7fd ff4d 	bl	8007c94 <HAL_RCC_GetPCLK2Freq>
 8009dfa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	469a      	mov	sl, r3
 8009e00:	f04f 0b00 	mov.w	fp, #0
 8009e04:	46d0      	mov	r8, sl
 8009e06:	46d9      	mov	r9, fp
 8009e08:	eb18 0308 	adds.w	r3, r8, r8
 8009e0c:	eb49 0409 	adc.w	r4, r9, r9
 8009e10:	4698      	mov	r8, r3
 8009e12:	46a1      	mov	r9, r4
 8009e14:	eb18 080a 	adds.w	r8, r8, sl
 8009e18:	eb49 090b 	adc.w	r9, r9, fp
 8009e1c:	f04f 0100 	mov.w	r1, #0
 8009e20:	f04f 0200 	mov.w	r2, #0
 8009e24:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009e28:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009e2c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009e30:	4688      	mov	r8, r1
 8009e32:	4691      	mov	r9, r2
 8009e34:	eb1a 0508 	adds.w	r5, sl, r8
 8009e38:	eb4b 0609 	adc.w	r6, fp, r9
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	685b      	ldr	r3, [r3, #4]
 8009e40:	4619      	mov	r1, r3
 8009e42:	f04f 0200 	mov.w	r2, #0
 8009e46:	f04f 0300 	mov.w	r3, #0
 8009e4a:	f04f 0400 	mov.w	r4, #0
 8009e4e:	0094      	lsls	r4, r2, #2
 8009e50:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009e54:	008b      	lsls	r3, r1, #2
 8009e56:	461a      	mov	r2, r3
 8009e58:	4623      	mov	r3, r4
 8009e5a:	4628      	mov	r0, r5
 8009e5c:	4631      	mov	r1, r6
 8009e5e:	f7f6 f9c9 	bl	80001f4 <__aeabi_uldivmod>
 8009e62:	4603      	mov	r3, r0
 8009e64:	460c      	mov	r4, r1
 8009e66:	461a      	mov	r2, r3
 8009e68:	4bb8      	ldr	r3, [pc, #736]	; (800a14c <UART_SetConfig+0x6f4>)
 8009e6a:	fba3 2302 	umull	r2, r3, r3, r2
 8009e6e:	095b      	lsrs	r3, r3, #5
 8009e70:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	469b      	mov	fp, r3
 8009e78:	f04f 0c00 	mov.w	ip, #0
 8009e7c:	46d9      	mov	r9, fp
 8009e7e:	46e2      	mov	sl, ip
 8009e80:	eb19 0309 	adds.w	r3, r9, r9
 8009e84:	eb4a 040a 	adc.w	r4, sl, sl
 8009e88:	4699      	mov	r9, r3
 8009e8a:	46a2      	mov	sl, r4
 8009e8c:	eb19 090b 	adds.w	r9, r9, fp
 8009e90:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009e94:	f04f 0100 	mov.w	r1, #0
 8009e98:	f04f 0200 	mov.w	r2, #0
 8009e9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009ea0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009ea4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009ea8:	4689      	mov	r9, r1
 8009eaa:	4692      	mov	sl, r2
 8009eac:	eb1b 0509 	adds.w	r5, fp, r9
 8009eb0:	eb4c 060a 	adc.w	r6, ip, sl
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	685b      	ldr	r3, [r3, #4]
 8009eb8:	4619      	mov	r1, r3
 8009eba:	f04f 0200 	mov.w	r2, #0
 8009ebe:	f04f 0300 	mov.w	r3, #0
 8009ec2:	f04f 0400 	mov.w	r4, #0
 8009ec6:	0094      	lsls	r4, r2, #2
 8009ec8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009ecc:	008b      	lsls	r3, r1, #2
 8009ece:	461a      	mov	r2, r3
 8009ed0:	4623      	mov	r3, r4
 8009ed2:	4628      	mov	r0, r5
 8009ed4:	4631      	mov	r1, r6
 8009ed6:	f7f6 f98d 	bl	80001f4 <__aeabi_uldivmod>
 8009eda:	4603      	mov	r3, r0
 8009edc:	460c      	mov	r4, r1
 8009ede:	461a      	mov	r2, r3
 8009ee0:	4b9a      	ldr	r3, [pc, #616]	; (800a14c <UART_SetConfig+0x6f4>)
 8009ee2:	fba3 1302 	umull	r1, r3, r3, r2
 8009ee6:	095b      	lsrs	r3, r3, #5
 8009ee8:	2164      	movs	r1, #100	; 0x64
 8009eea:	fb01 f303 	mul.w	r3, r1, r3
 8009eee:	1ad3      	subs	r3, r2, r3
 8009ef0:	011b      	lsls	r3, r3, #4
 8009ef2:	3332      	adds	r3, #50	; 0x32
 8009ef4:	4a95      	ldr	r2, [pc, #596]	; (800a14c <UART_SetConfig+0x6f4>)
 8009ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8009efa:	095b      	lsrs	r3, r3, #5
 8009efc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009f00:	4498      	add	r8, r3
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	469b      	mov	fp, r3
 8009f06:	f04f 0c00 	mov.w	ip, #0
 8009f0a:	46d9      	mov	r9, fp
 8009f0c:	46e2      	mov	sl, ip
 8009f0e:	eb19 0309 	adds.w	r3, r9, r9
 8009f12:	eb4a 040a 	adc.w	r4, sl, sl
 8009f16:	4699      	mov	r9, r3
 8009f18:	46a2      	mov	sl, r4
 8009f1a:	eb19 090b 	adds.w	r9, r9, fp
 8009f1e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009f22:	f04f 0100 	mov.w	r1, #0
 8009f26:	f04f 0200 	mov.w	r2, #0
 8009f2a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009f2e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009f32:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009f36:	4689      	mov	r9, r1
 8009f38:	4692      	mov	sl, r2
 8009f3a:	eb1b 0509 	adds.w	r5, fp, r9
 8009f3e:	eb4c 060a 	adc.w	r6, ip, sl
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	685b      	ldr	r3, [r3, #4]
 8009f46:	4619      	mov	r1, r3
 8009f48:	f04f 0200 	mov.w	r2, #0
 8009f4c:	f04f 0300 	mov.w	r3, #0
 8009f50:	f04f 0400 	mov.w	r4, #0
 8009f54:	0094      	lsls	r4, r2, #2
 8009f56:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009f5a:	008b      	lsls	r3, r1, #2
 8009f5c:	461a      	mov	r2, r3
 8009f5e:	4623      	mov	r3, r4
 8009f60:	4628      	mov	r0, r5
 8009f62:	4631      	mov	r1, r6
 8009f64:	f7f6 f946 	bl	80001f4 <__aeabi_uldivmod>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	460c      	mov	r4, r1
 8009f6c:	461a      	mov	r2, r3
 8009f6e:	4b77      	ldr	r3, [pc, #476]	; (800a14c <UART_SetConfig+0x6f4>)
 8009f70:	fba3 1302 	umull	r1, r3, r3, r2
 8009f74:	095b      	lsrs	r3, r3, #5
 8009f76:	2164      	movs	r1, #100	; 0x64
 8009f78:	fb01 f303 	mul.w	r3, r1, r3
 8009f7c:	1ad3      	subs	r3, r2, r3
 8009f7e:	011b      	lsls	r3, r3, #4
 8009f80:	3332      	adds	r3, #50	; 0x32
 8009f82:	4a72      	ldr	r2, [pc, #456]	; (800a14c <UART_SetConfig+0x6f4>)
 8009f84:	fba2 2303 	umull	r2, r3, r2, r3
 8009f88:	095b      	lsrs	r3, r3, #5
 8009f8a:	f003 020f 	and.w	r2, r3, #15
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	4442      	add	r2, r8
 8009f94:	609a      	str	r2, [r3, #8]
 8009f96:	e0d0      	b.n	800a13a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8009f98:	f7fd fe68 	bl	8007c6c <HAL_RCC_GetPCLK1Freq>
 8009f9c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	469a      	mov	sl, r3
 8009fa2:	f04f 0b00 	mov.w	fp, #0
 8009fa6:	46d0      	mov	r8, sl
 8009fa8:	46d9      	mov	r9, fp
 8009faa:	eb18 0308 	adds.w	r3, r8, r8
 8009fae:	eb49 0409 	adc.w	r4, r9, r9
 8009fb2:	4698      	mov	r8, r3
 8009fb4:	46a1      	mov	r9, r4
 8009fb6:	eb18 080a 	adds.w	r8, r8, sl
 8009fba:	eb49 090b 	adc.w	r9, r9, fp
 8009fbe:	f04f 0100 	mov.w	r1, #0
 8009fc2:	f04f 0200 	mov.w	r2, #0
 8009fc6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009fca:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009fce:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009fd2:	4688      	mov	r8, r1
 8009fd4:	4691      	mov	r9, r2
 8009fd6:	eb1a 0508 	adds.w	r5, sl, r8
 8009fda:	eb4b 0609 	adc.w	r6, fp, r9
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	685b      	ldr	r3, [r3, #4]
 8009fe2:	4619      	mov	r1, r3
 8009fe4:	f04f 0200 	mov.w	r2, #0
 8009fe8:	f04f 0300 	mov.w	r3, #0
 8009fec:	f04f 0400 	mov.w	r4, #0
 8009ff0:	0094      	lsls	r4, r2, #2
 8009ff2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009ff6:	008b      	lsls	r3, r1, #2
 8009ff8:	461a      	mov	r2, r3
 8009ffa:	4623      	mov	r3, r4
 8009ffc:	4628      	mov	r0, r5
 8009ffe:	4631      	mov	r1, r6
 800a000:	f7f6 f8f8 	bl	80001f4 <__aeabi_uldivmod>
 800a004:	4603      	mov	r3, r0
 800a006:	460c      	mov	r4, r1
 800a008:	461a      	mov	r2, r3
 800a00a:	4b50      	ldr	r3, [pc, #320]	; (800a14c <UART_SetConfig+0x6f4>)
 800a00c:	fba3 2302 	umull	r2, r3, r3, r2
 800a010:	095b      	lsrs	r3, r3, #5
 800a012:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	469b      	mov	fp, r3
 800a01a:	f04f 0c00 	mov.w	ip, #0
 800a01e:	46d9      	mov	r9, fp
 800a020:	46e2      	mov	sl, ip
 800a022:	eb19 0309 	adds.w	r3, r9, r9
 800a026:	eb4a 040a 	adc.w	r4, sl, sl
 800a02a:	4699      	mov	r9, r3
 800a02c:	46a2      	mov	sl, r4
 800a02e:	eb19 090b 	adds.w	r9, r9, fp
 800a032:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a036:	f04f 0100 	mov.w	r1, #0
 800a03a:	f04f 0200 	mov.w	r2, #0
 800a03e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a042:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a046:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a04a:	4689      	mov	r9, r1
 800a04c:	4692      	mov	sl, r2
 800a04e:	eb1b 0509 	adds.w	r5, fp, r9
 800a052:	eb4c 060a 	adc.w	r6, ip, sl
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	685b      	ldr	r3, [r3, #4]
 800a05a:	4619      	mov	r1, r3
 800a05c:	f04f 0200 	mov.w	r2, #0
 800a060:	f04f 0300 	mov.w	r3, #0
 800a064:	f04f 0400 	mov.w	r4, #0
 800a068:	0094      	lsls	r4, r2, #2
 800a06a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a06e:	008b      	lsls	r3, r1, #2
 800a070:	461a      	mov	r2, r3
 800a072:	4623      	mov	r3, r4
 800a074:	4628      	mov	r0, r5
 800a076:	4631      	mov	r1, r6
 800a078:	f7f6 f8bc 	bl	80001f4 <__aeabi_uldivmod>
 800a07c:	4603      	mov	r3, r0
 800a07e:	460c      	mov	r4, r1
 800a080:	461a      	mov	r2, r3
 800a082:	4b32      	ldr	r3, [pc, #200]	; (800a14c <UART_SetConfig+0x6f4>)
 800a084:	fba3 1302 	umull	r1, r3, r3, r2
 800a088:	095b      	lsrs	r3, r3, #5
 800a08a:	2164      	movs	r1, #100	; 0x64
 800a08c:	fb01 f303 	mul.w	r3, r1, r3
 800a090:	1ad3      	subs	r3, r2, r3
 800a092:	011b      	lsls	r3, r3, #4
 800a094:	3332      	adds	r3, #50	; 0x32
 800a096:	4a2d      	ldr	r2, [pc, #180]	; (800a14c <UART_SetConfig+0x6f4>)
 800a098:	fba2 2303 	umull	r2, r3, r2, r3
 800a09c:	095b      	lsrs	r3, r3, #5
 800a09e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a0a2:	4498      	add	r8, r3
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	469b      	mov	fp, r3
 800a0a8:	f04f 0c00 	mov.w	ip, #0
 800a0ac:	46d9      	mov	r9, fp
 800a0ae:	46e2      	mov	sl, ip
 800a0b0:	eb19 0309 	adds.w	r3, r9, r9
 800a0b4:	eb4a 040a 	adc.w	r4, sl, sl
 800a0b8:	4699      	mov	r9, r3
 800a0ba:	46a2      	mov	sl, r4
 800a0bc:	eb19 090b 	adds.w	r9, r9, fp
 800a0c0:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a0c4:	f04f 0100 	mov.w	r1, #0
 800a0c8:	f04f 0200 	mov.w	r2, #0
 800a0cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a0d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a0d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a0d8:	4689      	mov	r9, r1
 800a0da:	4692      	mov	sl, r2
 800a0dc:	eb1b 0509 	adds.w	r5, fp, r9
 800a0e0:	eb4c 060a 	adc.w	r6, ip, sl
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	685b      	ldr	r3, [r3, #4]
 800a0e8:	4619      	mov	r1, r3
 800a0ea:	f04f 0200 	mov.w	r2, #0
 800a0ee:	f04f 0300 	mov.w	r3, #0
 800a0f2:	f04f 0400 	mov.w	r4, #0
 800a0f6:	0094      	lsls	r4, r2, #2
 800a0f8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a0fc:	008b      	lsls	r3, r1, #2
 800a0fe:	461a      	mov	r2, r3
 800a100:	4623      	mov	r3, r4
 800a102:	4628      	mov	r0, r5
 800a104:	4631      	mov	r1, r6
 800a106:	f7f6 f875 	bl	80001f4 <__aeabi_uldivmod>
 800a10a:	4603      	mov	r3, r0
 800a10c:	460c      	mov	r4, r1
 800a10e:	461a      	mov	r2, r3
 800a110:	4b0e      	ldr	r3, [pc, #56]	; (800a14c <UART_SetConfig+0x6f4>)
 800a112:	fba3 1302 	umull	r1, r3, r3, r2
 800a116:	095b      	lsrs	r3, r3, #5
 800a118:	2164      	movs	r1, #100	; 0x64
 800a11a:	fb01 f303 	mul.w	r3, r1, r3
 800a11e:	1ad3      	subs	r3, r2, r3
 800a120:	011b      	lsls	r3, r3, #4
 800a122:	3332      	adds	r3, #50	; 0x32
 800a124:	4a09      	ldr	r2, [pc, #36]	; (800a14c <UART_SetConfig+0x6f4>)
 800a126:	fba2 2303 	umull	r2, r3, r2, r3
 800a12a:	095b      	lsrs	r3, r3, #5
 800a12c:	f003 020f 	and.w	r2, r3, #15
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	4442      	add	r2, r8
 800a136:	609a      	str	r2, [r3, #8]
}
 800a138:	e7ff      	b.n	800a13a <UART_SetConfig+0x6e2>
 800a13a:	bf00      	nop
 800a13c:	3714      	adds	r7, #20
 800a13e:	46bd      	mov	sp, r7
 800a140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a144:	40011000 	.word	0x40011000
 800a148:	40011400 	.word	0x40011400
 800a14c:	51eb851f 	.word	0x51eb851f

0800a150 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a150:	b084      	sub	sp, #16
 800a152:	b580      	push	{r7, lr}
 800a154:	b084      	sub	sp, #16
 800a156:	af00      	add	r7, sp, #0
 800a158:	6078      	str	r0, [r7, #4]
 800a15a:	f107 001c 	add.w	r0, r7, #28
 800a15e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a164:	2b01      	cmp	r3, #1
 800a166:	d122      	bne.n	800a1ae <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a16c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	68db      	ldr	r3, [r3, #12]
 800a178:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a17c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a180:	687a      	ldr	r2, [r7, #4]
 800a182:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	68db      	ldr	r3, [r3, #12]
 800a188:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a190:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a192:	2b01      	cmp	r3, #1
 800a194:	d105      	bne.n	800a1a2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	68db      	ldr	r3, [r3, #12]
 800a19a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f001 fac6 	bl	800b734 <USB_CoreReset>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	73fb      	strb	r3, [r7, #15]
 800a1ac:	e01a      	b.n	800a1e4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	68db      	ldr	r3, [r3, #12]
 800a1b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f001 faba 	bl	800b734 <USB_CoreReset>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a1c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d106      	bne.n	800a1d8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1ce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	639a      	str	r2, [r3, #56]	; 0x38
 800a1d6:	e005      	b.n	800a1e4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a1e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1e6:	2b01      	cmp	r3, #1
 800a1e8:	d10b      	bne.n	800a202 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	689b      	ldr	r3, [r3, #8]
 800a1ee:	f043 0206 	orr.w	r2, r3, #6
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	689b      	ldr	r3, [r3, #8]
 800a1fa:	f043 0220 	orr.w	r2, r3, #32
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a202:	7bfb      	ldrb	r3, [r7, #15]
}
 800a204:	4618      	mov	r0, r3
 800a206:	3710      	adds	r7, #16
 800a208:	46bd      	mov	sp, r7
 800a20a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a20e:	b004      	add	sp, #16
 800a210:	4770      	bx	lr
	...

0800a214 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a214:	b480      	push	{r7}
 800a216:	b087      	sub	sp, #28
 800a218:	af00      	add	r7, sp, #0
 800a21a:	60f8      	str	r0, [r7, #12]
 800a21c:	60b9      	str	r1, [r7, #8]
 800a21e:	4613      	mov	r3, r2
 800a220:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a222:	79fb      	ldrb	r3, [r7, #7]
 800a224:	2b02      	cmp	r3, #2
 800a226:	d165      	bne.n	800a2f4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	4a41      	ldr	r2, [pc, #260]	; (800a330 <USB_SetTurnaroundTime+0x11c>)
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d906      	bls.n	800a23e <USB_SetTurnaroundTime+0x2a>
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	4a40      	ldr	r2, [pc, #256]	; (800a334 <USB_SetTurnaroundTime+0x120>)
 800a234:	4293      	cmp	r3, r2
 800a236:	d802      	bhi.n	800a23e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a238:	230f      	movs	r3, #15
 800a23a:	617b      	str	r3, [r7, #20]
 800a23c:	e062      	b.n	800a304 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	4a3c      	ldr	r2, [pc, #240]	; (800a334 <USB_SetTurnaroundTime+0x120>)
 800a242:	4293      	cmp	r3, r2
 800a244:	d906      	bls.n	800a254 <USB_SetTurnaroundTime+0x40>
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	4a3b      	ldr	r2, [pc, #236]	; (800a338 <USB_SetTurnaroundTime+0x124>)
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d802      	bhi.n	800a254 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a24e:	230e      	movs	r3, #14
 800a250:	617b      	str	r3, [r7, #20]
 800a252:	e057      	b.n	800a304 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	4a38      	ldr	r2, [pc, #224]	; (800a338 <USB_SetTurnaroundTime+0x124>)
 800a258:	4293      	cmp	r3, r2
 800a25a:	d906      	bls.n	800a26a <USB_SetTurnaroundTime+0x56>
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	4a37      	ldr	r2, [pc, #220]	; (800a33c <USB_SetTurnaroundTime+0x128>)
 800a260:	4293      	cmp	r3, r2
 800a262:	d802      	bhi.n	800a26a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a264:	230d      	movs	r3, #13
 800a266:	617b      	str	r3, [r7, #20]
 800a268:	e04c      	b.n	800a304 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	4a33      	ldr	r2, [pc, #204]	; (800a33c <USB_SetTurnaroundTime+0x128>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	d906      	bls.n	800a280 <USB_SetTurnaroundTime+0x6c>
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	4a32      	ldr	r2, [pc, #200]	; (800a340 <USB_SetTurnaroundTime+0x12c>)
 800a276:	4293      	cmp	r3, r2
 800a278:	d802      	bhi.n	800a280 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a27a:	230c      	movs	r3, #12
 800a27c:	617b      	str	r3, [r7, #20]
 800a27e:	e041      	b.n	800a304 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	4a2f      	ldr	r2, [pc, #188]	; (800a340 <USB_SetTurnaroundTime+0x12c>)
 800a284:	4293      	cmp	r3, r2
 800a286:	d906      	bls.n	800a296 <USB_SetTurnaroundTime+0x82>
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	4a2e      	ldr	r2, [pc, #184]	; (800a344 <USB_SetTurnaroundTime+0x130>)
 800a28c:	4293      	cmp	r3, r2
 800a28e:	d802      	bhi.n	800a296 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a290:	230b      	movs	r3, #11
 800a292:	617b      	str	r3, [r7, #20]
 800a294:	e036      	b.n	800a304 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	4a2a      	ldr	r2, [pc, #168]	; (800a344 <USB_SetTurnaroundTime+0x130>)
 800a29a:	4293      	cmp	r3, r2
 800a29c:	d906      	bls.n	800a2ac <USB_SetTurnaroundTime+0x98>
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	4a29      	ldr	r2, [pc, #164]	; (800a348 <USB_SetTurnaroundTime+0x134>)
 800a2a2:	4293      	cmp	r3, r2
 800a2a4:	d802      	bhi.n	800a2ac <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a2a6:	230a      	movs	r3, #10
 800a2a8:	617b      	str	r3, [r7, #20]
 800a2aa:	e02b      	b.n	800a304 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	4a26      	ldr	r2, [pc, #152]	; (800a348 <USB_SetTurnaroundTime+0x134>)
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d906      	bls.n	800a2c2 <USB_SetTurnaroundTime+0xae>
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	4a25      	ldr	r2, [pc, #148]	; (800a34c <USB_SetTurnaroundTime+0x138>)
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	d802      	bhi.n	800a2c2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a2bc:	2309      	movs	r3, #9
 800a2be:	617b      	str	r3, [r7, #20]
 800a2c0:	e020      	b.n	800a304 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	4a21      	ldr	r2, [pc, #132]	; (800a34c <USB_SetTurnaroundTime+0x138>)
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	d906      	bls.n	800a2d8 <USB_SetTurnaroundTime+0xc4>
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	4a20      	ldr	r2, [pc, #128]	; (800a350 <USB_SetTurnaroundTime+0x13c>)
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	d802      	bhi.n	800a2d8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a2d2:	2308      	movs	r3, #8
 800a2d4:	617b      	str	r3, [r7, #20]
 800a2d6:	e015      	b.n	800a304 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	4a1d      	ldr	r2, [pc, #116]	; (800a350 <USB_SetTurnaroundTime+0x13c>)
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d906      	bls.n	800a2ee <USB_SetTurnaroundTime+0xda>
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	4a1c      	ldr	r2, [pc, #112]	; (800a354 <USB_SetTurnaroundTime+0x140>)
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d802      	bhi.n	800a2ee <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a2e8:	2307      	movs	r3, #7
 800a2ea:	617b      	str	r3, [r7, #20]
 800a2ec:	e00a      	b.n	800a304 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a2ee:	2306      	movs	r3, #6
 800a2f0:	617b      	str	r3, [r7, #20]
 800a2f2:	e007      	b.n	800a304 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a2f4:	79fb      	ldrb	r3, [r7, #7]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d102      	bne.n	800a300 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a2fa:	2309      	movs	r3, #9
 800a2fc:	617b      	str	r3, [r7, #20]
 800a2fe:	e001      	b.n	800a304 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a300:	2309      	movs	r3, #9
 800a302:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	68db      	ldr	r3, [r3, #12]
 800a308:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	68da      	ldr	r2, [r3, #12]
 800a314:	697b      	ldr	r3, [r7, #20]
 800a316:	029b      	lsls	r3, r3, #10
 800a318:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a31c:	431a      	orrs	r2, r3
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a322:	2300      	movs	r3, #0
}
 800a324:	4618      	mov	r0, r3
 800a326:	371c      	adds	r7, #28
 800a328:	46bd      	mov	sp, r7
 800a32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32e:	4770      	bx	lr
 800a330:	00d8acbf 	.word	0x00d8acbf
 800a334:	00e4e1bf 	.word	0x00e4e1bf
 800a338:	00f423ff 	.word	0x00f423ff
 800a33c:	0106737f 	.word	0x0106737f
 800a340:	011a499f 	.word	0x011a499f
 800a344:	01312cff 	.word	0x01312cff
 800a348:	014ca43f 	.word	0x014ca43f
 800a34c:	016e35ff 	.word	0x016e35ff
 800a350:	01a6ab1f 	.word	0x01a6ab1f
 800a354:	01e847ff 	.word	0x01e847ff

0800a358 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a358:	b480      	push	{r7}
 800a35a:	b083      	sub	sp, #12
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	689b      	ldr	r3, [r3, #8]
 800a364:	f043 0201 	orr.w	r2, r3, #1
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a36c:	2300      	movs	r3, #0
}
 800a36e:	4618      	mov	r0, r3
 800a370:	370c      	adds	r7, #12
 800a372:	46bd      	mov	sp, r7
 800a374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a378:	4770      	bx	lr

0800a37a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a37a:	b480      	push	{r7}
 800a37c:	b083      	sub	sp, #12
 800a37e:	af00      	add	r7, sp, #0
 800a380:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	689b      	ldr	r3, [r3, #8]
 800a386:	f023 0201 	bic.w	r2, r3, #1
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a38e:	2300      	movs	r3, #0
}
 800a390:	4618      	mov	r0, r3
 800a392:	370c      	adds	r7, #12
 800a394:	46bd      	mov	sp, r7
 800a396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39a:	4770      	bx	lr

0800a39c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b082      	sub	sp, #8
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
 800a3a4:	460b      	mov	r3, r1
 800a3a6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	68db      	ldr	r3, [r3, #12]
 800a3ac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a3b4:	78fb      	ldrb	r3, [r7, #3]
 800a3b6:	2b01      	cmp	r3, #1
 800a3b8:	d106      	bne.n	800a3c8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	68db      	ldr	r3, [r3, #12]
 800a3be:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	60da      	str	r2, [r3, #12]
 800a3c6:	e00b      	b.n	800a3e0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800a3c8:	78fb      	ldrb	r3, [r7, #3]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d106      	bne.n	800a3dc <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	68db      	ldr	r3, [r3, #12]
 800a3d2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	60da      	str	r2, [r3, #12]
 800a3da:	e001      	b.n	800a3e0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800a3dc:	2301      	movs	r3, #1
 800a3de:	e003      	b.n	800a3e8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800a3e0:	2032      	movs	r0, #50	; 0x32
 800a3e2:	f7f7 fe19 	bl	8002018 <HAL_Delay>

  return HAL_OK;
 800a3e6:	2300      	movs	r3, #0
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	3708      	adds	r7, #8
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}

0800a3f0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a3f0:	b084      	sub	sp, #16
 800a3f2:	b580      	push	{r7, lr}
 800a3f4:	b086      	sub	sp, #24
 800a3f6:	af00      	add	r7, sp, #0
 800a3f8:	6078      	str	r0, [r7, #4]
 800a3fa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a3fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a402:	2300      	movs	r3, #0
 800a404:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a40a:	2300      	movs	r3, #0
 800a40c:	613b      	str	r3, [r7, #16]
 800a40e:	e009      	b.n	800a424 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a410:	687a      	ldr	r2, [r7, #4]
 800a412:	693b      	ldr	r3, [r7, #16]
 800a414:	3340      	adds	r3, #64	; 0x40
 800a416:	009b      	lsls	r3, r3, #2
 800a418:	4413      	add	r3, r2
 800a41a:	2200      	movs	r2, #0
 800a41c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a41e:	693b      	ldr	r3, [r7, #16]
 800a420:	3301      	adds	r3, #1
 800a422:	613b      	str	r3, [r7, #16]
 800a424:	693b      	ldr	r3, [r7, #16]
 800a426:	2b0e      	cmp	r3, #14
 800a428:	d9f2      	bls.n	800a410 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a42a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d11c      	bne.n	800a46a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a436:	685b      	ldr	r3, [r3, #4]
 800a438:	68fa      	ldr	r2, [r7, #12]
 800a43a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a43e:	f043 0302 	orr.w	r3, r3, #2
 800a442:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a448:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a454:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a460:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	639a      	str	r2, [r3, #56]	; 0x38
 800a468:	e00b      	b.n	800a482 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a46e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a47a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a488:	461a      	mov	r2, r3
 800a48a:	2300      	movs	r3, #0
 800a48c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a494:	4619      	mov	r1, r3
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a49c:	461a      	mov	r2, r3
 800a49e:	680b      	ldr	r3, [r1, #0]
 800a4a0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a4a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4a4:	2b01      	cmp	r3, #1
 800a4a6:	d10c      	bne.n	800a4c2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a4a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d104      	bne.n	800a4b8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a4ae:	2100      	movs	r1, #0
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	f000 f949 	bl	800a748 <USB_SetDevSpeed>
 800a4b6:	e008      	b.n	800a4ca <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a4b8:	2101      	movs	r1, #1
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f000 f944 	bl	800a748 <USB_SetDevSpeed>
 800a4c0:	e003      	b.n	800a4ca <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a4c2:	2103      	movs	r1, #3
 800a4c4:	6878      	ldr	r0, [r7, #4]
 800a4c6:	f000 f93f 	bl	800a748 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a4ca:	2110      	movs	r1, #16
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f000 f8f3 	bl	800a6b8 <USB_FlushTxFifo>
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d001      	beq.n	800a4dc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800a4d8:	2301      	movs	r3, #1
 800a4da:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f000 f911 	bl	800a704 <USB_FlushRxFifo>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d001      	beq.n	800a4ec <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800a4e8:	2301      	movs	r3, #1
 800a4ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4f2:	461a      	mov	r2, r3
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4fe:	461a      	mov	r2, r3
 800a500:	2300      	movs	r3, #0
 800a502:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a50a:	461a      	mov	r2, r3
 800a50c:	2300      	movs	r3, #0
 800a50e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a510:	2300      	movs	r3, #0
 800a512:	613b      	str	r3, [r7, #16]
 800a514:	e043      	b.n	800a59e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a516:	693b      	ldr	r3, [r7, #16]
 800a518:	015a      	lsls	r2, r3, #5
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	4413      	add	r3, r2
 800a51e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a528:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a52c:	d118      	bne.n	800a560 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d10a      	bne.n	800a54a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a534:	693b      	ldr	r3, [r7, #16]
 800a536:	015a      	lsls	r2, r3, #5
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	4413      	add	r3, r2
 800a53c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a540:	461a      	mov	r2, r3
 800a542:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a546:	6013      	str	r3, [r2, #0]
 800a548:	e013      	b.n	800a572 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a54a:	693b      	ldr	r3, [r7, #16]
 800a54c:	015a      	lsls	r2, r3, #5
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	4413      	add	r3, r2
 800a552:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a556:	461a      	mov	r2, r3
 800a558:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a55c:	6013      	str	r3, [r2, #0]
 800a55e:	e008      	b.n	800a572 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	015a      	lsls	r2, r3, #5
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	4413      	add	r3, r2
 800a568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a56c:	461a      	mov	r2, r3
 800a56e:	2300      	movs	r3, #0
 800a570:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a572:	693b      	ldr	r3, [r7, #16]
 800a574:	015a      	lsls	r2, r3, #5
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	4413      	add	r3, r2
 800a57a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a57e:	461a      	mov	r2, r3
 800a580:	2300      	movs	r3, #0
 800a582:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	015a      	lsls	r2, r3, #5
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	4413      	add	r3, r2
 800a58c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a590:	461a      	mov	r2, r3
 800a592:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a596:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a598:	693b      	ldr	r3, [r7, #16]
 800a59a:	3301      	adds	r3, #1
 800a59c:	613b      	str	r3, [r7, #16]
 800a59e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a0:	693a      	ldr	r2, [r7, #16]
 800a5a2:	429a      	cmp	r2, r3
 800a5a4:	d3b7      	bcc.n	800a516 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	613b      	str	r3, [r7, #16]
 800a5aa:	e043      	b.n	800a634 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	015a      	lsls	r2, r3, #5
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	4413      	add	r3, r2
 800a5b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a5be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a5c2:	d118      	bne.n	800a5f6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800a5c4:	693b      	ldr	r3, [r7, #16]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d10a      	bne.n	800a5e0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a5ca:	693b      	ldr	r3, [r7, #16]
 800a5cc:	015a      	lsls	r2, r3, #5
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	4413      	add	r3, r2
 800a5d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5d6:	461a      	mov	r2, r3
 800a5d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a5dc:	6013      	str	r3, [r2, #0]
 800a5de:	e013      	b.n	800a608 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	015a      	lsls	r2, r3, #5
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	4413      	add	r3, r2
 800a5e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5ec:	461a      	mov	r2, r3
 800a5ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a5f2:	6013      	str	r3, [r2, #0]
 800a5f4:	e008      	b.n	800a608 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a5f6:	693b      	ldr	r3, [r7, #16]
 800a5f8:	015a      	lsls	r2, r3, #5
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	4413      	add	r3, r2
 800a5fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a602:	461a      	mov	r2, r3
 800a604:	2300      	movs	r3, #0
 800a606:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	015a      	lsls	r2, r3, #5
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	4413      	add	r3, r2
 800a610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a614:	461a      	mov	r2, r3
 800a616:	2300      	movs	r3, #0
 800a618:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a61a:	693b      	ldr	r3, [r7, #16]
 800a61c:	015a      	lsls	r2, r3, #5
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	4413      	add	r3, r2
 800a622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a626:	461a      	mov	r2, r3
 800a628:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a62c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a62e:	693b      	ldr	r3, [r7, #16]
 800a630:	3301      	adds	r3, #1
 800a632:	613b      	str	r3, [r7, #16]
 800a634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a636:	693a      	ldr	r2, [r7, #16]
 800a638:	429a      	cmp	r2, r3
 800a63a:	d3b7      	bcc.n	800a5ac <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a642:	691b      	ldr	r3, [r3, #16]
 800a644:	68fa      	ldr	r2, [r7, #12]
 800a646:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a64a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a64e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2200      	movs	r2, #0
 800a654:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a65c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a65e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a660:	2b00      	cmp	r3, #0
 800a662:	d105      	bne.n	800a670 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	699b      	ldr	r3, [r3, #24]
 800a668:	f043 0210 	orr.w	r2, r3, #16
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	699a      	ldr	r2, [r3, #24]
 800a674:	4b0f      	ldr	r3, [pc, #60]	; (800a6b4 <USB_DevInit+0x2c4>)
 800a676:	4313      	orrs	r3, r2
 800a678:	687a      	ldr	r2, [r7, #4]
 800a67a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a67c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d005      	beq.n	800a68e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	699b      	ldr	r3, [r3, #24]
 800a686:	f043 0208 	orr.w	r2, r3, #8
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a68e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a690:	2b01      	cmp	r3, #1
 800a692:	d107      	bne.n	800a6a4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	699b      	ldr	r3, [r3, #24]
 800a698:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a69c:	f043 0304 	orr.w	r3, r3, #4
 800a6a0:	687a      	ldr	r2, [r7, #4]
 800a6a2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a6a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	3718      	adds	r7, #24
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a6b0:	b004      	add	sp, #16
 800a6b2:	4770      	bx	lr
 800a6b4:	803c3800 	.word	0x803c3800

0800a6b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b085      	sub	sp, #20
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
 800a6c0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	019b      	lsls	r3, r3, #6
 800a6ca:	f043 0220 	orr.w	r2, r3, #32
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	3301      	adds	r3, #1
 800a6d6:	60fb      	str	r3, [r7, #12]
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	4a09      	ldr	r2, [pc, #36]	; (800a700 <USB_FlushTxFifo+0x48>)
 800a6dc:	4293      	cmp	r3, r2
 800a6de:	d901      	bls.n	800a6e4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a6e0:	2303      	movs	r3, #3
 800a6e2:	e006      	b.n	800a6f2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	691b      	ldr	r3, [r3, #16]
 800a6e8:	f003 0320 	and.w	r3, r3, #32
 800a6ec:	2b20      	cmp	r3, #32
 800a6ee:	d0f0      	beq.n	800a6d2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a6f0:	2300      	movs	r3, #0
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3714      	adds	r7, #20
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fc:	4770      	bx	lr
 800a6fe:	bf00      	nop
 800a700:	00030d40 	.word	0x00030d40

0800a704 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a704:	b480      	push	{r7}
 800a706:	b085      	sub	sp, #20
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800a70c:	2300      	movs	r3, #0
 800a70e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2210      	movs	r2, #16
 800a714:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	3301      	adds	r3, #1
 800a71a:	60fb      	str	r3, [r7, #12]
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	4a09      	ldr	r2, [pc, #36]	; (800a744 <USB_FlushRxFifo+0x40>)
 800a720:	4293      	cmp	r3, r2
 800a722:	d901      	bls.n	800a728 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800a724:	2303      	movs	r3, #3
 800a726:	e006      	b.n	800a736 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	691b      	ldr	r3, [r3, #16]
 800a72c:	f003 0310 	and.w	r3, r3, #16
 800a730:	2b10      	cmp	r3, #16
 800a732:	d0f0      	beq.n	800a716 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a734:	2300      	movs	r3, #0
}
 800a736:	4618      	mov	r0, r3
 800a738:	3714      	adds	r7, #20
 800a73a:	46bd      	mov	sp, r7
 800a73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a740:	4770      	bx	lr
 800a742:	bf00      	nop
 800a744:	00030d40 	.word	0x00030d40

0800a748 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a748:	b480      	push	{r7}
 800a74a:	b085      	sub	sp, #20
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	460b      	mov	r3, r1
 800a752:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a75e:	681a      	ldr	r2, [r3, #0]
 800a760:	78fb      	ldrb	r3, [r7, #3]
 800a762:	68f9      	ldr	r1, [r7, #12]
 800a764:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a768:	4313      	orrs	r3, r2
 800a76a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a76c:	2300      	movs	r3, #0
}
 800a76e:	4618      	mov	r0, r3
 800a770:	3714      	adds	r7, #20
 800a772:	46bd      	mov	sp, r7
 800a774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a778:	4770      	bx	lr

0800a77a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a77a:	b480      	push	{r7}
 800a77c:	b087      	sub	sp, #28
 800a77e:	af00      	add	r7, sp, #0
 800a780:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a786:	693b      	ldr	r3, [r7, #16]
 800a788:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a78c:	689b      	ldr	r3, [r3, #8]
 800a78e:	f003 0306 	and.w	r3, r3, #6
 800a792:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d102      	bne.n	800a7a0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a79a:	2300      	movs	r3, #0
 800a79c:	75fb      	strb	r3, [r7, #23]
 800a79e:	e00a      	b.n	800a7b6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	2b02      	cmp	r3, #2
 800a7a4:	d002      	beq.n	800a7ac <USB_GetDevSpeed+0x32>
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	2b06      	cmp	r3, #6
 800a7aa:	d102      	bne.n	800a7b2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a7ac:	2302      	movs	r3, #2
 800a7ae:	75fb      	strb	r3, [r7, #23]
 800a7b0:	e001      	b.n	800a7b6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a7b2:	230f      	movs	r3, #15
 800a7b4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a7b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	371c      	adds	r7, #28
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c2:	4770      	bx	lr

0800a7c4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b085      	sub	sp, #20
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
 800a7cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	781b      	ldrb	r3, [r3, #0]
 800a7d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	785b      	ldrb	r3, [r3, #1]
 800a7dc:	2b01      	cmp	r3, #1
 800a7de:	d13a      	bne.n	800a856 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7e6:	69da      	ldr	r2, [r3, #28]
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	781b      	ldrb	r3, [r3, #0]
 800a7ec:	f003 030f 	and.w	r3, r3, #15
 800a7f0:	2101      	movs	r1, #1
 800a7f2:	fa01 f303 	lsl.w	r3, r1, r3
 800a7f6:	b29b      	uxth	r3, r3
 800a7f8:	68f9      	ldr	r1, [r7, #12]
 800a7fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a7fe:	4313      	orrs	r3, r2
 800a800:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a802:	68bb      	ldr	r3, [r7, #8]
 800a804:	015a      	lsls	r2, r3, #5
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	4413      	add	r3, r2
 800a80a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a814:	2b00      	cmp	r3, #0
 800a816:	d155      	bne.n	800a8c4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a818:	68bb      	ldr	r3, [r7, #8]
 800a81a:	015a      	lsls	r2, r3, #5
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	4413      	add	r3, r2
 800a820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a824:	681a      	ldr	r2, [r3, #0]
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	689b      	ldr	r3, [r3, #8]
 800a82a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	78db      	ldrb	r3, [r3, #3]
 800a832:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a834:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	059b      	lsls	r3, r3, #22
 800a83a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a83c:	4313      	orrs	r3, r2
 800a83e:	68ba      	ldr	r2, [r7, #8]
 800a840:	0151      	lsls	r1, r2, #5
 800a842:	68fa      	ldr	r2, [r7, #12]
 800a844:	440a      	add	r2, r1
 800a846:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a84a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a84e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a852:	6013      	str	r3, [r2, #0]
 800a854:	e036      	b.n	800a8c4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a85c:	69da      	ldr	r2, [r3, #28]
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	781b      	ldrb	r3, [r3, #0]
 800a862:	f003 030f 	and.w	r3, r3, #15
 800a866:	2101      	movs	r1, #1
 800a868:	fa01 f303 	lsl.w	r3, r1, r3
 800a86c:	041b      	lsls	r3, r3, #16
 800a86e:	68f9      	ldr	r1, [r7, #12]
 800a870:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a874:	4313      	orrs	r3, r2
 800a876:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	015a      	lsls	r2, r3, #5
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	4413      	add	r3, r2
 800a880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d11a      	bne.n	800a8c4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	015a      	lsls	r2, r3, #5
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	4413      	add	r3, r2
 800a896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a89a:	681a      	ldr	r2, [r3, #0]
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	689b      	ldr	r3, [r3, #8]
 800a8a0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	78db      	ldrb	r3, [r3, #3]
 800a8a8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a8aa:	430b      	orrs	r3, r1
 800a8ac:	4313      	orrs	r3, r2
 800a8ae:	68ba      	ldr	r2, [r7, #8]
 800a8b0:	0151      	lsls	r1, r2, #5
 800a8b2:	68fa      	ldr	r2, [r7, #12]
 800a8b4:	440a      	add	r2, r1
 800a8b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a8ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a8be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a8c2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a8c4:	2300      	movs	r3, #0
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	3714      	adds	r7, #20
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d0:	4770      	bx	lr
	...

0800a8d4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b085      	sub	sp, #20
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
 800a8dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	781b      	ldrb	r3, [r3, #0]
 800a8e6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	785b      	ldrb	r3, [r3, #1]
 800a8ec:	2b01      	cmp	r3, #1
 800a8ee:	d161      	bne.n	800a9b4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	015a      	lsls	r2, r3, #5
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	4413      	add	r3, r2
 800a8f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a902:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a906:	d11f      	bne.n	800a948 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	015a      	lsls	r2, r3, #5
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	4413      	add	r3, r2
 800a910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	68ba      	ldr	r2, [r7, #8]
 800a918:	0151      	lsls	r1, r2, #5
 800a91a:	68fa      	ldr	r2, [r7, #12]
 800a91c:	440a      	add	r2, r1
 800a91e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a922:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a926:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a928:	68bb      	ldr	r3, [r7, #8]
 800a92a:	015a      	lsls	r2, r3, #5
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	4413      	add	r3, r2
 800a930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	68ba      	ldr	r2, [r7, #8]
 800a938:	0151      	lsls	r1, r2, #5
 800a93a:	68fa      	ldr	r2, [r7, #12]
 800a93c:	440a      	add	r2, r1
 800a93e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a942:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a946:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a94e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	781b      	ldrb	r3, [r3, #0]
 800a954:	f003 030f 	and.w	r3, r3, #15
 800a958:	2101      	movs	r1, #1
 800a95a:	fa01 f303 	lsl.w	r3, r1, r3
 800a95e:	b29b      	uxth	r3, r3
 800a960:	43db      	mvns	r3, r3
 800a962:	68f9      	ldr	r1, [r7, #12]
 800a964:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a968:	4013      	ands	r3, r2
 800a96a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a972:	69da      	ldr	r2, [r3, #28]
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	781b      	ldrb	r3, [r3, #0]
 800a978:	f003 030f 	and.w	r3, r3, #15
 800a97c:	2101      	movs	r1, #1
 800a97e:	fa01 f303 	lsl.w	r3, r1, r3
 800a982:	b29b      	uxth	r3, r3
 800a984:	43db      	mvns	r3, r3
 800a986:	68f9      	ldr	r1, [r7, #12]
 800a988:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a98c:	4013      	ands	r3, r2
 800a98e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	015a      	lsls	r2, r3, #5
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	4413      	add	r3, r2
 800a998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a99c:	681a      	ldr	r2, [r3, #0]
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	0159      	lsls	r1, r3, #5
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	440b      	add	r3, r1
 800a9a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9aa:	4619      	mov	r1, r3
 800a9ac:	4b35      	ldr	r3, [pc, #212]	; (800aa84 <USB_DeactivateEndpoint+0x1b0>)
 800a9ae:	4013      	ands	r3, r2
 800a9b0:	600b      	str	r3, [r1, #0]
 800a9b2:	e060      	b.n	800aa76 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	015a      	lsls	r2, r3, #5
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	4413      	add	r3, r2
 800a9bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a9c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a9ca:	d11f      	bne.n	800aa0c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	015a      	lsls	r2, r3, #5
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	4413      	add	r3, r2
 800a9d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	68ba      	ldr	r2, [r7, #8]
 800a9dc:	0151      	lsls	r1, r2, #5
 800a9de:	68fa      	ldr	r2, [r7, #12]
 800a9e0:	440a      	add	r2, r1
 800a9e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a9ea:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	015a      	lsls	r2, r3, #5
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	4413      	add	r3, r2
 800a9f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	68ba      	ldr	r2, [r7, #8]
 800a9fc:	0151      	lsls	r1, r2, #5
 800a9fe:	68fa      	ldr	r2, [r7, #12]
 800aa00:	440a      	add	r2, r1
 800aa02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa06:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aa0a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	781b      	ldrb	r3, [r3, #0]
 800aa18:	f003 030f 	and.w	r3, r3, #15
 800aa1c:	2101      	movs	r1, #1
 800aa1e:	fa01 f303 	lsl.w	r3, r1, r3
 800aa22:	041b      	lsls	r3, r3, #16
 800aa24:	43db      	mvns	r3, r3
 800aa26:	68f9      	ldr	r1, [r7, #12]
 800aa28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aa2c:	4013      	ands	r3, r2
 800aa2e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa36:	69da      	ldr	r2, [r3, #28]
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	781b      	ldrb	r3, [r3, #0]
 800aa3c:	f003 030f 	and.w	r3, r3, #15
 800aa40:	2101      	movs	r1, #1
 800aa42:	fa01 f303 	lsl.w	r3, r1, r3
 800aa46:	041b      	lsls	r3, r3, #16
 800aa48:	43db      	mvns	r3, r3
 800aa4a:	68f9      	ldr	r1, [r7, #12]
 800aa4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aa50:	4013      	ands	r3, r2
 800aa52:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800aa54:	68bb      	ldr	r3, [r7, #8]
 800aa56:	015a      	lsls	r2, r3, #5
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	4413      	add	r3, r2
 800aa5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa60:	681a      	ldr	r2, [r3, #0]
 800aa62:	68bb      	ldr	r3, [r7, #8]
 800aa64:	0159      	lsls	r1, r3, #5
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	440b      	add	r3, r1
 800aa6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa6e:	4619      	mov	r1, r3
 800aa70:	4b05      	ldr	r3, [pc, #20]	; (800aa88 <USB_DeactivateEndpoint+0x1b4>)
 800aa72:	4013      	ands	r3, r2
 800aa74:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800aa76:	2300      	movs	r3, #0
}
 800aa78:	4618      	mov	r0, r3
 800aa7a:	3714      	adds	r7, #20
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa82:	4770      	bx	lr
 800aa84:	ec337800 	.word	0xec337800
 800aa88:	eff37800 	.word	0xeff37800

0800aa8c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b08a      	sub	sp, #40	; 0x28
 800aa90:	af02      	add	r7, sp, #8
 800aa92:	60f8      	str	r0, [r7, #12]
 800aa94:	60b9      	str	r1, [r7, #8]
 800aa96:	4613      	mov	r3, r2
 800aa98:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	781b      	ldrb	r3, [r3, #0]
 800aaa2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	785b      	ldrb	r3, [r3, #1]
 800aaa8:	2b01      	cmp	r3, #1
 800aaaa:	f040 815c 	bne.w	800ad66 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800aaae:	68bb      	ldr	r3, [r7, #8]
 800aab0:	695b      	ldr	r3, [r3, #20]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d132      	bne.n	800ab1c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800aab6:	69bb      	ldr	r3, [r7, #24]
 800aab8:	015a      	lsls	r2, r3, #5
 800aaba:	69fb      	ldr	r3, [r7, #28]
 800aabc:	4413      	add	r3, r2
 800aabe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aac2:	691b      	ldr	r3, [r3, #16]
 800aac4:	69ba      	ldr	r2, [r7, #24]
 800aac6:	0151      	lsls	r1, r2, #5
 800aac8:	69fa      	ldr	r2, [r7, #28]
 800aaca:	440a      	add	r2, r1
 800aacc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aad0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800aad4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800aad8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800aada:	69bb      	ldr	r3, [r7, #24]
 800aadc:	015a      	lsls	r2, r3, #5
 800aade:	69fb      	ldr	r3, [r7, #28]
 800aae0:	4413      	add	r3, r2
 800aae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aae6:	691b      	ldr	r3, [r3, #16]
 800aae8:	69ba      	ldr	r2, [r7, #24]
 800aaea:	0151      	lsls	r1, r2, #5
 800aaec:	69fa      	ldr	r2, [r7, #28]
 800aaee:	440a      	add	r2, r1
 800aaf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aaf4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aaf8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aafa:	69bb      	ldr	r3, [r7, #24]
 800aafc:	015a      	lsls	r2, r3, #5
 800aafe:	69fb      	ldr	r3, [r7, #28]
 800ab00:	4413      	add	r3, r2
 800ab02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab06:	691b      	ldr	r3, [r3, #16]
 800ab08:	69ba      	ldr	r2, [r7, #24]
 800ab0a:	0151      	lsls	r1, r2, #5
 800ab0c:	69fa      	ldr	r2, [r7, #28]
 800ab0e:	440a      	add	r2, r1
 800ab10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab14:	0cdb      	lsrs	r3, r3, #19
 800ab16:	04db      	lsls	r3, r3, #19
 800ab18:	6113      	str	r3, [r2, #16]
 800ab1a:	e074      	b.n	800ac06 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ab1c:	69bb      	ldr	r3, [r7, #24]
 800ab1e:	015a      	lsls	r2, r3, #5
 800ab20:	69fb      	ldr	r3, [r7, #28]
 800ab22:	4413      	add	r3, r2
 800ab24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab28:	691b      	ldr	r3, [r3, #16]
 800ab2a:	69ba      	ldr	r2, [r7, #24]
 800ab2c:	0151      	lsls	r1, r2, #5
 800ab2e:	69fa      	ldr	r2, [r7, #28]
 800ab30:	440a      	add	r2, r1
 800ab32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab36:	0cdb      	lsrs	r3, r3, #19
 800ab38:	04db      	lsls	r3, r3, #19
 800ab3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ab3c:	69bb      	ldr	r3, [r7, #24]
 800ab3e:	015a      	lsls	r2, r3, #5
 800ab40:	69fb      	ldr	r3, [r7, #28]
 800ab42:	4413      	add	r3, r2
 800ab44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab48:	691b      	ldr	r3, [r3, #16]
 800ab4a:	69ba      	ldr	r2, [r7, #24]
 800ab4c:	0151      	lsls	r1, r2, #5
 800ab4e:	69fa      	ldr	r2, [r7, #28]
 800ab50:	440a      	add	r2, r1
 800ab52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab56:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ab5a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ab5e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800ab60:	69bb      	ldr	r3, [r7, #24]
 800ab62:	015a      	lsls	r2, r3, #5
 800ab64:	69fb      	ldr	r3, [r7, #28]
 800ab66:	4413      	add	r3, r2
 800ab68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab6c:	691a      	ldr	r2, [r3, #16]
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	6959      	ldr	r1, [r3, #20]
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	689b      	ldr	r3, [r3, #8]
 800ab76:	440b      	add	r3, r1
 800ab78:	1e59      	subs	r1, r3, #1
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	689b      	ldr	r3, [r3, #8]
 800ab7e:	fbb1 f3f3 	udiv	r3, r1, r3
 800ab82:	04d9      	lsls	r1, r3, #19
 800ab84:	4b9d      	ldr	r3, [pc, #628]	; (800adfc <USB_EPStartXfer+0x370>)
 800ab86:	400b      	ands	r3, r1
 800ab88:	69b9      	ldr	r1, [r7, #24]
 800ab8a:	0148      	lsls	r0, r1, #5
 800ab8c:	69f9      	ldr	r1, [r7, #28]
 800ab8e:	4401      	add	r1, r0
 800ab90:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ab94:	4313      	orrs	r3, r2
 800ab96:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ab98:	69bb      	ldr	r3, [r7, #24]
 800ab9a:	015a      	lsls	r2, r3, #5
 800ab9c:	69fb      	ldr	r3, [r7, #28]
 800ab9e:	4413      	add	r3, r2
 800aba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aba4:	691a      	ldr	r2, [r3, #16]
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	695b      	ldr	r3, [r3, #20]
 800abaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800abae:	69b9      	ldr	r1, [r7, #24]
 800abb0:	0148      	lsls	r0, r1, #5
 800abb2:	69f9      	ldr	r1, [r7, #28]
 800abb4:	4401      	add	r1, r0
 800abb6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800abba:	4313      	orrs	r3, r2
 800abbc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	78db      	ldrb	r3, [r3, #3]
 800abc2:	2b01      	cmp	r3, #1
 800abc4:	d11f      	bne.n	800ac06 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800abc6:	69bb      	ldr	r3, [r7, #24]
 800abc8:	015a      	lsls	r2, r3, #5
 800abca:	69fb      	ldr	r3, [r7, #28]
 800abcc:	4413      	add	r3, r2
 800abce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abd2:	691b      	ldr	r3, [r3, #16]
 800abd4:	69ba      	ldr	r2, [r7, #24]
 800abd6:	0151      	lsls	r1, r2, #5
 800abd8:	69fa      	ldr	r2, [r7, #28]
 800abda:	440a      	add	r2, r1
 800abdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abe0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800abe4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800abe6:	69bb      	ldr	r3, [r7, #24]
 800abe8:	015a      	lsls	r2, r3, #5
 800abea:	69fb      	ldr	r3, [r7, #28]
 800abec:	4413      	add	r3, r2
 800abee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abf2:	691b      	ldr	r3, [r3, #16]
 800abf4:	69ba      	ldr	r2, [r7, #24]
 800abf6:	0151      	lsls	r1, r2, #5
 800abf8:	69fa      	ldr	r2, [r7, #28]
 800abfa:	440a      	add	r2, r1
 800abfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac00:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ac04:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800ac06:	79fb      	ldrb	r3, [r7, #7]
 800ac08:	2b01      	cmp	r3, #1
 800ac0a:	d14b      	bne.n	800aca4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	691b      	ldr	r3, [r3, #16]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d009      	beq.n	800ac28 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ac14:	69bb      	ldr	r3, [r7, #24]
 800ac16:	015a      	lsls	r2, r3, #5
 800ac18:	69fb      	ldr	r3, [r7, #28]
 800ac1a:	4413      	add	r3, r2
 800ac1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac20:	461a      	mov	r2, r3
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	691b      	ldr	r3, [r3, #16]
 800ac26:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	78db      	ldrb	r3, [r3, #3]
 800ac2c:	2b01      	cmp	r3, #1
 800ac2e:	d128      	bne.n	800ac82 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ac30:	69fb      	ldr	r3, [r7, #28]
 800ac32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac36:	689b      	ldr	r3, [r3, #8]
 800ac38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d110      	bne.n	800ac62 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ac40:	69bb      	ldr	r3, [r7, #24]
 800ac42:	015a      	lsls	r2, r3, #5
 800ac44:	69fb      	ldr	r3, [r7, #28]
 800ac46:	4413      	add	r3, r2
 800ac48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	69ba      	ldr	r2, [r7, #24]
 800ac50:	0151      	lsls	r1, r2, #5
 800ac52:	69fa      	ldr	r2, [r7, #28]
 800ac54:	440a      	add	r2, r1
 800ac56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac5a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ac5e:	6013      	str	r3, [r2, #0]
 800ac60:	e00f      	b.n	800ac82 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ac62:	69bb      	ldr	r3, [r7, #24]
 800ac64:	015a      	lsls	r2, r3, #5
 800ac66:	69fb      	ldr	r3, [r7, #28]
 800ac68:	4413      	add	r3, r2
 800ac6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	69ba      	ldr	r2, [r7, #24]
 800ac72:	0151      	lsls	r1, r2, #5
 800ac74:	69fa      	ldr	r2, [r7, #28]
 800ac76:	440a      	add	r2, r1
 800ac78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac80:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ac82:	69bb      	ldr	r3, [r7, #24]
 800ac84:	015a      	lsls	r2, r3, #5
 800ac86:	69fb      	ldr	r3, [r7, #28]
 800ac88:	4413      	add	r3, r2
 800ac8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	69ba      	ldr	r2, [r7, #24]
 800ac92:	0151      	lsls	r1, r2, #5
 800ac94:	69fa      	ldr	r2, [r7, #28]
 800ac96:	440a      	add	r2, r1
 800ac98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac9c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800aca0:	6013      	str	r3, [r2, #0]
 800aca2:	e12f      	b.n	800af04 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800aca4:	69bb      	ldr	r3, [r7, #24]
 800aca6:	015a      	lsls	r2, r3, #5
 800aca8:	69fb      	ldr	r3, [r7, #28]
 800acaa:	4413      	add	r3, r2
 800acac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	69ba      	ldr	r2, [r7, #24]
 800acb4:	0151      	lsls	r1, r2, #5
 800acb6:	69fa      	ldr	r2, [r7, #28]
 800acb8:	440a      	add	r2, r1
 800acba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800acbe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800acc2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	78db      	ldrb	r3, [r3, #3]
 800acc8:	2b01      	cmp	r3, #1
 800acca:	d015      	beq.n	800acf8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	695b      	ldr	r3, [r3, #20]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	f000 8117 	beq.w	800af04 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800acd6:	69fb      	ldr	r3, [r7, #28]
 800acd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	781b      	ldrb	r3, [r3, #0]
 800ace2:	f003 030f 	and.w	r3, r3, #15
 800ace6:	2101      	movs	r1, #1
 800ace8:	fa01 f303 	lsl.w	r3, r1, r3
 800acec:	69f9      	ldr	r1, [r7, #28]
 800acee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800acf2:	4313      	orrs	r3, r2
 800acf4:	634b      	str	r3, [r1, #52]	; 0x34
 800acf6:	e105      	b.n	800af04 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800acf8:	69fb      	ldr	r3, [r7, #28]
 800acfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acfe:	689b      	ldr	r3, [r3, #8]
 800ad00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d110      	bne.n	800ad2a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ad08:	69bb      	ldr	r3, [r7, #24]
 800ad0a:	015a      	lsls	r2, r3, #5
 800ad0c:	69fb      	ldr	r3, [r7, #28]
 800ad0e:	4413      	add	r3, r2
 800ad10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	69ba      	ldr	r2, [r7, #24]
 800ad18:	0151      	lsls	r1, r2, #5
 800ad1a:	69fa      	ldr	r2, [r7, #28]
 800ad1c:	440a      	add	r2, r1
 800ad1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad22:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ad26:	6013      	str	r3, [r2, #0]
 800ad28:	e00f      	b.n	800ad4a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ad2a:	69bb      	ldr	r3, [r7, #24]
 800ad2c:	015a      	lsls	r2, r3, #5
 800ad2e:	69fb      	ldr	r3, [r7, #28]
 800ad30:	4413      	add	r3, r2
 800ad32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	69ba      	ldr	r2, [r7, #24]
 800ad3a:	0151      	lsls	r1, r2, #5
 800ad3c:	69fa      	ldr	r2, [r7, #28]
 800ad3e:	440a      	add	r2, r1
 800ad40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad48:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800ad4a:	68bb      	ldr	r3, [r7, #8]
 800ad4c:	68d9      	ldr	r1, [r3, #12]
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	781a      	ldrb	r2, [r3, #0]
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	695b      	ldr	r3, [r3, #20]
 800ad56:	b298      	uxth	r0, r3
 800ad58:	79fb      	ldrb	r3, [r7, #7]
 800ad5a:	9300      	str	r3, [sp, #0]
 800ad5c:	4603      	mov	r3, r0
 800ad5e:	68f8      	ldr	r0, [r7, #12]
 800ad60:	f000 fa2b 	bl	800b1ba <USB_WritePacket>
 800ad64:	e0ce      	b.n	800af04 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ad66:	69bb      	ldr	r3, [r7, #24]
 800ad68:	015a      	lsls	r2, r3, #5
 800ad6a:	69fb      	ldr	r3, [r7, #28]
 800ad6c:	4413      	add	r3, r2
 800ad6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad72:	691b      	ldr	r3, [r3, #16]
 800ad74:	69ba      	ldr	r2, [r7, #24]
 800ad76:	0151      	lsls	r1, r2, #5
 800ad78:	69fa      	ldr	r2, [r7, #28]
 800ad7a:	440a      	add	r2, r1
 800ad7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad80:	0cdb      	lsrs	r3, r3, #19
 800ad82:	04db      	lsls	r3, r3, #19
 800ad84:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ad86:	69bb      	ldr	r3, [r7, #24]
 800ad88:	015a      	lsls	r2, r3, #5
 800ad8a:	69fb      	ldr	r3, [r7, #28]
 800ad8c:	4413      	add	r3, r2
 800ad8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad92:	691b      	ldr	r3, [r3, #16]
 800ad94:	69ba      	ldr	r2, [r7, #24]
 800ad96:	0151      	lsls	r1, r2, #5
 800ad98:	69fa      	ldr	r2, [r7, #28]
 800ad9a:	440a      	add	r2, r1
 800ad9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ada0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ada4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ada8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	695b      	ldr	r3, [r3, #20]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d126      	bne.n	800ae00 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800adb2:	69bb      	ldr	r3, [r7, #24]
 800adb4:	015a      	lsls	r2, r3, #5
 800adb6:	69fb      	ldr	r3, [r7, #28]
 800adb8:	4413      	add	r3, r2
 800adba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adbe:	691a      	ldr	r2, [r3, #16]
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	689b      	ldr	r3, [r3, #8]
 800adc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800adc8:	69b9      	ldr	r1, [r7, #24]
 800adca:	0148      	lsls	r0, r1, #5
 800adcc:	69f9      	ldr	r1, [r7, #28]
 800adce:	4401      	add	r1, r0
 800add0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800add4:	4313      	orrs	r3, r2
 800add6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800add8:	69bb      	ldr	r3, [r7, #24]
 800adda:	015a      	lsls	r2, r3, #5
 800addc:	69fb      	ldr	r3, [r7, #28]
 800adde:	4413      	add	r3, r2
 800ade0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ade4:	691b      	ldr	r3, [r3, #16]
 800ade6:	69ba      	ldr	r2, [r7, #24]
 800ade8:	0151      	lsls	r1, r2, #5
 800adea:	69fa      	ldr	r2, [r7, #28]
 800adec:	440a      	add	r2, r1
 800adee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800adf2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800adf6:	6113      	str	r3, [r2, #16]
 800adf8:	e036      	b.n	800ae68 <USB_EPStartXfer+0x3dc>
 800adfa:	bf00      	nop
 800adfc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	695a      	ldr	r2, [r3, #20]
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	689b      	ldr	r3, [r3, #8]
 800ae08:	4413      	add	r3, r2
 800ae0a:	1e5a      	subs	r2, r3, #1
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	689b      	ldr	r3, [r3, #8]
 800ae10:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae14:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ae16:	69bb      	ldr	r3, [r7, #24]
 800ae18:	015a      	lsls	r2, r3, #5
 800ae1a:	69fb      	ldr	r3, [r7, #28]
 800ae1c:	4413      	add	r3, r2
 800ae1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae22:	691a      	ldr	r2, [r3, #16]
 800ae24:	8afb      	ldrh	r3, [r7, #22]
 800ae26:	04d9      	lsls	r1, r3, #19
 800ae28:	4b39      	ldr	r3, [pc, #228]	; (800af10 <USB_EPStartXfer+0x484>)
 800ae2a:	400b      	ands	r3, r1
 800ae2c:	69b9      	ldr	r1, [r7, #24]
 800ae2e:	0148      	lsls	r0, r1, #5
 800ae30:	69f9      	ldr	r1, [r7, #28]
 800ae32:	4401      	add	r1, r0
 800ae34:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ae38:	4313      	orrs	r3, r2
 800ae3a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800ae3c:	69bb      	ldr	r3, [r7, #24]
 800ae3e:	015a      	lsls	r2, r3, #5
 800ae40:	69fb      	ldr	r3, [r7, #28]
 800ae42:	4413      	add	r3, r2
 800ae44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae48:	691a      	ldr	r2, [r3, #16]
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	689b      	ldr	r3, [r3, #8]
 800ae4e:	8af9      	ldrh	r1, [r7, #22]
 800ae50:	fb01 f303 	mul.w	r3, r1, r3
 800ae54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ae58:	69b9      	ldr	r1, [r7, #24]
 800ae5a:	0148      	lsls	r0, r1, #5
 800ae5c:	69f9      	ldr	r1, [r7, #28]
 800ae5e:	4401      	add	r1, r0
 800ae60:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ae64:	4313      	orrs	r3, r2
 800ae66:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ae68:	79fb      	ldrb	r3, [r7, #7]
 800ae6a:	2b01      	cmp	r3, #1
 800ae6c:	d10d      	bne.n	800ae8a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	68db      	ldr	r3, [r3, #12]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d009      	beq.n	800ae8a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	68d9      	ldr	r1, [r3, #12]
 800ae7a:	69bb      	ldr	r3, [r7, #24]
 800ae7c:	015a      	lsls	r2, r3, #5
 800ae7e:	69fb      	ldr	r3, [r7, #28]
 800ae80:	4413      	add	r3, r2
 800ae82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae86:	460a      	mov	r2, r1
 800ae88:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	78db      	ldrb	r3, [r3, #3]
 800ae8e:	2b01      	cmp	r3, #1
 800ae90:	d128      	bne.n	800aee4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ae92:	69fb      	ldr	r3, [r7, #28]
 800ae94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae98:	689b      	ldr	r3, [r3, #8]
 800ae9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d110      	bne.n	800aec4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800aea2:	69bb      	ldr	r3, [r7, #24]
 800aea4:	015a      	lsls	r2, r3, #5
 800aea6:	69fb      	ldr	r3, [r7, #28]
 800aea8:	4413      	add	r3, r2
 800aeaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	69ba      	ldr	r2, [r7, #24]
 800aeb2:	0151      	lsls	r1, r2, #5
 800aeb4:	69fa      	ldr	r2, [r7, #28]
 800aeb6:	440a      	add	r2, r1
 800aeb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aebc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800aec0:	6013      	str	r3, [r2, #0]
 800aec2:	e00f      	b.n	800aee4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800aec4:	69bb      	ldr	r3, [r7, #24]
 800aec6:	015a      	lsls	r2, r3, #5
 800aec8:	69fb      	ldr	r3, [r7, #28]
 800aeca:	4413      	add	r3, r2
 800aecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	69ba      	ldr	r2, [r7, #24]
 800aed4:	0151      	lsls	r1, r2, #5
 800aed6:	69fa      	ldr	r2, [r7, #28]
 800aed8:	440a      	add	r2, r1
 800aeda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aede:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aee2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800aee4:	69bb      	ldr	r3, [r7, #24]
 800aee6:	015a      	lsls	r2, r3, #5
 800aee8:	69fb      	ldr	r3, [r7, #28]
 800aeea:	4413      	add	r3, r2
 800aeec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	69ba      	ldr	r2, [r7, #24]
 800aef4:	0151      	lsls	r1, r2, #5
 800aef6:	69fa      	ldr	r2, [r7, #28]
 800aef8:	440a      	add	r2, r1
 800aefa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aefe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800af02:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800af04:	2300      	movs	r3, #0
}
 800af06:	4618      	mov	r0, r3
 800af08:	3720      	adds	r7, #32
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}
 800af0e:	bf00      	nop
 800af10:	1ff80000 	.word	0x1ff80000

0800af14 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800af14:	b480      	push	{r7}
 800af16:	b087      	sub	sp, #28
 800af18:	af00      	add	r7, sp, #0
 800af1a:	60f8      	str	r0, [r7, #12]
 800af1c:	60b9      	str	r1, [r7, #8]
 800af1e:	4613      	mov	r3, r2
 800af20:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800af26:	68bb      	ldr	r3, [r7, #8]
 800af28:	781b      	ldrb	r3, [r3, #0]
 800af2a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	785b      	ldrb	r3, [r3, #1]
 800af30:	2b01      	cmp	r3, #1
 800af32:	f040 80cd 	bne.w	800b0d0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	695b      	ldr	r3, [r3, #20]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d132      	bne.n	800afa4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800af3e:	693b      	ldr	r3, [r7, #16]
 800af40:	015a      	lsls	r2, r3, #5
 800af42:	697b      	ldr	r3, [r7, #20]
 800af44:	4413      	add	r3, r2
 800af46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af4a:	691b      	ldr	r3, [r3, #16]
 800af4c:	693a      	ldr	r2, [r7, #16]
 800af4e:	0151      	lsls	r1, r2, #5
 800af50:	697a      	ldr	r2, [r7, #20]
 800af52:	440a      	add	r2, r1
 800af54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af58:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800af5c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800af60:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	015a      	lsls	r2, r3, #5
 800af66:	697b      	ldr	r3, [r7, #20]
 800af68:	4413      	add	r3, r2
 800af6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af6e:	691b      	ldr	r3, [r3, #16]
 800af70:	693a      	ldr	r2, [r7, #16]
 800af72:	0151      	lsls	r1, r2, #5
 800af74:	697a      	ldr	r2, [r7, #20]
 800af76:	440a      	add	r2, r1
 800af78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800af80:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800af82:	693b      	ldr	r3, [r7, #16]
 800af84:	015a      	lsls	r2, r3, #5
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	4413      	add	r3, r2
 800af8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af8e:	691b      	ldr	r3, [r3, #16]
 800af90:	693a      	ldr	r2, [r7, #16]
 800af92:	0151      	lsls	r1, r2, #5
 800af94:	697a      	ldr	r2, [r7, #20]
 800af96:	440a      	add	r2, r1
 800af98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af9c:	0cdb      	lsrs	r3, r3, #19
 800af9e:	04db      	lsls	r3, r3, #19
 800afa0:	6113      	str	r3, [r2, #16]
 800afa2:	e04e      	b.n	800b042 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800afa4:	693b      	ldr	r3, [r7, #16]
 800afa6:	015a      	lsls	r2, r3, #5
 800afa8:	697b      	ldr	r3, [r7, #20]
 800afaa:	4413      	add	r3, r2
 800afac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afb0:	691b      	ldr	r3, [r3, #16]
 800afb2:	693a      	ldr	r2, [r7, #16]
 800afb4:	0151      	lsls	r1, r2, #5
 800afb6:	697a      	ldr	r2, [r7, #20]
 800afb8:	440a      	add	r2, r1
 800afba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800afbe:	0cdb      	lsrs	r3, r3, #19
 800afc0:	04db      	lsls	r3, r3, #19
 800afc2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800afc4:	693b      	ldr	r3, [r7, #16]
 800afc6:	015a      	lsls	r2, r3, #5
 800afc8:	697b      	ldr	r3, [r7, #20]
 800afca:	4413      	add	r3, r2
 800afcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afd0:	691b      	ldr	r3, [r3, #16]
 800afd2:	693a      	ldr	r2, [r7, #16]
 800afd4:	0151      	lsls	r1, r2, #5
 800afd6:	697a      	ldr	r2, [r7, #20]
 800afd8:	440a      	add	r2, r1
 800afda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800afde:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800afe2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800afe6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	695a      	ldr	r2, [r3, #20]
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	689b      	ldr	r3, [r3, #8]
 800aff0:	429a      	cmp	r2, r3
 800aff2:	d903      	bls.n	800affc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	689a      	ldr	r2, [r3, #8]
 800aff8:	68bb      	ldr	r3, [r7, #8]
 800affa:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800affc:	693b      	ldr	r3, [r7, #16]
 800affe:	015a      	lsls	r2, r3, #5
 800b000:	697b      	ldr	r3, [r7, #20]
 800b002:	4413      	add	r3, r2
 800b004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b008:	691b      	ldr	r3, [r3, #16]
 800b00a:	693a      	ldr	r2, [r7, #16]
 800b00c:	0151      	lsls	r1, r2, #5
 800b00e:	697a      	ldr	r2, [r7, #20]
 800b010:	440a      	add	r2, r1
 800b012:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b016:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b01a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b01c:	693b      	ldr	r3, [r7, #16]
 800b01e:	015a      	lsls	r2, r3, #5
 800b020:	697b      	ldr	r3, [r7, #20]
 800b022:	4413      	add	r3, r2
 800b024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b028:	691a      	ldr	r2, [r3, #16]
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	695b      	ldr	r3, [r3, #20]
 800b02e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b032:	6939      	ldr	r1, [r7, #16]
 800b034:	0148      	lsls	r0, r1, #5
 800b036:	6979      	ldr	r1, [r7, #20]
 800b038:	4401      	add	r1, r0
 800b03a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b03e:	4313      	orrs	r3, r2
 800b040:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b042:	79fb      	ldrb	r3, [r7, #7]
 800b044:	2b01      	cmp	r3, #1
 800b046:	d11e      	bne.n	800b086 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	691b      	ldr	r3, [r3, #16]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d009      	beq.n	800b064 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b050:	693b      	ldr	r3, [r7, #16]
 800b052:	015a      	lsls	r2, r3, #5
 800b054:	697b      	ldr	r3, [r7, #20]
 800b056:	4413      	add	r3, r2
 800b058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b05c:	461a      	mov	r2, r3
 800b05e:	68bb      	ldr	r3, [r7, #8]
 800b060:	691b      	ldr	r3, [r3, #16]
 800b062:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b064:	693b      	ldr	r3, [r7, #16]
 800b066:	015a      	lsls	r2, r3, #5
 800b068:	697b      	ldr	r3, [r7, #20]
 800b06a:	4413      	add	r3, r2
 800b06c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	693a      	ldr	r2, [r7, #16]
 800b074:	0151      	lsls	r1, r2, #5
 800b076:	697a      	ldr	r2, [r7, #20]
 800b078:	440a      	add	r2, r1
 800b07a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b07e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b082:	6013      	str	r3, [r2, #0]
 800b084:	e092      	b.n	800b1ac <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b086:	693b      	ldr	r3, [r7, #16]
 800b088:	015a      	lsls	r2, r3, #5
 800b08a:	697b      	ldr	r3, [r7, #20]
 800b08c:	4413      	add	r3, r2
 800b08e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	693a      	ldr	r2, [r7, #16]
 800b096:	0151      	lsls	r1, r2, #5
 800b098:	697a      	ldr	r2, [r7, #20]
 800b09a:	440a      	add	r2, r1
 800b09c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b0a4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	695b      	ldr	r3, [r3, #20]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d07e      	beq.n	800b1ac <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	781b      	ldrb	r3, [r3, #0]
 800b0ba:	f003 030f 	and.w	r3, r3, #15
 800b0be:	2101      	movs	r1, #1
 800b0c0:	fa01 f303 	lsl.w	r3, r1, r3
 800b0c4:	6979      	ldr	r1, [r7, #20]
 800b0c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b0ca:	4313      	orrs	r3, r2
 800b0cc:	634b      	str	r3, [r1, #52]	; 0x34
 800b0ce:	e06d      	b.n	800b1ac <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b0d0:	693b      	ldr	r3, [r7, #16]
 800b0d2:	015a      	lsls	r2, r3, #5
 800b0d4:	697b      	ldr	r3, [r7, #20]
 800b0d6:	4413      	add	r3, r2
 800b0d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0dc:	691b      	ldr	r3, [r3, #16]
 800b0de:	693a      	ldr	r2, [r7, #16]
 800b0e0:	0151      	lsls	r1, r2, #5
 800b0e2:	697a      	ldr	r2, [r7, #20]
 800b0e4:	440a      	add	r2, r1
 800b0e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b0ea:	0cdb      	lsrs	r3, r3, #19
 800b0ec:	04db      	lsls	r3, r3, #19
 800b0ee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b0f0:	693b      	ldr	r3, [r7, #16]
 800b0f2:	015a      	lsls	r2, r3, #5
 800b0f4:	697b      	ldr	r3, [r7, #20]
 800b0f6:	4413      	add	r3, r2
 800b0f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0fc:	691b      	ldr	r3, [r3, #16]
 800b0fe:	693a      	ldr	r2, [r7, #16]
 800b100:	0151      	lsls	r1, r2, #5
 800b102:	697a      	ldr	r2, [r7, #20]
 800b104:	440a      	add	r2, r1
 800b106:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b10a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b10e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b112:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	695b      	ldr	r3, [r3, #20]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d003      	beq.n	800b124 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800b11c:	68bb      	ldr	r3, [r7, #8]
 800b11e:	689a      	ldr	r2, [r3, #8]
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	015a      	lsls	r2, r3, #5
 800b128:	697b      	ldr	r3, [r7, #20]
 800b12a:	4413      	add	r3, r2
 800b12c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b130:	691b      	ldr	r3, [r3, #16]
 800b132:	693a      	ldr	r2, [r7, #16]
 800b134:	0151      	lsls	r1, r2, #5
 800b136:	697a      	ldr	r2, [r7, #20]
 800b138:	440a      	add	r2, r1
 800b13a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b13e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b142:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800b144:	693b      	ldr	r3, [r7, #16]
 800b146:	015a      	lsls	r2, r3, #5
 800b148:	697b      	ldr	r3, [r7, #20]
 800b14a:	4413      	add	r3, r2
 800b14c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b150:	691a      	ldr	r2, [r3, #16]
 800b152:	68bb      	ldr	r3, [r7, #8]
 800b154:	689b      	ldr	r3, [r3, #8]
 800b156:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b15a:	6939      	ldr	r1, [r7, #16]
 800b15c:	0148      	lsls	r0, r1, #5
 800b15e:	6979      	ldr	r1, [r7, #20]
 800b160:	4401      	add	r1, r0
 800b162:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b166:	4313      	orrs	r3, r2
 800b168:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800b16a:	79fb      	ldrb	r3, [r7, #7]
 800b16c:	2b01      	cmp	r3, #1
 800b16e:	d10d      	bne.n	800b18c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	68db      	ldr	r3, [r3, #12]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d009      	beq.n	800b18c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b178:	68bb      	ldr	r3, [r7, #8]
 800b17a:	68d9      	ldr	r1, [r3, #12]
 800b17c:	693b      	ldr	r3, [r7, #16]
 800b17e:	015a      	lsls	r2, r3, #5
 800b180:	697b      	ldr	r3, [r7, #20]
 800b182:	4413      	add	r3, r2
 800b184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b188:	460a      	mov	r2, r1
 800b18a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b18c:	693b      	ldr	r3, [r7, #16]
 800b18e:	015a      	lsls	r2, r3, #5
 800b190:	697b      	ldr	r3, [r7, #20]
 800b192:	4413      	add	r3, r2
 800b194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	693a      	ldr	r2, [r7, #16]
 800b19c:	0151      	lsls	r1, r2, #5
 800b19e:	697a      	ldr	r2, [r7, #20]
 800b1a0:	440a      	add	r2, r1
 800b1a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b1a6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b1aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b1ac:	2300      	movs	r3, #0
}
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	371c      	adds	r7, #28
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b8:	4770      	bx	lr

0800b1ba <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b1ba:	b480      	push	{r7}
 800b1bc:	b089      	sub	sp, #36	; 0x24
 800b1be:	af00      	add	r7, sp, #0
 800b1c0:	60f8      	str	r0, [r7, #12]
 800b1c2:	60b9      	str	r1, [r7, #8]
 800b1c4:	4611      	mov	r1, r2
 800b1c6:	461a      	mov	r2, r3
 800b1c8:	460b      	mov	r3, r1
 800b1ca:	71fb      	strb	r3, [r7, #7]
 800b1cc:	4613      	mov	r3, r2
 800b1ce:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800b1d4:	68bb      	ldr	r3, [r7, #8]
 800b1d6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800b1d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d11a      	bne.n	800b216 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b1e0:	88bb      	ldrh	r3, [r7, #4]
 800b1e2:	3303      	adds	r3, #3
 800b1e4:	089b      	lsrs	r3, r3, #2
 800b1e6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	61bb      	str	r3, [r7, #24]
 800b1ec:	e00f      	b.n	800b20e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b1ee:	79fb      	ldrb	r3, [r7, #7]
 800b1f0:	031a      	lsls	r2, r3, #12
 800b1f2:	697b      	ldr	r3, [r7, #20]
 800b1f4:	4413      	add	r3, r2
 800b1f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1fa:	461a      	mov	r2, r3
 800b1fc:	69fb      	ldr	r3, [r7, #28]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b202:	69fb      	ldr	r3, [r7, #28]
 800b204:	3304      	adds	r3, #4
 800b206:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b208:	69bb      	ldr	r3, [r7, #24]
 800b20a:	3301      	adds	r3, #1
 800b20c:	61bb      	str	r3, [r7, #24]
 800b20e:	69ba      	ldr	r2, [r7, #24]
 800b210:	693b      	ldr	r3, [r7, #16]
 800b212:	429a      	cmp	r2, r3
 800b214:	d3eb      	bcc.n	800b1ee <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b216:	2300      	movs	r3, #0
}
 800b218:	4618      	mov	r0, r3
 800b21a:	3724      	adds	r7, #36	; 0x24
 800b21c:	46bd      	mov	sp, r7
 800b21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b222:	4770      	bx	lr

0800b224 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b224:	b480      	push	{r7}
 800b226:	b089      	sub	sp, #36	; 0x24
 800b228:	af00      	add	r7, sp, #0
 800b22a:	60f8      	str	r0, [r7, #12]
 800b22c:	60b9      	str	r1, [r7, #8]
 800b22e:	4613      	mov	r3, r2
 800b230:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800b23a:	88fb      	ldrh	r3, [r7, #6]
 800b23c:	3303      	adds	r3, #3
 800b23e:	089b      	lsrs	r3, r3, #2
 800b240:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800b242:	2300      	movs	r3, #0
 800b244:	61bb      	str	r3, [r7, #24]
 800b246:	e00b      	b.n	800b260 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b248:	697b      	ldr	r3, [r7, #20]
 800b24a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b24e:	681a      	ldr	r2, [r3, #0]
 800b250:	69fb      	ldr	r3, [r7, #28]
 800b252:	601a      	str	r2, [r3, #0]
    pDest++;
 800b254:	69fb      	ldr	r3, [r7, #28]
 800b256:	3304      	adds	r3, #4
 800b258:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800b25a:	69bb      	ldr	r3, [r7, #24]
 800b25c:	3301      	adds	r3, #1
 800b25e:	61bb      	str	r3, [r7, #24]
 800b260:	69ba      	ldr	r2, [r7, #24]
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	429a      	cmp	r2, r3
 800b266:	d3ef      	bcc.n	800b248 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800b268:	69fb      	ldr	r3, [r7, #28]
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	3724      	adds	r7, #36	; 0x24
 800b26e:	46bd      	mov	sp, r7
 800b270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b274:	4770      	bx	lr

0800b276 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b276:	b480      	push	{r7}
 800b278:	b085      	sub	sp, #20
 800b27a:	af00      	add	r7, sp, #0
 800b27c:	6078      	str	r0, [r7, #4]
 800b27e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	781b      	ldrb	r3, [r3, #0]
 800b288:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	785b      	ldrb	r3, [r3, #1]
 800b28e:	2b01      	cmp	r3, #1
 800b290:	d12c      	bne.n	800b2ec <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	015a      	lsls	r2, r3, #5
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	4413      	add	r3, r2
 800b29a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	db12      	blt.n	800b2ca <USB_EPSetStall+0x54>
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d00f      	beq.n	800b2ca <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b2aa:	68bb      	ldr	r3, [r7, #8]
 800b2ac:	015a      	lsls	r2, r3, #5
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	4413      	add	r3, r2
 800b2b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	68ba      	ldr	r2, [r7, #8]
 800b2ba:	0151      	lsls	r1, r2, #5
 800b2bc:	68fa      	ldr	r2, [r7, #12]
 800b2be:	440a      	add	r2, r1
 800b2c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b2c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b2c8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	015a      	lsls	r2, r3, #5
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	4413      	add	r3, r2
 800b2d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	68ba      	ldr	r2, [r7, #8]
 800b2da:	0151      	lsls	r1, r2, #5
 800b2dc:	68fa      	ldr	r2, [r7, #12]
 800b2de:	440a      	add	r2, r1
 800b2e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b2e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b2e8:	6013      	str	r3, [r2, #0]
 800b2ea:	e02b      	b.n	800b344 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b2ec:	68bb      	ldr	r3, [r7, #8]
 800b2ee:	015a      	lsls	r2, r3, #5
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	4413      	add	r3, r2
 800b2f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	db12      	blt.n	800b324 <USB_EPSetStall+0xae>
 800b2fe:	68bb      	ldr	r3, [r7, #8]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d00f      	beq.n	800b324 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	015a      	lsls	r2, r3, #5
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	4413      	add	r3, r2
 800b30c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	68ba      	ldr	r2, [r7, #8]
 800b314:	0151      	lsls	r1, r2, #5
 800b316:	68fa      	ldr	r2, [r7, #12]
 800b318:	440a      	add	r2, r1
 800b31a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b31e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b322:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	015a      	lsls	r2, r3, #5
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	4413      	add	r3, r2
 800b32c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	68ba      	ldr	r2, [r7, #8]
 800b334:	0151      	lsls	r1, r2, #5
 800b336:	68fa      	ldr	r2, [r7, #12]
 800b338:	440a      	add	r2, r1
 800b33a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b33e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b342:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b344:	2300      	movs	r3, #0
}
 800b346:	4618      	mov	r0, r3
 800b348:	3714      	adds	r7, #20
 800b34a:	46bd      	mov	sp, r7
 800b34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b350:	4770      	bx	lr

0800b352 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b352:	b480      	push	{r7}
 800b354:	b085      	sub	sp, #20
 800b356:	af00      	add	r7, sp, #0
 800b358:	6078      	str	r0, [r7, #4]
 800b35a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	781b      	ldrb	r3, [r3, #0]
 800b364:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	785b      	ldrb	r3, [r3, #1]
 800b36a:	2b01      	cmp	r3, #1
 800b36c:	d128      	bne.n	800b3c0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b36e:	68bb      	ldr	r3, [r7, #8]
 800b370:	015a      	lsls	r2, r3, #5
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	4413      	add	r3, r2
 800b376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	68ba      	ldr	r2, [r7, #8]
 800b37e:	0151      	lsls	r1, r2, #5
 800b380:	68fa      	ldr	r2, [r7, #12]
 800b382:	440a      	add	r2, r1
 800b384:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b388:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b38c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	78db      	ldrb	r3, [r3, #3]
 800b392:	2b03      	cmp	r3, #3
 800b394:	d003      	beq.n	800b39e <USB_EPClearStall+0x4c>
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	78db      	ldrb	r3, [r3, #3]
 800b39a:	2b02      	cmp	r3, #2
 800b39c:	d138      	bne.n	800b410 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b39e:	68bb      	ldr	r3, [r7, #8]
 800b3a0:	015a      	lsls	r2, r3, #5
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	4413      	add	r3, r2
 800b3a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	68ba      	ldr	r2, [r7, #8]
 800b3ae:	0151      	lsls	r1, r2, #5
 800b3b0:	68fa      	ldr	r2, [r7, #12]
 800b3b2:	440a      	add	r2, r1
 800b3b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b3bc:	6013      	str	r3, [r2, #0]
 800b3be:	e027      	b.n	800b410 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	015a      	lsls	r2, r3, #5
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	4413      	add	r3, r2
 800b3c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	68ba      	ldr	r2, [r7, #8]
 800b3d0:	0151      	lsls	r1, r2, #5
 800b3d2:	68fa      	ldr	r2, [r7, #12]
 800b3d4:	440a      	add	r2, r1
 800b3d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b3da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b3de:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	78db      	ldrb	r3, [r3, #3]
 800b3e4:	2b03      	cmp	r3, #3
 800b3e6:	d003      	beq.n	800b3f0 <USB_EPClearStall+0x9e>
 800b3e8:	683b      	ldr	r3, [r7, #0]
 800b3ea:	78db      	ldrb	r3, [r3, #3]
 800b3ec:	2b02      	cmp	r3, #2
 800b3ee:	d10f      	bne.n	800b410 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	015a      	lsls	r2, r3, #5
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	4413      	add	r3, r2
 800b3f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	68ba      	ldr	r2, [r7, #8]
 800b400:	0151      	lsls	r1, r2, #5
 800b402:	68fa      	ldr	r2, [r7, #12]
 800b404:	440a      	add	r2, r1
 800b406:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b40a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b40e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b410:	2300      	movs	r3, #0
}
 800b412:	4618      	mov	r0, r3
 800b414:	3714      	adds	r7, #20
 800b416:	46bd      	mov	sp, r7
 800b418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41c:	4770      	bx	lr

0800b41e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b41e:	b480      	push	{r7}
 800b420:	b085      	sub	sp, #20
 800b422:	af00      	add	r7, sp, #0
 800b424:	6078      	str	r0, [r7, #4]
 800b426:	460b      	mov	r3, r1
 800b428:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	68fa      	ldr	r2, [r7, #12]
 800b438:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b43c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b440:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b448:	681a      	ldr	r2, [r3, #0]
 800b44a:	78fb      	ldrb	r3, [r7, #3]
 800b44c:	011b      	lsls	r3, r3, #4
 800b44e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b452:	68f9      	ldr	r1, [r7, #12]
 800b454:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b458:	4313      	orrs	r3, r2
 800b45a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b45c:	2300      	movs	r3, #0
}
 800b45e:	4618      	mov	r0, r3
 800b460:	3714      	adds	r7, #20
 800b462:	46bd      	mov	sp, r7
 800b464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b468:	4770      	bx	lr

0800b46a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b46a:	b480      	push	{r7}
 800b46c:	b085      	sub	sp, #20
 800b46e:	af00      	add	r7, sp, #0
 800b470:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	68fa      	ldr	r2, [r7, #12]
 800b480:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b484:	f023 0303 	bic.w	r3, r3, #3
 800b488:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b490:	685b      	ldr	r3, [r3, #4]
 800b492:	68fa      	ldr	r2, [r7, #12]
 800b494:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b498:	f023 0302 	bic.w	r3, r3, #2
 800b49c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b49e:	2300      	movs	r3, #0
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	3714      	adds	r7, #20
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4aa:	4770      	bx	lr

0800b4ac <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b4ac:	b480      	push	{r7}
 800b4ae:	b085      	sub	sp, #20
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	68fa      	ldr	r2, [r7, #12]
 800b4c2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b4c6:	f023 0303 	bic.w	r3, r3, #3
 800b4ca:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4d2:	685b      	ldr	r3, [r3, #4]
 800b4d4:	68fa      	ldr	r2, [r7, #12]
 800b4d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b4da:	f043 0302 	orr.w	r3, r3, #2
 800b4de:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b4e0:	2300      	movs	r3, #0
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3714      	adds	r7, #20
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ec:	4770      	bx	lr

0800b4ee <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b4ee:	b480      	push	{r7}
 800b4f0:	b085      	sub	sp, #20
 800b4f2:	af00      	add	r7, sp, #0
 800b4f4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	695b      	ldr	r3, [r3, #20]
 800b4fa:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	699b      	ldr	r3, [r3, #24]
 800b500:	68fa      	ldr	r2, [r7, #12]
 800b502:	4013      	ands	r3, r2
 800b504:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b506:	68fb      	ldr	r3, [r7, #12]
}
 800b508:	4618      	mov	r0, r3
 800b50a:	3714      	adds	r7, #20
 800b50c:	46bd      	mov	sp, r7
 800b50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b512:	4770      	bx	lr

0800b514 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b514:	b480      	push	{r7}
 800b516:	b085      	sub	sp, #20
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b526:	699b      	ldr	r3, [r3, #24]
 800b528:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b530:	69db      	ldr	r3, [r3, #28]
 800b532:	68ba      	ldr	r2, [r7, #8]
 800b534:	4013      	ands	r3, r2
 800b536:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b538:	68bb      	ldr	r3, [r7, #8]
 800b53a:	0c1b      	lsrs	r3, r3, #16
}
 800b53c:	4618      	mov	r0, r3
 800b53e:	3714      	adds	r7, #20
 800b540:	46bd      	mov	sp, r7
 800b542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b546:	4770      	bx	lr

0800b548 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b548:	b480      	push	{r7}
 800b54a:	b085      	sub	sp, #20
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b55a:	699b      	ldr	r3, [r3, #24]
 800b55c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b564:	69db      	ldr	r3, [r3, #28]
 800b566:	68ba      	ldr	r2, [r7, #8]
 800b568:	4013      	ands	r3, r2
 800b56a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b56c:	68bb      	ldr	r3, [r7, #8]
 800b56e:	b29b      	uxth	r3, r3
}
 800b570:	4618      	mov	r0, r3
 800b572:	3714      	adds	r7, #20
 800b574:	46bd      	mov	sp, r7
 800b576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57a:	4770      	bx	lr

0800b57c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b57c:	b480      	push	{r7}
 800b57e:	b085      	sub	sp, #20
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
 800b584:	460b      	mov	r3, r1
 800b586:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b58c:	78fb      	ldrb	r3, [r7, #3]
 800b58e:	015a      	lsls	r2, r3, #5
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	4413      	add	r3, r2
 800b594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b598:	689b      	ldr	r3, [r3, #8]
 800b59a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5a2:	695b      	ldr	r3, [r3, #20]
 800b5a4:	68ba      	ldr	r2, [r7, #8]
 800b5a6:	4013      	ands	r3, r2
 800b5a8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b5aa:	68bb      	ldr	r3, [r7, #8]
}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	3714      	adds	r7, #20
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b6:	4770      	bx	lr

0800b5b8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b5b8:	b480      	push	{r7}
 800b5ba:	b087      	sub	sp, #28
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
 800b5c0:	460b      	mov	r3, r1
 800b5c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b5c8:	697b      	ldr	r3, [r7, #20]
 800b5ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5ce:	691b      	ldr	r3, [r3, #16]
 800b5d0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b5d2:	697b      	ldr	r3, [r7, #20]
 800b5d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5da:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b5dc:	78fb      	ldrb	r3, [r7, #3]
 800b5de:	f003 030f 	and.w	r3, r3, #15
 800b5e2:	68fa      	ldr	r2, [r7, #12]
 800b5e4:	fa22 f303 	lsr.w	r3, r2, r3
 800b5e8:	01db      	lsls	r3, r3, #7
 800b5ea:	b2db      	uxtb	r3, r3
 800b5ec:	693a      	ldr	r2, [r7, #16]
 800b5ee:	4313      	orrs	r3, r2
 800b5f0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b5f2:	78fb      	ldrb	r3, [r7, #3]
 800b5f4:	015a      	lsls	r2, r3, #5
 800b5f6:	697b      	ldr	r3, [r7, #20]
 800b5f8:	4413      	add	r3, r2
 800b5fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5fe:	689b      	ldr	r3, [r3, #8]
 800b600:	693a      	ldr	r2, [r7, #16]
 800b602:	4013      	ands	r3, r2
 800b604:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b606:	68bb      	ldr	r3, [r7, #8]
}
 800b608:	4618      	mov	r0, r3
 800b60a:	371c      	adds	r7, #28
 800b60c:	46bd      	mov	sp, r7
 800b60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b612:	4770      	bx	lr

0800b614 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b614:	b480      	push	{r7}
 800b616:	b083      	sub	sp, #12
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	695b      	ldr	r3, [r3, #20]
 800b620:	f003 0301 	and.w	r3, r3, #1
}
 800b624:	4618      	mov	r0, r3
 800b626:	370c      	adds	r7, #12
 800b628:	46bd      	mov	sp, r7
 800b62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62e:	4770      	bx	lr

0800b630 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b630:	b480      	push	{r7}
 800b632:	b085      	sub	sp, #20
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	68fa      	ldr	r2, [r7, #12]
 800b646:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b64a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b64e:	f023 0307 	bic.w	r3, r3, #7
 800b652:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b65a:	685b      	ldr	r3, [r3, #4]
 800b65c:	68fa      	ldr	r2, [r7, #12]
 800b65e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b662:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b666:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b668:	2300      	movs	r3, #0
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3714      	adds	r7, #20
 800b66e:	46bd      	mov	sp, r7
 800b670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b674:	4770      	bx	lr
	...

0800b678 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800b678:	b480      	push	{r7}
 800b67a:	b087      	sub	sp, #28
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	60f8      	str	r0, [r7, #12]
 800b680:	460b      	mov	r3, r1
 800b682:	607a      	str	r2, [r7, #4]
 800b684:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	333c      	adds	r3, #60	; 0x3c
 800b68e:	3304      	adds	r3, #4
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b694:	693b      	ldr	r3, [r7, #16]
 800b696:	4a26      	ldr	r2, [pc, #152]	; (800b730 <USB_EP0_OutStart+0xb8>)
 800b698:	4293      	cmp	r3, r2
 800b69a:	d90a      	bls.n	800b6b2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b69c:	697b      	ldr	r3, [r7, #20]
 800b69e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b6a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b6ac:	d101      	bne.n	800b6b2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	e037      	b.n	800b722 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b6b2:	697b      	ldr	r3, [r7, #20]
 800b6b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6b8:	461a      	mov	r2, r3
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b6be:	697b      	ldr	r3, [r7, #20]
 800b6c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6c4:	691b      	ldr	r3, [r3, #16]
 800b6c6:	697a      	ldr	r2, [r7, #20]
 800b6c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b6cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b6d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b6d2:	697b      	ldr	r3, [r7, #20]
 800b6d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6d8:	691b      	ldr	r3, [r3, #16]
 800b6da:	697a      	ldr	r2, [r7, #20]
 800b6dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b6e0:	f043 0318 	orr.w	r3, r3, #24
 800b6e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b6e6:	697b      	ldr	r3, [r7, #20]
 800b6e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6ec:	691b      	ldr	r3, [r3, #16]
 800b6ee:	697a      	ldr	r2, [r7, #20]
 800b6f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b6f4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b6f8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b6fa:	7afb      	ldrb	r3, [r7, #11]
 800b6fc:	2b01      	cmp	r3, #1
 800b6fe:	d10f      	bne.n	800b720 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b700:	697b      	ldr	r3, [r7, #20]
 800b702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b706:	461a      	mov	r2, r3
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b70c:	697b      	ldr	r3, [r7, #20]
 800b70e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	697a      	ldr	r2, [r7, #20]
 800b716:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b71a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800b71e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b720:	2300      	movs	r3, #0
}
 800b722:	4618      	mov	r0, r3
 800b724:	371c      	adds	r7, #28
 800b726:	46bd      	mov	sp, r7
 800b728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72c:	4770      	bx	lr
 800b72e:	bf00      	nop
 800b730:	4f54300a 	.word	0x4f54300a

0800b734 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b734:	b480      	push	{r7}
 800b736:	b085      	sub	sp, #20
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b73c:	2300      	movs	r3, #0
 800b73e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	3301      	adds	r3, #1
 800b744:	60fb      	str	r3, [r7, #12]
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	4a13      	ldr	r2, [pc, #76]	; (800b798 <USB_CoreReset+0x64>)
 800b74a:	4293      	cmp	r3, r2
 800b74c:	d901      	bls.n	800b752 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b74e:	2303      	movs	r3, #3
 800b750:	e01b      	b.n	800b78a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	691b      	ldr	r3, [r3, #16]
 800b756:	2b00      	cmp	r3, #0
 800b758:	daf2      	bge.n	800b740 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b75a:	2300      	movs	r3, #0
 800b75c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	691b      	ldr	r3, [r3, #16]
 800b762:	f043 0201 	orr.w	r2, r3, #1
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	3301      	adds	r3, #1
 800b76e:	60fb      	str	r3, [r7, #12]
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	4a09      	ldr	r2, [pc, #36]	; (800b798 <USB_CoreReset+0x64>)
 800b774:	4293      	cmp	r3, r2
 800b776:	d901      	bls.n	800b77c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b778:	2303      	movs	r3, #3
 800b77a:	e006      	b.n	800b78a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	691b      	ldr	r3, [r3, #16]
 800b780:	f003 0301 	and.w	r3, r3, #1
 800b784:	2b01      	cmp	r3, #1
 800b786:	d0f0      	beq.n	800b76a <USB_CoreReset+0x36>

  return HAL_OK;
 800b788:	2300      	movs	r3, #0
}
 800b78a:	4618      	mov	r0, r3
 800b78c:	3714      	adds	r7, #20
 800b78e:	46bd      	mov	sp, r7
 800b790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b794:	4770      	bx	lr
 800b796:	bf00      	nop
 800b798:	00030d40 	.word	0x00030d40

0800b79c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b084      	sub	sp, #16
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
 800b7a4:	460b      	mov	r3, r1
 800b7a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b7a8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b7ac:	f00b fa7c 	bl	8016ca8 <malloc>
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d105      	bne.n	800b7c6 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	2200      	movs	r2, #0
 800b7be:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800b7c2:	2302      	movs	r3, #2
 800b7c4:	e066      	b.n	800b894 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	68fa      	ldr	r2, [r7, #12]
 800b7ca:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	7c1b      	ldrb	r3, [r3, #16]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d119      	bne.n	800b80a <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b7d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b7da:	2202      	movs	r2, #2
 800b7dc:	2181      	movs	r1, #129	; 0x81
 800b7de:	6878      	ldr	r0, [r7, #4]
 800b7e0:	f005 f917 	bl	8010a12 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2201      	movs	r2, #1
 800b7e8:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b7ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b7ee:	2202      	movs	r2, #2
 800b7f0:	2101      	movs	r1, #1
 800b7f2:	6878      	ldr	r0, [r7, #4]
 800b7f4:	f005 f90d 	bl	8010a12 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2201      	movs	r2, #1
 800b7fc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2210      	movs	r2, #16
 800b804:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800b808:	e016      	b.n	800b838 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b80a:	2340      	movs	r3, #64	; 0x40
 800b80c:	2202      	movs	r2, #2
 800b80e:	2181      	movs	r1, #129	; 0x81
 800b810:	6878      	ldr	r0, [r7, #4]
 800b812:	f005 f8fe 	bl	8010a12 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2201      	movs	r2, #1
 800b81a:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b81c:	2340      	movs	r3, #64	; 0x40
 800b81e:	2202      	movs	r2, #2
 800b820:	2101      	movs	r1, #1
 800b822:	6878      	ldr	r0, [r7, #4]
 800b824:	f005 f8f5 	bl	8010a12 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2201      	movs	r2, #1
 800b82c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2210      	movs	r2, #16
 800b834:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b838:	2308      	movs	r3, #8
 800b83a:	2203      	movs	r2, #3
 800b83c:	2182      	movs	r1, #130	; 0x82
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	f005 f8e7 	bl	8010a12 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2201      	movs	r2, #1
 800b848:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	2200      	movs	r2, #0
 800b85a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	2200      	movs	r2, #0
 800b862:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	7c1b      	ldrb	r3, [r3, #16]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d109      	bne.n	800b882 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b874:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b878:	2101      	movs	r1, #1
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f005 f9b8 	bl	8010bf0 <USBD_LL_PrepareReceive>
 800b880:	e007      	b.n	800b892 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b888:	2340      	movs	r3, #64	; 0x40
 800b88a:	2101      	movs	r1, #1
 800b88c:	6878      	ldr	r0, [r7, #4]
 800b88e:	f005 f9af 	bl	8010bf0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b892:	2300      	movs	r3, #0
}
 800b894:	4618      	mov	r0, r3
 800b896:	3710      	adds	r7, #16
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}

0800b89c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b084      	sub	sp, #16
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
 800b8a4:	460b      	mov	r3, r1
 800b8a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b8ac:	2181      	movs	r1, #129	; 0x81
 800b8ae:	6878      	ldr	r0, [r7, #4]
 800b8b0:	f005 f8d5 	bl	8010a5e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b8ba:	2101      	movs	r1, #1
 800b8bc:	6878      	ldr	r0, [r7, #4]
 800b8be:	f005 f8ce 	bl	8010a5e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b8ca:	2182      	movs	r1, #130	; 0x82
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	f005 f8c6 	bl	8010a5e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	2200      	movs	r2, #0
 800b8de:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d00e      	beq.n	800b90a <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b8f2:	685b      	ldr	r3, [r3, #4]
 800b8f4:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	f00b f9db 	bl	8016cb8 <free>
    pdev->pClassData = NULL;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2200      	movs	r2, #0
 800b906:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800b90a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b90c:	4618      	mov	r0, r3
 800b90e:	3710      	adds	r7, #16
 800b910:	46bd      	mov	sp, r7
 800b912:	bd80      	pop	{r7, pc}

0800b914 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b086      	sub	sp, #24
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
 800b91c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b924:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800b926:	2300      	movs	r3, #0
 800b928:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800b92a:	2300      	movs	r3, #0
 800b92c:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800b92e:	2300      	movs	r3, #0
 800b930:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	781b      	ldrb	r3, [r3, #0]
 800b936:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d03a      	beq.n	800b9b4 <USBD_CDC_Setup+0xa0>
 800b93e:	2b20      	cmp	r3, #32
 800b940:	f040 8097 	bne.w	800ba72 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	88db      	ldrh	r3, [r3, #6]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d029      	beq.n	800b9a0 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	781b      	ldrb	r3, [r3, #0]
 800b950:	b25b      	sxtb	r3, r3
 800b952:	2b00      	cmp	r3, #0
 800b954:	da11      	bge.n	800b97a <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b95c:	689b      	ldr	r3, [r3, #8]
 800b95e:	683a      	ldr	r2, [r7, #0]
 800b960:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800b962:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b964:	683a      	ldr	r2, [r7, #0]
 800b966:	88d2      	ldrh	r2, [r2, #6]
 800b968:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b96a:	6939      	ldr	r1, [r7, #16]
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	88db      	ldrh	r3, [r3, #6]
 800b970:	461a      	mov	r2, r3
 800b972:	6878      	ldr	r0, [r7, #4]
 800b974:	f001 fa9d 	bl	800ceb2 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800b978:	e082      	b.n	800ba80 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	785a      	ldrb	r2, [r3, #1]
 800b97e:	693b      	ldr	r3, [r7, #16]
 800b980:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	88db      	ldrh	r3, [r3, #6]
 800b988:	b2da      	uxtb	r2, r3
 800b98a:	693b      	ldr	r3, [r7, #16]
 800b98c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b990:	6939      	ldr	r1, [r7, #16]
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	88db      	ldrh	r3, [r3, #6]
 800b996:	461a      	mov	r2, r3
 800b998:	6878      	ldr	r0, [r7, #4]
 800b99a:	f001 fab6 	bl	800cf0a <USBD_CtlPrepareRx>
    break;
 800b99e:	e06f      	b.n	800ba80 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b9a6:	689b      	ldr	r3, [r3, #8]
 800b9a8:	683a      	ldr	r2, [r7, #0]
 800b9aa:	7850      	ldrb	r0, [r2, #1]
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	6839      	ldr	r1, [r7, #0]
 800b9b0:	4798      	blx	r3
    break;
 800b9b2:	e065      	b.n	800ba80 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	785b      	ldrb	r3, [r3, #1]
 800b9b8:	2b0b      	cmp	r3, #11
 800b9ba:	d84f      	bhi.n	800ba5c <USBD_CDC_Setup+0x148>
 800b9bc:	a201      	add	r2, pc, #4	; (adr r2, 800b9c4 <USBD_CDC_Setup+0xb0>)
 800b9be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9c2:	bf00      	nop
 800b9c4:	0800b9f5 	.word	0x0800b9f5
 800b9c8:	0800ba6b 	.word	0x0800ba6b
 800b9cc:	0800ba5d 	.word	0x0800ba5d
 800b9d0:	0800ba5d 	.word	0x0800ba5d
 800b9d4:	0800ba5d 	.word	0x0800ba5d
 800b9d8:	0800ba5d 	.word	0x0800ba5d
 800b9dc:	0800ba5d 	.word	0x0800ba5d
 800b9e0:	0800ba5d 	.word	0x0800ba5d
 800b9e4:	0800ba5d 	.word	0x0800ba5d
 800b9e8:	0800ba5d 	.word	0x0800ba5d
 800b9ec:	0800ba1d 	.word	0x0800ba1d
 800b9f0:	0800ba45 	.word	0x0800ba45
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9fa:	2b03      	cmp	r3, #3
 800b9fc:	d107      	bne.n	800ba0e <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b9fe:	f107 030c 	add.w	r3, r7, #12
 800ba02:	2202      	movs	r2, #2
 800ba04:	4619      	mov	r1, r3
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	f001 fa53 	bl	800ceb2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800ba0c:	e030      	b.n	800ba70 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800ba0e:	6839      	ldr	r1, [r7, #0]
 800ba10:	6878      	ldr	r0, [r7, #4]
 800ba12:	f001 f9dd 	bl	800cdd0 <USBD_CtlError>
        ret = USBD_FAIL;
 800ba16:	2303      	movs	r3, #3
 800ba18:	75fb      	strb	r3, [r7, #23]
      break;
 800ba1a:	e029      	b.n	800ba70 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba22:	2b03      	cmp	r3, #3
 800ba24:	d107      	bne.n	800ba36 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ba26:	f107 030f 	add.w	r3, r7, #15
 800ba2a:	2201      	movs	r2, #1
 800ba2c:	4619      	mov	r1, r3
 800ba2e:	6878      	ldr	r0, [r7, #4]
 800ba30:	f001 fa3f 	bl	800ceb2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800ba34:	e01c      	b.n	800ba70 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800ba36:	6839      	ldr	r1, [r7, #0]
 800ba38:	6878      	ldr	r0, [r7, #4]
 800ba3a:	f001 f9c9 	bl	800cdd0 <USBD_CtlError>
        ret = USBD_FAIL;
 800ba3e:	2303      	movs	r3, #3
 800ba40:	75fb      	strb	r3, [r7, #23]
      break;
 800ba42:	e015      	b.n	800ba70 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba4a:	2b03      	cmp	r3, #3
 800ba4c:	d00f      	beq.n	800ba6e <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800ba4e:	6839      	ldr	r1, [r7, #0]
 800ba50:	6878      	ldr	r0, [r7, #4]
 800ba52:	f001 f9bd 	bl	800cdd0 <USBD_CtlError>
        ret = USBD_FAIL;
 800ba56:	2303      	movs	r3, #3
 800ba58:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800ba5a:	e008      	b.n	800ba6e <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800ba5c:	6839      	ldr	r1, [r7, #0]
 800ba5e:	6878      	ldr	r0, [r7, #4]
 800ba60:	f001 f9b6 	bl	800cdd0 <USBD_CtlError>
      ret = USBD_FAIL;
 800ba64:	2303      	movs	r3, #3
 800ba66:	75fb      	strb	r3, [r7, #23]
      break;
 800ba68:	e002      	b.n	800ba70 <USBD_CDC_Setup+0x15c>
      break;
 800ba6a:	bf00      	nop
 800ba6c:	e008      	b.n	800ba80 <USBD_CDC_Setup+0x16c>
      break;
 800ba6e:	bf00      	nop
    }
    break;
 800ba70:	e006      	b.n	800ba80 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800ba72:	6839      	ldr	r1, [r7, #0]
 800ba74:	6878      	ldr	r0, [r7, #4]
 800ba76:	f001 f9ab 	bl	800cdd0 <USBD_CtlError>
    ret = USBD_FAIL;
 800ba7a:	2303      	movs	r3, #3
 800ba7c:	75fb      	strb	r3, [r7, #23]
    break;
 800ba7e:	bf00      	nop
  }

  return (uint8_t)ret;
 800ba80:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba82:	4618      	mov	r0, r3
 800ba84:	3718      	adds	r7, #24
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}
 800ba8a:	bf00      	nop

0800ba8c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b084      	sub	sp, #16
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
 800ba94:	460b      	mov	r3, r1
 800ba96:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ba9e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d101      	bne.n	800baae <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800baaa:	2303      	movs	r3, #3
 800baac:	e049      	b.n	800bb42 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bab4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800bab6:	78fa      	ldrb	r2, [r7, #3]
 800bab8:	6879      	ldr	r1, [r7, #4]
 800baba:	4613      	mov	r3, r2
 800babc:	009b      	lsls	r3, r3, #2
 800babe:	4413      	add	r3, r2
 800bac0:	009b      	lsls	r3, r3, #2
 800bac2:	440b      	add	r3, r1
 800bac4:	3318      	adds	r3, #24
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d029      	beq.n	800bb20 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800bacc:	78fa      	ldrb	r2, [r7, #3]
 800bace:	6879      	ldr	r1, [r7, #4]
 800bad0:	4613      	mov	r3, r2
 800bad2:	009b      	lsls	r3, r3, #2
 800bad4:	4413      	add	r3, r2
 800bad6:	009b      	lsls	r3, r3, #2
 800bad8:	440b      	add	r3, r1
 800bada:	3318      	adds	r3, #24
 800badc:	681a      	ldr	r2, [r3, #0]
 800bade:	78f9      	ldrb	r1, [r7, #3]
 800bae0:	68f8      	ldr	r0, [r7, #12]
 800bae2:	460b      	mov	r3, r1
 800bae4:	00db      	lsls	r3, r3, #3
 800bae6:	1a5b      	subs	r3, r3, r1
 800bae8:	009b      	lsls	r3, r3, #2
 800baea:	4403      	add	r3, r0
 800baec:	3344      	adds	r3, #68	; 0x44
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	fbb2 f1f3 	udiv	r1, r2, r3
 800baf4:	fb03 f301 	mul.w	r3, r3, r1
 800baf8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d110      	bne.n	800bb20 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800bafe:	78fa      	ldrb	r2, [r7, #3]
 800bb00:	6879      	ldr	r1, [r7, #4]
 800bb02:	4613      	mov	r3, r2
 800bb04:	009b      	lsls	r3, r3, #2
 800bb06:	4413      	add	r3, r2
 800bb08:	009b      	lsls	r3, r3, #2
 800bb0a:	440b      	add	r3, r1
 800bb0c:	3318      	adds	r3, #24
 800bb0e:	2200      	movs	r2, #0
 800bb10:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bb12:	78f9      	ldrb	r1, [r7, #3]
 800bb14:	2300      	movs	r3, #0
 800bb16:	2200      	movs	r2, #0
 800bb18:	6878      	ldr	r0, [r7, #4]
 800bb1a:	f005 f848 	bl	8010bae <USBD_LL_Transmit>
 800bb1e:	e00f      	b.n	800bb40 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800bb20:	68bb      	ldr	r3, [r7, #8]
 800bb22:	2200      	movs	r2, #0
 800bb24:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb2e:	691b      	ldr	r3, [r3, #16]
 800bb30:	68ba      	ldr	r2, [r7, #8]
 800bb32:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800bb36:	68ba      	ldr	r2, [r7, #8]
 800bb38:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800bb3c:	78fa      	ldrb	r2, [r7, #3]
 800bb3e:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800bb40:	2300      	movs	r3, #0
}
 800bb42:	4618      	mov	r0, r3
 800bb44:	3710      	adds	r7, #16
 800bb46:	46bd      	mov	sp, r7
 800bb48:	bd80      	pop	{r7, pc}

0800bb4a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bb4a:	b580      	push	{r7, lr}
 800bb4c:	b084      	sub	sp, #16
 800bb4e:	af00      	add	r7, sp, #0
 800bb50:	6078      	str	r0, [r7, #4]
 800bb52:	460b      	mov	r3, r1
 800bb54:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bb5c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d101      	bne.n	800bb6c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bb68:	2303      	movs	r3, #3
 800bb6a:	e015      	b.n	800bb98 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bb6c:	78fb      	ldrb	r3, [r7, #3]
 800bb6e:	4619      	mov	r1, r3
 800bb70:	6878      	ldr	r0, [r7, #4]
 800bb72:	f005 f85e 	bl	8010c32 <USBD_LL_GetRxDataSize>
 800bb76:	4602      	mov	r2, r0
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb84:	68db      	ldr	r3, [r3, #12]
 800bb86:	68fa      	ldr	r2, [r7, #12]
 800bb88:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800bb8c:	68fa      	ldr	r2, [r7, #12]
 800bb8e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800bb92:	4611      	mov	r1, r2
 800bb94:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800bb96:	2300      	movs	r3, #0
}
 800bb98:	4618      	mov	r0, r3
 800bb9a:	3710      	adds	r7, #16
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}

0800bba0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b084      	sub	sp, #16
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bbae:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d015      	beq.n	800bbe6 <USBD_CDC_EP0_RxReady+0x46>
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800bbc0:	2bff      	cmp	r3, #255	; 0xff
 800bbc2:	d010      	beq.n	800bbe6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bbca:	689b      	ldr	r3, [r3, #8]
 800bbcc:	68fa      	ldr	r2, [r7, #12]
 800bbce:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800bbd2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800bbd4:	68fa      	ldr	r2, [r7, #12]
 800bbd6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bbda:	b292      	uxth	r2, r2
 800bbdc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	22ff      	movs	r2, #255	; 0xff
 800bbe2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800bbe6:	2300      	movs	r3, #0
}
 800bbe8:	4618      	mov	r0, r3
 800bbea:	3710      	adds	r7, #16
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd80      	pop	{r7, pc}

0800bbf0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800bbf0:	b480      	push	{r7}
 800bbf2:	b083      	sub	sp, #12
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2243      	movs	r2, #67	; 0x43
 800bbfc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800bbfe:	4b03      	ldr	r3, [pc, #12]	; (800bc0c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800bc00:	4618      	mov	r0, r3
 800bc02:	370c      	adds	r7, #12
 800bc04:	46bd      	mov	sp, r7
 800bc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0a:	4770      	bx	lr
 800bc0c:	20000094 	.word	0x20000094

0800bc10 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800bc10:	b480      	push	{r7}
 800bc12:	b083      	sub	sp, #12
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	2243      	movs	r2, #67	; 0x43
 800bc1c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800bc1e:	4b03      	ldr	r3, [pc, #12]	; (800bc2c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800bc20:	4618      	mov	r0, r3
 800bc22:	370c      	adds	r7, #12
 800bc24:	46bd      	mov	sp, r7
 800bc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2a:	4770      	bx	lr
 800bc2c:	20000050 	.word	0x20000050

0800bc30 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800bc30:	b480      	push	{r7}
 800bc32:	b083      	sub	sp, #12
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2243      	movs	r2, #67	; 0x43
 800bc3c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800bc3e:	4b03      	ldr	r3, [pc, #12]	; (800bc4c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800bc40:	4618      	mov	r0, r3
 800bc42:	370c      	adds	r7, #12
 800bc44:	46bd      	mov	sp, r7
 800bc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4a:	4770      	bx	lr
 800bc4c:	200000d8 	.word	0x200000d8

0800bc50 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800bc50:	b480      	push	{r7}
 800bc52:	b083      	sub	sp, #12
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	220a      	movs	r2, #10
 800bc5c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800bc5e:	4b03      	ldr	r3, [pc, #12]	; (800bc6c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800bc60:	4618      	mov	r0, r3
 800bc62:	370c      	adds	r7, #12
 800bc64:	46bd      	mov	sp, r7
 800bc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6a:	4770      	bx	lr
 800bc6c:	2000000c 	.word	0x2000000c

0800bc70 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800bc70:	b480      	push	{r7}
 800bc72:	b083      	sub	sp, #12
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
 800bc78:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d101      	bne.n	800bc84 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800bc80:	2303      	movs	r3, #3
 800bc82:	e004      	b.n	800bc8e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	683a      	ldr	r2, [r7, #0]
 800bc88:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800bc8c:	2300      	movs	r3, #0
}
 800bc8e:	4618      	mov	r0, r3
 800bc90:	370c      	adds	r7, #12
 800bc92:	46bd      	mov	sp, r7
 800bc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc98:	4770      	bx	lr

0800bc9a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800bc9a:	b480      	push	{r7}
 800bc9c:	b087      	sub	sp, #28
 800bc9e:	af00      	add	r7, sp, #0
 800bca0:	60f8      	str	r0, [r7, #12]
 800bca2:	60b9      	str	r1, [r7, #8]
 800bca4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bcac:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800bcae:	697b      	ldr	r3, [r7, #20]
 800bcb0:	68ba      	ldr	r2, [r7, #8]
 800bcb2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800bcb6:	697b      	ldr	r3, [r7, #20]
 800bcb8:	687a      	ldr	r2, [r7, #4]
 800bcba:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800bcbe:	2300      	movs	r3, #0
}
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	371c      	adds	r7, #28
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcca:	4770      	bx	lr

0800bccc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800bccc:	b480      	push	{r7}
 800bcce:	b085      	sub	sp, #20
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
 800bcd4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bcdc:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	683a      	ldr	r2, [r7, #0]
 800bce2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800bce6:	2300      	movs	r3, #0
}
 800bce8:	4618      	mov	r0, r3
 800bcea:	3714      	adds	r7, #20
 800bcec:	46bd      	mov	sp, r7
 800bcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf2:	4770      	bx	lr

0800bcf4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b084      	sub	sp, #16
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bd02:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800bd04:	2301      	movs	r3, #1
 800bd06:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d101      	bne.n	800bd16 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bd12:	2303      	movs	r3, #3
 800bd14:	e01a      	b.n	800bd4c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800bd16:	68bb      	ldr	r3, [r7, #8]
 800bd18:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d114      	bne.n	800bd4a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800bd20:	68bb      	ldr	r3, [r7, #8]
 800bd22:	2201      	movs	r2, #1
 800bd24:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800bd28:	68bb      	ldr	r3, [r7, #8]
 800bd2a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800bd32:	68bb      	ldr	r3, [r7, #8]
 800bd34:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800bd38:	68bb      	ldr	r3, [r7, #8]
 800bd3a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800bd3e:	2181      	movs	r1, #129	; 0x81
 800bd40:	6878      	ldr	r0, [r7, #4]
 800bd42:	f004 ff34 	bl	8010bae <USBD_LL_Transmit>

    ret = USBD_OK;
 800bd46:	2300      	movs	r3, #0
 800bd48:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800bd4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	3710      	adds	r7, #16
 800bd50:	46bd      	mov	sp, r7
 800bd52:	bd80      	pop	{r7, pc}

0800bd54 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b084      	sub	sp, #16
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bd62:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d101      	bne.n	800bd72 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800bd6e:	2303      	movs	r3, #3
 800bd70:	e016      	b.n	800bda0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	7c1b      	ldrb	r3, [r3, #16]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d109      	bne.n	800bd8e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bd80:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bd84:	2101      	movs	r1, #1
 800bd86:	6878      	ldr	r0, [r7, #4]
 800bd88:	f004 ff32 	bl	8010bf0 <USBD_LL_PrepareReceive>
 800bd8c:	e007      	b.n	800bd9e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bd94:	2340      	movs	r3, #64	; 0x40
 800bd96:	2101      	movs	r1, #1
 800bd98:	6878      	ldr	r0, [r7, #4]
 800bd9a:	f004 ff29 	bl	8010bf0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bd9e:	2300      	movs	r3, #0
}
 800bda0:	4618      	mov	r0, r3
 800bda2:	3710      	adds	r7, #16
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}

0800bda8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b086      	sub	sp, #24
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	60f8      	str	r0, [r7, #12]
 800bdb0:	60b9      	str	r1, [r7, #8]
 800bdb2:	4613      	mov	r3, r2
 800bdb4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d101      	bne.n	800bdc0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800bdbc:	2303      	movs	r3, #3
 800bdbe:	e025      	b.n	800be0c <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d003      	beq.n	800bdd2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	2200      	movs	r2, #0
 800bdce:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d003      	beq.n	800bde4 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	2200      	movs	r2, #0
 800bde0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bde4:	68bb      	ldr	r3, [r7, #8]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d003      	beq.n	800bdf2 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	68ba      	ldr	r2, [r7, #8]
 800bdee:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	2201      	movs	r2, #1
 800bdf6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	79fa      	ldrb	r2, [r7, #7]
 800bdfe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800be00:	68f8      	ldr	r0, [r7, #12]
 800be02:	f004 fd9f 	bl	8010944 <USBD_LL_Init>
 800be06:	4603      	mov	r3, r0
 800be08:	75fb      	strb	r3, [r7, #23]

  return ret;
 800be0a:	7dfb      	ldrb	r3, [r7, #23]
}
 800be0c:	4618      	mov	r0, r3
 800be0e:	3718      	adds	r7, #24
 800be10:	46bd      	mov	sp, r7
 800be12:	bd80      	pop	{r7, pc}

0800be14 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b084      	sub	sp, #16
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
 800be1c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800be1e:	2300      	movs	r3, #0
 800be20:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800be22:	683b      	ldr	r3, [r7, #0]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d101      	bne.n	800be2c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800be28:	2303      	movs	r3, #3
 800be2a:	e010      	b.n	800be4e <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	683a      	ldr	r2, [r7, #0]
 800be30:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be3c:	f107 020e 	add.w	r2, r7, #14
 800be40:	4610      	mov	r0, r2
 800be42:	4798      	blx	r3
 800be44:	4602      	mov	r2, r0
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800be4c:	2300      	movs	r3, #0
}
 800be4e:	4618      	mov	r0, r3
 800be50:	3710      	adds	r7, #16
 800be52:	46bd      	mov	sp, r7
 800be54:	bd80      	pop	{r7, pc}

0800be56 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800be56:	b580      	push	{r7, lr}
 800be58:	b082      	sub	sp, #8
 800be5a:	af00      	add	r7, sp, #0
 800be5c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800be5e:	6878      	ldr	r0, [r7, #4]
 800be60:	f004 fdbc 	bl	80109dc <USBD_LL_Start>
 800be64:	4603      	mov	r3, r0
}
 800be66:	4618      	mov	r0, r3
 800be68:	3708      	adds	r7, #8
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}

0800be6e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800be6e:	b480      	push	{r7}
 800be70:	b083      	sub	sp, #12
 800be72:	af00      	add	r7, sp, #0
 800be74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800be76:	2300      	movs	r3, #0
}
 800be78:	4618      	mov	r0, r3
 800be7a:	370c      	adds	r7, #12
 800be7c:	46bd      	mov	sp, r7
 800be7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be82:	4770      	bx	lr

0800be84 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b084      	sub	sp, #16
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
 800be8c:	460b      	mov	r3, r1
 800be8e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800be90:	2303      	movs	r3, #3
 800be92:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d009      	beq.n	800beb2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	78fa      	ldrb	r2, [r7, #3]
 800bea8:	4611      	mov	r1, r2
 800beaa:	6878      	ldr	r0, [r7, #4]
 800beac:	4798      	blx	r3
 800beae:	4603      	mov	r3, r0
 800beb0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800beb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800beb4:	4618      	mov	r0, r3
 800beb6:	3710      	adds	r7, #16
 800beb8:	46bd      	mov	sp, r7
 800beba:	bd80      	pop	{r7, pc}

0800bebc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b082      	sub	sp, #8
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
 800bec4:	460b      	mov	r3, r1
 800bec6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d007      	beq.n	800bee2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bed8:	685b      	ldr	r3, [r3, #4]
 800beda:	78fa      	ldrb	r2, [r7, #3]
 800bedc:	4611      	mov	r1, r2
 800bede:	6878      	ldr	r0, [r7, #4]
 800bee0:	4798      	blx	r3
  }

  return USBD_OK;
 800bee2:	2300      	movs	r3, #0
}
 800bee4:	4618      	mov	r0, r3
 800bee6:	3708      	adds	r7, #8
 800bee8:	46bd      	mov	sp, r7
 800beea:	bd80      	pop	{r7, pc}

0800beec <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b084      	sub	sp, #16
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
 800bef4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800befc:	6839      	ldr	r1, [r7, #0]
 800befe:	4618      	mov	r0, r3
 800bf00:	f000 ff2c 	bl	800cd5c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2201      	movs	r2, #1
 800bf08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800bf12:	461a      	mov	r2, r3
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bf20:	f003 031f 	and.w	r3, r3, #31
 800bf24:	2b01      	cmp	r3, #1
 800bf26:	d00e      	beq.n	800bf46 <USBD_LL_SetupStage+0x5a>
 800bf28:	2b01      	cmp	r3, #1
 800bf2a:	d302      	bcc.n	800bf32 <USBD_LL_SetupStage+0x46>
 800bf2c:	2b02      	cmp	r3, #2
 800bf2e:	d014      	beq.n	800bf5a <USBD_LL_SetupStage+0x6e>
 800bf30:	e01d      	b.n	800bf6e <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bf38:	4619      	mov	r1, r3
 800bf3a:	6878      	ldr	r0, [r7, #4]
 800bf3c:	f000 fa18 	bl	800c370 <USBD_StdDevReq>
 800bf40:	4603      	mov	r3, r0
 800bf42:	73fb      	strb	r3, [r7, #15]
      break;
 800bf44:	e020      	b.n	800bf88 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bf4c:	4619      	mov	r1, r3
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	f000 fa7c 	bl	800c44c <USBD_StdItfReq>
 800bf54:	4603      	mov	r3, r0
 800bf56:	73fb      	strb	r3, [r7, #15]
      break;
 800bf58:	e016      	b.n	800bf88 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bf60:	4619      	mov	r1, r3
 800bf62:	6878      	ldr	r0, [r7, #4]
 800bf64:	f000 fab8 	bl	800c4d8 <USBD_StdEPReq>
 800bf68:	4603      	mov	r3, r0
 800bf6a:	73fb      	strb	r3, [r7, #15]
      break;
 800bf6c:	e00c      	b.n	800bf88 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bf74:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bf78:	b2db      	uxtb	r3, r3
 800bf7a:	4619      	mov	r1, r3
 800bf7c:	6878      	ldr	r0, [r7, #4]
 800bf7e:	f004 fd8d 	bl	8010a9c <USBD_LL_StallEP>
 800bf82:	4603      	mov	r3, r0
 800bf84:	73fb      	strb	r3, [r7, #15]
      break;
 800bf86:	bf00      	nop
  }

  return ret;
 800bf88:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	3710      	adds	r7, #16
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	bd80      	pop	{r7, pc}

0800bf92 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bf92:	b580      	push	{r7, lr}
 800bf94:	b086      	sub	sp, #24
 800bf96:	af00      	add	r7, sp, #0
 800bf98:	60f8      	str	r0, [r7, #12]
 800bf9a:	460b      	mov	r3, r1
 800bf9c:	607a      	str	r2, [r7, #4]
 800bf9e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bfa0:	7afb      	ldrb	r3, [r7, #11]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d137      	bne.n	800c016 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800bfac:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bfb4:	2b03      	cmp	r3, #3
 800bfb6:	d14a      	bne.n	800c04e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800bfb8:	693b      	ldr	r3, [r7, #16]
 800bfba:	689a      	ldr	r2, [r3, #8]
 800bfbc:	693b      	ldr	r3, [r7, #16]
 800bfbe:	68db      	ldr	r3, [r3, #12]
 800bfc0:	429a      	cmp	r2, r3
 800bfc2:	d913      	bls.n	800bfec <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bfc4:	693b      	ldr	r3, [r7, #16]
 800bfc6:	689a      	ldr	r2, [r3, #8]
 800bfc8:	693b      	ldr	r3, [r7, #16]
 800bfca:	68db      	ldr	r3, [r3, #12]
 800bfcc:	1ad2      	subs	r2, r2, r3
 800bfce:	693b      	ldr	r3, [r7, #16]
 800bfd0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800bfd2:	693b      	ldr	r3, [r7, #16]
 800bfd4:	68da      	ldr	r2, [r3, #12]
 800bfd6:	693b      	ldr	r3, [r7, #16]
 800bfd8:	689b      	ldr	r3, [r3, #8]
 800bfda:	4293      	cmp	r3, r2
 800bfdc:	bf28      	it	cs
 800bfde:	4613      	movcs	r3, r2
 800bfe0:	461a      	mov	r2, r3
 800bfe2:	6879      	ldr	r1, [r7, #4]
 800bfe4:	68f8      	ldr	r0, [r7, #12]
 800bfe6:	f000 ffad 	bl	800cf44 <USBD_CtlContinueRx>
 800bfea:	e030      	b.n	800c04e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bff2:	691b      	ldr	r3, [r3, #16]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d00a      	beq.n	800c00e <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800bffe:	2b03      	cmp	r3, #3
 800c000:	d105      	bne.n	800c00e <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c008:	691b      	ldr	r3, [r3, #16]
 800c00a:	68f8      	ldr	r0, [r7, #12]
 800c00c:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800c00e:	68f8      	ldr	r0, [r7, #12]
 800c010:	f000 ffa9 	bl	800cf66 <USBD_CtlSendStatus>
 800c014:	e01b      	b.n	800c04e <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c01c:	699b      	ldr	r3, [r3, #24]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d013      	beq.n	800c04a <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800c028:	2b03      	cmp	r3, #3
 800c02a:	d10e      	bne.n	800c04a <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c032:	699b      	ldr	r3, [r3, #24]
 800c034:	7afa      	ldrb	r2, [r7, #11]
 800c036:	4611      	mov	r1, r2
 800c038:	68f8      	ldr	r0, [r7, #12]
 800c03a:	4798      	blx	r3
 800c03c:	4603      	mov	r3, r0
 800c03e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800c040:	7dfb      	ldrb	r3, [r7, #23]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d003      	beq.n	800c04e <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800c046:	7dfb      	ldrb	r3, [r7, #23]
 800c048:	e002      	b.n	800c050 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c04a:	2303      	movs	r3, #3
 800c04c:	e000      	b.n	800c050 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800c04e:	2300      	movs	r3, #0
}
 800c050:	4618      	mov	r0, r3
 800c052:	3718      	adds	r7, #24
 800c054:	46bd      	mov	sp, r7
 800c056:	bd80      	pop	{r7, pc}

0800c058 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b086      	sub	sp, #24
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	60f8      	str	r0, [r7, #12]
 800c060:	460b      	mov	r3, r1
 800c062:	607a      	str	r2, [r7, #4]
 800c064:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c066:	7afb      	ldrb	r3, [r7, #11]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d16a      	bne.n	800c142 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	3314      	adds	r3, #20
 800c070:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c078:	2b02      	cmp	r3, #2
 800c07a:	d155      	bne.n	800c128 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800c07c:	693b      	ldr	r3, [r7, #16]
 800c07e:	689a      	ldr	r2, [r3, #8]
 800c080:	693b      	ldr	r3, [r7, #16]
 800c082:	68db      	ldr	r3, [r3, #12]
 800c084:	429a      	cmp	r2, r3
 800c086:	d914      	bls.n	800c0b2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c088:	693b      	ldr	r3, [r7, #16]
 800c08a:	689a      	ldr	r2, [r3, #8]
 800c08c:	693b      	ldr	r3, [r7, #16]
 800c08e:	68db      	ldr	r3, [r3, #12]
 800c090:	1ad2      	subs	r2, r2, r3
 800c092:	693b      	ldr	r3, [r7, #16]
 800c094:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c096:	693b      	ldr	r3, [r7, #16]
 800c098:	689b      	ldr	r3, [r3, #8]
 800c09a:	461a      	mov	r2, r3
 800c09c:	6879      	ldr	r1, [r7, #4]
 800c09e:	68f8      	ldr	r0, [r7, #12]
 800c0a0:	f000 ff22 	bl	800cee8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	2100      	movs	r1, #0
 800c0aa:	68f8      	ldr	r0, [r7, #12]
 800c0ac:	f004 fda0 	bl	8010bf0 <USBD_LL_PrepareReceive>
 800c0b0:	e03a      	b.n	800c128 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c0b2:	693b      	ldr	r3, [r7, #16]
 800c0b4:	68da      	ldr	r2, [r3, #12]
 800c0b6:	693b      	ldr	r3, [r7, #16]
 800c0b8:	689b      	ldr	r3, [r3, #8]
 800c0ba:	429a      	cmp	r2, r3
 800c0bc:	d11c      	bne.n	800c0f8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c0be:	693b      	ldr	r3, [r7, #16]
 800c0c0:	685a      	ldr	r2, [r3, #4]
 800c0c2:	693b      	ldr	r3, [r7, #16]
 800c0c4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c0c6:	429a      	cmp	r2, r3
 800c0c8:	d316      	bcc.n	800c0f8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c0ca:	693b      	ldr	r3, [r7, #16]
 800c0cc:	685a      	ldr	r2, [r3, #4]
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c0d4:	429a      	cmp	r2, r3
 800c0d6:	d20f      	bcs.n	800c0f8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c0d8:	2200      	movs	r2, #0
 800c0da:	2100      	movs	r1, #0
 800c0dc:	68f8      	ldr	r0, [r7, #12]
 800c0de:	f000 ff03 	bl	800cee8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	2100      	movs	r1, #0
 800c0f0:	68f8      	ldr	r0, [r7, #12]
 800c0f2:	f004 fd7d 	bl	8010bf0 <USBD_LL_PrepareReceive>
 800c0f6:	e017      	b.n	800c128 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0fe:	68db      	ldr	r3, [r3, #12]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d00a      	beq.n	800c11a <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c10a:	2b03      	cmp	r3, #3
 800c10c:	d105      	bne.n	800c11a <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c114:	68db      	ldr	r3, [r3, #12]
 800c116:	68f8      	ldr	r0, [r7, #12]
 800c118:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c11a:	2180      	movs	r1, #128	; 0x80
 800c11c:	68f8      	ldr	r0, [r7, #12]
 800c11e:	f004 fcbd 	bl	8010a9c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c122:	68f8      	ldr	r0, [r7, #12]
 800c124:	f000 ff32 	bl	800cf8c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c12e:	2b01      	cmp	r3, #1
 800c130:	d123      	bne.n	800c17a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c132:	68f8      	ldr	r0, [r7, #12]
 800c134:	f7ff fe9b 	bl	800be6e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	2200      	movs	r2, #0
 800c13c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c140:	e01b      	b.n	800c17a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c148:	695b      	ldr	r3, [r3, #20]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d013      	beq.n	800c176 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800c154:	2b03      	cmp	r3, #3
 800c156:	d10e      	bne.n	800c176 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c15e:	695b      	ldr	r3, [r3, #20]
 800c160:	7afa      	ldrb	r2, [r7, #11]
 800c162:	4611      	mov	r1, r2
 800c164:	68f8      	ldr	r0, [r7, #12]
 800c166:	4798      	blx	r3
 800c168:	4603      	mov	r3, r0
 800c16a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800c16c:	7dfb      	ldrb	r3, [r7, #23]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d003      	beq.n	800c17a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800c172:	7dfb      	ldrb	r3, [r7, #23]
 800c174:	e002      	b.n	800c17c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c176:	2303      	movs	r3, #3
 800c178:	e000      	b.n	800c17c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800c17a:	2300      	movs	r3, #0
}
 800c17c:	4618      	mov	r0, r3
 800c17e:	3718      	adds	r7, #24
 800c180:	46bd      	mov	sp, r7
 800c182:	bd80      	pop	{r7, pc}

0800c184 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b082      	sub	sp, #8
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	2201      	movs	r2, #1
 800c190:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	2200      	movs	r2, #0
 800c198:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2200      	movs	r2, #0
 800c1a0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d009      	beq.n	800c1c8 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1ba:	685b      	ldr	r3, [r3, #4]
 800c1bc:	687a      	ldr	r2, [r7, #4]
 800c1be:	6852      	ldr	r2, [r2, #4]
 800c1c0:	b2d2      	uxtb	r2, r2
 800c1c2:	4611      	mov	r1, r2
 800c1c4:	6878      	ldr	r0, [r7, #4]
 800c1c6:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c1c8:	2340      	movs	r3, #64	; 0x40
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	2100      	movs	r1, #0
 800c1ce:	6878      	ldr	r0, [r7, #4]
 800c1d0:	f004 fc1f 	bl	8010a12 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2201      	movs	r2, #1
 800c1d8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2240      	movs	r2, #64	; 0x40
 800c1e0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c1e4:	2340      	movs	r3, #64	; 0x40
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	2180      	movs	r1, #128	; 0x80
 800c1ea:	6878      	ldr	r0, [r7, #4]
 800c1ec:	f004 fc11 	bl	8010a12 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2201      	movs	r2, #1
 800c1f4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	2240      	movs	r2, #64	; 0x40
 800c1fa:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c1fc:	2300      	movs	r3, #0
}
 800c1fe:	4618      	mov	r0, r3
 800c200:	3708      	adds	r7, #8
 800c202:	46bd      	mov	sp, r7
 800c204:	bd80      	pop	{r7, pc}

0800c206 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c206:	b480      	push	{r7}
 800c208:	b083      	sub	sp, #12
 800c20a:	af00      	add	r7, sp, #0
 800c20c:	6078      	str	r0, [r7, #4]
 800c20e:	460b      	mov	r3, r1
 800c210:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	78fa      	ldrb	r2, [r7, #3]
 800c216:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c218:	2300      	movs	r3, #0
}
 800c21a:	4618      	mov	r0, r3
 800c21c:	370c      	adds	r7, #12
 800c21e:	46bd      	mov	sp, r7
 800c220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c224:	4770      	bx	lr

0800c226 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c226:	b480      	push	{r7}
 800c228:	b083      	sub	sp, #12
 800c22a:	af00      	add	r7, sp, #0
 800c22c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	2204      	movs	r2, #4
 800c23e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c242:	2300      	movs	r3, #0
}
 800c244:	4618      	mov	r0, r3
 800c246:	370c      	adds	r7, #12
 800c248:	46bd      	mov	sp, r7
 800c24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24e:	4770      	bx	lr

0800c250 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c250:	b480      	push	{r7}
 800c252:	b083      	sub	sp, #12
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c25e:	2b04      	cmp	r3, #4
 800c260:	d105      	bne.n	800c26e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c26e:	2300      	movs	r3, #0
}
 800c270:	4618      	mov	r0, r3
 800c272:	370c      	adds	r7, #12
 800c274:	46bd      	mov	sp, r7
 800c276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27a:	4770      	bx	lr

0800c27c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b082      	sub	sp, #8
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c28a:	2b03      	cmp	r3, #3
 800c28c:	d10b      	bne.n	800c2a6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c294:	69db      	ldr	r3, [r3, #28]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d005      	beq.n	800c2a6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2a0:	69db      	ldr	r3, [r3, #28]
 800c2a2:	6878      	ldr	r0, [r7, #4]
 800c2a4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c2a6:	2300      	movs	r3, #0
}
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	3708      	adds	r7, #8
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	bd80      	pop	{r7, pc}

0800c2b0 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c2b0:	b480      	push	{r7}
 800c2b2:	b083      	sub	sp, #12
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
 800c2b8:	460b      	mov	r3, r1
 800c2ba:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800c2bc:	2300      	movs	r3, #0
}
 800c2be:	4618      	mov	r0, r3
 800c2c0:	370c      	adds	r7, #12
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c8:	4770      	bx	lr

0800c2ca <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c2ca:	b480      	push	{r7}
 800c2cc:	b083      	sub	sp, #12
 800c2ce:	af00      	add	r7, sp, #0
 800c2d0:	6078      	str	r0, [r7, #4]
 800c2d2:	460b      	mov	r3, r1
 800c2d4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800c2d6:	2300      	movs	r3, #0
}
 800c2d8:	4618      	mov	r0, r3
 800c2da:	370c      	adds	r7, #12
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e2:	4770      	bx	lr

0800c2e4 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c2e4:	b480      	push	{r7}
 800c2e6:	b083      	sub	sp, #12
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c2ec:	2300      	movs	r3, #0
}
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	370c      	adds	r7, #12
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f8:	4770      	bx	lr

0800c2fa <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c2fa:	b580      	push	{r7, lr}
 800c2fc:	b082      	sub	sp, #8
 800c2fe:	af00      	add	r7, sp, #0
 800c300:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	2201      	movs	r2, #1
 800c306:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c310:	2b00      	cmp	r3, #0
 800c312:	d009      	beq.n	800c328 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c31a:	685b      	ldr	r3, [r3, #4]
 800c31c:	687a      	ldr	r2, [r7, #4]
 800c31e:	6852      	ldr	r2, [r2, #4]
 800c320:	b2d2      	uxtb	r2, r2
 800c322:	4611      	mov	r1, r2
 800c324:	6878      	ldr	r0, [r7, #4]
 800c326:	4798      	blx	r3
  }

  return USBD_OK;
 800c328:	2300      	movs	r3, #0
}
 800c32a:	4618      	mov	r0, r3
 800c32c:	3708      	adds	r7, #8
 800c32e:	46bd      	mov	sp, r7
 800c330:	bd80      	pop	{r7, pc}

0800c332 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c332:	b480      	push	{r7}
 800c334:	b087      	sub	sp, #28
 800c336:	af00      	add	r7, sp, #0
 800c338:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c33e:	697b      	ldr	r3, [r7, #20]
 800c340:	781b      	ldrb	r3, [r3, #0]
 800c342:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c344:	697b      	ldr	r3, [r7, #20]
 800c346:	3301      	adds	r3, #1
 800c348:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c34a:	697b      	ldr	r3, [r7, #20]
 800c34c:	781b      	ldrb	r3, [r3, #0]
 800c34e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c350:	8a3b      	ldrh	r3, [r7, #16]
 800c352:	021b      	lsls	r3, r3, #8
 800c354:	b21a      	sxth	r2, r3
 800c356:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c35a:	4313      	orrs	r3, r2
 800c35c:	b21b      	sxth	r3, r3
 800c35e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c360:	89fb      	ldrh	r3, [r7, #14]
}
 800c362:	4618      	mov	r0, r3
 800c364:	371c      	adds	r7, #28
 800c366:	46bd      	mov	sp, r7
 800c368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36c:	4770      	bx	lr
	...

0800c370 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b084      	sub	sp, #16
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
 800c378:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c37a:	2300      	movs	r3, #0
 800c37c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	781b      	ldrb	r3, [r3, #0]
 800c382:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c386:	2b20      	cmp	r3, #32
 800c388:	d004      	beq.n	800c394 <USBD_StdDevReq+0x24>
 800c38a:	2b40      	cmp	r3, #64	; 0x40
 800c38c:	d002      	beq.n	800c394 <USBD_StdDevReq+0x24>
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d00a      	beq.n	800c3a8 <USBD_StdDevReq+0x38>
 800c392:	e050      	b.n	800c436 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c39a:	689b      	ldr	r3, [r3, #8]
 800c39c:	6839      	ldr	r1, [r7, #0]
 800c39e:	6878      	ldr	r0, [r7, #4]
 800c3a0:	4798      	blx	r3
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	73fb      	strb	r3, [r7, #15]
    break;
 800c3a6:	e04b      	b.n	800c440 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800c3a8:	683b      	ldr	r3, [r7, #0]
 800c3aa:	785b      	ldrb	r3, [r3, #1]
 800c3ac:	2b09      	cmp	r3, #9
 800c3ae:	d83c      	bhi.n	800c42a <USBD_StdDevReq+0xba>
 800c3b0:	a201      	add	r2, pc, #4	; (adr r2, 800c3b8 <USBD_StdDevReq+0x48>)
 800c3b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3b6:	bf00      	nop
 800c3b8:	0800c40d 	.word	0x0800c40d
 800c3bc:	0800c421 	.word	0x0800c421
 800c3c0:	0800c42b 	.word	0x0800c42b
 800c3c4:	0800c417 	.word	0x0800c417
 800c3c8:	0800c42b 	.word	0x0800c42b
 800c3cc:	0800c3eb 	.word	0x0800c3eb
 800c3d0:	0800c3e1 	.word	0x0800c3e1
 800c3d4:	0800c42b 	.word	0x0800c42b
 800c3d8:	0800c403 	.word	0x0800c403
 800c3dc:	0800c3f5 	.word	0x0800c3f5
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800c3e0:	6839      	ldr	r1, [r7, #0]
 800c3e2:	6878      	ldr	r0, [r7, #4]
 800c3e4:	f000 f9ce 	bl	800c784 <USBD_GetDescriptor>
      break;
 800c3e8:	e024      	b.n	800c434 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800c3ea:	6839      	ldr	r1, [r7, #0]
 800c3ec:	6878      	ldr	r0, [r7, #4]
 800c3ee:	f000 fb33 	bl	800ca58 <USBD_SetAddress>
      break;
 800c3f2:	e01f      	b.n	800c434 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800c3f4:	6839      	ldr	r1, [r7, #0]
 800c3f6:	6878      	ldr	r0, [r7, #4]
 800c3f8:	f000 fb70 	bl	800cadc <USBD_SetConfig>
 800c3fc:	4603      	mov	r3, r0
 800c3fe:	73fb      	strb	r3, [r7, #15]
      break;
 800c400:	e018      	b.n	800c434 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800c402:	6839      	ldr	r1, [r7, #0]
 800c404:	6878      	ldr	r0, [r7, #4]
 800c406:	f000 fc0d 	bl	800cc24 <USBD_GetConfig>
      break;
 800c40a:	e013      	b.n	800c434 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800c40c:	6839      	ldr	r1, [r7, #0]
 800c40e:	6878      	ldr	r0, [r7, #4]
 800c410:	f000 fc3c 	bl	800cc8c <USBD_GetStatus>
      break;
 800c414:	e00e      	b.n	800c434 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800c416:	6839      	ldr	r1, [r7, #0]
 800c418:	6878      	ldr	r0, [r7, #4]
 800c41a:	f000 fc6a 	bl	800ccf2 <USBD_SetFeature>
      break;
 800c41e:	e009      	b.n	800c434 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800c420:	6839      	ldr	r1, [r7, #0]
 800c422:	6878      	ldr	r0, [r7, #4]
 800c424:	f000 fc79 	bl	800cd1a <USBD_ClrFeature>
      break;
 800c428:	e004      	b.n	800c434 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800c42a:	6839      	ldr	r1, [r7, #0]
 800c42c:	6878      	ldr	r0, [r7, #4]
 800c42e:	f000 fccf 	bl	800cdd0 <USBD_CtlError>
      break;
 800c432:	bf00      	nop
    }
    break;
 800c434:	e004      	b.n	800c440 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800c436:	6839      	ldr	r1, [r7, #0]
 800c438:	6878      	ldr	r0, [r7, #4]
 800c43a:	f000 fcc9 	bl	800cdd0 <USBD_CtlError>
    break;
 800c43e:	bf00      	nop
  }

  return ret;
 800c440:	7bfb      	ldrb	r3, [r7, #15]
}
 800c442:	4618      	mov	r0, r3
 800c444:	3710      	adds	r7, #16
 800c446:	46bd      	mov	sp, r7
 800c448:	bd80      	pop	{r7, pc}
 800c44a:	bf00      	nop

0800c44c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b084      	sub	sp, #16
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
 800c454:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c456:	2300      	movs	r3, #0
 800c458:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c45a:	683b      	ldr	r3, [r7, #0]
 800c45c:	781b      	ldrb	r3, [r3, #0]
 800c45e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c462:	2b20      	cmp	r3, #32
 800c464:	d003      	beq.n	800c46e <USBD_StdItfReq+0x22>
 800c466:	2b40      	cmp	r3, #64	; 0x40
 800c468:	d001      	beq.n	800c46e <USBD_StdItfReq+0x22>
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d12a      	bne.n	800c4c4 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c474:	3b01      	subs	r3, #1
 800c476:	2b02      	cmp	r3, #2
 800c478:	d81d      	bhi.n	800c4b6 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c47a:	683b      	ldr	r3, [r7, #0]
 800c47c:	889b      	ldrh	r3, [r3, #4]
 800c47e:	b2db      	uxtb	r3, r3
 800c480:	2b01      	cmp	r3, #1
 800c482:	d813      	bhi.n	800c4ac <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c48a:	689b      	ldr	r3, [r3, #8]
 800c48c:	6839      	ldr	r1, [r7, #0]
 800c48e:	6878      	ldr	r0, [r7, #4]
 800c490:	4798      	blx	r3
 800c492:	4603      	mov	r3, r0
 800c494:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800c496:	683b      	ldr	r3, [r7, #0]
 800c498:	88db      	ldrh	r3, [r3, #6]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d110      	bne.n	800c4c0 <USBD_StdItfReq+0x74>
 800c49e:	7bfb      	ldrb	r3, [r7, #15]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d10d      	bne.n	800c4c0 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800c4a4:	6878      	ldr	r0, [r7, #4]
 800c4a6:	f000 fd5e 	bl	800cf66 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800c4aa:	e009      	b.n	800c4c0 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800c4ac:	6839      	ldr	r1, [r7, #0]
 800c4ae:	6878      	ldr	r0, [r7, #4]
 800c4b0:	f000 fc8e 	bl	800cdd0 <USBD_CtlError>
      break;
 800c4b4:	e004      	b.n	800c4c0 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800c4b6:	6839      	ldr	r1, [r7, #0]
 800c4b8:	6878      	ldr	r0, [r7, #4]
 800c4ba:	f000 fc89 	bl	800cdd0 <USBD_CtlError>
      break;
 800c4be:	e000      	b.n	800c4c2 <USBD_StdItfReq+0x76>
      break;
 800c4c0:	bf00      	nop
    }
    break;
 800c4c2:	e004      	b.n	800c4ce <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800c4c4:	6839      	ldr	r1, [r7, #0]
 800c4c6:	6878      	ldr	r0, [r7, #4]
 800c4c8:	f000 fc82 	bl	800cdd0 <USBD_CtlError>
    break;
 800c4cc:	bf00      	nop
  }

  return ret;
 800c4ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	3710      	adds	r7, #16
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	bd80      	pop	{r7, pc}

0800c4d8 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b084      	sub	sp, #16
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
 800c4e0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c4e6:	683b      	ldr	r3, [r7, #0]
 800c4e8:	889b      	ldrh	r3, [r3, #4]
 800c4ea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	781b      	ldrb	r3, [r3, #0]
 800c4f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c4f4:	2b20      	cmp	r3, #32
 800c4f6:	d004      	beq.n	800c502 <USBD_StdEPReq+0x2a>
 800c4f8:	2b40      	cmp	r3, #64	; 0x40
 800c4fa:	d002      	beq.n	800c502 <USBD_StdEPReq+0x2a>
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d00a      	beq.n	800c516 <USBD_StdEPReq+0x3e>
 800c500:	e135      	b.n	800c76e <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c508:	689b      	ldr	r3, [r3, #8]
 800c50a:	6839      	ldr	r1, [r7, #0]
 800c50c:	6878      	ldr	r0, [r7, #4]
 800c50e:	4798      	blx	r3
 800c510:	4603      	mov	r3, r0
 800c512:	73fb      	strb	r3, [r7, #15]
    break;
 800c514:	e130      	b.n	800c778 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	785b      	ldrb	r3, [r3, #1]
 800c51a:	2b01      	cmp	r3, #1
 800c51c:	d03e      	beq.n	800c59c <USBD_StdEPReq+0xc4>
 800c51e:	2b03      	cmp	r3, #3
 800c520:	d002      	beq.n	800c528 <USBD_StdEPReq+0x50>
 800c522:	2b00      	cmp	r3, #0
 800c524:	d077      	beq.n	800c616 <USBD_StdEPReq+0x13e>
 800c526:	e11c      	b.n	800c762 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c52e:	2b02      	cmp	r3, #2
 800c530:	d002      	beq.n	800c538 <USBD_StdEPReq+0x60>
 800c532:	2b03      	cmp	r3, #3
 800c534:	d015      	beq.n	800c562 <USBD_StdEPReq+0x8a>
 800c536:	e02b      	b.n	800c590 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c538:	7bbb      	ldrb	r3, [r7, #14]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d00c      	beq.n	800c558 <USBD_StdEPReq+0x80>
 800c53e:	7bbb      	ldrb	r3, [r7, #14]
 800c540:	2b80      	cmp	r3, #128	; 0x80
 800c542:	d009      	beq.n	800c558 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800c544:	7bbb      	ldrb	r3, [r7, #14]
 800c546:	4619      	mov	r1, r3
 800c548:	6878      	ldr	r0, [r7, #4]
 800c54a:	f004 faa7 	bl	8010a9c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c54e:	2180      	movs	r1, #128	; 0x80
 800c550:	6878      	ldr	r0, [r7, #4]
 800c552:	f004 faa3 	bl	8010a9c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c556:	e020      	b.n	800c59a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800c558:	6839      	ldr	r1, [r7, #0]
 800c55a:	6878      	ldr	r0, [r7, #4]
 800c55c:	f000 fc38 	bl	800cdd0 <USBD_CtlError>
        break;
 800c560:	e01b      	b.n	800c59a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	885b      	ldrh	r3, [r3, #2]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d10e      	bne.n	800c588 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c56a:	7bbb      	ldrb	r3, [r7, #14]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d00b      	beq.n	800c588 <USBD_StdEPReq+0xb0>
 800c570:	7bbb      	ldrb	r3, [r7, #14]
 800c572:	2b80      	cmp	r3, #128	; 0x80
 800c574:	d008      	beq.n	800c588 <USBD_StdEPReq+0xb0>
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	88db      	ldrh	r3, [r3, #6]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d104      	bne.n	800c588 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800c57e:	7bbb      	ldrb	r3, [r7, #14]
 800c580:	4619      	mov	r1, r3
 800c582:	6878      	ldr	r0, [r7, #4]
 800c584:	f004 fa8a 	bl	8010a9c <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800c588:	6878      	ldr	r0, [r7, #4]
 800c58a:	f000 fcec 	bl	800cf66 <USBD_CtlSendStatus>

        break;
 800c58e:	e004      	b.n	800c59a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800c590:	6839      	ldr	r1, [r7, #0]
 800c592:	6878      	ldr	r0, [r7, #4]
 800c594:	f000 fc1c 	bl	800cdd0 <USBD_CtlError>
        break;
 800c598:	bf00      	nop
      }
      break;
 800c59a:	e0e7      	b.n	800c76c <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5a2:	2b02      	cmp	r3, #2
 800c5a4:	d002      	beq.n	800c5ac <USBD_StdEPReq+0xd4>
 800c5a6:	2b03      	cmp	r3, #3
 800c5a8:	d015      	beq.n	800c5d6 <USBD_StdEPReq+0xfe>
 800c5aa:	e02d      	b.n	800c608 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c5ac:	7bbb      	ldrb	r3, [r7, #14]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d00c      	beq.n	800c5cc <USBD_StdEPReq+0xf4>
 800c5b2:	7bbb      	ldrb	r3, [r7, #14]
 800c5b4:	2b80      	cmp	r3, #128	; 0x80
 800c5b6:	d009      	beq.n	800c5cc <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800c5b8:	7bbb      	ldrb	r3, [r7, #14]
 800c5ba:	4619      	mov	r1, r3
 800c5bc:	6878      	ldr	r0, [r7, #4]
 800c5be:	f004 fa6d 	bl	8010a9c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c5c2:	2180      	movs	r1, #128	; 0x80
 800c5c4:	6878      	ldr	r0, [r7, #4]
 800c5c6:	f004 fa69 	bl	8010a9c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c5ca:	e023      	b.n	800c614 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800c5cc:	6839      	ldr	r1, [r7, #0]
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	f000 fbfe 	bl	800cdd0 <USBD_CtlError>
        break;
 800c5d4:	e01e      	b.n	800c614 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	885b      	ldrh	r3, [r3, #2]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d119      	bne.n	800c612 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800c5de:	7bbb      	ldrb	r3, [r7, #14]
 800c5e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d004      	beq.n	800c5f2 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c5e8:	7bbb      	ldrb	r3, [r7, #14]
 800c5ea:	4619      	mov	r1, r3
 800c5ec:	6878      	ldr	r0, [r7, #4]
 800c5ee:	f004 fa74 	bl	8010ada <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800c5f2:	6878      	ldr	r0, [r7, #4]
 800c5f4:	f000 fcb7 	bl	800cf66 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5fe:	689b      	ldr	r3, [r3, #8]
 800c600:	6839      	ldr	r1, [r7, #0]
 800c602:	6878      	ldr	r0, [r7, #4]
 800c604:	4798      	blx	r3
        }
        break;
 800c606:	e004      	b.n	800c612 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800c608:	6839      	ldr	r1, [r7, #0]
 800c60a:	6878      	ldr	r0, [r7, #4]
 800c60c:	f000 fbe0 	bl	800cdd0 <USBD_CtlError>
        break;
 800c610:	e000      	b.n	800c614 <USBD_StdEPReq+0x13c>
        break;
 800c612:	bf00      	nop
      }
      break;
 800c614:	e0aa      	b.n	800c76c <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c61c:	2b02      	cmp	r3, #2
 800c61e:	d002      	beq.n	800c626 <USBD_StdEPReq+0x14e>
 800c620:	2b03      	cmp	r3, #3
 800c622:	d032      	beq.n	800c68a <USBD_StdEPReq+0x1b2>
 800c624:	e097      	b.n	800c756 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c626:	7bbb      	ldrb	r3, [r7, #14]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d007      	beq.n	800c63c <USBD_StdEPReq+0x164>
 800c62c:	7bbb      	ldrb	r3, [r7, #14]
 800c62e:	2b80      	cmp	r3, #128	; 0x80
 800c630:	d004      	beq.n	800c63c <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800c632:	6839      	ldr	r1, [r7, #0]
 800c634:	6878      	ldr	r0, [r7, #4]
 800c636:	f000 fbcb 	bl	800cdd0 <USBD_CtlError>
          break;
 800c63a:	e091      	b.n	800c760 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c63c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c640:	2b00      	cmp	r3, #0
 800c642:	da0b      	bge.n	800c65c <USBD_StdEPReq+0x184>
 800c644:	7bbb      	ldrb	r3, [r7, #14]
 800c646:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c64a:	4613      	mov	r3, r2
 800c64c:	009b      	lsls	r3, r3, #2
 800c64e:	4413      	add	r3, r2
 800c650:	009b      	lsls	r3, r3, #2
 800c652:	3310      	adds	r3, #16
 800c654:	687a      	ldr	r2, [r7, #4]
 800c656:	4413      	add	r3, r2
 800c658:	3304      	adds	r3, #4
 800c65a:	e00b      	b.n	800c674 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800c65c:	7bbb      	ldrb	r3, [r7, #14]
 800c65e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c662:	4613      	mov	r3, r2
 800c664:	009b      	lsls	r3, r3, #2
 800c666:	4413      	add	r3, r2
 800c668:	009b      	lsls	r3, r3, #2
 800c66a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c66e:	687a      	ldr	r2, [r7, #4]
 800c670:	4413      	add	r3, r2
 800c672:	3304      	adds	r3, #4
 800c674:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800c676:	68bb      	ldr	r3, [r7, #8]
 800c678:	2200      	movs	r2, #0
 800c67a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c67c:	68bb      	ldr	r3, [r7, #8]
 800c67e:	2202      	movs	r2, #2
 800c680:	4619      	mov	r1, r3
 800c682:	6878      	ldr	r0, [r7, #4]
 800c684:	f000 fc15 	bl	800ceb2 <USBD_CtlSendData>
        break;
 800c688:	e06a      	b.n	800c760 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800c68a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	da11      	bge.n	800c6b6 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c692:	7bbb      	ldrb	r3, [r7, #14]
 800c694:	f003 020f 	and.w	r2, r3, #15
 800c698:	6879      	ldr	r1, [r7, #4]
 800c69a:	4613      	mov	r3, r2
 800c69c:	009b      	lsls	r3, r3, #2
 800c69e:	4413      	add	r3, r2
 800c6a0:	009b      	lsls	r3, r3, #2
 800c6a2:	440b      	add	r3, r1
 800c6a4:	3324      	adds	r3, #36	; 0x24
 800c6a6:	881b      	ldrh	r3, [r3, #0]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d117      	bne.n	800c6dc <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800c6ac:	6839      	ldr	r1, [r7, #0]
 800c6ae:	6878      	ldr	r0, [r7, #4]
 800c6b0:	f000 fb8e 	bl	800cdd0 <USBD_CtlError>
            break;
 800c6b4:	e054      	b.n	800c760 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c6b6:	7bbb      	ldrb	r3, [r7, #14]
 800c6b8:	f003 020f 	and.w	r2, r3, #15
 800c6bc:	6879      	ldr	r1, [r7, #4]
 800c6be:	4613      	mov	r3, r2
 800c6c0:	009b      	lsls	r3, r3, #2
 800c6c2:	4413      	add	r3, r2
 800c6c4:	009b      	lsls	r3, r3, #2
 800c6c6:	440b      	add	r3, r1
 800c6c8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c6cc:	881b      	ldrh	r3, [r3, #0]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d104      	bne.n	800c6dc <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800c6d2:	6839      	ldr	r1, [r7, #0]
 800c6d4:	6878      	ldr	r0, [r7, #4]
 800c6d6:	f000 fb7b 	bl	800cdd0 <USBD_CtlError>
            break;
 800c6da:	e041      	b.n	800c760 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c6dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	da0b      	bge.n	800c6fc <USBD_StdEPReq+0x224>
 800c6e4:	7bbb      	ldrb	r3, [r7, #14]
 800c6e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c6ea:	4613      	mov	r3, r2
 800c6ec:	009b      	lsls	r3, r3, #2
 800c6ee:	4413      	add	r3, r2
 800c6f0:	009b      	lsls	r3, r3, #2
 800c6f2:	3310      	adds	r3, #16
 800c6f4:	687a      	ldr	r2, [r7, #4]
 800c6f6:	4413      	add	r3, r2
 800c6f8:	3304      	adds	r3, #4
 800c6fa:	e00b      	b.n	800c714 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800c6fc:	7bbb      	ldrb	r3, [r7, #14]
 800c6fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c702:	4613      	mov	r3, r2
 800c704:	009b      	lsls	r3, r3, #2
 800c706:	4413      	add	r3, r2
 800c708:	009b      	lsls	r3, r3, #2
 800c70a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c70e:	687a      	ldr	r2, [r7, #4]
 800c710:	4413      	add	r3, r2
 800c712:	3304      	adds	r3, #4
 800c714:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c716:	7bbb      	ldrb	r3, [r7, #14]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d002      	beq.n	800c722 <USBD_StdEPReq+0x24a>
 800c71c:	7bbb      	ldrb	r3, [r7, #14]
 800c71e:	2b80      	cmp	r3, #128	; 0x80
 800c720:	d103      	bne.n	800c72a <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800c722:	68bb      	ldr	r3, [r7, #8]
 800c724:	2200      	movs	r2, #0
 800c726:	601a      	str	r2, [r3, #0]
 800c728:	e00e      	b.n	800c748 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c72a:	7bbb      	ldrb	r3, [r7, #14]
 800c72c:	4619      	mov	r1, r3
 800c72e:	6878      	ldr	r0, [r7, #4]
 800c730:	f004 f9f2 	bl	8010b18 <USBD_LL_IsStallEP>
 800c734:	4603      	mov	r3, r0
 800c736:	2b00      	cmp	r3, #0
 800c738:	d003      	beq.n	800c742 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	2201      	movs	r2, #1
 800c73e:	601a      	str	r2, [r3, #0]
 800c740:	e002      	b.n	800c748 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800c742:	68bb      	ldr	r3, [r7, #8]
 800c744:	2200      	movs	r2, #0
 800c746:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c748:	68bb      	ldr	r3, [r7, #8]
 800c74a:	2202      	movs	r2, #2
 800c74c:	4619      	mov	r1, r3
 800c74e:	6878      	ldr	r0, [r7, #4]
 800c750:	f000 fbaf 	bl	800ceb2 <USBD_CtlSendData>
          break;
 800c754:	e004      	b.n	800c760 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800c756:	6839      	ldr	r1, [r7, #0]
 800c758:	6878      	ldr	r0, [r7, #4]
 800c75a:	f000 fb39 	bl	800cdd0 <USBD_CtlError>
        break;
 800c75e:	bf00      	nop
      }
      break;
 800c760:	e004      	b.n	800c76c <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800c762:	6839      	ldr	r1, [r7, #0]
 800c764:	6878      	ldr	r0, [r7, #4]
 800c766:	f000 fb33 	bl	800cdd0 <USBD_CtlError>
      break;
 800c76a:	bf00      	nop
    }
    break;
 800c76c:	e004      	b.n	800c778 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800c76e:	6839      	ldr	r1, [r7, #0]
 800c770:	6878      	ldr	r0, [r7, #4]
 800c772:	f000 fb2d 	bl	800cdd0 <USBD_CtlError>
    break;
 800c776:	bf00      	nop
  }

  return ret;
 800c778:	7bfb      	ldrb	r3, [r7, #15]
}
 800c77a:	4618      	mov	r0, r3
 800c77c:	3710      	adds	r7, #16
 800c77e:	46bd      	mov	sp, r7
 800c780:	bd80      	pop	{r7, pc}
	...

0800c784 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c784:	b580      	push	{r7, lr}
 800c786:	b084      	sub	sp, #16
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
 800c78c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c78e:	2300      	movs	r3, #0
 800c790:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c792:	2300      	movs	r3, #0
 800c794:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c796:	2300      	movs	r3, #0
 800c798:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	885b      	ldrh	r3, [r3, #2]
 800c79e:	0a1b      	lsrs	r3, r3, #8
 800c7a0:	b29b      	uxth	r3, r3
 800c7a2:	3b01      	subs	r3, #1
 800c7a4:	2b06      	cmp	r3, #6
 800c7a6:	f200 8128 	bhi.w	800c9fa <USBD_GetDescriptor+0x276>
 800c7aa:	a201      	add	r2, pc, #4	; (adr r2, 800c7b0 <USBD_GetDescriptor+0x2c>)
 800c7ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7b0:	0800c7cd 	.word	0x0800c7cd
 800c7b4:	0800c7e5 	.word	0x0800c7e5
 800c7b8:	0800c825 	.word	0x0800c825
 800c7bc:	0800c9fb 	.word	0x0800c9fb
 800c7c0:	0800c9fb 	.word	0x0800c9fb
 800c7c4:	0800c99b 	.word	0x0800c99b
 800c7c8:	0800c9c7 	.word	0x0800c9c7
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	687a      	ldr	r2, [r7, #4]
 800c7d6:	7c12      	ldrb	r2, [r2, #16]
 800c7d8:	f107 0108 	add.w	r1, r7, #8
 800c7dc:	4610      	mov	r0, r2
 800c7de:	4798      	blx	r3
 800c7e0:	60f8      	str	r0, [r7, #12]
    break;
 800c7e2:	e112      	b.n	800ca0a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	7c1b      	ldrb	r3, [r3, #16]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d10d      	bne.n	800c808 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7f4:	f107 0208 	add.w	r2, r7, #8
 800c7f8:	4610      	mov	r0, r2
 800c7fa:	4798      	blx	r3
 800c7fc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	3301      	adds	r3, #1
 800c802:	2202      	movs	r2, #2
 800c804:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800c806:	e100      	b.n	800ca0a <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c80e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c810:	f107 0208 	add.w	r2, r7, #8
 800c814:	4610      	mov	r0, r2
 800c816:	4798      	blx	r3
 800c818:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	3301      	adds	r3, #1
 800c81e:	2202      	movs	r2, #2
 800c820:	701a      	strb	r2, [r3, #0]
    break;
 800c822:	e0f2      	b.n	800ca0a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800c824:	683b      	ldr	r3, [r7, #0]
 800c826:	885b      	ldrh	r3, [r3, #2]
 800c828:	b2db      	uxtb	r3, r3
 800c82a:	2b05      	cmp	r3, #5
 800c82c:	f200 80ac 	bhi.w	800c988 <USBD_GetDescriptor+0x204>
 800c830:	a201      	add	r2, pc, #4	; (adr r2, 800c838 <USBD_GetDescriptor+0xb4>)
 800c832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c836:	bf00      	nop
 800c838:	0800c851 	.word	0x0800c851
 800c83c:	0800c885 	.word	0x0800c885
 800c840:	0800c8b9 	.word	0x0800c8b9
 800c844:	0800c8ed 	.word	0x0800c8ed
 800c848:	0800c921 	.word	0x0800c921
 800c84c:	0800c955 	.word	0x0800c955
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c856:	685b      	ldr	r3, [r3, #4]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d00b      	beq.n	800c874 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c862:	685b      	ldr	r3, [r3, #4]
 800c864:	687a      	ldr	r2, [r7, #4]
 800c866:	7c12      	ldrb	r2, [r2, #16]
 800c868:	f107 0108 	add.w	r1, r7, #8
 800c86c:	4610      	mov	r0, r2
 800c86e:	4798      	blx	r3
 800c870:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c872:	e091      	b.n	800c998 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c874:	6839      	ldr	r1, [r7, #0]
 800c876:	6878      	ldr	r0, [r7, #4]
 800c878:	f000 faaa 	bl	800cdd0 <USBD_CtlError>
        err++;
 800c87c:	7afb      	ldrb	r3, [r7, #11]
 800c87e:	3301      	adds	r3, #1
 800c880:	72fb      	strb	r3, [r7, #11]
      break;
 800c882:	e089      	b.n	800c998 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c88a:	689b      	ldr	r3, [r3, #8]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d00b      	beq.n	800c8a8 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c896:	689b      	ldr	r3, [r3, #8]
 800c898:	687a      	ldr	r2, [r7, #4]
 800c89a:	7c12      	ldrb	r2, [r2, #16]
 800c89c:	f107 0108 	add.w	r1, r7, #8
 800c8a0:	4610      	mov	r0, r2
 800c8a2:	4798      	blx	r3
 800c8a4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c8a6:	e077      	b.n	800c998 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c8a8:	6839      	ldr	r1, [r7, #0]
 800c8aa:	6878      	ldr	r0, [r7, #4]
 800c8ac:	f000 fa90 	bl	800cdd0 <USBD_CtlError>
        err++;
 800c8b0:	7afb      	ldrb	r3, [r7, #11]
 800c8b2:	3301      	adds	r3, #1
 800c8b4:	72fb      	strb	r3, [r7, #11]
      break;
 800c8b6:	e06f      	b.n	800c998 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8be:	68db      	ldr	r3, [r3, #12]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d00b      	beq.n	800c8dc <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8ca:	68db      	ldr	r3, [r3, #12]
 800c8cc:	687a      	ldr	r2, [r7, #4]
 800c8ce:	7c12      	ldrb	r2, [r2, #16]
 800c8d0:	f107 0108 	add.w	r1, r7, #8
 800c8d4:	4610      	mov	r0, r2
 800c8d6:	4798      	blx	r3
 800c8d8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c8da:	e05d      	b.n	800c998 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c8dc:	6839      	ldr	r1, [r7, #0]
 800c8de:	6878      	ldr	r0, [r7, #4]
 800c8e0:	f000 fa76 	bl	800cdd0 <USBD_CtlError>
        err++;
 800c8e4:	7afb      	ldrb	r3, [r7, #11]
 800c8e6:	3301      	adds	r3, #1
 800c8e8:	72fb      	strb	r3, [r7, #11]
      break;
 800c8ea:	e055      	b.n	800c998 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8f2:	691b      	ldr	r3, [r3, #16]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d00b      	beq.n	800c910 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8fe:	691b      	ldr	r3, [r3, #16]
 800c900:	687a      	ldr	r2, [r7, #4]
 800c902:	7c12      	ldrb	r2, [r2, #16]
 800c904:	f107 0108 	add.w	r1, r7, #8
 800c908:	4610      	mov	r0, r2
 800c90a:	4798      	blx	r3
 800c90c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c90e:	e043      	b.n	800c998 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c910:	6839      	ldr	r1, [r7, #0]
 800c912:	6878      	ldr	r0, [r7, #4]
 800c914:	f000 fa5c 	bl	800cdd0 <USBD_CtlError>
        err++;
 800c918:	7afb      	ldrb	r3, [r7, #11]
 800c91a:	3301      	adds	r3, #1
 800c91c:	72fb      	strb	r3, [r7, #11]
      break;
 800c91e:	e03b      	b.n	800c998 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c926:	695b      	ldr	r3, [r3, #20]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d00b      	beq.n	800c944 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c932:	695b      	ldr	r3, [r3, #20]
 800c934:	687a      	ldr	r2, [r7, #4]
 800c936:	7c12      	ldrb	r2, [r2, #16]
 800c938:	f107 0108 	add.w	r1, r7, #8
 800c93c:	4610      	mov	r0, r2
 800c93e:	4798      	blx	r3
 800c940:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c942:	e029      	b.n	800c998 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c944:	6839      	ldr	r1, [r7, #0]
 800c946:	6878      	ldr	r0, [r7, #4]
 800c948:	f000 fa42 	bl	800cdd0 <USBD_CtlError>
        err++;
 800c94c:	7afb      	ldrb	r3, [r7, #11]
 800c94e:	3301      	adds	r3, #1
 800c950:	72fb      	strb	r3, [r7, #11]
      break;
 800c952:	e021      	b.n	800c998 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c95a:	699b      	ldr	r3, [r3, #24]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d00b      	beq.n	800c978 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c966:	699b      	ldr	r3, [r3, #24]
 800c968:	687a      	ldr	r2, [r7, #4]
 800c96a:	7c12      	ldrb	r2, [r2, #16]
 800c96c:	f107 0108 	add.w	r1, r7, #8
 800c970:	4610      	mov	r0, r2
 800c972:	4798      	blx	r3
 800c974:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c976:	e00f      	b.n	800c998 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c978:	6839      	ldr	r1, [r7, #0]
 800c97a:	6878      	ldr	r0, [r7, #4]
 800c97c:	f000 fa28 	bl	800cdd0 <USBD_CtlError>
        err++;
 800c980:	7afb      	ldrb	r3, [r7, #11]
 800c982:	3301      	adds	r3, #1
 800c984:	72fb      	strb	r3, [r7, #11]
      break;
 800c986:	e007      	b.n	800c998 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800c988:	6839      	ldr	r1, [r7, #0]
 800c98a:	6878      	ldr	r0, [r7, #4]
 800c98c:	f000 fa20 	bl	800cdd0 <USBD_CtlError>
      err++;
 800c990:	7afb      	ldrb	r3, [r7, #11]
 800c992:	3301      	adds	r3, #1
 800c994:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800c996:	bf00      	nop
    }
    break;
 800c998:	e037      	b.n	800ca0a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	7c1b      	ldrb	r3, [r3, #16]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d109      	bne.n	800c9b6 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9aa:	f107 0208 	add.w	r2, r7, #8
 800c9ae:	4610      	mov	r0, r2
 800c9b0:	4798      	blx	r3
 800c9b2:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800c9b4:	e029      	b.n	800ca0a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800c9b6:	6839      	ldr	r1, [r7, #0]
 800c9b8:	6878      	ldr	r0, [r7, #4]
 800c9ba:	f000 fa09 	bl	800cdd0 <USBD_CtlError>
      err++;
 800c9be:	7afb      	ldrb	r3, [r7, #11]
 800c9c0:	3301      	adds	r3, #1
 800c9c2:	72fb      	strb	r3, [r7, #11]
    break;
 800c9c4:	e021      	b.n	800ca0a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	7c1b      	ldrb	r3, [r3, #16]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d10d      	bne.n	800c9ea <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9d6:	f107 0208 	add.w	r2, r7, #8
 800c9da:	4610      	mov	r0, r2
 800c9dc:	4798      	blx	r3
 800c9de:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	3301      	adds	r3, #1
 800c9e4:	2207      	movs	r2, #7
 800c9e6:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800c9e8:	e00f      	b.n	800ca0a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800c9ea:	6839      	ldr	r1, [r7, #0]
 800c9ec:	6878      	ldr	r0, [r7, #4]
 800c9ee:	f000 f9ef 	bl	800cdd0 <USBD_CtlError>
      err++;
 800c9f2:	7afb      	ldrb	r3, [r7, #11]
 800c9f4:	3301      	adds	r3, #1
 800c9f6:	72fb      	strb	r3, [r7, #11]
    break;
 800c9f8:	e007      	b.n	800ca0a <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800c9fa:	6839      	ldr	r1, [r7, #0]
 800c9fc:	6878      	ldr	r0, [r7, #4]
 800c9fe:	f000 f9e7 	bl	800cdd0 <USBD_CtlError>
    err++;
 800ca02:	7afb      	ldrb	r3, [r7, #11]
 800ca04:	3301      	adds	r3, #1
 800ca06:	72fb      	strb	r3, [r7, #11]
    break;
 800ca08:	bf00      	nop
  }

  if (err != 0U)
 800ca0a:	7afb      	ldrb	r3, [r7, #11]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d11e      	bne.n	800ca4e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800ca10:	683b      	ldr	r3, [r7, #0]
 800ca12:	88db      	ldrh	r3, [r3, #6]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d016      	beq.n	800ca46 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800ca18:	893b      	ldrh	r3, [r7, #8]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d00e      	beq.n	800ca3c <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	88da      	ldrh	r2, [r3, #6]
 800ca22:	893b      	ldrh	r3, [r7, #8]
 800ca24:	4293      	cmp	r3, r2
 800ca26:	bf28      	it	cs
 800ca28:	4613      	movcs	r3, r2
 800ca2a:	b29b      	uxth	r3, r3
 800ca2c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800ca2e:	893b      	ldrh	r3, [r7, #8]
 800ca30:	461a      	mov	r2, r3
 800ca32:	68f9      	ldr	r1, [r7, #12]
 800ca34:	6878      	ldr	r0, [r7, #4]
 800ca36:	f000 fa3c 	bl	800ceb2 <USBD_CtlSendData>
 800ca3a:	e009      	b.n	800ca50 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800ca3c:	6839      	ldr	r1, [r7, #0]
 800ca3e:	6878      	ldr	r0, [r7, #4]
 800ca40:	f000 f9c6 	bl	800cdd0 <USBD_CtlError>
 800ca44:	e004      	b.n	800ca50 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800ca46:	6878      	ldr	r0, [r7, #4]
 800ca48:	f000 fa8d 	bl	800cf66 <USBD_CtlSendStatus>
 800ca4c:	e000      	b.n	800ca50 <USBD_GetDescriptor+0x2cc>
    return;
 800ca4e:	bf00      	nop
    }
  }
}
 800ca50:	3710      	adds	r7, #16
 800ca52:	46bd      	mov	sp, r7
 800ca54:	bd80      	pop	{r7, pc}
 800ca56:	bf00      	nop

0800ca58 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b084      	sub	sp, #16
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
 800ca60:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ca62:	683b      	ldr	r3, [r7, #0]
 800ca64:	889b      	ldrh	r3, [r3, #4]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d130      	bne.n	800cacc <USBD_SetAddress+0x74>
 800ca6a:	683b      	ldr	r3, [r7, #0]
 800ca6c:	88db      	ldrh	r3, [r3, #6]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d12c      	bne.n	800cacc <USBD_SetAddress+0x74>
 800ca72:	683b      	ldr	r3, [r7, #0]
 800ca74:	885b      	ldrh	r3, [r3, #2]
 800ca76:	2b7f      	cmp	r3, #127	; 0x7f
 800ca78:	d828      	bhi.n	800cacc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	885b      	ldrh	r3, [r3, #2]
 800ca7e:	b2db      	uxtb	r3, r3
 800ca80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca84:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca8c:	2b03      	cmp	r3, #3
 800ca8e:	d104      	bne.n	800ca9a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800ca90:	6839      	ldr	r1, [r7, #0]
 800ca92:	6878      	ldr	r0, [r7, #4]
 800ca94:	f000 f99c 	bl	800cdd0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca98:	e01c      	b.n	800cad4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	7bfa      	ldrb	r2, [r7, #15]
 800ca9e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800caa2:	7bfb      	ldrb	r3, [r7, #15]
 800caa4:	4619      	mov	r1, r3
 800caa6:	6878      	ldr	r0, [r7, #4]
 800caa8:	f004 f862 	bl	8010b70 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800caac:	6878      	ldr	r0, [r7, #4]
 800caae:	f000 fa5a 	bl	800cf66 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cab2:	7bfb      	ldrb	r3, [r7, #15]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d004      	beq.n	800cac2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	2202      	movs	r2, #2
 800cabc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cac0:	e008      	b.n	800cad4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	2201      	movs	r2, #1
 800cac6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800caca:	e003      	b.n	800cad4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cacc:	6839      	ldr	r1, [r7, #0]
 800cace:	6878      	ldr	r0, [r7, #4]
 800cad0:	f000 f97e 	bl	800cdd0 <USBD_CtlError>
  }
}
 800cad4:	bf00      	nop
 800cad6:	3710      	adds	r7, #16
 800cad8:	46bd      	mov	sp, r7
 800cada:	bd80      	pop	{r7, pc}

0800cadc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b084      	sub	sp, #16
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]
 800cae4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cae6:	2300      	movs	r3, #0
 800cae8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	885b      	ldrh	r3, [r3, #2]
 800caee:	b2da      	uxtb	r2, r3
 800caf0:	4b4b      	ldr	r3, [pc, #300]	; (800cc20 <USBD_SetConfig+0x144>)
 800caf2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800caf4:	4b4a      	ldr	r3, [pc, #296]	; (800cc20 <USBD_SetConfig+0x144>)
 800caf6:	781b      	ldrb	r3, [r3, #0]
 800caf8:	2b01      	cmp	r3, #1
 800cafa:	d905      	bls.n	800cb08 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800cafc:	6839      	ldr	r1, [r7, #0]
 800cafe:	6878      	ldr	r0, [r7, #4]
 800cb00:	f000 f966 	bl	800cdd0 <USBD_CtlError>
    return USBD_FAIL;
 800cb04:	2303      	movs	r3, #3
 800cb06:	e087      	b.n	800cc18 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb0e:	2b02      	cmp	r3, #2
 800cb10:	d002      	beq.n	800cb18 <USBD_SetConfig+0x3c>
 800cb12:	2b03      	cmp	r3, #3
 800cb14:	d025      	beq.n	800cb62 <USBD_SetConfig+0x86>
 800cb16:	e071      	b.n	800cbfc <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800cb18:	4b41      	ldr	r3, [pc, #260]	; (800cc20 <USBD_SetConfig+0x144>)
 800cb1a:	781b      	ldrb	r3, [r3, #0]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d01c      	beq.n	800cb5a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800cb20:	4b3f      	ldr	r3, [pc, #252]	; (800cc20 <USBD_SetConfig+0x144>)
 800cb22:	781b      	ldrb	r3, [r3, #0]
 800cb24:	461a      	mov	r2, r3
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800cb2a:	4b3d      	ldr	r3, [pc, #244]	; (800cc20 <USBD_SetConfig+0x144>)
 800cb2c:	781b      	ldrb	r3, [r3, #0]
 800cb2e:	4619      	mov	r1, r3
 800cb30:	6878      	ldr	r0, [r7, #4]
 800cb32:	f7ff f9a7 	bl	800be84 <USBD_SetClassConfig>
 800cb36:	4603      	mov	r3, r0
 800cb38:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800cb3a:	7bfb      	ldrb	r3, [r7, #15]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d004      	beq.n	800cb4a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800cb40:	6839      	ldr	r1, [r7, #0]
 800cb42:	6878      	ldr	r0, [r7, #4]
 800cb44:	f000 f944 	bl	800cdd0 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800cb48:	e065      	b.n	800cc16 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800cb4a:	6878      	ldr	r0, [r7, #4]
 800cb4c:	f000 fa0b 	bl	800cf66 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	2203      	movs	r2, #3
 800cb54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800cb58:	e05d      	b.n	800cc16 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800cb5a:	6878      	ldr	r0, [r7, #4]
 800cb5c:	f000 fa03 	bl	800cf66 <USBD_CtlSendStatus>
    break;
 800cb60:	e059      	b.n	800cc16 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800cb62:	4b2f      	ldr	r3, [pc, #188]	; (800cc20 <USBD_SetConfig+0x144>)
 800cb64:	781b      	ldrb	r3, [r3, #0]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d112      	bne.n	800cb90 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	2202      	movs	r2, #2
 800cb6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800cb72:	4b2b      	ldr	r3, [pc, #172]	; (800cc20 <USBD_SetConfig+0x144>)
 800cb74:	781b      	ldrb	r3, [r3, #0]
 800cb76:	461a      	mov	r2, r3
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cb7c:	4b28      	ldr	r3, [pc, #160]	; (800cc20 <USBD_SetConfig+0x144>)
 800cb7e:	781b      	ldrb	r3, [r3, #0]
 800cb80:	4619      	mov	r1, r3
 800cb82:	6878      	ldr	r0, [r7, #4]
 800cb84:	f7ff f99a 	bl	800bebc <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800cb88:	6878      	ldr	r0, [r7, #4]
 800cb8a:	f000 f9ec 	bl	800cf66 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800cb8e:	e042      	b.n	800cc16 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800cb90:	4b23      	ldr	r3, [pc, #140]	; (800cc20 <USBD_SetConfig+0x144>)
 800cb92:	781b      	ldrb	r3, [r3, #0]
 800cb94:	461a      	mov	r2, r3
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	685b      	ldr	r3, [r3, #4]
 800cb9a:	429a      	cmp	r2, r3
 800cb9c:	d02a      	beq.n	800cbf4 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	685b      	ldr	r3, [r3, #4]
 800cba2:	b2db      	uxtb	r3, r3
 800cba4:	4619      	mov	r1, r3
 800cba6:	6878      	ldr	r0, [r7, #4]
 800cba8:	f7ff f988 	bl	800bebc <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800cbac:	4b1c      	ldr	r3, [pc, #112]	; (800cc20 <USBD_SetConfig+0x144>)
 800cbae:	781b      	ldrb	r3, [r3, #0]
 800cbb0:	461a      	mov	r2, r3
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800cbb6:	4b1a      	ldr	r3, [pc, #104]	; (800cc20 <USBD_SetConfig+0x144>)
 800cbb8:	781b      	ldrb	r3, [r3, #0]
 800cbba:	4619      	mov	r1, r3
 800cbbc:	6878      	ldr	r0, [r7, #4]
 800cbbe:	f7ff f961 	bl	800be84 <USBD_SetClassConfig>
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800cbc6:	7bfb      	ldrb	r3, [r7, #15]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d00f      	beq.n	800cbec <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800cbcc:	6839      	ldr	r1, [r7, #0]
 800cbce:	6878      	ldr	r0, [r7, #4]
 800cbd0:	f000 f8fe 	bl	800cdd0 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	685b      	ldr	r3, [r3, #4]
 800cbd8:	b2db      	uxtb	r3, r3
 800cbda:	4619      	mov	r1, r3
 800cbdc:	6878      	ldr	r0, [r7, #4]
 800cbde:	f7ff f96d 	bl	800bebc <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	2202      	movs	r2, #2
 800cbe6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800cbea:	e014      	b.n	800cc16 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800cbec:	6878      	ldr	r0, [r7, #4]
 800cbee:	f000 f9ba 	bl	800cf66 <USBD_CtlSendStatus>
    break;
 800cbf2:	e010      	b.n	800cc16 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800cbf4:	6878      	ldr	r0, [r7, #4]
 800cbf6:	f000 f9b6 	bl	800cf66 <USBD_CtlSendStatus>
    break;
 800cbfa:	e00c      	b.n	800cc16 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800cbfc:	6839      	ldr	r1, [r7, #0]
 800cbfe:	6878      	ldr	r0, [r7, #4]
 800cc00:	f000 f8e6 	bl	800cdd0 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cc04:	4b06      	ldr	r3, [pc, #24]	; (800cc20 <USBD_SetConfig+0x144>)
 800cc06:	781b      	ldrb	r3, [r3, #0]
 800cc08:	4619      	mov	r1, r3
 800cc0a:	6878      	ldr	r0, [r7, #4]
 800cc0c:	f7ff f956 	bl	800bebc <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800cc10:	2303      	movs	r3, #3
 800cc12:	73fb      	strb	r3, [r7, #15]
    break;
 800cc14:	bf00      	nop
  }

  return ret;
 800cc16:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc18:	4618      	mov	r0, r3
 800cc1a:	3710      	adds	r7, #16
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	bd80      	pop	{r7, pc}
 800cc20:	20000568 	.word	0x20000568

0800cc24 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b082      	sub	sp, #8
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
 800cc2c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	88db      	ldrh	r3, [r3, #6]
 800cc32:	2b01      	cmp	r3, #1
 800cc34:	d004      	beq.n	800cc40 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cc36:	6839      	ldr	r1, [r7, #0]
 800cc38:	6878      	ldr	r0, [r7, #4]
 800cc3a:	f000 f8c9 	bl	800cdd0 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800cc3e:	e021      	b.n	800cc84 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc46:	2b01      	cmp	r3, #1
 800cc48:	db17      	blt.n	800cc7a <USBD_GetConfig+0x56>
 800cc4a:	2b02      	cmp	r3, #2
 800cc4c:	dd02      	ble.n	800cc54 <USBD_GetConfig+0x30>
 800cc4e:	2b03      	cmp	r3, #3
 800cc50:	d00b      	beq.n	800cc6a <USBD_GetConfig+0x46>
 800cc52:	e012      	b.n	800cc7a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	2200      	movs	r2, #0
 800cc58:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	3308      	adds	r3, #8
 800cc5e:	2201      	movs	r2, #1
 800cc60:	4619      	mov	r1, r3
 800cc62:	6878      	ldr	r0, [r7, #4]
 800cc64:	f000 f925 	bl	800ceb2 <USBD_CtlSendData>
      break;
 800cc68:	e00c      	b.n	800cc84 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	3304      	adds	r3, #4
 800cc6e:	2201      	movs	r2, #1
 800cc70:	4619      	mov	r1, r3
 800cc72:	6878      	ldr	r0, [r7, #4]
 800cc74:	f000 f91d 	bl	800ceb2 <USBD_CtlSendData>
      break;
 800cc78:	e004      	b.n	800cc84 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800cc7a:	6839      	ldr	r1, [r7, #0]
 800cc7c:	6878      	ldr	r0, [r7, #4]
 800cc7e:	f000 f8a7 	bl	800cdd0 <USBD_CtlError>
      break;
 800cc82:	bf00      	nop
}
 800cc84:	bf00      	nop
 800cc86:	3708      	adds	r7, #8
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	bd80      	pop	{r7, pc}

0800cc8c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	b082      	sub	sp, #8
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	6078      	str	r0, [r7, #4]
 800cc94:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc9c:	3b01      	subs	r3, #1
 800cc9e:	2b02      	cmp	r3, #2
 800cca0:	d81e      	bhi.n	800cce0 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800cca2:	683b      	ldr	r3, [r7, #0]
 800cca4:	88db      	ldrh	r3, [r3, #6]
 800cca6:	2b02      	cmp	r3, #2
 800cca8:	d004      	beq.n	800ccb4 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800ccaa:	6839      	ldr	r1, [r7, #0]
 800ccac:	6878      	ldr	r0, [r7, #4]
 800ccae:	f000 f88f 	bl	800cdd0 <USBD_CtlError>
      break;
 800ccb2:	e01a      	b.n	800ccea <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	2201      	movs	r2, #1
 800ccb8:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d005      	beq.n	800ccd0 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	68db      	ldr	r3, [r3, #12]
 800ccc8:	f043 0202 	orr.w	r2, r3, #2
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	330c      	adds	r3, #12
 800ccd4:	2202      	movs	r2, #2
 800ccd6:	4619      	mov	r1, r3
 800ccd8:	6878      	ldr	r0, [r7, #4]
 800ccda:	f000 f8ea 	bl	800ceb2 <USBD_CtlSendData>
    break;
 800ccde:	e004      	b.n	800ccea <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800cce0:	6839      	ldr	r1, [r7, #0]
 800cce2:	6878      	ldr	r0, [r7, #4]
 800cce4:	f000 f874 	bl	800cdd0 <USBD_CtlError>
    break;
 800cce8:	bf00      	nop
  }
}
 800ccea:	bf00      	nop
 800ccec:	3708      	adds	r7, #8
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	bd80      	pop	{r7, pc}

0800ccf2 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ccf2:	b580      	push	{r7, lr}
 800ccf4:	b082      	sub	sp, #8
 800ccf6:	af00      	add	r7, sp, #0
 800ccf8:	6078      	str	r0, [r7, #4]
 800ccfa:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ccfc:	683b      	ldr	r3, [r7, #0]
 800ccfe:	885b      	ldrh	r3, [r3, #2]
 800cd00:	2b01      	cmp	r3, #1
 800cd02:	d106      	bne.n	800cd12 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	2201      	movs	r2, #1
 800cd08:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cd0c:	6878      	ldr	r0, [r7, #4]
 800cd0e:	f000 f92a 	bl	800cf66 <USBD_CtlSendStatus>
  }
}
 800cd12:	bf00      	nop
 800cd14:	3708      	adds	r7, #8
 800cd16:	46bd      	mov	sp, r7
 800cd18:	bd80      	pop	{r7, pc}

0800cd1a <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd1a:	b580      	push	{r7, lr}
 800cd1c:	b082      	sub	sp, #8
 800cd1e:	af00      	add	r7, sp, #0
 800cd20:	6078      	str	r0, [r7, #4]
 800cd22:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd2a:	3b01      	subs	r3, #1
 800cd2c:	2b02      	cmp	r3, #2
 800cd2e:	d80b      	bhi.n	800cd48 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cd30:	683b      	ldr	r3, [r7, #0]
 800cd32:	885b      	ldrh	r3, [r3, #2]
 800cd34:	2b01      	cmp	r3, #1
 800cd36:	d10c      	bne.n	800cd52 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cd40:	6878      	ldr	r0, [r7, #4]
 800cd42:	f000 f910 	bl	800cf66 <USBD_CtlSendStatus>
      }
      break;
 800cd46:	e004      	b.n	800cd52 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800cd48:	6839      	ldr	r1, [r7, #0]
 800cd4a:	6878      	ldr	r0, [r7, #4]
 800cd4c:	f000 f840 	bl	800cdd0 <USBD_CtlError>
      break;
 800cd50:	e000      	b.n	800cd54 <USBD_ClrFeature+0x3a>
      break;
 800cd52:	bf00      	nop
  }
}
 800cd54:	bf00      	nop
 800cd56:	3708      	adds	r7, #8
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	bd80      	pop	{r7, pc}

0800cd5c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b084      	sub	sp, #16
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
 800cd64:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cd66:	683b      	ldr	r3, [r7, #0]
 800cd68:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	781a      	ldrb	r2, [r3, #0]
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	3301      	adds	r3, #1
 800cd76:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	781a      	ldrb	r2, [r3, #0]
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	3301      	adds	r3, #1
 800cd84:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cd86:	68f8      	ldr	r0, [r7, #12]
 800cd88:	f7ff fad3 	bl	800c332 <SWAPBYTE>
 800cd8c:	4603      	mov	r3, r0
 800cd8e:	461a      	mov	r2, r3
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	3301      	adds	r3, #1
 800cd98:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	3301      	adds	r3, #1
 800cd9e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cda0:	68f8      	ldr	r0, [r7, #12]
 800cda2:	f7ff fac6 	bl	800c332 <SWAPBYTE>
 800cda6:	4603      	mov	r3, r0
 800cda8:	461a      	mov	r2, r3
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	3301      	adds	r3, #1
 800cdb2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	3301      	adds	r3, #1
 800cdb8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cdba:	68f8      	ldr	r0, [r7, #12]
 800cdbc:	f7ff fab9 	bl	800c332 <SWAPBYTE>
 800cdc0:	4603      	mov	r3, r0
 800cdc2:	461a      	mov	r2, r3
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	80da      	strh	r2, [r3, #6]
}
 800cdc8:	bf00      	nop
 800cdca:	3710      	adds	r7, #16
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	bd80      	pop	{r7, pc}

0800cdd0 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b082      	sub	sp, #8
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
 800cdd8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cdda:	2180      	movs	r1, #128	; 0x80
 800cddc:	6878      	ldr	r0, [r7, #4]
 800cdde:	f003 fe5d 	bl	8010a9c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cde2:	2100      	movs	r1, #0
 800cde4:	6878      	ldr	r0, [r7, #4]
 800cde6:	f003 fe59 	bl	8010a9c <USBD_LL_StallEP>
}
 800cdea:	bf00      	nop
 800cdec:	3708      	adds	r7, #8
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	bd80      	pop	{r7, pc}

0800cdf2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cdf2:	b580      	push	{r7, lr}
 800cdf4:	b086      	sub	sp, #24
 800cdf6:	af00      	add	r7, sp, #0
 800cdf8:	60f8      	str	r0, [r7, #12]
 800cdfa:	60b9      	str	r1, [r7, #8]
 800cdfc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cdfe:	2300      	movs	r3, #0
 800ce00:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d036      	beq.n	800ce76 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ce0c:	6938      	ldr	r0, [r7, #16]
 800ce0e:	f000 f836 	bl	800ce7e <USBD_GetLen>
 800ce12:	4603      	mov	r3, r0
 800ce14:	3301      	adds	r3, #1
 800ce16:	b29b      	uxth	r3, r3
 800ce18:	005b      	lsls	r3, r3, #1
 800ce1a:	b29a      	uxth	r2, r3
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ce20:	7dfb      	ldrb	r3, [r7, #23]
 800ce22:	68ba      	ldr	r2, [r7, #8]
 800ce24:	4413      	add	r3, r2
 800ce26:	687a      	ldr	r2, [r7, #4]
 800ce28:	7812      	ldrb	r2, [r2, #0]
 800ce2a:	701a      	strb	r2, [r3, #0]
  idx++;
 800ce2c:	7dfb      	ldrb	r3, [r7, #23]
 800ce2e:	3301      	adds	r3, #1
 800ce30:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ce32:	7dfb      	ldrb	r3, [r7, #23]
 800ce34:	68ba      	ldr	r2, [r7, #8]
 800ce36:	4413      	add	r3, r2
 800ce38:	2203      	movs	r2, #3
 800ce3a:	701a      	strb	r2, [r3, #0]
  idx++;
 800ce3c:	7dfb      	ldrb	r3, [r7, #23]
 800ce3e:	3301      	adds	r3, #1
 800ce40:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ce42:	e013      	b.n	800ce6c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ce44:	7dfb      	ldrb	r3, [r7, #23]
 800ce46:	68ba      	ldr	r2, [r7, #8]
 800ce48:	4413      	add	r3, r2
 800ce4a:	693a      	ldr	r2, [r7, #16]
 800ce4c:	7812      	ldrb	r2, [r2, #0]
 800ce4e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ce50:	693b      	ldr	r3, [r7, #16]
 800ce52:	3301      	adds	r3, #1
 800ce54:	613b      	str	r3, [r7, #16]
    idx++;
 800ce56:	7dfb      	ldrb	r3, [r7, #23]
 800ce58:	3301      	adds	r3, #1
 800ce5a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ce5c:	7dfb      	ldrb	r3, [r7, #23]
 800ce5e:	68ba      	ldr	r2, [r7, #8]
 800ce60:	4413      	add	r3, r2
 800ce62:	2200      	movs	r2, #0
 800ce64:	701a      	strb	r2, [r3, #0]
    idx++;
 800ce66:	7dfb      	ldrb	r3, [r7, #23]
 800ce68:	3301      	adds	r3, #1
 800ce6a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ce6c:	693b      	ldr	r3, [r7, #16]
 800ce6e:	781b      	ldrb	r3, [r3, #0]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d1e7      	bne.n	800ce44 <USBD_GetString+0x52>
 800ce74:	e000      	b.n	800ce78 <USBD_GetString+0x86>
    return;
 800ce76:	bf00      	nop
  }
}
 800ce78:	3718      	adds	r7, #24
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	bd80      	pop	{r7, pc}

0800ce7e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ce7e:	b480      	push	{r7}
 800ce80:	b085      	sub	sp, #20
 800ce82:	af00      	add	r7, sp, #0
 800ce84:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ce86:	2300      	movs	r3, #0
 800ce88:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ce8e:	e005      	b.n	800ce9c <USBD_GetLen+0x1e>
  {
    len++;
 800ce90:	7bfb      	ldrb	r3, [r7, #15]
 800ce92:	3301      	adds	r3, #1
 800ce94:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ce96:	68bb      	ldr	r3, [r7, #8]
 800ce98:	3301      	adds	r3, #1
 800ce9a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ce9c:	68bb      	ldr	r3, [r7, #8]
 800ce9e:	781b      	ldrb	r3, [r3, #0]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d1f5      	bne.n	800ce90 <USBD_GetLen+0x12>
  }

  return len;
 800cea4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cea6:	4618      	mov	r0, r3
 800cea8:	3714      	adds	r7, #20
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb0:	4770      	bx	lr

0800ceb2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ceb2:	b580      	push	{r7, lr}
 800ceb4:	b084      	sub	sp, #16
 800ceb6:	af00      	add	r7, sp, #0
 800ceb8:	60f8      	str	r0, [r7, #12]
 800ceba:	60b9      	str	r1, [r7, #8]
 800cebc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	2202      	movs	r2, #2
 800cec2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	687a      	ldr	r2, [r7, #4]
 800ceca:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	687a      	ldr	r2, [r7, #4]
 800ced0:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	68ba      	ldr	r2, [r7, #8]
 800ced6:	2100      	movs	r1, #0
 800ced8:	68f8      	ldr	r0, [r7, #12]
 800ceda:	f003 fe68 	bl	8010bae <USBD_LL_Transmit>

  return USBD_OK;
 800cede:	2300      	movs	r3, #0
}
 800cee0:	4618      	mov	r0, r3
 800cee2:	3710      	adds	r7, #16
 800cee4:	46bd      	mov	sp, r7
 800cee6:	bd80      	pop	{r7, pc}

0800cee8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b084      	sub	sp, #16
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	60f8      	str	r0, [r7, #12]
 800cef0:	60b9      	str	r1, [r7, #8]
 800cef2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	68ba      	ldr	r2, [r7, #8]
 800cef8:	2100      	movs	r1, #0
 800cefa:	68f8      	ldr	r0, [r7, #12]
 800cefc:	f003 fe57 	bl	8010bae <USBD_LL_Transmit>

  return USBD_OK;
 800cf00:	2300      	movs	r3, #0
}
 800cf02:	4618      	mov	r0, r3
 800cf04:	3710      	adds	r7, #16
 800cf06:	46bd      	mov	sp, r7
 800cf08:	bd80      	pop	{r7, pc}

0800cf0a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cf0a:	b580      	push	{r7, lr}
 800cf0c:	b084      	sub	sp, #16
 800cf0e:	af00      	add	r7, sp, #0
 800cf10:	60f8      	str	r0, [r7, #12]
 800cf12:	60b9      	str	r1, [r7, #8]
 800cf14:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	2203      	movs	r2, #3
 800cf1a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	687a      	ldr	r2, [r7, #4]
 800cf22:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	687a      	ldr	r2, [r7, #4]
 800cf2a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	68ba      	ldr	r2, [r7, #8]
 800cf32:	2100      	movs	r1, #0
 800cf34:	68f8      	ldr	r0, [r7, #12]
 800cf36:	f003 fe5b 	bl	8010bf0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cf3a:	2300      	movs	r3, #0
}
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	3710      	adds	r7, #16
 800cf40:	46bd      	mov	sp, r7
 800cf42:	bd80      	pop	{r7, pc}

0800cf44 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cf44:	b580      	push	{r7, lr}
 800cf46:	b084      	sub	sp, #16
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	60f8      	str	r0, [r7, #12]
 800cf4c:	60b9      	str	r1, [r7, #8]
 800cf4e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	68ba      	ldr	r2, [r7, #8]
 800cf54:	2100      	movs	r1, #0
 800cf56:	68f8      	ldr	r0, [r7, #12]
 800cf58:	f003 fe4a 	bl	8010bf0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cf5c:	2300      	movs	r3, #0
}
 800cf5e:	4618      	mov	r0, r3
 800cf60:	3710      	adds	r7, #16
 800cf62:	46bd      	mov	sp, r7
 800cf64:	bd80      	pop	{r7, pc}

0800cf66 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cf66:	b580      	push	{r7, lr}
 800cf68:	b082      	sub	sp, #8
 800cf6a:	af00      	add	r7, sp, #0
 800cf6c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	2204      	movs	r2, #4
 800cf72:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cf76:	2300      	movs	r3, #0
 800cf78:	2200      	movs	r2, #0
 800cf7a:	2100      	movs	r1, #0
 800cf7c:	6878      	ldr	r0, [r7, #4]
 800cf7e:	f003 fe16 	bl	8010bae <USBD_LL_Transmit>

  return USBD_OK;
 800cf82:	2300      	movs	r3, #0
}
 800cf84:	4618      	mov	r0, r3
 800cf86:	3708      	adds	r7, #8
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	bd80      	pop	{r7, pc}

0800cf8c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b082      	sub	sp, #8
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	2205      	movs	r2, #5
 800cf98:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	2100      	movs	r1, #0
 800cfa2:	6878      	ldr	r0, [r7, #4]
 800cfa4:	f003 fe24 	bl	8010bf0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cfa8:	2300      	movs	r3, #0
}
 800cfaa:	4618      	mov	r0, r3
 800cfac:	3708      	adds	r7, #8
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	bd80      	pop	{r7, pc}

0800cfb2 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800cfb2:	b480      	push	{r7}
 800cfb4:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800cfb6:	bf00      	nop
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfbe:	4770      	bx	lr

0800cfc0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800cfc0:	b480      	push	{r7}
 800cfc2:	b085      	sub	sp, #20
 800cfc4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cfc6:	f3ef 8305 	mrs	r3, IPSR
 800cfca:	60bb      	str	r3, [r7, #8]
  return(result);
 800cfcc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d10f      	bne.n	800cff2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cfd2:	f3ef 8310 	mrs	r3, PRIMASK
 800cfd6:	607b      	str	r3, [r7, #4]
  return(result);
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d105      	bne.n	800cfea <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cfde:	f3ef 8311 	mrs	r3, BASEPRI
 800cfe2:	603b      	str	r3, [r7, #0]
  return(result);
 800cfe4:	683b      	ldr	r3, [r7, #0]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d007      	beq.n	800cffa <osKernelInitialize+0x3a>
 800cfea:	4b0e      	ldr	r3, [pc, #56]	; (800d024 <osKernelInitialize+0x64>)
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	2b02      	cmp	r3, #2
 800cff0:	d103      	bne.n	800cffa <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800cff2:	f06f 0305 	mvn.w	r3, #5
 800cff6:	60fb      	str	r3, [r7, #12]
 800cff8:	e00c      	b.n	800d014 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800cffa:	4b0a      	ldr	r3, [pc, #40]	; (800d024 <osKernelInitialize+0x64>)
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d105      	bne.n	800d00e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d002:	4b08      	ldr	r3, [pc, #32]	; (800d024 <osKernelInitialize+0x64>)
 800d004:	2201      	movs	r2, #1
 800d006:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d008:	2300      	movs	r3, #0
 800d00a:	60fb      	str	r3, [r7, #12]
 800d00c:	e002      	b.n	800d014 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800d00e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d012:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800d014:	68fb      	ldr	r3, [r7, #12]
}
 800d016:	4618      	mov	r0, r3
 800d018:	3714      	adds	r7, #20
 800d01a:	46bd      	mov	sp, r7
 800d01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d020:	4770      	bx	lr
 800d022:	bf00      	nop
 800d024:	2000056c 	.word	0x2000056c

0800d028 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d028:	b580      	push	{r7, lr}
 800d02a:	b084      	sub	sp, #16
 800d02c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d02e:	f3ef 8305 	mrs	r3, IPSR
 800d032:	60bb      	str	r3, [r7, #8]
  return(result);
 800d034:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d036:	2b00      	cmp	r3, #0
 800d038:	d10f      	bne.n	800d05a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d03a:	f3ef 8310 	mrs	r3, PRIMASK
 800d03e:	607b      	str	r3, [r7, #4]
  return(result);
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d105      	bne.n	800d052 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d046:	f3ef 8311 	mrs	r3, BASEPRI
 800d04a:	603b      	str	r3, [r7, #0]
  return(result);
 800d04c:	683b      	ldr	r3, [r7, #0]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d007      	beq.n	800d062 <osKernelStart+0x3a>
 800d052:	4b0f      	ldr	r3, [pc, #60]	; (800d090 <osKernelStart+0x68>)
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	2b02      	cmp	r3, #2
 800d058:	d103      	bne.n	800d062 <osKernelStart+0x3a>
    stat = osErrorISR;
 800d05a:	f06f 0305 	mvn.w	r3, #5
 800d05e:	60fb      	str	r3, [r7, #12]
 800d060:	e010      	b.n	800d084 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d062:	4b0b      	ldr	r3, [pc, #44]	; (800d090 <osKernelStart+0x68>)
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	2b01      	cmp	r3, #1
 800d068:	d109      	bne.n	800d07e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d06a:	f7ff ffa2 	bl	800cfb2 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d06e:	4b08      	ldr	r3, [pc, #32]	; (800d090 <osKernelStart+0x68>)
 800d070:	2202      	movs	r2, #2
 800d072:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d074:	f001 fb7e 	bl	800e774 <vTaskStartScheduler>
      stat = osOK;
 800d078:	2300      	movs	r3, #0
 800d07a:	60fb      	str	r3, [r7, #12]
 800d07c:	e002      	b.n	800d084 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800d07e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d082:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800d084:	68fb      	ldr	r3, [r7, #12]
}
 800d086:	4618      	mov	r0, r3
 800d088:	3710      	adds	r7, #16
 800d08a:	46bd      	mov	sp, r7
 800d08c:	bd80      	pop	{r7, pc}
 800d08e:	bf00      	nop
 800d090:	2000056c 	.word	0x2000056c

0800d094 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d094:	b580      	push	{r7, lr}
 800d096:	b090      	sub	sp, #64	; 0x40
 800d098:	af04      	add	r7, sp, #16
 800d09a:	60f8      	str	r0, [r7, #12]
 800d09c:	60b9      	str	r1, [r7, #8]
 800d09e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d0a4:	f3ef 8305 	mrs	r3, IPSR
 800d0a8:	61fb      	str	r3, [r7, #28]
  return(result);
 800d0aa:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	f040 808f 	bne.w	800d1d0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d0b2:	f3ef 8310 	mrs	r3, PRIMASK
 800d0b6:	61bb      	str	r3, [r7, #24]
  return(result);
 800d0b8:	69bb      	ldr	r3, [r7, #24]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d105      	bne.n	800d0ca <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d0be:	f3ef 8311 	mrs	r3, BASEPRI
 800d0c2:	617b      	str	r3, [r7, #20]
  return(result);
 800d0c4:	697b      	ldr	r3, [r7, #20]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d003      	beq.n	800d0d2 <osThreadNew+0x3e>
 800d0ca:	4b44      	ldr	r3, [pc, #272]	; (800d1dc <osThreadNew+0x148>)
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	2b02      	cmp	r3, #2
 800d0d0:	d07e      	beq.n	800d1d0 <osThreadNew+0x13c>
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d07b      	beq.n	800d1d0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800d0d8:	2380      	movs	r3, #128	; 0x80
 800d0da:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800d0dc:	2318      	movs	r3, #24
 800d0de:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800d0e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d0e8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d045      	beq.n	800d17c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d002      	beq.n	800d0fe <osThreadNew+0x6a>
        name = attr->name;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	699b      	ldr	r3, [r3, #24]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d002      	beq.n	800d10c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	699b      	ldr	r3, [r3, #24]
 800d10a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d008      	beq.n	800d124 <osThreadNew+0x90>
 800d112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d114:	2b38      	cmp	r3, #56	; 0x38
 800d116:	d805      	bhi.n	800d124 <osThreadNew+0x90>
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	685b      	ldr	r3, [r3, #4]
 800d11c:	f003 0301 	and.w	r3, r3, #1
 800d120:	2b00      	cmp	r3, #0
 800d122:	d001      	beq.n	800d128 <osThreadNew+0x94>
        return (NULL);
 800d124:	2300      	movs	r3, #0
 800d126:	e054      	b.n	800d1d2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	695b      	ldr	r3, [r3, #20]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d003      	beq.n	800d138 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	695b      	ldr	r3, [r3, #20]
 800d134:	089b      	lsrs	r3, r3, #2
 800d136:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	689b      	ldr	r3, [r3, #8]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d00e      	beq.n	800d15e <osThreadNew+0xca>
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	68db      	ldr	r3, [r3, #12]
 800d144:	2b5b      	cmp	r3, #91	; 0x5b
 800d146:	d90a      	bls.n	800d15e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d006      	beq.n	800d15e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	695b      	ldr	r3, [r3, #20]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d002      	beq.n	800d15e <osThreadNew+0xca>
        mem = 1;
 800d158:	2301      	movs	r3, #1
 800d15a:	623b      	str	r3, [r7, #32]
 800d15c:	e010      	b.n	800d180 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	689b      	ldr	r3, [r3, #8]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d10c      	bne.n	800d180 <osThreadNew+0xec>
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	68db      	ldr	r3, [r3, #12]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d108      	bne.n	800d180 <osThreadNew+0xec>
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	691b      	ldr	r3, [r3, #16]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d104      	bne.n	800d180 <osThreadNew+0xec>
          mem = 0;
 800d176:	2300      	movs	r3, #0
 800d178:	623b      	str	r3, [r7, #32]
 800d17a:	e001      	b.n	800d180 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800d17c:	2300      	movs	r3, #0
 800d17e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800d180:	6a3b      	ldr	r3, [r7, #32]
 800d182:	2b01      	cmp	r3, #1
 800d184:	d110      	bne.n	800d1a8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800d18a:	687a      	ldr	r2, [r7, #4]
 800d18c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d18e:	9202      	str	r2, [sp, #8]
 800d190:	9301      	str	r3, [sp, #4]
 800d192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d194:	9300      	str	r3, [sp, #0]
 800d196:	68bb      	ldr	r3, [r7, #8]
 800d198:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d19a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d19c:	68f8      	ldr	r0, [r7, #12]
 800d19e:	f001 f89d 	bl	800e2dc <xTaskCreateStatic>
 800d1a2:	4603      	mov	r3, r0
 800d1a4:	613b      	str	r3, [r7, #16]
 800d1a6:	e013      	b.n	800d1d0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800d1a8:	6a3b      	ldr	r3, [r7, #32]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d110      	bne.n	800d1d0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1b0:	b29a      	uxth	r2, r3
 800d1b2:	f107 0310 	add.w	r3, r7, #16
 800d1b6:	9301      	str	r3, [sp, #4]
 800d1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ba:	9300      	str	r3, [sp, #0]
 800d1bc:	68bb      	ldr	r3, [r7, #8]
 800d1be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d1c0:	68f8      	ldr	r0, [r7, #12]
 800d1c2:	f001 f8e5 	bl	800e390 <xTaskCreate>
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	2b01      	cmp	r3, #1
 800d1ca:	d001      	beq.n	800d1d0 <osThreadNew+0x13c>
          hTask = NULL;
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d1d0:	693b      	ldr	r3, [r7, #16]
}
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	3730      	adds	r7, #48	; 0x30
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	bd80      	pop	{r7, pc}
 800d1da:	bf00      	nop
 800d1dc:	2000056c 	.word	0x2000056c

0800d1e0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b086      	sub	sp, #24
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d1e8:	f3ef 8305 	mrs	r3, IPSR
 800d1ec:	613b      	str	r3, [r7, #16]
  return(result);
 800d1ee:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d10f      	bne.n	800d214 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d1f4:	f3ef 8310 	mrs	r3, PRIMASK
 800d1f8:	60fb      	str	r3, [r7, #12]
  return(result);
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d105      	bne.n	800d20c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d200:	f3ef 8311 	mrs	r3, BASEPRI
 800d204:	60bb      	str	r3, [r7, #8]
  return(result);
 800d206:	68bb      	ldr	r3, [r7, #8]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d007      	beq.n	800d21c <osDelay+0x3c>
 800d20c:	4b0a      	ldr	r3, [pc, #40]	; (800d238 <osDelay+0x58>)
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	2b02      	cmp	r3, #2
 800d212:	d103      	bne.n	800d21c <osDelay+0x3c>
    stat = osErrorISR;
 800d214:	f06f 0305 	mvn.w	r3, #5
 800d218:	617b      	str	r3, [r7, #20]
 800d21a:	e007      	b.n	800d22c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800d21c:	2300      	movs	r3, #0
 800d21e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d002      	beq.n	800d22c <osDelay+0x4c>
      vTaskDelay(ticks);
 800d226:	6878      	ldr	r0, [r7, #4]
 800d228:	f001 fa70 	bl	800e70c <vTaskDelay>
    }
  }

  return (stat);
 800d22c:	697b      	ldr	r3, [r7, #20]
}
 800d22e:	4618      	mov	r0, r3
 800d230:	3718      	adds	r7, #24
 800d232:	46bd      	mov	sp, r7
 800d234:	bd80      	pop	{r7, pc}
 800d236:	bf00      	nop
 800d238:	2000056c 	.word	0x2000056c

0800d23c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b08c      	sub	sp, #48	; 0x30
 800d240:	af02      	add	r7, sp, #8
 800d242:	60f8      	str	r0, [r7, #12]
 800d244:	60b9      	str	r1, [r7, #8]
 800d246:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800d248:	2300      	movs	r3, #0
 800d24a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d24c:	f3ef 8305 	mrs	r3, IPSR
 800d250:	61bb      	str	r3, [r7, #24]
  return(result);
 800d252:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800d254:	2b00      	cmp	r3, #0
 800d256:	d170      	bne.n	800d33a <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d258:	f3ef 8310 	mrs	r3, PRIMASK
 800d25c:	617b      	str	r3, [r7, #20]
  return(result);
 800d25e:	697b      	ldr	r3, [r7, #20]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d105      	bne.n	800d270 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d264:	f3ef 8311 	mrs	r3, BASEPRI
 800d268:	613b      	str	r3, [r7, #16]
  return(result);
 800d26a:	693b      	ldr	r3, [r7, #16]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d003      	beq.n	800d278 <osMessageQueueNew+0x3c>
 800d270:	4b34      	ldr	r3, [pc, #208]	; (800d344 <osMessageQueueNew+0x108>)
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	2b02      	cmp	r3, #2
 800d276:	d060      	beq.n	800d33a <osMessageQueueNew+0xfe>
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d05d      	beq.n	800d33a <osMessageQueueNew+0xfe>
 800d27e:	68bb      	ldr	r3, [r7, #8]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d05a      	beq.n	800d33a <osMessageQueueNew+0xfe>
    mem = -1;
 800d284:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d288:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d029      	beq.n	800d2e4 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	689b      	ldr	r3, [r3, #8]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d012      	beq.n	800d2be <osMessageQueueNew+0x82>
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	68db      	ldr	r3, [r3, #12]
 800d29c:	2b4f      	cmp	r3, #79	; 0x4f
 800d29e:	d90e      	bls.n	800d2be <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d00a      	beq.n	800d2be <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	695a      	ldr	r2, [r3, #20]
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	68b9      	ldr	r1, [r7, #8]
 800d2b0:	fb01 f303 	mul.w	r3, r1, r3
 800d2b4:	429a      	cmp	r2, r3
 800d2b6:	d302      	bcc.n	800d2be <osMessageQueueNew+0x82>
        mem = 1;
 800d2b8:	2301      	movs	r3, #1
 800d2ba:	623b      	str	r3, [r7, #32]
 800d2bc:	e014      	b.n	800d2e8 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	689b      	ldr	r3, [r3, #8]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d110      	bne.n	800d2e8 <osMessageQueueNew+0xac>
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	68db      	ldr	r3, [r3, #12]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d10c      	bne.n	800d2e8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d108      	bne.n	800d2e8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	695b      	ldr	r3, [r3, #20]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d104      	bne.n	800d2e8 <osMessageQueueNew+0xac>
          mem = 0;
 800d2de:	2300      	movs	r3, #0
 800d2e0:	623b      	str	r3, [r7, #32]
 800d2e2:	e001      	b.n	800d2e8 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800d2e8:	6a3b      	ldr	r3, [r7, #32]
 800d2ea:	2b01      	cmp	r3, #1
 800d2ec:	d10c      	bne.n	800d308 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	691a      	ldr	r2, [r3, #16]
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	6899      	ldr	r1, [r3, #8]
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	9300      	str	r3, [sp, #0]
 800d2fa:	460b      	mov	r3, r1
 800d2fc:	68b9      	ldr	r1, [r7, #8]
 800d2fe:	68f8      	ldr	r0, [r7, #12]
 800d300:	f000 faa0 	bl	800d844 <xQueueGenericCreateStatic>
 800d304:	6278      	str	r0, [r7, #36]	; 0x24
 800d306:	e008      	b.n	800d31a <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800d308:	6a3b      	ldr	r3, [r7, #32]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d105      	bne.n	800d31a <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800d30e:	2200      	movs	r2, #0
 800d310:	68b9      	ldr	r1, [r7, #8]
 800d312:	68f8      	ldr	r0, [r7, #12]
 800d314:	f000 fb09 	bl	800d92a <xQueueGenericCreate>
 800d318:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800d31a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d00c      	beq.n	800d33a <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d003      	beq.n	800d32e <osMessageQueueNew+0xf2>
        name = attr->name;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	61fb      	str	r3, [r7, #28]
 800d32c:	e001      	b.n	800d332 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800d32e:	2300      	movs	r3, #0
 800d330:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800d332:	69f9      	ldr	r1, [r7, #28]
 800d334:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d336:	f000 ff75 	bl	800e224 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800d33a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d33c:	4618      	mov	r0, r3
 800d33e:	3728      	adds	r7, #40	; 0x28
 800d340:	46bd      	mov	sp, r7
 800d342:	bd80      	pop	{r7, pc}
 800d344:	2000056c 	.word	0x2000056c

0800d348 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800d348:	b580      	push	{r7, lr}
 800d34a:	b08a      	sub	sp, #40	; 0x28
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	60f8      	str	r0, [r7, #12]
 800d350:	60b9      	str	r1, [r7, #8]
 800d352:	603b      	str	r3, [r7, #0]
 800d354:	4613      	mov	r3, r2
 800d356:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d35c:	2300      	movs	r3, #0
 800d35e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d360:	f3ef 8305 	mrs	r3, IPSR
 800d364:	61fb      	str	r3, [r7, #28]
  return(result);
 800d366:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d10f      	bne.n	800d38c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d36c:	f3ef 8310 	mrs	r3, PRIMASK
 800d370:	61bb      	str	r3, [r7, #24]
  return(result);
 800d372:	69bb      	ldr	r3, [r7, #24]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d105      	bne.n	800d384 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d378:	f3ef 8311 	mrs	r3, BASEPRI
 800d37c:	617b      	str	r3, [r7, #20]
  return(result);
 800d37e:	697b      	ldr	r3, [r7, #20]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d02c      	beq.n	800d3de <osMessageQueuePut+0x96>
 800d384:	4b28      	ldr	r3, [pc, #160]	; (800d428 <osMessageQueuePut+0xe0>)
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	2b02      	cmp	r3, #2
 800d38a:	d128      	bne.n	800d3de <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d38c:	6a3b      	ldr	r3, [r7, #32]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d005      	beq.n	800d39e <osMessageQueuePut+0x56>
 800d392:	68bb      	ldr	r3, [r7, #8]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d002      	beq.n	800d39e <osMessageQueuePut+0x56>
 800d398:	683b      	ldr	r3, [r7, #0]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d003      	beq.n	800d3a6 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800d39e:	f06f 0303 	mvn.w	r3, #3
 800d3a2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d3a4:	e039      	b.n	800d41a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800d3aa:	f107 0210 	add.w	r2, r7, #16
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	68b9      	ldr	r1, [r7, #8]
 800d3b2:	6a38      	ldr	r0, [r7, #32]
 800d3b4:	f000 fc16 	bl	800dbe4 <xQueueGenericSendFromISR>
 800d3b8:	4603      	mov	r3, r0
 800d3ba:	2b01      	cmp	r3, #1
 800d3bc:	d003      	beq.n	800d3c6 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800d3be:	f06f 0302 	mvn.w	r3, #2
 800d3c2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d3c4:	e029      	b.n	800d41a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800d3c6:	693b      	ldr	r3, [r7, #16]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d026      	beq.n	800d41a <osMessageQueuePut+0xd2>
 800d3cc:	4b17      	ldr	r3, [pc, #92]	; (800d42c <osMessageQueuePut+0xe4>)
 800d3ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3d2:	601a      	str	r2, [r3, #0]
 800d3d4:	f3bf 8f4f 	dsb	sy
 800d3d8:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d3dc:	e01d      	b.n	800d41a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d3de:	6a3b      	ldr	r3, [r7, #32]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d002      	beq.n	800d3ea <osMessageQueuePut+0xa2>
 800d3e4:	68bb      	ldr	r3, [r7, #8]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d103      	bne.n	800d3f2 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800d3ea:	f06f 0303 	mvn.w	r3, #3
 800d3ee:	627b      	str	r3, [r7, #36]	; 0x24
 800d3f0:	e014      	b.n	800d41c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	683a      	ldr	r2, [r7, #0]
 800d3f6:	68b9      	ldr	r1, [r7, #8]
 800d3f8:	6a38      	ldr	r0, [r7, #32]
 800d3fa:	f000 faf9 	bl	800d9f0 <xQueueGenericSend>
 800d3fe:	4603      	mov	r3, r0
 800d400:	2b01      	cmp	r3, #1
 800d402:	d00b      	beq.n	800d41c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800d404:	683b      	ldr	r3, [r7, #0]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d003      	beq.n	800d412 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800d40a:	f06f 0301 	mvn.w	r3, #1
 800d40e:	627b      	str	r3, [r7, #36]	; 0x24
 800d410:	e004      	b.n	800d41c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800d412:	f06f 0302 	mvn.w	r3, #2
 800d416:	627b      	str	r3, [r7, #36]	; 0x24
 800d418:	e000      	b.n	800d41c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d41a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800d41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d41e:	4618      	mov	r0, r3
 800d420:	3728      	adds	r7, #40	; 0x28
 800d422:	46bd      	mov	sp, r7
 800d424:	bd80      	pop	{r7, pc}
 800d426:	bf00      	nop
 800d428:	2000056c 	.word	0x2000056c
 800d42c:	e000ed04 	.word	0xe000ed04

0800d430 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800d430:	b580      	push	{r7, lr}
 800d432:	b08a      	sub	sp, #40	; 0x28
 800d434:	af00      	add	r7, sp, #0
 800d436:	60f8      	str	r0, [r7, #12]
 800d438:	60b9      	str	r1, [r7, #8]
 800d43a:	607a      	str	r2, [r7, #4]
 800d43c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d442:	2300      	movs	r3, #0
 800d444:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d446:	f3ef 8305 	mrs	r3, IPSR
 800d44a:	61fb      	str	r3, [r7, #28]
  return(result);
 800d44c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d10f      	bne.n	800d472 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d452:	f3ef 8310 	mrs	r3, PRIMASK
 800d456:	61bb      	str	r3, [r7, #24]
  return(result);
 800d458:	69bb      	ldr	r3, [r7, #24]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d105      	bne.n	800d46a <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d45e:	f3ef 8311 	mrs	r3, BASEPRI
 800d462:	617b      	str	r3, [r7, #20]
  return(result);
 800d464:	697b      	ldr	r3, [r7, #20]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d02c      	beq.n	800d4c4 <osMessageQueueGet+0x94>
 800d46a:	4b28      	ldr	r3, [pc, #160]	; (800d50c <osMessageQueueGet+0xdc>)
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	2b02      	cmp	r3, #2
 800d470:	d128      	bne.n	800d4c4 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d472:	6a3b      	ldr	r3, [r7, #32]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d005      	beq.n	800d484 <osMessageQueueGet+0x54>
 800d478:	68bb      	ldr	r3, [r7, #8]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d002      	beq.n	800d484 <osMessageQueueGet+0x54>
 800d47e:	683b      	ldr	r3, [r7, #0]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d003      	beq.n	800d48c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800d484:	f06f 0303 	mvn.w	r3, #3
 800d488:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d48a:	e038      	b.n	800d4fe <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800d48c:	2300      	movs	r3, #0
 800d48e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800d490:	f107 0310 	add.w	r3, r7, #16
 800d494:	461a      	mov	r2, r3
 800d496:	68b9      	ldr	r1, [r7, #8]
 800d498:	6a38      	ldr	r0, [r7, #32]
 800d49a:	f000 fd13 	bl	800dec4 <xQueueReceiveFromISR>
 800d49e:	4603      	mov	r3, r0
 800d4a0:	2b01      	cmp	r3, #1
 800d4a2:	d003      	beq.n	800d4ac <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800d4a4:	f06f 0302 	mvn.w	r3, #2
 800d4a8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d4aa:	e028      	b.n	800d4fe <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800d4ac:	693b      	ldr	r3, [r7, #16]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d025      	beq.n	800d4fe <osMessageQueueGet+0xce>
 800d4b2:	4b17      	ldr	r3, [pc, #92]	; (800d510 <osMessageQueueGet+0xe0>)
 800d4b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d4b8:	601a      	str	r2, [r3, #0]
 800d4ba:	f3bf 8f4f 	dsb	sy
 800d4be:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d4c2:	e01c      	b.n	800d4fe <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d4c4:	6a3b      	ldr	r3, [r7, #32]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d002      	beq.n	800d4d0 <osMessageQueueGet+0xa0>
 800d4ca:	68bb      	ldr	r3, [r7, #8]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d103      	bne.n	800d4d8 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800d4d0:	f06f 0303 	mvn.w	r3, #3
 800d4d4:	627b      	str	r3, [r7, #36]	; 0x24
 800d4d6:	e013      	b.n	800d500 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d4d8:	683a      	ldr	r2, [r7, #0]
 800d4da:	68b9      	ldr	r1, [r7, #8]
 800d4dc:	6a38      	ldr	r0, [r7, #32]
 800d4de:	f000 fc15 	bl	800dd0c <xQueueReceive>
 800d4e2:	4603      	mov	r3, r0
 800d4e4:	2b01      	cmp	r3, #1
 800d4e6:	d00b      	beq.n	800d500 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800d4e8:	683b      	ldr	r3, [r7, #0]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d003      	beq.n	800d4f6 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800d4ee:	f06f 0301 	mvn.w	r3, #1
 800d4f2:	627b      	str	r3, [r7, #36]	; 0x24
 800d4f4:	e004      	b.n	800d500 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800d4f6:	f06f 0302 	mvn.w	r3, #2
 800d4fa:	627b      	str	r3, [r7, #36]	; 0x24
 800d4fc:	e000      	b.n	800d500 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d4fe:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800d500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d502:	4618      	mov	r0, r3
 800d504:	3728      	adds	r7, #40	; 0x28
 800d506:	46bd      	mov	sp, r7
 800d508:	bd80      	pop	{r7, pc}
 800d50a:	bf00      	nop
 800d50c:	2000056c 	.word	0x2000056c
 800d510:	e000ed04 	.word	0xe000ed04

0800d514 <osMessageQueueGetSpace>:
  }

  return ((uint32_t)count);
}

uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
 800d514:	b580      	push	{r7, lr}
 800d516:	b08c      	sub	sp, #48	; 0x30
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t space;
  uint32_t isrm;

  if (mq == NULL) {
 800d520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d522:	2b00      	cmp	r3, #0
 800d524:	d102      	bne.n	800d52c <osMessageQueueGetSpace+0x18>
    space = 0U;
 800d526:	2300      	movs	r3, #0
 800d528:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d52a:	e033      	b.n	800d594 <osMessageQueueGetSpace+0x80>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d52c:	f3ef 8305 	mrs	r3, IPSR
 800d530:	623b      	str	r3, [r7, #32]
  return(result);
 800d532:	6a3b      	ldr	r3, [r7, #32]
  }
  else if (IS_IRQ()) {
 800d534:	2b00      	cmp	r3, #0
 800d536:	d10f      	bne.n	800d558 <osMessageQueueGetSpace+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d538:	f3ef 8310 	mrs	r3, PRIMASK
 800d53c:	61fb      	str	r3, [r7, #28]
  return(result);
 800d53e:	69fb      	ldr	r3, [r7, #28]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d105      	bne.n	800d550 <osMessageQueueGetSpace+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d544:	f3ef 8311 	mrs	r3, BASEPRI
 800d548:	61bb      	str	r3, [r7, #24]
  return(result);
 800d54a:	69bb      	ldr	r3, [r7, #24]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d01d      	beq.n	800d58c <osMessageQueueGetSpace+0x78>
 800d550:	4b13      	ldr	r3, [pc, #76]	; (800d5a0 <osMessageQueueGetSpace+0x8c>)
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	2b02      	cmp	r3, #2
 800d556:	d119      	bne.n	800d58c <osMessageQueueGetSpace+0x78>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d558:	f3ef 8211 	mrs	r2, BASEPRI
 800d55c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d560:	f383 8811 	msr	BASEPRI, r3
 800d564:	f3bf 8f6f 	isb	sy
 800d568:	f3bf 8f4f 	dsb	sy
 800d56c:	613a      	str	r2, [r7, #16]
 800d56e:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d570:	693b      	ldr	r3, [r7, #16]
    isrm = taskENTER_CRITICAL_FROM_ISR();
 800d572:	627b      	str	r3, [r7, #36]	; 0x24

    /* space = pxQueue->uxLength - pxQueue->uxMessagesWaiting; */
    space = mq->uxDummy4[1] - mq->uxDummy4[0];
 800d574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d576:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d57a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d57c:	1ad3      	subs	r3, r2, r3
 800d57e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d582:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d584:	697b      	ldr	r3, [r7, #20]
 800d586:	f383 8811 	msr	BASEPRI, r3

    taskEXIT_CRITICAL_FROM_ISR(isrm);
 800d58a:	e003      	b.n	800d594 <osMessageQueueGetSpace+0x80>
  }
  else {
    space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
 800d58c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d58e:	f000 fd16 	bl	800dfbe <uxQueueSpacesAvailable>
 800d592:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return (space);
 800d594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800d596:	4618      	mov	r0, r3
 800d598:	3730      	adds	r7, #48	; 0x30
 800d59a:	46bd      	mov	sp, r7
 800d59c:	bd80      	pop	{r7, pc}
 800d59e:	bf00      	nop
 800d5a0:	2000056c 	.word	0x2000056c

0800d5a4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d5a4:	b480      	push	{r7}
 800d5a6:	b085      	sub	sp, #20
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	60f8      	str	r0, [r7, #12]
 800d5ac:	60b9      	str	r1, [r7, #8]
 800d5ae:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	4a07      	ldr	r2, [pc, #28]	; (800d5d0 <vApplicationGetIdleTaskMemory+0x2c>)
 800d5b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d5b6:	68bb      	ldr	r3, [r7, #8]
 800d5b8:	4a06      	ldr	r2, [pc, #24]	; (800d5d4 <vApplicationGetIdleTaskMemory+0x30>)
 800d5ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	2280      	movs	r2, #128	; 0x80
 800d5c0:	601a      	str	r2, [r3, #0]
}
 800d5c2:	bf00      	nop
 800d5c4:	3714      	adds	r7, #20
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5cc:	4770      	bx	lr
 800d5ce:	bf00      	nop
 800d5d0:	20000570 	.word	0x20000570
 800d5d4:	200005cc 	.word	0x200005cc

0800d5d8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d5d8:	b480      	push	{r7}
 800d5da:	b085      	sub	sp, #20
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	60f8      	str	r0, [r7, #12]
 800d5e0:	60b9      	str	r1, [r7, #8]
 800d5e2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	4a07      	ldr	r2, [pc, #28]	; (800d604 <vApplicationGetTimerTaskMemory+0x2c>)
 800d5e8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d5ea:	68bb      	ldr	r3, [r7, #8]
 800d5ec:	4a06      	ldr	r2, [pc, #24]	; (800d608 <vApplicationGetTimerTaskMemory+0x30>)
 800d5ee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d5f6:	601a      	str	r2, [r3, #0]
}
 800d5f8:	bf00      	nop
 800d5fa:	3714      	adds	r7, #20
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d602:	4770      	bx	lr
 800d604:	200007cc 	.word	0x200007cc
 800d608:	20000828 	.word	0x20000828

0800d60c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d60c:	b480      	push	{r7}
 800d60e:	b083      	sub	sp, #12
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	f103 0208 	add.w	r2, r3, #8
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d624:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	f103 0208 	add.w	r2, r3, #8
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	f103 0208 	add.w	r2, r3, #8
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	2200      	movs	r2, #0
 800d63e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d640:	bf00      	nop
 800d642:	370c      	adds	r7, #12
 800d644:	46bd      	mov	sp, r7
 800d646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64a:	4770      	bx	lr

0800d64c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d64c:	b480      	push	{r7}
 800d64e:	b083      	sub	sp, #12
 800d650:	af00      	add	r7, sp, #0
 800d652:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	2200      	movs	r2, #0
 800d658:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d65a:	bf00      	nop
 800d65c:	370c      	adds	r7, #12
 800d65e:	46bd      	mov	sp, r7
 800d660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d664:	4770      	bx	lr

0800d666 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d666:	b480      	push	{r7}
 800d668:	b085      	sub	sp, #20
 800d66a:	af00      	add	r7, sp, #0
 800d66c:	6078      	str	r0, [r7, #4]
 800d66e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	685b      	ldr	r3, [r3, #4]
 800d674:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d676:	683b      	ldr	r3, [r7, #0]
 800d678:	68fa      	ldr	r2, [r7, #12]
 800d67a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	689a      	ldr	r2, [r3, #8]
 800d680:	683b      	ldr	r3, [r7, #0]
 800d682:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	689b      	ldr	r3, [r3, #8]
 800d688:	683a      	ldr	r2, [r7, #0]
 800d68a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	683a      	ldr	r2, [r7, #0]
 800d690:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d692:	683b      	ldr	r3, [r7, #0]
 800d694:	687a      	ldr	r2, [r7, #4]
 800d696:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	1c5a      	adds	r2, r3, #1
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	601a      	str	r2, [r3, #0]
}
 800d6a2:	bf00      	nop
 800d6a4:	3714      	adds	r7, #20
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ac:	4770      	bx	lr

0800d6ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d6ae:	b480      	push	{r7}
 800d6b0:	b085      	sub	sp, #20
 800d6b2:	af00      	add	r7, sp, #0
 800d6b4:	6078      	str	r0, [r7, #4]
 800d6b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d6b8:	683b      	ldr	r3, [r7, #0]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d6be:	68bb      	ldr	r3, [r7, #8]
 800d6c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d6c4:	d103      	bne.n	800d6ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	691b      	ldr	r3, [r3, #16]
 800d6ca:	60fb      	str	r3, [r7, #12]
 800d6cc:	e00c      	b.n	800d6e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	3308      	adds	r3, #8
 800d6d2:	60fb      	str	r3, [r7, #12]
 800d6d4:	e002      	b.n	800d6dc <vListInsert+0x2e>
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	685b      	ldr	r3, [r3, #4]
 800d6da:	60fb      	str	r3, [r7, #12]
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	685b      	ldr	r3, [r3, #4]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	68ba      	ldr	r2, [r7, #8]
 800d6e4:	429a      	cmp	r2, r3
 800d6e6:	d2f6      	bcs.n	800d6d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	685a      	ldr	r2, [r3, #4]
 800d6ec:	683b      	ldr	r3, [r7, #0]
 800d6ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d6f0:	683b      	ldr	r3, [r7, #0]
 800d6f2:	685b      	ldr	r3, [r3, #4]
 800d6f4:	683a      	ldr	r2, [r7, #0]
 800d6f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d6f8:	683b      	ldr	r3, [r7, #0]
 800d6fa:	68fa      	ldr	r2, [r7, #12]
 800d6fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	683a      	ldr	r2, [r7, #0]
 800d702:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d704:	683b      	ldr	r3, [r7, #0]
 800d706:	687a      	ldr	r2, [r7, #4]
 800d708:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	1c5a      	adds	r2, r3, #1
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	601a      	str	r2, [r3, #0]
}
 800d714:	bf00      	nop
 800d716:	3714      	adds	r7, #20
 800d718:	46bd      	mov	sp, r7
 800d71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d71e:	4770      	bx	lr

0800d720 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d720:	b480      	push	{r7}
 800d722:	b085      	sub	sp, #20
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	691b      	ldr	r3, [r3, #16]
 800d72c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	685b      	ldr	r3, [r3, #4]
 800d732:	687a      	ldr	r2, [r7, #4]
 800d734:	6892      	ldr	r2, [r2, #8]
 800d736:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	689b      	ldr	r3, [r3, #8]
 800d73c:	687a      	ldr	r2, [r7, #4]
 800d73e:	6852      	ldr	r2, [r2, #4]
 800d740:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	685b      	ldr	r3, [r3, #4]
 800d746:	687a      	ldr	r2, [r7, #4]
 800d748:	429a      	cmp	r2, r3
 800d74a:	d103      	bne.n	800d754 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	689a      	ldr	r2, [r3, #8]
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	2200      	movs	r2, #0
 800d758:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	1e5a      	subs	r2, r3, #1
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	681b      	ldr	r3, [r3, #0]
}
 800d768:	4618      	mov	r0, r3
 800d76a:	3714      	adds	r7, #20
 800d76c:	46bd      	mov	sp, r7
 800d76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d772:	4770      	bx	lr

0800d774 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d774:	b580      	push	{r7, lr}
 800d776:	b084      	sub	sp, #16
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
 800d77c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d109      	bne.n	800d79c <xQueueGenericReset+0x28>
	__asm volatile
 800d788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d78c:	f383 8811 	msr	BASEPRI, r3
 800d790:	f3bf 8f6f 	isb	sy
 800d794:	f3bf 8f4f 	dsb	sy
 800d798:	60bb      	str	r3, [r7, #8]
 800d79a:	e7fe      	b.n	800d79a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800d79c:	f002 fa9e 	bl	800fcdc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	681a      	ldr	r2, [r3, #0]
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7a8:	68f9      	ldr	r1, [r7, #12]
 800d7aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d7ac:	fb01 f303 	mul.w	r3, r1, r3
 800d7b0:	441a      	add	r2, r3
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	681a      	ldr	r2, [r3, #0]
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	681a      	ldr	r2, [r3, #0]
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7cc:	3b01      	subs	r3, #1
 800d7ce:	68f9      	ldr	r1, [r7, #12]
 800d7d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d7d2:	fb01 f303 	mul.w	r3, r1, r3
 800d7d6:	441a      	add	r2, r3
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	22ff      	movs	r2, #255	; 0xff
 800d7e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	22ff      	movs	r2, #255	; 0xff
 800d7e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d7ec:	683b      	ldr	r3, [r7, #0]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d114      	bne.n	800d81c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	691b      	ldr	r3, [r3, #16]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d01a      	beq.n	800d830 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	3310      	adds	r3, #16
 800d7fe:	4618      	mov	r0, r3
 800d800:	f001 fa38 	bl	800ec74 <xTaskRemoveFromEventList>
 800d804:	4603      	mov	r3, r0
 800d806:	2b00      	cmp	r3, #0
 800d808:	d012      	beq.n	800d830 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d80a:	4b0d      	ldr	r3, [pc, #52]	; (800d840 <xQueueGenericReset+0xcc>)
 800d80c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d810:	601a      	str	r2, [r3, #0]
 800d812:	f3bf 8f4f 	dsb	sy
 800d816:	f3bf 8f6f 	isb	sy
 800d81a:	e009      	b.n	800d830 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	3310      	adds	r3, #16
 800d820:	4618      	mov	r0, r3
 800d822:	f7ff fef3 	bl	800d60c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	3324      	adds	r3, #36	; 0x24
 800d82a:	4618      	mov	r0, r3
 800d82c:	f7ff feee 	bl	800d60c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d830:	f002 fa82 	bl	800fd38 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d834:	2301      	movs	r3, #1
}
 800d836:	4618      	mov	r0, r3
 800d838:	3710      	adds	r7, #16
 800d83a:	46bd      	mov	sp, r7
 800d83c:	bd80      	pop	{r7, pc}
 800d83e:	bf00      	nop
 800d840:	e000ed04 	.word	0xe000ed04

0800d844 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d844:	b580      	push	{r7, lr}
 800d846:	b08e      	sub	sp, #56	; 0x38
 800d848:	af02      	add	r7, sp, #8
 800d84a:	60f8      	str	r0, [r7, #12]
 800d84c:	60b9      	str	r1, [r7, #8]
 800d84e:	607a      	str	r2, [r7, #4]
 800d850:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d109      	bne.n	800d86c <xQueueGenericCreateStatic+0x28>
 800d858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d85c:	f383 8811 	msr	BASEPRI, r3
 800d860:	f3bf 8f6f 	isb	sy
 800d864:	f3bf 8f4f 	dsb	sy
 800d868:	62bb      	str	r3, [r7, #40]	; 0x28
 800d86a:	e7fe      	b.n	800d86a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d86c:	683b      	ldr	r3, [r7, #0]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d109      	bne.n	800d886 <xQueueGenericCreateStatic+0x42>
 800d872:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d876:	f383 8811 	msr	BASEPRI, r3
 800d87a:	f3bf 8f6f 	isb	sy
 800d87e:	f3bf 8f4f 	dsb	sy
 800d882:	627b      	str	r3, [r7, #36]	; 0x24
 800d884:	e7fe      	b.n	800d884 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d002      	beq.n	800d892 <xQueueGenericCreateStatic+0x4e>
 800d88c:	68bb      	ldr	r3, [r7, #8]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d001      	beq.n	800d896 <xQueueGenericCreateStatic+0x52>
 800d892:	2301      	movs	r3, #1
 800d894:	e000      	b.n	800d898 <xQueueGenericCreateStatic+0x54>
 800d896:	2300      	movs	r3, #0
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d109      	bne.n	800d8b0 <xQueueGenericCreateStatic+0x6c>
 800d89c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8a0:	f383 8811 	msr	BASEPRI, r3
 800d8a4:	f3bf 8f6f 	isb	sy
 800d8a8:	f3bf 8f4f 	dsb	sy
 800d8ac:	623b      	str	r3, [r7, #32]
 800d8ae:	e7fe      	b.n	800d8ae <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d102      	bne.n	800d8bc <xQueueGenericCreateStatic+0x78>
 800d8b6:	68bb      	ldr	r3, [r7, #8]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d101      	bne.n	800d8c0 <xQueueGenericCreateStatic+0x7c>
 800d8bc:	2301      	movs	r3, #1
 800d8be:	e000      	b.n	800d8c2 <xQueueGenericCreateStatic+0x7e>
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d109      	bne.n	800d8da <xQueueGenericCreateStatic+0x96>
 800d8c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8ca:	f383 8811 	msr	BASEPRI, r3
 800d8ce:	f3bf 8f6f 	isb	sy
 800d8d2:	f3bf 8f4f 	dsb	sy
 800d8d6:	61fb      	str	r3, [r7, #28]
 800d8d8:	e7fe      	b.n	800d8d8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d8da:	2350      	movs	r3, #80	; 0x50
 800d8dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d8de:	697b      	ldr	r3, [r7, #20]
 800d8e0:	2b50      	cmp	r3, #80	; 0x50
 800d8e2:	d009      	beq.n	800d8f8 <xQueueGenericCreateStatic+0xb4>
 800d8e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8e8:	f383 8811 	msr	BASEPRI, r3
 800d8ec:	f3bf 8f6f 	isb	sy
 800d8f0:	f3bf 8f4f 	dsb	sy
 800d8f4:	61bb      	str	r3, [r7, #24]
 800d8f6:	e7fe      	b.n	800d8f6 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d8f8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d8fa:	683b      	ldr	r3, [r7, #0]
 800d8fc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d8fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d900:	2b00      	cmp	r3, #0
 800d902:	d00d      	beq.n	800d920 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d906:	2201      	movs	r2, #1
 800d908:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d90c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d912:	9300      	str	r3, [sp, #0]
 800d914:	4613      	mov	r3, r2
 800d916:	687a      	ldr	r2, [r7, #4]
 800d918:	68b9      	ldr	r1, [r7, #8]
 800d91a:	68f8      	ldr	r0, [r7, #12]
 800d91c:	f000 f844 	bl	800d9a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d922:	4618      	mov	r0, r3
 800d924:	3730      	adds	r7, #48	; 0x30
 800d926:	46bd      	mov	sp, r7
 800d928:	bd80      	pop	{r7, pc}

0800d92a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d92a:	b580      	push	{r7, lr}
 800d92c:	b08a      	sub	sp, #40	; 0x28
 800d92e:	af02      	add	r7, sp, #8
 800d930:	60f8      	str	r0, [r7, #12]
 800d932:	60b9      	str	r1, [r7, #8]
 800d934:	4613      	mov	r3, r2
 800d936:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d109      	bne.n	800d952 <xQueueGenericCreate+0x28>
 800d93e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d942:	f383 8811 	msr	BASEPRI, r3
 800d946:	f3bf 8f6f 	isb	sy
 800d94a:	f3bf 8f4f 	dsb	sy
 800d94e:	613b      	str	r3, [r7, #16]
 800d950:	e7fe      	b.n	800d950 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800d952:	68bb      	ldr	r3, [r7, #8]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d102      	bne.n	800d95e <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800d958:	2300      	movs	r3, #0
 800d95a:	61fb      	str	r3, [r7, #28]
 800d95c:	e004      	b.n	800d968 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	68ba      	ldr	r2, [r7, #8]
 800d962:	fb02 f303 	mul.w	r3, r2, r3
 800d966:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d968:	69fb      	ldr	r3, [r7, #28]
 800d96a:	3350      	adds	r3, #80	; 0x50
 800d96c:	4618      	mov	r0, r3
 800d96e:	f002 facf 	bl	800ff10 <pvPortMalloc>
 800d972:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d974:	69bb      	ldr	r3, [r7, #24]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d011      	beq.n	800d99e <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d97a:	69bb      	ldr	r3, [r7, #24]
 800d97c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d97e:	697b      	ldr	r3, [r7, #20]
 800d980:	3350      	adds	r3, #80	; 0x50
 800d982:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d984:	69bb      	ldr	r3, [r7, #24]
 800d986:	2200      	movs	r2, #0
 800d988:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d98c:	79fa      	ldrb	r2, [r7, #7]
 800d98e:	69bb      	ldr	r3, [r7, #24]
 800d990:	9300      	str	r3, [sp, #0]
 800d992:	4613      	mov	r3, r2
 800d994:	697a      	ldr	r2, [r7, #20]
 800d996:	68b9      	ldr	r1, [r7, #8]
 800d998:	68f8      	ldr	r0, [r7, #12]
 800d99a:	f000 f805 	bl	800d9a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d99e:	69bb      	ldr	r3, [r7, #24]
	}
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	3720      	adds	r7, #32
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	bd80      	pop	{r7, pc}

0800d9a8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b084      	sub	sp, #16
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	60f8      	str	r0, [r7, #12]
 800d9b0:	60b9      	str	r1, [r7, #8]
 800d9b2:	607a      	str	r2, [r7, #4]
 800d9b4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d9b6:	68bb      	ldr	r3, [r7, #8]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d103      	bne.n	800d9c4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d9bc:	69bb      	ldr	r3, [r7, #24]
 800d9be:	69ba      	ldr	r2, [r7, #24]
 800d9c0:	601a      	str	r2, [r3, #0]
 800d9c2:	e002      	b.n	800d9ca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d9c4:	69bb      	ldr	r3, [r7, #24]
 800d9c6:	687a      	ldr	r2, [r7, #4]
 800d9c8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d9ca:	69bb      	ldr	r3, [r7, #24]
 800d9cc:	68fa      	ldr	r2, [r7, #12]
 800d9ce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d9d0:	69bb      	ldr	r3, [r7, #24]
 800d9d2:	68ba      	ldr	r2, [r7, #8]
 800d9d4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d9d6:	2101      	movs	r1, #1
 800d9d8:	69b8      	ldr	r0, [r7, #24]
 800d9da:	f7ff fecb 	bl	800d774 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d9de:	69bb      	ldr	r3, [r7, #24]
 800d9e0:	78fa      	ldrb	r2, [r7, #3]
 800d9e2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d9e6:	bf00      	nop
 800d9e8:	3710      	adds	r7, #16
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	bd80      	pop	{r7, pc}
	...

0800d9f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b08e      	sub	sp, #56	; 0x38
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	60f8      	str	r0, [r7, #12]
 800d9f8:	60b9      	str	r1, [r7, #8]
 800d9fa:	607a      	str	r2, [r7, #4]
 800d9fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d9fe:	2300      	movs	r3, #0
 800da00:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800da06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d109      	bne.n	800da20 <xQueueGenericSend+0x30>
 800da0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da10:	f383 8811 	msr	BASEPRI, r3
 800da14:	f3bf 8f6f 	isb	sy
 800da18:	f3bf 8f4f 	dsb	sy
 800da1c:	62bb      	str	r3, [r7, #40]	; 0x28
 800da1e:	e7fe      	b.n	800da1e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800da20:	68bb      	ldr	r3, [r7, #8]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d103      	bne.n	800da2e <xQueueGenericSend+0x3e>
 800da26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d101      	bne.n	800da32 <xQueueGenericSend+0x42>
 800da2e:	2301      	movs	r3, #1
 800da30:	e000      	b.n	800da34 <xQueueGenericSend+0x44>
 800da32:	2300      	movs	r3, #0
 800da34:	2b00      	cmp	r3, #0
 800da36:	d109      	bne.n	800da4c <xQueueGenericSend+0x5c>
 800da38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da3c:	f383 8811 	msr	BASEPRI, r3
 800da40:	f3bf 8f6f 	isb	sy
 800da44:	f3bf 8f4f 	dsb	sy
 800da48:	627b      	str	r3, [r7, #36]	; 0x24
 800da4a:	e7fe      	b.n	800da4a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800da4c:	683b      	ldr	r3, [r7, #0]
 800da4e:	2b02      	cmp	r3, #2
 800da50:	d103      	bne.n	800da5a <xQueueGenericSend+0x6a>
 800da52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da56:	2b01      	cmp	r3, #1
 800da58:	d101      	bne.n	800da5e <xQueueGenericSend+0x6e>
 800da5a:	2301      	movs	r3, #1
 800da5c:	e000      	b.n	800da60 <xQueueGenericSend+0x70>
 800da5e:	2300      	movs	r3, #0
 800da60:	2b00      	cmp	r3, #0
 800da62:	d109      	bne.n	800da78 <xQueueGenericSend+0x88>
 800da64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da68:	f383 8811 	msr	BASEPRI, r3
 800da6c:	f3bf 8f6f 	isb	sy
 800da70:	f3bf 8f4f 	dsb	sy
 800da74:	623b      	str	r3, [r7, #32]
 800da76:	e7fe      	b.n	800da76 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800da78:	f001 fab2 	bl	800efe0 <xTaskGetSchedulerState>
 800da7c:	4603      	mov	r3, r0
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d102      	bne.n	800da88 <xQueueGenericSend+0x98>
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d101      	bne.n	800da8c <xQueueGenericSend+0x9c>
 800da88:	2301      	movs	r3, #1
 800da8a:	e000      	b.n	800da8e <xQueueGenericSend+0x9e>
 800da8c:	2300      	movs	r3, #0
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d109      	bne.n	800daa6 <xQueueGenericSend+0xb6>
 800da92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da96:	f383 8811 	msr	BASEPRI, r3
 800da9a:	f3bf 8f6f 	isb	sy
 800da9e:	f3bf 8f4f 	dsb	sy
 800daa2:	61fb      	str	r3, [r7, #28]
 800daa4:	e7fe      	b.n	800daa4 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800daa6:	f002 f919 	bl	800fcdc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800daaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800daae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dab2:	429a      	cmp	r2, r3
 800dab4:	d302      	bcc.n	800dabc <xQueueGenericSend+0xcc>
 800dab6:	683b      	ldr	r3, [r7, #0]
 800dab8:	2b02      	cmp	r3, #2
 800daba:	d129      	bne.n	800db10 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dabc:	683a      	ldr	r2, [r7, #0]
 800dabe:	68b9      	ldr	r1, [r7, #8]
 800dac0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dac2:	f000 fa9e 	bl	800e002 <prvCopyDataToQueue>
 800dac6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d010      	beq.n	800daf2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dad2:	3324      	adds	r3, #36	; 0x24
 800dad4:	4618      	mov	r0, r3
 800dad6:	f001 f8cd 	bl	800ec74 <xTaskRemoveFromEventList>
 800dada:	4603      	mov	r3, r0
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d013      	beq.n	800db08 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800dae0:	4b3f      	ldr	r3, [pc, #252]	; (800dbe0 <xQueueGenericSend+0x1f0>)
 800dae2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dae6:	601a      	str	r2, [r3, #0]
 800dae8:	f3bf 8f4f 	dsb	sy
 800daec:	f3bf 8f6f 	isb	sy
 800daf0:	e00a      	b.n	800db08 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800daf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d007      	beq.n	800db08 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800daf8:	4b39      	ldr	r3, [pc, #228]	; (800dbe0 <xQueueGenericSend+0x1f0>)
 800dafa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dafe:	601a      	str	r2, [r3, #0]
 800db00:	f3bf 8f4f 	dsb	sy
 800db04:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800db08:	f002 f916 	bl	800fd38 <vPortExitCritical>
				return pdPASS;
 800db0c:	2301      	movs	r3, #1
 800db0e:	e063      	b.n	800dbd8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d103      	bne.n	800db1e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800db16:	f002 f90f 	bl	800fd38 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800db1a:	2300      	movs	r3, #0
 800db1c:	e05c      	b.n	800dbd8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800db1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db20:	2b00      	cmp	r3, #0
 800db22:	d106      	bne.n	800db32 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800db24:	f107 0314 	add.w	r3, r7, #20
 800db28:	4618      	mov	r0, r3
 800db2a:	f001 f905 	bl	800ed38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800db2e:	2301      	movs	r3, #1
 800db30:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800db32:	f002 f901 	bl	800fd38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800db36:	f000 fe81 	bl	800e83c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800db3a:	f002 f8cf 	bl	800fcdc <vPortEnterCritical>
 800db3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800db44:	b25b      	sxtb	r3, r3
 800db46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800db4a:	d103      	bne.n	800db54 <xQueueGenericSend+0x164>
 800db4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db4e:	2200      	movs	r2, #0
 800db50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800db54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800db5a:	b25b      	sxtb	r3, r3
 800db5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800db60:	d103      	bne.n	800db6a <xQueueGenericSend+0x17a>
 800db62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db64:	2200      	movs	r2, #0
 800db66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800db6a:	f002 f8e5 	bl	800fd38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800db6e:	1d3a      	adds	r2, r7, #4
 800db70:	f107 0314 	add.w	r3, r7, #20
 800db74:	4611      	mov	r1, r2
 800db76:	4618      	mov	r0, r3
 800db78:	f001 f8f4 	bl	800ed64 <xTaskCheckForTimeOut>
 800db7c:	4603      	mov	r3, r0
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d124      	bne.n	800dbcc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800db82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800db84:	f000 fb35 	bl	800e1f2 <prvIsQueueFull>
 800db88:	4603      	mov	r3, r0
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d018      	beq.n	800dbc0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800db8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db90:	3310      	adds	r3, #16
 800db92:	687a      	ldr	r2, [r7, #4]
 800db94:	4611      	mov	r1, r2
 800db96:	4618      	mov	r0, r3
 800db98:	f001 f81e 	bl	800ebd8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800db9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800db9e:	f000 fac0 	bl	800e122 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800dba2:	f000 fe59 	bl	800e858 <xTaskResumeAll>
 800dba6:	4603      	mov	r3, r0
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	f47f af7c 	bne.w	800daa6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800dbae:	4b0c      	ldr	r3, [pc, #48]	; (800dbe0 <xQueueGenericSend+0x1f0>)
 800dbb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dbb4:	601a      	str	r2, [r3, #0]
 800dbb6:	f3bf 8f4f 	dsb	sy
 800dbba:	f3bf 8f6f 	isb	sy
 800dbbe:	e772      	b.n	800daa6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800dbc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dbc2:	f000 faae 	bl	800e122 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dbc6:	f000 fe47 	bl	800e858 <xTaskResumeAll>
 800dbca:	e76c      	b.n	800daa6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800dbcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dbce:	f000 faa8 	bl	800e122 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dbd2:	f000 fe41 	bl	800e858 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800dbd6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800dbd8:	4618      	mov	r0, r3
 800dbda:	3738      	adds	r7, #56	; 0x38
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	bd80      	pop	{r7, pc}
 800dbe0:	e000ed04 	.word	0xe000ed04

0800dbe4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	b08e      	sub	sp, #56	; 0x38
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	60f8      	str	r0, [r7, #12]
 800dbec:	60b9      	str	r1, [r7, #8]
 800dbee:	607a      	str	r2, [r7, #4]
 800dbf0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800dbf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d109      	bne.n	800dc10 <xQueueGenericSendFromISR+0x2c>
 800dbfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc00:	f383 8811 	msr	BASEPRI, r3
 800dc04:	f3bf 8f6f 	isb	sy
 800dc08:	f3bf 8f4f 	dsb	sy
 800dc0c:	627b      	str	r3, [r7, #36]	; 0x24
 800dc0e:	e7fe      	b.n	800dc0e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dc10:	68bb      	ldr	r3, [r7, #8]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d103      	bne.n	800dc1e <xQueueGenericSendFromISR+0x3a>
 800dc16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d101      	bne.n	800dc22 <xQueueGenericSendFromISR+0x3e>
 800dc1e:	2301      	movs	r3, #1
 800dc20:	e000      	b.n	800dc24 <xQueueGenericSendFromISR+0x40>
 800dc22:	2300      	movs	r3, #0
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d109      	bne.n	800dc3c <xQueueGenericSendFromISR+0x58>
 800dc28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc2c:	f383 8811 	msr	BASEPRI, r3
 800dc30:	f3bf 8f6f 	isb	sy
 800dc34:	f3bf 8f4f 	dsb	sy
 800dc38:	623b      	str	r3, [r7, #32]
 800dc3a:	e7fe      	b.n	800dc3a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dc3c:	683b      	ldr	r3, [r7, #0]
 800dc3e:	2b02      	cmp	r3, #2
 800dc40:	d103      	bne.n	800dc4a <xQueueGenericSendFromISR+0x66>
 800dc42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc46:	2b01      	cmp	r3, #1
 800dc48:	d101      	bne.n	800dc4e <xQueueGenericSendFromISR+0x6a>
 800dc4a:	2301      	movs	r3, #1
 800dc4c:	e000      	b.n	800dc50 <xQueueGenericSendFromISR+0x6c>
 800dc4e:	2300      	movs	r3, #0
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d109      	bne.n	800dc68 <xQueueGenericSendFromISR+0x84>
 800dc54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc58:	f383 8811 	msr	BASEPRI, r3
 800dc5c:	f3bf 8f6f 	isb	sy
 800dc60:	f3bf 8f4f 	dsb	sy
 800dc64:	61fb      	str	r3, [r7, #28]
 800dc66:	e7fe      	b.n	800dc66 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dc68:	f002 f914 	bl	800fe94 <vPortValidateInterruptPriority>
	__asm volatile
 800dc6c:	f3ef 8211 	mrs	r2, BASEPRI
 800dc70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc74:	f383 8811 	msr	BASEPRI, r3
 800dc78:	f3bf 8f6f 	isb	sy
 800dc7c:	f3bf 8f4f 	dsb	sy
 800dc80:	61ba      	str	r2, [r7, #24]
 800dc82:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800dc84:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dc86:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dc88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc90:	429a      	cmp	r2, r3
 800dc92:	d302      	bcc.n	800dc9a <xQueueGenericSendFromISR+0xb6>
 800dc94:	683b      	ldr	r3, [r7, #0]
 800dc96:	2b02      	cmp	r3, #2
 800dc98:	d12c      	bne.n	800dcf4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800dc9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dca0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dca4:	683a      	ldr	r2, [r7, #0]
 800dca6:	68b9      	ldr	r1, [r7, #8]
 800dca8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dcaa:	f000 f9aa 	bl	800e002 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800dcae:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800dcb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dcb6:	d112      	bne.n	800dcde <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dcb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d016      	beq.n	800dcee <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dcc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcc2:	3324      	adds	r3, #36	; 0x24
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	f000 ffd5 	bl	800ec74 <xTaskRemoveFromEventList>
 800dcca:	4603      	mov	r3, r0
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d00e      	beq.n	800dcee <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d00b      	beq.n	800dcee <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	2201      	movs	r2, #1
 800dcda:	601a      	str	r2, [r3, #0]
 800dcdc:	e007      	b.n	800dcee <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800dcde:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dce2:	3301      	adds	r3, #1
 800dce4:	b2db      	uxtb	r3, r3
 800dce6:	b25a      	sxtb	r2, r3
 800dce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800dcee:	2301      	movs	r3, #1
 800dcf0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800dcf2:	e001      	b.n	800dcf8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	637b      	str	r3, [r7, #52]	; 0x34
 800dcf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcfa:	613b      	str	r3, [r7, #16]
	__asm volatile
 800dcfc:	693b      	ldr	r3, [r7, #16]
 800dcfe:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dd02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800dd04:	4618      	mov	r0, r3
 800dd06:	3738      	adds	r7, #56	; 0x38
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	bd80      	pop	{r7, pc}

0800dd0c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b08c      	sub	sp, #48	; 0x30
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	60f8      	str	r0, [r7, #12]
 800dd14:	60b9      	str	r1, [r7, #8]
 800dd16:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800dd18:	2300      	movs	r3, #0
 800dd1a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800dd20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d109      	bne.n	800dd3a <xQueueReceive+0x2e>
	__asm volatile
 800dd26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd2a:	f383 8811 	msr	BASEPRI, r3
 800dd2e:	f3bf 8f6f 	isb	sy
 800dd32:	f3bf 8f4f 	dsb	sy
 800dd36:	623b      	str	r3, [r7, #32]
 800dd38:	e7fe      	b.n	800dd38 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dd3a:	68bb      	ldr	r3, [r7, #8]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d103      	bne.n	800dd48 <xQueueReceive+0x3c>
 800dd40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d101      	bne.n	800dd4c <xQueueReceive+0x40>
 800dd48:	2301      	movs	r3, #1
 800dd4a:	e000      	b.n	800dd4e <xQueueReceive+0x42>
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d109      	bne.n	800dd66 <xQueueReceive+0x5a>
 800dd52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd56:	f383 8811 	msr	BASEPRI, r3
 800dd5a:	f3bf 8f6f 	isb	sy
 800dd5e:	f3bf 8f4f 	dsb	sy
 800dd62:	61fb      	str	r3, [r7, #28]
 800dd64:	e7fe      	b.n	800dd64 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dd66:	f001 f93b 	bl	800efe0 <xTaskGetSchedulerState>
 800dd6a:	4603      	mov	r3, r0
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d102      	bne.n	800dd76 <xQueueReceive+0x6a>
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d101      	bne.n	800dd7a <xQueueReceive+0x6e>
 800dd76:	2301      	movs	r3, #1
 800dd78:	e000      	b.n	800dd7c <xQueueReceive+0x70>
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d109      	bne.n	800dd94 <xQueueReceive+0x88>
 800dd80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd84:	f383 8811 	msr	BASEPRI, r3
 800dd88:	f3bf 8f6f 	isb	sy
 800dd8c:	f3bf 8f4f 	dsb	sy
 800dd90:	61bb      	str	r3, [r7, #24]
 800dd92:	e7fe      	b.n	800dd92 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dd94:	f001 ffa2 	bl	800fcdc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dd98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd9c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dd9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d01f      	beq.n	800dde4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dda4:	68b9      	ldr	r1, [r7, #8]
 800dda6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dda8:	f000 f995 	bl	800e0d6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ddac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddae:	1e5a      	subs	r2, r3, #1
 800ddb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddb2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ddb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddb6:	691b      	ldr	r3, [r3, #16]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d00f      	beq.n	800dddc <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ddbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddbe:	3310      	adds	r3, #16
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	f000 ff57 	bl	800ec74 <xTaskRemoveFromEventList>
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d007      	beq.n	800dddc <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ddcc:	4b3c      	ldr	r3, [pc, #240]	; (800dec0 <xQueueReceive+0x1b4>)
 800ddce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ddd2:	601a      	str	r2, [r3, #0]
 800ddd4:	f3bf 8f4f 	dsb	sy
 800ddd8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dddc:	f001 ffac 	bl	800fd38 <vPortExitCritical>
				return pdPASS;
 800dde0:	2301      	movs	r3, #1
 800dde2:	e069      	b.n	800deb8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d103      	bne.n	800ddf2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ddea:	f001 ffa5 	bl	800fd38 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ddee:	2300      	movs	r3, #0
 800ddf0:	e062      	b.n	800deb8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ddf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d106      	bne.n	800de06 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ddf8:	f107 0310 	add.w	r3, r7, #16
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	f000 ff9b 	bl	800ed38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800de02:	2301      	movs	r3, #1
 800de04:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800de06:	f001 ff97 	bl	800fd38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800de0a:	f000 fd17 	bl	800e83c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800de0e:	f001 ff65 	bl	800fcdc <vPortEnterCritical>
 800de12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800de18:	b25b      	sxtb	r3, r3
 800de1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800de1e:	d103      	bne.n	800de28 <xQueueReceive+0x11c>
 800de20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de22:	2200      	movs	r2, #0
 800de24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800de28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800de2e:	b25b      	sxtb	r3, r3
 800de30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800de34:	d103      	bne.n	800de3e <xQueueReceive+0x132>
 800de36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de38:	2200      	movs	r2, #0
 800de3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800de3e:	f001 ff7b 	bl	800fd38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800de42:	1d3a      	adds	r2, r7, #4
 800de44:	f107 0310 	add.w	r3, r7, #16
 800de48:	4611      	mov	r1, r2
 800de4a:	4618      	mov	r0, r3
 800de4c:	f000 ff8a 	bl	800ed64 <xTaskCheckForTimeOut>
 800de50:	4603      	mov	r3, r0
 800de52:	2b00      	cmp	r3, #0
 800de54:	d123      	bne.n	800de9e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800de56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de58:	f000 f9b5 	bl	800e1c6 <prvIsQueueEmpty>
 800de5c:	4603      	mov	r3, r0
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d017      	beq.n	800de92 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800de62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de64:	3324      	adds	r3, #36	; 0x24
 800de66:	687a      	ldr	r2, [r7, #4]
 800de68:	4611      	mov	r1, r2
 800de6a:	4618      	mov	r0, r3
 800de6c:	f000 feb4 	bl	800ebd8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800de70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de72:	f000 f956 	bl	800e122 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800de76:	f000 fcef 	bl	800e858 <xTaskResumeAll>
 800de7a:	4603      	mov	r3, r0
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d189      	bne.n	800dd94 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800de80:	4b0f      	ldr	r3, [pc, #60]	; (800dec0 <xQueueReceive+0x1b4>)
 800de82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de86:	601a      	str	r2, [r3, #0]
 800de88:	f3bf 8f4f 	dsb	sy
 800de8c:	f3bf 8f6f 	isb	sy
 800de90:	e780      	b.n	800dd94 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800de92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de94:	f000 f945 	bl	800e122 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800de98:	f000 fcde 	bl	800e858 <xTaskResumeAll>
 800de9c:	e77a      	b.n	800dd94 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800de9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dea0:	f000 f93f 	bl	800e122 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dea4:	f000 fcd8 	bl	800e858 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dea8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800deaa:	f000 f98c 	bl	800e1c6 <prvIsQueueEmpty>
 800deae:	4603      	mov	r3, r0
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	f43f af6f 	beq.w	800dd94 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800deb6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800deb8:	4618      	mov	r0, r3
 800deba:	3730      	adds	r7, #48	; 0x30
 800debc:	46bd      	mov	sp, r7
 800debe:	bd80      	pop	{r7, pc}
 800dec0:	e000ed04 	.word	0xe000ed04

0800dec4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800dec4:	b580      	push	{r7, lr}
 800dec6:	b08e      	sub	sp, #56	; 0x38
 800dec8:	af00      	add	r7, sp, #0
 800deca:	60f8      	str	r0, [r7, #12]
 800decc:	60b9      	str	r1, [r7, #8]
 800dece:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ded4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d109      	bne.n	800deee <xQueueReceiveFromISR+0x2a>
 800deda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dede:	f383 8811 	msr	BASEPRI, r3
 800dee2:	f3bf 8f6f 	isb	sy
 800dee6:	f3bf 8f4f 	dsb	sy
 800deea:	623b      	str	r3, [r7, #32]
 800deec:	e7fe      	b.n	800deec <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800deee:	68bb      	ldr	r3, [r7, #8]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d103      	bne.n	800defc <xQueueReceiveFromISR+0x38>
 800def4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800def6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800def8:	2b00      	cmp	r3, #0
 800defa:	d101      	bne.n	800df00 <xQueueReceiveFromISR+0x3c>
 800defc:	2301      	movs	r3, #1
 800defe:	e000      	b.n	800df02 <xQueueReceiveFromISR+0x3e>
 800df00:	2300      	movs	r3, #0
 800df02:	2b00      	cmp	r3, #0
 800df04:	d109      	bne.n	800df1a <xQueueReceiveFromISR+0x56>
 800df06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df0a:	f383 8811 	msr	BASEPRI, r3
 800df0e:	f3bf 8f6f 	isb	sy
 800df12:	f3bf 8f4f 	dsb	sy
 800df16:	61fb      	str	r3, [r7, #28]
 800df18:	e7fe      	b.n	800df18 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800df1a:	f001 ffbb 	bl	800fe94 <vPortValidateInterruptPriority>
	__asm volatile
 800df1e:	f3ef 8211 	mrs	r2, BASEPRI
 800df22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df26:	f383 8811 	msr	BASEPRI, r3
 800df2a:	f3bf 8f6f 	isb	sy
 800df2e:	f3bf 8f4f 	dsb	sy
 800df32:	61ba      	str	r2, [r7, #24]
 800df34:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800df36:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800df38:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800df3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df3e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800df40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df42:	2b00      	cmp	r3, #0
 800df44:	d02f      	beq.n	800dfa6 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800df46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800df4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800df50:	68b9      	ldr	r1, [r7, #8]
 800df52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800df54:	f000 f8bf 	bl	800e0d6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800df58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df5a:	1e5a      	subs	r2, r3, #1
 800df5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df5e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800df60:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800df64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800df68:	d112      	bne.n	800df90 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800df6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df6c:	691b      	ldr	r3, [r3, #16]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d016      	beq.n	800dfa0 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800df72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df74:	3310      	adds	r3, #16
 800df76:	4618      	mov	r0, r3
 800df78:	f000 fe7c 	bl	800ec74 <xTaskRemoveFromEventList>
 800df7c:	4603      	mov	r3, r0
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d00e      	beq.n	800dfa0 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	2b00      	cmp	r3, #0
 800df86:	d00b      	beq.n	800dfa0 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	2201      	movs	r2, #1
 800df8c:	601a      	str	r2, [r3, #0]
 800df8e:	e007      	b.n	800dfa0 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800df90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df94:	3301      	adds	r3, #1
 800df96:	b2db      	uxtb	r3, r3
 800df98:	b25a      	sxtb	r2, r3
 800df9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800dfa0:	2301      	movs	r3, #1
 800dfa2:	637b      	str	r3, [r7, #52]	; 0x34
 800dfa4:	e001      	b.n	800dfaa <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	637b      	str	r3, [r7, #52]	; 0x34
 800dfaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfac:	613b      	str	r3, [r7, #16]
	__asm volatile
 800dfae:	693b      	ldr	r3, [r7, #16]
 800dfb0:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dfb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	3738      	adds	r7, #56	; 0x38
 800dfba:	46bd      	mov	sp, r7
 800dfbc:	bd80      	pop	{r7, pc}

0800dfbe <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 800dfbe:	b580      	push	{r7, lr}
 800dfc0:	b086      	sub	sp, #24
 800dfc2:	af00      	add	r7, sp, #0
 800dfc4:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800dfca:	697b      	ldr	r3, [r7, #20]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d109      	bne.n	800dfe4 <uxQueueSpacesAvailable+0x26>
	__asm volatile
 800dfd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfd4:	f383 8811 	msr	BASEPRI, r3
 800dfd8:	f3bf 8f6f 	isb	sy
 800dfdc:	f3bf 8f4f 	dsb	sy
 800dfe0:	60fb      	str	r3, [r7, #12]
 800dfe2:	e7fe      	b.n	800dfe2 <uxQueueSpacesAvailable+0x24>

	taskENTER_CRITICAL();
 800dfe4:	f001 fe7a 	bl	800fcdc <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 800dfe8:	697b      	ldr	r3, [r7, #20]
 800dfea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dfec:	697b      	ldr	r3, [r7, #20]
 800dfee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dff0:	1ad3      	subs	r3, r2, r3
 800dff2:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800dff4:	f001 fea0 	bl	800fd38 <vPortExitCritical>

	return uxReturn;
 800dff8:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800dffa:	4618      	mov	r0, r3
 800dffc:	3718      	adds	r7, #24
 800dffe:	46bd      	mov	sp, r7
 800e000:	bd80      	pop	{r7, pc}

0800e002 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e002:	b580      	push	{r7, lr}
 800e004:	b086      	sub	sp, #24
 800e006:	af00      	add	r7, sp, #0
 800e008:	60f8      	str	r0, [r7, #12]
 800e00a:	60b9      	str	r1, [r7, #8]
 800e00c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e00e:	2300      	movs	r3, #0
 800e010:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e016:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d10d      	bne.n	800e03c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d14d      	bne.n	800e0c4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	689b      	ldr	r3, [r3, #8]
 800e02c:	4618      	mov	r0, r3
 800e02e:	f000 fff5 	bl	800f01c <xTaskPriorityDisinherit>
 800e032:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	2200      	movs	r2, #0
 800e038:	609a      	str	r2, [r3, #8]
 800e03a:	e043      	b.n	800e0c4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d119      	bne.n	800e076 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	6858      	ldr	r0, [r3, #4]
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e04a:	461a      	mov	r2, r3
 800e04c:	68b9      	ldr	r1, [r7, #8]
 800e04e:	f008 fe3b 	bl	8016cc8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	685a      	ldr	r2, [r3, #4]
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e05a:	441a      	add	r2, r3
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	685a      	ldr	r2, [r3, #4]
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	689b      	ldr	r3, [r3, #8]
 800e068:	429a      	cmp	r2, r3
 800e06a:	d32b      	bcc.n	800e0c4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	681a      	ldr	r2, [r3, #0]
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	605a      	str	r2, [r3, #4]
 800e074:	e026      	b.n	800e0c4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	68d8      	ldr	r0, [r3, #12]
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e07e:	461a      	mov	r2, r3
 800e080:	68b9      	ldr	r1, [r7, #8]
 800e082:	f008 fe21 	bl	8016cc8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	68da      	ldr	r2, [r3, #12]
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e08e:	425b      	negs	r3, r3
 800e090:	441a      	add	r2, r3
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	68da      	ldr	r2, [r3, #12]
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	429a      	cmp	r2, r3
 800e0a0:	d207      	bcs.n	800e0b2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	689a      	ldr	r2, [r3, #8]
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0aa:	425b      	negs	r3, r3
 800e0ac:	441a      	add	r2, r3
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	2b02      	cmp	r3, #2
 800e0b6:	d105      	bne.n	800e0c4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e0b8:	693b      	ldr	r3, [r7, #16]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d002      	beq.n	800e0c4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e0be:	693b      	ldr	r3, [r7, #16]
 800e0c0:	3b01      	subs	r3, #1
 800e0c2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e0c4:	693b      	ldr	r3, [r7, #16]
 800e0c6:	1c5a      	adds	r2, r3, #1
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e0cc:	697b      	ldr	r3, [r7, #20]
}
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	3718      	adds	r7, #24
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	bd80      	pop	{r7, pc}

0800e0d6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e0d6:	b580      	push	{r7, lr}
 800e0d8:	b082      	sub	sp, #8
 800e0da:	af00      	add	r7, sp, #0
 800e0dc:	6078      	str	r0, [r7, #4]
 800e0de:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d018      	beq.n	800e11a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	68da      	ldr	r2, [r3, #12]
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0f0:	441a      	add	r2, r3
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	68da      	ldr	r2, [r3, #12]
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	689b      	ldr	r3, [r3, #8]
 800e0fe:	429a      	cmp	r2, r3
 800e100:	d303      	bcc.n	800e10a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	681a      	ldr	r2, [r3, #0]
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	68d9      	ldr	r1, [r3, #12]
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e112:	461a      	mov	r2, r3
 800e114:	6838      	ldr	r0, [r7, #0]
 800e116:	f008 fdd7 	bl	8016cc8 <memcpy>
	}
}
 800e11a:	bf00      	nop
 800e11c:	3708      	adds	r7, #8
 800e11e:	46bd      	mov	sp, r7
 800e120:	bd80      	pop	{r7, pc}

0800e122 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e122:	b580      	push	{r7, lr}
 800e124:	b084      	sub	sp, #16
 800e126:	af00      	add	r7, sp, #0
 800e128:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e12a:	f001 fdd7 	bl	800fcdc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e134:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e136:	e011      	b.n	800e15c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d012      	beq.n	800e166 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	3324      	adds	r3, #36	; 0x24
 800e144:	4618      	mov	r0, r3
 800e146:	f000 fd95 	bl	800ec74 <xTaskRemoveFromEventList>
 800e14a:	4603      	mov	r3, r0
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d001      	beq.n	800e154 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e150:	f000 fe68 	bl	800ee24 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e154:	7bfb      	ldrb	r3, [r7, #15]
 800e156:	3b01      	subs	r3, #1
 800e158:	b2db      	uxtb	r3, r3
 800e15a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e15c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e160:	2b00      	cmp	r3, #0
 800e162:	dce9      	bgt.n	800e138 <prvUnlockQueue+0x16>
 800e164:	e000      	b.n	800e168 <prvUnlockQueue+0x46>
					break;
 800e166:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	22ff      	movs	r2, #255	; 0xff
 800e16c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e170:	f001 fde2 	bl	800fd38 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e174:	f001 fdb2 	bl	800fcdc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e17e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e180:	e011      	b.n	800e1a6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	691b      	ldr	r3, [r3, #16]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d012      	beq.n	800e1b0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	3310      	adds	r3, #16
 800e18e:	4618      	mov	r0, r3
 800e190:	f000 fd70 	bl	800ec74 <xTaskRemoveFromEventList>
 800e194:	4603      	mov	r3, r0
 800e196:	2b00      	cmp	r3, #0
 800e198:	d001      	beq.n	800e19e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e19a:	f000 fe43 	bl	800ee24 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e19e:	7bbb      	ldrb	r3, [r7, #14]
 800e1a0:	3b01      	subs	r3, #1
 800e1a2:	b2db      	uxtb	r3, r3
 800e1a4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e1a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	dce9      	bgt.n	800e182 <prvUnlockQueue+0x60>
 800e1ae:	e000      	b.n	800e1b2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e1b0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	22ff      	movs	r2, #255	; 0xff
 800e1b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e1ba:	f001 fdbd 	bl	800fd38 <vPortExitCritical>
}
 800e1be:	bf00      	nop
 800e1c0:	3710      	adds	r7, #16
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	bd80      	pop	{r7, pc}

0800e1c6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e1c6:	b580      	push	{r7, lr}
 800e1c8:	b084      	sub	sp, #16
 800e1ca:	af00      	add	r7, sp, #0
 800e1cc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e1ce:	f001 fd85 	bl	800fcdc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d102      	bne.n	800e1e0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e1da:	2301      	movs	r3, #1
 800e1dc:	60fb      	str	r3, [r7, #12]
 800e1de:	e001      	b.n	800e1e4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e1e0:	2300      	movs	r3, #0
 800e1e2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e1e4:	f001 fda8 	bl	800fd38 <vPortExitCritical>

	return xReturn;
 800e1e8:	68fb      	ldr	r3, [r7, #12]
}
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	3710      	adds	r7, #16
 800e1ee:	46bd      	mov	sp, r7
 800e1f0:	bd80      	pop	{r7, pc}

0800e1f2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e1f2:	b580      	push	{r7, lr}
 800e1f4:	b084      	sub	sp, #16
 800e1f6:	af00      	add	r7, sp, #0
 800e1f8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e1fa:	f001 fd6f 	bl	800fcdc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e206:	429a      	cmp	r2, r3
 800e208:	d102      	bne.n	800e210 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e20a:	2301      	movs	r3, #1
 800e20c:	60fb      	str	r3, [r7, #12]
 800e20e:	e001      	b.n	800e214 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e210:	2300      	movs	r3, #0
 800e212:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e214:	f001 fd90 	bl	800fd38 <vPortExitCritical>

	return xReturn;
 800e218:	68fb      	ldr	r3, [r7, #12]
}
 800e21a:	4618      	mov	r0, r3
 800e21c:	3710      	adds	r7, #16
 800e21e:	46bd      	mov	sp, r7
 800e220:	bd80      	pop	{r7, pc}
	...

0800e224 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e224:	b480      	push	{r7}
 800e226:	b085      	sub	sp, #20
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
 800e22c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e22e:	2300      	movs	r3, #0
 800e230:	60fb      	str	r3, [r7, #12]
 800e232:	e014      	b.n	800e25e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e234:	4a0e      	ldr	r2, [pc, #56]	; (800e270 <vQueueAddToRegistry+0x4c>)
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d10b      	bne.n	800e258 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e240:	490b      	ldr	r1, [pc, #44]	; (800e270 <vQueueAddToRegistry+0x4c>)
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	683a      	ldr	r2, [r7, #0]
 800e246:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e24a:	4a09      	ldr	r2, [pc, #36]	; (800e270 <vQueueAddToRegistry+0x4c>)
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	00db      	lsls	r3, r3, #3
 800e250:	4413      	add	r3, r2
 800e252:	687a      	ldr	r2, [r7, #4]
 800e254:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e256:	e005      	b.n	800e264 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	3301      	adds	r3, #1
 800e25c:	60fb      	str	r3, [r7, #12]
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	2b07      	cmp	r3, #7
 800e262:	d9e7      	bls.n	800e234 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e264:	bf00      	nop
 800e266:	3714      	adds	r7, #20
 800e268:	46bd      	mov	sp, r7
 800e26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e26e:	4770      	bx	lr
 800e270:	20006914 	.word	0x20006914

0800e274 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e274:	b580      	push	{r7, lr}
 800e276:	b086      	sub	sp, #24
 800e278:	af00      	add	r7, sp, #0
 800e27a:	60f8      	str	r0, [r7, #12]
 800e27c:	60b9      	str	r1, [r7, #8]
 800e27e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e284:	f001 fd2a 	bl	800fcdc <vPortEnterCritical>
 800e288:	697b      	ldr	r3, [r7, #20]
 800e28a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e28e:	b25b      	sxtb	r3, r3
 800e290:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e294:	d103      	bne.n	800e29e <vQueueWaitForMessageRestricted+0x2a>
 800e296:	697b      	ldr	r3, [r7, #20]
 800e298:	2200      	movs	r2, #0
 800e29a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e29e:	697b      	ldr	r3, [r7, #20]
 800e2a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e2a4:	b25b      	sxtb	r3, r3
 800e2a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e2aa:	d103      	bne.n	800e2b4 <vQueueWaitForMessageRestricted+0x40>
 800e2ac:	697b      	ldr	r3, [r7, #20]
 800e2ae:	2200      	movs	r2, #0
 800e2b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e2b4:	f001 fd40 	bl	800fd38 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e2b8:	697b      	ldr	r3, [r7, #20]
 800e2ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d106      	bne.n	800e2ce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e2c0:	697b      	ldr	r3, [r7, #20]
 800e2c2:	3324      	adds	r3, #36	; 0x24
 800e2c4:	687a      	ldr	r2, [r7, #4]
 800e2c6:	68b9      	ldr	r1, [r7, #8]
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	f000 fca9 	bl	800ec20 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e2ce:	6978      	ldr	r0, [r7, #20]
 800e2d0:	f7ff ff27 	bl	800e122 <prvUnlockQueue>
	}
 800e2d4:	bf00      	nop
 800e2d6:	3718      	adds	r7, #24
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	bd80      	pop	{r7, pc}

0800e2dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	b08e      	sub	sp, #56	; 0x38
 800e2e0:	af04      	add	r7, sp, #16
 800e2e2:	60f8      	str	r0, [r7, #12]
 800e2e4:	60b9      	str	r1, [r7, #8]
 800e2e6:	607a      	str	r2, [r7, #4]
 800e2e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e2ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d109      	bne.n	800e304 <xTaskCreateStatic+0x28>
 800e2f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2f4:	f383 8811 	msr	BASEPRI, r3
 800e2f8:	f3bf 8f6f 	isb	sy
 800e2fc:	f3bf 8f4f 	dsb	sy
 800e300:	623b      	str	r3, [r7, #32]
 800e302:	e7fe      	b.n	800e302 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800e304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e306:	2b00      	cmp	r3, #0
 800e308:	d109      	bne.n	800e31e <xTaskCreateStatic+0x42>
 800e30a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e30e:	f383 8811 	msr	BASEPRI, r3
 800e312:	f3bf 8f6f 	isb	sy
 800e316:	f3bf 8f4f 	dsb	sy
 800e31a:	61fb      	str	r3, [r7, #28]
 800e31c:	e7fe      	b.n	800e31c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e31e:	235c      	movs	r3, #92	; 0x5c
 800e320:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e322:	693b      	ldr	r3, [r7, #16]
 800e324:	2b5c      	cmp	r3, #92	; 0x5c
 800e326:	d009      	beq.n	800e33c <xTaskCreateStatic+0x60>
 800e328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e32c:	f383 8811 	msr	BASEPRI, r3
 800e330:	f3bf 8f6f 	isb	sy
 800e334:	f3bf 8f4f 	dsb	sy
 800e338:	61bb      	str	r3, [r7, #24]
 800e33a:	e7fe      	b.n	800e33a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e33c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e33e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e340:	2b00      	cmp	r3, #0
 800e342:	d01e      	beq.n	800e382 <xTaskCreateStatic+0xa6>
 800e344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e346:	2b00      	cmp	r3, #0
 800e348:	d01b      	beq.n	800e382 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e34a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e34c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e34e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e350:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e352:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e356:	2202      	movs	r2, #2
 800e358:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e35c:	2300      	movs	r3, #0
 800e35e:	9303      	str	r3, [sp, #12]
 800e360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e362:	9302      	str	r3, [sp, #8]
 800e364:	f107 0314 	add.w	r3, r7, #20
 800e368:	9301      	str	r3, [sp, #4]
 800e36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e36c:	9300      	str	r3, [sp, #0]
 800e36e:	683b      	ldr	r3, [r7, #0]
 800e370:	687a      	ldr	r2, [r7, #4]
 800e372:	68b9      	ldr	r1, [r7, #8]
 800e374:	68f8      	ldr	r0, [r7, #12]
 800e376:	f000 f850 	bl	800e41a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e37a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e37c:	f000 f8dc 	bl	800e538 <prvAddNewTaskToReadyList>
 800e380:	e001      	b.n	800e386 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800e382:	2300      	movs	r3, #0
 800e384:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e386:	697b      	ldr	r3, [r7, #20]
	}
 800e388:	4618      	mov	r0, r3
 800e38a:	3728      	adds	r7, #40	; 0x28
 800e38c:	46bd      	mov	sp, r7
 800e38e:	bd80      	pop	{r7, pc}

0800e390 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e390:	b580      	push	{r7, lr}
 800e392:	b08c      	sub	sp, #48	; 0x30
 800e394:	af04      	add	r7, sp, #16
 800e396:	60f8      	str	r0, [r7, #12]
 800e398:	60b9      	str	r1, [r7, #8]
 800e39a:	603b      	str	r3, [r7, #0]
 800e39c:	4613      	mov	r3, r2
 800e39e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e3a0:	88fb      	ldrh	r3, [r7, #6]
 800e3a2:	009b      	lsls	r3, r3, #2
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	f001 fdb3 	bl	800ff10 <pvPortMalloc>
 800e3aa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e3ac:	697b      	ldr	r3, [r7, #20]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d00e      	beq.n	800e3d0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e3b2:	205c      	movs	r0, #92	; 0x5c
 800e3b4:	f001 fdac 	bl	800ff10 <pvPortMalloc>
 800e3b8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e3ba:	69fb      	ldr	r3, [r7, #28]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d003      	beq.n	800e3c8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e3c0:	69fb      	ldr	r3, [r7, #28]
 800e3c2:	697a      	ldr	r2, [r7, #20]
 800e3c4:	631a      	str	r2, [r3, #48]	; 0x30
 800e3c6:	e005      	b.n	800e3d4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e3c8:	6978      	ldr	r0, [r7, #20]
 800e3ca:	f001 fe63 	bl	8010094 <vPortFree>
 800e3ce:	e001      	b.n	800e3d4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e3d4:	69fb      	ldr	r3, [r7, #28]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d017      	beq.n	800e40a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e3da:	69fb      	ldr	r3, [r7, #28]
 800e3dc:	2200      	movs	r2, #0
 800e3de:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e3e2:	88fa      	ldrh	r2, [r7, #6]
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	9303      	str	r3, [sp, #12]
 800e3e8:	69fb      	ldr	r3, [r7, #28]
 800e3ea:	9302      	str	r3, [sp, #8]
 800e3ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3ee:	9301      	str	r3, [sp, #4]
 800e3f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3f2:	9300      	str	r3, [sp, #0]
 800e3f4:	683b      	ldr	r3, [r7, #0]
 800e3f6:	68b9      	ldr	r1, [r7, #8]
 800e3f8:	68f8      	ldr	r0, [r7, #12]
 800e3fa:	f000 f80e 	bl	800e41a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e3fe:	69f8      	ldr	r0, [r7, #28]
 800e400:	f000 f89a 	bl	800e538 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e404:	2301      	movs	r3, #1
 800e406:	61bb      	str	r3, [r7, #24]
 800e408:	e002      	b.n	800e410 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e40a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e40e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e410:	69bb      	ldr	r3, [r7, #24]
	}
 800e412:	4618      	mov	r0, r3
 800e414:	3720      	adds	r7, #32
 800e416:	46bd      	mov	sp, r7
 800e418:	bd80      	pop	{r7, pc}

0800e41a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e41a:	b580      	push	{r7, lr}
 800e41c:	b088      	sub	sp, #32
 800e41e:	af00      	add	r7, sp, #0
 800e420:	60f8      	str	r0, [r7, #12]
 800e422:	60b9      	str	r1, [r7, #8]
 800e424:	607a      	str	r2, [r7, #4]
 800e426:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e42a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	009b      	lsls	r3, r3, #2
 800e430:	461a      	mov	r2, r3
 800e432:	21a5      	movs	r1, #165	; 0xa5
 800e434:	f008 fc53 	bl	8016cde <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e43a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e442:	3b01      	subs	r3, #1
 800e444:	009b      	lsls	r3, r3, #2
 800e446:	4413      	add	r3, r2
 800e448:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e44a:	69bb      	ldr	r3, [r7, #24]
 800e44c:	f023 0307 	bic.w	r3, r3, #7
 800e450:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e452:	69bb      	ldr	r3, [r7, #24]
 800e454:	f003 0307 	and.w	r3, r3, #7
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d009      	beq.n	800e470 <prvInitialiseNewTask+0x56>
 800e45c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e460:	f383 8811 	msr	BASEPRI, r3
 800e464:	f3bf 8f6f 	isb	sy
 800e468:	f3bf 8f4f 	dsb	sy
 800e46c:	617b      	str	r3, [r7, #20]
 800e46e:	e7fe      	b.n	800e46e <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e470:	68bb      	ldr	r3, [r7, #8]
 800e472:	2b00      	cmp	r3, #0
 800e474:	d01f      	beq.n	800e4b6 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e476:	2300      	movs	r3, #0
 800e478:	61fb      	str	r3, [r7, #28]
 800e47a:	e012      	b.n	800e4a2 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e47c:	68ba      	ldr	r2, [r7, #8]
 800e47e:	69fb      	ldr	r3, [r7, #28]
 800e480:	4413      	add	r3, r2
 800e482:	7819      	ldrb	r1, [r3, #0]
 800e484:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e486:	69fb      	ldr	r3, [r7, #28]
 800e488:	4413      	add	r3, r2
 800e48a:	3334      	adds	r3, #52	; 0x34
 800e48c:	460a      	mov	r2, r1
 800e48e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e490:	68ba      	ldr	r2, [r7, #8]
 800e492:	69fb      	ldr	r3, [r7, #28]
 800e494:	4413      	add	r3, r2
 800e496:	781b      	ldrb	r3, [r3, #0]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d006      	beq.n	800e4aa <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e49c:	69fb      	ldr	r3, [r7, #28]
 800e49e:	3301      	adds	r3, #1
 800e4a0:	61fb      	str	r3, [r7, #28]
 800e4a2:	69fb      	ldr	r3, [r7, #28]
 800e4a4:	2b0f      	cmp	r3, #15
 800e4a6:	d9e9      	bls.n	800e47c <prvInitialiseNewTask+0x62>
 800e4a8:	e000      	b.n	800e4ac <prvInitialiseNewTask+0x92>
			{
				break;
 800e4aa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e4ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4ae:	2200      	movs	r2, #0
 800e4b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e4b4:	e003      	b.n	800e4be <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e4b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4b8:	2200      	movs	r2, #0
 800e4ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e4be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4c0:	2b37      	cmp	r3, #55	; 0x37
 800e4c2:	d901      	bls.n	800e4c8 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e4c4:	2337      	movs	r3, #55	; 0x37
 800e4c6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e4c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e4cc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e4d2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e4d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4d6:	2200      	movs	r2, #0
 800e4d8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e4da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4dc:	3304      	adds	r3, #4
 800e4de:	4618      	mov	r0, r3
 800e4e0:	f7ff f8b4 	bl	800d64c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e4e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4e6:	3318      	adds	r3, #24
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	f7ff f8af 	bl	800d64c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e4ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e4f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e4f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4f6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e4fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e4fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e500:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e502:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e506:	2200      	movs	r2, #0
 800e508:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e50a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e50c:	2200      	movs	r2, #0
 800e50e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e512:	683a      	ldr	r2, [r7, #0]
 800e514:	68f9      	ldr	r1, [r7, #12]
 800e516:	69b8      	ldr	r0, [r7, #24]
 800e518:	f001 fab8 	bl	800fa8c <pxPortInitialiseStack>
 800e51c:	4602      	mov	r2, r0
 800e51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e520:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e524:	2b00      	cmp	r3, #0
 800e526:	d002      	beq.n	800e52e <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e52a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e52c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e52e:	bf00      	nop
 800e530:	3720      	adds	r7, #32
 800e532:	46bd      	mov	sp, r7
 800e534:	bd80      	pop	{r7, pc}
	...

0800e538 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e538:	b580      	push	{r7, lr}
 800e53a:	b082      	sub	sp, #8
 800e53c:	af00      	add	r7, sp, #0
 800e53e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e540:	f001 fbcc 	bl	800fcdc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e544:	4b2d      	ldr	r3, [pc, #180]	; (800e5fc <prvAddNewTaskToReadyList+0xc4>)
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	3301      	adds	r3, #1
 800e54a:	4a2c      	ldr	r2, [pc, #176]	; (800e5fc <prvAddNewTaskToReadyList+0xc4>)
 800e54c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e54e:	4b2c      	ldr	r3, [pc, #176]	; (800e600 <prvAddNewTaskToReadyList+0xc8>)
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	2b00      	cmp	r3, #0
 800e554:	d109      	bne.n	800e56a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e556:	4a2a      	ldr	r2, [pc, #168]	; (800e600 <prvAddNewTaskToReadyList+0xc8>)
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e55c:	4b27      	ldr	r3, [pc, #156]	; (800e5fc <prvAddNewTaskToReadyList+0xc4>)
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	2b01      	cmp	r3, #1
 800e562:	d110      	bne.n	800e586 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e564:	f000 fc82 	bl	800ee6c <prvInitialiseTaskLists>
 800e568:	e00d      	b.n	800e586 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e56a:	4b26      	ldr	r3, [pc, #152]	; (800e604 <prvAddNewTaskToReadyList+0xcc>)
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d109      	bne.n	800e586 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e572:	4b23      	ldr	r3, [pc, #140]	; (800e600 <prvAddNewTaskToReadyList+0xc8>)
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e57c:	429a      	cmp	r2, r3
 800e57e:	d802      	bhi.n	800e586 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e580:	4a1f      	ldr	r2, [pc, #124]	; (800e600 <prvAddNewTaskToReadyList+0xc8>)
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e586:	4b20      	ldr	r3, [pc, #128]	; (800e608 <prvAddNewTaskToReadyList+0xd0>)
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	3301      	adds	r3, #1
 800e58c:	4a1e      	ldr	r2, [pc, #120]	; (800e608 <prvAddNewTaskToReadyList+0xd0>)
 800e58e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e590:	4b1d      	ldr	r3, [pc, #116]	; (800e608 <prvAddNewTaskToReadyList+0xd0>)
 800e592:	681a      	ldr	r2, [r3, #0]
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e59c:	4b1b      	ldr	r3, [pc, #108]	; (800e60c <prvAddNewTaskToReadyList+0xd4>)
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	429a      	cmp	r2, r3
 800e5a2:	d903      	bls.n	800e5ac <prvAddNewTaskToReadyList+0x74>
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5a8:	4a18      	ldr	r2, [pc, #96]	; (800e60c <prvAddNewTaskToReadyList+0xd4>)
 800e5aa:	6013      	str	r3, [r2, #0]
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5b0:	4613      	mov	r3, r2
 800e5b2:	009b      	lsls	r3, r3, #2
 800e5b4:	4413      	add	r3, r2
 800e5b6:	009b      	lsls	r3, r3, #2
 800e5b8:	4a15      	ldr	r2, [pc, #84]	; (800e610 <prvAddNewTaskToReadyList+0xd8>)
 800e5ba:	441a      	add	r2, r3
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	3304      	adds	r3, #4
 800e5c0:	4619      	mov	r1, r3
 800e5c2:	4610      	mov	r0, r2
 800e5c4:	f7ff f84f 	bl	800d666 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e5c8:	f001 fbb6 	bl	800fd38 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e5cc:	4b0d      	ldr	r3, [pc, #52]	; (800e604 <prvAddNewTaskToReadyList+0xcc>)
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d00e      	beq.n	800e5f2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e5d4:	4b0a      	ldr	r3, [pc, #40]	; (800e600 <prvAddNewTaskToReadyList+0xc8>)
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5de:	429a      	cmp	r2, r3
 800e5e0:	d207      	bcs.n	800e5f2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e5e2:	4b0c      	ldr	r3, [pc, #48]	; (800e614 <prvAddNewTaskToReadyList+0xdc>)
 800e5e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e5e8:	601a      	str	r2, [r3, #0]
 800e5ea:	f3bf 8f4f 	dsb	sy
 800e5ee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e5f2:	bf00      	nop
 800e5f4:	3708      	adds	r7, #8
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	bd80      	pop	{r7, pc}
 800e5fa:	bf00      	nop
 800e5fc:	200010fc 	.word	0x200010fc
 800e600:	20000c28 	.word	0x20000c28
 800e604:	20001108 	.word	0x20001108
 800e608:	20001118 	.word	0x20001118
 800e60c:	20001104 	.word	0x20001104
 800e610:	20000c2c 	.word	0x20000c2c
 800e614:	e000ed04 	.word	0xe000ed04

0800e618 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800e618:	b580      	push	{r7, lr}
 800e61a:	b08a      	sub	sp, #40	; 0x28
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	6078      	str	r0, [r7, #4]
 800e620:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800e622:	2300      	movs	r3, #0
 800e624:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d109      	bne.n	800e640 <vTaskDelayUntil+0x28>
 800e62c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e630:	f383 8811 	msr	BASEPRI, r3
 800e634:	f3bf 8f6f 	isb	sy
 800e638:	f3bf 8f4f 	dsb	sy
 800e63c:	617b      	str	r3, [r7, #20]
 800e63e:	e7fe      	b.n	800e63e <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 800e640:	683b      	ldr	r3, [r7, #0]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d109      	bne.n	800e65a <vTaskDelayUntil+0x42>
 800e646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e64a:	f383 8811 	msr	BASEPRI, r3
 800e64e:	f3bf 8f6f 	isb	sy
 800e652:	f3bf 8f4f 	dsb	sy
 800e656:	613b      	str	r3, [r7, #16]
 800e658:	e7fe      	b.n	800e658 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 800e65a:	4b29      	ldr	r3, [pc, #164]	; (800e700 <vTaskDelayUntil+0xe8>)
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d009      	beq.n	800e676 <vTaskDelayUntil+0x5e>
 800e662:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e666:	f383 8811 	msr	BASEPRI, r3
 800e66a:	f3bf 8f6f 	isb	sy
 800e66e:	f3bf 8f4f 	dsb	sy
 800e672:	60fb      	str	r3, [r7, #12]
 800e674:	e7fe      	b.n	800e674 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 800e676:	f000 f8e1 	bl	800e83c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800e67a:	4b22      	ldr	r3, [pc, #136]	; (800e704 <vTaskDelayUntil+0xec>)
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	683a      	ldr	r2, [r7, #0]
 800e686:	4413      	add	r3, r2
 800e688:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	6a3a      	ldr	r2, [r7, #32]
 800e690:	429a      	cmp	r2, r3
 800e692:	d20b      	bcs.n	800e6ac <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	69fa      	ldr	r2, [r7, #28]
 800e69a:	429a      	cmp	r2, r3
 800e69c:	d211      	bcs.n	800e6c2 <vTaskDelayUntil+0xaa>
 800e69e:	69fa      	ldr	r2, [r7, #28]
 800e6a0:	6a3b      	ldr	r3, [r7, #32]
 800e6a2:	429a      	cmp	r2, r3
 800e6a4:	d90d      	bls.n	800e6c2 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800e6a6:	2301      	movs	r3, #1
 800e6a8:	627b      	str	r3, [r7, #36]	; 0x24
 800e6aa:	e00a      	b.n	800e6c2 <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	69fa      	ldr	r2, [r7, #28]
 800e6b2:	429a      	cmp	r2, r3
 800e6b4:	d303      	bcc.n	800e6be <vTaskDelayUntil+0xa6>
 800e6b6:	69fa      	ldr	r2, [r7, #28]
 800e6b8:	6a3b      	ldr	r3, [r7, #32]
 800e6ba:	429a      	cmp	r2, r3
 800e6bc:	d901      	bls.n	800e6c2 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800e6be:	2301      	movs	r3, #1
 800e6c0:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	69fa      	ldr	r2, [r7, #28]
 800e6c6:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800e6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d006      	beq.n	800e6dc <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800e6ce:	69fa      	ldr	r2, [r7, #28]
 800e6d0:	6a3b      	ldr	r3, [r7, #32]
 800e6d2:	1ad3      	subs	r3, r2, r3
 800e6d4:	2100      	movs	r1, #0
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	f000 fe3e 	bl	800f358 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800e6dc:	f000 f8bc 	bl	800e858 <xTaskResumeAll>
 800e6e0:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e6e2:	69bb      	ldr	r3, [r7, #24]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d107      	bne.n	800e6f8 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 800e6e8:	4b07      	ldr	r3, [pc, #28]	; (800e708 <vTaskDelayUntil+0xf0>)
 800e6ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e6ee:	601a      	str	r2, [r3, #0]
 800e6f0:	f3bf 8f4f 	dsb	sy
 800e6f4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e6f8:	bf00      	nop
 800e6fa:	3728      	adds	r7, #40	; 0x28
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	bd80      	pop	{r7, pc}
 800e700:	20001124 	.word	0x20001124
 800e704:	20001100 	.word	0x20001100
 800e708:	e000ed04 	.word	0xe000ed04

0800e70c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e70c:	b580      	push	{r7, lr}
 800e70e:	b084      	sub	sp, #16
 800e710:	af00      	add	r7, sp, #0
 800e712:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e714:	2300      	movs	r3, #0
 800e716:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d016      	beq.n	800e74c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e71e:	4b13      	ldr	r3, [pc, #76]	; (800e76c <vTaskDelay+0x60>)
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	2b00      	cmp	r3, #0
 800e724:	d009      	beq.n	800e73a <vTaskDelay+0x2e>
 800e726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e72a:	f383 8811 	msr	BASEPRI, r3
 800e72e:	f3bf 8f6f 	isb	sy
 800e732:	f3bf 8f4f 	dsb	sy
 800e736:	60bb      	str	r3, [r7, #8]
 800e738:	e7fe      	b.n	800e738 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800e73a:	f000 f87f 	bl	800e83c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e73e:	2100      	movs	r1, #0
 800e740:	6878      	ldr	r0, [r7, #4]
 800e742:	f000 fe09 	bl	800f358 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e746:	f000 f887 	bl	800e858 <xTaskResumeAll>
 800e74a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d107      	bne.n	800e762 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800e752:	4b07      	ldr	r3, [pc, #28]	; (800e770 <vTaskDelay+0x64>)
 800e754:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e758:	601a      	str	r2, [r3, #0]
 800e75a:	f3bf 8f4f 	dsb	sy
 800e75e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e762:	bf00      	nop
 800e764:	3710      	adds	r7, #16
 800e766:	46bd      	mov	sp, r7
 800e768:	bd80      	pop	{r7, pc}
 800e76a:	bf00      	nop
 800e76c:	20001124 	.word	0x20001124
 800e770:	e000ed04 	.word	0xe000ed04

0800e774 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e774:	b580      	push	{r7, lr}
 800e776:	b08a      	sub	sp, #40	; 0x28
 800e778:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e77a:	2300      	movs	r3, #0
 800e77c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e77e:	2300      	movs	r3, #0
 800e780:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e782:	463a      	mov	r2, r7
 800e784:	1d39      	adds	r1, r7, #4
 800e786:	f107 0308 	add.w	r3, r7, #8
 800e78a:	4618      	mov	r0, r3
 800e78c:	f7fe ff0a 	bl	800d5a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e790:	6839      	ldr	r1, [r7, #0]
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	68ba      	ldr	r2, [r7, #8]
 800e796:	9202      	str	r2, [sp, #8]
 800e798:	9301      	str	r3, [sp, #4]
 800e79a:	2300      	movs	r3, #0
 800e79c:	9300      	str	r3, [sp, #0]
 800e79e:	2300      	movs	r3, #0
 800e7a0:	460a      	mov	r2, r1
 800e7a2:	4920      	ldr	r1, [pc, #128]	; (800e824 <vTaskStartScheduler+0xb0>)
 800e7a4:	4820      	ldr	r0, [pc, #128]	; (800e828 <vTaskStartScheduler+0xb4>)
 800e7a6:	f7ff fd99 	bl	800e2dc <xTaskCreateStatic>
 800e7aa:	4602      	mov	r2, r0
 800e7ac:	4b1f      	ldr	r3, [pc, #124]	; (800e82c <vTaskStartScheduler+0xb8>)
 800e7ae:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e7b0:	4b1e      	ldr	r3, [pc, #120]	; (800e82c <vTaskStartScheduler+0xb8>)
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d002      	beq.n	800e7be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e7b8:	2301      	movs	r3, #1
 800e7ba:	617b      	str	r3, [r7, #20]
 800e7bc:	e001      	b.n	800e7c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e7be:	2300      	movs	r3, #0
 800e7c0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e7c2:	697b      	ldr	r3, [r7, #20]
 800e7c4:	2b01      	cmp	r3, #1
 800e7c6:	d102      	bne.n	800e7ce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e7c8:	f000 fe1a 	bl	800f400 <xTimerCreateTimerTask>
 800e7cc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e7ce:	697b      	ldr	r3, [r7, #20]
 800e7d0:	2b01      	cmp	r3, #1
 800e7d2:	d115      	bne.n	800e800 <vTaskStartScheduler+0x8c>
 800e7d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7d8:	f383 8811 	msr	BASEPRI, r3
 800e7dc:	f3bf 8f6f 	isb	sy
 800e7e0:	f3bf 8f4f 	dsb	sy
 800e7e4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e7e6:	4b12      	ldr	r3, [pc, #72]	; (800e830 <vTaskStartScheduler+0xbc>)
 800e7e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e7ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e7ee:	4b11      	ldr	r3, [pc, #68]	; (800e834 <vTaskStartScheduler+0xc0>)
 800e7f0:	2201      	movs	r2, #1
 800e7f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e7f4:	4b10      	ldr	r3, [pc, #64]	; (800e838 <vTaskStartScheduler+0xc4>)
 800e7f6:	2200      	movs	r2, #0
 800e7f8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e7fa:	f001 f9d1 	bl	800fba0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e7fe:	e00d      	b.n	800e81c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e800:	697b      	ldr	r3, [r7, #20]
 800e802:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e806:	d109      	bne.n	800e81c <vTaskStartScheduler+0xa8>
 800e808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e80c:	f383 8811 	msr	BASEPRI, r3
 800e810:	f3bf 8f6f 	isb	sy
 800e814:	f3bf 8f4f 	dsb	sy
 800e818:	60fb      	str	r3, [r7, #12]
 800e81a:	e7fe      	b.n	800e81a <vTaskStartScheduler+0xa6>
}
 800e81c:	bf00      	nop
 800e81e:	3718      	adds	r7, #24
 800e820:	46bd      	mov	sp, r7
 800e822:	bd80      	pop	{r7, pc}
 800e824:	08016f64 	.word	0x08016f64
 800e828:	0800ee3d 	.word	0x0800ee3d
 800e82c:	20001120 	.word	0x20001120
 800e830:	2000111c 	.word	0x2000111c
 800e834:	20001108 	.word	0x20001108
 800e838:	20001100 	.word	0x20001100

0800e83c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e83c:	b480      	push	{r7}
 800e83e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800e840:	4b04      	ldr	r3, [pc, #16]	; (800e854 <vTaskSuspendAll+0x18>)
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	3301      	adds	r3, #1
 800e846:	4a03      	ldr	r2, [pc, #12]	; (800e854 <vTaskSuspendAll+0x18>)
 800e848:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800e84a:	bf00      	nop
 800e84c:	46bd      	mov	sp, r7
 800e84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e852:	4770      	bx	lr
 800e854:	20001124 	.word	0x20001124

0800e858 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e858:	b580      	push	{r7, lr}
 800e85a:	b084      	sub	sp, #16
 800e85c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e85e:	2300      	movs	r3, #0
 800e860:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e862:	2300      	movs	r3, #0
 800e864:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e866:	4b41      	ldr	r3, [pc, #260]	; (800e96c <xTaskResumeAll+0x114>)
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d109      	bne.n	800e882 <xTaskResumeAll+0x2a>
 800e86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e872:	f383 8811 	msr	BASEPRI, r3
 800e876:	f3bf 8f6f 	isb	sy
 800e87a:	f3bf 8f4f 	dsb	sy
 800e87e:	603b      	str	r3, [r7, #0]
 800e880:	e7fe      	b.n	800e880 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e882:	f001 fa2b 	bl	800fcdc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e886:	4b39      	ldr	r3, [pc, #228]	; (800e96c <xTaskResumeAll+0x114>)
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	3b01      	subs	r3, #1
 800e88c:	4a37      	ldr	r2, [pc, #220]	; (800e96c <xTaskResumeAll+0x114>)
 800e88e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e890:	4b36      	ldr	r3, [pc, #216]	; (800e96c <xTaskResumeAll+0x114>)
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d162      	bne.n	800e95e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e898:	4b35      	ldr	r3, [pc, #212]	; (800e970 <xTaskResumeAll+0x118>)
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d05e      	beq.n	800e95e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e8a0:	e02f      	b.n	800e902 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e8a2:	4b34      	ldr	r3, [pc, #208]	; (800e974 <xTaskResumeAll+0x11c>)
 800e8a4:	68db      	ldr	r3, [r3, #12]
 800e8a6:	68db      	ldr	r3, [r3, #12]
 800e8a8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	3318      	adds	r3, #24
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	f7fe ff36 	bl	800d720 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	3304      	adds	r3, #4
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	f7fe ff31 	bl	800d720 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8c2:	4b2d      	ldr	r3, [pc, #180]	; (800e978 <xTaskResumeAll+0x120>)
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	429a      	cmp	r2, r3
 800e8c8:	d903      	bls.n	800e8d2 <xTaskResumeAll+0x7a>
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8ce:	4a2a      	ldr	r2, [pc, #168]	; (800e978 <xTaskResumeAll+0x120>)
 800e8d0:	6013      	str	r3, [r2, #0]
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8d6:	4613      	mov	r3, r2
 800e8d8:	009b      	lsls	r3, r3, #2
 800e8da:	4413      	add	r3, r2
 800e8dc:	009b      	lsls	r3, r3, #2
 800e8de:	4a27      	ldr	r2, [pc, #156]	; (800e97c <xTaskResumeAll+0x124>)
 800e8e0:	441a      	add	r2, r3
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	3304      	adds	r3, #4
 800e8e6:	4619      	mov	r1, r3
 800e8e8:	4610      	mov	r0, r2
 800e8ea:	f7fe febc 	bl	800d666 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8f2:	4b23      	ldr	r3, [pc, #140]	; (800e980 <xTaskResumeAll+0x128>)
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8f8:	429a      	cmp	r2, r3
 800e8fa:	d302      	bcc.n	800e902 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800e8fc:	4b21      	ldr	r3, [pc, #132]	; (800e984 <xTaskResumeAll+0x12c>)
 800e8fe:	2201      	movs	r2, #1
 800e900:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e902:	4b1c      	ldr	r3, [pc, #112]	; (800e974 <xTaskResumeAll+0x11c>)
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	2b00      	cmp	r3, #0
 800e908:	d1cb      	bne.n	800e8a2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d001      	beq.n	800e914 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e910:	f000 fb46 	bl	800efa0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800e914:	4b1c      	ldr	r3, [pc, #112]	; (800e988 <xTaskResumeAll+0x130>)
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d010      	beq.n	800e942 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e920:	f000 f846 	bl	800e9b0 <xTaskIncrementTick>
 800e924:	4603      	mov	r3, r0
 800e926:	2b00      	cmp	r3, #0
 800e928:	d002      	beq.n	800e930 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800e92a:	4b16      	ldr	r3, [pc, #88]	; (800e984 <xTaskResumeAll+0x12c>)
 800e92c:	2201      	movs	r2, #1
 800e92e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	3b01      	subs	r3, #1
 800e934:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d1f1      	bne.n	800e920 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800e93c:	4b12      	ldr	r3, [pc, #72]	; (800e988 <xTaskResumeAll+0x130>)
 800e93e:	2200      	movs	r2, #0
 800e940:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e942:	4b10      	ldr	r3, [pc, #64]	; (800e984 <xTaskResumeAll+0x12c>)
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d009      	beq.n	800e95e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e94a:	2301      	movs	r3, #1
 800e94c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e94e:	4b0f      	ldr	r3, [pc, #60]	; (800e98c <xTaskResumeAll+0x134>)
 800e950:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e954:	601a      	str	r2, [r3, #0]
 800e956:	f3bf 8f4f 	dsb	sy
 800e95a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e95e:	f001 f9eb 	bl	800fd38 <vPortExitCritical>

	return xAlreadyYielded;
 800e962:	68bb      	ldr	r3, [r7, #8]
}
 800e964:	4618      	mov	r0, r3
 800e966:	3710      	adds	r7, #16
 800e968:	46bd      	mov	sp, r7
 800e96a:	bd80      	pop	{r7, pc}
 800e96c:	20001124 	.word	0x20001124
 800e970:	200010fc 	.word	0x200010fc
 800e974:	200010bc 	.word	0x200010bc
 800e978:	20001104 	.word	0x20001104
 800e97c:	20000c2c 	.word	0x20000c2c
 800e980:	20000c28 	.word	0x20000c28
 800e984:	20001110 	.word	0x20001110
 800e988:	2000110c 	.word	0x2000110c
 800e98c:	e000ed04 	.word	0xe000ed04

0800e990 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e990:	b480      	push	{r7}
 800e992:	b083      	sub	sp, #12
 800e994:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e996:	4b05      	ldr	r3, [pc, #20]	; (800e9ac <xTaskGetTickCount+0x1c>)
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e99c:	687b      	ldr	r3, [r7, #4]
}
 800e99e:	4618      	mov	r0, r3
 800e9a0:	370c      	adds	r7, #12
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a8:	4770      	bx	lr
 800e9aa:	bf00      	nop
 800e9ac:	20001100 	.word	0x20001100

0800e9b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	b086      	sub	sp, #24
 800e9b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e9ba:	4b4e      	ldr	r3, [pc, #312]	; (800eaf4 <xTaskIncrementTick+0x144>)
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	f040 8088 	bne.w	800ead4 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e9c4:	4b4c      	ldr	r3, [pc, #304]	; (800eaf8 <xTaskIncrementTick+0x148>)
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	3301      	adds	r3, #1
 800e9ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e9cc:	4a4a      	ldr	r2, [pc, #296]	; (800eaf8 <xTaskIncrementTick+0x148>)
 800e9ce:	693b      	ldr	r3, [r7, #16]
 800e9d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e9d2:	693b      	ldr	r3, [r7, #16]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d11f      	bne.n	800ea18 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800e9d8:	4b48      	ldr	r3, [pc, #288]	; (800eafc <xTaskIncrementTick+0x14c>)
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d009      	beq.n	800e9f6 <xTaskIncrementTick+0x46>
 800e9e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9e6:	f383 8811 	msr	BASEPRI, r3
 800e9ea:	f3bf 8f6f 	isb	sy
 800e9ee:	f3bf 8f4f 	dsb	sy
 800e9f2:	603b      	str	r3, [r7, #0]
 800e9f4:	e7fe      	b.n	800e9f4 <xTaskIncrementTick+0x44>
 800e9f6:	4b41      	ldr	r3, [pc, #260]	; (800eafc <xTaskIncrementTick+0x14c>)
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	60fb      	str	r3, [r7, #12]
 800e9fc:	4b40      	ldr	r3, [pc, #256]	; (800eb00 <xTaskIncrementTick+0x150>)
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	4a3e      	ldr	r2, [pc, #248]	; (800eafc <xTaskIncrementTick+0x14c>)
 800ea02:	6013      	str	r3, [r2, #0]
 800ea04:	4a3e      	ldr	r2, [pc, #248]	; (800eb00 <xTaskIncrementTick+0x150>)
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	6013      	str	r3, [r2, #0]
 800ea0a:	4b3e      	ldr	r3, [pc, #248]	; (800eb04 <xTaskIncrementTick+0x154>)
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	3301      	adds	r3, #1
 800ea10:	4a3c      	ldr	r2, [pc, #240]	; (800eb04 <xTaskIncrementTick+0x154>)
 800ea12:	6013      	str	r3, [r2, #0]
 800ea14:	f000 fac4 	bl	800efa0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ea18:	4b3b      	ldr	r3, [pc, #236]	; (800eb08 <xTaskIncrementTick+0x158>)
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	693a      	ldr	r2, [r7, #16]
 800ea1e:	429a      	cmp	r2, r3
 800ea20:	d349      	bcc.n	800eab6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ea22:	4b36      	ldr	r3, [pc, #216]	; (800eafc <xTaskIncrementTick+0x14c>)
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d104      	bne.n	800ea36 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea2c:	4b36      	ldr	r3, [pc, #216]	; (800eb08 <xTaskIncrementTick+0x158>)
 800ea2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ea32:	601a      	str	r2, [r3, #0]
					break;
 800ea34:	e03f      	b.n	800eab6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea36:	4b31      	ldr	r3, [pc, #196]	; (800eafc <xTaskIncrementTick+0x14c>)
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	68db      	ldr	r3, [r3, #12]
 800ea3c:	68db      	ldr	r3, [r3, #12]
 800ea3e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ea40:	68bb      	ldr	r3, [r7, #8]
 800ea42:	685b      	ldr	r3, [r3, #4]
 800ea44:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ea46:	693a      	ldr	r2, [r7, #16]
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	429a      	cmp	r2, r3
 800ea4c:	d203      	bcs.n	800ea56 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ea4e:	4a2e      	ldr	r2, [pc, #184]	; (800eb08 <xTaskIncrementTick+0x158>)
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ea54:	e02f      	b.n	800eab6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ea56:	68bb      	ldr	r3, [r7, #8]
 800ea58:	3304      	adds	r3, #4
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	f7fe fe60 	bl	800d720 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ea60:	68bb      	ldr	r3, [r7, #8]
 800ea62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d004      	beq.n	800ea72 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ea68:	68bb      	ldr	r3, [r7, #8]
 800ea6a:	3318      	adds	r3, #24
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	f7fe fe57 	bl	800d720 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ea72:	68bb      	ldr	r3, [r7, #8]
 800ea74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea76:	4b25      	ldr	r3, [pc, #148]	; (800eb0c <xTaskIncrementTick+0x15c>)
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	429a      	cmp	r2, r3
 800ea7c:	d903      	bls.n	800ea86 <xTaskIncrementTick+0xd6>
 800ea7e:	68bb      	ldr	r3, [r7, #8]
 800ea80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea82:	4a22      	ldr	r2, [pc, #136]	; (800eb0c <xTaskIncrementTick+0x15c>)
 800ea84:	6013      	str	r3, [r2, #0]
 800ea86:	68bb      	ldr	r3, [r7, #8]
 800ea88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea8a:	4613      	mov	r3, r2
 800ea8c:	009b      	lsls	r3, r3, #2
 800ea8e:	4413      	add	r3, r2
 800ea90:	009b      	lsls	r3, r3, #2
 800ea92:	4a1f      	ldr	r2, [pc, #124]	; (800eb10 <xTaskIncrementTick+0x160>)
 800ea94:	441a      	add	r2, r3
 800ea96:	68bb      	ldr	r3, [r7, #8]
 800ea98:	3304      	adds	r3, #4
 800ea9a:	4619      	mov	r1, r3
 800ea9c:	4610      	mov	r0, r2
 800ea9e:	f7fe fde2 	bl	800d666 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800eaa2:	68bb      	ldr	r3, [r7, #8]
 800eaa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eaa6:	4b1b      	ldr	r3, [pc, #108]	; (800eb14 <xTaskIncrementTick+0x164>)
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eaac:	429a      	cmp	r2, r3
 800eaae:	d3b8      	bcc.n	800ea22 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800eab0:	2301      	movs	r3, #1
 800eab2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800eab4:	e7b5      	b.n	800ea22 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800eab6:	4b17      	ldr	r3, [pc, #92]	; (800eb14 <xTaskIncrementTick+0x164>)
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eabc:	4914      	ldr	r1, [pc, #80]	; (800eb10 <xTaskIncrementTick+0x160>)
 800eabe:	4613      	mov	r3, r2
 800eac0:	009b      	lsls	r3, r3, #2
 800eac2:	4413      	add	r3, r2
 800eac4:	009b      	lsls	r3, r3, #2
 800eac6:	440b      	add	r3, r1
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	2b01      	cmp	r3, #1
 800eacc:	d907      	bls.n	800eade <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800eace:	2301      	movs	r3, #1
 800ead0:	617b      	str	r3, [r7, #20]
 800ead2:	e004      	b.n	800eade <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800ead4:	4b10      	ldr	r3, [pc, #64]	; (800eb18 <xTaskIncrementTick+0x168>)
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	3301      	adds	r3, #1
 800eada:	4a0f      	ldr	r2, [pc, #60]	; (800eb18 <xTaskIncrementTick+0x168>)
 800eadc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800eade:	4b0f      	ldr	r3, [pc, #60]	; (800eb1c <xTaskIncrementTick+0x16c>)
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d001      	beq.n	800eaea <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800eae6:	2301      	movs	r3, #1
 800eae8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800eaea:	697b      	ldr	r3, [r7, #20]
}
 800eaec:	4618      	mov	r0, r3
 800eaee:	3718      	adds	r7, #24
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	bd80      	pop	{r7, pc}
 800eaf4:	20001124 	.word	0x20001124
 800eaf8:	20001100 	.word	0x20001100
 800eafc:	200010b4 	.word	0x200010b4
 800eb00:	200010b8 	.word	0x200010b8
 800eb04:	20001114 	.word	0x20001114
 800eb08:	2000111c 	.word	0x2000111c
 800eb0c:	20001104 	.word	0x20001104
 800eb10:	20000c2c 	.word	0x20000c2c
 800eb14:	20000c28 	.word	0x20000c28
 800eb18:	2000110c 	.word	0x2000110c
 800eb1c:	20001110 	.word	0x20001110

0800eb20 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800eb20:	b480      	push	{r7}
 800eb22:	b085      	sub	sp, #20
 800eb24:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800eb26:	4b27      	ldr	r3, [pc, #156]	; (800ebc4 <vTaskSwitchContext+0xa4>)
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d003      	beq.n	800eb36 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800eb2e:	4b26      	ldr	r3, [pc, #152]	; (800ebc8 <vTaskSwitchContext+0xa8>)
 800eb30:	2201      	movs	r2, #1
 800eb32:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800eb34:	e040      	b.n	800ebb8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800eb36:	4b24      	ldr	r3, [pc, #144]	; (800ebc8 <vTaskSwitchContext+0xa8>)
 800eb38:	2200      	movs	r2, #0
 800eb3a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb3c:	4b23      	ldr	r3, [pc, #140]	; (800ebcc <vTaskSwitchContext+0xac>)
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	60fb      	str	r3, [r7, #12]
 800eb42:	e00f      	b.n	800eb64 <vTaskSwitchContext+0x44>
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d109      	bne.n	800eb5e <vTaskSwitchContext+0x3e>
 800eb4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb4e:	f383 8811 	msr	BASEPRI, r3
 800eb52:	f3bf 8f6f 	isb	sy
 800eb56:	f3bf 8f4f 	dsb	sy
 800eb5a:	607b      	str	r3, [r7, #4]
 800eb5c:	e7fe      	b.n	800eb5c <vTaskSwitchContext+0x3c>
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	3b01      	subs	r3, #1
 800eb62:	60fb      	str	r3, [r7, #12]
 800eb64:	491a      	ldr	r1, [pc, #104]	; (800ebd0 <vTaskSwitchContext+0xb0>)
 800eb66:	68fa      	ldr	r2, [r7, #12]
 800eb68:	4613      	mov	r3, r2
 800eb6a:	009b      	lsls	r3, r3, #2
 800eb6c:	4413      	add	r3, r2
 800eb6e:	009b      	lsls	r3, r3, #2
 800eb70:	440b      	add	r3, r1
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d0e5      	beq.n	800eb44 <vTaskSwitchContext+0x24>
 800eb78:	68fa      	ldr	r2, [r7, #12]
 800eb7a:	4613      	mov	r3, r2
 800eb7c:	009b      	lsls	r3, r3, #2
 800eb7e:	4413      	add	r3, r2
 800eb80:	009b      	lsls	r3, r3, #2
 800eb82:	4a13      	ldr	r2, [pc, #76]	; (800ebd0 <vTaskSwitchContext+0xb0>)
 800eb84:	4413      	add	r3, r2
 800eb86:	60bb      	str	r3, [r7, #8]
 800eb88:	68bb      	ldr	r3, [r7, #8]
 800eb8a:	685b      	ldr	r3, [r3, #4]
 800eb8c:	685a      	ldr	r2, [r3, #4]
 800eb8e:	68bb      	ldr	r3, [r7, #8]
 800eb90:	605a      	str	r2, [r3, #4]
 800eb92:	68bb      	ldr	r3, [r7, #8]
 800eb94:	685a      	ldr	r2, [r3, #4]
 800eb96:	68bb      	ldr	r3, [r7, #8]
 800eb98:	3308      	adds	r3, #8
 800eb9a:	429a      	cmp	r2, r3
 800eb9c:	d104      	bne.n	800eba8 <vTaskSwitchContext+0x88>
 800eb9e:	68bb      	ldr	r3, [r7, #8]
 800eba0:	685b      	ldr	r3, [r3, #4]
 800eba2:	685a      	ldr	r2, [r3, #4]
 800eba4:	68bb      	ldr	r3, [r7, #8]
 800eba6:	605a      	str	r2, [r3, #4]
 800eba8:	68bb      	ldr	r3, [r7, #8]
 800ebaa:	685b      	ldr	r3, [r3, #4]
 800ebac:	68db      	ldr	r3, [r3, #12]
 800ebae:	4a09      	ldr	r2, [pc, #36]	; (800ebd4 <vTaskSwitchContext+0xb4>)
 800ebb0:	6013      	str	r3, [r2, #0]
 800ebb2:	4a06      	ldr	r2, [pc, #24]	; (800ebcc <vTaskSwitchContext+0xac>)
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	6013      	str	r3, [r2, #0]
}
 800ebb8:	bf00      	nop
 800ebba:	3714      	adds	r7, #20
 800ebbc:	46bd      	mov	sp, r7
 800ebbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc2:	4770      	bx	lr
 800ebc4:	20001124 	.word	0x20001124
 800ebc8:	20001110 	.word	0x20001110
 800ebcc:	20001104 	.word	0x20001104
 800ebd0:	20000c2c 	.word	0x20000c2c
 800ebd4:	20000c28 	.word	0x20000c28

0800ebd8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b084      	sub	sp, #16
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
 800ebe0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d109      	bne.n	800ebfc <vTaskPlaceOnEventList+0x24>
 800ebe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebec:	f383 8811 	msr	BASEPRI, r3
 800ebf0:	f3bf 8f6f 	isb	sy
 800ebf4:	f3bf 8f4f 	dsb	sy
 800ebf8:	60fb      	str	r3, [r7, #12]
 800ebfa:	e7fe      	b.n	800ebfa <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ebfc:	4b07      	ldr	r3, [pc, #28]	; (800ec1c <vTaskPlaceOnEventList+0x44>)
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	3318      	adds	r3, #24
 800ec02:	4619      	mov	r1, r3
 800ec04:	6878      	ldr	r0, [r7, #4]
 800ec06:	f7fe fd52 	bl	800d6ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ec0a:	2101      	movs	r1, #1
 800ec0c:	6838      	ldr	r0, [r7, #0]
 800ec0e:	f000 fba3 	bl	800f358 <prvAddCurrentTaskToDelayedList>
}
 800ec12:	bf00      	nop
 800ec14:	3710      	adds	r7, #16
 800ec16:	46bd      	mov	sp, r7
 800ec18:	bd80      	pop	{r7, pc}
 800ec1a:	bf00      	nop
 800ec1c:	20000c28 	.word	0x20000c28

0800ec20 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ec20:	b580      	push	{r7, lr}
 800ec22:	b086      	sub	sp, #24
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	60f8      	str	r0, [r7, #12]
 800ec28:	60b9      	str	r1, [r7, #8]
 800ec2a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d109      	bne.n	800ec46 <vTaskPlaceOnEventListRestricted+0x26>
 800ec32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec36:	f383 8811 	msr	BASEPRI, r3
 800ec3a:	f3bf 8f6f 	isb	sy
 800ec3e:	f3bf 8f4f 	dsb	sy
 800ec42:	617b      	str	r3, [r7, #20]
 800ec44:	e7fe      	b.n	800ec44 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ec46:	4b0a      	ldr	r3, [pc, #40]	; (800ec70 <vTaskPlaceOnEventListRestricted+0x50>)
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	3318      	adds	r3, #24
 800ec4c:	4619      	mov	r1, r3
 800ec4e:	68f8      	ldr	r0, [r7, #12]
 800ec50:	f7fe fd09 	bl	800d666 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d002      	beq.n	800ec60 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800ec5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ec5e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ec60:	6879      	ldr	r1, [r7, #4]
 800ec62:	68b8      	ldr	r0, [r7, #8]
 800ec64:	f000 fb78 	bl	800f358 <prvAddCurrentTaskToDelayedList>
	}
 800ec68:	bf00      	nop
 800ec6a:	3718      	adds	r7, #24
 800ec6c:	46bd      	mov	sp, r7
 800ec6e:	bd80      	pop	{r7, pc}
 800ec70:	20000c28 	.word	0x20000c28

0800ec74 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ec74:	b580      	push	{r7, lr}
 800ec76:	b086      	sub	sp, #24
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	68db      	ldr	r3, [r3, #12]
 800ec80:	68db      	ldr	r3, [r3, #12]
 800ec82:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ec84:	693b      	ldr	r3, [r7, #16]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d109      	bne.n	800ec9e <xTaskRemoveFromEventList+0x2a>
 800ec8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec8e:	f383 8811 	msr	BASEPRI, r3
 800ec92:	f3bf 8f6f 	isb	sy
 800ec96:	f3bf 8f4f 	dsb	sy
 800ec9a:	60fb      	str	r3, [r7, #12]
 800ec9c:	e7fe      	b.n	800ec9c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ec9e:	693b      	ldr	r3, [r7, #16]
 800eca0:	3318      	adds	r3, #24
 800eca2:	4618      	mov	r0, r3
 800eca4:	f7fe fd3c 	bl	800d720 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eca8:	4b1d      	ldr	r3, [pc, #116]	; (800ed20 <xTaskRemoveFromEventList+0xac>)
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d11d      	bne.n	800ecec <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ecb0:	693b      	ldr	r3, [r7, #16]
 800ecb2:	3304      	adds	r3, #4
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	f7fe fd33 	bl	800d720 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ecba:	693b      	ldr	r3, [r7, #16]
 800ecbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecbe:	4b19      	ldr	r3, [pc, #100]	; (800ed24 <xTaskRemoveFromEventList+0xb0>)
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	429a      	cmp	r2, r3
 800ecc4:	d903      	bls.n	800ecce <xTaskRemoveFromEventList+0x5a>
 800ecc6:	693b      	ldr	r3, [r7, #16]
 800ecc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecca:	4a16      	ldr	r2, [pc, #88]	; (800ed24 <xTaskRemoveFromEventList+0xb0>)
 800eccc:	6013      	str	r3, [r2, #0]
 800ecce:	693b      	ldr	r3, [r7, #16]
 800ecd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecd2:	4613      	mov	r3, r2
 800ecd4:	009b      	lsls	r3, r3, #2
 800ecd6:	4413      	add	r3, r2
 800ecd8:	009b      	lsls	r3, r3, #2
 800ecda:	4a13      	ldr	r2, [pc, #76]	; (800ed28 <xTaskRemoveFromEventList+0xb4>)
 800ecdc:	441a      	add	r2, r3
 800ecde:	693b      	ldr	r3, [r7, #16]
 800ece0:	3304      	adds	r3, #4
 800ece2:	4619      	mov	r1, r3
 800ece4:	4610      	mov	r0, r2
 800ece6:	f7fe fcbe 	bl	800d666 <vListInsertEnd>
 800ecea:	e005      	b.n	800ecf8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ecec:	693b      	ldr	r3, [r7, #16]
 800ecee:	3318      	adds	r3, #24
 800ecf0:	4619      	mov	r1, r3
 800ecf2:	480e      	ldr	r0, [pc, #56]	; (800ed2c <xTaskRemoveFromEventList+0xb8>)
 800ecf4:	f7fe fcb7 	bl	800d666 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ecf8:	693b      	ldr	r3, [r7, #16]
 800ecfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecfc:	4b0c      	ldr	r3, [pc, #48]	; (800ed30 <xTaskRemoveFromEventList+0xbc>)
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed02:	429a      	cmp	r2, r3
 800ed04:	d905      	bls.n	800ed12 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ed06:	2301      	movs	r3, #1
 800ed08:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ed0a:	4b0a      	ldr	r3, [pc, #40]	; (800ed34 <xTaskRemoveFromEventList+0xc0>)
 800ed0c:	2201      	movs	r2, #1
 800ed0e:	601a      	str	r2, [r3, #0]
 800ed10:	e001      	b.n	800ed16 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800ed12:	2300      	movs	r3, #0
 800ed14:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ed16:	697b      	ldr	r3, [r7, #20]
}
 800ed18:	4618      	mov	r0, r3
 800ed1a:	3718      	adds	r7, #24
 800ed1c:	46bd      	mov	sp, r7
 800ed1e:	bd80      	pop	{r7, pc}
 800ed20:	20001124 	.word	0x20001124
 800ed24:	20001104 	.word	0x20001104
 800ed28:	20000c2c 	.word	0x20000c2c
 800ed2c:	200010bc 	.word	0x200010bc
 800ed30:	20000c28 	.word	0x20000c28
 800ed34:	20001110 	.word	0x20001110

0800ed38 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ed38:	b480      	push	{r7}
 800ed3a:	b083      	sub	sp, #12
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ed40:	4b06      	ldr	r3, [pc, #24]	; (800ed5c <vTaskInternalSetTimeOutState+0x24>)
 800ed42:	681a      	ldr	r2, [r3, #0]
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ed48:	4b05      	ldr	r3, [pc, #20]	; (800ed60 <vTaskInternalSetTimeOutState+0x28>)
 800ed4a:	681a      	ldr	r2, [r3, #0]
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	605a      	str	r2, [r3, #4]
}
 800ed50:	bf00      	nop
 800ed52:	370c      	adds	r7, #12
 800ed54:	46bd      	mov	sp, r7
 800ed56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed5a:	4770      	bx	lr
 800ed5c:	20001114 	.word	0x20001114
 800ed60:	20001100 	.word	0x20001100

0800ed64 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ed64:	b580      	push	{r7, lr}
 800ed66:	b088      	sub	sp, #32
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	6078      	str	r0, [r7, #4]
 800ed6c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d109      	bne.n	800ed88 <xTaskCheckForTimeOut+0x24>
 800ed74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed78:	f383 8811 	msr	BASEPRI, r3
 800ed7c:	f3bf 8f6f 	isb	sy
 800ed80:	f3bf 8f4f 	dsb	sy
 800ed84:	613b      	str	r3, [r7, #16]
 800ed86:	e7fe      	b.n	800ed86 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800ed88:	683b      	ldr	r3, [r7, #0]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d109      	bne.n	800eda2 <xTaskCheckForTimeOut+0x3e>
 800ed8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed92:	f383 8811 	msr	BASEPRI, r3
 800ed96:	f3bf 8f6f 	isb	sy
 800ed9a:	f3bf 8f4f 	dsb	sy
 800ed9e:	60fb      	str	r3, [r7, #12]
 800eda0:	e7fe      	b.n	800eda0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800eda2:	f000 ff9b 	bl	800fcdc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800eda6:	4b1d      	ldr	r3, [pc, #116]	; (800ee1c <xTaskCheckForTimeOut+0xb8>)
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	685b      	ldr	r3, [r3, #4]
 800edb0:	69ba      	ldr	r2, [r7, #24]
 800edb2:	1ad3      	subs	r3, r2, r3
 800edb4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800edb6:	683b      	ldr	r3, [r7, #0]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800edbe:	d102      	bne.n	800edc6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800edc0:	2300      	movs	r3, #0
 800edc2:	61fb      	str	r3, [r7, #28]
 800edc4:	e023      	b.n	800ee0e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	681a      	ldr	r2, [r3, #0]
 800edca:	4b15      	ldr	r3, [pc, #84]	; (800ee20 <xTaskCheckForTimeOut+0xbc>)
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	429a      	cmp	r2, r3
 800edd0:	d007      	beq.n	800ede2 <xTaskCheckForTimeOut+0x7e>
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	685b      	ldr	r3, [r3, #4]
 800edd6:	69ba      	ldr	r2, [r7, #24]
 800edd8:	429a      	cmp	r2, r3
 800edda:	d302      	bcc.n	800ede2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800eddc:	2301      	movs	r3, #1
 800edde:	61fb      	str	r3, [r7, #28]
 800ede0:	e015      	b.n	800ee0e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ede2:	683b      	ldr	r3, [r7, #0]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	697a      	ldr	r2, [r7, #20]
 800ede8:	429a      	cmp	r2, r3
 800edea:	d20b      	bcs.n	800ee04 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800edec:	683b      	ldr	r3, [r7, #0]
 800edee:	681a      	ldr	r2, [r3, #0]
 800edf0:	697b      	ldr	r3, [r7, #20]
 800edf2:	1ad2      	subs	r2, r2, r3
 800edf4:	683b      	ldr	r3, [r7, #0]
 800edf6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800edf8:	6878      	ldr	r0, [r7, #4]
 800edfa:	f7ff ff9d 	bl	800ed38 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800edfe:	2300      	movs	r3, #0
 800ee00:	61fb      	str	r3, [r7, #28]
 800ee02:	e004      	b.n	800ee0e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800ee04:	683b      	ldr	r3, [r7, #0]
 800ee06:	2200      	movs	r2, #0
 800ee08:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ee0a:	2301      	movs	r3, #1
 800ee0c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ee0e:	f000 ff93 	bl	800fd38 <vPortExitCritical>

	return xReturn;
 800ee12:	69fb      	ldr	r3, [r7, #28]
}
 800ee14:	4618      	mov	r0, r3
 800ee16:	3720      	adds	r7, #32
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	bd80      	pop	{r7, pc}
 800ee1c:	20001100 	.word	0x20001100
 800ee20:	20001114 	.word	0x20001114

0800ee24 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ee24:	b480      	push	{r7}
 800ee26:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ee28:	4b03      	ldr	r3, [pc, #12]	; (800ee38 <vTaskMissedYield+0x14>)
 800ee2a:	2201      	movs	r2, #1
 800ee2c:	601a      	str	r2, [r3, #0]
}
 800ee2e:	bf00      	nop
 800ee30:	46bd      	mov	sp, r7
 800ee32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee36:	4770      	bx	lr
 800ee38:	20001110 	.word	0x20001110

0800ee3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ee3c:	b580      	push	{r7, lr}
 800ee3e:	b082      	sub	sp, #8
 800ee40:	af00      	add	r7, sp, #0
 800ee42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ee44:	f000 f852 	bl	800eeec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ee48:	4b06      	ldr	r3, [pc, #24]	; (800ee64 <prvIdleTask+0x28>)
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	2b01      	cmp	r3, #1
 800ee4e:	d9f9      	bls.n	800ee44 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ee50:	4b05      	ldr	r3, [pc, #20]	; (800ee68 <prvIdleTask+0x2c>)
 800ee52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee56:	601a      	str	r2, [r3, #0]
 800ee58:	f3bf 8f4f 	dsb	sy
 800ee5c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ee60:	e7f0      	b.n	800ee44 <prvIdleTask+0x8>
 800ee62:	bf00      	nop
 800ee64:	20000c2c 	.word	0x20000c2c
 800ee68:	e000ed04 	.word	0xe000ed04

0800ee6c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ee6c:	b580      	push	{r7, lr}
 800ee6e:	b082      	sub	sp, #8
 800ee70:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ee72:	2300      	movs	r3, #0
 800ee74:	607b      	str	r3, [r7, #4]
 800ee76:	e00c      	b.n	800ee92 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ee78:	687a      	ldr	r2, [r7, #4]
 800ee7a:	4613      	mov	r3, r2
 800ee7c:	009b      	lsls	r3, r3, #2
 800ee7e:	4413      	add	r3, r2
 800ee80:	009b      	lsls	r3, r3, #2
 800ee82:	4a12      	ldr	r2, [pc, #72]	; (800eecc <prvInitialiseTaskLists+0x60>)
 800ee84:	4413      	add	r3, r2
 800ee86:	4618      	mov	r0, r3
 800ee88:	f7fe fbc0 	bl	800d60c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	3301      	adds	r3, #1
 800ee90:	607b      	str	r3, [r7, #4]
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	2b37      	cmp	r3, #55	; 0x37
 800ee96:	d9ef      	bls.n	800ee78 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ee98:	480d      	ldr	r0, [pc, #52]	; (800eed0 <prvInitialiseTaskLists+0x64>)
 800ee9a:	f7fe fbb7 	bl	800d60c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ee9e:	480d      	ldr	r0, [pc, #52]	; (800eed4 <prvInitialiseTaskLists+0x68>)
 800eea0:	f7fe fbb4 	bl	800d60c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800eea4:	480c      	ldr	r0, [pc, #48]	; (800eed8 <prvInitialiseTaskLists+0x6c>)
 800eea6:	f7fe fbb1 	bl	800d60c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800eeaa:	480c      	ldr	r0, [pc, #48]	; (800eedc <prvInitialiseTaskLists+0x70>)
 800eeac:	f7fe fbae 	bl	800d60c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800eeb0:	480b      	ldr	r0, [pc, #44]	; (800eee0 <prvInitialiseTaskLists+0x74>)
 800eeb2:	f7fe fbab 	bl	800d60c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800eeb6:	4b0b      	ldr	r3, [pc, #44]	; (800eee4 <prvInitialiseTaskLists+0x78>)
 800eeb8:	4a05      	ldr	r2, [pc, #20]	; (800eed0 <prvInitialiseTaskLists+0x64>)
 800eeba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800eebc:	4b0a      	ldr	r3, [pc, #40]	; (800eee8 <prvInitialiseTaskLists+0x7c>)
 800eebe:	4a05      	ldr	r2, [pc, #20]	; (800eed4 <prvInitialiseTaskLists+0x68>)
 800eec0:	601a      	str	r2, [r3, #0]
}
 800eec2:	bf00      	nop
 800eec4:	3708      	adds	r7, #8
 800eec6:	46bd      	mov	sp, r7
 800eec8:	bd80      	pop	{r7, pc}
 800eeca:	bf00      	nop
 800eecc:	20000c2c 	.word	0x20000c2c
 800eed0:	2000108c 	.word	0x2000108c
 800eed4:	200010a0 	.word	0x200010a0
 800eed8:	200010bc 	.word	0x200010bc
 800eedc:	200010d0 	.word	0x200010d0
 800eee0:	200010e8 	.word	0x200010e8
 800eee4:	200010b4 	.word	0x200010b4
 800eee8:	200010b8 	.word	0x200010b8

0800eeec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800eeec:	b580      	push	{r7, lr}
 800eeee:	b082      	sub	sp, #8
 800eef0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800eef2:	e019      	b.n	800ef28 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800eef4:	f000 fef2 	bl	800fcdc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eef8:	4b0f      	ldr	r3, [pc, #60]	; (800ef38 <prvCheckTasksWaitingTermination+0x4c>)
 800eefa:	68db      	ldr	r3, [r3, #12]
 800eefc:	68db      	ldr	r3, [r3, #12]
 800eefe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	3304      	adds	r3, #4
 800ef04:	4618      	mov	r0, r3
 800ef06:	f7fe fc0b 	bl	800d720 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ef0a:	4b0c      	ldr	r3, [pc, #48]	; (800ef3c <prvCheckTasksWaitingTermination+0x50>)
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	3b01      	subs	r3, #1
 800ef10:	4a0a      	ldr	r2, [pc, #40]	; (800ef3c <prvCheckTasksWaitingTermination+0x50>)
 800ef12:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ef14:	4b0a      	ldr	r3, [pc, #40]	; (800ef40 <prvCheckTasksWaitingTermination+0x54>)
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	3b01      	subs	r3, #1
 800ef1a:	4a09      	ldr	r2, [pc, #36]	; (800ef40 <prvCheckTasksWaitingTermination+0x54>)
 800ef1c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ef1e:	f000 ff0b 	bl	800fd38 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ef22:	6878      	ldr	r0, [r7, #4]
 800ef24:	f000 f80e 	bl	800ef44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ef28:	4b05      	ldr	r3, [pc, #20]	; (800ef40 <prvCheckTasksWaitingTermination+0x54>)
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d1e1      	bne.n	800eef4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ef30:	bf00      	nop
 800ef32:	3708      	adds	r7, #8
 800ef34:	46bd      	mov	sp, r7
 800ef36:	bd80      	pop	{r7, pc}
 800ef38:	200010d0 	.word	0x200010d0
 800ef3c:	200010fc 	.word	0x200010fc
 800ef40:	200010e4 	.word	0x200010e4

0800ef44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ef44:	b580      	push	{r7, lr}
 800ef46:	b084      	sub	sp, #16
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d108      	bne.n	800ef68 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	f001 f89a 	bl	8010094 <vPortFree>
				vPortFree( pxTCB );
 800ef60:	6878      	ldr	r0, [r7, #4]
 800ef62:	f001 f897 	bl	8010094 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ef66:	e017      	b.n	800ef98 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ef6e:	2b01      	cmp	r3, #1
 800ef70:	d103      	bne.n	800ef7a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ef72:	6878      	ldr	r0, [r7, #4]
 800ef74:	f001 f88e 	bl	8010094 <vPortFree>
	}
 800ef78:	e00e      	b.n	800ef98 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ef80:	2b02      	cmp	r3, #2
 800ef82:	d009      	beq.n	800ef98 <prvDeleteTCB+0x54>
 800ef84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef88:	f383 8811 	msr	BASEPRI, r3
 800ef8c:	f3bf 8f6f 	isb	sy
 800ef90:	f3bf 8f4f 	dsb	sy
 800ef94:	60fb      	str	r3, [r7, #12]
 800ef96:	e7fe      	b.n	800ef96 <prvDeleteTCB+0x52>
	}
 800ef98:	bf00      	nop
 800ef9a:	3710      	adds	r7, #16
 800ef9c:	46bd      	mov	sp, r7
 800ef9e:	bd80      	pop	{r7, pc}

0800efa0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800efa0:	b480      	push	{r7}
 800efa2:	b083      	sub	sp, #12
 800efa4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800efa6:	4b0c      	ldr	r3, [pc, #48]	; (800efd8 <prvResetNextTaskUnblockTime+0x38>)
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	2b00      	cmp	r3, #0
 800efae:	d104      	bne.n	800efba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800efb0:	4b0a      	ldr	r3, [pc, #40]	; (800efdc <prvResetNextTaskUnblockTime+0x3c>)
 800efb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800efb6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800efb8:	e008      	b.n	800efcc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800efba:	4b07      	ldr	r3, [pc, #28]	; (800efd8 <prvResetNextTaskUnblockTime+0x38>)
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	68db      	ldr	r3, [r3, #12]
 800efc0:	68db      	ldr	r3, [r3, #12]
 800efc2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	685b      	ldr	r3, [r3, #4]
 800efc8:	4a04      	ldr	r2, [pc, #16]	; (800efdc <prvResetNextTaskUnblockTime+0x3c>)
 800efca:	6013      	str	r3, [r2, #0]
}
 800efcc:	bf00      	nop
 800efce:	370c      	adds	r7, #12
 800efd0:	46bd      	mov	sp, r7
 800efd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd6:	4770      	bx	lr
 800efd8:	200010b4 	.word	0x200010b4
 800efdc:	2000111c 	.word	0x2000111c

0800efe0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800efe0:	b480      	push	{r7}
 800efe2:	b083      	sub	sp, #12
 800efe4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800efe6:	4b0b      	ldr	r3, [pc, #44]	; (800f014 <xTaskGetSchedulerState+0x34>)
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	2b00      	cmp	r3, #0
 800efec:	d102      	bne.n	800eff4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800efee:	2301      	movs	r3, #1
 800eff0:	607b      	str	r3, [r7, #4]
 800eff2:	e008      	b.n	800f006 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eff4:	4b08      	ldr	r3, [pc, #32]	; (800f018 <xTaskGetSchedulerState+0x38>)
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d102      	bne.n	800f002 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800effc:	2302      	movs	r3, #2
 800effe:	607b      	str	r3, [r7, #4]
 800f000:	e001      	b.n	800f006 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f002:	2300      	movs	r3, #0
 800f004:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f006:	687b      	ldr	r3, [r7, #4]
	}
 800f008:	4618      	mov	r0, r3
 800f00a:	370c      	adds	r7, #12
 800f00c:	46bd      	mov	sp, r7
 800f00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f012:	4770      	bx	lr
 800f014:	20001108 	.word	0x20001108
 800f018:	20001124 	.word	0x20001124

0800f01c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f01c:	b580      	push	{r7, lr}
 800f01e:	b086      	sub	sp, #24
 800f020:	af00      	add	r7, sp, #0
 800f022:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f028:	2300      	movs	r3, #0
 800f02a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d054      	beq.n	800f0dc <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f032:	4b2d      	ldr	r3, [pc, #180]	; (800f0e8 <xTaskPriorityDisinherit+0xcc>)
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	693a      	ldr	r2, [r7, #16]
 800f038:	429a      	cmp	r2, r3
 800f03a:	d009      	beq.n	800f050 <xTaskPriorityDisinherit+0x34>
 800f03c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f040:	f383 8811 	msr	BASEPRI, r3
 800f044:	f3bf 8f6f 	isb	sy
 800f048:	f3bf 8f4f 	dsb	sy
 800f04c:	60fb      	str	r3, [r7, #12]
 800f04e:	e7fe      	b.n	800f04e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800f050:	693b      	ldr	r3, [r7, #16]
 800f052:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f054:	2b00      	cmp	r3, #0
 800f056:	d109      	bne.n	800f06c <xTaskPriorityDisinherit+0x50>
 800f058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f05c:	f383 8811 	msr	BASEPRI, r3
 800f060:	f3bf 8f6f 	isb	sy
 800f064:	f3bf 8f4f 	dsb	sy
 800f068:	60bb      	str	r3, [r7, #8]
 800f06a:	e7fe      	b.n	800f06a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800f06c:	693b      	ldr	r3, [r7, #16]
 800f06e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f070:	1e5a      	subs	r2, r3, #1
 800f072:	693b      	ldr	r3, [r7, #16]
 800f074:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f076:	693b      	ldr	r3, [r7, #16]
 800f078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f07a:	693b      	ldr	r3, [r7, #16]
 800f07c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f07e:	429a      	cmp	r2, r3
 800f080:	d02c      	beq.n	800f0dc <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f082:	693b      	ldr	r3, [r7, #16]
 800f084:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f086:	2b00      	cmp	r3, #0
 800f088:	d128      	bne.n	800f0dc <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f08a:	693b      	ldr	r3, [r7, #16]
 800f08c:	3304      	adds	r3, #4
 800f08e:	4618      	mov	r0, r3
 800f090:	f7fe fb46 	bl	800d720 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f094:	693b      	ldr	r3, [r7, #16]
 800f096:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f098:	693b      	ldr	r3, [r7, #16]
 800f09a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f09c:	693b      	ldr	r3, [r7, #16]
 800f09e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0a0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f0a4:	693b      	ldr	r3, [r7, #16]
 800f0a6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f0a8:	693b      	ldr	r3, [r7, #16]
 800f0aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0ac:	4b0f      	ldr	r3, [pc, #60]	; (800f0ec <xTaskPriorityDisinherit+0xd0>)
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	429a      	cmp	r2, r3
 800f0b2:	d903      	bls.n	800f0bc <xTaskPriorityDisinherit+0xa0>
 800f0b4:	693b      	ldr	r3, [r7, #16]
 800f0b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0b8:	4a0c      	ldr	r2, [pc, #48]	; (800f0ec <xTaskPriorityDisinherit+0xd0>)
 800f0ba:	6013      	str	r3, [r2, #0]
 800f0bc:	693b      	ldr	r3, [r7, #16]
 800f0be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0c0:	4613      	mov	r3, r2
 800f0c2:	009b      	lsls	r3, r3, #2
 800f0c4:	4413      	add	r3, r2
 800f0c6:	009b      	lsls	r3, r3, #2
 800f0c8:	4a09      	ldr	r2, [pc, #36]	; (800f0f0 <xTaskPriorityDisinherit+0xd4>)
 800f0ca:	441a      	add	r2, r3
 800f0cc:	693b      	ldr	r3, [r7, #16]
 800f0ce:	3304      	adds	r3, #4
 800f0d0:	4619      	mov	r1, r3
 800f0d2:	4610      	mov	r0, r2
 800f0d4:	f7fe fac7 	bl	800d666 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f0d8:	2301      	movs	r3, #1
 800f0da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f0dc:	697b      	ldr	r3, [r7, #20]
	}
 800f0de:	4618      	mov	r0, r3
 800f0e0:	3718      	adds	r7, #24
 800f0e2:	46bd      	mov	sp, r7
 800f0e4:	bd80      	pop	{r7, pc}
 800f0e6:	bf00      	nop
 800f0e8:	20000c28 	.word	0x20000c28
 800f0ec:	20001104 	.word	0x20001104
 800f0f0:	20000c2c 	.word	0x20000c2c

0800f0f4 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800f0f4:	b580      	push	{r7, lr}
 800f0f6:	b086      	sub	sp, #24
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	60f8      	str	r0, [r7, #12]
 800f0fc:	60b9      	str	r1, [r7, #8]
 800f0fe:	607a      	str	r2, [r7, #4]
 800f100:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800f102:	f000 fdeb 	bl	800fcdc <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800f106:	4b26      	ldr	r3, [pc, #152]	; (800f1a0 <xTaskNotifyWait+0xac>)
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800f10e:	b2db      	uxtb	r3, r3
 800f110:	2b02      	cmp	r3, #2
 800f112:	d01a      	beq.n	800f14a <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800f114:	4b22      	ldr	r3, [pc, #136]	; (800f1a0 <xTaskNotifyWait+0xac>)
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f11a:	68fa      	ldr	r2, [r7, #12]
 800f11c:	43d2      	mvns	r2, r2
 800f11e:	400a      	ands	r2, r1
 800f120:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800f122:	4b1f      	ldr	r3, [pc, #124]	; (800f1a0 <xTaskNotifyWait+0xac>)
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	2201      	movs	r2, #1
 800f128:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800f12c:	683b      	ldr	r3, [r7, #0]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d00b      	beq.n	800f14a <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f132:	2101      	movs	r1, #1
 800f134:	6838      	ldr	r0, [r7, #0]
 800f136:	f000 f90f 	bl	800f358 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800f13a:	4b1a      	ldr	r3, [pc, #104]	; (800f1a4 <xTaskNotifyWait+0xb0>)
 800f13c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f140:	601a      	str	r2, [r3, #0]
 800f142:	f3bf 8f4f 	dsb	sy
 800f146:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f14a:	f000 fdf5 	bl	800fd38 <vPortExitCritical>

		taskENTER_CRITICAL();
 800f14e:	f000 fdc5 	bl	800fcdc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d004      	beq.n	800f162 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800f158:	4b11      	ldr	r3, [pc, #68]	; (800f1a0 <xTaskNotifyWait+0xac>)
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800f162:	4b0f      	ldr	r3, [pc, #60]	; (800f1a0 <xTaskNotifyWait+0xac>)
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800f16a:	b2db      	uxtb	r3, r3
 800f16c:	2b02      	cmp	r3, #2
 800f16e:	d002      	beq.n	800f176 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800f170:	2300      	movs	r3, #0
 800f172:	617b      	str	r3, [r7, #20]
 800f174:	e008      	b.n	800f188 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800f176:	4b0a      	ldr	r3, [pc, #40]	; (800f1a0 <xTaskNotifyWait+0xac>)
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f17c:	68ba      	ldr	r2, [r7, #8]
 800f17e:	43d2      	mvns	r2, r2
 800f180:	400a      	ands	r2, r1
 800f182:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 800f184:	2301      	movs	r3, #1
 800f186:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f188:	4b05      	ldr	r3, [pc, #20]	; (800f1a0 <xTaskNotifyWait+0xac>)
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	2200      	movs	r2, #0
 800f18e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800f192:	f000 fdd1 	bl	800fd38 <vPortExitCritical>

		return xReturn;
 800f196:	697b      	ldr	r3, [r7, #20]
	}
 800f198:	4618      	mov	r0, r3
 800f19a:	3718      	adds	r7, #24
 800f19c:	46bd      	mov	sp, r7
 800f19e:	bd80      	pop	{r7, pc}
 800f1a0:	20000c28 	.word	0x20000c28
 800f1a4:	e000ed04 	.word	0xe000ed04

0800f1a8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800f1a8:	b580      	push	{r7, lr}
 800f1aa:	b08e      	sub	sp, #56	; 0x38
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	60f8      	str	r0, [r7, #12]
 800f1b0:	60b9      	str	r1, [r7, #8]
 800f1b2:	603b      	str	r3, [r7, #0]
 800f1b4:	4613      	mov	r3, r2
 800f1b6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800f1b8:	2301      	movs	r3, #1
 800f1ba:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d109      	bne.n	800f1d6 <xTaskGenericNotifyFromISR+0x2e>
 800f1c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1c6:	f383 8811 	msr	BASEPRI, r3
 800f1ca:	f3bf 8f6f 	isb	sy
 800f1ce:	f3bf 8f4f 	dsb	sy
 800f1d2:	627b      	str	r3, [r7, #36]	; 0x24
 800f1d4:	e7fe      	b.n	800f1d4 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f1d6:	f000 fe5d 	bl	800fe94 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800f1de:	f3ef 8211 	mrs	r2, BASEPRI
 800f1e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1e6:	f383 8811 	msr	BASEPRI, r3
 800f1ea:	f3bf 8f6f 	isb	sy
 800f1ee:	f3bf 8f4f 	dsb	sy
 800f1f2:	623a      	str	r2, [r7, #32]
 800f1f4:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800f1f6:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f1f8:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800f1fa:	683b      	ldr	r3, [r7, #0]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d003      	beq.n	800f208 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800f200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f202:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f204:	683b      	ldr	r3, [r7, #0]
 800f206:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800f208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f20a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800f20e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800f212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f214:	2202      	movs	r2, #2
 800f216:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800f21a:	79fb      	ldrb	r3, [r7, #7]
 800f21c:	2b04      	cmp	r3, #4
 800f21e:	d829      	bhi.n	800f274 <xTaskGenericNotifyFromISR+0xcc>
 800f220:	a201      	add	r2, pc, #4	; (adr r2, 800f228 <xTaskGenericNotifyFromISR+0x80>)
 800f222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f226:	bf00      	nop
 800f228:	0800f293 	.word	0x0800f293
 800f22c:	0800f23d 	.word	0x0800f23d
 800f230:	0800f24b 	.word	0x0800f24b
 800f234:	0800f257 	.word	0x0800f257
 800f238:	0800f25f 	.word	0x0800f25f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800f23c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f23e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f240:	68bb      	ldr	r3, [r7, #8]
 800f242:	431a      	orrs	r2, r3
 800f244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f246:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800f248:	e026      	b.n	800f298 <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800f24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f24c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f24e:	1c5a      	adds	r2, r3, #1
 800f250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f252:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800f254:	e020      	b.n	800f298 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800f256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f258:	68ba      	ldr	r2, [r7, #8]
 800f25a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800f25c:	e01c      	b.n	800f298 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800f25e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f262:	2b02      	cmp	r3, #2
 800f264:	d003      	beq.n	800f26e <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800f266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f268:	68ba      	ldr	r2, [r7, #8]
 800f26a:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800f26c:	e014      	b.n	800f298 <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 800f26e:	2300      	movs	r3, #0
 800f270:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800f272:	e011      	b.n	800f298 <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800f274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f278:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f27c:	d00b      	beq.n	800f296 <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 800f27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f282:	f383 8811 	msr	BASEPRI, r3
 800f286:	f3bf 8f6f 	isb	sy
 800f28a:	f3bf 8f4f 	dsb	sy
 800f28e:	61bb      	str	r3, [r7, #24]
 800f290:	e7fe      	b.n	800f290 <xTaskGenericNotifyFromISR+0xe8>
					break;
 800f292:	bf00      	nop
 800f294:	e000      	b.n	800f298 <xTaskGenericNotifyFromISR+0xf0>
					break;
 800f296:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800f298:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f29c:	2b01      	cmp	r3, #1
 800f29e:	d145      	bne.n	800f32c <xTaskGenericNotifyFromISR+0x184>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800f2a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d009      	beq.n	800f2bc <xTaskGenericNotifyFromISR+0x114>
 800f2a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2ac:	f383 8811 	msr	BASEPRI, r3
 800f2b0:	f3bf 8f6f 	isb	sy
 800f2b4:	f3bf 8f4f 	dsb	sy
 800f2b8:	617b      	str	r3, [r7, #20]
 800f2ba:	e7fe      	b.n	800f2ba <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f2bc:	4b20      	ldr	r3, [pc, #128]	; (800f340 <xTaskGenericNotifyFromISR+0x198>)
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d11d      	bne.n	800f300 <xTaskGenericNotifyFromISR+0x158>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f2c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2c6:	3304      	adds	r3, #4
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	f7fe fa29 	bl	800d720 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2d2:	4b1c      	ldr	r3, [pc, #112]	; (800f344 <xTaskGenericNotifyFromISR+0x19c>)
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	429a      	cmp	r2, r3
 800f2d8:	d903      	bls.n	800f2e2 <xTaskGenericNotifyFromISR+0x13a>
 800f2da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2de:	4a19      	ldr	r2, [pc, #100]	; (800f344 <xTaskGenericNotifyFromISR+0x19c>)
 800f2e0:	6013      	str	r3, [r2, #0]
 800f2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2e6:	4613      	mov	r3, r2
 800f2e8:	009b      	lsls	r3, r3, #2
 800f2ea:	4413      	add	r3, r2
 800f2ec:	009b      	lsls	r3, r3, #2
 800f2ee:	4a16      	ldr	r2, [pc, #88]	; (800f348 <xTaskGenericNotifyFromISR+0x1a0>)
 800f2f0:	441a      	add	r2, r3
 800f2f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2f4:	3304      	adds	r3, #4
 800f2f6:	4619      	mov	r1, r3
 800f2f8:	4610      	mov	r0, r2
 800f2fa:	f7fe f9b4 	bl	800d666 <vListInsertEnd>
 800f2fe:	e005      	b.n	800f30c <xTaskGenericNotifyFromISR+0x164>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800f300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f302:	3318      	adds	r3, #24
 800f304:	4619      	mov	r1, r3
 800f306:	4811      	ldr	r0, [pc, #68]	; (800f34c <xTaskGenericNotifyFromISR+0x1a4>)
 800f308:	f7fe f9ad 	bl	800d666 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f30c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f30e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f310:	4b0f      	ldr	r3, [pc, #60]	; (800f350 <xTaskGenericNotifyFromISR+0x1a8>)
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f316:	429a      	cmp	r2, r3
 800f318:	d908      	bls.n	800f32c <xTaskGenericNotifyFromISR+0x184>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800f31a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d002      	beq.n	800f326 <xTaskGenericNotifyFromISR+0x17e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800f320:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f322:	2201      	movs	r2, #1
 800f324:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800f326:	4b0b      	ldr	r3, [pc, #44]	; (800f354 <xTaskGenericNotifyFromISR+0x1ac>)
 800f328:	2201      	movs	r2, #1
 800f32a:	601a      	str	r2, [r3, #0]
 800f32c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f32e:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f330:	693b      	ldr	r3, [r7, #16]
 800f332:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800f336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800f338:	4618      	mov	r0, r3
 800f33a:	3738      	adds	r7, #56	; 0x38
 800f33c:	46bd      	mov	sp, r7
 800f33e:	bd80      	pop	{r7, pc}
 800f340:	20001124 	.word	0x20001124
 800f344:	20001104 	.word	0x20001104
 800f348:	20000c2c 	.word	0x20000c2c
 800f34c:	200010bc 	.word	0x200010bc
 800f350:	20000c28 	.word	0x20000c28
 800f354:	20001110 	.word	0x20001110

0800f358 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f358:	b580      	push	{r7, lr}
 800f35a:	b084      	sub	sp, #16
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	6078      	str	r0, [r7, #4]
 800f360:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f362:	4b21      	ldr	r3, [pc, #132]	; (800f3e8 <prvAddCurrentTaskToDelayedList+0x90>)
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f368:	4b20      	ldr	r3, [pc, #128]	; (800f3ec <prvAddCurrentTaskToDelayedList+0x94>)
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	3304      	adds	r3, #4
 800f36e:	4618      	mov	r0, r3
 800f370:	f7fe f9d6 	bl	800d720 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f37a:	d10a      	bne.n	800f392 <prvAddCurrentTaskToDelayedList+0x3a>
 800f37c:	683b      	ldr	r3, [r7, #0]
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d007      	beq.n	800f392 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f382:	4b1a      	ldr	r3, [pc, #104]	; (800f3ec <prvAddCurrentTaskToDelayedList+0x94>)
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	3304      	adds	r3, #4
 800f388:	4619      	mov	r1, r3
 800f38a:	4819      	ldr	r0, [pc, #100]	; (800f3f0 <prvAddCurrentTaskToDelayedList+0x98>)
 800f38c:	f7fe f96b 	bl	800d666 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f390:	e026      	b.n	800f3e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f392:	68fa      	ldr	r2, [r7, #12]
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	4413      	add	r3, r2
 800f398:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f39a:	4b14      	ldr	r3, [pc, #80]	; (800f3ec <prvAddCurrentTaskToDelayedList+0x94>)
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	68ba      	ldr	r2, [r7, #8]
 800f3a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f3a2:	68ba      	ldr	r2, [r7, #8]
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	429a      	cmp	r2, r3
 800f3a8:	d209      	bcs.n	800f3be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f3aa:	4b12      	ldr	r3, [pc, #72]	; (800f3f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f3ac:	681a      	ldr	r2, [r3, #0]
 800f3ae:	4b0f      	ldr	r3, [pc, #60]	; (800f3ec <prvAddCurrentTaskToDelayedList+0x94>)
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	3304      	adds	r3, #4
 800f3b4:	4619      	mov	r1, r3
 800f3b6:	4610      	mov	r0, r2
 800f3b8:	f7fe f979 	bl	800d6ae <vListInsert>
}
 800f3bc:	e010      	b.n	800f3e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f3be:	4b0e      	ldr	r3, [pc, #56]	; (800f3f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f3c0:	681a      	ldr	r2, [r3, #0]
 800f3c2:	4b0a      	ldr	r3, [pc, #40]	; (800f3ec <prvAddCurrentTaskToDelayedList+0x94>)
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	3304      	adds	r3, #4
 800f3c8:	4619      	mov	r1, r3
 800f3ca:	4610      	mov	r0, r2
 800f3cc:	f7fe f96f 	bl	800d6ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f3d0:	4b0a      	ldr	r3, [pc, #40]	; (800f3fc <prvAddCurrentTaskToDelayedList+0xa4>)
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	68ba      	ldr	r2, [r7, #8]
 800f3d6:	429a      	cmp	r2, r3
 800f3d8:	d202      	bcs.n	800f3e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f3da:	4a08      	ldr	r2, [pc, #32]	; (800f3fc <prvAddCurrentTaskToDelayedList+0xa4>)
 800f3dc:	68bb      	ldr	r3, [r7, #8]
 800f3de:	6013      	str	r3, [r2, #0]
}
 800f3e0:	bf00      	nop
 800f3e2:	3710      	adds	r7, #16
 800f3e4:	46bd      	mov	sp, r7
 800f3e6:	bd80      	pop	{r7, pc}
 800f3e8:	20001100 	.word	0x20001100
 800f3ec:	20000c28 	.word	0x20000c28
 800f3f0:	200010e8 	.word	0x200010e8
 800f3f4:	200010b8 	.word	0x200010b8
 800f3f8:	200010b4 	.word	0x200010b4
 800f3fc:	2000111c 	.word	0x2000111c

0800f400 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f400:	b580      	push	{r7, lr}
 800f402:	b08a      	sub	sp, #40	; 0x28
 800f404:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f406:	2300      	movs	r3, #0
 800f408:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f40a:	f000 faff 	bl	800fa0c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f40e:	4b1c      	ldr	r3, [pc, #112]	; (800f480 <xTimerCreateTimerTask+0x80>)
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	2b00      	cmp	r3, #0
 800f414:	d021      	beq.n	800f45a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f416:	2300      	movs	r3, #0
 800f418:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f41a:	2300      	movs	r3, #0
 800f41c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f41e:	1d3a      	adds	r2, r7, #4
 800f420:	f107 0108 	add.w	r1, r7, #8
 800f424:	f107 030c 	add.w	r3, r7, #12
 800f428:	4618      	mov	r0, r3
 800f42a:	f7fe f8d5 	bl	800d5d8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f42e:	6879      	ldr	r1, [r7, #4]
 800f430:	68bb      	ldr	r3, [r7, #8]
 800f432:	68fa      	ldr	r2, [r7, #12]
 800f434:	9202      	str	r2, [sp, #8]
 800f436:	9301      	str	r3, [sp, #4]
 800f438:	2302      	movs	r3, #2
 800f43a:	9300      	str	r3, [sp, #0]
 800f43c:	2300      	movs	r3, #0
 800f43e:	460a      	mov	r2, r1
 800f440:	4910      	ldr	r1, [pc, #64]	; (800f484 <xTimerCreateTimerTask+0x84>)
 800f442:	4811      	ldr	r0, [pc, #68]	; (800f488 <xTimerCreateTimerTask+0x88>)
 800f444:	f7fe ff4a 	bl	800e2dc <xTaskCreateStatic>
 800f448:	4602      	mov	r2, r0
 800f44a:	4b10      	ldr	r3, [pc, #64]	; (800f48c <xTimerCreateTimerTask+0x8c>)
 800f44c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f44e:	4b0f      	ldr	r3, [pc, #60]	; (800f48c <xTimerCreateTimerTask+0x8c>)
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	2b00      	cmp	r3, #0
 800f454:	d001      	beq.n	800f45a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f456:	2301      	movs	r3, #1
 800f458:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f45a:	697b      	ldr	r3, [r7, #20]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d109      	bne.n	800f474 <xTimerCreateTimerTask+0x74>
	__asm volatile
 800f460:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f464:	f383 8811 	msr	BASEPRI, r3
 800f468:	f3bf 8f6f 	isb	sy
 800f46c:	f3bf 8f4f 	dsb	sy
 800f470:	613b      	str	r3, [r7, #16]
 800f472:	e7fe      	b.n	800f472 <xTimerCreateTimerTask+0x72>
	return xReturn;
 800f474:	697b      	ldr	r3, [r7, #20]
}
 800f476:	4618      	mov	r0, r3
 800f478:	3718      	adds	r7, #24
 800f47a:	46bd      	mov	sp, r7
 800f47c:	bd80      	pop	{r7, pc}
 800f47e:	bf00      	nop
 800f480:	20001158 	.word	0x20001158
 800f484:	08016f6c 	.word	0x08016f6c
 800f488:	0800f5c1 	.word	0x0800f5c1
 800f48c:	2000115c 	.word	0x2000115c

0800f490 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f490:	b580      	push	{r7, lr}
 800f492:	b08a      	sub	sp, #40	; 0x28
 800f494:	af00      	add	r7, sp, #0
 800f496:	60f8      	str	r0, [r7, #12]
 800f498:	60b9      	str	r1, [r7, #8]
 800f49a:	607a      	str	r2, [r7, #4]
 800f49c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f49e:	2300      	movs	r3, #0
 800f4a0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d109      	bne.n	800f4bc <xTimerGenericCommand+0x2c>
 800f4a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4ac:	f383 8811 	msr	BASEPRI, r3
 800f4b0:	f3bf 8f6f 	isb	sy
 800f4b4:	f3bf 8f4f 	dsb	sy
 800f4b8:	623b      	str	r3, [r7, #32]
 800f4ba:	e7fe      	b.n	800f4ba <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f4bc:	4b19      	ldr	r3, [pc, #100]	; (800f524 <xTimerGenericCommand+0x94>)
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d02a      	beq.n	800f51a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f4c4:	68bb      	ldr	r3, [r7, #8]
 800f4c6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f4d0:	68bb      	ldr	r3, [r7, #8]
 800f4d2:	2b05      	cmp	r3, #5
 800f4d4:	dc18      	bgt.n	800f508 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f4d6:	f7ff fd83 	bl	800efe0 <xTaskGetSchedulerState>
 800f4da:	4603      	mov	r3, r0
 800f4dc:	2b02      	cmp	r3, #2
 800f4de:	d109      	bne.n	800f4f4 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f4e0:	4b10      	ldr	r3, [pc, #64]	; (800f524 <xTimerGenericCommand+0x94>)
 800f4e2:	6818      	ldr	r0, [r3, #0]
 800f4e4:	f107 0110 	add.w	r1, r7, #16
 800f4e8:	2300      	movs	r3, #0
 800f4ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f4ec:	f7fe fa80 	bl	800d9f0 <xQueueGenericSend>
 800f4f0:	6278      	str	r0, [r7, #36]	; 0x24
 800f4f2:	e012      	b.n	800f51a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f4f4:	4b0b      	ldr	r3, [pc, #44]	; (800f524 <xTimerGenericCommand+0x94>)
 800f4f6:	6818      	ldr	r0, [r3, #0]
 800f4f8:	f107 0110 	add.w	r1, r7, #16
 800f4fc:	2300      	movs	r3, #0
 800f4fe:	2200      	movs	r2, #0
 800f500:	f7fe fa76 	bl	800d9f0 <xQueueGenericSend>
 800f504:	6278      	str	r0, [r7, #36]	; 0x24
 800f506:	e008      	b.n	800f51a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f508:	4b06      	ldr	r3, [pc, #24]	; (800f524 <xTimerGenericCommand+0x94>)
 800f50a:	6818      	ldr	r0, [r3, #0]
 800f50c:	f107 0110 	add.w	r1, r7, #16
 800f510:	2300      	movs	r3, #0
 800f512:	683a      	ldr	r2, [r7, #0]
 800f514:	f7fe fb66 	bl	800dbe4 <xQueueGenericSendFromISR>
 800f518:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f51c:	4618      	mov	r0, r3
 800f51e:	3728      	adds	r7, #40	; 0x28
 800f520:	46bd      	mov	sp, r7
 800f522:	bd80      	pop	{r7, pc}
 800f524:	20001158 	.word	0x20001158

0800f528 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f528:	b580      	push	{r7, lr}
 800f52a:	b088      	sub	sp, #32
 800f52c:	af02      	add	r7, sp, #8
 800f52e:	6078      	str	r0, [r7, #4]
 800f530:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f532:	4b22      	ldr	r3, [pc, #136]	; (800f5bc <prvProcessExpiredTimer+0x94>)
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	68db      	ldr	r3, [r3, #12]
 800f538:	68db      	ldr	r3, [r3, #12]
 800f53a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f53c:	697b      	ldr	r3, [r7, #20]
 800f53e:	3304      	adds	r3, #4
 800f540:	4618      	mov	r0, r3
 800f542:	f7fe f8ed 	bl	800d720 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f546:	697b      	ldr	r3, [r7, #20]
 800f548:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f54c:	f003 0304 	and.w	r3, r3, #4
 800f550:	2b00      	cmp	r3, #0
 800f552:	d021      	beq.n	800f598 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f554:	697b      	ldr	r3, [r7, #20]
 800f556:	699a      	ldr	r2, [r3, #24]
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	18d1      	adds	r1, r2, r3
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	683a      	ldr	r2, [r7, #0]
 800f560:	6978      	ldr	r0, [r7, #20]
 800f562:	f000 f8d1 	bl	800f708 <prvInsertTimerInActiveList>
 800f566:	4603      	mov	r3, r0
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d01e      	beq.n	800f5aa <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f56c:	2300      	movs	r3, #0
 800f56e:	9300      	str	r3, [sp, #0]
 800f570:	2300      	movs	r3, #0
 800f572:	687a      	ldr	r2, [r7, #4]
 800f574:	2100      	movs	r1, #0
 800f576:	6978      	ldr	r0, [r7, #20]
 800f578:	f7ff ff8a 	bl	800f490 <xTimerGenericCommand>
 800f57c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f57e:	693b      	ldr	r3, [r7, #16]
 800f580:	2b00      	cmp	r3, #0
 800f582:	d112      	bne.n	800f5aa <prvProcessExpiredTimer+0x82>
 800f584:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f588:	f383 8811 	msr	BASEPRI, r3
 800f58c:	f3bf 8f6f 	isb	sy
 800f590:	f3bf 8f4f 	dsb	sy
 800f594:	60fb      	str	r3, [r7, #12]
 800f596:	e7fe      	b.n	800f596 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f598:	697b      	ldr	r3, [r7, #20]
 800f59a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f59e:	f023 0301 	bic.w	r3, r3, #1
 800f5a2:	b2da      	uxtb	r2, r3
 800f5a4:	697b      	ldr	r3, [r7, #20]
 800f5a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f5aa:	697b      	ldr	r3, [r7, #20]
 800f5ac:	6a1b      	ldr	r3, [r3, #32]
 800f5ae:	6978      	ldr	r0, [r7, #20]
 800f5b0:	4798      	blx	r3
}
 800f5b2:	bf00      	nop
 800f5b4:	3718      	adds	r7, #24
 800f5b6:	46bd      	mov	sp, r7
 800f5b8:	bd80      	pop	{r7, pc}
 800f5ba:	bf00      	nop
 800f5bc:	20001150 	.word	0x20001150

0800f5c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f5c0:	b580      	push	{r7, lr}
 800f5c2:	b084      	sub	sp, #16
 800f5c4:	af00      	add	r7, sp, #0
 800f5c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f5c8:	f107 0308 	add.w	r3, r7, #8
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	f000 f857 	bl	800f680 <prvGetNextExpireTime>
 800f5d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f5d4:	68bb      	ldr	r3, [r7, #8]
 800f5d6:	4619      	mov	r1, r3
 800f5d8:	68f8      	ldr	r0, [r7, #12]
 800f5da:	f000 f803 	bl	800f5e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f5de:	f000 f8d5 	bl	800f78c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f5e2:	e7f1      	b.n	800f5c8 <prvTimerTask+0x8>

0800f5e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f5e4:	b580      	push	{r7, lr}
 800f5e6:	b084      	sub	sp, #16
 800f5e8:	af00      	add	r7, sp, #0
 800f5ea:	6078      	str	r0, [r7, #4]
 800f5ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f5ee:	f7ff f925 	bl	800e83c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f5f2:	f107 0308 	add.w	r3, r7, #8
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	f000 f866 	bl	800f6c8 <prvSampleTimeNow>
 800f5fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f5fe:	68bb      	ldr	r3, [r7, #8]
 800f600:	2b00      	cmp	r3, #0
 800f602:	d130      	bne.n	800f666 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f604:	683b      	ldr	r3, [r7, #0]
 800f606:	2b00      	cmp	r3, #0
 800f608:	d10a      	bne.n	800f620 <prvProcessTimerOrBlockTask+0x3c>
 800f60a:	687a      	ldr	r2, [r7, #4]
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	429a      	cmp	r2, r3
 800f610:	d806      	bhi.n	800f620 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f612:	f7ff f921 	bl	800e858 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f616:	68f9      	ldr	r1, [r7, #12]
 800f618:	6878      	ldr	r0, [r7, #4]
 800f61a:	f7ff ff85 	bl	800f528 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f61e:	e024      	b.n	800f66a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f620:	683b      	ldr	r3, [r7, #0]
 800f622:	2b00      	cmp	r3, #0
 800f624:	d008      	beq.n	800f638 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f626:	4b13      	ldr	r3, [pc, #76]	; (800f674 <prvProcessTimerOrBlockTask+0x90>)
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d101      	bne.n	800f634 <prvProcessTimerOrBlockTask+0x50>
 800f630:	2301      	movs	r3, #1
 800f632:	e000      	b.n	800f636 <prvProcessTimerOrBlockTask+0x52>
 800f634:	2300      	movs	r3, #0
 800f636:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f638:	4b0f      	ldr	r3, [pc, #60]	; (800f678 <prvProcessTimerOrBlockTask+0x94>)
 800f63a:	6818      	ldr	r0, [r3, #0]
 800f63c:	687a      	ldr	r2, [r7, #4]
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	1ad3      	subs	r3, r2, r3
 800f642:	683a      	ldr	r2, [r7, #0]
 800f644:	4619      	mov	r1, r3
 800f646:	f7fe fe15 	bl	800e274 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f64a:	f7ff f905 	bl	800e858 <xTaskResumeAll>
 800f64e:	4603      	mov	r3, r0
 800f650:	2b00      	cmp	r3, #0
 800f652:	d10a      	bne.n	800f66a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f654:	4b09      	ldr	r3, [pc, #36]	; (800f67c <prvProcessTimerOrBlockTask+0x98>)
 800f656:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f65a:	601a      	str	r2, [r3, #0]
 800f65c:	f3bf 8f4f 	dsb	sy
 800f660:	f3bf 8f6f 	isb	sy
}
 800f664:	e001      	b.n	800f66a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f666:	f7ff f8f7 	bl	800e858 <xTaskResumeAll>
}
 800f66a:	bf00      	nop
 800f66c:	3710      	adds	r7, #16
 800f66e:	46bd      	mov	sp, r7
 800f670:	bd80      	pop	{r7, pc}
 800f672:	bf00      	nop
 800f674:	20001154 	.word	0x20001154
 800f678:	20001158 	.word	0x20001158
 800f67c:	e000ed04 	.word	0xe000ed04

0800f680 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f680:	b480      	push	{r7}
 800f682:	b085      	sub	sp, #20
 800f684:	af00      	add	r7, sp, #0
 800f686:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f688:	4b0e      	ldr	r3, [pc, #56]	; (800f6c4 <prvGetNextExpireTime+0x44>)
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d101      	bne.n	800f696 <prvGetNextExpireTime+0x16>
 800f692:	2201      	movs	r2, #1
 800f694:	e000      	b.n	800f698 <prvGetNextExpireTime+0x18>
 800f696:	2200      	movs	r2, #0
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d105      	bne.n	800f6b0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f6a4:	4b07      	ldr	r3, [pc, #28]	; (800f6c4 <prvGetNextExpireTime+0x44>)
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	68db      	ldr	r3, [r3, #12]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	60fb      	str	r3, [r7, #12]
 800f6ae:	e001      	b.n	800f6b4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f6b0:	2300      	movs	r3, #0
 800f6b2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f6b4:	68fb      	ldr	r3, [r7, #12]
}
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	3714      	adds	r7, #20
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c0:	4770      	bx	lr
 800f6c2:	bf00      	nop
 800f6c4:	20001150 	.word	0x20001150

0800f6c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f6c8:	b580      	push	{r7, lr}
 800f6ca:	b084      	sub	sp, #16
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f6d0:	f7ff f95e 	bl	800e990 <xTaskGetTickCount>
 800f6d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f6d6:	4b0b      	ldr	r3, [pc, #44]	; (800f704 <prvSampleTimeNow+0x3c>)
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	68fa      	ldr	r2, [r7, #12]
 800f6dc:	429a      	cmp	r2, r3
 800f6de:	d205      	bcs.n	800f6ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f6e0:	f000 f930 	bl	800f944 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	2201      	movs	r2, #1
 800f6e8:	601a      	str	r2, [r3, #0]
 800f6ea:	e002      	b.n	800f6f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	2200      	movs	r2, #0
 800f6f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f6f2:	4a04      	ldr	r2, [pc, #16]	; (800f704 <prvSampleTimeNow+0x3c>)
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f6f8:	68fb      	ldr	r3, [r7, #12]
}
 800f6fa:	4618      	mov	r0, r3
 800f6fc:	3710      	adds	r7, #16
 800f6fe:	46bd      	mov	sp, r7
 800f700:	bd80      	pop	{r7, pc}
 800f702:	bf00      	nop
 800f704:	20001160 	.word	0x20001160

0800f708 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f708:	b580      	push	{r7, lr}
 800f70a:	b086      	sub	sp, #24
 800f70c:	af00      	add	r7, sp, #0
 800f70e:	60f8      	str	r0, [r7, #12]
 800f710:	60b9      	str	r1, [r7, #8]
 800f712:	607a      	str	r2, [r7, #4]
 800f714:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f716:	2300      	movs	r3, #0
 800f718:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	68ba      	ldr	r2, [r7, #8]
 800f71e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	68fa      	ldr	r2, [r7, #12]
 800f724:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f726:	68ba      	ldr	r2, [r7, #8]
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	429a      	cmp	r2, r3
 800f72c:	d812      	bhi.n	800f754 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f72e:	687a      	ldr	r2, [r7, #4]
 800f730:	683b      	ldr	r3, [r7, #0]
 800f732:	1ad2      	subs	r2, r2, r3
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	699b      	ldr	r3, [r3, #24]
 800f738:	429a      	cmp	r2, r3
 800f73a:	d302      	bcc.n	800f742 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f73c:	2301      	movs	r3, #1
 800f73e:	617b      	str	r3, [r7, #20]
 800f740:	e01b      	b.n	800f77a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f742:	4b10      	ldr	r3, [pc, #64]	; (800f784 <prvInsertTimerInActiveList+0x7c>)
 800f744:	681a      	ldr	r2, [r3, #0]
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	3304      	adds	r3, #4
 800f74a:	4619      	mov	r1, r3
 800f74c:	4610      	mov	r0, r2
 800f74e:	f7fd ffae 	bl	800d6ae <vListInsert>
 800f752:	e012      	b.n	800f77a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f754:	687a      	ldr	r2, [r7, #4]
 800f756:	683b      	ldr	r3, [r7, #0]
 800f758:	429a      	cmp	r2, r3
 800f75a:	d206      	bcs.n	800f76a <prvInsertTimerInActiveList+0x62>
 800f75c:	68ba      	ldr	r2, [r7, #8]
 800f75e:	683b      	ldr	r3, [r7, #0]
 800f760:	429a      	cmp	r2, r3
 800f762:	d302      	bcc.n	800f76a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f764:	2301      	movs	r3, #1
 800f766:	617b      	str	r3, [r7, #20]
 800f768:	e007      	b.n	800f77a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f76a:	4b07      	ldr	r3, [pc, #28]	; (800f788 <prvInsertTimerInActiveList+0x80>)
 800f76c:	681a      	ldr	r2, [r3, #0]
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	3304      	adds	r3, #4
 800f772:	4619      	mov	r1, r3
 800f774:	4610      	mov	r0, r2
 800f776:	f7fd ff9a 	bl	800d6ae <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f77a:	697b      	ldr	r3, [r7, #20]
}
 800f77c:	4618      	mov	r0, r3
 800f77e:	3718      	adds	r7, #24
 800f780:	46bd      	mov	sp, r7
 800f782:	bd80      	pop	{r7, pc}
 800f784:	20001154 	.word	0x20001154
 800f788:	20001150 	.word	0x20001150

0800f78c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f78c:	b580      	push	{r7, lr}
 800f78e:	b08e      	sub	sp, #56	; 0x38
 800f790:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f792:	e0c6      	b.n	800f922 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	2b00      	cmp	r3, #0
 800f798:	da17      	bge.n	800f7ca <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f79a:	1d3b      	adds	r3, r7, #4
 800f79c:	3304      	adds	r3, #4
 800f79e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f7a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d109      	bne.n	800f7ba <prvProcessReceivedCommands+0x2e>
 800f7a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7aa:	f383 8811 	msr	BASEPRI, r3
 800f7ae:	f3bf 8f6f 	isb	sy
 800f7b2:	f3bf 8f4f 	dsb	sy
 800f7b6:	61fb      	str	r3, [r7, #28]
 800f7b8:	e7fe      	b.n	800f7b8 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f7ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f7c0:	6850      	ldr	r0, [r2, #4]
 800f7c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f7c4:	6892      	ldr	r2, [r2, #8]
 800f7c6:	4611      	mov	r1, r2
 800f7c8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	f2c0 80a7 	blt.w	800f920 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f7d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7d8:	695b      	ldr	r3, [r3, #20]
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d004      	beq.n	800f7e8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f7de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7e0:	3304      	adds	r3, #4
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	f7fd ff9c 	bl	800d720 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f7e8:	463b      	mov	r3, r7
 800f7ea:	4618      	mov	r0, r3
 800f7ec:	f7ff ff6c 	bl	800f6c8 <prvSampleTimeNow>
 800f7f0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	2b09      	cmp	r3, #9
 800f7f6:	f200 8094 	bhi.w	800f922 <prvProcessReceivedCommands+0x196>
 800f7fa:	a201      	add	r2, pc, #4	; (adr r2, 800f800 <prvProcessReceivedCommands+0x74>)
 800f7fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f800:	0800f829 	.word	0x0800f829
 800f804:	0800f829 	.word	0x0800f829
 800f808:	0800f829 	.word	0x0800f829
 800f80c:	0800f89b 	.word	0x0800f89b
 800f810:	0800f8af 	.word	0x0800f8af
 800f814:	0800f8f7 	.word	0x0800f8f7
 800f818:	0800f829 	.word	0x0800f829
 800f81c:	0800f829 	.word	0x0800f829
 800f820:	0800f89b 	.word	0x0800f89b
 800f824:	0800f8af 	.word	0x0800f8af
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f82a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f82e:	f043 0301 	orr.w	r3, r3, #1
 800f832:	b2da      	uxtb	r2, r3
 800f834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f836:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f83a:	68ba      	ldr	r2, [r7, #8]
 800f83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f83e:	699b      	ldr	r3, [r3, #24]
 800f840:	18d1      	adds	r1, r2, r3
 800f842:	68bb      	ldr	r3, [r7, #8]
 800f844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f846:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f848:	f7ff ff5e 	bl	800f708 <prvInsertTimerInActiveList>
 800f84c:	4603      	mov	r3, r0
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d067      	beq.n	800f922 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f854:	6a1b      	ldr	r3, [r3, #32]
 800f856:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f858:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f85c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f860:	f003 0304 	and.w	r3, r3, #4
 800f864:	2b00      	cmp	r3, #0
 800f866:	d05c      	beq.n	800f922 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f868:	68ba      	ldr	r2, [r7, #8]
 800f86a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f86c:	699b      	ldr	r3, [r3, #24]
 800f86e:	441a      	add	r2, r3
 800f870:	2300      	movs	r3, #0
 800f872:	9300      	str	r3, [sp, #0]
 800f874:	2300      	movs	r3, #0
 800f876:	2100      	movs	r1, #0
 800f878:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f87a:	f7ff fe09 	bl	800f490 <xTimerGenericCommand>
 800f87e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f880:	6a3b      	ldr	r3, [r7, #32]
 800f882:	2b00      	cmp	r3, #0
 800f884:	d14d      	bne.n	800f922 <prvProcessReceivedCommands+0x196>
 800f886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f88a:	f383 8811 	msr	BASEPRI, r3
 800f88e:	f3bf 8f6f 	isb	sy
 800f892:	f3bf 8f4f 	dsb	sy
 800f896:	61bb      	str	r3, [r7, #24]
 800f898:	e7fe      	b.n	800f898 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f89a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f89c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f8a0:	f023 0301 	bic.w	r3, r3, #1
 800f8a4:	b2da      	uxtb	r2, r3
 800f8a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800f8ac:	e039      	b.n	800f922 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f8ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f8b4:	f043 0301 	orr.w	r3, r3, #1
 800f8b8:	b2da      	uxtb	r2, r3
 800f8ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f8c0:	68ba      	ldr	r2, [r7, #8]
 800f8c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8c4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f8c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8c8:	699b      	ldr	r3, [r3, #24]
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d109      	bne.n	800f8e2 <prvProcessReceivedCommands+0x156>
 800f8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8d2:	f383 8811 	msr	BASEPRI, r3
 800f8d6:	f3bf 8f6f 	isb	sy
 800f8da:	f3bf 8f4f 	dsb	sy
 800f8de:	617b      	str	r3, [r7, #20]
 800f8e0:	e7fe      	b.n	800f8e0 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f8e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8e4:	699a      	ldr	r2, [r3, #24]
 800f8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8e8:	18d1      	adds	r1, r2, r3
 800f8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f8ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f8f0:	f7ff ff0a 	bl	800f708 <prvInsertTimerInActiveList>
					break;
 800f8f4:	e015      	b.n	800f922 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f8f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f8fc:	f003 0302 	and.w	r3, r3, #2
 800f900:	2b00      	cmp	r3, #0
 800f902:	d103      	bne.n	800f90c <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800f904:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f906:	f000 fbc5 	bl	8010094 <vPortFree>
 800f90a:	e00a      	b.n	800f922 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f90c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f90e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f912:	f023 0301 	bic.w	r3, r3, #1
 800f916:	b2da      	uxtb	r2, r3
 800f918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f91a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f91e:	e000      	b.n	800f922 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800f920:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f922:	4b07      	ldr	r3, [pc, #28]	; (800f940 <prvProcessReceivedCommands+0x1b4>)
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	1d39      	adds	r1, r7, #4
 800f928:	2200      	movs	r2, #0
 800f92a:	4618      	mov	r0, r3
 800f92c:	f7fe f9ee 	bl	800dd0c <xQueueReceive>
 800f930:	4603      	mov	r3, r0
 800f932:	2b00      	cmp	r3, #0
 800f934:	f47f af2e 	bne.w	800f794 <prvProcessReceivedCommands+0x8>
	}
}
 800f938:	bf00      	nop
 800f93a:	3730      	adds	r7, #48	; 0x30
 800f93c:	46bd      	mov	sp, r7
 800f93e:	bd80      	pop	{r7, pc}
 800f940:	20001158 	.word	0x20001158

0800f944 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f944:	b580      	push	{r7, lr}
 800f946:	b088      	sub	sp, #32
 800f948:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f94a:	e047      	b.n	800f9dc <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f94c:	4b2d      	ldr	r3, [pc, #180]	; (800fa04 <prvSwitchTimerLists+0xc0>)
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	68db      	ldr	r3, [r3, #12]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f956:	4b2b      	ldr	r3, [pc, #172]	; (800fa04 <prvSwitchTimerLists+0xc0>)
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	68db      	ldr	r3, [r3, #12]
 800f95c:	68db      	ldr	r3, [r3, #12]
 800f95e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	3304      	adds	r3, #4
 800f964:	4618      	mov	r0, r3
 800f966:	f7fd fedb 	bl	800d720 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	6a1b      	ldr	r3, [r3, #32]
 800f96e:	68f8      	ldr	r0, [r7, #12]
 800f970:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f978:	f003 0304 	and.w	r3, r3, #4
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d02d      	beq.n	800f9dc <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	699b      	ldr	r3, [r3, #24]
 800f984:	693a      	ldr	r2, [r7, #16]
 800f986:	4413      	add	r3, r2
 800f988:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f98a:	68ba      	ldr	r2, [r7, #8]
 800f98c:	693b      	ldr	r3, [r7, #16]
 800f98e:	429a      	cmp	r2, r3
 800f990:	d90e      	bls.n	800f9b0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	68ba      	ldr	r2, [r7, #8]
 800f996:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	68fa      	ldr	r2, [r7, #12]
 800f99c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f99e:	4b19      	ldr	r3, [pc, #100]	; (800fa04 <prvSwitchTimerLists+0xc0>)
 800f9a0:	681a      	ldr	r2, [r3, #0]
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	3304      	adds	r3, #4
 800f9a6:	4619      	mov	r1, r3
 800f9a8:	4610      	mov	r0, r2
 800f9aa:	f7fd fe80 	bl	800d6ae <vListInsert>
 800f9ae:	e015      	b.n	800f9dc <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f9b0:	2300      	movs	r3, #0
 800f9b2:	9300      	str	r3, [sp, #0]
 800f9b4:	2300      	movs	r3, #0
 800f9b6:	693a      	ldr	r2, [r7, #16]
 800f9b8:	2100      	movs	r1, #0
 800f9ba:	68f8      	ldr	r0, [r7, #12]
 800f9bc:	f7ff fd68 	bl	800f490 <xTimerGenericCommand>
 800f9c0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d109      	bne.n	800f9dc <prvSwitchTimerLists+0x98>
 800f9c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9cc:	f383 8811 	msr	BASEPRI, r3
 800f9d0:	f3bf 8f6f 	isb	sy
 800f9d4:	f3bf 8f4f 	dsb	sy
 800f9d8:	603b      	str	r3, [r7, #0]
 800f9da:	e7fe      	b.n	800f9da <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f9dc:	4b09      	ldr	r3, [pc, #36]	; (800fa04 <prvSwitchTimerLists+0xc0>)
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d1b2      	bne.n	800f94c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f9e6:	4b07      	ldr	r3, [pc, #28]	; (800fa04 <prvSwitchTimerLists+0xc0>)
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f9ec:	4b06      	ldr	r3, [pc, #24]	; (800fa08 <prvSwitchTimerLists+0xc4>)
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	4a04      	ldr	r2, [pc, #16]	; (800fa04 <prvSwitchTimerLists+0xc0>)
 800f9f2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f9f4:	4a04      	ldr	r2, [pc, #16]	; (800fa08 <prvSwitchTimerLists+0xc4>)
 800f9f6:	697b      	ldr	r3, [r7, #20]
 800f9f8:	6013      	str	r3, [r2, #0]
}
 800f9fa:	bf00      	nop
 800f9fc:	3718      	adds	r7, #24
 800f9fe:	46bd      	mov	sp, r7
 800fa00:	bd80      	pop	{r7, pc}
 800fa02:	bf00      	nop
 800fa04:	20001150 	.word	0x20001150
 800fa08:	20001154 	.word	0x20001154

0800fa0c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800fa0c:	b580      	push	{r7, lr}
 800fa0e:	b082      	sub	sp, #8
 800fa10:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800fa12:	f000 f963 	bl	800fcdc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800fa16:	4b15      	ldr	r3, [pc, #84]	; (800fa6c <prvCheckForValidListAndQueue+0x60>)
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d120      	bne.n	800fa60 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800fa1e:	4814      	ldr	r0, [pc, #80]	; (800fa70 <prvCheckForValidListAndQueue+0x64>)
 800fa20:	f7fd fdf4 	bl	800d60c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800fa24:	4813      	ldr	r0, [pc, #76]	; (800fa74 <prvCheckForValidListAndQueue+0x68>)
 800fa26:	f7fd fdf1 	bl	800d60c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800fa2a:	4b13      	ldr	r3, [pc, #76]	; (800fa78 <prvCheckForValidListAndQueue+0x6c>)
 800fa2c:	4a10      	ldr	r2, [pc, #64]	; (800fa70 <prvCheckForValidListAndQueue+0x64>)
 800fa2e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800fa30:	4b12      	ldr	r3, [pc, #72]	; (800fa7c <prvCheckForValidListAndQueue+0x70>)
 800fa32:	4a10      	ldr	r2, [pc, #64]	; (800fa74 <prvCheckForValidListAndQueue+0x68>)
 800fa34:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800fa36:	2300      	movs	r3, #0
 800fa38:	9300      	str	r3, [sp, #0]
 800fa3a:	4b11      	ldr	r3, [pc, #68]	; (800fa80 <prvCheckForValidListAndQueue+0x74>)
 800fa3c:	4a11      	ldr	r2, [pc, #68]	; (800fa84 <prvCheckForValidListAndQueue+0x78>)
 800fa3e:	2110      	movs	r1, #16
 800fa40:	200a      	movs	r0, #10
 800fa42:	f7fd feff 	bl	800d844 <xQueueGenericCreateStatic>
 800fa46:	4602      	mov	r2, r0
 800fa48:	4b08      	ldr	r3, [pc, #32]	; (800fa6c <prvCheckForValidListAndQueue+0x60>)
 800fa4a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800fa4c:	4b07      	ldr	r3, [pc, #28]	; (800fa6c <prvCheckForValidListAndQueue+0x60>)
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d005      	beq.n	800fa60 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800fa54:	4b05      	ldr	r3, [pc, #20]	; (800fa6c <prvCheckForValidListAndQueue+0x60>)
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	490b      	ldr	r1, [pc, #44]	; (800fa88 <prvCheckForValidListAndQueue+0x7c>)
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	f7fe fbe2 	bl	800e224 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fa60:	f000 f96a 	bl	800fd38 <vPortExitCritical>
}
 800fa64:	bf00      	nop
 800fa66:	46bd      	mov	sp, r7
 800fa68:	bd80      	pop	{r7, pc}
 800fa6a:	bf00      	nop
 800fa6c:	20001158 	.word	0x20001158
 800fa70:	20001128 	.word	0x20001128
 800fa74:	2000113c 	.word	0x2000113c
 800fa78:	20001150 	.word	0x20001150
 800fa7c:	20001154 	.word	0x20001154
 800fa80:	20001204 	.word	0x20001204
 800fa84:	20001164 	.word	0x20001164
 800fa88:	08016f74 	.word	0x08016f74

0800fa8c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fa8c:	b480      	push	{r7}
 800fa8e:	b085      	sub	sp, #20
 800fa90:	af00      	add	r7, sp, #0
 800fa92:	60f8      	str	r0, [r7, #12]
 800fa94:	60b9      	str	r1, [r7, #8]
 800fa96:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	3b04      	subs	r3, #4
 800fa9c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800faa4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	3b04      	subs	r3, #4
 800faaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800faac:	68bb      	ldr	r3, [r7, #8]
 800faae:	f023 0201 	bic.w	r2, r3, #1
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	3b04      	subs	r3, #4
 800faba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fabc:	4a0c      	ldr	r2, [pc, #48]	; (800faf0 <pxPortInitialiseStack+0x64>)
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	3b14      	subs	r3, #20
 800fac6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fac8:	687a      	ldr	r2, [r7, #4]
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	3b04      	subs	r3, #4
 800fad2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	f06f 0202 	mvn.w	r2, #2
 800fada:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	3b20      	subs	r3, #32
 800fae0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800fae2:	68fb      	ldr	r3, [r7, #12]
}
 800fae4:	4618      	mov	r0, r3
 800fae6:	3714      	adds	r7, #20
 800fae8:	46bd      	mov	sp, r7
 800faea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faee:	4770      	bx	lr
 800faf0:	0800faf5 	.word	0x0800faf5

0800faf4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800faf4:	b480      	push	{r7}
 800faf6:	b085      	sub	sp, #20
 800faf8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800fafa:	2300      	movs	r3, #0
 800fafc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fafe:	4b11      	ldr	r3, [pc, #68]	; (800fb44 <prvTaskExitError+0x50>)
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fb06:	d009      	beq.n	800fb1c <prvTaskExitError+0x28>
 800fb08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb0c:	f383 8811 	msr	BASEPRI, r3
 800fb10:	f3bf 8f6f 	isb	sy
 800fb14:	f3bf 8f4f 	dsb	sy
 800fb18:	60fb      	str	r3, [r7, #12]
 800fb1a:	e7fe      	b.n	800fb1a <prvTaskExitError+0x26>
 800fb1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb20:	f383 8811 	msr	BASEPRI, r3
 800fb24:	f3bf 8f6f 	isb	sy
 800fb28:	f3bf 8f4f 	dsb	sy
 800fb2c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fb2e:	bf00      	nop
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d0fc      	beq.n	800fb30 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fb36:	bf00      	nop
 800fb38:	3714      	adds	r7, #20
 800fb3a:	46bd      	mov	sp, r7
 800fb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb40:	4770      	bx	lr
 800fb42:	bf00      	nop
 800fb44:	2000011c 	.word	0x2000011c
	...

0800fb50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fb50:	4b07      	ldr	r3, [pc, #28]	; (800fb70 <pxCurrentTCBConst2>)
 800fb52:	6819      	ldr	r1, [r3, #0]
 800fb54:	6808      	ldr	r0, [r1, #0]
 800fb56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb5a:	f380 8809 	msr	PSP, r0
 800fb5e:	f3bf 8f6f 	isb	sy
 800fb62:	f04f 0000 	mov.w	r0, #0
 800fb66:	f380 8811 	msr	BASEPRI, r0
 800fb6a:	4770      	bx	lr
 800fb6c:	f3af 8000 	nop.w

0800fb70 <pxCurrentTCBConst2>:
 800fb70:	20000c28 	.word	0x20000c28
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fb74:	bf00      	nop
 800fb76:	bf00      	nop

0800fb78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fb78:	4808      	ldr	r0, [pc, #32]	; (800fb9c <prvPortStartFirstTask+0x24>)
 800fb7a:	6800      	ldr	r0, [r0, #0]
 800fb7c:	6800      	ldr	r0, [r0, #0]
 800fb7e:	f380 8808 	msr	MSP, r0
 800fb82:	f04f 0000 	mov.w	r0, #0
 800fb86:	f380 8814 	msr	CONTROL, r0
 800fb8a:	b662      	cpsie	i
 800fb8c:	b661      	cpsie	f
 800fb8e:	f3bf 8f4f 	dsb	sy
 800fb92:	f3bf 8f6f 	isb	sy
 800fb96:	df00      	svc	0
 800fb98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fb9a:	bf00      	nop
 800fb9c:	e000ed08 	.word	0xe000ed08

0800fba0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b086      	sub	sp, #24
 800fba4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fba6:	4b44      	ldr	r3, [pc, #272]	; (800fcb8 <xPortStartScheduler+0x118>)
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	4a44      	ldr	r2, [pc, #272]	; (800fcbc <xPortStartScheduler+0x11c>)
 800fbac:	4293      	cmp	r3, r2
 800fbae:	d109      	bne.n	800fbc4 <xPortStartScheduler+0x24>
 800fbb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbb4:	f383 8811 	msr	BASEPRI, r3
 800fbb8:	f3bf 8f6f 	isb	sy
 800fbbc:	f3bf 8f4f 	dsb	sy
 800fbc0:	613b      	str	r3, [r7, #16]
 800fbc2:	e7fe      	b.n	800fbc2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fbc4:	4b3c      	ldr	r3, [pc, #240]	; (800fcb8 <xPortStartScheduler+0x118>)
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	4a3d      	ldr	r2, [pc, #244]	; (800fcc0 <xPortStartScheduler+0x120>)
 800fbca:	4293      	cmp	r3, r2
 800fbcc:	d109      	bne.n	800fbe2 <xPortStartScheduler+0x42>
 800fbce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbd2:	f383 8811 	msr	BASEPRI, r3
 800fbd6:	f3bf 8f6f 	isb	sy
 800fbda:	f3bf 8f4f 	dsb	sy
 800fbde:	60fb      	str	r3, [r7, #12]
 800fbe0:	e7fe      	b.n	800fbe0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fbe2:	4b38      	ldr	r3, [pc, #224]	; (800fcc4 <xPortStartScheduler+0x124>)
 800fbe4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fbe6:	697b      	ldr	r3, [r7, #20]
 800fbe8:	781b      	ldrb	r3, [r3, #0]
 800fbea:	b2db      	uxtb	r3, r3
 800fbec:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fbee:	697b      	ldr	r3, [r7, #20]
 800fbf0:	22ff      	movs	r2, #255	; 0xff
 800fbf2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fbf4:	697b      	ldr	r3, [r7, #20]
 800fbf6:	781b      	ldrb	r3, [r3, #0]
 800fbf8:	b2db      	uxtb	r3, r3
 800fbfa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fbfc:	78fb      	ldrb	r3, [r7, #3]
 800fbfe:	b2db      	uxtb	r3, r3
 800fc00:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800fc04:	b2da      	uxtb	r2, r3
 800fc06:	4b30      	ldr	r3, [pc, #192]	; (800fcc8 <xPortStartScheduler+0x128>)
 800fc08:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fc0a:	4b30      	ldr	r3, [pc, #192]	; (800fccc <xPortStartScheduler+0x12c>)
 800fc0c:	2207      	movs	r2, #7
 800fc0e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fc10:	e009      	b.n	800fc26 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800fc12:	4b2e      	ldr	r3, [pc, #184]	; (800fccc <xPortStartScheduler+0x12c>)
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	3b01      	subs	r3, #1
 800fc18:	4a2c      	ldr	r2, [pc, #176]	; (800fccc <xPortStartScheduler+0x12c>)
 800fc1a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fc1c:	78fb      	ldrb	r3, [r7, #3]
 800fc1e:	b2db      	uxtb	r3, r3
 800fc20:	005b      	lsls	r3, r3, #1
 800fc22:	b2db      	uxtb	r3, r3
 800fc24:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fc26:	78fb      	ldrb	r3, [r7, #3]
 800fc28:	b2db      	uxtb	r3, r3
 800fc2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc2e:	2b80      	cmp	r3, #128	; 0x80
 800fc30:	d0ef      	beq.n	800fc12 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fc32:	4b26      	ldr	r3, [pc, #152]	; (800fccc <xPortStartScheduler+0x12c>)
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	f1c3 0307 	rsb	r3, r3, #7
 800fc3a:	2b04      	cmp	r3, #4
 800fc3c:	d009      	beq.n	800fc52 <xPortStartScheduler+0xb2>
 800fc3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc42:	f383 8811 	msr	BASEPRI, r3
 800fc46:	f3bf 8f6f 	isb	sy
 800fc4a:	f3bf 8f4f 	dsb	sy
 800fc4e:	60bb      	str	r3, [r7, #8]
 800fc50:	e7fe      	b.n	800fc50 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fc52:	4b1e      	ldr	r3, [pc, #120]	; (800fccc <xPortStartScheduler+0x12c>)
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	021b      	lsls	r3, r3, #8
 800fc58:	4a1c      	ldr	r2, [pc, #112]	; (800fccc <xPortStartScheduler+0x12c>)
 800fc5a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fc5c:	4b1b      	ldr	r3, [pc, #108]	; (800fccc <xPortStartScheduler+0x12c>)
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fc64:	4a19      	ldr	r2, [pc, #100]	; (800fccc <xPortStartScheduler+0x12c>)
 800fc66:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	b2da      	uxtb	r2, r3
 800fc6c:	697b      	ldr	r3, [r7, #20]
 800fc6e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fc70:	4b17      	ldr	r3, [pc, #92]	; (800fcd0 <xPortStartScheduler+0x130>)
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	4a16      	ldr	r2, [pc, #88]	; (800fcd0 <xPortStartScheduler+0x130>)
 800fc76:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800fc7a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fc7c:	4b14      	ldr	r3, [pc, #80]	; (800fcd0 <xPortStartScheduler+0x130>)
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	4a13      	ldr	r2, [pc, #76]	; (800fcd0 <xPortStartScheduler+0x130>)
 800fc82:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800fc86:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fc88:	f000 f8d6 	bl	800fe38 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fc8c:	4b11      	ldr	r3, [pc, #68]	; (800fcd4 <xPortStartScheduler+0x134>)
 800fc8e:	2200      	movs	r2, #0
 800fc90:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fc92:	f000 f8f5 	bl	800fe80 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fc96:	4b10      	ldr	r3, [pc, #64]	; (800fcd8 <xPortStartScheduler+0x138>)
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	4a0f      	ldr	r2, [pc, #60]	; (800fcd8 <xPortStartScheduler+0x138>)
 800fc9c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800fca0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fca2:	f7ff ff69 	bl	800fb78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fca6:	f7fe ff3b 	bl	800eb20 <vTaskSwitchContext>
	prvTaskExitError();
 800fcaa:	f7ff ff23 	bl	800faf4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fcae:	2300      	movs	r3, #0
}
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	3718      	adds	r7, #24
 800fcb4:	46bd      	mov	sp, r7
 800fcb6:	bd80      	pop	{r7, pc}
 800fcb8:	e000ed00 	.word	0xe000ed00
 800fcbc:	410fc271 	.word	0x410fc271
 800fcc0:	410fc270 	.word	0x410fc270
 800fcc4:	e000e400 	.word	0xe000e400
 800fcc8:	20001254 	.word	0x20001254
 800fccc:	20001258 	.word	0x20001258
 800fcd0:	e000ed20 	.word	0xe000ed20
 800fcd4:	2000011c 	.word	0x2000011c
 800fcd8:	e000ef34 	.word	0xe000ef34

0800fcdc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fcdc:	b480      	push	{r7}
 800fcde:	b083      	sub	sp, #12
 800fce0:	af00      	add	r7, sp, #0
 800fce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fce6:	f383 8811 	msr	BASEPRI, r3
 800fcea:	f3bf 8f6f 	isb	sy
 800fcee:	f3bf 8f4f 	dsb	sy
 800fcf2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fcf4:	4b0e      	ldr	r3, [pc, #56]	; (800fd30 <vPortEnterCritical+0x54>)
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	3301      	adds	r3, #1
 800fcfa:	4a0d      	ldr	r2, [pc, #52]	; (800fd30 <vPortEnterCritical+0x54>)
 800fcfc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fcfe:	4b0c      	ldr	r3, [pc, #48]	; (800fd30 <vPortEnterCritical+0x54>)
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	2b01      	cmp	r3, #1
 800fd04:	d10e      	bne.n	800fd24 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fd06:	4b0b      	ldr	r3, [pc, #44]	; (800fd34 <vPortEnterCritical+0x58>)
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	b2db      	uxtb	r3, r3
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d009      	beq.n	800fd24 <vPortEnterCritical+0x48>
 800fd10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd14:	f383 8811 	msr	BASEPRI, r3
 800fd18:	f3bf 8f6f 	isb	sy
 800fd1c:	f3bf 8f4f 	dsb	sy
 800fd20:	603b      	str	r3, [r7, #0]
 800fd22:	e7fe      	b.n	800fd22 <vPortEnterCritical+0x46>
	}
}
 800fd24:	bf00      	nop
 800fd26:	370c      	adds	r7, #12
 800fd28:	46bd      	mov	sp, r7
 800fd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd2e:	4770      	bx	lr
 800fd30:	2000011c 	.word	0x2000011c
 800fd34:	e000ed04 	.word	0xe000ed04

0800fd38 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fd38:	b480      	push	{r7}
 800fd3a:	b083      	sub	sp, #12
 800fd3c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fd3e:	4b11      	ldr	r3, [pc, #68]	; (800fd84 <vPortExitCritical+0x4c>)
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d109      	bne.n	800fd5a <vPortExitCritical+0x22>
 800fd46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd4a:	f383 8811 	msr	BASEPRI, r3
 800fd4e:	f3bf 8f6f 	isb	sy
 800fd52:	f3bf 8f4f 	dsb	sy
 800fd56:	607b      	str	r3, [r7, #4]
 800fd58:	e7fe      	b.n	800fd58 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800fd5a:	4b0a      	ldr	r3, [pc, #40]	; (800fd84 <vPortExitCritical+0x4c>)
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	3b01      	subs	r3, #1
 800fd60:	4a08      	ldr	r2, [pc, #32]	; (800fd84 <vPortExitCritical+0x4c>)
 800fd62:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fd64:	4b07      	ldr	r3, [pc, #28]	; (800fd84 <vPortExitCritical+0x4c>)
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d104      	bne.n	800fd76 <vPortExitCritical+0x3e>
 800fd6c:	2300      	movs	r3, #0
 800fd6e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fd70:	683b      	ldr	r3, [r7, #0]
 800fd72:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800fd76:	bf00      	nop
 800fd78:	370c      	adds	r7, #12
 800fd7a:	46bd      	mov	sp, r7
 800fd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd80:	4770      	bx	lr
 800fd82:	bf00      	nop
 800fd84:	2000011c 	.word	0x2000011c
	...

0800fd90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fd90:	f3ef 8009 	mrs	r0, PSP
 800fd94:	f3bf 8f6f 	isb	sy
 800fd98:	4b15      	ldr	r3, [pc, #84]	; (800fdf0 <pxCurrentTCBConst>)
 800fd9a:	681a      	ldr	r2, [r3, #0]
 800fd9c:	f01e 0f10 	tst.w	lr, #16
 800fda0:	bf08      	it	eq
 800fda2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fda6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdaa:	6010      	str	r0, [r2, #0]
 800fdac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fdb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800fdb4:	f380 8811 	msr	BASEPRI, r0
 800fdb8:	f3bf 8f4f 	dsb	sy
 800fdbc:	f3bf 8f6f 	isb	sy
 800fdc0:	f7fe feae 	bl	800eb20 <vTaskSwitchContext>
 800fdc4:	f04f 0000 	mov.w	r0, #0
 800fdc8:	f380 8811 	msr	BASEPRI, r0
 800fdcc:	bc09      	pop	{r0, r3}
 800fdce:	6819      	ldr	r1, [r3, #0]
 800fdd0:	6808      	ldr	r0, [r1, #0]
 800fdd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdd6:	f01e 0f10 	tst.w	lr, #16
 800fdda:	bf08      	it	eq
 800fddc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fde0:	f380 8809 	msr	PSP, r0
 800fde4:	f3bf 8f6f 	isb	sy
 800fde8:	4770      	bx	lr
 800fdea:	bf00      	nop
 800fdec:	f3af 8000 	nop.w

0800fdf0 <pxCurrentTCBConst>:
 800fdf0:	20000c28 	.word	0x20000c28
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fdf4:	bf00      	nop
 800fdf6:	bf00      	nop

0800fdf8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fdf8:	b580      	push	{r7, lr}
 800fdfa:	b082      	sub	sp, #8
 800fdfc:	af00      	add	r7, sp, #0
	__asm volatile
 800fdfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe02:	f383 8811 	msr	BASEPRI, r3
 800fe06:	f3bf 8f6f 	isb	sy
 800fe0a:	f3bf 8f4f 	dsb	sy
 800fe0e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fe10:	f7fe fdce 	bl	800e9b0 <xTaskIncrementTick>
 800fe14:	4603      	mov	r3, r0
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d003      	beq.n	800fe22 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fe1a:	4b06      	ldr	r3, [pc, #24]	; (800fe34 <SysTick_Handler+0x3c>)
 800fe1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe20:	601a      	str	r2, [r3, #0]
 800fe22:	2300      	movs	r3, #0
 800fe24:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fe26:	683b      	ldr	r3, [r7, #0]
 800fe28:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800fe2c:	bf00      	nop
 800fe2e:	3708      	adds	r7, #8
 800fe30:	46bd      	mov	sp, r7
 800fe32:	bd80      	pop	{r7, pc}
 800fe34:	e000ed04 	.word	0xe000ed04

0800fe38 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fe38:	b480      	push	{r7}
 800fe3a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fe3c:	4b0b      	ldr	r3, [pc, #44]	; (800fe6c <vPortSetupTimerInterrupt+0x34>)
 800fe3e:	2200      	movs	r2, #0
 800fe40:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fe42:	4b0b      	ldr	r3, [pc, #44]	; (800fe70 <vPortSetupTimerInterrupt+0x38>)
 800fe44:	2200      	movs	r2, #0
 800fe46:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fe48:	4b0a      	ldr	r3, [pc, #40]	; (800fe74 <vPortSetupTimerInterrupt+0x3c>)
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	4a0a      	ldr	r2, [pc, #40]	; (800fe78 <vPortSetupTimerInterrupt+0x40>)
 800fe4e:	fba2 2303 	umull	r2, r3, r2, r3
 800fe52:	099b      	lsrs	r3, r3, #6
 800fe54:	4a09      	ldr	r2, [pc, #36]	; (800fe7c <vPortSetupTimerInterrupt+0x44>)
 800fe56:	3b01      	subs	r3, #1
 800fe58:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fe5a:	4b04      	ldr	r3, [pc, #16]	; (800fe6c <vPortSetupTimerInterrupt+0x34>)
 800fe5c:	2207      	movs	r2, #7
 800fe5e:	601a      	str	r2, [r3, #0]
}
 800fe60:	bf00      	nop
 800fe62:	46bd      	mov	sp, r7
 800fe64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe68:	4770      	bx	lr
 800fe6a:	bf00      	nop
 800fe6c:	e000e010 	.word	0xe000e010
 800fe70:	e000e018 	.word	0xe000e018
 800fe74:	20000000 	.word	0x20000000
 800fe78:	10624dd3 	.word	0x10624dd3
 800fe7c:	e000e014 	.word	0xe000e014

0800fe80 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fe80:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800fe90 <vPortEnableVFP+0x10>
 800fe84:	6801      	ldr	r1, [r0, #0]
 800fe86:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800fe8a:	6001      	str	r1, [r0, #0]
 800fe8c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fe8e:	bf00      	nop
 800fe90:	e000ed88 	.word	0xe000ed88

0800fe94 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fe94:	b480      	push	{r7}
 800fe96:	b085      	sub	sp, #20
 800fe98:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fe9a:	f3ef 8305 	mrs	r3, IPSR
 800fe9e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	2b0f      	cmp	r3, #15
 800fea4:	d913      	bls.n	800fece <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fea6:	4a16      	ldr	r2, [pc, #88]	; (800ff00 <vPortValidateInterruptPriority+0x6c>)
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	4413      	add	r3, r2
 800feac:	781b      	ldrb	r3, [r3, #0]
 800feae:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800feb0:	4b14      	ldr	r3, [pc, #80]	; (800ff04 <vPortValidateInterruptPriority+0x70>)
 800feb2:	781b      	ldrb	r3, [r3, #0]
 800feb4:	7afa      	ldrb	r2, [r7, #11]
 800feb6:	429a      	cmp	r2, r3
 800feb8:	d209      	bcs.n	800fece <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800feba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800febe:	f383 8811 	msr	BASEPRI, r3
 800fec2:	f3bf 8f6f 	isb	sy
 800fec6:	f3bf 8f4f 	dsb	sy
 800feca:	607b      	str	r3, [r7, #4]
 800fecc:	e7fe      	b.n	800fecc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fece:	4b0e      	ldr	r3, [pc, #56]	; (800ff08 <vPortValidateInterruptPriority+0x74>)
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800fed6:	4b0d      	ldr	r3, [pc, #52]	; (800ff0c <vPortValidateInterruptPriority+0x78>)
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	429a      	cmp	r2, r3
 800fedc:	d909      	bls.n	800fef2 <vPortValidateInterruptPriority+0x5e>
 800fede:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fee2:	f383 8811 	msr	BASEPRI, r3
 800fee6:	f3bf 8f6f 	isb	sy
 800feea:	f3bf 8f4f 	dsb	sy
 800feee:	603b      	str	r3, [r7, #0]
 800fef0:	e7fe      	b.n	800fef0 <vPortValidateInterruptPriority+0x5c>
	}
 800fef2:	bf00      	nop
 800fef4:	3714      	adds	r7, #20
 800fef6:	46bd      	mov	sp, r7
 800fef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fefc:	4770      	bx	lr
 800fefe:	bf00      	nop
 800ff00:	e000e3f0 	.word	0xe000e3f0
 800ff04:	20001254 	.word	0x20001254
 800ff08:	e000ed0c 	.word	0xe000ed0c
 800ff0c:	20001258 	.word	0x20001258

0800ff10 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ff10:	b580      	push	{r7, lr}
 800ff12:	b08a      	sub	sp, #40	; 0x28
 800ff14:	af00      	add	r7, sp, #0
 800ff16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ff18:	2300      	movs	r3, #0
 800ff1a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ff1c:	f7fe fc8e 	bl	800e83c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ff20:	4b57      	ldr	r3, [pc, #348]	; (8010080 <pvPortMalloc+0x170>)
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d101      	bne.n	800ff2c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ff28:	f000 f90c 	bl	8010144 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ff2c:	4b55      	ldr	r3, [pc, #340]	; (8010084 <pvPortMalloc+0x174>)
 800ff2e:	681a      	ldr	r2, [r3, #0]
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	4013      	ands	r3, r2
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	f040 808c 	bne.w	8010052 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d01c      	beq.n	800ff7a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800ff40:	2208      	movs	r2, #8
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	4413      	add	r3, r2
 800ff46:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	f003 0307 	and.w	r3, r3, #7
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d013      	beq.n	800ff7a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	f023 0307 	bic.w	r3, r3, #7
 800ff58:	3308      	adds	r3, #8
 800ff5a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	f003 0307 	and.w	r3, r3, #7
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d009      	beq.n	800ff7a <pvPortMalloc+0x6a>
 800ff66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff6a:	f383 8811 	msr	BASEPRI, r3
 800ff6e:	f3bf 8f6f 	isb	sy
 800ff72:	f3bf 8f4f 	dsb	sy
 800ff76:	617b      	str	r3, [r7, #20]
 800ff78:	e7fe      	b.n	800ff78 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d068      	beq.n	8010052 <pvPortMalloc+0x142>
 800ff80:	4b41      	ldr	r3, [pc, #260]	; (8010088 <pvPortMalloc+0x178>)
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	687a      	ldr	r2, [r7, #4]
 800ff86:	429a      	cmp	r2, r3
 800ff88:	d863      	bhi.n	8010052 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ff8a:	4b40      	ldr	r3, [pc, #256]	; (801008c <pvPortMalloc+0x17c>)
 800ff8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ff8e:	4b3f      	ldr	r3, [pc, #252]	; (801008c <pvPortMalloc+0x17c>)
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ff94:	e004      	b.n	800ffa0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800ff96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ff9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ffa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffa2:	685b      	ldr	r3, [r3, #4]
 800ffa4:	687a      	ldr	r2, [r7, #4]
 800ffa6:	429a      	cmp	r2, r3
 800ffa8:	d903      	bls.n	800ffb2 <pvPortMalloc+0xa2>
 800ffaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d1f1      	bne.n	800ff96 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ffb2:	4b33      	ldr	r3, [pc, #204]	; (8010080 <pvPortMalloc+0x170>)
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ffb8:	429a      	cmp	r2, r3
 800ffba:	d04a      	beq.n	8010052 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ffbc:	6a3b      	ldr	r3, [r7, #32]
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	2208      	movs	r2, #8
 800ffc2:	4413      	add	r3, r2
 800ffc4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ffc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffc8:	681a      	ldr	r2, [r3, #0]
 800ffca:	6a3b      	ldr	r3, [r7, #32]
 800ffcc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ffce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffd0:	685a      	ldr	r2, [r3, #4]
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	1ad2      	subs	r2, r2, r3
 800ffd6:	2308      	movs	r3, #8
 800ffd8:	005b      	lsls	r3, r3, #1
 800ffda:	429a      	cmp	r2, r3
 800ffdc:	d91e      	bls.n	801001c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ffde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	4413      	add	r3, r2
 800ffe4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ffe6:	69bb      	ldr	r3, [r7, #24]
 800ffe8:	f003 0307 	and.w	r3, r3, #7
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d009      	beq.n	8010004 <pvPortMalloc+0xf4>
 800fff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fff4:	f383 8811 	msr	BASEPRI, r3
 800fff8:	f3bf 8f6f 	isb	sy
 800fffc:	f3bf 8f4f 	dsb	sy
 8010000:	613b      	str	r3, [r7, #16]
 8010002:	e7fe      	b.n	8010002 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010006:	685a      	ldr	r2, [r3, #4]
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	1ad2      	subs	r2, r2, r3
 801000c:	69bb      	ldr	r3, [r7, #24]
 801000e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010012:	687a      	ldr	r2, [r7, #4]
 8010014:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010016:	69b8      	ldr	r0, [r7, #24]
 8010018:	f000 f8f6 	bl	8010208 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801001c:	4b1a      	ldr	r3, [pc, #104]	; (8010088 <pvPortMalloc+0x178>)
 801001e:	681a      	ldr	r2, [r3, #0]
 8010020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010022:	685b      	ldr	r3, [r3, #4]
 8010024:	1ad3      	subs	r3, r2, r3
 8010026:	4a18      	ldr	r2, [pc, #96]	; (8010088 <pvPortMalloc+0x178>)
 8010028:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801002a:	4b17      	ldr	r3, [pc, #92]	; (8010088 <pvPortMalloc+0x178>)
 801002c:	681a      	ldr	r2, [r3, #0]
 801002e:	4b18      	ldr	r3, [pc, #96]	; (8010090 <pvPortMalloc+0x180>)
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	429a      	cmp	r2, r3
 8010034:	d203      	bcs.n	801003e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010036:	4b14      	ldr	r3, [pc, #80]	; (8010088 <pvPortMalloc+0x178>)
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	4a15      	ldr	r2, [pc, #84]	; (8010090 <pvPortMalloc+0x180>)
 801003c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801003e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010040:	685a      	ldr	r2, [r3, #4]
 8010042:	4b10      	ldr	r3, [pc, #64]	; (8010084 <pvPortMalloc+0x174>)
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	431a      	orrs	r2, r3
 8010048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801004a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801004c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801004e:	2200      	movs	r2, #0
 8010050:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010052:	f7fe fc01 	bl	800e858 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010056:	69fb      	ldr	r3, [r7, #28]
 8010058:	f003 0307 	and.w	r3, r3, #7
 801005c:	2b00      	cmp	r3, #0
 801005e:	d009      	beq.n	8010074 <pvPortMalloc+0x164>
 8010060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010064:	f383 8811 	msr	BASEPRI, r3
 8010068:	f3bf 8f6f 	isb	sy
 801006c:	f3bf 8f4f 	dsb	sy
 8010070:	60fb      	str	r3, [r7, #12]
 8010072:	e7fe      	b.n	8010072 <pvPortMalloc+0x162>
	return pvReturn;
 8010074:	69fb      	ldr	r3, [r7, #28]
}
 8010076:	4618      	mov	r0, r3
 8010078:	3728      	adds	r7, #40	; 0x28
 801007a:	46bd      	mov	sp, r7
 801007c:	bd80      	pop	{r7, pc}
 801007e:	bf00      	nop
 8010080:	20004e64 	.word	0x20004e64
 8010084:	20004e70 	.word	0x20004e70
 8010088:	20004e68 	.word	0x20004e68
 801008c:	20004e5c 	.word	0x20004e5c
 8010090:	20004e6c 	.word	0x20004e6c

08010094 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010094:	b580      	push	{r7, lr}
 8010096:	b086      	sub	sp, #24
 8010098:	af00      	add	r7, sp, #0
 801009a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d046      	beq.n	8010134 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80100a6:	2308      	movs	r3, #8
 80100a8:	425b      	negs	r3, r3
 80100aa:	697a      	ldr	r2, [r7, #20]
 80100ac:	4413      	add	r3, r2
 80100ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80100b0:	697b      	ldr	r3, [r7, #20]
 80100b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80100b4:	693b      	ldr	r3, [r7, #16]
 80100b6:	685a      	ldr	r2, [r3, #4]
 80100b8:	4b20      	ldr	r3, [pc, #128]	; (801013c <vPortFree+0xa8>)
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	4013      	ands	r3, r2
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d109      	bne.n	80100d6 <vPortFree+0x42>
 80100c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100c6:	f383 8811 	msr	BASEPRI, r3
 80100ca:	f3bf 8f6f 	isb	sy
 80100ce:	f3bf 8f4f 	dsb	sy
 80100d2:	60fb      	str	r3, [r7, #12]
 80100d4:	e7fe      	b.n	80100d4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80100d6:	693b      	ldr	r3, [r7, #16]
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d009      	beq.n	80100f2 <vPortFree+0x5e>
 80100de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100e2:	f383 8811 	msr	BASEPRI, r3
 80100e6:	f3bf 8f6f 	isb	sy
 80100ea:	f3bf 8f4f 	dsb	sy
 80100ee:	60bb      	str	r3, [r7, #8]
 80100f0:	e7fe      	b.n	80100f0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80100f2:	693b      	ldr	r3, [r7, #16]
 80100f4:	685a      	ldr	r2, [r3, #4]
 80100f6:	4b11      	ldr	r3, [pc, #68]	; (801013c <vPortFree+0xa8>)
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	4013      	ands	r3, r2
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d019      	beq.n	8010134 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010100:	693b      	ldr	r3, [r7, #16]
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	2b00      	cmp	r3, #0
 8010106:	d115      	bne.n	8010134 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010108:	693b      	ldr	r3, [r7, #16]
 801010a:	685a      	ldr	r2, [r3, #4]
 801010c:	4b0b      	ldr	r3, [pc, #44]	; (801013c <vPortFree+0xa8>)
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	43db      	mvns	r3, r3
 8010112:	401a      	ands	r2, r3
 8010114:	693b      	ldr	r3, [r7, #16]
 8010116:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010118:	f7fe fb90 	bl	800e83c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801011c:	693b      	ldr	r3, [r7, #16]
 801011e:	685a      	ldr	r2, [r3, #4]
 8010120:	4b07      	ldr	r3, [pc, #28]	; (8010140 <vPortFree+0xac>)
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	4413      	add	r3, r2
 8010126:	4a06      	ldr	r2, [pc, #24]	; (8010140 <vPortFree+0xac>)
 8010128:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801012a:	6938      	ldr	r0, [r7, #16]
 801012c:	f000 f86c 	bl	8010208 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8010130:	f7fe fb92 	bl	800e858 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010134:	bf00      	nop
 8010136:	3718      	adds	r7, #24
 8010138:	46bd      	mov	sp, r7
 801013a:	bd80      	pop	{r7, pc}
 801013c:	20004e70 	.word	0x20004e70
 8010140:	20004e68 	.word	0x20004e68

08010144 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010144:	b480      	push	{r7}
 8010146:	b085      	sub	sp, #20
 8010148:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801014a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801014e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010150:	4b27      	ldr	r3, [pc, #156]	; (80101f0 <prvHeapInit+0xac>)
 8010152:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	f003 0307 	and.w	r3, r3, #7
 801015a:	2b00      	cmp	r3, #0
 801015c:	d00c      	beq.n	8010178 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	3307      	adds	r3, #7
 8010162:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	f023 0307 	bic.w	r3, r3, #7
 801016a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801016c:	68ba      	ldr	r2, [r7, #8]
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	1ad3      	subs	r3, r2, r3
 8010172:	4a1f      	ldr	r2, [pc, #124]	; (80101f0 <prvHeapInit+0xac>)
 8010174:	4413      	add	r3, r2
 8010176:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801017c:	4a1d      	ldr	r2, [pc, #116]	; (80101f4 <prvHeapInit+0xb0>)
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010182:	4b1c      	ldr	r3, [pc, #112]	; (80101f4 <prvHeapInit+0xb0>)
 8010184:	2200      	movs	r2, #0
 8010186:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	68ba      	ldr	r2, [r7, #8]
 801018c:	4413      	add	r3, r2
 801018e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010190:	2208      	movs	r2, #8
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	1a9b      	subs	r3, r3, r2
 8010196:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	f023 0307 	bic.w	r3, r3, #7
 801019e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	4a15      	ldr	r2, [pc, #84]	; (80101f8 <prvHeapInit+0xb4>)
 80101a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80101a6:	4b14      	ldr	r3, [pc, #80]	; (80101f8 <prvHeapInit+0xb4>)
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	2200      	movs	r2, #0
 80101ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80101ae:	4b12      	ldr	r3, [pc, #72]	; (80101f8 <prvHeapInit+0xb4>)
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	2200      	movs	r2, #0
 80101b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80101ba:	683b      	ldr	r3, [r7, #0]
 80101bc:	68fa      	ldr	r2, [r7, #12]
 80101be:	1ad2      	subs	r2, r2, r3
 80101c0:	683b      	ldr	r3, [r7, #0]
 80101c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80101c4:	4b0c      	ldr	r3, [pc, #48]	; (80101f8 <prvHeapInit+0xb4>)
 80101c6:	681a      	ldr	r2, [r3, #0]
 80101c8:	683b      	ldr	r3, [r7, #0]
 80101ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80101cc:	683b      	ldr	r3, [r7, #0]
 80101ce:	685b      	ldr	r3, [r3, #4]
 80101d0:	4a0a      	ldr	r2, [pc, #40]	; (80101fc <prvHeapInit+0xb8>)
 80101d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80101d4:	683b      	ldr	r3, [r7, #0]
 80101d6:	685b      	ldr	r3, [r3, #4]
 80101d8:	4a09      	ldr	r2, [pc, #36]	; (8010200 <prvHeapInit+0xbc>)
 80101da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80101dc:	4b09      	ldr	r3, [pc, #36]	; (8010204 <prvHeapInit+0xc0>)
 80101de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80101e2:	601a      	str	r2, [r3, #0]
}
 80101e4:	bf00      	nop
 80101e6:	3714      	adds	r7, #20
 80101e8:	46bd      	mov	sp, r7
 80101ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ee:	4770      	bx	lr
 80101f0:	2000125c 	.word	0x2000125c
 80101f4:	20004e5c 	.word	0x20004e5c
 80101f8:	20004e64 	.word	0x20004e64
 80101fc:	20004e6c 	.word	0x20004e6c
 8010200:	20004e68 	.word	0x20004e68
 8010204:	20004e70 	.word	0x20004e70

08010208 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010208:	b480      	push	{r7}
 801020a:	b085      	sub	sp, #20
 801020c:	af00      	add	r7, sp, #0
 801020e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010210:	4b28      	ldr	r3, [pc, #160]	; (80102b4 <prvInsertBlockIntoFreeList+0xac>)
 8010212:	60fb      	str	r3, [r7, #12]
 8010214:	e002      	b.n	801021c <prvInsertBlockIntoFreeList+0x14>
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	60fb      	str	r3, [r7, #12]
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	687a      	ldr	r2, [r7, #4]
 8010222:	429a      	cmp	r2, r3
 8010224:	d8f7      	bhi.n	8010216 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	685b      	ldr	r3, [r3, #4]
 801022e:	68ba      	ldr	r2, [r7, #8]
 8010230:	4413      	add	r3, r2
 8010232:	687a      	ldr	r2, [r7, #4]
 8010234:	429a      	cmp	r2, r3
 8010236:	d108      	bne.n	801024a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	685a      	ldr	r2, [r3, #4]
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	685b      	ldr	r3, [r3, #4]
 8010240:	441a      	add	r2, r3
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	685b      	ldr	r3, [r3, #4]
 8010252:	68ba      	ldr	r2, [r7, #8]
 8010254:	441a      	add	r2, r3
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	429a      	cmp	r2, r3
 801025c:	d118      	bne.n	8010290 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	681a      	ldr	r2, [r3, #0]
 8010262:	4b15      	ldr	r3, [pc, #84]	; (80102b8 <prvInsertBlockIntoFreeList+0xb0>)
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	429a      	cmp	r2, r3
 8010268:	d00d      	beq.n	8010286 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	685a      	ldr	r2, [r3, #4]
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	685b      	ldr	r3, [r3, #4]
 8010274:	441a      	add	r2, r3
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	681a      	ldr	r2, [r3, #0]
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	601a      	str	r2, [r3, #0]
 8010284:	e008      	b.n	8010298 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010286:	4b0c      	ldr	r3, [pc, #48]	; (80102b8 <prvInsertBlockIntoFreeList+0xb0>)
 8010288:	681a      	ldr	r2, [r3, #0]
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	601a      	str	r2, [r3, #0]
 801028e:	e003      	b.n	8010298 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	681a      	ldr	r2, [r3, #0]
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010298:	68fa      	ldr	r2, [r7, #12]
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	429a      	cmp	r2, r3
 801029e:	d002      	beq.n	80102a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	687a      	ldr	r2, [r7, #4]
 80102a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80102a6:	bf00      	nop
 80102a8:	3714      	adds	r7, #20
 80102aa:	46bd      	mov	sp, r7
 80102ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b0:	4770      	bx	lr
 80102b2:	bf00      	nop
 80102b4:	20004e5c 	.word	0x20004e5c
 80102b8:	20004e64 	.word	0x20004e64

080102bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80102bc:	b580      	push	{r7, lr}
 80102be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80102c0:	2200      	movs	r2, #0
 80102c2:	4912      	ldr	r1, [pc, #72]	; (801030c <MX_USB_DEVICE_Init+0x50>)
 80102c4:	4812      	ldr	r0, [pc, #72]	; (8010310 <MX_USB_DEVICE_Init+0x54>)
 80102c6:	f7fb fd6f 	bl	800bda8 <USBD_Init>
 80102ca:	4603      	mov	r3, r0
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d001      	beq.n	80102d4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80102d0:	f7f1 f8ea 	bl	80014a8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80102d4:	490f      	ldr	r1, [pc, #60]	; (8010314 <MX_USB_DEVICE_Init+0x58>)
 80102d6:	480e      	ldr	r0, [pc, #56]	; (8010310 <MX_USB_DEVICE_Init+0x54>)
 80102d8:	f7fb fd9c 	bl	800be14 <USBD_RegisterClass>
 80102dc:	4603      	mov	r3, r0
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d001      	beq.n	80102e6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80102e2:	f7f1 f8e1 	bl	80014a8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80102e6:	490c      	ldr	r1, [pc, #48]	; (8010318 <MX_USB_DEVICE_Init+0x5c>)
 80102e8:	4809      	ldr	r0, [pc, #36]	; (8010310 <MX_USB_DEVICE_Init+0x54>)
 80102ea:	f7fb fcc1 	bl	800bc70 <USBD_CDC_RegisterInterface>
 80102ee:	4603      	mov	r3, r0
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d001      	beq.n	80102f8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80102f4:	f7f1 f8d8 	bl	80014a8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80102f8:	4805      	ldr	r0, [pc, #20]	; (8010310 <MX_USB_DEVICE_Init+0x54>)
 80102fa:	f7fb fdac 	bl	800be56 <USBD_Start>
 80102fe:	4603      	mov	r3, r0
 8010300:	2b00      	cmp	r3, #0
 8010302:	d001      	beq.n	8010308 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010304:	f7f1 f8d0 	bl	80014a8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010308:	bf00      	nop
 801030a:	bd80      	pop	{r7, pc}
 801030c:	20000134 	.word	0x20000134
 8010310:	20006954 	.word	0x20006954
 8010314:	20000018 	.word	0x20000018
 8010318:	20000120 	.word	0x20000120

0801031c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801031c:	b580      	push	{r7, lr}
 801031e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010320:	2200      	movs	r2, #0
 8010322:	4905      	ldr	r1, [pc, #20]	; (8010338 <CDC_Init_FS+0x1c>)
 8010324:	4805      	ldr	r0, [pc, #20]	; (801033c <CDC_Init_FS+0x20>)
 8010326:	f7fb fcb8 	bl	800bc9a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801032a:	4905      	ldr	r1, [pc, #20]	; (8010340 <CDC_Init_FS+0x24>)
 801032c:	4803      	ldr	r0, [pc, #12]	; (801033c <CDC_Init_FS+0x20>)
 801032e:	f7fb fccd 	bl	800bccc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010332:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010334:	4618      	mov	r0, r3
 8010336:	bd80      	pop	{r7, pc}
 8010338:	20007424 	.word	0x20007424
 801033c:	20006954 	.word	0x20006954
 8010340:	20006c24 	.word	0x20006c24

08010344 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010344:	b480      	push	{r7}
 8010346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010348:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801034a:	4618      	mov	r0, r3
 801034c:	46bd      	mov	sp, r7
 801034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010352:	4770      	bx	lr

08010354 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010354:	b480      	push	{r7}
 8010356:	b083      	sub	sp, #12
 8010358:	af00      	add	r7, sp, #0
 801035a:	4603      	mov	r3, r0
 801035c:	6039      	str	r1, [r7, #0]
 801035e:	71fb      	strb	r3, [r7, #7]
 8010360:	4613      	mov	r3, r2
 8010362:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010364:	79fb      	ldrb	r3, [r7, #7]
 8010366:	2b23      	cmp	r3, #35	; 0x23
 8010368:	d84a      	bhi.n	8010400 <CDC_Control_FS+0xac>
 801036a:	a201      	add	r2, pc, #4	; (adr r2, 8010370 <CDC_Control_FS+0x1c>)
 801036c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010370:	08010401 	.word	0x08010401
 8010374:	08010401 	.word	0x08010401
 8010378:	08010401 	.word	0x08010401
 801037c:	08010401 	.word	0x08010401
 8010380:	08010401 	.word	0x08010401
 8010384:	08010401 	.word	0x08010401
 8010388:	08010401 	.word	0x08010401
 801038c:	08010401 	.word	0x08010401
 8010390:	08010401 	.word	0x08010401
 8010394:	08010401 	.word	0x08010401
 8010398:	08010401 	.word	0x08010401
 801039c:	08010401 	.word	0x08010401
 80103a0:	08010401 	.word	0x08010401
 80103a4:	08010401 	.word	0x08010401
 80103a8:	08010401 	.word	0x08010401
 80103ac:	08010401 	.word	0x08010401
 80103b0:	08010401 	.word	0x08010401
 80103b4:	08010401 	.word	0x08010401
 80103b8:	08010401 	.word	0x08010401
 80103bc:	08010401 	.word	0x08010401
 80103c0:	08010401 	.word	0x08010401
 80103c4:	08010401 	.word	0x08010401
 80103c8:	08010401 	.word	0x08010401
 80103cc:	08010401 	.word	0x08010401
 80103d0:	08010401 	.word	0x08010401
 80103d4:	08010401 	.word	0x08010401
 80103d8:	08010401 	.word	0x08010401
 80103dc:	08010401 	.word	0x08010401
 80103e0:	08010401 	.word	0x08010401
 80103e4:	08010401 	.word	0x08010401
 80103e8:	08010401 	.word	0x08010401
 80103ec:	08010401 	.word	0x08010401
 80103f0:	08010401 	.word	0x08010401
 80103f4:	08010401 	.word	0x08010401
 80103f8:	08010401 	.word	0x08010401
 80103fc:	08010401 	.word	0x08010401
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010400:	bf00      	nop
  }

  return (USBD_OK);
 8010402:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010404:	4618      	mov	r0, r3
 8010406:	370c      	adds	r7, #12
 8010408:	46bd      	mov	sp, r7
 801040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801040e:	4770      	bx	lr

08010410 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010410:	b580      	push	{r7, lr}
 8010412:	b082      	sub	sp, #8
 8010414:	af00      	add	r7, sp, #0
 8010416:	6078      	str	r0, [r7, #4]
 8010418:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	return impl_CDC_Receive_FS(Buf, Len);
 801041a:	6839      	ldr	r1, [r7, #0]
 801041c:	6878      	ldr	r0, [r7, #4]
 801041e:	f006 f9a1 	bl	8016764 <impl_CDC_Receive_FS>
 8010422:	4603      	mov	r3, r0

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8010424:	4618      	mov	r0, r3
 8010426:	3708      	adds	r7, #8
 8010428:	46bd      	mov	sp, r7
 801042a:	bd80      	pop	{r7, pc}

0801042c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801042c:	b580      	push	{r7, lr}
 801042e:	b084      	sub	sp, #16
 8010430:	af00      	add	r7, sp, #0
 8010432:	6078      	str	r0, [r7, #4]
 8010434:	460b      	mov	r3, r1
 8010436:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8010438:	2300      	movs	r3, #0
 801043a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801043c:	4b0d      	ldr	r3, [pc, #52]	; (8010474 <CDC_Transmit_FS+0x48>)
 801043e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010442:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8010444:	68bb      	ldr	r3, [r7, #8]
 8010446:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801044a:	2b00      	cmp	r3, #0
 801044c:	d001      	beq.n	8010452 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801044e:	2301      	movs	r3, #1
 8010450:	e00b      	b.n	801046a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8010452:	887b      	ldrh	r3, [r7, #2]
 8010454:	461a      	mov	r2, r3
 8010456:	6879      	ldr	r1, [r7, #4]
 8010458:	4806      	ldr	r0, [pc, #24]	; (8010474 <CDC_Transmit_FS+0x48>)
 801045a:	f7fb fc1e 	bl	800bc9a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801045e:	4805      	ldr	r0, [pc, #20]	; (8010474 <CDC_Transmit_FS+0x48>)
 8010460:	f7fb fc48 	bl	800bcf4 <USBD_CDC_TransmitPacket>
 8010464:	4603      	mov	r3, r0
 8010466:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8010468:	7bfb      	ldrb	r3, [r7, #15]
}
 801046a:	4618      	mov	r0, r3
 801046c:	3710      	adds	r7, #16
 801046e:	46bd      	mov	sp, r7
 8010470:	bd80      	pop	{r7, pc}
 8010472:	bf00      	nop
 8010474:	20006954 	.word	0x20006954

08010478 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010478:	b480      	push	{r7}
 801047a:	b087      	sub	sp, #28
 801047c:	af00      	add	r7, sp, #0
 801047e:	60f8      	str	r0, [r7, #12]
 8010480:	60b9      	str	r1, [r7, #8]
 8010482:	4613      	mov	r3, r2
 8010484:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010486:	2300      	movs	r3, #0
 8010488:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801048a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801048e:	4618      	mov	r0, r3
 8010490:	371c      	adds	r7, #28
 8010492:	46bd      	mov	sp, r7
 8010494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010498:	4770      	bx	lr
	...

0801049c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801049c:	b480      	push	{r7}
 801049e:	b083      	sub	sp, #12
 80104a0:	af00      	add	r7, sp, #0
 80104a2:	4603      	mov	r3, r0
 80104a4:	6039      	str	r1, [r7, #0]
 80104a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80104a8:	683b      	ldr	r3, [r7, #0]
 80104aa:	2212      	movs	r2, #18
 80104ac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80104ae:	4b03      	ldr	r3, [pc, #12]	; (80104bc <USBD_FS_DeviceDescriptor+0x20>)
}
 80104b0:	4618      	mov	r0, r3
 80104b2:	370c      	adds	r7, #12
 80104b4:	46bd      	mov	sp, r7
 80104b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ba:	4770      	bx	lr
 80104bc:	20000150 	.word	0x20000150

080104c0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80104c0:	b480      	push	{r7}
 80104c2:	b083      	sub	sp, #12
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	4603      	mov	r3, r0
 80104c8:	6039      	str	r1, [r7, #0]
 80104ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80104cc:	683b      	ldr	r3, [r7, #0]
 80104ce:	2204      	movs	r2, #4
 80104d0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80104d2:	4b03      	ldr	r3, [pc, #12]	; (80104e0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80104d4:	4618      	mov	r0, r3
 80104d6:	370c      	adds	r7, #12
 80104d8:	46bd      	mov	sp, r7
 80104da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104de:	4770      	bx	lr
 80104e0:	20000164 	.word	0x20000164

080104e4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80104e4:	b580      	push	{r7, lr}
 80104e6:	b082      	sub	sp, #8
 80104e8:	af00      	add	r7, sp, #0
 80104ea:	4603      	mov	r3, r0
 80104ec:	6039      	str	r1, [r7, #0]
 80104ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80104f0:	79fb      	ldrb	r3, [r7, #7]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d105      	bne.n	8010502 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80104f6:	683a      	ldr	r2, [r7, #0]
 80104f8:	4907      	ldr	r1, [pc, #28]	; (8010518 <USBD_FS_ProductStrDescriptor+0x34>)
 80104fa:	4808      	ldr	r0, [pc, #32]	; (801051c <USBD_FS_ProductStrDescriptor+0x38>)
 80104fc:	f7fc fc79 	bl	800cdf2 <USBD_GetString>
 8010500:	e004      	b.n	801050c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010502:	683a      	ldr	r2, [r7, #0]
 8010504:	4904      	ldr	r1, [pc, #16]	; (8010518 <USBD_FS_ProductStrDescriptor+0x34>)
 8010506:	4805      	ldr	r0, [pc, #20]	; (801051c <USBD_FS_ProductStrDescriptor+0x38>)
 8010508:	f7fc fc73 	bl	800cdf2 <USBD_GetString>
  }
  return USBD_StrDesc;
 801050c:	4b02      	ldr	r3, [pc, #8]	; (8010518 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801050e:	4618      	mov	r0, r3
 8010510:	3708      	adds	r7, #8
 8010512:	46bd      	mov	sp, r7
 8010514:	bd80      	pop	{r7, pc}
 8010516:	bf00      	nop
 8010518:	20007c24 	.word	0x20007c24
 801051c:	08016f7c 	.word	0x08016f7c

08010520 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010520:	b580      	push	{r7, lr}
 8010522:	b082      	sub	sp, #8
 8010524:	af00      	add	r7, sp, #0
 8010526:	4603      	mov	r3, r0
 8010528:	6039      	str	r1, [r7, #0]
 801052a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801052c:	683a      	ldr	r2, [r7, #0]
 801052e:	4904      	ldr	r1, [pc, #16]	; (8010540 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010530:	4804      	ldr	r0, [pc, #16]	; (8010544 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010532:	f7fc fc5e 	bl	800cdf2 <USBD_GetString>
  return USBD_StrDesc;
 8010536:	4b02      	ldr	r3, [pc, #8]	; (8010540 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010538:	4618      	mov	r0, r3
 801053a:	3708      	adds	r7, #8
 801053c:	46bd      	mov	sp, r7
 801053e:	bd80      	pop	{r7, pc}
 8010540:	20007c24 	.word	0x20007c24
 8010544:	08016f94 	.word	0x08016f94

08010548 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010548:	b580      	push	{r7, lr}
 801054a:	b082      	sub	sp, #8
 801054c:	af00      	add	r7, sp, #0
 801054e:	4603      	mov	r3, r0
 8010550:	6039      	str	r1, [r7, #0]
 8010552:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010554:	683b      	ldr	r3, [r7, #0]
 8010556:	221a      	movs	r2, #26
 8010558:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801055a:	f000 f843 	bl	80105e4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801055e:	4b02      	ldr	r3, [pc, #8]	; (8010568 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010560:	4618      	mov	r0, r3
 8010562:	3708      	adds	r7, #8
 8010564:	46bd      	mov	sp, r7
 8010566:	bd80      	pop	{r7, pc}
 8010568:	20000168 	.word	0x20000168

0801056c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801056c:	b580      	push	{r7, lr}
 801056e:	b082      	sub	sp, #8
 8010570:	af00      	add	r7, sp, #0
 8010572:	4603      	mov	r3, r0
 8010574:	6039      	str	r1, [r7, #0]
 8010576:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010578:	79fb      	ldrb	r3, [r7, #7]
 801057a:	2b00      	cmp	r3, #0
 801057c:	d105      	bne.n	801058a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801057e:	683a      	ldr	r2, [r7, #0]
 8010580:	4907      	ldr	r1, [pc, #28]	; (80105a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010582:	4808      	ldr	r0, [pc, #32]	; (80105a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010584:	f7fc fc35 	bl	800cdf2 <USBD_GetString>
 8010588:	e004      	b.n	8010594 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801058a:	683a      	ldr	r2, [r7, #0]
 801058c:	4904      	ldr	r1, [pc, #16]	; (80105a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 801058e:	4805      	ldr	r0, [pc, #20]	; (80105a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010590:	f7fc fc2f 	bl	800cdf2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010594:	4b02      	ldr	r3, [pc, #8]	; (80105a0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010596:	4618      	mov	r0, r3
 8010598:	3708      	adds	r7, #8
 801059a:	46bd      	mov	sp, r7
 801059c:	bd80      	pop	{r7, pc}
 801059e:	bf00      	nop
 80105a0:	20007c24 	.word	0x20007c24
 80105a4:	08016fa8 	.word	0x08016fa8

080105a8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80105a8:	b580      	push	{r7, lr}
 80105aa:	b082      	sub	sp, #8
 80105ac:	af00      	add	r7, sp, #0
 80105ae:	4603      	mov	r3, r0
 80105b0:	6039      	str	r1, [r7, #0]
 80105b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80105b4:	79fb      	ldrb	r3, [r7, #7]
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d105      	bne.n	80105c6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80105ba:	683a      	ldr	r2, [r7, #0]
 80105bc:	4907      	ldr	r1, [pc, #28]	; (80105dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80105be:	4808      	ldr	r0, [pc, #32]	; (80105e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80105c0:	f7fc fc17 	bl	800cdf2 <USBD_GetString>
 80105c4:	e004      	b.n	80105d0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80105c6:	683a      	ldr	r2, [r7, #0]
 80105c8:	4904      	ldr	r1, [pc, #16]	; (80105dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80105ca:	4805      	ldr	r0, [pc, #20]	; (80105e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80105cc:	f7fc fc11 	bl	800cdf2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80105d0:	4b02      	ldr	r3, [pc, #8]	; (80105dc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80105d2:	4618      	mov	r0, r3
 80105d4:	3708      	adds	r7, #8
 80105d6:	46bd      	mov	sp, r7
 80105d8:	bd80      	pop	{r7, pc}
 80105da:	bf00      	nop
 80105dc:	20007c24 	.word	0x20007c24
 80105e0:	08016fb4 	.word	0x08016fb4

080105e4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80105e4:	b580      	push	{r7, lr}
 80105e6:	b084      	sub	sp, #16
 80105e8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80105ea:	4b0f      	ldr	r3, [pc, #60]	; (8010628 <Get_SerialNum+0x44>)
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80105f0:	4b0e      	ldr	r3, [pc, #56]	; (801062c <Get_SerialNum+0x48>)
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80105f6:	4b0e      	ldr	r3, [pc, #56]	; (8010630 <Get_SerialNum+0x4c>)
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80105fc:	68fa      	ldr	r2, [r7, #12]
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	4413      	add	r3, r2
 8010602:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	2b00      	cmp	r3, #0
 8010608:	d009      	beq.n	801061e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801060a:	2208      	movs	r2, #8
 801060c:	4909      	ldr	r1, [pc, #36]	; (8010634 <Get_SerialNum+0x50>)
 801060e:	68f8      	ldr	r0, [r7, #12]
 8010610:	f000 f814 	bl	801063c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010614:	2204      	movs	r2, #4
 8010616:	4908      	ldr	r1, [pc, #32]	; (8010638 <Get_SerialNum+0x54>)
 8010618:	68b8      	ldr	r0, [r7, #8]
 801061a:	f000 f80f 	bl	801063c <IntToUnicode>
  }
}
 801061e:	bf00      	nop
 8010620:	3710      	adds	r7, #16
 8010622:	46bd      	mov	sp, r7
 8010624:	bd80      	pop	{r7, pc}
 8010626:	bf00      	nop
 8010628:	1fff7a10 	.word	0x1fff7a10
 801062c:	1fff7a14 	.word	0x1fff7a14
 8010630:	1fff7a18 	.word	0x1fff7a18
 8010634:	2000016a 	.word	0x2000016a
 8010638:	2000017a 	.word	0x2000017a

0801063c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801063c:	b480      	push	{r7}
 801063e:	b087      	sub	sp, #28
 8010640:	af00      	add	r7, sp, #0
 8010642:	60f8      	str	r0, [r7, #12]
 8010644:	60b9      	str	r1, [r7, #8]
 8010646:	4613      	mov	r3, r2
 8010648:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801064a:	2300      	movs	r3, #0
 801064c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801064e:	2300      	movs	r3, #0
 8010650:	75fb      	strb	r3, [r7, #23]
 8010652:	e027      	b.n	80106a4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	0f1b      	lsrs	r3, r3, #28
 8010658:	2b09      	cmp	r3, #9
 801065a:	d80b      	bhi.n	8010674 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	0f1b      	lsrs	r3, r3, #28
 8010660:	b2da      	uxtb	r2, r3
 8010662:	7dfb      	ldrb	r3, [r7, #23]
 8010664:	005b      	lsls	r3, r3, #1
 8010666:	4619      	mov	r1, r3
 8010668:	68bb      	ldr	r3, [r7, #8]
 801066a:	440b      	add	r3, r1
 801066c:	3230      	adds	r2, #48	; 0x30
 801066e:	b2d2      	uxtb	r2, r2
 8010670:	701a      	strb	r2, [r3, #0]
 8010672:	e00a      	b.n	801068a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	0f1b      	lsrs	r3, r3, #28
 8010678:	b2da      	uxtb	r2, r3
 801067a:	7dfb      	ldrb	r3, [r7, #23]
 801067c:	005b      	lsls	r3, r3, #1
 801067e:	4619      	mov	r1, r3
 8010680:	68bb      	ldr	r3, [r7, #8]
 8010682:	440b      	add	r3, r1
 8010684:	3237      	adds	r2, #55	; 0x37
 8010686:	b2d2      	uxtb	r2, r2
 8010688:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	011b      	lsls	r3, r3, #4
 801068e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010690:	7dfb      	ldrb	r3, [r7, #23]
 8010692:	005b      	lsls	r3, r3, #1
 8010694:	3301      	adds	r3, #1
 8010696:	68ba      	ldr	r2, [r7, #8]
 8010698:	4413      	add	r3, r2
 801069a:	2200      	movs	r2, #0
 801069c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801069e:	7dfb      	ldrb	r3, [r7, #23]
 80106a0:	3301      	adds	r3, #1
 80106a2:	75fb      	strb	r3, [r7, #23]
 80106a4:	7dfa      	ldrb	r2, [r7, #23]
 80106a6:	79fb      	ldrb	r3, [r7, #7]
 80106a8:	429a      	cmp	r2, r3
 80106aa:	d3d3      	bcc.n	8010654 <IntToUnicode+0x18>
  }
}
 80106ac:	bf00      	nop
 80106ae:	371c      	adds	r7, #28
 80106b0:	46bd      	mov	sp, r7
 80106b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b6:	4770      	bx	lr

080106b8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80106b8:	b580      	push	{r7, lr}
 80106ba:	b08a      	sub	sp, #40	; 0x28
 80106bc:	af00      	add	r7, sp, #0
 80106be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80106c0:	f107 0314 	add.w	r3, r7, #20
 80106c4:	2200      	movs	r2, #0
 80106c6:	601a      	str	r2, [r3, #0]
 80106c8:	605a      	str	r2, [r3, #4]
 80106ca:	609a      	str	r2, [r3, #8]
 80106cc:	60da      	str	r2, [r3, #12]
 80106ce:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80106d8:	d13a      	bne.n	8010750 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80106da:	2300      	movs	r3, #0
 80106dc:	613b      	str	r3, [r7, #16]
 80106de:	4b1e      	ldr	r3, [pc, #120]	; (8010758 <HAL_PCD_MspInit+0xa0>)
 80106e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106e2:	4a1d      	ldr	r2, [pc, #116]	; (8010758 <HAL_PCD_MspInit+0xa0>)
 80106e4:	f043 0301 	orr.w	r3, r3, #1
 80106e8:	6313      	str	r3, [r2, #48]	; 0x30
 80106ea:	4b1b      	ldr	r3, [pc, #108]	; (8010758 <HAL_PCD_MspInit+0xa0>)
 80106ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106ee:	f003 0301 	and.w	r3, r3, #1
 80106f2:	613b      	str	r3, [r7, #16]
 80106f4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80106f6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80106fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80106fc:	2302      	movs	r3, #2
 80106fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010700:	2300      	movs	r3, #0
 8010702:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010704:	2303      	movs	r3, #3
 8010706:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010708:	230a      	movs	r3, #10
 801070a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801070c:	f107 0314 	add.w	r3, r7, #20
 8010710:	4619      	mov	r1, r3
 8010712:	4812      	ldr	r0, [pc, #72]	; (801075c <HAL_PCD_MspInit+0xa4>)
 8010714:	f7f2 fcf8 	bl	8003108 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010718:	4b0f      	ldr	r3, [pc, #60]	; (8010758 <HAL_PCD_MspInit+0xa0>)
 801071a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801071c:	4a0e      	ldr	r2, [pc, #56]	; (8010758 <HAL_PCD_MspInit+0xa0>)
 801071e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010722:	6353      	str	r3, [r2, #52]	; 0x34
 8010724:	2300      	movs	r3, #0
 8010726:	60fb      	str	r3, [r7, #12]
 8010728:	4b0b      	ldr	r3, [pc, #44]	; (8010758 <HAL_PCD_MspInit+0xa0>)
 801072a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801072c:	4a0a      	ldr	r2, [pc, #40]	; (8010758 <HAL_PCD_MspInit+0xa0>)
 801072e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010732:	6453      	str	r3, [r2, #68]	; 0x44
 8010734:	4b08      	ldr	r3, [pc, #32]	; (8010758 <HAL_PCD_MspInit+0xa0>)
 8010736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010738:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801073c:	60fb      	str	r3, [r7, #12]
 801073e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8010740:	2200      	movs	r2, #0
 8010742:	2105      	movs	r1, #5
 8010744:	2043      	movs	r0, #67	; 0x43
 8010746:	f7f2 f917 	bl	8002978 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801074a:	2043      	movs	r0, #67	; 0x43
 801074c:	f7f2 f930 	bl	80029b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010750:	bf00      	nop
 8010752:	3728      	adds	r7, #40	; 0x28
 8010754:	46bd      	mov	sp, r7
 8010756:	bd80      	pop	{r7, pc}
 8010758:	40023800 	.word	0x40023800
 801075c:	40020000 	.word	0x40020000

08010760 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010760:	b580      	push	{r7, lr}
 8010762:	b082      	sub	sp, #8
 8010764:	af00      	add	r7, sp, #0
 8010766:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8010774:	4619      	mov	r1, r3
 8010776:	4610      	mov	r0, r2
 8010778:	f7fb fbb8 	bl	800beec <USBD_LL_SetupStage>
}
 801077c:	bf00      	nop
 801077e:	3708      	adds	r7, #8
 8010780:	46bd      	mov	sp, r7
 8010782:	bd80      	pop	{r7, pc}

08010784 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010784:	b580      	push	{r7, lr}
 8010786:	b082      	sub	sp, #8
 8010788:	af00      	add	r7, sp, #0
 801078a:	6078      	str	r0, [r7, #4]
 801078c:	460b      	mov	r3, r1
 801078e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8010796:	78fa      	ldrb	r2, [r7, #3]
 8010798:	6879      	ldr	r1, [r7, #4]
 801079a:	4613      	mov	r3, r2
 801079c:	00db      	lsls	r3, r3, #3
 801079e:	1a9b      	subs	r3, r3, r2
 80107a0:	009b      	lsls	r3, r3, #2
 80107a2:	440b      	add	r3, r1
 80107a4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80107a8:	681a      	ldr	r2, [r3, #0]
 80107aa:	78fb      	ldrb	r3, [r7, #3]
 80107ac:	4619      	mov	r1, r3
 80107ae:	f7fb fbf0 	bl	800bf92 <USBD_LL_DataOutStage>
}
 80107b2:	bf00      	nop
 80107b4:	3708      	adds	r7, #8
 80107b6:	46bd      	mov	sp, r7
 80107b8:	bd80      	pop	{r7, pc}

080107ba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80107ba:	b580      	push	{r7, lr}
 80107bc:	b082      	sub	sp, #8
 80107be:	af00      	add	r7, sp, #0
 80107c0:	6078      	str	r0, [r7, #4]
 80107c2:	460b      	mov	r3, r1
 80107c4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80107cc:	78fa      	ldrb	r2, [r7, #3]
 80107ce:	6879      	ldr	r1, [r7, #4]
 80107d0:	4613      	mov	r3, r2
 80107d2:	00db      	lsls	r3, r3, #3
 80107d4:	1a9b      	subs	r3, r3, r2
 80107d6:	009b      	lsls	r3, r3, #2
 80107d8:	440b      	add	r3, r1
 80107da:	3348      	adds	r3, #72	; 0x48
 80107dc:	681a      	ldr	r2, [r3, #0]
 80107de:	78fb      	ldrb	r3, [r7, #3]
 80107e0:	4619      	mov	r1, r3
 80107e2:	f7fb fc39 	bl	800c058 <USBD_LL_DataInStage>
}
 80107e6:	bf00      	nop
 80107e8:	3708      	adds	r7, #8
 80107ea:	46bd      	mov	sp, r7
 80107ec:	bd80      	pop	{r7, pc}

080107ee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80107ee:	b580      	push	{r7, lr}
 80107f0:	b082      	sub	sp, #8
 80107f2:	af00      	add	r7, sp, #0
 80107f4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80107fc:	4618      	mov	r0, r3
 80107fe:	f7fb fd3d 	bl	800c27c <USBD_LL_SOF>
}
 8010802:	bf00      	nop
 8010804:	3708      	adds	r7, #8
 8010806:	46bd      	mov	sp, r7
 8010808:	bd80      	pop	{r7, pc}

0801080a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801080a:	b580      	push	{r7, lr}
 801080c:	b084      	sub	sp, #16
 801080e:	af00      	add	r7, sp, #0
 8010810:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010812:	2301      	movs	r3, #1
 8010814:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	68db      	ldr	r3, [r3, #12]
 801081a:	2b00      	cmp	r3, #0
 801081c:	d102      	bne.n	8010824 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801081e:	2300      	movs	r3, #0
 8010820:	73fb      	strb	r3, [r7, #15]
 8010822:	e008      	b.n	8010836 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	68db      	ldr	r3, [r3, #12]
 8010828:	2b02      	cmp	r3, #2
 801082a:	d102      	bne.n	8010832 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801082c:	2301      	movs	r3, #1
 801082e:	73fb      	strb	r3, [r7, #15]
 8010830:	e001      	b.n	8010836 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8010832:	f7f0 fe39 	bl	80014a8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801083c:	7bfa      	ldrb	r2, [r7, #15]
 801083e:	4611      	mov	r1, r2
 8010840:	4618      	mov	r0, r3
 8010842:	f7fb fce0 	bl	800c206 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801084c:	4618      	mov	r0, r3
 801084e:	f7fb fc99 	bl	800c184 <USBD_LL_Reset>
}
 8010852:	bf00      	nop
 8010854:	3710      	adds	r7, #16
 8010856:	46bd      	mov	sp, r7
 8010858:	bd80      	pop	{r7, pc}
	...

0801085c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801085c:	b580      	push	{r7, lr}
 801085e:	b082      	sub	sp, #8
 8010860:	af00      	add	r7, sp, #0
 8010862:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801086a:	4618      	mov	r0, r3
 801086c:	f7fb fcdb 	bl	800c226 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	687a      	ldr	r2, [r7, #4]
 801087c:	6812      	ldr	r2, [r2, #0]
 801087e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010882:	f043 0301 	orr.w	r3, r3, #1
 8010886:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	6a1b      	ldr	r3, [r3, #32]
 801088c:	2b00      	cmp	r3, #0
 801088e:	d005      	beq.n	801089c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010890:	4b04      	ldr	r3, [pc, #16]	; (80108a4 <HAL_PCD_SuspendCallback+0x48>)
 8010892:	691b      	ldr	r3, [r3, #16]
 8010894:	4a03      	ldr	r2, [pc, #12]	; (80108a4 <HAL_PCD_SuspendCallback+0x48>)
 8010896:	f043 0306 	orr.w	r3, r3, #6
 801089a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801089c:	bf00      	nop
 801089e:	3708      	adds	r7, #8
 80108a0:	46bd      	mov	sp, r7
 80108a2:	bd80      	pop	{r7, pc}
 80108a4:	e000ed00 	.word	0xe000ed00

080108a8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80108a8:	b580      	push	{r7, lr}
 80108aa:	b082      	sub	sp, #8
 80108ac:	af00      	add	r7, sp, #0
 80108ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80108b6:	4618      	mov	r0, r3
 80108b8:	f7fb fcca 	bl	800c250 <USBD_LL_Resume>
}
 80108bc:	bf00      	nop
 80108be:	3708      	adds	r7, #8
 80108c0:	46bd      	mov	sp, r7
 80108c2:	bd80      	pop	{r7, pc}

080108c4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80108c4:	b580      	push	{r7, lr}
 80108c6:	b082      	sub	sp, #8
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	6078      	str	r0, [r7, #4]
 80108cc:	460b      	mov	r3, r1
 80108ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80108d6:	78fa      	ldrb	r2, [r7, #3]
 80108d8:	4611      	mov	r1, r2
 80108da:	4618      	mov	r0, r3
 80108dc:	f7fb fcf5 	bl	800c2ca <USBD_LL_IsoOUTIncomplete>
}
 80108e0:	bf00      	nop
 80108e2:	3708      	adds	r7, #8
 80108e4:	46bd      	mov	sp, r7
 80108e6:	bd80      	pop	{r7, pc}

080108e8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80108e8:	b580      	push	{r7, lr}
 80108ea:	b082      	sub	sp, #8
 80108ec:	af00      	add	r7, sp, #0
 80108ee:	6078      	str	r0, [r7, #4]
 80108f0:	460b      	mov	r3, r1
 80108f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80108fa:	78fa      	ldrb	r2, [r7, #3]
 80108fc:	4611      	mov	r1, r2
 80108fe:	4618      	mov	r0, r3
 8010900:	f7fb fcd6 	bl	800c2b0 <USBD_LL_IsoINIncomplete>
}
 8010904:	bf00      	nop
 8010906:	3708      	adds	r7, #8
 8010908:	46bd      	mov	sp, r7
 801090a:	bd80      	pop	{r7, pc}

0801090c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801090c:	b580      	push	{r7, lr}
 801090e:	b082      	sub	sp, #8
 8010910:	af00      	add	r7, sp, #0
 8010912:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801091a:	4618      	mov	r0, r3
 801091c:	f7fb fce2 	bl	800c2e4 <USBD_LL_DevConnected>
}
 8010920:	bf00      	nop
 8010922:	3708      	adds	r7, #8
 8010924:	46bd      	mov	sp, r7
 8010926:	bd80      	pop	{r7, pc}

08010928 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010928:	b580      	push	{r7, lr}
 801092a:	b082      	sub	sp, #8
 801092c:	af00      	add	r7, sp, #0
 801092e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010936:	4618      	mov	r0, r3
 8010938:	f7fb fcdf 	bl	800c2fa <USBD_LL_DevDisconnected>
}
 801093c:	bf00      	nop
 801093e:	3708      	adds	r7, #8
 8010940:	46bd      	mov	sp, r7
 8010942:	bd80      	pop	{r7, pc}

08010944 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010944:	b580      	push	{r7, lr}
 8010946:	b082      	sub	sp, #8
 8010948:	af00      	add	r7, sp, #0
 801094a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	781b      	ldrb	r3, [r3, #0]
 8010950:	2b00      	cmp	r3, #0
 8010952:	d13c      	bne.n	80109ce <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010954:	4a20      	ldr	r2, [pc, #128]	; (80109d8 <USBD_LL_Init+0x94>)
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	4a1e      	ldr	r2, [pc, #120]	; (80109d8 <USBD_LL_Init+0x94>)
 8010960:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010964:	4b1c      	ldr	r3, [pc, #112]	; (80109d8 <USBD_LL_Init+0x94>)
 8010966:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801096a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801096c:	4b1a      	ldr	r3, [pc, #104]	; (80109d8 <USBD_LL_Init+0x94>)
 801096e:	2204      	movs	r2, #4
 8010970:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010972:	4b19      	ldr	r3, [pc, #100]	; (80109d8 <USBD_LL_Init+0x94>)
 8010974:	2202      	movs	r2, #2
 8010976:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010978:	4b17      	ldr	r3, [pc, #92]	; (80109d8 <USBD_LL_Init+0x94>)
 801097a:	2200      	movs	r2, #0
 801097c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801097e:	4b16      	ldr	r3, [pc, #88]	; (80109d8 <USBD_LL_Init+0x94>)
 8010980:	2202      	movs	r2, #2
 8010982:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010984:	4b14      	ldr	r3, [pc, #80]	; (80109d8 <USBD_LL_Init+0x94>)
 8010986:	2200      	movs	r2, #0
 8010988:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801098a:	4b13      	ldr	r3, [pc, #76]	; (80109d8 <USBD_LL_Init+0x94>)
 801098c:	2200      	movs	r2, #0
 801098e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010990:	4b11      	ldr	r3, [pc, #68]	; (80109d8 <USBD_LL_Init+0x94>)
 8010992:	2200      	movs	r2, #0
 8010994:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8010996:	4b10      	ldr	r3, [pc, #64]	; (80109d8 <USBD_LL_Init+0x94>)
 8010998:	2200      	movs	r2, #0
 801099a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801099c:	4b0e      	ldr	r3, [pc, #56]	; (80109d8 <USBD_LL_Init+0x94>)
 801099e:	2200      	movs	r2, #0
 80109a0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80109a2:	480d      	ldr	r0, [pc, #52]	; (80109d8 <USBD_LL_Init+0x94>)
 80109a4:	f7f5 fba4 	bl	80060f0 <HAL_PCD_Init>
 80109a8:	4603      	mov	r3, r0
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d001      	beq.n	80109b2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80109ae:	f7f0 fd7b 	bl	80014a8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80109b2:	2180      	movs	r1, #128	; 0x80
 80109b4:	4808      	ldr	r0, [pc, #32]	; (80109d8 <USBD_LL_Init+0x94>)
 80109b6:	f7f6 fd02 	bl	80073be <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80109ba:	2240      	movs	r2, #64	; 0x40
 80109bc:	2100      	movs	r1, #0
 80109be:	4806      	ldr	r0, [pc, #24]	; (80109d8 <USBD_LL_Init+0x94>)
 80109c0:	f7f6 fcb6 	bl	8007330 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80109c4:	2280      	movs	r2, #128	; 0x80
 80109c6:	2101      	movs	r1, #1
 80109c8:	4803      	ldr	r0, [pc, #12]	; (80109d8 <USBD_LL_Init+0x94>)
 80109ca:	f7f6 fcb1 	bl	8007330 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80109ce:	2300      	movs	r3, #0
}
 80109d0:	4618      	mov	r0, r3
 80109d2:	3708      	adds	r7, #8
 80109d4:	46bd      	mov	sp, r7
 80109d6:	bd80      	pop	{r7, pc}
 80109d8:	20007e24 	.word	0x20007e24

080109dc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80109dc:	b580      	push	{r7, lr}
 80109de:	b084      	sub	sp, #16
 80109e0:	af00      	add	r7, sp, #0
 80109e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80109e4:	2300      	movs	r3, #0
 80109e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80109e8:	2300      	movs	r3, #0
 80109ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80109f2:	4618      	mov	r0, r3
 80109f4:	f7f5 fc99 	bl	800632a <HAL_PCD_Start>
 80109f8:	4603      	mov	r3, r0
 80109fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80109fc:	7bfb      	ldrb	r3, [r7, #15]
 80109fe:	4618      	mov	r0, r3
 8010a00:	f000 f92a 	bl	8010c58 <USBD_Get_USB_Status>
 8010a04:	4603      	mov	r3, r0
 8010a06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010a08:	7bbb      	ldrb	r3, [r7, #14]
}
 8010a0a:	4618      	mov	r0, r3
 8010a0c:	3710      	adds	r7, #16
 8010a0e:	46bd      	mov	sp, r7
 8010a10:	bd80      	pop	{r7, pc}

08010a12 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010a12:	b580      	push	{r7, lr}
 8010a14:	b084      	sub	sp, #16
 8010a16:	af00      	add	r7, sp, #0
 8010a18:	6078      	str	r0, [r7, #4]
 8010a1a:	4608      	mov	r0, r1
 8010a1c:	4611      	mov	r1, r2
 8010a1e:	461a      	mov	r2, r3
 8010a20:	4603      	mov	r3, r0
 8010a22:	70fb      	strb	r3, [r7, #3]
 8010a24:	460b      	mov	r3, r1
 8010a26:	70bb      	strb	r3, [r7, #2]
 8010a28:	4613      	mov	r3, r2
 8010a2a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010a2c:	2300      	movs	r3, #0
 8010a2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010a30:	2300      	movs	r3, #0
 8010a32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010a3a:	78bb      	ldrb	r3, [r7, #2]
 8010a3c:	883a      	ldrh	r2, [r7, #0]
 8010a3e:	78f9      	ldrb	r1, [r7, #3]
 8010a40:	f7f6 f87d 	bl	8006b3e <HAL_PCD_EP_Open>
 8010a44:	4603      	mov	r3, r0
 8010a46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010a48:	7bfb      	ldrb	r3, [r7, #15]
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	f000 f904 	bl	8010c58 <USBD_Get_USB_Status>
 8010a50:	4603      	mov	r3, r0
 8010a52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010a54:	7bbb      	ldrb	r3, [r7, #14]
}
 8010a56:	4618      	mov	r0, r3
 8010a58:	3710      	adds	r7, #16
 8010a5a:	46bd      	mov	sp, r7
 8010a5c:	bd80      	pop	{r7, pc}

08010a5e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010a5e:	b580      	push	{r7, lr}
 8010a60:	b084      	sub	sp, #16
 8010a62:	af00      	add	r7, sp, #0
 8010a64:	6078      	str	r0, [r7, #4]
 8010a66:	460b      	mov	r3, r1
 8010a68:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010a6a:	2300      	movs	r3, #0
 8010a6c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010a6e:	2300      	movs	r3, #0
 8010a70:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010a78:	78fa      	ldrb	r2, [r7, #3]
 8010a7a:	4611      	mov	r1, r2
 8010a7c:	4618      	mov	r0, r3
 8010a7e:	f7f6 f8c6 	bl	8006c0e <HAL_PCD_EP_Close>
 8010a82:	4603      	mov	r3, r0
 8010a84:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010a86:	7bfb      	ldrb	r3, [r7, #15]
 8010a88:	4618      	mov	r0, r3
 8010a8a:	f000 f8e5 	bl	8010c58 <USBD_Get_USB_Status>
 8010a8e:	4603      	mov	r3, r0
 8010a90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010a92:	7bbb      	ldrb	r3, [r7, #14]
}
 8010a94:	4618      	mov	r0, r3
 8010a96:	3710      	adds	r7, #16
 8010a98:	46bd      	mov	sp, r7
 8010a9a:	bd80      	pop	{r7, pc}

08010a9c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010a9c:	b580      	push	{r7, lr}
 8010a9e:	b084      	sub	sp, #16
 8010aa0:	af00      	add	r7, sp, #0
 8010aa2:	6078      	str	r0, [r7, #4]
 8010aa4:	460b      	mov	r3, r1
 8010aa6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010aa8:	2300      	movs	r3, #0
 8010aaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010aac:	2300      	movs	r3, #0
 8010aae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010ab6:	78fa      	ldrb	r2, [r7, #3]
 8010ab8:	4611      	mov	r1, r2
 8010aba:	4618      	mov	r0, r3
 8010abc:	f7f6 f99e 	bl	8006dfc <HAL_PCD_EP_SetStall>
 8010ac0:	4603      	mov	r3, r0
 8010ac2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010ac4:	7bfb      	ldrb	r3, [r7, #15]
 8010ac6:	4618      	mov	r0, r3
 8010ac8:	f000 f8c6 	bl	8010c58 <USBD_Get_USB_Status>
 8010acc:	4603      	mov	r3, r0
 8010ace:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010ad0:	7bbb      	ldrb	r3, [r7, #14]
}
 8010ad2:	4618      	mov	r0, r3
 8010ad4:	3710      	adds	r7, #16
 8010ad6:	46bd      	mov	sp, r7
 8010ad8:	bd80      	pop	{r7, pc}

08010ada <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010ada:	b580      	push	{r7, lr}
 8010adc:	b084      	sub	sp, #16
 8010ade:	af00      	add	r7, sp, #0
 8010ae0:	6078      	str	r0, [r7, #4]
 8010ae2:	460b      	mov	r3, r1
 8010ae4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010ae6:	2300      	movs	r3, #0
 8010ae8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010aea:	2300      	movs	r3, #0
 8010aec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010af4:	78fa      	ldrb	r2, [r7, #3]
 8010af6:	4611      	mov	r1, r2
 8010af8:	4618      	mov	r0, r3
 8010afa:	f7f6 f9e3 	bl	8006ec4 <HAL_PCD_EP_ClrStall>
 8010afe:	4603      	mov	r3, r0
 8010b00:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010b02:	7bfb      	ldrb	r3, [r7, #15]
 8010b04:	4618      	mov	r0, r3
 8010b06:	f000 f8a7 	bl	8010c58 <USBD_Get_USB_Status>
 8010b0a:	4603      	mov	r3, r0
 8010b0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010b0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010b10:	4618      	mov	r0, r3
 8010b12:	3710      	adds	r7, #16
 8010b14:	46bd      	mov	sp, r7
 8010b16:	bd80      	pop	{r7, pc}

08010b18 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010b18:	b480      	push	{r7}
 8010b1a:	b085      	sub	sp, #20
 8010b1c:	af00      	add	r7, sp, #0
 8010b1e:	6078      	str	r0, [r7, #4]
 8010b20:	460b      	mov	r3, r1
 8010b22:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010b2a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010b2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	da0b      	bge.n	8010b4c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010b34:	78fb      	ldrb	r3, [r7, #3]
 8010b36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010b3a:	68f9      	ldr	r1, [r7, #12]
 8010b3c:	4613      	mov	r3, r2
 8010b3e:	00db      	lsls	r3, r3, #3
 8010b40:	1a9b      	subs	r3, r3, r2
 8010b42:	009b      	lsls	r3, r3, #2
 8010b44:	440b      	add	r3, r1
 8010b46:	333e      	adds	r3, #62	; 0x3e
 8010b48:	781b      	ldrb	r3, [r3, #0]
 8010b4a:	e00b      	b.n	8010b64 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010b4c:	78fb      	ldrb	r3, [r7, #3]
 8010b4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010b52:	68f9      	ldr	r1, [r7, #12]
 8010b54:	4613      	mov	r3, r2
 8010b56:	00db      	lsls	r3, r3, #3
 8010b58:	1a9b      	subs	r3, r3, r2
 8010b5a:	009b      	lsls	r3, r3, #2
 8010b5c:	440b      	add	r3, r1
 8010b5e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010b62:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010b64:	4618      	mov	r0, r3
 8010b66:	3714      	adds	r7, #20
 8010b68:	46bd      	mov	sp, r7
 8010b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b6e:	4770      	bx	lr

08010b70 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010b70:	b580      	push	{r7, lr}
 8010b72:	b084      	sub	sp, #16
 8010b74:	af00      	add	r7, sp, #0
 8010b76:	6078      	str	r0, [r7, #4]
 8010b78:	460b      	mov	r3, r1
 8010b7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b7c:	2300      	movs	r3, #0
 8010b7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010b80:	2300      	movs	r3, #0
 8010b82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010b8a:	78fa      	ldrb	r2, [r7, #3]
 8010b8c:	4611      	mov	r1, r2
 8010b8e:	4618      	mov	r0, r3
 8010b90:	f7f5 ffb0 	bl	8006af4 <HAL_PCD_SetAddress>
 8010b94:	4603      	mov	r3, r0
 8010b96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010b98:	7bfb      	ldrb	r3, [r7, #15]
 8010b9a:	4618      	mov	r0, r3
 8010b9c:	f000 f85c 	bl	8010c58 <USBD_Get_USB_Status>
 8010ba0:	4603      	mov	r3, r0
 8010ba2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010ba4:	7bbb      	ldrb	r3, [r7, #14]
}
 8010ba6:	4618      	mov	r0, r3
 8010ba8:	3710      	adds	r7, #16
 8010baa:	46bd      	mov	sp, r7
 8010bac:	bd80      	pop	{r7, pc}

08010bae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010bae:	b580      	push	{r7, lr}
 8010bb0:	b086      	sub	sp, #24
 8010bb2:	af00      	add	r7, sp, #0
 8010bb4:	60f8      	str	r0, [r7, #12]
 8010bb6:	607a      	str	r2, [r7, #4]
 8010bb8:	603b      	str	r3, [r7, #0]
 8010bba:	460b      	mov	r3, r1
 8010bbc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010bbe:	2300      	movs	r3, #0
 8010bc0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010bc2:	2300      	movs	r3, #0
 8010bc4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010bcc:	7af9      	ldrb	r1, [r7, #11]
 8010bce:	683b      	ldr	r3, [r7, #0]
 8010bd0:	687a      	ldr	r2, [r7, #4]
 8010bd2:	f7f6 f8c9 	bl	8006d68 <HAL_PCD_EP_Transmit>
 8010bd6:	4603      	mov	r3, r0
 8010bd8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010bda:	7dfb      	ldrb	r3, [r7, #23]
 8010bdc:	4618      	mov	r0, r3
 8010bde:	f000 f83b 	bl	8010c58 <USBD_Get_USB_Status>
 8010be2:	4603      	mov	r3, r0
 8010be4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010be6:	7dbb      	ldrb	r3, [r7, #22]
}
 8010be8:	4618      	mov	r0, r3
 8010bea:	3718      	adds	r7, #24
 8010bec:	46bd      	mov	sp, r7
 8010bee:	bd80      	pop	{r7, pc}

08010bf0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010bf0:	b580      	push	{r7, lr}
 8010bf2:	b086      	sub	sp, #24
 8010bf4:	af00      	add	r7, sp, #0
 8010bf6:	60f8      	str	r0, [r7, #12]
 8010bf8:	607a      	str	r2, [r7, #4]
 8010bfa:	603b      	str	r3, [r7, #0]
 8010bfc:	460b      	mov	r3, r1
 8010bfe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c00:	2300      	movs	r3, #0
 8010c02:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010c04:	2300      	movs	r3, #0
 8010c06:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010c0e:	7af9      	ldrb	r1, [r7, #11]
 8010c10:	683b      	ldr	r3, [r7, #0]
 8010c12:	687a      	ldr	r2, [r7, #4]
 8010c14:	f7f6 f845 	bl	8006ca2 <HAL_PCD_EP_Receive>
 8010c18:	4603      	mov	r3, r0
 8010c1a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010c1c:	7dfb      	ldrb	r3, [r7, #23]
 8010c1e:	4618      	mov	r0, r3
 8010c20:	f000 f81a 	bl	8010c58 <USBD_Get_USB_Status>
 8010c24:	4603      	mov	r3, r0
 8010c26:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010c28:	7dbb      	ldrb	r3, [r7, #22]
}
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	3718      	adds	r7, #24
 8010c2e:	46bd      	mov	sp, r7
 8010c30:	bd80      	pop	{r7, pc}

08010c32 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010c32:	b580      	push	{r7, lr}
 8010c34:	b082      	sub	sp, #8
 8010c36:	af00      	add	r7, sp, #0
 8010c38:	6078      	str	r0, [r7, #4]
 8010c3a:	460b      	mov	r3, r1
 8010c3c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010c44:	78fa      	ldrb	r2, [r7, #3]
 8010c46:	4611      	mov	r1, r2
 8010c48:	4618      	mov	r0, r3
 8010c4a:	f7f6 f875 	bl	8006d38 <HAL_PCD_EP_GetRxCount>
 8010c4e:	4603      	mov	r3, r0
}
 8010c50:	4618      	mov	r0, r3
 8010c52:	3708      	adds	r7, #8
 8010c54:	46bd      	mov	sp, r7
 8010c56:	bd80      	pop	{r7, pc}

08010c58 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010c58:	b480      	push	{r7}
 8010c5a:	b085      	sub	sp, #20
 8010c5c:	af00      	add	r7, sp, #0
 8010c5e:	4603      	mov	r3, r0
 8010c60:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010c62:	2300      	movs	r3, #0
 8010c64:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010c66:	79fb      	ldrb	r3, [r7, #7]
 8010c68:	2b03      	cmp	r3, #3
 8010c6a:	d817      	bhi.n	8010c9c <USBD_Get_USB_Status+0x44>
 8010c6c:	a201      	add	r2, pc, #4	; (adr r2, 8010c74 <USBD_Get_USB_Status+0x1c>)
 8010c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c72:	bf00      	nop
 8010c74:	08010c85 	.word	0x08010c85
 8010c78:	08010c8b 	.word	0x08010c8b
 8010c7c:	08010c91 	.word	0x08010c91
 8010c80:	08010c97 	.word	0x08010c97
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010c84:	2300      	movs	r3, #0
 8010c86:	73fb      	strb	r3, [r7, #15]
    break;
 8010c88:	e00b      	b.n	8010ca2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010c8a:	2303      	movs	r3, #3
 8010c8c:	73fb      	strb	r3, [r7, #15]
    break;
 8010c8e:	e008      	b.n	8010ca2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010c90:	2301      	movs	r3, #1
 8010c92:	73fb      	strb	r3, [r7, #15]
    break;
 8010c94:	e005      	b.n	8010ca2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010c96:	2303      	movs	r3, #3
 8010c98:	73fb      	strb	r3, [r7, #15]
    break;
 8010c9a:	e002      	b.n	8010ca2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010c9c:	2303      	movs	r3, #3
 8010c9e:	73fb      	strb	r3, [r7, #15]
    break;
 8010ca0:	bf00      	nop
  }
  return usb_status;
 8010ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ca4:	4618      	mov	r0, r3
 8010ca6:	3714      	adds	r7, #20
 8010ca8:	46bd      	mov	sp, r7
 8010caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cae:	4770      	bx	lr

08010cb0 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8010cb0:	b480      	push	{r7}
 8010cb2:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8010cb4:	bf00      	nop
 8010cb6:	46bd      	mov	sp, r7
 8010cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cbc:	4770      	bx	lr
	...

08010cc0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8010cc0:	b580      	push	{r7, lr}
 8010cc2:	b086      	sub	sp, #24
 8010cc4:	af04      	add	r7, sp, #16
 8010cc6:	4603      	mov	r3, r0
 8010cc8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8010cca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010cce:	9302      	str	r3, [sp, #8]
 8010cd0:	2301      	movs	r3, #1
 8010cd2:	9301      	str	r3, [sp, #4]
 8010cd4:	1dfb      	adds	r3, r7, #7
 8010cd6:	9300      	str	r3, [sp, #0]
 8010cd8:	2301      	movs	r3, #1
 8010cda:	2200      	movs	r2, #0
 8010cdc:	2178      	movs	r1, #120	; 0x78
 8010cde:	4803      	ldr	r0, [pc, #12]	; (8010cec <ssd1306_WriteCommand+0x2c>)
 8010ce0:	f7f2 fcfe 	bl	80036e0 <HAL_I2C_Mem_Write>
}
 8010ce4:	bf00      	nop
 8010ce6:	3708      	adds	r7, #8
 8010ce8:	46bd      	mov	sp, r7
 8010cea:	bd80      	pop	{r7, pc}
 8010cec:	20005b00 	.word	0x20005b00

08010cf0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8010cf0:	b580      	push	{r7, lr}
 8010cf2:	b086      	sub	sp, #24
 8010cf4:	af04      	add	r7, sp, #16
 8010cf6:	6078      	str	r0, [r7, #4]
 8010cf8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8010cfa:	683b      	ldr	r3, [r7, #0]
 8010cfc:	b29b      	uxth	r3, r3
 8010cfe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010d02:	9202      	str	r2, [sp, #8]
 8010d04:	9301      	str	r3, [sp, #4]
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	9300      	str	r3, [sp, #0]
 8010d0a:	2301      	movs	r3, #1
 8010d0c:	2240      	movs	r2, #64	; 0x40
 8010d0e:	2178      	movs	r1, #120	; 0x78
 8010d10:	4803      	ldr	r0, [pc, #12]	; (8010d20 <ssd1306_WriteData+0x30>)
 8010d12:	f7f2 fce5 	bl	80036e0 <HAL_I2C_Mem_Write>
}
 8010d16:	bf00      	nop
 8010d18:	3708      	adds	r7, #8
 8010d1a:	46bd      	mov	sp, r7
 8010d1c:	bd80      	pop	{r7, pc}
 8010d1e:	bf00      	nop
 8010d20:	20005b00 	.word	0x20005b00

08010d24 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8010d24:	b580      	push	{r7, lr}
 8010d26:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8010d28:	f7ff ffc2 	bl	8010cb0 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8010d2c:	2064      	movs	r0, #100	; 0x64
 8010d2e:	f7f1 f973 	bl	8002018 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8010d32:	2000      	movs	r0, #0
 8010d34:	f000 fb2a 	bl	801138c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8010d38:	2020      	movs	r0, #32
 8010d3a:	f7ff ffc1 	bl	8010cc0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8010d3e:	2000      	movs	r0, #0
 8010d40:	f7ff ffbe 	bl	8010cc0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8010d44:	20b0      	movs	r0, #176	; 0xb0
 8010d46:	f7ff ffbb 	bl	8010cc0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8010d4a:	20c8      	movs	r0, #200	; 0xc8
 8010d4c:	f7ff ffb8 	bl	8010cc0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8010d50:	2000      	movs	r0, #0
 8010d52:	f7ff ffb5 	bl	8010cc0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8010d56:	2010      	movs	r0, #16
 8010d58:	f7ff ffb2 	bl	8010cc0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8010d5c:	2040      	movs	r0, #64	; 0x40
 8010d5e:	f7ff ffaf 	bl	8010cc0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8010d62:	20ff      	movs	r0, #255	; 0xff
 8010d64:	f000 faff 	bl	8011366 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8010d68:	20a1      	movs	r0, #161	; 0xa1
 8010d6a:	f7ff ffa9 	bl	8010cc0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8010d6e:	20a6      	movs	r0, #166	; 0xa6
 8010d70:	f7ff ffa6 	bl	8010cc0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8010d74:	20a8      	movs	r0, #168	; 0xa8
 8010d76:	f7ff ffa3 	bl	8010cc0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 8010d7a:	201f      	movs	r0, #31
 8010d7c:	f7ff ffa0 	bl	8010cc0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8010d80:	20a4      	movs	r0, #164	; 0xa4
 8010d82:	f7ff ff9d 	bl	8010cc0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8010d86:	20d3      	movs	r0, #211	; 0xd3
 8010d88:	f7ff ff9a 	bl	8010cc0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8010d8c:	2000      	movs	r0, #0
 8010d8e:	f7ff ff97 	bl	8010cc0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8010d92:	20d5      	movs	r0, #213	; 0xd5
 8010d94:	f7ff ff94 	bl	8010cc0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8010d98:	20f0      	movs	r0, #240	; 0xf0
 8010d9a:	f7ff ff91 	bl	8010cc0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8010d9e:	20d9      	movs	r0, #217	; 0xd9
 8010da0:	f7ff ff8e 	bl	8010cc0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8010da4:	2022      	movs	r0, #34	; 0x22
 8010da6:	f7ff ff8b 	bl	8010cc0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8010daa:	20da      	movs	r0, #218	; 0xda
 8010dac:	f7ff ff88 	bl	8010cc0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 8010db0:	2002      	movs	r0, #2
 8010db2:	f7ff ff85 	bl	8010cc0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8010db6:	20db      	movs	r0, #219	; 0xdb
 8010db8:	f7ff ff82 	bl	8010cc0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8010dbc:	2020      	movs	r0, #32
 8010dbe:	f7ff ff7f 	bl	8010cc0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8010dc2:	208d      	movs	r0, #141	; 0x8d
 8010dc4:	f7ff ff7c 	bl	8010cc0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8010dc8:	2014      	movs	r0, #20
 8010dca:	f7ff ff79 	bl	8010cc0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8010dce:	2001      	movs	r0, #1
 8010dd0:	f000 fadc 	bl	801138c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8010dd4:	2000      	movs	r0, #0
 8010dd6:	f000 f80f 	bl	8010df8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8010dda:	f000 f8bd 	bl	8010f58 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8010dde:	4b05      	ldr	r3, [pc, #20]	; (8010df4 <ssd1306_Init+0xd0>)
 8010de0:	2200      	movs	r2, #0
 8010de2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8010de4:	4b03      	ldr	r3, [pc, #12]	; (8010df4 <ssd1306_Init+0xd0>)
 8010de6:	2200      	movs	r2, #0
 8010de8:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8010dea:	4b02      	ldr	r3, [pc, #8]	; (8010df4 <ssd1306_Init+0xd0>)
 8010dec:	2201      	movs	r2, #1
 8010dee:	715a      	strb	r2, [r3, #5]
}
 8010df0:	bf00      	nop
 8010df2:	bd80      	pop	{r7, pc}
 8010df4:	20005074 	.word	0x20005074

08010df8 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8010df8:	b480      	push	{r7}
 8010dfa:	b085      	sub	sp, #20
 8010dfc:	af00      	add	r7, sp, #0
 8010dfe:	4603      	mov	r3, r0
 8010e00:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8010e02:	2300      	movs	r3, #0
 8010e04:	60fb      	str	r3, [r7, #12]
 8010e06:	e00d      	b.n	8010e24 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8010e08:	79fb      	ldrb	r3, [r7, #7]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d101      	bne.n	8010e12 <ssd1306_Fill+0x1a>
 8010e0e:	2100      	movs	r1, #0
 8010e10:	e000      	b.n	8010e14 <ssd1306_Fill+0x1c>
 8010e12:	21ff      	movs	r1, #255	; 0xff
 8010e14:	4a08      	ldr	r2, [pc, #32]	; (8010e38 <ssd1306_Fill+0x40>)
 8010e16:	68fb      	ldr	r3, [r7, #12]
 8010e18:	4413      	add	r3, r2
 8010e1a:	460a      	mov	r2, r1
 8010e1c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	3301      	adds	r3, #1
 8010e22:	60fb      	str	r3, [r7, #12]
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010e2a:	d3ed      	bcc.n	8010e08 <ssd1306_Fill+0x10>
    }
}
 8010e2c:	bf00      	nop
 8010e2e:	3714      	adds	r7, #20
 8010e30:	46bd      	mov	sp, r7
 8010e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e36:	4770      	bx	lr
 8010e38:	20004e74 	.word	0x20004e74

08010e3c <ssd1306_FillZone>:


void ssd1306_FillZone(uint8_t x, uint8_t y, uint8_t wx, uint8_t wy, SSD1306_COLOR color)
{
 8010e3c:	b490      	push	{r4, r7}
 8010e3e:	b08a      	sub	sp, #40	; 0x28
 8010e40:	af00      	add	r7, sp, #0
 8010e42:	4604      	mov	r4, r0
 8010e44:	4608      	mov	r0, r1
 8010e46:	4611      	mov	r1, r2
 8010e48:	461a      	mov	r2, r3
 8010e4a:	4623      	mov	r3, r4
 8010e4c:	71fb      	strb	r3, [r7, #7]
 8010e4e:	4603      	mov	r3, r0
 8010e50:	71bb      	strb	r3, [r7, #6]
 8010e52:	460b      	mov	r3, r1
 8010e54:	717b      	strb	r3, [r7, #5]
 8010e56:	4613      	mov	r3, r2
 8010e58:	713b      	strb	r3, [r7, #4]
    uint32_t xi;
    uint32_t yi;

    int by = y/8;
 8010e5a:	79bb      	ldrb	r3, [r7, #6]
 8010e5c:	08db      	lsrs	r3, r3, #3
 8010e5e:	b2db      	uxtb	r3, r3
 8010e60:	61bb      	str	r3, [r7, #24]
    int bly = (y+wy+7)/8;
 8010e62:	79ba      	ldrb	r2, [r7, #6]
 8010e64:	793b      	ldrb	r3, [r7, #4]
 8010e66:	4413      	add	r3, r2
 8010e68:	3307      	adds	r3, #7
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	da00      	bge.n	8010e70 <ssd1306_FillZone+0x34>
 8010e6e:	3307      	adds	r3, #7
 8010e70:	10db      	asrs	r3, r3, #3
 8010e72:	617b      	str	r3, [r7, #20]

    for (yi = by; yi < bly; yi++) {
 8010e74:	69bb      	ldr	r3, [r7, #24]
 8010e76:	623b      	str	r3, [r7, #32]
 8010e78:	e063      	b.n	8010f42 <ssd1306_FillZone+0x106>
    	uint8_t b = 0xFF;
 8010e7a:	23ff      	movs	r3, #255	; 0xff
 8010e7c:	77fb      	strb	r3, [r7, #31]
    	if (yi == by) {
 8010e7e:	69bb      	ldr	r3, [r7, #24]
 8010e80:	6a3a      	ldr	r2, [r7, #32]
 8010e82:	429a      	cmp	r2, r3
 8010e84:	d106      	bne.n	8010e94 <ssd1306_FillZone+0x58>
    		b = b << (y & 0x7);
 8010e86:	7ffa      	ldrb	r2, [r7, #31]
 8010e88:	79bb      	ldrb	r3, [r7, #6]
 8010e8a:	f003 0307 	and.w	r3, r3, #7
 8010e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8010e92:	77fb      	strb	r3, [r7, #31]
    	}
    	if (yi == bly-1) {
 8010e94:	697b      	ldr	r3, [r7, #20]
 8010e96:	3b01      	subs	r3, #1
 8010e98:	461a      	mov	r2, r3
 8010e9a:	6a3b      	ldr	r3, [r7, #32]
 8010e9c:	4293      	cmp	r3, r2
 8010e9e:	d113      	bne.n	8010ec8 <ssd1306_FillZone+0x8c>
    		int s = (y+wy) & 0x7;
 8010ea0:	79ba      	ldrb	r2, [r7, #6]
 8010ea2:	793b      	ldrb	r3, [r7, #4]
 8010ea4:	4413      	add	r3, r2
 8010ea6:	b2db      	uxtb	r3, r3
 8010ea8:	f003 0307 	and.w	r3, r3, #7
 8010eac:	613b      	str	r3, [r7, #16]
    		if (s) b &= ~(0xFFU << s);
 8010eae:	693b      	ldr	r3, [r7, #16]
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d009      	beq.n	8010ec8 <ssd1306_FillZone+0x8c>
 8010eb4:	22ff      	movs	r2, #255	; 0xff
 8010eb6:	693b      	ldr	r3, [r7, #16]
 8010eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8010ebc:	b2db      	uxtb	r3, r3
 8010ebe:	43db      	mvns	r3, r3
 8010ec0:	b2da      	uxtb	r2, r3
 8010ec2:	7ffb      	ldrb	r3, [r7, #31]
 8010ec4:	4013      	ands	r3, r2
 8010ec6:	77fb      	strb	r3, [r7, #31]
    	}
    	for (xi = x; xi <x+wx; xi++) {
 8010ec8:	79fb      	ldrb	r3, [r7, #7]
 8010eca:	627b      	str	r3, [r7, #36]	; 0x24
 8010ecc:	e02d      	b.n	8010f2a <ssd1306_FillZone+0xee>
    		int i = yi*SSD1306_WIDTH+xi;
 8010ece:	6a3b      	ldr	r3, [r7, #32]
 8010ed0:	01da      	lsls	r2, r3, #7
 8010ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ed4:	4413      	add	r3, r2
 8010ed6:	60fb      	str	r3, [r7, #12]
    		if (i>=SSD1306_BUFFER_SIZE) break;
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010ede:	da2c      	bge.n	8010f3a <ssd1306_FillZone+0xfe>
    		if (color == Black) {
 8010ee0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d111      	bne.n	8010f0c <ssd1306_FillZone+0xd0>
    			SSD1306_Buffer[i] &= ~b;
 8010ee8:	4a1a      	ldr	r2, [pc, #104]	; (8010f54 <ssd1306_FillZone+0x118>)
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	4413      	add	r3, r2
 8010eee:	781b      	ldrb	r3, [r3, #0]
 8010ef0:	b25a      	sxtb	r2, r3
 8010ef2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010ef6:	43db      	mvns	r3, r3
 8010ef8:	b25b      	sxtb	r3, r3
 8010efa:	4013      	ands	r3, r2
 8010efc:	b25b      	sxtb	r3, r3
 8010efe:	b2d9      	uxtb	r1, r3
 8010f00:	4a14      	ldr	r2, [pc, #80]	; (8010f54 <ssd1306_FillZone+0x118>)
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	4413      	add	r3, r2
 8010f06:	460a      	mov	r2, r1
 8010f08:	701a      	strb	r2, [r3, #0]
 8010f0a:	e00b      	b.n	8010f24 <ssd1306_FillZone+0xe8>
    		} else {
    			SSD1306_Buffer[i] |= b;
 8010f0c:	4a11      	ldr	r2, [pc, #68]	; (8010f54 <ssd1306_FillZone+0x118>)
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	4413      	add	r3, r2
 8010f12:	781a      	ldrb	r2, [r3, #0]
 8010f14:	7ffb      	ldrb	r3, [r7, #31]
 8010f16:	4313      	orrs	r3, r2
 8010f18:	b2d9      	uxtb	r1, r3
 8010f1a:	4a0e      	ldr	r2, [pc, #56]	; (8010f54 <ssd1306_FillZone+0x118>)
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	4413      	add	r3, r2
 8010f20:	460a      	mov	r2, r1
 8010f22:	701a      	strb	r2, [r3, #0]
    	for (xi = x; xi <x+wx; xi++) {
 8010f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f26:	3301      	adds	r3, #1
 8010f28:	627b      	str	r3, [r7, #36]	; 0x24
 8010f2a:	79fa      	ldrb	r2, [r7, #7]
 8010f2c:	797b      	ldrb	r3, [r7, #5]
 8010f2e:	4413      	add	r3, r2
 8010f30:	461a      	mov	r2, r3
 8010f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f34:	4293      	cmp	r3, r2
 8010f36:	d3ca      	bcc.n	8010ece <ssd1306_FillZone+0x92>
 8010f38:	e000      	b.n	8010f3c <ssd1306_FillZone+0x100>
    		if (i>=SSD1306_BUFFER_SIZE) break;
 8010f3a:	bf00      	nop
    for (yi = by; yi < bly; yi++) {
 8010f3c:	6a3b      	ldr	r3, [r7, #32]
 8010f3e:	3301      	adds	r3, #1
 8010f40:	623b      	str	r3, [r7, #32]
 8010f42:	697b      	ldr	r3, [r7, #20]
 8010f44:	6a3a      	ldr	r2, [r7, #32]
 8010f46:	429a      	cmp	r2, r3
 8010f48:	d397      	bcc.n	8010e7a <ssd1306_FillZone+0x3e>
    		}
    	}
    }

}
 8010f4a:	bf00      	nop
 8010f4c:	3728      	adds	r7, #40	; 0x28
 8010f4e:	46bd      	mov	sp, r7
 8010f50:	bc90      	pop	{r4, r7}
 8010f52:	4770      	bx	lr
 8010f54:	20004e74 	.word	0x20004e74

08010f58 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8010f58:	b580      	push	{r7, lr}
 8010f5a:	b082      	sub	sp, #8
 8010f5c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8010f5e:	2300      	movs	r3, #0
 8010f60:	71fb      	strb	r3, [r7, #7]
 8010f62:	e016      	b.n	8010f92 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8010f64:	79fb      	ldrb	r3, [r7, #7]
 8010f66:	3b50      	subs	r3, #80	; 0x50
 8010f68:	b2db      	uxtb	r3, r3
 8010f6a:	4618      	mov	r0, r3
 8010f6c:	f7ff fea8 	bl	8010cc0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8010f70:	2000      	movs	r0, #0
 8010f72:	f7ff fea5 	bl	8010cc0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8010f76:	2010      	movs	r0, #16
 8010f78:	f7ff fea2 	bl	8010cc0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8010f7c:	79fb      	ldrb	r3, [r7, #7]
 8010f7e:	01db      	lsls	r3, r3, #7
 8010f80:	4a07      	ldr	r2, [pc, #28]	; (8010fa0 <ssd1306_UpdateScreen+0x48>)
 8010f82:	4413      	add	r3, r2
 8010f84:	2180      	movs	r1, #128	; 0x80
 8010f86:	4618      	mov	r0, r3
 8010f88:	f7ff feb2 	bl	8010cf0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8010f8c:	79fb      	ldrb	r3, [r7, #7]
 8010f8e:	3301      	adds	r3, #1
 8010f90:	71fb      	strb	r3, [r7, #7]
 8010f92:	79fb      	ldrb	r3, [r7, #7]
 8010f94:	2b03      	cmp	r3, #3
 8010f96:	d9e5      	bls.n	8010f64 <ssd1306_UpdateScreen+0xc>
    }
}
 8010f98:	bf00      	nop
 8010f9a:	3708      	adds	r7, #8
 8010f9c:	46bd      	mov	sp, r7
 8010f9e:	bd80      	pop	{r7, pc}
 8010fa0:	20004e74 	.word	0x20004e74

08010fa4 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8010fa4:	b480      	push	{r7}
 8010fa6:	b083      	sub	sp, #12
 8010fa8:	af00      	add	r7, sp, #0
 8010faa:	4603      	mov	r3, r0
 8010fac:	71fb      	strb	r3, [r7, #7]
 8010fae:	460b      	mov	r3, r1
 8010fb0:	71bb      	strb	r3, [r7, #6]
 8010fb2:	4613      	mov	r3, r2
 8010fb4:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8010fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	db48      	blt.n	8011050 <ssd1306_DrawPixel+0xac>
 8010fbe:	79bb      	ldrb	r3, [r7, #6]
 8010fc0:	2b1f      	cmp	r3, #31
 8010fc2:	d845      	bhi.n	8011050 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8010fc4:	4b25      	ldr	r3, [pc, #148]	; (801105c <ssd1306_DrawPixel+0xb8>)
 8010fc6:	791b      	ldrb	r3, [r3, #4]
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d006      	beq.n	8010fda <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 8010fcc:	797b      	ldrb	r3, [r7, #5]
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	bf0c      	ite	eq
 8010fd2:	2301      	moveq	r3, #1
 8010fd4:	2300      	movne	r3, #0
 8010fd6:	b2db      	uxtb	r3, r3
 8010fd8:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 8010fda:	797b      	ldrb	r3, [r7, #5]
 8010fdc:	2b01      	cmp	r3, #1
 8010fde:	d11a      	bne.n	8011016 <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8010fe0:	79fa      	ldrb	r2, [r7, #7]
 8010fe2:	79bb      	ldrb	r3, [r7, #6]
 8010fe4:	08db      	lsrs	r3, r3, #3
 8010fe6:	b2d8      	uxtb	r0, r3
 8010fe8:	4603      	mov	r3, r0
 8010fea:	01db      	lsls	r3, r3, #7
 8010fec:	4413      	add	r3, r2
 8010fee:	4a1c      	ldr	r2, [pc, #112]	; (8011060 <ssd1306_DrawPixel+0xbc>)
 8010ff0:	5cd3      	ldrb	r3, [r2, r3]
 8010ff2:	b25a      	sxtb	r2, r3
 8010ff4:	79bb      	ldrb	r3, [r7, #6]
 8010ff6:	f003 0307 	and.w	r3, r3, #7
 8010ffa:	2101      	movs	r1, #1
 8010ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8011000:	b25b      	sxtb	r3, r3
 8011002:	4313      	orrs	r3, r2
 8011004:	b259      	sxtb	r1, r3
 8011006:	79fa      	ldrb	r2, [r7, #7]
 8011008:	4603      	mov	r3, r0
 801100a:	01db      	lsls	r3, r3, #7
 801100c:	4413      	add	r3, r2
 801100e:	b2c9      	uxtb	r1, r1
 8011010:	4a13      	ldr	r2, [pc, #76]	; (8011060 <ssd1306_DrawPixel+0xbc>)
 8011012:	54d1      	strb	r1, [r2, r3]
 8011014:	e01d      	b.n	8011052 <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8011016:	79fa      	ldrb	r2, [r7, #7]
 8011018:	79bb      	ldrb	r3, [r7, #6]
 801101a:	08db      	lsrs	r3, r3, #3
 801101c:	b2d8      	uxtb	r0, r3
 801101e:	4603      	mov	r3, r0
 8011020:	01db      	lsls	r3, r3, #7
 8011022:	4413      	add	r3, r2
 8011024:	4a0e      	ldr	r2, [pc, #56]	; (8011060 <ssd1306_DrawPixel+0xbc>)
 8011026:	5cd3      	ldrb	r3, [r2, r3]
 8011028:	b25a      	sxtb	r2, r3
 801102a:	79bb      	ldrb	r3, [r7, #6]
 801102c:	f003 0307 	and.w	r3, r3, #7
 8011030:	2101      	movs	r1, #1
 8011032:	fa01 f303 	lsl.w	r3, r1, r3
 8011036:	b25b      	sxtb	r3, r3
 8011038:	43db      	mvns	r3, r3
 801103a:	b25b      	sxtb	r3, r3
 801103c:	4013      	ands	r3, r2
 801103e:	b259      	sxtb	r1, r3
 8011040:	79fa      	ldrb	r2, [r7, #7]
 8011042:	4603      	mov	r3, r0
 8011044:	01db      	lsls	r3, r3, #7
 8011046:	4413      	add	r3, r2
 8011048:	b2c9      	uxtb	r1, r1
 801104a:	4a05      	ldr	r2, [pc, #20]	; (8011060 <ssd1306_DrawPixel+0xbc>)
 801104c:	54d1      	strb	r1, [r2, r3]
 801104e:	e000      	b.n	8011052 <ssd1306_DrawPixel+0xae>
        return;
 8011050:	bf00      	nop
    }
}
 8011052:	370c      	adds	r7, #12
 8011054:	46bd      	mov	sp, r7
 8011056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801105a:	4770      	bx	lr
 801105c:	20005074 	.word	0x20005074
 8011060:	20004e74 	.word	0x20004e74

08011064 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8011064:	b590      	push	{r4, r7, lr}
 8011066:	b089      	sub	sp, #36	; 0x24
 8011068:	af00      	add	r7, sp, #0
 801106a:	4604      	mov	r4, r0
 801106c:	1d38      	adds	r0, r7, #4
 801106e:	e880 0006 	stmia.w	r0, {r1, r2}
 8011072:	461a      	mov	r2, r3
 8011074:	4623      	mov	r3, r4
 8011076:	73fb      	strb	r3, [r7, #15]
 8011078:	4613      	mov	r3, r2
 801107a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 801107c:	7bfb      	ldrb	r3, [r7, #15]
 801107e:	2b1f      	cmp	r3, #31
 8011080:	d902      	bls.n	8011088 <ssd1306_WriteChar+0x24>
 8011082:	7bfb      	ldrb	r3, [r7, #15]
 8011084:	2b7e      	cmp	r3, #126	; 0x7e
 8011086:	d901      	bls.n	801108c <ssd1306_WriteChar+0x28>
        return 0;
 8011088:	2300      	movs	r3, #0
 801108a:	e06d      	b.n	8011168 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 801108c:	4b38      	ldr	r3, [pc, #224]	; (8011170 <ssd1306_WriteChar+0x10c>)
 801108e:	881b      	ldrh	r3, [r3, #0]
 8011090:	461a      	mov	r2, r3
 8011092:	793b      	ldrb	r3, [r7, #4]
 8011094:	4413      	add	r3, r2
 8011096:	2b80      	cmp	r3, #128	; 0x80
 8011098:	dc06      	bgt.n	80110a8 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 801109a:	4b35      	ldr	r3, [pc, #212]	; (8011170 <ssd1306_WriteChar+0x10c>)
 801109c:	885b      	ldrh	r3, [r3, #2]
 801109e:	461a      	mov	r2, r3
 80110a0:	797b      	ldrb	r3, [r7, #5]
 80110a2:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80110a4:	2b20      	cmp	r3, #32
 80110a6:	dd01      	ble.n	80110ac <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80110a8:	2300      	movs	r3, #0
 80110aa:	e05d      	b.n	8011168 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80110ac:	2300      	movs	r3, #0
 80110ae:	61fb      	str	r3, [r7, #28]
 80110b0:	e04c      	b.n	801114c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80110b2:	68ba      	ldr	r2, [r7, #8]
 80110b4:	7bfb      	ldrb	r3, [r7, #15]
 80110b6:	3b20      	subs	r3, #32
 80110b8:	7979      	ldrb	r1, [r7, #5]
 80110ba:	fb01 f303 	mul.w	r3, r1, r3
 80110be:	4619      	mov	r1, r3
 80110c0:	69fb      	ldr	r3, [r7, #28]
 80110c2:	440b      	add	r3, r1
 80110c4:	005b      	lsls	r3, r3, #1
 80110c6:	4413      	add	r3, r2
 80110c8:	881b      	ldrh	r3, [r3, #0]
 80110ca:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80110cc:	2300      	movs	r3, #0
 80110ce:	61bb      	str	r3, [r7, #24]
 80110d0:	e034      	b.n	801113c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80110d2:	697a      	ldr	r2, [r7, #20]
 80110d4:	69bb      	ldr	r3, [r7, #24]
 80110d6:	fa02 f303 	lsl.w	r3, r2, r3
 80110da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d012      	beq.n	8011108 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80110e2:	4b23      	ldr	r3, [pc, #140]	; (8011170 <ssd1306_WriteChar+0x10c>)
 80110e4:	881b      	ldrh	r3, [r3, #0]
 80110e6:	b2da      	uxtb	r2, r3
 80110e8:	69bb      	ldr	r3, [r7, #24]
 80110ea:	b2db      	uxtb	r3, r3
 80110ec:	4413      	add	r3, r2
 80110ee:	b2d8      	uxtb	r0, r3
 80110f0:	4b1f      	ldr	r3, [pc, #124]	; (8011170 <ssd1306_WriteChar+0x10c>)
 80110f2:	885b      	ldrh	r3, [r3, #2]
 80110f4:	b2da      	uxtb	r2, r3
 80110f6:	69fb      	ldr	r3, [r7, #28]
 80110f8:	b2db      	uxtb	r3, r3
 80110fa:	4413      	add	r3, r2
 80110fc:	b2db      	uxtb	r3, r3
 80110fe:	7bba      	ldrb	r2, [r7, #14]
 8011100:	4619      	mov	r1, r3
 8011102:	f7ff ff4f 	bl	8010fa4 <ssd1306_DrawPixel>
 8011106:	e016      	b.n	8011136 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8011108:	4b19      	ldr	r3, [pc, #100]	; (8011170 <ssd1306_WriteChar+0x10c>)
 801110a:	881b      	ldrh	r3, [r3, #0]
 801110c:	b2da      	uxtb	r2, r3
 801110e:	69bb      	ldr	r3, [r7, #24]
 8011110:	b2db      	uxtb	r3, r3
 8011112:	4413      	add	r3, r2
 8011114:	b2d8      	uxtb	r0, r3
 8011116:	4b16      	ldr	r3, [pc, #88]	; (8011170 <ssd1306_WriteChar+0x10c>)
 8011118:	885b      	ldrh	r3, [r3, #2]
 801111a:	b2da      	uxtb	r2, r3
 801111c:	69fb      	ldr	r3, [r7, #28]
 801111e:	b2db      	uxtb	r3, r3
 8011120:	4413      	add	r3, r2
 8011122:	b2d9      	uxtb	r1, r3
 8011124:	7bbb      	ldrb	r3, [r7, #14]
 8011126:	2b00      	cmp	r3, #0
 8011128:	bf0c      	ite	eq
 801112a:	2301      	moveq	r3, #1
 801112c:	2300      	movne	r3, #0
 801112e:	b2db      	uxtb	r3, r3
 8011130:	461a      	mov	r2, r3
 8011132:	f7ff ff37 	bl	8010fa4 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8011136:	69bb      	ldr	r3, [r7, #24]
 8011138:	3301      	adds	r3, #1
 801113a:	61bb      	str	r3, [r7, #24]
 801113c:	793b      	ldrb	r3, [r7, #4]
 801113e:	461a      	mov	r2, r3
 8011140:	69bb      	ldr	r3, [r7, #24]
 8011142:	4293      	cmp	r3, r2
 8011144:	d3c5      	bcc.n	80110d2 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8011146:	69fb      	ldr	r3, [r7, #28]
 8011148:	3301      	adds	r3, #1
 801114a:	61fb      	str	r3, [r7, #28]
 801114c:	797b      	ldrb	r3, [r7, #5]
 801114e:	461a      	mov	r2, r3
 8011150:	69fb      	ldr	r3, [r7, #28]
 8011152:	4293      	cmp	r3, r2
 8011154:	d3ad      	bcc.n	80110b2 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8011156:	4b06      	ldr	r3, [pc, #24]	; (8011170 <ssd1306_WriteChar+0x10c>)
 8011158:	881a      	ldrh	r2, [r3, #0]
 801115a:	793b      	ldrb	r3, [r7, #4]
 801115c:	b29b      	uxth	r3, r3
 801115e:	4413      	add	r3, r2
 8011160:	b29a      	uxth	r2, r3
 8011162:	4b03      	ldr	r3, [pc, #12]	; (8011170 <ssd1306_WriteChar+0x10c>)
 8011164:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8011166:	7bfb      	ldrb	r3, [r7, #15]
}
 8011168:	4618      	mov	r0, r3
 801116a:	3724      	adds	r7, #36	; 0x24
 801116c:	46bd      	mov	sp, r7
 801116e:	bd90      	pop	{r4, r7, pc}
 8011170:	20005074 	.word	0x20005074

08011174 <ssd1306_WriteString>:
    }

    // Everything ok
    return *str;
}
char ssd1306_WriteString(const char* str, FontDef Font, SSD1306_COLOR color) {
 8011174:	b580      	push	{r7, lr}
 8011176:	b084      	sub	sp, #16
 8011178:	af00      	add	r7, sp, #0
 801117a:	60f8      	str	r0, [r7, #12]
 801117c:	1d38      	adds	r0, r7, #4
 801117e:	e880 0006 	stmia.w	r0, {r1, r2}
 8011182:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8011184:	e012      	b.n	80111ac <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	7818      	ldrb	r0, [r3, #0]
 801118a:	78fb      	ldrb	r3, [r7, #3]
 801118c:	1d3a      	adds	r2, r7, #4
 801118e:	ca06      	ldmia	r2, {r1, r2}
 8011190:	f7ff ff68 	bl	8011064 <ssd1306_WriteChar>
 8011194:	4603      	mov	r3, r0
 8011196:	461a      	mov	r2, r3
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	781b      	ldrb	r3, [r3, #0]
 801119c:	429a      	cmp	r2, r3
 801119e:	d002      	beq.n	80111a6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	781b      	ldrb	r3, [r3, #0]
 80111a4:	e008      	b.n	80111b8 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 80111a6:	68fb      	ldr	r3, [r7, #12]
 80111a8:	3301      	adds	r3, #1
 80111aa:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	781b      	ldrb	r3, [r3, #0]
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d1e8      	bne.n	8011186 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	781b      	ldrb	r3, [r3, #0]
}
 80111b8:	4618      	mov	r0, r3
 80111ba:	3710      	adds	r7, #16
 80111bc:	46bd      	mov	sp, r7
 80111be:	bd80      	pop	{r7, pc}

080111c0 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80111c0:	b480      	push	{r7}
 80111c2:	b083      	sub	sp, #12
 80111c4:	af00      	add	r7, sp, #0
 80111c6:	4603      	mov	r3, r0
 80111c8:	460a      	mov	r2, r1
 80111ca:	71fb      	strb	r3, [r7, #7]
 80111cc:	4613      	mov	r3, r2
 80111ce:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80111d0:	79fb      	ldrb	r3, [r7, #7]
 80111d2:	b29a      	uxth	r2, r3
 80111d4:	4b05      	ldr	r3, [pc, #20]	; (80111ec <ssd1306_SetCursor+0x2c>)
 80111d6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80111d8:	79bb      	ldrb	r3, [r7, #6]
 80111da:	b29a      	uxth	r2, r3
 80111dc:	4b03      	ldr	r3, [pc, #12]	; (80111ec <ssd1306_SetCursor+0x2c>)
 80111de:	805a      	strh	r2, [r3, #2]
}
 80111e0:	bf00      	nop
 80111e2:	370c      	adds	r7, #12
 80111e4:	46bd      	mov	sp, r7
 80111e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ea:	4770      	bx	lr
 80111ec:	20005074 	.word	0x20005074

080111f0 <ssd1306_GetCursorX>:

uint8_t ssd1306_GetCursorX(void)
{
 80111f0:	b480      	push	{r7}
 80111f2:	af00      	add	r7, sp, #0
	return SSD1306.CurrentX;
 80111f4:	4b03      	ldr	r3, [pc, #12]	; (8011204 <ssd1306_GetCursorX+0x14>)
 80111f6:	881b      	ldrh	r3, [r3, #0]
 80111f8:	b2db      	uxtb	r3, r3
}
 80111fa:	4618      	mov	r0, r3
 80111fc:	46bd      	mov	sp, r7
 80111fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011202:	4770      	bx	lr
 8011204:	20005074 	.word	0x20005074

08011208 <ssd1306_GetCursorY>:
uint8_t ssd1306_GetCursorY(void)
{
 8011208:	b480      	push	{r7}
 801120a:	af00      	add	r7, sp, #0
	return SSD1306.CurrentY;
 801120c:	4b03      	ldr	r3, [pc, #12]	; (801121c <ssd1306_GetCursorY+0x14>)
 801120e:	885b      	ldrh	r3, [r3, #2]
 8011210:	b2db      	uxtb	r3, r3
}
 8011212:	4618      	mov	r0, r3
 8011214:	46bd      	mov	sp, r7
 8011216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801121a:	4770      	bx	lr
 801121c:	20005074 	.word	0x20005074

08011220 <ssd1306_Line>:

// Draw line by Bresenhem's algorithm
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8011220:	b590      	push	{r4, r7, lr}
 8011222:	b089      	sub	sp, #36	; 0x24
 8011224:	af00      	add	r7, sp, #0
 8011226:	4604      	mov	r4, r0
 8011228:	4608      	mov	r0, r1
 801122a:	4611      	mov	r1, r2
 801122c:	461a      	mov	r2, r3
 801122e:	4623      	mov	r3, r4
 8011230:	71fb      	strb	r3, [r7, #7]
 8011232:	4603      	mov	r3, r0
 8011234:	71bb      	strb	r3, [r7, #6]
 8011236:	460b      	mov	r3, r1
 8011238:	717b      	strb	r3, [r7, #5]
 801123a:	4613      	mov	r3, r2
 801123c:	713b      	strb	r3, [r7, #4]
  int32_t deltaX = abs(x2 - x1);
 801123e:	797a      	ldrb	r2, [r7, #5]
 8011240:	79fb      	ldrb	r3, [r7, #7]
 8011242:	1ad3      	subs	r3, r2, r3
 8011244:	2b00      	cmp	r3, #0
 8011246:	bfb8      	it	lt
 8011248:	425b      	neglt	r3, r3
 801124a:	61bb      	str	r3, [r7, #24]
  int32_t deltaY = abs(y2 - y1);
 801124c:	793a      	ldrb	r2, [r7, #4]
 801124e:	79bb      	ldrb	r3, [r7, #6]
 8011250:	1ad3      	subs	r3, r2, r3
 8011252:	2b00      	cmp	r3, #0
 8011254:	bfb8      	it	lt
 8011256:	425b      	neglt	r3, r3
 8011258:	617b      	str	r3, [r7, #20]
  int32_t signX = ((x1 < x2) ? 1 : -1);
 801125a:	79fa      	ldrb	r2, [r7, #7]
 801125c:	797b      	ldrb	r3, [r7, #5]
 801125e:	429a      	cmp	r2, r3
 8011260:	d201      	bcs.n	8011266 <ssd1306_Line+0x46>
 8011262:	2301      	movs	r3, #1
 8011264:	e001      	b.n	801126a <ssd1306_Line+0x4a>
 8011266:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801126a:	613b      	str	r3, [r7, #16]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 801126c:	79ba      	ldrb	r2, [r7, #6]
 801126e:	793b      	ldrb	r3, [r7, #4]
 8011270:	429a      	cmp	r2, r3
 8011272:	d201      	bcs.n	8011278 <ssd1306_Line+0x58>
 8011274:	2301      	movs	r3, #1
 8011276:	e001      	b.n	801127c <ssd1306_Line+0x5c>
 8011278:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801127c:	60fb      	str	r3, [r7, #12]
  int32_t error = deltaX - deltaY;
 801127e:	69ba      	ldr	r2, [r7, #24]
 8011280:	697b      	ldr	r3, [r7, #20]
 8011282:	1ad3      	subs	r3, r2, r3
 8011284:	61fb      	str	r3, [r7, #28]
  int32_t error2;
    
  ssd1306_DrawPixel(x2, y2, color);
 8011286:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801128a:	7939      	ldrb	r1, [r7, #4]
 801128c:	797b      	ldrb	r3, [r7, #5]
 801128e:	4618      	mov	r0, r3
 8011290:	f7ff fe88 	bl	8010fa4 <ssd1306_DrawPixel>
    while((x1 != x2) || (y1 != y2))
 8011294:	e024      	b.n	80112e0 <ssd1306_Line+0xc0>
    {
    ssd1306_DrawPixel(x1, y1, color);
 8011296:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801129a:	79b9      	ldrb	r1, [r7, #6]
 801129c:	79fb      	ldrb	r3, [r7, #7]
 801129e:	4618      	mov	r0, r3
 80112a0:	f7ff fe80 	bl	8010fa4 <ssd1306_DrawPixel>
    error2 = error * 2;
 80112a4:	69fb      	ldr	r3, [r7, #28]
 80112a6:	005b      	lsls	r3, r3, #1
 80112a8:	60bb      	str	r3, [r7, #8]
    if(error2 > -deltaY)
 80112aa:	697b      	ldr	r3, [r7, #20]
 80112ac:	425b      	negs	r3, r3
 80112ae:	68ba      	ldr	r2, [r7, #8]
 80112b0:	429a      	cmp	r2, r3
 80112b2:	dd08      	ble.n	80112c6 <ssd1306_Line+0xa6>
    {
      error -= deltaY;
 80112b4:	69fa      	ldr	r2, [r7, #28]
 80112b6:	697b      	ldr	r3, [r7, #20]
 80112b8:	1ad3      	subs	r3, r2, r3
 80112ba:	61fb      	str	r3, [r7, #28]
      x1 += signX;
 80112bc:	693b      	ldr	r3, [r7, #16]
 80112be:	b2da      	uxtb	r2, r3
 80112c0:	79fb      	ldrb	r3, [r7, #7]
 80112c2:	4413      	add	r3, r2
 80112c4:	71fb      	strb	r3, [r7, #7]
    else
    {
    /*nothing to do*/
    }
        
    if(error2 < deltaX)
 80112c6:	68ba      	ldr	r2, [r7, #8]
 80112c8:	69bb      	ldr	r3, [r7, #24]
 80112ca:	429a      	cmp	r2, r3
 80112cc:	da08      	bge.n	80112e0 <ssd1306_Line+0xc0>
    {
      error += deltaX;
 80112ce:	69fa      	ldr	r2, [r7, #28]
 80112d0:	69bb      	ldr	r3, [r7, #24]
 80112d2:	4413      	add	r3, r2
 80112d4:	61fb      	str	r3, [r7, #28]
      y1 += signY;
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	b2da      	uxtb	r2, r3
 80112da:	79bb      	ldrb	r3, [r7, #6]
 80112dc:	4413      	add	r3, r2
 80112de:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2))
 80112e0:	79fa      	ldrb	r2, [r7, #7]
 80112e2:	797b      	ldrb	r3, [r7, #5]
 80112e4:	429a      	cmp	r2, r3
 80112e6:	d1d6      	bne.n	8011296 <ssd1306_Line+0x76>
 80112e8:	79ba      	ldrb	r2, [r7, #6]
 80112ea:	793b      	ldrb	r3, [r7, #4]
 80112ec:	429a      	cmp	r2, r3
 80112ee:	d1d2      	bne.n	8011296 <ssd1306_Line+0x76>
    else
    {
    /*nothing to do*/
    }
  }
  return;
 80112f0:	bf00      	nop
}
 80112f2:	3724      	adds	r7, #36	; 0x24
 80112f4:	46bd      	mov	sp, r7
 80112f6:	bd90      	pop	{r4, r7, pc}

080112f8 <ssd1306_DrawRectangle>:

    return;
}

//Draw rectangle
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80112f8:	b590      	push	{r4, r7, lr}
 80112fa:	b085      	sub	sp, #20
 80112fc:	af02      	add	r7, sp, #8
 80112fe:	4604      	mov	r4, r0
 8011300:	4608      	mov	r0, r1
 8011302:	4611      	mov	r1, r2
 8011304:	461a      	mov	r2, r3
 8011306:	4623      	mov	r3, r4
 8011308:	71fb      	strb	r3, [r7, #7]
 801130a:	4603      	mov	r3, r0
 801130c:	71bb      	strb	r3, [r7, #6]
 801130e:	460b      	mov	r3, r1
 8011310:	717b      	strb	r3, [r7, #5]
 8011312:	4613      	mov	r3, r2
 8011314:	713b      	strb	r3, [r7, #4]
  ssd1306_Line(x1,y1,x2,y1,color);
 8011316:	79bc      	ldrb	r4, [r7, #6]
 8011318:	797a      	ldrb	r2, [r7, #5]
 801131a:	79b9      	ldrb	r1, [r7, #6]
 801131c:	79f8      	ldrb	r0, [r7, #7]
 801131e:	7e3b      	ldrb	r3, [r7, #24]
 8011320:	9300      	str	r3, [sp, #0]
 8011322:	4623      	mov	r3, r4
 8011324:	f7ff ff7c 	bl	8011220 <ssd1306_Line>
  ssd1306_Line(x2,y1,x2,y2,color);
 8011328:	793c      	ldrb	r4, [r7, #4]
 801132a:	797a      	ldrb	r2, [r7, #5]
 801132c:	79b9      	ldrb	r1, [r7, #6]
 801132e:	7978      	ldrb	r0, [r7, #5]
 8011330:	7e3b      	ldrb	r3, [r7, #24]
 8011332:	9300      	str	r3, [sp, #0]
 8011334:	4623      	mov	r3, r4
 8011336:	f7ff ff73 	bl	8011220 <ssd1306_Line>
  ssd1306_Line(x2,y2,x1,y2,color);
 801133a:	793c      	ldrb	r4, [r7, #4]
 801133c:	79fa      	ldrb	r2, [r7, #7]
 801133e:	7939      	ldrb	r1, [r7, #4]
 8011340:	7978      	ldrb	r0, [r7, #5]
 8011342:	7e3b      	ldrb	r3, [r7, #24]
 8011344:	9300      	str	r3, [sp, #0]
 8011346:	4623      	mov	r3, r4
 8011348:	f7ff ff6a 	bl	8011220 <ssd1306_Line>
  ssd1306_Line(x1,y2,x1,y1,color);
 801134c:	79bc      	ldrb	r4, [r7, #6]
 801134e:	79fa      	ldrb	r2, [r7, #7]
 8011350:	7939      	ldrb	r1, [r7, #4]
 8011352:	79f8      	ldrb	r0, [r7, #7]
 8011354:	7e3b      	ldrb	r3, [r7, #24]
 8011356:	9300      	str	r3, [sp, #0]
 8011358:	4623      	mov	r3, r4
 801135a:	f7ff ff61 	bl	8011220 <ssd1306_Line>

  return;
 801135e:	bf00      	nop
}
 8011360:	370c      	adds	r7, #12
 8011362:	46bd      	mov	sp, r7
 8011364:	bd90      	pop	{r4, r7, pc}

08011366 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8011366:	b580      	push	{r7, lr}
 8011368:	b084      	sub	sp, #16
 801136a:	af00      	add	r7, sp, #0
 801136c:	4603      	mov	r3, r0
 801136e:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8011370:	2381      	movs	r3, #129	; 0x81
 8011372:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8011374:	7bfb      	ldrb	r3, [r7, #15]
 8011376:	4618      	mov	r0, r3
 8011378:	f7ff fca2 	bl	8010cc0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 801137c:	79fb      	ldrb	r3, [r7, #7]
 801137e:	4618      	mov	r0, r3
 8011380:	f7ff fc9e 	bl	8010cc0 <ssd1306_WriteCommand>
}
 8011384:	bf00      	nop
 8011386:	3710      	adds	r7, #16
 8011388:	46bd      	mov	sp, r7
 801138a:	bd80      	pop	{r7, pc}

0801138c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 801138c:	b580      	push	{r7, lr}
 801138e:	b084      	sub	sp, #16
 8011390:	af00      	add	r7, sp, #0
 8011392:	4603      	mov	r3, r0
 8011394:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8011396:	79fb      	ldrb	r3, [r7, #7]
 8011398:	2b00      	cmp	r3, #0
 801139a:	d005      	beq.n	80113a8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 801139c:	23af      	movs	r3, #175	; 0xaf
 801139e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80113a0:	4b08      	ldr	r3, [pc, #32]	; (80113c4 <ssd1306_SetDisplayOn+0x38>)
 80113a2:	2201      	movs	r2, #1
 80113a4:	719a      	strb	r2, [r3, #6]
 80113a6:	e004      	b.n	80113b2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80113a8:	23ae      	movs	r3, #174	; 0xae
 80113aa:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80113ac:	4b05      	ldr	r3, [pc, #20]	; (80113c4 <ssd1306_SetDisplayOn+0x38>)
 80113ae:	2200      	movs	r2, #0
 80113b0:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 80113b2:	7bfb      	ldrb	r3, [r7, #15]
 80113b4:	4618      	mov	r0, r3
 80113b6:	f7ff fc83 	bl	8010cc0 <ssd1306_WriteCommand>
}
 80113ba:	bf00      	nop
 80113bc:	3710      	adds	r7, #16
 80113be:	46bd      	mov	sp, r7
 80113c0:	bd80      	pop	{r7, pc}
 80113c2:	bf00      	nop
 80113c4:	20005074 	.word	0x20005074

080113c8 <itm_debug1>:
{
 80113c8:	b580      	push	{r7, lr}
 80113ca:	b086      	sub	sp, #24
 80113cc:	af02      	add	r7, sp, #8
 80113ce:	60f8      	str	r0, [r7, #12]
 80113d0:	60b9      	str	r1, [r7, #8]
 80113d2:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 80113d4:	4b08      	ldr	r3, [pc, #32]	; (80113f8 <itm_debug1+0x30>)
 80113d6:	681a      	ldr	r2, [r3, #0]
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	4013      	ands	r3, r2
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d007      	beq.n	80113f0 <itm_debug1+0x28>
 80113e0:	2301      	movs	r3, #1
 80113e2:	9300      	str	r3, [sp, #0]
 80113e4:	2300      	movs	r3, #0
 80113e6:	2200      	movs	r2, #0
 80113e8:	6879      	ldr	r1, [r7, #4]
 80113ea:	68b8      	ldr	r0, [r7, #8]
 80113ec:	f005 fa70 	bl	80168d0 <_itm_debug3>
}
 80113f0:	bf00      	nop
 80113f2:	3710      	adds	r7, #16
 80113f4:	46bd      	mov	sp, r7
 80113f6:	bd80      	pop	{r7, pc}
 80113f8:	2000047c 	.word	0x2000047c

080113fc <itm_debug2>:
{
 80113fc:	b580      	push	{r7, lr}
 80113fe:	b086      	sub	sp, #24
 8011400:	af02      	add	r7, sp, #8
 8011402:	60f8      	str	r0, [r7, #12]
 8011404:	60b9      	str	r1, [r7, #8]
 8011406:	607a      	str	r2, [r7, #4]
 8011408:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, 0, 2);
 801140a:	4b09      	ldr	r3, [pc, #36]	; (8011430 <itm_debug2+0x34>)
 801140c:	681a      	ldr	r2, [r3, #0]
 801140e:	68fb      	ldr	r3, [r7, #12]
 8011410:	4013      	ands	r3, r2
 8011412:	2b00      	cmp	r3, #0
 8011414:	d007      	beq.n	8011426 <itm_debug2+0x2a>
 8011416:	2302      	movs	r3, #2
 8011418:	9300      	str	r3, [sp, #0]
 801141a:	2300      	movs	r3, #0
 801141c:	683a      	ldr	r2, [r7, #0]
 801141e:	6879      	ldr	r1, [r7, #4]
 8011420:	68b8      	ldr	r0, [r7, #8]
 8011422:	f005 fa55 	bl	80168d0 <_itm_debug3>
}
 8011426:	bf00      	nop
 8011428:	3710      	adds	r7, #16
 801142a:	46bd      	mov	sp, r7
 801142c:	bd80      	pop	{r7, pc}
 801142e:	bf00      	nop
 8011430:	2000047c 	.word	0x2000047c

08011434 <ina3221_read16>:
uint16_t ina3221_errors = 0;
extern uint32_t GetCurrentMicro(void);


static uint16_t ina3221_read16(int a, int reg)
{
 8011434:	b580      	push	{r7, lr}
 8011436:	b088      	sub	sp, #32
 8011438:	af04      	add	r7, sp, #16
 801143a:	6078      	str	r0, [r7, #4]
 801143c:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;
	uint16_t w16;
    status = HAL_I2C_Mem_Read(&INA3221_I2C_PORT, a<<1, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&w16, 2, HAL_MAX_DELAY);
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	b29b      	uxth	r3, r3
 8011442:	005b      	lsls	r3, r3, #1
 8011444:	b299      	uxth	r1, r3
 8011446:	683b      	ldr	r3, [r7, #0]
 8011448:	b29a      	uxth	r2, r3
 801144a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801144e:	9302      	str	r3, [sp, #8]
 8011450:	2302      	movs	r3, #2
 8011452:	9301      	str	r3, [sp, #4]
 8011454:	f107 030c 	add.w	r3, r7, #12
 8011458:	9300      	str	r3, [sp, #0]
 801145a:	2301      	movs	r3, #1
 801145c:	480b      	ldr	r0, [pc, #44]	; (801148c <ina3221_read16+0x58>)
 801145e:	f7f2 fa39 	bl	80038d4 <HAL_I2C_Mem_Read>
 8011462:	4603      	mov	r3, r0
 8011464:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) {
 8011466:	7bfb      	ldrb	r3, [r7, #15]
 8011468:	2b00      	cmp	r3, #0
 801146a:	d007      	beq.n	801147c <ina3221_read16+0x48>
    	ina3221_errors++;
 801146c:	4b08      	ldr	r3, [pc, #32]	; (8011490 <ina3221_read16+0x5c>)
 801146e:	881b      	ldrh	r3, [r3, #0]
 8011470:	3301      	adds	r3, #1
 8011472:	b29a      	uxth	r2, r3
 8011474:	4b06      	ldr	r3, [pc, #24]	; (8011490 <ina3221_read16+0x5c>)
 8011476:	801a      	strh	r2, [r3, #0]
    	return 0;
 8011478:	2300      	movs	r3, #0
 801147a:	e002      	b.n	8011482 <ina3221_read16+0x4e>
    } else {
    	return __builtin_bswap16(w16);
 801147c:	89bb      	ldrh	r3, [r7, #12]
 801147e:	ba5b      	rev16	r3, r3
 8011480:	b29b      	uxth	r3, r3
    }
}
 8011482:	4618      	mov	r0, r3
 8011484:	3710      	adds	r7, #16
 8011486:	46bd      	mov	sp, r7
 8011488:	bd80      	pop	{r7, pc}
 801148a:	bf00      	nop
 801148c:	2000539c 	.word	0x2000539c
 8011490:	20005080 	.word	0x20005080

08011494 <ina3221_write16>:

static void ina3221_write16(int a, int reg, uint16_t v)
{
 8011494:	b580      	push	{r7, lr}
 8011496:	b08a      	sub	sp, #40	; 0x28
 8011498:	af04      	add	r7, sp, #16
 801149a:	60f8      	str	r0, [r7, #12]
 801149c:	60b9      	str	r1, [r7, #8]
 801149e:	4613      	mov	r3, r2
 80114a0:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status;
	uint16_t w16;
	if ((1)) w16 = __builtin_bswap16(v);
 80114a2:	88fb      	ldrh	r3, [r7, #6]
 80114a4:	ba5b      	rev16	r3, r3
 80114a6:	b29b      	uxth	r3, r3
 80114a8:	82bb      	strh	r3, [r7, #20]
	else w16=v;
    status = HAL_I2C_Mem_Write(&INA3221_I2C_PORT, a<<1, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&w16, 2, HAL_MAX_DELAY);
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	b29b      	uxth	r3, r3
 80114ae:	005b      	lsls	r3, r3, #1
 80114b0:	b299      	uxth	r1, r3
 80114b2:	68bb      	ldr	r3, [r7, #8]
 80114b4:	b29a      	uxth	r2, r3
 80114b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80114ba:	9302      	str	r3, [sp, #8]
 80114bc:	2302      	movs	r3, #2
 80114be:	9301      	str	r3, [sp, #4]
 80114c0:	f107 0314 	add.w	r3, r7, #20
 80114c4:	9300      	str	r3, [sp, #0]
 80114c6:	2301      	movs	r3, #1
 80114c8:	4808      	ldr	r0, [pc, #32]	; (80114ec <ina3221_write16+0x58>)
 80114ca:	f7f2 f909 	bl	80036e0 <HAL_I2C_Mem_Write>
 80114ce:	4603      	mov	r3, r0
 80114d0:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) {
 80114d2:	7dfb      	ldrb	r3, [r7, #23]
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d005      	beq.n	80114e4 <ina3221_write16+0x50>
       	ina3221_errors++;
 80114d8:	4b05      	ldr	r3, [pc, #20]	; (80114f0 <ina3221_write16+0x5c>)
 80114da:	881b      	ldrh	r3, [r3, #0]
 80114dc:	3301      	adds	r3, #1
 80114de:	b29a      	uxth	r2, r3
 80114e0:	4b03      	ldr	r3, [pc, #12]	; (80114f0 <ina3221_write16+0x5c>)
 80114e2:	801a      	strh	r2, [r3, #0]
    }
}
 80114e4:	bf00      	nop
 80114e6:	3718      	adds	r7, #24
 80114e8:	46bd      	mov	sp, r7
 80114ea:	bd80      	pop	{r7, pc}
 80114ec:	2000539c 	.word	0x2000539c
 80114f0:	20005080 	.word	0x20005080

080114f4 <ina3221_configure>:

uint8_t ina3221_devices[4] = {0, 0, 0, 0};  // 1 if device is present
static uint16_t ina_conf_val = 0;

static void ina3221_configure(int a, int continuous)
{
 80114f4:	b580      	push	{r7, lr}
 80114f6:	b084      	sub	sp, #16
 80114f8:	af00      	add	r7, sp, #0
 80114fa:	6078      	str	r0, [r7, #4]
 80114fc:	6039      	str	r1, [r7, #0]
	//HAL_StatusTypeDef status;
	uint16_t w16;

    uint16_t mid = ina3221_read16(a, INA3221_REG_MANUFACTURER_ID);
 80114fe:	21fe      	movs	r1, #254	; 0xfe
 8011500:	6878      	ldr	r0, [r7, #4]
 8011502:	f7ff ff97 	bl	8011434 <ina3221_read16>
 8011506:	4603      	mov	r3, r0
 8011508:	81bb      	strh	r3, [r7, #12]
     // 0x5449
    uint16_t did = ina3221_read16(a,  INA3221_REG_DIE_ID);
 801150a:	21ff      	movs	r1, #255	; 0xff
 801150c:	6878      	ldr	r0, [r7, #4]
 801150e:	f7ff ff91 	bl	8011434 <ina3221_read16>
 8011512:	4603      	mov	r3, r0
 8011514:	817b      	strh	r3, [r7, #10]
    // 0x3220


    if ((1)) {
    	w16 = INA3221_CONF_RESET;
 8011516:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801151a:	81fb      	strh	r3, [r7, #14]
    	ina3221_write16(a, INA3221_REG_CONFIG, w16);
 801151c:	89fb      	ldrh	r3, [r7, #14]
 801151e:	461a      	mov	r2, r3
 8011520:	2100      	movs	r1, #0
 8011522:	6878      	ldr	r0, [r7, #4]
 8011524:	f7ff ffb6 	bl	8011494 <ina3221_write16>
    	osDelay(100*5);
 8011528:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801152c:	f7fb fe58 	bl	800d1e0 <osDelay>
    	//if ((1)) return;
    }

    w16 = INA3221_CONF_CH1_EN | INA3221_CONF_CH2_EN | INA3221_CONF_CH3_EN
 8011530:	f247 0301 	movw	r3, #28673	; 0x7001
 8011534:	81fb      	strh	r3, [r7, #14]
    		| INA3221_CONF_VS_CT_140u | INA3221_CONF_AVG1
			| INA3221_CONF_MODE_SHUNT;
    if (continuous) w16 |= INA3221_CONF_MODE_CONTINUOUS;
 8011536:	683b      	ldr	r3, [r7, #0]
 8011538:	2b00      	cmp	r3, #0
 801153a:	d003      	beq.n	8011544 <ina3221_configure+0x50>
 801153c:	89fb      	ldrh	r3, [r7, #14]
 801153e:	f043 0304 	orr.w	r3, r3, #4
 8011542:	81fb      	strh	r3, [r7, #14]
	ina3221_write16(a, INA3221_REG_CONFIG, w16);
 8011544:	89fb      	ldrh	r3, [r7, #14]
 8011546:	461a      	mov	r2, r3
 8011548:	2100      	movs	r1, #0
 801154a:	6878      	ldr	r0, [r7, #4]
 801154c:	f7ff ffa2 	bl	8011494 <ina3221_write16>
	ina_conf_val = w16;
 8011550:	4a03      	ldr	r2, [pc, #12]	; (8011560 <ina3221_configure+0x6c>)
 8011552:	89fb      	ldrh	r3, [r7, #14]
 8011554:	8013      	strh	r3, [r2, #0]
    if ((0)) osDelay(100*1);

    //if ((0)) ina3221_start_read();

    return;
 8011556:	bf00      	nop
}
 8011558:	3710      	adds	r7, #16
 801155a:	46bd      	mov	sp, r7
 801155c:	bd80      	pop	{r7, pc}
 801155e:	bf00      	nop
 8011560:	20005088 	.word	0x20005088

08011564 <ina3221_trigger_conversion>:
// ----------------------------------------------------------------------------



void ina3221_trigger_conversion(void)
{
 8011564:	b580      	push	{r7, lr}
 8011566:	b084      	sub	sp, #16
 8011568:	af00      	add	r7, sp, #0
	if (disable_ina3221) return;
 801156a:	4b1c      	ldr	r3, [pc, #112]	; (80115dc <ina3221_trigger_conversion+0x78>)
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	2b00      	cmp	r3, #0
 8011570:	d130      	bne.n	80115d4 <ina3221_trigger_conversion+0x70>
	uint32_t t0trig = GetCurrentMicro();
 8011572:	f7ef f877 	bl	8000664 <GetCurrentMicro>
 8011576:	60b8      	str	r0, [r7, #8]
	for (int dev = 0; dev<3; dev++) {
 8011578:	2300      	movs	r3, #0
 801157a:	60fb      	str	r3, [r7, #12]
 801157c:	e019      	b.n	80115b2 <ina3221_trigger_conversion+0x4e>
		if (!ina3221_devices[dev]) continue;
 801157e:	4a18      	ldr	r2, [pc, #96]	; (80115e0 <ina3221_trigger_conversion+0x7c>)
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	4413      	add	r3, r2
 8011584:	781b      	ldrb	r3, [r3, #0]
 8011586:	2b00      	cmp	r3, #0
 8011588:	d00f      	beq.n	80115aa <ina3221_trigger_conversion+0x46>
		int addr = 0x40 + dev;
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	3340      	adds	r3, #64	; 0x40
 801158e:	603b      	str	r3, [r7, #0]
		ina3221_write16(addr, INA3221_REG_CONFIG, ina_conf_val);
 8011590:	4b14      	ldr	r3, [pc, #80]	; (80115e4 <ina3221_trigger_conversion+0x80>)
 8011592:	881b      	ldrh	r3, [r3, #0]
 8011594:	461a      	mov	r2, r3
 8011596:	2100      	movs	r1, #0
 8011598:	6838      	ldr	r0, [r7, #0]
 801159a:	f7ff ff7b 	bl	8011494 <ina3221_write16>
		itm_debug1(DBG_INA3221, "ina/Tr", addr);
 801159e:	683a      	ldr	r2, [r7, #0]
 80115a0:	4911      	ldr	r1, [pc, #68]	; (80115e8 <ina3221_trigger_conversion+0x84>)
 80115a2:	2020      	movs	r0, #32
 80115a4:	f7ff ff10 	bl	80113c8 <itm_debug1>
 80115a8:	e000      	b.n	80115ac <ina3221_trigger_conversion+0x48>
		if (!ina3221_devices[dev]) continue;
 80115aa:	bf00      	nop
	for (int dev = 0; dev<3; dev++) {
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	3301      	adds	r3, #1
 80115b0:	60fb      	str	r3, [r7, #12]
 80115b2:	68fb      	ldr	r3, [r7, #12]
 80115b4:	2b02      	cmp	r3, #2
 80115b6:	dde2      	ble.n	801157e <ina3221_trigger_conversion+0x1a>
	}
	uint32_t ttrig = GetCurrentMicro() - t0trig;
 80115b8:	f7ef f854 	bl	8000664 <GetCurrentMicro>
 80115bc:	4602      	mov	r2, r0
 80115be:	68bb      	ldr	r3, [r7, #8]
 80115c0:	1ad3      	subs	r3, r2, r3
 80115c2:	607b      	str	r3, [r7, #4]
	itm_debug2(DBG_INA3221, "ina trg", ttrig, ina3221_errors);
 80115c4:	687a      	ldr	r2, [r7, #4]
 80115c6:	4b09      	ldr	r3, [pc, #36]	; (80115ec <ina3221_trigger_conversion+0x88>)
 80115c8:	881b      	ldrh	r3, [r3, #0]
 80115ca:	4909      	ldr	r1, [pc, #36]	; (80115f0 <ina3221_trigger_conversion+0x8c>)
 80115cc:	2020      	movs	r0, #32
 80115ce:	f7ff ff15 	bl	80113fc <itm_debug2>
 80115d2:	e000      	b.n	80115d6 <ina3221_trigger_conversion+0x72>
	if (disable_ina3221) return;
 80115d4:	bf00      	nop
}
 80115d6:	3710      	adds	r7, #16
 80115d8:	46bd      	mov	sp, r7
 80115da:	bd80      	pop	{r7, pc}
 80115dc:	2000507c 	.word	0x2000507c
 80115e0:	20005084 	.word	0x20005084
 80115e4:	20005088 	.word	0x20005088
 80115e8:	08016fc4 	.word	0x08016fc4
 80115ec:	20005080 	.word	0x20005080
 80115f0:	08016fcc 	.word	0x08016fcc

080115f4 <ina3221_init>:

void ina3221_init(int continuous)
{
 80115f4:	b580      	push	{r7, lr}
 80115f6:	b086      	sub	sp, #24
 80115f8:	af00      	add	r7, sp, #0
 80115fa:	6078      	str	r0, [r7, #4]
	if (disable_ina3221) return;
 80115fc:	4b1b      	ldr	r3, [pc, #108]	; (801166c <ina3221_init+0x78>)
 80115fe:	681b      	ldr	r3, [r3, #0]
 8011600:	2b00      	cmp	r3, #0
 8011602:	d12e      	bne.n	8011662 <ina3221_init+0x6e>
	//I2C_Scan();
	for (int dev = 0; dev<4; dev++) {
 8011604:	2300      	movs	r3, #0
 8011606:	617b      	str	r3, [r7, #20]
 8011608:	e027      	b.n	801165a <ina3221_init+0x66>
		int addr = 0x40 + dev;
 801160a:	697b      	ldr	r3, [r7, #20]
 801160c:	3340      	adds	r3, #64	; 0x40
 801160e:	613b      	str	r3, [r7, #16]
	    HAL_StatusTypeDef res;
        res = HAL_I2C_IsDeviceReady(&INA3221_I2C_PORT, addr << 1, 1, 10);
 8011610:	693b      	ldr	r3, [r7, #16]
 8011612:	b29b      	uxth	r3, r3
 8011614:	005b      	lsls	r3, r3, #1
 8011616:	b299      	uxth	r1, r3
 8011618:	230a      	movs	r3, #10
 801161a:	2201      	movs	r2, #1
 801161c:	4814      	ldr	r0, [pc, #80]	; (8011670 <ina3221_init+0x7c>)
 801161e:	f7f2 fc3d 	bl	8003e9c <HAL_I2C_IsDeviceReady>
 8011622:	4603      	mov	r3, r0
 8011624:	73fb      	strb	r3, [r7, #15]
        if (res == HAL_OK) {
 8011626:	7bfb      	ldrb	r3, [r7, #15]
 8011628:	2b00      	cmp	r3, #0
 801162a:	d10e      	bne.n	801164a <ina3221_init+0x56>
        	ina3221_configure(addr, continuous);
 801162c:	6879      	ldr	r1, [r7, #4]
 801162e:	6938      	ldr	r0, [r7, #16]
 8011630:	f7ff ff60 	bl	80114f4 <ina3221_configure>
        	ina3221_devices[dev]=1;
 8011634:	4a0f      	ldr	r2, [pc, #60]	; (8011674 <ina3221_init+0x80>)
 8011636:	697b      	ldr	r3, [r7, #20]
 8011638:	4413      	add	r3, r2
 801163a:	2201      	movs	r2, #1
 801163c:	701a      	strb	r2, [r3, #0]
        	itm_debug1(DBG_INA3221, "INA@", addr);
 801163e:	693a      	ldr	r2, [r7, #16]
 8011640:	490d      	ldr	r1, [pc, #52]	; (8011678 <ina3221_init+0x84>)
 8011642:	2020      	movs	r0, #32
 8011644:	f7ff fec0 	bl	80113c8 <itm_debug1>
 8011648:	e004      	b.n	8011654 <ina3221_init+0x60>
        } else {
        	ina3221_devices[dev]=0;
 801164a:	4a0a      	ldr	r2, [pc, #40]	; (8011674 <ina3221_init+0x80>)
 801164c:	697b      	ldr	r3, [r7, #20]
 801164e:	4413      	add	r3, r2
 8011650:	2200      	movs	r2, #0
 8011652:	701a      	strb	r2, [r3, #0]
	for (int dev = 0; dev<4; dev++) {
 8011654:	697b      	ldr	r3, [r7, #20]
 8011656:	3301      	adds	r3, #1
 8011658:	617b      	str	r3, [r7, #20]
 801165a:	697b      	ldr	r3, [r7, #20]
 801165c:	2b03      	cmp	r3, #3
 801165e:	ddd4      	ble.n	801160a <ina3221_init+0x16>
 8011660:	e000      	b.n	8011664 <ina3221_init+0x70>
	if (disable_ina3221) return;
 8011662:	bf00      	nop
        }
	}
}
 8011664:	3718      	adds	r7, #24
 8011666:	46bd      	mov	sp, r7
 8011668:	bd80      	pop	{r7, pc}
 801166a:	bf00      	nop
 801166c:	2000507c 	.word	0x2000507c
 8011670:	2000539c 	.word	0x2000539c
 8011674:	20005084 	.word	0x20005084
 8011678:	08016fd4 	.word	0x08016fd4

0801167c <_err>:
uint32_t ina3221_inter_dur = 0;

extern void Error_Handler(void);

static void _err(void)
{
 801167c:	b580      	push	{r7, lr}
 801167e:	af00      	add	r7, sp, #0
	if ((1)) Error_Handler();
 8011680:	f7ef ff12 	bl	80014a8 <Error_Handler>
}
 8011684:	bf00      	nop
 8011686:	bd80      	pop	{r7, pc}

08011688 <ina3221_start_read>:

void ina3221_start_read(int16_t *vals, uint8_t *flagdone)
{
 8011688:	b580      	push	{r7, lr}
 801168a:	b082      	sub	sp, #8
 801168c:	af00      	add	r7, sp, #0
 801168e:	6078      	str	r0, [r7, #4]
 8011690:	6039      	str	r1, [r7, #0]
	if (get_reg_step != -1) {
 8011692:	4b1f      	ldr	r3, [pc, #124]	; (8011710 <ina3221_start_read+0x88>)
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801169a:	d009      	beq.n	80116b0 <ina3221_start_read+0x28>
		itm_debug1(DBG_INA3221|DBG_ERR, "ina rd ko", get_reg_step);
 801169c:	4b1c      	ldr	r3, [pc, #112]	; (8011710 <ina3221_start_read+0x88>)
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	461a      	mov	r2, r3
 80116a2:	491c      	ldr	r1, [pc, #112]	; (8011714 <ina3221_start_read+0x8c>)
 80116a4:	481c      	ldr	r0, [pc, #112]	; (8011718 <ina3221_start_read+0x90>)
 80116a6:	f7ff fe8f 	bl	80113c8 <itm_debug1>
		_err();
 80116aa:	f7ff ffe7 	bl	801167c <_err>
		return;
 80116ae:	e02c      	b.n	801170a <ina3221_start_read+0x82>
	}
	pflagdone = flagdone;
 80116b0:	4a1a      	ldr	r2, [pc, #104]	; (801171c <ina3221_start_read+0x94>)
 80116b2:	683b      	ldr	r3, [r7, #0]
 80116b4:	6013      	str	r3, [r2, #0]
	if (pflagdone) *pflagdone = 0;
 80116b6:	4b19      	ldr	r3, [pc, #100]	; (801171c <ina3221_start_read+0x94>)
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d003      	beq.n	80116c6 <ina3221_start_read+0x3e>
 80116be:	4b17      	ldr	r3, [pc, #92]	; (801171c <ina3221_start_read+0x94>)
 80116c0:	681b      	ldr	r3, [r3, #0]
 80116c2:	2200      	movs	r2, #0
 80116c4:	701a      	strb	r2, [r3, #0]
	if ((0)) { // TODO remove
		uint16_t t = ina3221_read16(0x40, INA3221_REG_MASK_ENABLE);
		int cvr = t & 0x1;
		itm_debug2(DBG_INA3221, "msk/en", t, cvr);
	}
	pvalues = vals;
 80116c6:	4a16      	ldr	r2, [pc, #88]	; (8011720 <ina3221_start_read+0x98>)
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	6013      	str	r3, [r2, #0]

	itm_debug1(DBG_INA3221, "ina rd", ina3221_errors);
 80116cc:	4b15      	ldr	r3, [pc, #84]	; (8011724 <ina3221_start_read+0x9c>)
 80116ce:	881b      	ldrh	r3, [r3, #0]
 80116d0:	461a      	mov	r2, r3
 80116d2:	4915      	ldr	r1, [pc, #84]	; (8011728 <ina3221_start_read+0xa0>)
 80116d4:	2020      	movs	r0, #32
 80116d6:	f7ff fe77 	bl	80113c8 <itm_debug1>
	//t0 = HAL_GetTick();
	t0read = GetCurrentMicro();
 80116da:	f7ee ffc3 	bl	8000664 <GetCurrentMicro>
 80116de:	4602      	mov	r2, r0
 80116e0:	4b12      	ldr	r3, [pc, #72]	; (801172c <ina3221_start_read+0xa4>)
 80116e2:	601a      	str	r2, [r3, #0]
	ina3221_inter_dur = t0read - t1;
 80116e4:	4b11      	ldr	r3, [pc, #68]	; (801172c <ina3221_start_read+0xa4>)
 80116e6:	681a      	ldr	r2, [r3, #0]
 80116e8:	4b11      	ldr	r3, [pc, #68]	; (8011730 <ina3221_start_read+0xa8>)
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	1ad3      	subs	r3, r2, r3
 80116ee:	4a11      	ldr	r2, [pc, #68]	; (8011734 <ina3221_start_read+0xac>)
 80116f0:	6013      	str	r3, [r2, #0]
	itm_debug1(DBG_INA3221, "ina inter", ina3221_inter_dur);
 80116f2:	4b10      	ldr	r3, [pc, #64]	; (8011734 <ina3221_start_read+0xac>)
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	461a      	mov	r2, r3
 80116f8:	490f      	ldr	r1, [pc, #60]	; (8011738 <ina3221_start_read+0xb0>)
 80116fa:	2020      	movs	r0, #32
 80116fc:	f7ff fe64 	bl	80113c8 <itm_debug1>
	get_reg_step = 0;
 8011700:	4b03      	ldr	r3, [pc, #12]	; (8011710 <ina3221_start_read+0x88>)
 8011702:	2200      	movs	r2, #0
 8011704:	601a      	str	r2, [r3, #0]
	_get_next_reg();
 8011706:	f000 f819 	bl	801173c <_get_next_reg>
}
 801170a:	3708      	adds	r7, #8
 801170c:	46bd      	mov	sp, r7
 801170e:	bd80      	pop	{r7, pc}
 8011710:	20000194 	.word	0x20000194
 8011714:	08016fdc 	.word	0x08016fdc
 8011718:	80000020 	.word	0x80000020
 801171c:	20005090 	.word	0x20005090
 8011720:	2000508c 	.word	0x2000508c
 8011724:	20005080 	.word	0x20005080
 8011728:	08016fe8 	.word	0x08016fe8
 801172c:	20005094 	.word	0x20005094
 8011730:	20005098 	.word	0x20005098
 8011734:	200050a0 	.word	0x200050a0
 8011738:	08016ff0 	.word	0x08016ff0

0801173c <_get_next_reg>:

static void _get_next_reg(void)
{
 801173c:	b580      	push	{r7, lr}
 801173e:	b088      	sub	sp, #32
 8011740:	af02      	add	r7, sp, #8
	for (;;) {
		if (get_reg_step<0) {
 8011742:	4b49      	ldr	r3, [pc, #292]	; (8011868 <_get_next_reg+0x12c>)
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	2b00      	cmp	r3, #0
 8011748:	da06      	bge.n	8011758 <_get_next_reg+0x1c>
			itm_debug1(DBG_INA3221|DBG_ERR, "bad get_reg_step", get_reg_step);
 801174a:	4b47      	ldr	r3, [pc, #284]	; (8011868 <_get_next_reg+0x12c>)
 801174c:	681b      	ldr	r3, [r3, #0]
 801174e:	461a      	mov	r2, r3
 8011750:	4946      	ldr	r1, [pc, #280]	; (801186c <_get_next_reg+0x130>)
 8011752:	4847      	ldr	r0, [pc, #284]	; (8011870 <_get_next_reg+0x134>)
 8011754:	f7ff fe38 	bl	80113c8 <itm_debug1>
		}
		if (get_reg_step == INA3221_NUM_VALS) {
 8011758:	4b43      	ldr	r3, [pc, #268]	; (8011868 <_get_next_reg+0x12c>)
 801175a:	681b      	ldr	r3, [r3, #0]
 801175c:	2b0c      	cmp	r3, #12
 801175e:	d120      	bne.n	80117a2 <_get_next_reg+0x66>
			if (pflagdone) *pflagdone = 1;
 8011760:	4b44      	ldr	r3, [pc, #272]	; (8011874 <_get_next_reg+0x138>)
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	2b00      	cmp	r3, #0
 8011766:	d003      	beq.n	8011770 <_get_next_reg+0x34>
 8011768:	4b42      	ldr	r3, [pc, #264]	; (8011874 <_get_next_reg+0x138>)
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	2201      	movs	r2, #1
 801176e:	701a      	strb	r2, [r3, #0]
			uint32_t tm = GetCurrentMicro();
 8011770:	f7ee ff78 	bl	8000664 <GetCurrentMicro>
 8011774:	6078      	str	r0, [r7, #4]
			ina3221_scan_dur = tm - t0read;
 8011776:	4b40      	ldr	r3, [pc, #256]	; (8011878 <_get_next_reg+0x13c>)
 8011778:	681b      	ldr	r3, [r3, #0]
 801177a:	687a      	ldr	r2, [r7, #4]
 801177c:	1ad3      	subs	r3, r2, r3
 801177e:	4a3f      	ldr	r2, [pc, #252]	; (801187c <_get_next_reg+0x140>)
 8011780:	6013      	str	r3, [r2, #0]
			t1 = tm;
 8011782:	4a3f      	ldr	r2, [pc, #252]	; (8011880 <_get_next_reg+0x144>)
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	6013      	str	r3, [r2, #0]
			get_reg_step = -1;
 8011788:	4b37      	ldr	r3, [pc, #220]	; (8011868 <_get_next_reg+0x12c>)
 801178a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801178e:	601a      	str	r2, [r3, #0]
			itm_debug2(DBG_INA3221,"ina done", ina3221_scan_dur, tm);
 8011790:	4b3a      	ldr	r3, [pc, #232]	; (801187c <_get_next_reg+0x140>)
 8011792:	681b      	ldr	r3, [r3, #0]
 8011794:	461a      	mov	r2, r3
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	493a      	ldr	r1, [pc, #232]	; (8011884 <_get_next_reg+0x148>)
 801179a:	2020      	movs	r0, #32
 801179c:	f7ff fe2e 	bl	80113fc <itm_debug2>
			return;
 80117a0:	e05f      	b.n	8011862 <_get_next_reg+0x126>
		}
		int numdev = get_reg_step/3;
 80117a2:	4b31      	ldr	r3, [pc, #196]	; (8011868 <_get_next_reg+0x12c>)
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	4a38      	ldr	r2, [pc, #224]	; (8011888 <_get_next_reg+0x14c>)
 80117a8:	fb82 1203 	smull	r1, r2, r2, r3
 80117ac:	17db      	asrs	r3, r3, #31
 80117ae:	1ad3      	subs	r3, r2, r3
 80117b0:	613b      	str	r3, [r7, #16]
		if (!ina3221_devices[numdev]) {
 80117b2:	4a36      	ldr	r2, [pc, #216]	; (801188c <_get_next_reg+0x150>)
 80117b4:	693b      	ldr	r3, [r7, #16]
 80117b6:	4413      	add	r3, r2
 80117b8:	781b      	ldrb	r3, [r3, #0]
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d10d      	bne.n	80117da <_get_next_reg+0x9e>
			pvalues[get_reg_step] = 0xFF;
 80117be:	4b34      	ldr	r3, [pc, #208]	; (8011890 <_get_next_reg+0x154>)
 80117c0:	681a      	ldr	r2, [r3, #0]
 80117c2:	4b29      	ldr	r3, [pc, #164]	; (8011868 <_get_next_reg+0x12c>)
 80117c4:	681b      	ldr	r3, [r3, #0]
 80117c6:	005b      	lsls	r3, r3, #1
 80117c8:	4413      	add	r3, r2
 80117ca:	22ff      	movs	r2, #255	; 0xff
 80117cc:	801a      	strh	r2, [r3, #0]
			get_reg_step++;
 80117ce:	4b26      	ldr	r3, [pc, #152]	; (8011868 <_get_next_reg+0x12c>)
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	3301      	adds	r3, #1
 80117d4:	4a24      	ldr	r2, [pc, #144]	; (8011868 <_get_next_reg+0x12c>)
 80117d6:	6013      	str	r3, [r2, #0]
	for (;;) {
 80117d8:	e7b3      	b.n	8011742 <_get_next_reg+0x6>
			continue;
		}
		int reg;
		switch (get_reg_step % 3) {
 80117da:	4b23      	ldr	r3, [pc, #140]	; (8011868 <_get_next_reg+0x12c>)
 80117dc:	6819      	ldr	r1, [r3, #0]
 80117de:	4b2a      	ldr	r3, [pc, #168]	; (8011888 <_get_next_reg+0x14c>)
 80117e0:	fb83 3201 	smull	r3, r2, r3, r1
 80117e4:	17cb      	asrs	r3, r1, #31
 80117e6:	1ad3      	subs	r3, r2, r3
 80117e8:	461a      	mov	r2, r3
 80117ea:	0052      	lsls	r2, r2, #1
 80117ec:	441a      	add	r2, r3
 80117ee:	1a8b      	subs	r3, r1, r2
 80117f0:	2b01      	cmp	r3, #1
 80117f2:	d006      	beq.n	8011802 <_get_next_reg+0xc6>
 80117f4:	2b02      	cmp	r3, #2
 80117f6:	d007      	beq.n	8011808 <_get_next_reg+0xcc>
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d108      	bne.n	801180e <_get_next_reg+0xd2>
		case 0: reg = INA3221_REG_CH1_SHUNTVOLT; break;
 80117fc:	2301      	movs	r3, #1
 80117fe:	617b      	str	r3, [r7, #20]
 8011800:	e005      	b.n	801180e <_get_next_reg+0xd2>
		case 1: reg = INA3221_REG_CH2_SHUNTVOLT; break;
 8011802:	2303      	movs	r3, #3
 8011804:	617b      	str	r3, [r7, #20]
 8011806:	e002      	b.n	801180e <_get_next_reg+0xd2>
		case 2: reg = INA3221_REG_CH3_SHUNTVOLT; break;
 8011808:	2305      	movs	r3, #5
 801180a:	617b      	str	r3, [r7, #20]
 801180c:	bf00      	nop
		}
		HAL_StatusTypeDef status;
		int addr = 0x40 + numdev;
 801180e:	693b      	ldr	r3, [r7, #16]
 8011810:	3340      	adds	r3, #64	; 0x40
 8011812:	60fb      	str	r3, [r7, #12]
		status = HAL_I2C_Mem_Read_IT(&INA3221_I2C_PORT, addr<<1, reg, I2C_MEMADD_SIZE_8BIT,
 8011814:	68fb      	ldr	r3, [r7, #12]
 8011816:	b29b      	uxth	r3, r3
 8011818:	005b      	lsls	r3, r3, #1
 801181a:	b299      	uxth	r1, r3
 801181c:	697b      	ldr	r3, [r7, #20]
 801181e:	b298      	uxth	r0, r3
 8011820:	4b1b      	ldr	r3, [pc, #108]	; (8011890 <_get_next_reg+0x154>)
 8011822:	681a      	ldr	r2, [r3, #0]
	    		(uint8_t *)&pvalues[get_reg_step], 2);
 8011824:	4b10      	ldr	r3, [pc, #64]	; (8011868 <_get_next_reg+0x12c>)
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	005b      	lsls	r3, r3, #1
 801182a:	4413      	add	r3, r2
		status = HAL_I2C_Mem_Read_IT(&INA3221_I2C_PORT, addr<<1, reg, I2C_MEMADD_SIZE_8BIT,
 801182c:	2202      	movs	r2, #2
 801182e:	9201      	str	r2, [sp, #4]
 8011830:	9300      	str	r3, [sp, #0]
 8011832:	2301      	movs	r3, #1
 8011834:	4602      	mov	r2, r0
 8011836:	4817      	ldr	r0, [pc, #92]	; (8011894 <_get_next_reg+0x158>)
 8011838:	f7f2 fa72 	bl	8003d20 <HAL_I2C_Mem_Read_IT>
 801183c:	4603      	mov	r3, r0
 801183e:	72fb      	strb	r3, [r7, #11]
		if (status != HAL_OK) {
 8011840:	7afb      	ldrb	r3, [r7, #11]
 8011842:	2b00      	cmp	r3, #0
 8011844:	d007      	beq.n	8011856 <_get_next_reg+0x11a>
			itm_debug1(DBG_INA3221|DBG_ERR, "readit", status);
 8011846:	7afb      	ldrb	r3, [r7, #11]
 8011848:	461a      	mov	r2, r3
 801184a:	4913      	ldr	r1, [pc, #76]	; (8011898 <_get_next_reg+0x15c>)
 801184c:	4808      	ldr	r0, [pc, #32]	; (8011870 <_get_next_reg+0x134>)
 801184e:	f7ff fdbb 	bl	80113c8 <itm_debug1>
			_err();
 8011852:	f7ff ff13 	bl	801167c <_err>
		}
		get_reg_step++;
 8011856:	4b04      	ldr	r3, [pc, #16]	; (8011868 <_get_next_reg+0x12c>)
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	3301      	adds	r3, #1
 801185c:	4a02      	ldr	r2, [pc, #8]	; (8011868 <_get_next_reg+0x12c>)
 801185e:	6013      	str	r3, [r2, #0]
		break;
 8011860:	bf00      	nop
	}
}
 8011862:	3718      	adds	r7, #24
 8011864:	46bd      	mov	sp, r7
 8011866:	bd80      	pop	{r7, pc}
 8011868:	20000194 	.word	0x20000194
 801186c:	08016ffc 	.word	0x08016ffc
 8011870:	80000020 	.word	0x80000020
 8011874:	20005090 	.word	0x20005090
 8011878:	20005094 	.word	0x20005094
 801187c:	2000509c 	.word	0x2000509c
 8011880:	20005098 	.word	0x20005098
 8011884:	08017010 	.word	0x08017010
 8011888:	55555556 	.word	0x55555556
 801188c:	20005084 	.word	0x20005084
 8011890:	2000508c 	.word	0x2000508c
 8011894:	2000539c 	.word	0x2000539c
 8011898:	0801701c 	.word	0x0801701c

0801189c <HAL_I2C_MemRxCpltCallback>:


void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801189c:	b580      	push	{r7, lr}
 801189e:	b082      	sub	sp, #8
 80118a0:	af00      	add	r7, sp, #0
 80118a2:	6078      	str	r0, [r7, #4]
	_get_next_reg();
 80118a4:	f7ff ff4a 	bl	801173c <_get_next_reg>

}
 80118a8:	bf00      	nop
 80118aa:	3708      	adds	r7, #8
 80118ac:	46bd      	mov	sp, r7
 80118ae:	bd80      	pop	{r7, pc}

080118b0 <HAL_I2C_ErrorCallback>:



void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80118b0:	b580      	push	{r7, lr}
 80118b2:	b082      	sub	sp, #8
 80118b4:	af00      	add	r7, sp, #0
 80118b6:	6078      	str	r0, [r7, #4]
	ina3221_errors++;
 80118b8:	4b0c      	ldr	r3, [pc, #48]	; (80118ec <HAL_I2C_ErrorCallback+0x3c>)
 80118ba:	881b      	ldrh	r3, [r3, #0]
 80118bc:	3301      	adds	r3, #1
 80118be:	b29a      	uxth	r2, r3
 80118c0:	4b0a      	ldr	r3, [pc, #40]	; (80118ec <HAL_I2C_ErrorCallback+0x3c>)
 80118c2:	801a      	strh	r2, [r3, #0]
	itm_debug2(DBG_INA3221|DBG_ERR, "i2c err", hi2c->ErrorCode, get_reg_step);
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80118c8:	461a      	mov	r2, r3
 80118ca:	4b09      	ldr	r3, [pc, #36]	; (80118f0 <HAL_I2C_ErrorCallback+0x40>)
 80118cc:	681b      	ldr	r3, [r3, #0]
 80118ce:	4909      	ldr	r1, [pc, #36]	; (80118f4 <HAL_I2C_ErrorCallback+0x44>)
 80118d0:	4809      	ldr	r0, [pc, #36]	; (80118f8 <HAL_I2C_ErrorCallback+0x48>)
 80118d2:	f7ff fd93 	bl	80113fc <itm_debug2>
	get_reg_step = -1;
 80118d6:	4b06      	ldr	r3, [pc, #24]	; (80118f0 <HAL_I2C_ErrorCallback+0x40>)
 80118d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80118dc:	601a      	str	r2, [r3, #0]
	if ((1)) disable_ina3221 = 1;
 80118de:	4b07      	ldr	r3, [pc, #28]	; (80118fc <HAL_I2C_ErrorCallback+0x4c>)
 80118e0:	2201      	movs	r2, #1
 80118e2:	601a      	str	r2, [r3, #0]
	if ((0)) _err();
}
 80118e4:	bf00      	nop
 80118e6:	3708      	adds	r7, #8
 80118e8:	46bd      	mov	sp, r7
 80118ea:	bd80      	pop	{r7, pc}
 80118ec:	20005080 	.word	0x20005080
 80118f0:	20000194 	.word	0x20000194
 80118f4:	08017024 	.word	0x08017024
 80118f8:	80000020 	.word	0x80000020
 80118fc:	2000507c 	.word	0x2000507c

08011900 <itm_debug1>:
{
 8011900:	b580      	push	{r7, lr}
 8011902:	b086      	sub	sp, #24
 8011904:	af02      	add	r7, sp, #8
 8011906:	60f8      	str	r0, [r7, #12]
 8011908:	60b9      	str	r1, [r7, #8]
 801190a:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 801190c:	4b08      	ldr	r3, [pc, #32]	; (8011930 <itm_debug1+0x30>)
 801190e:	681a      	ldr	r2, [r3, #0]
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	4013      	ands	r3, r2
 8011914:	2b00      	cmp	r3, #0
 8011916:	d007      	beq.n	8011928 <itm_debug1+0x28>
 8011918:	2301      	movs	r3, #1
 801191a:	9300      	str	r3, [sp, #0]
 801191c:	2300      	movs	r3, #0
 801191e:	2200      	movs	r2, #0
 8011920:	6879      	ldr	r1, [r7, #4]
 8011922:	68b8      	ldr	r0, [r7, #8]
 8011924:	f004 ffd4 	bl	80168d0 <_itm_debug3>
}
 8011928:	bf00      	nop
 801192a:	3710      	adds	r7, #16
 801192c:	46bd      	mov	sp, r7
 801192e:	bd80      	pop	{r7, pc}
 8011930:	2000047c 	.word	0x2000047c

08011934 <ihm_setlayout>:
		CODE_ZONE_TEXT3s,  CODE_SVAL4,  6, /*CODE_STR|7,*/ CODE_SVAL4,  7, /*CODE_STR|7,*/ CODE_SVAL4,  8,
		CODE_END
};

void ihm_setlayout(int numdisp, int numlayout)
{
 8011934:	b480      	push	{r7}
 8011936:	b085      	sub	sp, #20
 8011938:	af00      	add	r7, sp, #0
 801193a:	6078      	str	r0, [r7, #4]
 801193c:	6039      	str	r1, [r7, #0]
	const uint8_t *p = NULL;
 801193e:	2300      	movs	r3, #0
 8011940:	60fb      	str	r3, [r7, #12]
	switch (numlayout) {
 8011942:	683b      	ldr	r3, [r7, #0]
 8011944:	2b01      	cmp	r3, #1
 8011946:	d008      	beq.n	801195a <ihm_setlayout+0x26>
 8011948:	2b01      	cmp	r3, #1
 801194a:	dc01      	bgt.n	8011950 <ihm_setlayout+0x1c>
 801194c:	2b00      	cmp	r3, #0
	case LAYOUT_DEFAULT: // default
		break;
 801194e:	e00d      	b.n	801196c <ihm_setlayout+0x38>
	switch (numlayout) {
 8011950:	2bc8      	cmp	r3, #200	; 0xc8
 8011952:	d005      	beq.n	8011960 <ihm_setlayout+0x2c>
 8011954:	2bc9      	cmp	r3, #201	; 0xc9
 8011956:	d006      	beq.n	8011966 <ihm_setlayout+0x32>
 8011958:	e008      	b.n	801196c <ihm_setlayout+0x38>
	case LAYOUT_MANUAL: // speed mode
		p = layout_manual;
 801195a:	4b0a      	ldr	r3, [pc, #40]	; (8011984 <ihm_setlayout+0x50>)
 801195c:	60fb      	str	r3, [r7, #12]
		break;
 801195e:	e005      	b.n	801196c <ihm_setlayout+0x38>

	case LAYOUT_INA3221_DETECT: // ina3221 I2C detection
		p = layout_ina3221_i2c;
 8011960:	4b09      	ldr	r3, [pc, #36]	; (8011988 <ihm_setlayout+0x54>)
 8011962:	60fb      	str	r3, [r7, #12]
		break;
 8011964:	e002      	b.n	801196c <ihm_setlayout+0x38>
	case LAYOUT_INA3221_VAL:
		p = layout_ina3221_val;
 8011966:	4b09      	ldr	r3, [pc, #36]	; (801198c <ihm_setlayout+0x58>)
 8011968:	60fb      	str	r3, [r7, #12]
		break;
 801196a:	bf00      	nop
	}
	disp[numdisp] = p;
 801196c:	4908      	ldr	r1, [pc, #32]	; (8011990 <ihm_setlayout+0x5c>)
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	68fa      	ldr	r2, [r7, #12]
 8011972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8011976:	bf00      	nop
 8011978:	3714      	adds	r7, #20
 801197a:	46bd      	mov	sp, r7
 801197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011980:	4770      	bx	lr
 8011982:	bf00      	nop
 8011984:	08018a90 	.word	0x08018a90
 8011988:	08018aa0 	.word	0x08018aa0
 801198c:	08018ab8 	.word	0x08018ab8
 8011990:	200050a4 	.word	0x200050a4

08011994 <ihm_setvar>:
// ----------------------------------------------------------------

static uint16_t regs[DISP_MAX_REGS][MAX_DISP];

void ihm_setvar(int numdisp, int varnum, uint16_t val)
{
 8011994:	b480      	push	{r7}
 8011996:	b085      	sub	sp, #20
 8011998:	af00      	add	r7, sp, #0
 801199a:	60f8      	str	r0, [r7, #12]
 801199c:	60b9      	str	r1, [r7, #8]
 801199e:	4613      	mov	r3, r2
 80119a0:	80fb      	strh	r3, [r7, #6]
	if (varnum>DISP_MAX_REGS) return;
 80119a2:	68bb      	ldr	r3, [r7, #8]
 80119a4:	2b10      	cmp	r3, #16
 80119a6:	dc0a      	bgt.n	80119be <ihm_setvar+0x2a>
	if (numdisp>MAX_DISP) return;
 80119a8:	68fb      	ldr	r3, [r7, #12]
 80119aa:	2b01      	cmp	r3, #1
 80119ac:	dc09      	bgt.n	80119c2 <ihm_setvar+0x2e>
	regs[varnum][numdisp] = val;
 80119ae:	4908      	ldr	r1, [pc, #32]	; (80119d0 <ihm_setvar+0x3c>)
 80119b0:	68ba      	ldr	r2, [r7, #8]
 80119b2:	68fb      	ldr	r3, [r7, #12]
 80119b4:	4413      	add	r3, r2
 80119b6:	88fa      	ldrh	r2, [r7, #6]
 80119b8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 80119bc:	e002      	b.n	80119c4 <ihm_setvar+0x30>
	if (varnum>DISP_MAX_REGS) return;
 80119be:	bf00      	nop
 80119c0:	e000      	b.n	80119c4 <ihm_setvar+0x30>
	if (numdisp>MAX_DISP) return;
 80119c2:	bf00      	nop
}
 80119c4:	3714      	adds	r7, #20
 80119c6:	46bd      	mov	sp, r7
 80119c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119cc:	4770      	bx	lr
 80119ce:	bf00      	nop
 80119d0:	200050a8 	.word	0x200050a8

080119d4 <ihm_getvar>:
uint16_t ihm_getvar(int numdisp, int varnum)
{
 80119d4:	b480      	push	{r7}
 80119d6:	b083      	sub	sp, #12
 80119d8:	af00      	add	r7, sp, #0
 80119da:	6078      	str	r0, [r7, #4]
 80119dc:	6039      	str	r1, [r7, #0]
	if (varnum>DISP_MAX_REGS) return 0;
 80119de:	683b      	ldr	r3, [r7, #0]
 80119e0:	2b10      	cmp	r3, #16
 80119e2:	dd01      	ble.n	80119e8 <ihm_getvar+0x14>
 80119e4:	2300      	movs	r3, #0
 80119e6:	e00a      	b.n	80119fe <ihm_getvar+0x2a>
	if (numdisp>MAX_DISP) return 0;
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	2b01      	cmp	r3, #1
 80119ec:	dd01      	ble.n	80119f2 <ihm_getvar+0x1e>
 80119ee:	2300      	movs	r3, #0
 80119f0:	e005      	b.n	80119fe <ihm_getvar+0x2a>
	return regs[varnum][numdisp];
 80119f2:	4906      	ldr	r1, [pc, #24]	; (8011a0c <ihm_getvar+0x38>)
 80119f4:	683a      	ldr	r2, [r7, #0]
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	4413      	add	r3, r2
 80119fa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
}
 80119fe:	4618      	mov	r0, r3
 8011a00:	370c      	adds	r7, #12
 8011a02:	46bd      	mov	sp, r7
 8011a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a08:	4770      	bx	lr
 8011a0a:	bf00      	nop
 8011a0c:	200050a8 	.word	0x200050a8

08011a10 <disp_layout>:
static void write_snum(int16_t v, FontDef *curfont);
static void write_snum4(int16_t v, FontDef *curfont);
static void write_bargraph(int16_t v, int16_t min, int16_t max);

void disp_layout(int numdisp)
{
 8011a10:	b580      	push	{r7, lr}
 8011a12:	b08a      	sub	sp, #40	; 0x28
 8011a14:	af00      	add	r7, sp, #0
 8011a16:	6078      	str	r0, [r7, #4]
	uint32_t t0 = HAL_GetTick();
 8011a18:	f7f0 faf2 	bl	8002000 <HAL_GetTick>
 8011a1c:	61b8      	str	r0, [r7, #24]
	const uint8_t *d = disp[numdisp];
 8011a1e:	4ad3      	ldr	r2, [pc, #844]	; (8011d6c <disp_layout+0x35c>)
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011a26:	627b      	str	r3, [r7, #36]	; 0x24
	if (!d) d = default_layout;
 8011a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d101      	bne.n	8011a32 <disp_layout+0x22>
 8011a2e:	4bd0      	ldr	r3, [pc, #832]	; (8011d70 <disp_layout+0x360>)
 8011a30:	627b      	str	r3, [r7, #36]	; 0x24
	ssd1306_Fill(Black);
 8011a32:	2000      	movs	r0, #0
 8011a34:	f7ff f9e0 	bl	8010df8 <ssd1306_Fill>
	ssd1306_SetCursor(0, 0);
 8011a38:	2100      	movs	r1, #0
 8011a3a:	2000      	movs	r0, #0
 8011a3c:	f7ff fbc0 	bl	80111c0 <ssd1306_SetCursor>
	FontDef *curfont = &Font_7x10;
 8011a40:	4bcc      	ldr	r3, [pc, #816]	; (8011d74 <disp_layout+0x364>)
 8011a42:	623b      	str	r3, [r7, #32]
	int16_t v16s;
	uint16_t *puval;
	static uint16_t last_dur1=0;
	static uint16_t last_dur2=0;

	for (int i=0; i<MAX_OPCODE_PER_DISPLAY; i++) {
 8011a44:	2300      	movs	r3, #0
 8011a46:	61fb      	str	r3, [r7, #28]
 8011a48:	e208      	b.n	8011e5c <disp_layout+0x44c>
		if (CODE_END == d[i]) break;
 8011a4a:	69fb      	ldr	r3, [r7, #28]
 8011a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011a4e:	4413      	add	r3, r2
 8011a50:	781b      	ldrb	r3, [r3, #0]
 8011a52:	2bfe      	cmp	r3, #254	; 0xfe
 8011a54:	f000 8207 	beq.w	8011e66 <disp_layout+0x456>
		if ((d[i] & 0x80)==0) {
 8011a58:	69fb      	ldr	r3, [r7, #28]
 8011a5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011a5c:	4413      	add	r3, r2
 8011a5e:	781b      	ldrb	r3, [r3, #0]
 8011a60:	b25b      	sxtb	r3, r3
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	db10      	blt.n	8011a88 <disp_layout+0x78>
			const char * stri = ui_strings[d[i]&0x7F];
 8011a66:	69fb      	ldr	r3, [r7, #28]
 8011a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011a6a:	4413      	add	r3, r2
 8011a6c:	781b      	ldrb	r3, [r3, #0]
 8011a6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011a72:	4ac1      	ldr	r2, [pc, #772]	; (8011d78 <disp_layout+0x368>)
 8011a74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011a78:	613b      	str	r3, [r7, #16]
			ssd1306_WriteString(stri, *curfont, White);
 8011a7a:	6a3a      	ldr	r2, [r7, #32]
 8011a7c:	2301      	movs	r3, #1
 8011a7e:	ca06      	ldmia	r2, {r1, r2}
 8011a80:	6938      	ldr	r0, [r7, #16]
 8011a82:	f7ff fb77 	bl	8011174 <ssd1306_WriteString>
			continue;
 8011a86:	e1e6      	b.n	8011e56 <disp_layout+0x446>
		}
		switch (d[i]) {
 8011a88:	69fb      	ldr	r3, [r7, #28]
 8011a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011a8c:	4413      	add	r3, r2
 8011a8e:	781b      	ldrb	r3, [r3, #0]
 8011a90:	3b80      	subs	r3, #128	; 0x80
 8011a92:	2b7f      	cmp	r3, #127	; 0x7f
 8011a94:	f200 81d1 	bhi.w	8011e3a <disp_layout+0x42a>
 8011a98:	a201      	add	r2, pc, #4	; (adr r2, 8011aa0 <disp_layout+0x90>)
 8011a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a9e:	bf00      	nop
 8011aa0:	08011ca1 	.word	0x08011ca1
 8011aa4:	08011caf 	.word	0x08011caf
 8011aa8:	08011cbd 	.word	0x08011cbd
 8011aac:	08011ccb 	.word	0x08011ccb
 8011ab0:	08011cd9 	.word	0x08011cd9
 8011ab4:	08011ce7 	.word	0x08011ce7
 8011ab8:	08011cf5 	.word	0x08011cf5
 8011abc:	08011d03 	.word	0x08011d03
 8011ac0:	08011df9 	.word	0x08011df9
 8011ac4:	08011e3b 	.word	0x08011e3b
 8011ac8:	08011e3b 	.word	0x08011e3b
 8011acc:	08011e3b 	.word	0x08011e3b
 8011ad0:	08011e3b 	.word	0x08011e3b
 8011ad4:	08011e3b 	.word	0x08011e3b
 8011ad8:	08011e3b 	.word	0x08011e3b
 8011adc:	08011e0d 	.word	0x08011e0d
 8011ae0:	08011e3b 	.word	0x08011e3b
 8011ae4:	08011e3b 	.word	0x08011e3b
 8011ae8:	08011e3b 	.word	0x08011e3b
 8011aec:	08011e3b 	.word	0x08011e3b
 8011af0:	08011e3b 	.word	0x08011e3b
 8011af4:	08011e3b 	.word	0x08011e3b
 8011af8:	08011e3b 	.word	0x08011e3b
 8011afc:	08011e3b 	.word	0x08011e3b
 8011b00:	08011e3b 	.word	0x08011e3b
 8011b04:	08011e3b 	.word	0x08011e3b
 8011b08:	08011e3b 	.word	0x08011e3b
 8011b0c:	08011e3b 	.word	0x08011e3b
 8011b10:	08011e3b 	.word	0x08011e3b
 8011b14:	08011e3b 	.word	0x08011e3b
 8011b18:	08011e3b 	.word	0x08011e3b
 8011b1c:	08011e3b 	.word	0x08011e3b
 8011b20:	08011e3b 	.word	0x08011e3b
 8011b24:	08011e3b 	.word	0x08011e3b
 8011b28:	08011e3b 	.word	0x08011e3b
 8011b2c:	08011e3b 	.word	0x08011e3b
 8011b30:	08011e3b 	.word	0x08011e3b
 8011b34:	08011e3b 	.word	0x08011e3b
 8011b38:	08011e3b 	.word	0x08011e3b
 8011b3c:	08011e3b 	.word	0x08011e3b
 8011b40:	08011e3b 	.word	0x08011e3b
 8011b44:	08011e3b 	.word	0x08011e3b
 8011b48:	08011e3b 	.word	0x08011e3b
 8011b4c:	08011e3b 	.word	0x08011e3b
 8011b50:	08011e3b 	.word	0x08011e3b
 8011b54:	08011e3b 	.word	0x08011e3b
 8011b58:	08011e3b 	.word	0x08011e3b
 8011b5c:	08011e3b 	.word	0x08011e3b
 8011b60:	08011e3b 	.word	0x08011e3b
 8011b64:	08011e3b 	.word	0x08011e3b
 8011b68:	08011e3b 	.word	0x08011e3b
 8011b6c:	08011e3b 	.word	0x08011e3b
 8011b70:	08011e3b 	.word	0x08011e3b
 8011b74:	08011e3b 	.word	0x08011e3b
 8011b78:	08011e3b 	.word	0x08011e3b
 8011b7c:	08011e3b 	.word	0x08011e3b
 8011b80:	08011e3b 	.word	0x08011e3b
 8011b84:	08011e3b 	.word	0x08011e3b
 8011b88:	08011e3b 	.word	0x08011e3b
 8011b8c:	08011e3b 	.word	0x08011e3b
 8011b90:	08011e3b 	.word	0x08011e3b
 8011b94:	08011e3b 	.word	0x08011e3b
 8011b98:	08011e3b 	.word	0x08011e3b
 8011b9c:	08011e3b 	.word	0x08011e3b
 8011ba0:	08011d11 	.word	0x08011d11
 8011ba4:	08011e33 	.word	0x08011e33
 8011ba8:	08011da9 	.word	0x08011da9
 8011bac:	08011e3b 	.word	0x08011e3b
 8011bb0:	08011d45 	.word	0x08011d45
 8011bb4:	08011d81 	.word	0x08011d81
 8011bb8:	08011dcf 	.word	0x08011dcf
 8011bbc:	08011e3b 	.word	0x08011e3b
 8011bc0:	08011e3b 	.word	0x08011e3b
 8011bc4:	08011e3b 	.word	0x08011e3b
 8011bc8:	08011e3b 	.word	0x08011e3b
 8011bcc:	08011e3b 	.word	0x08011e3b
 8011bd0:	08011e3b 	.word	0x08011e3b
 8011bd4:	08011e3b 	.word	0x08011e3b
 8011bd8:	08011e3b 	.word	0x08011e3b
 8011bdc:	08011e3b 	.word	0x08011e3b
 8011be0:	08011e3b 	.word	0x08011e3b
 8011be4:	08011e3b 	.word	0x08011e3b
 8011be8:	08011e3b 	.word	0x08011e3b
 8011bec:	08011e3b 	.word	0x08011e3b
 8011bf0:	08011e3b 	.word	0x08011e3b
 8011bf4:	08011e3b 	.word	0x08011e3b
 8011bf8:	08011e3b 	.word	0x08011e3b
 8011bfc:	08011e3b 	.word	0x08011e3b
 8011c00:	08011e3b 	.word	0x08011e3b
 8011c04:	08011e3b 	.word	0x08011e3b
 8011c08:	08011e3b 	.word	0x08011e3b
 8011c0c:	08011e3b 	.word	0x08011e3b
 8011c10:	08011e3b 	.word	0x08011e3b
 8011c14:	08011e3b 	.word	0x08011e3b
 8011c18:	08011e3b 	.word	0x08011e3b
 8011c1c:	08011e3b 	.word	0x08011e3b
 8011c20:	08011e3b 	.word	0x08011e3b
 8011c24:	08011e3b 	.word	0x08011e3b
 8011c28:	08011e3b 	.word	0x08011e3b
 8011c2c:	08011e3b 	.word	0x08011e3b
 8011c30:	08011e3b 	.word	0x08011e3b
 8011c34:	08011e3b 	.word	0x08011e3b
 8011c38:	08011e3b 	.word	0x08011e3b
 8011c3c:	08011e3b 	.word	0x08011e3b
 8011c40:	08011e3b 	.word	0x08011e3b
 8011c44:	08011e3b 	.word	0x08011e3b
 8011c48:	08011e3b 	.word	0x08011e3b
 8011c4c:	08011e3b 	.word	0x08011e3b
 8011c50:	08011e3b 	.word	0x08011e3b
 8011c54:	08011e3b 	.word	0x08011e3b
 8011c58:	08011e3b 	.word	0x08011e3b
 8011c5c:	08011e3b 	.word	0x08011e3b
 8011c60:	08011e3b 	.word	0x08011e3b
 8011c64:	08011e3b 	.word	0x08011e3b
 8011c68:	08011e3b 	.word	0x08011e3b
 8011c6c:	08011e3b 	.word	0x08011e3b
 8011c70:	08011e3b 	.word	0x08011e3b
 8011c74:	08011e3b 	.word	0x08011e3b
 8011c78:	08011e3b 	.word	0x08011e3b
 8011c7c:	08011e3b 	.word	0x08011e3b
 8011c80:	08011e3b 	.word	0x08011e3b
 8011c84:	08011e3b 	.word	0x08011e3b
 8011c88:	08011e3b 	.word	0x08011e3b
 8011c8c:	08011e3b 	.word	0x08011e3b
 8011c90:	08011e3b 	.word	0x08011e3b
 8011c94:	08011e3b 	.word	0x08011e3b
 8011c98:	08011e3b 	.word	0x08011e3b
 8011c9c:	08011e55 	.word	0x08011e55
		case CODE_NOP: break;
		case CODE_ZONE_STATUS:
			ssd1306_SetCursor(0, 0);
 8011ca0:	2100      	movs	r1, #0
 8011ca2:	2000      	movs	r0, #0
 8011ca4:	f7ff fa8c 	bl	80111c0 <ssd1306_SetCursor>
			curfont = &Font_7x10;
 8011ca8:	4b32      	ldr	r3, [pc, #200]	; (8011d74 <disp_layout+0x364>)
 8011caa:	623b      	str	r3, [r7, #32]
			break;
 8011cac:	e0d3      	b.n	8011e56 <disp_layout+0x446>
		case CODE_ZONE_MODE:
			ssd1306_SetCursor(RIGHT_X, 0);
 8011cae:	2100      	movs	r1, #0
 8011cb0:	2040      	movs	r0, #64	; 0x40
 8011cb2:	f7ff fa85 	bl	80111c0 <ssd1306_SetCursor>
			curfont = &Font_7x10;
 8011cb6:	4b2f      	ldr	r3, [pc, #188]	; (8011d74 <disp_layout+0x364>)
 8011cb8:	623b      	str	r3, [r7, #32]
			break;
 8011cba:	e0cc      	b.n	8011e56 <disp_layout+0x446>
		case CODE_ZONE_TEXT1:
			ssd1306_SetCursor(0, TEXT_Y);
 8011cbc:	210c      	movs	r1, #12
 8011cbe:	2000      	movs	r0, #0
 8011cc0:	f7ff fa7e 	bl	80111c0 <ssd1306_SetCursor>
			curfont = &Font_11x18;
 8011cc4:	4b2d      	ldr	r3, [pc, #180]	; (8011d7c <disp_layout+0x36c>)
 8011cc6:	623b      	str	r3, [r7, #32]
			break;
 8011cc8:	e0c5      	b.n	8011e56 <disp_layout+0x446>
		case CODE_ZONE_TEXT2:
			ssd1306_SetCursor(RIGHT_X, TEXT_Y);
 8011cca:	210c      	movs	r1, #12
 8011ccc:	2040      	movs	r0, #64	; 0x40
 8011cce:	f7ff fa77 	bl	80111c0 <ssd1306_SetCursor>
			curfont = &Font_11x18;
 8011cd2:	4b2a      	ldr	r3, [pc, #168]	; (8011d7c <disp_layout+0x36c>)
 8011cd4:	623b      	str	r3, [r7, #32]
			break;
 8011cd6:	e0be      	b.n	8011e56 <disp_layout+0x446>
		case CODE_ZONE_TEXT1s:
			ssd1306_SetCursor(0, TEXT_Y);
 8011cd8:	210c      	movs	r1, #12
 8011cda:	2000      	movs	r0, #0
 8011cdc:	f7ff fa70 	bl	80111c0 <ssd1306_SetCursor>
			curfont = &Font_7x10;
 8011ce0:	4b24      	ldr	r3, [pc, #144]	; (8011d74 <disp_layout+0x364>)
 8011ce2:	623b      	str	r3, [r7, #32]
			break;
 8011ce4:	e0b7      	b.n	8011e56 <disp_layout+0x446>
		case CODE_ZONE_TEXT2s:
			ssd1306_SetCursor(RIGHT_X, TEXT_Y);
 8011ce6:	210c      	movs	r1, #12
 8011ce8:	2040      	movs	r0, #64	; 0x40
 8011cea:	f7ff fa69 	bl	80111c0 <ssd1306_SetCursor>
			curfont = &Font_7x10;
 8011cee:	4b21      	ldr	r3, [pc, #132]	; (8011d74 <disp_layout+0x364>)
 8011cf0:	623b      	str	r3, [r7, #32]
			break;
 8011cf2:	e0b0      	b.n	8011e56 <disp_layout+0x446>
		case CODE_ZONE_TEXT3s:
			ssd1306_SetCursor(0, TEXT_Y+10);
 8011cf4:	2116      	movs	r1, #22
 8011cf6:	2000      	movs	r0, #0
 8011cf8:	f7ff fa62 	bl	80111c0 <ssd1306_SetCursor>
			curfont = &Font_7x10;
 8011cfc:	4b1d      	ldr	r3, [pc, #116]	; (8011d74 <disp_layout+0x364>)
 8011cfe:	623b      	str	r3, [r7, #32]
			break;
 8011d00:	e0a9      	b.n	8011e56 <disp_layout+0x446>
		case CODE_ZONE_TEXT4s:
			ssd1306_SetCursor(RIGHT_X, TEXT_Y+10);
 8011d02:	2116      	movs	r1, #22
 8011d04:	2040      	movs	r0, #64	; 0x40
 8011d06:	f7ff fa5b 	bl	80111c0 <ssd1306_SetCursor>
			curfont = &Font_7x10;
 8011d0a:	4b1a      	ldr	r3, [pc, #104]	; (8011d74 <disp_layout+0x364>)
 8011d0c:	623b      	str	r3, [r7, #32]
			break;
 8011d0e:	e0a2      	b.n	8011e56 <disp_layout+0x446>
			ssd1306_SetCursor(0,0);
			curfont = &Font_16x26;
			break;
#endif
		case CODE_DIGIT:
			i++;
 8011d10:	69fb      	ldr	r3, [r7, #28]
 8011d12:	3301      	adds	r3, #1
 8011d14:	61fb      	str	r3, [r7, #28]
			v16u = (int16_t) _GET_REG(numdisp, d[i]);
 8011d16:	69fb      	ldr	r3, [r7, #28]
 8011d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011d1a:	4413      	add	r3, r2
 8011d1c:	781b      	ldrb	r3, [r3, #0]
 8011d1e:	4619      	mov	r1, r3
 8011d20:	6878      	ldr	r0, [r7, #4]
 8011d22:	f7ff fe57 	bl	80119d4 <ihm_getvar>
 8011d26:	4603      	mov	r3, r0
 8011d28:	82fb      	strh	r3, [r7, #22]
			ssd1306_WriteChar('0'+(v16u & 0xF) , *curfont, White);
 8011d2a:	8afb      	ldrh	r3, [r7, #22]
 8011d2c:	b2db      	uxtb	r3, r3
 8011d2e:	f003 030f 	and.w	r3, r3, #15
 8011d32:	b2db      	uxtb	r3, r3
 8011d34:	3330      	adds	r3, #48	; 0x30
 8011d36:	b2d8      	uxtb	r0, r3
 8011d38:	6a3a      	ldr	r2, [r7, #32]
 8011d3a:	2301      	movs	r3, #1
 8011d3c:	ca06      	ldmia	r2, {r1, r2}
 8011d3e:	f7ff f991 	bl	8011064 <ssd1306_WriteChar>
			break;
 8011d42:	e088      	b.n	8011e56 <disp_layout+0x446>
		case CODE_SVAL:
			i++;
 8011d44:	69fb      	ldr	r3, [r7, #28]
 8011d46:	3301      	adds	r3, #1
 8011d48:	61fb      	str	r3, [r7, #28]
			v16s = (int16_t) _GET_REG(numdisp, d[i]);
 8011d4a:	69fb      	ldr	r3, [r7, #28]
 8011d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011d4e:	4413      	add	r3, r2
 8011d50:	781b      	ldrb	r3, [r3, #0]
 8011d52:	4619      	mov	r1, r3
 8011d54:	6878      	ldr	r0, [r7, #4]
 8011d56:	f7ff fe3d 	bl	80119d4 <ihm_getvar>
 8011d5a:	4603      	mov	r3, r0
 8011d5c:	82bb      	strh	r3, [r7, #20]
			write_snum(v16s, curfont);
 8011d5e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8011d62:	6a39      	ldr	r1, [r7, #32]
 8011d64:	4618      	mov	r0, r3
 8011d66:	f000 f903 	bl	8011f70 <write_snum>
			break;
 8011d6a:	e074      	b.n	8011e56 <disp_layout+0x446>
 8011d6c:	200050a4 	.word	0x200050a4
 8011d70:	08018a84 	.word	0x08018a84
 8011d74:	20000184 	.word	0x20000184
 8011d78:	20000198 	.word	0x20000198
 8011d7c:	2000018c 	.word	0x2000018c
		case CODE_SVAL4:
			i++;
 8011d80:	69fb      	ldr	r3, [r7, #28]
 8011d82:	3301      	adds	r3, #1
 8011d84:	61fb      	str	r3, [r7, #28]
			v16s = (int16_t) _GET_REG(numdisp, d[i]);
 8011d86:	69fb      	ldr	r3, [r7, #28]
 8011d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011d8a:	4413      	add	r3, r2
 8011d8c:	781b      	ldrb	r3, [r3, #0]
 8011d8e:	4619      	mov	r1, r3
 8011d90:	6878      	ldr	r0, [r7, #4]
 8011d92:	f7ff fe1f 	bl	80119d4 <ihm_getvar>
 8011d96:	4603      	mov	r3, r0
 8011d98:	82bb      	strh	r3, [r7, #20]
			write_snum4(v16s, curfont);
 8011d9a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8011d9e:	6a39      	ldr	r1, [r7, #32]
 8011da0:	4618      	mov	r0, r3
 8011da2:	f000 f923 	bl	8011fec <write_snum4>
			break;
 8011da6:	e056      	b.n	8011e56 <disp_layout+0x446>
		case CODE_UVAL:
			i++;
 8011da8:	69fb      	ldr	r3, [r7, #28]
 8011daa:	3301      	adds	r3, #1
 8011dac:	61fb      	str	r3, [r7, #28]
			v16u = _GET_REG(numdisp, d[i]);
 8011dae:	69fb      	ldr	r3, [r7, #28]
 8011db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011db2:	4413      	add	r3, r2
 8011db4:	781b      	ldrb	r3, [r3, #0]
 8011db6:	4619      	mov	r1, r3
 8011db8:	6878      	ldr	r0, [r7, #4]
 8011dba:	f7ff fe0b 	bl	80119d4 <ihm_getvar>
 8011dbe:	4603      	mov	r3, r0
 8011dc0:	82fb      	strh	r3, [r7, #22]
			write_unum(v16u, curfont);
 8011dc2:	8afb      	ldrh	r3, [r7, #22]
 8011dc4:	6a39      	ldr	r1, [r7, #32]
 8011dc6:	4618      	mov	r0, r3
 8011dc8:	f000 f8c2 	bl	8011f50 <write_unum>
			break;
 8011dcc:	e043      	b.n	8011e56 <disp_layout+0x446>
		case CODE_GRAPH_LEVEL:
			i++;
 8011dce:	69fb      	ldr	r3, [r7, #28]
 8011dd0:	3301      	adds	r3, #1
 8011dd2:	61fb      	str	r3, [r7, #28]
			v16u = _GET_REG(numdisp, d[i]);
 8011dd4:	69fb      	ldr	r3, [r7, #28]
 8011dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011dd8:	4413      	add	r3, r2
 8011dda:	781b      	ldrb	r3, [r3, #0]
 8011ddc:	4619      	mov	r1, r3
 8011dde:	6878      	ldr	r0, [r7, #4]
 8011de0:	f7ff fdf8 	bl	80119d4 <ihm_getvar>
 8011de4:	4603      	mov	r3, r0
 8011de6:	82fb      	strh	r3, [r7, #22]
			write_bargraph(v16u, 0, 100);
 8011de8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011dec:	2264      	movs	r2, #100	; 0x64
 8011dee:	2100      	movs	r1, #0
 8011df0:	4618      	mov	r0, r3
 8011df2:	f000 f935 	bl	8012060 <write_bargraph>
			break;
 8011df6:	e02e      	b.n	8011e56 <disp_layout+0x446>
		case CODE_TIM4_CNT: {
			extern TIM_HandleTypeDef htim4;
			v16u = htim4.Instance->CNT;
 8011df8:	4b29      	ldr	r3, [pc, #164]	; (8011ea0 <disp_layout+0x490>)
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011dfe:	82fb      	strh	r3, [r7, #22]
			write_unum(v16u, curfont);
 8011e00:	8afb      	ldrh	r3, [r7, #22]
 8011e02:	6a39      	ldr	r1, [r7, #32]
 8011e04:	4618      	mov	r0, r3
 8011e06:	f000 f8a3 	bl	8011f50 <write_unum>
			break;
 8011e0a:	e024      	b.n	8011e56 <disp_layout+0x446>
		}
		case CODE_PROFILE:
			write_unum((int16_t)last_dur1, curfont);
 8011e0c:	4b25      	ldr	r3, [pc, #148]	; (8011ea4 <disp_layout+0x494>)
 8011e0e:	881b      	ldrh	r3, [r3, #0]
 8011e10:	6a39      	ldr	r1, [r7, #32]
 8011e12:	4618      	mov	r0, r3
 8011e14:	f000 f89c 	bl	8011f50 <write_unum>
			ssd1306_WriteChar('/', *curfont, White);
 8011e18:	6a3a      	ldr	r2, [r7, #32]
 8011e1a:	2301      	movs	r3, #1
 8011e1c:	ca06      	ldmia	r2, {r1, r2}
 8011e1e:	202f      	movs	r0, #47	; 0x2f
 8011e20:	f7ff f920 	bl	8011064 <ssd1306_WriteChar>
			write_unum((int16_t)last_dur2, curfont);
 8011e24:	4b20      	ldr	r3, [pc, #128]	; (8011ea8 <disp_layout+0x498>)
 8011e26:	881b      	ldrh	r3, [r3, #0]
 8011e28:	6a39      	ldr	r1, [r7, #32]
 8011e2a:	4618      	mov	r0, r3
 8011e2c:	f000 f890 	bl	8011f50 <write_unum>
			break;
 8011e30:	e011      	b.n	8011e56 <disp_layout+0x446>
		case CODE_DIR:
			i+=1;
 8011e32:	69fb      	ldr	r3, [r7, #28]
 8011e34:	3301      	adds	r3, #1
 8011e36:	61fb      	str	r3, [r7, #28]
			break;
 8011e38:	e00d      	b.n	8011e56 <disp_layout+0x446>


		default:
			switch (d[i] & 0xC0) {
 8011e3a:	69fb      	ldr	r3, [r7, #28]
 8011e3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011e3e:	4413      	add	r3, r2
 8011e40:	781b      	ldrb	r3, [r3, #0]
 8011e42:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8011e46:	2bc0      	cmp	r3, #192	; 0xc0
 8011e48:	d000      	beq.n	8011e4c <disp_layout+0x43c>
			default:
			case 0x80: break;
 8011e4a:	e004      	b.n	8011e56 <disp_layout+0x446>
			case 0xC0: i++; break;
 8011e4c:	69fb      	ldr	r3, [r7, #28]
 8011e4e:	3301      	adds	r3, #1
 8011e50:	61fb      	str	r3, [r7, #28]
 8011e52:	e000      	b.n	8011e56 <disp_layout+0x446>
		case CODE_NOP: break;
 8011e54:	bf00      	nop
	for (int i=0; i<MAX_OPCODE_PER_DISPLAY; i++) {
 8011e56:	69fb      	ldr	r3, [r7, #28]
 8011e58:	3301      	adds	r3, #1
 8011e5a:	61fb      	str	r3, [r7, #28]
 8011e5c:	69fb      	ldr	r3, [r7, #28]
 8011e5e:	2b17      	cmp	r3, #23
 8011e60:	f77f adf3 	ble.w	8011a4a <disp_layout+0x3a>
 8011e64:	e000      	b.n	8011e68 <disp_layout+0x458>
		if (CODE_END == d[i]) break;
 8011e66:	bf00      	nop
			//case 0xB0: i+=2; break;
			//case 0xD0: i+=4; break;
			}
		}
	}
	uint32_t t1 = HAL_GetTick();
 8011e68:	f7f0 f8ca 	bl	8002000 <HAL_GetTick>
 8011e6c:	60f8      	str	r0, [r7, #12]
	ssd1306_UpdateScreen();
 8011e6e:	f7ff f873 	bl	8010f58 <ssd1306_UpdateScreen>
	uint32_t t2 = HAL_GetTick();
 8011e72:	f7f0 f8c5 	bl	8002000 <HAL_GetTick>
 8011e76:	60b8      	str	r0, [r7, #8]
	last_dur1 = t2-t0;
 8011e78:	68bb      	ldr	r3, [r7, #8]
 8011e7a:	b29a      	uxth	r2, r3
 8011e7c:	69bb      	ldr	r3, [r7, #24]
 8011e7e:	b29b      	uxth	r3, r3
 8011e80:	1ad3      	subs	r3, r2, r3
 8011e82:	b29a      	uxth	r2, r3
 8011e84:	4b07      	ldr	r3, [pc, #28]	; (8011ea4 <disp_layout+0x494>)
 8011e86:	801a      	strh	r2, [r3, #0]
	last_dur2 = t2-t1;
 8011e88:	68bb      	ldr	r3, [r7, #8]
 8011e8a:	b29a      	uxth	r2, r3
 8011e8c:	68fb      	ldr	r3, [r7, #12]
 8011e8e:	b29b      	uxth	r3, r3
 8011e90:	1ad3      	subs	r3, r2, r3
 8011e92:	b29a      	uxth	r2, r3
 8011e94:	4b04      	ldr	r3, [pc, #16]	; (8011ea8 <disp_layout+0x498>)
 8011e96:	801a      	strh	r2, [r3, #0]
}
 8011e98:	bf00      	nop
 8011e9a:	3728      	adds	r7, #40	; 0x28
 8011e9c:	46bd      	mov	sp, r7
 8011e9e:	bd80      	pop	{r7, pc}
 8011ea0:	20005abc 	.word	0x20005abc
 8011ea4:	200050c8 	.word	0x200050c8
 8011ea8:	200050ca 	.word	0x200050ca

08011eac <_write_unum>:
	}
}
*/

static void _write_unum(uint16_t v, FontDef *curfont, uint8_t hzero)
{
 8011eac:	b580      	push	{r7, lr}
 8011eae:	b086      	sub	sp, #24
 8011eb0:	af00      	add	r7, sp, #0
 8011eb2:	4603      	mov	r3, r0
 8011eb4:	6039      	str	r1, [r7, #0]
 8011eb6:	80fb      	strh	r3, [r7, #6]
 8011eb8:	4613      	mov	r3, r2
 8011eba:	717b      	strb	r3, [r7, #5]
	int f = 0;
 8011ebc:	2300      	movs	r3, #0
 8011ebe:	617b      	str	r3, [r7, #20]
	for (int i=10000;i>0; i = i /10) {
 8011ec0:	f242 7310 	movw	r3, #10000	; 0x2710
 8011ec4:	613b      	str	r3, [r7, #16]
 8011ec6:	e039      	b.n	8011f3c <_write_unum+0x90>
		int n = v/i;
 8011ec8:	88fa      	ldrh	r2, [r7, #6]
 8011eca:	693b      	ldr	r3, [r7, #16]
 8011ecc:	fb92 f3f3 	sdiv	r3, r2, r3
 8011ed0:	60fb      	str	r3, [r7, #12]
		if (!n && !f && (i>1)) {
 8011ed2:	68fb      	ldr	r3, [r7, #12]
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d112      	bne.n	8011efe <_write_unum+0x52>
 8011ed8:	697b      	ldr	r3, [r7, #20]
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d10f      	bne.n	8011efe <_write_unum+0x52>
 8011ede:	693b      	ldr	r3, [r7, #16]
 8011ee0:	2b01      	cmp	r3, #1
 8011ee2:	dd0c      	ble.n	8011efe <_write_unum+0x52>
			if (!hzero) continue;
 8011ee4:	797b      	ldrb	r3, [r7, #5]
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d01f      	beq.n	8011f2a <_write_unum+0x7e>
			if (hzero == ' ') {
 8011eea:	797b      	ldrb	r3, [r7, #5]
 8011eec:	2b20      	cmp	r3, #32
 8011eee:	d106      	bne.n	8011efe <_write_unum+0x52>
				ssd1306_WriteChar(' ', *curfont, White);
 8011ef0:	683a      	ldr	r2, [r7, #0]
 8011ef2:	2301      	movs	r3, #1
 8011ef4:	ca06      	ldmia	r2, {r1, r2}
 8011ef6:	2020      	movs	r0, #32
 8011ef8:	f7ff f8b4 	bl	8011064 <ssd1306_WriteChar>
				continue;
 8011efc:	e016      	b.n	8011f2c <_write_unum+0x80>
			}
		}
		f = 1;
 8011efe:	2301      	movs	r3, #1
 8011f00:	617b      	str	r3, [r7, #20]
		ssd1306_WriteChar(n+'0', *curfont, White);
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	b2db      	uxtb	r3, r3
 8011f06:	3330      	adds	r3, #48	; 0x30
 8011f08:	b2d8      	uxtb	r0, r3
 8011f0a:	683a      	ldr	r2, [r7, #0]
 8011f0c:	2301      	movs	r3, #1
 8011f0e:	ca06      	ldmia	r2, {r1, r2}
 8011f10:	f7ff f8a8 	bl	8011064 <ssd1306_WriteChar>
		v = v - i*n;
 8011f14:	693b      	ldr	r3, [r7, #16]
 8011f16:	b29a      	uxth	r2, r3
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	b29b      	uxth	r3, r3
 8011f1c:	fb12 f303 	smulbb	r3, r2, r3
 8011f20:	b29b      	uxth	r3, r3
 8011f22:	88fa      	ldrh	r2, [r7, #6]
 8011f24:	1ad3      	subs	r3, r2, r3
 8011f26:	80fb      	strh	r3, [r7, #6]
 8011f28:	e000      	b.n	8011f2c <_write_unum+0x80>
			if (!hzero) continue;
 8011f2a:	bf00      	nop
	for (int i=10000;i>0; i = i /10) {
 8011f2c:	693b      	ldr	r3, [r7, #16]
 8011f2e:	4a07      	ldr	r2, [pc, #28]	; (8011f4c <_write_unum+0xa0>)
 8011f30:	fb82 1203 	smull	r1, r2, r2, r3
 8011f34:	1092      	asrs	r2, r2, #2
 8011f36:	17db      	asrs	r3, r3, #31
 8011f38:	1ad3      	subs	r3, r2, r3
 8011f3a:	613b      	str	r3, [r7, #16]
 8011f3c:	693b      	ldr	r3, [r7, #16]
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	dcc2      	bgt.n	8011ec8 <_write_unum+0x1c>
	}
}
 8011f42:	bf00      	nop
 8011f44:	3718      	adds	r7, #24
 8011f46:	46bd      	mov	sp, r7
 8011f48:	bd80      	pop	{r7, pc}
 8011f4a:	bf00      	nop
 8011f4c:	66666667 	.word	0x66666667

08011f50 <write_unum>:
static void write_unum(uint16_t v, FontDef *curfont)
{
 8011f50:	b580      	push	{r7, lr}
 8011f52:	b082      	sub	sp, #8
 8011f54:	af00      	add	r7, sp, #0
 8011f56:	4603      	mov	r3, r0
 8011f58:	6039      	str	r1, [r7, #0]
 8011f5a:	80fb      	strh	r3, [r7, #6]
	_write_unum(v, curfont, 0);
 8011f5c:	88fb      	ldrh	r3, [r7, #6]
 8011f5e:	2200      	movs	r2, #0
 8011f60:	6839      	ldr	r1, [r7, #0]
 8011f62:	4618      	mov	r0, r3
 8011f64:	f7ff ffa2 	bl	8011eac <_write_unum>
}
 8011f68:	bf00      	nop
 8011f6a:	3708      	adds	r7, #8
 8011f6c:	46bd      	mov	sp, r7
 8011f6e:	bd80      	pop	{r7, pc}

08011f70 <write_snum>:
static void write_snum(int16_t v, FontDef *curfont)
{
 8011f70:	b580      	push	{r7, lr}
 8011f72:	b082      	sub	sp, #8
 8011f74:	af00      	add	r7, sp, #0
 8011f76:	4603      	mov	r3, r0
 8011f78:	6039      	str	r1, [r7, #0]
 8011f7a:	80fb      	strh	r3, [r7, #6]
	if ((v<-5000)||(v>5000)) {
 8011f7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011f80:	4a17      	ldr	r2, [pc, #92]	; (8011fe0 <write_snum+0x70>)
 8011f82:	4293      	cmp	r3, r2
 8011f84:	db05      	blt.n	8011f92 <write_snum+0x22>
 8011f86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8011f8e:	4293      	cmp	r3, r2
 8011f90:	dd06      	ble.n	8011fa0 <write_snum+0x30>
		itm_debug1(DBG_UI|DBG_ERR, "strange here", v);
 8011f92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011f96:	461a      	mov	r2, r3
 8011f98:	4912      	ldr	r1, [pc, #72]	; (8011fe4 <write_snum+0x74>)
 8011f9a:	4813      	ldr	r0, [pc, #76]	; (8011fe8 <write_snum+0x78>)
 8011f9c:	f7ff fcb0 	bl	8011900 <itm_debug1>
	}
	if (v < 0) {
 8011fa0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	da06      	bge.n	8011fb6 <write_snum+0x46>
		ssd1306_WriteChar('-', *curfont, White);
 8011fa8:	683a      	ldr	r2, [r7, #0]
 8011faa:	2301      	movs	r3, #1
 8011fac:	ca06      	ldmia	r2, {r1, r2}
 8011fae:	202d      	movs	r0, #45	; 0x2d
 8011fb0:	f7ff f858 	bl	8011064 <ssd1306_WriteChar>
 8011fb4:	e005      	b.n	8011fc2 <write_snum+0x52>
	} else {
		ssd1306_WriteChar('+', *curfont, White);
 8011fb6:	683a      	ldr	r2, [r7, #0]
 8011fb8:	2301      	movs	r3, #1
 8011fba:	ca06      	ldmia	r2, {r1, r2}
 8011fbc:	202b      	movs	r0, #43	; 0x2b
 8011fbe:	f7ff f851 	bl	8011064 <ssd1306_WriteChar>
	}
	write_unum(abs(v), curfont);
 8011fc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	bfb8      	it	lt
 8011fca:	425b      	neglt	r3, r3
 8011fcc:	b29b      	uxth	r3, r3
 8011fce:	6839      	ldr	r1, [r7, #0]
 8011fd0:	4618      	mov	r0, r3
 8011fd2:	f7ff ffbd 	bl	8011f50 <write_unum>
}
 8011fd6:	bf00      	nop
 8011fd8:	3708      	adds	r7, #8
 8011fda:	46bd      	mov	sp, r7
 8011fdc:	bd80      	pop	{r7, pc}
 8011fde:	bf00      	nop
 8011fe0:	ffffec78 	.word	0xffffec78
 8011fe4:	080170d4 	.word	0x080170d4
 8011fe8:	80000800 	.word	0x80000800

08011fec <write_snum4>:

static void write_snum4(int16_t v, FontDef *curfont)
{
 8011fec:	b580      	push	{r7, lr}
 8011fee:	b082      	sub	sp, #8
 8011ff0:	af00      	add	r7, sp, #0
 8011ff2:	4603      	mov	r3, r0
 8011ff4:	6039      	str	r1, [r7, #0]
 8011ff6:	80fb      	strh	r3, [r7, #6]
	if (v<-9999) v=-9999;
 8011ff8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011ffc:	4a17      	ldr	r2, [pc, #92]	; (801205c <write_snum4+0x70>)
 8011ffe:	4293      	cmp	r3, r2
 8012000:	da02      	bge.n	8012008 <write_snum4+0x1c>
 8012002:	f64d 03f1 	movw	r3, #55537	; 0xd8f1
 8012006:	80fb      	strh	r3, [r7, #6]
	if (v>9999) v=9999;
 8012008:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801200c:	f242 720f 	movw	r2, #9999	; 0x270f
 8012010:	4293      	cmp	r3, r2
 8012012:	dd02      	ble.n	801201a <write_snum4+0x2e>
 8012014:	f242 730f 	movw	r3, #9999	; 0x270f
 8012018:	80fb      	strh	r3, [r7, #6]
	if (v < 0) {
 801201a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801201e:	2b00      	cmp	r3, #0
 8012020:	da06      	bge.n	8012030 <write_snum4+0x44>
		ssd1306_WriteChar('-', *curfont, White);
 8012022:	683a      	ldr	r2, [r7, #0]
 8012024:	2301      	movs	r3, #1
 8012026:	ca06      	ldmia	r2, {r1, r2}
 8012028:	202d      	movs	r0, #45	; 0x2d
 801202a:	f7ff f81b 	bl	8011064 <ssd1306_WriteChar>
 801202e:	e005      	b.n	801203c <write_snum4+0x50>
	} else {
		ssd1306_WriteChar('+', *curfont, White);
 8012030:	683a      	ldr	r2, [r7, #0]
 8012032:	2301      	movs	r3, #1
 8012034:	ca06      	ldmia	r2, {r1, r2}
 8012036:	202b      	movs	r0, #43	; 0x2b
 8012038:	f7ff f814 	bl	8011064 <ssd1306_WriteChar>
	}
	_write_unum(abs(v), curfont,1);
 801203c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012040:	2b00      	cmp	r3, #0
 8012042:	bfb8      	it	lt
 8012044:	425b      	neglt	r3, r3
 8012046:	b29b      	uxth	r3, r3
 8012048:	2201      	movs	r2, #1
 801204a:	6839      	ldr	r1, [r7, #0]
 801204c:	4618      	mov	r0, r3
 801204e:	f7ff ff2d 	bl	8011eac <_write_unum>
}
 8012052:	bf00      	nop
 8012054:	3708      	adds	r7, #8
 8012056:	46bd      	mov	sp, r7
 8012058:	bd80      	pop	{r7, pc}
 801205a:	bf00      	nop
 801205c:	ffffd8f1 	.word	0xffffd8f1

08012060 <write_bargraph>:

static void write_bargraph(int16_t v, int16_t min, int16_t max)
{
 8012060:	b590      	push	{r4, r7, lr}
 8012062:	b087      	sub	sp, #28
 8012064:	af02      	add	r7, sp, #8
 8012066:	4603      	mov	r3, r0
 8012068:	80fb      	strh	r3, [r7, #6]
 801206a:	460b      	mov	r3, r1
 801206c:	80bb      	strh	r3, [r7, #4]
 801206e:	4613      	mov	r3, r2
 8012070:	807b      	strh	r3, [r7, #2]
	uint8_t x0 = ssd1306_GetCursorX();
 8012072:	f7ff f8bd 	bl	80111f0 <ssd1306_GetCursorX>
 8012076:	4603      	mov	r3, r0
 8012078:	73fb      	strb	r3, [r7, #15]
	uint8_t y0 = ssd1306_GetCursorY();
 801207a:	f7ff f8c5 	bl	8011208 <ssd1306_GetCursorY>
 801207e:	4603      	mov	r3, r0
 8012080:	73bb      	strb	r3, [r7, #14]
	const uint8_t w = 50;
 8012082:	2332      	movs	r3, #50	; 0x32
 8012084:	737b      	strb	r3, [r7, #13]
	const uint8_t h = 11; //y0+=3;
 8012086:	230b      	movs	r3, #11
 8012088:	733b      	strb	r3, [r7, #12]
	ssd1306_DrawRectangle(x0, y0, x0+w, y0+h, White);
 801208a:	7bfa      	ldrb	r2, [r7, #15]
 801208c:	7b7b      	ldrb	r3, [r7, #13]
 801208e:	4413      	add	r3, r2
 8012090:	b2dc      	uxtb	r4, r3
 8012092:	7bba      	ldrb	r2, [r7, #14]
 8012094:	7b3b      	ldrb	r3, [r7, #12]
 8012096:	4413      	add	r3, r2
 8012098:	b2da      	uxtb	r2, r3
 801209a:	7bb9      	ldrb	r1, [r7, #14]
 801209c:	7bf8      	ldrb	r0, [r7, #15]
 801209e:	2301      	movs	r3, #1
 80120a0:	9300      	str	r3, [sp, #0]
 80120a2:	4613      	mov	r3, r2
 80120a4:	4622      	mov	r2, r4
 80120a6:	f7ff f927 	bl	80112f8 <ssd1306_DrawRectangle>

	if (v>max) v=max;
 80120aa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80120ae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80120b2:	429a      	cmp	r2, r3
 80120b4:	dd01      	ble.n	80120ba <write_bargraph+0x5a>
 80120b6:	887b      	ldrh	r3, [r7, #2]
 80120b8:	80fb      	strh	r3, [r7, #6]
	if (v<min) v=min;
 80120ba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80120be:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80120c2:	429a      	cmp	r2, r3
 80120c4:	da01      	bge.n	80120ca <write_bargraph+0x6a>
 80120c6:	88bb      	ldrh	r3, [r7, #4]
 80120c8:	80fb      	strh	r3, [r7, #6]
	int l = ((int)w*(v-min))/(max-min);
 80120ca:	7b7b      	ldrb	r3, [r7, #13]
 80120cc:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80120d0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80120d4:	1a8a      	subs	r2, r1, r2
 80120d6:	fb02 f203 	mul.w	r2, r2, r3
 80120da:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80120de:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80120e2:	1acb      	subs	r3, r1, r3
 80120e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80120e8:	60bb      	str	r3, [r7, #8]
	if (l>0) ssd1306_FillZone(x0, y0, l, h, White);
 80120ea:	68bb      	ldr	r3, [r7, #8]
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	dd09      	ble.n	8012104 <write_bargraph+0xa4>
 80120f0:	68bb      	ldr	r3, [r7, #8]
 80120f2:	b2da      	uxtb	r2, r3
 80120f4:	7b3c      	ldrb	r4, [r7, #12]
 80120f6:	7bb9      	ldrb	r1, [r7, #14]
 80120f8:	7bf8      	ldrb	r0, [r7, #15]
 80120fa:	2301      	movs	r3, #1
 80120fc:	9300      	str	r3, [sp, #0]
 80120fe:	4623      	mov	r3, r4
 8012100:	f7fe fe9c 	bl	8010e3c <ssd1306_FillZone>
	if ((min<0) && (max>0)) {
 8012104:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012108:	2b00      	cmp	r3, #0
 801210a:	da11      	bge.n	8012130 <write_bargraph+0xd0>
 801210c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012110:	2b00      	cmp	r3, #0
 8012112:	dd0d      	ble.n	8012130 <write_bargraph+0xd0>
		l = ((int)w*(0-min))/(max-min);
 8012114:	7b7b      	ldrb	r3, [r7, #13]
 8012116:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 801211a:	4252      	negs	r2, r2
 801211c:	fb02 f203 	mul.w	r2, r2, r3
 8012120:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8012124:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012128:	1acb      	subs	r3, r1, r3
 801212a:	fb92 f3f3 	sdiv	r3, r2, r3
 801212e:	60bb      	str	r3, [r7, #8]
		/// TODO
	}
}
 8012130:	bf00      	nop
 8012132:	3714      	adds	r7, #20
 8012134:	46bd      	mov	sp, r7
 8012136:	bd90      	pop	{r4, r7, pc}

08012138 <itm_debug1>:
//void _itm_debug1(const char *msg, int v);
//void _itm_debug2(const char *msg, int v1, int v2);
void _itm_debug3(const char *msg, int v1, int v2, int v3, int n);

static inline void itm_debug1(uint32_t f, const char *msg, int v)
{
 8012138:	b580      	push	{r7, lr}
 801213a:	b086      	sub	sp, #24
 801213c:	af02      	add	r7, sp, #8
 801213e:	60f8      	str	r0, [r7, #12]
 8012140:	60b9      	str	r1, [r7, #8]
 8012142:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 8012144:	4b08      	ldr	r3, [pc, #32]	; (8012168 <itm_debug1+0x30>)
 8012146:	681a      	ldr	r2, [r3, #0]
 8012148:	68fb      	ldr	r3, [r7, #12]
 801214a:	4013      	ands	r3, r2
 801214c:	2b00      	cmp	r3, #0
 801214e:	d007      	beq.n	8012160 <itm_debug1+0x28>
 8012150:	2301      	movs	r3, #1
 8012152:	9300      	str	r3, [sp, #0]
 8012154:	2300      	movs	r3, #0
 8012156:	2200      	movs	r2, #0
 8012158:	6879      	ldr	r1, [r7, #4]
 801215a:	68b8      	ldr	r0, [r7, #8]
 801215c:	f004 fbb8 	bl	80168d0 <_itm_debug3>
}
 8012160:	bf00      	nop
 8012162:	3710      	adds	r7, #16
 8012164:	46bd      	mov	sp, r7
 8012166:	bd80      	pop	{r7, pc}
 8012168:	2000047c 	.word	0x2000047c

0801216c <itm_debug2>:
static inline void itm_debug2(uint32_t f, const char *msg, int v1, int v2)
{
 801216c:	b580      	push	{r7, lr}
 801216e:	b086      	sub	sp, #24
 8012170:	af02      	add	r7, sp, #8
 8012172:	60f8      	str	r0, [r7, #12]
 8012174:	60b9      	str	r1, [r7, #8]
 8012176:	607a      	str	r2, [r7, #4]
 8012178:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, 0, 2);
 801217a:	4b09      	ldr	r3, [pc, #36]	; (80121a0 <itm_debug2+0x34>)
 801217c:	681a      	ldr	r2, [r3, #0]
 801217e:	68fb      	ldr	r3, [r7, #12]
 8012180:	4013      	ands	r3, r2
 8012182:	2b00      	cmp	r3, #0
 8012184:	d007      	beq.n	8012196 <itm_debug2+0x2a>
 8012186:	2302      	movs	r3, #2
 8012188:	9300      	str	r3, [sp, #0]
 801218a:	2300      	movs	r3, #0
 801218c:	683a      	ldr	r2, [r7, #0]
 801218e:	6879      	ldr	r1, [r7, #4]
 8012190:	68b8      	ldr	r0, [r7, #8]
 8012192:	f004 fb9d 	bl	80168d0 <_itm_debug3>
}
 8012196:	bf00      	nop
 8012198:	3710      	adds	r7, #16
 801219a:	46bd      	mov	sp, r7
 801219c:	bd80      	pop	{r7, pc}
 801219e:	bf00      	nop
 80121a0:	2000047c 	.word	0x2000047c

080121a4 <mqf_read_to_ui>:
LFMQUEUE_DEF_H(to_forward_usb, msg_64_t)
LFMQUEUE_DEF_H(from_forward_usb, msg_64_t)

/* to UI */

LFMQUEUE_DEF_H(to_ui, msg_64_t)
 80121a4:	b580      	push	{r7, lr}
 80121a6:	b082      	sub	sp, #8
 80121a8:	af00      	add	r7, sp, #0
 80121aa:	6078      	str	r0, [r7, #4]
 80121ac:	6879      	ldr	r1, [r7, #4]
 80121ae:	4804      	ldr	r0, [pc, #16]	; (80121c0 <mqf_read_to_ui+0x1c>)
 80121b0:	f004 fcf4 	bl	8016b9c <mqf_read>
 80121b4:	4603      	mov	r3, r0
 80121b6:	4618      	mov	r0, r3
 80121b8:	3708      	adds	r7, #8
 80121ba:	46bd      	mov	sp, r7
 80121bc:	bd80      	pop	{r7, pc}
 80121be:	bf00      	nop
 80121c0:	20000458 	.word	0x20000458

080121c4 <mqf_write_from_ui>:
LFMQUEUE_DEF_H(from_ui, msg_64_t)
 80121c4:	b580      	push	{r7, lr}
 80121c6:	b082      	sub	sp, #8
 80121c8:	af00      	add	r7, sp, #0
 80121ca:	6078      	str	r0, [r7, #4]
 80121cc:	6879      	ldr	r1, [r7, #4]
 80121ce:	4804      	ldr	r0, [pc, #16]	; (80121e0 <mqf_write_from_ui+0x1c>)
 80121d0:	f004 fc6a 	bl	8016aa8 <mqf_write>
 80121d4:	4603      	mov	r3, r0
 80121d6:	4618      	mov	r0, r3
 80121d8:	3708      	adds	r7, #8
 80121da:	46bd      	mov	sp, r7
 80121dc:	bd80      	pop	{r7, pc}
 80121de:	bf00      	nop
 80121e0:	20000464 	.word	0x20000464

080121e4 <get_rotary>:
#define ENC_MUL2  		1
#define ENC_DIV2	 	0
#define ENC_MAX ((100<<ENC_DIV2)>>ENC_MUL2)

static uint16_t get_rotary(TIM_HandleTypeDef *ptdef)
{
 80121e4:	b480      	push	{r7}
 80121e6:	b085      	sub	sp, #20
 80121e8:	af00      	add	r7, sp, #0
 80121ea:	6078      	str	r0, [r7, #4]
	uint16_t p = __HAL_TIM_GET_COUNTER(ptdef);
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	681b      	ldr	r3, [r3, #0]
 80121f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121f2:	81fb      	strh	r3, [r7, #14]
	if (p>0x7FFF) {
 80121f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	da06      	bge.n	801220a <get_rotary+0x26>
		p = 0;
 80121fc:	2300      	movs	r3, #0
 80121fe:	81fb      	strh	r3, [r7, #14]
		__HAL_TIM_SET_COUNTER(ptdef, p);
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	681b      	ldr	r3, [r3, #0]
 8012204:	89fa      	ldrh	r2, [r7, #14]
 8012206:	625a      	str	r2, [r3, #36]	; 0x24
 8012208:	e008      	b.n	801221c <get_rotary+0x38>
	} else if (p>=ENC_MAX) {
 801220a:	89fb      	ldrh	r3, [r7, #14]
 801220c:	2b31      	cmp	r3, #49	; 0x31
 801220e:	d905      	bls.n	801221c <get_rotary+0x38>
		p=ENC_MAX;
 8012210:	2332      	movs	r3, #50	; 0x32
 8012212:	81fb      	strh	r3, [r7, #14]
		__HAL_TIM_SET_COUNTER(ptdef, p);
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	89fa      	ldrh	r2, [r7, #14]
 801221a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	return ((p<<ENC_MUL2)>>ENC_DIV2);//>>1;
 801221c:	89fb      	ldrh	r3, [r7, #14]
 801221e:	005b      	lsls	r3, r3, #1
 8012220:	b29b      	uxth	r3, r3
}
 8012222:	4618      	mov	r0, r3
 8012224:	3714      	adds	r7, #20
 8012226:	46bd      	mov	sp, r7
 8012228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801222c:	4770      	bx	lr
	...

08012230 <ihm_runtick>:
static void ui_process_msg(void);

static int ihm_mode = 0;

void ihm_runtick(void)
{
 8012230:	b580      	push	{r7, lr}
 8012232:	b088      	sub	sp, #32
 8012234:	af00      	add	r7, sp, #0
	static int cnt=0;
	static int first = 0;
	if (!first) {
 8012236:	4b63      	ldr	r3, [pc, #396]	; (80123c4 <ihm_runtick+0x194>)
 8012238:	681b      	ldr	r3, [r3, #0]
 801223a:	2b00      	cmp	r3, #0
 801223c:	d12d      	bne.n	801229a <ihm_runtick+0x6a>
		first = 1;
 801223e:	4b61      	ldr	r3, [pc, #388]	; (80123c4 <ihm_runtick+0x194>)
 8012240:	2201      	movs	r2, #1
 8012242:	601a      	str	r2, [r3, #0]
		itm_debug1(DBG_UI, "UI init", 0);
 8012244:	2200      	movs	r2, #0
 8012246:	4960      	ldr	r1, [pc, #384]	; (80123c8 <ihm_runtick+0x198>)
 8012248:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801224c:	f7ff ff74 	bl	8012138 <itm_debug1>
		switch(ihm_mode) {
 8012250:	4b5e      	ldr	r3, [pc, #376]	; (80123cc <ihm_runtick+0x19c>)
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	2b01      	cmp	r3, #1
 8012256:	d008      	beq.n	801226a <ihm_runtick+0x3a>
 8012258:	2b02      	cmp	r3, #2
 801225a:	d00b      	beq.n	8012274 <ihm_runtick+0x44>
 801225c:	2b00      	cmp	r3, #0
 801225e:	d10e      	bne.n	801227e <ihm_runtick+0x4e>
		case 0:
			ihm_setlayout(0, LAYOUT_MANUAL);
 8012260:	2101      	movs	r1, #1
 8012262:	2000      	movs	r0, #0
 8012264:	f7ff fb66 	bl	8011934 <ihm_setlayout>
			break;
 8012268:	e009      	b.n	801227e <ihm_runtick+0x4e>
		case 1:
			ihm_setlayout(0, LAYOUT_INA3221_DETECT);
 801226a:	21c8      	movs	r1, #200	; 0xc8
 801226c:	2000      	movs	r0, #0
 801226e:	f7ff fb61 	bl	8011934 <ihm_setlayout>
			break;
 8012272:	e004      	b.n	801227e <ihm_runtick+0x4e>
		case 2:
			ihm_setlayout(0, LAYOUT_INA3221_VAL);
 8012274:	21c9      	movs	r1, #201	; 0xc9
 8012276:	2000      	movs	r0, #0
 8012278:	f7ff fb5c 	bl	8011934 <ihm_setlayout>
			break;
 801227c:	bf00      	nop
		}
		for (int i = 0; i<DISP_MAX_REGS; i++) {
 801227e:	2300      	movs	r3, #0
 8012280:	61fb      	str	r3, [r7, #28]
 8012282:	e007      	b.n	8012294 <ihm_runtick+0x64>
			ihm_setvar(0, i, 0);
 8012284:	2200      	movs	r2, #0
 8012286:	69f9      	ldr	r1, [r7, #28]
 8012288:	2000      	movs	r0, #0
 801228a:	f7ff fb83 	bl	8011994 <ihm_setvar>
		for (int i = 0; i<DISP_MAX_REGS; i++) {
 801228e:	69fb      	ldr	r3, [r7, #28]
 8012290:	3301      	adds	r3, #1
 8012292:	61fb      	str	r3, [r7, #28]
 8012294:	69fb      	ldr	r3, [r7, #28]
 8012296:	2b0f      	cmp	r3, #15
 8012298:	ddf4      	ble.n	8012284 <ihm_runtick+0x54>
		}
	}
	itm_debug1(DBG_UI, "UI tick", 0);
 801229a:	2200      	movs	r2, #0
 801229c:	494c      	ldr	r1, [pc, #304]	; (80123d0 <ihm_runtick+0x1a0>)
 801229e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80122a2:	f7ff ff49 	bl	8012138 <itm_debug1>

	needsrefresh_mask = 0;
 80122a6:	4b4b      	ldr	r3, [pc, #300]	; (80123d4 <ihm_runtick+0x1a4>)
 80122a8:	2200      	movs	r2, #0
 80122aa:	701a      	strb	r2, [r3, #0]
	// scan rotary encoder -----------
	for (int i=0; i<MAX_ROTARY; i++) {
 80122ac:	2300      	movs	r3, #0
 80122ae:	61bb      	str	r3, [r7, #24]
 80122b0:	e04a      	b.n	8012348 <ihm_runtick+0x118>
		uint16_t p = get_rotary(&htim4);
 80122b2:	4849      	ldr	r0, [pc, #292]	; (80123d8 <ihm_runtick+0x1a8>)
 80122b4:	f7ff ff96 	bl	80121e4 <get_rotary>
 80122b8:	4603      	mov	r3, r0
 80122ba:	81fb      	strh	r3, [r7, #14]
		if (p != rot_position[i]) {
 80122bc:	4a47      	ldr	r2, [pc, #284]	; (80123dc <ihm_runtick+0x1ac>)
 80122be:	69bb      	ldr	r3, [r7, #24]
 80122c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80122c4:	89fa      	ldrh	r2, [r7, #14]
 80122c6:	429a      	cmp	r2, r3
 80122c8:	d03b      	beq.n	8012342 <ihm_runtick+0x112>
			// pos changed
			rot_position[i] = p;
 80122ca:	4944      	ldr	r1, [pc, #272]	; (80123dc <ihm_runtick+0x1ac>)
 80122cc:	69bb      	ldr	r3, [r7, #24]
 80122ce:	89fa      	ldrh	r2, [r7, #14]
 80122d0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			if (ihm_mode==0) {
 80122d4:	4b3d      	ldr	r3, [pc, #244]	; (80123cc <ihm_runtick+0x19c>)
 80122d6:	681b      	ldr	r3, [r3, #0]
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d10d      	bne.n	80122f8 <ihm_runtick+0xc8>
				ihm_setvar(0, 1, rot_position[0]);
 80122dc:	4b3f      	ldr	r3, [pc, #252]	; (80123dc <ihm_runtick+0x1ac>)
 80122de:	881b      	ldrh	r3, [r3, #0]
 80122e0:	461a      	mov	r2, r3
 80122e2:	2101      	movs	r1, #1
 80122e4:	2000      	movs	r0, #0
 80122e6:	f7ff fb55 	bl	8011994 <ihm_setvar>
				//ihm_setvar(0, 1, ((int)rot0_position - 50));
				SET_NEEDSREFRESH(0);
 80122ea:	4b3a      	ldr	r3, [pc, #232]	; (80123d4 <ihm_runtick+0x1a4>)
 80122ec:	781b      	ldrb	r3, [r3, #0]
 80122ee:	f043 0301 	orr.w	r3, r3, #1
 80122f2:	b2da      	uxtb	r2, r3
 80122f4:	4b37      	ldr	r3, [pc, #220]	; (80123d4 <ihm_runtick+0x1a4>)
 80122f6:	701a      	strb	r2, [r3, #0]
			}
			if (drive_mode[i]) {
 80122f8:	4a39      	ldr	r2, [pc, #228]	; (80123e0 <ihm_runtick+0x1b0>)
 80122fa:	69bb      	ldr	r3, [r7, #24]
 80122fc:	4413      	add	r3, r2
 80122fe:	781b      	ldrb	r3, [r3, #0]
 8012300:	2b00      	cmp	r3, #0
 8012302:	d01e      	beq.n	8012342 <ihm_runtick+0x112>
				msg_64_t m;
				m.from = MA_UI(i);
 8012304:	69bb      	ldr	r3, [r7, #24]
 8012306:	b25b      	sxtb	r3, r3
 8012308:	f003 031f 	and.w	r3, r3, #31
 801230c:	b25b      	sxtb	r3, r3
 801230e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012312:	b25b      	sxtb	r3, r3
 8012314:	b2db      	uxtb	r3, r3
 8012316:	707b      	strb	r3, [r7, #1]
				m.to = MA_CONTROL_T(i);
 8012318:	69bb      	ldr	r3, [r7, #24]
 801231a:	b25b      	sxtb	r3, r3
 801231c:	f003 0307 	and.w	r3, r3, #7
 8012320:	b25b      	sxtb	r3, r3
 8012322:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8012326:	b25b      	sxtb	r3, r3
 8012328:	b2db      	uxtb	r3, r3
 801232a:	703b      	strb	r3, [r7, #0]
				m.cmd = CMD_MDRIVE_SPEED;
 801232c:	2313      	movs	r3, #19
 801232e:	70bb      	strb	r3, [r7, #2]
				m.v1u = rot_position[i];
 8012330:	4a2a      	ldr	r2, [pc, #168]	; (80123dc <ihm_runtick+0x1ac>)
 8012332:	69bb      	ldr	r3, [r7, #24]
 8012334:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012338:	80bb      	strh	r3, [r7, #4]
				mqf_write_from_ui(&m);
 801233a:	463b      	mov	r3, r7
 801233c:	4618      	mov	r0, r3
 801233e:	f7ff ff41 	bl	80121c4 <mqf_write_from_ui>
	for (int i=0; i<MAX_ROTARY; i++) {
 8012342:	69bb      	ldr	r3, [r7, #24]
 8012344:	3301      	adds	r3, #1
 8012346:	61bb      	str	r3, [r7, #24]
 8012348:	69bb      	ldr	r3, [r7, #24]
 801234a:	2b00      	cmp	r3, #0
 801234c:	ddb1      	ble.n	80122b2 <ihm_runtick+0x82>
	}

	// scan buttons ------------------

	// mode test hook
	if (ihm_mode==1) {
 801234e:	4b1f      	ldr	r3, [pc, #124]	; (80123cc <ihm_runtick+0x19c>)
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	2b01      	cmp	r3, #1
 8012354:	d119      	bne.n	801238a <ihm_runtick+0x15a>
		// ina3221 detection
		for (int i=0; i<4; i++) {
 8012356:	2300      	movs	r3, #0
 8012358:	617b      	str	r3, [r7, #20]
 801235a:	e00c      	b.n	8012376 <ihm_runtick+0x146>
			ihm_setvar(0, i, ina3221_devices[i]);
 801235c:	4a21      	ldr	r2, [pc, #132]	; (80123e4 <ihm_runtick+0x1b4>)
 801235e:	697b      	ldr	r3, [r7, #20]
 8012360:	4413      	add	r3, r2
 8012362:	781b      	ldrb	r3, [r3, #0]
 8012364:	b29b      	uxth	r3, r3
 8012366:	461a      	mov	r2, r3
 8012368:	6979      	ldr	r1, [r7, #20]
 801236a:	2000      	movs	r0, #0
 801236c:	f7ff fb12 	bl	8011994 <ihm_setvar>
		for (int i=0; i<4; i++) {
 8012370:	697b      	ldr	r3, [r7, #20]
 8012372:	3301      	adds	r3, #1
 8012374:	617b      	str	r3, [r7, #20]
 8012376:	697b      	ldr	r3, [r7, #20]
 8012378:	2b03      	cmp	r3, #3
 801237a:	ddef      	ble.n	801235c <ihm_runtick+0x12c>
		}
		SET_NEEDSREFRESH(0);
 801237c:	4b15      	ldr	r3, [pc, #84]	; (80123d4 <ihm_runtick+0x1a4>)
 801237e:	781b      	ldrb	r3, [r3, #0]
 8012380:	f043 0301 	orr.w	r3, r3, #1
 8012384:	b2da      	uxtb	r2, r3
 8012386:	4b13      	ldr	r3, [pc, #76]	; (80123d4 <ihm_runtick+0x1a4>)
 8012388:	701a      	strb	r2, [r3, #0]
	} else if (ihm_mode==2) {

	}
	// process messages --------------
	ui_process_msg();
 801238a:	f000 f82d 	bl	80123e8 <ui_process_msg>
		ihm_setvar(0, 1, -cnt);
		SET_NEEDSREFRESH(0);
		cnt++;
	}
	// update displays ---------------
	for (int i=0; i<MAX_DISP; i++) {
 801238e:	2300      	movs	r3, #0
 8012390:	613b      	str	r3, [r7, #16]
 8012392:	e010      	b.n	80123b6 <ihm_runtick+0x186>
		if (NEEDSREFRESH(i)) {
 8012394:	4b0f      	ldr	r3, [pc, #60]	; (80123d4 <ihm_runtick+0x1a4>)
 8012396:	781b      	ldrb	r3, [r3, #0]
 8012398:	461a      	mov	r2, r3
 801239a:	693b      	ldr	r3, [r7, #16]
 801239c:	fa42 f303 	asr.w	r3, r2, r3
 80123a0:	f003 0301 	and.w	r3, r3, #1
 80123a4:	b2db      	uxtb	r3, r3
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d002      	beq.n	80123b0 <ihm_runtick+0x180>
			disp_layout(i);
 80123aa:	6938      	ldr	r0, [r7, #16]
 80123ac:	f7ff fb30 	bl	8011a10 <disp_layout>
	for (int i=0; i<MAX_DISP; i++) {
 80123b0:	693b      	ldr	r3, [r7, #16]
 80123b2:	3301      	adds	r3, #1
 80123b4:	613b      	str	r3, [r7, #16]
 80123b6:	693b      	ldr	r3, [r7, #16]
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	ddeb      	ble.n	8012394 <ihm_runtick+0x164>
		}
	}
}
 80123bc:	bf00      	nop
 80123be:	3720      	adds	r7, #32
 80123c0:	46bd      	mov	sp, r7
 80123c2:	bd80      	pop	{r7, pc}
 80123c4:	200050d8 	.word	0x200050d8
 80123c8:	080170e4 	.word	0x080170e4
 80123cc:	200050d0 	.word	0x200050d0
 80123d0:	080170ec 	.word	0x080170ec
 80123d4:	200050cc 	.word	0x200050cc
 80123d8:	20005abc 	.word	0x20005abc
 80123dc:	20000204 	.word	0x20000204
 80123e0:	20000208 	.word	0x20000208
 80123e4:	20005084 	.word	0x20005084

080123e8 <ui_process_msg>:

static int test_mode=0;

static void ui_process_msg(void)
{
 80123e8:	b580      	push	{r7, lr}
 80123ea:	b088      	sub	sp, #32
 80123ec:	af00      	add	r7, sp, #0
	for (;;) {
		msg_64_t m;
		int rc = mqf_read_to_ui(&m);
 80123ee:	463b      	mov	r3, r7
 80123f0:	4618      	mov	r0, r3
 80123f2:	f7ff fed7 	bl	80121a4 <mqf_read_to_ui>
 80123f6:	61b8      	str	r0, [r7, #24]
		if (rc) break;
 80123f8:	69bb      	ldr	r3, [r7, #24]
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	f040 80b0 	bne.w	8012560 <ui_process_msg+0x178>

		if (m.cmd == CMD_TRTSPD_NOTIF) {
 8012400:	78bb      	ldrb	r3, [r7, #2]
 8012402:	2b19      	cmp	r3, #25
 8012404:	d105      	bne.n	8012412 <ui_process_msg+0x2a>
			itm_debug1(DBG_UI, "hop", 0);
 8012406:	2200      	movs	r2, #0
 8012408:	495c      	ldr	r1, [pc, #368]	; (801257c <ui_process_msg+0x194>)
 801240a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801240e:	f7ff fe93 	bl	8012138 <itm_debug1>
			//ui_write_status(0, t);
		} else {
			//ui_write_status(0, "...");
		}
#endif
		switch(m.cmd) {
 8012412:	78bb      	ldrb	r3, [r7, #2]
 8012414:	2b01      	cmp	r3, #1
 8012416:	f000 80a5 	beq.w	8012564 <ui_process_msg+0x17c>
 801241a:	2bfc      	cmp	r3, #252	; 0xfc
 801241c:	d104      	bne.n	8012428 <ui_process_msg+0x40>
        case CMD_TEST_MODE:
            test_mode = m.v1u;
 801241e:	88bb      	ldrh	r3, [r7, #4]
 8012420:	461a      	mov	r2, r3
 8012422:	4b57      	ldr	r3, [pc, #348]	; (8012580 <ui_process_msg+0x198>)
 8012424:	601a      	str	r2, [r3, #0]
            //ui_write_mode(0);
    		//ui_msg5(0, "T");
            return;
 8012426:	e0a6      	b.n	8012576 <ui_process_msg+0x18e>
        case CMD_SETVPWM:	// TODO remove
        	//if (test_mode) ui_canton_pwm(m.from, m.v1u, m.v2);
        	return;
        	break;
        }
		if (IS_CONTROL_T(m.from)) {
 8012428:	787b      	ldrb	r3, [r7, #1]
 801242a:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801242e:	2bd0      	cmp	r3, #208	; 0xd0
 8012430:	d143      	bne.n	80124ba <ui_process_msg+0xd2>
			int trnum = m.from & 0x07;
 8012432:	787b      	ldrb	r3, [r7, #1]
 8012434:	f003 0307 	and.w	r3, r3, #7
 8012438:	617b      	str	r3, [r7, #20]
			switch (m.cmd) {
 801243a:	78bb      	ldrb	r3, [r7, #2]
 801243c:	2b18      	cmp	r3, #24
 801243e:	f000 8093 	beq.w	8012568 <ui_process_msg+0x180>
 8012442:	2b18      	cmp	r3, #24
 8012444:	dc05      	bgt.n	8012452 <ui_process_msg+0x6a>
 8012446:	2b16      	cmp	r3, #22
 8012448:	f000 8090 	beq.w	801256c <ui_process_msg+0x184>
 801244c:	2b17      	cmp	r3, #23
 801244e:	d005      	beq.n	801245c <ui_process_msg+0x74>
 8012450:	e02a      	b.n	80124a8 <ui_process_msg+0xc0>
 8012452:	2b19      	cmp	r3, #25
 8012454:	d00f      	beq.n	8012476 <ui_process_msg+0x8e>
 8012456:	2ba1      	cmp	r3, #161	; 0xa1
 8012458:	d031      	beq.n	80124be <ui_process_msg+0xd6>
 801245a:	e025      	b.n	80124a8 <ui_process_msg+0xc0>
			case CMD_TRSTATUS_NOTIF:
				// TODO trnum -> display num
				if (ihm_mode == 0) {
 801245c:	4b49      	ldr	r3, [pc, #292]	; (8012584 <ui_process_msg+0x19c>)
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	2b00      	cmp	r3, #0
 8012462:	f040 8085 	bne.w	8012570 <ui_process_msg+0x188>
					//TODO
					//ihm_setvar(0, 2, m.v1u);
					SET_NEEDSREFRESH(0);
 8012466:	4b48      	ldr	r3, [pc, #288]	; (8012588 <ui_process_msg+0x1a0>)
 8012468:	781b      	ldrb	r3, [r3, #0]
 801246a:	f043 0301 	orr.w	r3, r3, #1
 801246e:	b2da      	uxtb	r2, r3
 8012470:	4b45      	ldr	r3, [pc, #276]	; (8012588 <ui_process_msg+0x1a0>)
 8012472:	701a      	strb	r2, [r3, #0]
				}
				return;
 8012474:	e07c      	b.n	8012570 <ui_process_msg+0x188>
				break;
			case CMD_TRTSPD_NOTIF:
				itm_debug2(DBG_UI|DBG_CTRL, "rx tspd notif", trnum, m.v1u);
 8012476:	88bb      	ldrh	r3, [r7, #4]
 8012478:	697a      	ldr	r2, [r7, #20]
 801247a:	4944      	ldr	r1, [pc, #272]	; (801258c <ui_process_msg+0x1a4>)
 801247c:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8012480:	f7ff fe74 	bl	801216c <itm_debug2>
				// TODO trnum -> display num
				if (ihm_mode == 0) {
 8012484:	4b3f      	ldr	r3, [pc, #252]	; (8012584 <ui_process_msg+0x19c>)
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	2b00      	cmp	r3, #0
 801248a:	d173      	bne.n	8012574 <ui_process_msg+0x18c>
					ihm_setvar(0, 2, m.v1u);
 801248c:	88bb      	ldrh	r3, [r7, #4]
 801248e:	461a      	mov	r2, r3
 8012490:	2102      	movs	r1, #2
 8012492:	2000      	movs	r0, #0
 8012494:	f7ff fa7e 	bl	8011994 <ihm_setvar>
					SET_NEEDSREFRESH(0);
 8012498:	4b3b      	ldr	r3, [pc, #236]	; (8012588 <ui_process_msg+0x1a0>)
 801249a:	781b      	ldrb	r3, [r3, #0]
 801249c:	f043 0301 	orr.w	r3, r3, #1
 80124a0:	b2da      	uxtb	r2, r3
 80124a2:	4b39      	ldr	r3, [pc, #228]	; (8012588 <ui_process_msg+0x1a0>)
 80124a4:	701a      	strb	r2, [r3, #0]
				}
				return;
 80124a6:	e065      	b.n	8012574 <ui_process_msg+0x18c>
				return;
				break;
			case CMD_UI_MSG:
				break; // see below
			default:
				itm_debug1(DBG_UI, "unk ctl", m.cmd);
 80124a8:	78bb      	ldrb	r3, [r7, #2]
 80124aa:	461a      	mov	r2, r3
 80124ac:	4938      	ldr	r1, [pc, #224]	; (8012590 <ui_process_msg+0x1a8>)
 80124ae:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80124b2:	f7ff fe41 	bl	8012138 <itm_debug1>
				return;
 80124b6:	bf00      	nop
 80124b8:	e05d      	b.n	8012576 <ui_process_msg+0x18e>
				break;
			}
		}
 80124ba:	bf00      	nop
 80124bc:	e000      	b.n	80124c0 <ui_process_msg+0xd8>
				break; // see below
 80124be:	bf00      	nop
		if (IS_UI(m.to)) {
 80124c0:	783b      	ldrb	r3, [r7, #0]
 80124c2:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80124c6:	2b80      	cmp	r3, #128	; 0x80
 80124c8:	d13f      	bne.n	801254a <ui_process_msg+0x162>
			int dn = m.to & 0x1F;
 80124ca:	783b      	ldrb	r3, [r7, #0]
 80124cc:	f003 031f 	and.w	r3, r3, #31
 80124d0:	613b      	str	r3, [r7, #16]
			if (dn != 1) {
 80124d2:	693b      	ldr	r3, [r7, #16]
 80124d4:	2b01      	cmp	r3, #1
 80124d6:	d006      	beq.n	80124e6 <ui_process_msg+0xfe>
				itm_debug1(DBG_UI, "?dn", dn);
 80124d8:	693a      	ldr	r2, [r7, #16]
 80124da:	492e      	ldr	r1, [pc, #184]	; (8012594 <ui_process_msg+0x1ac>)
 80124dc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80124e0:	f7ff fe2a 	bl	8012138 <itm_debug1>
 80124e4:	e783      	b.n	80123ee <ui_process_msg+0x6>
				continue;
			}
			switch (m.cmd) {
 80124e6:	78bb      	ldrb	r3, [r7, #2]
 80124e8:	2b15      	cmp	r3, #21
 80124ea:	d002      	beq.n	80124f2 <ui_process_msg+0x10a>
 80124ec:	2ba1      	cmp	r3, #161	; 0xa1
 80124ee:	d033      	beq.n	8012558 <ui_process_msg+0x170>
 80124f0:	e022      	b.n	8012538 <ui_process_msg+0x150>
			case CMD_UI_MSG:
				//ui_msg5(dn, (char *) m.rbytes+1);
				break;
			case CMD_INA3221_REPORT:
				if (ihm_mode == 2) {
 80124f2:	4b24      	ldr	r3, [pc, #144]	; (8012584 <ui_process_msg+0x19c>)
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	2b02      	cmp	r3, #2
 80124f8:	d130      	bne.n	801255c <ui_process_msg+0x174>
					int16_t *values = (int16_t *) m.v32u;
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	60fb      	str	r3, [r7, #12]
					for (int i =0; i<12; i++) {
 80124fe:	2300      	movs	r3, #0
 8012500:	61fb      	str	r3, [r7, #28]
 8012502:	e00e      	b.n	8012522 <ui_process_msg+0x13a>
						ihm_setvar(0, i, values[i]);
 8012504:	69fb      	ldr	r3, [r7, #28]
 8012506:	005b      	lsls	r3, r3, #1
 8012508:	68fa      	ldr	r2, [r7, #12]
 801250a:	4413      	add	r3, r2
 801250c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012510:	b29b      	uxth	r3, r3
 8012512:	461a      	mov	r2, r3
 8012514:	69f9      	ldr	r1, [r7, #28]
 8012516:	2000      	movs	r0, #0
 8012518:	f7ff fa3c 	bl	8011994 <ihm_setvar>
					for (int i =0; i<12; i++) {
 801251c:	69fb      	ldr	r3, [r7, #28]
 801251e:	3301      	adds	r3, #1
 8012520:	61fb      	str	r3, [r7, #28]
 8012522:	69fb      	ldr	r3, [r7, #28]
 8012524:	2b0b      	cmp	r3, #11
 8012526:	dded      	ble.n	8012504 <ui_process_msg+0x11c>
					}
					SET_NEEDSREFRESH(0);
 8012528:	4b17      	ldr	r3, [pc, #92]	; (8012588 <ui_process_msg+0x1a0>)
 801252a:	781b      	ldrb	r3, [r3, #0]
 801252c:	f043 0301 	orr.w	r3, r3, #1
 8012530:	b2da      	uxtb	r2, r3
 8012532:	4b15      	ldr	r3, [pc, #84]	; (8012588 <ui_process_msg+0x1a0>)
 8012534:	701a      	strb	r2, [r3, #0]
				}
				break;
 8012536:	e011      	b.n	801255c <ui_process_msg+0x174>

			default:
				itm_debug1(DBG_UI, "cmd?", m.cmd);
 8012538:	78bb      	ldrb	r3, [r7, #2]
 801253a:	461a      	mov	r2, r3
 801253c:	4916      	ldr	r1, [pc, #88]	; (8012598 <ui_process_msg+0x1b0>)
 801253e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8012542:	f7ff fdf9 	bl	8012138 <itm_debug1>
				break;
 8012546:	bf00      	nop
 8012548:	e009      	b.n	801255e <ui_process_msg+0x176>
			}
		} else {
			itm_debug1(DBG_UI, "non ui msg", 0);
 801254a:	2200      	movs	r2, #0
 801254c:	4913      	ldr	r1, [pc, #76]	; (801259c <ui_process_msg+0x1b4>)
 801254e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8012552:	f7ff fdf1 	bl	8012138 <itm_debug1>
 8012556:	e74a      	b.n	80123ee <ui_process_msg+0x6>
				break;
 8012558:	bf00      	nop
 801255a:	e748      	b.n	80123ee <ui_process_msg+0x6>
				break;
 801255c:	bf00      	nop
	for (;;) {
 801255e:	e746      	b.n	80123ee <ui_process_msg+0x6>
		if (rc) break;
 8012560:	bf00      	nop
 8012562:	e008      	b.n	8012576 <ui_process_msg+0x18e>
        	return;
 8012564:	bf00      	nop
 8012566:	e006      	b.n	8012576 <ui_process_msg+0x18e>
				return;
 8012568:	bf00      	nop
 801256a:	e004      	b.n	8012576 <ui_process_msg+0x18e>
				return;
 801256c:	bf00      	nop
 801256e:	e002      	b.n	8012576 <ui_process_msg+0x18e>
				return;
 8012570:	bf00      	nop
 8012572:	e000      	b.n	8012576 <ui_process_msg+0x18e>
				return;
 8012574:	bf00      	nop
		}
	}
}
 8012576:	3720      	adds	r7, #32
 8012578:	46bd      	mov	sp, r7
 801257a:	bd80      	pop	{r7, pc}
 801257c:	080170f4 	.word	0x080170f4
 8012580:	200050d4 	.word	0x200050d4
 8012584:	200050d0 	.word	0x200050d0
 8012588:	200050cc 	.word	0x200050cc
 801258c:	080170f8 	.word	0x080170f8
 8012590:	08017108 	.word	0x08017108
 8012594:	08017110 	.word	0x08017110
 8012598:	08017114 	.word	0x08017114
 801259c:	0801711c 	.word	0x0801711c

080125a0 <itm_debug1>:
{
 80125a0:	b580      	push	{r7, lr}
 80125a2:	b086      	sub	sp, #24
 80125a4:	af02      	add	r7, sp, #8
 80125a6:	60f8      	str	r0, [r7, #12]
 80125a8:	60b9      	str	r1, [r7, #8]
 80125aa:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 80125ac:	4b08      	ldr	r3, [pc, #32]	; (80125d0 <itm_debug1+0x30>)
 80125ae:	681a      	ldr	r2, [r3, #0]
 80125b0:	68fb      	ldr	r3, [r7, #12]
 80125b2:	4013      	ands	r3, r2
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d007      	beq.n	80125c8 <itm_debug1+0x28>
 80125b8:	2301      	movs	r3, #1
 80125ba:	9300      	str	r3, [sp, #0]
 80125bc:	2300      	movs	r3, #0
 80125be:	2200      	movs	r2, #0
 80125c0:	6879      	ldr	r1, [r7, #4]
 80125c2:	68b8      	ldr	r0, [r7, #8]
 80125c4:	f004 f984 	bl	80168d0 <_itm_debug3>
}
 80125c8:	bf00      	nop
 80125ca:	3710      	adds	r7, #16
 80125cc:	46bd      	mov	sp, r7
 80125ce:	bd80      	pop	{r7, pc}
 80125d0:	2000047c 	.word	0x2000047c

080125d4 <itm_debug2>:
{
 80125d4:	b580      	push	{r7, lr}
 80125d6:	b086      	sub	sp, #24
 80125d8:	af02      	add	r7, sp, #8
 80125da:	60f8      	str	r0, [r7, #12]
 80125dc:	60b9      	str	r1, [r7, #8]
 80125de:	607a      	str	r2, [r7, #4]
 80125e0:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, 0, 2);
 80125e2:	4b09      	ldr	r3, [pc, #36]	; (8012608 <itm_debug2+0x34>)
 80125e4:	681a      	ldr	r2, [r3, #0]
 80125e6:	68fb      	ldr	r3, [r7, #12]
 80125e8:	4013      	ands	r3, r2
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	d007      	beq.n	80125fe <itm_debug2+0x2a>
 80125ee:	2302      	movs	r3, #2
 80125f0:	9300      	str	r3, [sp, #0]
 80125f2:	2300      	movs	r3, #0
 80125f4:	683a      	ldr	r2, [r7, #0]
 80125f6:	6879      	ldr	r1, [r7, #4]
 80125f8:	68b8      	ldr	r0, [r7, #8]
 80125fa:	f004 f969 	bl	80168d0 <_itm_debug3>
}
 80125fe:	bf00      	nop
 8012600:	3710      	adds	r7, #16
 8012602:	46bd      	mov	sp, r7
 8012604:	bd80      	pop	{r7, pc}
 8012606:	bf00      	nop
 8012608:	2000047c 	.word	0x2000047c

0801260c <itm_debug3>:
static inline void itm_debug3(uint32_t f, const char *msg, int v1, int v2, int v3)
{
 801260c:	b580      	push	{r7, lr}
 801260e:	b086      	sub	sp, #24
 8012610:	af02      	add	r7, sp, #8
 8012612:	60f8      	str	r0, [r7, #12]
 8012614:	60b9      	str	r1, [r7, #8]
 8012616:	607a      	str	r2, [r7, #4]
 8012618:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, v3, 3);
 801261a:	4b09      	ldr	r3, [pc, #36]	; (8012640 <itm_debug3+0x34>)
 801261c:	681a      	ldr	r2, [r3, #0]
 801261e:	68fb      	ldr	r3, [r7, #12]
 8012620:	4013      	ands	r3, r2
 8012622:	2b00      	cmp	r3, #0
 8012624:	d007      	beq.n	8012636 <itm_debug3+0x2a>
 8012626:	2303      	movs	r3, #3
 8012628:	9300      	str	r3, [sp, #0]
 801262a:	69bb      	ldr	r3, [r7, #24]
 801262c:	683a      	ldr	r2, [r7, #0]
 801262e:	6879      	ldr	r1, [r7, #4]
 8012630:	68b8      	ldr	r0, [r7, #8]
 8012632:	f004 f94d 	bl	80168d0 <_itm_debug3>
}
 8012636:	bf00      	nop
 8012638:	3710      	adds	r7, #16
 801263a:	46bd      	mov	sp, r7
 801263c:	bd80      	pop	{r7, pc}
 801263e:	bf00      	nop
 8012640:	2000047c 	.word	0x2000047c

08012644 <mqf_read_to_ctrl>:
/* from upper */
#define CMD_SET_TARGET_SPEED 0x10
#define CMD_SET_C1_C2		 0x11


LFMQUEUE_DEF_H(to_ctrl, msg_64_t)
 8012644:	b580      	push	{r7, lr}
 8012646:	b082      	sub	sp, #8
 8012648:	af00      	add	r7, sp, #0
 801264a:	6078      	str	r0, [r7, #4]
 801264c:	6879      	ldr	r1, [r7, #4]
 801264e:	4804      	ldr	r0, [pc, #16]	; (8012660 <mqf_read_to_ctrl+0x1c>)
 8012650:	f004 faa4 	bl	8016b9c <mqf_read>
 8012654:	4603      	mov	r3, r0
 8012656:	4618      	mov	r0, r3
 8012658:	3708      	adds	r7, #8
 801265a:	46bd      	mov	sp, r7
 801265c:	bd80      	pop	{r7, pc}
 801265e:	bf00      	nop
 8012660:	20000440 	.word	0x20000440

08012664 <mqf_write_from_ctrl>:
LFMQUEUE_DEF_H(from_ctrl, msg_64_t)
 8012664:	b580      	push	{r7, lr}
 8012666:	b082      	sub	sp, #8
 8012668:	af00      	add	r7, sp, #0
 801266a:	6078      	str	r0, [r7, #4]
 801266c:	6879      	ldr	r1, [r7, #4]
 801266e:	4804      	ldr	r0, [pc, #16]	; (8012680 <mqf_write_from_ctrl+0x1c>)
 8012670:	f004 fa1a 	bl	8016aa8 <mqf_write>
 8012674:	4603      	mov	r3, r0
 8012676:	4618      	mov	r0, r3
 8012678:	3708      	adds	r7, #8
 801267a:	46bd      	mov	sp, r7
 801267c:	bd80      	pop	{r7, pc}
 801267e:	bf00      	nop
 8012680:	2000044c 	.word	0x2000044c

08012684 <ui_msg>:
#define CMD_UI_MSG			0xA1

#include "../IHM/ihm_messages.h"

static inline void ui_msg(int dispnum,uint8_t msgnum, msg_64_t *m, uint8_t from)
{
 8012684:	b480      	push	{r7}
 8012686:	b085      	sub	sp, #20
 8012688:	af00      	add	r7, sp, #0
 801268a:	60f8      	str	r0, [r7, #12]
 801268c:	607a      	str	r2, [r7, #4]
 801268e:	461a      	mov	r2, r3
 8012690:	460b      	mov	r3, r1
 8012692:	72fb      	strb	r3, [r7, #11]
 8012694:	4613      	mov	r3, r2
 8012696:	72bb      	strb	r3, [r7, #10]
	m->to = MA_UI(dispnum);
 8012698:	68fb      	ldr	r3, [r7, #12]
 801269a:	b25b      	sxtb	r3, r3
 801269c:	f003 031f 	and.w	r3, r3, #31
 80126a0:	b25b      	sxtb	r3, r3
 80126a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80126a6:	b25b      	sxtb	r3, r3
 80126a8:	b2da      	uxtb	r2, r3
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	701a      	strb	r2, [r3, #0]
	m->from = from;
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	7aba      	ldrb	r2, [r7, #10]
 80126b2:	705a      	strb	r2, [r3, #1]
	m->cmd = CMD_UI_MSG;
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	22a1      	movs	r2, #161	; 0xa1
 80126b8:	709a      	strb	r2, [r3, #2]
	m->v1u = msgnum;
 80126ba:	7afb      	ldrb	r3, [r7, #11]
 80126bc:	b29a      	uxth	r2, r3
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	809a      	strh	r2, [r3, #4]
	//int n = strlen(txt);
	//n = (n>5) ? 5 : n;
	//memcpy(m->rbytes+1, txt, n);
}
 80126c2:	bf00      	nop
 80126c4:	3714      	adds	r7, #20
 80126c6:	46bd      	mov	sp, r7
 80126c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126cc:	4770      	bx	lr
	...

080126d0 <ctrl_set_mode>:
static uint8_t test_mode = 0;
static uint8_t testerAddr;


static void ctrl_set_mode(int trnum, train_mode_t mode)
{
 80126d0:	b580      	push	{r7, lr}
 80126d2:	b084      	sub	sp, #16
 80126d4:	af00      	add	r7, sp, #0
 80126d6:	6078      	str	r0, [r7, #4]
 80126d8:	460b      	mov	r3, r1
 80126da:	70fb      	strb	r3, [r7, #3]
	if (trctl[trnum]._mode == mode) return;
 80126dc:	4a13      	ldr	r2, [pc, #76]	; (801272c <ctrl_set_mode+0x5c>)
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80126e4:	78fa      	ldrb	r2, [r7, #3]
 80126e6:	429a      	cmp	r2, r3
 80126e8:	d01b      	beq.n	8012722 <ctrl_set_mode+0x52>
	trctl[trnum]._mode = mode;
 80126ea:	4910      	ldr	r1, [pc, #64]	; (801272c <ctrl_set_mode+0x5c>)
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	78fa      	ldrb	r2, [r7, #3]
 80126f0:	f801 2033 	strb.w	r2, [r1, r3, lsl #3]
	// notif UI
	msg_64_t m;
	m.from = MA_CONTROL_T(trnum);
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	b25b      	sxtb	r3, r3
 80126f8:	f003 0307 	and.w	r3, r3, #7
 80126fc:	b25b      	sxtb	r3, r3
 80126fe:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8012702:	b25b      	sxtb	r3, r3
 8012704:	b2db      	uxtb	r3, r3
 8012706:	727b      	strb	r3, [r7, #9]
	m.to = MA_UI(1); // fix me
 8012708:	2381      	movs	r3, #129	; 0x81
 801270a:	723b      	strb	r3, [r7, #8]
	m.cmd = CMD_TRMODE_NOTIF;
 801270c:	2316      	movs	r3, #22
 801270e:	72bb      	strb	r3, [r7, #10]
	m.v1u = mode;
 8012710:	78fb      	ldrb	r3, [r7, #3]
 8012712:	b29b      	uxth	r3, r3
 8012714:	81bb      	strh	r3, [r7, #12]
	mqf_write_from_ctrl(&m);
 8012716:	f107 0308 	add.w	r3, r7, #8
 801271a:	4618      	mov	r0, r3
 801271c:	f7ff ffa2 	bl	8012664 <mqf_write_from_ctrl>
 8012720:	e000      	b.n	8012724 <ctrl_set_mode+0x54>
	if (trctl[trnum]._mode == mode) return;
 8012722:	bf00      	nop
}
 8012724:	3710      	adds	r7, #16
 8012726:	46bd      	mov	sp, r7
 8012728:	bd80      	pop	{r7, pc}
 801272a:	bf00      	nop
 801272c:	200050dc 	.word	0x200050dc

08012730 <ctrl_set_status>:

static void ctrl_set_status(int trnum, train_status_t status)
{
 8012730:	b580      	push	{r7, lr}
 8012732:	b084      	sub	sp, #16
 8012734:	af00      	add	r7, sp, #0
 8012736:	6078      	str	r0, [r7, #4]
 8012738:	460b      	mov	r3, r1
 801273a:	70fb      	strb	r3, [r7, #3]
	if (trctl[trnum]._status == status) return;
 801273c:	4a14      	ldr	r2, [pc, #80]	; (8012790 <ctrl_set_status+0x60>)
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	00db      	lsls	r3, r3, #3
 8012742:	4413      	add	r3, r2
 8012744:	785b      	ldrb	r3, [r3, #1]
 8012746:	78fa      	ldrb	r2, [r7, #3]
 8012748:	429a      	cmp	r2, r3
 801274a:	d01c      	beq.n	8012786 <ctrl_set_status+0x56>
	trctl[trnum]._status = status;
 801274c:	4a10      	ldr	r2, [pc, #64]	; (8012790 <ctrl_set_status+0x60>)
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	00db      	lsls	r3, r3, #3
 8012752:	4413      	add	r3, r2
 8012754:	78fa      	ldrb	r2, [r7, #3]
 8012756:	705a      	strb	r2, [r3, #1]
	// notif UI
	msg_64_t m;
	m.from = MA_CONTROL_T(trnum);
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	b25b      	sxtb	r3, r3
 801275c:	f003 0307 	and.w	r3, r3, #7
 8012760:	b25b      	sxtb	r3, r3
 8012762:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8012766:	b25b      	sxtb	r3, r3
 8012768:	b2db      	uxtb	r3, r3
 801276a:	727b      	strb	r3, [r7, #9]
	m.to = MA_UI(1); // fix me
 801276c:	2381      	movs	r3, #129	; 0x81
 801276e:	723b      	strb	r3, [r7, #8]
	m.cmd = CMD_TRSTATUS_NOTIF;
 8012770:	2317      	movs	r3, #23
 8012772:	72bb      	strb	r3, [r7, #10]
	m.v1u = status;
 8012774:	78fb      	ldrb	r3, [r7, #3]
 8012776:	b29b      	uxth	r3, r3
 8012778:	81bb      	strh	r3, [r7, #12]
	mqf_write_from_ctrl(&m);
 801277a:	f107 0308 	add.w	r3, r7, #8
 801277e:	4618      	mov	r0, r3
 8012780:	f7ff ff70 	bl	8012664 <mqf_write_from_ctrl>
 8012784:	e000      	b.n	8012788 <ctrl_set_status+0x58>
	if (trctl[trnum]._status == status) return;
 8012786:	bf00      	nop
}
 8012788:	3710      	adds	r7, #16
 801278a:	46bd      	mov	sp, r7
 801278c:	bd80      	pop	{r7, pc}
 801278e:	bf00      	nop
 8012790:	200050dc 	.word	0x200050dc

08012794 <ctrl_set_dir>:

static int8_t ctrl_set_dir(int trnum, int dir)
{
 8012794:	b580      	push	{r7, lr}
 8012796:	b084      	sub	sp, #16
 8012798:	af00      	add	r7, sp, #0
 801279a:	6078      	str	r0, [r7, #4]
 801279c:	6039      	str	r1, [r7, #0]
	if (trctl[trnum]._dir == dir) return 0;
 801279e:	4a1c      	ldr	r2, [pc, #112]	; (8012810 <ctrl_set_dir+0x7c>)
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	00db      	lsls	r3, r3, #3
 80127a4:	4413      	add	r3, r2
 80127a6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80127aa:	461a      	mov	r2, r3
 80127ac:	683b      	ldr	r3, [r7, #0]
 80127ae:	4293      	cmp	r3, r2
 80127b0:	d101      	bne.n	80127b6 <ctrl_set_dir+0x22>
 80127b2:	2300      	movs	r3, #0
 80127b4:	e027      	b.n	8012806 <ctrl_set_dir+0x72>
	if (trctl[trnum]._target_speed) return 0;
 80127b6:	4a16      	ldr	r2, [pc, #88]	; (8012810 <ctrl_set_dir+0x7c>)
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	00db      	lsls	r3, r3, #3
 80127bc:	4413      	add	r3, r2
 80127be:	88db      	ldrh	r3, [r3, #6]
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	d001      	beq.n	80127c8 <ctrl_set_dir+0x34>
 80127c4:	2300      	movs	r3, #0
 80127c6:	e01e      	b.n	8012806 <ctrl_set_dir+0x72>
	trctl[trnum]._dir = dir;
 80127c8:	683b      	ldr	r3, [r7, #0]
 80127ca:	b259      	sxtb	r1, r3
 80127cc:	4a10      	ldr	r2, [pc, #64]	; (8012810 <ctrl_set_dir+0x7c>)
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	00db      	lsls	r3, r3, #3
 80127d2:	4413      	add	r3, r2
 80127d4:	460a      	mov	r2, r1
 80127d6:	711a      	strb	r2, [r3, #4]
	// notif UI
	msg_64_t m;
	m.from = MA_CONTROL_T(trnum);
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	b25b      	sxtb	r3, r3
 80127dc:	f003 0307 	and.w	r3, r3, #7
 80127e0:	b25b      	sxtb	r3, r3
 80127e2:	f063 032f 	orn	r3, r3, #47	; 0x2f
 80127e6:	b25b      	sxtb	r3, r3
 80127e8:	b2db      	uxtb	r3, r3
 80127ea:	727b      	strb	r3, [r7, #9]
	m.to = MA_UI(1); // fix me
 80127ec:	2381      	movs	r3, #129	; 0x81
 80127ee:	723b      	strb	r3, [r7, #8]
	m.cmd = CMD_TRDIR_NOTIF;
 80127f0:	2318      	movs	r3, #24
 80127f2:	72bb      	strb	r3, [r7, #10]
	m.v1 = dir;
 80127f4:	683b      	ldr	r3, [r7, #0]
 80127f6:	b21b      	sxth	r3, r3
 80127f8:	81bb      	strh	r3, [r7, #12]
	mqf_write_from_ctrl(&m);
 80127fa:	f107 0308 	add.w	r3, r7, #8
 80127fe:	4618      	mov	r0, r3
 8012800:	f7ff ff30 	bl	8012664 <mqf_write_from_ctrl>

	// TODO : change C2
	return 1;
 8012804:	2301      	movs	r3, #1
}
 8012806:	4618      	mov	r0, r3
 8012808:	3710      	adds	r7, #16
 801280a:	46bd      	mov	sp, r7
 801280c:	bd80      	pop	{r7, pc}
 801280e:	bf00      	nop
 8012810:	200050dc 	.word	0x200050dc

08012814 <ctrl_set_tspeed>:

static int8_t ctrl_set_tspeed(int trnum, uint16_t tspd)
{
 8012814:	b580      	push	{r7, lr}
 8012816:	b084      	sub	sp, #16
 8012818:	af00      	add	r7, sp, #0
 801281a:	6078      	str	r0, [r7, #4]
 801281c:	460b      	mov	r3, r1
 801281e:	807b      	strh	r3, [r7, #2]
	if (trctl[trnum]._target_speed == tspd) return 0;
 8012820:	4a28      	ldr	r2, [pc, #160]	; (80128c4 <ctrl_set_tspeed+0xb0>)
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	00db      	lsls	r3, r3, #3
 8012826:	4413      	add	r3, r2
 8012828:	88db      	ldrh	r3, [r3, #6]
 801282a:	887a      	ldrh	r2, [r7, #2]
 801282c:	429a      	cmp	r2, r3
 801282e:	d101      	bne.n	8012834 <ctrl_set_tspeed+0x20>
 8012830:	2300      	movs	r3, #0
 8012832:	e042      	b.n	80128ba <ctrl_set_tspeed+0xa6>
	trctl[trnum]._target_speed = tspd;
 8012834:	4a23      	ldr	r2, [pc, #140]	; (80128c4 <ctrl_set_tspeed+0xb0>)
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	00db      	lsls	r3, r3, #3
 801283a:	4413      	add	r3, r2
 801283c:	887a      	ldrh	r2, [r7, #2]
 801283e:	80da      	strh	r2, [r3, #6]
	// notif UI
	itm_debug2(DBG_UI|DBG_CTRL, "tx tspd notif", trnum, tspd);
 8012840:	887b      	ldrh	r3, [r7, #2]
 8012842:	687a      	ldr	r2, [r7, #4]
 8012844:	4920      	ldr	r1, [pc, #128]	; (80128c8 <ctrl_set_tspeed+0xb4>)
 8012846:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 801284a:	f7ff fec3 	bl	80125d4 <itm_debug2>
	msg_64_t m;
	m.from = MA_CONTROL_T(trnum);
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	b25b      	sxtb	r3, r3
 8012852:	f003 0307 	and.w	r3, r3, #7
 8012856:	b25b      	sxtb	r3, r3
 8012858:	f063 032f 	orn	r3, r3, #47	; 0x2f
 801285c:	b25b      	sxtb	r3, r3
 801285e:	b2db      	uxtb	r3, r3
 8012860:	727b      	strb	r3, [r7, #9]
	m.to = MA_UI(1); // TODO : fix me
 8012862:	2381      	movs	r3, #129	; 0x81
 8012864:	723b      	strb	r3, [r7, #8]
	m.cmd = CMD_TRTSPD_NOTIF;
 8012866:	2319      	movs	r3, #25
 8012868:	72bb      	strb	r3, [r7, #10]
	m.v1u = tspd;
 801286a:	887b      	ldrh	r3, [r7, #2]
 801286c:	81bb      	strh	r3, [r7, #12]
	mqf_write_from_ctrl(&m);
 801286e:	f107 0308 	add.w	r3, r7, #8
 8012872:	4618      	mov	r0, r3
 8012874:	f7ff fef6 	bl	8012664 <mqf_write_from_ctrl>

	m.to = MA_TRAIN_SC(trnum);
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	b25b      	sxtb	r3, r3
 801287c:	f003 0307 	and.w	r3, r3, #7
 8012880:	b25b      	sxtb	r3, r3
 8012882:	f063 0337 	orn	r3, r3, #55	; 0x37
 8012886:	b25b      	sxtb	r3, r3
 8012888:	b2db      	uxtb	r3, r3
 801288a:	723b      	strb	r3, [r7, #8]
	m.v1 = trctl[trnum]._dir*trctl[trnum]._target_speed;
 801288c:	4a0d      	ldr	r2, [pc, #52]	; (80128c4 <ctrl_set_tspeed+0xb0>)
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	00db      	lsls	r3, r3, #3
 8012892:	4413      	add	r3, r2
 8012894:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012898:	b29a      	uxth	r2, r3
 801289a:	490a      	ldr	r1, [pc, #40]	; (80128c4 <ctrl_set_tspeed+0xb0>)
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	00db      	lsls	r3, r3, #3
 80128a0:	440b      	add	r3, r1
 80128a2:	88db      	ldrh	r3, [r3, #6]
 80128a4:	fb12 f303 	smulbb	r3, r2, r3
 80128a8:	b29b      	uxth	r3, r3
 80128aa:	b21b      	sxth	r3, r3
 80128ac:	81bb      	strh	r3, [r7, #12]
	mqf_write_from_ctrl(&m);
 80128ae:	f107 0308 	add.w	r3, r7, #8
 80128b2:	4618      	mov	r0, r3
 80128b4:	f7ff fed6 	bl	8012664 <mqf_write_from_ctrl>

	return 1;
 80128b8:	2301      	movs	r3, #1
}
 80128ba:	4618      	mov	r0, r3
 80128bc:	3710      	adds	r7, #16
 80128be:	46bd      	mov	sp, r7
 80128c0:	bd80      	pop	{r7, pc}
 80128c2:	bf00      	nop
 80128c4:	200050dc 	.word	0x200050dc
 80128c8:	08017128 	.word	0x08017128

080128cc <ctrl_init>:


static void ctrl_init(void)
{
 80128cc:	b580      	push	{r7, lr}
 80128ce:	af00      	add	r7, sp, #0
	memset(trctl, 0, sizeof(train_ctrl_t)*NUM_TRAINS);
 80128d0:	2240      	movs	r2, #64	; 0x40
 80128d2:	2100      	movs	r1, #0
 80128d4:	4808      	ldr	r0, [pc, #32]	; (80128f8 <ctrl_init+0x2c>)
 80128d6:	f004 fa02 	bl	8016cde <memset>
	ctrl_set_mode(0, train_fullmanual);
 80128da:	2102      	movs	r1, #2
 80128dc:	2000      	movs	r0, #0
 80128de:	f7ff fef7 	bl	80126d0 <ctrl_set_mode>
	ctrl_set_tspeed(0, 0);
 80128e2:	2100      	movs	r1, #0
 80128e4:	2000      	movs	r0, #0
 80128e6:	f7ff ff95 	bl	8012814 <ctrl_set_tspeed>
	ctrl_set_dir(0, 1);
 80128ea:	2101      	movs	r1, #1
 80128ec:	2000      	movs	r0, #0
 80128ee:	f7ff ff51 	bl	8012794 <ctrl_set_dir>
}
 80128f2:	bf00      	nop
 80128f4:	bd80      	pop	{r7, pc}
 80128f6:	bf00      	nop
 80128f8:	200050dc 	.word	0x200050dc

080128fc <ctrl_run_tick>:


// ----------------------------------------------------------------------------

void ctrl_run_tick(uint32_t notif_flags, uint32_t tick, uint32_t dt)
{
 80128fc:	b580      	push	{r7, lr}
 80128fe:	b09c      	sub	sp, #112	; 0x70
 8012900:	af02      	add	r7, sp, #8
 8012902:	60f8      	str	r0, [r7, #12]
 8012904:	60b9      	str	r1, [r7, #8]
 8012906:	607a      	str	r2, [r7, #4]
	static int first=1;
	if (first) {
 8012908:	4b9f      	ldr	r3, [pc, #636]	; (8012b88 <ctrl_run_tick+0x28c>)
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	2b00      	cmp	r3, #0
 801290e:	d012      	beq.n	8012936 <ctrl_run_tick+0x3a>
		first = 0;
 8012910:	4b9d      	ldr	r3, [pc, #628]	; (8012b88 <ctrl_run_tick+0x28c>)
 8012912:	2200      	movs	r2, #0
 8012914:	601a      	str	r2, [r3, #0]
		ctrl_init();
 8012916:	f7ff ffd9 	bl	80128cc <ctrl_init>
		ctrl_reset();
 801291a:	f000 f94b 	bl	8012bb4 <ctrl_reset>

		msg_64_t m;
		ui_msg(1, IHMMSG_TRAINCTL_INIT, &m, MA_CONTROL());
 801291e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012922:	23d7      	movs	r3, #215	; 0xd7
 8012924:	2100      	movs	r1, #0
 8012926:	2001      	movs	r0, #1
 8012928:	f7ff feac 	bl	8012684 <ui_msg>
		mqf_write_from_ctrl(&m);
 801292c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012930:	4618      	mov	r0, r3
 8012932:	f7ff fe97 	bl	8012664 <mqf_write_from_ctrl>
        	m.v1u = 1;
            mqf_write_from_ctrl(&m);
        }

    }
	if ((1) && !test_mode) { // test
 8012936:	4b95      	ldr	r3, [pc, #596]	; (8012b8c <ctrl_run_tick+0x290>)
 8012938:	781b      	ldrb	r3, [r3, #0]
 801293a:	2b00      	cmp	r3, #0
 801293c:	d175      	bne.n	8012a2a <ctrl_run_tick+0x12e>
		static int cd = 0;
		int t = (tick / 3000);
 801293e:	68bb      	ldr	r3, [r7, #8]
 8012940:	4a93      	ldr	r2, [pc, #588]	; (8012b90 <ctrl_run_tick+0x294>)
 8012942:	fba2 2303 	umull	r2, r3, r2, r3
 8012946:	099b      	lsrs	r3, r3, #6
 8012948:	65fb      	str	r3, [r7, #92]	; 0x5c
		int tt = t % 3;
 801294a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801294c:	4b91      	ldr	r3, [pc, #580]	; (8012b94 <ctrl_run_tick+0x298>)
 801294e:	fb83 3102 	smull	r3, r1, r3, r2
 8012952:	17d3      	asrs	r3, r2, #31
 8012954:	1ac9      	subs	r1, r1, r3
 8012956:	460b      	mov	r3, r1
 8012958:	005b      	lsls	r3, r3, #1
 801295a:	440b      	add	r3, r1
 801295c:	1ad3      	subs	r3, r2, r3
 801295e:	65bb      	str	r3, [r7, #88]	; 0x58
		int md = 0;
 8012960:	2300      	movs	r3, #0
 8012962:	667b      	str	r3, [r7, #100]	; 0x64
		switch (tt) {
 8012964:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012966:	2b01      	cmp	r3, #1
 8012968:	d006      	beq.n	8012978 <ctrl_run_tick+0x7c>
 801296a:	2b02      	cmp	r3, #2
 801296c:	d007      	beq.n	801297e <ctrl_run_tick+0x82>
 801296e:	2b00      	cmp	r3, #0
 8012970:	d109      	bne.n	8012986 <ctrl_run_tick+0x8a>
		case 0: md = 1; break;
 8012972:	2301      	movs	r3, #1
 8012974:	667b      	str	r3, [r7, #100]	; 0x64
 8012976:	e006      	b.n	8012986 <ctrl_run_tick+0x8a>
		case 1: md = 0; break;
 8012978:	2300      	movs	r3, #0
 801297a:	667b      	str	r3, [r7, #100]	; 0x64
 801297c:	e003      	b.n	8012986 <ctrl_run_tick+0x8a>
		case 2: md = -1; break;
 801297e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012982:	667b      	str	r3, [r7, #100]	; 0x64
 8012984:	bf00      	nop
		}
		//md = 0; // XXX
		if (md != cd) {
 8012986:	4b84      	ldr	r3, [pc, #528]	; (8012b98 <ctrl_run_tick+0x29c>)
 8012988:	681b      	ldr	r3, [r3, #0]
 801298a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801298c:	429a      	cmp	r2, r3
 801298e:	d04c      	beq.n	8012a2a <ctrl_run_tick+0x12e>
			cd = md;
 8012990:	4a81      	ldr	r2, [pc, #516]	; (8012b98 <ctrl_run_tick+0x29c>)
 8012992:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012994:	6013      	str	r3, [r2, #0]

			msg_64_t m;
			uint8_t t = 0;
 8012996:	2300      	movs	r3, #0
 8012998:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
			switch (md) {
 801299c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d005      	beq.n	80129ae <ctrl_run_tick+0xb2>
 80129a2:	2b01      	cmp	r3, #1
 80129a4:	d007      	beq.n	80129b6 <ctrl_run_tick+0xba>
 80129a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80129aa:	d008      	beq.n	80129be <ctrl_run_tick+0xc2>
 80129ac:	e00b      	b.n	80129c6 <ctrl_run_tick+0xca>
			case 0: t = IHMMSG_TRAINCTL_STOP; break;
 80129ae:	2303      	movs	r3, #3
 80129b0:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 80129b4:	e007      	b.n	80129c6 <ctrl_run_tick+0xca>
			case 1: t = IHMMSG_TRAINCTL_FWD; break;
 80129b6:	2301      	movs	r3, #1
 80129b8:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 80129bc:	e003      	b.n	80129c6 <ctrl_run_tick+0xca>
			case -1: t = IHMMSG_TRAINCTL_REV; break;
 80129be:	2302      	movs	r3, #2
 80129c0:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 80129c4:	bf00      	nop
			}
			//ui_msg(1, t, &m, MA_CONTROL_T(0));
			mqf_write_from_ctrl(&m);
 80129c6:	f107 0318 	add.w	r3, r7, #24
 80129ca:	4618      	mov	r0, r3
 80129cc:	f7ff fe4a 	bl	8012664 <mqf_write_from_ctrl>

			m.from = MA_CONTROL_T(0);
 80129d0:	23d0      	movs	r3, #208	; 0xd0
 80129d2:	767b      	strb	r3, [r7, #25]
			m.to = MA_CANTON(0, 0);
 80129d4:	2300      	movs	r3, #0
 80129d6:	763b      	strb	r3, [r7, #24]
			m.cmd = CMD_SETVPWM;
 80129d8:	2301      	movs	r3, #1
 80129da:	76bb      	strb	r3, [r7, #26]
			m.v1u = 0;
 80129dc:	2300      	movs	r3, #0
 80129de:	83bb      	strh	r3, [r7, #28]
			m.v2 = md*70;
 80129e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80129e2:	b29b      	uxth	r3, r3
 80129e4:	461a      	mov	r2, r3
 80129e6:	0092      	lsls	r2, r2, #2
 80129e8:	4413      	add	r3, r2
 80129ea:	461a      	mov	r2, r3
 80129ec:	00d2      	lsls	r2, r2, #3
 80129ee:	1ad3      	subs	r3, r2, r3
 80129f0:	005b      	lsls	r3, r3, #1
 80129f2:	b29b      	uxth	r3, r3
 80129f4:	b21b      	sxth	r3, r3
 80129f6:	83fb      	strh	r3, [r7, #30]
			itm_debug3(DBG_SPDCTL|DBG_CTRL, "init/c0", md, m.v2, t);
 80129f8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80129fc:	461a      	mov	r2, r3
 80129fe:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8012a02:	9300      	str	r3, [sp, #0]
 8012a04:	4613      	mov	r3, r2
 8012a06:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8012a08:	4964      	ldr	r1, [pc, #400]	; (8012b9c <ctrl_run_tick+0x2a0>)
 8012a0a:	f44f 6082 	mov.w	r0, #1040	; 0x410
 8012a0e:	f7ff fdfd 	bl	801260c <itm_debug3>
			mqf_write_from_ctrl(&m);
 8012a12:	f107 0318 	add.w	r3, r7, #24
 8012a16:	4618      	mov	r0, r3
 8012a18:	f7ff fe24 	bl	8012664 <mqf_write_from_ctrl>
			m.to = MA_CANTON(0, 1);
 8012a1c:	2301      	movs	r3, #1
 8012a1e:	763b      	strb	r3, [r7, #24]
			mqf_write_from_ctrl(&m);
 8012a20:	f107 0318 	add.w	r3, r7, #24
 8012a24:	4618      	mov	r0, r3
 8012a26:	f7ff fe1d 	bl	8012664 <mqf_write_from_ctrl>
		}
	}
	/* process messages */
	for (;;) {
		msg_64_t m;
		int rc = mqf_read_to_ctrl(&m);
 8012a2a:	f107 0310 	add.w	r3, r7, #16
 8012a2e:	4618      	mov	r0, r3
 8012a30:	f7ff fe08 	bl	8012644 <mqf_read_to_ctrl>
 8012a34:	6578      	str	r0, [r7, #84]	; 0x54
		if (rc) break;
 8012a36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	f040 80a1 	bne.w	8012b80 <ctrl_run_tick+0x284>
        switch (m.cmd) {
 8012a3e:	7cbb      	ldrb	r3, [r7, #18]
 8012a40:	2bfe      	cmp	r3, #254	; 0xfe
 8012a42:	d007      	beq.n	8012a54 <ctrl_run_tick+0x158>
 8012a44:	2bff      	cmp	r3, #255	; 0xff
 8012a46:	d002      	beq.n	8012a4e <ctrl_run_tick+0x152>
 8012a48:	2bfc      	cmp	r3, #252	; 0xfc
 8012a4a:	d006      	beq.n	8012a5a <ctrl_run_tick+0x15e>
 8012a4c:	e00d      	b.n	8012a6a <ctrl_run_tick+0x16e>
            case CMD_RESET:
                test_mode = 0; // FALLTHRU
 8012a4e:	4b4f      	ldr	r3, [pc, #316]	; (8012b8c <ctrl_run_tick+0x290>)
 8012a50:	2200      	movs	r2, #0
 8012a52:	701a      	strb	r2, [r3, #0]
            case CMD_EMERGENCY_STOP:
                ctrl_reset();
 8012a54:	f000 f8ae 	bl	8012bb4 <ctrl_reset>
                break;
 8012a58:	e007      	b.n	8012a6a <ctrl_run_tick+0x16e>
            case CMD_TEST_MODE:
                test_mode = m.v1u;
 8012a5a:	8abb      	ldrh	r3, [r7, #20]
 8012a5c:	b2da      	uxtb	r2, r3
 8012a5e:	4b4b      	ldr	r3, [pc, #300]	; (8012b8c <ctrl_run_tick+0x290>)
 8012a60:	701a      	strb	r2, [r3, #0]
                testerAddr = m.from;
 8012a62:	7c7a      	ldrb	r2, [r7, #17]
 8012a64:	4b4e      	ldr	r3, [pc, #312]	; (8012ba0 <ctrl_run_tick+0x2a4>)
 8012a66:	701a      	strb	r2, [r3, #0]
                break;
 8012a68:	bf00      	nop
        }
        if (test_mode & (m.from != testerAddr)) {
 8012a6a:	4b48      	ldr	r3, [pc, #288]	; (8012b8c <ctrl_run_tick+0x290>)
 8012a6c:	781b      	ldrb	r3, [r3, #0]
 8012a6e:	4619      	mov	r1, r3
 8012a70:	7c7a      	ldrb	r2, [r7, #17]
 8012a72:	4b4b      	ldr	r3, [pc, #300]	; (8012ba0 <ctrl_run_tick+0x2a4>)
 8012a74:	781b      	ldrb	r3, [r3, #0]
 8012a76:	429a      	cmp	r2, r3
 8012a78:	bf14      	ite	ne
 8012a7a:	2301      	movne	r3, #1
 8012a7c:	2300      	moveq	r3, #0
 8012a7e:	b2db      	uxtb	r3, r3
 8012a80:	400b      	ands	r3, r1
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d174      	bne.n	8012b70 <ctrl_run_tick+0x274>
            continue;
        }
		if (IS_CONTROL_T(m.to)) {
 8012a86:	7c3b      	ldrb	r3, [r7, #16]
 8012a88:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8012a8c:	2bd0      	cmp	r3, #208	; 0xd0
 8012a8e:	d167      	bne.n	8012b60 <ctrl_run_tick+0x264>
			if (test_mode) continue;
 8012a90:	4b3e      	ldr	r3, [pc, #248]	; (8012b8c <ctrl_run_tick+0x290>)
 8012a92:	781b      	ldrb	r3, [r3, #0]
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d16d      	bne.n	8012b74 <ctrl_run_tick+0x278>
			int tidx = m.to & 0x7;
 8012a98:	7c3b      	ldrb	r3, [r7, #16]
 8012a9a:	f003 0307 	and.w	r3, r3, #7
 8012a9e:	653b      	str	r3, [r7, #80]	; 0x50
			train_ctrl_t *tvar = &trctl[tidx];
 8012aa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012aa2:	00db      	lsls	r3, r3, #3
 8012aa4:	4a3f      	ldr	r2, [pc, #252]	; (8012ba4 <ctrl_run_tick+0x2a8>)
 8012aa6:	4413      	add	r3, r2
 8012aa8:	64fb      	str	r3, [r7, #76]	; 0x4c

			switch (m.cmd) {
 8012aaa:	7cbb      	ldrb	r3, [r7, #18]
 8012aac:	2b13      	cmp	r3, #19
 8012aae:	d014      	beq.n	8012ada <ctrl_run_tick+0x1de>
 8012ab0:	2b14      	cmp	r3, #20
 8012ab2:	d03a      	beq.n	8012b2a <ctrl_run_tick+0x22e>
 8012ab4:	2b12      	cmp	r3, #18
 8012ab6:	d000      	beq.n	8012aba <ctrl_run_tick+0x1be>
						ctrl_set_dir(tidx, m.v1);
					}
				}
				break;
			default:
				break;
 8012ab8:	e061      	b.n	8012b7e <ctrl_run_tick+0x282>
				int segboard = MA_2_BOARD(m.from);
 8012aba:	7c7b      	ldrb	r3, [r7, #17]
 8012abc:	10db      	asrs	r3, r3, #3
 8012abe:	f003 0307 	and.w	r3, r3, #7
 8012ac2:	643b      	str	r3, [r7, #64]	; 0x40
				int segnum = m.sub;
 8012ac4:	7cfb      	ldrb	r3, [r7, #19]
 8012ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
				int v = m.v1;
 8012ac8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012acc:	63bb      	str	r3, [r7, #56]	; 0x38
				presence_changed(segboard, segnum, v);
 8012ace:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012ad0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012ad2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8012ad4:	f000 f876 	bl	8012bc4 <presence_changed>
				break;
 8012ad8:	e051      	b.n	8012b7e <ctrl_run_tick+0x282>
				itm_debug2(DBG_CTRL, "M/spd", tidx, m.v1u);
 8012ada:	8abb      	ldrh	r3, [r7, #20]
 8012adc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012ade:	4932      	ldr	r1, [pc, #200]	; (8012ba8 <ctrl_run_tick+0x2ac>)
 8012ae0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8012ae4:	f7ff fd76 	bl	80125d4 <itm_debug2>
				int16_t tspd = m.v1u;
 8012ae8:	8abb      	ldrh	r3, [r7, #20]
 8012aea:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				int spdchanged = 0;
 8012aee:	2300      	movs	r3, #0
 8012af0:	647b      	str	r3, [r7, #68]	; 0x44
				if ((tvar->_mode == train_fullmanual) || (tvar->_mode == train_manual)) {
 8012af2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012af4:	781b      	ldrb	r3, [r3, #0]
 8012af6:	2b02      	cmp	r3, #2
 8012af8:	d003      	beq.n	8012b02 <ctrl_run_tick+0x206>
 8012afa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012afc:	781b      	ldrb	r3, [r3, #0]
 8012afe:	2b01      	cmp	r3, #1
 8012b00:	d13a      	bne.n	8012b78 <ctrl_run_tick+0x27c>
					ctrl_set_status(tidx, tspd ? train_running : train_station);
 8012b02:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d001      	beq.n	8012b0e <ctrl_run_tick+0x212>
 8012b0a:	2301      	movs	r3, #1
 8012b0c:	e000      	b.n	8012b10 <ctrl_run_tick+0x214>
 8012b0e:	2302      	movs	r3, #2
 8012b10:	4619      	mov	r1, r3
 8012b12:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8012b14:	f7ff fe0c 	bl	8012730 <ctrl_set_status>
					spdchanged = ctrl_set_tspeed(tidx, tspd);
 8012b18:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8012b1c:	4619      	mov	r1, r3
 8012b1e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8012b20:	f7ff fe78 	bl	8012814 <ctrl_set_tspeed>
 8012b24:	4603      	mov	r3, r0
 8012b26:	647b      	str	r3, [r7, #68]	; 0x44
				break;
 8012b28:	e026      	b.n	8012b78 <ctrl_run_tick+0x27c>
				itm_debug2(DBG_CTRL, "M/dir", tidx, m.v1);
 8012b2a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012b2e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012b30:	491e      	ldr	r1, [pc, #120]	; (8012bac <ctrl_run_tick+0x2b0>)
 8012b32:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8012b36:	f7ff fd4d 	bl	80125d4 <itm_debug2>
				if (0==tvar->_target_speed) {
 8012b3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012b3c:	88db      	ldrh	r3, [r3, #6]
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d11c      	bne.n	8012b7c <ctrl_run_tick+0x280>
					if ((tvar->_mode == train_fullmanual) || (tvar->_mode == train_manual)) {
 8012b42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012b44:	781b      	ldrb	r3, [r3, #0]
 8012b46:	2b02      	cmp	r3, #2
 8012b48:	d003      	beq.n	8012b52 <ctrl_run_tick+0x256>
 8012b4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012b4c:	781b      	ldrb	r3, [r3, #0]
 8012b4e:	2b01      	cmp	r3, #1
 8012b50:	d114      	bne.n	8012b7c <ctrl_run_tick+0x280>
						ctrl_set_dir(tidx, m.v1);
 8012b52:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012b56:	4619      	mov	r1, r3
 8012b58:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8012b5a:	f7ff fe1b 	bl	8012794 <ctrl_set_dir>
				break;
 8012b5e:	e00d      	b.n	8012b7c <ctrl_run_tick+0x280>
    	m.cmd = CMD_PRESENCE_CHANGE;
    	m.sub = i;
    	m.v1u = p;
 */
		} else {
			itm_debug1(DBG_MSG|DBG_CTRL, "bad msg", m.to);
 8012b60:	7c3b      	ldrb	r3, [r7, #16]
 8012b62:	461a      	mov	r2, r3
 8012b64:	4912      	ldr	r1, [pc, #72]	; (8012bb0 <ctrl_run_tick+0x2b4>)
 8012b66:	f240 4002 	movw	r0, #1026	; 0x402
 8012b6a:	f7ff fd19 	bl	80125a0 <itm_debug1>
 8012b6e:	e75c      	b.n	8012a2a <ctrl_run_tick+0x12e>
            continue;
 8012b70:	bf00      	nop
 8012b72:	e75a      	b.n	8012a2a <ctrl_run_tick+0x12e>
			if (test_mode) continue;
 8012b74:	bf00      	nop
 8012b76:	e758      	b.n	8012a2a <ctrl_run_tick+0x12e>
				break;
 8012b78:	bf00      	nop
 8012b7a:	e756      	b.n	8012a2a <ctrl_run_tick+0x12e>
				break;
 8012b7c:	bf00      	nop
	for (;;) {
 8012b7e:	e754      	b.n	8012a2a <ctrl_run_tick+0x12e>
		}
	}
	// xxx
}
 8012b80:	bf00      	nop
 8012b82:	3768      	adds	r7, #104	; 0x68
 8012b84:	46bd      	mov	sp, r7
 8012b86:	bd80      	pop	{r7, pc}
 8012b88:	2000020c 	.word	0x2000020c
 8012b8c:	2000511c 	.word	0x2000511c
 8012b90:	057619f1 	.word	0x057619f1
 8012b94:	55555556 	.word	0x55555556
 8012b98:	20005120 	.word	0x20005120
 8012b9c:	08017138 	.word	0x08017138
 8012ba0:	2000511d 	.word	0x2000511d
 8012ba4:	200050dc 	.word	0x200050dc
 8012ba8:	08017140 	.word	0x08017140
 8012bac:	08017148 	.word	0x08017148
 8012bb0:	08017150 	.word	0x08017150

08012bb4 <ctrl_reset>:

// ---------------------------------------------------------------
//static int spd0 = 30;

static void ctrl_reset(void)
{
 8012bb4:	b480      	push	{r7}
 8012bb6:	af00      	add	r7, sp, #0

}
 8012bb8:	bf00      	nop
 8012bba:	46bd      	mov	sp, r7
 8012bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bc0:	4770      	bx	lr
	...

08012bc4 <presence_changed>:

static void presence_changed(int segboard, int segnum, int v)
{
 8012bc4:	b580      	push	{r7, lr}
 8012bc6:	b086      	sub	sp, #24
 8012bc8:	af02      	add	r7, sp, #8
 8012bca:	60f8      	str	r0, [r7, #12]
 8012bcc:	60b9      	str	r1, [r7, #8]
 8012bce:	607a      	str	r2, [r7, #4]
	static int t[3]={0};
	itm_debug3(DBG_PRES|DBG_CTRL, "PRC", segboard, segnum, v);
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	9300      	str	r3, [sp, #0]
 8012bd4:	68bb      	ldr	r3, [r7, #8]
 8012bd6:	68fa      	ldr	r2, [r7, #12]
 8012bd8:	4910      	ldr	r1, [pc, #64]	; (8012c1c <presence_changed+0x58>)
 8012bda:	f44f 6088 	mov.w	r0, #1088	; 0x440
 8012bde:	f7ff fd15 	bl	801260c <itm_debug3>
	if ((segnum<0) || (segnum>2)) return;
 8012be2:	68bb      	ldr	r3, [r7, #8]
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	db15      	blt.n	8012c14 <presence_changed+0x50>
 8012be8:	68bb      	ldr	r3, [r7, #8]
 8012bea:	2b02      	cmp	r3, #2
 8012bec:	dc12      	bgt.n	8012c14 <presence_changed+0x50>
	t[segnum]=v;
 8012bee:	490c      	ldr	r1, [pc, #48]	; (8012c20 <presence_changed+0x5c>)
 8012bf0:	68bb      	ldr	r3, [r7, #8]
 8012bf2:	687a      	ldr	r2, [r7, #4]
 8012bf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	itm_debug3(DBG_PRES|DBG_CTRL, "PRS", t[0], t[1], t[2]);
 8012bf8:	4b09      	ldr	r3, [pc, #36]	; (8012c20 <presence_changed+0x5c>)
 8012bfa:	681a      	ldr	r2, [r3, #0]
 8012bfc:	4b08      	ldr	r3, [pc, #32]	; (8012c20 <presence_changed+0x5c>)
 8012bfe:	6859      	ldr	r1, [r3, #4]
 8012c00:	4b07      	ldr	r3, [pc, #28]	; (8012c20 <presence_changed+0x5c>)
 8012c02:	689b      	ldr	r3, [r3, #8]
 8012c04:	9300      	str	r3, [sp, #0]
 8012c06:	460b      	mov	r3, r1
 8012c08:	4906      	ldr	r1, [pc, #24]	; (8012c24 <presence_changed+0x60>)
 8012c0a:	f44f 6088 	mov.w	r0, #1088	; 0x440
 8012c0e:	f7ff fcfd 	bl	801260c <itm_debug3>
 8012c12:	e000      	b.n	8012c16 <presence_changed+0x52>
	if ((segnum<0) || (segnum>2)) return;
 8012c14:	bf00      	nop
}
 8012c16:	3710      	adds	r7, #16
 8012c18:	46bd      	mov	sp, r7
 8012c1a:	bd80      	pop	{r7, pc}
 8012c1c:	08017158 	.word	0x08017158
 8012c20:	20005124 	.word	0x20005124
 8012c24:	0801715c 	.word	0x0801715c

08012c28 <itm_debug1>:
{
 8012c28:	b580      	push	{r7, lr}
 8012c2a:	b086      	sub	sp, #24
 8012c2c:	af02      	add	r7, sp, #8
 8012c2e:	60f8      	str	r0, [r7, #12]
 8012c30:	60b9      	str	r1, [r7, #8]
 8012c32:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 8012c34:	4b08      	ldr	r3, [pc, #32]	; (8012c58 <itm_debug1+0x30>)
 8012c36:	681a      	ldr	r2, [r3, #0]
 8012c38:	68fb      	ldr	r3, [r7, #12]
 8012c3a:	4013      	ands	r3, r2
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d007      	beq.n	8012c50 <itm_debug1+0x28>
 8012c40:	2301      	movs	r3, #1
 8012c42:	9300      	str	r3, [sp, #0]
 8012c44:	2300      	movs	r3, #0
 8012c46:	2200      	movs	r2, #0
 8012c48:	6879      	ldr	r1, [r7, #4]
 8012c4a:	68b8      	ldr	r0, [r7, #8]
 8012c4c:	f003 fe40 	bl	80168d0 <_itm_debug3>
}
 8012c50:	bf00      	nop
 8012c52:	3710      	adds	r7, #16
 8012c54:	46bd      	mov	sp, r7
 8012c56:	bd80      	pop	{r7, pc}
 8012c58:	2000047c 	.word	0x2000047c

08012c5c <itm_debug2>:
{
 8012c5c:	b580      	push	{r7, lr}
 8012c5e:	b086      	sub	sp, #24
 8012c60:	af02      	add	r7, sp, #8
 8012c62:	60f8      	str	r0, [r7, #12]
 8012c64:	60b9      	str	r1, [r7, #8]
 8012c66:	607a      	str	r2, [r7, #4]
 8012c68:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, 0, 2);
 8012c6a:	4b09      	ldr	r3, [pc, #36]	; (8012c90 <itm_debug2+0x34>)
 8012c6c:	681a      	ldr	r2, [r3, #0]
 8012c6e:	68fb      	ldr	r3, [r7, #12]
 8012c70:	4013      	ands	r3, r2
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d007      	beq.n	8012c86 <itm_debug2+0x2a>
 8012c76:	2302      	movs	r3, #2
 8012c78:	9300      	str	r3, [sp, #0]
 8012c7a:	2300      	movs	r3, #0
 8012c7c:	683a      	ldr	r2, [r7, #0]
 8012c7e:	6879      	ldr	r1, [r7, #4]
 8012c80:	68b8      	ldr	r0, [r7, #8]
 8012c82:	f003 fe25 	bl	80168d0 <_itm_debug3>
}
 8012c86:	bf00      	nop
 8012c88:	3710      	adds	r7, #16
 8012c8a:	46bd      	mov	sp, r7
 8012c8c:	bd80      	pop	{r7, pc}
 8012c8e:	bf00      	nop
 8012c90:	2000047c 	.word	0x2000047c

08012c94 <itm_debug3>:
{
 8012c94:	b580      	push	{r7, lr}
 8012c96:	b086      	sub	sp, #24
 8012c98:	af02      	add	r7, sp, #8
 8012c9a:	60f8      	str	r0, [r7, #12]
 8012c9c:	60b9      	str	r1, [r7, #8]
 8012c9e:	607a      	str	r2, [r7, #4]
 8012ca0:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, v3, 3);
 8012ca2:	4b09      	ldr	r3, [pc, #36]	; (8012cc8 <itm_debug3+0x34>)
 8012ca4:	681a      	ldr	r2, [r3, #0]
 8012ca6:	68fb      	ldr	r3, [r7, #12]
 8012ca8:	4013      	ands	r3, r2
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d007      	beq.n	8012cbe <itm_debug3+0x2a>
 8012cae:	2303      	movs	r3, #3
 8012cb0:	9300      	str	r3, [sp, #0]
 8012cb2:	69bb      	ldr	r3, [r7, #24]
 8012cb4:	683a      	ldr	r2, [r7, #0]
 8012cb6:	6879      	ldr	r1, [r7, #4]
 8012cb8:	68b8      	ldr	r0, [r7, #8]
 8012cba:	f003 fe09 	bl	80168d0 <_itm_debug3>
}
 8012cbe:	bf00      	nop
 8012cc0:	3710      	adds	r7, #16
 8012cc2:	46bd      	mov	sp, r7
 8012cc4:	bd80      	pop	{r7, pc}
 8012cc6:	bf00      	nop
 8012cc8:	2000047c 	.word	0x2000047c

08012ccc <canton_error>:
#define ERR_STRANGE			-4242

int trainctl_error(char l, int code, const char *msg);

static inline int canton_error(int code, const char *msg)
{
 8012ccc:	b580      	push	{r7, lr}
 8012cce:	b082      	sub	sp, #8
 8012cd0:	af00      	add	r7, sp, #0
 8012cd2:	6078      	str	r0, [r7, #4]
 8012cd4:	6039      	str	r1, [r7, #0]
	return trainctl_error('C', code, msg);
 8012cd6:	683a      	ldr	r2, [r7, #0]
 8012cd8:	6879      	ldr	r1, [r7, #4]
 8012cda:	2043      	movs	r0, #67	; 0x43
 8012cdc:	f001 f90a 	bl	8013ef4 <trainctl_error>
 8012ce0:	4603      	mov	r3, r0
}
 8012ce2:	4618      	mov	r0, r3
 8012ce4:	3708      	adds	r7, #8
 8012ce6:	46bd      	mov	sp, r7
 8012ce8:	bd80      	pop	{r7, pc}

08012cea <canton_error_rc>:
static inline int canton_error_rc(int rc, int code, const char *msg)
{
 8012cea:	b580      	push	{r7, lr}
 8012cec:	b084      	sub	sp, #16
 8012cee:	af00      	add	r7, sp, #0
 8012cf0:	60f8      	str	r0, [r7, #12]
 8012cf2:	60b9      	str	r1, [r7, #8]
 8012cf4:	607a      	str	r2, [r7, #4]
	trainctl_error('C', code, msg);
 8012cf6:	687a      	ldr	r2, [r7, #4]
 8012cf8:	68b9      	ldr	r1, [r7, #8]
 8012cfa:	2043      	movs	r0, #67	; 0x43
 8012cfc:	f001 f8fa 	bl	8013ef4 <trainctl_error>
	return rc;
 8012d00:	68fb      	ldr	r3, [r7, #12]
}
 8012d02:	4618      	mov	r0, r3
 8012d04:	3710      	adds	r7, #16
 8012d06:	46bd      	mov	sp, r7
 8012d08:	bd80      	pop	{r7, pc}
	...

08012d0c <mqf_read_to_canton>:
/* turnout command */
#define CMD_TURNOUT_A		0x01
#define CMD_TURNOUT_B		0x02


LFMQUEUE_DEF_H(to_canton, msg_64_t)
 8012d0c:	b580      	push	{r7, lr}
 8012d0e:	b082      	sub	sp, #8
 8012d10:	af00      	add	r7, sp, #0
 8012d12:	6078      	str	r0, [r7, #4]
 8012d14:	6879      	ldr	r1, [r7, #4]
 8012d16:	4804      	ldr	r0, [pc, #16]	; (8012d28 <mqf_read_to_canton+0x1c>)
 8012d18:	f003 ff40 	bl	8016b9c <mqf_read>
 8012d1c:	4603      	mov	r3, r0
 8012d1e:	4618      	mov	r0, r3
 8012d20:	3708      	adds	r7, #8
 8012d22:	46bd      	mov	sp, r7
 8012d24:	bd80      	pop	{r7, pc}
 8012d26:	bf00      	nop
 8012d28:	200003e0 	.word	0x200003e0

08012d2c <mqf_write_from_canton>:
LFMQUEUE_DEF_H(from_canton, msg_64_t)
 8012d2c:	b580      	push	{r7, lr}
 8012d2e:	b082      	sub	sp, #8
 8012d30:	af00      	add	r7, sp, #0
 8012d32:	6078      	str	r0, [r7, #4]
 8012d34:	6879      	ldr	r1, [r7, #4]
 8012d36:	4804      	ldr	r0, [pc, #16]	; (8012d48 <mqf_write_from_canton+0x1c>)
 8012d38:	f003 feb6 	bl	8016aa8 <mqf_write>
 8012d3c:	4603      	mov	r3, r0
 8012d3e:	4618      	mov	r0, r3
 8012d40:	3708      	adds	r7, #8
 8012d42:	46bd      	mov	sp, r7
 8012d44:	bd80      	pop	{r7, pc}
 8012d46:	bf00      	nop
 8012d48:	200003ec 	.word	0x200003ec

08012d4c <canton_reset>:

static void canton_set_pwm(int cn, const canton_config_t *c, canton_vars_t *v,  int dir, int duty);
void canton_set_volt(int cn, const canton_config_t *c, canton_vars_t *v, int voltidx);

static void canton_reset(void)
{
 8012d4c:	b580      	push	{r7, lr}
 8012d4e:	b086      	sub	sp, #24
 8012d50:	af02      	add	r7, sp, #8
	for (int i = 0; i<NUM_LOCAL_CANTONS_SW; i++) {
 8012d52:	2300      	movs	r3, #0
 8012d54:	60fb      	str	r3, [r7, #12]
 8012d56:	e01c      	b.n	8012d92 <canton_reset+0x46>
		USE_CANTON(i)
 8012d58:	68f8      	ldr	r0, [r7, #12]
 8012d5a:	f001 f9ff 	bl	801415c <get_canton_cnf>
 8012d5e:	60b8      	str	r0, [r7, #8]
 8012d60:	68fb      	ldr	r3, [r7, #12]
 8012d62:	00db      	lsls	r3, r3, #3
 8012d64:	4a0e      	ldr	r2, [pc, #56]	; (8012da0 <canton_reset+0x54>)
 8012d66:	4413      	add	r3, r2
 8012d68:	607b      	str	r3, [r7, #4]
		cvars->cur_dir = 99;
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	2263      	movs	r2, #99	; 0x63
 8012d6e:	701a      	strb	r2, [r3, #0]
		canton_set_pwm(i, cconf, cvars, 0, 0);
 8012d70:	2300      	movs	r3, #0
 8012d72:	9300      	str	r3, [sp, #0]
 8012d74:	2300      	movs	r3, #0
 8012d76:	687a      	ldr	r2, [r7, #4]
 8012d78:	68b9      	ldr	r1, [r7, #8]
 8012d7a:	68f8      	ldr	r0, [r7, #12]
 8012d7c:	f000 f938 	bl	8012ff0 <canton_set_pwm>
		canton_set_volt(i, cconf, cvars,  7);
 8012d80:	2307      	movs	r3, #7
 8012d82:	687a      	ldr	r2, [r7, #4]
 8012d84:	68b9      	ldr	r1, [r7, #8]
 8012d86:	68f8      	ldr	r0, [r7, #12]
 8012d88:	f000 fa88 	bl	801329c <canton_set_volt>
	for (int i = 0; i<NUM_LOCAL_CANTONS_SW; i++) {
 8012d8c:	68fb      	ldr	r3, [r7, #12]
 8012d8e:	3301      	adds	r3, #1
 8012d90:	60fb      	str	r3, [r7, #12]
 8012d92:	68fb      	ldr	r3, [r7, #12]
 8012d94:	2b07      	cmp	r3, #7
 8012d96:	dddf      	ble.n	8012d58 <canton_reset+0xc>
	}
}
 8012d98:	bf00      	nop
 8012d9a:	3710      	adds	r7, #16
 8012d9c:	46bd      	mov	sp, r7
 8012d9e:	bd80      	pop	{r7, pc}
 8012da0:	20005150 	.word	0x20005150

08012da4 <handle_canton_cmd>:

static uint8_t test_mode = 0;
static uint8_t testerAddr = 0;

static void handle_canton_cmd(int cidx, msg_64_t *m)
{
 8012da4:	b580      	push	{r7, lr}
 8012da6:	b086      	sub	sp, #24
 8012da8:	af02      	add	r7, sp, #8
 8012daa:	6078      	str	r0, [r7, #4]
 8012dac:	6039      	str	r1, [r7, #0]
	if (m->cmd & 0x40) {
 8012dae:	683b      	ldr	r3, [r7, #0]
 8012db0:	789b      	ldrb	r3, [r3, #2]
 8012db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d00b      	beq.n	8012dd2 <handle_canton_cmd+0x2e>
		itm_debug1(DBG_LOWCTRL, "msg-bemf", m->to);
 8012dba:	683b      	ldr	r3, [r7, #0]
 8012dbc:	781b      	ldrb	r3, [r3, #0]
 8012dbe:	461a      	mov	r2, r3
 8012dc0:	493a      	ldr	r1, [pc, #232]	; (8012eac <handle_canton_cmd+0x108>)
 8012dc2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8012dc6:	f7ff ff2f 	bl	8012c28 <itm_debug1>
		bemf_msg(m);
 8012dca:	6838      	ldr	r0, [r7, #0]
 8012dcc:	f000 fbda 	bl	8013584 <bemf_msg>
		return;
 8012dd0:	e069      	b.n	8012ea6 <handle_canton_cmd+0x102>
	}


	USE_CANTON(cidx)
 8012dd2:	6878      	ldr	r0, [r7, #4]
 8012dd4:	f001 f9c2 	bl	801415c <get_canton_cnf>
 8012dd8:	60f8      	str	r0, [r7, #12]
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	00db      	lsls	r3, r3, #3
 8012dde:	4a34      	ldr	r2, [pc, #208]	; (8012eb0 <handle_canton_cmd+0x10c>)
 8012de0:	4413      	add	r3, r2
 8012de2:	60bb      	str	r3, [r7, #8]
	if (!cvars) {
 8012de4:	68bb      	ldr	r3, [r7, #8]
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d105      	bne.n	8012df6 <handle_canton_cmd+0x52>
		itm_debug1(DBG_LOWCTRL|DBG_ERR, "no cvars", cidx);
 8012dea:	687a      	ldr	r2, [r7, #4]
 8012dec:	4931      	ldr	r1, [pc, #196]	; (8012eb4 <handle_canton_cmd+0x110>)
 8012dee:	4832      	ldr	r0, [pc, #200]	; (8012eb8 <handle_canton_cmd+0x114>)
 8012df0:	f7ff ff1a 	bl	8012c28 <itm_debug1>
		return;
 8012df4:	e057      	b.n	8012ea6 <handle_canton_cmd+0x102>
	}
	switch (m->cmd) {
 8012df6:	683b      	ldr	r3, [r7, #0]
 8012df8:	789b      	ldrb	r3, [r3, #2]
 8012dfa:	2b01      	cmp	r3, #1
 8012dfc:	d016      	beq.n	8012e2c <handle_canton_cmd+0x88>
 8012dfe:	2b02      	cmp	r3, #2
 8012e00:	d148      	bne.n	8012e94 <handle_canton_cmd+0xf0>
	case CMD_STOP:
		itm_debug1(DBG_LOWCTRL, "CMD STOP", 0);
 8012e02:	2200      	movs	r2, #0
 8012e04:	492d      	ldr	r1, [pc, #180]	; (8012ebc <handle_canton_cmd+0x118>)
 8012e06:	f44f 7080 	mov.w	r0, #256	; 0x100
 8012e0a:	f7ff ff0d 	bl	8012c28 <itm_debug1>
		canton_set_pwm(cidx, cconf, cvars, 0, 0);
 8012e0e:	2300      	movs	r3, #0
 8012e10:	9300      	str	r3, [sp, #0]
 8012e12:	2300      	movs	r3, #0
 8012e14:	68ba      	ldr	r2, [r7, #8]
 8012e16:	68f9      	ldr	r1, [r7, #12]
 8012e18:	6878      	ldr	r0, [r7, #4]
 8012e1a:	f000 f8e9 	bl	8012ff0 <canton_set_pwm>
		canton_set_volt(cidx, cconf, cvars,  7);
 8012e1e:	2307      	movs	r3, #7
 8012e20:	68ba      	ldr	r2, [r7, #8]
 8012e22:	68f9      	ldr	r1, [r7, #12]
 8012e24:	6878      	ldr	r0, [r7, #4]
 8012e26:	f000 fa39 	bl	801329c <canton_set_volt>
		break;
 8012e2a:	e03c      	b.n	8012ea6 <handle_canton_cmd+0x102>
	case CMD_SETVPWM:
		itm_debug3(DBG_LOWCTRL, "SETPWM", cidx, m->v1u, m->v2);
 8012e2c:	683b      	ldr	r3, [r7, #0]
 8012e2e:	889b      	ldrh	r3, [r3, #4]
 8012e30:	461a      	mov	r2, r3
 8012e32:	683b      	ldr	r3, [r7, #0]
 8012e34:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8012e38:	9300      	str	r3, [sp, #0]
 8012e3a:	4613      	mov	r3, r2
 8012e3c:	687a      	ldr	r2, [r7, #4]
 8012e3e:	4920      	ldr	r1, [pc, #128]	; (8012ec0 <handle_canton_cmd+0x11c>)
 8012e40:	f44f 7080 	mov.w	r0, #256	; 0x100
 8012e44:	f7ff ff26 	bl	8012c94 <itm_debug3>
		canton_set_pwm(cidx, cconf, cvars, SIGNOF0(m->v2), abs(m->v2));
 8012e48:	683b      	ldr	r3, [r7, #0]
 8012e4a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	db09      	blt.n	8012e66 <handle_canton_cmd+0xc2>
 8012e52:	683b      	ldr	r3, [r7, #0]
 8012e54:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	bfcc      	ite	gt
 8012e5c:	2301      	movgt	r3, #1
 8012e5e:	2300      	movle	r3, #0
 8012e60:	b2db      	uxtb	r3, r3
 8012e62:	461a      	mov	r2, r3
 8012e64:	e001      	b.n	8012e6a <handle_canton_cmd+0xc6>
 8012e66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012e6a:	683b      	ldr	r3, [r7, #0]
 8012e6c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	bfb8      	it	lt
 8012e74:	425b      	neglt	r3, r3
 8012e76:	9300      	str	r3, [sp, #0]
 8012e78:	4613      	mov	r3, r2
 8012e7a:	68ba      	ldr	r2, [r7, #8]
 8012e7c:	68f9      	ldr	r1, [r7, #12]
 8012e7e:	6878      	ldr	r0, [r7, #4]
 8012e80:	f000 f8b6 	bl	8012ff0 <canton_set_pwm>
		canton_set_volt(cidx, cconf, cvars,  m->v1u);
 8012e84:	683b      	ldr	r3, [r7, #0]
 8012e86:	889b      	ldrh	r3, [r3, #4]
 8012e88:	68ba      	ldr	r2, [r7, #8]
 8012e8a:	68f9      	ldr	r1, [r7, #12]
 8012e8c:	6878      	ldr	r0, [r7, #4]
 8012e8e:	f000 fa05 	bl	801329c <canton_set_volt>

		break;
 8012e92:	e008      	b.n	8012ea6 <handle_canton_cmd+0x102>
	default:
		itm_debug1(DBG_LOWCTRL, "not handled msg", m->cmd);
 8012e94:	683b      	ldr	r3, [r7, #0]
 8012e96:	789b      	ldrb	r3, [r3, #2]
 8012e98:	461a      	mov	r2, r3
 8012e9a:	490a      	ldr	r1, [pc, #40]	; (8012ec4 <handle_canton_cmd+0x120>)
 8012e9c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8012ea0:	f7ff fec2 	bl	8012c28 <itm_debug1>
		break;
 8012ea4:	bf00      	nop
	}
}
 8012ea6:	3710      	adds	r7, #16
 8012ea8:	46bd      	mov	sp, r7
 8012eaa:	bd80      	pop	{r7, pc}
 8012eac:	08017160 	.word	0x08017160
 8012eb0:	20005150 	.word	0x20005150
 8012eb4:	0801716c 	.word	0x0801716c
 8012eb8:	80000100 	.word	0x80000100
 8012ebc:	08017178 	.word	0x08017178
 8012ec0:	08017184 	.word	0x08017184
 8012ec4:	0801718c 	.word	0x0801718c

08012ec8 <canton_tick>:


void canton_tick(uint32_t notif_flags, uint32_t tick, uint32_t dt)
{
 8012ec8:	b580      	push	{r7, lr}
 8012eca:	b08c      	sub	sp, #48	; 0x30
 8012ecc:	af00      	add	r7, sp, #0
 8012ece:	60f8      	str	r0, [r7, #12]
 8012ed0:	60b9      	str	r1, [r7, #8]
 8012ed2:	607a      	str	r2, [r7, #4]
	static int first=1;
	if (first) {
 8012ed4:	4b42      	ldr	r3, [pc, #264]	; (8012fe0 <canton_tick+0x118>)
 8012ed6:	681b      	ldr	r3, [r3, #0]
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d006      	beq.n	8012eea <canton_tick+0x22>
		first = 0;
 8012edc:	4b40      	ldr	r3, [pc, #256]	; (8012fe0 <canton_tick+0x118>)
 8012ede:	2200      	movs	r2, #0
 8012ee0:	601a      	str	r2, [r3, #0]
		canton_reset();
 8012ee2:	f7ff ff33 	bl	8012d4c <canton_reset>
		bemf_reset();
 8012ee6:	f000 fb33 	bl	8013550 <bemf_reset>
	}
	for (;;) {
		msg_64_t m;
		int rc = mqf_read_to_canton(&m);
 8012eea:	f107 0318 	add.w	r3, r7, #24
 8012eee:	4618      	mov	r0, r3
 8012ef0:	f7ff ff0c 	bl	8012d0c <mqf_read_to_canton>
 8012ef4:	6278      	str	r0, [r7, #36]	; 0x24
		if (rc) break;
 8012ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d16d      	bne.n	8012fd8 <canton_tick+0x110>
        switch (m.cmd) {
 8012efc:	7ebb      	ldrb	r3, [r7, #26]
 8012efe:	2bfc      	cmp	r3, #252	; 0xfc
 8012f00:	d009      	beq.n	8012f16 <canton_tick+0x4e>
 8012f02:	2bfc      	cmp	r3, #252	; 0xfc
 8012f04:	db0f      	blt.n	8012f26 <canton_tick+0x5e>
 8012f06:	3bfe      	subs	r3, #254	; 0xfe
 8012f08:	2b01      	cmp	r3, #1
 8012f0a:	d80c      	bhi.n	8012f26 <canton_tick+0x5e>
        case CMD_RESET: // FALLTHRU
        case CMD_EMERGENCY_STOP:
            canton_reset();
 8012f0c:	f7ff ff1e 	bl	8012d4c <canton_reset>
            bemf_reset();
 8012f10:	f000 fb1e 	bl	8013550 <bemf_reset>
            break;
 8012f14:	e007      	b.n	8012f26 <canton_tick+0x5e>
        case CMD_TEST_MODE:
            test_mode = m.v1u;
 8012f16:	8bbb      	ldrh	r3, [r7, #28]
 8012f18:	b2da      	uxtb	r2, r3
 8012f1a:	4b32      	ldr	r3, [pc, #200]	; (8012fe4 <canton_tick+0x11c>)
 8012f1c:	701a      	strb	r2, [r3, #0]
            testerAddr = m.from;
 8012f1e:	7e7a      	ldrb	r2, [r7, #25]
 8012f20:	4b31      	ldr	r3, [pc, #196]	; (8012fe8 <canton_tick+0x120>)
 8012f22:	701a      	strb	r2, [r3, #0]
            break;
 8012f24:	bf00      	nop
        }
        if (test_mode && (testerAddr != m.from)) {
 8012f26:	4b2f      	ldr	r3, [pc, #188]	; (8012fe4 <canton_tick+0x11c>)
 8012f28:	781b      	ldrb	r3, [r3, #0]
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d004      	beq.n	8012f38 <canton_tick+0x70>
 8012f2e:	7e7a      	ldrb	r2, [r7, #25]
 8012f30:	4b2d      	ldr	r3, [pc, #180]	; (8012fe8 <canton_tick+0x120>)
 8012f32:	781b      	ldrb	r3, [r3, #0]
 8012f34:	429a      	cmp	r2, r3
 8012f36:	d14d      	bne.n	8012fd4 <canton_tick+0x10c>
            continue;
        }

        int cidx = -1;
 8012f38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (IS_BROADCAST(m.to)) {
 8012f3e:	7e3b      	ldrb	r3, [r7, #24]
 8012f40:	2bff      	cmp	r3, #255	; 0xff
 8012f42:	d103      	bne.n	8012f4c <canton_tick+0x84>
        	cidx = -1;
 8012f44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012f48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012f4a:	e011      	b.n	8012f70 <canton_tick+0xa8>
        } else if (IS_CANTON(m.to)) {
 8012f4c:	7e3b      	ldrb	r3, [r7, #24]
 8012f4e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	d104      	bne.n	8012f60 <canton_tick+0x98>
        	cidx = m.to & 0x07;
 8012f56:	7e3b      	ldrb	r3, [r7, #24]
 8012f58:	f003 0307 	and.w	r3, r3, #7
 8012f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012f5e:	e007      	b.n	8012f70 <canton_tick+0xa8>
        } else {
			itm_debug1(DBG_LOWCTRL, "not handled msg", m.cmd);
 8012f60:	7ebb      	ldrb	r3, [r7, #26]
 8012f62:	461a      	mov	r2, r3
 8012f64:	4921      	ldr	r1, [pc, #132]	; (8012fec <canton_tick+0x124>)
 8012f66:	f44f 7080 	mov.w	r0, #256	; 0x100
 8012f6a:	f7ff fe5d 	bl	8012c28 <itm_debug1>
			continue;
 8012f6e:	e032      	b.n	8012fd6 <canton_tick+0x10e>
        }
        if ((test_mode==1) && (CMD_SETVPWM == m.cmd)) {
 8012f70:	4b1c      	ldr	r3, [pc, #112]	; (8012fe4 <canton_tick+0x11c>)
 8012f72:	781b      	ldrb	r3, [r3, #0]
 8012f74:	2b01      	cmp	r3, #1
 8012f76:	d113      	bne.n	8012fa0 <canton_tick+0xd8>
 8012f78:	7ebb      	ldrb	r3, [r7, #26]
 8012f7a:	2b01      	cmp	r3, #1
 8012f7c:	d110      	bne.n	8012fa0 <canton_tick+0xd8>
        	// in test mode, forward CMD_SETVPWM to UI for display
        	msg_64_t m2 = m;
 8012f7e:	f107 0310 	add.w	r3, r7, #16
 8012f82:	f107 0218 	add.w	r2, r7, #24
 8012f86:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012f8a:	e883 0003 	stmia.w	r3, {r0, r1}
        	m2.from = m2.to;
 8012f8e:	7c3b      	ldrb	r3, [r7, #16]
 8012f90:	747b      	strb	r3, [r7, #17]
        	m2.to = MA_UI(1);
 8012f92:	2381      	movs	r3, #129	; 0x81
 8012f94:	743b      	strb	r3, [r7, #16]
     		mqf_write_from_canton(&m2);
 8012f96:	f107 0310 	add.w	r3, r7, #16
 8012f9a:	4618      	mov	r0, r3
 8012f9c:	f7ff fec6 	bl	8012d2c <mqf_write_from_canton>
       	}
        if (cidx>=0) handle_canton_cmd(cidx, &m);
 8012fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	db06      	blt.n	8012fb4 <canton_tick+0xec>
 8012fa6:	f107 0318 	add.w	r3, r7, #24
 8012faa:	4619      	mov	r1, r3
 8012fac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012fae:	f7ff fef9 	bl	8012da4 <handle_canton_cmd>
 8012fb2:	e79a      	b.n	8012eea <canton_tick+0x22>
        else {
        	// broadcast
        	for (int i=0; i<NUM_LOCAL_CANTONS_HW; i++) {
 8012fb4:	2300      	movs	r3, #0
 8012fb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8012fb8:	e008      	b.n	8012fcc <canton_tick+0x104>
        		handle_canton_cmd(i, &m);
 8012fba:	f107 0318 	add.w	r3, r7, #24
 8012fbe:	4619      	mov	r1, r3
 8012fc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012fc2:	f7ff feef 	bl	8012da4 <handle_canton_cmd>
        	for (int i=0; i<NUM_LOCAL_CANTONS_HW; i++) {
 8012fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fc8:	3301      	adds	r3, #1
 8012fca:	62bb      	str	r3, [r7, #40]	; 0x28
 8012fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fce:	2b04      	cmp	r3, #4
 8012fd0:	ddf3      	ble.n	8012fba <canton_tick+0xf2>
 8012fd2:	e78a      	b.n	8012eea <canton_tick+0x22>
            continue;
 8012fd4:	bf00      	nop
	for (;;) {
 8012fd6:	e788      	b.n	8012eea <canton_tick+0x22>
        	}
        }
	}
}
 8012fd8:	bf00      	nop
 8012fda:	3730      	adds	r7, #48	; 0x30
 8012fdc:	46bd      	mov	sp, r7
 8012fde:	bd80      	pop	{r7, pc}
 8012fe0:	20000210 	.word	0x20000210
 8012fe4:	20005190 	.word	0x20005190
 8012fe8:	20005191 	.word	0x20005191
 8012fec:	0801718c 	.word	0x0801718c

08012ff0 <canton_set_pwm>:
#define USE_PWM_STOP 0
/*
 * it seems that output goes to high impedence when we stop pwm ????
 */
static void canton_set_pwm(int cidx, const canton_config_t *c, canton_vars_t *v,  int dir, int duty)
{
 8012ff0:	b580      	push	{r7, lr}
 8012ff2:	b08a      	sub	sp, #40	; 0x28
 8012ff4:	af02      	add	r7, sp, #8
 8012ff6:	60f8      	str	r0, [r7, #12]
 8012ff8:	60b9      	str	r1, [r7, #8]
 8012ffa:	607a      	str	r2, [r7, #4]
 8012ffc:	603b      	str	r3, [r7, #0]
	itm_debug3(DBG_LOWCTRL, "c/set_pwm", cidx, dir, duty);
 8012ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013000:	9300      	str	r3, [sp, #0]
 8013002:	683b      	ldr	r3, [r7, #0]
 8013004:	68fa      	ldr	r2, [r7, #12]
 8013006:	499a      	ldr	r1, [pc, #616]	; (8013270 <canton_set_pwm+0x280>)
 8013008:	f44f 7080 	mov.w	r0, #256	; 0x100
 801300c:	f7ff fe42 	bl	8012c94 <itm_debug3>
	int t = 2*duty; // with centered pwm (or normal)
 8013010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013012:	005b      	lsls	r3, r3, #1
 8013014:	617b      	str	r3, [r7, #20]

	if ((v->cur_dir == dir) && (v->cur_pwm_duty==duty)) {
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	f993 3000 	ldrsb.w	r3, [r3]
 801301c:	461a      	mov	r2, r3
 801301e:	683b      	ldr	r3, [r7, #0]
 8013020:	4293      	cmp	r3, r2
 8013022:	d10c      	bne.n	801303e <canton_set_pwm+0x4e>
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	885b      	ldrh	r3, [r3, #2]
 8013028:	461a      	mov	r2, r3
 801302a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801302c:	4293      	cmp	r3, r2
 801302e:	d106      	bne.n	801303e <canton_set_pwm+0x4e>
		itm_debug1(DBG_LOWCTRL, "c/same", duty);
 8013030:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013032:	4990      	ldr	r1, [pc, #576]	; (8013274 <canton_set_pwm+0x284>)
 8013034:	f44f 7080 	mov.w	r0, #256	; 0x100
 8013038:	f7ff fdf6 	bl	8012c28 <itm_debug1>
		return;
 801303c:	e114      	b.n	8013268 <canton_set_pwm+0x278>
	}

	TIM_HandleTypeDef *pwm_timer = CantonTimerHandles[c->pwm_timer_num];
 801303e:	68bb      	ldr	r3, [r7, #8]
 8013040:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8013044:	461a      	mov	r2, r3
 8013046:	4b8c      	ldr	r3, [pc, #560]	; (8013278 <canton_set_pwm+0x288>)
 8013048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801304c:	613b      	str	r3, [r7, #16]
	if (!pwm_timer) {
 801304e:	693b      	ldr	r3, [r7, #16]
 8013050:	2b00      	cmp	r3, #0
 8013052:	d108      	bne.n	8013066 <canton_set_pwm+0x76>
		itm_debug1(DBG_LOWCTRL|DBG_ERR, "c/notim", c->pwm_timer_num);
 8013054:	68bb      	ldr	r3, [r7, #8]
 8013056:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801305a:	461a      	mov	r2, r3
 801305c:	4987      	ldr	r1, [pc, #540]	; (801327c <canton_set_pwm+0x28c>)
 801305e:	4888      	ldr	r0, [pc, #544]	; (8013280 <canton_set_pwm+0x290>)
 8013060:	f7ff fde2 	bl	8012c28 <itm_debug1>
		return;
 8013064:	e100      	b.n	8013268 <canton_set_pwm+0x278>
	}
	if (v->cur_dir != dir) {
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	f993 3000 	ldrsb.w	r3, [r3]
 801306c:	461a      	mov	r2, r3
 801306e:	683b      	ldr	r3, [r7, #0]
 8013070:	4293      	cmp	r3, r2
 8013072:	d03c      	beq.n	80130ee <canton_set_pwm+0xfe>
		v->cur_dir = dir;
 8013074:	683b      	ldr	r3, [r7, #0]
 8013076:	b25a      	sxtb	r2, r3
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	701a      	strb	r2, [r3, #0]
		itm_debug3(DBG_LOWCTRL, "set dir", dir, c->ch0, c->ch1);
 801307c:	68bb      	ldr	r3, [r7, #8]
 801307e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013080:	461a      	mov	r2, r3
 8013082:	68bb      	ldr	r3, [r7, #8]
 8013084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013086:	9300      	str	r3, [sp, #0]
 8013088:	4613      	mov	r3, r2
 801308a:	683a      	ldr	r2, [r7, #0]
 801308c:	497d      	ldr	r1, [pc, #500]	; (8013284 <canton_set_pwm+0x294>)
 801308e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8013092:	f7ff fdff 	bl	8012c94 <itm_debug3>
		if (dir>0) {
 8013096:	683b      	ldr	r3, [r7, #0]
 8013098:	2b00      	cmp	r3, #0
 801309a:	dd0c      	ble.n	80130b6 <canton_set_pwm+0xc6>
			if (USE_PWM_STOP) my_HAL_TIM_PWM_Stop(pwm_timer, c->ch1);
			else HAL_TIM_PWM_Start(pwm_timer, c->ch1);
 801309c:	68bb      	ldr	r3, [r7, #8]
 801309e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80130a0:	4619      	mov	r1, r3
 80130a2:	6938      	ldr	r0, [r7, #16]
 80130a4:	f7f5 f87e 	bl	80081a4 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(pwm_timer, c->ch0);
 80130a8:	68bb      	ldr	r3, [r7, #8]
 80130aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130ac:	4619      	mov	r1, r3
 80130ae:	6938      	ldr	r0, [r7, #16]
 80130b0:	f7f5 f878 	bl	80081a4 <HAL_TIM_PWM_Start>
 80130b4:	e01b      	b.n	80130ee <canton_set_pwm+0xfe>
		} else if (dir<0) {
 80130b6:	683b      	ldr	r3, [r7, #0]
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	da0c      	bge.n	80130d6 <canton_set_pwm+0xe6>
			if (USE_PWM_STOP) my_HAL_TIM_PWM_Stop(pwm_timer, c->ch0);
			else HAL_TIM_PWM_Start(pwm_timer, c->ch0);
 80130bc:	68bb      	ldr	r3, [r7, #8]
 80130be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130c0:	4619      	mov	r1, r3
 80130c2:	6938      	ldr	r0, [r7, #16]
 80130c4:	f7f5 f86e 	bl	80081a4 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(pwm_timer, c->ch1);
 80130c8:	68bb      	ldr	r3, [r7, #8]
 80130ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80130cc:	4619      	mov	r1, r3
 80130ce:	6938      	ldr	r0, [r7, #16]
 80130d0:	f7f5 f868 	bl	80081a4 <HAL_TIM_PWM_Start>
 80130d4:	e00b      	b.n	80130ee <canton_set_pwm+0xfe>
		} else {
			if (USE_PWM_STOP) {
				my_HAL_TIM_PWM_Stop(pwm_timer, c->ch0);
				my_HAL_TIM_PWM_Stop(pwm_timer, c->ch1);
			} else {
				HAL_TIM_PWM_Start(pwm_timer, c->ch0);
 80130d6:	68bb      	ldr	r3, [r7, #8]
 80130d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130da:	4619      	mov	r1, r3
 80130dc:	6938      	ldr	r0, [r7, #16]
 80130de:	f7f5 f861 	bl	80081a4 <HAL_TIM_PWM_Start>
				HAL_TIM_PWM_Start(pwm_timer, c->ch1);
 80130e2:	68bb      	ldr	r3, [r7, #8]
 80130e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80130e6:	4619      	mov	r1, r3
 80130e8:	6938      	ldr	r0, [r7, #16]
 80130ea:	f7f5 f85b 	bl	80081a4 <HAL_TIM_PWM_Start>
			}
		}
	}
	if (!dir) {
 80130ee:	683b      	ldr	r3, [r7, #0]
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d101      	bne.n	80130f8 <canton_set_pwm+0x108>
		duty = 0;
 80130f4:	2300      	movs	r3, #0
 80130f6:	62bb      	str	r3, [r7, #40]	; 0x28
		if (USE_PWM_STOP) {
			v->cur_pwm_duty = 0;
			return;
		}
	}
	v->cur_pwm_duty = duty;
 80130f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130fa:	b29a      	uxth	r2, r3
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	805a      	strh	r2, [r3, #2]
	uint32_t chon;
	uint32_t choff;
	if (dir>0) {
 8013100:	683b      	ldr	r3, [r7, #0]
 8013102:	2b00      	cmp	r3, #0
 8013104:	dd06      	ble.n	8013114 <canton_set_pwm+0x124>
		chon = c->ch0;
 8013106:	68bb      	ldr	r3, [r7, #8]
 8013108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801310a:	61bb      	str	r3, [r7, #24]
		choff = c->ch1;
 801310c:	68bb      	ldr	r3, [r7, #8]
 801310e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013110:	61fb      	str	r3, [r7, #28]
 8013112:	e005      	b.n	8013120 <canton_set_pwm+0x130>
	} else {
		chon = c->ch1;
 8013114:	68bb      	ldr	r3, [r7, #8]
 8013116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013118:	61bb      	str	r3, [r7, #24]
		choff = c->ch0;
 801311a:	68bb      	ldr	r3, [r7, #8]
 801311c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801311e:	61fb      	str	r3, [r7, #28]
	}
	if (!USE_PWM_STOP) {
		switch (choff) {
 8013120:	69fb      	ldr	r3, [r7, #28]
 8013122:	2b0c      	cmp	r3, #12
 8013124:	d848      	bhi.n	80131b8 <canton_set_pwm+0x1c8>
 8013126:	a201      	add	r2, pc, #4	; (adr r2, 801312c <canton_set_pwm+0x13c>)
 8013128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801312c:	08013161 	.word	0x08013161
 8013130:	080131b9 	.word	0x080131b9
 8013134:	080131b9 	.word	0x080131b9
 8013138:	080131b9 	.word	0x080131b9
 801313c:	08013177 	.word	0x08013177
 8013140:	080131b9 	.word	0x080131b9
 8013144:	080131b9 	.word	0x080131b9
 8013148:	080131b9 	.word	0x080131b9
 801314c:	0801318d 	.word	0x0801318d
 8013150:	080131b9 	.word	0x080131b9
 8013154:	080131b9 	.word	0x080131b9
 8013158:	080131b9 	.word	0x080131b9
 801315c:	080131a3 	.word	0x080131a3
		case TIM_CHANNEL_1:
			itm_debug1(DBG_LOWCTRL|DBG_TIM, "CH1/CCR1", 0);
 8013160:	2200      	movs	r2, #0
 8013162:	4949      	ldr	r1, [pc, #292]	; (8013288 <canton_set_pwm+0x298>)
 8013164:	f240 1001 	movw	r0, #257	; 0x101
 8013168:	f7ff fd5e 	bl	8012c28 <itm_debug1>
			pwm_timer->Instance->CCR1 = 0;
 801316c:	693b      	ldr	r3, [r7, #16]
 801316e:	681b      	ldr	r3, [r3, #0]
 8013170:	2200      	movs	r2, #0
 8013172:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8013174:	e026      	b.n	80131c4 <canton_set_pwm+0x1d4>
		case TIM_CHANNEL_2:
			itm_debug1(DBG_LOWCTRL|DBG_TIM, "CH2/CCR1", 0);
 8013176:	2200      	movs	r2, #0
 8013178:	4944      	ldr	r1, [pc, #272]	; (801328c <canton_set_pwm+0x29c>)
 801317a:	f240 1001 	movw	r0, #257	; 0x101
 801317e:	f7ff fd53 	bl	8012c28 <itm_debug1>
			pwm_timer->Instance->CCR2 = 0;
 8013182:	693b      	ldr	r3, [r7, #16]
 8013184:	681b      	ldr	r3, [r3, #0]
 8013186:	2200      	movs	r2, #0
 8013188:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 801318a:	e01b      	b.n	80131c4 <canton_set_pwm+0x1d4>
		case TIM_CHANNEL_3:
			itm_debug1(DBG_LOWCTRL|DBG_TIM, "CH3/CCR1", 0);
 801318c:	2200      	movs	r2, #0
 801318e:	4940      	ldr	r1, [pc, #256]	; (8013290 <canton_set_pwm+0x2a0>)
 8013190:	f240 1001 	movw	r0, #257	; 0x101
 8013194:	f7ff fd48 	bl	8012c28 <itm_debug1>
			pwm_timer->Instance->CCR3 = 0;
 8013198:	693b      	ldr	r3, [r7, #16]
 801319a:	681b      	ldr	r3, [r3, #0]
 801319c:	2200      	movs	r2, #0
 801319e:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 80131a0:	e010      	b.n	80131c4 <canton_set_pwm+0x1d4>
		case TIM_CHANNEL_4:
			itm_debug1(DBG_LOWCTRL|DBG_TIM, "CH4/CCR1", 0);
 80131a2:	2200      	movs	r2, #0
 80131a4:	493b      	ldr	r1, [pc, #236]	; (8013294 <canton_set_pwm+0x2a4>)
 80131a6:	f240 1001 	movw	r0, #257	; 0x101
 80131aa:	f7ff fd3d 	bl	8012c28 <itm_debug1>
			pwm_timer->Instance->CCR4 = 0;
 80131ae:	693b      	ldr	r3, [r7, #16]
 80131b0:	681b      	ldr	r3, [r3, #0]
 80131b2:	2200      	movs	r2, #0
 80131b4:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 80131b6:	e005      	b.n	80131c4 <canton_set_pwm+0x1d4>
		default:
			canton_error(ERR_BAD_PARAM_TIM, "bad timer channel");
 80131b8:	4937      	ldr	r1, [pc, #220]	; (8013298 <canton_set_pwm+0x2a8>)
 80131ba:	f06f 0002 	mvn.w	r0, #2
 80131be:	f7ff fd85 	bl	8012ccc <canton_error>
			break;
 80131c2:	bf00      	nop
		}
	}
	switch (chon) {
 80131c4:	69bb      	ldr	r3, [r7, #24]
 80131c6:	2b0c      	cmp	r3, #12
 80131c8:	d848      	bhi.n	801325c <canton_set_pwm+0x26c>
 80131ca:	a201      	add	r2, pc, #4	; (adr r2, 80131d0 <canton_set_pwm+0x1e0>)
 80131cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131d0:	08013205 	.word	0x08013205
 80131d4:	0801325d 	.word	0x0801325d
 80131d8:	0801325d 	.word	0x0801325d
 80131dc:	0801325d 	.word	0x0801325d
 80131e0:	0801321b 	.word	0x0801321b
 80131e4:	0801325d 	.word	0x0801325d
 80131e8:	0801325d 	.word	0x0801325d
 80131ec:	0801325d 	.word	0x0801325d
 80131f0:	08013231 	.word	0x08013231
 80131f4:	0801325d 	.word	0x0801325d
 80131f8:	0801325d 	.word	0x0801325d
 80131fc:	0801325d 	.word	0x0801325d
 8013200:	08013247 	.word	0x08013247
	case TIM_CHANNEL_1:
		itm_debug1(DBG_LOWCTRL|DBG_TIM, "CH1/CCR1", t);
 8013204:	697a      	ldr	r2, [r7, #20]
 8013206:	4920      	ldr	r1, [pc, #128]	; (8013288 <canton_set_pwm+0x298>)
 8013208:	f240 1001 	movw	r0, #257	; 0x101
 801320c:	f7ff fd0c 	bl	8012c28 <itm_debug1>
		pwm_timer->Instance->CCR1 = t;
 8013210:	693b      	ldr	r3, [r7, #16]
 8013212:	681b      	ldr	r3, [r3, #0]
 8013214:	697a      	ldr	r2, [r7, #20]
 8013216:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8013218:	e026      	b.n	8013268 <canton_set_pwm+0x278>
	case TIM_CHANNEL_2:
		itm_debug1(DBG_LOWCTRL|DBG_TIM, "CH2/CCR1", t);
 801321a:	697a      	ldr	r2, [r7, #20]
 801321c:	491b      	ldr	r1, [pc, #108]	; (801328c <canton_set_pwm+0x29c>)
 801321e:	f240 1001 	movw	r0, #257	; 0x101
 8013222:	f7ff fd01 	bl	8012c28 <itm_debug1>
		pwm_timer->Instance->CCR2 = t;
 8013226:	693b      	ldr	r3, [r7, #16]
 8013228:	681b      	ldr	r3, [r3, #0]
 801322a:	697a      	ldr	r2, [r7, #20]
 801322c:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 801322e:	e01b      	b.n	8013268 <canton_set_pwm+0x278>
	case TIM_CHANNEL_3:
		itm_debug1(DBG_LOWCTRL|DBG_TIM, "CH3/CCR1", t);
 8013230:	697a      	ldr	r2, [r7, #20]
 8013232:	4917      	ldr	r1, [pc, #92]	; (8013290 <canton_set_pwm+0x2a0>)
 8013234:	f240 1001 	movw	r0, #257	; 0x101
 8013238:	f7ff fcf6 	bl	8012c28 <itm_debug1>
		pwm_timer->Instance->CCR3 = t;
 801323c:	693b      	ldr	r3, [r7, #16]
 801323e:	681b      	ldr	r3, [r3, #0]
 8013240:	697a      	ldr	r2, [r7, #20]
 8013242:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8013244:	e010      	b.n	8013268 <canton_set_pwm+0x278>
	case TIM_CHANNEL_4:
		itm_debug1(DBG_LOWCTRL|DBG_TIM, "CH4/CCR1", t);
 8013246:	697a      	ldr	r2, [r7, #20]
 8013248:	4912      	ldr	r1, [pc, #72]	; (8013294 <canton_set_pwm+0x2a4>)
 801324a:	f240 1001 	movw	r0, #257	; 0x101
 801324e:	f7ff fceb 	bl	8012c28 <itm_debug1>
		pwm_timer->Instance->CCR4 = t;
 8013252:	693b      	ldr	r3, [r7, #16]
 8013254:	681b      	ldr	r3, [r3, #0]
 8013256:	697a      	ldr	r2, [r7, #20]
 8013258:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 801325a:	e005      	b.n	8013268 <canton_set_pwm+0x278>
	default:
		canton_error(ERR_BAD_PARAM_TIM, "bad timer channel");
 801325c:	490e      	ldr	r1, [pc, #56]	; (8013298 <canton_set_pwm+0x2a8>)
 801325e:	f06f 0002 	mvn.w	r0, #2
 8013262:	f7ff fd33 	bl	8012ccc <canton_error>
		break;
 8013266:	bf00      	nop
	}

}
 8013268:	3720      	adds	r7, #32
 801326a:	46bd      	mov	sp, r7
 801326c:	bd80      	pop	{r7, pc}
 801326e:	bf00      	nop
 8013270:	0801719c 	.word	0x0801719c
 8013274:	080171a8 	.word	0x080171a8
 8013278:	20005130 	.word	0x20005130
 801327c:	080171b0 	.word	0x080171b0
 8013280:	80000100 	.word	0x80000100
 8013284:	080171b8 	.word	0x080171b8
 8013288:	080171c0 	.word	0x080171c0
 801328c:	080171cc 	.word	0x080171cc
 8013290:	080171d8 	.word	0x080171d8
 8013294:	080171e4 	.word	0x080171e4
 8013298:	080171f0 	.word	0x080171f0

0801329c <canton_set_volt>:
void canton_set_volt(int cidx, const canton_config_t *c, canton_vars_t *v, int voltidx)
{
 801329c:	b580      	push	{r7, lr}
 801329e:	b084      	sub	sp, #16
 80132a0:	af00      	add	r7, sp, #0
 80132a2:	60f8      	str	r0, [r7, #12]
 80132a4:	60b9      	str	r1, [r7, #8]
 80132a6:	607a      	str	r2, [r7, #4]
 80132a8:	603b      	str	r3, [r7, #0]
	itm_debug2(DBG_LOWCTRL, "c/set_volt", cidx, voltidx);
 80132aa:	683b      	ldr	r3, [r7, #0]
 80132ac:	68fa      	ldr	r2, [r7, #12]
 80132ae:	491e      	ldr	r1, [pc, #120]	; (8013328 <canton_set_volt+0x8c>)
 80132b0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80132b4:	f7ff fcd2 	bl	8012c5c <itm_debug2>
	v->cur_voltidx = voltidx;
 80132b8:	683b      	ldr	r3, [r7, #0]
 80132ba:	b2da      	uxtb	r2, r3
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	705a      	strb	r2, [r3, #1]
    v->selected_centivolt =  (c->volts_cv[v->cur_voltidx]);
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	785b      	ldrb	r3, [r3, #1]
 80132c4:	461a      	mov	r2, r3
 80132c6:	68bb      	ldr	r3, [r7, #8]
 80132c8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80132cc:	461a      	mov	r2, r3
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	605a      	str	r2, [r3, #4]
    if ((0)) debug_info('C', 0, "SET VLT ", voltidx,  v->selected_centivolt,0);
    if ((0)) debug_info('C', 0, "VLT BIT ", (voltidx & 0x03) ? 1 : 0,
    				(voltidx & 0x02) ? 1 : 0,
    				(voltidx & 0x01) ? 1 : 0);

	HAL_GPIO_WritePin(c->volt_port_b0, c->volt_b0, (voltidx & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80132d2:	68bb      	ldr	r3, [r7, #8]
 80132d4:	6918      	ldr	r0, [r3, #16]
 80132d6:	68bb      	ldr	r3, [r7, #8]
 80132d8:	8b99      	ldrh	r1, [r3, #28]
 80132da:	683b      	ldr	r3, [r7, #0]
 80132dc:	b2db      	uxtb	r3, r3
 80132de:	f003 0301 	and.w	r3, r3, #1
 80132e2:	b2db      	uxtb	r3, r3
 80132e4:	461a      	mov	r2, r3
 80132e6:	f7f0 f8a9 	bl	800343c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(c->volt_port_b1, c->volt_b1, (voltidx & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80132ea:	68bb      	ldr	r3, [r7, #8]
 80132ec:	6958      	ldr	r0, [r3, #20]
 80132ee:	68bb      	ldr	r3, [r7, #8]
 80132f0:	8bd9      	ldrh	r1, [r3, #30]
 80132f2:	683b      	ldr	r3, [r7, #0]
 80132f4:	105b      	asrs	r3, r3, #1
 80132f6:	b2db      	uxtb	r3, r3
 80132f8:	f003 0301 	and.w	r3, r3, #1
 80132fc:	b2db      	uxtb	r3, r3
 80132fe:	461a      	mov	r2, r3
 8013300:	f7f0 f89c 	bl	800343c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(c->volt_port_b2, c->volt_b2, (voltidx & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8013304:	68bb      	ldr	r3, [r7, #8]
 8013306:	6998      	ldr	r0, [r3, #24]
 8013308:	68bb      	ldr	r3, [r7, #8]
 801330a:	8c19      	ldrh	r1, [r3, #32]
 801330c:	683b      	ldr	r3, [r7, #0]
 801330e:	109b      	asrs	r3, r3, #2
 8013310:	b2db      	uxtb	r3, r3
 8013312:	f003 0301 	and.w	r3, r3, #1
 8013316:	b2db      	uxtb	r3, r3
 8013318:	461a      	mov	r2, r3
 801331a:	f7f0 f88f 	bl	800343c <HAL_GPIO_WritePin>
	if (voltidx & 0x04) s |= VOLT_0_SEL2_Pin; else r |=  c->volt_b2;
	if (voltidx & 0x08) s |= VOLT_0_SEL3_Pin; else r |=  c->volt_b3;
	HAL_GPIO_WritePin(c->volt_port, s, GPIO_PIN_SET);
	HAL_GPIO_WritePin(c->volt_port, r, GPIO_PIN_RESET);
#endif
}
 801331e:	bf00      	nop
 8013320:	3710      	adds	r7, #16
 8013322:	46bd      	mov	sp, r7
 8013324:	bd80      	pop	{r7, pc}
 8013326:	bf00      	nop
 8013328:	08017204 	.word	0x08017204

0801332c <volt_index>:
int volt_index(uint16_t mili_power,
		const canton_config_t *c1, //canton_vars_t *v1,
		const canton_config_t *c2, //canton_vars_t *v2,
		int *pvi1, int *pvi2,
		train_volt_policy_t pol)
{
 801332c:	b580      	push	{r7, lr}
 801332e:	b08a      	sub	sp, #40	; 0x28
 8013330:	af00      	add	r7, sp, #0
 8013332:	60b9      	str	r1, [r7, #8]
 8013334:	607a      	str	r2, [r7, #4]
 8013336:	603b      	str	r3, [r7, #0]
 8013338:	4603      	mov	r3, r0
 801333a:	81fb      	strh	r3, [r7, #14]
	int duty=0;
 801333c:	2300      	movs	r3, #0
 801333e:	627b      	str	r3, [r7, #36]	; 0x24
	*pvi1 = MAX_PVI;
 8013340:	683b      	ldr	r3, [r7, #0]
 8013342:	2207      	movs	r2, #7
 8013344:	601a      	str	r2, [r3, #0]
	*pvi2 = MAX_PVI;
 8013346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013348:	2207      	movs	r2, #7
 801334a:	601a      	str	r2, [r3, #0]

	if (mili_power <0)    return canton_error_rc(0, ERR_BAD_PARAM_MPOW, "negative milipower");
	if (mili_power >1000) return canton_error_rc(0, ERR_BAD_PARAM_MPOW, "milipower should be 0-999");
 801334c:	89fb      	ldrh	r3, [r7, #14]
 801334e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8013352:	d907      	bls.n	8013364 <volt_index+0x38>
 8013354:	4a55      	ldr	r2, [pc, #340]	; (80134ac <volt_index+0x180>)
 8013356:	f06f 0103 	mvn.w	r1, #3
 801335a:	2000      	movs	r0, #0
 801335c:	f7ff fcc5 	bl	8012cea <canton_error_rc>
 8013360:	4603      	mov	r3, r0
 8013362:	e09e      	b.n	80134a2 <volt_index+0x176>
	switch (pol) {
 8013364:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8013368:	2b01      	cmp	r3, #1
 801336a:	d00d      	beq.n	8013388 <volt_index+0x5c>
 801336c:	2b02      	cmp	r3, #2
 801336e:	d053      	beq.n	8013418 <volt_index+0xec>
 8013370:	2b00      	cmp	r3, #0
 8013372:	d017      	beq.n	80133a4 <volt_index+0x78>
	default :
        duty = 0;
 8013374:	2300      	movs	r3, #0
 8013376:	627b      	str	r3, [r7, #36]	; 0x24
		return canton_error_rc(0, ERR_BAD_PARAM_VPOL, "bad volt policy");
 8013378:	4a4d      	ldr	r2, [pc, #308]	; (80134b0 <volt_index+0x184>)
 801337a:	f06f 0104 	mvn.w	r1, #4
 801337e:	2000      	movs	r0, #0
 8013380:	f7ff fcb3 	bl	8012cea <canton_error_rc>
 8013384:	4603      	mov	r3, r0
 8013386:	e08c      	b.n	80134a2 <volt_index+0x176>
		break;
	case vpolicy_pure_pwm:
		*pvi1 = 0;
 8013388:	683b      	ldr	r3, [r7, #0]
 801338a:	2200      	movs	r2, #0
 801338c:	601a      	str	r2, [r3, #0]
		*pvi2 = 0;
 801338e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013390:	2200      	movs	r2, #0
 8013392:	601a      	str	r2, [r3, #0]
		duty = mili_power / 10;
 8013394:	89fb      	ldrh	r3, [r7, #14]
 8013396:	4a47      	ldr	r2, [pc, #284]	; (80134b4 <volt_index+0x188>)
 8013398:	fba2 2303 	umull	r2, r3, r2, r3
 801339c:	08db      	lsrs	r3, r3, #3
 801339e:	b29b      	uxth	r3, r3
 80133a0:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 80133a2:	e078      	b.n	8013496 <volt_index+0x16a>
    case vpolicy_normal:
            // fall back to full volt +  pwm
            *pvi1 = *pvi2 = 0;
 80133a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133a6:	2200      	movs	r2, #0
 80133a8:	601a      	str	r2, [r3, #0]
 80133aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133ac:	681a      	ldr	r2, [r3, #0]
 80133ae:	683b      	ldr	r3, [r7, #0]
 80133b0:	601a      	str	r2, [r3, #0]
            duty = mili_power / 10;
 80133b2:	89fb      	ldrh	r3, [r7, #14]
 80133b4:	4a3f      	ldr	r2, [pc, #252]	; (80134b4 <volt_index+0x188>)
 80133b6:	fba2 2303 	umull	r2, r3, r2, r3
 80133ba:	08db      	lsrs	r3, r3, #3
 80133bc:	b29b      	uxth	r3, r3
 80133be:	627b      	str	r3, [r7, #36]	; 0x24
            for (int i=MAX_PVI; i>=0; i--) {
 80133c0:	2307      	movs	r3, #7
 80133c2:	623b      	str	r3, [r7, #32]
 80133c4:	e024      	b.n	8013410 <volt_index+0xe4>
                if (!c1->volts_cv[i]) continue;
 80133c6:	68bb      	ldr	r3, [r7, #8]
 80133c8:	6a3a      	ldr	r2, [r7, #32]
 80133ca:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d018      	beq.n	8013404 <volt_index+0xd8>
                // c1->volts in 0.01V unit
                int d = 100*mili_power / c1->volts_cv[i];
 80133d2:	89fb      	ldrh	r3, [r7, #14]
 80133d4:	2264      	movs	r2, #100	; 0x64
 80133d6:	fb02 f303 	mul.w	r3, r2, r3
 80133da:	68ba      	ldr	r2, [r7, #8]
 80133dc:	6a39      	ldr	r1, [r7, #32]
 80133de:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80133e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80133e6:	613b      	str	r3, [r7, #16]
                if (d>MAX_PWM) {
 80133e8:	693b      	ldr	r3, [r7, #16]
 80133ea:	2b5a      	cmp	r3, #90	; 0x5a
 80133ec:	dc0c      	bgt.n	8013408 <volt_index+0xdc>
                    continue;
                }
                // XXX for now we assume all canton have same board with same voltage level
                *pvi1 = *pvi2 = i;
 80133ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133f0:	6a3a      	ldr	r2, [r7, #32]
 80133f2:	601a      	str	r2, [r3, #0]
 80133f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133f6:	681a      	ldr	r2, [r3, #0]
 80133f8:	683b      	ldr	r3, [r7, #0]
 80133fa:	601a      	str	r2, [r3, #0]
                duty = d;
 80133fc:	693b      	ldr	r3, [r7, #16]
 80133fe:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8013400:	bf00      	nop
            }
		break;
 8013402:	e048      	b.n	8013496 <volt_index+0x16a>
                if (!c1->volts_cv[i]) continue;
 8013404:	bf00      	nop
 8013406:	e000      	b.n	801340a <volt_index+0xde>
                    continue;
 8013408:	bf00      	nop
            for (int i=MAX_PVI; i>=0; i--) {
 801340a:	6a3b      	ldr	r3, [r7, #32]
 801340c:	3b01      	subs	r3, #1
 801340e:	623b      	str	r3, [r7, #32]
 8013410:	6a3b      	ldr	r3, [r7, #32]
 8013412:	2b00      	cmp	r3, #0
 8013414:	dad7      	bge.n	80133c6 <volt_index+0x9a>
		break;
 8013416:	e03e      	b.n	8013496 <volt_index+0x16a>
			break;
    	}
    	break;
#endif
	case vpolicy_pure_volt:
		duty = MAX_PWM;
 8013418:	235a      	movs	r3, #90	; 0x5a
 801341a:	627b      	str	r3, [r7, #36]	; 0x24
        int s = 0;
 801341c:	2300      	movs	r3, #0
 801341e:	61fb      	str	r3, [r7, #28]
		for (int i=MAX_PVI; i>=0; i--) {
 8013420:	2307      	movs	r3, #7
 8013422:	61bb      	str	r3, [r7, #24]
 8013424:	e031      	b.n	801348a <volt_index+0x15e>
			if (!c1->volts_cv[i]) continue;
 8013426:	68bb      	ldr	r3, [r7, #8]
 8013428:	69ba      	ldr	r2, [r7, #24]
 801342a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801342e:	2b00      	cmp	r3, #0
 8013430:	d027      	beq.n	8013482 <volt_index+0x156>
			// c1->volts in 0.01V unit. 10V = 1000
			int p = c1->volts_cv[i]*MAX_PWM/100;  // 0.01V * % , ex : 345*90
 8013432:	68bb      	ldr	r3, [r7, #8]
 8013434:	69ba      	ldr	r2, [r7, #24]
 8013436:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801343a:	461a      	mov	r2, r3
 801343c:	235a      	movs	r3, #90	; 0x5a
 801343e:	fb03 f302 	mul.w	r3, r3, r2
 8013442:	4a1d      	ldr	r2, [pc, #116]	; (80134b8 <volt_index+0x18c>)
 8013444:	fb82 1203 	smull	r1, r2, r2, r3
 8013448:	1152      	asrs	r2, r2, #5
 801344a:	17db      	asrs	r3, r3, #31
 801344c:	1ad3      	subs	r3, r2, r3
 801344e:	617b      	str	r3, [r7, #20]
			if (p <= mili_power) {
 8013450:	89fb      	ldrh	r3, [r7, #14]
 8013452:	697a      	ldr	r2, [r7, #20]
 8013454:	429a      	cmp	r2, r3
 8013456:	dc08      	bgt.n	801346a <volt_index+0x13e>
                s = 1;
 8013458:	2301      	movs	r3, #1
 801345a:	61fb      	str	r3, [r7, #28]
				*pvi1 = i;
 801345c:	683b      	ldr	r3, [r7, #0]
 801345e:	69ba      	ldr	r2, [r7, #24]
 8013460:	601a      	str	r2, [r3, #0]
				*pvi2 = i;
 8013462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013464:	69ba      	ldr	r2, [r7, #24]
 8013466:	601a      	str	r2, [r3, #0]
 8013468:	e00c      	b.n	8013484 <volt_index+0x158>
			} else {
                if (!s) {
 801346a:	69fb      	ldr	r3, [r7, #28]
 801346c:	2b00      	cmp	r3, #0
 801346e:	d110      	bne.n	8013492 <volt_index+0x166>
                    // lower than minimal power
                    *pvi1 = i;
 8013470:	683b      	ldr	r3, [r7, #0]
 8013472:	69ba      	ldr	r2, [r7, #24]
 8013474:	601a      	str	r2, [r3, #0]
                    *pvi2 = i;
 8013476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013478:	69ba      	ldr	r2, [r7, #24]
 801347a:	601a      	str	r2, [r3, #0]
                    duty = 0;
 801347c:	2300      	movs	r3, #0
 801347e:	627b      	str	r3, [r7, #36]	; 0x24
                }
                // ok
				break;
 8013480:	e007      	b.n	8013492 <volt_index+0x166>
			if (!c1->volts_cv[i]) continue;
 8013482:	bf00      	nop
		for (int i=MAX_PVI; i>=0; i--) {
 8013484:	69bb      	ldr	r3, [r7, #24]
 8013486:	3b01      	subs	r3, #1
 8013488:	61bb      	str	r3, [r7, #24]
 801348a:	69bb      	ldr	r3, [r7, #24]
 801348c:	2b00      	cmp	r3, #0
 801348e:	daca      	bge.n	8013426 <volt_index+0xfa>
			}
		}
		break;
 8013490:	e000      	b.n	8013494 <volt_index+0x168>
				break;
 8013492:	bf00      	nop
		break;
 8013494:	bf00      	nop
	}
    if (duty>MAX_PWM) {
 8013496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013498:	2b5a      	cmp	r3, #90	; 0x5a
 801349a:	dd01      	ble.n	80134a0 <volt_index+0x174>
        duty = MAX_PWM;
 801349c:	235a      	movs	r3, #90	; 0x5a
 801349e:	627b      	str	r3, [r7, #36]	; 0x24
        //canton_error(ERR_BAD_PARAM_MPOW, "test msg");
    }
	return duty;
 80134a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80134a2:	4618      	mov	r0, r3
 80134a4:	3728      	adds	r7, #40	; 0x28
 80134a6:	46bd      	mov	sp, r7
 80134a8:	bd80      	pop	{r7, pc}
 80134aa:	bf00      	nop
 80134ac:	08017210 	.word	0x08017210
 80134b0:	0801722c 	.word	0x0801722c
 80134b4:	cccccccd 	.word	0xcccccccd
 80134b8:	51eb851f 	.word	0x51eb851f

080134bc <itm_debug1>:
{
 80134bc:	b580      	push	{r7, lr}
 80134be:	b086      	sub	sp, #24
 80134c0:	af02      	add	r7, sp, #8
 80134c2:	60f8      	str	r0, [r7, #12]
 80134c4:	60b9      	str	r1, [r7, #8]
 80134c6:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 80134c8:	4b08      	ldr	r3, [pc, #32]	; (80134ec <itm_debug1+0x30>)
 80134ca:	681a      	ldr	r2, [r3, #0]
 80134cc:	68fb      	ldr	r3, [r7, #12]
 80134ce:	4013      	ands	r3, r2
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d007      	beq.n	80134e4 <itm_debug1+0x28>
 80134d4:	2301      	movs	r3, #1
 80134d6:	9300      	str	r3, [sp, #0]
 80134d8:	2300      	movs	r3, #0
 80134da:	2200      	movs	r2, #0
 80134dc:	6879      	ldr	r1, [r7, #4]
 80134de:	68b8      	ldr	r0, [r7, #8]
 80134e0:	f003 f9f6 	bl	80168d0 <_itm_debug3>
}
 80134e4:	bf00      	nop
 80134e6:	3710      	adds	r7, #16
 80134e8:	46bd      	mov	sp, r7
 80134ea:	bd80      	pop	{r7, pc}
 80134ec:	2000047c 	.word	0x2000047c

080134f0 <itm_debug2>:
{
 80134f0:	b580      	push	{r7, lr}
 80134f2:	b086      	sub	sp, #24
 80134f4:	af02      	add	r7, sp, #8
 80134f6:	60f8      	str	r0, [r7, #12]
 80134f8:	60b9      	str	r1, [r7, #8]
 80134fa:	607a      	str	r2, [r7, #4]
 80134fc:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, 0, 2);
 80134fe:	4b09      	ldr	r3, [pc, #36]	; (8013524 <itm_debug2+0x34>)
 8013500:	681a      	ldr	r2, [r3, #0]
 8013502:	68fb      	ldr	r3, [r7, #12]
 8013504:	4013      	ands	r3, r2
 8013506:	2b00      	cmp	r3, #0
 8013508:	d007      	beq.n	801351a <itm_debug2+0x2a>
 801350a:	2302      	movs	r3, #2
 801350c:	9300      	str	r3, [sp, #0]
 801350e:	2300      	movs	r3, #0
 8013510:	683a      	ldr	r2, [r7, #0]
 8013512:	6879      	ldr	r1, [r7, #4]
 8013514:	68b8      	ldr	r0, [r7, #8]
 8013516:	f003 f9db 	bl	80168d0 <_itm_debug3>
}
 801351a:	bf00      	nop
 801351c:	3710      	adds	r7, #16
 801351e:	46bd      	mov	sp, r7
 8013520:	bd80      	pop	{r7, pc}
 8013522:	bf00      	nop
 8013524:	2000047c 	.word	0x2000047c

08013528 <runtime_error>:
	trainctl_error('G', code, msg);
	return NULL;
}

static inline void *runtime_error(int code, const char *msg)
{
 8013528:	b580      	push	{r7, lr}
 801352a:	b082      	sub	sp, #8
 801352c:	af00      	add	r7, sp, #0
 801352e:	6078      	str	r0, [r7, #4]
 8013530:	6039      	str	r1, [r7, #0]
	itm_debug1(DBG_CONFIG, msg, code);
 8013532:	687a      	ldr	r2, [r7, #4]
 8013534:	6839      	ldr	r1, [r7, #0]
 8013536:	2080      	movs	r0, #128	; 0x80
 8013538:	f7ff ffc0 	bl	80134bc <itm_debug1>
	trainctl_error('G', code, msg);
 801353c:	683a      	ldr	r2, [r7, #0]
 801353e:	6879      	ldr	r1, [r7, #4]
 8013540:	2047      	movs	r0, #71	; 0x47
 8013542:	f000 fcd7 	bl	8013ef4 <trainctl_error>
	return NULL;
 8013546:	2300      	movs	r3, #0
}
 8013548:	4618      	mov	r0, r3
 801354a:	3708      	adds	r7, #8
 801354c:	46bd      	mov	sp, r7
 801354e:	bd80      	pop	{r7, pc}

08013550 <bemf_reset>:

static uint8_t bemf_to[NUM_LOCAL_CANTONS_SW] = {0xFF, 0xFF, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0xFF};
static void process_adc(volatile adc_buf_t *buf, int32_t ticks);

void bemf_reset(void)
{
 8013550:	b480      	push	{r7}
 8013552:	b083      	sub	sp, #12
 8013554:	af00      	add	r7, sp, #0
	for (int i=0; i<NUM_LOCAL_CANTONS_SW; i++) {
 8013556:	2300      	movs	r3, #0
 8013558:	607b      	str	r3, [r7, #4]
 801355a:	e007      	b.n	801356c <bemf_reset+0x1c>
		bemf_to[i]=0xFF;
 801355c:	4a08      	ldr	r2, [pc, #32]	; (8013580 <bemf_reset+0x30>)
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	4413      	add	r3, r2
 8013562:	22ff      	movs	r2, #255	; 0xff
 8013564:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<NUM_LOCAL_CANTONS_SW; i++) {
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	3301      	adds	r3, #1
 801356a:	607b      	str	r3, [r7, #4]
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	2b07      	cmp	r3, #7
 8013570:	ddf4      	ble.n	801355c <bemf_reset+0xc>
	}
}
 8013572:	bf00      	nop
 8013574:	370c      	adds	r7, #12
 8013576:	46bd      	mov	sp, r7
 8013578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801357c:	4770      	bx	lr
 801357e:	bf00      	nop
 8013580:	20000214 	.word	0x20000214

08013584 <bemf_msg>:

void bemf_msg(msg_64_t *m)
{
 8013584:	b480      	push	{r7}
 8013586:	b085      	sub	sp, #20
 8013588:	af00      	add	r7, sp, #0
 801358a:	6078      	str	r0, [r7, #4]
	if (!IS_CANTON(m->to)) {
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	781b      	ldrb	r3, [r3, #0]
 8013590:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8013594:	2b00      	cmp	r3, #0
 8013596:	d119      	bne.n	80135cc <bemf_msg+0x48>
		// error
		return;
	}
	int idx = m->to & 0x07;
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	781b      	ldrb	r3, [r3, #0]
 801359c:	f003 0307 	and.w	r3, r3, #7
 80135a0:	60fb      	str	r3, [r7, #12]
	switch(m->cmd) {
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	789b      	ldrb	r3, [r3, #2]
 80135a6:	2b40      	cmp	r3, #64	; 0x40
 80135a8:	d007      	beq.n	80135ba <bemf_msg+0x36>
 80135aa:	2b41      	cmp	r3, #65	; 0x41
 80135ac:	d10f      	bne.n	80135ce <bemf_msg+0x4a>
	case CMD_BEMF_OFF:
		bemf_to[idx] = 0xFF;
 80135ae:	4a0a      	ldr	r2, [pc, #40]	; (80135d8 <bemf_msg+0x54>)
 80135b0:	68fb      	ldr	r3, [r7, #12]
 80135b2:	4413      	add	r3, r2
 80135b4:	22ff      	movs	r2, #255	; 0xff
 80135b6:	701a      	strb	r2, [r3, #0]
		break;
 80135b8:	e009      	b.n	80135ce <bemf_msg+0x4a>
	case CMD_BEMF_ON:
		bemf_to[idx] = m->from;
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	7859      	ldrb	r1, [r3, #1]
 80135be:	4a06      	ldr	r2, [pc, #24]	; (80135d8 <bemf_msg+0x54>)
 80135c0:	68fb      	ldr	r3, [r7, #12]
 80135c2:	4413      	add	r3, r2
 80135c4:	460a      	mov	r2, r1
 80135c6:	701a      	strb	r2, [r3, #0]
		break;
 80135c8:	bf00      	nop
 80135ca:	e000      	b.n	80135ce <bemf_msg+0x4a>
		return;
 80135cc:	bf00      	nop

	}
}
 80135ce:	3714      	adds	r7, #20
 80135d0:	46bd      	mov	sp, r7
 80135d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135d6:	4770      	bx	lr
 80135d8:	20000214 	.word	0x20000214

080135dc <bemf_tick>:

void bemf_tick(uint32_t notif_flags, uint32_t tick, uint32_t dt)
{
 80135dc:	b580      	push	{r7, lr}
 80135de:	b084      	sub	sp, #16
 80135e0:	af00      	add	r7, sp, #0
 80135e2:	60f8      	str	r0, [r7, #12]
 80135e4:	60b9      	str	r1, [r7, #8]
 80135e6:	607a      	str	r2, [r7, #4]
	if (notif_flags & NOTIF_NEW_ADC_1) {
 80135e8:	68fb      	ldr	r3, [r7, #12]
 80135ea:	f003 0301 	and.w	r3, r3, #1
 80135ee:	2b00      	cmp	r3, #0
 80135f0:	d014      	beq.n	801361c <bemf_tick+0x40>
		if (notif_flags & NOTIF_NEW_ADC_2) {
 80135f2:	68fb      	ldr	r3, [r7, #12]
 80135f4:	f003 0302 	and.w	r3, r3, #2
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d00a      	beq.n	8013612 <bemf_tick+0x36>
			itm_debug1(DBG_ERR|DBG_LOWCTRL|DBG_TIM, "both", notif_flags);
 80135fc:	68fb      	ldr	r3, [r7, #12]
 80135fe:	461a      	mov	r2, r3
 8013600:	490d      	ldr	r1, [pc, #52]	; (8013638 <bemf_tick+0x5c>)
 8013602:	480e      	ldr	r0, [pc, #56]	; (801363c <bemf_tick+0x60>)
 8013604:	f7ff ff5a 	bl	80134bc <itm_debug1>
			runtime_error(ERR_DMA, "both NEW_ADC1 and NEW_ADC2");
 8013608:	490d      	ldr	r1, [pc, #52]	; (8013640 <bemf_tick+0x64>)
 801360a:	f06f 000b 	mvn.w	r0, #11
 801360e:	f7ff ff8b 	bl	8013528 <runtime_error>
		}
		process_adc(&train_adc_buf[0], dt);
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	4619      	mov	r1, r3
 8013616:	480b      	ldr	r0, [pc, #44]	; (8013644 <bemf_tick+0x68>)
 8013618:	f000 f832 	bl	8013680 <process_adc>
	}
	if (notif_flags & NOTIF_NEW_ADC_2) {
 801361c:	68fb      	ldr	r3, [r7, #12]
 801361e:	f003 0302 	and.w	r3, r3, #2
 8013622:	2b00      	cmp	r3, #0
 8013624:	d004      	beq.n	8013630 <bemf_tick+0x54>
		process_adc(&train_adc_buf[1], dt);
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	4619      	mov	r1, r3
 801362a:	4807      	ldr	r0, [pc, #28]	; (8013648 <bemf_tick+0x6c>)
 801362c:	f000 f828 	bl	8013680 <process_adc>
	}
}
 8013630:	bf00      	nop
 8013632:	3710      	adds	r7, #16
 8013634:	46bd      	mov	sp, r7
 8013636:	bd80      	pop	{r7, pc}
 8013638:	0801723c 	.word	0x0801723c
 801363c:	80000101 	.word	0x80000101
 8013640:	08017244 	.word	0x08017244
 8013644:	2000822c 	.word	0x2000822c
 8013648:	20008254 	.word	0x20008254

0801364c <bemf_convert_to_centivolt>:
	return ((m * 4545 * 33) / (4096*100));
}


static inline int32_t bemf_convert_to_centivolt(const canton_config_t *c, int32_t m)
{
 801364c:	b480      	push	{r7}
 801364e:	b083      	sub	sp, #12
 8013650:	af00      	add	r7, sp, #0
 8013652:	6078      	str	r0, [r7, #4]
 8013654:	6039      	str	r1, [r7, #0]
			m = 2200*m/2000;
		}
	}
#endif

	return ((m * 4545 * 33) / (4096*100));
 8013656:	683b      	ldr	r3, [r7, #0]
 8013658:	4a07      	ldr	r2, [pc, #28]	; (8013678 <bemf_convert_to_centivolt+0x2c>)
 801365a:	fb02 f303 	mul.w	r3, r2, r3
 801365e:	4a07      	ldr	r2, [pc, #28]	; (801367c <bemf_convert_to_centivolt+0x30>)
 8013660:	fb82 1203 	smull	r1, r2, r2, r3
 8013664:	1452      	asrs	r2, r2, #17
 8013666:	17db      	asrs	r3, r3, #31
 8013668:	1ad3      	subs	r3, r2, r3
}
 801366a:	4618      	mov	r0, r3
 801366c:	370c      	adds	r7, #12
 801366e:	46bd      	mov	sp, r7
 8013670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013674:	4770      	bx	lr
 8013676:	bf00      	nop
 8013678:	000249e1 	.word	0x000249e1
 801367c:	51eb851f 	.word	0x51eb851f

08013680 <process_adc>:

/// ---------------------------------------------------------------------------------------

static void process_adc(volatile adc_buf_t *buf, int32_t ticks)
{
 8013680:	b580      	push	{r7, lr}
 8013682:	b08c      	sub	sp, #48	; 0x30
 8013684:	af00      	add	r7, sp, #0
 8013686:	6078      	str	r0, [r7, #4]
 8013688:	6039      	str	r1, [r7, #0]
	for (int i=0; i<NUM_LOCAL_CANTONS_HW; i++) {
 801368a:	2300      	movs	r3, #0
 801368c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801368e:	e084      	b.n	801379a <process_adc+0x11a>
		// process BEMF
#ifndef USE_INA3221
	    canton_intensity(cconf, cvars, buf[i].intOff, buf[i].intOn);
#error ohla
#endif
		if (0xFF == bemf_to[i]) continue;
 8013690:	4a46      	ldr	r2, [pc, #280]	; (80137ac <process_adc+0x12c>)
 8013692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013694:	4413      	add	r3, r2
 8013696:	781b      	ldrb	r3, [r3, #0]
 8013698:	2bff      	cmp	r3, #255	; 0xff
 801369a:	d07a      	beq.n	8013792 <process_adc+0x112>

		const canton_config_t *c = get_canton_cnf(i);
 801369c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801369e:	f000 fd5d 	bl	801415c <get_canton_cnf>
 80136a2:	62b8      	str	r0, [r7, #40]	; 0x28
		int32_t voffa = bemf_convert_to_centivolt(c, buf[i].voffA);
		int32_t voffb = bemf_convert_to_centivolt(c, buf[i].voffB);
		int32_t vona = bemf_convert_to_centivolt(c, buf[i].vonA);
		int32_t vonb = bemf_convert_to_centivolt(c, buf[i].vonB);
		 */
		int32_t voffa = bemf_convert_to_centivolt(c, buf->off[i].vA);
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80136a8:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 80136ac:	b29b      	uxth	r3, r3
 80136ae:	4619      	mov	r1, r3
 80136b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80136b2:	f7ff ffcb 	bl	801364c <bemf_convert_to_centivolt>
 80136b6:	6278      	str	r0, [r7, #36]	; 0x24
		int32_t voffb = bemf_convert_to_centivolt(c, buf->off[i].vB);
 80136b8:	687a      	ldr	r2, [r7, #4]
 80136ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136bc:	009b      	lsls	r3, r3, #2
 80136be:	4413      	add	r3, r2
 80136c0:	885b      	ldrh	r3, [r3, #2]
 80136c2:	b29b      	uxth	r3, r3
 80136c4:	4619      	mov	r1, r3
 80136c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80136c8:	f7ff ffc0 	bl	801364c <bemf_convert_to_centivolt>
 80136cc:	6238      	str	r0, [r7, #32]
		int32_t vona =  bemf_convert_to_centivolt(c, buf->on[i].vA);
 80136ce:	687a      	ldr	r2, [r7, #4]
 80136d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136d2:	3304      	adds	r3, #4
 80136d4:	009b      	lsls	r3, r3, #2
 80136d6:	4413      	add	r3, r2
 80136d8:	889b      	ldrh	r3, [r3, #4]
 80136da:	b29b      	uxth	r3, r3
 80136dc:	4619      	mov	r1, r3
 80136de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80136e0:	f7ff ffb4 	bl	801364c <bemf_convert_to_centivolt>
 80136e4:	61f8      	str	r0, [r7, #28]
		int32_t vonb =  bemf_convert_to_centivolt(c, buf->on[i].vB);
 80136e6:	687a      	ldr	r2, [r7, #4]
 80136e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136ea:	3304      	adds	r3, #4
 80136ec:	009b      	lsls	r3, r3, #2
 80136ee:	4413      	add	r3, r2
 80136f0:	88db      	ldrh	r3, [r3, #6]
 80136f2:	b29b      	uxth	r3, r3
 80136f4:	4619      	mov	r1, r3
 80136f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80136f8:	f7ff ffa8 	bl	801364c <bemf_convert_to_centivolt>
 80136fc:	61b8      	str	r0, [r7, #24]

		int16_t voff = (int16_t)(voffb-voffa);
 80136fe:	6a3b      	ldr	r3, [r7, #32]
 8013700:	b29a      	uxth	r2, r3
 8013702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013704:	b29b      	uxth	r3, r3
 8013706:	1ad3      	subs	r3, r2, r3
 8013708:	b29b      	uxth	r3, r3
 801370a:	82fb      	strh	r3, [r7, #22]
		int16_t von  = (int16_t)(vonb-vona);
 801370c:	69bb      	ldr	r3, [r7, #24]
 801370e:	b29a      	uxth	r2, r3
 8013710:	69fb      	ldr	r3, [r7, #28]
 8013712:	b29b      	uxth	r3, r3
 8013714:	1ad3      	subs	r3, r2, r3
 8013716:	b29b      	uxth	r3, r3
 8013718:	82bb      	strh	r3, [r7, #20]
		if (i==0) {
 801371a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801371c:	2b00      	cmp	r3, #0
 801371e:	d116      	bne.n	801374e <process_adc+0xce>
			itm_debug2(DBG_PID|DBG_LOWCTRL, "C0", voff, von);
 8013720:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013724:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8013728:	4921      	ldr	r1, [pc, #132]	; (80137b0 <process_adc+0x130>)
 801372a:	f44f 7082 	mov.w	r0, #260	; 0x104
 801372e:	f7ff fedf 	bl	80134f0 <itm_debug2>
			itm_debug2(DBG_PID|DBG_LOWCTRL, "C0/Voff", voffa, voffb);
 8013732:	6a3b      	ldr	r3, [r7, #32]
 8013734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013736:	491f      	ldr	r1, [pc, #124]	; (80137b4 <process_adc+0x134>)
 8013738:	f44f 7082 	mov.w	r0, #260	; 0x104
 801373c:	f7ff fed8 	bl	80134f0 <itm_debug2>
			itm_debug2(DBG_PID|DBG_LOWCTRL, "C0/Von", vona, vonb);
 8013740:	69bb      	ldr	r3, [r7, #24]
 8013742:	69fa      	ldr	r2, [r7, #28]
 8013744:	491c      	ldr	r1, [pc, #112]	; (80137b8 <process_adc+0x138>)
 8013746:	f44f 7082 	mov.w	r0, #260	; 0x104
 801374a:	f7ff fed1 	bl	80134f0 <itm_debug2>


		}
		msg_64_t m;
		m.from = MA_CANTON(localBoardNum, i);
 801374e:	4b1b      	ldr	r3, [pc, #108]	; (80137bc <process_adc+0x13c>)
 8013750:	781b      	ldrb	r3, [r3, #0]
 8013752:	00db      	lsls	r3, r3, #3
 8013754:	b25b      	sxtb	r3, r3
 8013756:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801375a:	b25a      	sxtb	r2, r3
 801375c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801375e:	b25b      	sxtb	r3, r3
 8013760:	f003 0307 	and.w	r3, r3, #7
 8013764:	b25b      	sxtb	r3, r3
 8013766:	4313      	orrs	r3, r2
 8013768:	b25b      	sxtb	r3, r3
 801376a:	b2db      	uxtb	r3, r3
 801376c:	727b      	strb	r3, [r7, #9]
		m.to = bemf_to[i];
 801376e:	4a0f      	ldr	r2, [pc, #60]	; (80137ac <process_adc+0x12c>)
 8013770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013772:	4413      	add	r3, r2
 8013774:	781b      	ldrb	r3, [r3, #0]
 8013776:	723b      	strb	r3, [r7, #8]
		m.cmd = CMD_BEMF_NOTIF;
 8013778:	2303      	movs	r3, #3
 801377a:	72bb      	strb	r3, [r7, #10]
		m.v1 = voff;
 801377c:	8afb      	ldrh	r3, [r7, #22]
 801377e:	81bb      	strh	r3, [r7, #12]
		m.v2 = von;
 8013780:	8abb      	ldrh	r3, [r7, #20]
 8013782:	81fb      	strh	r3, [r7, #14]
		mqf_write(&from_canton, &m);
 8013784:	f107 0308 	add.w	r3, r7, #8
 8013788:	4619      	mov	r1, r3
 801378a:	480d      	ldr	r0, [pc, #52]	; (80137c0 <process_adc+0x140>)
 801378c:	f003 f98c 	bl	8016aa8 <mqf_write>
 8013790:	e000      	b.n	8013794 <process_adc+0x114>
		if (0xFF == bemf_to[i]) continue;
 8013792:	bf00      	nop
	for (int i=0; i<NUM_LOCAL_CANTONS_HW; i++) {
 8013794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013796:	3301      	adds	r3, #1
 8013798:	62fb      	str	r3, [r7, #44]	; 0x2c
 801379a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801379c:	2b04      	cmp	r3, #4
 801379e:	f77f af77 	ble.w	8013690 <process_adc+0x10>

	}
}
 80137a2:	bf00      	nop
 80137a4:	3730      	adds	r7, #48	; 0x30
 80137a6:	46bd      	mov	sp, r7
 80137a8:	bd80      	pop	{r7, pc}
 80137aa:	bf00      	nop
 80137ac:	20000214 	.word	0x20000214
 80137b0:	08017260 	.word	0x08017260
 80137b4:	08017264 	.word	0x08017264
 80137b8:	0801726c 	.word	0x0801726c
 80137bc:	20005279 	.word	0x20005279
 80137c0:	200003ec 	.word	0x200003ec

080137c4 <itm_debug1>:
{
 80137c4:	b580      	push	{r7, lr}
 80137c6:	b086      	sub	sp, #24
 80137c8:	af02      	add	r7, sp, #8
 80137ca:	60f8      	str	r0, [r7, #12]
 80137cc:	60b9      	str	r1, [r7, #8]
 80137ce:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 80137d0:	4b08      	ldr	r3, [pc, #32]	; (80137f4 <itm_debug1+0x30>)
 80137d2:	681a      	ldr	r2, [r3, #0]
 80137d4:	68fb      	ldr	r3, [r7, #12]
 80137d6:	4013      	ands	r3, r2
 80137d8:	2b00      	cmp	r3, #0
 80137da:	d007      	beq.n	80137ec <itm_debug1+0x28>
 80137dc:	2301      	movs	r3, #1
 80137de:	9300      	str	r3, [sp, #0]
 80137e0:	2300      	movs	r3, #0
 80137e2:	2200      	movs	r2, #0
 80137e4:	6879      	ldr	r1, [r7, #4]
 80137e6:	68b8      	ldr	r0, [r7, #8]
 80137e8:	f003 f872 	bl	80168d0 <_itm_debug3>
}
 80137ec:	bf00      	nop
 80137ee:	3710      	adds	r7, #16
 80137f0:	46bd      	mov	sp, r7
 80137f2:	bd80      	pop	{r7, pc}
 80137f4:	2000047c 	.word	0x2000047c

080137f8 <itm_debug2>:
{
 80137f8:	b580      	push	{r7, lr}
 80137fa:	b086      	sub	sp, #24
 80137fc:	af02      	add	r7, sp, #8
 80137fe:	60f8      	str	r0, [r7, #12]
 8013800:	60b9      	str	r1, [r7, #8]
 8013802:	607a      	str	r2, [r7, #4]
 8013804:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, 0, 2);
 8013806:	4b09      	ldr	r3, [pc, #36]	; (801382c <itm_debug2+0x34>)
 8013808:	681a      	ldr	r2, [r3, #0]
 801380a:	68fb      	ldr	r3, [r7, #12]
 801380c:	4013      	ands	r3, r2
 801380e:	2b00      	cmp	r3, #0
 8013810:	d007      	beq.n	8013822 <itm_debug2+0x2a>
 8013812:	2302      	movs	r3, #2
 8013814:	9300      	str	r3, [sp, #0]
 8013816:	2300      	movs	r3, #0
 8013818:	683a      	ldr	r2, [r7, #0]
 801381a:	6879      	ldr	r1, [r7, #4]
 801381c:	68b8      	ldr	r0, [r7, #8]
 801381e:	f003 f857 	bl	80168d0 <_itm_debug3>
}
 8013822:	bf00      	nop
 8013824:	3710      	adds	r7, #16
 8013826:	46bd      	mov	sp, r7
 8013828:	bd80      	pop	{r7, pc}
 801382a:	bf00      	nop
 801382c:	2000047c 	.word	0x2000047c

08013830 <itm_debug3>:
{
 8013830:	b580      	push	{r7, lr}
 8013832:	b086      	sub	sp, #24
 8013834:	af02      	add	r7, sp, #8
 8013836:	60f8      	str	r0, [r7, #12]
 8013838:	60b9      	str	r1, [r7, #8]
 801383a:	607a      	str	r2, [r7, #4]
 801383c:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, v3, 3);
 801383e:	4b09      	ldr	r3, [pc, #36]	; (8013864 <itm_debug3+0x34>)
 8013840:	681a      	ldr	r2, [r3, #0]
 8013842:	68fb      	ldr	r3, [r7, #12]
 8013844:	4013      	ands	r3, r2
 8013846:	2b00      	cmp	r3, #0
 8013848:	d007      	beq.n	801385a <itm_debug3+0x2a>
 801384a:	2303      	movs	r3, #3
 801384c:	9300      	str	r3, [sp, #0]
 801384e:	69bb      	ldr	r3, [r7, #24]
 8013850:	683a      	ldr	r2, [r7, #0]
 8013852:	6879      	ldr	r1, [r7, #4]
 8013854:	68b8      	ldr	r0, [r7, #8]
 8013856:	f003 f83b 	bl	80168d0 <_itm_debug3>
}
 801385a:	bf00      	nop
 801385c:	3710      	adds	r7, #16
 801385e:	46bd      	mov	sp, r7
 8013860:	bd80      	pop	{r7, pc}
 8013862:	bf00      	nop
 8013864:	2000047c 	.word	0x2000047c

08013868 <mqf_write_from_canton>:
#define CMD_TURNOUT_A		0x01
#define CMD_TURNOUT_B		0x02


LFMQUEUE_DEF_H(to_canton, msg_64_t)
LFMQUEUE_DEF_H(from_canton, msg_64_t)
 8013868:	b580      	push	{r7, lr}
 801386a:	b082      	sub	sp, #8
 801386c:	af00      	add	r7, sp, #0
 801386e:	6078      	str	r0, [r7, #4]
 8013870:	6879      	ldr	r1, [r7, #4]
 8013872:	4804      	ldr	r0, [pc, #16]	; (8013884 <mqf_write_from_canton+0x1c>)
 8013874:	f003 f918 	bl	8016aa8 <mqf_write>
 8013878:	4603      	mov	r3, r0
 801387a:	4618      	mov	r0, r3
 801387c:	3708      	adds	r7, #8
 801387e:	46bd      	mov	sp, r7
 8013880:	bd80      	pop	{r7, pc}
 8013882:	bf00      	nop
 8013884:	200003ec 	.word	0x200003ec

08013888 <presdect_init>:
#include "../../stm32dev/ina3221/ina3221.h"

static int init_done = 0;

static void presdect_init(void)
{
 8013888:	b580      	push	{r7, lr}
 801388a:	af00      	add	r7, sp, #0
	init_done = 1;
 801388c:	4b03      	ldr	r3, [pc, #12]	; (801389c <presdect_init+0x14>)
 801388e:	2201      	movs	r2, #1
 8013890:	601a      	str	r2, [r3, #0]
	ina3221_init(0);
 8013892:	2000      	movs	r0, #0
 8013894:	f7fd feae 	bl	80115f4 <ina3221_init>
}
 8013898:	bf00      	nop
 801389a:	bd80      	pop	{r7, pc}
 801389c:	20005194 	.word	0x20005194

080138a0 <presdect_tick>:

void presdect_tick(uint32_t notif_flags, uint32_t tick, uint32_t dt)
{
 80138a0:	b580      	push	{r7, lr}
 80138a2:	b08e      	sub	sp, #56	; 0x38
 80138a4:	af02      	add	r7, sp, #8
 80138a6:	60f8      	str	r0, [r7, #12]
 80138a8:	60b9      	str	r1, [r7, #8]
 80138aa:	607a      	str	r2, [r7, #4]
	extern int disable_ina3221;
	if (disable_ina3221) return;
 80138ac:	4b70      	ldr	r3, [pc, #448]	; (8013a70 <presdect_tick+0x1d0>)
 80138ae:	681b      	ldr	r3, [r3, #0]
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	f040 80d7 	bne.w	8013a64 <presdect_tick+0x1c4>
	if (!init_done) {
 80138b6:	4b6f      	ldr	r3, [pc, #444]	; (8013a74 <presdect_tick+0x1d4>)
 80138b8:	681b      	ldr	r3, [r3, #0]
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d101      	bne.n	80138c2 <presdect_tick+0x22>
		presdect_init();
 80138be:	f7ff ffe3 	bl	8013888 <presdect_init>
	static uint8_t fdone = 1;
	static uint8_t step = 0xFF;

	static uint8_t presence[INA3221_NUM_VALS] = {0};

	if (!fdone) {
 80138c2:	4b6d      	ldr	r3, [pc, #436]	; (8013a78 <presdect_tick+0x1d8>)
 80138c4:	781b      	ldrb	r3, [r3, #0]
 80138c6:	2b00      	cmp	r3, #0
 80138c8:	d107      	bne.n	80138da <presdect_tick+0x3a>
		itm_debug1(DBG_PRES|DBG_INA3221, "prd/ko", fdone);
 80138ca:	4b6b      	ldr	r3, [pc, #428]	; (8013a78 <presdect_tick+0x1d8>)
 80138cc:	781b      	ldrb	r3, [r3, #0]
 80138ce:	461a      	mov	r2, r3
 80138d0:	496a      	ldr	r1, [pc, #424]	; (8013a7c <presdect_tick+0x1dc>)
 80138d2:	2060      	movs	r0, #96	; 0x60
 80138d4:	f7ff ff76 	bl	80137c4 <itm_debug1>
		return;
 80138d8:	e0c7      	b.n	8013a6a <presdect_tick+0x1ca>
	}
	int16_t *values;
	int16_t *future;

	switch (step) {
 80138da:	4b69      	ldr	r3, [pc, #420]	; (8013a80 <presdect_tick+0x1e0>)
 80138dc:	781b      	ldrb	r3, [r3, #0]
 80138de:	2b00      	cmp	r3, #0
 80138e0:	d009      	beq.n	80138f6 <presdect_tick+0x56>
 80138e2:	2b01      	cmp	r3, #1
 80138e4:	d00f      	beq.n	8013906 <presdect_tick+0x66>
	default:
	case 0xFF:
		values = NULL;
 80138e6:	2300      	movs	r3, #0
 80138e8:	62fb      	str	r3, [r7, #44]	; 0x2c
		future = val1;
 80138ea:	4b66      	ldr	r3, [pc, #408]	; (8013a84 <presdect_tick+0x1e4>)
 80138ec:	62bb      	str	r3, [r7, #40]	; 0x28
		step = 0;
 80138ee:	4b64      	ldr	r3, [pc, #400]	; (8013a80 <presdect_tick+0x1e0>)
 80138f0:	2200      	movs	r2, #0
 80138f2:	701a      	strb	r2, [r3, #0]
		break;
 80138f4:	e00f      	b.n	8013916 <presdect_tick+0x76>
	case 0:
		values = val1;
 80138f6:	4b63      	ldr	r3, [pc, #396]	; (8013a84 <presdect_tick+0x1e4>)
 80138f8:	62fb      	str	r3, [r7, #44]	; 0x2c
		future = val2;
 80138fa:	4b63      	ldr	r3, [pc, #396]	; (8013a88 <presdect_tick+0x1e8>)
 80138fc:	62bb      	str	r3, [r7, #40]	; 0x28
		step = 1;
 80138fe:	4b60      	ldr	r3, [pc, #384]	; (8013a80 <presdect_tick+0x1e0>)
 8013900:	2201      	movs	r2, #1
 8013902:	701a      	strb	r2, [r3, #0]
		break;
 8013904:	e007      	b.n	8013916 <presdect_tick+0x76>
	case 1:
		values = val2;
 8013906:	4b60      	ldr	r3, [pc, #384]	; (8013a88 <presdect_tick+0x1e8>)
 8013908:	62fb      	str	r3, [r7, #44]	; 0x2c
		future = val1;
 801390a:	4b5e      	ldr	r3, [pc, #376]	; (8013a84 <presdect_tick+0x1e4>)
 801390c:	62bb      	str	r3, [r7, #40]	; 0x28
		step = 0;
 801390e:	4b5c      	ldr	r3, [pc, #368]	; (8013a80 <presdect_tick+0x1e0>)
 8013910:	2200      	movs	r2, #0
 8013912:	701a      	strb	r2, [r3, #0]
		break;
 8013914:	bf00      	nop
	}
    ina3221_start_read(future, &fdone);
 8013916:	4958      	ldr	r1, [pc, #352]	; (8013a78 <presdect_tick+0x1d8>)
 8013918:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801391a:	f7fd feb5 	bl	8011688 <ina3221_start_read>

    // process values
    if (!values) return;
 801391e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013920:	2b00      	cmp	r3, #0
 8013922:	f000 80a1 	beq.w	8013a68 <presdect_tick+0x1c8>

    if ((1)) {
    	itm_debug1(DBG_INA3221, "prs stp", step);
 8013926:	4b56      	ldr	r3, [pc, #344]	; (8013a80 <presdect_tick+0x1e0>)
 8013928:	781b      	ldrb	r3, [r3, #0]
 801392a:	461a      	mov	r2, r3
 801392c:	4957      	ldr	r1, [pc, #348]	; (8013a8c <presdect_tick+0x1ec>)
 801392e:	2020      	movs	r0, #32
 8013930:	f7ff ff48 	bl	80137c4 <itm_debug1>
    	itm_debug3(DBG_PRES|DBG_INA3221, "prs0", values[0], values[1], values[2]);
 8013934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013936:	f9b3 3000 	ldrsh.w	r3, [r3]
 801393a:	461a      	mov	r2, r3
 801393c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801393e:	3302      	adds	r3, #2
 8013940:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013944:	4619      	mov	r1, r3
 8013946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013948:	3304      	adds	r3, #4
 801394a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801394e:	9300      	str	r3, [sp, #0]
 8013950:	460b      	mov	r3, r1
 8013952:	494f      	ldr	r1, [pc, #316]	; (8013a90 <presdect_tick+0x1f0>)
 8013954:	2060      	movs	r0, #96	; 0x60
 8013956:	f7ff ff6b 	bl	8013830 <itm_debug3>
    	itm_debug3(DBG_PRES|DBG_INA3221, "prs1", values[3], values[4], values[5]);
 801395a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801395c:	3306      	adds	r3, #6
 801395e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013962:	461a      	mov	r2, r3
 8013964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013966:	3308      	adds	r3, #8
 8013968:	f9b3 3000 	ldrsh.w	r3, [r3]
 801396c:	4619      	mov	r1, r3
 801396e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013970:	330a      	adds	r3, #10
 8013972:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013976:	9300      	str	r3, [sp, #0]
 8013978:	460b      	mov	r3, r1
 801397a:	4946      	ldr	r1, [pc, #280]	; (8013a94 <presdect_tick+0x1f4>)
 801397c:	2060      	movs	r0, #96	; 0x60
 801397e:	f7ff ff57 	bl	8013830 <itm_debug3>
    	itm_debug3(DBG_PRES|DBG_INA3221, "prs2", values[6], values[7], values[8]);
 8013982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013984:	330c      	adds	r3, #12
 8013986:	f9b3 3000 	ldrsh.w	r3, [r3]
 801398a:	461a      	mov	r2, r3
 801398c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801398e:	330e      	adds	r3, #14
 8013990:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013994:	4619      	mov	r1, r3
 8013996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013998:	3310      	adds	r3, #16
 801399a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801399e:	9300      	str	r3, [sp, #0]
 80139a0:	460b      	mov	r3, r1
 80139a2:	493d      	ldr	r1, [pc, #244]	; (8013a98 <presdect_tick+0x1f8>)
 80139a4:	2060      	movs	r0, #96	; 0x60
 80139a6:	f7ff ff43 	bl	8013830 <itm_debug3>
    }
    for (int i = 0; i<INA3221_NUM_VALS; i++) {
 80139aa:	2300      	movs	r3, #0
 80139ac:	627b      	str	r3, [r7, #36]	; 0x24
 80139ae:	e055      	b.n	8013a5c <presdect_tick+0x1bc>
    	values[i] = __builtin_bswap16(values[i]);
 80139b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139b2:	005b      	lsls	r3, r3, #1
 80139b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80139b6:	4413      	add	r3, r2
 80139b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80139bc:	b29b      	uxth	r3, r3
 80139be:	ba5b      	rev16	r3, r3
 80139c0:	b299      	uxth	r1, r3
 80139c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139c4:	005b      	lsls	r3, r3, #1
 80139c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80139c8:	4413      	add	r3, r2
 80139ca:	b20a      	sxth	r2, r1
 80139cc:	801a      	strh	r2, [r3, #0]
    	itm_debug2(DBG_INA3221, "ina val", i, values[i]);
 80139ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139d0:	005b      	lsls	r3, r3, #1
 80139d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80139d4:	4413      	add	r3, r2
 80139d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80139da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80139dc:	492f      	ldr	r1, [pc, #188]	; (8013a9c <presdect_tick+0x1fc>)
 80139de:	2020      	movs	r0, #32
 80139e0:	f7ff ff0a 	bl	80137f8 <itm_debug2>
    	int p = (abs(values[i])>7000) ? 1 : 0;
 80139e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139e6:	005b      	lsls	r3, r3, #1
 80139e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80139ea:	4413      	add	r3, r2
 80139ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	bfb8      	it	lt
 80139f4:	425b      	neglt	r3, r3
 80139f6:	f641 3258 	movw	r2, #7000	; 0x1b58
 80139fa:	4293      	cmp	r3, r2
 80139fc:	bfcc      	ite	gt
 80139fe:	2301      	movgt	r3, #1
 8013a00:	2300      	movle	r3, #0
 8013a02:	b2db      	uxtb	r3, r3
 8013a04:	623b      	str	r3, [r7, #32]
    	if (p == presence[i]) continue;
 8013a06:	4a26      	ldr	r2, [pc, #152]	; (8013aa0 <presdect_tick+0x200>)
 8013a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a0a:	4413      	add	r3, r2
 8013a0c:	781b      	ldrb	r3, [r3, #0]
 8013a0e:	461a      	mov	r2, r3
 8013a10:	6a3b      	ldr	r3, [r7, #32]
 8013a12:	4293      	cmp	r3, r2
 8013a14:	d01e      	beq.n	8013a54 <presdect_tick+0x1b4>
    	presence[i] = p;
 8013a16:	6a3b      	ldr	r3, [r7, #32]
 8013a18:	b2d9      	uxtb	r1, r3
 8013a1a:	4a21      	ldr	r2, [pc, #132]	; (8013aa0 <presdect_tick+0x200>)
 8013a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a1e:	4413      	add	r3, r2
 8013a20:	460a      	mov	r2, r1
 8013a22:	701a      	strb	r2, [r3, #0]
    	// notify change
    	msg_64_t m;
    	m.from = MA_CANTON(localBoardNum, 0);
 8013a24:	4b1f      	ldr	r3, [pc, #124]	; (8013aa4 <presdect_tick+0x204>)
 8013a26:	781b      	ldrb	r3, [r3, #0]
 8013a28:	00db      	lsls	r3, r3, #3
 8013a2a:	b2db      	uxtb	r3, r3
 8013a2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8013a30:	b2db      	uxtb	r3, r3
 8013a32:	767b      	strb	r3, [r7, #25]
    	m.to = MA_CONTROL();
 8013a34:	23d7      	movs	r3, #215	; 0xd7
 8013a36:	763b      	strb	r3, [r7, #24]
    	m.cmd = CMD_PRESENCE_CHANGE;
 8013a38:	2312      	movs	r3, #18
 8013a3a:	76bb      	strb	r3, [r7, #26]
    	m.sub = i;
 8013a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a3e:	b2db      	uxtb	r3, r3
 8013a40:	76fb      	strb	r3, [r7, #27]
    	m.v1u = p;
 8013a42:	6a3b      	ldr	r3, [r7, #32]
 8013a44:	b29b      	uxth	r3, r3
 8013a46:	83bb      	strh	r3, [r7, #28]
    	mqf_write_from_canton(&m);
 8013a48:	f107 0318 	add.w	r3, r7, #24
 8013a4c:	4618      	mov	r0, r3
 8013a4e:	f7ff ff0b 	bl	8013868 <mqf_write_from_canton>
 8013a52:	e000      	b.n	8013a56 <presdect_tick+0x1b6>
    	if (p == presence[i]) continue;
 8013a54:	bf00      	nop
    for (int i = 0; i<INA3221_NUM_VALS; i++) {
 8013a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a58:	3301      	adds	r3, #1
 8013a5a:	627b      	str	r3, [r7, #36]	; 0x24
 8013a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a5e:	2b0b      	cmp	r3, #11
 8013a60:	dda6      	ble.n	80139b0 <presdect_tick+0x110>
 8013a62:	e002      	b.n	8013a6a <presdect_tick+0x1ca>
	if (disable_ina3221) return;
 8013a64:	bf00      	nop
 8013a66:	e000      	b.n	8013a6a <presdect_tick+0x1ca>
    if (!values) return;
 8013a68:	bf00      	nop
    	m.to = MA_UI(1);
    	m.cmd = CMD_INA3221_REPORT;
    	m.v32u = (uint32_t) v;
    	mqf_write_from_canton(&m);
    }
}
 8013a6a:	3730      	adds	r7, #48	; 0x30
 8013a6c:	46bd      	mov	sp, r7
 8013a6e:	bd80      	pop	{r7, pc}
 8013a70:	2000507c 	.word	0x2000507c
 8013a74:	20005194 	.word	0x20005194
 8013a78:	2000021c 	.word	0x2000021c
 8013a7c:	08017274 	.word	0x08017274
 8013a80:	2000021d 	.word	0x2000021d
 8013a84:	20005198 	.word	0x20005198
 8013a88:	200051b0 	.word	0x200051b0
 8013a8c:	0801727c 	.word	0x0801727c
 8013a90:	08017284 	.word	0x08017284
 8013a94:	0801728c 	.word	0x0801728c
 8013a98:	08017294 	.word	0x08017294
 8013a9c:	0801729c 	.word	0x0801729c
 8013aa0:	200051c8 	.word	0x200051c8
 8013aa4:	20005279 	.word	0x20005279

08013aa8 <itm_debug1>:
{
 8013aa8:	b580      	push	{r7, lr}
 8013aaa:	b086      	sub	sp, #24
 8013aac:	af02      	add	r7, sp, #8
 8013aae:	60f8      	str	r0, [r7, #12]
 8013ab0:	60b9      	str	r1, [r7, #8]
 8013ab2:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 8013ab4:	4b08      	ldr	r3, [pc, #32]	; (8013ad8 <itm_debug1+0x30>)
 8013ab6:	681a      	ldr	r2, [r3, #0]
 8013ab8:	68fb      	ldr	r3, [r7, #12]
 8013aba:	4013      	ands	r3, r2
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d007      	beq.n	8013ad0 <itm_debug1+0x28>
 8013ac0:	2301      	movs	r3, #1
 8013ac2:	9300      	str	r3, [sp, #0]
 8013ac4:	2300      	movs	r3, #0
 8013ac6:	2200      	movs	r2, #0
 8013ac8:	6879      	ldr	r1, [r7, #4]
 8013aca:	68b8      	ldr	r0, [r7, #8]
 8013acc:	f002 ff00 	bl	80168d0 <_itm_debug3>
}
 8013ad0:	bf00      	nop
 8013ad2:	3710      	adds	r7, #16
 8013ad4:	46bd      	mov	sp, r7
 8013ad6:	bd80      	pop	{r7, pc}
 8013ad8:	2000047c 	.word	0x2000047c

08013adc <turnout_error>:
{
 8013adc:	b580      	push	{r7, lr}
 8013ade:	b082      	sub	sp, #8
 8013ae0:	af00      	add	r7, sp, #0
 8013ae2:	6078      	str	r0, [r7, #4]
 8013ae4:	6039      	str	r1, [r7, #0]
	return trainctl_error('A', code, msg);
 8013ae6:	683a      	ldr	r2, [r7, #0]
 8013ae8:	6879      	ldr	r1, [r7, #4]
 8013aea:	2041      	movs	r0, #65	; 0x41
 8013aec:	f000 fa02 	bl	8013ef4 <trainctl_error>
 8013af0:	4603      	mov	r3, r0
}
 8013af2:	4618      	mov	r0, r3
 8013af4:	3708      	adds	r7, #8
 8013af6:	46bd      	mov	sp, r7
 8013af8:	bd80      	pop	{r7, pc}

08013afa <debug_info>:
{
	trainctl_notif('T', train_idx, cmd, dta, dtalen);
}

static inline void debug_info(uint32_t sel, uint32_t num, char *msg, int v1, int v2, int v3)
{
 8013afa:	b580      	push	{r7, lr}
 8013afc:	b088      	sub	sp, #32
 8013afe:	af04      	add	r7, sp, #16
 8013b00:	60f8      	str	r0, [r7, #12]
 8013b02:	60b9      	str	r1, [r7, #8]
 8013b04:	607a      	str	r2, [r7, #4]
 8013b06:	603b      	str	r3, [r7, #0]
	trainctl_notif2(sel, num, 'D', msg, v1, v2, v3);
 8013b08:	68fb      	ldr	r3, [r7, #12]
 8013b0a:	b2d8      	uxtb	r0, r3
 8013b0c:	68bb      	ldr	r3, [r7, #8]
 8013b0e:	b2d9      	uxtb	r1, r3
 8013b10:	69fb      	ldr	r3, [r7, #28]
 8013b12:	9302      	str	r3, [sp, #8]
 8013b14:	69bb      	ldr	r3, [r7, #24]
 8013b16:	9301      	str	r3, [sp, #4]
 8013b18:	683b      	ldr	r3, [r7, #0]
 8013b1a:	9300      	str	r3, [sp, #0]
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	2244      	movs	r2, #68	; 0x44
 8013b20:	f001 f852 	bl	8014bc8 <trainctl_notif2>
}
 8013b24:	bf00      	nop
 8013b26:	3710      	adds	r7, #16
 8013b28:	46bd      	mov	sp, r7
 8013b2a:	bd80      	pop	{r7, pc}

08013b2c <mqf_read_to_turnout>:
LFMQUEUE_DEF_H(to_turnout, msg_64_t)
 8013b2c:	b580      	push	{r7, lr}
 8013b2e:	b082      	sub	sp, #8
 8013b30:	af00      	add	r7, sp, #0
 8013b32:	6078      	str	r0, [r7, #4]
 8013b34:	6879      	ldr	r1, [r7, #4]
 8013b36:	4804      	ldr	r0, [pc, #16]	; (8013b48 <mqf_read_to_turnout+0x1c>)
 8013b38:	f003 f830 	bl	8016b9c <mqf_read>
 8013b3c:	4603      	mov	r3, r0
 8013b3e:	4618      	mov	r0, r3
 8013b40:	3708      	adds	r7, #8
 8013b42:	46bd      	mov	sp, r7
 8013b44:	bd80      	pop	{r7, pc}
 8013b46:	bf00      	nop
 8013b48:	200003c8 	.word	0x200003c8

08013b4c <turnout_tick>:
static void process_turnout_timers(uint32_t tick, uint32_t dt);
static void process_turnout_cmd(msg_64_t *m, uint32_t tick, uint32_t dt);


void turnout_tick(uint32_t notif_flags, uint32_t tick, uint32_t dt)
{
 8013b4c:	b580      	push	{r7, lr}
 8013b4e:	b088      	sub	sp, #32
 8013b50:	af00      	add	r7, sp, #0
 8013b52:	60f8      	str	r0, [r7, #12]
 8013b54:	60b9      	str	r1, [r7, #8]
 8013b56:	607a      	str	r2, [r7, #4]
	static int first=1;
	if (first) {
 8013b58:	4b18      	ldr	r3, [pc, #96]	; (8013bbc <turnout_tick+0x70>)
 8013b5a:	681b      	ldr	r3, [r3, #0]
 8013b5c:	2b00      	cmp	r3, #0
 8013b5e:	d004      	beq.n	8013b6a <turnout_tick+0x1e>
		first = 0;
 8013b60:	4b16      	ldr	r3, [pc, #88]	; (8013bbc <turnout_tick+0x70>)
 8013b62:	2200      	movs	r2, #0
 8013b64:	601a      	str	r2, [r3, #0]
		turnout_reset();
 8013b66:	f000 f89f 	bl	8013ca8 <turnout_reset>
	}
	process_turnout_timers(tick, dt);
 8013b6a:	6879      	ldr	r1, [r7, #4]
 8013b6c:	68b8      	ldr	r0, [r7, #8]
 8013b6e:	f000 f8f7 	bl	8013d60 <process_turnout_timers>
	for (;;) {
		msg_64_t m;
		int rc = mqf_read_to_turnout(&m);
 8013b72:	f107 0310 	add.w	r3, r7, #16
 8013b76:	4618      	mov	r0, r3
 8013b78:	f7ff ffd8 	bl	8013b2c <mqf_read_to_turnout>
 8013b7c:	61f8      	str	r0, [r7, #28]
		if (rc) break;
 8013b7e:	69fb      	ldr	r3, [r7, #28]
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d117      	bne.n	8013bb4 <turnout_tick+0x68>
		if (IS_TURNOUT(m.to)) {
 8013b84:	7c3b      	ldrb	r3, [r7, #16]
 8013b86:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	d107      	bne.n	8013b9e <turnout_tick+0x52>
			process_turnout_cmd(&m, tick, dt);
 8013b8e:	f107 0310 	add.w	r3, r7, #16
 8013b92:	687a      	ldr	r2, [r7, #4]
 8013b94:	68b9      	ldr	r1, [r7, #8]
 8013b96:	4618      	mov	r0, r3
 8013b98:	f000 f812 	bl	8013bc0 <process_turnout_cmd>
 8013b9c:	e7e9      	b.n	8013b72 <turnout_tick+0x26>
		} else if (IS_BROADCAST(m.to)) {
 8013b9e:	7c3b      	ldrb	r3, [r7, #16]
 8013ba0:	2bff      	cmp	r3, #255	; 0xff
 8013ba2:	d1e6      	bne.n	8013b72 <turnout_tick+0x26>
			switch (m.cmd) {
 8013ba4:	7cbb      	ldrb	r3, [r7, #18]
 8013ba6:	3bfe      	subs	r3, #254	; 0xfe
 8013ba8:	2b01      	cmp	r3, #1
 8013baa:	d8e2      	bhi.n	8013b72 <turnout_tick+0x26>
			case CMD_RESET: // FALLTHRU
			case CMD_EMERGENCY_STOP:
				turnout_reset();
 8013bac:	f000 f87c 	bl	8013ca8 <turnout_reset>
				break;
 8013bb0:	bf00      	nop
	for (;;) {
 8013bb2:	e7de      	b.n	8013b72 <turnout_tick+0x26>
			}
		} else {
			// error
		}
	}
}
 8013bb4:	bf00      	nop
 8013bb6:	3720      	adds	r7, #32
 8013bb8:	46bd      	mov	sp, r7
 8013bba:	bd80      	pop	{r7, pc}
 8013bbc:	20000220 	.word	0x20000220

08013bc0 <process_turnout_cmd>:
		const turnout_config_t *aconf = get_turnout_cnf(_idx); \
		turnout_vars_t         *avars = &tvars[_idx];


static void process_turnout_cmd(msg_64_t *m, uint32_t tick, uint32_t dt)
{
 8013bc0:	b580      	push	{r7, lr}
 8013bc2:	b08a      	sub	sp, #40	; 0x28
 8013bc4:	af02      	add	r7, sp, #8
 8013bc6:	60f8      	str	r0, [r7, #12]
 8013bc8:	60b9      	str	r1, [r7, #8]
 8013bca:	607a      	str	r2, [r7, #4]
	uint8_t tidx = m->to & 0x07;
 8013bcc:	68fb      	ldr	r3, [r7, #12]
 8013bce:	781b      	ldrb	r3, [r3, #0]
 8013bd0:	f003 0307 	and.w	r3, r3, #7
 8013bd4:	77fb      	strb	r3, [r7, #31]
	USE_TURNOUT(tidx)
 8013bd6:	7ffb      	ldrb	r3, [r7, #31]
 8013bd8:	4618      	mov	r0, r3
 8013bda:	f000 fb0f 	bl	80141fc <get_turnout_cnf>
 8013bde:	61b8      	str	r0, [r7, #24]
 8013be0:	7ffb      	ldrb	r3, [r7, #31]
 8013be2:	005b      	lsls	r3, r3, #1
 8013be4:	4a2d      	ldr	r2, [pc, #180]	; (8013c9c <process_turnout_cmd+0xdc>)
 8013be6:	4413      	add	r3, r2
 8013be8:	617b      	str	r3, [r7, #20]
	if (!aconf || !avars) {
 8013bea:	69bb      	ldr	r3, [r7, #24]
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	d002      	beq.n	8013bf6 <process_turnout_cmd+0x36>
 8013bf0:	697b      	ldr	r3, [r7, #20]
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	d105      	bne.n	8013c02 <process_turnout_cmd+0x42>
		turnout_error(ERR_BAD_PARAM, "bad idx");
 8013bf6:	492a      	ldr	r1, [pc, #168]	; (8013ca0 <process_turnout_cmd+0xe0>)
 8013bf8:	f06f 0001 	mvn.w	r0, #1
 8013bfc:	f7ff ff6e 	bl	8013adc <turnout_error>
		return;
 8013c00:	e049      	b.n	8013c96 <process_turnout_cmd+0xd6>
	}
	debug_info('A', 0, "CMD", tidx, m->cmd, avars->value);
 8013c02:	7ffa      	ldrb	r2, [r7, #31]
 8013c04:	68fb      	ldr	r3, [r7, #12]
 8013c06:	789b      	ldrb	r3, [r3, #2]
 8013c08:	4619      	mov	r1, r3
 8013c0a:	697b      	ldr	r3, [r7, #20]
 8013c0c:	f993 3000 	ldrsb.w	r3, [r3]
 8013c10:	9301      	str	r3, [sp, #4]
 8013c12:	9100      	str	r1, [sp, #0]
 8013c14:	4613      	mov	r3, r2
 8013c16:	4a23      	ldr	r2, [pc, #140]	; (8013ca4 <process_turnout_cmd+0xe4>)
 8013c18:	2100      	movs	r1, #0
 8013c1a:	2041      	movs	r0, #65	; 0x41
 8013c1c:	f7ff ff6d 	bl	8013afa <debug_info>
#ifndef TRAIN_SIMU
	if (!aconf->cmd_port) return;
 8013c20:	69bb      	ldr	r3, [r7, #24]
 8013c22:	681b      	ldr	r3, [r3, #0]
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d035      	beq.n	8013c94 <process_turnout_cmd+0xd4>
#endif
	switch (m->cmd) {
 8013c28:	68fb      	ldr	r3, [r7, #12]
 8013c2a:	789b      	ldrb	r3, [r3, #2]
 8013c2c:	2b01      	cmp	r3, #1
 8013c2e:	d002      	beq.n	8013c36 <process_turnout_cmd+0x76>
 8013c30:	2b02      	cmp	r3, #2
 8013c32:	d017      	beq.n	8013c64 <process_turnout_cmd+0xa4>
 8013c34:	e02f      	b.n	8013c96 <process_turnout_cmd+0xd6>
	case CMD_TURNOUT_A:
		avars->value = -1;
 8013c36:	697b      	ldr	r3, [r7, #20]
 8013c38:	22ff      	movs	r2, #255	; 0xff
 8013c3a:	701a      	strb	r2, [r3, #0]
#ifndef TRAIN_SIMU
	    HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinA, GPIO_PIN_RESET);
 8013c3c:	69bb      	ldr	r3, [r7, #24]
 8013c3e:	6818      	ldr	r0, [r3, #0]
 8013c40:	69bb      	ldr	r3, [r7, #24]
 8013c42:	889b      	ldrh	r3, [r3, #4]
 8013c44:	2200      	movs	r2, #0
 8013c46:	4619      	mov	r1, r3
 8013c48:	f7ef fbf8 	bl	800343c <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinB, GPIO_PIN_RESET);
 8013c4c:	69bb      	ldr	r3, [r7, #24]
 8013c4e:	6818      	ldr	r0, [r3, #0]
 8013c50:	69bb      	ldr	r3, [r7, #24]
 8013c52:	88db      	ldrh	r3, [r3, #6]
 8013c54:	2200      	movs	r2, #0
 8013c56:	4619      	mov	r1, r3
 8013c58:	f7ef fbf0 	bl	800343c <HAL_GPIO_WritePin>
#endif
		avars->st = ST_SETA;
 8013c5c:	697b      	ldr	r3, [r7, #20]
 8013c5e:	2201      	movs	r2, #1
 8013c60:	705a      	strb	r2, [r3, #1]
		break;
 8013c62:	e018      	b.n	8013c96 <process_turnout_cmd+0xd6>
	case CMD_TURNOUT_B:
		avars->value = -1;
 8013c64:	697b      	ldr	r3, [r7, #20]
 8013c66:	22ff      	movs	r2, #255	; 0xff
 8013c68:	701a      	strb	r2, [r3, #0]
#ifndef TRAIN_SIMU
	    HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinA, GPIO_PIN_RESET);
 8013c6a:	69bb      	ldr	r3, [r7, #24]
 8013c6c:	6818      	ldr	r0, [r3, #0]
 8013c6e:	69bb      	ldr	r3, [r7, #24]
 8013c70:	889b      	ldrh	r3, [r3, #4]
 8013c72:	2200      	movs	r2, #0
 8013c74:	4619      	mov	r1, r3
 8013c76:	f7ef fbe1 	bl	800343c <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinB, GPIO_PIN_RESET);
 8013c7a:	69bb      	ldr	r3, [r7, #24]
 8013c7c:	6818      	ldr	r0, [r3, #0]
 8013c7e:	69bb      	ldr	r3, [r7, #24]
 8013c80:	88db      	ldrh	r3, [r3, #6]
 8013c82:	2200      	movs	r2, #0
 8013c84:	4619      	mov	r1, r3
 8013c86:	f7ef fbd9 	bl	800343c <HAL_GPIO_WritePin>
#endif
		avars->st = ST_SETB;
 8013c8a:	697b      	ldr	r3, [r7, #20]
 8013c8c:	2203      	movs	r2, #3
 8013c8e:	705a      	strb	r2, [r3, #1]
		break;
 8013c90:	bf00      	nop
 8013c92:	e000      	b.n	8013c96 <process_turnout_cmd+0xd6>
	if (!aconf->cmd_port) return;
 8013c94:	bf00      	nop
	}
}
 8013c96:	3720      	adds	r7, #32
 8013c98:	46bd      	mov	sp, r7
 8013c9a:	bd80      	pop	{r7, pc}
 8013c9c:	200051d4 	.word	0x200051d4
 8013ca0:	080172a4 	.word	0x080172a4
 8013ca4:	080172ac 	.word	0x080172ac

08013ca8 <turnout_reset>:


static void turnout_reset(void)
{
 8013ca8:	b580      	push	{r7, lr}
 8013caa:	b086      	sub	sp, #24
 8013cac:	af02      	add	r7, sp, #8
	for (int tidx=0; tidx<NUM_TURNOUT; tidx++) {
 8013cae:	2300      	movs	r3, #0
 8013cb0:	60fb      	str	r3, [r7, #12]
 8013cb2:	e044      	b.n	8013d3e <turnout_reset+0x96>
		USE_TURNOUT(tidx) 	// aconf avars
 8013cb4:	68f8      	ldr	r0, [r7, #12]
 8013cb6:	f000 faa1 	bl	80141fc <get_turnout_cnf>
 8013cba:	60b8      	str	r0, [r7, #8]
 8013cbc:	68fb      	ldr	r3, [r7, #12]
 8013cbe:	005b      	lsls	r3, r3, #1
 8013cc0:	4a23      	ldr	r2, [pc, #140]	; (8013d50 <turnout_reset+0xa8>)
 8013cc2:	4413      	add	r3, r2
 8013cc4:	607b      	str	r3, [r7, #4]
		memset(avars, 0, sizeof(*avars));
 8013cc6:	2202      	movs	r2, #2
 8013cc8:	2100      	movs	r1, #0
 8013cca:	6878      	ldr	r0, [r7, #4]
 8013ccc:	f003 f807 	bl	8016cde <memset>
		avars->value = 0;
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	2200      	movs	r2, #0
 8013cd4:	701a      	strb	r2, [r3, #0]
		avars->st = ST_IDLE;
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	2200      	movs	r2, #0
 8013cda:	705a      	strb	r2, [r3, #1]
		if (!aconf) {
 8013cdc:	68bb      	ldr	r3, [r7, #8]
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	d106      	bne.n	8013cf0 <turnout_reset+0x48>
			itm_debug1(DBG_TURNOUT, "tn skip", tidx);
 8013ce2:	68fa      	ldr	r2, [r7, #12]
 8013ce4:	491b      	ldr	r1, [pc, #108]	; (8013d54 <turnout_reset+0xac>)
 8013ce6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8013cea:	f7ff fedd 	bl	8013aa8 <itm_debug1>
			continue;
 8013cee:	e023      	b.n	8013d38 <turnout_reset+0x90>
		}
#ifndef TRAIN_SIMU
		if (!aconf->cmd_port) return;
 8013cf0:	68bb      	ldr	r3, [r7, #8]
 8013cf2:	681b      	ldr	r3, [r3, #0]
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	d026      	beq.n	8013d46 <turnout_reset+0x9e>

		HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinA, GPIO_PIN_RESET);
 8013cf8:	68bb      	ldr	r3, [r7, #8]
 8013cfa:	6818      	ldr	r0, [r3, #0]
 8013cfc:	68bb      	ldr	r3, [r7, #8]
 8013cfe:	889b      	ldrh	r3, [r3, #4]
 8013d00:	2200      	movs	r2, #0
 8013d02:	4619      	mov	r1, r3
 8013d04:	f7ef fb9a 	bl	800343c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinB, GPIO_PIN_RESET);
 8013d08:	68bb      	ldr	r3, [r7, #8]
 8013d0a:	6818      	ldr	r0, [r3, #0]
 8013d0c:	68bb      	ldr	r3, [r7, #8]
 8013d0e:	88db      	ldrh	r3, [r3, #6]
 8013d10:	2200      	movs	r2, #0
 8013d12:	4619      	mov	r1, r3
 8013d14:	f7ef fb92 	bl	800343c <HAL_GPIO_WritePin>
#endif
		itm_debug1(DBG_TURNOUT, "A/RESET", tidx);
 8013d18:	68fa      	ldr	r2, [r7, #12]
 8013d1a:	490f      	ldr	r1, [pc, #60]	; (8013d58 <turnout_reset+0xb0>)
 8013d1c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8013d20:	f7ff fec2 	bl	8013aa8 <itm_debug1>
		debug_info('A', 0, "RESET", 0, 0,0);
 8013d24:	2300      	movs	r3, #0
 8013d26:	9301      	str	r3, [sp, #4]
 8013d28:	2300      	movs	r3, #0
 8013d2a:	9300      	str	r3, [sp, #0]
 8013d2c:	2300      	movs	r3, #0
 8013d2e:	4a0b      	ldr	r2, [pc, #44]	; (8013d5c <turnout_reset+0xb4>)
 8013d30:	2100      	movs	r1, #0
 8013d32:	2041      	movs	r0, #65	; 0x41
 8013d34:	f7ff fee1 	bl	8013afa <debug_info>
	for (int tidx=0; tidx<NUM_TURNOUT; tidx++) {
 8013d38:	68fb      	ldr	r3, [r7, #12]
 8013d3a:	3301      	adds	r3, #1
 8013d3c:	60fb      	str	r3, [r7, #12]
 8013d3e:	68fb      	ldr	r3, [r7, #12]
 8013d40:	2b07      	cmp	r3, #7
 8013d42:	ddb7      	ble.n	8013cb4 <turnout_reset+0xc>
 8013d44:	e000      	b.n	8013d48 <turnout_reset+0xa0>
		if (!aconf->cmd_port) return;
 8013d46:	bf00      	nop
		(void)aconf; // unused
	}
}
 8013d48:	3710      	adds	r7, #16
 8013d4a:	46bd      	mov	sp, r7
 8013d4c:	bd80      	pop	{r7, pc}
 8013d4e:	bf00      	nop
 8013d50:	200051d4 	.word	0x200051d4
 8013d54:	080172b0 	.word	0x080172b0
 8013d58:	080172b8 	.word	0x080172b8
 8013d5c:	080172c0 	.word	0x080172c0

08013d60 <process_turnout_timers>:




static void process_turnout_timers(uint32_t tick, uint32_t dt)
{
 8013d60:	b580      	push	{r7, lr}
 8013d62:	b088      	sub	sp, #32
 8013d64:	af02      	add	r7, sp, #8
 8013d66:	6078      	str	r0, [r7, #4]
 8013d68:	6039      	str	r1, [r7, #0]
	for (int i=0; i<NUM_TURNOUTS; i++) {
 8013d6a:	2300      	movs	r3, #0
 8013d6c:	617b      	str	r3, [r7, #20]
 8013d6e:	e0a2      	b.n	8013eb6 <process_turnout_timers+0x156>
		USE_TURNOUT(i)		// aconf , avars
 8013d70:	6978      	ldr	r0, [r7, #20]
 8013d72:	f000 fa43 	bl	80141fc <get_turnout_cnf>
 8013d76:	6138      	str	r0, [r7, #16]
 8013d78:	697b      	ldr	r3, [r7, #20]
 8013d7a:	005b      	lsls	r3, r3, #1
 8013d7c:	4a52      	ldr	r2, [pc, #328]	; (8013ec8 <process_turnout_timers+0x168>)
 8013d7e:	4413      	add	r3, r2
 8013d80:	60fb      	str	r3, [r7, #12]
#ifndef TRAIN_SIMU
        if (!aconf->cmd_port) continue;
 8013d82:	693b      	ldr	r3, [r7, #16]
 8013d84:	681b      	ldr	r3, [r3, #0]
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	f000 808f 	beq.w	8013eaa <process_turnout_timers+0x14a>
#endif
		switch (avars->st) {
 8013d8c:	68fb      	ldr	r3, [r7, #12]
 8013d8e:	785b      	ldrb	r3, [r3, #1]
 8013d90:	2b04      	cmp	r3, #4
 8013d92:	d87d      	bhi.n	8013e90 <process_turnout_timers+0x130>
 8013d94:	a201      	add	r2, pc, #4	; (adr r2, 8013d9c <process_turnout_timers+0x3c>)
 8013d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d9a:	bf00      	nop
 8013d9c:	08013eaf 	.word	0x08013eaf
 8013da0:	08013db1 	.word	0x08013db1
 8013da4:	08013e21 	.word	0x08013e21
 8013da8:	08013de9 	.word	0x08013de9
 8013dac:	08013e59 	.word	0x08013e59
		case ST_IDLE:
			break;
		case ST_SETA:
#ifndef TRAIN_SIMU
			HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinA, GPIO_PIN_SET);
 8013db0:	693b      	ldr	r3, [r7, #16]
 8013db2:	6818      	ldr	r0, [r3, #0]
 8013db4:	693b      	ldr	r3, [r7, #16]
 8013db6:	889b      	ldrh	r3, [r3, #4]
 8013db8:	2201      	movs	r2, #1
 8013dba:	4619      	mov	r1, r3
 8013dbc:	f7ef fb3e 	bl	800343c <HAL_GPIO_WritePin>
#else
			(void)aconf; // unused in SIMU
#endif
			avars->st = ST_RESETA;
 8013dc0:	68fb      	ldr	r3, [r7, #12]
 8013dc2:	2202      	movs	r2, #2
 8013dc4:	705a      	strb	r2, [r3, #1]
			itm_debug1(DBG_TURNOUT, "A/SETA", i);
 8013dc6:	697a      	ldr	r2, [r7, #20]
 8013dc8:	4940      	ldr	r1, [pc, #256]	; (8013ecc <process_turnout_timers+0x16c>)
 8013dca:	f44f 7000 	mov.w	r0, #512	; 0x200
 8013dce:	f7ff fe6b 	bl	8013aa8 <itm_debug1>
			debug_info('A', 0, "A0/SETA", 0, 0,0);
 8013dd2:	2300      	movs	r3, #0
 8013dd4:	9301      	str	r3, [sp, #4]
 8013dd6:	2300      	movs	r3, #0
 8013dd8:	9300      	str	r3, [sp, #0]
 8013dda:	2300      	movs	r3, #0
 8013ddc:	4a3c      	ldr	r2, [pc, #240]	; (8013ed0 <process_turnout_timers+0x170>)
 8013dde:	2100      	movs	r1, #0
 8013de0:	2041      	movs	r0, #65	; 0x41
 8013de2:	f7ff fe8a 	bl	8013afa <debug_info>
			break;
 8013de6:	e063      	b.n	8013eb0 <process_turnout_timers+0x150>
		case ST_SETB:
#ifndef TRAIN_SIMU
			HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinB, GPIO_PIN_SET);
 8013de8:	693b      	ldr	r3, [r7, #16]
 8013dea:	6818      	ldr	r0, [r3, #0]
 8013dec:	693b      	ldr	r3, [r7, #16]
 8013dee:	88db      	ldrh	r3, [r3, #6]
 8013df0:	2201      	movs	r2, #1
 8013df2:	4619      	mov	r1, r3
 8013df4:	f7ef fb22 	bl	800343c <HAL_GPIO_WritePin>
#endif
			avars->st = ST_RESETB;
 8013df8:	68fb      	ldr	r3, [r7, #12]
 8013dfa:	2204      	movs	r2, #4
 8013dfc:	705a      	strb	r2, [r3, #1]
			itm_debug1(DBG_TURNOUT, "A/SETB", i);
 8013dfe:	697a      	ldr	r2, [r7, #20]
 8013e00:	4934      	ldr	r1, [pc, #208]	; (8013ed4 <process_turnout_timers+0x174>)
 8013e02:	f44f 7000 	mov.w	r0, #512	; 0x200
 8013e06:	f7ff fe4f 	bl	8013aa8 <itm_debug1>
			debug_info('A', 0, "A0/SETB", 0, 0,0);
 8013e0a:	2300      	movs	r3, #0
 8013e0c:	9301      	str	r3, [sp, #4]
 8013e0e:	2300      	movs	r3, #0
 8013e10:	9300      	str	r3, [sp, #0]
 8013e12:	2300      	movs	r3, #0
 8013e14:	4a30      	ldr	r2, [pc, #192]	; (8013ed8 <process_turnout_timers+0x178>)
 8013e16:	2100      	movs	r1, #0
 8013e18:	2041      	movs	r0, #65	; 0x41
 8013e1a:	f7ff fe6e 	bl	8013afa <debug_info>
			break;
 8013e1e:	e047      	b.n	8013eb0 <process_turnout_timers+0x150>
		case ST_RESETA:
#ifndef TRAIN_SIMU
			HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinA, GPIO_PIN_RESET);
 8013e20:	693b      	ldr	r3, [r7, #16]
 8013e22:	6818      	ldr	r0, [r3, #0]
 8013e24:	693b      	ldr	r3, [r7, #16]
 8013e26:	889b      	ldrh	r3, [r3, #4]
 8013e28:	2200      	movs	r2, #0
 8013e2a:	4619      	mov	r1, r3
 8013e2c:	f7ef fb06 	bl	800343c <HAL_GPIO_WritePin>
#endif
			avars->st = ST_IDLE;
 8013e30:	68fb      	ldr	r3, [r7, #12]
 8013e32:	2200      	movs	r2, #0
 8013e34:	705a      	strb	r2, [r3, #1]
			itm_debug1(DBG_TURNOUT, "A/RESETA", i);
 8013e36:	697a      	ldr	r2, [r7, #20]
 8013e38:	4928      	ldr	r1, [pc, #160]	; (8013edc <process_turnout_timers+0x17c>)
 8013e3a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8013e3e:	f7ff fe33 	bl	8013aa8 <itm_debug1>
			debug_info('A', 0, "A0/RESETA", 0, 0,0);
 8013e42:	2300      	movs	r3, #0
 8013e44:	9301      	str	r3, [sp, #4]
 8013e46:	2300      	movs	r3, #0
 8013e48:	9300      	str	r3, [sp, #0]
 8013e4a:	2300      	movs	r3, #0
 8013e4c:	4a24      	ldr	r2, [pc, #144]	; (8013ee0 <process_turnout_timers+0x180>)
 8013e4e:	2100      	movs	r1, #0
 8013e50:	2041      	movs	r0, #65	; 0x41
 8013e52:	f7ff fe52 	bl	8013afa <debug_info>
			break;
 8013e56:	e02b      	b.n	8013eb0 <process_turnout_timers+0x150>
		case ST_RESETB:
#ifndef TRAIN_SIMU
			HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinB, GPIO_PIN_RESET);
 8013e58:	693b      	ldr	r3, [r7, #16]
 8013e5a:	6818      	ldr	r0, [r3, #0]
 8013e5c:	693b      	ldr	r3, [r7, #16]
 8013e5e:	88db      	ldrh	r3, [r3, #6]
 8013e60:	2200      	movs	r2, #0
 8013e62:	4619      	mov	r1, r3
 8013e64:	f7ef faea 	bl	800343c <HAL_GPIO_WritePin>
#endif
			avars->st = ST_IDLE;
 8013e68:	68fb      	ldr	r3, [r7, #12]
 8013e6a:	2200      	movs	r2, #0
 8013e6c:	705a      	strb	r2, [r3, #1]
			itm_debug1(DBG_TURNOUT, "A/RESETB", i);
 8013e6e:	697a      	ldr	r2, [r7, #20]
 8013e70:	491c      	ldr	r1, [pc, #112]	; (8013ee4 <process_turnout_timers+0x184>)
 8013e72:	f44f 7000 	mov.w	r0, #512	; 0x200
 8013e76:	f7ff fe17 	bl	8013aa8 <itm_debug1>
			debug_info('A', 0, "A0/RESETB", 0, 0,0);
 8013e7a:	2300      	movs	r3, #0
 8013e7c:	9301      	str	r3, [sp, #4]
 8013e7e:	2300      	movs	r3, #0
 8013e80:	9300      	str	r3, [sp, #0]
 8013e82:	2300      	movs	r3, #0
 8013e84:	4a18      	ldr	r2, [pc, #96]	; (8013ee8 <process_turnout_timers+0x188>)
 8013e86:	2100      	movs	r1, #0
 8013e88:	2041      	movs	r0, #65	; 0x41
 8013e8a:	f7ff fe36 	bl	8013afa <debug_info>
			break;
 8013e8e:	e00f      	b.n	8013eb0 <process_turnout_timers+0x150>
			HAL_GPIO_TogglePin(aconf->cmd_port, aconf->pinB);
#endif
			break;
			 */
		default:
			itm_debug1(DBG_TURNOUT|DBG_ERR, "bad state", avars->st);
 8013e90:	68fb      	ldr	r3, [r7, #12]
 8013e92:	785b      	ldrb	r3, [r3, #1]
 8013e94:	461a      	mov	r2, r3
 8013e96:	4915      	ldr	r1, [pc, #84]	; (8013eec <process_turnout_timers+0x18c>)
 8013e98:	4815      	ldr	r0, [pc, #84]	; (8013ef0 <process_turnout_timers+0x190>)
 8013e9a:	f7ff fe05 	bl	8013aa8 <itm_debug1>
			turnout_error(ERR_BAD_STATE, "bad state");
 8013e9e:	4913      	ldr	r1, [pc, #76]	; (8013eec <process_turnout_timers+0x18c>)
 8013ea0:	f06f 0008 	mvn.w	r0, #8
 8013ea4:	f7ff fe1a 	bl	8013adc <turnout_error>
			break;
 8013ea8:	e002      	b.n	8013eb0 <process_turnout_timers+0x150>
        if (!aconf->cmd_port) continue;
 8013eaa:	bf00      	nop
 8013eac:	e000      	b.n	8013eb0 <process_turnout_timers+0x150>
			break;
 8013eae:	bf00      	nop
	for (int i=0; i<NUM_TURNOUTS; i++) {
 8013eb0:	697b      	ldr	r3, [r7, #20]
 8013eb2:	3301      	adds	r3, #1
 8013eb4:	617b      	str	r3, [r7, #20]
 8013eb6:	697b      	ldr	r3, [r7, #20]
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	f77f af59 	ble.w	8013d70 <process_turnout_timers+0x10>
		}
	}
}
 8013ebe:	bf00      	nop
 8013ec0:	3718      	adds	r7, #24
 8013ec2:	46bd      	mov	sp, r7
 8013ec4:	bd80      	pop	{r7, pc}
 8013ec6:	bf00      	nop
 8013ec8:	200051d4 	.word	0x200051d4
 8013ecc:	080172c8 	.word	0x080172c8
 8013ed0:	080172d0 	.word	0x080172d0
 8013ed4:	080172d8 	.word	0x080172d8
 8013ed8:	080172e0 	.word	0x080172e0
 8013edc:	080172e8 	.word	0x080172e8
 8013ee0:	080172f4 	.word	0x080172f4
 8013ee4:	08017300 	.word	0x08017300
 8013ee8:	0801730c 	.word	0x0801730c
 8013eec:	08017318 	.word	0x08017318
 8013ef0:	80000200 	.word	0x80000200

08013ef4 <trainctl_error>:




int trainctl_error(char l, int code, const char *msg)
{
 8013ef4:	b580      	push	{r7, lr}
 8013ef6:	b088      	sub	sp, #32
 8013ef8:	af02      	add	r7, sp, #8
 8013efa:	4603      	mov	r3, r0
 8013efc:	60b9      	str	r1, [r7, #8]
 8013efe:	607a      	str	r2, [r7, #4]
 8013f00:	73fb      	strb	r3, [r7, #15]
	int16_t c = code;
 8013f02:	68bb      	ldr	r3, [r7, #8]
 8013f04:	b21b      	sxth	r3, r3
 8013f06:	82fb      	strh	r3, [r7, #22]
	// add debug msg or notification here
	if (c >=0) c=-1;
 8013f08:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	db02      	blt.n	8013f16 <trainctl_error+0x22>
 8013f10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013f14:	82fb      	strh	r3, [r7, #22]
	trainctl_notif('G', 0, 'E', (void *)&c, sizeof(c));
 8013f16:	f107 0216 	add.w	r2, r7, #22
 8013f1a:	2302      	movs	r3, #2
 8013f1c:	9300      	str	r3, [sp, #0]
 8013f1e:	4613      	mov	r3, r2
 8013f20:	2245      	movs	r2, #69	; 0x45
 8013f22:	2100      	movs	r1, #0
 8013f24:	2047      	movs	r0, #71	; 0x47
 8013f26:	f000 fe2b 	bl	8014b80 <trainctl_notif>
	return code;
 8013f2a:	68bb      	ldr	r3, [r7, #8]
}
 8013f2c:	4618      	mov	r0, r3
 8013f2e:	3718      	adds	r7, #24
 8013f30:	46bd      	mov	sp, r7
 8013f32:	bd80      	pop	{r7, pc}

08013f34 <get_param_def>:
#include <stddef.h>
#include <string.h>
#include "param.h"

static param_t *get_param_def(const param_t *rgpar, const char *n)
{
 8013f34:	b580      	push	{r7, lr}
 8013f36:	b084      	sub	sp, #16
 8013f38:	af00      	add	r7, sp, #0
 8013f3a:	6078      	str	r0, [r7, #4]
 8013f3c:	6039      	str	r1, [r7, #0]
	for (param_t *p = (param_t*) rgpar; p->name; p++) {
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	60fb      	str	r3, [r7, #12]
 8013f42:	e00d      	b.n	8013f60 <get_param_def+0x2c>
		if (!strcmp(p->name, n)) return p;
 8013f44:	68fb      	ldr	r3, [r7, #12]
 8013f46:	681b      	ldr	r3, [r3, #0]
 8013f48:	6839      	ldr	r1, [r7, #0]
 8013f4a:	4618      	mov	r0, r3
 8013f4c:	f7ec f940 	bl	80001d0 <strcmp>
 8013f50:	4603      	mov	r3, r0
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	d101      	bne.n	8013f5a <get_param_def+0x26>
 8013f56:	68fb      	ldr	r3, [r7, #12]
 8013f58:	e007      	b.n	8013f6a <get_param_def+0x36>
	for (param_t *p = (param_t*) rgpar; p->name; p++) {
 8013f5a:	68fb      	ldr	r3, [r7, #12]
 8013f5c:	3324      	adds	r3, #36	; 0x24
 8013f5e:	60fb      	str	r3, [r7, #12]
 8013f60:	68fb      	ldr	r3, [r7, #12]
 8013f62:	681b      	ldr	r3, [r3, #0]
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d1ed      	bne.n	8013f44 <get_param_def+0x10>
	}
	return NULL;
 8013f68:	2300      	movs	r3, #0
}
 8013f6a:	4618      	mov	r0, r3
 8013f6c:	3710      	adds	r7, #16
 8013f6e:	46bd      	mov	sp, r7
 8013f70:	bd80      	pop	{r7, pc}

08013f72 <param_get_value>:

int param_get_value(const param_t *params, void *ptr, const char *name, int32_t *pvalue, int32_t *pdef, int32_t *pmin, int32_t *pmax)
{
 8013f72:	b580      	push	{r7, lr}
 8013f74:	b088      	sub	sp, #32
 8013f76:	af00      	add	r7, sp, #0
 8013f78:	60f8      	str	r0, [r7, #12]
 8013f7a:	60b9      	str	r1, [r7, #8]
 8013f7c:	607a      	str	r2, [r7, #4]
 8013f7e:	603b      	str	r3, [r7, #0]
	param_t *prm = get_param_def(params, name);
 8013f80:	6879      	ldr	r1, [r7, #4]
 8013f82:	68f8      	ldr	r0, [r7, #12]
 8013f84:	f7ff ffd6 	bl	8013f34 <get_param_def>
 8013f88:	6178      	str	r0, [r7, #20]
	if (!prm) {
 8013f8a:	697b      	ldr	r3, [r7, #20]
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	d101      	bne.n	8013f94 <param_get_value+0x22>
		return 10;
 8013f90:	230a      	movs	r3, #10
 8013f92:	e05c      	b.n	801404e <param_get_value+0xdc>
	}
	if (pmin) *pmin = prm->min;
 8013f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	d003      	beq.n	8013fa2 <param_get_value+0x30>
 8013f9a:	697b      	ldr	r3, [r7, #20]
 8013f9c:	699a      	ldr	r2, [r3, #24]
 8013f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fa0:	601a      	str	r2, [r3, #0]
	if (pmax) *pmax = prm->max;
 8013fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	d003      	beq.n	8013fb0 <param_get_value+0x3e>
 8013fa8:	697b      	ldr	r3, [r7, #20]
 8013faa:	69da      	ldr	r2, [r3, #28]
 8013fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fae:	601a      	str	r2, [r3, #0]
	if (pdef) *pdef = prm->def;
 8013fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	d003      	beq.n	8013fbe <param_get_value+0x4c>
 8013fb6:	697b      	ldr	r3, [r7, #20]
 8013fb8:	6a1a      	ldr	r2, [r3, #32]
 8013fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fbc:	601a      	str	r2, [r3, #0]
	if (pvalue) {
 8013fbe:	683b      	ldr	r3, [r7, #0]
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	d043      	beq.n	801404c <param_get_value+0xda>
		if (prm->getter) {
 8013fc4:	697b      	ldr	r3, [r7, #20]
 8013fc6:	68db      	ldr	r3, [r3, #12]
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d007      	beq.n	8013fdc <param_get_value+0x6a>
			*pvalue = prm->getter(prm);
 8013fcc:	697b      	ldr	r3, [r7, #20]
 8013fce:	68db      	ldr	r3, [r3, #12]
 8013fd0:	6978      	ldr	r0, [r7, #20]
 8013fd2:	4798      	blx	r3
 8013fd4:	4602      	mov	r2, r0
 8013fd6:	683b      	ldr	r3, [r7, #0]
 8013fd8:	601a      	str	r2, [r3, #0]
 8013fda:	e037      	b.n	801404c <param_get_value+0xda>
		} else {
			uint8_t *p = ptr;
 8013fdc:	68bb      	ldr	r3, [r7, #8]
 8013fde:	61fb      	str	r3, [r7, #28]
			if (prm->ptr) p = prm->ptr;
 8013fe0:	697b      	ldr	r3, [r7, #20]
 8013fe2:	685b      	ldr	r3, [r3, #4]
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d002      	beq.n	8013fee <param_get_value+0x7c>
 8013fe8:	697b      	ldr	r3, [r7, #20]
 8013fea:	685b      	ldr	r3, [r3, #4]
 8013fec:	61fb      	str	r3, [r7, #28]
			p += prm->offset;
 8013fee:	697b      	ldr	r3, [r7, #20]
 8013ff0:	689b      	ldr	r3, [r3, #8]
 8013ff2:	461a      	mov	r2, r3
 8013ff4:	69fb      	ldr	r3, [r7, #28]
 8013ff6:	4413      	add	r3, r2
 8013ff8:	61fb      	str	r3, [r7, #28]
			if (!p) return 11;
 8013ffa:	69fb      	ldr	r3, [r7, #28]
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	d101      	bne.n	8014004 <param_get_value+0x92>
 8014000:	230b      	movs	r3, #11
 8014002:	e024      	b.n	801404e <param_get_value+0xdc>
			if ((int)p<0x100) return 12; // probably an error if low ptr
 8014004:	69fb      	ldr	r3, [r7, #28]
 8014006:	2bff      	cmp	r3, #255	; 0xff
 8014008:	dc01      	bgt.n	801400e <param_get_value+0x9c>
 801400a:	230c      	movs	r3, #12
 801400c:	e01f      	b.n	801404e <param_get_value+0xdc>

			int8_t v8; int16_t v16; int32_t v32;
			switch (prm->size) {
 801400e:	697b      	ldr	r3, [r7, #20]
 8014010:	695b      	ldr	r3, [r3, #20]
 8014012:	2b02      	cmp	r3, #2
 8014014:	d00a      	beq.n	801402c <param_get_value+0xba>
 8014016:	2b04      	cmp	r3, #4
 8014018:	d00f      	beq.n	801403a <param_get_value+0xc8>
 801401a:	2b01      	cmp	r3, #1
 801401c:	d111      	bne.n	8014042 <param_get_value+0xd0>
			case 1:
				v8 = *((int8_t *)p);
 801401e:	69fb      	ldr	r3, [r7, #28]
 8014020:	781b      	ldrb	r3, [r3, #0]
 8014022:	747b      	strb	r3, [r7, #17]
				v32 = (int32_t)v8;
 8014024:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8014028:	61bb      	str	r3, [r7, #24]
				break;
 801402a:	e00c      	b.n	8014046 <param_get_value+0xd4>
			case 2:
				v16 = *((int16_t *)p);
 801402c:	69fb      	ldr	r3, [r7, #28]
 801402e:	881b      	ldrh	r3, [r3, #0]
 8014030:	827b      	strh	r3, [r7, #18]
				v32 = (int32_t)v16;
 8014032:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014036:	61bb      	str	r3, [r7, #24]
				break;
 8014038:	e005      	b.n	8014046 <param_get_value+0xd4>
			case 4:
				v32 = *((int32_t *)p);
 801403a:	69fb      	ldr	r3, [r7, #28]
 801403c:	681b      	ldr	r3, [r3, #0]
 801403e:	61bb      	str	r3, [r7, #24]
				break;
 8014040:	e001      	b.n	8014046 <param_get_value+0xd4>
			default:
				return 12;
 8014042:	230c      	movs	r3, #12
 8014044:	e003      	b.n	801404e <param_get_value+0xdc>
			}
			*pvalue = v32;
 8014046:	683b      	ldr	r3, [r7, #0]
 8014048:	69ba      	ldr	r2, [r7, #24]
 801404a:	601a      	str	r2, [r3, #0]
		}
	}
	return 0;
 801404c:	2300      	movs	r3, #0
}
 801404e:	4618      	mov	r0, r3
 8014050:	3720      	adds	r7, #32
 8014052:	46bd      	mov	sp, r7
 8014054:	bd80      	pop	{r7, pc}

08014056 <param_set_value>:
int param_set_value(const param_t *params, void *ptr, const char *name, int32_t value)
{
 8014056:	b580      	push	{r7, lr}
 8014058:	b088      	sub	sp, #32
 801405a:	af00      	add	r7, sp, #0
 801405c:	60f8      	str	r0, [r7, #12]
 801405e:	60b9      	str	r1, [r7, #8]
 8014060:	607a      	str	r2, [r7, #4]
 8014062:	603b      	str	r3, [r7, #0]
	param_t *prm = get_param_def(params, name);
 8014064:	6879      	ldr	r1, [r7, #4]
 8014066:	68f8      	ldr	r0, [r7, #12]
 8014068:	f7ff ff64 	bl	8013f34 <get_param_def>
 801406c:	61b8      	str	r0, [r7, #24]
	if (!prm) {
 801406e:	69bb      	ldr	r3, [r7, #24]
 8014070:	2b00      	cmp	r3, #0
 8014072:	d101      	bne.n	8014078 <param_set_value+0x22>
		return 10;
 8014074:	230a      	movs	r3, #10
 8014076:	e03f      	b.n	80140f8 <param_set_value+0xa2>
	}
	if (prm->setter) {
 8014078:	69bb      	ldr	r3, [r7, #24]
 801407a:	691b      	ldr	r3, [r3, #16]
 801407c:	2b00      	cmp	r3, #0
 801407e:	d005      	beq.n	801408c <param_set_value+0x36>
		//if ((1)) return 42;
		prm->setter(prm, value);
 8014080:	69bb      	ldr	r3, [r7, #24]
 8014082:	691b      	ldr	r3, [r3, #16]
 8014084:	6839      	ldr	r1, [r7, #0]
 8014086:	69b8      	ldr	r0, [r7, #24]
 8014088:	4798      	blx	r3
 801408a:	e034      	b.n	80140f6 <param_set_value+0xa0>
	} else {
		uint8_t *p = ptr;
 801408c:	68bb      	ldr	r3, [r7, #8]
 801408e:	61fb      	str	r3, [r7, #28]
		if (prm->ptr) p = prm->ptr;
 8014090:	69bb      	ldr	r3, [r7, #24]
 8014092:	685b      	ldr	r3, [r3, #4]
 8014094:	2b00      	cmp	r3, #0
 8014096:	d002      	beq.n	801409e <param_set_value+0x48>
 8014098:	69bb      	ldr	r3, [r7, #24]
 801409a:	685b      	ldr	r3, [r3, #4]
 801409c:	61fb      	str	r3, [r7, #28]
		p += prm->offset;
 801409e:	69bb      	ldr	r3, [r7, #24]
 80140a0:	689b      	ldr	r3, [r3, #8]
 80140a2:	461a      	mov	r2, r3
 80140a4:	69fb      	ldr	r3, [r7, #28]
 80140a6:	4413      	add	r3, r2
 80140a8:	61fb      	str	r3, [r7, #28]
		if (!p) return 11;
 80140aa:	69fb      	ldr	r3, [r7, #28]
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	d101      	bne.n	80140b4 <param_set_value+0x5e>
 80140b0:	230b      	movs	r3, #11
 80140b2:	e021      	b.n	80140f8 <param_set_value+0xa2>
		if ((int)p<0x100) return 12; // probably an error if low ptr
 80140b4:	69fb      	ldr	r3, [r7, #28]
 80140b6:	2bff      	cmp	r3, #255	; 0xff
 80140b8:	dc01      	bgt.n	80140be <param_set_value+0x68>
 80140ba:	230c      	movs	r3, #12
 80140bc:	e01c      	b.n	80140f8 <param_set_value+0xa2>

		int8_t v8; int16_t v16; int32_t v32;
		v32 = value;
 80140be:	683b      	ldr	r3, [r7, #0]
 80140c0:	617b      	str	r3, [r7, #20]
		switch (prm->size) {
 80140c2:	69bb      	ldr	r3, [r7, #24]
 80140c4:	695b      	ldr	r3, [r3, #20]
 80140c6:	2b02      	cmp	r3, #2
 80140c8:	d009      	beq.n	80140de <param_set_value+0x88>
 80140ca:	2b04      	cmp	r3, #4
 80140cc:	d00d      	beq.n	80140ea <param_set_value+0x94>
 80140ce:	2b01      	cmp	r3, #1
 80140d0:	d10f      	bne.n	80140f2 <param_set_value+0x9c>
		case 1:
			v8 = (int8_t) v32;
 80140d2:	697b      	ldr	r3, [r7, #20]
 80140d4:	747b      	strb	r3, [r7, #17]
			*((int8_t *)p) = v8;
 80140d6:	69fb      	ldr	r3, [r7, #28]
 80140d8:	7c7a      	ldrb	r2, [r7, #17]
 80140da:	701a      	strb	r2, [r3, #0]
			break;
 80140dc:	e00b      	b.n	80140f6 <param_set_value+0xa0>
		case 2:
			v16 = (int16_t) v32;
 80140de:	697b      	ldr	r3, [r7, #20]
 80140e0:	827b      	strh	r3, [r7, #18]
			*((int16_t *)p) = v16;
 80140e2:	69fb      	ldr	r3, [r7, #28]
 80140e4:	8a7a      	ldrh	r2, [r7, #18]
 80140e6:	801a      	strh	r2, [r3, #0]
			break;
 80140e8:	e005      	b.n	80140f6 <param_set_value+0xa0>
		case 4:
			*((int32_t *)p) = v32;
 80140ea:	69fb      	ldr	r3, [r7, #28]
 80140ec:	697a      	ldr	r2, [r7, #20]
 80140ee:	601a      	str	r2, [r3, #0]
			break;
 80140f0:	e001      	b.n	80140f6 <param_set_value+0xa0>
		default:
			return 12;
 80140f2:	230c      	movs	r3, #12
 80140f4:	e000      	b.n	80140f8 <param_set_value+0xa2>
		}
	}
	return 0;
 80140f6:	2300      	movs	r3, #0
}
 80140f8:	4618      	mov	r0, r3
 80140fa:	3720      	adds	r7, #32
 80140fc:	46bd      	mov	sp, r7
 80140fe:	bd80      	pop	{r7, pc}

08014100 <itm_debug1>:
//void _itm_debug1(const char *msg, int v);
//void _itm_debug2(const char *msg, int v1, int v2);
void _itm_debug3(const char *msg, int v1, int v2, int v3, int n);

static inline void itm_debug1(uint32_t f, const char *msg, int v)
{
 8014100:	b580      	push	{r7, lr}
 8014102:	b086      	sub	sp, #24
 8014104:	af02      	add	r7, sp, #8
 8014106:	60f8      	str	r0, [r7, #12]
 8014108:	60b9      	str	r1, [r7, #8]
 801410a:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 801410c:	4b08      	ldr	r3, [pc, #32]	; (8014130 <itm_debug1+0x30>)
 801410e:	681a      	ldr	r2, [r3, #0]
 8014110:	68fb      	ldr	r3, [r7, #12]
 8014112:	4013      	ands	r3, r2
 8014114:	2b00      	cmp	r3, #0
 8014116:	d007      	beq.n	8014128 <itm_debug1+0x28>
 8014118:	2301      	movs	r3, #1
 801411a:	9300      	str	r3, [sp, #0]
 801411c:	2300      	movs	r3, #0
 801411e:	2200      	movs	r2, #0
 8014120:	6879      	ldr	r1, [r7, #4]
 8014122:	68b8      	ldr	r0, [r7, #8]
 8014124:	f002 fbd4 	bl	80168d0 <_itm_debug3>
}
 8014128:	bf00      	nop
 801412a:	3710      	adds	r7, #16
 801412c:	46bd      	mov	sp, r7
 801412e:	bd80      	pop	{r7, pc}
 8014130:	2000047c 	.word	0x2000047c

08014134 <config_error>:
{
	return trainctl_error('A', code, msg);
}

static inline void *config_error(int code, const char *msg)
{
 8014134:	b580      	push	{r7, lr}
 8014136:	b082      	sub	sp, #8
 8014138:	af00      	add	r7, sp, #0
 801413a:	6078      	str	r0, [r7, #4]
 801413c:	6039      	str	r1, [r7, #0]
	itm_debug1(DBG_CONFIG, msg, code);
 801413e:	687a      	ldr	r2, [r7, #4]
 8014140:	6839      	ldr	r1, [r7, #0]
 8014142:	2080      	movs	r0, #128	; 0x80
 8014144:	f7ff ffdc 	bl	8014100 <itm_debug1>
	trainctl_error('G', code, msg);
 8014148:	683a      	ldr	r2, [r7, #0]
 801414a:	6879      	ldr	r1, [r7, #4]
 801414c:	2047      	movs	r0, #71	; 0x47
 801414e:	f7ff fed1 	bl	8013ef4 <trainctl_error>
	return NULL;
 8014152:	2300      	movs	r3, #0
}
 8014154:	4618      	mov	r0, r3
 8014156:	3708      	adds	r7, #8
 8014158:	46bd      	mov	sp, r7
 801415a:	bd80      	pop	{r7, pc}

0801415c <get_canton_cnf>:
        //static turnout_vars_t TurnoutVars[NUM_TURNOUTS];

static int setup_done = 1;

const canton_config_t *get_canton_cnf(int idx)
{
 801415c:	b580      	push	{r7, lr}
 801415e:	b082      	sub	sp, #8
 8014160:	af00      	add	r7, sp, #0
 8014162:	6078      	str	r0, [r7, #4]
	if (!setup_done) return config_error(ERR_SETUP_KO, "railconfig_setup_default not called");
 8014164:	4b0e      	ldr	r3, [pc, #56]	; (80141a0 <get_canton_cnf+0x44>)
 8014166:	681b      	ldr	r3, [r3, #0]
 8014168:	2b00      	cmp	r3, #0
 801416a:	d106      	bne.n	801417a <get_canton_cnf+0x1e>
 801416c:	490d      	ldr	r1, [pc, #52]	; (80141a4 <get_canton_cnf+0x48>)
 801416e:	f06f 0009 	mvn.w	r0, #9
 8014172:	f7ff ffdf 	bl	8014134 <config_error>
 8014176:	4603      	mov	r3, r0
 8014178:	e00e      	b.n	8014198 <get_canton_cnf+0x3c>
	if ((idx<0) || (idx>= NUM_CANTONS)) return NULL;
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	2b00      	cmp	r3, #0
 801417e:	db02      	blt.n	8014186 <get_canton_cnf+0x2a>
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	2b07      	cmp	r3, #7
 8014184:	dd01      	ble.n	801418a <get_canton_cnf+0x2e>
 8014186:	2300      	movs	r3, #0
 8014188:	e006      	b.n	8014198 <get_canton_cnf+0x3c>
	return &Cantons[idx];
 801418a:	687a      	ldr	r2, [r7, #4]
 801418c:	4613      	mov	r3, r2
 801418e:	005b      	lsls	r3, r3, #1
 8014190:	4413      	add	r3, r2
 8014192:	011b      	lsls	r3, r3, #4
 8014194:	4a04      	ldr	r2, [pc, #16]	; (80141a8 <get_canton_cnf+0x4c>)
 8014196:	4413      	add	r3, r2
}
 8014198:	4618      	mov	r0, r3
 801419a:	3708      	adds	r7, #8
 801419c:	46bd      	mov	sp, r7
 801419e:	bd80      	pop	{r7, pc}
 80141a0:	200003c0 	.word	0x200003c0
 80141a4:	08017324 	.word	0x08017324
 80141a8:	20000224 	.word	0x20000224

080141ac <get_train_cnf>:
	if ((idx<0) || (idx>= NUM_CANTONS)) return NULL;
	return &BlockCantonsVars[idx];
}
*/
const train_config_t *get_train_cnf(int idx)
{
 80141ac:	b580      	push	{r7, lr}
 80141ae:	b082      	sub	sp, #8
 80141b0:	af00      	add	r7, sp, #0
 80141b2:	6078      	str	r0, [r7, #4]
	if (!setup_done) return config_error(ERR_SETUP_KO, "railconfig_setup_default not called");
 80141b4:	4b0e      	ldr	r3, [pc, #56]	; (80141f0 <get_train_cnf+0x44>)
 80141b6:	681b      	ldr	r3, [r3, #0]
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	d106      	bne.n	80141ca <get_train_cnf+0x1e>
 80141bc:	490d      	ldr	r1, [pc, #52]	; (80141f4 <get_train_cnf+0x48>)
 80141be:	f06f 0009 	mvn.w	r0, #9
 80141c2:	f7ff ffb7 	bl	8014134 <config_error>
 80141c6:	4603      	mov	r3, r0
 80141c8:	e00e      	b.n	80141e8 <get_train_cnf+0x3c>
	if ((idx<0) || (idx>= NUM_TRAINS)) return NULL;
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	db02      	blt.n	80141d6 <get_train_cnf+0x2a>
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	dd01      	ble.n	80141da <get_train_cnf+0x2e>
 80141d6:	2300      	movs	r3, #0
 80141d8:	e006      	b.n	80141e8 <get_train_cnf+0x3c>
	return &Trains[idx];
 80141da:	687a      	ldr	r2, [r7, #4]
 80141dc:	4613      	mov	r3, r2
 80141de:	00db      	lsls	r3, r3, #3
 80141e0:	1a9b      	subs	r3, r3, r2
 80141e2:	009b      	lsls	r3, r3, #2
 80141e4:	4a04      	ldr	r2, [pc, #16]	; (80141f8 <get_train_cnf+0x4c>)
 80141e6:	4413      	add	r3, r2
}
 80141e8:	4618      	mov	r0, r3
 80141ea:	3708      	adds	r7, #8
 80141ec:	46bd      	mov	sp, r7
 80141ee:	bd80      	pop	{r7, pc}
 80141f0:	200003c0 	.word	0x200003c0
 80141f4:	08017324 	.word	0x08017324
 80141f8:	200003a4 	.word	0x200003a4

080141fc <get_turnout_cnf>:
	return &TrainsVars[idx];
}

*/
const turnout_config_t  *get_turnout_cnf(int idx)
{
 80141fc:	b580      	push	{r7, lr}
 80141fe:	b082      	sub	sp, #8
 8014200:	af00      	add	r7, sp, #0
 8014202:	6078      	str	r0, [r7, #4]
	if (!setup_done) return config_error(ERR_SETUP_KO, "railconfig_setup_default not called");
 8014204:	4b0d      	ldr	r3, [pc, #52]	; (801423c <get_turnout_cnf+0x40>)
 8014206:	681b      	ldr	r3, [r3, #0]
 8014208:	2b00      	cmp	r3, #0
 801420a:	d106      	bne.n	801421a <get_turnout_cnf+0x1e>
 801420c:	490c      	ldr	r1, [pc, #48]	; (8014240 <get_turnout_cnf+0x44>)
 801420e:	f06f 0009 	mvn.w	r0, #9
 8014212:	f7ff ff8f 	bl	8014134 <config_error>
 8014216:	4603      	mov	r3, r0
 8014218:	e00b      	b.n	8014232 <get_turnout_cnf+0x36>
	if ((idx<0) || (idx>= NUM_TURNOUTS)) return NULL;
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	2b00      	cmp	r3, #0
 801421e:	db02      	blt.n	8014226 <get_turnout_cnf+0x2a>
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	2b00      	cmp	r3, #0
 8014224:	dd01      	ble.n	801422a <get_turnout_cnf+0x2e>
 8014226:	2300      	movs	r3, #0
 8014228:	e003      	b.n	8014232 <get_turnout_cnf+0x36>
	return &Turnouts[idx];
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	00db      	lsls	r3, r3, #3
 801422e:	4a05      	ldr	r2, [pc, #20]	; (8014244 <get_turnout_cnf+0x48>)
 8014230:	4413      	add	r3, r2
}
 8014232:	4618      	mov	r0, r3
 8014234:	3708      	adds	r7, #8
 8014236:	46bd      	mov	sp, r7
 8014238:	bd80      	pop	{r7, pc}
 801423a:	bf00      	nop
 801423c:	200003c0 	.word	0x200003c0
 8014240:	08017324 	.word	0x08017324
 8014244:	08018ad0 	.word	0x08018ad0

08014248 <stat_val_get>:
static const int numvalcanton = sizeof(statvalcanton)/sizeof(statvalcanton[0]);



int32_t stat_val_get(int step, int *pdone)
{
 8014248:	b480      	push	{r7}
 801424a:	b083      	sub	sp, #12
 801424c:	af00      	add	r7, sp, #0
 801424e:	6078      	str	r0, [r7, #4]
 8014250:	6039      	str	r1, [r7, #0]
	*pdone = 1;
 8014252:	683b      	ldr	r3, [r7, #0]
 8014254:	2201      	movs	r2, #1
 8014256:	601a      	str	r2, [r3, #0]
	return 0;
 8014258:	2300      	movs	r3, #0
		train_vars_t *vars = get_train_vars(nt);
		const stat_val_t *sv = &statvaltrain[idx];
		return _getval(vars, sv->off, sv->l);
	}
#endif
}
 801425a:	4618      	mov	r0, r3
 801425c:	370c      	adds	r7, #12
 801425e:	46bd      	mov	sp, r7
 8014260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014264:	4770      	bx	lr

08014266 <txframe_send_notif>:
	txframe_send(m, 0);
}


static inline void txframe_send_notif(frame_msg_t *m, int len)
{
 8014266:	b580      	push	{r7, lr}
 8014268:	b082      	sub	sp, #8
 801426a:	af00      	add	r7, sp, #0
 801426c:	6078      	str	r0, [r7, #4]
 801426e:	6039      	str	r1, [r7, #0]
	m->t = TXFRAME_TYPE_NOTIF;
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	2202      	movs	r2, #2
 8014274:	701a      	strb	r2, [r3, #0]
	if (len) m->len = len;
 8014276:	683b      	ldr	r3, [r7, #0]
 8014278:	2b00      	cmp	r3, #0
 801427a:	d003      	beq.n	8014284 <txframe_send_notif+0x1e>
 801427c:	683b      	ldr	r3, [r7, #0]
 801427e:	b2da      	uxtb	r2, r3
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	705a      	strb	r2, [r3, #1]
	txframe_send(m, 1);
 8014284:	2101      	movs	r1, #1
 8014286:	6878      	ldr	r0, [r7, #4]
 8014288:	f002 f9f2 	bl	8016670 <txframe_send>
}
 801428c:	bf00      	nop
 801428e:	3708      	adds	r7, #8
 8014290:	46bd      	mov	sp, r7
 8014292:	bd80      	pop	{r7, pc}

08014294 <mqf_read_to_forward_usb>:


LFMQUEUE_DEF_H(to_forward, msg_64_t)
LFMQUEUE_DEF_H(from_forward, msg_64_t)

LFMQUEUE_DEF_H(to_forward_usb, msg_64_t)
 8014294:	b580      	push	{r7, lr}
 8014296:	b082      	sub	sp, #8
 8014298:	af00      	add	r7, sp, #0
 801429a:	6078      	str	r0, [r7, #4]
 801429c:	6879      	ldr	r1, [r7, #4]
 801429e:	4804      	ldr	r0, [pc, #16]	; (80142b0 <mqf_read_to_forward_usb+0x1c>)
 80142a0:	f002 fc7c 	bl	8016b9c <mqf_read>
 80142a4:	4603      	mov	r3, r0
 80142a6:	4618      	mov	r0, r3
 80142a8:	3708      	adds	r7, #8
 80142aa:	46bd      	mov	sp, r7
 80142ac:	bd80      	pop	{r7, pc}
 80142ae:	bf00      	nop
 80142b0:	20000428 	.word	0x20000428

080142b4 <mqf_write_from_forward_usb>:
LFMQUEUE_DEF_H(from_forward_usb, msg_64_t)
 80142b4:	b580      	push	{r7, lr}
 80142b6:	b082      	sub	sp, #8
 80142b8:	af00      	add	r7, sp, #0
 80142ba:	6078      	str	r0, [r7, #4]
 80142bc:	6879      	ldr	r1, [r7, #4]
 80142be:	4804      	ldr	r0, [pc, #16]	; (80142d0 <mqf_write_from_forward_usb+0x1c>)
 80142c0:	f002 fbf2 	bl	8016aa8 <mqf_write>
 80142c4:	4603      	mov	r3, r0
 80142c6:	4618      	mov	r0, r3
 80142c8:	3708      	adds	r7, #8
 80142ca:	46bd      	mov	sp, r7
 80142cc:	bd80      	pop	{r7, pc}
 80142ce:	bf00      	nop
 80142d0:	20000434 	.word	0x20000434

080142d4 <_frm_escape>:

#define FRAME_DELIM '|'
#define FRAME_ESC   '\\'

static int _frm_escape(uint8_t *buf, int len, int maxlen)
{
 80142d4:	b480      	push	{r7}
 80142d6:	b089      	sub	sp, #36	; 0x24
 80142d8:	af00      	add	r7, sp, #0
 80142da:	60f8      	str	r0, [r7, #12]
 80142dc:	60b9      	str	r1, [r7, #8]
 80142de:	607a      	str	r2, [r7, #4]
    int ne = 0;
 80142e0:	2300      	movs	r3, #0
 80142e2:	61fb      	str	r3, [r7, #28]
    for (int i=0; i<len; i++) {
 80142e4:	2300      	movs	r3, #0
 80142e6:	61bb      	str	r3, [r7, #24]
 80142e8:	e011      	b.n	801430e <_frm_escape+0x3a>
        if ((FRAME_ESC==buf[i]) || (FRAME_DELIM==buf[i])) {
 80142ea:	69bb      	ldr	r3, [r7, #24]
 80142ec:	68fa      	ldr	r2, [r7, #12]
 80142ee:	4413      	add	r3, r2
 80142f0:	781b      	ldrb	r3, [r3, #0]
 80142f2:	2b5c      	cmp	r3, #92	; 0x5c
 80142f4:	d005      	beq.n	8014302 <_frm_escape+0x2e>
 80142f6:	69bb      	ldr	r3, [r7, #24]
 80142f8:	68fa      	ldr	r2, [r7, #12]
 80142fa:	4413      	add	r3, r2
 80142fc:	781b      	ldrb	r3, [r3, #0]
 80142fe:	2b7c      	cmp	r3, #124	; 0x7c
 8014300:	d102      	bne.n	8014308 <_frm_escape+0x34>
            ne++;
 8014302:	69fb      	ldr	r3, [r7, #28]
 8014304:	3301      	adds	r3, #1
 8014306:	61fb      	str	r3, [r7, #28]
    for (int i=0; i<len; i++) {
 8014308:	69bb      	ldr	r3, [r7, #24]
 801430a:	3301      	adds	r3, #1
 801430c:	61bb      	str	r3, [r7, #24]
 801430e:	69ba      	ldr	r2, [r7, #24]
 8014310:	68bb      	ldr	r3, [r7, #8]
 8014312:	429a      	cmp	r2, r3
 8014314:	dbe9      	blt.n	80142ea <_frm_escape+0x16>
        }
    }
    int nl = ne+len;
 8014316:	69fa      	ldr	r2, [r7, #28]
 8014318:	68bb      	ldr	r3, [r7, #8]
 801431a:	4413      	add	r3, r2
 801431c:	613b      	str	r3, [r7, #16]
    if (nl>maxlen) return -1;
 801431e:	693a      	ldr	r2, [r7, #16]
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	429a      	cmp	r2, r3
 8014324:	dd02      	ble.n	801432c <_frm_escape+0x58>
 8014326:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801432a:	e02f      	b.n	801438c <_frm_escape+0xb8>
    for (int i=len-1+ne; i>=0; i--) {
 801432c:	68bb      	ldr	r3, [r7, #8]
 801432e:	3b01      	subs	r3, #1
 8014330:	69fa      	ldr	r2, [r7, #28]
 8014332:	4413      	add	r3, r2
 8014334:	617b      	str	r3, [r7, #20]
 8014336:	e025      	b.n	8014384 <_frm_escape+0xb0>
        buf[i] = buf[i-ne];
 8014338:	697a      	ldr	r2, [r7, #20]
 801433a:	69fb      	ldr	r3, [r7, #28]
 801433c:	1ad3      	subs	r3, r2, r3
 801433e:	461a      	mov	r2, r3
 8014340:	68fb      	ldr	r3, [r7, #12]
 8014342:	441a      	add	r2, r3
 8014344:	697b      	ldr	r3, [r7, #20]
 8014346:	68f9      	ldr	r1, [r7, #12]
 8014348:	440b      	add	r3, r1
 801434a:	7812      	ldrb	r2, [r2, #0]
 801434c:	701a      	strb	r2, [r3, #0]
        if ((FRAME_ESC==buf[i]) || (FRAME_DELIM==buf[i])) {
 801434e:	697b      	ldr	r3, [r7, #20]
 8014350:	68fa      	ldr	r2, [r7, #12]
 8014352:	4413      	add	r3, r2
 8014354:	781b      	ldrb	r3, [r3, #0]
 8014356:	2b5c      	cmp	r3, #92	; 0x5c
 8014358:	d005      	beq.n	8014366 <_frm_escape+0x92>
 801435a:	697b      	ldr	r3, [r7, #20]
 801435c:	68fa      	ldr	r2, [r7, #12]
 801435e:	4413      	add	r3, r2
 8014360:	781b      	ldrb	r3, [r3, #0]
 8014362:	2b7c      	cmp	r3, #124	; 0x7c
 8014364:	d10b      	bne.n	801437e <_frm_escape+0xaa>
            buf[i-1]=FRAME_ESC;
 8014366:	697b      	ldr	r3, [r7, #20]
 8014368:	3b01      	subs	r3, #1
 801436a:	68fa      	ldr	r2, [r7, #12]
 801436c:	4413      	add	r3, r2
 801436e:	225c      	movs	r2, #92	; 0x5c
 8014370:	701a      	strb	r2, [r3, #0]
            ne--;
 8014372:	69fb      	ldr	r3, [r7, #28]
 8014374:	3b01      	subs	r3, #1
 8014376:	61fb      	str	r3, [r7, #28]
            i--;
 8014378:	697b      	ldr	r3, [r7, #20]
 801437a:	3b01      	subs	r3, #1
 801437c:	617b      	str	r3, [r7, #20]
    for (int i=len-1+ne; i>=0; i--) {
 801437e:	697b      	ldr	r3, [r7, #20]
 8014380:	3b01      	subs	r3, #1
 8014382:	617b      	str	r3, [r7, #20]
 8014384:	697b      	ldr	r3, [r7, #20]
 8014386:	2b00      	cmp	r3, #0
 8014388:	dad6      	bge.n	8014338 <_frm_escape+0x64>
        }
    }
    return nl;
 801438a:	693b      	ldr	r3, [r7, #16]
}
 801438c:	4618      	mov	r0, r3
 801438e:	3724      	adds	r7, #36	; 0x24
 8014390:	46bd      	mov	sp, r7
 8014392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014396:	4770      	bx	lr

08014398 <_frm_escape2>:

static int _frm_escape2(uint8_t *buf,  uint8_t *org, int len, int maxlen)
{
 8014398:	b480      	push	{r7}
 801439a:	b087      	sub	sp, #28
 801439c:	af00      	add	r7, sp, #0
 801439e:	60f8      	str	r0, [r7, #12]
 80143a0:	60b9      	str	r1, [r7, #8]
 80143a2:	607a      	str	r2, [r7, #4]
 80143a4:	603b      	str	r3, [r7, #0]
    int ne = 0;
 80143a6:	2300      	movs	r3, #0
 80143a8:	617b      	str	r3, [r7, #20]
    for (int i=0; i<len; i++) {
 80143aa:	2300      	movs	r3, #0
 80143ac:	613b      	str	r3, [r7, #16]
 80143ae:	e02f      	b.n	8014410 <_frm_escape2+0x78>
    	if (ne>=maxlen) return -1;
 80143b0:	697a      	ldr	r2, [r7, #20]
 80143b2:	683b      	ldr	r3, [r7, #0]
 80143b4:	429a      	cmp	r2, r3
 80143b6:	db02      	blt.n	80143be <_frm_escape2+0x26>
 80143b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80143bc:	e02d      	b.n	801441a <_frm_escape2+0x82>
        if ((FRAME_ESC==org[i]) || (FRAME_DELIM==org[i])) {
 80143be:	693b      	ldr	r3, [r7, #16]
 80143c0:	68ba      	ldr	r2, [r7, #8]
 80143c2:	4413      	add	r3, r2
 80143c4:	781b      	ldrb	r3, [r3, #0]
 80143c6:	2b5c      	cmp	r3, #92	; 0x5c
 80143c8:	d005      	beq.n	80143d6 <_frm_escape2+0x3e>
 80143ca:	693b      	ldr	r3, [r7, #16]
 80143cc:	68ba      	ldr	r2, [r7, #8]
 80143ce:	4413      	add	r3, r2
 80143d0:	781b      	ldrb	r3, [r3, #0]
 80143d2:	2b7c      	cmp	r3, #124	; 0x7c
 80143d4:	d10e      	bne.n	80143f4 <_frm_escape2+0x5c>
        	buf[ne++] = FRAME_ESC;
 80143d6:	697b      	ldr	r3, [r7, #20]
 80143d8:	1c5a      	adds	r2, r3, #1
 80143da:	617a      	str	r2, [r7, #20]
 80143dc:	461a      	mov	r2, r3
 80143de:	68fb      	ldr	r3, [r7, #12]
 80143e0:	4413      	add	r3, r2
 80143e2:	225c      	movs	r2, #92	; 0x5c
 80143e4:	701a      	strb	r2, [r3, #0]
        	if (ne>=maxlen) return -1;
 80143e6:	697a      	ldr	r2, [r7, #20]
 80143e8:	683b      	ldr	r3, [r7, #0]
 80143ea:	429a      	cmp	r2, r3
 80143ec:	db02      	blt.n	80143f4 <_frm_escape2+0x5c>
 80143ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80143f2:	e012      	b.n	801441a <_frm_escape2+0x82>
        }
        buf[ne++] = org[i];
 80143f4:	693b      	ldr	r3, [r7, #16]
 80143f6:	68ba      	ldr	r2, [r7, #8]
 80143f8:	441a      	add	r2, r3
 80143fa:	697b      	ldr	r3, [r7, #20]
 80143fc:	1c59      	adds	r1, r3, #1
 80143fe:	6179      	str	r1, [r7, #20]
 8014400:	4619      	mov	r1, r3
 8014402:	68fb      	ldr	r3, [r7, #12]
 8014404:	440b      	add	r3, r1
 8014406:	7812      	ldrb	r2, [r2, #0]
 8014408:	701a      	strb	r2, [r3, #0]
    for (int i=0; i<len; i++) {
 801440a:	693b      	ldr	r3, [r7, #16]
 801440c:	3301      	adds	r3, #1
 801440e:	613b      	str	r3, [r7, #16]
 8014410:	693a      	ldr	r2, [r7, #16]
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	429a      	cmp	r2, r3
 8014416:	dbcb      	blt.n	80143b0 <_frm_escape2+0x18>
    }
    return ne;
 8014418:	697b      	ldr	r3, [r7, #20]
}
 801441a:	4618      	mov	r0, r3
 801441c:	371c      	adds	r7, #28
 801441e:	46bd      	mov	sp, r7
 8014420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014424:	4770      	bx	lr

08014426 <frm_escape>:
static int frm_escape(uint8_t *buf, int len, int maxlen)
{
 8014426:	b580      	push	{r7, lr}
 8014428:	b086      	sub	sp, #24
 801442a:	af00      	add	r7, sp, #0
 801442c:	60f8      	str	r0, [r7, #12]
 801442e:	60b9      	str	r1, [r7, #8]
 8014430:	607a      	str	r2, [r7, #4]
	//configASSERT(buf[0]==FRAME_DELIM);
	//configASSERT(buf[len-1]==FRAME_DELIM);
    int l = _frm_escape(buf+1, len-2, maxlen-2);
 8014432:	68fb      	ldr	r3, [r7, #12]
 8014434:	1c58      	adds	r0, r3, #1
 8014436:	68bb      	ldr	r3, [r7, #8]
 8014438:	1e99      	subs	r1, r3, #2
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	3b02      	subs	r3, #2
 801443e:	461a      	mov	r2, r3
 8014440:	f7ff ff48 	bl	80142d4 <_frm_escape>
 8014444:	6178      	str	r0, [r7, #20]
    if (l<0) return l;
 8014446:	697b      	ldr	r3, [r7, #20]
 8014448:	2b00      	cmp	r3, #0
 801444a:	da01      	bge.n	8014450 <frm_escape+0x2a>
 801444c:	697b      	ldr	r3, [r7, #20]
 801444e:	e007      	b.n	8014460 <frm_escape+0x3a>
    buf[l+1]=FRAME_DELIM;
 8014450:	697b      	ldr	r3, [r7, #20]
 8014452:	3301      	adds	r3, #1
 8014454:	68fa      	ldr	r2, [r7, #12]
 8014456:	4413      	add	r3, r2
 8014458:	227c      	movs	r2, #124	; 0x7c
 801445a:	701a      	strb	r2, [r3, #0]
    return l+2;
 801445c:	697b      	ldr	r3, [r7, #20]
 801445e:	3302      	adds	r3, #2
}
 8014460:	4618      	mov	r0, r3
 8014462:	3718      	adds	r7, #24
 8014464:	46bd      	mov	sp, r7
 8014466:	bd80      	pop	{r7, pc}

08014468 <usbPollQueues>:
		uint8_t *param, int plen, uint8_t *rbuf, int rbuflen, int *prlen);

static void txframe_send_msg64(msg_64_t *msg);

void usbPollQueues(void)
{
 8014468:	b580      	push	{r7, lr}
 801446a:	b084      	sub	sp, #16
 801446c:	af00      	add	r7, sp, #0
    for (;;) {
        msg_64_t m;
        int rc = mqf_read_to_forward_usb(&m);
 801446e:	463b      	mov	r3, r7
 8014470:	4618      	mov	r0, r3
 8014472:	f7ff ff0f 	bl	8014294 <mqf_read_to_forward_usb>
 8014476:	60f8      	str	r0, [r7, #12]
        if (rc) break;
 8014478:	68fb      	ldr	r3, [r7, #12]
 801447a:	2b00      	cmp	r3, #0
 801447c:	d104      	bne.n	8014488 <usbPollQueues+0x20>
        txframe_send_msg64(&m);
 801447e:	463b      	mov	r3, r7
 8014480:	4618      	mov	r0, r3
 8014482:	f000 fc8d 	bl	8014da0 <txframe_send_msg64>
    for (;;) {
 8014486:	e7f2      	b.n	801446e <usbPollQueues+0x6>
    }
}
 8014488:	bf00      	nop
 801448a:	3710      	adds	r7, #16
 801448c:	46bd      	mov	sp, r7
 801448e:	bd80      	pop	{r7, pc}

08014490 <txrx_process_char>:

void txrx_process_char(uint8_t c, uint8_t *respbuf, int *replen)
{
 8014490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014492:	b08f      	sub	sp, #60	; 0x3c
 8014494:	af04      	add	r7, sp, #16
 8014496:	4603      	mov	r3, r0
 8014498:	60b9      	str	r1, [r7, #8]
 801449a:	607a      	str	r2, [r7, #4]
 801449c:	73fb      	strb	r3, [r7, #15]
	int buflen = *replen;
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	681b      	ldr	r3, [r3, #0]
 80144a2:	623b      	str	r3, [r7, #32]
	*replen = 0;
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	2200      	movs	r2, #0
 80144a8:	601a      	str	r2, [r3, #0]
	if ((c == FRAME_DELIM) && !frm.escape) {
 80144aa:	7bfb      	ldrb	r3, [r7, #15]
 80144ac:	2b7c      	cmp	r3, #124	; 0x7c
 80144ae:	f040 8097 	bne.w	80145e0 <txrx_process_char+0x150>
 80144b2:	4b88      	ldr	r3, [pc, #544]	; (80146d4 <txrx_process_char+0x244>)
 80144b4:	781b      	ldrb	r3, [r3, #0]
 80144b6:	f003 0301 	and.w	r3, r3, #1
 80144ba:	b2db      	uxtb	r3, r3
 80144bc:	2b00      	cmp	r3, #0
 80144be:	f040 808f 	bne.w	80145e0 <txrx_process_char+0x150>
		if (0 == frm.state) {
 80144c2:	4b84      	ldr	r3, [pc, #528]	; (80146d4 <txrx_process_char+0x244>)
 80144c4:	781b      	ldrb	r3, [r3, #0]
 80144c6:	f023 0301 	bic.w	r3, r3, #1
 80144ca:	b2db      	uxtb	r3, r3
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d10b      	bne.n	80144e8 <txrx_process_char+0x58>
			memset(&frm, 0, sizeof(frm));
 80144d0:	2226      	movs	r2, #38	; 0x26
 80144d2:	2100      	movs	r1, #0
 80144d4:	487f      	ldr	r0, [pc, #508]	; (80146d4 <txrx_process_char+0x244>)
 80144d6:	f002 fc02 	bl	8016cde <memset>
			frm.state = 1;
 80144da:	4a7e      	ldr	r2, [pc, #504]	; (80146d4 <txrx_process_char+0x244>)
 80144dc:	7813      	ldrb	r3, [r2, #0]
 80144de:	2101      	movs	r1, #1
 80144e0:	f361 0347 	bfi	r3, r1, #1, #7
 80144e4:	7013      	strb	r3, [r2, #0]
			return;
 80144e6:	e0f1      	b.n	80146cc <txrx_process_char+0x23c>
		} else if (5 == frm.state) {
 80144e8:	4b7a      	ldr	r3, [pc, #488]	; (80146d4 <txrx_process_char+0x244>)
 80144ea:	781b      	ldrb	r3, [r3, #0]
 80144ec:	f023 0301 	bic.w	r3, r3, #1
 80144f0:	b2db      	uxtb	r3, r3
 80144f2:	2b0a      	cmp	r3, #10
 80144f4:	d168      	bne.n	80145c8 <txrx_process_char+0x138>
			frm.state = 0;
 80144f6:	4a77      	ldr	r2, [pc, #476]	; (80146d4 <txrx_process_char+0x244>)
 80144f8:	7813      	ldrb	r3, [r2, #0]
 80144fa:	f36f 0347 	bfc	r3, #1, #7
 80144fe:	7013      	strb	r3, [r2, #0]
			frm.escape = 0;
 8014500:	4a74      	ldr	r2, [pc, #464]	; (80146d4 <txrx_process_char+0x244>)
 8014502:	7813      	ldrb	r3, [r2, #0]
 8014504:	f36f 0300 	bfc	r3, #0, #1
 8014508:	7013      	strb	r3, [r2, #0]
			// process frame
			int i = 0;
 801450a:	2300      	movs	r3, #0
 801450c:	61fb      	str	r3, [r7, #28]
			respbuf[i++] = FRAME_DELIM;
 801450e:	69fb      	ldr	r3, [r7, #28]
 8014510:	1c5a      	adds	r2, r3, #1
 8014512:	61fa      	str	r2, [r7, #28]
 8014514:	461a      	mov	r2, r3
 8014516:	68bb      	ldr	r3, [r7, #8]
 8014518:	4413      	add	r3, r2
 801451a:	227c      	movs	r2, #124	; 0x7c
 801451c:	701a      	strb	r2, [r3, #0]
			respbuf[i++] = frm.seqnum;
 801451e:	69fb      	ldr	r3, [r7, #28]
 8014520:	1c5a      	adds	r2, r3, #1
 8014522:	61fa      	str	r2, [r7, #28]
 8014524:	461a      	mov	r2, r3
 8014526:	68bb      	ldr	r3, [r7, #8]
 8014528:	4413      	add	r3, r2
 801452a:	4a6a      	ldr	r2, [pc, #424]	; (80146d4 <txrx_process_char+0x244>)
 801452c:	7852      	ldrb	r2, [r2, #1]
 801452e:	701a      	strb	r2, [r3, #0]
			respbuf[i++] = 'R';
 8014530:	69fb      	ldr	r3, [r7, #28]
 8014532:	1c5a      	adds	r2, r3, #1
 8014534:	61fa      	str	r2, [r7, #28]
 8014536:	461a      	mov	r2, r3
 8014538:	68bb      	ldr	r3, [r7, #8]
 801453a:	4413      	add	r3, r2
 801453c:	2252      	movs	r2, #82	; 0x52
 801453e:	701a      	strb	r2, [r3, #0]
			int plen = 0;
 8014540:	2300      	movs	r3, #0
 8014542:	617b      	str	r3, [r7, #20]
			uint8_t rc = process_frame_cmd(frm.sel, frm.num, frm.cmd, frm.param, frm.pidx, respbuf+i+1, buflen-i-1, &plen);
 8014544:	4b63      	ldr	r3, [pc, #396]	; (80146d4 <txrx_process_char+0x244>)
 8014546:	7898      	ldrb	r0, [r3, #2]
 8014548:	4b62      	ldr	r3, [pc, #392]	; (80146d4 <txrx_process_char+0x244>)
 801454a:	78dc      	ldrb	r4, [r3, #3]
 801454c:	4b61      	ldr	r3, [pc, #388]	; (80146d4 <txrx_process_char+0x244>)
 801454e:	791d      	ldrb	r5, [r3, #4]
 8014550:	4b60      	ldr	r3, [pc, #384]	; (80146d4 <txrx_process_char+0x244>)
 8014552:	795b      	ldrb	r3, [r3, #5]
 8014554:	461e      	mov	r6, r3
 8014556:	69fb      	ldr	r3, [r7, #28]
 8014558:	3301      	adds	r3, #1
 801455a:	68ba      	ldr	r2, [r7, #8]
 801455c:	4413      	add	r3, r2
 801455e:	6a39      	ldr	r1, [r7, #32]
 8014560:	69fa      	ldr	r2, [r7, #28]
 8014562:	1a8a      	subs	r2, r1, r2
 8014564:	3a01      	subs	r2, #1
 8014566:	f107 0114 	add.w	r1, r7, #20
 801456a:	9103      	str	r1, [sp, #12]
 801456c:	9202      	str	r2, [sp, #8]
 801456e:	9301      	str	r3, [sp, #4]
 8014570:	9600      	str	r6, [sp, #0]
 8014572:	4b59      	ldr	r3, [pc, #356]	; (80146d8 <txrx_process_char+0x248>)
 8014574:	462a      	mov	r2, r5
 8014576:	4621      	mov	r1, r4
 8014578:	f000 f8d2 	bl	8014720 <process_frame_cmd>
 801457c:	4603      	mov	r3, r0
 801457e:	76fb      	strb	r3, [r7, #27]
			respbuf[i++] = rc;
 8014580:	69fb      	ldr	r3, [r7, #28]
 8014582:	1c5a      	adds	r2, r3, #1
 8014584:	61fa      	str	r2, [r7, #28]
 8014586:	461a      	mov	r2, r3
 8014588:	68bb      	ldr	r3, [r7, #8]
 801458a:	4413      	add	r3, r2
 801458c:	7efa      	ldrb	r2, [r7, #27]
 801458e:	701a      	strb	r2, [r3, #0]
			respbuf[i+plen] = FRAME_DELIM;
 8014590:	697a      	ldr	r2, [r7, #20]
 8014592:	69fb      	ldr	r3, [r7, #28]
 8014594:	4413      	add	r3, r2
 8014596:	461a      	mov	r2, r3
 8014598:	68bb      	ldr	r3, [r7, #8]
 801459a:	4413      	add	r3, r2
 801459c:	227c      	movs	r2, #124	; 0x7c
 801459e:	701a      	strb	r2, [r3, #0]
			int l = frm_escape(respbuf, i+plen+1, buflen);
 80145a0:	697a      	ldr	r2, [r7, #20]
 80145a2:	69fb      	ldr	r3, [r7, #28]
 80145a4:	4413      	add	r3, r2
 80145a6:	3301      	adds	r3, #1
 80145a8:	6a3a      	ldr	r2, [r7, #32]
 80145aa:	4619      	mov	r1, r3
 80145ac:	68b8      	ldr	r0, [r7, #8]
 80145ae:	f7ff ff3a 	bl	8014426 <frm_escape>
 80145b2:	6278      	str	r0, [r7, #36]	; 0x24
			if (l<0) {
 80145b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145b6:	2b00      	cmp	r3, #0
 80145b8:	da01      	bge.n	80145be <txrx_process_char+0x12e>
				l = 0;
 80145ba:	2300      	movs	r3, #0
 80145bc:	627b      	str	r3, [r7, #36]	; 0x24
			}
			*replen = l;
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80145c2:	601a      	str	r2, [r3, #0]
			/*if ((0)) {
				static frame_msg_t m;
				m.len = 1+ sprintf(m.frm, "frm resp %d\r\n", *replen);
				txframe_send_debug(&m, 0);
			}*/
			return;
 80145c4:	bf00      	nop
 80145c6:	e081      	b.n	80146cc <txrx_process_char+0x23c>
		} else {
			// short frame, ignore
			frm.state = 1;
 80145c8:	4a42      	ldr	r2, [pc, #264]	; (80146d4 <txrx_process_char+0x244>)
 80145ca:	7813      	ldrb	r3, [r2, #0]
 80145cc:	2101      	movs	r1, #1
 80145ce:	f361 0347 	bfi	r3, r1, #1, #7
 80145d2:	7013      	strb	r3, [r2, #0]
			frm.escape = 0;
 80145d4:	4a3f      	ldr	r2, [pc, #252]	; (80146d4 <txrx_process_char+0x244>)
 80145d6:	7813      	ldrb	r3, [r2, #0]
 80145d8:	f36f 0300 	bfc	r3, #0, #1
 80145dc:	7013      	strb	r3, [r2, #0]
			return;
 80145de:	e075      	b.n	80146cc <txrx_process_char+0x23c>
		}
	}
	if (c==FRAME_ESC && !frm.escape) {
 80145e0:	7bfb      	ldrb	r3, [r7, #15]
 80145e2:	2b5c      	cmp	r3, #92	; 0x5c
 80145e4:	d10c      	bne.n	8014600 <txrx_process_char+0x170>
 80145e6:	4b3b      	ldr	r3, [pc, #236]	; (80146d4 <txrx_process_char+0x244>)
 80145e8:	781b      	ldrb	r3, [r3, #0]
 80145ea:	f003 0301 	and.w	r3, r3, #1
 80145ee:	b2db      	uxtb	r3, r3
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	d105      	bne.n	8014600 <txrx_process_char+0x170>
		// state is >0 here
		frm.escape = 1;
 80145f4:	4a37      	ldr	r2, [pc, #220]	; (80146d4 <txrx_process_char+0x244>)
 80145f6:	7813      	ldrb	r3, [r2, #0]
 80145f8:	f043 0301 	orr.w	r3, r3, #1
 80145fc:	7013      	strb	r3, [r2, #0]
		return;
 80145fe:	e065      	b.n	80146cc <txrx_process_char+0x23c>
	}

	//  |sSNCvv...|
	switch (frm.state) {
 8014600:	4b34      	ldr	r3, [pc, #208]	; (80146d4 <txrx_process_char+0x244>)
 8014602:	781b      	ldrb	r3, [r3, #0]
 8014604:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8014608:	b2db      	uxtb	r3, r3
 801460a:	3b01      	subs	r3, #1
 801460c:	2b04      	cmp	r3, #4
 801460e:	d80d      	bhi.n	801462c <txrx_process_char+0x19c>
 8014610:	a201      	add	r2, pc, #4	; (adr r2, 8014618 <txrx_process_char+0x188>)
 8014612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014616:	bf00      	nop
 8014618:	08014639 	.word	0x08014639
 801461c:	0801464d 	.word	0x0801464d
 8014620:	08014661 	.word	0x08014661
 8014624:	08014675 	.word	0x08014675
 8014628:	08014689 	.word	0x08014689
	default:
		frm.escape = 0;
 801462c:	4a29      	ldr	r2, [pc, #164]	; (80146d4 <txrx_process_char+0x244>)
 801462e:	7813      	ldrb	r3, [r2, #0]
 8014630:	f36f 0300 	bfc	r3, #0, #1
 8014634:	7013      	strb	r3, [r2, #0]
		//configAssert(0);
		break;
 8014636:	e044      	b.n	80146c2 <txrx_process_char+0x232>
	case 1:
		frm.seqnum = c;
 8014638:	4a26      	ldr	r2, [pc, #152]	; (80146d4 <txrx_process_char+0x244>)
 801463a:	7bfb      	ldrb	r3, [r7, #15]
 801463c:	7053      	strb	r3, [r2, #1]
		frm.state = 2;
 801463e:	4a25      	ldr	r2, [pc, #148]	; (80146d4 <txrx_process_char+0x244>)
 8014640:	7813      	ldrb	r3, [r2, #0]
 8014642:	2102      	movs	r1, #2
 8014644:	f361 0347 	bfi	r3, r1, #1, #7
 8014648:	7013      	strb	r3, [r2, #0]
		break;
 801464a:	e03a      	b.n	80146c2 <txrx_process_char+0x232>
	case 2:
		frm.sel = c;
 801464c:	4a21      	ldr	r2, [pc, #132]	; (80146d4 <txrx_process_char+0x244>)
 801464e:	7bfb      	ldrb	r3, [r7, #15]
 8014650:	7093      	strb	r3, [r2, #2]
		frm.state = 3;
 8014652:	4a20      	ldr	r2, [pc, #128]	; (80146d4 <txrx_process_char+0x244>)
 8014654:	7813      	ldrb	r3, [r2, #0]
 8014656:	2103      	movs	r1, #3
 8014658:	f361 0347 	bfi	r3, r1, #1, #7
 801465c:	7013      	strb	r3, [r2, #0]
		break;
 801465e:	e030      	b.n	80146c2 <txrx_process_char+0x232>
	case 3:
		frm.num = c;
 8014660:	4a1c      	ldr	r2, [pc, #112]	; (80146d4 <txrx_process_char+0x244>)
 8014662:	7bfb      	ldrb	r3, [r7, #15]
 8014664:	70d3      	strb	r3, [r2, #3]
		frm.state = 4;
 8014666:	4a1b      	ldr	r2, [pc, #108]	; (80146d4 <txrx_process_char+0x244>)
 8014668:	7813      	ldrb	r3, [r2, #0]
 801466a:	2104      	movs	r1, #4
 801466c:	f361 0347 	bfi	r3, r1, #1, #7
 8014670:	7013      	strb	r3, [r2, #0]
		break;
 8014672:	e026      	b.n	80146c2 <txrx_process_char+0x232>
	case 4:
		frm.cmd = c;
 8014674:	4a17      	ldr	r2, [pc, #92]	; (80146d4 <txrx_process_char+0x244>)
 8014676:	7bfb      	ldrb	r3, [r7, #15]
 8014678:	7113      	strb	r3, [r2, #4]
		frm.state = 5;
 801467a:	4a16      	ldr	r2, [pc, #88]	; (80146d4 <txrx_process_char+0x244>)
 801467c:	7813      	ldrb	r3, [r2, #0]
 801467e:	2105      	movs	r1, #5
 8014680:	f361 0347 	bfi	r3, r1, #1, #7
 8014684:	7013      	strb	r3, [r2, #0]
		break;
 8014686:	e01c      	b.n	80146c2 <txrx_process_char+0x232>
	case 5:
		if (frm.pidx >= MAX_DATA_LEN) {
 8014688:	4b12      	ldr	r3, [pc, #72]	; (80146d4 <txrx_process_char+0x244>)
 801468a:	795b      	ldrb	r3, [r3, #5]
 801468c:	2b1f      	cmp	r3, #31
 801468e:	d90a      	bls.n	80146a6 <txrx_process_char+0x216>
			frm.state = 0;
 8014690:	4a10      	ldr	r2, [pc, #64]	; (80146d4 <txrx_process_char+0x244>)
 8014692:	7813      	ldrb	r3, [r2, #0]
 8014694:	f36f 0347 	bfc	r3, #1, #7
 8014698:	7013      	strb	r3, [r2, #0]
			frm.escape = 0;
 801469a:	4a0e      	ldr	r2, [pc, #56]	; (80146d4 <txrx_process_char+0x244>)
 801469c:	7813      	ldrb	r3, [r2, #0]
 801469e:	f36f 0300 	bfc	r3, #0, #1
 80146a2:	7013      	strb	r3, [r2, #0]
			break;
 80146a4:	e00d      	b.n	80146c2 <txrx_process_char+0x232>
		}
		frm.param[frm.pidx] = c;
 80146a6:	4b0b      	ldr	r3, [pc, #44]	; (80146d4 <txrx_process_char+0x244>)
 80146a8:	795b      	ldrb	r3, [r3, #5]
 80146aa:	461a      	mov	r2, r3
 80146ac:	4b09      	ldr	r3, [pc, #36]	; (80146d4 <txrx_process_char+0x244>)
 80146ae:	4413      	add	r3, r2
 80146b0:	7bfa      	ldrb	r2, [r7, #15]
 80146b2:	719a      	strb	r2, [r3, #6]
		frm.pidx ++;
 80146b4:	4b07      	ldr	r3, [pc, #28]	; (80146d4 <txrx_process_char+0x244>)
 80146b6:	795b      	ldrb	r3, [r3, #5]
 80146b8:	3301      	adds	r3, #1
 80146ba:	b2da      	uxtb	r2, r3
 80146bc:	4b05      	ldr	r3, [pc, #20]	; (80146d4 <txrx_process_char+0x244>)
 80146be:	715a      	strb	r2, [r3, #5]
		break;
 80146c0:	bf00      	nop
	}
        frm.escape = 0;
 80146c2:	4a04      	ldr	r2, [pc, #16]	; (80146d4 <txrx_process_char+0x244>)
 80146c4:	7813      	ldrb	r3, [r2, #0]
 80146c6:	f36f 0300 	bfc	r3, #0, #1
 80146ca:	7013      	strb	r3, [r2, #0]
}
 80146cc:	372c      	adds	r7, #44	; 0x2c
 80146ce:	46bd      	mov	sp, r7
 80146d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80146d2:	bf00      	nop
 80146d4:	200051e4 	.word	0x200051e4
 80146d8:	200051ea 	.word	0x200051ea

080146dc <param_set_pwm>:



// ---------------------------------------------------------------------------------
static void param_set_pwm(struct param *p, int32_t v) // XXX to be moved away
{
 80146dc:	b580      	push	{r7, lr}
 80146de:	b082      	sub	sp, #8
 80146e0:	af00      	add	r7, sp, #0
 80146e2:	6078      	str	r0, [r7, #4]
 80146e4:	6039      	str	r1, [r7, #0]
        set_pwm_freq(v);
 80146e6:	6838      	ldr	r0, [r7, #0]
 80146e8:	f001 fde0 	bl	80162ac <set_pwm_freq>
}
 80146ec:	bf00      	nop
 80146ee:	3708      	adds	r7, #8
 80146f0:	46bd      	mov	sp, r7
 80146f2:	bd80      	pop	{r7, pc}

080146f4 <param_get_numtrains>:
int32_t (*getter)(struct param *);
	void (*setter)(struct param *, int32_t);
*/

static int32_t param_get_numtrains(param_t *p)
{
 80146f4:	b480      	push	{r7}
 80146f6:	b083      	sub	sp, #12
 80146f8:	af00      	add	r7, sp, #0
 80146fa:	6078      	str	r0, [r7, #4]
	return NUM_TRAINS;
 80146fc:	2301      	movs	r3, #1
}
 80146fe:	4618      	mov	r0, r3
 8014700:	370c      	adds	r7, #12
 8014702:	46bd      	mov	sp, r7
 8014704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014708:	4770      	bx	lr

0801470a <param_get_numcantons>:

static int32_t param_get_numcantons(param_t *p)
{
 801470a:	b480      	push	{r7}
 801470c:	b083      	sub	sp, #12
 801470e:	af00      	add	r7, sp, #0
 8014710:	6078      	str	r0, [r7, #4]
	return NUM_CANTONS;
 8014712:	2308      	movs	r3, #8
}
 8014714:	4618      	mov	r0, r3
 8014716:	370c      	adds	r7, #12
 8014718:	46bd      	mov	sp, r7
 801471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801471e:	4770      	bx	lr

08014720 <process_frame_cmd>:




static uint8_t process_frame_cmd(uint8_t sel, uint8_t num,  uint8_t cmd, uint8_t *param, int plen, uint8_t *rbuf, int rbuflen, int *prlen)
{
 8014720:	b580      	push	{r7, lr}
 8014722:	b094      	sub	sp, #80	; 0x50
 8014724:	af04      	add	r7, sp, #16
 8014726:	603b      	str	r3, [r7, #0]
 8014728:	4603      	mov	r3, r0
 801472a:	71fb      	strb	r3, [r7, #7]
 801472c:	460b      	mov	r3, r1
 801472e:	71bb      	strb	r3, [r7, #6]
 8014730:	4613      	mov	r3, r2
 8014732:	717b      	strb	r3, [r7, #5]
    //HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
	int16_t s;
	*prlen = 0;
 8014734:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014736:	2200      	movs	r2, #0
 8014738:	601a      	str	r2, [r3, #0]
	int32_t v,d,min,max;
	int rc=-1;
 801473a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801473e:	63fb      	str	r3, [r7, #60]	; 0x3c

	switch(sel) {
 8014740:	79fb      	ldrb	r3, [r7, #7]
 8014742:	3b36      	subs	r3, #54	; 0x36
 8014744:	2b1e      	cmp	r3, #30
 8014746:	f200 81ff 	bhi.w	8014b48 <process_frame_cmd+0x428>
 801474a:	a201      	add	r2, pc, #4	; (adr r2, 8014750 <process_frame_cmd+0x30>)
 801474c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014750:	080147cd 	.word	0x080147cd
 8014754:	08014b49 	.word	0x08014b49
 8014758:	08014b49 	.word	0x08014b49
 801475c:	08014b49 	.word	0x08014b49
 8014760:	08014b49 	.word	0x08014b49
 8014764:	08014b49 	.word	0x08014b49
 8014768:	08014b49 	.word	0x08014b49
 801476c:	08014b49 	.word	0x08014b49
 8014770:	08014b49 	.word	0x08014b49
 8014774:	08014b49 	.word	0x08014b49
 8014778:	08014b49 	.word	0x08014b49
 801477c:	080147ef 	.word	0x080147ef
 8014780:	08014b49 	.word	0x08014b49
 8014784:	08014b49 	.word	0x08014b49
 8014788:	08014b49 	.word	0x08014b49
 801478c:	08014b49 	.word	0x08014b49
 8014790:	08014b49 	.word	0x08014b49
 8014794:	08014805 	.word	0x08014805
 8014798:	08014b49 	.word	0x08014b49
 801479c:	08014b49 	.word	0x08014b49
 80147a0:	08014b49 	.word	0x08014b49
 80147a4:	08014b49 	.word	0x08014b49
 80147a8:	08014b49 	.word	0x08014b49
 80147ac:	08014b49 	.word	0x08014b49
 80147b0:	08014b49 	.word	0x08014b49
 80147b4:	08014b49 	.word	0x08014b49
 80147b8:	08014b49 	.word	0x08014b49
 80147bc:	08014b49 	.word	0x08014b49
 80147c0:	08014b49 	.word	0x08014b49
 80147c4:	08014b49 	.word	0x08014b49
 80147c8:	08014969 	.word	0x08014969
    case '6': {
        msg_64_t m;
        m.to = num;
 80147cc:	79bb      	ldrb	r3, [r7, #6]
 80147ce:	743b      	strb	r3, [r7, #16]
        m.from = cmd;
 80147d0:	797b      	ldrb	r3, [r7, #5]
 80147d2:	747b      	strb	r3, [r7, #17]
        memcpy(m.rbytes, param, 6);
 80147d4:	683a      	ldr	r2, [r7, #0]
 80147d6:	f107 0312 	add.w	r3, r7, #18
 80147da:	6811      	ldr	r1, [r2, #0]
 80147dc:	6019      	str	r1, [r3, #0]
 80147de:	8892      	ldrh	r2, [r2, #4]
 80147e0:	809a      	strh	r2, [r3, #4]
        mqf_write_from_forward_usb(&m);
 80147e2:	f107 0310 	add.w	r3, r7, #16
 80147e6:	4618      	mov	r0, r3
 80147e8:	f7ff fd64 	bl	80142b4 <mqf_write_from_forward_usb>
        }
        break;
 80147ec:	e1bc      	b.n	8014b68 <process_frame_cmd+0x448>
	case 'A':
		switch (cmd) {
 80147ee:	797b      	ldrb	r3, [r7, #5]
 80147f0:	2b57      	cmp	r3, #87	; 0x57
 80147f2:	d003      	beq.n	80147fc <process_frame_cmd+0xdc>
 80147f4:	2b73      	cmp	r3, #115	; 0x73
 80147f6:	d003      	beq.n	8014800 <process_frame_cmd+0xe0>
 80147f8:	2b53      	cmp	r3, #83	; 0x53
		case 'S':
			//rc = turnout_cmd(num, 1);
			break;
 80147fa:	e002      	b.n	8014802 <process_frame_cmd+0xe2>
		case 's':
			//rc = turnout_cmd(num, -1);
			break;
		case 'W':
			//rc = turnout_test(num);
			break;
 80147fc:	bf00      	nop
 80147fe:	e1b3      	b.n	8014b68 <process_frame_cmd+0x448>
			break;
 8014800:	bf00      	nop
		}
		break;
 8014802:	e1b1      	b.n	8014b68 <process_frame_cmd+0x448>
	case 'G':
		switch (cmd) {
 8014804:	797b      	ldrb	r3, [r7, #5]
 8014806:	3b43      	subs	r3, #67	; 0x43
 8014808:	2b2d      	cmp	r3, #45	; 0x2d
 801480a:	f200 80ab 	bhi.w	8014964 <process_frame_cmd+0x244>
 801480e:	a201      	add	r2, pc, #4	; (adr r2, 8014814 <process_frame_cmd+0xf4>)
 8014810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014814:	080148cd 	.word	0x080148cd
 8014818:	08014965 	.word	0x08014965
 801481c:	08014965 	.word	0x08014965
 8014820:	08014965 	.word	0x08014965
 8014824:	08014965 	.word	0x08014965
 8014828:	08014965 	.word	0x08014965
 801482c:	08014965 	.word	0x08014965
 8014830:	08014965 	.word	0x08014965
 8014834:	080148db 	.word	0x080148db
 8014838:	08014965 	.word	0x08014965
 801483c:	08014965 	.word	0x08014965
 8014840:	08014965 	.word	0x08014965
 8014844:	08014965 	.word	0x08014965
 8014848:	0801493f 	.word	0x0801493f
 801484c:	08014965 	.word	0x08014965
 8014850:	08014965 	.word	0x08014965
 8014854:	080148d7 	.word	0x080148d7
 8014858:	08014965 	.word	0x08014965
 801485c:	08014965 	.word	0x08014965
 8014860:	08014965 	.word	0x08014965
 8014864:	08014965 	.word	0x08014965
 8014868:	08014965 	.word	0x08014965
 801486c:	08014965 	.word	0x08014965
 8014870:	08014965 	.word	0x08014965
 8014874:	08014965 	.word	0x08014965
 8014878:	08014965 	.word	0x08014965
 801487c:	08014965 	.word	0x08014965
 8014880:	08014965 	.word	0x08014965
 8014884:	08014965 	.word	0x08014965
 8014888:	08014965 	.word	0x08014965
 801488c:	08014965 	.word	0x08014965
 8014890:	08014965 	.word	0x08014965
 8014894:	08014965 	.word	0x08014965
 8014898:	08014965 	.word	0x08014965
 801489c:	08014965 	.word	0x08014965
 80148a0:	08014965 	.word	0x08014965
 80148a4:	08014965 	.word	0x08014965
 80148a8:	08014965 	.word	0x08014965
 80148ac:	08014965 	.word	0x08014965
 80148b0:	08014965 	.word	0x08014965
 80148b4:	08014965 	.word	0x08014965
 80148b8:	08014965 	.word	0x08014965
 80148bc:	08014965 	.word	0x08014965
 80148c0:	08014965 	.word	0x08014965
 80148c4:	08014965 	.word	0x08014965
 80148c8:	080148df 	.word	0x080148df
		case 'C':
			cli_frame_mode = 0;
 80148cc:	4ba9      	ldr	r3, [pc, #676]	; (8014b74 <process_frame_cmd+0x454>)
 80148ce:	2200      	movs	r2, #0
 80148d0:	701a      	strb	r2, [r3, #0]
			return 0;
 80148d2:	2300      	movs	r3, #0
 80148d4:	e149      	b.n	8014b6a <process_frame_cmd+0x44a>
			break;
		case 'S':
			// TODO train_stop_all();
			return 0;
 80148d6:	2300      	movs	r3, #0
 80148d8:	e147      	b.n	8014b6a <process_frame_cmd+0x44a>
			break;
		case 'K':
			// TODO calibrate_bemf();
			return 0;
 80148da:	2300      	movs	r3, #0
 80148dc:	e145      	b.n	8014b6a <process_frame_cmd+0x44a>
			break;
		case 'p':
			rc = param_get_value(glob_params, NULL, (char *)param, &v, &d, &min, &max);
 80148de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80148e2:	f107 031c 	add.w	r3, r7, #28
 80148e6:	9302      	str	r3, [sp, #8]
 80148e8:	f107 0320 	add.w	r3, r7, #32
 80148ec:	9301      	str	r3, [sp, #4]
 80148ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80148f2:	9300      	str	r3, [sp, #0]
 80148f4:	4613      	mov	r3, r2
 80148f6:	683a      	ldr	r2, [r7, #0]
 80148f8:	2100      	movs	r1, #0
 80148fa:	489f      	ldr	r0, [pc, #636]	; (8014b78 <process_frame_cmd+0x458>)
 80148fc:	f7ff fb39 	bl	8013f72 <param_get_value>
 8014900:	63f8      	str	r0, [r7, #60]	; 0x3c
			memcpy(rbuf, &v,   sizeof(int32_t)); rbuf += sizeof(int32_t);
 8014902:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014904:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014906:	601a      	str	r2, [r3, #0]
 8014908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801490a:	3304      	adds	r3, #4
 801490c:	64fb      	str	r3, [r7, #76]	; 0x4c
			memcpy(rbuf, &d,   sizeof(int32_t)); rbuf += sizeof(int32_t);
 801490e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014910:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014912:	601a      	str	r2, [r3, #0]
 8014914:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014916:	3304      	adds	r3, #4
 8014918:	64fb      	str	r3, [r7, #76]	; 0x4c
			memcpy(rbuf, &min, sizeof(int32_t)); rbuf += sizeof(int32_t);
 801491a:	6a3a      	ldr	r2, [r7, #32]
 801491c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801491e:	601a      	str	r2, [r3, #0]
 8014920:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014922:	3304      	adds	r3, #4
 8014924:	64fb      	str	r3, [r7, #76]	; 0x4c
			memcpy(rbuf, &max, sizeof(int32_t)); rbuf += sizeof(int32_t);
 8014926:	69fa      	ldr	r2, [r7, #28]
 8014928:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801492a:	601a      	str	r2, [r3, #0]
 801492c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801492e:	3304      	adds	r3, #4
 8014930:	64fb      	str	r3, [r7, #76]	; 0x4c
			*prlen = 4*sizeof(int32_t);
 8014932:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014934:	2210      	movs	r2, #16
 8014936:	601a      	str	r2, [r3, #0]
			return rc;
 8014938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801493a:	b2db      	uxtb	r3, r3
 801493c:	e115      	b.n	8014b6a <process_frame_cmd+0x44a>
		case 'P': {
			if (plen < 4+1) return 1;
 801493e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014940:	2b04      	cmp	r3, #4
 8014942:	dc01      	bgt.n	8014948 <process_frame_cmd+0x228>
 8014944:	2301      	movs	r3, #1
 8014946:	e110      	b.n	8014b6a <process_frame_cmd+0x44a>
			int32_t v;
			memcpy(&v, param, sizeof(int32_t));
 8014948:	683b      	ldr	r3, [r7, #0]
 801494a:	681b      	ldr	r3, [r3, #0]
 801494c:	60fb      	str	r3, [r7, #12]
			int rc = param_set_value(glob_params, NULL, (char *)(param+sizeof(int32_t)), v);
 801494e:	683b      	ldr	r3, [r7, #0]
 8014950:	1d1a      	adds	r2, r3, #4
 8014952:	68fb      	ldr	r3, [r7, #12]
 8014954:	2100      	movs	r1, #0
 8014956:	4888      	ldr	r0, [pc, #544]	; (8014b78 <process_frame_cmd+0x458>)
 8014958:	f7ff fb7d 	bl	8014056 <param_set_value>
 801495c:	6338      	str	r0, [r7, #48]	; 0x30
			return rc;
 801495e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014960:	b2db      	uxtb	r3, r3
 8014962:	e102      	b.n	8014b6a <process_frame_cmd+0x44a>
		}
		default:
			return 3;
 8014964:	2303      	movs	r3, #3
 8014966:	e100      	b.n	8014b6a <process_frame_cmd+0x44a>
		}
		break;
	case 'T':
		//if (num == '0') num=0; // XXX hook for test
		//if (num != 0) return 4; // for now
		switch (cmd) {
 8014968:	797b      	ldrb	r3, [r7, #5]
 801496a:	3b41      	subs	r3, #65	; 0x41
 801496c:	2b39      	cmp	r3, #57	; 0x39
 801496e:	f200 80e7 	bhi.w	8014b40 <process_frame_cmd+0x420>
 8014972:	a201      	add	r2, pc, #4	; (adr r2, 8014978 <process_frame_cmd+0x258>)
 8014974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014978:	08014b45 	.word	0x08014b45
 801497c:	08014b41 	.word	0x08014b41
 8014980:	08014b41 	.word	0x08014b41
 8014984:	08014b41 	.word	0x08014b41
 8014988:	08014b41 	.word	0x08014b41
 801498c:	08014b41 	.word	0x08014b41
 8014990:	08014b41 	.word	0x08014b41
 8014994:	08014b41 	.word	0x08014b41
 8014998:	08014b41 	.word	0x08014b41
 801499c:	08014b41 	.word	0x08014b41
 80149a0:	08014b41 	.word	0x08014b41
 80149a4:	08014b41 	.word	0x08014b41
 80149a8:	08014b41 	.word	0x08014b41
 80149ac:	08014b41 	.word	0x08014b41
 80149b0:	08014b41 	.word	0x08014b41
 80149b4:	08014b05 	.word	0x08014b05
 80149b8:	08014b41 	.word	0x08014b41
 80149bc:	08014b41 	.word	0x08014b41
 80149c0:	08014b41 	.word	0x08014b41
 80149c4:	08014b41 	.word	0x08014b41
 80149c8:	08014b41 	.word	0x08014b41
 80149cc:	08014a61 	.word	0x08014a61
 80149d0:	08014b41 	.word	0x08014b41
 80149d4:	08014b41 	.word	0x08014b41
 80149d8:	08014b41 	.word	0x08014b41
 80149dc:	08014b41 	.word	0x08014b41
 80149e0:	08014b41 	.word	0x08014b41
 80149e4:	08014b41 	.word	0x08014b41
 80149e8:	08014b41 	.word	0x08014b41
 80149ec:	08014b41 	.word	0x08014b41
 80149f0:	08014b41 	.word	0x08014b41
 80149f4:	08014b41 	.word	0x08014b41
 80149f8:	08014b45 	.word	0x08014b45
 80149fc:	08014b41 	.word	0x08014b41
 8014a00:	08014b41 	.word	0x08014b41
 8014a04:	08014b41 	.word	0x08014b41
 8014a08:	08014b41 	.word	0x08014b41
 8014a0c:	08014b41 	.word	0x08014b41
 8014a10:	08014b41 	.word	0x08014b41
 8014a14:	08014b41 	.word	0x08014b41
 8014a18:	08014b41 	.word	0x08014b41
 8014a1c:	08014b41 	.word	0x08014b41
 8014a20:	08014b41 	.word	0x08014b41
 8014a24:	08014b41 	.word	0x08014b41
 8014a28:	08014b41 	.word	0x08014b41
 8014a2c:	08014b41 	.word	0x08014b41
 8014a30:	08014b41 	.word	0x08014b41
 8014a34:	08014a8f 	.word	0x08014a8f
 8014a38:	08014b41 	.word	0x08014b41
 8014a3c:	08014b41 	.word	0x08014b41
 8014a40:	08014b41 	.word	0x08014b41
 8014a44:	08014b41 	.word	0x08014b41
 8014a48:	08014b41 	.word	0x08014b41
 8014a4c:	08014b41 	.word	0x08014b41
 8014a50:	08014b41 	.word	0x08014b41
 8014a54:	08014b41 	.word	0x08014b41
 8014a58:	08014b41 	.word	0x08014b41
 8014a5c:	08014a85 	.word	0x08014a85
		case 'V':
			if (plen !=2) return 1;
 8014a60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014a62:	2b02      	cmp	r3, #2
 8014a64:	d001      	beq.n	8014a6a <process_frame_cmd+0x34a>
 8014a66:	2301      	movs	r3, #1
 8014a68:	e07f      	b.n	8014b6a <process_frame_cmd+0x44a>
			memcpy(&s, param, sizeof(s));
 8014a6a:	683b      	ldr	r3, [r7, #0]
 8014a6c:	881b      	ldrh	r3, [r3, #0]
 8014a6e:	b29b      	uxth	r3, r3
 8014a70:	85fb      	strh	r3, [r7, #46]	; 0x2e
		    train_set_target_speed(num, s);
 8014a72:	79bb      	ldrb	r3, [r7, #6]
 8014a74:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8014a78:	4611      	mov	r1, r2
 8014a7a:	4618      	mov	r0, r3
 8014a7c:	f001 fb74 	bl	8016168 <train_set_target_speed>
			return 0;
 8014a80:	2300      	movs	r3, #0
 8014a82:	e072      	b.n	8014b6a <process_frame_cmd+0x44a>
			break;
		case 'a':
			//task_auto_stop_auto();
			break;
		case 'z':
			rc = 0; // TODO train_reset_pos_estimate(num);
 8014a84:	2300      	movs	r3, #0
 8014a86:	63fb      	str	r3, [r7, #60]	; 0x3c
			return rc;
 8014a88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a8a:	b2db      	uxtb	r3, r3
 8014a8c:	e06d      	b.n	8014b6a <process_frame_cmd+0x44a>
			break;
		case 'p': {
			const train_config_t *tcnf = get_train_cnf(num);
 8014a8e:	79bb      	ldrb	r3, [r7, #6]
 8014a90:	4618      	mov	r0, r3
 8014a92:	f7ff fb8b 	bl	80141ac <get_train_cnf>
 8014a96:	63b8      	str	r0, [r7, #56]	; 0x38
			if (tcnf) {
 8014a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	d02d      	beq.n	8014afa <process_frame_cmd+0x3da>
				rc = param_get_value(train_params, (void *)tcnf, (char *)param, &v, &d, &min, &max);
 8014a9e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014aa2:	f107 031c 	add.w	r3, r7, #28
 8014aa6:	9302      	str	r3, [sp, #8]
 8014aa8:	f107 0320 	add.w	r3, r7, #32
 8014aac:	9301      	str	r3, [sp, #4]
 8014aae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014ab2:	9300      	str	r3, [sp, #0]
 8014ab4:	4613      	mov	r3, r2
 8014ab6:	683a      	ldr	r2, [r7, #0]
 8014ab8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014aba:	4830      	ldr	r0, [pc, #192]	; (8014b7c <process_frame_cmd+0x45c>)
 8014abc:	f7ff fa59 	bl	8013f72 <param_get_value>
 8014ac0:	63f8      	str	r0, [r7, #60]	; 0x3c
				memcpy(rbuf, &v,   sizeof(int32_t)); rbuf += sizeof(int32_t);
 8014ac2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014ac4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014ac6:	601a      	str	r2, [r3, #0]
 8014ac8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014aca:	3304      	adds	r3, #4
 8014acc:	64fb      	str	r3, [r7, #76]	; 0x4c
				memcpy(rbuf, &d,   sizeof(int32_t)); rbuf += sizeof(int32_t);
 8014ace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014ad0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014ad2:	601a      	str	r2, [r3, #0]
 8014ad4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014ad6:	3304      	adds	r3, #4
 8014ad8:	64fb      	str	r3, [r7, #76]	; 0x4c
				memcpy(rbuf, &min, sizeof(int32_t)); rbuf += sizeof(int32_t);
 8014ada:	6a3a      	ldr	r2, [r7, #32]
 8014adc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014ade:	601a      	str	r2, [r3, #0]
 8014ae0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014ae2:	3304      	adds	r3, #4
 8014ae4:	64fb      	str	r3, [r7, #76]	; 0x4c
				memcpy(rbuf, &max, sizeof(int32_t)); rbuf += sizeof(int32_t);
 8014ae6:	69fa      	ldr	r2, [r7, #28]
 8014ae8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014aea:	601a      	str	r2, [r3, #0]
 8014aec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014aee:	3304      	adds	r3, #4
 8014af0:	64fb      	str	r3, [r7, #76]	; 0x4c
				*prlen = 4*sizeof(int32_t);
 8014af2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014af4:	2210      	movs	r2, #16
 8014af6:	601a      	str	r2, [r3, #0]
 8014af8:	e001      	b.n	8014afe <process_frame_cmd+0x3de>
			} else {
				rc = 3;
 8014afa:	2303      	movs	r3, #3
 8014afc:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
			return rc;
 8014afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014b00:	b2db      	uxtb	r3, r3
 8014b02:	e032      	b.n	8014b6a <process_frame_cmd+0x44a>
		}

		case 'P': {
			if (plen < 4+1) return 1;
 8014b04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014b06:	2b04      	cmp	r3, #4
 8014b08:	dc01      	bgt.n	8014b0e <process_frame_cmd+0x3ee>
 8014b0a:	2301      	movs	r3, #1
 8014b0c:	e02d      	b.n	8014b6a <process_frame_cmd+0x44a>
			const train_config_t *tcnf = get_train_cnf(num);
 8014b0e:	79bb      	ldrb	r3, [r7, #6]
 8014b10:	4618      	mov	r0, r3
 8014b12:	f7ff fb4b 	bl	80141ac <get_train_cnf>
 8014b16:	6378      	str	r0, [r7, #52]	; 0x34
			if (tcnf) {
 8014b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014b1a:	2b00      	cmp	r3, #0
 8014b1c:	d00b      	beq.n	8014b36 <process_frame_cmd+0x416>
				int32_t v;
				memcpy(&v, param, sizeof(int32_t));
 8014b1e:	683b      	ldr	r3, [r7, #0]
 8014b20:	681b      	ldr	r3, [r3, #0]
 8014b22:	60bb      	str	r3, [r7, #8]
			    rc = param_set_value(train_params, (void *)tcnf, (char *)(param+sizeof(int32_t)), v);
 8014b24:	683b      	ldr	r3, [r7, #0]
 8014b26:	1d1a      	adds	r2, r3, #4
 8014b28:	68bb      	ldr	r3, [r7, #8]
 8014b2a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014b2c:	4813      	ldr	r0, [pc, #76]	; (8014b7c <process_frame_cmd+0x45c>)
 8014b2e:	f7ff fa92 	bl	8014056 <param_set_value>
 8014b32:	63f8      	str	r0, [r7, #60]	; 0x3c
 8014b34:	e001      	b.n	8014b3a <process_frame_cmd+0x41a>
			} else {
				rc = 33;
 8014b36:	2321      	movs	r3, #33	; 0x21
 8014b38:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
			return rc;
 8014b3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014b3c:	b2db      	uxtb	r3, r3
 8014b3e:	e014      	b.n	8014b6a <process_frame_cmd+0x44a>
		}

		default:
			return 33;
 8014b40:	2321      	movs	r3, #33	; 0x21
 8014b42:	e012      	b.n	8014b6a <process_frame_cmd+0x44a>
			break;
 8014b44:	bf00      	nop
		}
		break;
 8014b46:	e00f      	b.n	8014b68 <process_frame_cmd+0x448>
	default:
		rbuf[0]=sel;
 8014b48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014b4a:	79fa      	ldrb	r2, [r7, #7]
 8014b4c:	701a      	strb	r2, [r3, #0]
		rbuf[1]=num;
 8014b4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014b50:	3301      	adds	r3, #1
 8014b52:	79ba      	ldrb	r2, [r7, #6]
 8014b54:	701a      	strb	r2, [r3, #0]
		rbuf[2]=cmd;
 8014b56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014b58:	3302      	adds	r3, #2
 8014b5a:	797a      	ldrb	r2, [r7, #5]
 8014b5c:	701a      	strb	r2, [r3, #0]
		*prlen = 3;
 8014b5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014b60:	2203      	movs	r2, #3
 8014b62:	601a      	str	r2, [r3, #0]
		return 5;
 8014b64:	2305      	movs	r3, #5
 8014b66:	e000      	b.n	8014b6a <process_frame_cmd+0x44a>
		break;
	}
	return 0;
 8014b68:	2300      	movs	r3, #0
}
 8014b6a:	4618      	mov	r0, r3
 8014b6c:	3740      	adds	r7, #64	; 0x40
 8014b6e:	46bd      	mov	sp, r7
 8014b70:	bd80      	pop	{r7, pc}
 8014b72:	bf00      	nop
 8014b74:	200003c4 	.word	0x200003c4
 8014b78:	08018d18 	.word	0x08018d18
 8014b7c:	08018ad8 	.word	0x08018ad8

08014b80 <trainctl_notif>:

static int num_trainctl_notif = 0;

void trainctl_notif(uint8_t sel, uint8_t num, uint8_t cmd, uint8_t *dta, int dtalen)
{
 8014b80:	b580      	push	{r7, lr}
 8014b82:	b084      	sub	sp, #16
 8014b84:	af02      	add	r7, sp, #8
 8014b86:	603b      	str	r3, [r7, #0]
 8014b88:	4603      	mov	r3, r0
 8014b8a:	71fb      	strb	r3, [r7, #7]
 8014b8c:	460b      	mov	r3, r1
 8014b8e:	71bb      	strb	r3, [r7, #6]
 8014b90:	4613      	mov	r3, r2
 8014b92:	717b      	strb	r3, [r7, #5]
	num_trainctl_notif++;
 8014b94:	4b0a      	ldr	r3, [pc, #40]	; (8014bc0 <trainctl_notif+0x40>)
 8014b96:	681b      	ldr	r3, [r3, #0]
 8014b98:	3301      	adds	r3, #1
 8014b9a:	4a09      	ldr	r2, [pc, #36]	; (8014bc0 <trainctl_notif+0x40>)
 8014b9c:	6013      	str	r3, [r2, #0]
	if (cli_frame_mode) {
 8014b9e:	4b09      	ldr	r3, [pc, #36]	; (8014bc4 <trainctl_notif+0x44>)
 8014ba0:	781b      	ldrb	r3, [r3, #0]
 8014ba2:	2b00      	cmp	r3, #0
 8014ba4:	d007      	beq.n	8014bb6 <trainctl_notif+0x36>
		frame_send_notif(sel, num, cmd, dta, dtalen);
 8014ba6:	797a      	ldrb	r2, [r7, #5]
 8014ba8:	79b9      	ldrb	r1, [r7, #6]
 8014baa:	79f8      	ldrb	r0, [r7, #7]
 8014bac:	693b      	ldr	r3, [r7, #16]
 8014bae:	9300      	str	r3, [sp, #0]
 8014bb0:	683b      	ldr	r3, [r7, #0]
 8014bb2:	f000 f891 	bl	8014cd8 <frame_send_notif>
	}
}
 8014bb6:	bf00      	nop
 8014bb8:	3708      	adds	r7, #8
 8014bba:	46bd      	mov	sp, r7
 8014bbc:	bd80      	pop	{r7, pc}
 8014bbe:	bf00      	nop
 8014bc0:	2000520c 	.word	0x2000520c
 8014bc4:	200003c4 	.word	0x200003c4

08014bc8 <trainctl_notif2>:

void trainctl_notif2(uint8_t sel, uint8_t num, uint8_t cmd, char *msg, int32_t v1, int32_t v2, int32_t v3)
{
 8014bc8:	b580      	push	{r7, lr}
 8014bca:	b086      	sub	sp, #24
 8014bcc:	af00      	add	r7, sp, #0
 8014bce:	603b      	str	r3, [r7, #0]
 8014bd0:	4603      	mov	r3, r0
 8014bd2:	71fb      	strb	r3, [r7, #7]
 8014bd4:	460b      	mov	r3, r1
 8014bd6:	71bb      	strb	r3, [r7, #6]
 8014bd8:	4613      	mov	r3, r2
 8014bda:	717b      	strb	r3, [r7, #5]
	static frame_msg_t m;
	char *p;
	int i=0;
 8014bdc:	2300      	movs	r3, #0
 8014bde:	617b      	str	r3, [r7, #20]
	m.frm[i++] = '|';
 8014be0:	697b      	ldr	r3, [r7, #20]
 8014be2:	1c5a      	adds	r2, r3, #1
 8014be4:	617a      	str	r2, [r7, #20]
 8014be6:	4a3a      	ldr	r2, [pc, #232]	; (8014cd0 <trainctl_notif2+0x108>)
 8014be8:	4413      	add	r3, r2
 8014bea:	227c      	movs	r2, #124	; 0x7c
 8014bec:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = '_';
 8014bee:	697b      	ldr	r3, [r7, #20]
 8014bf0:	1c5a      	adds	r2, r3, #1
 8014bf2:	617a      	str	r2, [r7, #20]
 8014bf4:	4a36      	ldr	r2, [pc, #216]	; (8014cd0 <trainctl_notif2+0x108>)
 8014bf6:	4413      	add	r3, r2
 8014bf8:	225f      	movs	r2, #95	; 0x5f
 8014bfa:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = 'N';
 8014bfc:	697b      	ldr	r3, [r7, #20]
 8014bfe:	1c5a      	adds	r2, r3, #1
 8014c00:	617a      	str	r2, [r7, #20]
 8014c02:	4a33      	ldr	r2, [pc, #204]	; (8014cd0 <trainctl_notif2+0x108>)
 8014c04:	4413      	add	r3, r2
 8014c06:	224e      	movs	r2, #78	; 0x4e
 8014c08:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = sel;
 8014c0a:	697b      	ldr	r3, [r7, #20]
 8014c0c:	1c5a      	adds	r2, r3, #1
 8014c0e:	617a      	str	r2, [r7, #20]
 8014c10:	4a2f      	ldr	r2, [pc, #188]	; (8014cd0 <trainctl_notif2+0x108>)
 8014c12:	4413      	add	r3, r2
 8014c14:	79fa      	ldrb	r2, [r7, #7]
 8014c16:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = num;
 8014c18:	697b      	ldr	r3, [r7, #20]
 8014c1a:	1c5a      	adds	r2, r3, #1
 8014c1c:	617a      	str	r2, [r7, #20]
 8014c1e:	4a2c      	ldr	r2, [pc, #176]	; (8014cd0 <trainctl_notif2+0x108>)
 8014c20:	4413      	add	r3, r2
 8014c22:	79ba      	ldrb	r2, [r7, #6]
 8014c24:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = cmd;
 8014c26:	697b      	ldr	r3, [r7, #20]
 8014c28:	1c5a      	adds	r2, r3, #1
 8014c2a:	617a      	str	r2, [r7, #20]
 8014c2c:	4a28      	ldr	r2, [pc, #160]	; (8014cd0 <trainctl_notif2+0x108>)
 8014c2e:	4413      	add	r3, r2
 8014c30:	797a      	ldrb	r2, [r7, #5]
 8014c32:	709a      	strb	r2, [r3, #2]
	i += strlen(p);
	m.frm[i++]= '/';
	p = itoa(v2, (char *)m.frm+i, 10);
	i += strlen(p);
#else
	memcpy(m.frm+i, &v1, sizeof(int32_t));
 8014c34:	697b      	ldr	r3, [r7, #20]
 8014c36:	4a27      	ldr	r2, [pc, #156]	; (8014cd4 <trainctl_notif2+0x10c>)
 8014c38:	4413      	add	r3, r2
 8014c3a:	6a3a      	ldr	r2, [r7, #32]
 8014c3c:	601a      	str	r2, [r3, #0]
	i += sizeof(int32_t);
 8014c3e:	697b      	ldr	r3, [r7, #20]
 8014c40:	3304      	adds	r3, #4
 8014c42:	617b      	str	r3, [r7, #20]
	memcpy(m.frm+i, &v2, sizeof(int32_t));
 8014c44:	697b      	ldr	r3, [r7, #20]
 8014c46:	4a23      	ldr	r2, [pc, #140]	; (8014cd4 <trainctl_notif2+0x10c>)
 8014c48:	4413      	add	r3, r2
 8014c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014c4c:	601a      	str	r2, [r3, #0]
	i += sizeof(int32_t);
 8014c4e:	697b      	ldr	r3, [r7, #20]
 8014c50:	3304      	adds	r3, #4
 8014c52:	617b      	str	r3, [r7, #20]
	memcpy(m.frm+i, &v3, sizeof(int32_t));
 8014c54:	697b      	ldr	r3, [r7, #20]
 8014c56:	4a1f      	ldr	r2, [pc, #124]	; (8014cd4 <trainctl_notif2+0x10c>)
 8014c58:	4413      	add	r3, r2
 8014c5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014c5c:	601a      	str	r2, [r3, #0]
	i += sizeof(int32_t);
 8014c5e:	697b      	ldr	r3, [r7, #20]
 8014c60:	3304      	adds	r3, #4
 8014c62:	617b      	str	r3, [r7, #20]
 	p = strncpy((char *)m.frm+i, msg, 10);
 8014c64:	697b      	ldr	r3, [r7, #20]
 8014c66:	4a1b      	ldr	r2, [pc, #108]	; (8014cd4 <trainctl_notif2+0x10c>)
 8014c68:	4413      	add	r3, r2
 8014c6a:	220a      	movs	r2, #10
 8014c6c:	6839      	ldr	r1, [r7, #0]
 8014c6e:	4618      	mov	r0, r3
 8014c70:	f002 f8f6 	bl	8016e60 <strncpy>
 8014c74:	6138      	str	r0, [r7, #16]
	m.frm[i+10]='\0';
 8014c76:	697b      	ldr	r3, [r7, #20]
 8014c78:	330a      	adds	r3, #10
 8014c7a:	4a15      	ldr	r2, [pc, #84]	; (8014cd0 <trainctl_notif2+0x108>)
 8014c7c:	4413      	add	r3, r2
 8014c7e:	2200      	movs	r2, #0
 8014c80:	709a      	strb	r2, [r3, #2]
	i += strlen(p);
 8014c82:	6938      	ldr	r0, [r7, #16]
 8014c84:	f7eb faae 	bl	80001e4 <strlen>
 8014c88:	4602      	mov	r2, r0
 8014c8a:	697b      	ldr	r3, [r7, #20]
 8014c8c:	4413      	add	r3, r2
 8014c8e:	617b      	str	r3, [r7, #20]
#endif
	m.frm[i++]= '\0';
 8014c90:	697b      	ldr	r3, [r7, #20]
 8014c92:	1c5a      	adds	r2, r3, #1
 8014c94:	617a      	str	r2, [r7, #20]
 8014c96:	4a0e      	ldr	r2, [pc, #56]	; (8014cd0 <trainctl_notif2+0x108>)
 8014c98:	4413      	add	r3, r2
 8014c9a:	2200      	movs	r2, #0
 8014c9c:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = '|';
 8014c9e:	697b      	ldr	r3, [r7, #20]
 8014ca0:	1c5a      	adds	r2, r3, #1
 8014ca2:	617a      	str	r2, [r7, #20]
 8014ca4:	4a0a      	ldr	r2, [pc, #40]	; (8014cd0 <trainctl_notif2+0x108>)
 8014ca6:	4413      	add	r3, r2
 8014ca8:	227c      	movs	r2, #124	; 0x7c
 8014caa:	709a      	strb	r2, [r3, #2]
	int l = frm_escape(m.frm, i, FRM_MAX_LEN);
 8014cac:	221f      	movs	r2, #31
 8014cae:	6979      	ldr	r1, [r7, #20]
 8014cb0:	4808      	ldr	r0, [pc, #32]	; (8014cd4 <trainctl_notif2+0x10c>)
 8014cb2:	f7ff fbb8 	bl	8014426 <frm_escape>
 8014cb6:	60f8      	str	r0, [r7, #12]
	if (l>0) txframe_send_notif(&m, l);
 8014cb8:	68fb      	ldr	r3, [r7, #12]
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	dd03      	ble.n	8014cc6 <trainctl_notif2+0xfe>
 8014cbe:	68f9      	ldr	r1, [r7, #12]
 8014cc0:	4803      	ldr	r0, [pc, #12]	; (8014cd0 <trainctl_notif2+0x108>)
 8014cc2:	f7ff fad0 	bl	8014266 <txframe_send_notif>
}
 8014cc6:	bf00      	nop
 8014cc8:	3718      	adds	r7, #24
 8014cca:	46bd      	mov	sp, r7
 8014ccc:	bd80      	pop	{r7, pc}
 8014cce:	bf00      	nop
 8014cd0:	20005210 	.word	0x20005210
 8014cd4:	20005212 	.word	0x20005212

08014cd8 <frame_send_notif>:


void frame_send_notif(uint8_t sel, uint8_t num, uint8_t cmd, uint8_t *dta, int dtalen)
{
 8014cd8:	b580      	push	{r7, lr}
 8014cda:	b084      	sub	sp, #16
 8014cdc:	af00      	add	r7, sp, #0
 8014cde:	603b      	str	r3, [r7, #0]
 8014ce0:	4603      	mov	r3, r0
 8014ce2:	71fb      	strb	r3, [r7, #7]
 8014ce4:	460b      	mov	r3, r1
 8014ce6:	71bb      	strb	r3, [r7, #6]
 8014ce8:	4613      	mov	r3, r2
 8014cea:	717b      	strb	r3, [r7, #5]
	static frame_msg_t m;
	if (dtalen>FRM_MAX_LEN-8) dtalen=FRM_MAX_LEN-8;
 8014cec:	69bb      	ldr	r3, [r7, #24]
 8014cee:	2b17      	cmp	r3, #23
 8014cf0:	dd01      	ble.n	8014cf6 <frame_send_notif+0x1e>
 8014cf2:	2317      	movs	r3, #23
 8014cf4:	61bb      	str	r3, [r7, #24]
	int i=0;
 8014cf6:	2300      	movs	r3, #0
 8014cf8:	60fb      	str	r3, [r7, #12]
	m.frm[i++] = '|';
 8014cfa:	68fb      	ldr	r3, [r7, #12]
 8014cfc:	1c5a      	adds	r2, r3, #1
 8014cfe:	60fa      	str	r2, [r7, #12]
 8014d00:	4a25      	ldr	r2, [pc, #148]	; (8014d98 <frame_send_notif+0xc0>)
 8014d02:	4413      	add	r3, r2
 8014d04:	227c      	movs	r2, #124	; 0x7c
 8014d06:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = '_';
 8014d08:	68fb      	ldr	r3, [r7, #12]
 8014d0a:	1c5a      	adds	r2, r3, #1
 8014d0c:	60fa      	str	r2, [r7, #12]
 8014d0e:	4a22      	ldr	r2, [pc, #136]	; (8014d98 <frame_send_notif+0xc0>)
 8014d10:	4413      	add	r3, r2
 8014d12:	225f      	movs	r2, #95	; 0x5f
 8014d14:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = 'N';
 8014d16:	68fb      	ldr	r3, [r7, #12]
 8014d18:	1c5a      	adds	r2, r3, #1
 8014d1a:	60fa      	str	r2, [r7, #12]
 8014d1c:	4a1e      	ldr	r2, [pc, #120]	; (8014d98 <frame_send_notif+0xc0>)
 8014d1e:	4413      	add	r3, r2
 8014d20:	224e      	movs	r2, #78	; 0x4e
 8014d22:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = sel;
 8014d24:	68fb      	ldr	r3, [r7, #12]
 8014d26:	1c5a      	adds	r2, r3, #1
 8014d28:	60fa      	str	r2, [r7, #12]
 8014d2a:	4a1b      	ldr	r2, [pc, #108]	; (8014d98 <frame_send_notif+0xc0>)
 8014d2c:	4413      	add	r3, r2
 8014d2e:	79fa      	ldrb	r2, [r7, #7]
 8014d30:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = num;
 8014d32:	68fb      	ldr	r3, [r7, #12]
 8014d34:	1c5a      	adds	r2, r3, #1
 8014d36:	60fa      	str	r2, [r7, #12]
 8014d38:	4a17      	ldr	r2, [pc, #92]	; (8014d98 <frame_send_notif+0xc0>)
 8014d3a:	4413      	add	r3, r2
 8014d3c:	79ba      	ldrb	r2, [r7, #6]
 8014d3e:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = cmd;
 8014d40:	68fb      	ldr	r3, [r7, #12]
 8014d42:	1c5a      	adds	r2, r3, #1
 8014d44:	60fa      	str	r2, [r7, #12]
 8014d46:	4a14      	ldr	r2, [pc, #80]	; (8014d98 <frame_send_notif+0xc0>)
 8014d48:	4413      	add	r3, r2
 8014d4a:	797a      	ldrb	r2, [r7, #5]
 8014d4c:	709a      	strb	r2, [r3, #2]
	memcpy(m.frm+i, dta, dtalen);
 8014d4e:	68fb      	ldr	r3, [r7, #12]
 8014d50:	4a12      	ldr	r2, [pc, #72]	; (8014d9c <frame_send_notif+0xc4>)
 8014d52:	4413      	add	r3, r2
 8014d54:	69ba      	ldr	r2, [r7, #24]
 8014d56:	6839      	ldr	r1, [r7, #0]
 8014d58:	4618      	mov	r0, r3
 8014d5a:	f001 ffb5 	bl	8016cc8 <memcpy>
	i += dtalen;
 8014d5e:	68fa      	ldr	r2, [r7, #12]
 8014d60:	69bb      	ldr	r3, [r7, #24]
 8014d62:	4413      	add	r3, r2
 8014d64:	60fb      	str	r3, [r7, #12]
	m.frm[i++] = '|';
 8014d66:	68fb      	ldr	r3, [r7, #12]
 8014d68:	1c5a      	adds	r2, r3, #1
 8014d6a:	60fa      	str	r2, [r7, #12]
 8014d6c:	4a0a      	ldr	r2, [pc, #40]	; (8014d98 <frame_send_notif+0xc0>)
 8014d6e:	4413      	add	r3, r2
 8014d70:	227c      	movs	r2, #124	; 0x7c
 8014d72:	709a      	strb	r2, [r3, #2]
	int l = frm_escape(m.frm, i, FRM_MAX_LEN);
 8014d74:	221f      	movs	r2, #31
 8014d76:	68f9      	ldr	r1, [r7, #12]
 8014d78:	4808      	ldr	r0, [pc, #32]	; (8014d9c <frame_send_notif+0xc4>)
 8014d7a:	f7ff fb54 	bl	8014426 <frm_escape>
 8014d7e:	60b8      	str	r0, [r7, #8]
	if (l>0) txframe_send_notif(&m, l);
 8014d80:	68bb      	ldr	r3, [r7, #8]
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	dd03      	ble.n	8014d8e <frame_send_notif+0xb6>
 8014d86:	68b9      	ldr	r1, [r7, #8]
 8014d88:	4803      	ldr	r0, [pc, #12]	; (8014d98 <frame_send_notif+0xc0>)
 8014d8a:	f7ff fa6c 	bl	8014266 <txframe_send_notif>
}
 8014d8e:	bf00      	nop
 8014d90:	3710      	adds	r7, #16
 8014d92:	46bd      	mov	sp, r7
 8014d94:	bd80      	pop	{r7, pc}
 8014d96:	bf00      	nop
 8014d98:	20005234 	.word	0x20005234
 8014d9c:	20005236 	.word	0x20005236

08014da0 <txframe_send_msg64>:

static void txframe_send_msg64(msg_64_t *msg)
{
 8014da0:	b580      	push	{r7, lr}
 8014da2:	b084      	sub	sp, #16
 8014da4:	af00      	add	r7, sp, #0
 8014da6:	6078      	str	r0, [r7, #4]
    static frame_msg_t m;
    //int dtalen = 8;
    int i=0;
 8014da8:	2300      	movs	r3, #0
 8014daa:	60fb      	str	r3, [r7, #12]
    m.frm[i++] = '|';
 8014dac:	68fb      	ldr	r3, [r7, #12]
 8014dae:	1c5a      	adds	r2, r3, #1
 8014db0:	60fa      	str	r2, [r7, #12]
 8014db2:	4a39      	ldr	r2, [pc, #228]	; (8014e98 <txframe_send_msg64+0xf8>)
 8014db4:	4413      	add	r3, r2
 8014db6:	227c      	movs	r2, #124	; 0x7c
 8014db8:	709a      	strb	r2, [r3, #2]
    m.frm[i++] = '_';
 8014dba:	68fb      	ldr	r3, [r7, #12]
 8014dbc:	1c5a      	adds	r2, r3, #1
 8014dbe:	60fa      	str	r2, [r7, #12]
 8014dc0:	4a35      	ldr	r2, [pc, #212]	; (8014e98 <txframe_send_msg64+0xf8>)
 8014dc2:	4413      	add	r3, r2
 8014dc4:	225f      	movs	r2, #95	; 0x5f
 8014dc6:	709a      	strb	r2, [r3, #2]
    m.frm[i++] = '6';
 8014dc8:	68fb      	ldr	r3, [r7, #12]
 8014dca:	1c5a      	adds	r2, r3, #1
 8014dcc:	60fa      	str	r2, [r7, #12]
 8014dce:	4a32      	ldr	r2, [pc, #200]	; (8014e98 <txframe_send_msg64+0xf8>)
 8014dd0:	4413      	add	r3, r2
 8014dd2:	2236      	movs	r2, #54	; 0x36
 8014dd4:	709a      	strb	r2, [r3, #2]
    m.frm[i++] = msg->to;
 8014dd6:	68fb      	ldr	r3, [r7, #12]
 8014dd8:	1c5a      	adds	r2, r3, #1
 8014dda:	60fa      	str	r2, [r7, #12]
 8014ddc:	687a      	ldr	r2, [r7, #4]
 8014dde:	7811      	ldrb	r1, [r2, #0]
 8014de0:	4a2d      	ldr	r2, [pc, #180]	; (8014e98 <txframe_send_msg64+0xf8>)
 8014de2:	4413      	add	r3, r2
 8014de4:	460a      	mov	r2, r1
 8014de6:	709a      	strb	r2, [r3, #2]
    m.frm[i++] = msg->from;
 8014de8:	68fb      	ldr	r3, [r7, #12]
 8014dea:	1c5a      	adds	r2, r3, #1
 8014dec:	60fa      	str	r2, [r7, #12]
 8014dee:	687a      	ldr	r2, [r7, #4]
 8014df0:	7851      	ldrb	r1, [r2, #1]
 8014df2:	4a29      	ldr	r2, [pc, #164]	; (8014e98 <txframe_send_msg64+0xf8>)
 8014df4:	4413      	add	r3, r2
 8014df6:	460a      	mov	r2, r1
 8014df8:	709a      	strb	r2, [r3, #2]
    m.frm[i++] = msg->rbytes[0];
 8014dfa:	68fb      	ldr	r3, [r7, #12]
 8014dfc:	1c5a      	adds	r2, r3, #1
 8014dfe:	60fa      	str	r2, [r7, #12]
 8014e00:	687a      	ldr	r2, [r7, #4]
 8014e02:	7891      	ldrb	r1, [r2, #2]
 8014e04:	4a24      	ldr	r2, [pc, #144]	; (8014e98 <txframe_send_msg64+0xf8>)
 8014e06:	4413      	add	r3, r2
 8014e08:	460a      	mov	r2, r1
 8014e0a:	709a      	strb	r2, [r3, #2]
    m.frm[i++] = msg->rbytes[1];
 8014e0c:	68fb      	ldr	r3, [r7, #12]
 8014e0e:	1c5a      	adds	r2, r3, #1
 8014e10:	60fa      	str	r2, [r7, #12]
 8014e12:	687a      	ldr	r2, [r7, #4]
 8014e14:	78d1      	ldrb	r1, [r2, #3]
 8014e16:	4a20      	ldr	r2, [pc, #128]	; (8014e98 <txframe_send_msg64+0xf8>)
 8014e18:	4413      	add	r3, r2
 8014e1a:	460a      	mov	r2, r1
 8014e1c:	709a      	strb	r2, [r3, #2]
    m.frm[i++] = msg->rbytes[2];
 8014e1e:	68fb      	ldr	r3, [r7, #12]
 8014e20:	1c5a      	adds	r2, r3, #1
 8014e22:	60fa      	str	r2, [r7, #12]
 8014e24:	687a      	ldr	r2, [r7, #4]
 8014e26:	7911      	ldrb	r1, [r2, #4]
 8014e28:	4a1b      	ldr	r2, [pc, #108]	; (8014e98 <txframe_send_msg64+0xf8>)
 8014e2a:	4413      	add	r3, r2
 8014e2c:	460a      	mov	r2, r1
 8014e2e:	709a      	strb	r2, [r3, #2]
    m.frm[i++] = msg->rbytes[3];
 8014e30:	68fb      	ldr	r3, [r7, #12]
 8014e32:	1c5a      	adds	r2, r3, #1
 8014e34:	60fa      	str	r2, [r7, #12]
 8014e36:	687a      	ldr	r2, [r7, #4]
 8014e38:	7951      	ldrb	r1, [r2, #5]
 8014e3a:	4a17      	ldr	r2, [pc, #92]	; (8014e98 <txframe_send_msg64+0xf8>)
 8014e3c:	4413      	add	r3, r2
 8014e3e:	460a      	mov	r2, r1
 8014e40:	709a      	strb	r2, [r3, #2]
    m.frm[i++] = msg->rbytes[4];
 8014e42:	68fb      	ldr	r3, [r7, #12]
 8014e44:	1c5a      	adds	r2, r3, #1
 8014e46:	60fa      	str	r2, [r7, #12]
 8014e48:	687a      	ldr	r2, [r7, #4]
 8014e4a:	7991      	ldrb	r1, [r2, #6]
 8014e4c:	4a12      	ldr	r2, [pc, #72]	; (8014e98 <txframe_send_msg64+0xf8>)
 8014e4e:	4413      	add	r3, r2
 8014e50:	460a      	mov	r2, r1
 8014e52:	709a      	strb	r2, [r3, #2]
    m.frm[i++] = msg->rbytes[5];
 8014e54:	68fb      	ldr	r3, [r7, #12]
 8014e56:	1c5a      	adds	r2, r3, #1
 8014e58:	60fa      	str	r2, [r7, #12]
 8014e5a:	687a      	ldr	r2, [r7, #4]
 8014e5c:	79d1      	ldrb	r1, [r2, #7]
 8014e5e:	4a0e      	ldr	r2, [pc, #56]	; (8014e98 <txframe_send_msg64+0xf8>)
 8014e60:	4413      	add	r3, r2
 8014e62:	460a      	mov	r2, r1
 8014e64:	709a      	strb	r2, [r3, #2]
    //memcpy(m.frm+i, dta, dtalen);
    //i += dtalen;
    m.frm[i++] = '|';
 8014e66:	68fb      	ldr	r3, [r7, #12]
 8014e68:	1c5a      	adds	r2, r3, #1
 8014e6a:	60fa      	str	r2, [r7, #12]
 8014e6c:	4a0a      	ldr	r2, [pc, #40]	; (8014e98 <txframe_send_msg64+0xf8>)
 8014e6e:	4413      	add	r3, r2
 8014e70:	227c      	movs	r2, #124	; 0x7c
 8014e72:	709a      	strb	r2, [r3, #2]
    int l = frm_escape(m.frm, i, FRM_MAX_LEN);
 8014e74:	221f      	movs	r2, #31
 8014e76:	68f9      	ldr	r1, [r7, #12]
 8014e78:	4808      	ldr	r0, [pc, #32]	; (8014e9c <txframe_send_msg64+0xfc>)
 8014e7a:	f7ff fad4 	bl	8014426 <frm_escape>
 8014e7e:	60b8      	str	r0, [r7, #8]
    if (l>0) txframe_send_notif(&m, l);
 8014e80:	68bb      	ldr	r3, [r7, #8]
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	dd03      	ble.n	8014e8e <txframe_send_msg64+0xee>
 8014e86:	68b9      	ldr	r1, [r7, #8]
 8014e88:	4803      	ldr	r0, [pc, #12]	; (8014e98 <txframe_send_msg64+0xf8>)
 8014e8a:	f7ff f9ec 	bl	8014266 <txframe_send_notif>
}
 8014e8e:	bf00      	nop
 8014e90:	3710      	adds	r7, #16
 8014e92:	46bd      	mov	sp, r7
 8014e94:	bd80      	pop	{r7, pc}
 8014e96:	bf00      	nop
 8014e98:	20005258 	.word	0x20005258
 8014e9c:	2000525a 	.word	0x2000525a

08014ea0 <frame_gather_stat>:



// buf should be long enough to store a int32_t with escape, so 8 bytes
int frame_gather_stat(int step, uint8_t *buf)
{
 8014ea0:	b580      	push	{r7, lr}
 8014ea2:	b086      	sub	sp, #24
 8014ea4:	af00      	add	r7, sp, #0
 8014ea6:	6078      	str	r0, [r7, #4]
 8014ea8:	6039      	str	r1, [r7, #0]
	// int32_t stat_val_get(int step);
	int done;
	int32_t v = stat_val_get(step, &done);
 8014eaa:	f107 0310 	add.w	r3, r7, #16
 8014eae:	4619      	mov	r1, r3
 8014eb0:	6878      	ldr	r0, [r7, #4]
 8014eb2:	f7ff f9c9 	bl	8014248 <stat_val_get>
 8014eb6:	4603      	mov	r3, r0
 8014eb8:	60fb      	str	r3, [r7, #12]
	if (done) return 0;
 8014eba:	693b      	ldr	r3, [r7, #16]
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d001      	beq.n	8014ec4 <frame_gather_stat+0x24>
 8014ec0:	2300      	movs	r3, #0
 8014ec2:	e00e      	b.n	8014ee2 <frame_gather_stat+0x42>

	int l = _frm_escape2(buf, (void *) &v, 4, 8);
 8014ec4:	f107 010c 	add.w	r1, r7, #12
 8014ec8:	2308      	movs	r3, #8
 8014eca:	2204      	movs	r2, #4
 8014ecc:	6838      	ldr	r0, [r7, #0]
 8014ece:	f7ff fa63 	bl	8014398 <_frm_escape2>
 8014ed2:	6178      	str	r0, [r7, #20]
	if (l<0) {
 8014ed4:	697b      	ldr	r3, [r7, #20]
 8014ed6:	2b00      	cmp	r3, #0
 8014ed8:	da02      	bge.n	8014ee0 <frame_gather_stat+0x40>
		return -1;
 8014eda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014ede:	e000      	b.n	8014ee2 <frame_gather_stat+0x42>
	}
	return l;
 8014ee0:	697b      	ldr	r3, [r7, #20]
}
 8014ee2:	4618      	mov	r0, r3
 8014ee4:	3718      	adds	r7, #24
 8014ee6:	46bd      	mov	sp, r7
 8014ee8:	bd80      	pop	{r7, pc}

08014eea <frame_send_stat>:

void frame_send_stat(void(*cb)(uint8_t *d, int l), uint32_t tick)
{
 8014eea:	b580      	push	{r7, lr}
 8014eec:	b086      	sub	sp, #24
 8014eee:	af00      	add	r7, sp, #0
 8014ef0:	6078      	str	r0, [r7, #4]
 8014ef2:	6039      	str	r1, [r7, #0]
    uint8_t buf[8];
    //if ((1)) tick = 0xAA55AA55;
    int l = _frm_escape2(buf, (void *) &tick, 4, 8);
 8014ef4:	4639      	mov	r1, r7
 8014ef6:	f107 0008 	add.w	r0, r7, #8
 8014efa:	2308      	movs	r3, #8
 8014efc:	2204      	movs	r2, #4
 8014efe:	f7ff fa4b 	bl	8014398 <_frm_escape2>
 8014f02:	6138      	str	r0, [r7, #16]
    cb(buf, l);
 8014f04:	f107 0208 	add.w	r2, r7, #8
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	6939      	ldr	r1, [r7, #16]
 8014f0c:	4610      	mov	r0, r2
 8014f0e:	4798      	blx	r3

	int i;
	for (i=0; ; i++) {
 8014f10:	2300      	movs	r3, #0
 8014f12:	617b      	str	r3, [r7, #20]
		l = frame_gather_stat(i, buf);
 8014f14:	f107 0308 	add.w	r3, r7, #8
 8014f18:	4619      	mov	r1, r3
 8014f1a:	6978      	ldr	r0, [r7, #20]
 8014f1c:	f7ff ffc0 	bl	8014ea0 <frame_gather_stat>
 8014f20:	6138      	str	r0, [r7, #16]
		if (l<=0) {
 8014f22:	693b      	ldr	r3, [r7, #16]
 8014f24:	2b00      	cmp	r3, #0
 8014f26:	dd09      	ble.n	8014f3c <frame_send_stat+0x52>
			return;
		}
		cb(buf, l);
 8014f28:	f107 0208 	add.w	r2, r7, #8
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	6939      	ldr	r1, [r7, #16]
 8014f30:	4610      	mov	r0, r2
 8014f32:	4798      	blx	r3
	for (i=0; ; i++) {
 8014f34:	697b      	ldr	r3, [r7, #20]
 8014f36:	3301      	adds	r3, #1
 8014f38:	617b      	str	r3, [r7, #20]
		l = frame_gather_stat(i, buf);
 8014f3a:	e7eb      	b.n	8014f14 <frame_send_stat+0x2a>
			return;
 8014f3c:	bf00      	nop
	}
}
 8014f3e:	3718      	adds	r7, #24
 8014f40:	46bd      	mov	sp, r7
 8014f42:	bd80      	pop	{r7, pc}

08014f44 <itm_debug1>:
//void _itm_debug1(const char *msg, int v);
//void _itm_debug2(const char *msg, int v1, int v2);
void _itm_debug3(const char *msg, int v1, int v2, int v3, int n);

static inline void itm_debug1(uint32_t f, const char *msg, int v)
{
 8014f44:	b580      	push	{r7, lr}
 8014f46:	b086      	sub	sp, #24
 8014f48:	af02      	add	r7, sp, #8
 8014f4a:	60f8      	str	r0, [r7, #12]
 8014f4c:	60b9      	str	r1, [r7, #8]
 8014f4e:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 8014f50:	4b08      	ldr	r3, [pc, #32]	; (8014f74 <itm_debug1+0x30>)
 8014f52:	681a      	ldr	r2, [r3, #0]
 8014f54:	68fb      	ldr	r3, [r7, #12]
 8014f56:	4013      	ands	r3, r2
 8014f58:	2b00      	cmp	r3, #0
 8014f5a:	d007      	beq.n	8014f6c <itm_debug1+0x28>
 8014f5c:	2301      	movs	r3, #1
 8014f5e:	9300      	str	r3, [sp, #0]
 8014f60:	2300      	movs	r3, #0
 8014f62:	2200      	movs	r2, #0
 8014f64:	6879      	ldr	r1, [r7, #4]
 8014f66:	68b8      	ldr	r0, [r7, #8]
 8014f68:	f001 fcb2 	bl	80168d0 <_itm_debug3>
}
 8014f6c:	bf00      	nop
 8014f6e:	3710      	adds	r7, #16
 8014f70:	46bd      	mov	sp, r7
 8014f72:	bd80      	pop	{r7, pc}
 8014f74:	2000047c 	.word	0x2000047c

08014f78 <itm_debug2>:
static inline void itm_debug2(uint32_t f, const char *msg, int v1, int v2)
{
 8014f78:	b580      	push	{r7, lr}
 8014f7a:	b086      	sub	sp, #24
 8014f7c:	af02      	add	r7, sp, #8
 8014f7e:	60f8      	str	r0, [r7, #12]
 8014f80:	60b9      	str	r1, [r7, #8]
 8014f82:	607a      	str	r2, [r7, #4]
 8014f84:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, 0, 2);
 8014f86:	4b09      	ldr	r3, [pc, #36]	; (8014fac <itm_debug2+0x34>)
 8014f88:	681a      	ldr	r2, [r3, #0]
 8014f8a:	68fb      	ldr	r3, [r7, #12]
 8014f8c:	4013      	ands	r3, r2
 8014f8e:	2b00      	cmp	r3, #0
 8014f90:	d007      	beq.n	8014fa2 <itm_debug2+0x2a>
 8014f92:	2302      	movs	r3, #2
 8014f94:	9300      	str	r3, [sp, #0]
 8014f96:	2300      	movs	r3, #0
 8014f98:	683a      	ldr	r2, [r7, #0]
 8014f9a:	6879      	ldr	r1, [r7, #4]
 8014f9c:	68b8      	ldr	r0, [r7, #8]
 8014f9e:	f001 fc97 	bl	80168d0 <_itm_debug3>
}
 8014fa2:	bf00      	nop
 8014fa4:	3710      	adds	r7, #16
 8014fa6:	46bd      	mov	sp, r7
 8014fa8:	bd80      	pop	{r7, pc}
 8014faa:	bf00      	nop
 8014fac:	2000047c 	.word	0x2000047c

08014fb0 <itm_debug3>:
static inline void itm_debug3(uint32_t f, const char *msg, int v1, int v2, int v3)
{
 8014fb0:	b580      	push	{r7, lr}
 8014fb2:	b086      	sub	sp, #24
 8014fb4:	af02      	add	r7, sp, #8
 8014fb6:	60f8      	str	r0, [r7, #12]
 8014fb8:	60b9      	str	r1, [r7, #8]
 8014fba:	607a      	str	r2, [r7, #4]
 8014fbc:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, v3, 3);
 8014fbe:	4b09      	ldr	r3, [pc, #36]	; (8014fe4 <itm_debug3+0x34>)
 8014fc0:	681a      	ldr	r2, [r3, #0]
 8014fc2:	68fb      	ldr	r3, [r7, #12]
 8014fc4:	4013      	ands	r3, r2
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	d007      	beq.n	8014fda <itm_debug3+0x2a>
 8014fca:	2303      	movs	r3, #3
 8014fcc:	9300      	str	r3, [sp, #0]
 8014fce:	69bb      	ldr	r3, [r7, #24]
 8014fd0:	683a      	ldr	r2, [r7, #0]
 8014fd2:	6879      	ldr	r1, [r7, #4]
 8014fd4:	68b8      	ldr	r0, [r7, #8]
 8014fd6:	f001 fc7b 	bl	80168d0 <_itm_debug3>
}
 8014fda:	bf00      	nop
 8014fdc:	3710      	adds	r7, #16
 8014fde:	46bd      	mov	sp, r7
 8014fe0:	bd80      	pop	{r7, pc}
 8014fe2:	bf00      	nop
 8014fe4:	2000047c 	.word	0x2000047c

08014fe8 <msg_error>:
		{MA_ADDR_MASK_5,						MA_ADDR_5_CTRL,			5}

};

static void msg_error(const char *msg)
{
 8014fe8:	b480      	push	{r7}
 8014fea:	b083      	sub	sp, #12
 8014fec:	af00      	add	r7, sp, #0
 8014fee:	6078      	str	r0, [r7, #4]

}
 8014ff0:	bf00      	nop
 8014ff2:	370c      	adds	r7, #12
 8014ff4:	46bd      	mov	sp, r7
 8014ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ffa:	4770      	bx	lr

08014ffc <dispatch_m64>:


static void dispatch_m64(msg_64_t *m, int f)
{
 8014ffc:	b580      	push	{r7, lr}
 8014ffe:	b086      	sub	sp, #24
 8015000:	af00      	add	r7, sp, #0
 8015002:	6078      	str	r0, [r7, #4]
 8015004:	6039      	str	r1, [r7, #0]
    if (m->to == MA_BROADCAST) {
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	781b      	ldrb	r3, [r3, #0]
 801500a:	2bff      	cmp	r3, #255	; 0xff
 801500c:	d118      	bne.n	8015040 <dispatch_m64+0x44>
        for (int i=0; i<NQDEF; i++) {
 801500e:	2300      	movs	r3, #0
 8015010:	617b      	str	r3, [r7, #20]
 8015012:	e011      	b.n	8015038 <dispatch_m64+0x3c>
            if (i == f) {
 8015014:	697a      	ldr	r2, [r7, #20]
 8015016:	683b      	ldr	r3, [r7, #0]
 8015018:	429a      	cmp	r2, r3
 801501a:	d009      	beq.n	8015030 <dispatch_m64+0x34>
                continue;
            }
            mqf_t *q = qdef[i].to;
 801501c:	4a30      	ldr	r2, [pc, #192]	; (80150e0 <dispatch_m64+0xe4>)
 801501e:	697b      	ldr	r3, [r7, #20]
 8015020:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8015024:	60bb      	str	r3, [r7, #8]
            mqf_write(q, m);
 8015026:	6879      	ldr	r1, [r7, #4]
 8015028:	68b8      	ldr	r0, [r7, #8]
 801502a:	f001 fd3d 	bl	8016aa8 <mqf_write>
 801502e:	e000      	b.n	8015032 <dispatch_m64+0x36>
                continue;
 8015030:	bf00      	nop
        for (int i=0; i<NQDEF; i++) {
 8015032:	697b      	ldr	r3, [r7, #20]
 8015034:	3301      	adds	r3, #1
 8015036:	617b      	str	r3, [r7, #20]
 8015038:	697b      	ldr	r3, [r7, #20]
 801503a:	2b06      	cmp	r3, #6
 801503c:	ddea      	ble.n	8015014 <dispatch_m64+0x18>
        }
        return;
 801503e:	e04b      	b.n	80150d8 <dispatch_m64+0xdc>
    }
	for (int i=0; i<NROUTES; i++) {
 8015040:	2300      	movs	r3, #0
 8015042:	613b      	str	r3, [r7, #16]
 8015044:	e03b      	b.n	80150be <dispatch_m64+0xc2>
		if ((m->to & routes[i].mask) == routes[i].value) {
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	7819      	ldrb	r1, [r3, #0]
 801504a:	4826      	ldr	r0, [pc, #152]	; (80150e4 <dispatch_m64+0xe8>)
 801504c:	693a      	ldr	r2, [r7, #16]
 801504e:	4613      	mov	r3, r2
 8015050:	005b      	lsls	r3, r3, #1
 8015052:	4413      	add	r3, r2
 8015054:	4403      	add	r3, r0
 8015056:	781b      	ldrb	r3, [r3, #0]
 8015058:	400b      	ands	r3, r1
 801505a:	b2d9      	uxtb	r1, r3
 801505c:	4821      	ldr	r0, [pc, #132]	; (80150e4 <dispatch_m64+0xe8>)
 801505e:	693a      	ldr	r2, [r7, #16]
 8015060:	4613      	mov	r3, r2
 8015062:	005b      	lsls	r3, r3, #1
 8015064:	4413      	add	r3, r2
 8015066:	4403      	add	r3, r0
 8015068:	3301      	adds	r3, #1
 801506a:	781b      	ldrb	r3, [r3, #0]
 801506c:	4299      	cmp	r1, r3
 801506e:	d123      	bne.n	80150b8 <dispatch_m64+0xbc>
			if (f==routes[i].destq) {
 8015070:	491c      	ldr	r1, [pc, #112]	; (80150e4 <dispatch_m64+0xe8>)
 8015072:	693a      	ldr	r2, [r7, #16]
 8015074:	4613      	mov	r3, r2
 8015076:	005b      	lsls	r3, r3, #1
 8015078:	4413      	add	r3, r2
 801507a:	440b      	add	r3, r1
 801507c:	3302      	adds	r3, #2
 801507e:	781b      	ldrb	r3, [r3, #0]
 8015080:	461a      	mov	r2, r3
 8015082:	683b      	ldr	r3, [r7, #0]
 8015084:	4293      	cmp	r3, r2
 8015086:	d105      	bne.n	8015094 <dispatch_m64+0x98>
				// loop
				itm_debug1(DBG_ERR|DBG_MSG, "loop", f);
 8015088:	683a      	ldr	r2, [r7, #0]
 801508a:	4917      	ldr	r1, [pc, #92]	; (80150e8 <dispatch_m64+0xec>)
 801508c:	4817      	ldr	r0, [pc, #92]	; (80150ec <dispatch_m64+0xf0>)
 801508e:	f7ff ff59 	bl	8014f44 <itm_debug1>
				return;
 8015092:	e021      	b.n	80150d8 <dispatch_m64+0xdc>
			}
			mqf_t *q = qdef[routes[i].destq].to;
 8015094:	4913      	ldr	r1, [pc, #76]	; (80150e4 <dispatch_m64+0xe8>)
 8015096:	693a      	ldr	r2, [r7, #16]
 8015098:	4613      	mov	r3, r2
 801509a:	005b      	lsls	r3, r3, #1
 801509c:	4413      	add	r3, r2
 801509e:	440b      	add	r3, r1
 80150a0:	3302      	adds	r3, #2
 80150a2:	781b      	ldrb	r3, [r3, #0]
 80150a4:	461a      	mov	r2, r3
 80150a6:	4b0e      	ldr	r3, [pc, #56]	; (80150e0 <dispatch_m64+0xe4>)
 80150a8:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80150ac:	60fb      	str	r3, [r7, #12]
			mqf_write(q, m);
 80150ae:	6879      	ldr	r1, [r7, #4]
 80150b0:	68f8      	ldr	r0, [r7, #12]
 80150b2:	f001 fcf9 	bl	8016aa8 <mqf_write>
			return;
 80150b6:	e00f      	b.n	80150d8 <dispatch_m64+0xdc>
	for (int i=0; i<NROUTES; i++) {
 80150b8:	693b      	ldr	r3, [r7, #16]
 80150ba:	3301      	adds	r3, #1
 80150bc:	613b      	str	r3, [r7, #16]
 80150be:	693b      	ldr	r3, [r7, #16]
 80150c0:	2b07      	cmp	r3, #7
 80150c2:	ddc0      	ble.n	8015046 <dispatch_m64+0x4a>
		}
	}
	itm_debug1(DBG_ERR|DBG_MSG, "no route", m->to);
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	781b      	ldrb	r3, [r3, #0]
 80150c8:	461a      	mov	r2, r3
 80150ca:	4909      	ldr	r1, [pc, #36]	; (80150f0 <dispatch_m64+0xf4>)
 80150cc:	4807      	ldr	r0, [pc, #28]	; (80150ec <dispatch_m64+0xf0>)
 80150ce:	f7ff ff39 	bl	8014f44 <itm_debug1>
	msg_error("no route");
 80150d2:	4807      	ldr	r0, [pc, #28]	; (80150f0 <dispatch_m64+0xf4>)
 80150d4:	f7ff ff88 	bl	8014fe8 <msg_error>
}
 80150d8:	3718      	adds	r7, #24
 80150da:	46bd      	mov	sp, r7
 80150dc:	bd80      	pop	{r7, pc}
 80150de:	bf00      	nop
 80150e0:	08018da8 	.word	0x08018da8
 80150e4:	08018de0 	.word	0x08018de0
 80150e8:	080173e8 	.word	0x080173e8
 80150ec:	80000002 	.word	0x80000002
 80150f0:	080173f0 	.word	0x080173f0

080150f4 <dump_qusage>:


static void dump_qusage(int i, int d, mqf_t *q)
{
 80150f4:	b5b0      	push	{r4, r5, r7, lr}
 80150f6:	b086      	sub	sp, #24
 80150f8:	af02      	add	r7, sp, #8
 80150fa:	60f8      	str	r0, [r7, #12]
 80150fc:	60b9      	str	r1, [r7, #8]
 80150fe:	607a      	str	r2, [r7, #4]
	itm_debug3(DBG_ERR, "qu", d*100+i, q->maxuse, mqf_len(q));
 8015100:	68bb      	ldr	r3, [r7, #8]
 8015102:	2264      	movs	r2, #100	; 0x64
 8015104:	fb02 f203 	mul.w	r2, r2, r3
 8015108:	68fb      	ldr	r3, [r7, #12]
 801510a:	18d4      	adds	r4, r2, r3
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	799b      	ldrb	r3, [r3, #6]
 8015110:	461d      	mov	r5, r3
 8015112:	6878      	ldr	r0, [r7, #4]
 8015114:	f001 fc86 	bl	8016a24 <mqf_len>
 8015118:	4603      	mov	r3, r0
 801511a:	9300      	str	r3, [sp, #0]
 801511c:	462b      	mov	r3, r5
 801511e:	4622      	mov	r2, r4
 8015120:	4905      	ldr	r1, [pc, #20]	; (8015138 <dump_qusage+0x44>)
 8015122:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8015126:	f7ff ff43 	bl	8014fb0 <itm_debug3>
	q->maxuse = 0;
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	2200      	movs	r2, #0
 801512e:	719a      	strb	r2, [r3, #6]
}
 8015130:	bf00      	nop
 8015132:	3710      	adds	r7, #16
 8015134:	46bd      	mov	sp, r7
 8015136:	bdb0      	pop	{r4, r5, r7, pc}
 8015138:	080173fc 	.word	0x080173fc

0801513c <msgsrv_tick>:

void msgsrv_tick(uint32_t notif_flags, uint32_t tick, uint32_t dt)
{
 801513c:	b580      	push	{r7, lr}
 801513e:	b08c      	sub	sp, #48	; 0x30
 8015140:	af02      	add	r7, sp, #8
 8015142:	60f8      	str	r0, [r7, #12]
 8015144:	60b9      	str	r1, [r7, #8]
 8015146:	607a      	str	r2, [r7, #4]
    static int first = 1;
    if (first) {
        if (sizeof(msg_64_t) != 8) abort();
    }
	for (int i=0; i<NQDEF; i++) {
 8015148:	2300      	movs	r3, #0
 801514a:	627b      	str	r3, [r7, #36]	; 0x24
 801514c:	e051      	b.n	80151f2 <msgsrv_tick+0xb6>
		mqf_t *q = qdef[i].from;
 801514e:	4a40      	ldr	r2, [pc, #256]	; (8015250 <msgsrv_tick+0x114>)
 8015150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015152:	00db      	lsls	r3, r3, #3
 8015154:	4413      	add	r3, r2
 8015156:	685b      	ldr	r3, [r3, #4]
 8015158:	61fb      	str	r3, [r7, #28]

		itm_debug2(DBG_MSG, "mlen1",i, mqf_len(q));
 801515a:	69f8      	ldr	r0, [r7, #28]
 801515c:	f001 fc62 	bl	8016a24 <mqf_len>
 8015160:	4603      	mov	r3, r0
 8015162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015164:	493b      	ldr	r1, [pc, #236]	; (8015254 <msgsrv_tick+0x118>)
 8015166:	2002      	movs	r0, #2
 8015168:	f7ff ff06 	bl	8014f78 <itm_debug2>
		itm_debug3(DBG_MSG, "mth1 ", i, q->head, q->tail);
 801516c:	69fb      	ldr	r3, [r7, #28]
 801516e:	881b      	ldrh	r3, [r3, #0]
 8015170:	b29b      	uxth	r3, r3
 8015172:	461a      	mov	r2, r3
 8015174:	69fb      	ldr	r3, [r7, #28]
 8015176:	885b      	ldrh	r3, [r3, #2]
 8015178:	b29b      	uxth	r3, r3
 801517a:	9300      	str	r3, [sp, #0]
 801517c:	4613      	mov	r3, r2
 801517e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015180:	4935      	ldr	r1, [pc, #212]	; (8015258 <msgsrv_tick+0x11c>)
 8015182:	2002      	movs	r0, #2
 8015184:	f7ff ff14 	bl	8014fb0 <itm_debug3>
		for (;;) {
				msg_64_t m;
				int rc = mqf_read(q, &m);
 8015188:	f107 0310 	add.w	r3, r7, #16
 801518c:	4619      	mov	r1, r3
 801518e:	69f8      	ldr	r0, [r7, #28]
 8015190:	f001 fd04 	bl	8016b9c <mqf_read>
 8015194:	61b8      	str	r0, [r7, #24]
				if (rc) break;
 8015196:	69bb      	ldr	r3, [r7, #24]
 8015198:	2b00      	cmp	r3, #0
 801519a:	d01a      	beq.n	80151d2 <msgsrv_tick+0x96>
				if (i==5) {
					itm_debug1(DBG_MSG, "from ctrl", m.cmd);
				}
				dispatch_m64(&m, i);
			}
		itm_debug2(DBG_MSG, "mlen2",i, mqf_len(q));
 801519c:	69f8      	ldr	r0, [r7, #28]
 801519e:	f001 fc41 	bl	8016a24 <mqf_len>
 80151a2:	4603      	mov	r3, r0
 80151a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80151a6:	492d      	ldr	r1, [pc, #180]	; (801525c <msgsrv_tick+0x120>)
 80151a8:	2002      	movs	r0, #2
 80151aa:	f7ff fee5 	bl	8014f78 <itm_debug2>
		itm_debug3(DBG_MSG, "mth2 ", i, q->head, q->tail);
 80151ae:	69fb      	ldr	r3, [r7, #28]
 80151b0:	881b      	ldrh	r3, [r3, #0]
 80151b2:	b29b      	uxth	r3, r3
 80151b4:	461a      	mov	r2, r3
 80151b6:	69fb      	ldr	r3, [r7, #28]
 80151b8:	885b      	ldrh	r3, [r3, #2]
 80151ba:	b29b      	uxth	r3, r3
 80151bc:	9300      	str	r3, [sp, #0]
 80151be:	4613      	mov	r3, r2
 80151c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80151c2:	4927      	ldr	r1, [pc, #156]	; (8015260 <msgsrv_tick+0x124>)
 80151c4:	2002      	movs	r0, #2
 80151c6:	f7ff fef3 	bl	8014fb0 <itm_debug3>
	for (int i=0; i<NQDEF; i++) {
 80151ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151cc:	3301      	adds	r3, #1
 80151ce:	627b      	str	r3, [r7, #36]	; 0x24
 80151d0:	e00f      	b.n	80151f2 <msgsrv_tick+0xb6>
				if (i==5) {
 80151d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151d4:	2b05      	cmp	r3, #5
 80151d6:	d105      	bne.n	80151e4 <msgsrv_tick+0xa8>
					itm_debug1(DBG_MSG, "from ctrl", m.cmd);
 80151d8:	7cbb      	ldrb	r3, [r7, #18]
 80151da:	461a      	mov	r2, r3
 80151dc:	4921      	ldr	r1, [pc, #132]	; (8015264 <msgsrv_tick+0x128>)
 80151de:	2002      	movs	r0, #2
 80151e0:	f7ff feb0 	bl	8014f44 <itm_debug1>
				dispatch_m64(&m, i);
 80151e4:	f107 0310 	add.w	r3, r7, #16
 80151e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80151ea:	4618      	mov	r0, r3
 80151ec:	f7ff ff06 	bl	8014ffc <dispatch_m64>
		for (;;) {
 80151f0:	e7ca      	b.n	8015188 <msgsrv_tick+0x4c>
	for (int i=0; i<NQDEF; i++) {
 80151f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151f4:	2b06      	cmp	r3, #6
 80151f6:	ddaa      	ble.n	801514e <msgsrv_tick+0x12>
	}
	if ((1)) {
		static uint32_t last=0;
		if (tick>=last+10000) {
 80151f8:	4b1b      	ldr	r3, [pc, #108]	; (8015268 <msgsrv_tick+0x12c>)
 80151fa:	681b      	ldr	r3, [r3, #0]
 80151fc:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8015200:	3310      	adds	r3, #16
 8015202:	68ba      	ldr	r2, [r7, #8]
 8015204:	429a      	cmp	r2, r3
 8015206:	d31e      	bcc.n	8015246 <msgsrv_tick+0x10a>
			for (int i=0; i<NQDEF; i++) {
 8015208:	2300      	movs	r3, #0
 801520a:	623b      	str	r3, [r7, #32]
 801520c:	e015      	b.n	801523a <msgsrv_tick+0xfe>
				dump_qusage(i, 0, qdef[i].from);
 801520e:	4a10      	ldr	r2, [pc, #64]	; (8015250 <msgsrv_tick+0x114>)
 8015210:	6a3b      	ldr	r3, [r7, #32]
 8015212:	00db      	lsls	r3, r3, #3
 8015214:	4413      	add	r3, r2
 8015216:	685b      	ldr	r3, [r3, #4]
 8015218:	461a      	mov	r2, r3
 801521a:	2100      	movs	r1, #0
 801521c:	6a38      	ldr	r0, [r7, #32]
 801521e:	f7ff ff69 	bl	80150f4 <dump_qusage>
				dump_qusage(i, 1, qdef[i].to);
 8015222:	4a0b      	ldr	r2, [pc, #44]	; (8015250 <msgsrv_tick+0x114>)
 8015224:	6a3b      	ldr	r3, [r7, #32]
 8015226:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801522a:	461a      	mov	r2, r3
 801522c:	2101      	movs	r1, #1
 801522e:	6a38      	ldr	r0, [r7, #32]
 8015230:	f7ff ff60 	bl	80150f4 <dump_qusage>
			for (int i=0; i<NQDEF; i++) {
 8015234:	6a3b      	ldr	r3, [r7, #32]
 8015236:	3301      	adds	r3, #1
 8015238:	623b      	str	r3, [r7, #32]
 801523a:	6a3b      	ldr	r3, [r7, #32]
 801523c:	2b06      	cmp	r3, #6
 801523e:	dde6      	ble.n	801520e <msgsrv_tick+0xd2>
			}
			last = tick;
 8015240:	4a09      	ldr	r2, [pc, #36]	; (8015268 <msgsrv_tick+0x12c>)
 8015242:	68bb      	ldr	r3, [r7, #8]
 8015244:	6013      	str	r3, [r2, #0]
		}
	}
}
 8015246:	bf00      	nop
 8015248:	3728      	adds	r7, #40	; 0x28
 801524a:	46bd      	mov	sp, r7
 801524c:	bd80      	pop	{r7, pc}
 801524e:	bf00      	nop
 8015250:	08018da8 	.word	0x08018da8
 8015254:	08017400 	.word	0x08017400
 8015258:	08017408 	.word	0x08017408
 801525c:	08017410 	.word	0x08017410
 8015260:	08017418 	.word	0x08017418
 8015264:	08017420 	.word	0x08017420
 8015268:	2000527c 	.word	0x2000527c

0801526c <inertia_value>:
{
	vars->target = v;
}

int16_t inertia_value(const inertia_config_t *config, inertia_vars_t *vars, uint16_t elapsed_ticks, int *pchanged)
{
 801526c:	b480      	push	{r7}
 801526e:	b08b      	sub	sp, #44	; 0x2c
 8015270:	af00      	add	r7, sp, #0
 8015272:	60f8      	str	r0, [r7, #12]
 8015274:	60b9      	str	r1, [r7, #8]
 8015276:	603b      	str	r3, [r7, #0]
 8015278:	4613      	mov	r3, r2
 801527a:	80fb      	strh	r3, [r7, #6]
	int st =  SIGNOF(vars->target);
 801527c:	68bb      	ldr	r3, [r7, #8]
 801527e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015282:	2b00      	cmp	r3, #0
 8015284:	da02      	bge.n	801528c <inertia_value+0x20>
 8015286:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801528a:	e000      	b.n	801528e <inertia_value+0x22>
 801528c:	2301      	movs	r3, #1
 801528e:	623b      	str	r3, [r7, #32]
	int sc =  SIGNOF(vars->cur);
 8015290:	68bb      	ldr	r3, [r7, #8]
 8015292:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015296:	2b00      	cmp	r3, #0
 8015298:	da02      	bge.n	80152a0 <inertia_value+0x34>
 801529a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801529e:	e000      	b.n	80152a2 <inertia_value+0x36>
 80152a0:	2301      	movs	r3, #1
 80152a2:	61fb      	str	r3, [r7, #28]
	int inc;

    if (pchanged) *pchanged = 0;
 80152a4:	683b      	ldr	r3, [r7, #0]
 80152a6:	2b00      	cmp	r3, #0
 80152a8:	d002      	beq.n	80152b0 <inertia_value+0x44>
 80152aa:	683b      	ldr	r3, [r7, #0]
 80152ac:	2200      	movs	r2, #0
 80152ae:	601a      	str	r2, [r3, #0]
    if (vars->target == vars->cur/10) return vars->target;
 80152b0:	68bb      	ldr	r3, [r7, #8]
 80152b2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80152b6:	68bb      	ldr	r3, [r7, #8]
 80152b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80152bc:	496f      	ldr	r1, [pc, #444]	; (801547c <inertia_value+0x210>)
 80152be:	fb81 0103 	smull	r0, r1, r1, r3
 80152c2:	1089      	asrs	r1, r1, #2
 80152c4:	17db      	asrs	r3, r3, #31
 80152c6:	1acb      	subs	r3, r1, r3
 80152c8:	b21b      	sxth	r3, r3
 80152ca:	429a      	cmp	r2, r3
 80152cc:	d103      	bne.n	80152d6 <inertia_value+0x6a>
 80152ce:	68bb      	ldr	r3, [r7, #8]
 80152d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80152d4:	e0cb      	b.n	801546e <inertia_value+0x202>
    //debug_info(0, "INER", vars->target, vars->cur);


	if (st*sc >= 0) {
 80152d6:	6a3b      	ldr	r3, [r7, #32]
 80152d8:	69fa      	ldr	r2, [r7, #28]
 80152da:	fb02 f303 	mul.w	r3, r2, r3
 80152de:	2b00      	cmp	r3, #0
 80152e0:	db6c      	blt.n	80153bc <inertia_value+0x150>
		// same direction
		if (abs(vars->target*10)>abs(vars->cur)) {
 80152e2:	68bb      	ldr	r3, [r7, #8]
 80152e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80152e8:	461a      	mov	r2, r3
 80152ea:	4613      	mov	r3, r2
 80152ec:	009b      	lsls	r3, r3, #2
 80152ee:	4413      	add	r3, r2
 80152f0:	005b      	lsls	r3, r3, #1
 80152f2:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80152f6:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80152fa:	68bb      	ldr	r3, [r7, #8]
 80152fc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015300:	2b00      	cmp	r3, #0
 8015302:	bfb8      	it	lt
 8015304:	425b      	neglt	r3, r3
 8015306:	429a      	cmp	r2, r3
 8015308:	dd2b      	ble.n	8015362 <inertia_value+0xf6>
			// acceleration
			inc = config->acc * elapsed_ticks / 1000;
 801530a:	68fb      	ldr	r3, [r7, #12]
 801530c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015310:	461a      	mov	r2, r3
 8015312:	88fb      	ldrh	r3, [r7, #6]
 8015314:	fb03 f302 	mul.w	r3, r3, r2
 8015318:	4a59      	ldr	r2, [pc, #356]	; (8015480 <inertia_value+0x214>)
 801531a:	fb82 1203 	smull	r1, r2, r2, r3
 801531e:	1192      	asrs	r2, r2, #6
 8015320:	17db      	asrs	r3, r3, #31
 8015322:	1ad3      	subs	r3, r2, r3
 8015324:	627b      	str	r3, [r7, #36]	; 0x24
			inc = MIN(inc, abs(vars->target*10)-abs(vars->cur));
 8015326:	68bb      	ldr	r3, [r7, #8]
 8015328:	f9b3 3000 	ldrsh.w	r3, [r3]
 801532c:	461a      	mov	r2, r3
 801532e:	4613      	mov	r3, r2
 8015330:	009b      	lsls	r3, r3, #2
 8015332:	4413      	add	r3, r2
 8015334:	005b      	lsls	r3, r3, #1
 8015336:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 801533a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 801533e:	68bb      	ldr	r3, [r7, #8]
 8015340:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015344:	2b00      	cmp	r3, #0
 8015346:	bfb8      	it	lt
 8015348:	425b      	neglt	r3, r3
 801534a:	1ad3      	subs	r3, r2, r3
 801534c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801534e:	4293      	cmp	r3, r2
 8015350:	bfa8      	it	ge
 8015352:	4613      	movge	r3, r2
 8015354:	627b      	str	r3, [r7, #36]	; 0x24
			inc = sc * inc;
 8015356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015358:	69fa      	ldr	r2, [r7, #28]
 801535a:	fb02 f303 	mul.w	r3, r2, r3
 801535e:	627b      	str	r3, [r7, #36]	; 0x24
 8015360:	e055      	b.n	801540e <inertia_value+0x1a2>
		} else {
			// deceleration
			inc = config->dec * elapsed_ticks / 1000;
 8015362:	68fb      	ldr	r3, [r7, #12]
 8015364:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015368:	461a      	mov	r2, r3
 801536a:	88fb      	ldrh	r3, [r7, #6]
 801536c:	fb03 f302 	mul.w	r3, r3, r2
 8015370:	4a43      	ldr	r2, [pc, #268]	; (8015480 <inertia_value+0x214>)
 8015372:	fb82 1203 	smull	r1, r2, r2, r3
 8015376:	1192      	asrs	r2, r2, #6
 8015378:	17db      	asrs	r3, r3, #31
 801537a:	1ad3      	subs	r3, r2, r3
 801537c:	627b      	str	r3, [r7, #36]	; 0x24
			inc = MIN(inc, -abs(vars->target*10)+abs(vars->cur));
 801537e:	68bb      	ldr	r3, [r7, #8]
 8015380:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015384:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8015388:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 801538c:	68bb      	ldr	r3, [r7, #8]
 801538e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015392:	4619      	mov	r1, r3
 8015394:	460b      	mov	r3, r1
 8015396:	009b      	lsls	r3, r3, #2
 8015398:	440b      	add	r3, r1
 801539a:	005b      	lsls	r3, r3, #1
 801539c:	2b00      	cmp	r3, #0
 801539e:	bfb8      	it	lt
 80153a0:	425b      	neglt	r3, r3
 80153a2:	1ad3      	subs	r3, r2, r3
 80153a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80153a6:	4293      	cmp	r3, r2
 80153a8:	bfa8      	it	ge
 80153aa:	4613      	movge	r3, r2
 80153ac:	627b      	str	r3, [r7, #36]	; 0x24
			inc = -sc * inc;
 80153ae:	69fb      	ldr	r3, [r7, #28]
 80153b0:	425a      	negs	r2, r3
 80153b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153b4:	fb02 f303 	mul.w	r3, r2, r3
 80153b8:	627b      	str	r3, [r7, #36]	; 0x24
 80153ba:	e028      	b.n	801540e <inertia_value+0x1a2>
		}
	} else {
		// dir change
		inc = config->dec * elapsed_ticks / 1000;
 80153bc:	68fb      	ldr	r3, [r7, #12]
 80153be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80153c2:	461a      	mov	r2, r3
 80153c4:	88fb      	ldrh	r3, [r7, #6]
 80153c6:	fb03 f302 	mul.w	r3, r3, r2
 80153ca:	4a2d      	ldr	r2, [pc, #180]	; (8015480 <inertia_value+0x214>)
 80153cc:	fb82 1203 	smull	r1, r2, r2, r3
 80153d0:	1192      	asrs	r2, r2, #6
 80153d2:	17db      	asrs	r3, r3, #31
 80153d4:	1ad3      	subs	r3, r2, r3
 80153d6:	627b      	str	r3, [r7, #36]	; 0x24
        inc = MIN(inc, abs(vars->target*10-vars->cur));
 80153d8:	68bb      	ldr	r3, [r7, #8]
 80153da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80153de:	461a      	mov	r2, r3
 80153e0:	4613      	mov	r3, r2
 80153e2:	009b      	lsls	r3, r3, #2
 80153e4:	4413      	add	r3, r2
 80153e6:	005b      	lsls	r3, r3, #1
 80153e8:	461a      	mov	r2, r3
 80153ea:	68bb      	ldr	r3, [r7, #8]
 80153ec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80153f0:	1ad3      	subs	r3, r2, r3
 80153f2:	2b00      	cmp	r3, #0
 80153f4:	bfb8      	it	lt
 80153f6:	425b      	neglt	r3, r3
 80153f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80153fa:	4293      	cmp	r3, r2
 80153fc:	bfa8      	it	ge
 80153fe:	4613      	movge	r3, r2
 8015400:	627b      	str	r3, [r7, #36]	; 0x24
        inc = -1 * sc * inc;
 8015402:	69fb      	ldr	r3, [r7, #28]
 8015404:	425a      	negs	r2, r3
 8015406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015408:	fb02 f303 	mul.w	r3, r2, r3
 801540c:	627b      	str	r3, [r7, #36]	; 0x24
	}
	int vold = vars->cur/10;
 801540e:	68bb      	ldr	r3, [r7, #8]
 8015410:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015414:	4a19      	ldr	r2, [pc, #100]	; (801547c <inertia_value+0x210>)
 8015416:	fb82 1203 	smull	r1, r2, r2, r3
 801541a:	1092      	asrs	r2, r2, #2
 801541c:	17db      	asrs	r3, r3, #31
 801541e:	1ad3      	subs	r3, r2, r3
 8015420:	b21b      	sxth	r3, r3
 8015422:	61bb      	str	r3, [r7, #24]
	vars->cur += inc;
 8015424:	68bb      	ldr	r3, [r7, #8]
 8015426:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801542a:	b29a      	uxth	r2, r3
 801542c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801542e:	b29b      	uxth	r3, r3
 8015430:	4413      	add	r3, r2
 8015432:	b29b      	uxth	r3, r3
 8015434:	b21a      	sxth	r2, r3
 8015436:	68bb      	ldr	r3, [r7, #8]
 8015438:	805a      	strh	r2, [r3, #2]
	int vnew = vars->cur/10;
 801543a:	68bb      	ldr	r3, [r7, #8]
 801543c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015440:	4a0e      	ldr	r2, [pc, #56]	; (801547c <inertia_value+0x210>)
 8015442:	fb82 1203 	smull	r1, r2, r2, r3
 8015446:	1092      	asrs	r2, r2, #2
 8015448:	17db      	asrs	r3, r3, #31
 801544a:	1ad3      	subs	r3, r2, r3
 801544c:	b21b      	sxth	r3, r3
 801544e:	617b      	str	r3, [r7, #20]
    if (pchanged) *pchanged = (vnew==vold) ? 0 : 1;
 8015450:	683b      	ldr	r3, [r7, #0]
 8015452:	2b00      	cmp	r3, #0
 8015454:	d009      	beq.n	801546a <inertia_value+0x1fe>
 8015456:	697a      	ldr	r2, [r7, #20]
 8015458:	69bb      	ldr	r3, [r7, #24]
 801545a:	429a      	cmp	r2, r3
 801545c:	bf14      	ite	ne
 801545e:	2301      	movne	r3, #1
 8015460:	2300      	moveq	r3, #0
 8015462:	b2db      	uxtb	r3, r3
 8015464:	461a      	mov	r2, r3
 8015466:	683b      	ldr	r3, [r7, #0]
 8015468:	601a      	str	r2, [r3, #0]
    //debug_info(0, "INC/c", inc, vars->cur);
	return vnew;
 801546a:	697b      	ldr	r3, [r7, #20]
 801546c:	b21b      	sxth	r3, r3
}
 801546e:	4618      	mov	r0, r3
 8015470:	372c      	adds	r7, #44	; 0x2c
 8015472:	46bd      	mov	sp, r7
 8015474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015478:	4770      	bx	lr
 801547a:	bf00      	nop
 801547c:	66666667 	.word	0x66666667
 8015480:	10624dd3 	.word	0x10624dd3

08015484 <itm_debug1>:
{
 8015484:	b580      	push	{r7, lr}
 8015486:	b086      	sub	sp, #24
 8015488:	af02      	add	r7, sp, #8
 801548a:	60f8      	str	r0, [r7, #12]
 801548c:	60b9      	str	r1, [r7, #8]
 801548e:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 8015490:	4b08      	ldr	r3, [pc, #32]	; (80154b4 <itm_debug1+0x30>)
 8015492:	681a      	ldr	r2, [r3, #0]
 8015494:	68fb      	ldr	r3, [r7, #12]
 8015496:	4013      	ands	r3, r2
 8015498:	2b00      	cmp	r3, #0
 801549a:	d007      	beq.n	80154ac <itm_debug1+0x28>
 801549c:	2301      	movs	r3, #1
 801549e:	9300      	str	r3, [sp, #0]
 80154a0:	2300      	movs	r3, #0
 80154a2:	2200      	movs	r2, #0
 80154a4:	6879      	ldr	r1, [r7, #4]
 80154a6:	68b8      	ldr	r0, [r7, #8]
 80154a8:	f001 fa12 	bl	80168d0 <_itm_debug3>
}
 80154ac:	bf00      	nop
 80154ae:	3710      	adds	r7, #16
 80154b0:	46bd      	mov	sp, r7
 80154b2:	bd80      	pop	{r7, pc}
 80154b4:	2000047c 	.word	0x2000047c

080154b8 <itm_debug2>:
{
 80154b8:	b580      	push	{r7, lr}
 80154ba:	b086      	sub	sp, #24
 80154bc:	af02      	add	r7, sp, #8
 80154be:	60f8      	str	r0, [r7, #12]
 80154c0:	60b9      	str	r1, [r7, #8]
 80154c2:	607a      	str	r2, [r7, #4]
 80154c4:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, 0, 2);
 80154c6:	4b09      	ldr	r3, [pc, #36]	; (80154ec <itm_debug2+0x34>)
 80154c8:	681a      	ldr	r2, [r3, #0]
 80154ca:	68fb      	ldr	r3, [r7, #12]
 80154cc:	4013      	ands	r3, r2
 80154ce:	2b00      	cmp	r3, #0
 80154d0:	d007      	beq.n	80154e2 <itm_debug2+0x2a>
 80154d2:	2302      	movs	r3, #2
 80154d4:	9300      	str	r3, [sp, #0]
 80154d6:	2300      	movs	r3, #0
 80154d8:	683a      	ldr	r2, [r7, #0]
 80154da:	6879      	ldr	r1, [r7, #4]
 80154dc:	68b8      	ldr	r0, [r7, #8]
 80154de:	f001 f9f7 	bl	80168d0 <_itm_debug3>
}
 80154e2:	bf00      	nop
 80154e4:	3710      	adds	r7, #16
 80154e6:	46bd      	mov	sp, r7
 80154e8:	bd80      	pop	{r7, pc}
 80154ea:	bf00      	nop
 80154ec:	2000047c 	.word	0x2000047c

080154f0 <itm_debug3>:
{
 80154f0:	b580      	push	{r7, lr}
 80154f2:	b086      	sub	sp, #24
 80154f4:	af02      	add	r7, sp, #8
 80154f6:	60f8      	str	r0, [r7, #12]
 80154f8:	60b9      	str	r1, [r7, #8]
 80154fa:	607a      	str	r2, [r7, #4]
 80154fc:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, v3, 3);
 80154fe:	4b09      	ldr	r3, [pc, #36]	; (8015524 <itm_debug3+0x34>)
 8015500:	681a      	ldr	r2, [r3, #0]
 8015502:	68fb      	ldr	r3, [r7, #12]
 8015504:	4013      	ands	r3, r2
 8015506:	2b00      	cmp	r3, #0
 8015508:	d007      	beq.n	801551a <itm_debug3+0x2a>
 801550a:	2303      	movs	r3, #3
 801550c:	9300      	str	r3, [sp, #0]
 801550e:	69bb      	ldr	r3, [r7, #24]
 8015510:	683a      	ldr	r2, [r7, #0]
 8015512:	6879      	ldr	r1, [r7, #4]
 8015514:	68b8      	ldr	r0, [r7, #8]
 8015516:	f001 f9db 	bl	80168d0 <_itm_debug3>
}
 801551a:	bf00      	nop
 801551c:	3710      	adds	r7, #16
 801551e:	46bd      	mov	sp, r7
 8015520:	bd80      	pop	{r7, pc}
 8015522:	bf00      	nop
 8015524:	2000047c 	.word	0x2000047c

08015528 <pidctl_reset>:
#include <memory.h>
#include "pidctl.h"
#include "misc.h"

void pidctl_reset(const pidctl_config_t *c, pidctl_vars_t *v)
{
 8015528:	b480      	push	{r7}
 801552a:	b083      	sub	sp, #12
 801552c:	af00      	add	r7, sp, #0
 801552e:	6078      	str	r0, [r7, #4]
 8015530:	6039      	str	r1, [r7, #0]
    v->has_last = 0;
 8015532:	683a      	ldr	r2, [r7, #0]
 8015534:	7b13      	ldrb	r3, [r2, #12]
 8015536:	f36f 0300 	bfc	r3, #0, #1
 801553a:	7313      	strb	r3, [r2, #12]
	v->last_err = 0;
 801553c:	683b      	ldr	r3, [r7, #0]
 801553e:	2200      	movs	r2, #0
 8015540:	601a      	str	r2, [r3, #0]
	v->sume     = 0;
 8015542:	683b      	ldr	r3, [r7, #0]
 8015544:	2200      	movs	r2, #0
 8015546:	605a      	str	r2, [r3, #4]
	v->target_v = 0;
 8015548:	683b      	ldr	r3, [r7, #0]
 801554a:	2200      	movs	r2, #0
 801554c:	609a      	str	r2, [r3, #8]
	v->stopped = 1;
 801554e:	683a      	ldr	r2, [r7, #0]
 8015550:	7b13      	ldrb	r3, [r2, #12]
 8015552:	f043 0302 	orr.w	r3, r3, #2
 8015556:	7313      	strb	r3, [r2, #12]
	v->has_last = 0;
 8015558:	683a      	ldr	r2, [r7, #0]
 801555a:	7b13      	ldrb	r3, [r2, #12]
 801555c:	f36f 0300 	bfc	r3, #0, #1
 8015560:	7313      	strb	r3, [r2, #12]
}
 8015562:	bf00      	nop
 8015564:	370c      	adds	r7, #12
 8015566:	46bd      	mov	sp, r7
 8015568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801556c:	4770      	bx	lr
	...

08015570 <pidctl_set_target>:

void pidctl_set_target(const pidctl_config_t *c, pidctl_vars_t *v, int32_t val)
{
 8015570:	b580      	push	{r7, lr}
 8015572:	b084      	sub	sp, #16
 8015574:	af00      	add	r7, sp, #0
 8015576:	60f8      	str	r0, [r7, #12]
 8015578:	60b9      	str	r1, [r7, #8]
 801557a:	607a      	str	r2, [r7, #4]
	if ((0)) pidctl_reset(c,v);
    if ((0)) v->sume = val;
    itm_debug1(DBG_PID, "pid trg", val);
 801557c:	687a      	ldr	r2, [r7, #4]
 801557e:	4905      	ldr	r1, [pc, #20]	; (8015594 <pidctl_set_target+0x24>)
 8015580:	2004      	movs	r0, #4
 8015582:	f7ff ff7f 	bl	8015484 <itm_debug1>
	v->target_v = val;
 8015586:	68bb      	ldr	r3, [r7, #8]
 8015588:	687a      	ldr	r2, [r7, #4]
 801558a:	609a      	str	r2, [r3, #8]
}
 801558c:	bf00      	nop
 801558e:	3710      	adds	r7, #16
 8015590:	46bd      	mov	sp, r7
 8015592:	bd80      	pop	{r7, pc}
 8015594:	0801742c 	.word	0x0801742c

08015598 <pidctl_value>:

#define MAX_I (25000)

int32_t pidctl_value(const pidctl_config_t *c, pidctl_vars_t *v, int32_t cur_v, uint32_t dt)
{
 8015598:	b580      	push	{r7, lr}
 801559a:	b08a      	sub	sp, #40	; 0x28
 801559c:	af02      	add	r7, sp, #8
 801559e:	60f8      	str	r0, [r7, #12]
 80155a0:	60b9      	str	r1, [r7, #8]
 80155a2:	607a      	str	r2, [r7, #4]
 80155a4:	603b      	str	r3, [r7, #0]
	// cuv in native BEMF value
    if (!dt) dt = 1;
 80155a6:	683b      	ldr	r3, [r7, #0]
 80155a8:	2b00      	cmp	r3, #0
 80155aa:	d101      	bne.n	80155b0 <pidctl_value+0x18>
 80155ac:	2301      	movs	r3, #1
 80155ae:	603b      	str	r3, [r7, #0]
    if (dt>100) dt=100;
 80155b0:	683b      	ldr	r3, [r7, #0]
 80155b2:	2b64      	cmp	r3, #100	; 0x64
 80155b4:	d901      	bls.n	80155ba <pidctl_value+0x22>
 80155b6:	2364      	movs	r3, #100	; 0x64
 80155b8:	603b      	str	r3, [r7, #0]
	int32_t err = v->target_v - cur_v;
 80155ba:	68bb      	ldr	r3, [r7, #8]
 80155bc:	689a      	ldr	r2, [r3, #8]
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	1ad3      	subs	r3, r2, r3
 80155c2:	61fb      	str	r3, [r7, #28]
    if (err> 2*MAX_PID_VALUE) err =  2*MAX_PID_VALUE;
 80155c4:	69fb      	ldr	r3, [r7, #28]
 80155c6:	f5b3 7f0c 	cmp.w	r3, #560	; 0x230
 80155ca:	dd02      	ble.n	80155d2 <pidctl_value+0x3a>
 80155cc:	f44f 730c 	mov.w	r3, #560	; 0x230
 80155d0:	61fb      	str	r3, [r7, #28]
    if (err<-2*MAX_PID_VALUE) err = -2*MAX_PID_VALUE;
 80155d2:	69fb      	ldr	r3, [r7, #28]
 80155d4:	f513 7f0c 	cmn.w	r3, #560	; 0x230
 80155d8:	da01      	bge.n	80155de <pidctl_value+0x46>
 80155da:	4b3c      	ldr	r3, [pc, #240]	; (80156cc <pidctl_value+0x134>)
 80155dc:	61fb      	str	r3, [r7, #28]

    int32_t dv = (v->has_last) ? 1000*(err - v->last_err)/((int32_t)dt) : 0; //XXX
 80155de:	68bb      	ldr	r3, [r7, #8]
 80155e0:	7b1b      	ldrb	r3, [r3, #12]
 80155e2:	f003 0301 	and.w	r3, r3, #1
 80155e6:	b2db      	uxtb	r3, r3
 80155e8:	2b00      	cmp	r3, #0
 80155ea:	d00b      	beq.n	8015604 <pidctl_value+0x6c>
 80155ec:	68bb      	ldr	r3, [r7, #8]
 80155ee:	681b      	ldr	r3, [r3, #0]
 80155f0:	69fa      	ldr	r2, [r7, #28]
 80155f2:	1ad3      	subs	r3, r2, r3
 80155f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80155f8:	fb02 f203 	mul.w	r2, r2, r3
 80155fc:	683b      	ldr	r3, [r7, #0]
 80155fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8015602:	e000      	b.n	8015606 <pidctl_value+0x6e>
 8015604:	2300      	movs	r3, #0
 8015606:	61bb      	str	r3, [r7, #24]
	v->last_err = err;
 8015608:	68bb      	ldr	r3, [r7, #8]
 801560a:	69fa      	ldr	r2, [r7, #28]
 801560c:	601a      	str	r2, [r3, #0]
    v->has_last = 1;
 801560e:	68ba      	ldr	r2, [r7, #8]
 8015610:	7b13      	ldrb	r3, [r2, #12]
 8015612:	f043 0301 	orr.w	r3, r3, #1
 8015616:	7313      	strb	r3, [r2, #12]
	if ((1)) v->sume += err*dt;
 8015618:	68bb      	ldr	r3, [r7, #8]
 801561a:	685b      	ldr	r3, [r3, #4]
 801561c:	4619      	mov	r1, r3
 801561e:	69fb      	ldr	r3, [r7, #28]
 8015620:	683a      	ldr	r2, [r7, #0]
 8015622:	fb02 f303 	mul.w	r3, r2, r3
 8015626:	440b      	add	r3, r1
 8015628:	461a      	mov	r2, r3
 801562a:	68bb      	ldr	r3, [r7, #8]
 801562c:	605a      	str	r2, [r3, #4]
    else     v->sume = v->sume*.99 + err*dt;
    if (v->sume>MAX_I) v->sume = MAX_I;
 801562e:	68bb      	ldr	r3, [r7, #8]
 8015630:	685b      	ldr	r3, [r3, #4]
 8015632:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8015636:	4293      	cmp	r3, r2
 8015638:	dd04      	ble.n	8015644 <pidctl_value+0xac>
 801563a:	68bb      	ldr	r3, [r7, #8]
 801563c:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8015640:	605a      	str	r2, [r3, #4]
 8015642:	e007      	b.n	8015654 <pidctl_value+0xbc>
    else if (v->sume<-MAX_I) v->sume = -MAX_I;
 8015644:	68bb      	ldr	r3, [r7, #8]
 8015646:	685b      	ldr	r3, [r3, #4]
 8015648:	4a21      	ldr	r2, [pc, #132]	; (80156d0 <pidctl_value+0x138>)
 801564a:	4293      	cmp	r3, r2
 801564c:	da02      	bge.n	8015654 <pidctl_value+0xbc>
 801564e:	68bb      	ldr	r3, [r7, #8]
 8015650:	4a1f      	ldr	r2, [pc, #124]	; (80156d0 <pidctl_value+0x138>)
 8015652:	605a      	str	r2, [r3, #4]
	int32_t iv = v->sume / 100;
 8015654:	68bb      	ldr	r3, [r7, #8]
 8015656:	685b      	ldr	r3, [r3, #4]
 8015658:	4a1e      	ldr	r2, [pc, #120]	; (80156d4 <pidctl_value+0x13c>)
 801565a:	fb82 1203 	smull	r1, r2, r2, r3
 801565e:	1152      	asrs	r2, r2, #5
 8015660:	17db      	asrs	r3, r3, #31
 8015662:	1ad3      	subs	r3, r2, r3
 8015664:	617b      	str	r3, [r7, #20]

	//debug_info('T', 0, "PID  ", err, iv, dv);
	itm_debug2(DBG_PID, "pid tc", v->target_v, cur_v);
 8015666:	68bb      	ldr	r3, [r7, #8]
 8015668:	689a      	ldr	r2, [r3, #8]
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	491a      	ldr	r1, [pc, #104]	; (80156d8 <pidctl_value+0x140>)
 801566e:	2004      	movs	r0, #4
 8015670:	f7ff ff22 	bl	80154b8 <itm_debug2>
    itm_debug3(DBG_PID, "pid edi", err, dv, v->sume);
 8015674:	68bb      	ldr	r3, [r7, #8]
 8015676:	685b      	ldr	r3, [r3, #4]
 8015678:	9300      	str	r3, [sp, #0]
 801567a:	69bb      	ldr	r3, [r7, #24]
 801567c:	69fa      	ldr	r2, [r7, #28]
 801567e:	4917      	ldr	r1, [pc, #92]	; (80156dc <pidctl_value+0x144>)
 8015680:	2004      	movs	r0, #4
 8015682:	f7ff ff35 	bl	80154f0 <itm_debug3>

	int32_t r = c->kP * err + (c->kD * dv)/1000 + c->kI * iv;
 8015686:	68fb      	ldr	r3, [r7, #12]
 8015688:	681b      	ldr	r3, [r3, #0]
 801568a:	69fa      	ldr	r2, [r7, #28]
 801568c:	fb02 f203 	mul.w	r2, r2, r3
 8015690:	68fb      	ldr	r3, [r7, #12]
 8015692:	689b      	ldr	r3, [r3, #8]
 8015694:	69b9      	ldr	r1, [r7, #24]
 8015696:	fb01 f303 	mul.w	r3, r1, r3
 801569a:	4911      	ldr	r1, [pc, #68]	; (80156e0 <pidctl_value+0x148>)
 801569c:	fb81 0103 	smull	r0, r1, r1, r3
 80156a0:	1189      	asrs	r1, r1, #6
 80156a2:	17db      	asrs	r3, r3, #31
 80156a4:	1acb      	subs	r3, r1, r3
 80156a6:	441a      	add	r2, r3
 80156a8:	68fb      	ldr	r3, [r7, #12]
 80156aa:	685b      	ldr	r3, [r3, #4]
 80156ac:	6979      	ldr	r1, [r7, #20]
 80156ae:	fb01 f303 	mul.w	r3, r1, r3
 80156b2:	4413      	add	r3, r2
 80156b4:	613b      	str	r3, [r7, #16]
	//debug_info('T', 0, "PID*k",  c->kP * err, c->kI * iv, (c->kD * dv)/1000);

	return r/1000;
 80156b6:	693b      	ldr	r3, [r7, #16]
 80156b8:	4a09      	ldr	r2, [pc, #36]	; (80156e0 <pidctl_value+0x148>)
 80156ba:	fb82 1203 	smull	r1, r2, r2, r3
 80156be:	1192      	asrs	r2, r2, #6
 80156c0:	17db      	asrs	r3, r3, #31
 80156c2:	1ad3      	subs	r3, r2, r3
}
 80156c4:	4618      	mov	r0, r3
 80156c6:	3720      	adds	r7, #32
 80156c8:	46bd      	mov	sp, r7
 80156ca:	bd80      	pop	{r7, pc}
 80156cc:	fffffdd0 	.word	0xfffffdd0
 80156d0:	ffff9e58 	.word	0xffff9e58
 80156d4:	51eb851f 	.word	0x51eb851f
 80156d8:	08017434 	.word	0x08017434
 80156dc:	0801743c 	.word	0x0801743c
 80156e0:	10624dd3 	.word	0x10624dd3

080156e4 <itm_debug1>:
{
 80156e4:	b580      	push	{r7, lr}
 80156e6:	b086      	sub	sp, #24
 80156e8:	af02      	add	r7, sp, #8
 80156ea:	60f8      	str	r0, [r7, #12]
 80156ec:	60b9      	str	r1, [r7, #8]
 80156ee:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 80156f0:	4b08      	ldr	r3, [pc, #32]	; (8015714 <itm_debug1+0x30>)
 80156f2:	681a      	ldr	r2, [r3, #0]
 80156f4:	68fb      	ldr	r3, [r7, #12]
 80156f6:	4013      	ands	r3, r2
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	d007      	beq.n	801570c <itm_debug1+0x28>
 80156fc:	2301      	movs	r3, #1
 80156fe:	9300      	str	r3, [sp, #0]
 8015700:	2300      	movs	r3, #0
 8015702:	2200      	movs	r2, #0
 8015704:	6879      	ldr	r1, [r7, #4]
 8015706:	68b8      	ldr	r0, [r7, #8]
 8015708:	f001 f8e2 	bl	80168d0 <_itm_debug3>
}
 801570c:	bf00      	nop
 801570e:	3710      	adds	r7, #16
 8015710:	46bd      	mov	sp, r7
 8015712:	bd80      	pop	{r7, pc}
 8015714:	2000047c 	.word	0x2000047c

08015718 <itm_debug2>:
{
 8015718:	b580      	push	{r7, lr}
 801571a:	b086      	sub	sp, #24
 801571c:	af02      	add	r7, sp, #8
 801571e:	60f8      	str	r0, [r7, #12]
 8015720:	60b9      	str	r1, [r7, #8]
 8015722:	607a      	str	r2, [r7, #4]
 8015724:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, 0, 2);
 8015726:	4b09      	ldr	r3, [pc, #36]	; (801574c <itm_debug2+0x34>)
 8015728:	681a      	ldr	r2, [r3, #0]
 801572a:	68fb      	ldr	r3, [r7, #12]
 801572c:	4013      	ands	r3, r2
 801572e:	2b00      	cmp	r3, #0
 8015730:	d007      	beq.n	8015742 <itm_debug2+0x2a>
 8015732:	2302      	movs	r3, #2
 8015734:	9300      	str	r3, [sp, #0]
 8015736:	2300      	movs	r3, #0
 8015738:	683a      	ldr	r2, [r7, #0]
 801573a:	6879      	ldr	r1, [r7, #4]
 801573c:	68b8      	ldr	r0, [r7, #8]
 801573e:	f001 f8c7 	bl	80168d0 <_itm_debug3>
}
 8015742:	bf00      	nop
 8015744:	3710      	adds	r7, #16
 8015746:	46bd      	mov	sp, r7
 8015748:	bd80      	pop	{r7, pc}
 801574a:	bf00      	nop
 801574c:	2000047c 	.word	0x2000047c

08015750 <itm_debug3>:
{
 8015750:	b580      	push	{r7, lr}
 8015752:	b086      	sub	sp, #24
 8015754:	af02      	add	r7, sp, #8
 8015756:	60f8      	str	r0, [r7, #12]
 8015758:	60b9      	str	r1, [r7, #8]
 801575a:	607a      	str	r2, [r7, #4]
 801575c:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, v3, 3);
 801575e:	4b09      	ldr	r3, [pc, #36]	; (8015784 <itm_debug3+0x34>)
 8015760:	681a      	ldr	r2, [r3, #0]
 8015762:	68fb      	ldr	r3, [r7, #12]
 8015764:	4013      	ands	r3, r2
 8015766:	2b00      	cmp	r3, #0
 8015768:	d007      	beq.n	801577a <itm_debug3+0x2a>
 801576a:	2303      	movs	r3, #3
 801576c:	9300      	str	r3, [sp, #0]
 801576e:	69bb      	ldr	r3, [r7, #24]
 8015770:	683a      	ldr	r2, [r7, #0]
 8015772:	6879      	ldr	r1, [r7, #4]
 8015774:	68b8      	ldr	r0, [r7, #8]
 8015776:	f001 f8ab 	bl	80168d0 <_itm_debug3>
}
 801577a:	bf00      	nop
 801577c:	3710      	adds	r7, #16
 801577e:	46bd      	mov	sp, r7
 8015780:	bd80      	pop	{r7, pc}
 8015782:	bf00      	nop
 8015784:	2000047c 	.word	0x2000047c

08015788 <train_error>:
{
 8015788:	b580      	push	{r7, lr}
 801578a:	b082      	sub	sp, #8
 801578c:	af00      	add	r7, sp, #0
 801578e:	6078      	str	r0, [r7, #4]
 8015790:	6039      	str	r1, [r7, #0]
	return trainctl_error('T', code, msg);
 8015792:	683a      	ldr	r2, [r7, #0]
 8015794:	6879      	ldr	r1, [r7, #4]
 8015796:	2054      	movs	r0, #84	; 0x54
 8015798:	f7fe fbac 	bl	8013ef4 <trainctl_error>
 801579c:	4603      	mov	r3, r0
}
 801579e:	4618      	mov	r0, r3
 80157a0:	3708      	adds	r7, #8
 80157a2:	46bd      	mov	sp, r7
 80157a4:	bd80      	pop	{r7, pc}

080157a6 <train_notif>:
{
 80157a6:	b580      	push	{r7, lr}
 80157a8:	b086      	sub	sp, #24
 80157aa:	af02      	add	r7, sp, #8
 80157ac:	60ba      	str	r2, [r7, #8]
 80157ae:	607b      	str	r3, [r7, #4]
 80157b0:	4603      	mov	r3, r0
 80157b2:	73fb      	strb	r3, [r7, #15]
 80157b4:	460b      	mov	r3, r1
 80157b6:	73bb      	strb	r3, [r7, #14]
	trainctl_notif('T', train_idx, cmd, dta, dtalen);
 80157b8:	7bba      	ldrb	r2, [r7, #14]
 80157ba:	7bf9      	ldrb	r1, [r7, #15]
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	9300      	str	r3, [sp, #0]
 80157c0:	68bb      	ldr	r3, [r7, #8]
 80157c2:	2054      	movs	r0, #84	; 0x54
 80157c4:	f7ff f9dc 	bl	8014b80 <trainctl_notif>
}
 80157c8:	bf00      	nop
 80157ca:	3710      	adds	r7, #16
 80157cc:	46bd      	mov	sp, r7
 80157ce:	bd80      	pop	{r7, pc}

080157d0 <debug_info>:
{
 80157d0:	b580      	push	{r7, lr}
 80157d2:	b088      	sub	sp, #32
 80157d4:	af04      	add	r7, sp, #16
 80157d6:	60f8      	str	r0, [r7, #12]
 80157d8:	60b9      	str	r1, [r7, #8]
 80157da:	607a      	str	r2, [r7, #4]
 80157dc:	603b      	str	r3, [r7, #0]
	trainctl_notif2(sel, num, 'D', msg, v1, v2, v3);
 80157de:	68fb      	ldr	r3, [r7, #12]
 80157e0:	b2d8      	uxtb	r0, r3
 80157e2:	68bb      	ldr	r3, [r7, #8]
 80157e4:	b2d9      	uxtb	r1, r3
 80157e6:	69fb      	ldr	r3, [r7, #28]
 80157e8:	9302      	str	r3, [sp, #8]
 80157ea:	69bb      	ldr	r3, [r7, #24]
 80157ec:	9301      	str	r3, [sp, #4]
 80157ee:	683b      	ldr	r3, [r7, #0]
 80157f0:	9300      	str	r3, [sp, #0]
 80157f2:	687b      	ldr	r3, [r7, #4]
 80157f4:	2244      	movs	r2, #68	; 0x44
 80157f6:	f7ff f9e7 	bl	8014bc8 <trainctl_notif2>
}
 80157fa:	bf00      	nop
 80157fc:	3710      	adds	r7, #16
 80157fe:	46bd      	mov	sp, r7
 8015800:	bd80      	pop	{r7, pc}
	...

08015804 <mqf_read_to_spdctl>:
#define CMD_BEMF_OFF		0x41

#define CMD_SETVPWM			0x01
#define CMD_STOP			0x02

LFMQUEUE_DEF_H(to_spdctl, msg_64_t)
 8015804:	b580      	push	{r7, lr}
 8015806:	b082      	sub	sp, #8
 8015808:	af00      	add	r7, sp, #0
 801580a:	6078      	str	r0, [r7, #4]
 801580c:	6879      	ldr	r1, [r7, #4]
 801580e:	4804      	ldr	r0, [pc, #16]	; (8015820 <mqf_read_to_spdctl+0x1c>)
 8015810:	f001 f9c4 	bl	8016b9c <mqf_read>
 8015814:	4603      	mov	r3, r0
 8015816:	4618      	mov	r0, r3
 8015818:	3708      	adds	r7, #8
 801581a:	46bd      	mov	sp, r7
 801581c:	bd80      	pop	{r7, pc}
 801581e:	bf00      	nop
 8015820:	200003f8 	.word	0x200003f8

08015824 <mqf_write_from_spdctl>:
LFMQUEUE_DEF_H(from_spdctl, msg_64_t)
 8015824:	b580      	push	{r7, lr}
 8015826:	b082      	sub	sp, #8
 8015828:	af00      	add	r7, sp, #0
 801582a:	6078      	str	r0, [r7, #4]
 801582c:	6879      	ldr	r1, [r7, #4]
 801582e:	4804      	ldr	r0, [pc, #16]	; (8015840 <mqf_write_from_spdctl+0x1c>)
 8015830:	f001 f93a 	bl	8016aa8 <mqf_write>
 8015834:	4603      	mov	r3, r0
 8015836:	4618      	mov	r0, r3
 8015838:	3708      	adds	r7, #8
 801583a:	46bd      	mov	sp, r7
 801583c:	bd80      	pop	{r7, pc}
 801583e:	bf00      	nop
 8015840:	20000404 	.word	0x20000404

08015844 <txframe_send_stat>:
	txframe_send(m, 1);
}


static inline void txframe_send_stat(void)
{
 8015844:	b580      	push	{r7, lr}
 8015846:	b08a      	sub	sp, #40	; 0x28
 8015848:	af00      	add	r7, sp, #0
    frame_msg_t m;
    m.t = TXFRAME_TYPE_STAT;
 801584a:	2304      	movs	r3, #4
 801584c:	713b      	strb	r3, [r7, #4]
    txframe_send(&m, 1);
 801584e:	1d3b      	adds	r3, r7, #4
 8015850:	2101      	movs	r1, #1
 8015852:	4618      	mov	r0, r3
 8015854:	f000 ff0c 	bl	8016670 <txframe_send>
}
 8015858:	bf00      	nop
 801585a:	3728      	adds	r7, #40	; 0x28
 801585c:	46bd      	mov	sp, r7
 801585e:	bd80      	pop	{r7, pc}

08015860 <spdctl_reset>:
static void spdctl_reset(void);
static void set_c1_c2(int num, train_vars_t *tvars, uint8_t c1, int8_t dir1, uint8_t c2, int8_t dir2);


static void spdctl_reset(void)
{
 8015860:	b580      	push	{r7, lr}
 8015862:	b082      	sub	sp, #8
 8015864:	af00      	add	r7, sp, #0
	memset(trspc_vars, 0, sizeof(trspc_vars));
 8015866:	2234      	movs	r2, #52	; 0x34
 8015868:	2100      	movs	r1, #0
 801586a:	4811      	ldr	r0, [pc, #68]	; (80158b0 <spdctl_reset+0x50>)
 801586c:	f001 fa37 	bl	8016cde <memset>
	for (int  i = 0; i<8; i++) {
 8015870:	2300      	movs	r3, #0
 8015872:	607b      	str	r3, [r7, #4]
 8015874:	e014      	b.n	80158a0 <spdctl_reset+0x40>
		trspc_vars[i].C1 = 0xFF;
 8015876:	4a0e      	ldr	r2, [pc, #56]	; (80158b0 <spdctl_reset+0x50>)
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	2134      	movs	r1, #52	; 0x34
 801587c:	fb01 f303 	mul.w	r3, r1, r3
 8015880:	4413      	add	r3, r2
 8015882:	331c      	adds	r3, #28
 8015884:	22ff      	movs	r2, #255	; 0xff
 8015886:	701a      	strb	r2, [r3, #0]
		trspc_vars[i].C2 = 0xFF;
 8015888:	4a09      	ldr	r2, [pc, #36]	; (80158b0 <spdctl_reset+0x50>)
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	2134      	movs	r1, #52	; 0x34
 801588e:	fb01 f303 	mul.w	r3, r1, r3
 8015892:	4413      	add	r3, r2
 8015894:	331d      	adds	r3, #29
 8015896:	22ff      	movs	r2, #255	; 0xff
 8015898:	701a      	strb	r2, [r3, #0]
	for (int  i = 0; i<8; i++) {
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	3301      	adds	r3, #1
 801589e:	607b      	str	r3, [r7, #4]
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	2b07      	cmp	r3, #7
 80158a4:	dde7      	ble.n	8015876 <spdctl_reset+0x16>
	}
}
 80158a6:	bf00      	nop
 80158a8:	3708      	adds	r7, #8
 80158aa:	46bd      	mov	sp, r7
 80158ac:	bd80      	pop	{r7, pc}
 80158ae:	bf00      	nop
 80158b0:	20005290 	.word	0x20005290

080158b4 <spdctl_run_tick>:

static uint8_t test_mode = 0;
static uint8_t testerAddr;

void spdctl_run_tick(uint32_t notif_flags, uint32_t tick, uint32_t dt)
{
 80158b4:	b580      	push	{r7, lr}
 80158b6:	b08e      	sub	sp, #56	; 0x38
 80158b8:	af02      	add	r7, sp, #8
 80158ba:	60f8      	str	r0, [r7, #12]
 80158bc:	60b9      	str	r1, [r7, #8]
 80158be:	607a      	str	r2, [r7, #4]
	train_tick_last_dt = dt;
 80158c0:	4a6a      	ldr	r2, [pc, #424]	; (8015a6c <spdctl_run_tick+0x1b8>)
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	6013      	str	r3, [r2, #0]
	train_ntick++;
 80158c6:	4b6a      	ldr	r3, [pc, #424]	; (8015a70 <spdctl_run_tick+0x1bc>)
 80158c8:	681b      	ldr	r3, [r3, #0]
 80158ca:	3301      	adds	r3, #1
 80158cc:	4a68      	ldr	r2, [pc, #416]	; (8015a70 <spdctl_run_tick+0x1bc>)
 80158ce:	6013      	str	r3, [r2, #0]

	static int first=1;
	if (first) {
 80158d0:	4b68      	ldr	r3, [pc, #416]	; (8015a74 <spdctl_run_tick+0x1c0>)
 80158d2:	681b      	ldr	r3, [r3, #0]
 80158d4:	2b00      	cmp	r3, #0
 80158d6:	d004      	beq.n	80158e2 <spdctl_run_tick+0x2e>
		first = 0;
 80158d8:	4b66      	ldr	r3, [pc, #408]	; (8015a74 <spdctl_run_tick+0x1c0>)
 80158da:	2200      	movs	r2, #0
 80158dc:	601a      	str	r2, [r3, #0]
		spdctl_reset();
 80158de:	f7ff ffbf 	bl	8015860 <spdctl_reset>
       
	}
	/* process messages */
	for (;;) {
		msg_64_t m;
		int rc = mqf_read_to_spdctl(&m);
 80158e2:	f107 0310 	add.w	r3, r7, #16
 80158e6:	4618      	mov	r0, r3
 80158e8:	f7ff ff8c 	bl	8015804 <mqf_read_to_spdctl>
 80158ec:	6278      	str	r0, [r7, #36]	; 0x24
		if (rc) break;
 80158ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158f0:	2b00      	cmp	r3, #0
 80158f2:	d002      	beq.n	80158fa <spdctl_run_tick+0x46>
	}
*/

	/* per train proces */
    //debug_info(0, "TRAIN", tick, dt);
	for (int i=0; i<NUM_TRAINS; i++) {
 80158f4:	2300      	movs	r3, #0
 80158f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80158f8:	e0ab      	b.n	8015a52 <spdctl_run_tick+0x19e>
        switch (m.cmd) {
 80158fa:	7cbb      	ldrb	r3, [r7, #18]
 80158fc:	2bfe      	cmp	r3, #254	; 0xfe
 80158fe:	d007      	beq.n	8015910 <spdctl_run_tick+0x5c>
 8015900:	2bff      	cmp	r3, #255	; 0xff
 8015902:	d002      	beq.n	801590a <spdctl_run_tick+0x56>
 8015904:	2bfc      	cmp	r3, #252	; 0xfc
 8015906:	d006      	beq.n	8015916 <spdctl_run_tick+0x62>
 8015908:	e00d      	b.n	8015926 <spdctl_run_tick+0x72>
            test_mode = 0; // FALLTHRU
 801590a:	4b5b      	ldr	r3, [pc, #364]	; (8015a78 <spdctl_run_tick+0x1c4>)
 801590c:	2200      	movs	r2, #0
 801590e:	701a      	strb	r2, [r3, #0]
            spdctl_reset();
 8015910:	f7ff ffa6 	bl	8015860 <spdctl_reset>
            break;
 8015914:	e007      	b.n	8015926 <spdctl_run_tick+0x72>
            test_mode = m.v1u;
 8015916:	8abb      	ldrh	r3, [r7, #20]
 8015918:	b2da      	uxtb	r2, r3
 801591a:	4b57      	ldr	r3, [pc, #348]	; (8015a78 <spdctl_run_tick+0x1c4>)
 801591c:	701a      	strb	r2, [r3, #0]
            testerAddr = m.from;
 801591e:	7c7a      	ldrb	r2, [r7, #17]
 8015920:	4b56      	ldr	r3, [pc, #344]	; (8015a7c <spdctl_run_tick+0x1c8>)
 8015922:	701a      	strb	r2, [r3, #0]
            break;
 8015924:	bf00      	nop
        if (test_mode & (m.from != testerAddr)) {
 8015926:	4b54      	ldr	r3, [pc, #336]	; (8015a78 <spdctl_run_tick+0x1c4>)
 8015928:	781b      	ldrb	r3, [r3, #0]
 801592a:	4619      	mov	r1, r3
 801592c:	7c7a      	ldrb	r2, [r7, #17]
 801592e:	4b53      	ldr	r3, [pc, #332]	; (8015a7c <spdctl_run_tick+0x1c8>)
 8015930:	781b      	ldrb	r3, [r3, #0]
 8015932:	429a      	cmp	r2, r3
 8015934:	bf14      	ite	ne
 8015936:	2301      	movne	r3, #1
 8015938:	2300      	moveq	r3, #0
 801593a:	b2db      	uxtb	r3, r3
 801593c:	400b      	ands	r3, r1
 801593e:	2b00      	cmp	r3, #0
 8015940:	d179      	bne.n	8015a36 <spdctl_run_tick+0x182>
        if (IS_TRAIN_SC(m.to)) {
 8015942:	7c3b      	ldrb	r3, [r7, #16]
 8015944:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8015948:	2bc8      	cmp	r3, #200	; 0xc8
 801594a:	d160      	bne.n	8015a0e <spdctl_run_tick+0x15a>
            int tidx = m.to & 0x7;
 801594c:	7c3b      	ldrb	r3, [r7, #16]
 801594e:	f003 0307 	and.w	r3, r3, #7
 8015952:	623b      	str	r3, [r7, #32]
            USE_TRAIN(tidx)
 8015954:	6a38      	ldr	r0, [r7, #32]
 8015956:	f7fe fc29 	bl	80141ac <get_train_cnf>
 801595a:	61f8      	str	r0, [r7, #28]
 801595c:	6a3b      	ldr	r3, [r7, #32]
 801595e:	2234      	movs	r2, #52	; 0x34
 8015960:	fb02 f303 	mul.w	r3, r2, r3
 8015964:	4a46      	ldr	r2, [pc, #280]	; (8015a80 <spdctl_run_tick+0x1cc>)
 8015966:	4413      	add	r3, r2
 8015968:	61bb      	str	r3, [r7, #24]
            switch (m.cmd) {
 801596a:	7cbb      	ldrb	r3, [r7, #18]
 801596c:	2b10      	cmp	r3, #16
 801596e:	d02e      	beq.n	80159ce <spdctl_run_tick+0x11a>
 8015970:	2b11      	cmp	r3, #17
 8015972:	d038      	beq.n	80159e6 <spdctl_run_tick+0x132>
 8015974:	2b03      	cmp	r3, #3
 8015976:	d000      	beq.n	801597a <spdctl_run_tick+0xc6>
                    break;
 8015978:	e04a      	b.n	8015a10 <spdctl_run_tick+0x15c>
                    if (m.from == tvars->C1) {
 801597a:	7c7a      	ldrb	r2, [r7, #17]
 801597c:	69bb      	ldr	r3, [r7, #24]
 801597e:	7f1b      	ldrb	r3, [r3, #28]
 8015980:	429a      	cmp	r2, r3
 8015982:	d10d      	bne.n	80159a0 <spdctl_run_tick+0xec>
                        itm_debug2(DBG_PID, "st bemf", m.v1, m.from);
 8015984:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8015988:	461a      	mov	r2, r3
 801598a:	7c7b      	ldrb	r3, [r7, #17]
 801598c:	493d      	ldr	r1, [pc, #244]	; (8015a84 <spdctl_run_tick+0x1d0>)
 801598e:	2004      	movs	r0, #4
 8015990:	f7ff fec2 	bl	8015718 <itm_debug2>
                        tvars->bemf_cv = m.v1;
 8015994:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8015998:	461a      	mov	r2, r3
 801599a:	69bb      	ldr	r3, [r7, #24]
 801599c:	605a      	str	r2, [r3, #4]
                        break;
 801599e:	e037      	b.n	8015a10 <spdctl_run_tick+0x15c>
                    } else if (m.from == tvars->C2) {
 80159a0:	7c7a      	ldrb	r2, [r7, #17]
 80159a2:	69bb      	ldr	r3, [r7, #24]
 80159a4:	7f5b      	ldrb	r3, [r3, #29]
 80159a6:	429a      	cmp	r2, r3
 80159a8:	d108      	bne.n	80159bc <spdctl_run_tick+0x108>
                        itm_debug2(DBG_PID, "c2 bemf", m.v1, m.from);
 80159aa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80159ae:	461a      	mov	r2, r3
 80159b0:	7c7b      	ldrb	r3, [r7, #17]
 80159b2:	4935      	ldr	r1, [pc, #212]	; (8015a88 <spdctl_run_tick+0x1d4>)
 80159b4:	2004      	movs	r0, #4
 80159b6:	f7ff feaf 	bl	8015718 <itm_debug2>
                    break;
 80159ba:	e029      	b.n	8015a10 <spdctl_run_tick+0x15c>
                        itm_debug2(DBG_ERR|DBG_PID, "unk bemf", m.v1, m.from);
 80159bc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80159c0:	461a      	mov	r2, r3
 80159c2:	7c7b      	ldrb	r3, [r7, #17]
 80159c4:	4931      	ldr	r1, [pc, #196]	; (8015a8c <spdctl_run_tick+0x1d8>)
 80159c6:	4832      	ldr	r0, [pc, #200]	; (8015a90 <spdctl_run_tick+0x1dc>)
 80159c8:	f7ff fea6 	bl	8015718 <itm_debug2>
                    break;
 80159cc:	e020      	b.n	8015a10 <spdctl_run_tick+0x15c>
                    itm_debug1(DBG_SPDCTL, "set_t_spd", m.v1);
 80159ce:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80159d2:	461a      	mov	r2, r3
 80159d4:	492f      	ldr	r1, [pc, #188]	; (8015a94 <spdctl_run_tick+0x1e0>)
 80159d6:	2010      	movs	r0, #16
 80159d8:	f7ff fe84 	bl	80156e4 <itm_debug1>
                    tvars->target_speed = m.v1;
 80159dc:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80159e0:	69bb      	ldr	r3, [r7, #24]
 80159e2:	801a      	strh	r2, [r3, #0]
                    break;
 80159e4:	e014      	b.n	8015a10 <spdctl_run_tick+0x15c>
                    itm_debug1(DBG_SPDCTL, "set_c1_c2", 0);
 80159e6:	2200      	movs	r2, #0
 80159e8:	492b      	ldr	r1, [pc, #172]	; (8015a98 <spdctl_run_tick+0x1e4>)
 80159ea:	2010      	movs	r0, #16
 80159ec:	f7ff fe7a 	bl	80156e4 <itm_debug1>
                    set_c1_c2(tidx, tvars, m.vbytes[0], m.vbytes[1], m.vbytes[2], m.vbytes[3]);
 80159f0:	7d39      	ldrb	r1, [r7, #20]
 80159f2:	7d7b      	ldrb	r3, [r7, #21]
 80159f4:	b258      	sxtb	r0, r3
 80159f6:	7dbb      	ldrb	r3, [r7, #22]
 80159f8:	7dfa      	ldrb	r2, [r7, #23]
 80159fa:	b252      	sxtb	r2, r2
 80159fc:	9201      	str	r2, [sp, #4]
 80159fe:	9300      	str	r3, [sp, #0]
 8015a00:	4603      	mov	r3, r0
 8015a02:	460a      	mov	r2, r1
 8015a04:	69b9      	ldr	r1, [r7, #24]
 8015a06:	6a38      	ldr	r0, [r7, #32]
 8015a08:	f000 fa60 	bl	8015ecc <set_c1_c2>
                    break;
 8015a0c:	e000      	b.n	8015a10 <spdctl_run_tick+0x15c>
        }
 8015a0e:	bf00      	nop
        if (test_mode) return;
 8015a10:	4b19      	ldr	r3, [pc, #100]	; (8015a78 <spdctl_run_tick+0x1c4>)
 8015a12:	781b      	ldrb	r3, [r3, #0]
 8015a14:	2b00      	cmp	r3, #0
 8015a16:	d124      	bne.n	8015a62 <spdctl_run_tick+0x1ae>
        for (int i=0; i<7; i++) {
 8015a18:	2300      	movs	r3, #0
 8015a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015a1c:	e007      	b.n	8015a2e <spdctl_run_tick+0x17a>
            train_periodic_control(i, dt);
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	4619      	mov	r1, r3
 8015a22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015a24:	f000 f83c 	bl	8015aa0 <train_periodic_control>
        for (int i=0; i<7; i++) {
 8015a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a2a:	3301      	adds	r3, #1
 8015a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a30:	2b06      	cmp	r3, #6
 8015a32:	ddf4      	ble.n	8015a1e <spdctl_run_tick+0x16a>
 8015a34:	e755      	b.n	80158e2 <spdctl_run_tick+0x2e>
            continue;
 8015a36:	bf00      	nop
	for (;;) {
 8015a38:	e753      	b.n	80158e2 <spdctl_run_tick+0x2e>
		if (stop_all) break;
 8015a3a:	4b18      	ldr	r3, [pc, #96]	; (8015a9c <spdctl_run_tick+0x1e8>)
 8015a3c:	681b      	ldr	r3, [r3, #0]
 8015a3e:	2b00      	cmp	r3, #0
 8015a40:	d10b      	bne.n	8015a5a <spdctl_run_tick+0x1a6>
		train_periodic_control(i, dt);
 8015a42:	687b      	ldr	r3, [r7, #4]
 8015a44:	4619      	mov	r1, r3
 8015a46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015a48:	f000 f82a 	bl	8015aa0 <train_periodic_control>
	for (int i=0; i<NUM_TRAINS; i++) {
 8015a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a4e:	3301      	adds	r3, #1
 8015a50:	62bb      	str	r3, [r7, #40]	; 0x28
 8015a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a54:	2b00      	cmp	r3, #0
 8015a56:	ddf0      	ble.n	8015a3a <spdctl_run_tick+0x186>
 8015a58:	e000      	b.n	8015a5c <spdctl_run_tick+0x1a8>
		if (stop_all) break;
 8015a5a:	bf00      	nop
		//if (trainctl_test_mode) break;
	}
	txframe_send_stat(); //TODO move
 8015a5c:	f7ff fef2 	bl	8015844 <txframe_send_stat>
 8015a60:	e000      	b.n	8015a64 <spdctl_run_tick+0x1b0>
        if (test_mode) return;
 8015a62:	bf00      	nop
}
 8015a64:	3730      	adds	r7, #48	; 0x30
 8015a66:	46bd      	mov	sp, r7
 8015a68:	bd80      	pop	{r7, pc}
 8015a6a:	bf00      	nop
 8015a6c:	20005288 	.word	0x20005288
 8015a70:	2000528c 	.word	0x2000528c
 8015a74:	20000470 	.word	0x20000470
 8015a78:	200052c4 	.word	0x200052c4
 8015a7c:	200052c5 	.word	0x200052c5
 8015a80:	20005290 	.word	0x20005290
 8015a84:	08017444 	.word	0x08017444
 8015a88:	0801744c 	.word	0x0801744c
 8015a8c:	08017454 	.word	0x08017454
 8015a90:	80000004 	.word	0x80000004
 8015a94:	08017460 	.word	0x08017460
 8015a98:	0801746c 	.word	0x0801746c
 8015a9c:	20005280 	.word	0x20005280

08015aa0 <train_periodic_control>:
{
    
}
*/
static void train_periodic_control(int numtrain, int32_t dt)
{
 8015aa0:	b580      	push	{r7, lr}
 8015aa2:	b096      	sub	sp, #88	; 0x58
 8015aa4:	af02      	add	r7, sp, #8
 8015aa6:	6078      	str	r0, [r7, #4]
 8015aa8:	6039      	str	r1, [r7, #0]
	if (stop_all) return;
 8015aaa:	4bad      	ldr	r3, [pc, #692]	; (8015d60 <train_periodic_control+0x2c0>)
 8015aac:	681b      	ldr	r3, [r3, #0]
 8015aae:	2b00      	cmp	r3, #0
 8015ab0:	f040 8201 	bne.w	8015eb6 <train_periodic_control+0x416>

	//num_train_periodic_control++;

	USE_TRAIN(numtrain)	// tconf tvars
 8015ab4:	6878      	ldr	r0, [r7, #4]
 8015ab6:	f7fe fb79 	bl	80141ac <get_train_cnf>
 8015aba:	6438      	str	r0, [r7, #64]	; 0x40
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	2234      	movs	r2, #52	; 0x34
 8015ac0:	fb02 f303 	mul.w	r3, r2, r3
 8015ac4:	4aa7      	ldr	r2, [pc, #668]	; (8015d64 <train_periodic_control+0x2c4>)
 8015ac6:	4413      	add	r3, r2
 8015ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (!tconf) {
 8015aca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	f000 81f4 	beq.w	8015eba <train_periodic_control+0x41a>
        if ((0)) itm_debug1(DBG_SPDCTL, "unconf tr", numtrain);
        return;
    }
	int16_t v = tvars->target_speed;
 8015ad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015ad4:	881b      	ldrh	r3, [r3, #0]
 8015ad6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

	itm_debug2(DBG_SPDCTL, "target", numtrain, v);
 8015ada:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015ade:	687a      	ldr	r2, [r7, #4]
 8015ae0:	49a1      	ldr	r1, [pc, #644]	; (8015d68 <train_periodic_control+0x2c8>)
 8015ae2:	2010      	movs	r0, #16
 8015ae4:	f7ff fe18 	bl	8015718 <itm_debug2>
			lastspeed = v;
		}
        return;
	}*/
    // inertia before PID
	if (1==tconf->enable_inertia) {
 8015ae8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015aea:	7c5b      	ldrb	r3, [r3, #17]
 8015aec:	2b01      	cmp	r3, #1
 8015aee:	d120      	bne.n	8015b32 <train_periodic_control+0x92>
		int changed;
		tvars->inertiavars.target = tvars->target_speed;
 8015af0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015af2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015af6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015af8:	831a      	strh	r2, [r3, #24]
		v = inertia_value(&tconf->inertiacnf, &tvars->inertiavars, dt, &changed);
 8015afa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015afc:	f103 000c 	add.w	r0, r3, #12
 8015b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015b02:	f103 0118 	add.w	r1, r3, #24
 8015b06:	683b      	ldr	r3, [r7, #0]
 8015b08:	b29a      	uxth	r2, r3
 8015b0a:	f107 031c 	add.w	r3, r7, #28
 8015b0e:	f7ff fbad 	bl	801526c <inertia_value>
 8015b12:	4603      	mov	r3, r0
 8015b14:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		itm_debug3(DBG_INERTIA, "inertia", numtrain, tvars->target_speed, v);
 8015b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015b1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015b1e:	461a      	mov	r2, r3
 8015b20:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015b24:	9300      	str	r3, [sp, #0]
 8015b26:	4613      	mov	r3, r2
 8015b28:	687a      	ldr	r2, [r7, #4]
 8015b2a:	4990      	ldr	r1, [pc, #576]	; (8015d6c <train_periodic_control+0x2cc>)
 8015b2c:	2008      	movs	r0, #8
 8015b2e:	f7ff fe0f 	bl	8015750 <itm_debug3>
	}
    
	if ((1)) {
		static int16_t lastspeed = 9999;
		if (v != lastspeed) debug_info('T', 0, "trg.v= ", v,0,0);
 8015b32:	4b8f      	ldr	r3, [pc, #572]	; (8015d70 <train_periodic_control+0x2d0>)
 8015b34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015b38:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8015b3c:	429a      	cmp	r2, r3
 8015b3e:	d00b      	beq.n	8015b58 <train_periodic_control+0xb8>
 8015b40:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8015b44:	2300      	movs	r3, #0
 8015b46:	9301      	str	r3, [sp, #4]
 8015b48:	2300      	movs	r3, #0
 8015b4a:	9300      	str	r3, [sp, #0]
 8015b4c:	4613      	mov	r3, r2
 8015b4e:	4a89      	ldr	r2, [pc, #548]	; (8015d74 <train_periodic_control+0x2d4>)
 8015b50:	2100      	movs	r1, #0
 8015b52:	2054      	movs	r0, #84	; 0x54
 8015b54:	f7ff fe3c 	bl	80157d0 <debug_info>
		lastspeed = v;
 8015b58:	4a85      	ldr	r2, [pc, #532]	; (8015d70 <train_periodic_control+0x2d0>)
 8015b5a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8015b5e:	8013      	strh	r3, [r2, #0]
	}
    if (tconf->enable_pid) {
 8015b60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015b62:	7c9b      	ldrb	r3, [r3, #18]
 8015b64:	2b00      	cmp	r3, #0
 8015b66:	d012      	beq.n	8015b8e <train_periodic_control+0xee>
        // corresponding BEMF target
        // 100% = 1.5V
        int32_t tbemf = 150*v/100;
 8015b68:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015b6c:	2296      	movs	r2, #150	; 0x96
 8015b6e:	fb02 f303 	mul.w	r3, r2, r3
 8015b72:	4a81      	ldr	r2, [pc, #516]	; (8015d78 <train_periodic_control+0x2d8>)
 8015b74:	fb82 1203 	smull	r1, r2, r2, r3
 8015b78:	1152      	asrs	r2, r2, #5
 8015b7a:	17db      	asrs	r3, r3, #31
 8015b7c:	1ad3      	subs	r3, r2, r3
 8015b7e:	63bb      	str	r3, [r7, #56]	; 0x38
        pidctl_set_target(&tconf->pidcnf, &tvars->pidvars, tbemf);
 8015b80:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8015b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015b84:	3308      	adds	r3, #8
 8015b86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015b88:	4619      	mov	r1, r3
 8015b8a:	f7ff fcf1 	bl	8015570 <pidctl_set_target>
    }
    /*
    canton_vars_t *cv = get_canton_vars(tvars->current_canton);
    int32_t bemf = cv->bemf_centivolt;
    */
    int32_t bemf = tvars->bemf_cv;
 8015b8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015b90:	685b      	ldr	r3, [r3, #4]
 8015b92:	64bb      	str	r3, [r7, #72]	; 0x48
    if (tconf->bemfIIR) {
 8015b94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015b96:	7d5b      	ldrb	r3, [r3, #21]
 8015b98:	2b00      	cmp	r3, #0
 8015b9a:	d017      	beq.n	8015bcc <train_periodic_control+0x12c>
    	tvars->bemfiir = (80*tvars->bemfiir + 20*bemf)/100;
 8015b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015ba0:	4613      	mov	r3, r2
 8015ba2:	009b      	lsls	r3, r3, #2
 8015ba4:	4413      	add	r3, r2
 8015ba6:	011b      	lsls	r3, r3, #4
 8015ba8:	4619      	mov	r1, r3
 8015baa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015bac:	4613      	mov	r3, r2
 8015bae:	009b      	lsls	r3, r3, #2
 8015bb0:	4413      	add	r3, r2
 8015bb2:	009b      	lsls	r3, r3, #2
 8015bb4:	440b      	add	r3, r1
 8015bb6:	4a70      	ldr	r2, [pc, #448]	; (8015d78 <train_periodic_control+0x2d8>)
 8015bb8:	fb82 1203 	smull	r1, r2, r2, r3
 8015bbc:	1152      	asrs	r2, r2, #5
 8015bbe:	17db      	asrs	r3, r3, #31
 8015bc0:	1ad2      	subs	r2, r2, r3
 8015bc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015bc4:	62da      	str	r2, [r3, #44]	; 0x2c
    	bemf = tvars->bemfiir;
 8015bc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015bca:	64bb      	str	r3, [r7, #72]	; 0x48
    }
    if (tconf->enable_pid) {
 8015bcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015bce:	7c9b      	ldrb	r3, [r3, #18]
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	f000 8082 	beq.w	8015cda <train_periodic_control+0x23a>
    	if (tvars->target_speed) {
 8015bd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015bd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015bdc:	2b00      	cmp	r3, #0
 8015bde:	d004      	beq.n	8015bea <train_periodic_control+0x14a>
    		tvars->pidvars.stopped = 0;
 8015be0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015be2:	7d13      	ldrb	r3, [r2, #20]
 8015be4:	f36f 0341 	bfc	r3, #1, #1
 8015be8:	7513      	strb	r3, [r2, #20]
    	}
        if (!tvars->pidvars.stopped && (tvars->target_speed == 0) && (abs(tvars->bemf_cv)<10)) {
 8015bea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015bec:	7d1b      	ldrb	r3, [r3, #20]
 8015bee:	f003 0302 	and.w	r3, r3, #2
 8015bf2:	b2db      	uxtb	r3, r3
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	d12c      	bne.n	8015c52 <train_periodic_control+0x1b2>
 8015bf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015bfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015bfe:	2b00      	cmp	r3, #0
 8015c00:	d127      	bne.n	8015c52 <train_periodic_control+0x1b2>
 8015c02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015c04:	685b      	ldr	r3, [r3, #4]
 8015c06:	f113 0f09 	cmn.w	r3, #9
 8015c0a:	db22      	blt.n	8015c52 <train_periodic_control+0x1b2>
 8015c0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015c0e:	685b      	ldr	r3, [r3, #4]
 8015c10:	2b09      	cmp	r3, #9
 8015c12:	dc1e      	bgt.n	8015c52 <train_periodic_control+0x1b2>
    		itm_debug1(DBG_PID, "stop", 0);
 8015c14:	2200      	movs	r2, #0
 8015c16:	4959      	ldr	r1, [pc, #356]	; (8015d7c <train_periodic_control+0x2dc>)
 8015c18:	2004      	movs	r0, #4
 8015c1a:	f7ff fd63 	bl	80156e4 <itm_debug1>
        	//debug_info('T', 0, "ZERO", cv->bemf_centivolt,0, 0);
			pidctl_reset(&tconf->pidcnf, &tvars->pidvars);
 8015c1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015c20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015c22:	3308      	adds	r3, #8
 8015c24:	4619      	mov	r1, r3
 8015c26:	4610      	mov	r0, r2
 8015c28:	f7ff fc7e 	bl	8015528 <pidctl_reset>
			debug_info('T', numtrain, "STOP_PID", 0,0, 0);
 8015c2c:	6879      	ldr	r1, [r7, #4]
 8015c2e:	2300      	movs	r3, #0
 8015c30:	9301      	str	r3, [sp, #4]
 8015c32:	2300      	movs	r3, #0
 8015c34:	9300      	str	r3, [sp, #0]
 8015c36:	2300      	movs	r3, #0
 8015c38:	4a51      	ldr	r2, [pc, #324]	; (8015d80 <train_periodic_control+0x2e0>)
 8015c3a:	2054      	movs	r0, #84	; 0x54
 8015c3c:	f7ff fdc8 	bl	80157d0 <debug_info>
			tvars->pidvars.stopped = 1;
 8015c40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015c42:	7d13      	ldrb	r3, [r2, #20]
 8015c44:	f043 0302 	orr.w	r3, r3, #2
 8015c48:	7513      	strb	r3, [r2, #20]
        	v = 0;
 8015c4a:	2300      	movs	r3, #0
 8015c4c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8015c50:	e043      	b.n	8015cda <train_periodic_control+0x23a>
        } else if (tvars->pidvars.stopped) {
 8015c52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015c54:	7d1b      	ldrb	r3, [r3, #20]
 8015c56:	f003 0302 	and.w	r3, r3, #2
 8015c5a:	b2db      	uxtb	r3, r3
 8015c5c:	2b00      	cmp	r3, #0
 8015c5e:	d00a      	beq.n	8015c76 <train_periodic_control+0x1d6>
    		itm_debug1(DBG_PID, "stopped", v);
 8015c60:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015c64:	461a      	mov	r2, r3
 8015c66:	4947      	ldr	r1, [pc, #284]	; (8015d84 <train_periodic_control+0x2e4>)
 8015c68:	2004      	movs	r0, #4
 8015c6a:	f7ff fd3b 	bl	80156e4 <itm_debug1>
        	v = 0;
 8015c6e:	2300      	movs	r3, #0
 8015c70:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8015c74:	e031      	b.n	8015cda <train_periodic_control+0x23a>
        } else {
        	itm_debug2(DBG_PID, "pid", bemf, v);
 8015c76:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015c7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015c7c:	4942      	ldr	r1, [pc, #264]	; (8015d88 <train_periodic_control+0x2e8>)
 8015c7e:	2004      	movs	r0, #4
 8015c80:	f7ff fd4a 	bl	8015718 <itm_debug2>
        	//const canton_config_t *cc = get_canton_cnf(vars->current_canton);
        	if (bemf>MAX_PID_VALUE)  bemf=MAX_PID_VALUE; // XXX
 8015c84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015c86:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8015c8a:	dd02      	ble.n	8015c92 <train_periodic_control+0x1f2>
 8015c8c:	f44f 738c 	mov.w	r3, #280	; 0x118
 8015c90:	64bb      	str	r3, [r7, #72]	; 0x48
        	if (bemf<-MAX_PID_VALUE) bemf=-MAX_PID_VALUE;
 8015c92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015c94:	f513 7f8c 	cmn.w	r3, #280	; 0x118
 8015c98:	da01      	bge.n	8015c9e <train_periodic_control+0x1fe>
 8015c9a:	4b3c      	ldr	r3, [pc, #240]	; (8015d8c <train_periodic_control+0x2ec>)
 8015c9c:	64bb      	str	r3, [r7, #72]	; 0x48

        	int32_t v2 = pidctl_value(&tconf->pidcnf, &tvars->pidvars, bemf, dt);
 8015c9e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8015ca0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015ca2:	f103 0108 	add.w	r1, r3, #8
 8015ca6:	683b      	ldr	r3, [r7, #0]
 8015ca8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015caa:	f7ff fc75 	bl	8015598 <pidctl_value>
 8015cae:	6378      	str	r0, [r7, #52]	; 0x34
        	uint32_t v3;
        	v3 = (v2>100) ? 100 : v2;
 8015cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015cb2:	2b64      	cmp	r3, #100	; 0x64
 8015cb4:	bfa8      	it	ge
 8015cb6:	2364      	movge	r3, #100	; 0x64
 8015cb8:	633b      	str	r3, [r7, #48]	; 0x30
        	v3 = (v3<-100) ? -100: v3;
 8015cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cbc:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8015cc0:	4293      	cmp	r3, r2
 8015cc2:	bf38      	it	cc
 8015cc4:	4613      	movcc	r3, r2
 8015cc6:	633b      	str	r3, [r7, #48]	; 0x30
        	itm_debug2(DBG_PID, "pid/r", v3, v2);
 8015cc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015ccc:	4930      	ldr	r1, [pc, #192]	; (8015d90 <train_periodic_control+0x2f0>)
 8015cce:	2004      	movs	r0, #4
 8015cd0:	f7ff fd22 	bl	8015718 <itm_debug2>
        	v = (int16_t)v3;
 8015cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cd6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        }
    }
    if (tconf->postIIR) {
 8015cda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015cdc:	7d9b      	ldrb	r3, [r3, #22]
 8015cde:	2b00      	cmp	r3, #0
 8015ce0:	d01c      	beq.n	8015d1c <train_periodic_control+0x27c>
        tvars->v_iir = (80*tvars->v_iir+20*v)/100;
 8015ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015ce4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015ce8:	461a      	mov	r2, r3
 8015cea:	4613      	mov	r3, r2
 8015cec:	009b      	lsls	r3, r3, #2
 8015cee:	4413      	add	r3, r2
 8015cf0:	011b      	lsls	r3, r3, #4
 8015cf2:	4619      	mov	r1, r3
 8015cf4:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8015cf8:	4613      	mov	r3, r2
 8015cfa:	009b      	lsls	r3, r3, #2
 8015cfc:	4413      	add	r3, r2
 8015cfe:	009b      	lsls	r3, r3, #2
 8015d00:	440b      	add	r3, r1
 8015d02:	4a1d      	ldr	r2, [pc, #116]	; (8015d78 <train_periodic_control+0x2d8>)
 8015d04:	fb82 1203 	smull	r1, r2, r2, r3
 8015d08:	1152      	asrs	r2, r2, #5
 8015d0a:	17db      	asrs	r3, r3, #31
 8015d0c:	1ad3      	subs	r3, r2, r3
 8015d0e:	b21a      	sxth	r2, r3
 8015d10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015d12:	861a      	strh	r2, [r3, #48]	; 0x30
        v = tvars->v_iir;
 8015d14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015d16:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8015d18:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    }
    // or inertia after PID
    if (2==tconf->enable_inertia) {
 8015d1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015d1e:	7c5b      	ldrb	r3, [r3, #17]
 8015d20:	2b02      	cmp	r3, #2
 8015d22:	d111      	bne.n	8015d48 <train_periodic_control+0x2a8>
        tvars->inertiavars.target = v;
 8015d24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015d26:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8015d2a:	831a      	strh	r2, [r3, #24]
        v = inertia_value(&tconf->inertiacnf, &tvars->inertiavars, dt, NULL);
 8015d2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015d2e:	f103 000c 	add.w	r0, r3, #12
 8015d32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015d34:	f103 0118 	add.w	r1, r3, #24
 8015d38:	683b      	ldr	r3, [r7, #0]
 8015d3a:	b29a      	uxth	r2, r3
 8015d3c:	2300      	movs	r3, #0
 8015d3e:	f7ff fa95 	bl	801526c <inertia_value>
 8015d42:	4603      	mov	r3, r0
 8015d44:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    }

    if (tconf->en_spd2pow) {
 8015d48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015d4a:	7e1b      	ldrb	r3, [r3, #24]
 8015d4c:	2b00      	cmp	r3, #0
 8015d4e:	d048      	beq.n	8015de2 <train_periodic_control+0x342>
    	// [0-100] -> [min_pwm .. MAX_PWM]
    	int s = SIGNOF(v);
 8015d50:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	da1d      	bge.n	8015d94 <train_periodic_control+0x2f4>
 8015d58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015d5c:	e01b      	b.n	8015d96 <train_periodic_control+0x2f6>
 8015d5e:	bf00      	nop
 8015d60:	20005280 	.word	0x20005280
 8015d64:	20005290 	.word	0x20005290
 8015d68:	08017478 	.word	0x08017478
 8015d6c:	08017480 	.word	0x08017480
 8015d70:	20000474 	.word	0x20000474
 8015d74:	08017488 	.word	0x08017488
 8015d78:	51eb851f 	.word	0x51eb851f
 8015d7c:	08017490 	.word	0x08017490
 8015d80:	08017498 	.word	0x08017498
 8015d84:	080174a4 	.word	0x080174a4
 8015d88:	080174ac 	.word	0x080174ac
 8015d8c:	fffffee8 	.word	0xfffffee8
 8015d90:	080174b0 	.word	0x080174b0
 8015d94:	2301      	movs	r3, #1
 8015d96:	62fb      	str	r3, [r7, #44]	; 0x2c
    	int a = abs(v);
 8015d98:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015d9c:	2b00      	cmp	r3, #0
 8015d9e:	bfb8      	it	lt
 8015da0:	425b      	neglt	r3, r3
 8015da2:	62bb      	str	r3, [r7, #40]	; 0x28
    	int v2 = (a>1) ? a * (MAX_PWM-tconf->min_power)/100 + tconf->min_power : 0;
 8015da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015da6:	2b01      	cmp	r3, #1
 8015da8:	dd10      	ble.n	8015dcc <train_periodic_control+0x32c>
 8015daa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015dac:	7e5b      	ldrb	r3, [r3, #25]
 8015dae:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8015db2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015db4:	fb02 f303 	mul.w	r3, r2, r3
 8015db8:	4a42      	ldr	r2, [pc, #264]	; (8015ec4 <train_periodic_control+0x424>)
 8015dba:	fb82 1203 	smull	r1, r2, r2, r3
 8015dbe:	1152      	asrs	r2, r2, #5
 8015dc0:	17db      	asrs	r3, r3, #31
 8015dc2:	1ad3      	subs	r3, r2, r3
 8015dc4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015dc6:	7e52      	ldrb	r2, [r2, #25]
 8015dc8:	4413      	add	r3, r2
 8015dca:	e000      	b.n	8015dce <train_periodic_control+0x32e>
 8015dcc:	2300      	movs	r3, #0
 8015dce:	627b      	str	r3, [r7, #36]	; 0x24
    	v = s * v2;
 8015dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dd2:	b29a      	uxth	r2, r3
 8015dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dd6:	b29b      	uxth	r3, r3
 8015dd8:	fb12 f303 	smulbb	r3, r2, r3
 8015ddc:	b29b      	uxth	r3, r3
 8015dde:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    }

    int changed = (tvars->last_speed != v);
 8015de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015de4:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8015de8:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8015dec:	429a      	cmp	r2, r3
 8015dee:	bf14      	ite	ne
 8015df0:	2301      	movne	r3, #1
 8015df2:	2300      	moveq	r3, #0
 8015df4:	b2db      	uxtb	r3, r3
 8015df6:	623b      	str	r3, [r7, #32]
    tvars->last_speed = v;
 8015df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015dfa:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8015dfe:	841a      	strh	r2, [r3, #32]

    itm_debug2(DBG_PID|DBG_SPDCTL, "spd", v, changed);
 8015e00:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8015e04:	6a3b      	ldr	r3, [r7, #32]
 8015e06:	4930      	ldr	r1, [pc, #192]	; (8015ec8 <train_periodic_control+0x428>)
 8015e08:	2014      	movs	r0, #20
 8015e0a:	f7ff fc85 	bl	8015718 <itm_debug2>

    if (changed) {
 8015e0e:	6a3b      	ldr	r3, [r7, #32]
 8015e10:	2b00      	cmp	r3, #0
 8015e12:	d01a      	beq.n	8015e4a <train_periodic_control+0x3aa>
    	_set_speed(numtrain, tconf, tvars);
 8015e14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015e16:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015e18:	6878      	ldr	r0, [r7, #4]
 8015e1a:	f000 f8f3 	bl	8016004 <_set_speed>
        if ((1)) { // TODO remove
            msg_64_t m;
            m.from = MA_TRAIN_SC(numtrain);
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	b25b      	sxtb	r3, r3
 8015e22:	f003 0307 	and.w	r3, r3, #7
 8015e26:	b25b      	sxtb	r3, r3
 8015e28:	f063 0337 	orn	r3, r3, #55	; 0x37
 8015e2c:	b25b      	sxtb	r3, r3
 8015e2e:	b2db      	uxtb	r3, r3
 8015e30:	747b      	strb	r3, [r7, #17]
            m.to = MA_UI(0);
 8015e32:	2380      	movs	r3, #128	; 0x80
 8015e34:	743b      	strb	r3, [r7, #16]
            m.cmd = CMD_NOTIF_SPEED;
 8015e36:	23a0      	movs	r3, #160	; 0xa0
 8015e38:	74bb      	strb	r3, [r7, #18]
            m.v1 = v;
 8015e3a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8015e3e:	82bb      	strh	r3, [r7, #20]
            mqf_write_from_spdctl(&m);
 8015e40:	f107 0310 	add.w	r3, r7, #16
 8015e44:	4618      	mov	r0, r3
 8015e46:	f7ff fced 	bl	8015824 <mqf_write_from_spdctl>
        }
    }
    if (tconf->notify_speed) {
 8015e4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015e4c:	7cdb      	ldrb	r3, [r3, #19]
 8015e4e:	2b00      	cmp	r3, #0
 8015e50:	d011      	beq.n	8015e76 <train_periodic_control+0x3d6>
    	struct spd_notif n;
    	n.sv100 = v;
 8015e52:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8015e56:	813b      	strh	r3, [r7, #8]
    	n.pid_target = tvars->pidvars.target_v;
 8015e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e5a:	691b      	ldr	r3, [r3, #16]
 8015e5c:	b21b      	sxth	r3, r3
 8015e5e:	817b      	strh	r3, [r7, #10]
    	//canton_vars_t *cv1 = get_canton_vars(tvars->current_canton);
    	n.bemf_centivolt = tvars->bemf_cv; //cv1->bemf_centivolt;
 8015e60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e62:	685b      	ldr	r3, [r3, #4]
 8015e64:	60fb      	str	r3, [r7, #12]
    	train_notif(numtrain, 'V', (void *)&n, sizeof(n));
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	b2d8      	uxtb	r0, r3
 8015e6a:	f107 0208 	add.w	r2, r7, #8
 8015e6e:	2308      	movs	r3, #8
 8015e70:	2156      	movs	r1, #86	; 0x56
 8015e72:	f7ff fc98 	bl	80157a6 <train_notif>
    }

    /* estimate speed/position with bemf */
    if ((1)) {
    	//canton_vars_t *cv = get_canton_vars(tvars->current_canton);
        int32_t b = tvars->bemf_cv; //cv->bemf_centivolt;
 8015e76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e78:	685b      	ldr	r3, [r3, #4]
 8015e7a:	647b      	str	r3, [r7, #68]	; 0x44
        if (abs(b)<25) b = 0;
 8015e7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015e7e:	f113 0f18 	cmn.w	r3, #24
 8015e82:	db04      	blt.n	8015e8e <train_periodic_control+0x3ee>
 8015e84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015e86:	2b18      	cmp	r3, #24
 8015e88:	dc01      	bgt.n	8015e8e <train_periodic_control+0x3ee>
 8015e8a:	2300      	movs	r3, #0
 8015e8c:	647b      	str	r3, [r7, #68]	; 0x44
        // TODO: BEMF to speed. currently part of it is done in convert_to_centivolt
        //       but we assume speed is really proportional to BEMF
        tvars->position_estimate += b;
 8015e8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015e92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015e94:	441a      	add	r2, r3
 8015e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e98:	629a      	str	r2, [r3, #40]	; 0x28
        if (tconf->notify_pose) {
 8015e9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015e9c:	7d1b      	ldrb	r3, [r3, #20]
 8015e9e:	2b00      	cmp	r3, #0
 8015ea0:	d00c      	beq.n	8015ebc <train_periodic_control+0x41c>
    		train_notif(numtrain, 'i', (void *)&tvars->position_estimate, sizeof(int32_t));
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	b2d8      	uxtb	r0, r3
 8015ea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015ea8:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8015eac:	2304      	movs	r3, #4
 8015eae:	2169      	movs	r1, #105	; 0x69
 8015eb0:	f7ff fc79 	bl	80157a6 <train_notif>
 8015eb4:	e002      	b.n	8015ebc <train_periodic_control+0x41c>
	if (stop_all) return;
 8015eb6:	bf00      	nop
 8015eb8:	e000      	b.n	8015ebc <train_periodic_control+0x41c>
        return;
 8015eba:	bf00      	nop
        }
    }
}
 8015ebc:	3750      	adds	r7, #80	; 0x50
 8015ebe:	46bd      	mov	sp, r7
 8015ec0:	bd80      	pop	{r7, pc}
 8015ec2:	bf00      	nop
 8015ec4:	51eb851f 	.word	0x51eb851f
 8015ec8:	080174b8 	.word	0x080174b8

08015ecc <set_c1_c2>:


static void set_c1_c2(int tidx, train_vars_t *tvars, uint8_t c1, int8_t dir1, uint8_t c2, int8_t dir2)
{
 8015ecc:	b580      	push	{r7, lr}
 8015ece:	b086      	sub	sp, #24
 8015ed0:	af00      	add	r7, sp, #0
 8015ed2:	60f8      	str	r0, [r7, #12]
 8015ed4:	60b9      	str	r1, [r7, #8]
 8015ed6:	4611      	mov	r1, r2
 8015ed8:	461a      	mov	r2, r3
 8015eda:	460b      	mov	r3, r1
 8015edc:	71fb      	strb	r3, [r7, #7]
 8015ede:	4613      	mov	r3, r2
 8015ee0:	71bb      	strb	r3, [r7, #6]
	msg_64_t m;
	m.from = MA_TRAIN_SC(tidx);
 8015ee2:	68fb      	ldr	r3, [r7, #12]
 8015ee4:	b25b      	sxtb	r3, r3
 8015ee6:	f003 0307 	and.w	r3, r3, #7
 8015eea:	b25b      	sxtb	r3, r3
 8015eec:	f063 0337 	orn	r3, r3, #55	; 0x37
 8015ef0:	b25b      	sxtb	r3, r3
 8015ef2:	b2db      	uxtb	r3, r3
 8015ef4:	747b      	strb	r3, [r7, #17]

	if ((tvars->C1 != 0xFF) && (tvars->C1 != c1)  && (tvars->C1 != c2)) {
 8015ef6:	68bb      	ldr	r3, [r7, #8]
 8015ef8:	7f1b      	ldrb	r3, [r3, #28]
 8015efa:	2bff      	cmp	r3, #255	; 0xff
 8015efc:	d01b      	beq.n	8015f36 <set_c1_c2+0x6a>
 8015efe:	68bb      	ldr	r3, [r7, #8]
 8015f00:	7f1b      	ldrb	r3, [r3, #28]
 8015f02:	79fa      	ldrb	r2, [r7, #7]
 8015f04:	429a      	cmp	r2, r3
 8015f06:	d016      	beq.n	8015f36 <set_c1_c2+0x6a>
 8015f08:	68bb      	ldr	r3, [r7, #8]
 8015f0a:	7f1b      	ldrb	r3, [r3, #28]
 8015f0c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8015f10:	429a      	cmp	r2, r3
 8015f12:	d010      	beq.n	8015f36 <set_c1_c2+0x6a>
		m.to = tvars->C1;
 8015f14:	68bb      	ldr	r3, [r7, #8]
 8015f16:	7f1b      	ldrb	r3, [r3, #28]
 8015f18:	743b      	strb	r3, [r7, #16]
		m.cmd = CMD_STOP;
 8015f1a:	2302      	movs	r3, #2
 8015f1c:	74bb      	strb	r3, [r7, #18]
		mqf_write_from_spdctl(&m);
 8015f1e:	f107 0310 	add.w	r3, r7, #16
 8015f22:	4618      	mov	r0, r3
 8015f24:	f7ff fc7e 	bl	8015824 <mqf_write_from_spdctl>
		m.cmd = CMD_BEMF_OFF;
 8015f28:	2341      	movs	r3, #65	; 0x41
 8015f2a:	74bb      	strb	r3, [r7, #18]
		mqf_write_from_spdctl(&m);
 8015f2c:	f107 0310 	add.w	r3, r7, #16
 8015f30:	4618      	mov	r0, r3
 8015f32:	f7ff fc77 	bl	8015824 <mqf_write_from_spdctl>
	}
	if ((tvars->C2 != 0xFF) && (tvars->C2 != c1)  && (tvars->C2 != c2)) {
 8015f36:	68bb      	ldr	r3, [r7, #8]
 8015f38:	7f5b      	ldrb	r3, [r3, #29]
 8015f3a:	2bff      	cmp	r3, #255	; 0xff
 8015f3c:	d01b      	beq.n	8015f76 <set_c1_c2+0xaa>
 8015f3e:	68bb      	ldr	r3, [r7, #8]
 8015f40:	7f5b      	ldrb	r3, [r3, #29]
 8015f42:	79fa      	ldrb	r2, [r7, #7]
 8015f44:	429a      	cmp	r2, r3
 8015f46:	d016      	beq.n	8015f76 <set_c1_c2+0xaa>
 8015f48:	68bb      	ldr	r3, [r7, #8]
 8015f4a:	7f5b      	ldrb	r3, [r3, #29]
 8015f4c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8015f50:	429a      	cmp	r2, r3
 8015f52:	d010      	beq.n	8015f76 <set_c1_c2+0xaa>
		m.to = tvars->C2;
 8015f54:	68bb      	ldr	r3, [r7, #8]
 8015f56:	7f5b      	ldrb	r3, [r3, #29]
 8015f58:	743b      	strb	r3, [r7, #16]
		m.cmd = CMD_STOP;
 8015f5a:	2302      	movs	r3, #2
 8015f5c:	74bb      	strb	r3, [r7, #18]
		mqf_write_from_spdctl(&m);
 8015f5e:	f107 0310 	add.w	r3, r7, #16
 8015f62:	4618      	mov	r0, r3
 8015f64:	f7ff fc5e 	bl	8015824 <mqf_write_from_spdctl>
		m.cmd = CMD_BEMF_OFF;
 8015f68:	2341      	movs	r3, #65	; 0x41
 8015f6a:	74bb      	strb	r3, [r7, #18]
		mqf_write_from_spdctl(&m);
 8015f6c:	f107 0310 	add.w	r3, r7, #16
 8015f70:	4618      	mov	r0, r3
 8015f72:	f7ff fc57 	bl	8015824 <mqf_write_from_spdctl>
	}
	if ((c1 != 0xFF) && (c1 != tvars->C1) && (c1 != tvars->C2)) {
 8015f76:	79fb      	ldrb	r3, [r7, #7]
 8015f78:	2bff      	cmp	r3, #255	; 0xff
 8015f7a:	d012      	beq.n	8015fa2 <set_c1_c2+0xd6>
 8015f7c:	68bb      	ldr	r3, [r7, #8]
 8015f7e:	7f1b      	ldrb	r3, [r3, #28]
 8015f80:	79fa      	ldrb	r2, [r7, #7]
 8015f82:	429a      	cmp	r2, r3
 8015f84:	d00d      	beq.n	8015fa2 <set_c1_c2+0xd6>
 8015f86:	68bb      	ldr	r3, [r7, #8]
 8015f88:	7f5b      	ldrb	r3, [r3, #29]
 8015f8a:	79fa      	ldrb	r2, [r7, #7]
 8015f8c:	429a      	cmp	r2, r3
 8015f8e:	d008      	beq.n	8015fa2 <set_c1_c2+0xd6>
		m.to = c1;
 8015f90:	79fb      	ldrb	r3, [r7, #7]
 8015f92:	743b      	strb	r3, [r7, #16]
		m.cmd = CMD_BEMF_ON;
 8015f94:	2340      	movs	r3, #64	; 0x40
 8015f96:	74bb      	strb	r3, [r7, #18]
		mqf_write_from_spdctl(&m);
 8015f98:	f107 0310 	add.w	r3, r7, #16
 8015f9c:	4618      	mov	r0, r3
 8015f9e:	f7ff fc41 	bl	8015824 <mqf_write_from_spdctl>
	}
	if ((c2 != 0xFF) && (c2 != tvars->C1) && (c2 != tvars->C2)) {
 8015fa2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015fa6:	2bff      	cmp	r3, #255	; 0xff
 8015fa8:	d015      	beq.n	8015fd6 <set_c1_c2+0x10a>
 8015faa:	68bb      	ldr	r3, [r7, #8]
 8015fac:	7f1b      	ldrb	r3, [r3, #28]
 8015fae:	f897 2020 	ldrb.w	r2, [r7, #32]
 8015fb2:	429a      	cmp	r2, r3
 8015fb4:	d00f      	beq.n	8015fd6 <set_c1_c2+0x10a>
 8015fb6:	68bb      	ldr	r3, [r7, #8]
 8015fb8:	7f5b      	ldrb	r3, [r3, #29]
 8015fba:	f897 2020 	ldrb.w	r2, [r7, #32]
 8015fbe:	429a      	cmp	r2, r3
 8015fc0:	d009      	beq.n	8015fd6 <set_c1_c2+0x10a>
		m.to = c2;
 8015fc2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015fc6:	743b      	strb	r3, [r7, #16]
		m.cmd = CMD_BEMF_ON;
 8015fc8:	2340      	movs	r3, #64	; 0x40
 8015fca:	74bb      	strb	r3, [r7, #18]
		mqf_write_from_spdctl(&m);
 8015fcc:	f107 0310 	add.w	r3, r7, #16
 8015fd0:	4618      	mov	r0, r3
 8015fd2:	f7ff fc27 	bl	8015824 <mqf_write_from_spdctl>
	}
	tvars->C1 = c1;
 8015fd6:	68bb      	ldr	r3, [r7, #8]
 8015fd8:	79fa      	ldrb	r2, [r7, #7]
 8015fda:	771a      	strb	r2, [r3, #28]
	tvars->current_canton_dir = dir1;
 8015fdc:	68bb      	ldr	r3, [r7, #8]
 8015fde:	79ba      	ldrb	r2, [r7, #6]
 8015fe0:	779a      	strb	r2, [r3, #30]
	tvars->C2 = c2;
 8015fe2:	68bb      	ldr	r3, [r7, #8]
 8015fe4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8015fe8:	775a      	strb	r2, [r3, #29]
	tvars->next_canton_dir = dir2;
 8015fea:	68bb      	ldr	r3, [r7, #8]
 8015fec:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8015ff0:	77da      	strb	r2, [r3, #31]
	tvars->last_speed = 9000; // make sure cmd is sent
 8015ff2:	68bb      	ldr	r3, [r7, #8]
 8015ff4:	f242 3228 	movw	r2, #9000	; 0x2328
 8015ff8:	841a      	strh	r2, [r3, #32]
}
 8015ffa:	bf00      	nop
 8015ffc:	3718      	adds	r7, #24
 8015ffe:	46bd      	mov	sp, r7
 8016000:	bd80      	pop	{r7, pc}
	...

08016004 <_set_speed>:
}
#endif


static void _set_speed(int tidx, const train_config_t *cnf, train_vars_t *vars)
{
 8016004:	b580      	push	{r7, lr}
 8016006:	b092      	sub	sp, #72	; 0x48
 8016008:	af02      	add	r7, sp, #8
 801600a:	60f8      	str	r0, [r7, #12]
 801600c:	60b9      	str	r1, [r7, #8]
 801600e:	607a      	str	r2, [r7, #4]
    const canton_config_t *c1;
    const canton_config_t *c2;


	int16_t sv100 = vars->last_speed;
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	8c1b      	ldrh	r3, [r3, #32]
 8016014:	87fb      	strh	r3, [r7, #62]	; 0x3e

    //num_set_speed++;


    c1 =  get_canton_cnf(vars->C1);
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	7f1b      	ldrb	r3, [r3, #28]
 801601a:	4618      	mov	r0, r3
 801601c:	f7fe f89e 	bl	801415c <get_canton_cnf>
 8016020:	63b8      	str	r0, [r7, #56]	; 0x38
    c2 =  get_canton_cnf(vars->C2);
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	7f5b      	ldrb	r3, [r3, #29]
 8016026:	4618      	mov	r0, r3
 8016028:	f7fe f898 	bl	801415c <get_canton_cnf>
 801602c:	6378      	str	r0, [r7, #52]	; 0x34
    
    if (!c1) {
 801602e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016030:	2b00      	cmp	r3, #0
 8016032:	d10c      	bne.n	801604e <_set_speed+0x4a>
    	itm_debug1(DBG_ERR|DBG_SPDCTL, "no canton", sv100);
 8016034:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8016038:	461a      	mov	r2, r3
 801603a:	4947      	ldr	r1, [pc, #284]	; (8016158 <_set_speed+0x154>)
 801603c:	4847      	ldr	r0, [pc, #284]	; (801615c <_set_speed+0x158>)
 801603e:	f7ff fb51 	bl	80156e4 <itm_debug1>
        train_error(ERR_CANTON_NONE, "no canton");
 8016042:	4945      	ldr	r1, [pc, #276]	; (8016158 <_set_speed+0x154>)
 8016044:	f06f 0064 	mvn.w	r0, #100	; 0x64
 8016048:	f7ff fb9e 	bl	8015788 <train_error>
 801604c:	e080      	b.n	8016150 <_set_speed+0x14c>
        return;
    }

    int pvi1, pvi2;
    int sig = SIGNOF(sv100);
 801604e:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8016052:	2b00      	cmp	r3, #0
 8016054:	da02      	bge.n	801605c <_set_speed+0x58>
 8016056:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801605a:	e000      	b.n	801605e <_set_speed+0x5a>
 801605c:	2301      	movs	r3, #1
 801605e:	633b      	str	r3, [r7, #48]	; 0x30
    uint16_t v = abs(sv100);
 8016060:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8016064:	2b00      	cmp	r3, #0
 8016066:	bfb8      	it	lt
 8016068:	425b      	neglt	r3, r3
 801606a:	85fb      	strh	r3, [r7, #46]	; 0x2e
    uint16_t pwm_duty = volt_index(v*10 /* mili*/,
 801606c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801606e:	461a      	mov	r2, r3
 8016070:	0092      	lsls	r2, r2, #2
 8016072:	4413      	add	r3, r2
 8016074:	005b      	lsls	r3, r3, #1
 8016076:	b298      	uxth	r0, r3
 8016078:	68bb      	ldr	r3, [r7, #8]
 801607a:	7c1b      	ldrb	r3, [r3, #16]
 801607c:	f107 0220 	add.w	r2, r7, #32
 8016080:	9301      	str	r3, [sp, #4]
 8016082:	f107 031c 	add.w	r3, r7, #28
 8016086:	9300      	str	r3, [sp, #0]
 8016088:	4613      	mov	r3, r2
 801608a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801608c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801608e:	f7fd f94d 	bl	801332c <volt_index>
 8016092:	4603      	mov	r3, r0
 8016094:	85bb      	strh	r3, [r7, #44]	; 0x2c
                                   c1, c2,
                                   &pvi1, &pvi2, cnf->volt_policy);

	int dir1 = sig * vars->current_canton_dir;
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	f993 301e 	ldrsb.w	r3, [r3, #30]
 801609c:	461a      	mov	r2, r3
 801609e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160a0:	fb02 f303 	mul.w	r3, r2, r3
 80160a4:	62bb      	str	r3, [r7, #40]	; 0x28
	int dir2 = sig * vars->next_canton_dir;
 80160a6:	687b      	ldr	r3, [r7, #4]
 80160a8:	f993 301f 	ldrsb.w	r3, [r3, #31]
 80160ac:	461a      	mov	r2, r3
 80160ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160b0:	fb02 f303 	mul.w	r3, r2, r3
 80160b4:	627b      	str	r3, [r7, #36]	; 0x24


    msg_64_t m;
    m.from = MA_TRAIN_SC(tidx);
 80160b6:	68fb      	ldr	r3, [r7, #12]
 80160b8:	b25b      	sxtb	r3, r3
 80160ba:	f003 0307 	and.w	r3, r3, #7
 80160be:	b25b      	sxtb	r3, r3
 80160c0:	f063 0337 	orn	r3, r3, #55	; 0x37
 80160c4:	b25b      	sxtb	r3, r3
 80160c6:	b2db      	uxtb	r3, r3
 80160c8:	747b      	strb	r3, [r7, #17]
    m.cmd = CMD_SETVPWM;
 80160ca:	2301      	movs	r3, #1
 80160cc:	74bb      	strb	r3, [r7, #18]
    m.v1u = pvi1;
 80160ce:	6a3b      	ldr	r3, [r7, #32]
 80160d0:	b29b      	uxth	r3, r3
 80160d2:	82bb      	strh	r3, [r7, #20]
    m.v2 = dir1*pwm_duty;
 80160d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160d6:	b29b      	uxth	r3, r3
 80160d8:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80160da:	fb12 f303 	smulbb	r3, r2, r3
 80160de:	b29b      	uxth	r3, r3
 80160e0:	b21b      	sxth	r3, r3
 80160e2:	82fb      	strh	r3, [r7, #22]
    m.to = vars->C1;
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	7f1b      	ldrb	r3, [r3, #28]
 80160e8:	743b      	strb	r3, [r7, #16]
	itm_debug3(DBG_SPDCTL, "setvpwm", m.v1u, m.v2, m.to);
 80160ea:	8abb      	ldrh	r3, [r7, #20]
 80160ec:	461a      	mov	r2, r3
 80160ee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80160f2:	4619      	mov	r1, r3
 80160f4:	7c3b      	ldrb	r3, [r7, #16]
 80160f6:	9300      	str	r3, [sp, #0]
 80160f8:	460b      	mov	r3, r1
 80160fa:	4919      	ldr	r1, [pc, #100]	; (8016160 <_set_speed+0x15c>)
 80160fc:	2010      	movs	r0, #16
 80160fe:	f7ff fb27 	bl	8015750 <itm_debug3>
    mqf_write_from_spdctl(&m);
 8016102:	f107 0310 	add.w	r3, r7, #16
 8016106:	4618      	mov	r0, r3
 8016108:	f7ff fb8c 	bl	8015824 <mqf_write_from_spdctl>

    if (c2) {
 801610c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801610e:	2b00      	cmp	r3, #0
 8016110:	d01e      	beq.n	8016150 <_set_speed+0x14c>
    	itm_debug3(DBG_SPDCTL, "setvpwm/c2", m.v1u, m.v2, m.to);
 8016112:	8abb      	ldrh	r3, [r7, #20]
 8016114:	461a      	mov	r2, r3
 8016116:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801611a:	4619      	mov	r1, r3
 801611c:	7c3b      	ldrb	r3, [r7, #16]
 801611e:	9300      	str	r3, [sp, #0]
 8016120:	460b      	mov	r3, r1
 8016122:	4910      	ldr	r1, [pc, #64]	; (8016164 <_set_speed+0x160>)
 8016124:	2010      	movs	r0, #16
 8016126:	f7ff fb13 	bl	8015750 <itm_debug3>
    	m.v1u = pvi2;
 801612a:	69fb      	ldr	r3, [r7, #28]
 801612c:	b29b      	uxth	r3, r3
 801612e:	82bb      	strh	r3, [r7, #20]
    	m.v2 = dir2*pwm_duty;
 8016130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016132:	b29b      	uxth	r3, r3
 8016134:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8016136:	fb12 f303 	smulbb	r3, r2, r3
 801613a:	b29b      	uxth	r3, r3
 801613c:	b21b      	sxth	r3, r3
 801613e:	82fb      	strh	r3, [r7, #22]
    	m.to = vars->C2;
 8016140:	687b      	ldr	r3, [r7, #4]
 8016142:	7f5b      	ldrb	r3, [r3, #29]
 8016144:	743b      	strb	r3, [r7, #16]
    	mqf_write_from_spdctl(&m);
 8016146:	f107 0310 	add.w	r3, r7, #16
 801614a:	4618      	mov	r0, r3
 801614c:	f7ff fb6a 	bl	8015824 <mqf_write_from_spdctl>
    }


}
 8016150:	3740      	adds	r7, #64	; 0x40
 8016152:	46bd      	mov	sp, r7
 8016154:	bd80      	pop	{r7, pc}
 8016156:	bf00      	nop
 8016158:	080174bc 	.word	0x080174bc
 801615c:	80000010 	.word	0x80000010
 8016160:	080174c8 	.word	0x080174c8
 8016164:	080174d0 	.word	0x080174d0

08016168 <train_set_target_speed>:

/* =========================================================================== */


int train_set_target_speed(int numtrain, int16_t target)
{
 8016168:	b580      	push	{r7, lr}
 801616a:	b084      	sub	sp, #16
 801616c:	af00      	add	r7, sp, #0
 801616e:	6078      	str	r0, [r7, #4]
 8016170:	460b      	mov	r3, r1
 8016172:	807b      	strh	r3, [r7, #2]
	if (calibrating) return 1;
 8016174:	4b0f      	ldr	r3, [pc, #60]	; (80161b4 <train_set_target_speed+0x4c>)
 8016176:	681b      	ldr	r3, [r3, #0]
 8016178:	2b00      	cmp	r3, #0
 801617a:	d001      	beq.n	8016180 <train_set_target_speed+0x18>
 801617c:	2301      	movs	r3, #1
 801617e:	e014      	b.n	80161aa <train_set_target_speed+0x42>
	USE_TRAIN(numtrain) // tconf tvars
 8016180:	6878      	ldr	r0, [r7, #4]
 8016182:	f7fe f813 	bl	80141ac <get_train_cnf>
 8016186:	60f8      	str	r0, [r7, #12]
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	2234      	movs	r2, #52	; 0x34
 801618c:	fb02 f303 	mul.w	r3, r2, r3
 8016190:	4a09      	ldr	r2, [pc, #36]	; (80161b8 <train_set_target_speed+0x50>)
 8016192:	4413      	add	r3, r2
 8016194:	60bb      	str	r3, [r7, #8]
	(void)tconf; // unused
	if (!tvars) return -1;
 8016196:	68bb      	ldr	r3, [r7, #8]
 8016198:	2b00      	cmp	r3, #0
 801619a:	d102      	bne.n	80161a2 <train_set_target_speed+0x3a>
 801619c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80161a0:	e003      	b.n	80161aa <train_set_target_speed+0x42>
	tvars->target_speed = target;
 80161a2:	68bb      	ldr	r3, [r7, #8]
 80161a4:	887a      	ldrh	r2, [r7, #2]
 80161a6:	801a      	strh	r2, [r3, #0]
		if (c->enable_pid) {
			pidctl_reset(&c->pidcnf, &vars->pidvars);
		}
	}*/

	return 0;
 80161a8:	2300      	movs	r3, #0
}
 80161aa:	4618      	mov	r0, r3
 80161ac:	3710      	adds	r7, #16
 80161ae:	46bd      	mov	sp, r7
 80161b0:	bd80      	pop	{r7, pc}
 80161b2:	bf00      	nop
 80161b4:	20005284 	.word	0x20005284
 80161b8:	20005290 	.word	0x20005290

080161bc <itm_debug1>:
{
 80161bc:	b580      	push	{r7, lr}
 80161be:	b086      	sub	sp, #24
 80161c0:	af02      	add	r7, sp, #8
 80161c2:	60f8      	str	r0, [r7, #12]
 80161c4:	60b9      	str	r1, [r7, #8]
 80161c6:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 80161c8:	4b08      	ldr	r3, [pc, #32]	; (80161ec <itm_debug1+0x30>)
 80161ca:	681a      	ldr	r2, [r3, #0]
 80161cc:	68fb      	ldr	r3, [r7, #12]
 80161ce:	4013      	ands	r3, r2
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	d007      	beq.n	80161e4 <itm_debug1+0x28>
 80161d4:	2301      	movs	r3, #1
 80161d6:	9300      	str	r3, [sp, #0]
 80161d8:	2300      	movs	r3, #0
 80161da:	2200      	movs	r2, #0
 80161dc:	6879      	ldr	r1, [r7, #4]
 80161de:	68b8      	ldr	r0, [r7, #8]
 80161e0:	f000 fb76 	bl	80168d0 <_itm_debug3>
}
 80161e4:	bf00      	nop
 80161e6:	3710      	adds	r7, #16
 80161e8:	46bd      	mov	sp, r7
 80161ea:	bd80      	pop	{r7, pc}
 80161ec:	2000047c 	.word	0x2000047c

080161f0 <itm_debug2>:
{
 80161f0:	b580      	push	{r7, lr}
 80161f2:	b086      	sub	sp, #24
 80161f4:	af02      	add	r7, sp, #8
 80161f6:	60f8      	str	r0, [r7, #12]
 80161f8:	60b9      	str	r1, [r7, #8]
 80161fa:	607a      	str	r2, [r7, #4]
 80161fc:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, 0, 2);
 80161fe:	4b09      	ldr	r3, [pc, #36]	; (8016224 <itm_debug2+0x34>)
 8016200:	681a      	ldr	r2, [r3, #0]
 8016202:	68fb      	ldr	r3, [r7, #12]
 8016204:	4013      	ands	r3, r2
 8016206:	2b00      	cmp	r3, #0
 8016208:	d007      	beq.n	801621a <itm_debug2+0x2a>
 801620a:	2302      	movs	r3, #2
 801620c:	9300      	str	r3, [sp, #0]
 801620e:	2300      	movs	r3, #0
 8016210:	683a      	ldr	r2, [r7, #0]
 8016212:	6879      	ldr	r1, [r7, #4]
 8016214:	68b8      	ldr	r0, [r7, #8]
 8016216:	f000 fb5b 	bl	80168d0 <_itm_debug3>
}
 801621a:	bf00      	nop
 801621c:	3710      	adds	r7, #16
 801621e:	46bd      	mov	sp, r7
 8016220:	bd80      	pop	{r7, pc}
 8016222:	bf00      	nop
 8016224:	2000047c 	.word	0x2000047c

08016228 <StartCtrlTask>:


static void run_task_ctrl(void);

void StartCtrlTask(void *argument)
{
 8016228:	b580      	push	{r7, lr}
 801622a:	b084      	sub	sp, #16
 801622c:	af00      	add	r7, sp, #0
 801622e:	6078      	str	r0, [r7, #4]
	int nsmpl = sizeof(train_adc_buf)/sizeof(uint16_t);
 8016230:	2328      	movs	r3, #40	; 0x28
 8016232:	60fb      	str	r3, [r7, #12]

	if (sizeof(train_adc_buf) != sizeof(uint16_t)*NUM_LOCAL_CANTONS_HW*8) Error_Handler();
	if (nsmpl != 5*2*4) Error_Handler();
 8016234:	68fb      	ldr	r3, [r7, #12]
 8016236:	2b28      	cmp	r3, #40	; 0x28
 8016238:	d001      	beq.n	801623e <StartCtrlTask+0x16>
 801623a:	f7eb f935 	bl	80014a8 <Error_Handler>

	//if (NUM_VAL_PER_CANTON != 4) Error_Handler();
	//if (ADC_HALF_BUFFER != 10*2) Error_Handler();

	if ((1)) set_pwm_freq(100);
 801623e:	2064      	movs	r0, #100	; 0x64
 8016240:	f000 f834 	bl	80162ac <set_pwm_freq>
	CantonTimerHandles[1]=&htim1;
 8016244:	4b13      	ldr	r3, [pc, #76]	; (8016294 <StartCtrlTask+0x6c>)
 8016246:	4a14      	ldr	r2, [pc, #80]	; (8016298 <StartCtrlTask+0x70>)
 8016248:	605a      	str	r2, [r3, #4]
	CantonTimerHandles[2]=&htim2;
 801624a:	4b12      	ldr	r3, [pc, #72]	; (8016294 <StartCtrlTask+0x6c>)
 801624c:	4a13      	ldr	r2, [pc, #76]	; (801629c <StartCtrlTask+0x74>)
 801624e:	609a      	str	r2, [r3, #8]
	CantonTimerHandles[3]=&htim3;
 8016250:	4b10      	ldr	r3, [pc, #64]	; (8016294 <StartCtrlTask+0x6c>)
 8016252:	4a13      	ldr	r2, [pc, #76]	; (80162a0 <StartCtrlTask+0x78>)
 8016254:	60da      	str	r2, [r3, #12]



	//HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
	//HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8016256:	2100      	movs	r1, #0
 8016258:	480f      	ldr	r0, [pc, #60]	; (8016298 <StartCtrlTask+0x70>)
 801625a:	f7f1 ffe1 	bl	8008220 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 801625e:	2104      	movs	r1, #4
 8016260:	480d      	ldr	r0, [pc, #52]	; (8016298 <StartCtrlTask+0x70>)
 8016262:	f7f1 ffdd 	bl	8008220 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8016266:	2108      	movs	r1, #8
 8016268:	480b      	ldr	r0, [pc, #44]	; (8016298 <StartCtrlTask+0x70>)
 801626a:	f7f1 ffd9 	bl	8008220 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_4);
 801626e:	210c      	movs	r1, #12
 8016270:	4809      	ldr	r0, [pc, #36]	; (8016298 <StartCtrlTask+0x70>)
 8016272:	f7f1 ffd5 	bl	8008220 <HAL_TIM_PWM_Stop>
	// XX

	//HAL_TIM_Base_Start_IT(&htim8);
	HAL_TIM_Base_Start_IT(&htim1);
 8016276:	4808      	ldr	r0, [pc, #32]	; (8016298 <StartCtrlTask+0x70>)
 8016278:	f7f1 ff44 	bl	8008104 <HAL_TIM_Base_Start_IT>


	HAL_ADC_Start_DMA(&hadc1,(uint32_t *)train_adc_buf, nsmpl);
 801627c:	68fb      	ldr	r3, [r7, #12]
 801627e:	461a      	mov	r2, r3
 8016280:	4908      	ldr	r1, [pc, #32]	; (80162a4 <StartCtrlTask+0x7c>)
 8016282:	4809      	ldr	r0, [pc, #36]	; (80162a8 <StartCtrlTask+0x80>)
 8016284:	f7eb ff2e 	bl	80020e4 <HAL_ADC_Start_DMA>
	//HAL_ADC_Start_DMA(&hadc1,(uint32_t *)train_adc_buffer, NUM_ADC_SAMPLES);

	run_task_ctrl();
 8016288:	f000 f844 	bl	8016314 <run_task_ctrl>
}
 801628c:	bf00      	nop
 801628e:	3710      	adds	r7, #16
 8016290:	46bd      	mov	sp, r7
 8016292:	bd80      	pop	{r7, pc}
 8016294:	20005130 	.word	0x20005130
 8016298:	200064b4 	.word	0x200064b4
 801629c:	200067f0 	.word	0x200067f0
 80162a0:	20005fa8 	.word	0x20005fa8
 80162a4:	2000822c 	.word	0x2000822c
 80162a8:	20005fec 	.word	0x20005fec

080162ac <set_pwm_freq>:
int cur_freqhz = 350;
extern TIM_HandleTypeDef htim1;

// #define __HAL_TIM_SET_PRESCALER(__HANDLE__, __PRESC__)       ((__HANDLE__)->Instance->PSC = (__PRESC__))
void set_pwm_freq(int freqhz)
{
 80162ac:	b480      	push	{r7}
 80162ae:	b085      	sub	sp, #20
 80162b0:	af00      	add	r7, sp, #0
 80162b2:	6078      	str	r0, [r7, #4]
	// 12MHz / 200 -> 60000
	// 50Hz = 1200
	int ps = (60000/freqhz)-1;
 80162b4:	f64e 2260 	movw	r2, #60000	; 0xea60
 80162b8:	687b      	ldr	r3, [r7, #4]
 80162ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80162be:	3b01      	subs	r3, #1
 80162c0:	60fb      	str	r3, [r7, #12]
	if ((ps<1) || (ps>0xFFFF)) ps = 1200;
 80162c2:	68fb      	ldr	r3, [r7, #12]
 80162c4:	2b00      	cmp	r3, #0
 80162c6:	dd03      	ble.n	80162d0 <set_pwm_freq+0x24>
 80162c8:	68fb      	ldr	r3, [r7, #12]
 80162ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80162ce:	db02      	blt.n	80162d6 <set_pwm_freq+0x2a>
 80162d0:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 80162d4:	60fb      	str	r3, [r7, #12]
	ps = ps-1;
 80162d6:	68fb      	ldr	r3, [r7, #12]
 80162d8:	3b01      	subs	r3, #1
 80162da:	60fb      	str	r3, [r7, #12]
	cur_freqhz = 60000/(ps+1);
 80162dc:	68fb      	ldr	r3, [r7, #12]
 80162de:	3301      	adds	r3, #1
 80162e0:	f64e 2260 	movw	r2, #60000	; 0xea60
 80162e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80162e8:	4a07      	ldr	r2, [pc, #28]	; (8016308 <set_pwm_freq+0x5c>)
 80162ea:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_PRESCALER(&htim1, ps);
 80162ec:	4b07      	ldr	r3, [pc, #28]	; (801630c <set_pwm_freq+0x60>)
 80162ee:	681b      	ldr	r3, [r3, #0]
 80162f0:	68fa      	ldr	r2, [r7, #12]
 80162f2:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_PRESCALER(&htim8, ps);
 80162f4:	4b06      	ldr	r3, [pc, #24]	; (8016310 <set_pwm_freq+0x64>)
 80162f6:	681b      	ldr	r3, [r3, #0]
 80162f8:	68fa      	ldr	r2, [r7, #12]
 80162fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80162fc:	bf00      	nop
 80162fe:	3714      	adds	r7, #20
 8016300:	46bd      	mov	sp, r7
 8016302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016306:	4770      	bx	lr
 8016308:	20000478 	.word	0x20000478
 801630c:	200064b4 	.word	0x200064b4
 8016310:	20005a20 	.word	0x20005a20

08016314 <run_task_ctrl>:

#define USE_NOTIF_TIM 0


static void run_task_ctrl(void)
{
 8016314:	b580      	push	{r7, lr}
 8016316:	b084      	sub	sp, #16
 8016318:	af00      	add	r7, sp, #0

	//if ((0))   calibrate_bemf(); //XXXX
	for (;;) {
		uint32_t notif;
		xTaskNotifyWait(0, 0xFFFFFFFF, &notif, portMAX_DELAY);
 801631a:	463a      	mov	r2, r7
 801631c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016320:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8016324:	2000      	movs	r0, #0
 8016326:	f7f8 fee5 	bl	800f0f4 <xTaskNotifyWait>
		if ((1)) {
			int n = 0;
 801632a:	2300      	movs	r3, #0
 801632c:	60fb      	str	r3, [r7, #12]
			if (notif & NOTIF_NEW_ADC_1)  n = 1;
 801632e:	683b      	ldr	r3, [r7, #0]
 8016330:	f003 0301 	and.w	r3, r3, #1
 8016334:	2b00      	cmp	r3, #0
 8016336:	d001      	beq.n	801633c <run_task_ctrl+0x28>
 8016338:	2301      	movs	r3, #1
 801633a:	60fb      	str	r3, [r7, #12]
			if (notif & NOTIF_NEW_ADC_2)  n |= 2;
 801633c:	683b      	ldr	r3, [r7, #0]
 801633e:	f003 0302 	and.w	r3, r3, #2
 8016342:	2b00      	cmp	r3, #0
 8016344:	d003      	beq.n	801634e <run_task_ctrl+0x3a>
 8016346:	68fb      	ldr	r3, [r7, #12]
 8016348:	f043 0302 	orr.w	r3, r3, #2
 801634c:	60fb      	str	r3, [r7, #12]
			itm_debug2(DBG_LOWCTRL, "-----", (notif & NOTIF_TIM8) ? 1 : 0, n);
 801634e:	683b      	ldr	r3, [r7, #0]
 8016350:	089b      	lsrs	r3, r3, #2
 8016352:	f003 0201 	and.w	r2, r3, #1
 8016356:	68fb      	ldr	r3, [r7, #12]
 8016358:	4927      	ldr	r1, [pc, #156]	; (80163f8 <run_task_ctrl+0xe4>)
 801635a:	f44f 7080 	mov.w	r0, #256	; 0x100
 801635e:	f7ff ff47 	bl	80161f0 <itm_debug2>
		if (0==(notif & (NOTIF_NEW_ADC_1|NOTIF_NEW_ADC_2))) continue;
#endif
		//debug_info('G', 0, "HOP", 0, 0, 0);
		static uint32_t oldt = 0;
		static uint32_t t0 = 0;
		uint32_t t = HAL_GetTick();
 8016362:	f7eb fe4d 	bl	8002000 <HAL_GetTick>
 8016366:	60b8      	str	r0, [r7, #8]
		// XXX we should have a global t0
		if (!t0) t0 = t;
 8016368:	4b24      	ldr	r3, [pc, #144]	; (80163fc <run_task_ctrl+0xe8>)
 801636a:	681b      	ldr	r3, [r3, #0]
 801636c:	2b00      	cmp	r3, #0
 801636e:	d102      	bne.n	8016376 <run_task_ctrl+0x62>
 8016370:	4a22      	ldr	r2, [pc, #136]	; (80163fc <run_task_ctrl+0xe8>)
 8016372:	68bb      	ldr	r3, [r7, #8]
 8016374:	6013      	str	r3, [r2, #0]
		int32_t dt = (oldt) ? (t-oldt) : 1;
 8016376:	4b22      	ldr	r3, [pc, #136]	; (8016400 <run_task_ctrl+0xec>)
 8016378:	681b      	ldr	r3, [r3, #0]
 801637a:	2b00      	cmp	r3, #0
 801637c:	d004      	beq.n	8016388 <run_task_ctrl+0x74>
 801637e:	4b20      	ldr	r3, [pc, #128]	; (8016400 <run_task_ctrl+0xec>)
 8016380:	681b      	ldr	r3, [r3, #0]
 8016382:	68ba      	ldr	r2, [r7, #8]
 8016384:	1ad3      	subs	r3, r2, r3
 8016386:	e000      	b.n	801638a <run_task_ctrl+0x76>
 8016388:	2301      	movs	r3, #1
 801638a:	607b      	str	r3, [r7, #4]
		oldt = t;
 801638c:	4a1c      	ldr	r2, [pc, #112]	; (8016400 <run_task_ctrl+0xec>)
 801638e:	68bb      	ldr	r3, [r7, #8]
 8016390:	6013      	str	r3, [r2, #0]

		if ((1)) {
			itm_debug2(DBG_LOWCTRL, "ctick", notif, dt);
 8016392:	683b      	ldr	r3, [r7, #0]
 8016394:	461a      	mov	r2, r3
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	491a      	ldr	r1, [pc, #104]	; (8016404 <run_task_ctrl+0xf0>)
 801639a:	f44f 7080 	mov.w	r0, #256	; 0x100
 801639e:	f7ff ff27 	bl	80161f0 <itm_debug2>
		ina3221
		void spdctl_run_tick(uint32_t notif_flags, uint32_t tick, uint32_t dt);
		void msgsrv_tick(uint32_t notif_flags, uint32_t tick, uint32_t dt);
		*/

		bemf_tick(notif, t, dt);
 80163a2:	683b      	ldr	r3, [r7, #0]
 80163a4:	687a      	ldr	r2, [r7, #4]
 80163a6:	68b9      	ldr	r1, [r7, #8]
 80163a8:	4618      	mov	r0, r3
 80163aa:	f7fd f917 	bl	80135dc <bemf_tick>
		msgsrv_tick(notif, t, dt);
 80163ae:	683b      	ldr	r3, [r7, #0]
 80163b0:	687a      	ldr	r2, [r7, #4]
 80163b2:	68b9      	ldr	r1, [r7, #8]
 80163b4:	4618      	mov	r0, r3
 80163b6:	f7fe fec1 	bl	801513c <msgsrv_tick>
		spdctl_run_tick(notif, t, dt);
 80163ba:	683b      	ldr	r3, [r7, #0]
 80163bc:	687a      	ldr	r2, [r7, #4]
 80163be:	68b9      	ldr	r1, [r7, #8]
 80163c0:	4618      	mov	r0, r3
 80163c2:	f7ff fa77 	bl	80158b4 <spdctl_run_tick>
		canton_tick(notif, t, dt);
 80163c6:	683b      	ldr	r3, [r7, #0]
 80163c8:	687a      	ldr	r2, [r7, #4]
 80163ca:	68b9      	ldr	r1, [r7, #8]
 80163cc:	4618      	mov	r0, r3
 80163ce:	f7fc fd7b 	bl	8012ec8 <canton_tick>
#if USE_NOTIF_TIM
#else
		presdect_tick(notif, t, dt);
 80163d2:	683b      	ldr	r3, [r7, #0]
 80163d4:	687a      	ldr	r2, [r7, #4]
 80163d6:	68b9      	ldr	r1, [r7, #8]
 80163d8:	4618      	mov	r0, r3
 80163da:	f7fd fa61 	bl	80138a0 <presdect_tick>
#endif
		turnout_tick(notif, t, dt);
 80163de:	683b      	ldr	r3, [r7, #0]
 80163e0:	687a      	ldr	r2, [r7, #4]
 80163e2:	68b9      	ldr	r1, [r7, #8]
 80163e4:	4618      	mov	r0, r3
 80163e6:	f7fd fbb1 	bl	8013b4c <turnout_tick>
		ctrl_run_tick(notif, t, dt);
 80163ea:	683b      	ldr	r3, [r7, #0]
 80163ec:	687a      	ldr	r2, [r7, #4]
 80163ee:	68b9      	ldr	r1, [r7, #8]
 80163f0:	4618      	mov	r0, r3
 80163f2:	f7fc fa83 	bl	80128fc <ctrl_run_tick>
	for (;;) {
 80163f6:	e790      	b.n	801631a <run_task_ctrl+0x6>
 80163f8:	080174dc 	.word	0x080174dc
 80163fc:	200052d0 	.word	0x200052d0
 8016400:	200052d4 	.word	0x200052d4
 8016404:	080174e4 	.word	0x080174e4

08016408 <HAL_ADC_ConvCpltCallback>:
static int nhalf=0;
static int nfull=0;


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* AdcHandle)
{
 8016408:	b580      	push	{r7, lr}
 801640a:	b086      	sub	sp, #24
 801640c:	af02      	add	r7, sp, #8
 801640e:	6078      	str	r0, [r7, #4]
	nfull++;
 8016410:	4b0f      	ldr	r3, [pc, #60]	; (8016450 <HAL_ADC_ConvCpltCallback+0x48>)
 8016412:	681b      	ldr	r3, [r3, #0]
 8016414:	3301      	adds	r3, #1
 8016416:	4a0e      	ldr	r2, [pc, #56]	; (8016450 <HAL_ADC_ConvCpltCallback+0x48>)
 8016418:	6013      	str	r3, [r2, #0]
	BaseType_t higher=0;
 801641a:	2300      	movs	r3, #0
 801641c:	60fb      	str	r3, [r7, #12]
	if ((0)) itm_debug1(DBG_TIM, "conv/f", HAL_GetTick());
	xTaskNotifyFromISR(ctrlTaskHandle, NOTIF_NEW_ADC_2, eSetBits, &higher);
 801641e:	4b0d      	ldr	r3, [pc, #52]	; (8016454 <HAL_ADC_ConvCpltCallback+0x4c>)
 8016420:	6818      	ldr	r0, [r3, #0]
 8016422:	f107 030c 	add.w	r3, r7, #12
 8016426:	9300      	str	r3, [sp, #0]
 8016428:	2300      	movs	r3, #0
 801642a:	2201      	movs	r2, #1
 801642c:	2102      	movs	r1, #2
 801642e:	f7f8 febb 	bl	800f1a8 <xTaskGenericNotifyFromISR>
	portYIELD_FROM_ISR(higher);
 8016432:	68fb      	ldr	r3, [r7, #12]
 8016434:	2b00      	cmp	r3, #0
 8016436:	d007      	beq.n	8016448 <HAL_ADC_ConvCpltCallback+0x40>
 8016438:	4b07      	ldr	r3, [pc, #28]	; (8016458 <HAL_ADC_ConvCpltCallback+0x50>)
 801643a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801643e:	601a      	str	r2, [r3, #0]
 8016440:	f3bf 8f4f 	dsb	sy
 8016444:	f3bf 8f6f 	isb	sy
}
 8016448:	bf00      	nop
 801644a:	3710      	adds	r7, #16
 801644c:	46bd      	mov	sp, r7
 801644e:	bd80      	pop	{r7, pc}
 8016450:	200052cc 	.word	0x200052cc
 8016454:	20005fe8 	.word	0x20005fe8
 8016458:	e000ed04 	.word	0xe000ed04

0801645c <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 801645c:	b580      	push	{r7, lr}
 801645e:	b086      	sub	sp, #24
 8016460:	af02      	add	r7, sp, #8
 8016462:	6078      	str	r0, [r7, #4]
	nhalf++;
 8016464:	4b0f      	ldr	r3, [pc, #60]	; (80164a4 <HAL_ADC_ConvHalfCpltCallback+0x48>)
 8016466:	681b      	ldr	r3, [r3, #0]
 8016468:	3301      	adds	r3, #1
 801646a:	4a0e      	ldr	r2, [pc, #56]	; (80164a4 <HAL_ADC_ConvHalfCpltCallback+0x48>)
 801646c:	6013      	str	r3, [r2, #0]
	BaseType_t higher=0;
 801646e:	2300      	movs	r3, #0
 8016470:	60fb      	str	r3, [r7, #12]
	if ((0)) itm_debug1(DBG_TIM, "conv/h", HAL_GetTick());
	xTaskNotifyFromISR(ctrlTaskHandle, NOTIF_NEW_ADC_1, eSetBits, &higher);
 8016472:	4b0d      	ldr	r3, [pc, #52]	; (80164a8 <HAL_ADC_ConvHalfCpltCallback+0x4c>)
 8016474:	6818      	ldr	r0, [r3, #0]
 8016476:	f107 030c 	add.w	r3, r7, #12
 801647a:	9300      	str	r3, [sp, #0]
 801647c:	2300      	movs	r3, #0
 801647e:	2201      	movs	r2, #1
 8016480:	2101      	movs	r1, #1
 8016482:	f7f8 fe91 	bl	800f1a8 <xTaskGenericNotifyFromISR>
	portYIELD_FROM_ISR(higher);
 8016486:	68fb      	ldr	r3, [r7, #12]
 8016488:	2b00      	cmp	r3, #0
 801648a:	d007      	beq.n	801649c <HAL_ADC_ConvHalfCpltCallback+0x40>
 801648c:	4b07      	ldr	r3, [pc, #28]	; (80164ac <HAL_ADC_ConvHalfCpltCallback+0x50>)
 801648e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016492:	601a      	str	r2, [r3, #0]
 8016494:	f3bf 8f4f 	dsb	sy
 8016498:	f3bf 8f6f 	isb	sy
}
 801649c:	bf00      	nop
 801649e:	3710      	adds	r7, #16
 80164a0:	46bd      	mov	sp, r7
 80164a2:	bd80      	pop	{r7, pc}
 80164a4:	200052c8 	.word	0x200052c8
 80164a8:	20005fe8 	.word	0x20005fe8
 80164ac:	e000ed04 	.word	0xe000ed04

080164b0 <HAL_ADC_ErrorCallback>:
void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
	itm_debug1(DBG_ERR|DBG_TIM, "ADC ERR", 1);
}
void  HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80164b0:	b580      	push	{r7, lr}
 80164b2:	b082      	sub	sp, #8
 80164b4:	af00      	add	r7, sp, #0
 80164b6:	6078      	str	r0, [r7, #4]
	itm_debug1(DBG_ERR|DBG_TIM, "ADC ERR", 0);
 80164b8:	2200      	movs	r2, #0
 80164ba:	4904      	ldr	r1, [pc, #16]	; (80164cc <HAL_ADC_ErrorCallback+0x1c>)
 80164bc:	4804      	ldr	r0, [pc, #16]	; (80164d0 <HAL_ADC_ErrorCallback+0x20>)
 80164be:	f7ff fe7d 	bl	80161bc <itm_debug1>
}
 80164c2:	bf00      	nop
 80164c4:	3708      	adds	r7, #8
 80164c6:	46bd      	mov	sp, r7
 80164c8:	bd80      	pop	{r7, pc}
 80164ca:	bf00      	nop
 80164cc:	080174ec 	.word	0x080174ec
 80164d0:	80000001 	.word	0x80000001

080164d4 <i2c_ready>:

#endif
/// ----------------------------------

static void i2c_ready(int a)
{
 80164d4:	b480      	push	{r7}
 80164d6:	b083      	sub	sp, #12
 80164d8:	af00      	add	r7, sp, #0
 80164da:	6078      	str	r0, [r7, #4]

}
 80164dc:	bf00      	nop
 80164de:	370c      	adds	r7, #12
 80164e0:	46bd      	mov	sp, r7
 80164e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164e6:	4770      	bx	lr

080164e8 <I2C_Scan>:
static void I2C_Scan(void)
{
 80164e8:	b580      	push	{r7, lr}
 80164ea:	b082      	sub	sp, #8
 80164ec:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef res;
    for(uint16_t i = 0; i < 128; i++) {
 80164ee:	2300      	movs	r3, #0
 80164f0:	80fb      	strh	r3, [r7, #6]
 80164f2:	e013      	b.n	801651c <I2C_Scan+0x34>
        res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 80164f4:	88fb      	ldrh	r3, [r7, #6]
 80164f6:	005b      	lsls	r3, r3, #1
 80164f8:	b299      	uxth	r1, r3
 80164fa:	230a      	movs	r3, #10
 80164fc:	2201      	movs	r2, #1
 80164fe:	480b      	ldr	r0, [pc, #44]	; (801652c <I2C_Scan+0x44>)
 8016500:	f7ed fccc 	bl	8003e9c <HAL_I2C_IsDeviceReady>
 8016504:	4603      	mov	r3, r0
 8016506:	717b      	strb	r3, [r7, #5]
        if(res == HAL_OK) {
 8016508:	797b      	ldrb	r3, [r7, #5]
 801650a:	2b00      	cmp	r3, #0
 801650c:	d103      	bne.n	8016516 <I2C_Scan+0x2e>
        	i2c_ready(i);
 801650e:	88fb      	ldrh	r3, [r7, #6]
 8016510:	4618      	mov	r0, r3
 8016512:	f7ff ffdf 	bl	80164d4 <i2c_ready>
    for(uint16_t i = 0; i < 128; i++) {
 8016516:	88fb      	ldrh	r3, [r7, #6]
 8016518:	3301      	adds	r3, #1
 801651a:	80fb      	strh	r3, [r7, #6]
 801651c:	88fb      	ldrh	r3, [r7, #6]
 801651e:	2b7f      	cmp	r3, #127	; 0x7f
 8016520:	d9e8      	bls.n	80164f4 <I2C_Scan+0xc>
        } else {
        }
    }
}
 8016522:	bf00      	nop
 8016524:	3708      	adds	r7, #8
 8016526:	46bd      	mov	sp, r7
 8016528:	bd80      	pop	{r7, pc}
 801652a:	bf00      	nop
 801652c:	20005b00 	.word	0x20005b00

08016530 <StartUiTask>:
static int test_mode = 0;

*/

void StartUiTask(void *argument)
{
 8016530:	b580      	push	{r7, lr}
 8016532:	b084      	sub	sp, #16
 8016534:	af00      	add	r7, sp, #0
 8016536:	6078      	str	r0, [r7, #4]
	// init
	extern TIM_HandleTypeDef htim4;

	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8016538:	213c      	movs	r1, #60	; 0x3c
 801653a:	480b      	ldr	r0, [pc, #44]	; (8016568 <StartUiTask+0x38>)
 801653c:	f7f1 ff5a 	bl	80083f4 <HAL_TIM_Encoder_Start>

	//display_addr[0] = 0; //XXX
	//needsrefresh_mask = 0;
	for (int i=0; i<MAX_DISP; i++) {
 8016540:	2300      	movs	r3, #0
 8016542:	60fb      	str	r3, [r7, #12]
 8016544:	e006      	b.n	8016554 <StartUiTask+0x24>
		I2C_Scan();
 8016546:	f7ff ffcf 	bl	80164e8 <I2C_Scan>
		ssd1306_Init();
 801654a:	f7fa fbeb 	bl	8010d24 <ssd1306_Init>
	for (int i=0; i<MAX_DISP; i++) {
 801654e:	68fb      	ldr	r3, [r7, #12]
 8016550:	3301      	adds	r3, #1
 8016552:	60fb      	str	r3, [r7, #12]
 8016554:	68fb      	ldr	r3, [r7, #12]
 8016556:	2b00      	cmp	r3, #0
 8016558:	ddf5      	ble.n	8016546 <StartUiTask+0x16>
			itm_debug1(DBG_ERR|DBG_UI, "notif?", notif);
		}
		if (!(notif & NOTIF_TICKUI)) continue;
#else
		static TickType_t lasttick = 0;
		vTaskDelayUntil(&lasttick, 100);
 801655a:	2164      	movs	r1, #100	; 0x64
 801655c:	4803      	ldr	r0, [pc, #12]	; (801656c <StartUiTask+0x3c>)
 801655e:	f7f8 f85b 	bl	800e618 <vTaskDelayUntil>
		//lasttick = HAL_GetTick();

#endif
		ihm_runtick();
 8016562:	f7fb fe65 	bl	8012230 <ihm_runtick>
	for (;;) {
 8016566:	e7f8      	b.n	801655a <StartUiTask+0x2a>
 8016568:	20005abc 	.word	0x20005abc
 801656c:	200052d8 	.word	0x200052d8

08016570 <StartTxRxFrameTask>:

static void handleRxChars(frame_msg_t *m);
static void _send_bytes(uint8_t *b, int len);

void StartTxRxFrameTask(void *argument)
{
 8016570:	b580      	push	{r7, lr}
 8016572:	b090      	sub	sp, #64	; 0x40
 8016574:	af00      	add	r7, sp, #0
 8016576:	6078      	str	r0, [r7, #4]
	  MX_USB_DEVICE_Init();
 8016578:	f7f9 fea0 	bl	80102bc <MX_USB_DEVICE_Init>
		if ((0)) {
			osDelay(10000);
			continue;
		}
		uint8_t msg_prio;
		osStatus_t rc = osMessageQueueGet(frameQueueHandle, &m, &msg_prio, portMAX_DELAY);
 801657c:	4b27      	ldr	r3, [pc, #156]	; (801661c <StartTxRxFrameTask+0xac>)
 801657e:	6818      	ldr	r0, [r3, #0]
 8016580:	f107 0237 	add.w	r2, r7, #55	; 0x37
 8016584:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016588:	4925      	ldr	r1, [pc, #148]	; (8016620 <StartTxRxFrameTask+0xb0>)
 801658a:	f7f6 ff51 	bl	800d430 <osMessageQueueGet>
 801658e:	63f8      	str	r0, [r7, #60]	; 0x3c
		num_msg_get++;
 8016590:	4b24      	ldr	r3, [pc, #144]	; (8016624 <StartTxRxFrameTask+0xb4>)
 8016592:	681b      	ldr	r3, [r3, #0]
 8016594:	3301      	adds	r3, #1
 8016596:	4a23      	ldr	r2, [pc, #140]	; (8016624 <StartTxRxFrameTask+0xb4>)
 8016598:	6013      	str	r3, [r2, #0]
		if ((0)) flash_led();
        usbPollQueues();
 801659a:	f7fd ff65 	bl	8014468 <usbPollQueues>
        if (rc == osErrorTimeout) continue;
 801659e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80165a0:	f113 0f02 	cmn.w	r3, #2
 80165a4:	d038      	beq.n	8016618 <StartTxRxFrameTask+0xa8>
		if (rc != osOK) {
 80165a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80165a8:	2b00      	cmp	r3, #0
 80165aa:	d005      	beq.n	80165b8 <StartTxRxFrameTask+0x48>
			num_msg_get_err++;
 80165ac:	4b1e      	ldr	r3, [pc, #120]	; (8016628 <StartTxRxFrameTask+0xb8>)
 80165ae:	681b      	ldr	r3, [r3, #0]
 80165b0:	3301      	adds	r3, #1
 80165b2:	4a1d      	ldr	r2, [pc, #116]	; (8016628 <StartTxRxFrameTask+0xb8>)
 80165b4:	6013      	str	r3, [r2, #0]
			continue;
 80165b6:	e030      	b.n	801661a <StartTxRxFrameTask+0xaa>
		}
		if (m.t == RXFRAME_CHARS) {
 80165b8:	4b19      	ldr	r3, [pc, #100]	; (8016620 <StartTxRxFrameTask+0xb0>)
 80165ba:	781b      	ldrb	r3, [r3, #0]
 80165bc:	2bff      	cmp	r3, #255	; 0xff
 80165be:	d103      	bne.n	80165c8 <StartTxRxFrameTask+0x58>
			//debug_info('G', 0, "RXFRM", m.len,0, 0);
			handleRxChars(&m);
 80165c0:	4817      	ldr	r0, [pc, #92]	; (8016620 <StartTxRxFrameTask+0xb0>)
 80165c2:	f000 f89f 	bl	8016704 <handleRxChars>
			continue;
 80165c6:	e028      	b.n	801661a <StartTxRxFrameTask+0xaa>
		}
		if (m.t == TXFRAME_TYPE_STAT) {
 80165c8:	4b15      	ldr	r3, [pc, #84]	; (8016620 <StartTxRxFrameTask+0xb0>)
 80165ca:	781b      	ldrb	r3, [r3, #0]
 80165cc:	2b04      	cmp	r3, #4
 80165ce:	d11c      	bne.n	801660a <StartTxRxFrameTask+0x9a>
			uint32_t t = HAL_GetTick();   // XXX t0
 80165d0:	f7eb fd16 	bl	8002000 <HAL_GetTick>
 80165d4:	63b8      	str	r0, [r7, #56]	; 0x38
			uint8_t b[]="|_NG\000X";
 80165d6:	4a15      	ldr	r2, [pc, #84]	; (801662c <StartTxRxFrameTask+0xbc>)
 80165d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80165dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80165e0:	6018      	str	r0, [r3, #0]
 80165e2:	3304      	adds	r3, #4
 80165e4:	8019      	strh	r1, [r3, #0]
 80165e6:	3302      	adds	r3, #2
 80165e8:	0c0a      	lsrs	r2, r1, #16
 80165ea:	701a      	strb	r2, [r3, #0]
			//memcpy(b+6, &t, 4);
			_send_bytes(b, 6);
 80165ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80165f0:	2106      	movs	r1, #6
 80165f2:	4618      	mov	r0, r3
 80165f4:	f000 f822 	bl	801663c <_send_bytes>
			frame_send_stat(_send_bytes, t);
 80165f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80165fa:	480d      	ldr	r0, [pc, #52]	; (8016630 <StartTxRxFrameTask+0xc0>)
 80165fc:	f7fe fc75 	bl	8014eea <frame_send_stat>
			_send_bytes((uint8_t *)"|", 1);
 8016600:	2101      	movs	r1, #1
 8016602:	480c      	ldr	r0, [pc, #48]	; (8016634 <StartTxRxFrameTask+0xc4>)
 8016604:	f000 f81a 	bl	801663c <_send_bytes>
 8016608:	e7b8      	b.n	801657c <StartTxRxFrameTask+0xc>
			continue;
		}
		_send_bytes(m.frm, m.len);
 801660a:	4b05      	ldr	r3, [pc, #20]	; (8016620 <StartTxRxFrameTask+0xb0>)
 801660c:	785b      	ldrb	r3, [r3, #1]
 801660e:	4619      	mov	r1, r3
 8016610:	4809      	ldr	r0, [pc, #36]	; (8016638 <StartTxRxFrameTask+0xc8>)
 8016612:	f000 f813 	bl	801663c <_send_bytes>
 8016616:	e7b1      	b.n	801657c <StartTxRxFrameTask+0xc>
        if (rc == osErrorTimeout) continue;
 8016618:	bf00      	nop
	for (;;) {
 801661a:	e7af      	b.n	801657c <StartTxRxFrameTask+0xc>
 801661c:	20005afc 	.word	0x20005afc
 8016620:	200052ec 	.word	0x200052ec
 8016624:	200052dc 	.word	0x200052dc
 8016628:	200052e4 	.word	0x200052e4
 801662c:	080174f8 	.word	0x080174f8
 8016630:	0801663d 	.word	0x0801663d
 8016634:	080174f4 	.word	0x080174f4
 8016638:	200052ee 	.word	0x200052ee

0801663c <_send_bytes>:
	}
}
//void frame_send_stat(void(*cb)(uint8_t *d, int l));

static void _send_bytes(uint8_t *b, int len)
{
 801663c:	b580      	push	{r7, lr}
 801663e:	b084      	sub	sp, #16
 8016640:	af00      	add	r7, sp, #0
 8016642:	6078      	str	r0, [r7, #4]
 8016644:	6039      	str	r1, [r7, #0]
	for (;;) {
		uint8_t rc = CDC_Transmit_FS(b, len);
 8016646:	683b      	ldr	r3, [r7, #0]
 8016648:	b29b      	uxth	r3, r3
 801664a:	4619      	mov	r1, r3
 801664c:	6878      	ldr	r0, [r7, #4]
 801664e:	f7f9 feed 	bl	801042c <CDC_Transmit_FS>
 8016652:	4603      	mov	r3, r0
 8016654:	73fb      	strb	r3, [r7, #15]
		if (rc != USBD_BUSY) break;
 8016656:	7bfb      	ldrb	r3, [r7, #15]
 8016658:	2b01      	cmp	r3, #1
 801665a:	d103      	bne.n	8016664 <_send_bytes+0x28>
		osDelay(1);
 801665c:	2001      	movs	r0, #1
 801665e:	f7f6 fdbf 	bl	800d1e0 <osDelay>
	for (;;) {
 8016662:	e7f0      	b.n	8016646 <_send_bytes+0xa>
		if (rc != USBD_BUSY) break;
 8016664:	bf00      	nop
	}
}
 8016666:	bf00      	nop
 8016668:	3710      	adds	r7, #16
 801666a:	46bd      	mov	sp, r7
 801666c:	bd80      	pop	{r7, pc}
	...

08016670 <txframe_send>:

int txframe_queue_full = 0;

void txframe_send(frame_msg_t *m, int discardable)
{
 8016670:	b580      	push	{r7, lr}
 8016672:	b084      	sub	sp, #16
 8016674:	af00      	add	r7, sp, #0
 8016676:	6078      	str	r0, [r7, #4]
 8016678:	6039      	str	r1, [r7, #0]
	int s = osMessageQueueGetSpace(frameQueueHandle);
 801667a:	4b1f      	ldr	r3, [pc, #124]	; (80166f8 <txframe_send+0x88>)
 801667c:	681b      	ldr	r3, [r3, #0]
 801667e:	4618      	mov	r0, r3
 8016680:	f7f6 ff48 	bl	800d514 <osMessageQueueGetSpace>
 8016684:	4603      	mov	r3, r0
 8016686:	60fb      	str	r3, [r7, #12]
	if (s<=0) {
 8016688:	68fb      	ldr	r3, [r7, #12]
 801668a:	2b00      	cmp	r3, #0
 801668c:	dc07      	bgt.n	801669e <txframe_send+0x2e>
		txframe_queue_full++;
 801668e:	4b1b      	ldr	r3, [pc, #108]	; (80166fc <txframe_send+0x8c>)
 8016690:	681b      	ldr	r3, [r3, #0]
 8016692:	3301      	adds	r3, #1
 8016694:	4a19      	ldr	r2, [pc, #100]	; (80166fc <txframe_send+0x8c>)
 8016696:	6013      	str	r3, [r2, #0]
		if (discardable) return;
 8016698:	683b      	ldr	r3, [r7, #0]
 801669a:	2b00      	cmp	r3, #0
 801669c:	d127      	bne.n	80166ee <txframe_send+0x7e>
	}
	if ((s<=20) && discardable) {
 801669e:	68fb      	ldr	r3, [r7, #12]
 80166a0:	2b14      	cmp	r3, #20
 80166a2:	dc08      	bgt.n	80166b6 <txframe_send+0x46>
 80166a4:	683b      	ldr	r3, [r7, #0]
 80166a6:	2b00      	cmp	r3, #0
 80166a8:	d005      	beq.n	80166b6 <txframe_send+0x46>
		// we use a single queue, and no priority available with freertos
		// so we just keep some space for non discardable frames
		txframe_queue_full++;
 80166aa:	4b14      	ldr	r3, [pc, #80]	; (80166fc <txframe_send+0x8c>)
 80166ac:	681b      	ldr	r3, [r3, #0]
 80166ae:	3301      	adds	r3, #1
 80166b0:	4a12      	ldr	r2, [pc, #72]	; (80166fc <txframe_send+0x8c>)
 80166b2:	6013      	str	r3, [r2, #0]
		return;
 80166b4:	e01c      	b.n	80166f0 <txframe_send+0x80>
	}
	uint32_t t = discardable ? 0 : portMAX_DELAY;
 80166b6:	683b      	ldr	r3, [r7, #0]
 80166b8:	2b00      	cmp	r3, #0
 80166ba:	d001      	beq.n	80166c0 <txframe_send+0x50>
 80166bc:	2300      	movs	r3, #0
 80166be:	e001      	b.n	80166c4 <txframe_send+0x54>
 80166c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80166c4:	60bb      	str	r3, [r7, #8]
	if (m->len>FRM_MAX_LEN) m->len=FRM_MAX_LEN;
 80166c6:	687b      	ldr	r3, [r7, #4]
 80166c8:	785b      	ldrb	r3, [r3, #1]
 80166ca:	2b1f      	cmp	r3, #31
 80166cc:	d902      	bls.n	80166d4 <txframe_send+0x64>
 80166ce:	687b      	ldr	r3, [r7, #4]
 80166d0:	221f      	movs	r2, #31
 80166d2:	705a      	strb	r2, [r3, #1]
	num_msg_put++;
 80166d4:	4b0a      	ldr	r3, [pc, #40]	; (8016700 <txframe_send+0x90>)
 80166d6:	681b      	ldr	r3, [r3, #0]
 80166d8:	3301      	adds	r3, #1
 80166da:	4a09      	ldr	r2, [pc, #36]	; (8016700 <txframe_send+0x90>)
 80166dc:	6013      	str	r3, [r2, #0]
	osMessageQueuePut(frameQueueHandle, m, 0, t);
 80166de:	4b06      	ldr	r3, [pc, #24]	; (80166f8 <txframe_send+0x88>)
 80166e0:	6818      	ldr	r0, [r3, #0]
 80166e2:	68bb      	ldr	r3, [r7, #8]
 80166e4:	2200      	movs	r2, #0
 80166e6:	6879      	ldr	r1, [r7, #4]
 80166e8:	f7f6 fe2e 	bl	800d348 <osMessageQueuePut>
 80166ec:	e000      	b.n	80166f0 <txframe_send+0x80>
		if (discardable) return;
 80166ee:	bf00      	nop
}
 80166f0:	3710      	adds	r7, #16
 80166f2:	46bd      	mov	sp, r7
 80166f4:	bd80      	pop	{r7, pc}
 80166f6:	bf00      	nop
 80166f8:	20005afc 	.word	0x20005afc
 80166fc:	200052e8 	.word	0x200052e8
 8016700:	200052e0 	.word	0x200052e0

08016704 <handleRxChars>:

/* ------ RX ----- */

static void handleRxChars(frame_msg_t *m)
{
 8016704:	b580      	push	{r7, lr}
 8016706:	b08e      	sub	sp, #56	; 0x38
 8016708:	af00      	add	r7, sp, #0
 801670a:	6078      	str	r0, [r7, #4]
    frame_msg_t frresp;
	frresp.t = TXFRAME_TYPE_RESP;
 801670c:	2301      	movs	r3, #1
 801670e:	743b      	strb	r3, [r7, #16]
	/*
	 * int rlen = FRM_MAX_LEN;
	    	frame_process(cRxedChar,m.frm, &rlen);
	 */
	for (int i=0; i<m->len; i++) {
 8016710:	2300      	movs	r3, #0
 8016712:	637b      	str	r3, [r7, #52]	; 0x34
 8016714:	e01c      	b.n	8016750 <handleRxChars+0x4c>
		int rlen = FRM_MAX_LEN;
 8016716:	231f      	movs	r3, #31
 8016718:	60fb      	str	r3, [r7, #12]
		txrx_process_char(m->frm[i], frresp.frm, &rlen);
 801671a:	687a      	ldr	r2, [r7, #4]
 801671c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801671e:	4413      	add	r3, r2
 8016720:	3302      	adds	r3, #2
 8016722:	7818      	ldrb	r0, [r3, #0]
 8016724:	f107 020c 	add.w	r2, r7, #12
 8016728:	f107 0310 	add.w	r3, r7, #16
 801672c:	3302      	adds	r3, #2
 801672e:	4619      	mov	r1, r3
 8016730:	f7fd feae 	bl	8014490 <txrx_process_char>
		if (rlen>0) {
 8016734:	68fb      	ldr	r3, [r7, #12]
 8016736:	2b00      	cmp	r3, #0
 8016738:	dd07      	ble.n	801674a <handleRxChars+0x46>
			//debug_info('G', 0, "RESP", rlen,0, 0);
			// would deadlock if we send (non discardable) through the queue
			//txframe_send_response(&frresp, rlen);
			_send_bytes(frresp.frm, rlen);
 801673a:	68fa      	ldr	r2, [r7, #12]
 801673c:	f107 0310 	add.w	r3, r7, #16
 8016740:	3302      	adds	r3, #2
 8016742:	4611      	mov	r1, r2
 8016744:	4618      	mov	r0, r3
 8016746:	f7ff ff79 	bl	801663c <_send_bytes>
	for (int i=0; i<m->len; i++) {
 801674a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801674c:	3301      	adds	r3, #1
 801674e:	637b      	str	r3, [r7, #52]	; 0x34
 8016750:	687b      	ldr	r3, [r7, #4]
 8016752:	785b      	ldrb	r3, [r3, #1]
 8016754:	461a      	mov	r2, r3
 8016756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016758:	4293      	cmp	r3, r2
 801675a:	dbdc      	blt.n	8016716 <handleRxChars+0x12>
			//frresp.len = rlen;
			//_send_frm(&frresp);
		}
	}
}
 801675c:	bf00      	nop
 801675e:	3738      	adds	r7, #56	; 0x38
 8016760:	46bd      	mov	sp, r7
 8016762:	bd80      	pop	{r7, pc}

08016764 <impl_CDC_Receive_FS>:

extern USBD_HandleTypeDef hUsbDeviceFS;


int8_t impl_CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8016764:	b580      	push	{r7, lr}
 8016766:	b086      	sub	sp, #24
 8016768:	af00      	add	r7, sp, #0
 801676a:	6078      	str	r0, [r7, #4]
 801676c:	6039      	str	r1, [r7, #0]
	if ((0)) {
		sprintf(str, "[B%d]\r\n", *Len);
		CDC_Transmit_FS(str, strlen(str));
	}
	*/
	uint8_t *p = Buf;
 801676e:	687b      	ldr	r3, [r7, #4]
 8016770:	617b      	str	r3, [r7, #20]
	int32_t rlen = *Len;
 8016772:	683b      	ldr	r3, [r7, #0]
 8016774:	681b      	ldr	r3, [r3, #0]
 8016776:	613b      	str	r3, [r7, #16]
	for (;;) {
		//BaseType_t xHigherPriorityTaskWoken = pdFALSE;
		frrx.t = RXFRAME_CHARS;
 8016778:	4b18      	ldr	r3, [pc, #96]	; (80167dc <impl_CDC_Receive_FS+0x78>)
 801677a:	22ff      	movs	r2, #255	; 0xff
 801677c:	701a      	strb	r2, [r3, #0]
		int l = MIN(rlen, RXFRAME_CHARS);
 801677e:	693b      	ldr	r3, [r7, #16]
 8016780:	2bff      	cmp	r3, #255	; 0xff
 8016782:	bfa8      	it	ge
 8016784:	23ff      	movge	r3, #255	; 0xff
 8016786:	60fb      	str	r3, [r7, #12]
		memcpy(frrx.frm, p, l);
 8016788:	68fb      	ldr	r3, [r7, #12]
 801678a:	461a      	mov	r2, r3
 801678c:	6979      	ldr	r1, [r7, #20]
 801678e:	4814      	ldr	r0, [pc, #80]	; (80167e0 <impl_CDC_Receive_FS+0x7c>)
 8016790:	f000 fa9a 	bl	8016cc8 <memcpy>
		rlen -= l;
 8016794:	693a      	ldr	r2, [r7, #16]
 8016796:	68fb      	ldr	r3, [r7, #12]
 8016798:	1ad3      	subs	r3, r2, r3
 801679a:	613b      	str	r3, [r7, #16]
		p += l;
 801679c:	68fb      	ldr	r3, [r7, #12]
 801679e:	697a      	ldr	r2, [r7, #20]
 80167a0:	4413      	add	r3, r2
 80167a2:	617b      	str	r3, [r7, #20]
		frrx.len = l;
 80167a4:	68fb      	ldr	r3, [r7, #12]
 80167a6:	b2da      	uxtb	r2, r3
 80167a8:	4b0c      	ldr	r3, [pc, #48]	; (80167dc <impl_CDC_Receive_FS+0x78>)
 80167aa:	705a      	strb	r2, [r3, #1]
		osMessageQueuePut(frameQueueHandle, &frrx, 0, 0);
 80167ac:	4b0d      	ldr	r3, [pc, #52]	; (80167e4 <impl_CDC_Receive_FS+0x80>)
 80167ae:	6818      	ldr	r0, [r3, #0]
 80167b0:	2300      	movs	r3, #0
 80167b2:	2200      	movs	r2, #0
 80167b4:	4909      	ldr	r1, [pc, #36]	; (80167dc <impl_CDC_Receive_FS+0x78>)
 80167b6:	f7f6 fdc7 	bl	800d348 <osMessageQueuePut>
		if (rlen <= 0) break;
 80167ba:	693b      	ldr	r3, [r7, #16]
 80167bc:	2b00      	cmp	r3, #0
 80167be:	dd00      	ble.n	80167c2 <impl_CDC_Receive_FS+0x5e>
	for (;;) {
 80167c0:	e7da      	b.n	8016778 <impl_CDC_Receive_FS+0x14>
		if (rlen <= 0) break;
 80167c2:	bf00      	nop
	}

	//CDC_Transmit_FS(Buf, *Len); // ADD THIS LINE to echo back all incoming data

	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80167c4:	6879      	ldr	r1, [r7, #4]
 80167c6:	4808      	ldr	r0, [pc, #32]	; (80167e8 <impl_CDC_Receive_FS+0x84>)
 80167c8:	f7f5 fa80 	bl	800bccc <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80167cc:	4806      	ldr	r0, [pc, #24]	; (80167e8 <impl_CDC_Receive_FS+0x84>)
 80167ce:	f7f5 fac1 	bl	800bd54 <USBD_CDC_ReceivePacket>

	return (USBD_OK);
 80167d2:	2300      	movs	r3, #0
}
 80167d4:	4618      	mov	r0, r3
 80167d6:	3718      	adds	r7, #24
 80167d8:	46bd      	mov	sp, r7
 80167da:	bd80      	pop	{r7, pc}
 80167dc:	20005310 	.word	0x20005310
 80167e0:	20005312 	.word	0x20005312
 80167e4:	20005afc 	.word	0x20005afc
 80167e8:	20006954 	.word	0x20006954

080167ec <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80167ec:	b480      	push	{r7}
 80167ee:	b083      	sub	sp, #12
 80167f0:	af00      	add	r7, sp, #0
 80167f2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80167f4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80167f8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80167fc:	f003 0301 	and.w	r3, r3, #1
 8016800:	2b00      	cmp	r3, #0
 8016802:	d013      	beq.n	801682c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8016804:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8016808:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 801680c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8016810:	2b00      	cmp	r3, #0
 8016812:	d00b      	beq.n	801682c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8016814:	e000      	b.n	8016818 <ITM_SendChar+0x2c>
    {
      __NOP();
 8016816:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8016818:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 801681c:	681b      	ldr	r3, [r3, #0]
 801681e:	2b00      	cmp	r3, #0
 8016820:	d0f9      	beq.n	8016816 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8016822:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8016826:	687a      	ldr	r2, [r7, #4]
 8016828:	b2d2      	uxtb	r2, r2
 801682a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 801682c:	687b      	ldr	r3, [r7, #4]
}
 801682e:	4618      	mov	r0, r3
 8016830:	370c      	adds	r7, #12
 8016832:	46bd      	mov	sp, r7
 8016834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016838:	4770      	bx	lr
	...

0801683c <write_num>:




static void write_num(uint8_t *buf, uint32_t v, int ndigit)
{
 801683c:	b480      	push	{r7}
 801683e:	b085      	sub	sp, #20
 8016840:	af00      	add	r7, sp, #0
 8016842:	60f8      	str	r0, [r7, #12]
 8016844:	60b9      	str	r1, [r7, #8]
 8016846:	607a      	str	r2, [r7, #4]
	for (;ndigit>0; ndigit--) {
 8016848:	e01a      	b.n	8016880 <write_num+0x44>
		buf[ndigit-1] = '0'+ (v % 10);
 801684a:	68b9      	ldr	r1, [r7, #8]
 801684c:	4b11      	ldr	r3, [pc, #68]	; (8016894 <write_num+0x58>)
 801684e:	fba3 2301 	umull	r2, r3, r3, r1
 8016852:	08da      	lsrs	r2, r3, #3
 8016854:	4613      	mov	r3, r2
 8016856:	009b      	lsls	r3, r3, #2
 8016858:	4413      	add	r3, r2
 801685a:	005b      	lsls	r3, r3, #1
 801685c:	1aca      	subs	r2, r1, r3
 801685e:	b2d2      	uxtb	r2, r2
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	3b01      	subs	r3, #1
 8016864:	68f9      	ldr	r1, [r7, #12]
 8016866:	440b      	add	r3, r1
 8016868:	3230      	adds	r2, #48	; 0x30
 801686a:	b2d2      	uxtb	r2, r2
 801686c:	701a      	strb	r2, [r3, #0]
		v = v/10;
 801686e:	68bb      	ldr	r3, [r7, #8]
 8016870:	4a08      	ldr	r2, [pc, #32]	; (8016894 <write_num+0x58>)
 8016872:	fba2 2303 	umull	r2, r3, r2, r3
 8016876:	08db      	lsrs	r3, r3, #3
 8016878:	60bb      	str	r3, [r7, #8]
	for (;ndigit>0; ndigit--) {
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	3b01      	subs	r3, #1
 801687e:	607b      	str	r3, [r7, #4]
 8016880:	687b      	ldr	r3, [r7, #4]
 8016882:	2b00      	cmp	r3, #0
 8016884:	dce1      	bgt.n	801684a <write_num+0xe>
	}
}
 8016886:	bf00      	nop
 8016888:	3714      	adds	r7, #20
 801688a:	46bd      	mov	sp, r7
 801688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016890:	4770      	bx	lr
 8016892:	bf00      	nop
 8016894:	cccccccd 	.word	0xcccccccd

08016898 <_write>:

#ifndef TRAIN_SIMU
int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8016898:	b580      	push	{r7, lr}
 801689a:	b086      	sub	sp, #24
 801689c:	af00      	add	r7, sp, #0
 801689e:	60f8      	str	r0, [r7, #12]
 80168a0:	60b9      	str	r1, [r7, #8]
 80168a2:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i++)
 80168a4:	2300      	movs	r3, #0
 80168a6:	617b      	str	r3, [r7, #20]
 80168a8:	e009      	b.n	80168be <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 80168aa:	68bb      	ldr	r3, [r7, #8]
 80168ac:	1c5a      	adds	r2, r3, #1
 80168ae:	60ba      	str	r2, [r7, #8]
 80168b0:	781b      	ldrb	r3, [r3, #0]
 80168b2:	4618      	mov	r0, r3
 80168b4:	f7ff ff9a 	bl	80167ec <ITM_SendChar>
	for (int i = 0; i < len; i++)
 80168b8:	697b      	ldr	r3, [r7, #20]
 80168ba:	3301      	adds	r3, #1
 80168bc:	617b      	str	r3, [r7, #20]
 80168be:	697a      	ldr	r2, [r7, #20]
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	429a      	cmp	r2, r3
 80168c4:	dbf1      	blt.n	80168aa <_write+0x12>
	}
	return len;
 80168c6:	687b      	ldr	r3, [r7, #4]
}
 80168c8:	4618      	mov	r0, r3
 80168ca:	3718      	adds	r7, #24
 80168cc:	46bd      	mov	sp, r7
 80168ce:	bd80      	pop	{r7, pc}

080168d0 <_itm_debug3>:
#endif


void _itm_debug3(const char *msg, int v1, int v2, int v3, int n)
{
 80168d0:	b580      	push	{r7, lr}
 80168d2:	b096      	sub	sp, #88	; 0x58
 80168d4:	af00      	add	r7, sp, #0
 80168d6:	60f8      	str	r0, [r7, #12]
 80168d8:	60b9      	str	r1, [r7, #8]
 80168da:	607a      	str	r2, [r7, #4]
 80168dc:	603b      	str	r3, [r7, #0]
	uint8_t buf[64];
	memset(buf, 0, sizeof(buf));
 80168de:	f107 0314 	add.w	r3, r7, #20
 80168e2:	2240      	movs	r2, #64	; 0x40
 80168e4:	2100      	movs	r1, #0
 80168e6:	4618      	mov	r0, r3
 80168e8:	f000 f9f9 	bl	8016cde <memset>
	write_num(buf, HAL_GetTick(), 7);
 80168ec:	f7eb fb88 	bl	8002000 <HAL_GetTick>
 80168f0:	4601      	mov	r1, r0
 80168f2:	f107 0314 	add.w	r3, r7, #20
 80168f6:	2207      	movs	r2, #7
 80168f8:	4618      	mov	r0, r3
 80168fa:	f7ff ff9f 	bl	801683c <write_num>
	buf[7]=':';
 80168fe:	233a      	movs	r3, #58	; 0x3a
 8016900:	76fb      	strb	r3, [r7, #27]
	strncpy((char *)buf+8, msg, 12);
 8016902:	f107 0314 	add.w	r3, r7, #20
 8016906:	3308      	adds	r3, #8
 8016908:	220c      	movs	r2, #12
 801690a:	68f9      	ldr	r1, [r7, #12]
 801690c:	4618      	mov	r0, r3
 801690e:	f000 faa7 	bl	8016e60 <strncpy>
	uint8_t *p = buf+strlen((char *)buf);
 8016912:	f107 0314 	add.w	r3, r7, #20
 8016916:	4618      	mov	r0, r3
 8016918:	f7e9 fc64 	bl	80001e4 <strlen>
 801691c:	4602      	mov	r2, r0
 801691e:	f107 0314 	add.w	r3, r7, #20
 8016922:	4413      	add	r3, r2
 8016924:	657b      	str	r3, [r7, #84]	; 0x54
	if (!n--) goto done;
 8016926:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016928:	1e5a      	subs	r2, r3, #1
 801692a:	663a      	str	r2, [r7, #96]	; 0x60
 801692c:	2b00      	cmp	r3, #0
 801692e:	d03c      	beq.n	80169aa <_itm_debug3+0xda>
	*p = '/';
 8016930:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016932:	222f      	movs	r2, #47	; 0x2f
 8016934:	701a      	strb	r2, [r3, #0]
	itoa(v1, (char *)p+1, 10);
 8016936:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016938:	3301      	adds	r3, #1
 801693a:	220a      	movs	r2, #10
 801693c:	4619      	mov	r1, r3
 801693e:	68b8      	ldr	r0, [r7, #8]
 8016940:	f000 f9b0 	bl	8016ca4 <itoa>
	p = buf+strlen((char *)buf);
 8016944:	f107 0314 	add.w	r3, r7, #20
 8016948:	4618      	mov	r0, r3
 801694a:	f7e9 fc4b 	bl	80001e4 <strlen>
 801694e:	4602      	mov	r2, r0
 8016950:	f107 0314 	add.w	r3, r7, #20
 8016954:	4413      	add	r3, r2
 8016956:	657b      	str	r3, [r7, #84]	; 0x54
	if (!n--) goto done;
 8016958:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801695a:	1e5a      	subs	r2, r3, #1
 801695c:	663a      	str	r2, [r7, #96]	; 0x60
 801695e:	2b00      	cmp	r3, #0
 8016960:	d025      	beq.n	80169ae <_itm_debug3+0xde>
	*p = '/';
 8016962:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016964:	222f      	movs	r2, #47	; 0x2f
 8016966:	701a      	strb	r2, [r3, #0]
	itoa(v2, (char *)p+1, 10);
 8016968:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801696a:	3301      	adds	r3, #1
 801696c:	220a      	movs	r2, #10
 801696e:	4619      	mov	r1, r3
 8016970:	6878      	ldr	r0, [r7, #4]
 8016972:	f000 f997 	bl	8016ca4 <itoa>
	p = buf+strlen((char *)buf);
 8016976:	f107 0314 	add.w	r3, r7, #20
 801697a:	4618      	mov	r0, r3
 801697c:	f7e9 fc32 	bl	80001e4 <strlen>
 8016980:	4602      	mov	r2, r0
 8016982:	f107 0314 	add.w	r3, r7, #20
 8016986:	4413      	add	r3, r2
 8016988:	657b      	str	r3, [r7, #84]	; 0x54
	if (!n--) goto done;
 801698a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801698c:	1e5a      	subs	r2, r3, #1
 801698e:	663a      	str	r2, [r7, #96]	; 0x60
 8016990:	2b00      	cmp	r3, #0
 8016992:	d00e      	beq.n	80169b2 <_itm_debug3+0xe2>
	*p = '/';
 8016994:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016996:	222f      	movs	r2, #47	; 0x2f
 8016998:	701a      	strb	r2, [r3, #0]
	itoa(v3, (char *)p+1, 10);
 801699a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801699c:	3301      	adds	r3, #1
 801699e:	220a      	movs	r2, #10
 80169a0:	4619      	mov	r1, r3
 80169a2:	6838      	ldr	r0, [r7, #0]
 80169a4:	f000 f97e 	bl	8016ca4 <itoa>
 80169a8:	e004      	b.n	80169b4 <_itm_debug3+0xe4>
	if (!n--) goto done;
 80169aa:	bf00      	nop
 80169ac:	e002      	b.n	80169b4 <_itm_debug3+0xe4>
	if (!n--) goto done;
 80169ae:	bf00      	nop
 80169b0:	e000      	b.n	80169b4 <_itm_debug3+0xe4>
	if (!n--) goto done;
 80169b2:	bf00      	nop
done:
	p = buf+strlen((char *)buf);
 80169b4:	f107 0314 	add.w	r3, r7, #20
 80169b8:	4618      	mov	r0, r3
 80169ba:	f7e9 fc13 	bl	80001e4 <strlen>
 80169be:	4602      	mov	r2, r0
 80169c0:	f107 0314 	add.w	r3, r7, #20
 80169c4:	4413      	add	r3, r2
 80169c6:	657b      	str	r3, [r7, #84]	; 0x54
	*p = '\n';
 80169c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80169ca:	220a      	movs	r2, #10
 80169cc:	701a      	strb	r2, [r3, #0]
#ifndef TRAIN_SIMU
	_write(0, buf, strlen((char *)buf));
 80169ce:	f107 0314 	add.w	r3, r7, #20
 80169d2:	4618      	mov	r0, r3
 80169d4:	f7e9 fc06 	bl	80001e4 <strlen>
 80169d8:	4603      	mov	r3, r0
 80169da:	461a      	mov	r2, r3
 80169dc:	f107 0314 	add.w	r3, r7, #20
 80169e0:	4619      	mov	r1, r3
 80169e2:	2000      	movs	r0, #0
 80169e4:	f7ff ff58 	bl	8016898 <_write>
#else
    puts((char*)buf);
    //write(0, buf, strlen((char *)buf));
#endif
}
 80169e8:	bf00      	nop
 80169ea:	3758      	adds	r7, #88	; 0x58
 80169ec:	46bd      	mov	sp, r7
 80169ee:	bd80      	pop	{r7, pc}

080169f0 <itm_debug1>:
{
 80169f0:	b580      	push	{r7, lr}
 80169f2:	b086      	sub	sp, #24
 80169f4:	af02      	add	r7, sp, #8
 80169f6:	60f8      	str	r0, [r7, #12]
 80169f8:	60b9      	str	r1, [r7, #8]
 80169fa:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 80169fc:	4b08      	ldr	r3, [pc, #32]	; (8016a20 <itm_debug1+0x30>)
 80169fe:	681a      	ldr	r2, [r3, #0]
 8016a00:	68fb      	ldr	r3, [r7, #12]
 8016a02:	4013      	ands	r3, r2
 8016a04:	2b00      	cmp	r3, #0
 8016a06:	d007      	beq.n	8016a18 <itm_debug1+0x28>
 8016a08:	2301      	movs	r3, #1
 8016a0a:	9300      	str	r3, [sp, #0]
 8016a0c:	2300      	movs	r3, #0
 8016a0e:	2200      	movs	r2, #0
 8016a10:	6879      	ldr	r1, [r7, #4]
 8016a12:	68b8      	ldr	r0, [r7, #8]
 8016a14:	f7ff ff5c 	bl	80168d0 <_itm_debug3>
}
 8016a18:	bf00      	nop
 8016a1a:	3710      	adds	r7, #16
 8016a1c:	46bd      	mov	sp, r7
 8016a1e:	bd80      	pop	{r7, pc}
 8016a20:	2000047c 	.word	0x2000047c

08016a24 <mqf_len>:
	m->tail = 0;
	m->maxuse = 0;
}

int mqf_len(mqf_t *m)
{
 8016a24:	b580      	push	{r7, lr}
 8016a26:	b084      	sub	sp, #16
 8016a28:	af00      	add	r7, sp, #0
 8016a2a:	6078      	str	r0, [r7, #4]
	int l;
	if (m->head >= m->tail) {
 8016a2c:	687b      	ldr	r3, [r7, #4]
 8016a2e:	881b      	ldrh	r3, [r3, #0]
 8016a30:	b29a      	uxth	r2, r3
 8016a32:	687b      	ldr	r3, [r7, #4]
 8016a34:	885b      	ldrh	r3, [r3, #2]
 8016a36:	b29b      	uxth	r3, r3
 8016a38:	429a      	cmp	r2, r3
 8016a3a:	d309      	bcc.n	8016a50 <mqf_len+0x2c>
		l = (m->head - m->tail);
 8016a3c:	687b      	ldr	r3, [r7, #4]
 8016a3e:	881b      	ldrh	r3, [r3, #0]
 8016a40:	b29b      	uxth	r3, r3
 8016a42:	461a      	mov	r2, r3
 8016a44:	687b      	ldr	r3, [r7, #4]
 8016a46:	885b      	ldrh	r3, [r3, #2]
 8016a48:	b29b      	uxth	r3, r3
 8016a4a:	1ad3      	subs	r3, r2, r3
 8016a4c:	60fb      	str	r3, [r7, #12]
 8016a4e:	e00b      	b.n	8016a68 <mqf_len+0x44>
	} else   {
		l = m->num + m->head - m->tail;
 8016a50:	687b      	ldr	r3, [r7, #4]
 8016a52:	795b      	ldrb	r3, [r3, #5]
 8016a54:	461a      	mov	r2, r3
 8016a56:	687b      	ldr	r3, [r7, #4]
 8016a58:	881b      	ldrh	r3, [r3, #0]
 8016a5a:	b29b      	uxth	r3, r3
 8016a5c:	4413      	add	r3, r2
 8016a5e:	687a      	ldr	r2, [r7, #4]
 8016a60:	8852      	ldrh	r2, [r2, #2]
 8016a62:	b292      	uxth	r2, r2
 8016a64:	1a9b      	subs	r3, r3, r2
 8016a66:	60fb      	str	r3, [r7, #12]
	}
	if (l<0) {
 8016a68:	68fb      	ldr	r3, [r7, #12]
 8016a6a:	2b00      	cmp	r3, #0
 8016a6c:	da05      	bge.n	8016a7a <mqf_len+0x56>
		itm_debug1(DBG_MSG, "big pb", 1);
 8016a6e:	2201      	movs	r2, #1
 8016a70:	4904      	ldr	r1, [pc, #16]	; (8016a84 <mqf_len+0x60>)
 8016a72:	2002      	movs	r0, #2
 8016a74:	f7ff ffbc 	bl	80169f0 <itm_debug1>
		for (;;);
 8016a78:	e7fe      	b.n	8016a78 <mqf_len+0x54>
	}
	return l;
 8016a7a:	68fb      	ldr	r3, [r7, #12]
}
 8016a7c:	4618      	mov	r0, r3
 8016a7e:	3710      	adds	r7, #16
 8016a80:	46bd      	mov	sp, r7
 8016a82:	bd80      	pop	{r7, pc}
 8016a84:	08017500 	.word	0x08017500

08016a88 <mqf_qfull>:

void mqf_qfull(mqf_t *m, int t)
{
 8016a88:	b580      	push	{r7, lr}
 8016a8a:	b082      	sub	sp, #8
 8016a8c:	af00      	add	r7, sp, #0
 8016a8e:	6078      	str	r0, [r7, #4]
 8016a90:	6039      	str	r1, [r7, #0]
	itm_debug1(DBG_ERR|DBG_MSG, "w/full", 0);
 8016a92:	2200      	movs	r2, #0
 8016a94:	4902      	ldr	r1, [pc, #8]	; (8016aa0 <mqf_qfull+0x18>)
 8016a96:	4803      	ldr	r0, [pc, #12]	; (8016aa4 <mqf_qfull+0x1c>)
 8016a98:	f7ff ffaa 	bl	80169f0 <itm_debug1>
	for (;;) {
 8016a9c:	e7fe      	b.n	8016a9c <mqf_qfull+0x14>
 8016a9e:	bf00      	nop
 8016aa0:	08017508 	.word	0x08017508
 8016aa4:	80000002 	.word	0x80000002

08016aa8 <mqf_write>:

	}
}
int mqf_write(mqf_t *m, void *ptr)
{
 8016aa8:	b580      	push	{r7, lr}
 8016aaa:	b084      	sub	sp, #16
 8016aac:	af00      	add	r7, sp, #0
 8016aae:	6078      	str	r0, [r7, #4]
 8016ab0:	6039      	str	r1, [r7, #0]
	int l = mqf_len(m);
 8016ab2:	6878      	ldr	r0, [r7, #4]
 8016ab4:	f7ff ffb6 	bl	8016a24 <mqf_len>
 8016ab8:	60f8      	str	r0, [r7, #12]
	if (l<0) Error_Handler();
 8016aba:	68fb      	ldr	r3, [r7, #12]
 8016abc:	2b00      	cmp	r3, #0
 8016abe:	da01      	bge.n	8016ac4 <mqf_write+0x1c>
 8016ac0:	f7ea fcf2 	bl	80014a8 <Error_Handler>
	if (l > m->maxuse) m->maxuse = l;
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	799b      	ldrb	r3, [r3, #6]
 8016ac8:	461a      	mov	r2, r3
 8016aca:	68fb      	ldr	r3, [r7, #12]
 8016acc:	4293      	cmp	r3, r2
 8016ace:	dd03      	ble.n	8016ad8 <mqf_write+0x30>
 8016ad0:	68fb      	ldr	r3, [r7, #12]
 8016ad2:	b2da      	uxtb	r2, r3
 8016ad4:	687b      	ldr	r3, [r7, #4]
 8016ad6:	719a      	strb	r2, [r3, #6]

    if (m->num == l) {
 8016ad8:	687b      	ldr	r3, [r7, #4]
 8016ada:	795b      	ldrb	r3, [r3, #5]
 8016adc:	461a      	mov	r2, r3
 8016ade:	68fb      	ldr	r3, [r7, #12]
 8016ae0:	4293      	cmp	r3, r2
 8016ae2:	d10b      	bne.n	8016afc <mqf_write+0x54>
		itm_debug1(DBG_ERR|DBG_MSG, "w/full", 0);
 8016ae4:	2200      	movs	r2, #0
 8016ae6:	492a      	ldr	r1, [pc, #168]	; (8016b90 <mqf_write+0xe8>)
 8016ae8:	482a      	ldr	r0, [pc, #168]	; (8016b94 <mqf_write+0xec>)
 8016aea:	f7ff ff81 	bl	80169f0 <itm_debug1>
		mqf_qfull(m,0);
 8016aee:	2100      	movs	r1, #0
 8016af0:	6878      	ldr	r0, [r7, #4]
 8016af2:	f7ff ffc9 	bl	8016a88 <mqf_qfull>
        return -1;
 8016af6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016afa:	e045      	b.n	8016b88 <mqf_write+0xe0>
    }
    if (m->num-1 == l) {
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	795b      	ldrb	r3, [r3, #5]
 8016b00:	3b01      	subs	r3, #1
 8016b02:	68fa      	ldr	r2, [r7, #12]
 8016b04:	429a      	cmp	r2, r3
 8016b06:	d111      	bne.n	8016b2c <mqf_write+0x84>
    	itm_debug1(DBG_MSG, "w/full1", m->silentdrop);
 8016b08:	687b      	ldr	r3, [r7, #4]
 8016b0a:	79db      	ldrb	r3, [r3, #7]
 8016b0c:	461a      	mov	r2, r3
 8016b0e:	4922      	ldr	r1, [pc, #136]	; (8016b98 <mqf_write+0xf0>)
 8016b10:	2002      	movs	r0, #2
 8016b12:	f7ff ff6d 	bl	80169f0 <itm_debug1>
    	if (!m->silentdrop) mqf_qfull(m,1);
 8016b16:	687b      	ldr	r3, [r7, #4]
 8016b18:	79db      	ldrb	r3, [r3, #7]
 8016b1a:	2b00      	cmp	r3, #0
 8016b1c:	d103      	bne.n	8016b26 <mqf_write+0x7e>
 8016b1e:	2101      	movs	r1, #1
 8016b20:	6878      	ldr	r0, [r7, #4]
 8016b22:	f7ff ffb1 	bl	8016a88 <mqf_qfull>
        return -1;
 8016b26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016b2a:	e02d      	b.n	8016b88 <mqf_write+0xe0>
    }
	void *p = &(m->msgbuf[m->head*m->msgsiz]);
 8016b2c:	687b      	ldr	r3, [r7, #4]
 8016b2e:	689b      	ldr	r3, [r3, #8]
 8016b30:	687a      	ldr	r2, [r7, #4]
 8016b32:	8812      	ldrh	r2, [r2, #0]
 8016b34:	b292      	uxth	r2, r2
 8016b36:	4611      	mov	r1, r2
 8016b38:	687a      	ldr	r2, [r7, #4]
 8016b3a:	7912      	ldrb	r2, [r2, #4]
 8016b3c:	fb02 f201 	mul.w	r2, r2, r1
 8016b40:	4413      	add	r3, r2
 8016b42:	60bb      	str	r3, [r7, #8]
	memcpy(p, ptr, m->msgsiz);
 8016b44:	687b      	ldr	r3, [r7, #4]
 8016b46:	791b      	ldrb	r3, [r3, #4]
 8016b48:	461a      	mov	r2, r3
 8016b4a:	6839      	ldr	r1, [r7, #0]
 8016b4c:	68b8      	ldr	r0, [r7, #8]
 8016b4e:	f000 f8bb 	bl	8016cc8 <memcpy>
	//__barrier();
    if (m->head == m->num-1) {
 8016b52:	687b      	ldr	r3, [r7, #4]
 8016b54:	881b      	ldrh	r3, [r3, #0]
 8016b56:	b29b      	uxth	r3, r3
 8016b58:	461a      	mov	r2, r3
 8016b5a:	687b      	ldr	r3, [r7, #4]
 8016b5c:	795b      	ldrb	r3, [r3, #5]
 8016b5e:	3b01      	subs	r3, #1
 8016b60:	429a      	cmp	r2, r3
 8016b62:	d103      	bne.n	8016b6c <mqf_write+0xc4>
        m->head = 0;
 8016b64:	687b      	ldr	r3, [r7, #4]
 8016b66:	2200      	movs	r2, #0
 8016b68:	801a      	strh	r2, [r3, #0]
 8016b6a:	e00c      	b.n	8016b86 <mqf_write+0xde>
    } else {
        __sync_fetch_and_add(&(m->head), 1);
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	f3bf 8f5b 	dmb	ish
 8016b72:	e8d3 2f5f 	ldrexh	r2, [r3]
 8016b76:	f102 0201 	add.w	r2, r2, #1
 8016b7a:	e8c3 2f51 	strexh	r1, r2, [r3]
 8016b7e:	2900      	cmp	r1, #0
 8016b80:	d1f7      	bne.n	8016b72 <mqf_write+0xca>
 8016b82:	f3bf 8f5b 	dmb	ish
    }
	//AtomicInc(p->head);
	return 0;
 8016b86:	2300      	movs	r3, #0
}
 8016b88:	4618      	mov	r0, r3
 8016b8a:	3710      	adds	r7, #16
 8016b8c:	46bd      	mov	sp, r7
 8016b8e:	bd80      	pop	{r7, pc}
 8016b90:	08017508 	.word	0x08017508
 8016b94:	80000002 	.word	0x80000002
 8016b98:	08017510 	.word	0x08017510

08016b9c <mqf_read>:

int mqf_read(mqf_t *m, void *ptr)
{
 8016b9c:	b580      	push	{r7, lr}
 8016b9e:	b084      	sub	sp, #16
 8016ba0:	af00      	add	r7, sp, #0
 8016ba2:	6078      	str	r0, [r7, #4]
 8016ba4:	6039      	str	r1, [r7, #0]
	if (!mqf_len(m)) return -1;
 8016ba6:	6878      	ldr	r0, [r7, #4]
 8016ba8:	f7ff ff3c 	bl	8016a24 <mqf_len>
 8016bac:	4603      	mov	r3, r0
 8016bae:	2b00      	cmp	r3, #0
 8016bb0:	d102      	bne.n	8016bb8 <mqf_read+0x1c>
 8016bb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016bb6:	e02e      	b.n	8016c16 <mqf_read+0x7a>
    void *p = &(m->msgbuf[m->tail*m->msgsiz]);
 8016bb8:	687b      	ldr	r3, [r7, #4]
 8016bba:	689b      	ldr	r3, [r3, #8]
 8016bbc:	687a      	ldr	r2, [r7, #4]
 8016bbe:	8852      	ldrh	r2, [r2, #2]
 8016bc0:	b292      	uxth	r2, r2
 8016bc2:	4611      	mov	r1, r2
 8016bc4:	687a      	ldr	r2, [r7, #4]
 8016bc6:	7912      	ldrb	r2, [r2, #4]
 8016bc8:	fb02 f201 	mul.w	r2, r2, r1
 8016bcc:	4413      	add	r3, r2
 8016bce:	60fb      	str	r3, [r7, #12]
    memcpy(ptr, p, m->msgsiz);
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	791b      	ldrb	r3, [r3, #4]
 8016bd4:	461a      	mov	r2, r3
 8016bd6:	68f9      	ldr	r1, [r7, #12]
 8016bd8:	6838      	ldr	r0, [r7, #0]
 8016bda:	f000 f875 	bl	8016cc8 <memcpy>
    //__barrier();
    if (m->tail == m->num-1) {
 8016bde:	687b      	ldr	r3, [r7, #4]
 8016be0:	885b      	ldrh	r3, [r3, #2]
 8016be2:	b29b      	uxth	r3, r3
 8016be4:	461a      	mov	r2, r3
 8016be6:	687b      	ldr	r3, [r7, #4]
 8016be8:	795b      	ldrb	r3, [r3, #5]
 8016bea:	3b01      	subs	r3, #1
 8016bec:	429a      	cmp	r2, r3
 8016bee:	d103      	bne.n	8016bf8 <mqf_read+0x5c>
        m->tail = 0;
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	2200      	movs	r2, #0
 8016bf4:	805a      	strh	r2, [r3, #2]
 8016bf6:	e00d      	b.n	8016c14 <mqf_read+0x78>
    } else {
        __sync_fetch_and_add(&(m->tail), 1);
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	3302      	adds	r3, #2
 8016bfc:	f3bf 8f5b 	dmb	ish
 8016c00:	e8d3 2f5f 	ldrexh	r2, [r3]
 8016c04:	f102 0201 	add.w	r2, r2, #1
 8016c08:	e8c3 2f51 	strexh	r1, r2, [r3]
 8016c0c:	2900      	cmp	r1, #0
 8016c0e:	d1f7      	bne.n	8016c00 <mqf_read+0x64>
 8016c10:	f3bf 8f5b 	dmb	ish
    }
    return 0;
 8016c14:	2300      	movs	r3, #0
}
 8016c16:	4618      	mov	r0, r3
 8016c18:	3710      	adds	r7, #16
 8016c1a:	46bd      	mov	sp, r7
 8016c1c:	bd80      	pop	{r7, pc}
	...

08016c20 <__errno>:
 8016c20:	4b01      	ldr	r3, [pc, #4]	; (8016c28 <__errno+0x8>)
 8016c22:	6818      	ldr	r0, [r3, #0]
 8016c24:	4770      	bx	lr
 8016c26:	bf00      	nop
 8016c28:	20000480 	.word	0x20000480

08016c2c <__libc_init_array>:
 8016c2c:	b570      	push	{r4, r5, r6, lr}
 8016c2e:	4e0d      	ldr	r6, [pc, #52]	; (8016c64 <__libc_init_array+0x38>)
 8016c30:	4c0d      	ldr	r4, [pc, #52]	; (8016c68 <__libc_init_array+0x3c>)
 8016c32:	1ba4      	subs	r4, r4, r6
 8016c34:	10a4      	asrs	r4, r4, #2
 8016c36:	2500      	movs	r5, #0
 8016c38:	42a5      	cmp	r5, r4
 8016c3a:	d109      	bne.n	8016c50 <__libc_init_array+0x24>
 8016c3c:	4e0b      	ldr	r6, [pc, #44]	; (8016c6c <__libc_init_array+0x40>)
 8016c3e:	4c0c      	ldr	r4, [pc, #48]	; (8016c70 <__libc_init_array+0x44>)
 8016c40:	f000 f964 	bl	8016f0c <_init>
 8016c44:	1ba4      	subs	r4, r4, r6
 8016c46:	10a4      	asrs	r4, r4, #2
 8016c48:	2500      	movs	r5, #0
 8016c4a:	42a5      	cmp	r5, r4
 8016c4c:	d105      	bne.n	8016c5a <__libc_init_array+0x2e>
 8016c4e:	bd70      	pop	{r4, r5, r6, pc}
 8016c50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016c54:	4798      	blx	r3
 8016c56:	3501      	adds	r5, #1
 8016c58:	e7ee      	b.n	8016c38 <__libc_init_array+0xc>
 8016c5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016c5e:	4798      	blx	r3
 8016c60:	3501      	adds	r5, #1
 8016c62:	e7f2      	b.n	8016c4a <__libc_init_array+0x1e>
 8016c64:	08018e88 	.word	0x08018e88
 8016c68:	08018e88 	.word	0x08018e88
 8016c6c:	08018e88 	.word	0x08018e88
 8016c70:	08018e8c 	.word	0x08018e8c

08016c74 <__itoa>:
 8016c74:	1e93      	subs	r3, r2, #2
 8016c76:	2b22      	cmp	r3, #34	; 0x22
 8016c78:	b510      	push	{r4, lr}
 8016c7a:	460c      	mov	r4, r1
 8016c7c:	d904      	bls.n	8016c88 <__itoa+0x14>
 8016c7e:	2300      	movs	r3, #0
 8016c80:	700b      	strb	r3, [r1, #0]
 8016c82:	461c      	mov	r4, r3
 8016c84:	4620      	mov	r0, r4
 8016c86:	bd10      	pop	{r4, pc}
 8016c88:	2a0a      	cmp	r2, #10
 8016c8a:	d109      	bne.n	8016ca0 <__itoa+0x2c>
 8016c8c:	2800      	cmp	r0, #0
 8016c8e:	da07      	bge.n	8016ca0 <__itoa+0x2c>
 8016c90:	232d      	movs	r3, #45	; 0x2d
 8016c92:	700b      	strb	r3, [r1, #0]
 8016c94:	4240      	negs	r0, r0
 8016c96:	2101      	movs	r1, #1
 8016c98:	4421      	add	r1, r4
 8016c9a:	f000 f8f7 	bl	8016e8c <__utoa>
 8016c9e:	e7f1      	b.n	8016c84 <__itoa+0x10>
 8016ca0:	2100      	movs	r1, #0
 8016ca2:	e7f9      	b.n	8016c98 <__itoa+0x24>

08016ca4 <itoa>:
 8016ca4:	f7ff bfe6 	b.w	8016c74 <__itoa>

08016ca8 <malloc>:
 8016ca8:	4b02      	ldr	r3, [pc, #8]	; (8016cb4 <malloc+0xc>)
 8016caa:	4601      	mov	r1, r0
 8016cac:	6818      	ldr	r0, [r3, #0]
 8016cae:	f000 b86d 	b.w	8016d8c <_malloc_r>
 8016cb2:	bf00      	nop
 8016cb4:	20000480 	.word	0x20000480

08016cb8 <free>:
 8016cb8:	4b02      	ldr	r3, [pc, #8]	; (8016cc4 <free+0xc>)
 8016cba:	4601      	mov	r1, r0
 8016cbc:	6818      	ldr	r0, [r3, #0]
 8016cbe:	f000 b817 	b.w	8016cf0 <_free_r>
 8016cc2:	bf00      	nop
 8016cc4:	20000480 	.word	0x20000480

08016cc8 <memcpy>:
 8016cc8:	b510      	push	{r4, lr}
 8016cca:	1e43      	subs	r3, r0, #1
 8016ccc:	440a      	add	r2, r1
 8016cce:	4291      	cmp	r1, r2
 8016cd0:	d100      	bne.n	8016cd4 <memcpy+0xc>
 8016cd2:	bd10      	pop	{r4, pc}
 8016cd4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016cd8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016cdc:	e7f7      	b.n	8016cce <memcpy+0x6>

08016cde <memset>:
 8016cde:	4402      	add	r2, r0
 8016ce0:	4603      	mov	r3, r0
 8016ce2:	4293      	cmp	r3, r2
 8016ce4:	d100      	bne.n	8016ce8 <memset+0xa>
 8016ce6:	4770      	bx	lr
 8016ce8:	f803 1b01 	strb.w	r1, [r3], #1
 8016cec:	e7f9      	b.n	8016ce2 <memset+0x4>
	...

08016cf0 <_free_r>:
 8016cf0:	b538      	push	{r3, r4, r5, lr}
 8016cf2:	4605      	mov	r5, r0
 8016cf4:	2900      	cmp	r1, #0
 8016cf6:	d045      	beq.n	8016d84 <_free_r+0x94>
 8016cf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016cfc:	1f0c      	subs	r4, r1, #4
 8016cfe:	2b00      	cmp	r3, #0
 8016d00:	bfb8      	it	lt
 8016d02:	18e4      	addlt	r4, r4, r3
 8016d04:	f000 f900 	bl	8016f08 <__malloc_lock>
 8016d08:	4a1f      	ldr	r2, [pc, #124]	; (8016d88 <_free_r+0x98>)
 8016d0a:	6813      	ldr	r3, [r2, #0]
 8016d0c:	4610      	mov	r0, r2
 8016d0e:	b933      	cbnz	r3, 8016d1e <_free_r+0x2e>
 8016d10:	6063      	str	r3, [r4, #4]
 8016d12:	6014      	str	r4, [r2, #0]
 8016d14:	4628      	mov	r0, r5
 8016d16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016d1a:	f000 b8f6 	b.w	8016f0a <__malloc_unlock>
 8016d1e:	42a3      	cmp	r3, r4
 8016d20:	d90c      	bls.n	8016d3c <_free_r+0x4c>
 8016d22:	6821      	ldr	r1, [r4, #0]
 8016d24:	1862      	adds	r2, r4, r1
 8016d26:	4293      	cmp	r3, r2
 8016d28:	bf04      	itt	eq
 8016d2a:	681a      	ldreq	r2, [r3, #0]
 8016d2c:	685b      	ldreq	r3, [r3, #4]
 8016d2e:	6063      	str	r3, [r4, #4]
 8016d30:	bf04      	itt	eq
 8016d32:	1852      	addeq	r2, r2, r1
 8016d34:	6022      	streq	r2, [r4, #0]
 8016d36:	6004      	str	r4, [r0, #0]
 8016d38:	e7ec      	b.n	8016d14 <_free_r+0x24>
 8016d3a:	4613      	mov	r3, r2
 8016d3c:	685a      	ldr	r2, [r3, #4]
 8016d3e:	b10a      	cbz	r2, 8016d44 <_free_r+0x54>
 8016d40:	42a2      	cmp	r2, r4
 8016d42:	d9fa      	bls.n	8016d3a <_free_r+0x4a>
 8016d44:	6819      	ldr	r1, [r3, #0]
 8016d46:	1858      	adds	r0, r3, r1
 8016d48:	42a0      	cmp	r0, r4
 8016d4a:	d10b      	bne.n	8016d64 <_free_r+0x74>
 8016d4c:	6820      	ldr	r0, [r4, #0]
 8016d4e:	4401      	add	r1, r0
 8016d50:	1858      	adds	r0, r3, r1
 8016d52:	4282      	cmp	r2, r0
 8016d54:	6019      	str	r1, [r3, #0]
 8016d56:	d1dd      	bne.n	8016d14 <_free_r+0x24>
 8016d58:	6810      	ldr	r0, [r2, #0]
 8016d5a:	6852      	ldr	r2, [r2, #4]
 8016d5c:	605a      	str	r2, [r3, #4]
 8016d5e:	4401      	add	r1, r0
 8016d60:	6019      	str	r1, [r3, #0]
 8016d62:	e7d7      	b.n	8016d14 <_free_r+0x24>
 8016d64:	d902      	bls.n	8016d6c <_free_r+0x7c>
 8016d66:	230c      	movs	r3, #12
 8016d68:	602b      	str	r3, [r5, #0]
 8016d6a:	e7d3      	b.n	8016d14 <_free_r+0x24>
 8016d6c:	6820      	ldr	r0, [r4, #0]
 8016d6e:	1821      	adds	r1, r4, r0
 8016d70:	428a      	cmp	r2, r1
 8016d72:	bf04      	itt	eq
 8016d74:	6811      	ldreq	r1, [r2, #0]
 8016d76:	6852      	ldreq	r2, [r2, #4]
 8016d78:	6062      	str	r2, [r4, #4]
 8016d7a:	bf04      	itt	eq
 8016d7c:	1809      	addeq	r1, r1, r0
 8016d7e:	6021      	streq	r1, [r4, #0]
 8016d80:	605c      	str	r4, [r3, #4]
 8016d82:	e7c7      	b.n	8016d14 <_free_r+0x24>
 8016d84:	bd38      	pop	{r3, r4, r5, pc}
 8016d86:	bf00      	nop
 8016d88:	20005334 	.word	0x20005334

08016d8c <_malloc_r>:
 8016d8c:	b570      	push	{r4, r5, r6, lr}
 8016d8e:	1ccd      	adds	r5, r1, #3
 8016d90:	f025 0503 	bic.w	r5, r5, #3
 8016d94:	3508      	adds	r5, #8
 8016d96:	2d0c      	cmp	r5, #12
 8016d98:	bf38      	it	cc
 8016d9a:	250c      	movcc	r5, #12
 8016d9c:	2d00      	cmp	r5, #0
 8016d9e:	4606      	mov	r6, r0
 8016da0:	db01      	blt.n	8016da6 <_malloc_r+0x1a>
 8016da2:	42a9      	cmp	r1, r5
 8016da4:	d903      	bls.n	8016dae <_malloc_r+0x22>
 8016da6:	230c      	movs	r3, #12
 8016da8:	6033      	str	r3, [r6, #0]
 8016daa:	2000      	movs	r0, #0
 8016dac:	bd70      	pop	{r4, r5, r6, pc}
 8016dae:	f000 f8ab 	bl	8016f08 <__malloc_lock>
 8016db2:	4a21      	ldr	r2, [pc, #132]	; (8016e38 <_malloc_r+0xac>)
 8016db4:	6814      	ldr	r4, [r2, #0]
 8016db6:	4621      	mov	r1, r4
 8016db8:	b991      	cbnz	r1, 8016de0 <_malloc_r+0x54>
 8016dba:	4c20      	ldr	r4, [pc, #128]	; (8016e3c <_malloc_r+0xb0>)
 8016dbc:	6823      	ldr	r3, [r4, #0]
 8016dbe:	b91b      	cbnz	r3, 8016dc8 <_malloc_r+0x3c>
 8016dc0:	4630      	mov	r0, r6
 8016dc2:	f000 f83d 	bl	8016e40 <_sbrk_r>
 8016dc6:	6020      	str	r0, [r4, #0]
 8016dc8:	4629      	mov	r1, r5
 8016dca:	4630      	mov	r0, r6
 8016dcc:	f000 f838 	bl	8016e40 <_sbrk_r>
 8016dd0:	1c43      	adds	r3, r0, #1
 8016dd2:	d124      	bne.n	8016e1e <_malloc_r+0x92>
 8016dd4:	230c      	movs	r3, #12
 8016dd6:	6033      	str	r3, [r6, #0]
 8016dd8:	4630      	mov	r0, r6
 8016dda:	f000 f896 	bl	8016f0a <__malloc_unlock>
 8016dde:	e7e4      	b.n	8016daa <_malloc_r+0x1e>
 8016de0:	680b      	ldr	r3, [r1, #0]
 8016de2:	1b5b      	subs	r3, r3, r5
 8016de4:	d418      	bmi.n	8016e18 <_malloc_r+0x8c>
 8016de6:	2b0b      	cmp	r3, #11
 8016de8:	d90f      	bls.n	8016e0a <_malloc_r+0x7e>
 8016dea:	600b      	str	r3, [r1, #0]
 8016dec:	50cd      	str	r5, [r1, r3]
 8016dee:	18cc      	adds	r4, r1, r3
 8016df0:	4630      	mov	r0, r6
 8016df2:	f000 f88a 	bl	8016f0a <__malloc_unlock>
 8016df6:	f104 000b 	add.w	r0, r4, #11
 8016dfa:	1d23      	adds	r3, r4, #4
 8016dfc:	f020 0007 	bic.w	r0, r0, #7
 8016e00:	1ac3      	subs	r3, r0, r3
 8016e02:	d0d3      	beq.n	8016dac <_malloc_r+0x20>
 8016e04:	425a      	negs	r2, r3
 8016e06:	50e2      	str	r2, [r4, r3]
 8016e08:	e7d0      	b.n	8016dac <_malloc_r+0x20>
 8016e0a:	428c      	cmp	r4, r1
 8016e0c:	684b      	ldr	r3, [r1, #4]
 8016e0e:	bf16      	itet	ne
 8016e10:	6063      	strne	r3, [r4, #4]
 8016e12:	6013      	streq	r3, [r2, #0]
 8016e14:	460c      	movne	r4, r1
 8016e16:	e7eb      	b.n	8016df0 <_malloc_r+0x64>
 8016e18:	460c      	mov	r4, r1
 8016e1a:	6849      	ldr	r1, [r1, #4]
 8016e1c:	e7cc      	b.n	8016db8 <_malloc_r+0x2c>
 8016e1e:	1cc4      	adds	r4, r0, #3
 8016e20:	f024 0403 	bic.w	r4, r4, #3
 8016e24:	42a0      	cmp	r0, r4
 8016e26:	d005      	beq.n	8016e34 <_malloc_r+0xa8>
 8016e28:	1a21      	subs	r1, r4, r0
 8016e2a:	4630      	mov	r0, r6
 8016e2c:	f000 f808 	bl	8016e40 <_sbrk_r>
 8016e30:	3001      	adds	r0, #1
 8016e32:	d0cf      	beq.n	8016dd4 <_malloc_r+0x48>
 8016e34:	6025      	str	r5, [r4, #0]
 8016e36:	e7db      	b.n	8016df0 <_malloc_r+0x64>
 8016e38:	20005334 	.word	0x20005334
 8016e3c:	20005338 	.word	0x20005338

08016e40 <_sbrk_r>:
 8016e40:	b538      	push	{r3, r4, r5, lr}
 8016e42:	4c06      	ldr	r4, [pc, #24]	; (8016e5c <_sbrk_r+0x1c>)
 8016e44:	2300      	movs	r3, #0
 8016e46:	4605      	mov	r5, r0
 8016e48:	4608      	mov	r0, r1
 8016e4a:	6023      	str	r3, [r4, #0]
 8016e4c:	f7eb f82c 	bl	8001ea8 <_sbrk>
 8016e50:	1c43      	adds	r3, r0, #1
 8016e52:	d102      	bne.n	8016e5a <_sbrk_r+0x1a>
 8016e54:	6823      	ldr	r3, [r4, #0]
 8016e56:	b103      	cbz	r3, 8016e5a <_sbrk_r+0x1a>
 8016e58:	602b      	str	r3, [r5, #0]
 8016e5a:	bd38      	pop	{r3, r4, r5, pc}
 8016e5c:	20008618 	.word	0x20008618

08016e60 <strncpy>:
 8016e60:	b570      	push	{r4, r5, r6, lr}
 8016e62:	3901      	subs	r1, #1
 8016e64:	4604      	mov	r4, r0
 8016e66:	b902      	cbnz	r2, 8016e6a <strncpy+0xa>
 8016e68:	bd70      	pop	{r4, r5, r6, pc}
 8016e6a:	4623      	mov	r3, r4
 8016e6c:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8016e70:	f803 5b01 	strb.w	r5, [r3], #1
 8016e74:	1e56      	subs	r6, r2, #1
 8016e76:	b92d      	cbnz	r5, 8016e84 <strncpy+0x24>
 8016e78:	4414      	add	r4, r2
 8016e7a:	42a3      	cmp	r3, r4
 8016e7c:	d0f4      	beq.n	8016e68 <strncpy+0x8>
 8016e7e:	f803 5b01 	strb.w	r5, [r3], #1
 8016e82:	e7fa      	b.n	8016e7a <strncpy+0x1a>
 8016e84:	461c      	mov	r4, r3
 8016e86:	4632      	mov	r2, r6
 8016e88:	e7ed      	b.n	8016e66 <strncpy+0x6>
	...

08016e8c <__utoa>:
 8016e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016e8e:	4b1d      	ldr	r3, [pc, #116]	; (8016f04 <__utoa+0x78>)
 8016e90:	b08b      	sub	sp, #44	; 0x2c
 8016e92:	4605      	mov	r5, r0
 8016e94:	460c      	mov	r4, r1
 8016e96:	466e      	mov	r6, sp
 8016e98:	f103 0c20 	add.w	ip, r3, #32
 8016e9c:	6818      	ldr	r0, [r3, #0]
 8016e9e:	6859      	ldr	r1, [r3, #4]
 8016ea0:	4637      	mov	r7, r6
 8016ea2:	c703      	stmia	r7!, {r0, r1}
 8016ea4:	3308      	adds	r3, #8
 8016ea6:	4563      	cmp	r3, ip
 8016ea8:	463e      	mov	r6, r7
 8016eaa:	d1f7      	bne.n	8016e9c <__utoa+0x10>
 8016eac:	6818      	ldr	r0, [r3, #0]
 8016eae:	791b      	ldrb	r3, [r3, #4]
 8016eb0:	713b      	strb	r3, [r7, #4]
 8016eb2:	1e93      	subs	r3, r2, #2
 8016eb4:	2b22      	cmp	r3, #34	; 0x22
 8016eb6:	6038      	str	r0, [r7, #0]
 8016eb8:	f04f 0300 	mov.w	r3, #0
 8016ebc:	d904      	bls.n	8016ec8 <__utoa+0x3c>
 8016ebe:	7023      	strb	r3, [r4, #0]
 8016ec0:	461c      	mov	r4, r3
 8016ec2:	4620      	mov	r0, r4
 8016ec4:	b00b      	add	sp, #44	; 0x2c
 8016ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ec8:	1e66      	subs	r6, r4, #1
 8016eca:	fbb5 f0f2 	udiv	r0, r5, r2
 8016ece:	af0a      	add	r7, sp, #40	; 0x28
 8016ed0:	fb02 5510 	mls	r5, r2, r0, r5
 8016ed4:	443d      	add	r5, r7
 8016ed6:	1c59      	adds	r1, r3, #1
 8016ed8:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8016edc:	f806 5f01 	strb.w	r5, [r6, #1]!
 8016ee0:	4605      	mov	r5, r0
 8016ee2:	b968      	cbnz	r0, 8016f00 <__utoa+0x74>
 8016ee4:	5460      	strb	r0, [r4, r1]
 8016ee6:	4423      	add	r3, r4
 8016ee8:	4622      	mov	r2, r4
 8016eea:	1b19      	subs	r1, r3, r4
 8016eec:	1b10      	subs	r0, r2, r4
 8016eee:	4281      	cmp	r1, r0
 8016ef0:	dde7      	ble.n	8016ec2 <__utoa+0x36>
 8016ef2:	7811      	ldrb	r1, [r2, #0]
 8016ef4:	7818      	ldrb	r0, [r3, #0]
 8016ef6:	f802 0b01 	strb.w	r0, [r2], #1
 8016efa:	f803 1901 	strb.w	r1, [r3], #-1
 8016efe:	e7f4      	b.n	8016eea <__utoa+0x5e>
 8016f00:	460b      	mov	r3, r1
 8016f02:	e7e2      	b.n	8016eca <__utoa+0x3e>
 8016f04:	08018df8 	.word	0x08018df8

08016f08 <__malloc_lock>:
 8016f08:	4770      	bx	lr

08016f0a <__malloc_unlock>:
 8016f0a:	4770      	bx	lr

08016f0c <_init>:
 8016f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f0e:	bf00      	nop
 8016f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016f12:	bc08      	pop	{r3}
 8016f14:	469e      	mov	lr, r3
 8016f16:	4770      	bx	lr

08016f18 <_fini>:
 8016f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f1a:	bf00      	nop
 8016f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016f1e:	bc08      	pop	{r3}
 8016f20:	469e      	mov	lr, r3
 8016f22:	4770      	bx	lr
