
stm32f407VETx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001918c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000028e8  0801931c  0801931c  0002931c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801bc04  0801bc04  0003060c  2**0
                  CONTENTS
  4 .ARM          00000008  0801bc04  0801bc04  0002bc04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801bc0c  0801bc0c  0003060c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801bc0c  0801bc0c  0002bc0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801bc10  0801bc10  0002bc10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000060c  20000000  0801bc14  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008b38  20000610  0801c220  00030610  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20009148  0801c220  00039148  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003060c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004c37d  00000000  00000000  0003063c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000946a  00000000  00000000  0007c9b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002a78  00000000  00000000  00085e28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000028c8  00000000  00000000  000888a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003067c  00000000  00000000  0008b168  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00032e31  00000000  00000000  000bb7e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ea3f3  00000000  00000000  000ee615  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001d8a08  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000afac  00000000  00000000  001d8a84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000610 	.word	0x20000610
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08019304 	.word	0x08019304

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000614 	.word	0x20000614
 80001cc:	08019304 	.word	0x08019304

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr

080001f4 <__aeabi_uldivmod>:
 80001f4:	b953      	cbnz	r3, 800020c <__aeabi_uldivmod+0x18>
 80001f6:	b94a      	cbnz	r2, 800020c <__aeabi_uldivmod+0x18>
 80001f8:	2900      	cmp	r1, #0
 80001fa:	bf08      	it	eq
 80001fc:	2800      	cmpeq	r0, #0
 80001fe:	bf1c      	itt	ne
 8000200:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000204:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000208:	f000 b972 	b.w	80004f0 <__aeabi_idiv0>
 800020c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000210:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000214:	f000 f806 	bl	8000224 <__udivmoddi4>
 8000218:	f8dd e004 	ldr.w	lr, [sp, #4]
 800021c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000220:	b004      	add	sp, #16
 8000222:	4770      	bx	lr

08000224 <__udivmoddi4>:
 8000224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000228:	9e08      	ldr	r6, [sp, #32]
 800022a:	4604      	mov	r4, r0
 800022c:	4688      	mov	r8, r1
 800022e:	2b00      	cmp	r3, #0
 8000230:	d14b      	bne.n	80002ca <__udivmoddi4+0xa6>
 8000232:	428a      	cmp	r2, r1
 8000234:	4615      	mov	r5, r2
 8000236:	d967      	bls.n	8000308 <__udivmoddi4+0xe4>
 8000238:	fab2 f282 	clz	r2, r2
 800023c:	b14a      	cbz	r2, 8000252 <__udivmoddi4+0x2e>
 800023e:	f1c2 0720 	rsb	r7, r2, #32
 8000242:	fa01 f302 	lsl.w	r3, r1, r2
 8000246:	fa20 f707 	lsr.w	r7, r0, r7
 800024a:	4095      	lsls	r5, r2
 800024c:	ea47 0803 	orr.w	r8, r7, r3
 8000250:	4094      	lsls	r4, r2
 8000252:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000256:	0c23      	lsrs	r3, r4, #16
 8000258:	fbb8 f7fe 	udiv	r7, r8, lr
 800025c:	fa1f fc85 	uxth.w	ip, r5
 8000260:	fb0e 8817 	mls	r8, lr, r7, r8
 8000264:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000268:	fb07 f10c 	mul.w	r1, r7, ip
 800026c:	4299      	cmp	r1, r3
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x60>
 8000270:	18eb      	adds	r3, r5, r3
 8000272:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000276:	f080 811b 	bcs.w	80004b0 <__udivmoddi4+0x28c>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 8118 	bls.w	80004b0 <__udivmoddi4+0x28c>
 8000280:	3f02      	subs	r7, #2
 8000282:	442b      	add	r3, r5
 8000284:	1a5b      	subs	r3, r3, r1
 8000286:	b2a4      	uxth	r4, r4
 8000288:	fbb3 f0fe 	udiv	r0, r3, lr
 800028c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000290:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000294:	fb00 fc0c 	mul.w	ip, r0, ip
 8000298:	45a4      	cmp	ip, r4
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x8c>
 800029c:	192c      	adds	r4, r5, r4
 800029e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002a2:	f080 8107 	bcs.w	80004b4 <__udivmoddi4+0x290>
 80002a6:	45a4      	cmp	ip, r4
 80002a8:	f240 8104 	bls.w	80004b4 <__udivmoddi4+0x290>
 80002ac:	3802      	subs	r0, #2
 80002ae:	442c      	add	r4, r5
 80002b0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b4:	eba4 040c 	sub.w	r4, r4, ip
 80002b8:	2700      	movs	r7, #0
 80002ba:	b11e      	cbz	r6, 80002c4 <__udivmoddi4+0xa0>
 80002bc:	40d4      	lsrs	r4, r2
 80002be:	2300      	movs	r3, #0
 80002c0:	e9c6 4300 	strd	r4, r3, [r6]
 80002c4:	4639      	mov	r1, r7
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0xbe>
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	f000 80eb 	beq.w	80004aa <__udivmoddi4+0x286>
 80002d4:	2700      	movs	r7, #0
 80002d6:	e9c6 0100 	strd	r0, r1, [r6]
 80002da:	4638      	mov	r0, r7
 80002dc:	4639      	mov	r1, r7
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	fab3 f783 	clz	r7, r3
 80002e6:	2f00      	cmp	r7, #0
 80002e8:	d147      	bne.n	800037a <__udivmoddi4+0x156>
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xd0>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 80fa 	bhi.w	80004e8 <__udivmoddi4+0x2c4>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb61 0303 	sbc.w	r3, r1, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	4698      	mov	r8, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d0e0      	beq.n	80002c4 <__udivmoddi4+0xa0>
 8000302:	e9c6 4800 	strd	r4, r8, [r6]
 8000306:	e7dd      	b.n	80002c4 <__udivmoddi4+0xa0>
 8000308:	b902      	cbnz	r2, 800030c <__udivmoddi4+0xe8>
 800030a:	deff      	udf	#255	; 0xff
 800030c:	fab2 f282 	clz	r2, r2
 8000310:	2a00      	cmp	r2, #0
 8000312:	f040 808f 	bne.w	8000434 <__udivmoddi4+0x210>
 8000316:	1b49      	subs	r1, r1, r5
 8000318:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800031c:	fa1f f885 	uxth.w	r8, r5
 8000320:	2701      	movs	r7, #1
 8000322:	fbb1 fcfe 	udiv	ip, r1, lr
 8000326:	0c23      	lsrs	r3, r4, #16
 8000328:	fb0e 111c 	mls	r1, lr, ip, r1
 800032c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000330:	fb08 f10c 	mul.w	r1, r8, ip
 8000334:	4299      	cmp	r1, r3
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x124>
 8000338:	18eb      	adds	r3, r5, r3
 800033a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x122>
 8000340:	4299      	cmp	r1, r3
 8000342:	f200 80cd 	bhi.w	80004e0 <__udivmoddi4+0x2bc>
 8000346:	4684      	mov	ip, r0
 8000348:	1a59      	subs	r1, r3, r1
 800034a:	b2a3      	uxth	r3, r4
 800034c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000350:	fb0e 1410 	mls	r4, lr, r0, r1
 8000354:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000358:	fb08 f800 	mul.w	r8, r8, r0
 800035c:	45a0      	cmp	r8, r4
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x14c>
 8000360:	192c      	adds	r4, r5, r4
 8000362:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x14a>
 8000368:	45a0      	cmp	r8, r4
 800036a:	f200 80b6 	bhi.w	80004da <__udivmoddi4+0x2b6>
 800036e:	4618      	mov	r0, r3
 8000370:	eba4 0408 	sub.w	r4, r4, r8
 8000374:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000378:	e79f      	b.n	80002ba <__udivmoddi4+0x96>
 800037a:	f1c7 0c20 	rsb	ip, r7, #32
 800037e:	40bb      	lsls	r3, r7
 8000380:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000384:	ea4e 0e03 	orr.w	lr, lr, r3
 8000388:	fa01 f407 	lsl.w	r4, r1, r7
 800038c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000390:	fa21 f30c 	lsr.w	r3, r1, ip
 8000394:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000398:	4325      	orrs	r5, r4
 800039a:	fbb3 f9f8 	udiv	r9, r3, r8
 800039e:	0c2c      	lsrs	r4, r5, #16
 80003a0:	fb08 3319 	mls	r3, r8, r9, r3
 80003a4:	fa1f fa8e 	uxth.w	sl, lr
 80003a8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003ac:	fb09 f40a 	mul.w	r4, r9, sl
 80003b0:	429c      	cmp	r4, r3
 80003b2:	fa02 f207 	lsl.w	r2, r2, r7
 80003b6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b0>
 80003bc:	eb1e 0303 	adds.w	r3, lr, r3
 80003c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003c4:	f080 8087 	bcs.w	80004d6 <__udivmoddi4+0x2b2>
 80003c8:	429c      	cmp	r4, r3
 80003ca:	f240 8084 	bls.w	80004d6 <__udivmoddi4+0x2b2>
 80003ce:	f1a9 0902 	sub.w	r9, r9, #2
 80003d2:	4473      	add	r3, lr
 80003d4:	1b1b      	subs	r3, r3, r4
 80003d6:	b2ad      	uxth	r5, r5
 80003d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003dc:	fb08 3310 	mls	r3, r8, r0, r3
 80003e0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003e4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e8:	45a2      	cmp	sl, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1da>
 80003ec:	eb1e 0404 	adds.w	r4, lr, r4
 80003f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f4:	d26b      	bcs.n	80004ce <__udivmoddi4+0x2aa>
 80003f6:	45a2      	cmp	sl, r4
 80003f8:	d969      	bls.n	80004ce <__udivmoddi4+0x2aa>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4474      	add	r4, lr
 80003fe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000402:	fba0 8902 	umull	r8, r9, r0, r2
 8000406:	eba4 040a 	sub.w	r4, r4, sl
 800040a:	454c      	cmp	r4, r9
 800040c:	46c2      	mov	sl, r8
 800040e:	464b      	mov	r3, r9
 8000410:	d354      	bcc.n	80004bc <__udivmoddi4+0x298>
 8000412:	d051      	beq.n	80004b8 <__udivmoddi4+0x294>
 8000414:	2e00      	cmp	r6, #0
 8000416:	d069      	beq.n	80004ec <__udivmoddi4+0x2c8>
 8000418:	ebb1 050a 	subs.w	r5, r1, sl
 800041c:	eb64 0403 	sbc.w	r4, r4, r3
 8000420:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000424:	40fd      	lsrs	r5, r7
 8000426:	40fc      	lsrs	r4, r7
 8000428:	ea4c 0505 	orr.w	r5, ip, r5
 800042c:	e9c6 5400 	strd	r5, r4, [r6]
 8000430:	2700      	movs	r7, #0
 8000432:	e747      	b.n	80002c4 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f703 	lsr.w	r7, r0, r3
 800043c:	4095      	lsls	r5, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	fa21 f303 	lsr.w	r3, r1, r3
 8000446:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800044a:	4338      	orrs	r0, r7
 800044c:	0c01      	lsrs	r1, r0, #16
 800044e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000452:	fa1f f885 	uxth.w	r8, r5
 8000456:	fb0e 3317 	mls	r3, lr, r7, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb07 f308 	mul.w	r3, r7, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x256>
 800046a:	1869      	adds	r1, r5, r1
 800046c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000470:	d22f      	bcs.n	80004d2 <__udivmoddi4+0x2ae>
 8000472:	428b      	cmp	r3, r1
 8000474:	d92d      	bls.n	80004d2 <__udivmoddi4+0x2ae>
 8000476:	3f02      	subs	r7, #2
 8000478:	4429      	add	r1, r5
 800047a:	1acb      	subs	r3, r1, r3
 800047c:	b281      	uxth	r1, r0
 800047e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000482:	fb0e 3310 	mls	r3, lr, r0, r3
 8000486:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048a:	fb00 f308 	mul.w	r3, r0, r8
 800048e:	428b      	cmp	r3, r1
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x27e>
 8000492:	1869      	adds	r1, r5, r1
 8000494:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000498:	d217      	bcs.n	80004ca <__udivmoddi4+0x2a6>
 800049a:	428b      	cmp	r3, r1
 800049c:	d915      	bls.n	80004ca <__udivmoddi4+0x2a6>
 800049e:	3802      	subs	r0, #2
 80004a0:	4429      	add	r1, r5
 80004a2:	1ac9      	subs	r1, r1, r3
 80004a4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a8:	e73b      	b.n	8000322 <__udivmoddi4+0xfe>
 80004aa:	4637      	mov	r7, r6
 80004ac:	4630      	mov	r0, r6
 80004ae:	e709      	b.n	80002c4 <__udivmoddi4+0xa0>
 80004b0:	4607      	mov	r7, r0
 80004b2:	e6e7      	b.n	8000284 <__udivmoddi4+0x60>
 80004b4:	4618      	mov	r0, r3
 80004b6:	e6fb      	b.n	80002b0 <__udivmoddi4+0x8c>
 80004b8:	4541      	cmp	r1, r8
 80004ba:	d2ab      	bcs.n	8000414 <__udivmoddi4+0x1f0>
 80004bc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004c0:	eb69 020e 	sbc.w	r2, r9, lr
 80004c4:	3801      	subs	r0, #1
 80004c6:	4613      	mov	r3, r2
 80004c8:	e7a4      	b.n	8000414 <__udivmoddi4+0x1f0>
 80004ca:	4660      	mov	r0, ip
 80004cc:	e7e9      	b.n	80004a2 <__udivmoddi4+0x27e>
 80004ce:	4618      	mov	r0, r3
 80004d0:	e795      	b.n	80003fe <__udivmoddi4+0x1da>
 80004d2:	4667      	mov	r7, ip
 80004d4:	e7d1      	b.n	800047a <__udivmoddi4+0x256>
 80004d6:	4681      	mov	r9, r0
 80004d8:	e77c      	b.n	80003d4 <__udivmoddi4+0x1b0>
 80004da:	3802      	subs	r0, #2
 80004dc:	442c      	add	r4, r5
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0x14c>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	442b      	add	r3, r5
 80004e6:	e72f      	b.n	8000348 <__udivmoddi4+0x124>
 80004e8:	4638      	mov	r0, r7
 80004ea:	e708      	b.n	80002fe <__udivmoddi4+0xda>
 80004ec:	4637      	mov	r7, r6
 80004ee:	e6e9      	b.n	80002c4 <__udivmoddi4+0xa0>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0

}
 80004f8:	bf00      	nop
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr

08000502 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8000502:	b480      	push	{r7}
 8000504:	af00      	add	r7, sp, #0
return 0;
 8000506:	2300      	movs	r3, #0
}
 8000508:	4618      	mov	r0, r3
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
	...

08000514 <itm_debug1>:
//void _itm_debug1(const char *msg, int v);
//void _itm_debug2(const char *msg, int v1, int v2);
void _itm_debug3(const char *msg, int v1, int v2, int v3, int n);

static inline void itm_debug1(uint32_t f, const char *msg, int v)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b086      	sub	sp, #24
 8000518:	af02      	add	r7, sp, #8
 800051a:	60f8      	str	r0, [r7, #12]
 800051c:	60b9      	str	r1, [r7, #8]
 800051e:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 8000520:	4b08      	ldr	r3, [pc, #32]	; (8000544 <itm_debug1+0x30>)
 8000522:	681a      	ldr	r2, [r3, #0]
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	4013      	ands	r3, r2
 8000528:	2b00      	cmp	r3, #0
 800052a:	d007      	beq.n	800053c <itm_debug1+0x28>
 800052c:	2301      	movs	r3, #1
 800052e:	9300      	str	r3, [sp, #0]
 8000530:	2300      	movs	r3, #0
 8000532:	2200      	movs	r2, #0
 8000534:	6879      	ldr	r1, [r7, #4]
 8000536:	68b8      	ldr	r0, [r7, #8]
 8000538:	f018 fbac 	bl	8018c94 <_itm_debug3>
}
 800053c:	bf00      	nop
 800053e:	3710      	adds	r7, #16
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	200005a4 	.word	0x200005a4

08000548 <itm_debug2>:
static inline void itm_debug2(uint32_t f, const char *msg, int v1, int v2)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b086      	sub	sp, #24
 800054c:	af02      	add	r7, sp, #8
 800054e:	60f8      	str	r0, [r7, #12]
 8000550:	60b9      	str	r1, [r7, #8]
 8000552:	607a      	str	r2, [r7, #4]
 8000554:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, 0, 2);
 8000556:	4b09      	ldr	r3, [pc, #36]	; (800057c <itm_debug2+0x34>)
 8000558:	681a      	ldr	r2, [r3, #0]
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	4013      	ands	r3, r2
 800055e:	2b00      	cmp	r3, #0
 8000560:	d007      	beq.n	8000572 <itm_debug2+0x2a>
 8000562:	2302      	movs	r3, #2
 8000564:	9300      	str	r3, [sp, #0]
 8000566:	2300      	movs	r3, #0
 8000568:	683a      	ldr	r2, [r7, #0]
 800056a:	6879      	ldr	r1, [r7, #4]
 800056c:	68b8      	ldr	r0, [r7, #8]
 800056e:	f018 fb91 	bl	8018c94 <_itm_debug3>
}
 8000572:	bf00      	nop
 8000574:	3710      	adds	r7, #16
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	200005a4 	.word	0x200005a4

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000584:	f001 fbee 	bl	8001d64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000588:	f000 f864 	bl	8000654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058c:	f000 fdc8 	bl	8001120 <MX_GPIO_Init>
  MX_DMA_Init();
 8000590:	f000 fda6 	bl	80010e0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000594:	f000 f8e0 	bl	8000758 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000598:	f000 f9b4 	bl	8000904 <MX_I2C1_Init>
  MX_TIM1_Init();
 800059c:	f000 fa40 	bl	8000a20 <MX_TIM1_Init>
  MX_TIM2_Init();
 80005a0:	f000 fb02 	bl	8000ba8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80005a4:	f000 fb98 	bl	8000cd8 <MX_TIM3_Init>
  MX_RTC_Init();
 80005a8:	f000 fa0a 	bl	80009c0 <MX_RTC_Init>
  MX_UART4_Init();
 80005ac:	f000 fd6e 	bl	800108c <MX_UART4_Init>
  MX_TIM4_Init();
 80005b0:	f000 fc40 	bl	8000e34 <MX_TIM4_Init>
  MX_TIM8_Init();
 80005b4:	f000 fc92 	bl	8000edc <MX_TIM8_Init>
  MX_I2C3_Init();
 80005b8:	f000 f9d2 	bl	8000960 <MX_I2C3_Init>
  MX_TIM12_Init();
 80005bc:	f000 fcf6 	bl	8000fac <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005c0:	f00c fb14 	bl	800cbec <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of frameQueue */
  frameQueueHandle = osMessageQueueNew (48, sizeof(frame_msg_t), &frameQueue_attributes);
 80005c4:	4a15      	ldr	r2, [pc, #84]	; (800061c <main+0x9c>)
 80005c6:	2121      	movs	r1, #33	; 0x21
 80005c8:	2030      	movs	r0, #48	; 0x30
 80005ca:	f00c fc4d 	bl	800ce68 <osMessageQueueNew>
 80005ce:	4602      	mov	r2, r0
 80005d0:	4b13      	ldr	r3, [pc, #76]	; (8000620 <main+0xa0>)
 80005d2:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of uiTask */
  uiTaskHandle = osThreadNew(StartUiTask, NULL, &uiTask_attributes);
 80005d4:	4a13      	ldr	r2, [pc, #76]	; (8000624 <main+0xa4>)
 80005d6:	2100      	movs	r1, #0
 80005d8:	4813      	ldr	r0, [pc, #76]	; (8000628 <main+0xa8>)
 80005da:	f00c fb71 	bl	800ccc0 <osThreadNew>
 80005de:	4602      	mov	r2, r0
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <main+0xac>)
 80005e2:	601a      	str	r2, [r3, #0]

  /* creation of ctrlTask */
  ctrlTaskHandle = osThreadNew(StartCtrlTask, NULL, &ctrlTask_attributes);
 80005e4:	4a12      	ldr	r2, [pc, #72]	; (8000630 <main+0xb0>)
 80005e6:	2100      	movs	r1, #0
 80005e8:	4812      	ldr	r0, [pc, #72]	; (8000634 <main+0xb4>)
 80005ea:	f00c fb69 	bl	800ccc0 <osThreadNew>
 80005ee:	4602      	mov	r2, r0
 80005f0:	4b11      	ldr	r3, [pc, #68]	; (8000638 <main+0xb8>)
 80005f2:	601a      	str	r2, [r3, #0]

  /* creation of txrxFrameTask */
  txrxFrameTaskHandle = osThreadNew(StartTxRxFrameTask, NULL, &txrxFrameTask_attributes);
 80005f4:	4a11      	ldr	r2, [pc, #68]	; (800063c <main+0xbc>)
 80005f6:	2100      	movs	r1, #0
 80005f8:	4811      	ldr	r0, [pc, #68]	; (8000640 <main+0xc0>)
 80005fa:	f00c fb61 	bl	800ccc0 <osThreadNew>
 80005fe:	4602      	mov	r2, r0
 8000600:	4b10      	ldr	r3, [pc, #64]	; (8000644 <main+0xc4>)
 8000602:	601a      	str	r2, [r3, #0]

  /* creation of ina3221_task */
  ina3221_taskHandle = osThreadNew(ina3221_task_start, NULL, &ina3221_task_attributes);
 8000604:	4a10      	ldr	r2, [pc, #64]	; (8000648 <main+0xc8>)
 8000606:	2100      	movs	r1, #0
 8000608:	4810      	ldr	r0, [pc, #64]	; (800064c <main+0xcc>)
 800060a:	f00c fb59 	bl	800ccc0 <osThreadNew>
 800060e:	4602      	mov	r2, r0
 8000610:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <main+0xd0>)
 8000612:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000614:	f00c fb1e 	bl	800cc54 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000618:	e7fe      	b.n	8000618 <main+0x98>
 800061a:	bf00      	nop
 800061c:	08019cf4 	.word	0x08019cf4
 8000620:	20005d8c 	.word	0x20005d8c
 8000624:	08019c64 	.word	0x08019c64
 8000628:	080186fd 	.word	0x080186fd
 800062c:	20006298 	.word	0x20006298
 8000630:	08019c88 	.word	0x08019c88
 8000634:	080182b5 	.word	0x080182b5
 8000638:	200062dc 	.word	0x200062dc
 800063c:	08019cac 	.word	0x08019cac
 8000640:	0801873d 	.word	0x0801873d
 8000644:	20006be8 	.word	0x20006be8
 8000648:	08019cd0 	.word	0x08019cd0
 800064c:	08011cef 	.word	0x08011cef
 8000650:	20006d34 	.word	0x20006d34

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b098      	sub	sp, #96	; 0x60
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800065e:	2230      	movs	r2, #48	; 0x30
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f018 fd37 	bl	80190d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	f107 031c 	add.w	r3, r7, #28
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000678:	f107 030c 	add.w	r3, r7, #12
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	60bb      	str	r3, [r7, #8]
 800068a:	4b31      	ldr	r3, [pc, #196]	; (8000750 <SystemClock_Config+0xfc>)
 800068c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068e:	4a30      	ldr	r2, [pc, #192]	; (8000750 <SystemClock_Config+0xfc>)
 8000690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000694:	6413      	str	r3, [r2, #64]	; 0x40
 8000696:	4b2e      	ldr	r3, [pc, #184]	; (8000750 <SystemClock_Config+0xfc>)
 8000698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069e:	60bb      	str	r3, [r7, #8]
 80006a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a2:	2300      	movs	r3, #0
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	4b2b      	ldr	r3, [pc, #172]	; (8000754 <SystemClock_Config+0x100>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4a2a      	ldr	r2, [pc, #168]	; (8000754 <SystemClock_Config+0x100>)
 80006ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b0:	6013      	str	r3, [r2, #0]
 80006b2:	4b28      	ldr	r3, [pc, #160]	; (8000754 <SystemClock_Config+0x100>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80006be:	2305      	movs	r3, #5
 80006c0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006c8:	2301      	movs	r3, #1
 80006ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006cc:	2302      	movs	r3, #2
 80006ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006d6:	2304      	movs	r3, #4
 80006d8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 96;
 80006da:	2360      	movs	r3, #96	; 0x60
 80006dc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006de:	2302      	movs	r3, #2
 80006e0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006e2:	2304      	movs	r3, #4
 80006e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006ea:	4618      	mov	r0, r3
 80006ec:	f006 fd70 	bl	80071d0 <HAL_RCC_OscConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006f6:	f000 fe57 	bl	80013a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fa:	230f      	movs	r3, #15
 80006fc:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fe:	2302      	movs	r3, #2
 8000700:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000706:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800070a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 800070c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000710:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000712:	f107 031c 	add.w	r3, r7, #28
 8000716:	2103      	movs	r1, #3
 8000718:	4618      	mov	r0, r3
 800071a:	f006 ffc9 	bl	80076b0 <HAL_RCC_ClockConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000724:	f000 fe40 	bl	80013a8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000728:	2302      	movs	r3, #2
 800072a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800072c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000730:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000732:	f107 030c 	add.w	r3, r7, #12
 8000736:	4618      	mov	r0, r3
 8000738:	f007 f9de 	bl	8007af8 <HAL_RCCEx_PeriphCLKConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000742:	f000 fe31 	bl	80013a8 <Error_Handler>
  }
}
 8000746:	bf00      	nop
 8000748:	3760      	adds	r7, #96	; 0x60
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40023800 	.word	0x40023800
 8000754:	40007000 	.word	0x40007000

08000758 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800075e:	463b      	mov	r3, r7
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN ADC1_Init 1 */
  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800076a:	4b64      	ldr	r3, [pc, #400]	; (80008fc <MX_ADC1_Init+0x1a4>)
 800076c:	4a64      	ldr	r2, [pc, #400]	; (8000900 <MX_ADC1_Init+0x1a8>)
 800076e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000770:	4b62      	ldr	r3, [pc, #392]	; (80008fc <MX_ADC1_Init+0x1a4>)
 8000772:	2200      	movs	r2, #0
 8000774:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000776:	4b61      	ldr	r3, [pc, #388]	; (80008fc <MX_ADC1_Init+0x1a4>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800077c:	4b5f      	ldr	r3, [pc, #380]	; (80008fc <MX_ADC1_Init+0x1a4>)
 800077e:	2201      	movs	r2, #1
 8000780:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000782:	4b5e      	ldr	r3, [pc, #376]	; (80008fc <MX_ADC1_Init+0x1a4>)
 8000784:	2200      	movs	r2, #0
 8000786:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000788:	4b5c      	ldr	r3, [pc, #368]	; (80008fc <MX_ADC1_Init+0x1a4>)
 800078a:	2200      	movs	r2, #0
 800078c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000790:	4b5a      	ldr	r3, [pc, #360]	; (80008fc <MX_ADC1_Init+0x1a4>)
 8000792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000796:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8000798:	4b58      	ldr	r3, [pc, #352]	; (80008fc <MX_ADC1_Init+0x1a4>)
 800079a:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800079e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007a0:	4b56      	ldr	r3, [pc, #344]	; (80008fc <MX_ADC1_Init+0x1a4>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 10;
 80007a6:	4b55      	ldr	r3, [pc, #340]	; (80008fc <MX_ADC1_Init+0x1a4>)
 80007a8:	220a      	movs	r2, #10
 80007aa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80007ac:	4b53      	ldr	r3, [pc, #332]	; (80008fc <MX_ADC1_Init+0x1a4>)
 80007ae:	2201      	movs	r2, #1
 80007b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80007b4:	4b51      	ldr	r3, [pc, #324]	; (80008fc <MX_ADC1_Init+0x1a4>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007ba:	4850      	ldr	r0, [pc, #320]	; (80008fc <MX_ADC1_Init+0x1a4>)
 80007bc:	f001 fb36 	bl	8001e2c <HAL_ADC_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80007c6:	f000 fdef 	bl	80013a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007ce:	2301      	movs	r3, #1
 80007d0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80007d2:	2302      	movs	r3, #2
 80007d4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	4619      	mov	r1, r3
 80007da:	4848      	ldr	r0, [pc, #288]	; (80008fc <MX_ADC1_Init+0x1a4>)
 80007dc:	f001 fc5c 	bl	8002098 <HAL_ADC_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80007e6:	f000 fddf 	bl	80013a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007ea:	2301      	movs	r3, #1
 80007ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80007ee:	2302      	movs	r3, #2
 80007f0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007f2:	463b      	mov	r3, r7
 80007f4:	4619      	mov	r1, r3
 80007f6:	4841      	ldr	r0, [pc, #260]	; (80008fc <MX_ADC1_Init+0x1a4>)
 80007f8:	f001 fc4e 	bl	8002098 <HAL_ADC_ConfigChannel>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000802:	f000 fdd1 	bl	80013a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000806:	2302      	movs	r3, #2
 8000808:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800080a:	2303      	movs	r3, #3
 800080c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800080e:	463b      	mov	r3, r7
 8000810:	4619      	mov	r1, r3
 8000812:	483a      	ldr	r0, [pc, #232]	; (80008fc <MX_ADC1_Init+0x1a4>)
 8000814:	f001 fc40 	bl	8002098 <HAL_ADC_ConfigChannel>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 800081e:	f000 fdc3 	bl	80013a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000822:	2303      	movs	r3, #3
 8000824:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000826:	2304      	movs	r3, #4
 8000828:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800082a:	463b      	mov	r3, r7
 800082c:	4619      	mov	r1, r3
 800082e:	4833      	ldr	r0, [pc, #204]	; (80008fc <MX_ADC1_Init+0x1a4>)
 8000830:	f001 fc32 	bl	8002098 <HAL_ADC_ConfigChannel>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 800083a:	f000 fdb5 	bl	80013a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800083e:	2304      	movs	r3, #4
 8000840:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000842:	2305      	movs	r3, #5
 8000844:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000846:	463b      	mov	r3, r7
 8000848:	4619      	mov	r1, r3
 800084a:	482c      	ldr	r0, [pc, #176]	; (80008fc <MX_ADC1_Init+0x1a4>)
 800084c:	f001 fc24 	bl	8002098 <HAL_ADC_ConfigChannel>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 8000856:	f000 fda7 	bl	80013a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800085a:	2305      	movs	r3, #5
 800085c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 800085e:	2306      	movs	r3, #6
 8000860:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000862:	463b      	mov	r3, r7
 8000864:	4619      	mov	r1, r3
 8000866:	4825      	ldr	r0, [pc, #148]	; (80008fc <MX_ADC1_Init+0x1a4>)
 8000868:	f001 fc16 	bl	8002098 <HAL_ADC_ConfigChannel>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 8000872:	f000 fd99 	bl	80013a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000876:	230c      	movs	r3, #12
 8000878:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 800087a:	2307      	movs	r3, #7
 800087c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800087e:	463b      	mov	r3, r7
 8000880:	4619      	mov	r1, r3
 8000882:	481e      	ldr	r0, [pc, #120]	; (80008fc <MX_ADC1_Init+0x1a4>)
 8000884:	f001 fc08 	bl	8002098 <HAL_ADC_ConfigChannel>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_ADC1_Init+0x13a>
  {
    Error_Handler();
 800088e:	f000 fd8b 	bl	80013a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000892:	2308      	movs	r3, #8
 8000894:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8000896:	2308      	movs	r3, #8
 8000898:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800089a:	463b      	mov	r3, r7
 800089c:	4619      	mov	r1, r3
 800089e:	4817      	ldr	r0, [pc, #92]	; (80008fc <MX_ADC1_Init+0x1a4>)
 80008a0:	f001 fbfa 	bl	8002098 <HAL_ADC_ConfigChannel>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_ADC1_Init+0x156>
  {
    Error_Handler();
 80008aa:	f000 fd7d 	bl	80013a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80008ae:	230a      	movs	r3, #10
 80008b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80008b2:	2309      	movs	r3, #9
 80008b4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008b6:	463b      	mov	r3, r7
 80008b8:	4619      	mov	r1, r3
 80008ba:	4810      	ldr	r0, [pc, #64]	; (80008fc <MX_ADC1_Init+0x1a4>)
 80008bc:	f001 fbec 	bl	8002098 <HAL_ADC_ConfigChannel>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_ADC1_Init+0x172>
  {
    Error_Handler();
 80008c6:	f000 fd6f 	bl	80013a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80008ca:	230b      	movs	r3, #11
 80008cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 80008ce:	230a      	movs	r3, #10
 80008d0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008d2:	463b      	mov	r3, r7
 80008d4:	4619      	mov	r1, r3
 80008d6:	4809      	ldr	r0, [pc, #36]	; (80008fc <MX_ADC1_Init+0x1a4>)
 80008d8:	f001 fbde 	bl	8002098 <HAL_ADC_ConfigChannel>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 80008e2:	f000 fd61 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  if (hadc1.Init.NbrOfConversion != NUM_LOCAL_CANTONS_HW*2) {
 80008e6:	4b05      	ldr	r3, [pc, #20]	; (80008fc <MX_ADC1_Init+0x1a4>)
 80008e8:	69db      	ldr	r3, [r3, #28]
 80008ea:	2b0a      	cmp	r3, #10
 80008ec:	d001      	beq.n	80008f2 <MX_ADC1_Init+0x19a>
	    Error_Handler();
 80008ee:	f000 fd5b 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE END ADC1_Init 2 */

}
 80008f2:	bf00      	nop
 80008f4:	3710      	adds	r7, #16
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	200062e0 	.word	0x200062e0
 8000900:	40012000 	.word	0x40012000

08000904 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000908:	4b12      	ldr	r3, [pc, #72]	; (8000954 <MX_I2C1_Init+0x50>)
 800090a:	4a13      	ldr	r2, [pc, #76]	; (8000958 <MX_I2C1_Init+0x54>)
 800090c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800090e:	4b11      	ldr	r3, [pc, #68]	; (8000954 <MX_I2C1_Init+0x50>)
 8000910:	4a12      	ldr	r2, [pc, #72]	; (800095c <MX_I2C1_Init+0x58>)
 8000912:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000914:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <MX_I2C1_Init+0x50>)
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800091a:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <MX_I2C1_Init+0x50>)
 800091c:	2200      	movs	r2, #0
 800091e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000920:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <MX_I2C1_Init+0x50>)
 8000922:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000926:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000928:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <MX_I2C1_Init+0x50>)
 800092a:	2200      	movs	r2, #0
 800092c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <MX_I2C1_Init+0x50>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000934:	4b07      	ldr	r3, [pc, #28]	; (8000954 <MX_I2C1_Init+0x50>)
 8000936:	2200      	movs	r2, #0
 8000938:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <MX_I2C1_Init+0x50>)
 800093c:	2200      	movs	r2, #0
 800093e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000940:	4804      	ldr	r0, [pc, #16]	; (8000954 <MX_I2C1_Init+0x50>)
 8000942:	f002 fc7d 	bl	8003240 <HAL_I2C_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800094c:	f000 fd2c 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20005d90 	.word	0x20005d90
 8000958:	40005400 	.word	0x40005400
 800095c:	00061a80 	.word	0x00061a80

08000960 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000964:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <MX_I2C3_Init+0x54>)
 8000966:	4a14      	ldr	r2, [pc, #80]	; (80009b8 <MX_I2C3_Init+0x58>)
 8000968:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 800096a:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <MX_I2C3_Init+0x54>)
 800096c:	4a13      	ldr	r2, [pc, #76]	; (80009bc <MX_I2C3_Init+0x5c>)
 800096e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8000970:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <MX_I2C3_Init+0x54>)
 8000972:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000976:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000978:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <MX_I2C3_Init+0x54>)
 800097a:	2200      	movs	r2, #0
 800097c:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800097e:	4b0d      	ldr	r3, [pc, #52]	; (80009b4 <MX_I2C3_Init+0x54>)
 8000980:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000984:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000986:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <MX_I2C3_Init+0x54>)
 8000988:	2200      	movs	r2, #0
 800098a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800098c:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <MX_I2C3_Init+0x54>)
 800098e:	2200      	movs	r2, #0
 8000990:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000992:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <MX_I2C3_Init+0x54>)
 8000994:	2200      	movs	r2, #0
 8000996:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <MX_I2C3_Init+0x54>)
 800099a:	2200      	movs	r2, #0
 800099c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <MX_I2C3_Init+0x54>)
 80009a0:	f002 fc4e 	bl	8003240 <HAL_I2C_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_I2C3_Init+0x4e>
  {
    Error_Handler();
 80009aa:	f000 fcfd 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20005624 	.word	0x20005624
 80009b8:	40005c00 	.word	0x40005c00
 80009bc:	00061a80 	.word	0x00061a80

080009c0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b086      	sub	sp, #24
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80009c6:	1d3b      	adds	r3, r7, #4
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
 80009d2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80009d4:	2300      	movs	r3, #0
 80009d6:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80009d8:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <MX_RTC_Init+0x58>)
 80009da:	4a10      	ldr	r2, [pc, #64]	; (8000a1c <MX_RTC_Init+0x5c>)
 80009dc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80009de:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <MX_RTC_Init+0x58>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80009e4:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <MX_RTC_Init+0x58>)
 80009e6:	227f      	movs	r2, #127	; 0x7f
 80009e8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80009ea:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <MX_RTC_Init+0x58>)
 80009ec:	22ff      	movs	r2, #255	; 0xff
 80009ee:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80009f0:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <MX_RTC_Init+0x58>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80009f6:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <MX_RTC_Init+0x58>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80009fc:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <MX_RTC_Init+0x58>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a02:	4805      	ldr	r0, [pc, #20]	; (8000a18 <MX_RTC_Init+0x58>)
 8000a04:	f007 f95a 	bl	8007cbc <HAL_RTC_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000a0e:	f000 fccb 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a12:	3718      	adds	r7, #24
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20006388 	.word	0x20006388
 8000a1c:	40002800 	.word	0x40002800

08000a20 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b096      	sub	sp, #88	; 0x58
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a26:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]
 8000a32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a34:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	60da      	str	r2, [r3, #12]
 8000a4c:	611a      	str	r2, [r3, #16]
 8000a4e:	615a      	str	r2, [r3, #20]
 8000a50:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	2220      	movs	r2, #32
 8000a56:	2100      	movs	r1, #0
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f018 fb3c 	bl	80190d6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a5e:	4b50      	ldr	r3, [pc, #320]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000a60:	4a50      	ldr	r2, [pc, #320]	; (8000ba4 <MX_TIM1_Init+0x184>)
 8000a62:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1199;
 8000a64:	4b4e      	ldr	r3, [pc, #312]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000a66:	f240 42af 	movw	r2, #1199	; 0x4af
 8000a6a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8000a6c:	4b4c      	ldr	r3, [pc, #304]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000a6e:	2260      	movs	r2, #96	; 0x60
 8000a70:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 200;
 8000a72:	4b4b      	ldr	r3, [pc, #300]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000a74:	22c8      	movs	r2, #200	; 0xc8
 8000a76:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a78:	4b49      	ldr	r3, [pc, #292]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a7e:	4b48      	ldr	r3, [pc, #288]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a84:	4b46      	ldr	r3, [pc, #280]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000a86:	2280      	movs	r2, #128	; 0x80
 8000a88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a8a:	4845      	ldr	r0, [pc, #276]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000a8c:	f007 f9fb 	bl	8007e86 <HAL_TIM_Base_Init>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000a96:	f000 fc87 	bl	80013a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a9e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000aa0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	483e      	ldr	r0, [pc, #248]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000aa8:	f007 fdc4 	bl	8008634 <HAL_TIM_ConfigClockSource>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000ab2:	f000 fc79 	bl	80013a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ab6:	483a      	ldr	r0, [pc, #232]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000ab8:	f007 fa58 	bl	8007f6c <HAL_TIM_PWM_Init>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000ac2:	f000 fc71 	bl	80013a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000ac6:	2320      	movs	r3, #32
 8000ac8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000aca:	2380      	movs	r3, #128	; 0x80
 8000acc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ace:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4832      	ldr	r0, [pc, #200]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000ad6:	f008 fa65 	bl	8008fa4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000ae0:	f000 fc62 	bl	80013a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ae4:	2360      	movs	r3, #96	; 0x60
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aec:	2300      	movs	r3, #0
 8000aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000af0:	2300      	movs	r3, #0
 8000af2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000af4:	2300      	movs	r3, #0
 8000af6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000af8:	2300      	movs	r3, #0
 8000afa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000afc:	2300      	movs	r3, #0
 8000afe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b04:	2200      	movs	r2, #0
 8000b06:	4619      	mov	r1, r3
 8000b08:	4825      	ldr	r0, [pc, #148]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000b0a:	f007 fccd 	bl	80084a8 <HAL_TIM_PWM_ConfigChannel>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000b14:	f000 fc48 	bl	80013a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1c:	2204      	movs	r2, #4
 8000b1e:	4619      	mov	r1, r3
 8000b20:	481f      	ldr	r0, [pc, #124]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000b22:	f007 fcc1 	bl	80084a8 <HAL_TIM_PWM_ConfigChannel>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000b2c:	f000 fc3c 	bl	80013a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b34:	2208      	movs	r2, #8
 8000b36:	4619      	mov	r1, r3
 8000b38:	4819      	ldr	r0, [pc, #100]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000b3a:	f007 fcb5 	bl	80084a8 <HAL_TIM_PWM_ConfigChannel>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000b44:	f000 fc30 	bl	80013a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b4c:	220c      	movs	r2, #12
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4813      	ldr	r0, [pc, #76]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000b52:	f007 fca9 	bl	80084a8 <HAL_TIM_PWM_ConfigChannel>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000b5c:	f000 fc24 	bl	80013a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b60:	2300      	movs	r3, #0
 8000b62:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b64:	2300      	movs	r3, #0
 8000b66:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b78:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b7e:	1d3b      	adds	r3, r7, #4
 8000b80:	4619      	mov	r1, r3
 8000b82:	4807      	ldr	r0, [pc, #28]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000b84:	f008 fa8a 	bl	800909c <HAL_TIMEx_ConfigBreakDeadTime>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8000b8e:	f000 fc0b 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b92:	4803      	ldr	r0, [pc, #12]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000b94:	f000 fe82 	bl	800189c <HAL_TIM_MspPostInit>

}
 8000b98:	bf00      	nop
 8000b9a:	3758      	adds	r7, #88	; 0x58
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	200067a8 	.word	0x200067a8
 8000ba4:	40010000 	.word	0x40010000

08000ba8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b092      	sub	sp, #72	; 0x48
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bcc:	f107 031c 	add.w	r3, r7, #28
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bd6:	463b      	mov	r3, r7
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]
 8000be4:	615a      	str	r2, [r3, #20]
 8000be6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000be8:	4b3a      	ldr	r3, [pc, #232]	; (8000cd4 <MX_TIM2_Init+0x12c>)
 8000bea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1199;
 8000bf0:	4b38      	ldr	r3, [pc, #224]	; (8000cd4 <MX_TIM2_Init+0x12c>)
 8000bf2:	f240 42af 	movw	r2, #1199	; 0x4af
 8000bf6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8000bf8:	4b36      	ldr	r3, [pc, #216]	; (8000cd4 <MX_TIM2_Init+0x12c>)
 8000bfa:	2260      	movs	r2, #96	; 0x60
 8000bfc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200;
 8000bfe:	4b35      	ldr	r3, [pc, #212]	; (8000cd4 <MX_TIM2_Init+0x12c>)
 8000c00:	22c8      	movs	r2, #200	; 0xc8
 8000c02:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c04:	4b33      	ldr	r3, [pc, #204]	; (8000cd4 <MX_TIM2_Init+0x12c>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c0a:	4b32      	ldr	r3, [pc, #200]	; (8000cd4 <MX_TIM2_Init+0x12c>)
 8000c0c:	2280      	movs	r2, #128	; 0x80
 8000c0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c10:	4830      	ldr	r0, [pc, #192]	; (8000cd4 <MX_TIM2_Init+0x12c>)
 8000c12:	f007 f938 	bl	8007e86 <HAL_TIM_Base_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000c1c:	f000 fbc4 	bl	80013a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c24:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c26:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4829      	ldr	r0, [pc, #164]	; (8000cd4 <MX_TIM2_Init+0x12c>)
 8000c2e:	f007 fd01 	bl	8008634 <HAL_TIM_ConfigClockSource>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000c38:	f000 fbb6 	bl	80013a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c3c:	4825      	ldr	r0, [pc, #148]	; (8000cd4 <MX_TIM2_Init+0x12c>)
 8000c3e:	f007 f995 	bl	8007f6c <HAL_TIM_PWM_Init>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8000c48:	f000 fbae 	bl	80013a8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000c4c:	2306      	movs	r3, #6
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000c54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c58:	4619      	mov	r1, r3
 8000c5a:	481e      	ldr	r0, [pc, #120]	; (8000cd4 <MX_TIM2_Init+0x12c>)
 8000c5c:	f007 fda1 	bl	80087a2 <HAL_TIM_SlaveConfigSynchro>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 8000c66:	f000 fb9f 	bl	80013a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c72:	f107 031c 	add.w	r3, r7, #28
 8000c76:	4619      	mov	r1, r3
 8000c78:	4816      	ldr	r0, [pc, #88]	; (8000cd4 <MX_TIM2_Init+0x12c>)
 8000c7a:	f008 f993 	bl	8008fa4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8000c84:	f000 fb90 	bl	80013a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c88:	2360      	movs	r3, #96	; 0x60
 8000c8a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c90:	2300      	movs	r3, #0
 8000c92:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c94:	2300      	movs	r3, #0
 8000c96:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c98:	463b      	mov	r3, r7
 8000c9a:	2208      	movs	r2, #8
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	480d      	ldr	r0, [pc, #52]	; (8000cd4 <MX_TIM2_Init+0x12c>)
 8000ca0:	f007 fc02 	bl	80084a8 <HAL_TIM_PWM_ConfigChannel>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8000caa:	f000 fb7d 	bl	80013a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000cae:	463b      	mov	r3, r7
 8000cb0:	220c      	movs	r2, #12
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4807      	ldr	r0, [pc, #28]	; (8000cd4 <MX_TIM2_Init+0x12c>)
 8000cb6:	f007 fbf7 	bl	80084a8 <HAL_TIM_PWM_ConfigChannel>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 8000cc0:	f000 fb72 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000cc4:	4803      	ldr	r0, [pc, #12]	; (8000cd4 <MX_TIM2_Init+0x12c>)
 8000cc6:	f000 fde9 	bl	800189c <HAL_TIM_MspPostInit>

}
 8000cca:	bf00      	nop
 8000ccc:	3748      	adds	r7, #72	; 0x48
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20006cf4 	.word	0x20006cf4

08000cd8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b092      	sub	sp, #72	; 0x48
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cde:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
 8000cea:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000cec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cfc:	f107 031c 	add.w	r3, r7, #28
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d06:	463b      	mov	r3, r7
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
 8000d14:	615a      	str	r2, [r3, #20]
 8000d16:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d18:	4b44      	ldr	r3, [pc, #272]	; (8000e2c <MX_TIM3_Init+0x154>)
 8000d1a:	4a45      	ldr	r2, [pc, #276]	; (8000e30 <MX_TIM3_Init+0x158>)
 8000d1c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d1e:	4b43      	ldr	r3, [pc, #268]	; (8000e2c <MX_TIM3_Init+0x154>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d24:	4b41      	ldr	r3, [pc, #260]	; (8000e2c <MX_TIM3_Init+0x154>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000d2a:	4b40      	ldr	r3, [pc, #256]	; (8000e2c <MX_TIM3_Init+0x154>)
 8000d2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d30:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d32:	4b3e      	ldr	r3, [pc, #248]	; (8000e2c <MX_TIM3_Init+0x154>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d38:	4b3c      	ldr	r3, [pc, #240]	; (8000e2c <MX_TIM3_Init+0x154>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d3e:	483b      	ldr	r0, [pc, #236]	; (8000e2c <MX_TIM3_Init+0x154>)
 8000d40:	f007 f8a1 	bl	8007e86 <HAL_TIM_Base_Init>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000d4a:	f000 fb2d 	bl	80013a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d52:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d54:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4834      	ldr	r0, [pc, #208]	; (8000e2c <MX_TIM3_Init+0x154>)
 8000d5c:	f007 fc6a 	bl	8008634 <HAL_TIM_ConfigClockSource>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000d66:	f000 fb1f 	bl	80013a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d6a:	4830      	ldr	r0, [pc, #192]	; (8000e2c <MX_TIM3_Init+0x154>)
 8000d6c:	f007 f8fe 	bl	8007f6c <HAL_TIM_PWM_Init>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 8000d76:	f000 fb17 	bl	80013a8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000d7a:	2306      	movs	r3, #6
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000d82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d86:	4619      	mov	r1, r3
 8000d88:	4828      	ldr	r0, [pc, #160]	; (8000e2c <MX_TIM3_Init+0x154>)
 8000d8a:	f007 fd0a 	bl	80087a2 <HAL_TIM_SlaveConfigSynchro>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 8000d94:	f000 fb08 	bl	80013a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000da0:	f107 031c 	add.w	r3, r7, #28
 8000da4:	4619      	mov	r1, r3
 8000da6:	4821      	ldr	r0, [pc, #132]	; (8000e2c <MX_TIM3_Init+0x154>)
 8000da8:	f008 f8fc 	bl	8008fa4 <HAL_TIMEx_MasterConfigSynchronization>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8000db2:	f000 faf9 	bl	80013a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000db6:	2360      	movs	r3, #96	; 0x60
 8000db8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dc6:	463b      	mov	r3, r7
 8000dc8:	2200      	movs	r2, #0
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4817      	ldr	r0, [pc, #92]	; (8000e2c <MX_TIM3_Init+0x154>)
 8000dce:	f007 fb6b 	bl	80084a8 <HAL_TIM_PWM_ConfigChannel>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8000dd8:	f000 fae6 	bl	80013a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ddc:	463b      	mov	r3, r7
 8000dde:	2204      	movs	r2, #4
 8000de0:	4619      	mov	r1, r3
 8000de2:	4812      	ldr	r0, [pc, #72]	; (8000e2c <MX_TIM3_Init+0x154>)
 8000de4:	f007 fb60 	bl	80084a8 <HAL_TIM_PWM_ConfigChannel>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8000dee:	f000 fadb 	bl	80013a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000df2:	463b      	mov	r3, r7
 8000df4:	2208      	movs	r2, #8
 8000df6:	4619      	mov	r1, r3
 8000df8:	480c      	ldr	r0, [pc, #48]	; (8000e2c <MX_TIM3_Init+0x154>)
 8000dfa:	f007 fb55 	bl	80084a8 <HAL_TIM_PWM_ConfigChannel>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM3_Init+0x130>
  {
    Error_Handler();
 8000e04:	f000 fad0 	bl	80013a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e08:	463b      	mov	r3, r7
 8000e0a:	220c      	movs	r2, #12
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4807      	ldr	r0, [pc, #28]	; (8000e2c <MX_TIM3_Init+0x154>)
 8000e10:	f007 fb4a 	bl	80084a8 <HAL_TIM_PWM_ConfigChannel>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_TIM3_Init+0x146>
  {
    Error_Handler();
 8000e1a:	f000 fac5 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e1e:	4803      	ldr	r0, [pc, #12]	; (8000e2c <MX_TIM3_Init+0x154>)
 8000e20:	f000 fd3c 	bl	800189c <HAL_TIM_MspPostInit>

}
 8000e24:	bf00      	nop
 8000e26:	3748      	adds	r7, #72	; 0x48
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	2000629c 	.word	0x2000629c
 8000e30:	40000400 	.word	0x40000400

08000e34 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08c      	sub	sp, #48	; 0x30
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e3a:	f107 030c 	add.w	r3, r7, #12
 8000e3e:	2224      	movs	r2, #36	; 0x24
 8000e40:	2100      	movs	r1, #0
 8000e42:	4618      	mov	r0, r3
 8000e44:	f018 f947 	bl	80190d6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e48:	1d3b      	adds	r3, r7, #4
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e50:	4b20      	ldr	r3, [pc, #128]	; (8000ed4 <MX_TIM4_Init+0xa0>)
 8000e52:	4a21      	ldr	r2, [pc, #132]	; (8000ed8 <MX_TIM4_Init+0xa4>)
 8000e54:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000e56:	4b1f      	ldr	r3, [pc, #124]	; (8000ed4 <MX_TIM4_Init+0xa0>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e5c:	4b1d      	ldr	r3, [pc, #116]	; (8000ed4 <MX_TIM4_Init+0xa0>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff;
 8000e62:	4b1c      	ldr	r3, [pc, #112]	; (8000ed4 <MX_TIM4_Init+0xa0>)
 8000e64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e68:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e6a:	4b1a      	ldr	r3, [pc, #104]	; (8000ed4 <MX_TIM4_Init+0xa0>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e70:	4b18      	ldr	r3, [pc, #96]	; (8000ed4 <MX_TIM4_Init+0xa0>)
 8000e72:	2280      	movs	r2, #128	; 0x80
 8000e74:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000e76:	2301      	movs	r3, #1
 8000e78:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e82:	2300      	movs	r3, #0
 8000e84:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000e86:	230a      	movs	r3, #10
 8000e88:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e92:	2300      	movs	r3, #0
 8000e94:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8000e96:	230a      	movs	r3, #10
 8000e98:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000e9a:	f107 030c 	add.w	r3, r7, #12
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	480c      	ldr	r0, [pc, #48]	; (8000ed4 <MX_TIM4_Init+0xa0>)
 8000ea2:	f007 f92f 	bl	8008104 <HAL_TIM_Encoder_Init>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000eac:	f000 fa7c 	bl	80013a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000eb8:	1d3b      	adds	r3, r7, #4
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <MX_TIM4_Init+0xa0>)
 8000ebe:	f008 f871 	bl	8008fa4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000ec8:	f000 fa6e 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000ecc:	bf00      	nop
 8000ece:	3730      	adds	r7, #48	; 0x30
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20005d4c 	.word	0x20005d4c
 8000ed8:	40000800 	.word	0x40000800

08000edc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08c      	sub	sp, #48	; 0x30
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ee2:	f107 0320 	add.w	r3, r7, #32
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]
 8000eee:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000ef0:	f107 030c 	add.w	r3, r7, #12
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f00:	1d3b      	adds	r3, r7, #4
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000f08:	4b26      	ldr	r3, [pc, #152]	; (8000fa4 <MX_TIM8_Init+0xc8>)
 8000f0a:	4a27      	ldr	r2, [pc, #156]	; (8000fa8 <MX_TIM8_Init+0xcc>)
 8000f0c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 1199;
 8000f0e:	4b25      	ldr	r3, [pc, #148]	; (8000fa4 <MX_TIM8_Init+0xc8>)
 8000f10:	f240 42af 	movw	r2, #1199	; 0x4af
 8000f14:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f16:	4b23      	ldr	r3, [pc, #140]	; (8000fa4 <MX_TIM8_Init+0xc8>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 210;
 8000f1c:	4b21      	ldr	r3, [pc, #132]	; (8000fa4 <MX_TIM8_Init+0xc8>)
 8000f1e:	22d2      	movs	r2, #210	; 0xd2
 8000f20:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f22:	4b20      	ldr	r3, [pc, #128]	; (8000fa4 <MX_TIM8_Init+0xc8>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000f28:	4b1e      	ldr	r3, [pc, #120]	; (8000fa4 <MX_TIM8_Init+0xc8>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f2e:	4b1d      	ldr	r3, [pc, #116]	; (8000fa4 <MX_TIM8_Init+0xc8>)
 8000f30:	2280      	movs	r2, #128	; 0x80
 8000f32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000f34:	481b      	ldr	r0, [pc, #108]	; (8000fa4 <MX_TIM8_Init+0xc8>)
 8000f36:	f006 ffa6 	bl	8007e86 <HAL_TIM_Base_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_TIM8_Init+0x68>
  {
    Error_Handler();
 8000f40:	f000 fa32 	bl	80013a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f48:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000f4a:	f107 0320 	add.w	r3, r7, #32
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4814      	ldr	r0, [pc, #80]	; (8000fa4 <MX_TIM8_Init+0xc8>)
 8000f52:	f007 fb6f 	bl	8008634 <HAL_TIM_ConfigClockSource>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8000f5c:	f000 fa24 	bl	80013a8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000f60:	2304      	movs	r3, #4
 8000f62:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000f64:	2300      	movs	r3, #0
 8000f66:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8000f68:	f107 030c 	add.w	r3, r7, #12
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	480d      	ldr	r0, [pc, #52]	; (8000fa4 <MX_TIM8_Init+0xc8>)
 8000f70:	f007 fc17 	bl	80087a2 <HAL_TIM_SlaveConfigSynchro>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_TIM8_Init+0xa2>
  {
    Error_Handler();
 8000f7a:	f000 fa15 	bl	80013a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000f7e:	2320      	movs	r3, #32
 8000f80:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000f82:	2380      	movs	r3, #128	; 0x80
 8000f84:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4806      	ldr	r0, [pc, #24]	; (8000fa4 <MX_TIM8_Init+0xc8>)
 8000f8c:	f008 f80a 	bl	8008fa4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8000f96:	f000 fa07 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000f9a:	bf00      	nop
 8000f9c:	3730      	adds	r7, #48	; 0x30
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20005ca8 	.word	0x20005ca8
 8000fa8:	40010400 	.word	0x40010400

08000fac <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08c      	sub	sp, #48	; 0x30
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000fb2:	f107 031c 	add.w	r3, r7, #28
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	605a      	str	r2, [r3, #4]
 8000fbc:	609a      	str	r2, [r3, #8]
 8000fbe:	60da      	str	r2, [r3, #12]
 8000fc0:	611a      	str	r2, [r3, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fc2:	463b      	mov	r3, r7
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]
 8000fd0:	615a      	str	r2, [r3, #20]
 8000fd2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000fd4:	4b2b      	ldr	r3, [pc, #172]	; (8001084 <MX_TIM12_Init+0xd8>)
 8000fd6:	4a2c      	ldr	r2, [pc, #176]	; (8001088 <MX_TIM12_Init+0xdc>)
 8000fd8:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8000fda:	4b2a      	ldr	r3, [pc, #168]	; (8001084 <MX_TIM12_Init+0xd8>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe0:	4b28      	ldr	r3, [pc, #160]	; (8001084 <MX_TIM12_Init+0xd8>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8000fe6:	4b27      	ldr	r3, [pc, #156]	; (8001084 <MX_TIM12_Init+0xd8>)
 8000fe8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fec:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fee:	4b25      	ldr	r3, [pc, #148]	; (8001084 <MX_TIM12_Init+0xd8>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff4:	4b23      	ldr	r3, [pc, #140]	; (8001084 <MX_TIM12_Init+0xd8>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8000ffa:	4822      	ldr	r0, [pc, #136]	; (8001084 <MX_TIM12_Init+0xd8>)
 8000ffc:	f006 ff43 	bl	8007e86 <HAL_TIM_Base_Init>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_TIM12_Init+0x5e>
  {
    Error_Handler();
 8001006:	f000 f9cf 	bl	80013a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800100a:	481e      	ldr	r0, [pc, #120]	; (8001084 <MX_TIM12_Init+0xd8>)
 800100c:	f006 ffae 	bl	8007f6c <HAL_TIM_PWM_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_TIM12_Init+0x6e>
  {
    Error_Handler();
 8001016:	f000 f9c7 	bl	80013a8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 800101a:	2300      	movs	r3, #0
 800101c:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800101e:	2300      	movs	r3, #0
 8001020:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim12, &sSlaveConfig) != HAL_OK)
 8001022:	f107 031c 	add.w	r3, r7, #28
 8001026:	4619      	mov	r1, r3
 8001028:	4816      	ldr	r0, [pc, #88]	; (8001084 <MX_TIM12_Init+0xd8>)
 800102a:	f007 fbba 	bl	80087a2 <HAL_TIM_SlaveConfigSynchro>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_TIM12_Init+0x8c>
  {
    Error_Handler();
 8001034:	f000 f9b8 	bl	80013a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001038:	2360      	movs	r3, #96	; 0x60
 800103a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001040:	2300      	movs	r3, #0
 8001042:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001044:	2300      	movs	r3, #0
 8001046:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001048:	463b      	mov	r3, r7
 800104a:	2200      	movs	r2, #0
 800104c:	4619      	mov	r1, r3
 800104e:	480d      	ldr	r0, [pc, #52]	; (8001084 <MX_TIM12_Init+0xd8>)
 8001050:	f007 fa2a 	bl	80084a8 <HAL_TIM_PWM_ConfigChannel>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_TIM12_Init+0xb2>
  {
    Error_Handler();
 800105a:	f000 f9a5 	bl	80013a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800105e:	463b      	mov	r3, r7
 8001060:	2204      	movs	r2, #4
 8001062:	4619      	mov	r1, r3
 8001064:	4807      	ldr	r0, [pc, #28]	; (8001084 <MX_TIM12_Init+0xd8>)
 8001066:	f007 fa1f 	bl	80084a8 <HAL_TIM_PWM_ConfigChannel>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_TIM12_Init+0xc8>
  {
    Error_Handler();
 8001070:	f000 f99a 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001074:	4803      	ldr	r0, [pc, #12]	; (8001084 <MX_TIM12_Init+0xd8>)
 8001076:	f000 fc11 	bl	800189c <HAL_TIM_MspPostInit>

}
 800107a:	bf00      	nop
 800107c:	3730      	adds	r7, #48	; 0x30
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20006d38 	.word	0x20006d38
 8001088:	40001800 	.word	0x40001800

0800108c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001090:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <MX_UART4_Init+0x4c>)
 8001092:	4a12      	ldr	r2, [pc, #72]	; (80010dc <MX_UART4_Init+0x50>)
 8001094:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001096:	4b10      	ldr	r3, [pc, #64]	; (80010d8 <MX_UART4_Init+0x4c>)
 8001098:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800109c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800109e:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <MX_UART4_Init+0x4c>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80010a4:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <MX_UART4_Init+0x4c>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80010aa:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <MX_UART4_Init+0x4c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80010b0:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <MX_UART4_Init+0x4c>)
 80010b2:	220c      	movs	r2, #12
 80010b4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010b6:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <MX_UART4_Init+0x4c>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80010bc:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <MX_UART4_Init+0x4c>)
 80010be:	2200      	movs	r2, #0
 80010c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80010c2:	4805      	ldr	r0, [pc, #20]	; (80010d8 <MX_UART4_Init+0x4c>)
 80010c4:	f008 f850 	bl	8009168 <HAL_UART_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80010ce:	f000 f96b 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20006c50 	.word	0x20006c50
 80010dc:	40004c00 	.word	0x40004c00

080010e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	607b      	str	r3, [r7, #4]
 80010ea:	4b0c      	ldr	r3, [pc, #48]	; (800111c <MX_DMA_Init+0x3c>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	4a0b      	ldr	r2, [pc, #44]	; (800111c <MX_DMA_Init+0x3c>)
 80010f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010f4:	6313      	str	r3, [r2, #48]	; 0x30
 80010f6:	4b09      	ldr	r3, [pc, #36]	; (800111c <MX_DMA_Init+0x3c>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010fe:	607b      	str	r3, [r7, #4]
 8001100:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 7, 0);
 8001102:	2200      	movs	r2, #0
 8001104:	2107      	movs	r1, #7
 8001106:	2038      	movs	r0, #56	; 0x38
 8001108:	f001 fb1e 	bl	8002748 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800110c:	2038      	movs	r0, #56	; 0x38
 800110e:	f001 fb37 	bl	8002780 <HAL_NVIC_EnableIRQ>

}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40023800 	.word	0x40023800

08001120 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08c      	sub	sp, #48	; 0x30
 8001124:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001126:	f107 031c 	add.w	r3, r7, #28
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]
 8001132:	60da      	str	r2, [r3, #12]
 8001134:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	61bb      	str	r3, [r7, #24]
 800113a:	4b65      	ldr	r3, [pc, #404]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	4a64      	ldr	r2, [pc, #400]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 8001140:	f043 0310 	orr.w	r3, r3, #16
 8001144:	6313      	str	r3, [r2, #48]	; 0x30
 8001146:	4b62      	ldr	r3, [pc, #392]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	f003 0310 	and.w	r3, r3, #16
 800114e:	61bb      	str	r3, [r7, #24]
 8001150:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	617b      	str	r3, [r7, #20]
 8001156:	4b5e      	ldr	r3, [pc, #376]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	4a5d      	ldr	r2, [pc, #372]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 800115c:	f043 0304 	orr.w	r3, r3, #4
 8001160:	6313      	str	r3, [r2, #48]	; 0x30
 8001162:	4b5b      	ldr	r3, [pc, #364]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	f003 0304 	and.w	r3, r3, #4
 800116a:	617b      	str	r3, [r7, #20]
 800116c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	613b      	str	r3, [r7, #16]
 8001172:	4b57      	ldr	r3, [pc, #348]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	4a56      	ldr	r2, [pc, #344]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 8001178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800117c:	6313      	str	r3, [r2, #48]	; 0x30
 800117e:	4b54      	ldr	r3, [pc, #336]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001186:	613b      	str	r3, [r7, #16]
 8001188:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	4b50      	ldr	r3, [pc, #320]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	4a4f      	ldr	r2, [pc, #316]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	6313      	str	r3, [r2, #48]	; 0x30
 800119a:	4b4d      	ldr	r3, [pc, #308]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	60bb      	str	r3, [r7, #8]
 80011aa:	4b49      	ldr	r3, [pc, #292]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4a48      	ldr	r2, [pc, #288]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 80011b0:	f043 0302 	orr.w	r3, r3, #2
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	4b46      	ldr	r3, [pc, #280]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	60bb      	str	r3, [r7, #8]
 80011c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	607b      	str	r3, [r7, #4]
 80011c6:	4b42      	ldr	r3, [pc, #264]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	4a41      	ldr	r2, [pc, #260]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 80011cc:	f043 0308 	orr.w	r3, r3, #8
 80011d0:	6313      	str	r3, [r2, #48]	; 0x30
 80011d2:	4b3f      	ldr	r3, [pc, #252]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	f003 0308 	and.w	r3, r3, #8
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VOLT_4_SEL0_Pin|VOLT_4_SEL1_Pin|VOLT_4_SEL2_Pin|TURN3A_Pin
 80011de:	2200      	movs	r2, #0
 80011e0:	f249 116f 	movw	r1, #37231	; 0x916f
 80011e4:	483b      	ldr	r0, [pc, #236]	; (80012d4 <MX_GPIO_Init+0x1b4>)
 80011e6:	f002 f811 	bl	800320c <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_12|GPIO_PIN_15|TURN2A_Pin
                          |TURN2B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TURN3B_Pin|GPIO_PIN_12, GPIO_PIN_RESET);
 80011ea:	2200      	movs	r2, #0
 80011ec:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80011f0:	4839      	ldr	r0, [pc, #228]	; (80012d8 <MX_GPIO_Init+0x1b8>)
 80011f2:	f002 f80b 	bl	800320c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
 80011f6:	2200      	movs	r2, #0
 80011f8:	f248 6140 	movw	r1, #34368	; 0x8640
 80011fc:	4837      	ldr	r0, [pc, #220]	; (80012dc <MX_GPIO_Init+0x1bc>)
 80011fe:	f002 f805 	bl	800320c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|VOLT_3_SEL0_Pin|GPIO_PIN_13|GPIO_PIN_4
 8001202:	2200      	movs	r2, #0
 8001204:	f243 3134 	movw	r1, #13108	; 0x3334
 8001208:	4835      	ldr	r0, [pc, #212]	; (80012e0 <MX_GPIO_Init+0x1c0>)
 800120a:	f001 ffff 	bl	800320c <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|TURN1A_Pin|TURN1B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, VOLT_2_SEL2_Pin|VOLT_3_SEL0D9_Pin|VOLT_3_SEL1_Pin|VOLT_3_SEL2_Pin
 800120e:	2200      	movs	r2, #0
 8001210:	f640 71ff 	movw	r1, #4095	; 0xfff
 8001214:	4833      	ldr	r0, [pc, #204]	; (80012e4 <MX_GPIO_Init+0x1c4>)
 8001216:	f001 fff9 	bl	800320c <HAL_GPIO_WritePin>
                          |VOLT_1_SEL1_Pin|VOLT_1_SEL2_Pin|VOLT_2_SEL0_Pin|VOLT_2_SEL1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : VOLT_4_SEL0_Pin VOLT_4_SEL1_Pin VOLT_4_SEL2_Pin TURN3A_Pin
                           PE8 PE12 PE15 TURN2A_Pin
                           TURN2B_Pin */
  GPIO_InitStruct.Pin = VOLT_4_SEL0_Pin|VOLT_4_SEL1_Pin|VOLT_4_SEL2_Pin|TURN3A_Pin
 800121a:	f249 136f 	movw	r3, #37231	; 0x916f
 800121e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_8|GPIO_PIN_12|GPIO_PIN_15|TURN2A_Pin
                          |TURN2B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001220:	2301      	movs	r3, #1
 8001222:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001228:	2300      	movs	r3, #0
 800122a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800122c:	f107 031c 	add.w	r3, r7, #28
 8001230:	4619      	mov	r1, r3
 8001232:	4828      	ldr	r0, [pc, #160]	; (80012d4 <MX_GPIO_Init+0x1b4>)
 8001234:	f001 fe50 	bl	8002ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BTN_Pin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 8001238:	2310      	movs	r3, #16
 800123a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800123c:	2300      	movs	r3, #0
 800123e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001240:	2301      	movs	r3, #1
 8001242:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 8001244:	f107 031c 	add.w	r3, r7, #28
 8001248:	4619      	mov	r1, r3
 800124a:	4822      	ldr	r0, [pc, #136]	; (80012d4 <MX_GPIO_Init+0x1b4>)
 800124c:	f001 fe44 	bl	8002ed8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TURN3B_Pin PC12 */
  GPIO_InitStruct.Pin = TURN3B_Pin|GPIO_PIN_12;
 8001250:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001254:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001256:	2301      	movs	r3, #1
 8001258:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125e:	2300      	movs	r3, #0
 8001260:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001262:	f107 031c 	add.w	r3, r7, #28
 8001266:	4619      	mov	r1, r3
 8001268:	481b      	ldr	r0, [pc, #108]	; (80012d8 <MX_GPIO_Init+0x1b8>)
 800126a:	f001 fe35 	bl	8002ed8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = LED1_Pin|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
 800126e:	f248 6340 	movw	r3, #34368	; 0x8640
 8001272:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001274:	2301      	movs	r3, #1
 8001276:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127c:	2300      	movs	r3, #0
 800127e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001280:	f107 031c 	add.w	r3, r7, #28
 8001284:	4619      	mov	r1, r3
 8001286:	4815      	ldr	r0, [pc, #84]	; (80012dc <MX_GPIO_Init+0x1bc>)
 8001288:	f001 fe26 	bl	8002ed8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 VOLT_3_SEL0_Pin PB13 PB4
                           PB5 TURN1A_Pin TURN1B_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|VOLT_3_SEL0_Pin|GPIO_PIN_13|GPIO_PIN_4
 800128c:	f243 3334 	movw	r3, #13108	; 0x3334
 8001290:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5|TURN1A_Pin|TURN1B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001292:	2301      	movs	r3, #1
 8001294:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129a:	2300      	movs	r3, #0
 800129c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800129e:	f107 031c 	add.w	r3, r7, #28
 80012a2:	4619      	mov	r1, r3
 80012a4:	480e      	ldr	r0, [pc, #56]	; (80012e0 <MX_GPIO_Init+0x1c0>)
 80012a6:	f001 fe17 	bl	8002ed8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VOLT_2_SEL2_Pin VOLT_3_SEL0D9_Pin VOLT_3_SEL1_Pin VOLT_3_SEL2_Pin
                           VOLT_0_SEL0_Pin VOLT_0_SEL1_Pin VOLT_0_SEL2_Pin VOLT_1_SEL0_Pin
                           VOLT_1_SEL1_Pin VOLT_1_SEL2_Pin VOLT_2_SEL0_Pin VOLT_2_SEL1_Pin */
  GPIO_InitStruct.Pin = VOLT_2_SEL2_Pin|VOLT_3_SEL0D9_Pin|VOLT_3_SEL1_Pin|VOLT_3_SEL2_Pin
 80012aa:	f640 73ff 	movw	r3, #4095	; 0xfff
 80012ae:	61fb      	str	r3, [r7, #28]
                          |VOLT_0_SEL0_Pin|VOLT_0_SEL1_Pin|VOLT_0_SEL2_Pin|VOLT_1_SEL0_Pin
                          |VOLT_1_SEL1_Pin|VOLT_1_SEL2_Pin|VOLT_2_SEL0_Pin|VOLT_2_SEL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b0:	2301      	movs	r3, #1
 80012b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b8:	2300      	movs	r3, #0
 80012ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012bc:	f107 031c 	add.w	r3, r7, #28
 80012c0:	4619      	mov	r1, r3
 80012c2:	4808      	ldr	r0, [pc, #32]	; (80012e4 <MX_GPIO_Init+0x1c4>)
 80012c4:	f001 fe08 	bl	8002ed8 <HAL_GPIO_Init>

}
 80012c8:	bf00      	nop
 80012ca:	3730      	adds	r7, #48	; 0x30
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40023800 	.word	0x40023800
 80012d4:	40021000 	.word	0x40021000
 80012d8:	40020800 	.word	0x40020800
 80012dc:	40020000 	.word	0x40020000
 80012e0:	40020400 	.word	0x40020400
 80012e4:	40020c00 	.word	0x40020c00

080012e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af02      	add	r7, sp, #8
 80012ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a23      	ldr	r2, [pc, #140]	; (8001384 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d101      	bne.n	80012fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012fa:	f000 fd55 	bl	8001da8 <HAL_IncTick>
		  xTaskNotifyFromISR(uiTaskHandle, NOTIF_TICKUI, eSetBits, &higher);
		  portYIELD_FROM_ISR(higher);
	  }
  }
  */
  if (htim->Instance == TIM8) {
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a21      	ldr	r2, [pc, #132]	; (8001388 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d104      	bne.n	8001312 <HAL_TIM_PeriodElapsedCallback+0x2a>
		  ina3221_trigger_conversion();
		  //BaseType_t higher=0;
		  //xTaskNotifyFromISR(ctrlTaskHandle, NOTIF_TIM8, eSetBits, &higher);
		  //portYIELD_FROM_ISR(higher);
	  } else {
		  itm_debug1(DBG_TIM, "tim8",0);
 8001308:	2200      	movs	r2, #0
 800130a:	4920      	ldr	r1, [pc, #128]	; (800138c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800130c:	2001      	movs	r0, #1
 800130e:	f7ff f901 	bl	8000514 <itm_debug1>
	  }
  }
  if (htim->Instance == TIM1) {
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a1e      	ldr	r2, [pc, #120]	; (8001390 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d12f      	bne.n	800137c <HAL_TIM_PeriodElapsedCallback+0x94>
	  uint32_t t1 = __HAL_TIM_GET_COUNTER(&htim1);
 800131c:	4b1d      	ldr	r3, [pc, #116]	; (8001394 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001322:	60fb      	str	r3, [r7, #12]
	  if (1 || (t1<50)) {
		  static uint32_t cnt = 0;
		  itm_debug2(DBG_TIM|DBG_INA3221, "tim1",cnt, t1);
 8001324:	4b1c      	ldr	r3, [pc, #112]	; (8001398 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	461a      	mov	r2, r3
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	491b      	ldr	r1, [pc, #108]	; (800139c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800132e:	2021      	movs	r0, #33	; 0x21
 8001330:	f7ff f90a 	bl	8000548 <itm_debug2>
		  cnt++;
 8001334:	4b18      	ldr	r3, [pc, #96]	; (8001398 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	3301      	adds	r3, #1
 800133a:	4a17      	ldr	r2, [pc, #92]	; (8001398 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800133c:	6013      	str	r3, [r2, #0]
#if INA3221_TASK
		  BaseType_t higher=0;
 800133e:	2300      	movs	r3, #0
 8001340:	60bb      	str	r3, [r7, #8]
		  xTaskNotifyFromISR(ina3221_taskHandle, (cnt%2) ? NOTIF_INA_READ : NOTIF_INA_TRIG, eSetBits, &higher);
 8001342:	4b17      	ldr	r3, [pc, #92]	; (80013a0 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001344:	6818      	ldr	r0, [r3, #0]
 8001346:	4b14      	ldr	r3, [pc, #80]	; (8001398 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <HAL_TIM_PeriodElapsedCallback+0x6e>
 8001352:	2108      	movs	r1, #8
 8001354:	e000      	b.n	8001358 <HAL_TIM_PeriodElapsedCallback+0x70>
 8001356:	2104      	movs	r1, #4
 8001358:	f107 0308 	add.w	r3, r7, #8
 800135c:	9300      	str	r3, [sp, #0]
 800135e:	2300      	movs	r3, #0
 8001360:	2201      	movs	r2, #1
 8001362:	f00d fd5b 	bl	800ee1c <xTaskGenericNotifyFromISR>
		  portYIELD_FROM_ISR(higher);
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d007      	beq.n	800137c <HAL_TIM_PeriodElapsedCallback+0x94>
 800136c:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800136e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	f3bf 8f4f 	dsb	sy
 8001378:	f3bf 8f6f 	isb	sy
		  ina3221_trigger_conversion();
#endif
	  }
  }
  /* USER CODE END Callback 1 */
}
 800137c:	bf00      	nop
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40001400 	.word	0x40001400
 8001388:	40010400 	.word	0x40010400
 800138c:	0801935c 	.word	0x0801935c
 8001390:	40010000 	.word	0x40010000
 8001394:	200067a8 	.word	0x200067a8
 8001398:	2000062c 	.word	0x2000062c
 800139c:	08019364 	.word	0x08019364
 80013a0:	20006d34 	.word	0x20006d34
 80013a4:	e000ed04 	.word	0xe000ed04

080013a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	for (;;) {
 80013ac:	e7fe      	b.n	80013ac <Error_Handler+0x4>
	...

080013b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	607b      	str	r3, [r7, #4]
 80013ba:	4b10      	ldr	r3, [pc, #64]	; (80013fc <HAL_MspInit+0x4c>)
 80013bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013be:	4a0f      	ldr	r2, [pc, #60]	; (80013fc <HAL_MspInit+0x4c>)
 80013c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013c4:	6453      	str	r3, [r2, #68]	; 0x44
 80013c6:	4b0d      	ldr	r3, [pc, #52]	; (80013fc <HAL_MspInit+0x4c>)
 80013c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ce:	607b      	str	r3, [r7, #4]
 80013d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	603b      	str	r3, [r7, #0]
 80013d6:	4b09      	ldr	r3, [pc, #36]	; (80013fc <HAL_MspInit+0x4c>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	4a08      	ldr	r2, [pc, #32]	; (80013fc <HAL_MspInit+0x4c>)
 80013dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013e0:	6413      	str	r3, [r2, #64]	; 0x40
 80013e2:	4b06      	ldr	r3, [pc, #24]	; (80013fc <HAL_MspInit+0x4c>)
 80013e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ea:	603b      	str	r3, [r7, #0]
 80013ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	40023800 	.word	0x40023800

08001400 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b08c      	sub	sp, #48	; 0x30
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001408:	f107 031c 	add.w	r3, r7, #28
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a4a      	ldr	r2, [pc, #296]	; (8001548 <HAL_ADC_MspInit+0x148>)
 800141e:	4293      	cmp	r3, r2
 8001420:	f040 808d 	bne.w	800153e <HAL_ADC_MspInit+0x13e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001424:	2300      	movs	r3, #0
 8001426:	61bb      	str	r3, [r7, #24]
 8001428:	4b48      	ldr	r3, [pc, #288]	; (800154c <HAL_ADC_MspInit+0x14c>)
 800142a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142c:	4a47      	ldr	r2, [pc, #284]	; (800154c <HAL_ADC_MspInit+0x14c>)
 800142e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001432:	6453      	str	r3, [r2, #68]	; 0x44
 8001434:	4b45      	ldr	r3, [pc, #276]	; (800154c <HAL_ADC_MspInit+0x14c>)
 8001436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800143c:	61bb      	str	r3, [r7, #24]
 800143e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]
 8001444:	4b41      	ldr	r3, [pc, #260]	; (800154c <HAL_ADC_MspInit+0x14c>)
 8001446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001448:	4a40      	ldr	r2, [pc, #256]	; (800154c <HAL_ADC_MspInit+0x14c>)
 800144a:	f043 0304 	orr.w	r3, r3, #4
 800144e:	6313      	str	r3, [r2, #48]	; 0x30
 8001450:	4b3e      	ldr	r3, [pc, #248]	; (800154c <HAL_ADC_MspInit+0x14c>)
 8001452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001454:	f003 0304 	and.w	r3, r3, #4
 8001458:	617b      	str	r3, [r7, #20]
 800145a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800145c:	2300      	movs	r3, #0
 800145e:	613b      	str	r3, [r7, #16]
 8001460:	4b3a      	ldr	r3, [pc, #232]	; (800154c <HAL_ADC_MspInit+0x14c>)
 8001462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001464:	4a39      	ldr	r2, [pc, #228]	; (800154c <HAL_ADC_MspInit+0x14c>)
 8001466:	f043 0301 	orr.w	r3, r3, #1
 800146a:	6313      	str	r3, [r2, #48]	; 0x30
 800146c:	4b37      	ldr	r3, [pc, #220]	; (800154c <HAL_ADC_MspInit+0x14c>)
 800146e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001470:	f003 0301 	and.w	r3, r3, #1
 8001474:	613b      	str	r3, [r7, #16]
 8001476:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001478:	2300      	movs	r3, #0
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	4b33      	ldr	r3, [pc, #204]	; (800154c <HAL_ADC_MspInit+0x14c>)
 800147e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001480:	4a32      	ldr	r2, [pc, #200]	; (800154c <HAL_ADC_MspInit+0x14c>)
 8001482:	f043 0302 	orr.w	r3, r3, #2
 8001486:	6313      	str	r3, [r2, #48]	; 0x30
 8001488:	4b30      	ldr	r3, [pc, #192]	; (800154c <HAL_ADC_MspInit+0x14c>)
 800148a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148c:	f003 0302 	and.w	r3, r3, #2
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = ADC_4_V0_Pin|ADC_4_V1_Pin|GPIO_PIN_2|GPIO_PIN_3
 8001494:	231f      	movs	r3, #31
 8001496:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001498:	2303      	movs	r3, #3
 800149a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014a0:	f107 031c 	add.w	r3, r7, #28
 80014a4:	4619      	mov	r1, r3
 80014a6:	482a      	ldr	r0, [pc, #168]	; (8001550 <HAL_ADC_MspInit+0x150>)
 80014a8:	f001 fd16 	bl	8002ed8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|ADC_1_V0_Pin|GPIO_PIN_3
 80014ac:	233f      	movs	r3, #63	; 0x3f
 80014ae:	61fb      	str	r3, [r7, #28]
                          |ADC_2_V0_Pin|ADC_2_V1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014b0:	2303      	movs	r3, #3
 80014b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b8:	f107 031c 	add.w	r3, r7, #28
 80014bc:	4619      	mov	r1, r3
 80014be:	4825      	ldr	r0, [pc, #148]	; (8001554 <HAL_ADC_MspInit+0x154>)
 80014c0:	f001 fd0a 	bl	8002ed8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_3_V1_Pin;
 80014c4:	2301      	movs	r3, #1
 80014c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014c8:	2303      	movs	r3, #3
 80014ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_3_V1_GPIO_Port, &GPIO_InitStruct);
 80014d0:	f107 031c 	add.w	r3, r7, #28
 80014d4:	4619      	mov	r1, r3
 80014d6:	4820      	ldr	r0, [pc, #128]	; (8001558 <HAL_ADC_MspInit+0x158>)
 80014d8:	f001 fcfe 	bl	8002ed8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80014dc:	4b1f      	ldr	r3, [pc, #124]	; (800155c <HAL_ADC_MspInit+0x15c>)
 80014de:	4a20      	ldr	r2, [pc, #128]	; (8001560 <HAL_ADC_MspInit+0x160>)
 80014e0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80014e2:	4b1e      	ldr	r3, [pc, #120]	; (800155c <HAL_ADC_MspInit+0x15c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014e8:	4b1c      	ldr	r3, [pc, #112]	; (800155c <HAL_ADC_MspInit+0x15c>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014ee:	4b1b      	ldr	r3, [pc, #108]	; (800155c <HAL_ADC_MspInit+0x15c>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80014f4:	4b19      	ldr	r3, [pc, #100]	; (800155c <HAL_ADC_MspInit+0x15c>)
 80014f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014fa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014fc:	4b17      	ldr	r3, [pc, #92]	; (800155c <HAL_ADC_MspInit+0x15c>)
 80014fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001502:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001504:	4b15      	ldr	r3, [pc, #84]	; (800155c <HAL_ADC_MspInit+0x15c>)
 8001506:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800150a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800150c:	4b13      	ldr	r3, [pc, #76]	; (800155c <HAL_ADC_MspInit+0x15c>)
 800150e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001512:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001514:	4b11      	ldr	r3, [pc, #68]	; (800155c <HAL_ADC_MspInit+0x15c>)
 8001516:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800151a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800151c:	4b0f      	ldr	r3, [pc, #60]	; (800155c <HAL_ADC_MspInit+0x15c>)
 800151e:	2200      	movs	r2, #0
 8001520:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001522:	480e      	ldr	r0, [pc, #56]	; (800155c <HAL_ADC_MspInit+0x15c>)
 8001524:	f001 f93a 	bl	800279c <HAL_DMA_Init>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <HAL_ADC_MspInit+0x132>
    {
      Error_Handler();
 800152e:	f7ff ff3b 	bl	80013a8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a09      	ldr	r2, [pc, #36]	; (800155c <HAL_ADC_MspInit+0x15c>)
 8001536:	639a      	str	r2, [r3, #56]	; 0x38
 8001538:	4a08      	ldr	r2, [pc, #32]	; (800155c <HAL_ADC_MspInit+0x15c>)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800153e:	bf00      	nop
 8001540:	3730      	adds	r7, #48	; 0x30
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40012000 	.word	0x40012000
 800154c:	40023800 	.word	0x40023800
 8001550:	40020800 	.word	0x40020800
 8001554:	40020000 	.word	0x40020000
 8001558:	40020400 	.word	0x40020400
 800155c:	20006328 	.word	0x20006328
 8001560:	40026410 	.word	0x40026410

08001564 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08c      	sub	sp, #48	; 0x30
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156c:	f107 031c 	add.w	r3, r7, #28
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	605a      	str	r2, [r3, #4]
 8001576:	609a      	str	r2, [r3, #8]
 8001578:	60da      	str	r2, [r3, #12]
 800157a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a52      	ldr	r2, [pc, #328]	; (80016cc <HAL_I2C_MspInit+0x168>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d13c      	bne.n	8001600 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	61bb      	str	r3, [r7, #24]
 800158a:	4b51      	ldr	r3, [pc, #324]	; (80016d0 <HAL_I2C_MspInit+0x16c>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	4a50      	ldr	r2, [pc, #320]	; (80016d0 <HAL_I2C_MspInit+0x16c>)
 8001590:	f043 0302 	orr.w	r3, r3, #2
 8001594:	6313      	str	r3, [r2, #48]	; 0x30
 8001596:	4b4e      	ldr	r3, [pc, #312]	; (80016d0 <HAL_I2C_MspInit+0x16c>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	61bb      	str	r3, [r7, #24]
 80015a0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015a2:	23c0      	movs	r3, #192	; 0xc0
 80015a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015a6:	2312      	movs	r3, #18
 80015a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015aa:	2301      	movs	r3, #1
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ae:	2303      	movs	r3, #3
 80015b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015b2:	2304      	movs	r3, #4
 80015b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b6:	f107 031c 	add.w	r3, r7, #28
 80015ba:	4619      	mov	r1, r3
 80015bc:	4845      	ldr	r0, [pc, #276]	; (80016d4 <HAL_I2C_MspInit+0x170>)
 80015be:	f001 fc8b 	bl	8002ed8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	617b      	str	r3, [r7, #20]
 80015c6:	4b42      	ldr	r3, [pc, #264]	; (80016d0 <HAL_I2C_MspInit+0x16c>)
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	4a41      	ldr	r2, [pc, #260]	; (80016d0 <HAL_I2C_MspInit+0x16c>)
 80015cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015d0:	6413      	str	r3, [r2, #64]	; 0x40
 80015d2:	4b3f      	ldr	r3, [pc, #252]	; (80016d0 <HAL_I2C_MspInit+0x16c>)
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015da:	617b      	str	r3, [r7, #20]
 80015dc:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80015de:	2200      	movs	r2, #0
 80015e0:	2100      	movs	r1, #0
 80015e2:	201f      	movs	r0, #31
 80015e4:	f001 f8b0 	bl	8002748 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80015e8:	201f      	movs	r0, #31
 80015ea:	f001 f8c9 	bl	8002780 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80015ee:	2200      	movs	r2, #0
 80015f0:	2100      	movs	r1, #0
 80015f2:	2020      	movs	r0, #32
 80015f4:	f001 f8a8 	bl	8002748 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80015f8:	2020      	movs	r0, #32
 80015fa:	f001 f8c1 	bl	8002780 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80015fe:	e060      	b.n	80016c2 <HAL_I2C_MspInit+0x15e>
  else if(hi2c->Instance==I2C3)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a34      	ldr	r2, [pc, #208]	; (80016d8 <HAL_I2C_MspInit+0x174>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d15b      	bne.n	80016c2 <HAL_I2C_MspInit+0x15e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	613b      	str	r3, [r7, #16]
 800160e:	4b30      	ldr	r3, [pc, #192]	; (80016d0 <HAL_I2C_MspInit+0x16c>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	4a2f      	ldr	r2, [pc, #188]	; (80016d0 <HAL_I2C_MspInit+0x16c>)
 8001614:	f043 0304 	orr.w	r3, r3, #4
 8001618:	6313      	str	r3, [r2, #48]	; 0x30
 800161a:	4b2d      	ldr	r3, [pc, #180]	; (80016d0 <HAL_I2C_MspInit+0x16c>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	f003 0304 	and.w	r3, r3, #4
 8001622:	613b      	str	r3, [r7, #16]
 8001624:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	4b29      	ldr	r3, [pc, #164]	; (80016d0 <HAL_I2C_MspInit+0x16c>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	4a28      	ldr	r2, [pc, #160]	; (80016d0 <HAL_I2C_MspInit+0x16c>)
 8001630:	f043 0301 	orr.w	r3, r3, #1
 8001634:	6313      	str	r3, [r2, #48]	; 0x30
 8001636:	4b26      	ldr	r3, [pc, #152]	; (80016d0 <HAL_I2C_MspInit+0x16c>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001642:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001646:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001648:	2312      	movs	r3, #18
 800164a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800164c:	2301      	movs	r3, #1
 800164e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001650:	2303      	movs	r3, #3
 8001652:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001654:	2304      	movs	r3, #4
 8001656:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001658:	f107 031c 	add.w	r3, r7, #28
 800165c:	4619      	mov	r1, r3
 800165e:	481f      	ldr	r0, [pc, #124]	; (80016dc <HAL_I2C_MspInit+0x178>)
 8001660:	f001 fc3a 	bl	8002ed8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001664:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001668:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800166a:	2312      	movs	r3, #18
 800166c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800166e:	2301      	movs	r3, #1
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001672:	2303      	movs	r3, #3
 8001674:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001676:	2304      	movs	r3, #4
 8001678:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167a:	f107 031c 	add.w	r3, r7, #28
 800167e:	4619      	mov	r1, r3
 8001680:	4817      	ldr	r0, [pc, #92]	; (80016e0 <HAL_I2C_MspInit+0x17c>)
 8001682:	f001 fc29 	bl	8002ed8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	60bb      	str	r3, [r7, #8]
 800168a:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <HAL_I2C_MspInit+0x16c>)
 800168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168e:	4a10      	ldr	r2, [pc, #64]	; (80016d0 <HAL_I2C_MspInit+0x16c>)
 8001690:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001694:	6413      	str	r3, [r2, #64]	; 0x40
 8001696:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <HAL_I2C_MspInit+0x16c>)
 8001698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 5, 0);
 80016a2:	2200      	movs	r2, #0
 80016a4:	2105      	movs	r1, #5
 80016a6:	2048      	movs	r0, #72	; 0x48
 80016a8:	f001 f84e 	bl	8002748 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80016ac:	2048      	movs	r0, #72	; 0x48
 80016ae:	f001 f867 	bl	8002780 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 5, 0);
 80016b2:	2200      	movs	r2, #0
 80016b4:	2105      	movs	r1, #5
 80016b6:	2049      	movs	r0, #73	; 0x49
 80016b8:	f001 f846 	bl	8002748 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 80016bc:	2049      	movs	r0, #73	; 0x49
 80016be:	f001 f85f 	bl	8002780 <HAL_NVIC_EnableIRQ>
}
 80016c2:	bf00      	nop
 80016c4:	3730      	adds	r7, #48	; 0x30
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40005400 	.word	0x40005400
 80016d0:	40023800 	.word	0x40023800
 80016d4:	40020400 	.word	0x40020400
 80016d8:	40005c00 	.word	0x40005c00
 80016dc:	40020800 	.word	0x40020800
 80016e0:	40020000 	.word	0x40020000

080016e4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a05      	ldr	r2, [pc, #20]	; (8001708 <HAL_RTC_MspInit+0x24>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d102      	bne.n	80016fc <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80016f6:	4b05      	ldr	r3, [pc, #20]	; (800170c <HAL_RTC_MspInit+0x28>)
 80016f8:	2201      	movs	r2, #1
 80016fa:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80016fc:	bf00      	nop
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	40002800 	.word	0x40002800
 800170c:	42470e3c 	.word	0x42470e3c

08001710 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b088      	sub	sp, #32
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a36      	ldr	r2, [pc, #216]	; (80017f8 <HAL_TIM_Base_MspInit+0xe8>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d116      	bne.n	8001750 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	61fb      	str	r3, [r7, #28]
 8001726:	4b35      	ldr	r3, [pc, #212]	; (80017fc <HAL_TIM_Base_MspInit+0xec>)
 8001728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172a:	4a34      	ldr	r2, [pc, #208]	; (80017fc <HAL_TIM_Base_MspInit+0xec>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	6453      	str	r3, [r2, #68]	; 0x44
 8001732:	4b32      	ldr	r3, [pc, #200]	; (80017fc <HAL_TIM_Base_MspInit+0xec>)
 8001734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	61fb      	str	r3, [r7, #28]
 800173c:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 7, 0);
 800173e:	2200      	movs	r2, #0
 8001740:	2107      	movs	r1, #7
 8001742:	2019      	movs	r0, #25
 8001744:	f001 f800 	bl	8002748 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001748:	2019      	movs	r0, #25
 800174a:	f001 f819 	bl	8002780 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800174e:	e04e      	b.n	80017ee <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM2)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001758:	d10e      	bne.n	8001778 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	61bb      	str	r3, [r7, #24]
 800175e:	4b27      	ldr	r3, [pc, #156]	; (80017fc <HAL_TIM_Base_MspInit+0xec>)
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	4a26      	ldr	r2, [pc, #152]	; (80017fc <HAL_TIM_Base_MspInit+0xec>)
 8001764:	f043 0301 	orr.w	r3, r3, #1
 8001768:	6413      	str	r3, [r2, #64]	; 0x40
 800176a:	4b24      	ldr	r3, [pc, #144]	; (80017fc <HAL_TIM_Base_MspInit+0xec>)
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	61bb      	str	r3, [r7, #24]
 8001774:	69bb      	ldr	r3, [r7, #24]
}
 8001776:	e03a      	b.n	80017ee <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM3)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a20      	ldr	r2, [pc, #128]	; (8001800 <HAL_TIM_Base_MspInit+0xf0>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d10e      	bne.n	80017a0 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	617b      	str	r3, [r7, #20]
 8001786:	4b1d      	ldr	r3, [pc, #116]	; (80017fc <HAL_TIM_Base_MspInit+0xec>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	4a1c      	ldr	r2, [pc, #112]	; (80017fc <HAL_TIM_Base_MspInit+0xec>)
 800178c:	f043 0302 	orr.w	r3, r3, #2
 8001790:	6413      	str	r3, [r2, #64]	; 0x40
 8001792:	4b1a      	ldr	r3, [pc, #104]	; (80017fc <HAL_TIM_Base_MspInit+0xec>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	617b      	str	r3, [r7, #20]
 800179c:	697b      	ldr	r3, [r7, #20]
}
 800179e:	e026      	b.n	80017ee <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM8)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a17      	ldr	r2, [pc, #92]	; (8001804 <HAL_TIM_Base_MspInit+0xf4>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d10e      	bne.n	80017c8 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	613b      	str	r3, [r7, #16]
 80017ae:	4b13      	ldr	r3, [pc, #76]	; (80017fc <HAL_TIM_Base_MspInit+0xec>)
 80017b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b2:	4a12      	ldr	r2, [pc, #72]	; (80017fc <HAL_TIM_Base_MspInit+0xec>)
 80017b4:	f043 0302 	orr.w	r3, r3, #2
 80017b8:	6453      	str	r3, [r2, #68]	; 0x44
 80017ba:	4b10      	ldr	r3, [pc, #64]	; (80017fc <HAL_TIM_Base_MspInit+0xec>)
 80017bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	613b      	str	r3, [r7, #16]
 80017c4:	693b      	ldr	r3, [r7, #16]
}
 80017c6:	e012      	b.n	80017ee <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM12)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a0e      	ldr	r2, [pc, #56]	; (8001808 <HAL_TIM_Base_MspInit+0xf8>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d10d      	bne.n	80017ee <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	4b09      	ldr	r3, [pc, #36]	; (80017fc <HAL_TIM_Base_MspInit+0xec>)
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	4a08      	ldr	r2, [pc, #32]	; (80017fc <HAL_TIM_Base_MspInit+0xec>)
 80017dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017e0:	6413      	str	r3, [r2, #64]	; 0x40
 80017e2:	4b06      	ldr	r3, [pc, #24]	; (80017fc <HAL_TIM_Base_MspInit+0xec>)
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]
}
 80017ee:	bf00      	nop
 80017f0:	3720      	adds	r7, #32
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40010000 	.word	0x40010000
 80017fc:	40023800 	.word	0x40023800
 8001800:	40000400 	.word	0x40000400
 8001804:	40010400 	.word	0x40010400
 8001808:	40001800 	.word	0x40001800

0800180c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b08a      	sub	sp, #40	; 0x28
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001814:	f107 0314 	add.w	r3, r7, #20
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	609a      	str	r2, [r3, #8]
 8001820:	60da      	str	r2, [r3, #12]
 8001822:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a19      	ldr	r2, [pc, #100]	; (8001890 <HAL_TIM_Encoder_MspInit+0x84>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d12c      	bne.n	8001888 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	613b      	str	r3, [r7, #16]
 8001832:	4b18      	ldr	r3, [pc, #96]	; (8001894 <HAL_TIM_Encoder_MspInit+0x88>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	4a17      	ldr	r2, [pc, #92]	; (8001894 <HAL_TIM_Encoder_MspInit+0x88>)
 8001838:	f043 0304 	orr.w	r3, r3, #4
 800183c:	6413      	str	r3, [r2, #64]	; 0x40
 800183e:	4b15      	ldr	r3, [pc, #84]	; (8001894 <HAL_TIM_Encoder_MspInit+0x88>)
 8001840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001842:	f003 0304 	and.w	r3, r3, #4
 8001846:	613b      	str	r3, [r7, #16]
 8001848:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	60fb      	str	r3, [r7, #12]
 800184e:	4b11      	ldr	r3, [pc, #68]	; (8001894 <HAL_TIM_Encoder_MspInit+0x88>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	4a10      	ldr	r2, [pc, #64]	; (8001894 <HAL_TIM_Encoder_MspInit+0x88>)
 8001854:	f043 0308 	orr.w	r3, r3, #8
 8001858:	6313      	str	r3, [r2, #48]	; 0x30
 800185a:	4b0e      	ldr	r3, [pc, #56]	; (8001894 <HAL_TIM_Encoder_MspInit+0x88>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	f003 0308 	and.w	r3, r3, #8
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = ROT1_Pin|ROT2_Pin;
 8001866:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800186a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186c:	2302      	movs	r3, #2
 800186e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001870:	2301      	movs	r3, #1
 8001872:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001874:	2300      	movs	r3, #0
 8001876:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001878:	2302      	movs	r3, #2
 800187a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800187c:	f107 0314 	add.w	r3, r7, #20
 8001880:	4619      	mov	r1, r3
 8001882:	4805      	ldr	r0, [pc, #20]	; (8001898 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001884:	f001 fb28 	bl	8002ed8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001888:	bf00      	nop
 800188a:	3728      	adds	r7, #40	; 0x28
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40000800 	.word	0x40000800
 8001894:	40023800 	.word	0x40023800
 8001898:	40020c00 	.word	0x40020c00

0800189c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b08c      	sub	sp, #48	; 0x30
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a4:	f107 031c 	add.w	r3, r7, #28
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
 80018b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a59      	ldr	r2, [pc, #356]	; (8001a20 <HAL_TIM_MspPostInit+0x184>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d11f      	bne.n	80018fe <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	61bb      	str	r3, [r7, #24]
 80018c2:	4b58      	ldr	r3, [pc, #352]	; (8001a24 <HAL_TIM_MspPostInit+0x188>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	4a57      	ldr	r2, [pc, #348]	; (8001a24 <HAL_TIM_MspPostInit+0x188>)
 80018c8:	f043 0310 	orr.w	r3, r3, #16
 80018cc:	6313      	str	r3, [r2, #48]	; 0x30
 80018ce:	4b55      	ldr	r3, [pc, #340]	; (8001a24 <HAL_TIM_MspPostInit+0x188>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	f003 0310 	and.w	r3, r3, #16
 80018d6:	61bb      	str	r3, [r7, #24]
 80018d8:	69bb      	ldr	r3, [r7, #24]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = PWM_0_1_Pin|PWM_0_1E11_Pin|PWM_1_0_Pin|PWM_1_1_Pin;
 80018da:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 80018de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e0:	2302      	movs	r3, #2
 80018e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80018e8:	2301      	movs	r3, #1
 80018ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018ec:	2301      	movs	r3, #1
 80018ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018f0:	f107 031c 	add.w	r3, r7, #28
 80018f4:	4619      	mov	r1, r3
 80018f6:	484c      	ldr	r0, [pc, #304]	; (8001a28 <HAL_TIM_MspPostInit+0x18c>)
 80018f8:	f001 faee 	bl	8002ed8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80018fc:	e08b      	b.n	8001a16 <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM2)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001906:	d11f      	bne.n	8001948 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]
 800190c:	4b45      	ldr	r3, [pc, #276]	; (8001a24 <HAL_TIM_MspPostInit+0x188>)
 800190e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001910:	4a44      	ldr	r2, [pc, #272]	; (8001a24 <HAL_TIM_MspPostInit+0x188>)
 8001912:	f043 0302 	orr.w	r3, r3, #2
 8001916:	6313      	str	r3, [r2, #48]	; 0x30
 8001918:	4b42      	ldr	r3, [pc, #264]	; (8001a24 <HAL_TIM_MspPostInit+0x188>)
 800191a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191c:	f003 0302 	and.w	r3, r3, #2
 8001920:	617b      	str	r3, [r7, #20]
 8001922:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PWM_2_0_Pin|PWM_2_1_Pin;
 8001924:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001928:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192a:	2302      	movs	r3, #2
 800192c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192e:	2300      	movs	r3, #0
 8001930:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001932:	2300      	movs	r3, #0
 8001934:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001936:	2301      	movs	r3, #1
 8001938:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800193a:	f107 031c 	add.w	r3, r7, #28
 800193e:	4619      	mov	r1, r3
 8001940:	483a      	ldr	r0, [pc, #232]	; (8001a2c <HAL_TIM_MspPostInit+0x190>)
 8001942:	f001 fac9 	bl	8002ed8 <HAL_GPIO_Init>
}
 8001946:	e066      	b.n	8001a16 <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM3)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a38      	ldr	r2, [pc, #224]	; (8001a30 <HAL_TIM_MspPostInit+0x194>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d13d      	bne.n	80019ce <HAL_TIM_MspPostInit+0x132>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	613b      	str	r3, [r7, #16]
 8001956:	4b33      	ldr	r3, [pc, #204]	; (8001a24 <HAL_TIM_MspPostInit+0x188>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	4a32      	ldr	r2, [pc, #200]	; (8001a24 <HAL_TIM_MspPostInit+0x188>)
 800195c:	f043 0302 	orr.w	r3, r3, #2
 8001960:	6313      	str	r3, [r2, #48]	; 0x30
 8001962:	4b30      	ldr	r3, [pc, #192]	; (8001a24 <HAL_TIM_MspPostInit+0x188>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	613b      	str	r3, [r7, #16]
 800196c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	4b2c      	ldr	r3, [pc, #176]	; (8001a24 <HAL_TIM_MspPostInit+0x188>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	4a2b      	ldr	r2, [pc, #172]	; (8001a24 <HAL_TIM_MspPostInit+0x188>)
 8001978:	f043 0304 	orr.w	r3, r3, #4
 800197c:	6313      	str	r3, [r2, #48]	; 0x30
 800197e:	4b29      	ldr	r3, [pc, #164]	; (8001a24 <HAL_TIM_MspPostInit+0x188>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	f003 0304 	and.w	r3, r3, #4
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_4_1_Pin;
 800198a:	2302      	movs	r3, #2
 800198c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198e:	2302      	movs	r3, #2
 8001990:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001992:	2300      	movs	r3, #0
 8001994:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001996:	2300      	movs	r3, #0
 8001998:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800199a:	2302      	movs	r3, #2
 800199c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PWM_4_1_GPIO_Port, &GPIO_InitStruct);
 800199e:	f107 031c 	add.w	r3, r7, #28
 80019a2:	4619      	mov	r1, r3
 80019a4:	4821      	ldr	r0, [pc, #132]	; (8001a2c <HAL_TIM_MspPostInit+0x190>)
 80019a6:	f001 fa97 	bl	8002ed8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_3_0_Pin|PWM_3_1_Pin|PWM_4_0_Pin;
 80019aa:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80019ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b0:	2302      	movs	r3, #2
 80019b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b8:	2300      	movs	r3, #0
 80019ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019bc:	2302      	movs	r3, #2
 80019be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019c0:	f107 031c 	add.w	r3, r7, #28
 80019c4:	4619      	mov	r1, r3
 80019c6:	481b      	ldr	r0, [pc, #108]	; (8001a34 <HAL_TIM_MspPostInit+0x198>)
 80019c8:	f001 fa86 	bl	8002ed8 <HAL_GPIO_Init>
}
 80019cc:	e023      	b.n	8001a16 <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM12)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a19      	ldr	r2, [pc, #100]	; (8001a38 <HAL_TIM_MspPostInit+0x19c>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d11e      	bne.n	8001a16 <HAL_TIM_MspPostInit+0x17a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d8:	2300      	movs	r3, #0
 80019da:	60bb      	str	r3, [r7, #8]
 80019dc:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <HAL_TIM_MspPostInit+0x188>)
 80019de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e0:	4a10      	ldr	r2, [pc, #64]	; (8001a24 <HAL_TIM_MspPostInit+0x188>)
 80019e2:	f043 0302 	orr.w	r3, r3, #2
 80019e6:	6313      	str	r3, [r2, #48]	; 0x30
 80019e8:	4b0e      	ldr	r3, [pc, #56]	; (8001a24 <HAL_TIM_MspPostInit+0x188>)
 80019ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ec:	f003 0302 	and.w	r3, r3, #2
 80019f0:	60bb      	str	r3, [r7, #8]
 80019f2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_5_0_Pin|PWM_5_1_Pin;
 80019f4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80019f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fa:	2302      	movs	r3, #2
 80019fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a02:	2300      	movs	r3, #0
 8001a04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001a06:	2309      	movs	r3, #9
 8001a08:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a0a:	f107 031c 	add.w	r3, r7, #28
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4806      	ldr	r0, [pc, #24]	; (8001a2c <HAL_TIM_MspPostInit+0x190>)
 8001a12:	f001 fa61 	bl	8002ed8 <HAL_GPIO_Init>
}
 8001a16:	bf00      	nop
 8001a18:	3730      	adds	r7, #48	; 0x30
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40010000 	.word	0x40010000
 8001a24:	40023800 	.word	0x40023800
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	40020400 	.word	0x40020400
 8001a30:	40000400 	.word	0x40000400
 8001a34:	40020800 	.word	0x40020800
 8001a38:	40001800 	.word	0x40001800

08001a3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b08a      	sub	sp, #40	; 0x28
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a44:	f107 0314 	add.w	r3, r7, #20
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	60da      	str	r2, [r3, #12]
 8001a52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a1d      	ldr	r2, [pc, #116]	; (8001ad0 <HAL_UART_MspInit+0x94>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d134      	bne.n	8001ac8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	613b      	str	r3, [r7, #16]
 8001a62:	4b1c      	ldr	r3, [pc, #112]	; (8001ad4 <HAL_UART_MspInit+0x98>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	4a1b      	ldr	r2, [pc, #108]	; (8001ad4 <HAL_UART_MspInit+0x98>)
 8001a68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a6e:	4b19      	ldr	r3, [pc, #100]	; (8001ad4 <HAL_UART_MspInit+0x98>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a76:	613b      	str	r3, [r7, #16]
 8001a78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60fb      	str	r3, [r7, #12]
 8001a7e:	4b15      	ldr	r3, [pc, #84]	; (8001ad4 <HAL_UART_MspInit+0x98>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	4a14      	ldr	r2, [pc, #80]	; (8001ad4 <HAL_UART_MspInit+0x98>)
 8001a84:	f043 0304 	orr.w	r3, r3, #4
 8001a88:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8a:	4b12      	ldr	r3, [pc, #72]	; (8001ad4 <HAL_UART_MspInit+0x98>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	f003 0304 	and.w	r3, r3, #4
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001a96:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001aa8:	2308      	movs	r3, #8
 8001aaa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aac:	f107 0314 	add.w	r3, r7, #20
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4809      	ldr	r0, [pc, #36]	; (8001ad8 <HAL_UART_MspInit+0x9c>)
 8001ab4:	f001 fa10 	bl	8002ed8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001ab8:	2200      	movs	r2, #0
 8001aba:	2105      	movs	r1, #5
 8001abc:	2034      	movs	r0, #52	; 0x34
 8001abe:	f000 fe43 	bl	8002748 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001ac2:	2034      	movs	r0, #52	; 0x34
 8001ac4:	f000 fe5c 	bl	8002780 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001ac8:	bf00      	nop
 8001aca:	3728      	adds	r7, #40	; 0x28
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40004c00 	.word	0x40004c00
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	40020800 	.word	0x40020800

08001adc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b08c      	sub	sp, #48	; 0x30
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8001aec:	2200      	movs	r2, #0
 8001aee:	6879      	ldr	r1, [r7, #4]
 8001af0:	2037      	movs	r0, #55	; 0x37
 8001af2:	f000 fe29 	bl	8002748 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001af6:	2037      	movs	r0, #55	; 0x37
 8001af8:	f000 fe42 	bl	8002780 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001afc:	2300      	movs	r3, #0
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	4b1f      	ldr	r3, [pc, #124]	; (8001b80 <HAL_InitTick+0xa4>)
 8001b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b04:	4a1e      	ldr	r2, [pc, #120]	; (8001b80 <HAL_InitTick+0xa4>)
 8001b06:	f043 0320 	orr.w	r3, r3, #32
 8001b0a:	6413      	str	r3, [r2, #64]	; 0x40
 8001b0c:	4b1c      	ldr	r3, [pc, #112]	; (8001b80 <HAL_InitTick+0xa4>)
 8001b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b10:	f003 0320 	and.w	r3, r3, #32
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b18:	f107 0210 	add.w	r2, r7, #16
 8001b1c:	f107 0314 	add.w	r3, r7, #20
 8001b20:	4611      	mov	r1, r2
 8001b22:	4618      	mov	r0, r3
 8001b24:	f005 ffb6 	bl	8007a94 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001b28:	f005 ff8c 	bl	8007a44 <HAL_RCC_GetPCLK1Freq>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b34:	4a13      	ldr	r2, [pc, #76]	; (8001b84 <HAL_InitTick+0xa8>)
 8001b36:	fba2 2303 	umull	r2, r3, r2, r3
 8001b3a:	0c9b      	lsrs	r3, r3, #18
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001b40:	4b11      	ldr	r3, [pc, #68]	; (8001b88 <HAL_InitTick+0xac>)
 8001b42:	4a12      	ldr	r2, [pc, #72]	; (8001b8c <HAL_InitTick+0xb0>)
 8001b44:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 8001b46:	4b10      	ldr	r3, [pc, #64]	; (8001b88 <HAL_InitTick+0xac>)
 8001b48:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b4c:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001b4e:	4a0e      	ldr	r2, [pc, #56]	; (8001b88 <HAL_InitTick+0xac>)
 8001b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b52:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001b54:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <HAL_InitTick+0xac>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b5a:	4b0b      	ldr	r3, [pc, #44]	; (8001b88 <HAL_InitTick+0xac>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8001b60:	4809      	ldr	r0, [pc, #36]	; (8001b88 <HAL_InitTick+0xac>)
 8001b62:	f006 f990 	bl	8007e86 <HAL_TIM_Base_Init>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d104      	bne.n	8001b76 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8001b6c:	4806      	ldr	r0, [pc, #24]	; (8001b88 <HAL_InitTick+0xac>)
 8001b6e:	f006 f9d9 	bl	8007f24 <HAL_TIM_Base_Start_IT>
 8001b72:	4603      	mov	r3, r0
 8001b74:	e000      	b.n	8001b78 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3730      	adds	r7, #48	; 0x30
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40023800 	.word	0x40023800
 8001b84:	431bde83 	.word	0x431bde83
 8001b88:	20006f78 	.word	0x20006f78
 8001b8c:	40001400 	.word	0x40001400

08001b90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b94:	bf00      	nop
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr

08001b9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ba2:	e7fe      	b.n	8001ba2 <HardFault_Handler+0x4>

08001ba4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ba8:	e7fe      	b.n	8001ba8 <MemManage_Handler+0x4>

08001baa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001baa:	b480      	push	{r7}
 8001bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bae:	e7fe      	b.n	8001bae <BusFault_Handler+0x4>

08001bb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bb4:	e7fe      	b.n	8001bb4 <UsageFault_Handler+0x4>

08001bb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bc8:	4802      	ldr	r0, [pc, #8]	; (8001bd4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001bca:	f006 fb64 	bl	8008296 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	200067a8 	.word	0x200067a8

08001bd8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001bdc:	4802      	ldr	r0, [pc, #8]	; (8001be8 <I2C1_EV_IRQHandler+0x10>)
 8001bde:	f002 f973 	bl	8003ec8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	20005d90 	.word	0x20005d90

08001bec <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001bf0:	4802      	ldr	r0, [pc, #8]	; (8001bfc <I2C1_ER_IRQHandler+0x10>)
 8001bf2:	f002 fad6 	bl	80041a2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001bf6:	bf00      	nop
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	20005d90 	.word	0x20005d90

08001c00 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001c04:	4802      	ldr	r0, [pc, #8]	; (8001c10 <UART4_IRQHandler+0x10>)
 8001c06:	f007 fafd 	bl	8009204 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	20006c50 	.word	0x20006c50

08001c14 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001c18:	4802      	ldr	r0, [pc, #8]	; (8001c24 <TIM7_IRQHandler+0x10>)
 8001c1a:	f006 fb3c 	bl	8008296 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20006f78 	.word	0x20006f78

08001c28 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c2c:	4802      	ldr	r0, [pc, #8]	; (8001c38 <DMA2_Stream0_IRQHandler+0x10>)
 8001c2e:	f000 fedd 	bl	80029ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20006328 	.word	0x20006328

08001c3c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001c40:	4802      	ldr	r0, [pc, #8]	; (8001c4c <OTG_FS_IRQHandler+0x10>)
 8001c42:	f004 fa91 	bl	8006168 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	200084cc 	.word	0x200084cc

08001c50 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8001c54:	4802      	ldr	r0, [pc, #8]	; (8001c60 <I2C3_EV_IRQHandler+0x10>)
 8001c56:	f002 f937 	bl	8003ec8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	20005624 	.word	0x20005624

08001c64 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8001c68:	4802      	ldr	r0, [pc, #8]	; (8001c74 <I2C3_ER_IRQHandler+0x10>)
 8001c6a:	f002 fa9a 	bl	80041a2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8001c6e:	bf00      	nop
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20005624 	.word	0x20005624

08001c78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c80:	4a14      	ldr	r2, [pc, #80]	; (8001cd4 <_sbrk+0x5c>)
 8001c82:	4b15      	ldr	r3, [pc, #84]	; (8001cd8 <_sbrk+0x60>)
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c8c:	4b13      	ldr	r3, [pc, #76]	; (8001cdc <_sbrk+0x64>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d102      	bne.n	8001c9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c94:	4b11      	ldr	r3, [pc, #68]	; (8001cdc <_sbrk+0x64>)
 8001c96:	4a12      	ldr	r2, [pc, #72]	; (8001ce0 <_sbrk+0x68>)
 8001c98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c9a:	4b10      	ldr	r3, [pc, #64]	; (8001cdc <_sbrk+0x64>)
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d207      	bcs.n	8001cb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ca8:	f017 f9b6 	bl	8019018 <__errno>
 8001cac:	4602      	mov	r2, r0
 8001cae:	230c      	movs	r3, #12
 8001cb0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001cb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cb6:	e009      	b.n	8001ccc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cb8:	4b08      	ldr	r3, [pc, #32]	; (8001cdc <_sbrk+0x64>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cbe:	4b07      	ldr	r3, [pc, #28]	; (8001cdc <_sbrk+0x64>)
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	4a05      	ldr	r2, [pc, #20]	; (8001cdc <_sbrk+0x64>)
 8001cc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cca:	68fb      	ldr	r3, [r7, #12]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3718      	adds	r7, #24
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	20020000 	.word	0x20020000
 8001cd8:	00000400 	.word	0x00000400
 8001cdc:	20000630 	.word	0x20000630
 8001ce0:	20009148 	.word	0x20009148

08001ce4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ce8:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <SystemInit+0x28>)
 8001cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cee:	4a07      	ldr	r2, [pc, #28]	; (8001d0c <SystemInit+0x28>)
 8001cf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001cf8:	4b04      	ldr	r3, [pc, #16]	; (8001d0c <SystemInit+0x28>)
 8001cfa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001cfe:	609a      	str	r2, [r3, #8]
#endif
}
 8001d00:	bf00      	nop
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d48 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001d14:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d16:	e003      	b.n	8001d20 <LoopCopyDataInit>

08001d18 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d18:	4b0c      	ldr	r3, [pc, #48]	; (8001d4c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001d1a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d1c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d1e:	3104      	adds	r1, #4

08001d20 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d20:	480b      	ldr	r0, [pc, #44]	; (8001d50 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001d22:	4b0c      	ldr	r3, [pc, #48]	; (8001d54 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001d24:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d26:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d28:	d3f6      	bcc.n	8001d18 <CopyDataInit>
  ldr  r2, =_sbss
 8001d2a:	4a0b      	ldr	r2, [pc, #44]	; (8001d58 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001d2c:	e002      	b.n	8001d34 <LoopFillZerobss>

08001d2e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001d2e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001d30:	f842 3b04 	str.w	r3, [r2], #4

08001d34 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001d34:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001d36:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001d38:	d3f9      	bcc.n	8001d2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d3a:	f7ff ffd3 	bl	8001ce4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d3e:	f017 f971 	bl	8019024 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d42:	f7fe fc1d 	bl	8000580 <main>
  bx  lr    
 8001d46:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d48:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001d4c:	0801bc14 	.word	0x0801bc14
  ldr  r0, =_sdata
 8001d50:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001d54:	2000060c 	.word	0x2000060c
  ldr  r2, =_sbss
 8001d58:	20000610 	.word	0x20000610
  ldr  r3, = _ebss
 8001d5c:	20009148 	.word	0x20009148

08001d60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d60:	e7fe      	b.n	8001d60 <ADC_IRQHandler>
	...

08001d64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d68:	4b0e      	ldr	r3, [pc, #56]	; (8001da4 <HAL_Init+0x40>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a0d      	ldr	r2, [pc, #52]	; (8001da4 <HAL_Init+0x40>)
 8001d6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d74:	4b0b      	ldr	r3, [pc, #44]	; (8001da4 <HAL_Init+0x40>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a0a      	ldr	r2, [pc, #40]	; (8001da4 <HAL_Init+0x40>)
 8001d7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d80:	4b08      	ldr	r3, [pc, #32]	; (8001da4 <HAL_Init+0x40>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a07      	ldr	r2, [pc, #28]	; (8001da4 <HAL_Init+0x40>)
 8001d86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d8c:	2003      	movs	r0, #3
 8001d8e:	f000 fcd0 	bl	8002732 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d92:	2000      	movs	r0, #0
 8001d94:	f7ff fea2 	bl	8001adc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d98:	f7ff fb0a 	bl	80013b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40023c00 	.word	0x40023c00

08001da8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dac:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <HAL_IncTick+0x20>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	461a      	mov	r2, r3
 8001db2:	4b06      	ldr	r3, [pc, #24]	; (8001dcc <HAL_IncTick+0x24>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4413      	add	r3, r2
 8001db8:	4a04      	ldr	r2, [pc, #16]	; (8001dcc <HAL_IncTick+0x24>)
 8001dba:	6013      	str	r3, [r2, #0]
}
 8001dbc:	bf00      	nop
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	20000008 	.word	0x20000008
 8001dcc:	20006fb8 	.word	0x20006fb8

08001dd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  return uwTick;
 8001dd4:	4b03      	ldr	r3, [pc, #12]	; (8001de4 <HAL_GetTick+0x14>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	20006fb8 	.word	0x20006fb8

08001de8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001df0:	f7ff ffee 	bl	8001dd0 <HAL_GetTick>
 8001df4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e00:	d005      	beq.n	8001e0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e02:	4b09      	ldr	r3, [pc, #36]	; (8001e28 <HAL_Delay+0x40>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	461a      	mov	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e0e:	bf00      	nop
 8001e10:	f7ff ffde 	bl	8001dd0 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d8f7      	bhi.n	8001e10 <HAL_Delay+0x28>
  {
  }
}
 8001e20:	bf00      	nop
 8001e22:	3710      	adds	r7, #16
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	20000008 	.word	0x20000008

08001e2c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e34:	2300      	movs	r3, #0
 8001e36:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d101      	bne.n	8001e42 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e033      	b.n	8001eaa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d109      	bne.n	8001e5e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7ff fad8 	bl	8001400 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e62:	f003 0310 	and.w	r3, r3, #16
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d118      	bne.n	8001e9c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e72:	f023 0302 	bic.w	r3, r3, #2
 8001e76:	f043 0202 	orr.w	r2, r3, #2
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 fa2c 	bl	80022dc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	f023 0303 	bic.w	r3, r3, #3
 8001e92:	f043 0201 	orr.w	r2, r3, #1
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	641a      	str	r2, [r3, #64]	; 0x40
 8001e9a:	e001      	b.n	8001ea0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3710      	adds	r7, #16
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
	...

08001eb4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b086      	sub	sp, #24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d101      	bne.n	8001ed2 <HAL_ADC_Start_DMA+0x1e>
 8001ece:	2302      	movs	r3, #2
 8001ed0:	e0cc      	b.n	800206c <HAL_ADC_Start_DMA+0x1b8>
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f003 0301 	and.w	r3, r3, #1
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d018      	beq.n	8001f1a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	689a      	ldr	r2, [r3, #8]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f042 0201 	orr.w	r2, r2, #1
 8001ef6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ef8:	4b5e      	ldr	r3, [pc, #376]	; (8002074 <HAL_ADC_Start_DMA+0x1c0>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a5e      	ldr	r2, [pc, #376]	; (8002078 <HAL_ADC_Start_DMA+0x1c4>)
 8001efe:	fba2 2303 	umull	r2, r3, r2, r3
 8001f02:	0c9a      	lsrs	r2, r3, #18
 8001f04:	4613      	mov	r3, r2
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	4413      	add	r3, r2
 8001f0a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001f0c:	e002      	b.n	8001f14 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1f9      	bne.n	8001f0e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	f040 80a0 	bne.w	800206a <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f32:	f023 0301 	bic.w	r3, r3, #1
 8001f36:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d007      	beq.n	8001f5c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f50:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f54:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f68:	d106      	bne.n	8001f78 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6e:	f023 0206 	bic.w	r2, r3, #6
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	645a      	str	r2, [r3, #68]	; 0x44
 8001f76:	e002      	b.n	8001f7e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f86:	4b3d      	ldr	r3, [pc, #244]	; (800207c <HAL_ADC_Start_DMA+0x1c8>)
 8001f88:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f8e:	4a3c      	ldr	r2, [pc, #240]	; (8002080 <HAL_ADC_Start_DMA+0x1cc>)
 8001f90:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f96:	4a3b      	ldr	r2, [pc, #236]	; (8002084 <HAL_ADC_Start_DMA+0x1d0>)
 8001f98:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f9e:	4a3a      	ldr	r2, [pc, #232]	; (8002088 <HAL_ADC_Start_DMA+0x1d4>)
 8001fa0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001faa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	685a      	ldr	r2, [r3, #4]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001fba:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	689a      	ldr	r2, [r3, #8]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fca:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	334c      	adds	r3, #76	; 0x4c
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	68ba      	ldr	r2, [r7, #8]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f000 fc8c 	bl	80028f8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f003 031f 	and.w	r3, r3, #31
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d12a      	bne.n	8002042 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a26      	ldr	r2, [pc, #152]	; (800208c <HAL_ADC_Start_DMA+0x1d8>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d015      	beq.n	8002022 <HAL_ADC_Start_DMA+0x16e>
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a25      	ldr	r2, [pc, #148]	; (8002090 <HAL_ADC_Start_DMA+0x1dc>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d105      	bne.n	800200c <HAL_ADC_Start_DMA+0x158>
 8002000:	4b1e      	ldr	r3, [pc, #120]	; (800207c <HAL_ADC_Start_DMA+0x1c8>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f003 031f 	and.w	r3, r3, #31
 8002008:	2b00      	cmp	r3, #0
 800200a:	d00a      	beq.n	8002022 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a20      	ldr	r2, [pc, #128]	; (8002094 <HAL_ADC_Start_DMA+0x1e0>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d129      	bne.n	800206a <HAL_ADC_Start_DMA+0x1b6>
 8002016:	4b19      	ldr	r3, [pc, #100]	; (800207c <HAL_ADC_Start_DMA+0x1c8>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f003 031f 	and.w	r3, r3, #31
 800201e:	2b0f      	cmp	r3, #15
 8002020:	d823      	bhi.n	800206a <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d11c      	bne.n	800206a <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	689a      	ldr	r2, [r3, #8]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800203e:	609a      	str	r2, [r3, #8]
 8002040:	e013      	b.n	800206a <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a11      	ldr	r2, [pc, #68]	; (800208c <HAL_ADC_Start_DMA+0x1d8>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d10e      	bne.n	800206a <HAL_ADC_Start_DMA+0x1b6>
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d107      	bne.n	800206a <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	689a      	ldr	r2, [r3, #8]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002068:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3718      	adds	r7, #24
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	20000000 	.word	0x20000000
 8002078:	431bde83 	.word	0x431bde83
 800207c:	40012300 	.word	0x40012300
 8002080:	080024d5 	.word	0x080024d5
 8002084:	0800258f 	.word	0x0800258f
 8002088:	080025ab 	.word	0x080025ab
 800208c:	40012000 	.word	0x40012000
 8002090:	40012100 	.word	0x40012100
 8002094:	40012200 	.word	0x40012200

08002098 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80020a2:	2300      	movs	r3, #0
 80020a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d101      	bne.n	80020b4 <HAL_ADC_ConfigChannel+0x1c>
 80020b0:	2302      	movs	r3, #2
 80020b2:	e105      	b.n	80022c0 <HAL_ADC_ConfigChannel+0x228>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2b09      	cmp	r3, #9
 80020c2:	d925      	bls.n	8002110 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68d9      	ldr	r1, [r3, #12]
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	461a      	mov	r2, r3
 80020d2:	4613      	mov	r3, r2
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	4413      	add	r3, r2
 80020d8:	3b1e      	subs	r3, #30
 80020da:	2207      	movs	r2, #7
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	43da      	mvns	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	400a      	ands	r2, r1
 80020e8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68d9      	ldr	r1, [r3, #12]
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	689a      	ldr	r2, [r3, #8]
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	4618      	mov	r0, r3
 80020fc:	4603      	mov	r3, r0
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	4403      	add	r3, r0
 8002102:	3b1e      	subs	r3, #30
 8002104:	409a      	lsls	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	430a      	orrs	r2, r1
 800210c:	60da      	str	r2, [r3, #12]
 800210e:	e022      	b.n	8002156 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6919      	ldr	r1, [r3, #16]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	b29b      	uxth	r3, r3
 800211c:	461a      	mov	r2, r3
 800211e:	4613      	mov	r3, r2
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	4413      	add	r3, r2
 8002124:	2207      	movs	r2, #7
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	43da      	mvns	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	400a      	ands	r2, r1
 8002132:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6919      	ldr	r1, [r3, #16]
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	689a      	ldr	r2, [r3, #8]
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	b29b      	uxth	r3, r3
 8002144:	4618      	mov	r0, r3
 8002146:	4603      	mov	r3, r0
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	4403      	add	r3, r0
 800214c:	409a      	lsls	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	430a      	orrs	r2, r1
 8002154:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2b06      	cmp	r3, #6
 800215c:	d824      	bhi.n	80021a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685a      	ldr	r2, [r3, #4]
 8002168:	4613      	mov	r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	4413      	add	r3, r2
 800216e:	3b05      	subs	r3, #5
 8002170:	221f      	movs	r2, #31
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	43da      	mvns	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	400a      	ands	r2, r1
 800217e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	b29b      	uxth	r3, r3
 800218c:	4618      	mov	r0, r3
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685a      	ldr	r2, [r3, #4]
 8002192:	4613      	mov	r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	4413      	add	r3, r2
 8002198:	3b05      	subs	r3, #5
 800219a:	fa00 f203 	lsl.w	r2, r0, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	430a      	orrs	r2, r1
 80021a4:	635a      	str	r2, [r3, #52]	; 0x34
 80021a6:	e04c      	b.n	8002242 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	2b0c      	cmp	r3, #12
 80021ae:	d824      	bhi.n	80021fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685a      	ldr	r2, [r3, #4]
 80021ba:	4613      	mov	r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	4413      	add	r3, r2
 80021c0:	3b23      	subs	r3, #35	; 0x23
 80021c2:	221f      	movs	r2, #31
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	43da      	mvns	r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	400a      	ands	r2, r1
 80021d0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	b29b      	uxth	r3, r3
 80021de:	4618      	mov	r0, r3
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685a      	ldr	r2, [r3, #4]
 80021e4:	4613      	mov	r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	4413      	add	r3, r2
 80021ea:	3b23      	subs	r3, #35	; 0x23
 80021ec:	fa00 f203 	lsl.w	r2, r0, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	430a      	orrs	r2, r1
 80021f6:	631a      	str	r2, [r3, #48]	; 0x30
 80021f8:	e023      	b.n	8002242 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685a      	ldr	r2, [r3, #4]
 8002204:	4613      	mov	r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	4413      	add	r3, r2
 800220a:	3b41      	subs	r3, #65	; 0x41
 800220c:	221f      	movs	r2, #31
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	43da      	mvns	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	400a      	ands	r2, r1
 800221a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	b29b      	uxth	r3, r3
 8002228:	4618      	mov	r0, r3
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685a      	ldr	r2, [r3, #4]
 800222e:	4613      	mov	r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	4413      	add	r3, r2
 8002234:	3b41      	subs	r3, #65	; 0x41
 8002236:	fa00 f203 	lsl.w	r2, r0, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	430a      	orrs	r2, r1
 8002240:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002242:	4b22      	ldr	r3, [pc, #136]	; (80022cc <HAL_ADC_ConfigChannel+0x234>)
 8002244:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a21      	ldr	r2, [pc, #132]	; (80022d0 <HAL_ADC_ConfigChannel+0x238>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d109      	bne.n	8002264 <HAL_ADC_ConfigChannel+0x1cc>
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2b12      	cmp	r3, #18
 8002256:	d105      	bne.n	8002264 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a19      	ldr	r2, [pc, #100]	; (80022d0 <HAL_ADC_ConfigChannel+0x238>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d123      	bne.n	80022b6 <HAL_ADC_ConfigChannel+0x21e>
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2b10      	cmp	r3, #16
 8002274:	d003      	beq.n	800227e <HAL_ADC_ConfigChannel+0x1e6>
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2b11      	cmp	r3, #17
 800227c:	d11b      	bne.n	80022b6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2b10      	cmp	r3, #16
 8002290:	d111      	bne.n	80022b6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002292:	4b10      	ldr	r3, [pc, #64]	; (80022d4 <HAL_ADC_ConfigChannel+0x23c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a10      	ldr	r2, [pc, #64]	; (80022d8 <HAL_ADC_ConfigChannel+0x240>)
 8002298:	fba2 2303 	umull	r2, r3, r2, r3
 800229c:	0c9a      	lsrs	r2, r3, #18
 800229e:	4613      	mov	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4413      	add	r3, r2
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80022a8:	e002      	b.n	80022b0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	3b01      	subs	r3, #1
 80022ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1f9      	bne.n	80022aa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3714      	adds	r7, #20
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	40012300 	.word	0x40012300
 80022d0:	40012000 	.word	0x40012000
 80022d4:	20000000 	.word	0x20000000
 80022d8:	431bde83 	.word	0x431bde83

080022dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022e4:	4b79      	ldr	r3, [pc, #484]	; (80024cc <ADC_Init+0x1f0>)
 80022e6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	685a      	ldr	r2, [r3, #4]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	431a      	orrs	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	685a      	ldr	r2, [r3, #4]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002310:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	6859      	ldr	r1, [r3, #4]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	021a      	lsls	r2, r3, #8
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	430a      	orrs	r2, r1
 8002324:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	685a      	ldr	r2, [r3, #4]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002334:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	6859      	ldr	r1, [r3, #4]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	430a      	orrs	r2, r1
 8002346:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	689a      	ldr	r2, [r3, #8]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002356:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6899      	ldr	r1, [r3, #8]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	68da      	ldr	r2, [r3, #12]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	430a      	orrs	r2, r1
 8002368:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236e:	4a58      	ldr	r2, [pc, #352]	; (80024d0 <ADC_Init+0x1f4>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d022      	beq.n	80023ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	689a      	ldr	r2, [r3, #8]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002382:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6899      	ldr	r1, [r3, #8]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	430a      	orrs	r2, r1
 8002394:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	6899      	ldr	r1, [r3, #8]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	430a      	orrs	r2, r1
 80023b6:	609a      	str	r2, [r3, #8]
 80023b8:	e00f      	b.n	80023da <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	689a      	ldr	r2, [r3, #8]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	689a      	ldr	r2, [r3, #8]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f022 0202 	bic.w	r2, r2, #2
 80023e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	6899      	ldr	r1, [r3, #8]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	7e1b      	ldrb	r3, [r3, #24]
 80023f4:	005a      	lsls	r2, r3, #1
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	430a      	orrs	r2, r1
 80023fc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d01b      	beq.n	8002440 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	685a      	ldr	r2, [r3, #4]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002416:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002426:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6859      	ldr	r1, [r3, #4]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002432:	3b01      	subs	r3, #1
 8002434:	035a      	lsls	r2, r3, #13
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	430a      	orrs	r2, r1
 800243c:	605a      	str	r2, [r3, #4]
 800243e:	e007      	b.n	8002450 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	685a      	ldr	r2, [r3, #4]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800244e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800245e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	69db      	ldr	r3, [r3, #28]
 800246a:	3b01      	subs	r3, #1
 800246c:	051a      	lsls	r2, r3, #20
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	430a      	orrs	r2, r1
 8002474:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	689a      	ldr	r2, [r3, #8]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002484:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	6899      	ldr	r1, [r3, #8]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002492:	025a      	lsls	r2, r3, #9
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	430a      	orrs	r2, r1
 800249a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	689a      	ldr	r2, [r3, #8]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6899      	ldr	r1, [r3, #8]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	695b      	ldr	r3, [r3, #20]
 80024b6:	029a      	lsls	r2, r3, #10
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	430a      	orrs	r2, r1
 80024be:	609a      	str	r2, [r3, #8]
}
 80024c0:	bf00      	nop
 80024c2:	3714      	adds	r7, #20
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	40012300 	.word	0x40012300
 80024d0:	0f000001 	.word	0x0f000001

080024d4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d13c      	bne.n	8002568 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d12b      	bne.n	8002560 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800250c:	2b00      	cmp	r3, #0
 800250e:	d127      	bne.n	8002560 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002516:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800251a:	2b00      	cmp	r3, #0
 800251c:	d006      	beq.n	800252c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002528:	2b00      	cmp	r3, #0
 800252a:	d119      	bne.n	8002560 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	685a      	ldr	r2, [r3, #4]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 0220 	bic.w	r2, r2, #32
 800253a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002540:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d105      	bne.n	8002560 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002558:	f043 0201 	orr.w	r2, r3, #1
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002560:	68f8      	ldr	r0, [r7, #12]
 8002562:	f016 f837 	bl	80185d4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002566:	e00e      	b.n	8002586 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256c:	f003 0310 	and.w	r3, r3, #16
 8002570:	2b00      	cmp	r3, #0
 8002572:	d003      	beq.n	800257c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002574:	68f8      	ldr	r0, [r7, #12]
 8002576:	f016 f881 	bl	801867c <HAL_ADC_ErrorCallback>
}
 800257a:	e004      	b.n	8002586 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	4798      	blx	r3
}
 8002586:	bf00      	nop
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b084      	sub	sp, #16
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800259a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800259c:	68f8      	ldr	r0, [r7, #12]
 800259e:	f016 f843 	bl	8018628 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025a2:	bf00      	nop
 80025a4:	3710      	adds	r7, #16
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b084      	sub	sp, #16
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2240      	movs	r2, #64	; 0x40
 80025bc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c2:	f043 0204 	orr.w	r2, r3, #4
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80025ca:	68f8      	ldr	r0, [r7, #12]
 80025cc:	f016 f856 	bl	801867c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025d0:	bf00      	nop
 80025d2:	3710      	adds	r7, #16
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f003 0307 	and.w	r3, r3, #7
 80025e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025e8:	4b0c      	ldr	r3, [pc, #48]	; (800261c <__NVIC_SetPriorityGrouping+0x44>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025ee:	68ba      	ldr	r2, [r7, #8]
 80025f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025f4:	4013      	ands	r3, r2
 80025f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002600:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002604:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002608:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800260a:	4a04      	ldr	r2, [pc, #16]	; (800261c <__NVIC_SetPriorityGrouping+0x44>)
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	60d3      	str	r3, [r2, #12]
}
 8002610:	bf00      	nop
 8002612:	3714      	adds	r7, #20
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr
 800261c:	e000ed00 	.word	0xe000ed00

08002620 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002624:	4b04      	ldr	r3, [pc, #16]	; (8002638 <__NVIC_GetPriorityGrouping+0x18>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	0a1b      	lsrs	r3, r3, #8
 800262a:	f003 0307 	and.w	r3, r3, #7
}
 800262e:	4618      	mov	r0, r3
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	e000ed00 	.word	0xe000ed00

0800263c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	4603      	mov	r3, r0
 8002644:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264a:	2b00      	cmp	r3, #0
 800264c:	db0b      	blt.n	8002666 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800264e:	79fb      	ldrb	r3, [r7, #7]
 8002650:	f003 021f 	and.w	r2, r3, #31
 8002654:	4907      	ldr	r1, [pc, #28]	; (8002674 <__NVIC_EnableIRQ+0x38>)
 8002656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265a:	095b      	lsrs	r3, r3, #5
 800265c:	2001      	movs	r0, #1
 800265e:	fa00 f202 	lsl.w	r2, r0, r2
 8002662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002666:	bf00      	nop
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	e000e100 	.word	0xe000e100

08002678 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	6039      	str	r1, [r7, #0]
 8002682:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002688:	2b00      	cmp	r3, #0
 800268a:	db0a      	blt.n	80026a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	b2da      	uxtb	r2, r3
 8002690:	490c      	ldr	r1, [pc, #48]	; (80026c4 <__NVIC_SetPriority+0x4c>)
 8002692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002696:	0112      	lsls	r2, r2, #4
 8002698:	b2d2      	uxtb	r2, r2
 800269a:	440b      	add	r3, r1
 800269c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026a0:	e00a      	b.n	80026b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	b2da      	uxtb	r2, r3
 80026a6:	4908      	ldr	r1, [pc, #32]	; (80026c8 <__NVIC_SetPriority+0x50>)
 80026a8:	79fb      	ldrb	r3, [r7, #7]
 80026aa:	f003 030f 	and.w	r3, r3, #15
 80026ae:	3b04      	subs	r3, #4
 80026b0:	0112      	lsls	r2, r2, #4
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	440b      	add	r3, r1
 80026b6:	761a      	strb	r2, [r3, #24]
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	e000e100 	.word	0xe000e100
 80026c8:	e000ed00 	.word	0xe000ed00

080026cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b089      	sub	sp, #36	; 0x24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	f1c3 0307 	rsb	r3, r3, #7
 80026e6:	2b04      	cmp	r3, #4
 80026e8:	bf28      	it	cs
 80026ea:	2304      	movcs	r3, #4
 80026ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	3304      	adds	r3, #4
 80026f2:	2b06      	cmp	r3, #6
 80026f4:	d902      	bls.n	80026fc <NVIC_EncodePriority+0x30>
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	3b03      	subs	r3, #3
 80026fa:	e000      	b.n	80026fe <NVIC_EncodePriority+0x32>
 80026fc:	2300      	movs	r3, #0
 80026fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002700:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	43da      	mvns	r2, r3
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	401a      	ands	r2, r3
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002714:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	fa01 f303 	lsl.w	r3, r1, r3
 800271e:	43d9      	mvns	r1, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002724:	4313      	orrs	r3, r2
         );
}
 8002726:	4618      	mov	r0, r3
 8002728:	3724      	adds	r7, #36	; 0x24
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr

08002732 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b082      	sub	sp, #8
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f7ff ff4c 	bl	80025d8 <__NVIC_SetPriorityGrouping>
}
 8002740:	bf00      	nop
 8002742:	3708      	adds	r7, #8
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	4603      	mov	r3, r0
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
 8002754:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002756:	2300      	movs	r3, #0
 8002758:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800275a:	f7ff ff61 	bl	8002620 <__NVIC_GetPriorityGrouping>
 800275e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	68b9      	ldr	r1, [r7, #8]
 8002764:	6978      	ldr	r0, [r7, #20]
 8002766:	f7ff ffb1 	bl	80026cc <NVIC_EncodePriority>
 800276a:	4602      	mov	r2, r0
 800276c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002770:	4611      	mov	r1, r2
 8002772:	4618      	mov	r0, r3
 8002774:	f7ff ff80 	bl	8002678 <__NVIC_SetPriority>
}
 8002778:	bf00      	nop
 800277a:	3718      	adds	r7, #24
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	4603      	mov	r3, r0
 8002788:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800278a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278e:	4618      	mov	r0, r3
 8002790:	f7ff ff54 	bl	800263c <__NVIC_EnableIRQ>
}
 8002794:	bf00      	nop
 8002796:	3708      	adds	r7, #8
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b086      	sub	sp, #24
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027a4:	2300      	movs	r3, #0
 80027a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80027a8:	f7ff fb12 	bl	8001dd0 <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d101      	bne.n	80027b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e099      	b.n	80028ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2202      	movs	r2, #2
 80027c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f022 0201 	bic.w	r2, r2, #1
 80027d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027d8:	e00f      	b.n	80027fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027da:	f7ff faf9 	bl	8001dd0 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b05      	cmp	r3, #5
 80027e6:	d908      	bls.n	80027fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2220      	movs	r2, #32
 80027ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2203      	movs	r2, #3
 80027f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e078      	b.n	80028ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1e8      	bne.n	80027da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002810:	697a      	ldr	r2, [r7, #20]
 8002812:	4b38      	ldr	r3, [pc, #224]	; (80028f4 <HAL_DMA_Init+0x158>)
 8002814:	4013      	ands	r3, r2
 8002816:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685a      	ldr	r2, [r3, #4]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002826:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002832:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800283e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a1b      	ldr	r3, [r3, #32]
 8002844:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	4313      	orrs	r3, r2
 800284a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002850:	2b04      	cmp	r3, #4
 8002852:	d107      	bne.n	8002864 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285c:	4313      	orrs	r3, r2
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	4313      	orrs	r3, r2
 8002862:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	697a      	ldr	r2, [r7, #20]
 800286a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	f023 0307 	bic.w	r3, r3, #7
 800287a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002880:	697a      	ldr	r2, [r7, #20]
 8002882:	4313      	orrs	r3, r2
 8002884:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288a:	2b04      	cmp	r3, #4
 800288c:	d117      	bne.n	80028be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	4313      	orrs	r3, r2
 8002896:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00e      	beq.n	80028be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 fa9f 	bl	8002de4 <DMA_CheckFifoParam>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d008      	beq.n	80028be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2240      	movs	r2, #64	; 0x40
 80028b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2201      	movs	r2, #1
 80028b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80028ba:	2301      	movs	r3, #1
 80028bc:	e016      	b.n	80028ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 fa56 	bl	8002d78 <DMA_CalcBaseAndBitshift>
 80028cc:	4603      	mov	r3, r0
 80028ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d4:	223f      	movs	r2, #63	; 0x3f
 80028d6:	409a      	lsls	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3718      	adds	r7, #24
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	f010803f 	.word	0xf010803f

080028f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
 8002904:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002906:	2300      	movs	r3, #0
 8002908:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800290e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002916:	2b01      	cmp	r3, #1
 8002918:	d101      	bne.n	800291e <HAL_DMA_Start_IT+0x26>
 800291a:	2302      	movs	r3, #2
 800291c:	e040      	b.n	80029a0 <HAL_DMA_Start_IT+0xa8>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b01      	cmp	r3, #1
 8002930:	d12f      	bne.n	8002992 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2202      	movs	r2, #2
 8002936:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	68b9      	ldr	r1, [r7, #8]
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	f000 f9e8 	bl	8002d1c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002950:	223f      	movs	r2, #63	; 0x3f
 8002952:	409a      	lsls	r2, r3
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f042 0216 	orr.w	r2, r2, #22
 8002966:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296c:	2b00      	cmp	r3, #0
 800296e:	d007      	beq.n	8002980 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f042 0208 	orr.w	r2, r2, #8
 800297e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f042 0201 	orr.w	r2, r2, #1
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	e005      	b.n	800299e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800299a:	2302      	movs	r3, #2
 800299c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800299e:	7dfb      	ldrb	r3, [r7, #23]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3718      	adds	r7, #24
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d004      	beq.n	80029c6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2280      	movs	r2, #128	; 0x80
 80029c0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e00c      	b.n	80029e0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2205      	movs	r2, #5
 80029ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f022 0201 	bic.w	r2, r2, #1
 80029dc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80029f4:	2300      	movs	r3, #0
 80029f6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80029f8:	4b92      	ldr	r3, [pc, #584]	; (8002c44 <HAL_DMA_IRQHandler+0x258>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a92      	ldr	r2, [pc, #584]	; (8002c48 <HAL_DMA_IRQHandler+0x25c>)
 80029fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002a02:	0a9b      	lsrs	r3, r3, #10
 8002a04:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a0a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a16:	2208      	movs	r2, #8
 8002a18:	409a      	lsls	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d01a      	beq.n	8002a58 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0304 	and.w	r3, r3, #4
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d013      	beq.n	8002a58 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f022 0204 	bic.w	r2, r2, #4
 8002a3e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a44:	2208      	movs	r2, #8
 8002a46:	409a      	lsls	r2, r3
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a50:	f043 0201 	orr.w	r2, r3, #1
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	409a      	lsls	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	4013      	ands	r3, r2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d012      	beq.n	8002a8e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00b      	beq.n	8002a8e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	409a      	lsls	r2, r3
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a86:	f043 0202 	orr.w	r2, r3, #2
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a92:	2204      	movs	r2, #4
 8002a94:	409a      	lsls	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d012      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d00b      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab0:	2204      	movs	r2, #4
 8002ab2:	409a      	lsls	r2, r3
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002abc:	f043 0204 	orr.w	r2, r3, #4
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac8:	2210      	movs	r2, #16
 8002aca:	409a      	lsls	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d043      	beq.n	8002b5c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0308 	and.w	r3, r3, #8
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d03c      	beq.n	8002b5c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae6:	2210      	movs	r2, #16
 8002ae8:	409a      	lsls	r2, r3
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d018      	beq.n	8002b2e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d108      	bne.n	8002b1c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d024      	beq.n	8002b5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	4798      	blx	r3
 8002b1a:	e01f      	b.n	8002b5c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d01b      	beq.n	8002b5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	4798      	blx	r3
 8002b2c:	e016      	b.n	8002b5c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d107      	bne.n	8002b4c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f022 0208 	bic.w	r2, r2, #8
 8002b4a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d003      	beq.n	8002b5c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b60:	2220      	movs	r2, #32
 8002b62:	409a      	lsls	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	4013      	ands	r3, r2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f000 808e 	beq.w	8002c8a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0310 	and.w	r3, r3, #16
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 8086 	beq.w	8002c8a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b82:	2220      	movs	r2, #32
 8002b84:	409a      	lsls	r2, r3
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b05      	cmp	r3, #5
 8002b94:	d136      	bne.n	8002c04 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f022 0216 	bic.w	r2, r2, #22
 8002ba4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	695a      	ldr	r2, [r3, #20]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bb4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d103      	bne.n	8002bc6 <HAL_DMA_IRQHandler+0x1da>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d007      	beq.n	8002bd6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 0208 	bic.w	r2, r2, #8
 8002bd4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bda:	223f      	movs	r2, #63	; 0x3f
 8002bdc:	409a      	lsls	r2, r3
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2201      	movs	r2, #1
 8002bee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d07d      	beq.n	8002cf6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	4798      	blx	r3
        }
        return;
 8002c02:	e078      	b.n	8002cf6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d01c      	beq.n	8002c4c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d108      	bne.n	8002c32 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d030      	beq.n	8002c8a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	4798      	blx	r3
 8002c30:	e02b      	b.n	8002c8a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d027      	beq.n	8002c8a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	4798      	blx	r3
 8002c42:	e022      	b.n	8002c8a <HAL_DMA_IRQHandler+0x29e>
 8002c44:	20000000 	.word	0x20000000
 8002c48:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d10f      	bne.n	8002c7a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 0210 	bic.w	r2, r2, #16
 8002c68:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2201      	movs	r2, #1
 8002c76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d003      	beq.n	8002c8a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d032      	beq.n	8002cf8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d022      	beq.n	8002ce4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2205      	movs	r2, #5
 8002ca2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f022 0201 	bic.w	r2, r2, #1
 8002cb4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	60bb      	str	r3, [r7, #8]
 8002cbc:	697a      	ldr	r2, [r7, #20]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d307      	bcc.n	8002cd2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0301 	and.w	r3, r3, #1
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d1f2      	bne.n	8002cb6 <HAL_DMA_IRQHandler+0x2ca>
 8002cd0:	e000      	b.n	8002cd4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002cd2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d005      	beq.n	8002cf8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	4798      	blx	r3
 8002cf4:	e000      	b.n	8002cf8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002cf6:	bf00      	nop
    }
  }
}
 8002cf8:	3718      	adds	r7, #24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop

08002d00 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d0e:	b2db      	uxtb	r3, r3
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]
 8002d28:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d38:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	683a      	ldr	r2, [r7, #0]
 8002d40:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	2b40      	cmp	r3, #64	; 0x40
 8002d48:	d108      	bne.n	8002d5c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68ba      	ldr	r2, [r7, #8]
 8002d58:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002d5a:	e007      	b.n	8002d6c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68ba      	ldr	r2, [r7, #8]
 8002d62:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	60da      	str	r2, [r3, #12]
}
 8002d6c:	bf00      	nop
 8002d6e:	3714      	adds	r7, #20
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	3b10      	subs	r3, #16
 8002d88:	4a14      	ldr	r2, [pc, #80]	; (8002ddc <DMA_CalcBaseAndBitshift+0x64>)
 8002d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8e:	091b      	lsrs	r3, r3, #4
 8002d90:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002d92:	4a13      	ldr	r2, [pc, #76]	; (8002de0 <DMA_CalcBaseAndBitshift+0x68>)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	4413      	add	r3, r2
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2b03      	cmp	r3, #3
 8002da4:	d909      	bls.n	8002dba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002dae:	f023 0303 	bic.w	r3, r3, #3
 8002db2:	1d1a      	adds	r2, r3, #4
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	659a      	str	r2, [r3, #88]	; 0x58
 8002db8:	e007      	b.n	8002dca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002dc2:	f023 0303 	bic.w	r3, r3, #3
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3714      	adds	r7, #20
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	aaaaaaab 	.word	0xaaaaaaab
 8002de0:	08019d24 	.word	0x08019d24

08002de4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dec:	2300      	movs	r3, #0
 8002dee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d11f      	bne.n	8002e3e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	2b03      	cmp	r3, #3
 8002e02:	d855      	bhi.n	8002eb0 <DMA_CheckFifoParam+0xcc>
 8002e04:	a201      	add	r2, pc, #4	; (adr r2, 8002e0c <DMA_CheckFifoParam+0x28>)
 8002e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e0a:	bf00      	nop
 8002e0c:	08002e1d 	.word	0x08002e1d
 8002e10:	08002e2f 	.word	0x08002e2f
 8002e14:	08002e1d 	.word	0x08002e1d
 8002e18:	08002eb1 	.word	0x08002eb1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d045      	beq.n	8002eb4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e2c:	e042      	b.n	8002eb4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e32:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e36:	d13f      	bne.n	8002eb8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e3c:	e03c      	b.n	8002eb8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e46:	d121      	bne.n	8002e8c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	2b03      	cmp	r3, #3
 8002e4c:	d836      	bhi.n	8002ebc <DMA_CheckFifoParam+0xd8>
 8002e4e:	a201      	add	r2, pc, #4	; (adr r2, 8002e54 <DMA_CheckFifoParam+0x70>)
 8002e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e54:	08002e65 	.word	0x08002e65
 8002e58:	08002e6b 	.word	0x08002e6b
 8002e5c:	08002e65 	.word	0x08002e65
 8002e60:	08002e7d 	.word	0x08002e7d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	73fb      	strb	r3, [r7, #15]
      break;
 8002e68:	e02f      	b.n	8002eca <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d024      	beq.n	8002ec0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e7a:	e021      	b.n	8002ec0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e80:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e84:	d11e      	bne.n	8002ec4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002e8a:	e01b      	b.n	8002ec4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d902      	bls.n	8002e98 <DMA_CheckFifoParam+0xb4>
 8002e92:	2b03      	cmp	r3, #3
 8002e94:	d003      	beq.n	8002e9e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002e96:	e018      	b.n	8002eca <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e9c:	e015      	b.n	8002eca <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00e      	beq.n	8002ec8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	73fb      	strb	r3, [r7, #15]
      break;
 8002eae:	e00b      	b.n	8002ec8 <DMA_CheckFifoParam+0xe4>
      break;
 8002eb0:	bf00      	nop
 8002eb2:	e00a      	b.n	8002eca <DMA_CheckFifoParam+0xe6>
      break;
 8002eb4:	bf00      	nop
 8002eb6:	e008      	b.n	8002eca <DMA_CheckFifoParam+0xe6>
      break;
 8002eb8:	bf00      	nop
 8002eba:	e006      	b.n	8002eca <DMA_CheckFifoParam+0xe6>
      break;
 8002ebc:	bf00      	nop
 8002ebe:	e004      	b.n	8002eca <DMA_CheckFifoParam+0xe6>
      break;
 8002ec0:	bf00      	nop
 8002ec2:	e002      	b.n	8002eca <DMA_CheckFifoParam+0xe6>
      break;   
 8002ec4:	bf00      	nop
 8002ec6:	e000      	b.n	8002eca <DMA_CheckFifoParam+0xe6>
      break;
 8002ec8:	bf00      	nop
    }
  } 
  
  return status; 
 8002eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3714      	adds	r7, #20
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b089      	sub	sp, #36	; 0x24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002eea:	2300      	movs	r3, #0
 8002eec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002eee:	2300      	movs	r3, #0
 8002ef0:	61fb      	str	r3, [r7, #28]
 8002ef2:	e16b      	b.n	80031cc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	4013      	ands	r3, r2
 8002f06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	f040 815a 	bne.w	80031c6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d00b      	beq.n	8002f32 <HAL_GPIO_Init+0x5a>
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d007      	beq.n	8002f32 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f26:	2b11      	cmp	r3, #17
 8002f28:	d003      	beq.n	8002f32 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	2b12      	cmp	r3, #18
 8002f30:	d130      	bne.n	8002f94 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	2203      	movs	r2, #3
 8002f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f42:	43db      	mvns	r3, r3
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	4013      	ands	r3, r2
 8002f48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	68da      	ldr	r2, [r3, #12]
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	fa02 f303 	lsl.w	r3, r2, r3
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	69ba      	ldr	r2, [r7, #24]
 8002f60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f68:	2201      	movs	r2, #1
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f70:	43db      	mvns	r3, r3
 8002f72:	69ba      	ldr	r2, [r7, #24]
 8002f74:	4013      	ands	r3, r2
 8002f76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	091b      	lsrs	r3, r3, #4
 8002f7e:	f003 0201 	and.w	r2, r3, #1
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	fa02 f303 	lsl.w	r3, r2, r3
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	2203      	movs	r2, #3
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	43db      	mvns	r3, r3
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	689a      	ldr	r2, [r3, #8]
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d003      	beq.n	8002fd4 <HAL_GPIO_Init+0xfc>
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	2b12      	cmp	r3, #18
 8002fd2:	d123      	bne.n	800301c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	08da      	lsrs	r2, r3, #3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	3208      	adds	r2, #8
 8002fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	f003 0307 	and.w	r3, r3, #7
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	220f      	movs	r2, #15
 8002fec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	691a      	ldr	r2, [r3, #16]
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	f003 0307 	and.w	r3, r3, #7
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	4313      	orrs	r3, r2
 800300c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	08da      	lsrs	r2, r3, #3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	3208      	adds	r2, #8
 8003016:	69b9      	ldr	r1, [r7, #24]
 8003018:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	2203      	movs	r2, #3
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	43db      	mvns	r3, r3
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	4013      	ands	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f003 0203 	and.w	r2, r3, #3
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	4313      	orrs	r3, r2
 8003048:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003058:	2b00      	cmp	r3, #0
 800305a:	f000 80b4 	beq.w	80031c6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800305e:	2300      	movs	r3, #0
 8003060:	60fb      	str	r3, [r7, #12]
 8003062:	4b5f      	ldr	r3, [pc, #380]	; (80031e0 <HAL_GPIO_Init+0x308>)
 8003064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003066:	4a5e      	ldr	r2, [pc, #376]	; (80031e0 <HAL_GPIO_Init+0x308>)
 8003068:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800306c:	6453      	str	r3, [r2, #68]	; 0x44
 800306e:	4b5c      	ldr	r3, [pc, #368]	; (80031e0 <HAL_GPIO_Init+0x308>)
 8003070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003072:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003076:	60fb      	str	r3, [r7, #12]
 8003078:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800307a:	4a5a      	ldr	r2, [pc, #360]	; (80031e4 <HAL_GPIO_Init+0x30c>)
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	089b      	lsrs	r3, r3, #2
 8003080:	3302      	adds	r3, #2
 8003082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003086:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	f003 0303 	and.w	r3, r3, #3
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	220f      	movs	r2, #15
 8003092:	fa02 f303 	lsl.w	r3, r2, r3
 8003096:	43db      	mvns	r3, r3
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	4013      	ands	r3, r2
 800309c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a51      	ldr	r2, [pc, #324]	; (80031e8 <HAL_GPIO_Init+0x310>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d02b      	beq.n	80030fe <HAL_GPIO_Init+0x226>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a50      	ldr	r2, [pc, #320]	; (80031ec <HAL_GPIO_Init+0x314>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d025      	beq.n	80030fa <HAL_GPIO_Init+0x222>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a4f      	ldr	r2, [pc, #316]	; (80031f0 <HAL_GPIO_Init+0x318>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d01f      	beq.n	80030f6 <HAL_GPIO_Init+0x21e>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a4e      	ldr	r2, [pc, #312]	; (80031f4 <HAL_GPIO_Init+0x31c>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d019      	beq.n	80030f2 <HAL_GPIO_Init+0x21a>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a4d      	ldr	r2, [pc, #308]	; (80031f8 <HAL_GPIO_Init+0x320>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d013      	beq.n	80030ee <HAL_GPIO_Init+0x216>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a4c      	ldr	r2, [pc, #304]	; (80031fc <HAL_GPIO_Init+0x324>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d00d      	beq.n	80030ea <HAL_GPIO_Init+0x212>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a4b      	ldr	r2, [pc, #300]	; (8003200 <HAL_GPIO_Init+0x328>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d007      	beq.n	80030e6 <HAL_GPIO_Init+0x20e>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a4a      	ldr	r2, [pc, #296]	; (8003204 <HAL_GPIO_Init+0x32c>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d101      	bne.n	80030e2 <HAL_GPIO_Init+0x20a>
 80030de:	2307      	movs	r3, #7
 80030e0:	e00e      	b.n	8003100 <HAL_GPIO_Init+0x228>
 80030e2:	2308      	movs	r3, #8
 80030e4:	e00c      	b.n	8003100 <HAL_GPIO_Init+0x228>
 80030e6:	2306      	movs	r3, #6
 80030e8:	e00a      	b.n	8003100 <HAL_GPIO_Init+0x228>
 80030ea:	2305      	movs	r3, #5
 80030ec:	e008      	b.n	8003100 <HAL_GPIO_Init+0x228>
 80030ee:	2304      	movs	r3, #4
 80030f0:	e006      	b.n	8003100 <HAL_GPIO_Init+0x228>
 80030f2:	2303      	movs	r3, #3
 80030f4:	e004      	b.n	8003100 <HAL_GPIO_Init+0x228>
 80030f6:	2302      	movs	r3, #2
 80030f8:	e002      	b.n	8003100 <HAL_GPIO_Init+0x228>
 80030fa:	2301      	movs	r3, #1
 80030fc:	e000      	b.n	8003100 <HAL_GPIO_Init+0x228>
 80030fe:	2300      	movs	r3, #0
 8003100:	69fa      	ldr	r2, [r7, #28]
 8003102:	f002 0203 	and.w	r2, r2, #3
 8003106:	0092      	lsls	r2, r2, #2
 8003108:	4093      	lsls	r3, r2
 800310a:	69ba      	ldr	r2, [r7, #24]
 800310c:	4313      	orrs	r3, r2
 800310e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003110:	4934      	ldr	r1, [pc, #208]	; (80031e4 <HAL_GPIO_Init+0x30c>)
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	089b      	lsrs	r3, r3, #2
 8003116:	3302      	adds	r3, #2
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800311e:	4b3a      	ldr	r3, [pc, #232]	; (8003208 <HAL_GPIO_Init+0x330>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	43db      	mvns	r3, r3
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	4013      	ands	r3, r2
 800312c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800313a:	69ba      	ldr	r2, [r7, #24]
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	4313      	orrs	r3, r2
 8003140:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003142:	4a31      	ldr	r2, [pc, #196]	; (8003208 <HAL_GPIO_Init+0x330>)
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003148:	4b2f      	ldr	r3, [pc, #188]	; (8003208 <HAL_GPIO_Init+0x330>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	43db      	mvns	r3, r3
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	4013      	ands	r3, r2
 8003156:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d003      	beq.n	800316c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	4313      	orrs	r3, r2
 800316a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800316c:	4a26      	ldr	r2, [pc, #152]	; (8003208 <HAL_GPIO_Init+0x330>)
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003172:	4b25      	ldr	r3, [pc, #148]	; (8003208 <HAL_GPIO_Init+0x330>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	43db      	mvns	r3, r3
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	4013      	ands	r3, r2
 8003180:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d003      	beq.n	8003196 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	4313      	orrs	r3, r2
 8003194:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003196:	4a1c      	ldr	r2, [pc, #112]	; (8003208 <HAL_GPIO_Init+0x330>)
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800319c:	4b1a      	ldr	r3, [pc, #104]	; (8003208 <HAL_GPIO_Init+0x330>)
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	43db      	mvns	r3, r3
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	4013      	ands	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d003      	beq.n	80031c0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	4313      	orrs	r3, r2
 80031be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031c0:	4a11      	ldr	r2, [pc, #68]	; (8003208 <HAL_GPIO_Init+0x330>)
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	3301      	adds	r3, #1
 80031ca:	61fb      	str	r3, [r7, #28]
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	2b0f      	cmp	r3, #15
 80031d0:	f67f ae90 	bls.w	8002ef4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031d4:	bf00      	nop
 80031d6:	3724      	adds	r7, #36	; 0x24
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr
 80031e0:	40023800 	.word	0x40023800
 80031e4:	40013800 	.word	0x40013800
 80031e8:	40020000 	.word	0x40020000
 80031ec:	40020400 	.word	0x40020400
 80031f0:	40020800 	.word	0x40020800
 80031f4:	40020c00 	.word	0x40020c00
 80031f8:	40021000 	.word	0x40021000
 80031fc:	40021400 	.word	0x40021400
 8003200:	40021800 	.word	0x40021800
 8003204:	40021c00 	.word	0x40021c00
 8003208:	40013c00 	.word	0x40013c00

0800320c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	460b      	mov	r3, r1
 8003216:	807b      	strh	r3, [r7, #2]
 8003218:	4613      	mov	r3, r2
 800321a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800321c:	787b      	ldrb	r3, [r7, #1]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d003      	beq.n	800322a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003222:	887a      	ldrh	r2, [r7, #2]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003228:	e003      	b.n	8003232 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800322a:	887b      	ldrh	r3, [r7, #2]
 800322c:	041a      	lsls	r2, r3, #16
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	619a      	str	r2, [r3, #24]
}
 8003232:	bf00      	nop
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
	...

08003240 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e11f      	b.n	8003492 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	d106      	bne.n	800326c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f7fe f97c 	bl	8001564 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2224      	movs	r2, #36	; 0x24
 8003270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f022 0201 	bic.w	r2, r2, #1
 8003282:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003292:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032a4:	f004 fbce 	bl	8007a44 <HAL_RCC_GetPCLK1Freq>
 80032a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	4a7b      	ldr	r2, [pc, #492]	; (800349c <HAL_I2C_Init+0x25c>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d807      	bhi.n	80032c4 <HAL_I2C_Init+0x84>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	4a7a      	ldr	r2, [pc, #488]	; (80034a0 <HAL_I2C_Init+0x260>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	bf94      	ite	ls
 80032bc:	2301      	movls	r3, #1
 80032be:	2300      	movhi	r3, #0
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	e006      	b.n	80032d2 <HAL_I2C_Init+0x92>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	4a77      	ldr	r2, [pc, #476]	; (80034a4 <HAL_I2C_Init+0x264>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	bf94      	ite	ls
 80032cc:	2301      	movls	r3, #1
 80032ce:	2300      	movhi	r3, #0
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e0db      	b.n	8003492 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	4a72      	ldr	r2, [pc, #456]	; (80034a8 <HAL_I2C_Init+0x268>)
 80032de:	fba2 2303 	umull	r2, r3, r2, r3
 80032e2:	0c9b      	lsrs	r3, r3, #18
 80032e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68ba      	ldr	r2, [r7, #8]
 80032f6:	430a      	orrs	r2, r1
 80032f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	6a1b      	ldr	r3, [r3, #32]
 8003300:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	4a64      	ldr	r2, [pc, #400]	; (800349c <HAL_I2C_Init+0x25c>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d802      	bhi.n	8003314 <HAL_I2C_Init+0xd4>
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	3301      	adds	r3, #1
 8003312:	e009      	b.n	8003328 <HAL_I2C_Init+0xe8>
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800331a:	fb02 f303 	mul.w	r3, r2, r3
 800331e:	4a63      	ldr	r2, [pc, #396]	; (80034ac <HAL_I2C_Init+0x26c>)
 8003320:	fba2 2303 	umull	r2, r3, r2, r3
 8003324:	099b      	lsrs	r3, r3, #6
 8003326:	3301      	adds	r3, #1
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	6812      	ldr	r2, [r2, #0]
 800332c:	430b      	orrs	r3, r1
 800332e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	69db      	ldr	r3, [r3, #28]
 8003336:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800333a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	4956      	ldr	r1, [pc, #344]	; (800349c <HAL_I2C_Init+0x25c>)
 8003344:	428b      	cmp	r3, r1
 8003346:	d80d      	bhi.n	8003364 <HAL_I2C_Init+0x124>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	1e59      	subs	r1, r3, #1
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	fbb1 f3f3 	udiv	r3, r1, r3
 8003356:	3301      	adds	r3, #1
 8003358:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800335c:	2b04      	cmp	r3, #4
 800335e:	bf38      	it	cc
 8003360:	2304      	movcc	r3, #4
 8003362:	e04f      	b.n	8003404 <HAL_I2C_Init+0x1c4>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d111      	bne.n	8003390 <HAL_I2C_Init+0x150>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	1e58      	subs	r0, r3, #1
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6859      	ldr	r1, [r3, #4]
 8003374:	460b      	mov	r3, r1
 8003376:	005b      	lsls	r3, r3, #1
 8003378:	440b      	add	r3, r1
 800337a:	fbb0 f3f3 	udiv	r3, r0, r3
 800337e:	3301      	adds	r3, #1
 8003380:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003384:	2b00      	cmp	r3, #0
 8003386:	bf0c      	ite	eq
 8003388:	2301      	moveq	r3, #1
 800338a:	2300      	movne	r3, #0
 800338c:	b2db      	uxtb	r3, r3
 800338e:	e012      	b.n	80033b6 <HAL_I2C_Init+0x176>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	1e58      	subs	r0, r3, #1
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6859      	ldr	r1, [r3, #4]
 8003398:	460b      	mov	r3, r1
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	440b      	add	r3, r1
 800339e:	0099      	lsls	r1, r3, #2
 80033a0:	440b      	add	r3, r1
 80033a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80033a6:	3301      	adds	r3, #1
 80033a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	bf0c      	ite	eq
 80033b0:	2301      	moveq	r3, #1
 80033b2:	2300      	movne	r3, #0
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <HAL_I2C_Init+0x17e>
 80033ba:	2301      	movs	r3, #1
 80033bc:	e022      	b.n	8003404 <HAL_I2C_Init+0x1c4>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10e      	bne.n	80033e4 <HAL_I2C_Init+0x1a4>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	1e58      	subs	r0, r3, #1
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6859      	ldr	r1, [r3, #4]
 80033ce:	460b      	mov	r3, r1
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	440b      	add	r3, r1
 80033d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80033d8:	3301      	adds	r3, #1
 80033da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033e2:	e00f      	b.n	8003404 <HAL_I2C_Init+0x1c4>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	1e58      	subs	r0, r3, #1
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6859      	ldr	r1, [r3, #4]
 80033ec:	460b      	mov	r3, r1
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	440b      	add	r3, r1
 80033f2:	0099      	lsls	r1, r3, #2
 80033f4:	440b      	add	r3, r1
 80033f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80033fa:	3301      	adds	r3, #1
 80033fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003400:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003404:	6879      	ldr	r1, [r7, #4]
 8003406:	6809      	ldr	r1, [r1, #0]
 8003408:	4313      	orrs	r3, r2
 800340a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	69da      	ldr	r2, [r3, #28]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a1b      	ldr	r3, [r3, #32]
 800341e:	431a      	orrs	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	430a      	orrs	r2, r1
 8003426:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003432:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	6911      	ldr	r1, [r2, #16]
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	68d2      	ldr	r2, [r2, #12]
 800343e:	4311      	orrs	r1, r2
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	6812      	ldr	r2, [r2, #0]
 8003444:	430b      	orrs	r3, r1
 8003446:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	695a      	ldr	r2, [r3, #20]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	431a      	orrs	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	430a      	orrs	r2, r1
 8003462:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f042 0201 	orr.w	r2, r2, #1
 8003472:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2220      	movs	r2, #32
 800347e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3710      	adds	r7, #16
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	000186a0 	.word	0x000186a0
 80034a0:	001e847f 	.word	0x001e847f
 80034a4:	003d08ff 	.word	0x003d08ff
 80034a8:	431bde83 	.word	0x431bde83
 80034ac:	10624dd3 	.word	0x10624dd3

080034b0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b088      	sub	sp, #32
 80034b4:	af02      	add	r7, sp, #8
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	4608      	mov	r0, r1
 80034ba:	4611      	mov	r1, r2
 80034bc:	461a      	mov	r2, r3
 80034be:	4603      	mov	r3, r0
 80034c0:	817b      	strh	r3, [r7, #10]
 80034c2:	460b      	mov	r3, r1
 80034c4:	813b      	strh	r3, [r7, #8]
 80034c6:	4613      	mov	r3, r2
 80034c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80034ca:	f7fe fc81 	bl	8001dd0 <HAL_GetTick>
 80034ce:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	2b20      	cmp	r3, #32
 80034da:	f040 80d9 	bne.w	8003690 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	9300      	str	r3, [sp, #0]
 80034e2:	2319      	movs	r3, #25
 80034e4:	2201      	movs	r2, #1
 80034e6:	496d      	ldr	r1, [pc, #436]	; (800369c <HAL_I2C_Mem_Write+0x1ec>)
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f002 fac3 	bl	8005a74 <I2C_WaitOnFlagUntilTimeout>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d001      	beq.n	80034f8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80034f4:	2302      	movs	r3, #2
 80034f6:	e0cc      	b.n	8003692 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d101      	bne.n	8003506 <HAL_I2C_Mem_Write+0x56>
 8003502:	2302      	movs	r3, #2
 8003504:	e0c5      	b.n	8003692 <HAL_I2C_Mem_Write+0x1e2>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2201      	movs	r2, #1
 800350a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0301 	and.w	r3, r3, #1
 8003518:	2b01      	cmp	r3, #1
 800351a:	d007      	beq.n	800352c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f042 0201 	orr.w	r2, r2, #1
 800352a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800353a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2221      	movs	r2, #33	; 0x21
 8003540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2240      	movs	r2, #64	; 0x40
 8003548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6a3a      	ldr	r2, [r7, #32]
 8003556:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800355c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003562:	b29a      	uxth	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	4a4d      	ldr	r2, [pc, #308]	; (80036a0 <HAL_I2C_Mem_Write+0x1f0>)
 800356c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800356e:	88f8      	ldrh	r0, [r7, #6]
 8003570:	893a      	ldrh	r2, [r7, #8]
 8003572:	8979      	ldrh	r1, [r7, #10]
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	9301      	str	r3, [sp, #4]
 8003578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800357a:	9300      	str	r3, [sp, #0]
 800357c:	4603      	mov	r3, r0
 800357e:	68f8      	ldr	r0, [r7, #12]
 8003580:	f002 f852 	bl	8005628 <I2C_RequestMemoryWrite>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d052      	beq.n	8003630 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e081      	b.n	8003692 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003592:	68f8      	ldr	r0, [r7, #12]
 8003594:	f002 fb44 	bl	8005c20 <I2C_WaitOnTXEFlagUntilTimeout>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00d      	beq.n	80035ba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a2:	2b04      	cmp	r3, #4
 80035a4:	d107      	bne.n	80035b6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e06b      	b.n	8003692 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035be:	781a      	ldrb	r2, [r3, #0]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ca:	1c5a      	adds	r2, r3, #1
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035d4:	3b01      	subs	r3, #1
 80035d6:	b29a      	uxth	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	3b01      	subs	r3, #1
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	695b      	ldr	r3, [r3, #20]
 80035f0:	f003 0304 	and.w	r3, r3, #4
 80035f4:	2b04      	cmp	r3, #4
 80035f6:	d11b      	bne.n	8003630 <HAL_I2C_Mem_Write+0x180>
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d017      	beq.n	8003630 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003604:	781a      	ldrb	r2, [r3, #0]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003610:	1c5a      	adds	r2, r3, #1
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800361a:	3b01      	subs	r3, #1
 800361c:	b29a      	uxth	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003626:	b29b      	uxth	r3, r3
 8003628:	3b01      	subs	r3, #1
 800362a:	b29a      	uxth	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1aa      	bne.n	800358e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003638:	697a      	ldr	r2, [r7, #20]
 800363a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800363c:	68f8      	ldr	r0, [r7, #12]
 800363e:	f002 fb30 	bl	8005ca2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d00d      	beq.n	8003664 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364c:	2b04      	cmp	r3, #4
 800364e:	d107      	bne.n	8003660 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800365e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e016      	b.n	8003692 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003672:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2220      	movs	r2, #32
 8003678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800368c:	2300      	movs	r3, #0
 800368e:	e000      	b.n	8003692 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003690:	2302      	movs	r3, #2
  }
}
 8003692:	4618      	mov	r0, r3
 8003694:	3718      	adds	r7, #24
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	00100002 	.word	0x00100002
 80036a0:	ffff0000 	.word	0xffff0000

080036a4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b08c      	sub	sp, #48	; 0x30
 80036a8:	af02      	add	r7, sp, #8
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	4608      	mov	r0, r1
 80036ae:	4611      	mov	r1, r2
 80036b0:	461a      	mov	r2, r3
 80036b2:	4603      	mov	r3, r0
 80036b4:	817b      	strh	r3, [r7, #10]
 80036b6:	460b      	mov	r3, r1
 80036b8:	813b      	strh	r3, [r7, #8]
 80036ba:	4613      	mov	r3, r2
 80036bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80036be:	f7fe fb87 	bl	8001dd0 <HAL_GetTick>
 80036c2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	2b20      	cmp	r3, #32
 80036ce:	f040 8208 	bne.w	8003ae2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d4:	9300      	str	r3, [sp, #0]
 80036d6:	2319      	movs	r3, #25
 80036d8:	2201      	movs	r2, #1
 80036da:	497b      	ldr	r1, [pc, #492]	; (80038c8 <HAL_I2C_Mem_Read+0x224>)
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	f002 f9c9 	bl	8005a74 <I2C_WaitOnFlagUntilTimeout>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d001      	beq.n	80036ec <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80036e8:	2302      	movs	r3, #2
 80036ea:	e1fb      	b.n	8003ae4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d101      	bne.n	80036fa <HAL_I2C_Mem_Read+0x56>
 80036f6:	2302      	movs	r3, #2
 80036f8:	e1f4      	b.n	8003ae4 <HAL_I2C_Mem_Read+0x440>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	2b01      	cmp	r3, #1
 800370e:	d007      	beq.n	8003720 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f042 0201 	orr.w	r2, r2, #1
 800371e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800372e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2222      	movs	r2, #34	; 0x22
 8003734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2240      	movs	r2, #64	; 0x40
 800373c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2200      	movs	r2, #0
 8003744:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800374a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003750:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003756:	b29a      	uxth	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	4a5b      	ldr	r2, [pc, #364]	; (80038cc <HAL_I2C_Mem_Read+0x228>)
 8003760:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003762:	88f8      	ldrh	r0, [r7, #6]
 8003764:	893a      	ldrh	r2, [r7, #8]
 8003766:	8979      	ldrh	r1, [r7, #10]
 8003768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376a:	9301      	str	r3, [sp, #4]
 800376c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800376e:	9300      	str	r3, [sp, #0]
 8003770:	4603      	mov	r3, r0
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f001 ffee 	bl	8005754 <I2C_RequestMemoryRead>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e1b0      	b.n	8003ae4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003786:	2b00      	cmp	r3, #0
 8003788:	d113      	bne.n	80037b2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800378a:	2300      	movs	r3, #0
 800378c:	623b      	str	r3, [r7, #32]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	695b      	ldr	r3, [r3, #20]
 8003794:	623b      	str	r3, [r7, #32]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	623b      	str	r3, [r7, #32]
 800379e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	e184      	b.n	8003abc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d11b      	bne.n	80037f2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037ca:	2300      	movs	r3, #0
 80037cc:	61fb      	str	r3, [r7, #28]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	695b      	ldr	r3, [r3, #20]
 80037d4:	61fb      	str	r3, [r7, #28]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	61fb      	str	r3, [r7, #28]
 80037de:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037ee:	601a      	str	r2, [r3, #0]
 80037f0:	e164      	b.n	8003abc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d11b      	bne.n	8003832 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003808:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003818:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800381a:	2300      	movs	r3, #0
 800381c:	61bb      	str	r3, [r7, #24]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	695b      	ldr	r3, [r3, #20]
 8003824:	61bb      	str	r3, [r7, #24]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	61bb      	str	r3, [r7, #24]
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	e144      	b.n	8003abc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003832:	2300      	movs	r3, #0
 8003834:	617b      	str	r3, [r7, #20]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	695b      	ldr	r3, [r3, #20]
 800383c:	617b      	str	r3, [r7, #20]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	617b      	str	r3, [r7, #20]
 8003846:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003848:	e138      	b.n	8003abc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800384e:	2b03      	cmp	r3, #3
 8003850:	f200 80f1 	bhi.w	8003a36 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003858:	2b01      	cmp	r3, #1
 800385a:	d123      	bne.n	80038a4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800385c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800385e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003860:	68f8      	ldr	r0, [r7, #12]
 8003862:	f002 fa91 	bl	8005d88 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d001      	beq.n	8003870 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e139      	b.n	8003ae4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	691a      	ldr	r2, [r3, #16]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387a:	b2d2      	uxtb	r2, r2
 800387c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003882:	1c5a      	adds	r2, r3, #1
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800388c:	3b01      	subs	r3, #1
 800388e:	b29a      	uxth	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003898:	b29b      	uxth	r3, r3
 800389a:	3b01      	subs	r3, #1
 800389c:	b29a      	uxth	r2, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038a2:	e10b      	b.n	8003abc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d14e      	bne.n	800394a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ae:	9300      	str	r3, [sp, #0]
 80038b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b2:	2200      	movs	r2, #0
 80038b4:	4906      	ldr	r1, [pc, #24]	; (80038d0 <HAL_I2C_Mem_Read+0x22c>)
 80038b6:	68f8      	ldr	r0, [r7, #12]
 80038b8:	f002 f8dc 	bl	8005a74 <I2C_WaitOnFlagUntilTimeout>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d008      	beq.n	80038d4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e10e      	b.n	8003ae4 <HAL_I2C_Mem_Read+0x440>
 80038c6:	bf00      	nop
 80038c8:	00100002 	.word	0x00100002
 80038cc:	ffff0000 	.word	0xffff0000
 80038d0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	691a      	ldr	r2, [r3, #16]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ee:	b2d2      	uxtb	r2, r2
 80038f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f6:	1c5a      	adds	r2, r3, #1
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003900:	3b01      	subs	r3, #1
 8003902:	b29a      	uxth	r2, r3
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800390c:	b29b      	uxth	r3, r3
 800390e:	3b01      	subs	r3, #1
 8003910:	b29a      	uxth	r2, r3
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	691a      	ldr	r2, [r3, #16]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003920:	b2d2      	uxtb	r2, r2
 8003922:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003928:	1c5a      	adds	r2, r3, #1
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003932:	3b01      	subs	r3, #1
 8003934:	b29a      	uxth	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800393e:	b29b      	uxth	r3, r3
 8003940:	3b01      	subs	r3, #1
 8003942:	b29a      	uxth	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003948:	e0b8      	b.n	8003abc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800394a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394c:	9300      	str	r3, [sp, #0]
 800394e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003950:	2200      	movs	r2, #0
 8003952:	4966      	ldr	r1, [pc, #408]	; (8003aec <HAL_I2C_Mem_Read+0x448>)
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	f002 f88d 	bl	8005a74 <I2C_WaitOnFlagUntilTimeout>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d001      	beq.n	8003964 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e0bf      	b.n	8003ae4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003972:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	691a      	ldr	r2, [r3, #16]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397e:	b2d2      	uxtb	r2, r2
 8003980:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003986:	1c5a      	adds	r2, r3, #1
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003990:	3b01      	subs	r3, #1
 8003992:	b29a      	uxth	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399c:	b29b      	uxth	r3, r3
 800399e:	3b01      	subs	r3, #1
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a8:	9300      	str	r3, [sp, #0]
 80039aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ac:	2200      	movs	r2, #0
 80039ae:	494f      	ldr	r1, [pc, #316]	; (8003aec <HAL_I2C_Mem_Read+0x448>)
 80039b0:	68f8      	ldr	r0, [r7, #12]
 80039b2:	f002 f85f 	bl	8005a74 <I2C_WaitOnFlagUntilTimeout>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d001      	beq.n	80039c0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e091      	b.n	8003ae4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	691a      	ldr	r2, [r3, #16]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039da:	b2d2      	uxtb	r2, r2
 80039dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e2:	1c5a      	adds	r2, r3, #1
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ec:	3b01      	subs	r3, #1
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	3b01      	subs	r3, #1
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	691a      	ldr	r2, [r3, #16]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0c:	b2d2      	uxtb	r2, r2
 8003a0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a14:	1c5a      	adds	r2, r3, #1
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	b29a      	uxth	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a34:	e042      	b.n	8003abc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a38:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a3a:	68f8      	ldr	r0, [r7, #12]
 8003a3c:	f002 f9a4 	bl	8005d88 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e04c      	b.n	8003ae4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	691a      	ldr	r2, [r3, #16]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a54:	b2d2      	uxtb	r2, r2
 8003a56:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5c:	1c5a      	adds	r2, r3, #1
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a66:	3b01      	subs	r3, #1
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	3b01      	subs	r3, #1
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	f003 0304 	and.w	r3, r3, #4
 8003a86:	2b04      	cmp	r3, #4
 8003a88:	d118      	bne.n	8003abc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	691a      	ldr	r2, [r3, #16]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a94:	b2d2      	uxtb	r2, r2
 8003a96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9c:	1c5a      	adds	r2, r3, #1
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f47f aec2 	bne.w	800384a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2220      	movs	r2, #32
 8003aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	e000      	b.n	8003ae4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003ae2:	2302      	movs	r3, #2
  }
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3728      	adds	r7, #40	; 0x28
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	00010004 	.word	0x00010004

08003af0 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b087      	sub	sp, #28
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	4608      	mov	r0, r1
 8003afa:	4611      	mov	r1, r2
 8003afc:	461a      	mov	r2, r3
 8003afe:	4603      	mov	r3, r0
 8003b00:	817b      	strh	r3, [r7, #10]
 8003b02:	460b      	mov	r3, r1
 8003b04:	813b      	strh	r3, [r7, #8]
 8003b06:	4613      	mov	r3, r2
 8003b08:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b20      	cmp	r3, #32
 8003b18:	f040 809a 	bne.w	8003c50 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003b1c:	4b50      	ldr	r3, [pc, #320]	; (8003c60 <HAL_I2C_Mem_Read_IT+0x170>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	08db      	lsrs	r3, r3, #3
 8003b22:	4a50      	ldr	r2, [pc, #320]	; (8003c64 <HAL_I2C_Mem_Read_IT+0x174>)
 8003b24:	fba2 2303 	umull	r2, r3, r2, r3
 8003b28:	0a1a      	lsrs	r2, r3, #8
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	4413      	add	r3, r2
 8003b30:	009a      	lsls	r2, r3, #2
 8003b32:	4413      	add	r3, r2
 8003b34:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d116      	bne.n	8003b70 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2220      	movs	r2, #32
 8003b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5c:	f043 0220 	orr.w	r2, r3, #32
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e070      	b.n	8003c52 <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d0db      	beq.n	8003b36 <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d101      	bne.n	8003b8c <HAL_I2C_Mem_Read_IT+0x9c>
 8003b88:	2302      	movs	r3, #2
 8003b8a:	e062      	b.n	8003c52 <HAL_I2C_Mem_Read_IT+0x162>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d007      	beq.n	8003bb2 <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f042 0201 	orr.w	r2, r2, #1
 8003bb0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bc0:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2222      	movs	r2, #34	; 0x22
 8003bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2240      	movs	r2, #64	; 0x40
 8003bce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6a3a      	ldr	r2, [r7, #32]
 8003bdc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003be2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be8:	b29a      	uxth	r2, r3
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	4a1d      	ldr	r2, [pc, #116]	; (8003c68 <HAL_I2C_Mem_Read_IT+0x178>)
 8003bf2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003bf4:	897a      	ldrh	r2, [r7, #10]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8003bfa:	893a      	ldrh	r2, [r7, #8]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8003c00:	88fa      	ldrh	r2, [r7, #6]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c1a:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c2a:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d007      	beq.n	8003c4c <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	685a      	ldr	r2, [r3, #4]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003c4a:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	e000      	b.n	8003c52 <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 8003c50:	2302      	movs	r3, #2
  }
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	371c      	adds	r7, #28
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	20000000 	.word	0x20000000
 8003c64:	14f8b589 	.word	0x14f8b589
 8003c68:	ffff0000 	.word	0xffff0000

08003c6c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b08a      	sub	sp, #40	; 0x28
 8003c70:	af02      	add	r7, sp, #8
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	607a      	str	r2, [r7, #4]
 8003c76:	603b      	str	r3, [r7, #0]
 8003c78:	460b      	mov	r3, r1
 8003c7a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003c7c:	f7fe f8a8 	bl	8001dd0 <HAL_GetTick>
 8003c80:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003c82:	2301      	movs	r3, #1
 8003c84:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b20      	cmp	r3, #32
 8003c90:	f040 8111 	bne.w	8003eb6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	9300      	str	r3, [sp, #0]
 8003c98:	2319      	movs	r3, #25
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	4988      	ldr	r1, [pc, #544]	; (8003ec0 <HAL_I2C_IsDeviceReady+0x254>)
 8003c9e:	68f8      	ldr	r0, [r7, #12]
 8003ca0:	f001 fee8 	bl	8005a74 <I2C_WaitOnFlagUntilTimeout>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d001      	beq.n	8003cae <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003caa:	2302      	movs	r3, #2
 8003cac:	e104      	b.n	8003eb8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d101      	bne.n	8003cbc <HAL_I2C_IsDeviceReady+0x50>
 8003cb8:	2302      	movs	r3, #2
 8003cba:	e0fd      	b.n	8003eb8 <HAL_I2C_IsDeviceReady+0x24c>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d007      	beq.n	8003ce2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f042 0201 	orr.w	r2, r2, #1
 8003ce0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cf0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2224      	movs	r2, #36	; 0x24
 8003cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	4a70      	ldr	r2, [pc, #448]	; (8003ec4 <HAL_I2C_IsDeviceReady+0x258>)
 8003d04:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d14:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	9300      	str	r3, [sp, #0]
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d22:	68f8      	ldr	r0, [r7, #12]
 8003d24:	f001 fea6 	bl	8005a74 <I2C_WaitOnFlagUntilTimeout>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00d      	beq.n	8003d4a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d3c:	d103      	bne.n	8003d46 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d44:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e0b6      	b.n	8003eb8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d4a:	897b      	ldrh	r3, [r7, #10]
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	461a      	mov	r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d58:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003d5a:	f7fe f839 	bl	8001dd0 <HAL_GetTick>
 8003d5e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	f003 0302 	and.w	r3, r3, #2
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	bf0c      	ite	eq
 8003d6e:	2301      	moveq	r3, #1
 8003d70:	2300      	movne	r3, #0
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	695b      	ldr	r3, [r3, #20]
 8003d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d84:	bf0c      	ite	eq
 8003d86:	2301      	moveq	r3, #1
 8003d88:	2300      	movne	r3, #0
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003d8e:	e025      	b.n	8003ddc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d90:	f7fe f81e 	bl	8001dd0 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	683a      	ldr	r2, [r7, #0]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d302      	bcc.n	8003da6 <HAL_I2C_IsDeviceReady+0x13a>
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d103      	bne.n	8003dae <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	22a0      	movs	r2, #160	; 0xa0
 8003daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	f003 0302 	and.w	r3, r3, #2
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	bf0c      	ite	eq
 8003dbc:	2301      	moveq	r3, #1
 8003dbe:	2300      	movne	r3, #0
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dd2:	bf0c      	ite	eq
 8003dd4:	2301      	moveq	r3, #1
 8003dd6:	2300      	movne	r3, #0
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	2ba0      	cmp	r3, #160	; 0xa0
 8003de6:	d005      	beq.n	8003df4 <HAL_I2C_IsDeviceReady+0x188>
 8003de8:	7dfb      	ldrb	r3, [r7, #23]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d102      	bne.n	8003df4 <HAL_I2C_IsDeviceReady+0x188>
 8003dee:	7dbb      	ldrb	r3, [r7, #22]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d0cd      	beq.n	8003d90 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2220      	movs	r2, #32
 8003df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d129      	bne.n	8003e5e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e18:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	613b      	str	r3, [r7, #16]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	695b      	ldr	r3, [r3, #20]
 8003e24:	613b      	str	r3, [r7, #16]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	613b      	str	r3, [r7, #16]
 8003e2e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	9300      	str	r3, [sp, #0]
 8003e34:	2319      	movs	r3, #25
 8003e36:	2201      	movs	r2, #1
 8003e38:	4921      	ldr	r1, [pc, #132]	; (8003ec0 <HAL_I2C_IsDeviceReady+0x254>)
 8003e3a:	68f8      	ldr	r0, [r7, #12]
 8003e3c:	f001 fe1a 	bl	8005a74 <I2C_WaitOnFlagUntilTimeout>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d001      	beq.n	8003e4a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e036      	b.n	8003eb8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2220      	movs	r2, #32
 8003e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	e02c      	b.n	8003eb8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e6c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e76:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	9300      	str	r3, [sp, #0]
 8003e7c:	2319      	movs	r3, #25
 8003e7e:	2201      	movs	r2, #1
 8003e80:	490f      	ldr	r1, [pc, #60]	; (8003ec0 <HAL_I2C_IsDeviceReady+0x254>)
 8003e82:	68f8      	ldr	r0, [r7, #12]
 8003e84:	f001 fdf6 	bl	8005a74 <I2C_WaitOnFlagUntilTimeout>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d001      	beq.n	8003e92 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e012      	b.n	8003eb8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	3301      	adds	r3, #1
 8003e96:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	f4ff af32 	bcc.w	8003d06 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2220      	movs	r2, #32
 8003ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e000      	b.n	8003eb8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003eb6:	2302      	movs	r3, #2
  }
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3720      	adds	r7, #32
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	00100002 	.word	0x00100002
 8003ec4:	ffff0000 	.word	0xffff0000

08003ec8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b088      	sub	sp, #32
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ee8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ef0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003ef2:	7bfb      	ldrb	r3, [r7, #15]
 8003ef4:	2b10      	cmp	r3, #16
 8003ef6:	d003      	beq.n	8003f00 <HAL_I2C_EV_IRQHandler+0x38>
 8003ef8:	7bfb      	ldrb	r3, [r7, #15]
 8003efa:	2b40      	cmp	r3, #64	; 0x40
 8003efc:	f040 80bd 	bne.w	800407a <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10d      	bne.n	8003f36 <HAL_I2C_EV_IRQHandler+0x6e>
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003f20:	d003      	beq.n	8003f2a <HAL_I2C_EV_IRQHandler+0x62>
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003f28:	d101      	bne.n	8003f2e <HAL_I2C_EV_IRQHandler+0x66>
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e000      	b.n	8003f30 <HAL_I2C_EV_IRQHandler+0x68>
 8003f2e:	2300      	movs	r3, #0
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	f000 812e 	beq.w	8004192 <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	f003 0301 	and.w	r3, r3, #1
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00c      	beq.n	8003f5a <HAL_I2C_EV_IRQHandler+0x92>
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	0a5b      	lsrs	r3, r3, #9
 8003f44:	f003 0301 	and.w	r3, r3, #1
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d006      	beq.n	8003f5a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f001 ffa0 	bl	8005e92 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 fd52 	bl	80049fc <I2C_Master_SB>
 8003f58:	e08e      	b.n	8004078 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	08db      	lsrs	r3, r3, #3
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d009      	beq.n	8003f7a <HAL_I2C_EV_IRQHandler+0xb2>
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	0a5b      	lsrs	r3, r3, #9
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d003      	beq.n	8003f7a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 fdc8 	bl	8004b08 <I2C_Master_ADD10>
 8003f78:	e07e      	b.n	8004078 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	085b      	lsrs	r3, r3, #1
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d009      	beq.n	8003f9a <HAL_I2C_EV_IRQHandler+0xd2>
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	0a5b      	lsrs	r3, r3, #9
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d003      	beq.n	8003f9a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 fde2 	bl	8004b5c <I2C_Master_ADDR>
 8003f98:	e06e      	b.n	8004078 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	089b      	lsrs	r3, r3, #2
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d037      	beq.n	8004016 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fb4:	f000 80ef 	beq.w	8004196 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	09db      	lsrs	r3, r3, #7
 8003fbc:	f003 0301 	and.w	r3, r3, #1
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d00f      	beq.n	8003fe4 <HAL_I2C_EV_IRQHandler+0x11c>
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	0a9b      	lsrs	r3, r3, #10
 8003fc8:	f003 0301 	and.w	r3, r3, #1
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d009      	beq.n	8003fe4 <HAL_I2C_EV_IRQHandler+0x11c>
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	089b      	lsrs	r3, r3, #2
 8003fd4:	f003 0301 	and.w	r3, r3, #1
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d103      	bne.n	8003fe4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f000 f9df 	bl	80043a0 <I2C_MasterTransmit_TXE>
 8003fe2:	e049      	b.n	8004078 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	089b      	lsrs	r3, r3, #2
 8003fe8:	f003 0301 	and.w	r3, r3, #1
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f000 80d2 	beq.w	8004196 <HAL_I2C_EV_IRQHandler+0x2ce>
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	0a5b      	lsrs	r3, r3, #9
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f000 80cb 	beq.w	8004196 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8004000:	7bfb      	ldrb	r3, [r7, #15]
 8004002:	2b10      	cmp	r3, #16
 8004004:	d103      	bne.n	800400e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 fa66 	bl	80044d8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800400c:	e0c3      	b.n	8004196 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 faca 	bl	80045a8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004014:	e0bf      	b.n	8004196 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004020:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004024:	f000 80b7 	beq.w	8004196 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	099b      	lsrs	r3, r3, #6
 800402c:	f003 0301 	and.w	r3, r3, #1
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00f      	beq.n	8004054 <HAL_I2C_EV_IRQHandler+0x18c>
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	0a9b      	lsrs	r3, r3, #10
 8004038:	f003 0301 	and.w	r3, r3, #1
 800403c:	2b00      	cmp	r3, #0
 800403e:	d009      	beq.n	8004054 <HAL_I2C_EV_IRQHandler+0x18c>
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	089b      	lsrs	r3, r3, #2
 8004044:	f003 0301 	and.w	r3, r3, #1
 8004048:	2b00      	cmp	r3, #0
 800404a:	d103      	bne.n	8004054 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f000 fb3a 	bl	80046c6 <I2C_MasterReceive_RXNE>
 8004052:	e011      	b.n	8004078 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	089b      	lsrs	r3, r3, #2
 8004058:	f003 0301 	and.w	r3, r3, #1
 800405c:	2b00      	cmp	r3, #0
 800405e:	f000 809a 	beq.w	8004196 <HAL_I2C_EV_IRQHandler+0x2ce>
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	0a5b      	lsrs	r3, r3, #9
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	2b00      	cmp	r3, #0
 800406c:	f000 8093 	beq.w	8004196 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f000 fbd9 	bl	8004828 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004076:	e08e      	b.n	8004196 <HAL_I2C_EV_IRQHandler+0x2ce>
 8004078:	e08d      	b.n	8004196 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407e:	2b00      	cmp	r3, #0
 8004080:	d004      	beq.n	800408c <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	695b      	ldr	r3, [r3, #20]
 8004088:	61fb      	str	r3, [r7, #28]
 800408a:	e007      	b.n	800409c <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	085b      	lsrs	r3, r3, #1
 80040a0:	f003 0301 	and.w	r3, r3, #1
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d012      	beq.n	80040ce <HAL_I2C_EV_IRQHandler+0x206>
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	0a5b      	lsrs	r3, r3, #9
 80040ac:	f003 0301 	and.w	r3, r3, #1
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d00c      	beq.n	80040ce <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d003      	beq.n	80040c4 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80040c4:	69b9      	ldr	r1, [r7, #24]
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 ff97 	bl	8004ffa <I2C_Slave_ADDR>
 80040cc:	e066      	b.n	800419c <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	091b      	lsrs	r3, r3, #4
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d009      	beq.n	80040ee <HAL_I2C_EV_IRQHandler+0x226>
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	0a5b      	lsrs	r3, r3, #9
 80040de:	f003 0301 	and.w	r3, r3, #1
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d003      	beq.n	80040ee <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 ffcc 	bl	8005084 <I2C_Slave_STOPF>
 80040ec:	e056      	b.n	800419c <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80040ee:	7bbb      	ldrb	r3, [r7, #14]
 80040f0:	2b21      	cmp	r3, #33	; 0x21
 80040f2:	d002      	beq.n	80040fa <HAL_I2C_EV_IRQHandler+0x232>
 80040f4:	7bbb      	ldrb	r3, [r7, #14]
 80040f6:	2b29      	cmp	r3, #41	; 0x29
 80040f8:	d125      	bne.n	8004146 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	09db      	lsrs	r3, r3, #7
 80040fe:	f003 0301 	and.w	r3, r3, #1
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00f      	beq.n	8004126 <HAL_I2C_EV_IRQHandler+0x25e>
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	0a9b      	lsrs	r3, r3, #10
 800410a:	f003 0301 	and.w	r3, r3, #1
 800410e:	2b00      	cmp	r3, #0
 8004110:	d009      	beq.n	8004126 <HAL_I2C_EV_IRQHandler+0x25e>
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	089b      	lsrs	r3, r3, #2
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b00      	cmp	r3, #0
 800411c:	d103      	bne.n	8004126 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 fead 	bl	8004e7e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004124:	e039      	b.n	800419a <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	089b      	lsrs	r3, r3, #2
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	2b00      	cmp	r3, #0
 8004130:	d033      	beq.n	800419a <HAL_I2C_EV_IRQHandler+0x2d2>
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	0a5b      	lsrs	r3, r3, #9
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	2b00      	cmp	r3, #0
 800413c:	d02d      	beq.n	800419a <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 feda 	bl	8004ef8 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004144:	e029      	b.n	800419a <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	099b      	lsrs	r3, r3, #6
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00f      	beq.n	8004172 <HAL_I2C_EV_IRQHandler+0x2aa>
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	0a9b      	lsrs	r3, r3, #10
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	2b00      	cmp	r3, #0
 800415c:	d009      	beq.n	8004172 <HAL_I2C_EV_IRQHandler+0x2aa>
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	089b      	lsrs	r3, r3, #2
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	2b00      	cmp	r3, #0
 8004168:	d103      	bne.n	8004172 <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 fee5 	bl	8004f3a <I2C_SlaveReceive_RXNE>
 8004170:	e014      	b.n	800419c <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	089b      	lsrs	r3, r3, #2
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00e      	beq.n	800419c <HAL_I2C_EV_IRQHandler+0x2d4>
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	0a5b      	lsrs	r3, r3, #9
 8004182:	f003 0301 	and.w	r3, r3, #1
 8004186:	2b00      	cmp	r3, #0
 8004188:	d008      	beq.n	800419c <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 ff13 	bl	8004fb6 <I2C_SlaveReceive_BTF>
 8004190:	e004      	b.n	800419c <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8004192:	bf00      	nop
 8004194:	e002      	b.n	800419c <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004196:	bf00      	nop
 8004198:	e000      	b.n	800419c <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800419a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800419c:	3720      	adds	r7, #32
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}

080041a2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80041a2:	b580      	push	{r7, lr}
 80041a4:	b08a      	sub	sp, #40	; 0x28
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	695b      	ldr	r3, [r3, #20]
 80041b0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80041ba:	2300      	movs	r3, #0
 80041bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041c4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80041c6:	6a3b      	ldr	r3, [r7, #32]
 80041c8:	0a1b      	lsrs	r3, r3, #8
 80041ca:	f003 0301 	and.w	r3, r3, #1
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00e      	beq.n	80041f0 <HAL_I2C_ER_IRQHandler+0x4e>
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	0a1b      	lsrs	r3, r3, #8
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d008      	beq.n	80041f0 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80041de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e0:	f043 0301 	orr.w	r3, r3, #1
 80041e4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80041ee:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80041f0:	6a3b      	ldr	r3, [r7, #32]
 80041f2:	0a5b      	lsrs	r3, r3, #9
 80041f4:	f003 0301 	and.w	r3, r3, #1
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00e      	beq.n	800421a <HAL_I2C_ER_IRQHandler+0x78>
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	0a1b      	lsrs	r3, r3, #8
 8004200:	f003 0301 	and.w	r3, r3, #1
 8004204:	2b00      	cmp	r3, #0
 8004206:	d008      	beq.n	800421a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420a:	f043 0302 	orr.w	r3, r3, #2
 800420e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004218:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800421a:	6a3b      	ldr	r3, [r7, #32]
 800421c:	0a9b      	lsrs	r3, r3, #10
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	2b00      	cmp	r3, #0
 8004224:	d03f      	beq.n	80042a6 <HAL_I2C_ER_IRQHandler+0x104>
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	0a1b      	lsrs	r3, r3, #8
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	2b00      	cmp	r3, #0
 8004230:	d039      	beq.n	80042a6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004232:	7efb      	ldrb	r3, [r7, #27]
 8004234:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800423a:	b29b      	uxth	r3, r3
 800423c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004244:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800424c:	7ebb      	ldrb	r3, [r7, #26]
 800424e:	2b20      	cmp	r3, #32
 8004250:	d112      	bne.n	8004278 <HAL_I2C_ER_IRQHandler+0xd6>
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d10f      	bne.n	8004278 <HAL_I2C_ER_IRQHandler+0xd6>
 8004258:	7cfb      	ldrb	r3, [r7, #19]
 800425a:	2b21      	cmp	r3, #33	; 0x21
 800425c:	d008      	beq.n	8004270 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800425e:	7cfb      	ldrb	r3, [r7, #19]
 8004260:	2b29      	cmp	r3, #41	; 0x29
 8004262:	d005      	beq.n	8004270 <HAL_I2C_ER_IRQHandler+0xce>
 8004264:	7cfb      	ldrb	r3, [r7, #19]
 8004266:	2b28      	cmp	r3, #40	; 0x28
 8004268:	d106      	bne.n	8004278 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2b21      	cmp	r3, #33	; 0x21
 800426e:	d103      	bne.n	8004278 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f001 f837 	bl	80052e4 <I2C_Slave_AF>
 8004276:	e016      	b.n	80042a6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004280:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004284:	f043 0304 	orr.w	r3, r3, #4
 8004288:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800428a:	7efb      	ldrb	r3, [r7, #27]
 800428c:	2b10      	cmp	r3, #16
 800428e:	d002      	beq.n	8004296 <HAL_I2C_ER_IRQHandler+0xf4>
 8004290:	7efb      	ldrb	r3, [r7, #27]
 8004292:	2b40      	cmp	r3, #64	; 0x40
 8004294:	d107      	bne.n	80042a6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042a4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80042a6:	6a3b      	ldr	r3, [r7, #32]
 80042a8:	0adb      	lsrs	r3, r3, #11
 80042aa:	f003 0301 	and.w	r3, r3, #1
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00e      	beq.n	80042d0 <HAL_I2C_ER_IRQHandler+0x12e>
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	0a1b      	lsrs	r3, r3, #8
 80042b6:	f003 0301 	and.w	r3, r3, #1
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d008      	beq.n	80042d0 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80042be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c0:	f043 0308 	orr.w	r3, r3, #8
 80042c4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80042ce:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80042d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d008      	beq.n	80042e8 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042dc:	431a      	orrs	r2, r3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f001 f86e 	bl	80053c4 <I2C_ITError>
  }
}
 80042e8:	bf00      	nop
 80042ea:	3728      	adds	r7, #40	; 0x28
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80042f8:	bf00      	nop
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004334:	bf00      	nop
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	460b      	mov	r3, r1
 800434a:	70fb      	strb	r3, [r7, #3]
 800434c:	4613      	mov	r3, r2
 800434e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004350:	bf00      	nop
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004378:	bf00      	nop
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004392:	b2db      	uxtb	r3, r3
}
 8004394:	4618      	mov	r0, r3
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ae:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043b6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043bc:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d150      	bne.n	8004468 <I2C_MasterTransmit_TXE+0xc8>
 80043c6:	7bfb      	ldrb	r3, [r7, #15]
 80043c8:	2b21      	cmp	r3, #33	; 0x21
 80043ca:	d14d      	bne.n	8004468 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	2b08      	cmp	r3, #8
 80043d0:	d01d      	beq.n	800440e <I2C_MasterTransmit_TXE+0x6e>
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	2b20      	cmp	r3, #32
 80043d6:	d01a      	beq.n	800440e <I2C_MasterTransmit_TXE+0x6e>
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80043de:	d016      	beq.n	800440e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	685a      	ldr	r2, [r3, #4]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80043ee:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2211      	movs	r2, #17
 80043f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2220      	movs	r2, #32
 8004402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f7ff ff72 	bl	80042f0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800440c:	e060      	b.n	80044d0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	685a      	ldr	r2, [r3, #4]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800441c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800442c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2220      	movs	r2, #32
 8004438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004442:	b2db      	uxtb	r3, r3
 8004444:	2b40      	cmp	r3, #64	; 0x40
 8004446:	d107      	bne.n	8004458 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f00d f923 	bl	801169c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004456:	e03b      	b.n	80044d0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f7ff ff45 	bl	80042f0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004466:	e033      	b.n	80044d0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004468:	7bfb      	ldrb	r3, [r7, #15]
 800446a:	2b21      	cmp	r3, #33	; 0x21
 800446c:	d005      	beq.n	800447a <I2C_MasterTransmit_TXE+0xda>
 800446e:	7bbb      	ldrb	r3, [r7, #14]
 8004470:	2b40      	cmp	r3, #64	; 0x40
 8004472:	d12d      	bne.n	80044d0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004474:	7bfb      	ldrb	r3, [r7, #15]
 8004476:	2b22      	cmp	r3, #34	; 0x22
 8004478:	d12a      	bne.n	80044d0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800447e:	b29b      	uxth	r3, r3
 8004480:	2b00      	cmp	r3, #0
 8004482:	d108      	bne.n	8004496 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	685a      	ldr	r2, [r3, #4]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004492:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004494:	e01c      	b.n	80044d0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800449c:	b2db      	uxtb	r3, r3
 800449e:	2b40      	cmp	r3, #64	; 0x40
 80044a0:	d103      	bne.n	80044aa <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 f880 	bl	80045a8 <I2C_MemoryTransmit_TXE_BTF>
}
 80044a8:	e012      	b.n	80044d0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ae:	781a      	ldrb	r2, [r3, #0]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ba:	1c5a      	adds	r2, r3, #1
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	3b01      	subs	r3, #1
 80044c8:	b29a      	uxth	r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80044ce:	e7ff      	b.n	80044d0 <I2C_MasterTransmit_TXE+0x130>
 80044d0:	bf00      	nop
 80044d2:	3710      	adds	r7, #16
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	2b21      	cmp	r3, #33	; 0x21
 80044f0:	d156      	bne.n	80045a0 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d012      	beq.n	8004522 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004500:	781a      	ldrb	r2, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450c:	1c5a      	adds	r2, r3, #1
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004516:	b29b      	uxth	r3, r3
 8004518:	3b01      	subs	r3, #1
 800451a:	b29a      	uxth	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004520:	e03e      	b.n	80045a0 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2b08      	cmp	r3, #8
 8004526:	d01d      	beq.n	8004564 <I2C_MasterTransmit_BTF+0x8c>
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2b20      	cmp	r3, #32
 800452c:	d01a      	beq.n	8004564 <I2C_MasterTransmit_BTF+0x8c>
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004534:	d016      	beq.n	8004564 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	685a      	ldr	r2, [r3, #4]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004544:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2211      	movs	r2, #17
 800454a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2220      	movs	r2, #32
 8004558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f7ff fec7 	bl	80042f0 <HAL_I2C_MasterTxCpltCallback>
}
 8004562:	e01d      	b.n	80045a0 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	685a      	ldr	r2, [r3, #4]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004572:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004582:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2220      	movs	r2, #32
 800458e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f7ff fea8 	bl	80042f0 <HAL_I2C_MasterTxCpltCallback>
}
 80045a0:	bf00      	nop
 80045a2:	3710      	adds	r7, #16
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045b6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d11d      	bne.n	80045fc <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d10b      	bne.n	80045e0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045cc:	b2da      	uxtb	r2, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045d8:	1c9a      	adds	r2, r3, #2
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80045de:	e06e      	b.n	80046be <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	121b      	asrs	r3, r3, #8
 80045e8:	b2da      	uxtb	r2, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045f4:	1c5a      	adds	r2, r3, #1
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80045fa:	e060      	b.n	80046be <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004600:	2b01      	cmp	r3, #1
 8004602:	d10b      	bne.n	800461c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004608:	b2da      	uxtb	r2, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004614:	1c5a      	adds	r2, r3, #1
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	651a      	str	r2, [r3, #80]	; 0x50
}
 800461a:	e050      	b.n	80046be <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004620:	2b02      	cmp	r3, #2
 8004622:	d14c      	bne.n	80046be <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004624:	7bfb      	ldrb	r3, [r7, #15]
 8004626:	2b22      	cmp	r3, #34	; 0x22
 8004628:	d108      	bne.n	800463c <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004638:	601a      	str	r2, [r3, #0]
}
 800463a:	e040      	b.n	80046be <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004640:	b29b      	uxth	r3, r3
 8004642:	2b00      	cmp	r3, #0
 8004644:	d015      	beq.n	8004672 <I2C_MemoryTransmit_TXE_BTF+0xca>
 8004646:	7bfb      	ldrb	r3, [r7, #15]
 8004648:	2b21      	cmp	r3, #33	; 0x21
 800464a:	d112      	bne.n	8004672 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004650:	781a      	ldrb	r2, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465c:	1c5a      	adds	r2, r3, #1
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004666:	b29b      	uxth	r3, r3
 8004668:	3b01      	subs	r3, #1
 800466a:	b29a      	uxth	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004670:	e025      	b.n	80046be <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004676:	b29b      	uxth	r3, r3
 8004678:	2b00      	cmp	r3, #0
 800467a:	d120      	bne.n	80046be <I2C_MemoryTransmit_TXE_BTF+0x116>
 800467c:	7bfb      	ldrb	r3, [r7, #15]
 800467e:	2b21      	cmp	r3, #33	; 0x21
 8004680:	d11d      	bne.n	80046be <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	685a      	ldr	r2, [r3, #4]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004690:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046a0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2220      	movs	r2, #32
 80046ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f00c ffef 	bl	801169c <HAL_I2C_MemTxCpltCallback>
}
 80046be:	bf00      	nop
 80046c0:	3710      	adds	r7, #16
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80046c6:	b580      	push	{r7, lr}
 80046c8:	b084      	sub	sp, #16
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2b22      	cmp	r3, #34	; 0x22
 80046d8:	f040 80a2 	bne.w	8004820 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2b03      	cmp	r3, #3
 80046e8:	d921      	bls.n	800472e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	691a      	ldr	r2, [r3, #16]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f4:	b2d2      	uxtb	r2, r2
 80046f6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fc:	1c5a      	adds	r2, r3, #1
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004706:	b29b      	uxth	r3, r3
 8004708:	3b01      	subs	r3, #1
 800470a:	b29a      	uxth	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004714:	b29b      	uxth	r3, r3
 8004716:	2b03      	cmp	r3, #3
 8004718:	f040 8082 	bne.w	8004820 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	685a      	ldr	r2, [r3, #4]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800472a:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800472c:	e078      	b.n	8004820 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004732:	2b02      	cmp	r3, #2
 8004734:	d074      	beq.n	8004820 <I2C_MasterReceive_RXNE+0x15a>
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2b01      	cmp	r3, #1
 800473a:	d002      	beq.n	8004742 <I2C_MasterReceive_RXNE+0x7c>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d16e      	bne.n	8004820 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f001 faee 	bl	8005d24 <I2C_WaitOnSTOPRequestThroughIT>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d142      	bne.n	80047d4 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800475c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	685a      	ldr	r2, [r3, #4]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800476c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	691a      	ldr	r2, [r3, #16]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004778:	b2d2      	uxtb	r2, r2
 800477a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004780:	1c5a      	adds	r2, r3, #1
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800478a:	b29b      	uxth	r3, r3
 800478c:	3b01      	subs	r3, #1
 800478e:	b29a      	uxth	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2220      	movs	r2, #32
 8004798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	2b40      	cmp	r3, #64	; 0x40
 80047a6:	d10a      	bne.n	80047be <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f00c ffb8 	bl	801172c <HAL_I2C_MemRxCpltCallback>
}
 80047bc:	e030      	b.n	8004820 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2212      	movs	r2, #18
 80047ca:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f7ff fd99 	bl	8004304 <HAL_I2C_MasterRxCpltCallback>
}
 80047d2:	e025      	b.n	8004820 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	685a      	ldr	r2, [r3, #4]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80047e2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	691a      	ldr	r2, [r3, #16]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ee:	b2d2      	uxtb	r2, r2
 80047f0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f6:	1c5a      	adds	r2, r3, #1
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004800:	b29b      	uxth	r3, r3
 8004802:	3b01      	subs	r3, #1
 8004804:	b29a      	uxth	r2, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2220      	movs	r2, #32
 800480e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f00c ffce 	bl	80117bc <HAL_I2C_ErrorCallback>
}
 8004820:	bf00      	nop
 8004822:	3710      	adds	r7, #16
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004834:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800483a:	b29b      	uxth	r3, r3
 800483c:	2b04      	cmp	r3, #4
 800483e:	d11b      	bne.n	8004878 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	685a      	ldr	r2, [r3, #4]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800484e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	691a      	ldr	r2, [r3, #16]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485a:	b2d2      	uxtb	r2, r2
 800485c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004862:	1c5a      	adds	r2, r3, #1
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800486c:	b29b      	uxth	r3, r3
 800486e:	3b01      	subs	r3, #1
 8004870:	b29a      	uxth	r2, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004876:	e0bd      	b.n	80049f4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800487c:	b29b      	uxth	r3, r3
 800487e:	2b03      	cmp	r3, #3
 8004880:	d129      	bne.n	80048d6 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	685a      	ldr	r2, [r3, #4]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004890:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2b04      	cmp	r3, #4
 8004896:	d00a      	beq.n	80048ae <I2C_MasterReceive_BTF+0x86>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2b02      	cmp	r3, #2
 800489c:	d007      	beq.n	80048ae <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048ac:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	691a      	ldr	r2, [r3, #16]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b8:	b2d2      	uxtb	r2, r2
 80048ba:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c0:	1c5a      	adds	r2, r3, #1
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	3b01      	subs	r3, #1
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80048d4:	e08e      	b.n	80049f4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048da:	b29b      	uxth	r3, r3
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d176      	bne.n	80049ce <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d002      	beq.n	80048ec <I2C_MasterReceive_BTF+0xc4>
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2b10      	cmp	r3, #16
 80048ea:	d108      	bne.n	80048fe <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048fa:	601a      	str	r2, [r3, #0]
 80048fc:	e019      	b.n	8004932 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2b04      	cmp	r3, #4
 8004902:	d002      	beq.n	800490a <I2C_MasterReceive_BTF+0xe2>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2b02      	cmp	r3, #2
 8004908:	d108      	bne.n	800491c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004918:	601a      	str	r2, [r3, #0]
 800491a:	e00a      	b.n	8004932 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2b10      	cmp	r3, #16
 8004920:	d007      	beq.n	8004932 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004930:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	691a      	ldr	r2, [r3, #16]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493c:	b2d2      	uxtb	r2, r2
 800493e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004944:	1c5a      	adds	r2, r3, #1
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800494e:	b29b      	uxth	r3, r3
 8004950:	3b01      	subs	r3, #1
 8004952:	b29a      	uxth	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	691a      	ldr	r2, [r3, #16]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004962:	b2d2      	uxtb	r2, r2
 8004964:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496a:	1c5a      	adds	r2, r3, #1
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004974:	b29b      	uxth	r3, r3
 8004976:	3b01      	subs	r3, #1
 8004978:	b29a      	uxth	r2, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	685a      	ldr	r2, [r3, #4]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800498c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2220      	movs	r2, #32
 8004992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800499c:	b2db      	uxtb	r3, r3
 800499e:	2b40      	cmp	r3, #64	; 0x40
 80049a0:	d10a      	bne.n	80049b8 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f00c febb 	bl	801172c <HAL_I2C_MemRxCpltCallback>
}
 80049b6:	e01d      	b.n	80049f4 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2212      	movs	r2, #18
 80049c4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f7ff fc9c 	bl	8004304 <HAL_I2C_MasterRxCpltCallback>
}
 80049cc:	e012      	b.n	80049f4 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	691a      	ldr	r2, [r3, #16]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d8:	b2d2      	uxtb	r2, r2
 80049da:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e0:	1c5a      	adds	r2, r3, #1
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	3b01      	subs	r3, #1
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80049f4:	bf00      	nop
 80049f6:	3710      	adds	r7, #16
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	2b40      	cmp	r3, #64	; 0x40
 8004a0e:	d117      	bne.n	8004a40 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d109      	bne.n	8004a2c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	461a      	mov	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a28:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004a2a:	e067      	b.n	8004afc <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	f043 0301 	orr.w	r3, r3, #1
 8004a36:	b2da      	uxtb	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	611a      	str	r2, [r3, #16]
}
 8004a3e:	e05d      	b.n	8004afc <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	691b      	ldr	r3, [r3, #16]
 8004a44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a48:	d133      	bne.n	8004ab2 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b21      	cmp	r3, #33	; 0x21
 8004a54:	d109      	bne.n	8004a6a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a66:	611a      	str	r2, [r3, #16]
 8004a68:	e008      	b.n	8004a7c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	f043 0301 	orr.w	r3, r3, #1
 8004a74:	b2da      	uxtb	r2, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d004      	beq.n	8004a8e <I2C_Master_SB+0x92>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d108      	bne.n	8004aa0 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d032      	beq.n	8004afc <I2C_Master_SB+0x100>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d02d      	beq.n	8004afc <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	685a      	ldr	r2, [r3, #4]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004aae:	605a      	str	r2, [r3, #4]
}
 8004ab0:	e024      	b.n	8004afc <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d10e      	bne.n	8004ad8 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	11db      	asrs	r3, r3, #7
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	f003 0306 	and.w	r3, r3, #6
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	f063 030f 	orn	r3, r3, #15
 8004ace:	b2da      	uxtb	r2, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	611a      	str	r2, [r3, #16]
}
 8004ad6:	e011      	b.n	8004afc <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d10d      	bne.n	8004afc <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	11db      	asrs	r3, r3, #7
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	f003 0306 	and.w	r3, r3, #6
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	f063 030e 	orn	r3, r3, #14
 8004af4:	b2da      	uxtb	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	611a      	str	r2, [r3, #16]
}
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b14:	b2da      	uxtb	r2, r3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d103      	bne.n	8004b2c <I2C_Master_ADD10+0x24>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d011      	beq.n	8004b50 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d104      	bne.n	8004b40 <I2C_Master_ADD10+0x38>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d007      	beq.n	8004b50 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	685a      	ldr	r2, [r3, #4]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b4e:	605a      	str	r2, [r3, #4]
    }
  }
}
 8004b50:	bf00      	nop
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b091      	sub	sp, #68	; 0x44
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b6a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b72:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b78:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	2b22      	cmp	r3, #34	; 0x22
 8004b84:	f040 8169 	bne.w	8004e5a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d10f      	bne.n	8004bb0 <I2C_Master_ADDR+0x54>
 8004b90:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004b94:	2b40      	cmp	r3, #64	; 0x40
 8004b96:	d10b      	bne.n	8004bb0 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b98:	2300      	movs	r3, #0
 8004b9a:	633b      	str	r3, [r7, #48]	; 0x30
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	633b      	str	r3, [r7, #48]	; 0x30
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	699b      	ldr	r3, [r3, #24]
 8004baa:	633b      	str	r3, [r7, #48]	; 0x30
 8004bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bae:	e160      	b.n	8004e72 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d11d      	bne.n	8004bf4 <I2C_Master_ADDR+0x98>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004bc0:	d118      	bne.n	8004bf4 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	695b      	ldr	r3, [r3, #20]
 8004bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	699b      	ldr	r3, [r3, #24]
 8004bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004be6:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bec:	1c5a      	adds	r2, r3, #1
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	651a      	str	r2, [r3, #80]	; 0x50
 8004bf2:	e13e      	b.n	8004e72 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d113      	bne.n	8004c26 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bfe:	2300      	movs	r3, #0
 8004c00:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	695b      	ldr	r3, [r3, #20]
 8004c08:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	699b      	ldr	r3, [r3, #24]
 8004c10:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c12:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c22:	601a      	str	r2, [r3, #0]
 8004c24:	e115      	b.n	8004e52 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	f040 808a 	bne.w	8004d46 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c34:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c38:	d137      	bne.n	8004caa <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c48:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c58:	d113      	bne.n	8004c82 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c68:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	695b      	ldr	r3, [r3, #20]
 8004c74:	627b      	str	r3, [r7, #36]	; 0x24
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	699b      	ldr	r3, [r3, #24]
 8004c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c80:	e0e7      	b.n	8004e52 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c82:	2300      	movs	r3, #0
 8004c84:	623b      	str	r3, [r7, #32]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	695b      	ldr	r3, [r3, #20]
 8004c8c:	623b      	str	r3, [r7, #32]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	623b      	str	r3, [r7, #32]
 8004c96:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ca6:	601a      	str	r2, [r3, #0]
 8004ca8:	e0d3      	b.n	8004e52 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cac:	2b08      	cmp	r3, #8
 8004cae:	d02e      	beq.n	8004d0e <I2C_Master_ADDR+0x1b2>
 8004cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb2:	2b20      	cmp	r3, #32
 8004cb4:	d02b      	beq.n	8004d0e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cb8:	2b12      	cmp	r3, #18
 8004cba:	d102      	bne.n	8004cc2 <I2C_Master_ADDR+0x166>
 8004cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d125      	bne.n	8004d0e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc4:	2b04      	cmp	r3, #4
 8004cc6:	d00e      	beq.n	8004ce6 <I2C_Master_ADDR+0x18a>
 8004cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d00b      	beq.n	8004ce6 <I2C_Master_ADDR+0x18a>
 8004cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd0:	2b10      	cmp	r3, #16
 8004cd2:	d008      	beq.n	8004ce6 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ce2:	601a      	str	r2, [r3, #0]
 8004ce4:	e007      	b.n	8004cf6 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004cf4:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	61fb      	str	r3, [r7, #28]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	695b      	ldr	r3, [r3, #20]
 8004d00:	61fb      	str	r3, [r7, #28]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	61fb      	str	r3, [r7, #28]
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	e0a1      	b.n	8004e52 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d1c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d1e:	2300      	movs	r3, #0
 8004d20:	61bb      	str	r3, [r7, #24]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	695b      	ldr	r3, [r3, #20]
 8004d28:	61bb      	str	r3, [r7, #24]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	61bb      	str	r3, [r7, #24]
 8004d32:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d42:	601a      	str	r2, [r3, #0]
 8004d44:	e085      	b.n	8004e52 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d14d      	bne.n	8004dec <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d52:	2b04      	cmp	r3, #4
 8004d54:	d016      	beq.n	8004d84 <I2C_Master_ADDR+0x228>
 8004d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d013      	beq.n	8004d84 <I2C_Master_ADDR+0x228>
 8004d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d5e:	2b10      	cmp	r3, #16
 8004d60:	d010      	beq.n	8004d84 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d70:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d80:	601a      	str	r2, [r3, #0]
 8004d82:	e007      	b.n	8004d94 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d92:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004da2:	d117      	bne.n	8004dd4 <I2C_Master_ADDR+0x278>
 8004da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004da6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004daa:	d00b      	beq.n	8004dc4 <I2C_Master_ADDR+0x268>
 8004dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d008      	beq.n	8004dc4 <I2C_Master_ADDR+0x268>
 8004db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db4:	2b08      	cmp	r3, #8
 8004db6:	d005      	beq.n	8004dc4 <I2C_Master_ADDR+0x268>
 8004db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dba:	2b10      	cmp	r3, #16
 8004dbc:	d002      	beq.n	8004dc4 <I2C_Master_ADDR+0x268>
 8004dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc0:	2b20      	cmp	r3, #32
 8004dc2:	d107      	bne.n	8004dd4 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	685a      	ldr	r2, [r3, #4]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004dd2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	617b      	str	r3, [r7, #20]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	617b      	str	r3, [r7, #20]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	699b      	ldr	r3, [r3, #24]
 8004de6:	617b      	str	r3, [r7, #20]
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	e032      	b.n	8004e52 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004dfa:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e0a:	d117      	bne.n	8004e3c <I2C_Master_ADDR+0x2e0>
 8004e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e0e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e12:	d00b      	beq.n	8004e2c <I2C_Master_ADDR+0x2d0>
 8004e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d008      	beq.n	8004e2c <I2C_Master_ADDR+0x2d0>
 8004e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e1c:	2b08      	cmp	r3, #8
 8004e1e:	d005      	beq.n	8004e2c <I2C_Master_ADDR+0x2d0>
 8004e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e22:	2b10      	cmp	r3, #16
 8004e24:	d002      	beq.n	8004e2c <I2C_Master_ADDR+0x2d0>
 8004e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e28:	2b20      	cmp	r3, #32
 8004e2a:	d107      	bne.n	8004e3c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	685a      	ldr	r2, [r3, #4]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e3a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	613b      	str	r3, [r7, #16]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	613b      	str	r3, [r7, #16]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	613b      	str	r3, [r7, #16]
 8004e50:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004e58:	e00b      	b.n	8004e72 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	60fb      	str	r3, [r7, #12]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	695b      	ldr	r3, [r3, #20]
 8004e64:	60fb      	str	r3, [r7, #12]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	699b      	ldr	r3, [r3, #24]
 8004e6c:	60fb      	str	r3, [r7, #12]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
}
 8004e70:	e7ff      	b.n	8004e72 <I2C_Master_ADDR+0x316>
 8004e72:	bf00      	nop
 8004e74:	3744      	adds	r7, #68	; 0x44
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr

08004e7e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004e7e:	b580      	push	{r7, lr}
 8004e80:	b084      	sub	sp, #16
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e8c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d02b      	beq.n	8004ef0 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9c:	781a      	ldrb	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea8:	1c5a      	adds	r2, r3, #1
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	3b01      	subs	r3, #1
 8004eb6:	b29a      	uxth	r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d114      	bne.n	8004ef0 <I2C_SlaveTransmit_TXE+0x72>
 8004ec6:	7bfb      	ldrb	r3, [r7, #15]
 8004ec8:	2b29      	cmp	r3, #41	; 0x29
 8004eca:	d111      	bne.n	8004ef0 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	685a      	ldr	r2, [r3, #4]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004eda:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2221      	movs	r2, #33	; 0x21
 8004ee0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2228      	movs	r2, #40	; 0x28
 8004ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f7ff fa14 	bl	8004318 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004ef0:	bf00      	nop
 8004ef2:	3710      	adds	r7, #16
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d011      	beq.n	8004f2e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0e:	781a      	ldrb	r2, [r3, #0]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1a:	1c5a      	adds	r2, r3, #1
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	3b01      	subs	r3, #1
 8004f28:	b29a      	uxth	r2, r3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004f2e:	bf00      	nop
 8004f30:	370c      	adds	r7, #12
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr

08004f3a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004f3a:	b580      	push	{r7, lr}
 8004f3c:	b084      	sub	sp, #16
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f48:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d02c      	beq.n	8004fae <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	691a      	ldr	r2, [r3, #16]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5e:	b2d2      	uxtb	r2, r2
 8004f60:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f66:	1c5a      	adds	r2, r3, #1
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	3b01      	subs	r3, #1
 8004f74:	b29a      	uxth	r2, r3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d114      	bne.n	8004fae <I2C_SlaveReceive_RXNE+0x74>
 8004f84:	7bfb      	ldrb	r3, [r7, #15]
 8004f86:	2b2a      	cmp	r3, #42	; 0x2a
 8004f88:	d111      	bne.n	8004fae <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	685a      	ldr	r2, [r3, #4]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f98:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2222      	movs	r2, #34	; 0x22
 8004f9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2228      	movs	r2, #40	; 0x28
 8004fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f7ff f9bf 	bl	800432c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004fae:	bf00      	nop
 8004fb0:	3710      	adds	r7, #16
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}

08004fb6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	b083      	sub	sp, #12
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d012      	beq.n	8004fee <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	691a      	ldr	r2, [r3, #16]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd2:	b2d2      	uxtb	r2, r2
 8004fd4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fda:	1c5a      	adds	r2, r3, #1
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	b29a      	uxth	r2, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004fee:	bf00      	nop
 8004ff0:	370c      	adds	r7, #12
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr

08004ffa <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004ffa:	b580      	push	{r7, lr}
 8004ffc:	b084      	sub	sp, #16
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
 8005002:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005004:	2300      	movs	r3, #0
 8005006:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800500e:	b2db      	uxtb	r3, r3
 8005010:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005014:	2b28      	cmp	r3, #40	; 0x28
 8005016:	d127      	bne.n	8005068 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	685a      	ldr	r2, [r3, #4]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005026:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	089b      	lsrs	r3, r3, #2
 800502c:	f003 0301 	and.w	r3, r3, #1
 8005030:	2b00      	cmp	r3, #0
 8005032:	d101      	bne.n	8005038 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005034:	2301      	movs	r3, #1
 8005036:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	09db      	lsrs	r3, r3, #7
 800503c:	f003 0301 	and.w	r3, r3, #1
 8005040:	2b00      	cmp	r3, #0
 8005042:	d103      	bne.n	800504c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	81bb      	strh	r3, [r7, #12]
 800504a:	e002      	b.n	8005052 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	699b      	ldr	r3, [r3, #24]
 8005050:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800505a:	89ba      	ldrh	r2, [r7, #12]
 800505c:	7bfb      	ldrb	r3, [r7, #15]
 800505e:	4619      	mov	r1, r3
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f7ff f96d 	bl	8004340 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005066:	e008      	b.n	800507a <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f06f 0202 	mvn.w	r2, #2
 8005070:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800507a:	bf00      	nop
 800507c:	3710      	adds	r7, #16
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
	...

08005084 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005092:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	685a      	ldr	r2, [r3, #4]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80050a2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80050a4:	2300      	movs	r3, #0
 80050a6:	60bb      	str	r3, [r7, #8]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	60bb      	str	r3, [r7, #8]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f042 0201 	orr.w	r2, r2, #1
 80050be:	601a      	str	r2, [r3, #0]
 80050c0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050d0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050e0:	d172      	bne.n	80051c8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80050e2:	7bfb      	ldrb	r3, [r7, #15]
 80050e4:	2b22      	cmp	r3, #34	; 0x22
 80050e6:	d002      	beq.n	80050ee <I2C_Slave_STOPF+0x6a>
 80050e8:	7bfb      	ldrb	r3, [r7, #15]
 80050ea:	2b2a      	cmp	r3, #42	; 0x2a
 80050ec:	d135      	bne.n	800515a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	b29a      	uxth	r2, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005100:	b29b      	uxth	r3, r3
 8005102:	2b00      	cmp	r3, #0
 8005104:	d005      	beq.n	8005112 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510a:	f043 0204 	orr.w	r2, r3, #4
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	685a      	ldr	r2, [r3, #4]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005120:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005126:	4618      	mov	r0, r3
 8005128:	f7fd fdea 	bl	8002d00 <HAL_DMA_GetState>
 800512c:	4603      	mov	r3, r0
 800512e:	2b01      	cmp	r3, #1
 8005130:	d049      	beq.n	80051c6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005136:	4a69      	ldr	r2, [pc, #420]	; (80052dc <I2C_Slave_STOPF+0x258>)
 8005138:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513e:	4618      	mov	r0, r3
 8005140:	f7fd fc32 	bl	80029a8 <HAL_DMA_Abort_IT>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d03d      	beq.n	80051c6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005154:	4610      	mov	r0, r2
 8005156:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005158:	e035      	b.n	80051c6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	b29a      	uxth	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800516c:	b29b      	uxth	r3, r3
 800516e:	2b00      	cmp	r3, #0
 8005170:	d005      	beq.n	800517e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005176:	f043 0204 	orr.w	r2, r3, #4
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	685a      	ldr	r2, [r3, #4]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800518c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005192:	4618      	mov	r0, r3
 8005194:	f7fd fdb4 	bl	8002d00 <HAL_DMA_GetState>
 8005198:	4603      	mov	r3, r0
 800519a:	2b01      	cmp	r3, #1
 800519c:	d014      	beq.n	80051c8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051a2:	4a4e      	ldr	r2, [pc, #312]	; (80052dc <I2C_Slave_STOPF+0x258>)
 80051a4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051aa:	4618      	mov	r0, r3
 80051ac:	f7fd fbfc 	bl	80029a8 <HAL_DMA_Abort_IT>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d008      	beq.n	80051c8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80051c0:	4610      	mov	r0, r2
 80051c2:	4798      	blx	r3
 80051c4:	e000      	b.n	80051c8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80051c6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d03e      	beq.n	8005250 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	695b      	ldr	r3, [r3, #20]
 80051d8:	f003 0304 	and.w	r3, r3, #4
 80051dc:	2b04      	cmp	r3, #4
 80051de:	d112      	bne.n	8005206 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	691a      	ldr	r2, [r3, #16]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ea:	b2d2      	uxtb	r2, r2
 80051ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f2:	1c5a      	adds	r2, r3, #1
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	3b01      	subs	r3, #1
 8005200:	b29a      	uxth	r2, r3
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	695b      	ldr	r3, [r3, #20]
 800520c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005210:	2b40      	cmp	r3, #64	; 0x40
 8005212:	d112      	bne.n	800523a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	691a      	ldr	r2, [r3, #16]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521e:	b2d2      	uxtb	r2, r2
 8005220:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005226:	1c5a      	adds	r2, r3, #1
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005230:	b29b      	uxth	r3, r3
 8005232:	3b01      	subs	r3, #1
 8005234:	b29a      	uxth	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800523e:	b29b      	uxth	r3, r3
 8005240:	2b00      	cmp	r3, #0
 8005242:	d005      	beq.n	8005250 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005248:	f043 0204 	orr.w	r2, r3, #4
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005254:	2b00      	cmp	r3, #0
 8005256:	d003      	beq.n	8005260 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f000 f8b3 	bl	80053c4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800525e:	e039      	b.n	80052d4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005260:	7bfb      	ldrb	r3, [r7, #15]
 8005262:	2b2a      	cmp	r3, #42	; 0x2a
 8005264:	d109      	bne.n	800527a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2228      	movs	r2, #40	; 0x28
 8005270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f7ff f859 	bl	800432c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005280:	b2db      	uxtb	r3, r3
 8005282:	2b28      	cmp	r3, #40	; 0x28
 8005284:	d111      	bne.n	80052aa <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a15      	ldr	r2, [pc, #84]	; (80052e0 <I2C_Slave_STOPF+0x25c>)
 800528a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2220      	movs	r2, #32
 8005296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f7ff f85a 	bl	800435c <HAL_I2C_ListenCpltCallback>
}
 80052a8:	e014      	b.n	80052d4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ae:	2b22      	cmp	r3, #34	; 0x22
 80052b0:	d002      	beq.n	80052b8 <I2C_Slave_STOPF+0x234>
 80052b2:	7bfb      	ldrb	r3, [r7, #15]
 80052b4:	2b22      	cmp	r3, #34	; 0x22
 80052b6:	d10d      	bne.n	80052d4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2220      	movs	r2, #32
 80052c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f7ff f82c 	bl	800432c <HAL_I2C_SlaveRxCpltCallback>
}
 80052d4:	bf00      	nop
 80052d6:	3710      	adds	r7, #16
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	08005925 	.word	0x08005925
 80052e0:	ffff0000 	.word	0xffff0000

080052e4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052f2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	2b08      	cmp	r3, #8
 80052fe:	d002      	beq.n	8005306 <I2C_Slave_AF+0x22>
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	2b20      	cmp	r3, #32
 8005304:	d129      	bne.n	800535a <I2C_Slave_AF+0x76>
 8005306:	7bfb      	ldrb	r3, [r7, #15]
 8005308:	2b28      	cmp	r3, #40	; 0x28
 800530a:	d126      	bne.n	800535a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a2c      	ldr	r2, [pc, #176]	; (80053c0 <I2C_Slave_AF+0xdc>)
 8005310:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	685a      	ldr	r2, [r3, #4]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005320:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800532a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800533a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2220      	movs	r2, #32
 8005346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f7ff f802 	bl	800435c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005358:	e02e      	b.n	80053b8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800535a:	7bfb      	ldrb	r3, [r7, #15]
 800535c:	2b21      	cmp	r3, #33	; 0x21
 800535e:	d126      	bne.n	80053ae <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a17      	ldr	r2, [pc, #92]	; (80053c0 <I2C_Slave_AF+0xdc>)
 8005364:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2221      	movs	r2, #33	; 0x21
 800536a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2220      	movs	r2, #32
 8005370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	685a      	ldr	r2, [r3, #4]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800538a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005394:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053a4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f7fe ffb6 	bl	8004318 <HAL_I2C_SlaveTxCpltCallback>
}
 80053ac:	e004      	b.n	80053b8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80053b6:	615a      	str	r2, [r3, #20]
}
 80053b8:	bf00      	nop
 80053ba:	3710      	adds	r7, #16
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	ffff0000 	.word	0xffff0000

080053c4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b084      	sub	sp, #16
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053d2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053da:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80053dc:	7bbb      	ldrb	r3, [r7, #14]
 80053de:	2b10      	cmp	r3, #16
 80053e0:	d002      	beq.n	80053e8 <I2C_ITError+0x24>
 80053e2:	7bbb      	ldrb	r3, [r7, #14]
 80053e4:	2b40      	cmp	r3, #64	; 0x40
 80053e6:	d10a      	bne.n	80053fe <I2C_ITError+0x3a>
 80053e8:	7bfb      	ldrb	r3, [r7, #15]
 80053ea:	2b22      	cmp	r3, #34	; 0x22
 80053ec:	d107      	bne.n	80053fe <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053fc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80053fe:	7bfb      	ldrb	r3, [r7, #15]
 8005400:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005404:	2b28      	cmp	r3, #40	; 0x28
 8005406:	d107      	bne.n	8005418 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2228      	movs	r2, #40	; 0x28
 8005412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005416:	e015      	b.n	8005444 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005422:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005426:	d00a      	beq.n	800543e <I2C_ITError+0x7a>
 8005428:	7bfb      	ldrb	r3, [r7, #15]
 800542a:	2b60      	cmp	r3, #96	; 0x60
 800542c:	d007      	beq.n	800543e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2220      	movs	r2, #32
 8005432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800544e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005452:	d162      	bne.n	800551a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	685a      	ldr	r2, [r3, #4]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005462:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005468:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800546c:	b2db      	uxtb	r3, r3
 800546e:	2b01      	cmp	r3, #1
 8005470:	d020      	beq.n	80054b4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005476:	4a6a      	ldr	r2, [pc, #424]	; (8005620 <I2C_ITError+0x25c>)
 8005478:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800547e:	4618      	mov	r0, r3
 8005480:	f7fd fa92 	bl	80029a8 <HAL_DMA_Abort_IT>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	f000 8089 	beq.w	800559e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f022 0201 	bic.w	r2, r2, #1
 800549a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2220      	movs	r2, #32
 80054a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80054ae:	4610      	mov	r0, r2
 80054b0:	4798      	blx	r3
 80054b2:	e074      	b.n	800559e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b8:	4a59      	ldr	r2, [pc, #356]	; (8005620 <I2C_ITError+0x25c>)
 80054ba:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c0:	4618      	mov	r0, r3
 80054c2:	f7fd fa71 	bl	80029a8 <HAL_DMA_Abort_IT>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d068      	beq.n	800559e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	695b      	ldr	r3, [r3, #20]
 80054d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d6:	2b40      	cmp	r3, #64	; 0x40
 80054d8:	d10b      	bne.n	80054f2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	691a      	ldr	r2, [r3, #16]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e4:	b2d2      	uxtb	r2, r2
 80054e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ec:	1c5a      	adds	r2, r3, #1
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f022 0201 	bic.w	r2, r2, #1
 8005500:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2220      	movs	r2, #32
 8005506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800550e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005514:	4610      	mov	r0, r2
 8005516:	4798      	blx	r3
 8005518:	e041      	b.n	800559e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005520:	b2db      	uxtb	r3, r3
 8005522:	2b60      	cmp	r3, #96	; 0x60
 8005524:	d125      	bne.n	8005572 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2220      	movs	r2, #32
 800552a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	695b      	ldr	r3, [r3, #20]
 800553a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800553e:	2b40      	cmp	r3, #64	; 0x40
 8005540:	d10b      	bne.n	800555a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	691a      	ldr	r2, [r3, #16]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554c:	b2d2      	uxtb	r2, r2
 800554e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005554:	1c5a      	adds	r2, r3, #1
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f022 0201 	bic.w	r2, r2, #1
 8005568:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f7fe ff00 	bl	8004370 <HAL_I2C_AbortCpltCallback>
 8005570:	e015      	b.n	800559e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	695b      	ldr	r3, [r3, #20]
 8005578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800557c:	2b40      	cmp	r3, #64	; 0x40
 800557e:	d10b      	bne.n	8005598 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	691a      	ldr	r2, [r3, #16]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558a:	b2d2      	uxtb	r2, r2
 800558c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005592:	1c5a      	adds	r2, r3, #1
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f00c f90f 	bl	80117bc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	f003 0301 	and.w	r3, r3, #1
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d10e      	bne.n	80055cc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d109      	bne.n	80055cc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d104      	bne.n	80055cc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d007      	beq.n	80055dc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	685a      	ldr	r2, [r3, #4]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80055da:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055e2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e8:	f003 0304 	and.w	r3, r3, #4
 80055ec:	2b04      	cmp	r3, #4
 80055ee:	d113      	bne.n	8005618 <I2C_ITError+0x254>
 80055f0:	7bfb      	ldrb	r3, [r7, #15]
 80055f2:	2b28      	cmp	r3, #40	; 0x28
 80055f4:	d110      	bne.n	8005618 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a0a      	ldr	r2, [pc, #40]	; (8005624 <I2C_ITError+0x260>)
 80055fa:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2220      	movs	r2, #32
 8005606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f7fe fea2 	bl	800435c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005618:	bf00      	nop
 800561a:	3710      	adds	r7, #16
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}
 8005620:	08005925 	.word	0x08005925
 8005624:	ffff0000 	.word	0xffff0000

08005628 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b088      	sub	sp, #32
 800562c:	af02      	add	r7, sp, #8
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	4608      	mov	r0, r1
 8005632:	4611      	mov	r1, r2
 8005634:	461a      	mov	r2, r3
 8005636:	4603      	mov	r3, r0
 8005638:	817b      	strh	r3, [r7, #10]
 800563a:	460b      	mov	r3, r1
 800563c:	813b      	strh	r3, [r7, #8]
 800563e:	4613      	mov	r3, r2
 8005640:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005650:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005654:	9300      	str	r3, [sp, #0]
 8005656:	6a3b      	ldr	r3, [r7, #32]
 8005658:	2200      	movs	r2, #0
 800565a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800565e:	68f8      	ldr	r0, [r7, #12]
 8005660:	f000 fa08 	bl	8005a74 <I2C_WaitOnFlagUntilTimeout>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00d      	beq.n	8005686 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005674:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005678:	d103      	bne.n	8005682 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005680:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e05f      	b.n	8005746 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005686:	897b      	ldrh	r3, [r7, #10]
 8005688:	b2db      	uxtb	r3, r3
 800568a:	461a      	mov	r2, r3
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005694:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005698:	6a3a      	ldr	r2, [r7, #32]
 800569a:	492d      	ldr	r1, [pc, #180]	; (8005750 <I2C_RequestMemoryWrite+0x128>)
 800569c:	68f8      	ldr	r0, [r7, #12]
 800569e:	f000 fa40 	bl	8005b22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d001      	beq.n	80056ac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e04c      	b.n	8005746 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056ac:	2300      	movs	r3, #0
 80056ae:	617b      	str	r3, [r7, #20]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	695b      	ldr	r3, [r3, #20]
 80056b6:	617b      	str	r3, [r7, #20]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	699b      	ldr	r3, [r3, #24]
 80056be:	617b      	str	r3, [r7, #20]
 80056c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056c4:	6a39      	ldr	r1, [r7, #32]
 80056c6:	68f8      	ldr	r0, [r7, #12]
 80056c8:	f000 faaa 	bl	8005c20 <I2C_WaitOnTXEFlagUntilTimeout>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d00d      	beq.n	80056ee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d6:	2b04      	cmp	r3, #4
 80056d8:	d107      	bne.n	80056ea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e02b      	b.n	8005746 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80056ee:	88fb      	ldrh	r3, [r7, #6]
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d105      	bne.n	8005700 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80056f4:	893b      	ldrh	r3, [r7, #8]
 80056f6:	b2da      	uxtb	r2, r3
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	611a      	str	r2, [r3, #16]
 80056fe:	e021      	b.n	8005744 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005700:	893b      	ldrh	r3, [r7, #8]
 8005702:	0a1b      	lsrs	r3, r3, #8
 8005704:	b29b      	uxth	r3, r3
 8005706:	b2da      	uxtb	r2, r3
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800570e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005710:	6a39      	ldr	r1, [r7, #32]
 8005712:	68f8      	ldr	r0, [r7, #12]
 8005714:	f000 fa84 	bl	8005c20 <I2C_WaitOnTXEFlagUntilTimeout>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00d      	beq.n	800573a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005722:	2b04      	cmp	r3, #4
 8005724:	d107      	bne.n	8005736 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005734:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e005      	b.n	8005746 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800573a:	893b      	ldrh	r3, [r7, #8]
 800573c:	b2da      	uxtb	r2, r3
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3718      	adds	r7, #24
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	00010002 	.word	0x00010002

08005754 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b088      	sub	sp, #32
 8005758:	af02      	add	r7, sp, #8
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	4608      	mov	r0, r1
 800575e:	4611      	mov	r1, r2
 8005760:	461a      	mov	r2, r3
 8005762:	4603      	mov	r3, r0
 8005764:	817b      	strh	r3, [r7, #10]
 8005766:	460b      	mov	r3, r1
 8005768:	813b      	strh	r3, [r7, #8]
 800576a:	4613      	mov	r3, r2
 800576c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800577c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800578c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800578e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005790:	9300      	str	r3, [sp, #0]
 8005792:	6a3b      	ldr	r3, [r7, #32]
 8005794:	2200      	movs	r2, #0
 8005796:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800579a:	68f8      	ldr	r0, [r7, #12]
 800579c:	f000 f96a 	bl	8005a74 <I2C_WaitOnFlagUntilTimeout>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00d      	beq.n	80057c2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057b4:	d103      	bne.n	80057be <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80057be:	2303      	movs	r3, #3
 80057c0:	e0aa      	b.n	8005918 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80057c2:	897b      	ldrh	r3, [r7, #10]
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	461a      	mov	r2, r3
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80057d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80057d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d4:	6a3a      	ldr	r2, [r7, #32]
 80057d6:	4952      	ldr	r1, [pc, #328]	; (8005920 <I2C_RequestMemoryRead+0x1cc>)
 80057d8:	68f8      	ldr	r0, [r7, #12]
 80057da:	f000 f9a2 	bl	8005b22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d001      	beq.n	80057e8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e097      	b.n	8005918 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057e8:	2300      	movs	r3, #0
 80057ea:	617b      	str	r3, [r7, #20]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	695b      	ldr	r3, [r3, #20]
 80057f2:	617b      	str	r3, [r7, #20]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	699b      	ldr	r3, [r3, #24]
 80057fa:	617b      	str	r3, [r7, #20]
 80057fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005800:	6a39      	ldr	r1, [r7, #32]
 8005802:	68f8      	ldr	r0, [r7, #12]
 8005804:	f000 fa0c 	bl	8005c20 <I2C_WaitOnTXEFlagUntilTimeout>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00d      	beq.n	800582a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005812:	2b04      	cmp	r3, #4
 8005814:	d107      	bne.n	8005826 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005824:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e076      	b.n	8005918 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800582a:	88fb      	ldrh	r3, [r7, #6]
 800582c:	2b01      	cmp	r3, #1
 800582e:	d105      	bne.n	800583c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005830:	893b      	ldrh	r3, [r7, #8]
 8005832:	b2da      	uxtb	r2, r3
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	611a      	str	r2, [r3, #16]
 800583a:	e021      	b.n	8005880 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800583c:	893b      	ldrh	r3, [r7, #8]
 800583e:	0a1b      	lsrs	r3, r3, #8
 8005840:	b29b      	uxth	r3, r3
 8005842:	b2da      	uxtb	r2, r3
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800584a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800584c:	6a39      	ldr	r1, [r7, #32]
 800584e:	68f8      	ldr	r0, [r7, #12]
 8005850:	f000 f9e6 	bl	8005c20 <I2C_WaitOnTXEFlagUntilTimeout>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d00d      	beq.n	8005876 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585e:	2b04      	cmp	r3, #4
 8005860:	d107      	bne.n	8005872 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005870:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e050      	b.n	8005918 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005876:	893b      	ldrh	r3, [r7, #8]
 8005878:	b2da      	uxtb	r2, r3
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005882:	6a39      	ldr	r1, [r7, #32]
 8005884:	68f8      	ldr	r0, [r7, #12]
 8005886:	f000 f9cb 	bl	8005c20 <I2C_WaitOnTXEFlagUntilTimeout>
 800588a:	4603      	mov	r3, r0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d00d      	beq.n	80058ac <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005894:	2b04      	cmp	r3, #4
 8005896:	d107      	bne.n	80058a8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058a6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e035      	b.n	8005918 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058ba:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80058bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058be:	9300      	str	r3, [sp, #0]
 80058c0:	6a3b      	ldr	r3, [r7, #32]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	f000 f8d3 	bl	8005a74 <I2C_WaitOnFlagUntilTimeout>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d00d      	beq.n	80058f0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058e2:	d103      	bne.n	80058ec <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80058ec:	2303      	movs	r3, #3
 80058ee:	e013      	b.n	8005918 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80058f0:	897b      	ldrh	r3, [r7, #10]
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	f043 0301 	orr.w	r3, r3, #1
 80058f8:	b2da      	uxtb	r2, r3
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005902:	6a3a      	ldr	r2, [r7, #32]
 8005904:	4906      	ldr	r1, [pc, #24]	; (8005920 <I2C_RequestMemoryRead+0x1cc>)
 8005906:	68f8      	ldr	r0, [r7, #12]
 8005908:	f000 f90b 	bl	8005b22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d001      	beq.n	8005916 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e000      	b.n	8005918 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005916:	2300      	movs	r3, #0
}
 8005918:	4618      	mov	r0, r3
 800591a:	3718      	adds	r7, #24
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}
 8005920:	00010002 	.word	0x00010002

08005924 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b086      	sub	sp, #24
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800592c:	2300      	movs	r3, #0
 800592e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005934:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800593c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800593e:	4b4b      	ldr	r3, [pc, #300]	; (8005a6c <I2C_DMAAbort+0x148>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	08db      	lsrs	r3, r3, #3
 8005944:	4a4a      	ldr	r2, [pc, #296]	; (8005a70 <I2C_DMAAbort+0x14c>)
 8005946:	fba2 2303 	umull	r2, r3, r2, r3
 800594a:	0a1a      	lsrs	r2, r3, #8
 800594c:	4613      	mov	r3, r2
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	4413      	add	r3, r2
 8005952:	00da      	lsls	r2, r3, #3
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d106      	bne.n	800596c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005962:	f043 0220 	orr.w	r2, r3, #32
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800596a:	e00a      	b.n	8005982 <I2C_DMAAbort+0x5e>
    }
    count--;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	3b01      	subs	r3, #1
 8005970:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800597c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005980:	d0ea      	beq.n	8005958 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005986:	2b00      	cmp	r3, #0
 8005988:	d003      	beq.n	8005992 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800598e:	2200      	movs	r2, #0
 8005990:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005996:	2b00      	cmp	r3, #0
 8005998:	d003      	beq.n	80059a2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599e:	2200      	movs	r2, #0
 80059a0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059b0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	2200      	movs	r2, #0
 80059b6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d003      	beq.n	80059c8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059c4:	2200      	movs	r2, #0
 80059c6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d003      	beq.n	80059d8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d4:	2200      	movs	r2, #0
 80059d6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f022 0201 	bic.w	r2, r2, #1
 80059e6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	2b60      	cmp	r3, #96	; 0x60
 80059f2:	d10e      	bne.n	8005a12 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	2220      	movs	r2, #32
 80059f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	2200      	movs	r2, #0
 8005a08:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005a0a:	6978      	ldr	r0, [r7, #20]
 8005a0c:	f7fe fcb0 	bl	8004370 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005a10:	e027      	b.n	8005a62 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005a12:	7cfb      	ldrb	r3, [r7, #19]
 8005a14:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005a18:	2b28      	cmp	r3, #40	; 0x28
 8005a1a:	d117      	bne.n	8005a4c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f042 0201 	orr.w	r2, r2, #1
 8005a2a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a3a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	2228      	movs	r2, #40	; 0x28
 8005a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005a4a:	e007      	b.n	8005a5c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	2220      	movs	r2, #32
 8005a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005a5c:	6978      	ldr	r0, [r7, #20]
 8005a5e:	f00b fead 	bl	80117bc <HAL_I2C_ErrorCallback>
}
 8005a62:	bf00      	nop
 8005a64:	3718      	adds	r7, #24
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	20000000 	.word	0x20000000
 8005a70:	14f8b589 	.word	0x14f8b589

08005a74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	60b9      	str	r1, [r7, #8]
 8005a7e:	603b      	str	r3, [r7, #0]
 8005a80:	4613      	mov	r3, r2
 8005a82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a84:	e025      	b.n	8005ad2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a8c:	d021      	beq.n	8005ad2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a8e:	f7fc f99f 	bl	8001dd0 <HAL_GetTick>
 8005a92:	4602      	mov	r2, r0
 8005a94:	69bb      	ldr	r3, [r7, #24]
 8005a96:	1ad3      	subs	r3, r2, r3
 8005a98:	683a      	ldr	r2, [r7, #0]
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d302      	bcc.n	8005aa4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d116      	bne.n	8005ad2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2220      	movs	r2, #32
 8005aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005abe:	f043 0220 	orr.w	r2, r3, #32
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e023      	b.n	8005b1a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	0c1b      	lsrs	r3, r3, #16
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d10d      	bne.n	8005af8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	43da      	mvns	r2, r3
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	bf0c      	ite	eq
 8005aee:	2301      	moveq	r3, #1
 8005af0:	2300      	movne	r3, #0
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	461a      	mov	r2, r3
 8005af6:	e00c      	b.n	8005b12 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	699b      	ldr	r3, [r3, #24]
 8005afe:	43da      	mvns	r2, r3
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	4013      	ands	r3, r2
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	bf0c      	ite	eq
 8005b0a:	2301      	moveq	r3, #1
 8005b0c:	2300      	movne	r3, #0
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	461a      	mov	r2, r3
 8005b12:	79fb      	ldrb	r3, [r7, #7]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d0b6      	beq.n	8005a86 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3710      	adds	r7, #16
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}

08005b22 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005b22:	b580      	push	{r7, lr}
 8005b24:	b084      	sub	sp, #16
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	60f8      	str	r0, [r7, #12]
 8005b2a:	60b9      	str	r1, [r7, #8]
 8005b2c:	607a      	str	r2, [r7, #4]
 8005b2e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b30:	e051      	b.n	8005bd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	695b      	ldr	r3, [r3, #20]
 8005b38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b40:	d123      	bne.n	8005b8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b50:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b5a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2220      	movs	r2, #32
 8005b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b76:	f043 0204 	orr.w	r2, r3, #4
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e046      	b.n	8005c18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b90:	d021      	beq.n	8005bd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b92:	f7fc f91d 	bl	8001dd0 <HAL_GetTick>
 8005b96:	4602      	mov	r2, r0
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	1ad3      	subs	r3, r2, r3
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d302      	bcc.n	8005ba8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d116      	bne.n	8005bd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2200      	movs	r2, #0
 8005bac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2220      	movs	r2, #32
 8005bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc2:	f043 0220 	orr.w	r2, r3, #32
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e020      	b.n	8005c18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	0c1b      	lsrs	r3, r3, #16
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d10c      	bne.n	8005bfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	695b      	ldr	r3, [r3, #20]
 8005be6:	43da      	mvns	r2, r3
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	4013      	ands	r3, r2
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	bf14      	ite	ne
 8005bf2:	2301      	movne	r3, #1
 8005bf4:	2300      	moveq	r3, #0
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	e00b      	b.n	8005c12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	699b      	ldr	r3, [r3, #24]
 8005c00:	43da      	mvns	r2, r3
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	4013      	ands	r3, r2
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	bf14      	ite	ne
 8005c0c:	2301      	movne	r3, #1
 8005c0e:	2300      	moveq	r3, #0
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d18d      	bne.n	8005b32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005c16:	2300      	movs	r3, #0
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3710      	adds	r7, #16
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c2c:	e02d      	b.n	8005c8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005c2e:	68f8      	ldr	r0, [r7, #12]
 8005c30:	f000 f900 	bl	8005e34 <I2C_IsAcknowledgeFailed>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d001      	beq.n	8005c3e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e02d      	b.n	8005c9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c44:	d021      	beq.n	8005c8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c46:	f7fc f8c3 	bl	8001dd0 <HAL_GetTick>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	1ad3      	subs	r3, r2, r3
 8005c50:	68ba      	ldr	r2, [r7, #8]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d302      	bcc.n	8005c5c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d116      	bne.n	8005c8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2220      	movs	r2, #32
 8005c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c76:	f043 0220 	orr.w	r2, r3, #32
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e007      	b.n	8005c9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	695b      	ldr	r3, [r3, #20]
 8005c90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c94:	2b80      	cmp	r3, #128	; 0x80
 8005c96:	d1ca      	bne.n	8005c2e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3710      	adds	r7, #16
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}

08005ca2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b084      	sub	sp, #16
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	60f8      	str	r0, [r7, #12]
 8005caa:	60b9      	str	r1, [r7, #8]
 8005cac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005cae:	e02d      	b.n	8005d0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005cb0:	68f8      	ldr	r0, [r7, #12]
 8005cb2:	f000 f8bf 	bl	8005e34 <I2C_IsAcknowledgeFailed>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d001      	beq.n	8005cc0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e02d      	b.n	8005d1c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cc6:	d021      	beq.n	8005d0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cc8:	f7fc f882 	bl	8001dd0 <HAL_GetTick>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	1ad3      	subs	r3, r2, r3
 8005cd2:	68ba      	ldr	r2, [r7, #8]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d302      	bcc.n	8005cde <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d116      	bne.n	8005d0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2220      	movs	r2, #32
 8005ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf8:	f043 0220 	orr.w	r2, r3, #32
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e007      	b.n	8005d1c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	695b      	ldr	r3, [r3, #20]
 8005d12:	f003 0304 	and.w	r3, r3, #4
 8005d16:	2b04      	cmp	r3, #4
 8005d18:	d1ca      	bne.n	8005cb0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3710      	adds	r7, #16
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005d30:	4b13      	ldr	r3, [pc, #76]	; (8005d80 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	08db      	lsrs	r3, r3, #3
 8005d36:	4a13      	ldr	r2, [pc, #76]	; (8005d84 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005d38:	fba2 2303 	umull	r2, r3, r2, r3
 8005d3c:	0a1a      	lsrs	r2, r3, #8
 8005d3e:	4613      	mov	r3, r2
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	4413      	add	r3, r2
 8005d44:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	3b01      	subs	r3, #1
 8005d4a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d107      	bne.n	8005d62 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d56:	f043 0220 	orr.w	r2, r3, #32
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e008      	b.n	8005d74 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d70:	d0e9      	beq.n	8005d46 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005d72:	2300      	movs	r3, #0
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3714      	adds	r7, #20
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr
 8005d80:	20000000 	.word	0x20000000
 8005d84:	14f8b589 	.word	0x14f8b589

08005d88 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005d94:	e042      	b.n	8005e1c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	695b      	ldr	r3, [r3, #20]
 8005d9c:	f003 0310 	and.w	r3, r3, #16
 8005da0:	2b10      	cmp	r3, #16
 8005da2:	d119      	bne.n	8005dd8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f06f 0210 	mvn.w	r2, #16
 8005dac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2200      	movs	r2, #0
 8005db2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2220      	movs	r2, #32
 8005db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e029      	b.n	8005e2c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dd8:	f7fb fffa 	bl	8001dd0 <HAL_GetTick>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	68ba      	ldr	r2, [r7, #8]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d302      	bcc.n	8005dee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d116      	bne.n	8005e1c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2200      	movs	r2, #0
 8005df2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2220      	movs	r2, #32
 8005df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e08:	f043 0220 	orr.w	r2, r3, #32
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2200      	movs	r2, #0
 8005e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e007      	b.n	8005e2c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	695b      	ldr	r3, [r3, #20]
 8005e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e26:	2b40      	cmp	r3, #64	; 0x40
 8005e28:	d1b5      	bne.n	8005d96 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005e2a:	2300      	movs	r3, #0
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3710      	adds	r7, #16
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	695b      	ldr	r3, [r3, #20]
 8005e42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e4a:	d11b      	bne.n	8005e84 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e54:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2220      	movs	r2, #32
 8005e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e70:	f043 0204 	orr.w	r2, r3, #4
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e000      	b.n	8005e86 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	370c      	adds	r7, #12
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr

08005e92 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005e92:	b480      	push	{r7}
 8005e94:	b083      	sub	sp, #12
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e9e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005ea2:	d103      	bne.n	8005eac <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005eaa:	e007      	b.n	8005ebc <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005eb4:	d102      	bne.n	8005ebc <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2208      	movs	r2, #8
 8005eba:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005ebc:	bf00      	nop
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005eca:	b08f      	sub	sp, #60	; 0x3c
 8005ecc:	af0a      	add	r7, sp, #40	; 0x28
 8005ece:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d101      	bne.n	8005eda <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e10f      	b.n	80060fa <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d106      	bne.n	8005efa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f00a fa17 	bl	8010328 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2203      	movs	r2, #3
 8005efe:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d102      	bne.n	8005f14 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f004 f844 	bl	8009fa6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	603b      	str	r3, [r7, #0]
 8005f24:	687e      	ldr	r6, [r7, #4]
 8005f26:	466d      	mov	r5, sp
 8005f28:	f106 0410 	add.w	r4, r6, #16
 8005f2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005f2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005f30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005f32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005f34:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005f38:	e885 0003 	stmia.w	r5, {r0, r1}
 8005f3c:	1d33      	adds	r3, r6, #4
 8005f3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f40:	6838      	ldr	r0, [r7, #0]
 8005f42:	f003 ff1b 	bl	8009d7c <USB_CoreInit>
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d005      	beq.n	8005f58 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2202      	movs	r2, #2
 8005f50:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	e0d0      	b.n	80060fa <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2100      	movs	r1, #0
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f004 f832 	bl	8009fc8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f64:	2300      	movs	r3, #0
 8005f66:	73fb      	strb	r3, [r7, #15]
 8005f68:	e04a      	b.n	8006000 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005f6a:	7bfa      	ldrb	r2, [r7, #15]
 8005f6c:	6879      	ldr	r1, [r7, #4]
 8005f6e:	4613      	mov	r3, r2
 8005f70:	00db      	lsls	r3, r3, #3
 8005f72:	1a9b      	subs	r3, r3, r2
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	440b      	add	r3, r1
 8005f78:	333d      	adds	r3, #61	; 0x3d
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005f7e:	7bfa      	ldrb	r2, [r7, #15]
 8005f80:	6879      	ldr	r1, [r7, #4]
 8005f82:	4613      	mov	r3, r2
 8005f84:	00db      	lsls	r3, r3, #3
 8005f86:	1a9b      	subs	r3, r3, r2
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	440b      	add	r3, r1
 8005f8c:	333c      	adds	r3, #60	; 0x3c
 8005f8e:	7bfa      	ldrb	r2, [r7, #15]
 8005f90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005f92:	7bfa      	ldrb	r2, [r7, #15]
 8005f94:	7bfb      	ldrb	r3, [r7, #15]
 8005f96:	b298      	uxth	r0, r3
 8005f98:	6879      	ldr	r1, [r7, #4]
 8005f9a:	4613      	mov	r3, r2
 8005f9c:	00db      	lsls	r3, r3, #3
 8005f9e:	1a9b      	subs	r3, r3, r2
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	440b      	add	r3, r1
 8005fa4:	3342      	adds	r3, #66	; 0x42
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005faa:	7bfa      	ldrb	r2, [r7, #15]
 8005fac:	6879      	ldr	r1, [r7, #4]
 8005fae:	4613      	mov	r3, r2
 8005fb0:	00db      	lsls	r3, r3, #3
 8005fb2:	1a9b      	subs	r3, r3, r2
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	440b      	add	r3, r1
 8005fb8:	333f      	adds	r3, #63	; 0x3f
 8005fba:	2200      	movs	r2, #0
 8005fbc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005fbe:	7bfa      	ldrb	r2, [r7, #15]
 8005fc0:	6879      	ldr	r1, [r7, #4]
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	00db      	lsls	r3, r3, #3
 8005fc6:	1a9b      	subs	r3, r3, r2
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	440b      	add	r3, r1
 8005fcc:	3344      	adds	r3, #68	; 0x44
 8005fce:	2200      	movs	r2, #0
 8005fd0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005fd2:	7bfa      	ldrb	r2, [r7, #15]
 8005fd4:	6879      	ldr	r1, [r7, #4]
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	00db      	lsls	r3, r3, #3
 8005fda:	1a9b      	subs	r3, r3, r2
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	440b      	add	r3, r1
 8005fe0:	3348      	adds	r3, #72	; 0x48
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005fe6:	7bfa      	ldrb	r2, [r7, #15]
 8005fe8:	6879      	ldr	r1, [r7, #4]
 8005fea:	4613      	mov	r3, r2
 8005fec:	00db      	lsls	r3, r3, #3
 8005fee:	1a9b      	subs	r3, r3, r2
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	440b      	add	r3, r1
 8005ff4:	3350      	adds	r3, #80	; 0x50
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ffa:	7bfb      	ldrb	r3, [r7, #15]
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	73fb      	strb	r3, [r7, #15]
 8006000:	7bfa      	ldrb	r2, [r7, #15]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	429a      	cmp	r2, r3
 8006008:	d3af      	bcc.n	8005f6a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800600a:	2300      	movs	r3, #0
 800600c:	73fb      	strb	r3, [r7, #15]
 800600e:	e044      	b.n	800609a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006010:	7bfa      	ldrb	r2, [r7, #15]
 8006012:	6879      	ldr	r1, [r7, #4]
 8006014:	4613      	mov	r3, r2
 8006016:	00db      	lsls	r3, r3, #3
 8006018:	1a9b      	subs	r3, r3, r2
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	440b      	add	r3, r1
 800601e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8006022:	2200      	movs	r2, #0
 8006024:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006026:	7bfa      	ldrb	r2, [r7, #15]
 8006028:	6879      	ldr	r1, [r7, #4]
 800602a:	4613      	mov	r3, r2
 800602c:	00db      	lsls	r3, r3, #3
 800602e:	1a9b      	subs	r3, r3, r2
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	440b      	add	r3, r1
 8006034:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8006038:	7bfa      	ldrb	r2, [r7, #15]
 800603a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800603c:	7bfa      	ldrb	r2, [r7, #15]
 800603e:	6879      	ldr	r1, [r7, #4]
 8006040:	4613      	mov	r3, r2
 8006042:	00db      	lsls	r3, r3, #3
 8006044:	1a9b      	subs	r3, r3, r2
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	440b      	add	r3, r1
 800604a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800604e:	2200      	movs	r2, #0
 8006050:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006052:	7bfa      	ldrb	r2, [r7, #15]
 8006054:	6879      	ldr	r1, [r7, #4]
 8006056:	4613      	mov	r3, r2
 8006058:	00db      	lsls	r3, r3, #3
 800605a:	1a9b      	subs	r3, r3, r2
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	440b      	add	r3, r1
 8006060:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006064:	2200      	movs	r2, #0
 8006066:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006068:	7bfa      	ldrb	r2, [r7, #15]
 800606a:	6879      	ldr	r1, [r7, #4]
 800606c:	4613      	mov	r3, r2
 800606e:	00db      	lsls	r3, r3, #3
 8006070:	1a9b      	subs	r3, r3, r2
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	440b      	add	r3, r1
 8006076:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800607a:	2200      	movs	r2, #0
 800607c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800607e:	7bfa      	ldrb	r2, [r7, #15]
 8006080:	6879      	ldr	r1, [r7, #4]
 8006082:	4613      	mov	r3, r2
 8006084:	00db      	lsls	r3, r3, #3
 8006086:	1a9b      	subs	r3, r3, r2
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	440b      	add	r3, r1
 800608c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006090:	2200      	movs	r2, #0
 8006092:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006094:	7bfb      	ldrb	r3, [r7, #15]
 8006096:	3301      	adds	r3, #1
 8006098:	73fb      	strb	r3, [r7, #15]
 800609a:	7bfa      	ldrb	r2, [r7, #15]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d3b5      	bcc.n	8006010 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	603b      	str	r3, [r7, #0]
 80060aa:	687e      	ldr	r6, [r7, #4]
 80060ac:	466d      	mov	r5, sp
 80060ae:	f106 0410 	add.w	r4, r6, #16
 80060b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80060b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80060b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80060b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80060ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80060be:	e885 0003 	stmia.w	r5, {r0, r1}
 80060c2:	1d33      	adds	r3, r6, #4
 80060c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80060c6:	6838      	ldr	r0, [r7, #0]
 80060c8:	f003 ffa8 	bl	800a01c <USB_DevInit>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d005      	beq.n	80060de <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2202      	movs	r2, #2
 80060d6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e00d      	b.n	80060fa <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2201      	movs	r2, #1
 80060ea:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4618      	mov	r0, r3
 80060f4:	f004 fff0 	bl	800b0d8 <USB_DevDisconnect>

  return HAL_OK;
 80060f8:	2300      	movs	r3, #0
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3714      	adds	r7, #20
 80060fe:	46bd      	mov	sp, r7
 8006100:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006102 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006102:	b580      	push	{r7, lr}
 8006104:	b084      	sub	sp, #16
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006116:	2b01      	cmp	r3, #1
 8006118:	d101      	bne.n	800611e <HAL_PCD_Start+0x1c>
 800611a:	2302      	movs	r3, #2
 800611c:	e020      	b.n	8006160 <HAL_PCD_Start+0x5e>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2201      	movs	r2, #1
 8006122:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800612a:	2b01      	cmp	r3, #1
 800612c:	d109      	bne.n	8006142 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006132:	2b01      	cmp	r3, #1
 8006134:	d005      	beq.n	8006142 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800613a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4618      	mov	r0, r3
 8006148:	f003 ff1c 	bl	8009f84 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4618      	mov	r0, r3
 8006152:	f004 ffa0 	bl	800b096 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800615e:	2300      	movs	r3, #0
}
 8006160:	4618      	mov	r0, r3
 8006162:	3710      	adds	r7, #16
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006168:	b590      	push	{r4, r7, lr}
 800616a:	b08d      	sub	sp, #52	; 0x34
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006176:	6a3b      	ldr	r3, [r7, #32]
 8006178:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4618      	mov	r0, r3
 8006180:	f005 f85e 	bl	800b240 <USB_GetMode>
 8006184:	4603      	mov	r3, r0
 8006186:	2b00      	cmp	r3, #0
 8006188:	f040 839d 	bne.w	80068c6 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4618      	mov	r0, r3
 8006192:	f004 ffc2 	bl	800b11a <USB_ReadInterrupts>
 8006196:	4603      	mov	r3, r0
 8006198:	2b00      	cmp	r3, #0
 800619a:	f000 8393 	beq.w	80068c4 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4618      	mov	r0, r3
 80061a4:	f004 ffb9 	bl	800b11a <USB_ReadInterrupts>
 80061a8:	4603      	mov	r3, r0
 80061aa:	f003 0302 	and.w	r3, r3, #2
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	d107      	bne.n	80061c2 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	695a      	ldr	r2, [r3, #20]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f002 0202 	and.w	r2, r2, #2
 80061c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4618      	mov	r0, r3
 80061c8:	f004 ffa7 	bl	800b11a <USB_ReadInterrupts>
 80061cc:	4603      	mov	r3, r0
 80061ce:	f003 0310 	and.w	r3, r3, #16
 80061d2:	2b10      	cmp	r3, #16
 80061d4:	d161      	bne.n	800629a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	699a      	ldr	r2, [r3, #24]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f022 0210 	bic.w	r2, r2, #16
 80061e4:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80061e6:	6a3b      	ldr	r3, [r7, #32]
 80061e8:	6a1b      	ldr	r3, [r3, #32]
 80061ea:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	f003 020f 	and.w	r2, r3, #15
 80061f2:	4613      	mov	r3, r2
 80061f4:	00db      	lsls	r3, r3, #3
 80061f6:	1a9b      	subs	r3, r3, r2
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	4413      	add	r3, r2
 8006202:	3304      	adds	r3, #4
 8006204:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	0c5b      	lsrs	r3, r3, #17
 800620a:	f003 030f 	and.w	r3, r3, #15
 800620e:	2b02      	cmp	r3, #2
 8006210:	d124      	bne.n	800625c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006212:	69ba      	ldr	r2, [r7, #24]
 8006214:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006218:	4013      	ands	r3, r2
 800621a:	2b00      	cmp	r3, #0
 800621c:	d035      	beq.n	800628a <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	091b      	lsrs	r3, r3, #4
 8006226:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006228:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800622c:	b29b      	uxth	r3, r3
 800622e:	461a      	mov	r2, r3
 8006230:	6a38      	ldr	r0, [r7, #32]
 8006232:	f004 fe0d 	bl	800ae50 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	68da      	ldr	r2, [r3, #12]
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	091b      	lsrs	r3, r3, #4
 800623e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006242:	441a      	add	r2, r3
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	699a      	ldr	r2, [r3, #24]
 800624c:	69bb      	ldr	r3, [r7, #24]
 800624e:	091b      	lsrs	r3, r3, #4
 8006250:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006254:	441a      	add	r2, r3
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	619a      	str	r2, [r3, #24]
 800625a:	e016      	b.n	800628a <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800625c:	69bb      	ldr	r3, [r7, #24]
 800625e:	0c5b      	lsrs	r3, r3, #17
 8006260:	f003 030f 	and.w	r3, r3, #15
 8006264:	2b06      	cmp	r3, #6
 8006266:	d110      	bne.n	800628a <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800626e:	2208      	movs	r2, #8
 8006270:	4619      	mov	r1, r3
 8006272:	6a38      	ldr	r0, [r7, #32]
 8006274:	f004 fdec 	bl	800ae50 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	699a      	ldr	r2, [r3, #24]
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	091b      	lsrs	r3, r3, #4
 8006280:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006284:	441a      	add	r2, r3
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	699a      	ldr	r2, [r3, #24]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f042 0210 	orr.w	r2, r2, #16
 8006298:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4618      	mov	r0, r3
 80062a0:	f004 ff3b 	bl	800b11a <USB_ReadInterrupts>
 80062a4:	4603      	mov	r3, r0
 80062a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80062aa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80062ae:	d16e      	bne.n	800638e <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80062b0:	2300      	movs	r3, #0
 80062b2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4618      	mov	r0, r3
 80062ba:	f004 ff41 	bl	800b140 <USB_ReadDevAllOutEpInterrupt>
 80062be:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80062c0:	e062      	b.n	8006388 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80062c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c4:	f003 0301 	and.w	r3, r3, #1
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d057      	beq.n	800637c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062d2:	b2d2      	uxtb	r2, r2
 80062d4:	4611      	mov	r1, r2
 80062d6:	4618      	mov	r0, r3
 80062d8:	f004 ff66 	bl	800b1a8 <USB_ReadDevOutEPInterrupt>
 80062dc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	f003 0301 	and.w	r3, r3, #1
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d00c      	beq.n	8006302 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80062e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ea:	015a      	lsls	r2, r3, #5
 80062ec:	69fb      	ldr	r3, [r7, #28]
 80062ee:	4413      	add	r3, r2
 80062f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062f4:	461a      	mov	r2, r3
 80062f6:	2301      	movs	r3, #1
 80062f8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80062fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 fdb1 	bl	8006e64 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	f003 0308 	and.w	r3, r3, #8
 8006308:	2b00      	cmp	r3, #0
 800630a:	d00c      	beq.n	8006326 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800630c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630e:	015a      	lsls	r2, r3, #5
 8006310:	69fb      	ldr	r3, [r7, #28]
 8006312:	4413      	add	r3, r2
 8006314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006318:	461a      	mov	r2, r3
 800631a:	2308      	movs	r3, #8
 800631c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800631e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f000 feab 	bl	800707c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	f003 0310 	and.w	r3, r3, #16
 800632c:	2b00      	cmp	r3, #0
 800632e:	d008      	beq.n	8006342 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006332:	015a      	lsls	r2, r3, #5
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	4413      	add	r3, r2
 8006338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800633c:	461a      	mov	r2, r3
 800633e:	2310      	movs	r3, #16
 8006340:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	f003 0320 	and.w	r3, r3, #32
 8006348:	2b00      	cmp	r3, #0
 800634a:	d008      	beq.n	800635e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800634c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634e:	015a      	lsls	r2, r3, #5
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	4413      	add	r3, r2
 8006354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006358:	461a      	mov	r2, r3
 800635a:	2320      	movs	r3, #32
 800635c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006364:	2b00      	cmp	r3, #0
 8006366:	d009      	beq.n	800637c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636a:	015a      	lsls	r2, r3, #5
 800636c:	69fb      	ldr	r3, [r7, #28]
 800636e:	4413      	add	r3, r2
 8006370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006374:	461a      	mov	r2, r3
 8006376:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800637a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800637c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637e:	3301      	adds	r3, #1
 8006380:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006384:	085b      	lsrs	r3, r3, #1
 8006386:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800638a:	2b00      	cmp	r3, #0
 800638c:	d199      	bne.n	80062c2 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4618      	mov	r0, r3
 8006394:	f004 fec1 	bl	800b11a <USB_ReadInterrupts>
 8006398:	4603      	mov	r3, r0
 800639a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800639e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80063a2:	f040 80c0 	bne.w	8006526 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4618      	mov	r0, r3
 80063ac:	f004 fee2 	bl	800b174 <USB_ReadDevAllInEpInterrupt>
 80063b0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80063b2:	2300      	movs	r3, #0
 80063b4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80063b6:	e0b2      	b.n	800651e <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80063b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ba:	f003 0301 	and.w	r3, r3, #1
 80063be:	2b00      	cmp	r3, #0
 80063c0:	f000 80a7 	beq.w	8006512 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063ca:	b2d2      	uxtb	r2, r2
 80063cc:	4611      	mov	r1, r2
 80063ce:	4618      	mov	r0, r3
 80063d0:	f004 ff08 	bl	800b1e4 <USB_ReadDevInEPInterrupt>
 80063d4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	f003 0301 	and.w	r3, r3, #1
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d057      	beq.n	8006490 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80063e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e2:	f003 030f 	and.w	r3, r3, #15
 80063e6:	2201      	movs	r2, #1
 80063e8:	fa02 f303 	lsl.w	r3, r2, r3
 80063ec:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80063ee:	69fb      	ldr	r3, [r7, #28]
 80063f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	43db      	mvns	r3, r3
 80063fa:	69f9      	ldr	r1, [r7, #28]
 80063fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006400:	4013      	ands	r3, r2
 8006402:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006406:	015a      	lsls	r2, r3, #5
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	4413      	add	r3, r2
 800640c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006410:	461a      	mov	r2, r3
 8006412:	2301      	movs	r3, #1
 8006414:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	2b01      	cmp	r3, #1
 800641c:	d132      	bne.n	8006484 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800641e:	6879      	ldr	r1, [r7, #4]
 8006420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006422:	4613      	mov	r3, r2
 8006424:	00db      	lsls	r3, r3, #3
 8006426:	1a9b      	subs	r3, r3, r2
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	440b      	add	r3, r1
 800642c:	3348      	adds	r3, #72	; 0x48
 800642e:	6819      	ldr	r1, [r3, #0]
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006434:	4613      	mov	r3, r2
 8006436:	00db      	lsls	r3, r3, #3
 8006438:	1a9b      	subs	r3, r3, r2
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	4403      	add	r3, r0
 800643e:	3344      	adds	r3, #68	; 0x44
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4419      	add	r1, r3
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006448:	4613      	mov	r3, r2
 800644a:	00db      	lsls	r3, r3, #3
 800644c:	1a9b      	subs	r3, r3, r2
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	4403      	add	r3, r0
 8006452:	3348      	adds	r3, #72	; 0x48
 8006454:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006458:	2b00      	cmp	r3, #0
 800645a:	d113      	bne.n	8006484 <HAL_PCD_IRQHandler+0x31c>
 800645c:	6879      	ldr	r1, [r7, #4]
 800645e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006460:	4613      	mov	r3, r2
 8006462:	00db      	lsls	r3, r3, #3
 8006464:	1a9b      	subs	r3, r3, r2
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	440b      	add	r3, r1
 800646a:	3350      	adds	r3, #80	; 0x50
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d108      	bne.n	8006484 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6818      	ldr	r0, [r3, #0]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800647c:	461a      	mov	r2, r3
 800647e:	2101      	movs	r1, #1
 8006480:	f004 ff10 	bl	800b2a4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006486:	b2db      	uxtb	r3, r3
 8006488:	4619      	mov	r1, r3
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f009 ffcd 	bl	801042a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	f003 0308 	and.w	r3, r3, #8
 8006496:	2b00      	cmp	r3, #0
 8006498:	d008      	beq.n	80064ac <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800649a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649c:	015a      	lsls	r2, r3, #5
 800649e:	69fb      	ldr	r3, [r7, #28]
 80064a0:	4413      	add	r3, r2
 80064a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064a6:	461a      	mov	r2, r3
 80064a8:	2308      	movs	r3, #8
 80064aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	f003 0310 	and.w	r3, r3, #16
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d008      	beq.n	80064c8 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80064b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b8:	015a      	lsls	r2, r3, #5
 80064ba:	69fb      	ldr	r3, [r7, #28]
 80064bc:	4413      	add	r3, r2
 80064be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064c2:	461a      	mov	r2, r3
 80064c4:	2310      	movs	r3, #16
 80064c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d008      	beq.n	80064e4 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80064d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d4:	015a      	lsls	r2, r3, #5
 80064d6:	69fb      	ldr	r3, [r7, #28]
 80064d8:	4413      	add	r3, r2
 80064da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064de:	461a      	mov	r2, r3
 80064e0:	2340      	movs	r3, #64	; 0x40
 80064e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	f003 0302 	and.w	r3, r3, #2
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d008      	beq.n	8006500 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80064ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f0:	015a      	lsls	r2, r3, #5
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	4413      	add	r3, r2
 80064f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064fa:	461a      	mov	r2, r3
 80064fc:	2302      	movs	r3, #2
 80064fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006506:	2b00      	cmp	r3, #0
 8006508:	d003      	beq.n	8006512 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800650a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 fc1b 	bl	8006d48 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006514:	3301      	adds	r3, #1
 8006516:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651a:	085b      	lsrs	r3, r3, #1
 800651c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800651e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006520:	2b00      	cmp	r3, #0
 8006522:	f47f af49 	bne.w	80063b8 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4618      	mov	r0, r3
 800652c:	f004 fdf5 	bl	800b11a <USB_ReadInterrupts>
 8006530:	4603      	mov	r3, r0
 8006532:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006536:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800653a:	d122      	bne.n	8006582 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	69fa      	ldr	r2, [r7, #28]
 8006546:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800654a:	f023 0301 	bic.w	r3, r3, #1
 800654e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006556:	2b01      	cmp	r3, #1
 8006558:	d108      	bne.n	800656c <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006562:	2100      	movs	r1, #0
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 fe27 	bl	80071b8 <HAL_PCDEx_LPM_Callback>
 800656a:	e002      	b.n	8006572 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f009 ffd3 	bl	8010518 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	695a      	ldr	r2, [r3, #20]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006580:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4618      	mov	r0, r3
 8006588:	f004 fdc7 	bl	800b11a <USB_ReadInterrupts>
 800658c:	4603      	mov	r3, r0
 800658e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006592:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006596:	d112      	bne.n	80065be <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	f003 0301 	and.w	r3, r3, #1
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d102      	bne.n	80065ae <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f009 ff8f 	bl	80104cc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	695a      	ldr	r2, [r3, #20]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80065bc:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4618      	mov	r0, r3
 80065c4:	f004 fda9 	bl	800b11a <USB_ReadInterrupts>
 80065c8:	4603      	mov	r3, r0
 80065ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80065ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065d2:	f040 80c7 	bne.w	8006764 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80065d6:	69fb      	ldr	r3, [r7, #28]
 80065d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	69fa      	ldr	r2, [r7, #28]
 80065e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065e4:	f023 0301 	bic.w	r3, r3, #1
 80065e8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	2110      	movs	r1, #16
 80065f0:	4618      	mov	r0, r3
 80065f2:	f003 fe77 	bl	800a2e4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80065f6:	2300      	movs	r3, #0
 80065f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065fa:	e056      	b.n	80066aa <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80065fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065fe:	015a      	lsls	r2, r3, #5
 8006600:	69fb      	ldr	r3, [r7, #28]
 8006602:	4413      	add	r3, r2
 8006604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006608:	461a      	mov	r2, r3
 800660a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800660e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006612:	015a      	lsls	r2, r3, #5
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	4413      	add	r3, r2
 8006618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006620:	0151      	lsls	r1, r2, #5
 8006622:	69fa      	ldr	r2, [r7, #28]
 8006624:	440a      	add	r2, r1
 8006626:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800662a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800662e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006632:	015a      	lsls	r2, r3, #5
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	4413      	add	r3, r2
 8006638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006640:	0151      	lsls	r1, r2, #5
 8006642:	69fa      	ldr	r2, [r7, #28]
 8006644:	440a      	add	r2, r1
 8006646:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800664a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800664e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006652:	015a      	lsls	r2, r3, #5
 8006654:	69fb      	ldr	r3, [r7, #28]
 8006656:	4413      	add	r3, r2
 8006658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800665c:	461a      	mov	r2, r3
 800665e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006662:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006666:	015a      	lsls	r2, r3, #5
 8006668:	69fb      	ldr	r3, [r7, #28]
 800666a:	4413      	add	r3, r2
 800666c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006674:	0151      	lsls	r1, r2, #5
 8006676:	69fa      	ldr	r2, [r7, #28]
 8006678:	440a      	add	r2, r1
 800667a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800667e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006682:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006686:	015a      	lsls	r2, r3, #5
 8006688:	69fb      	ldr	r3, [r7, #28]
 800668a:	4413      	add	r3, r2
 800668c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006694:	0151      	lsls	r1, r2, #5
 8006696:	69fa      	ldr	r2, [r7, #28]
 8006698:	440a      	add	r2, r1
 800669a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800669e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80066a2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80066a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a6:	3301      	adds	r3, #1
 80066a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d3a3      	bcc.n	80065fc <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066ba:	69db      	ldr	r3, [r3, #28]
 80066bc:	69fa      	ldr	r2, [r7, #28]
 80066be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066c2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80066c6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d016      	beq.n	80066fe <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066da:	69fa      	ldr	r2, [r7, #28]
 80066dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066e0:	f043 030b 	orr.w	r3, r3, #11
 80066e4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066f0:	69fa      	ldr	r2, [r7, #28]
 80066f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066f6:	f043 030b 	orr.w	r3, r3, #11
 80066fa:	6453      	str	r3, [r2, #68]	; 0x44
 80066fc:	e015      	b.n	800672a <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006704:	695b      	ldr	r3, [r3, #20]
 8006706:	69fa      	ldr	r2, [r7, #28]
 8006708:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800670c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006710:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8006714:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006716:	69fb      	ldr	r3, [r7, #28]
 8006718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800671c:	691b      	ldr	r3, [r3, #16]
 800671e:	69fa      	ldr	r2, [r7, #28]
 8006720:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006724:	f043 030b 	orr.w	r3, r3, #11
 8006728:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	69fa      	ldr	r2, [r7, #28]
 8006734:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006738:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800673c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6818      	ldr	r0, [r3, #0]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800674e:	461a      	mov	r2, r3
 8006750:	f004 fda8 	bl	800b2a4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	695a      	ldr	r2, [r3, #20]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006762:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4618      	mov	r0, r3
 800676a:	f004 fcd6 	bl	800b11a <USB_ReadInterrupts>
 800676e:	4603      	mov	r3, r0
 8006770:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006774:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006778:	d124      	bne.n	80067c4 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4618      	mov	r0, r3
 8006780:	f004 fd6c 	bl	800b25c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4618      	mov	r0, r3
 800678a:	f003 fe0c 	bl	800a3a6 <USB_GetDevSpeed>
 800678e:	4603      	mov	r3, r0
 8006790:	461a      	mov	r2, r3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681c      	ldr	r4, [r3, #0]
 800679a:	f001 f947 	bl	8007a2c <HAL_RCC_GetHCLKFreq>
 800679e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	461a      	mov	r2, r3
 80067a8:	4620      	mov	r0, r4
 80067aa:	f003 fb49 	bl	8009e40 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f009 fe63 	bl	801047a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	695a      	ldr	r2, [r3, #20]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80067c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4618      	mov	r0, r3
 80067ca:	f004 fca6 	bl	800b11a <USB_ReadInterrupts>
 80067ce:	4603      	mov	r3, r0
 80067d0:	f003 0308 	and.w	r3, r3, #8
 80067d4:	2b08      	cmp	r3, #8
 80067d6:	d10a      	bne.n	80067ee <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f009 fe40 	bl	801045e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	695a      	ldr	r2, [r3, #20]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f002 0208 	and.w	r2, r2, #8
 80067ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4618      	mov	r0, r3
 80067f4:	f004 fc91 	bl	800b11a <USB_ReadInterrupts>
 80067f8:	4603      	mov	r3, r0
 80067fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006802:	d10f      	bne.n	8006824 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006804:	2300      	movs	r3, #0
 8006806:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680a:	b2db      	uxtb	r3, r3
 800680c:	4619      	mov	r1, r3
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f009 fea2 	bl	8010558 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	695a      	ldr	r2, [r3, #20]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006822:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4618      	mov	r0, r3
 800682a:	f004 fc76 	bl	800b11a <USB_ReadInterrupts>
 800682e:	4603      	mov	r3, r0
 8006830:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006834:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006838:	d10f      	bne.n	800685a <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800683a:	2300      	movs	r3, #0
 800683c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800683e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006840:	b2db      	uxtb	r3, r3
 8006842:	4619      	mov	r1, r3
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f009 fe75 	bl	8010534 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	695a      	ldr	r2, [r3, #20]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006858:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4618      	mov	r0, r3
 8006860:	f004 fc5b 	bl	800b11a <USB_ReadInterrupts>
 8006864:	4603      	mov	r3, r0
 8006866:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800686a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800686e:	d10a      	bne.n	8006886 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f009 fe83 	bl	801057c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	695a      	ldr	r2, [r3, #20]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006884:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4618      	mov	r0, r3
 800688c:	f004 fc45 	bl	800b11a <USB_ReadInterrupts>
 8006890:	4603      	mov	r3, r0
 8006892:	f003 0304 	and.w	r3, r3, #4
 8006896:	2b04      	cmp	r3, #4
 8006898:	d115      	bne.n	80068c6 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80068a2:	69bb      	ldr	r3, [r7, #24]
 80068a4:	f003 0304 	and.w	r3, r3, #4
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d002      	beq.n	80068b2 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f009 fe73 	bl	8010598 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	6859      	ldr	r1, [r3, #4]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	69ba      	ldr	r2, [r7, #24]
 80068be:	430a      	orrs	r2, r1
 80068c0:	605a      	str	r2, [r3, #4]
 80068c2:	e000      	b.n	80068c6 <HAL_PCD_IRQHandler+0x75e>
      return;
 80068c4:	bf00      	nop
    }
  }
}
 80068c6:	3734      	adds	r7, #52	; 0x34
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd90      	pop	{r4, r7, pc}

080068cc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b082      	sub	sp, #8
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	460b      	mov	r3, r1
 80068d6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d101      	bne.n	80068e6 <HAL_PCD_SetAddress+0x1a>
 80068e2:	2302      	movs	r3, #2
 80068e4:	e013      	b.n	800690e <HAL_PCD_SetAddress+0x42>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2201      	movs	r2, #1
 80068ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	78fa      	ldrb	r2, [r7, #3]
 80068f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	78fa      	ldrb	r2, [r7, #3]
 80068fc:	4611      	mov	r1, r2
 80068fe:	4618      	mov	r0, r3
 8006900:	f004 fba3 	bl	800b04a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800690c:	2300      	movs	r3, #0
}
 800690e:	4618      	mov	r0, r3
 8006910:	3708      	adds	r7, #8
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}

08006916 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006916:	b580      	push	{r7, lr}
 8006918:	b084      	sub	sp, #16
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
 800691e:	4608      	mov	r0, r1
 8006920:	4611      	mov	r1, r2
 8006922:	461a      	mov	r2, r3
 8006924:	4603      	mov	r3, r0
 8006926:	70fb      	strb	r3, [r7, #3]
 8006928:	460b      	mov	r3, r1
 800692a:	803b      	strh	r3, [r7, #0]
 800692c:	4613      	mov	r3, r2
 800692e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006930:	2300      	movs	r3, #0
 8006932:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006934:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006938:	2b00      	cmp	r3, #0
 800693a:	da0f      	bge.n	800695c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800693c:	78fb      	ldrb	r3, [r7, #3]
 800693e:	f003 020f 	and.w	r2, r3, #15
 8006942:	4613      	mov	r3, r2
 8006944:	00db      	lsls	r3, r3, #3
 8006946:	1a9b      	subs	r3, r3, r2
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	3338      	adds	r3, #56	; 0x38
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	4413      	add	r3, r2
 8006950:	3304      	adds	r3, #4
 8006952:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2201      	movs	r2, #1
 8006958:	705a      	strb	r2, [r3, #1]
 800695a:	e00f      	b.n	800697c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800695c:	78fb      	ldrb	r3, [r7, #3]
 800695e:	f003 020f 	and.w	r2, r3, #15
 8006962:	4613      	mov	r3, r2
 8006964:	00db      	lsls	r3, r3, #3
 8006966:	1a9b      	subs	r3, r3, r2
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	4413      	add	r3, r2
 8006972:	3304      	adds	r3, #4
 8006974:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2200      	movs	r2, #0
 800697a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800697c:	78fb      	ldrb	r3, [r7, #3]
 800697e:	f003 030f 	and.w	r3, r3, #15
 8006982:	b2da      	uxtb	r2, r3
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006988:	883a      	ldrh	r2, [r7, #0]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	78ba      	ldrb	r2, [r7, #2]
 8006992:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	785b      	ldrb	r3, [r3, #1]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d004      	beq.n	80069a6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	b29a      	uxth	r2, r3
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80069a6:	78bb      	ldrb	r3, [r7, #2]
 80069a8:	2b02      	cmp	r3, #2
 80069aa:	d102      	bne.n	80069b2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2200      	movs	r2, #0
 80069b0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d101      	bne.n	80069c0 <HAL_PCD_EP_Open+0xaa>
 80069bc:	2302      	movs	r3, #2
 80069be:	e00e      	b.n	80069de <HAL_PCD_EP_Open+0xc8>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2201      	movs	r2, #1
 80069c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	68f9      	ldr	r1, [r7, #12]
 80069ce:	4618      	mov	r0, r3
 80069d0:	f003 fd0e 	bl	800a3f0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80069dc:	7afb      	ldrb	r3, [r7, #11]
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3710      	adds	r7, #16
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}

080069e6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80069e6:	b580      	push	{r7, lr}
 80069e8:	b084      	sub	sp, #16
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
 80069ee:	460b      	mov	r3, r1
 80069f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80069f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	da0f      	bge.n	8006a1a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80069fa:	78fb      	ldrb	r3, [r7, #3]
 80069fc:	f003 020f 	and.w	r2, r3, #15
 8006a00:	4613      	mov	r3, r2
 8006a02:	00db      	lsls	r3, r3, #3
 8006a04:	1a9b      	subs	r3, r3, r2
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	3338      	adds	r3, #56	; 0x38
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	4413      	add	r3, r2
 8006a0e:	3304      	adds	r3, #4
 8006a10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2201      	movs	r2, #1
 8006a16:	705a      	strb	r2, [r3, #1]
 8006a18:	e00f      	b.n	8006a3a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006a1a:	78fb      	ldrb	r3, [r7, #3]
 8006a1c:	f003 020f 	and.w	r2, r3, #15
 8006a20:	4613      	mov	r3, r2
 8006a22:	00db      	lsls	r3, r3, #3
 8006a24:	1a9b      	subs	r3, r3, r2
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	4413      	add	r3, r2
 8006a30:	3304      	adds	r3, #4
 8006a32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2200      	movs	r2, #0
 8006a38:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006a3a:	78fb      	ldrb	r3, [r7, #3]
 8006a3c:	f003 030f 	and.w	r3, r3, #15
 8006a40:	b2da      	uxtb	r2, r3
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d101      	bne.n	8006a54 <HAL_PCD_EP_Close+0x6e>
 8006a50:	2302      	movs	r3, #2
 8006a52:	e00e      	b.n	8006a72 <HAL_PCD_EP_Close+0x8c>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2201      	movs	r2, #1
 8006a58:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	68f9      	ldr	r1, [r7, #12]
 8006a62:	4618      	mov	r0, r3
 8006a64:	f003 fd4c 	bl	800a500 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006a70:	2300      	movs	r3, #0
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3710      	adds	r7, #16
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}

08006a7a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006a7a:	b580      	push	{r7, lr}
 8006a7c:	b086      	sub	sp, #24
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	60f8      	str	r0, [r7, #12]
 8006a82:	607a      	str	r2, [r7, #4]
 8006a84:	603b      	str	r3, [r7, #0]
 8006a86:	460b      	mov	r3, r1
 8006a88:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006a8a:	7afb      	ldrb	r3, [r7, #11]
 8006a8c:	f003 020f 	and.w	r2, r3, #15
 8006a90:	4613      	mov	r3, r2
 8006a92:	00db      	lsls	r3, r3, #3
 8006a94:	1a9b      	subs	r3, r3, r2
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006a9c:	68fa      	ldr	r2, [r7, #12]
 8006a9e:	4413      	add	r3, r2
 8006aa0:	3304      	adds	r3, #4
 8006aa2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	683a      	ldr	r2, [r7, #0]
 8006aae:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006abc:	7afb      	ldrb	r3, [r7, #11]
 8006abe:	f003 030f 	and.w	r3, r3, #15
 8006ac2:	b2da      	uxtb	r2, r3
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	691b      	ldr	r3, [r3, #16]
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d102      	bne.n	8006ad6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006ad6:	7afb      	ldrb	r3, [r7, #11]
 8006ad8:	f003 030f 	and.w	r3, r3, #15
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d109      	bne.n	8006af4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6818      	ldr	r0, [r3, #0]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	691b      	ldr	r3, [r3, #16]
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	461a      	mov	r2, r3
 8006aec:	6979      	ldr	r1, [r7, #20]
 8006aee:	f004 f827 	bl	800ab40 <USB_EP0StartXfer>
 8006af2:	e008      	b.n	8006b06 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6818      	ldr	r0, [r3, #0]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	691b      	ldr	r3, [r3, #16]
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	461a      	mov	r2, r3
 8006b00:	6979      	ldr	r1, [r7, #20]
 8006b02:	f003 fdd9 	bl	800a6b8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006b06:	2300      	movs	r3, #0
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3718      	adds	r7, #24
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b083      	sub	sp, #12
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	460b      	mov	r3, r1
 8006b1a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006b1c:	78fb      	ldrb	r3, [r7, #3]
 8006b1e:	f003 020f 	and.w	r2, r3, #15
 8006b22:	6879      	ldr	r1, [r7, #4]
 8006b24:	4613      	mov	r3, r2
 8006b26:	00db      	lsls	r3, r3, #3
 8006b28:	1a9b      	subs	r3, r3, r2
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	440b      	add	r3, r1
 8006b2e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006b32:	681b      	ldr	r3, [r3, #0]
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b086      	sub	sp, #24
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	60f8      	str	r0, [r7, #12]
 8006b48:	607a      	str	r2, [r7, #4]
 8006b4a:	603b      	str	r3, [r7, #0]
 8006b4c:	460b      	mov	r3, r1
 8006b4e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b50:	7afb      	ldrb	r3, [r7, #11]
 8006b52:	f003 020f 	and.w	r2, r3, #15
 8006b56:	4613      	mov	r3, r2
 8006b58:	00db      	lsls	r3, r3, #3
 8006b5a:	1a9b      	subs	r3, r3, r2
 8006b5c:	009b      	lsls	r3, r3, #2
 8006b5e:	3338      	adds	r3, #56	; 0x38
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	4413      	add	r3, r2
 8006b64:	3304      	adds	r3, #4
 8006b66:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	683a      	ldr	r2, [r7, #0]
 8006b72:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	2200      	movs	r2, #0
 8006b78:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006b80:	7afb      	ldrb	r3, [r7, #11]
 8006b82:	f003 030f 	and.w	r3, r3, #15
 8006b86:	b2da      	uxtb	r2, r3
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	691b      	ldr	r3, [r3, #16]
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d102      	bne.n	8006b9a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006b9a:	7afb      	ldrb	r3, [r7, #11]
 8006b9c:	f003 030f 	and.w	r3, r3, #15
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d109      	bne.n	8006bb8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6818      	ldr	r0, [r3, #0]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	691b      	ldr	r3, [r3, #16]
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	461a      	mov	r2, r3
 8006bb0:	6979      	ldr	r1, [r7, #20]
 8006bb2:	f003 ffc5 	bl	800ab40 <USB_EP0StartXfer>
 8006bb6:	e008      	b.n	8006bca <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6818      	ldr	r0, [r3, #0]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	691b      	ldr	r3, [r3, #16]
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	6979      	ldr	r1, [r7, #20]
 8006bc6:	f003 fd77 	bl	800a6b8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006bca:	2300      	movs	r3, #0
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3718      	adds	r7, #24
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b084      	sub	sp, #16
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	460b      	mov	r3, r1
 8006bde:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006be0:	78fb      	ldrb	r3, [r7, #3]
 8006be2:	f003 020f 	and.w	r2, r3, #15
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d901      	bls.n	8006bf2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e050      	b.n	8006c94 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006bf2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	da0f      	bge.n	8006c1a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006bfa:	78fb      	ldrb	r3, [r7, #3]
 8006bfc:	f003 020f 	and.w	r2, r3, #15
 8006c00:	4613      	mov	r3, r2
 8006c02:	00db      	lsls	r3, r3, #3
 8006c04:	1a9b      	subs	r3, r3, r2
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	3338      	adds	r3, #56	; 0x38
 8006c0a:	687a      	ldr	r2, [r7, #4]
 8006c0c:	4413      	add	r3, r2
 8006c0e:	3304      	adds	r3, #4
 8006c10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2201      	movs	r2, #1
 8006c16:	705a      	strb	r2, [r3, #1]
 8006c18:	e00d      	b.n	8006c36 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006c1a:	78fa      	ldrb	r2, [r7, #3]
 8006c1c:	4613      	mov	r3, r2
 8006c1e:	00db      	lsls	r3, r3, #3
 8006c20:	1a9b      	subs	r3, r3, r2
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	4413      	add	r3, r2
 8006c2c:	3304      	adds	r3, #4
 8006c2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2200      	movs	r2, #0
 8006c34:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2201      	movs	r2, #1
 8006c3a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006c3c:	78fb      	ldrb	r3, [r7, #3]
 8006c3e:	f003 030f 	and.w	r3, r3, #15
 8006c42:	b2da      	uxtb	r2, r3
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d101      	bne.n	8006c56 <HAL_PCD_EP_SetStall+0x82>
 8006c52:	2302      	movs	r3, #2
 8006c54:	e01e      	b.n	8006c94 <HAL_PCD_EP_SetStall+0xc0>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2201      	movs	r2, #1
 8006c5a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	68f9      	ldr	r1, [r7, #12]
 8006c64:	4618      	mov	r0, r3
 8006c66:	f004 f91c 	bl	800aea2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006c6a:	78fb      	ldrb	r3, [r7, #3]
 8006c6c:	f003 030f 	and.w	r3, r3, #15
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d10a      	bne.n	8006c8a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6818      	ldr	r0, [r3, #0]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	691b      	ldr	r3, [r3, #16]
 8006c7c:	b2d9      	uxtb	r1, r3
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006c84:	461a      	mov	r2, r3
 8006c86:	f004 fb0d 	bl	800b2a4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006c92:	2300      	movs	r3, #0
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3710      	adds	r7, #16
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006ca8:	78fb      	ldrb	r3, [r7, #3]
 8006caa:	f003 020f 	and.w	r2, r3, #15
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d901      	bls.n	8006cba <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e042      	b.n	8006d40 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006cba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	da0f      	bge.n	8006ce2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006cc2:	78fb      	ldrb	r3, [r7, #3]
 8006cc4:	f003 020f 	and.w	r2, r3, #15
 8006cc8:	4613      	mov	r3, r2
 8006cca:	00db      	lsls	r3, r3, #3
 8006ccc:	1a9b      	subs	r3, r3, r2
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	3338      	adds	r3, #56	; 0x38
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	4413      	add	r3, r2
 8006cd6:	3304      	adds	r3, #4
 8006cd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2201      	movs	r2, #1
 8006cde:	705a      	strb	r2, [r3, #1]
 8006ce0:	e00f      	b.n	8006d02 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006ce2:	78fb      	ldrb	r3, [r7, #3]
 8006ce4:	f003 020f 	and.w	r2, r3, #15
 8006ce8:	4613      	mov	r3, r2
 8006cea:	00db      	lsls	r3, r3, #3
 8006cec:	1a9b      	subs	r3, r3, r2
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	4413      	add	r3, r2
 8006cf8:	3304      	adds	r3, #4
 8006cfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2200      	movs	r2, #0
 8006d06:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006d08:	78fb      	ldrb	r3, [r7, #3]
 8006d0a:	f003 030f 	and.w	r3, r3, #15
 8006d0e:	b2da      	uxtb	r2, r3
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d101      	bne.n	8006d22 <HAL_PCD_EP_ClrStall+0x86>
 8006d1e:	2302      	movs	r3, #2
 8006d20:	e00e      	b.n	8006d40 <HAL_PCD_EP_ClrStall+0xa4>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2201      	movs	r2, #1
 8006d26:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	68f9      	ldr	r1, [r7, #12]
 8006d30:	4618      	mov	r0, r3
 8006d32:	f004 f924 	bl	800af7e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006d3e:	2300      	movs	r3, #0
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3710      	adds	r7, #16
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b08a      	sub	sp, #40	; 0x28
 8006d4c:	af02      	add	r7, sp, #8
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006d5c:	683a      	ldr	r2, [r7, #0]
 8006d5e:	4613      	mov	r3, r2
 8006d60:	00db      	lsls	r3, r3, #3
 8006d62:	1a9b      	subs	r3, r3, r2
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	3338      	adds	r3, #56	; 0x38
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	4413      	add	r3, r2
 8006d6c:	3304      	adds	r3, #4
 8006d6e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	699a      	ldr	r2, [r3, #24]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	695b      	ldr	r3, [r3, #20]
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d901      	bls.n	8006d80 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	e06c      	b.n	8006e5a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	695a      	ldr	r2, [r3, #20]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	699b      	ldr	r3, [r3, #24]
 8006d88:	1ad3      	subs	r3, r2, r3
 8006d8a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	69fa      	ldr	r2, [r7, #28]
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d902      	bls.n	8006d9c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006d9c:	69fb      	ldr	r3, [r7, #28]
 8006d9e:	3303      	adds	r3, #3
 8006da0:	089b      	lsrs	r3, r3, #2
 8006da2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006da4:	e02b      	b.n	8006dfe <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	695a      	ldr	r2, [r3, #20]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	699b      	ldr	r3, [r3, #24]
 8006dae:	1ad3      	subs	r3, r2, r3
 8006db0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	69fa      	ldr	r2, [r7, #28]
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d902      	bls.n	8006dc2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006dc2:	69fb      	ldr	r3, [r7, #28]
 8006dc4:	3303      	adds	r3, #3
 8006dc6:	089b      	lsrs	r3, r3, #2
 8006dc8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	68d9      	ldr	r1, [r3, #12]
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	b2da      	uxtb	r2, r3
 8006dd2:	69fb      	ldr	r3, [r7, #28]
 8006dd4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	9300      	str	r3, [sp, #0]
 8006dde:	4603      	mov	r3, r0
 8006de0:	6978      	ldr	r0, [r7, #20]
 8006de2:	f004 f800 	bl	800ade6 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	68da      	ldr	r2, [r3, #12]
 8006dea:	69fb      	ldr	r3, [r7, #28]
 8006dec:	441a      	add	r2, r3
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	699a      	ldr	r2, [r3, #24]
 8006df6:	69fb      	ldr	r3, [r7, #28]
 8006df8:	441a      	add	r2, r3
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	015a      	lsls	r2, r3, #5
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	4413      	add	r3, r2
 8006e06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e0a:	699b      	ldr	r3, [r3, #24]
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	69ba      	ldr	r2, [r7, #24]
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d809      	bhi.n	8006e28 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	699a      	ldr	r2, [r3, #24]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d203      	bcs.n	8006e28 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	695b      	ldr	r3, [r3, #20]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d1be      	bne.n	8006da6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	695a      	ldr	r2, [r3, #20]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	699b      	ldr	r3, [r3, #24]
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d811      	bhi.n	8006e58 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	f003 030f 	and.w	r3, r3, #15
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e40:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	43db      	mvns	r3, r3
 8006e4e:	6939      	ldr	r1, [r7, #16]
 8006e50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e54:	4013      	ands	r3, r2
 8006e56:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006e58:	2300      	movs	r3, #0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3720      	adds	r7, #32
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
	...

08006e64 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b086      	sub	sp, #24
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	333c      	adds	r3, #60	; 0x3c
 8006e7c:	3304      	adds	r3, #4
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	015a      	lsls	r2, r3, #5
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	4413      	add	r3, r2
 8006e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	691b      	ldr	r3, [r3, #16]
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	f040 80a0 	bne.w	8006fdc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	f003 0308 	and.w	r3, r3, #8
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d015      	beq.n	8006ed2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	4a72      	ldr	r2, [pc, #456]	; (8007074 <PCD_EP_OutXfrComplete_int+0x210>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	f240 80dd 	bls.w	800706a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	f000 80d7 	beq.w	800706a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	015a      	lsls	r2, r3, #5
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	4413      	add	r3, r2
 8006ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ec8:	461a      	mov	r2, r3
 8006eca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ece:	6093      	str	r3, [r2, #8]
 8006ed0:	e0cb      	b.n	800706a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	f003 0320 	and.w	r3, r3, #32
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d009      	beq.n	8006ef0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	015a      	lsls	r2, r3, #5
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	4413      	add	r3, r2
 8006ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ee8:	461a      	mov	r2, r3
 8006eea:	2320      	movs	r3, #32
 8006eec:	6093      	str	r3, [r2, #8]
 8006eee:	e0bc      	b.n	800706a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	f040 80b7 	bne.w	800706a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	4a5d      	ldr	r2, [pc, #372]	; (8007074 <PCD_EP_OutXfrComplete_int+0x210>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d90f      	bls.n	8006f24 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d00a      	beq.n	8006f24 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	015a      	lsls	r2, r3, #5
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	4413      	add	r3, r2
 8006f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f20:	6093      	str	r3, [r2, #8]
 8006f22:	e0a2      	b.n	800706a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8006f24:	6879      	ldr	r1, [r7, #4]
 8006f26:	683a      	ldr	r2, [r7, #0]
 8006f28:	4613      	mov	r3, r2
 8006f2a:	00db      	lsls	r3, r3, #3
 8006f2c:	1a9b      	subs	r3, r3, r2
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	440b      	add	r3, r1
 8006f32:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006f36:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	0159      	lsls	r1, r3, #5
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	440b      	add	r3, r1
 8006f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f44:	691b      	ldr	r3, [r3, #16]
 8006f46:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8006f4a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	683a      	ldr	r2, [r7, #0]
 8006f50:	4613      	mov	r3, r2
 8006f52:	00db      	lsls	r3, r3, #3
 8006f54:	1a9b      	subs	r3, r3, r2
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	4403      	add	r3, r0
 8006f5a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006f5e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8006f60:	6879      	ldr	r1, [r7, #4]
 8006f62:	683a      	ldr	r2, [r7, #0]
 8006f64:	4613      	mov	r3, r2
 8006f66:	00db      	lsls	r3, r3, #3
 8006f68:	1a9b      	subs	r3, r3, r2
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	440b      	add	r3, r1
 8006f6e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006f72:	6819      	ldr	r1, [r3, #0]
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	683a      	ldr	r2, [r7, #0]
 8006f78:	4613      	mov	r3, r2
 8006f7a:	00db      	lsls	r3, r3, #3
 8006f7c:	1a9b      	subs	r3, r3, r2
 8006f7e:	009b      	lsls	r3, r3, #2
 8006f80:	4403      	add	r3, r0
 8006f82:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4419      	add	r1, r3
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	683a      	ldr	r2, [r7, #0]
 8006f8e:	4613      	mov	r3, r2
 8006f90:	00db      	lsls	r3, r3, #3
 8006f92:	1a9b      	subs	r3, r3, r2
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	4403      	add	r3, r0
 8006f98:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006f9c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d114      	bne.n	8006fce <PCD_EP_OutXfrComplete_int+0x16a>
 8006fa4:	6879      	ldr	r1, [r7, #4]
 8006fa6:	683a      	ldr	r2, [r7, #0]
 8006fa8:	4613      	mov	r3, r2
 8006faa:	00db      	lsls	r3, r3, #3
 8006fac:	1a9b      	subs	r3, r3, r2
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	440b      	add	r3, r1
 8006fb2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d108      	bne.n	8006fce <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6818      	ldr	r0, [r3, #0]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	2101      	movs	r1, #1
 8006fca:	f004 f96b 	bl	800b2a4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	b2db      	uxtb	r3, r3
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f009 fa0d 	bl	80103f4 <HAL_PCD_DataOutStageCallback>
 8006fda:	e046      	b.n	800706a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	4a26      	ldr	r2, [pc, #152]	; (8007078 <PCD_EP_OutXfrComplete_int+0x214>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d124      	bne.n	800702e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00a      	beq.n	8007004 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	015a      	lsls	r2, r3, #5
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	4413      	add	r3, r2
 8006ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007000:	6093      	str	r3, [r2, #8]
 8007002:	e032      	b.n	800706a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	f003 0320 	and.w	r3, r3, #32
 800700a:	2b00      	cmp	r3, #0
 800700c:	d008      	beq.n	8007020 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	015a      	lsls	r2, r3, #5
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	4413      	add	r3, r2
 8007016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800701a:	461a      	mov	r2, r3
 800701c:	2320      	movs	r3, #32
 800701e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	b2db      	uxtb	r3, r3
 8007024:	4619      	mov	r1, r3
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f009 f9e4 	bl	80103f4 <HAL_PCD_DataOutStageCallback>
 800702c:	e01d      	b.n	800706a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d114      	bne.n	800705e <PCD_EP_OutXfrComplete_int+0x1fa>
 8007034:	6879      	ldr	r1, [r7, #4]
 8007036:	683a      	ldr	r2, [r7, #0]
 8007038:	4613      	mov	r3, r2
 800703a:	00db      	lsls	r3, r3, #3
 800703c:	1a9b      	subs	r3, r3, r2
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	440b      	add	r3, r1
 8007042:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d108      	bne.n	800705e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6818      	ldr	r0, [r3, #0]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007056:	461a      	mov	r2, r3
 8007058:	2100      	movs	r1, #0
 800705a:	f004 f923 	bl	800b2a4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	b2db      	uxtb	r3, r3
 8007062:	4619      	mov	r1, r3
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f009 f9c5 	bl	80103f4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800706a:	2300      	movs	r3, #0
}
 800706c:	4618      	mov	r0, r3
 800706e:	3718      	adds	r7, #24
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}
 8007074:	4f54300a 	.word	0x4f54300a
 8007078:	4f54310a 	.word	0x4f54310a

0800707c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b086      	sub	sp, #24
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	333c      	adds	r3, #60	; 0x3c
 8007094:	3304      	adds	r3, #4
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	015a      	lsls	r2, r3, #5
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	4413      	add	r3, r2
 80070a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	4a15      	ldr	r2, [pc, #84]	; (8007104 <PCD_EP_OutSetupPacket_int+0x88>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d90e      	bls.n	80070d0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d009      	beq.n	80070d0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	015a      	lsls	r2, r3, #5
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	4413      	add	r3, r2
 80070c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070c8:	461a      	mov	r2, r3
 80070ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070ce:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f009 f97d 	bl	80103d0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	4a0a      	ldr	r2, [pc, #40]	; (8007104 <PCD_EP_OutSetupPacket_int+0x88>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d90c      	bls.n	80070f8 <PCD_EP_OutSetupPacket_int+0x7c>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	691b      	ldr	r3, [r3, #16]
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d108      	bne.n	80070f8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6818      	ldr	r0, [r3, #0]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80070f0:	461a      	mov	r2, r3
 80070f2:	2101      	movs	r1, #1
 80070f4:	f004 f8d6 	bl	800b2a4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80070f8:	2300      	movs	r3, #0
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3718      	adds	r7, #24
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
 8007102:	bf00      	nop
 8007104:	4f54300a 	.word	0x4f54300a

08007108 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007108:	b480      	push	{r7}
 800710a:	b085      	sub	sp, #20
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	460b      	mov	r3, r1
 8007112:	70fb      	strb	r3, [r7, #3]
 8007114:	4613      	mov	r3, r2
 8007116:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007120:	78fb      	ldrb	r3, [r7, #3]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d107      	bne.n	8007136 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007126:	883b      	ldrh	r3, [r7, #0]
 8007128:	0419      	lsls	r1, r3, #16
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	68ba      	ldr	r2, [r7, #8]
 8007130:	430a      	orrs	r2, r1
 8007132:	629a      	str	r2, [r3, #40]	; 0x28
 8007134:	e028      	b.n	8007188 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800713c:	0c1b      	lsrs	r3, r3, #16
 800713e:	68ba      	ldr	r2, [r7, #8]
 8007140:	4413      	add	r3, r2
 8007142:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007144:	2300      	movs	r3, #0
 8007146:	73fb      	strb	r3, [r7, #15]
 8007148:	e00d      	b.n	8007166 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	7bfb      	ldrb	r3, [r7, #15]
 8007150:	3340      	adds	r3, #64	; 0x40
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	4413      	add	r3, r2
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	0c1b      	lsrs	r3, r3, #16
 800715a:	68ba      	ldr	r2, [r7, #8]
 800715c:	4413      	add	r3, r2
 800715e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007160:	7bfb      	ldrb	r3, [r7, #15]
 8007162:	3301      	adds	r3, #1
 8007164:	73fb      	strb	r3, [r7, #15]
 8007166:	7bfa      	ldrb	r2, [r7, #15]
 8007168:	78fb      	ldrb	r3, [r7, #3]
 800716a:	3b01      	subs	r3, #1
 800716c:	429a      	cmp	r2, r3
 800716e:	d3ec      	bcc.n	800714a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007170:	883b      	ldrh	r3, [r7, #0]
 8007172:	0418      	lsls	r0, r3, #16
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6819      	ldr	r1, [r3, #0]
 8007178:	78fb      	ldrb	r3, [r7, #3]
 800717a:	3b01      	subs	r3, #1
 800717c:	68ba      	ldr	r2, [r7, #8]
 800717e:	4302      	orrs	r2, r0
 8007180:	3340      	adds	r3, #64	; 0x40
 8007182:	009b      	lsls	r3, r3, #2
 8007184:	440b      	add	r3, r1
 8007186:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	3714      	adds	r7, #20
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr

08007196 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007196:	b480      	push	{r7}
 8007198:	b083      	sub	sp, #12
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
 800719e:	460b      	mov	r3, r1
 80071a0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	887a      	ldrh	r2, [r7, #2]
 80071a8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80071aa:	2300      	movs	r3, #0
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	370c      	adds	r7, #12
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr

080071b8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b083      	sub	sp, #12
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	460b      	mov	r3, r1
 80071c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80071c4:	bf00      	nop
 80071c6:	370c      	adds	r7, #12
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b086      	sub	sp, #24
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d101      	bne.n	80071e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80071de:	2301      	movs	r3, #1
 80071e0:	e25b      	b.n	800769a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f003 0301 	and.w	r3, r3, #1
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d075      	beq.n	80072da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80071ee:	4ba3      	ldr	r3, [pc, #652]	; (800747c <HAL_RCC_OscConfig+0x2ac>)
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	f003 030c 	and.w	r3, r3, #12
 80071f6:	2b04      	cmp	r3, #4
 80071f8:	d00c      	beq.n	8007214 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80071fa:	4ba0      	ldr	r3, [pc, #640]	; (800747c <HAL_RCC_OscConfig+0x2ac>)
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007202:	2b08      	cmp	r3, #8
 8007204:	d112      	bne.n	800722c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007206:	4b9d      	ldr	r3, [pc, #628]	; (800747c <HAL_RCC_OscConfig+0x2ac>)
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800720e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007212:	d10b      	bne.n	800722c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007214:	4b99      	ldr	r3, [pc, #612]	; (800747c <HAL_RCC_OscConfig+0x2ac>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800721c:	2b00      	cmp	r3, #0
 800721e:	d05b      	beq.n	80072d8 <HAL_RCC_OscConfig+0x108>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d157      	bne.n	80072d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	e236      	b.n	800769a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007234:	d106      	bne.n	8007244 <HAL_RCC_OscConfig+0x74>
 8007236:	4b91      	ldr	r3, [pc, #580]	; (800747c <HAL_RCC_OscConfig+0x2ac>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a90      	ldr	r2, [pc, #576]	; (800747c <HAL_RCC_OscConfig+0x2ac>)
 800723c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007240:	6013      	str	r3, [r2, #0]
 8007242:	e01d      	b.n	8007280 <HAL_RCC_OscConfig+0xb0>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800724c:	d10c      	bne.n	8007268 <HAL_RCC_OscConfig+0x98>
 800724e:	4b8b      	ldr	r3, [pc, #556]	; (800747c <HAL_RCC_OscConfig+0x2ac>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a8a      	ldr	r2, [pc, #552]	; (800747c <HAL_RCC_OscConfig+0x2ac>)
 8007254:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007258:	6013      	str	r3, [r2, #0]
 800725a:	4b88      	ldr	r3, [pc, #544]	; (800747c <HAL_RCC_OscConfig+0x2ac>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a87      	ldr	r2, [pc, #540]	; (800747c <HAL_RCC_OscConfig+0x2ac>)
 8007260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007264:	6013      	str	r3, [r2, #0]
 8007266:	e00b      	b.n	8007280 <HAL_RCC_OscConfig+0xb0>
 8007268:	4b84      	ldr	r3, [pc, #528]	; (800747c <HAL_RCC_OscConfig+0x2ac>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a83      	ldr	r2, [pc, #524]	; (800747c <HAL_RCC_OscConfig+0x2ac>)
 800726e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007272:	6013      	str	r3, [r2, #0]
 8007274:	4b81      	ldr	r3, [pc, #516]	; (800747c <HAL_RCC_OscConfig+0x2ac>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a80      	ldr	r2, [pc, #512]	; (800747c <HAL_RCC_OscConfig+0x2ac>)
 800727a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800727e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d013      	beq.n	80072b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007288:	f7fa fda2 	bl	8001dd0 <HAL_GetTick>
 800728c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800728e:	e008      	b.n	80072a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007290:	f7fa fd9e 	bl	8001dd0 <HAL_GetTick>
 8007294:	4602      	mov	r2, r0
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	1ad3      	subs	r3, r2, r3
 800729a:	2b64      	cmp	r3, #100	; 0x64
 800729c:	d901      	bls.n	80072a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800729e:	2303      	movs	r3, #3
 80072a0:	e1fb      	b.n	800769a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072a2:	4b76      	ldr	r3, [pc, #472]	; (800747c <HAL_RCC_OscConfig+0x2ac>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d0f0      	beq.n	8007290 <HAL_RCC_OscConfig+0xc0>
 80072ae:	e014      	b.n	80072da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072b0:	f7fa fd8e 	bl	8001dd0 <HAL_GetTick>
 80072b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80072b6:	e008      	b.n	80072ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80072b8:	f7fa fd8a 	bl	8001dd0 <HAL_GetTick>
 80072bc:	4602      	mov	r2, r0
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	1ad3      	subs	r3, r2, r3
 80072c2:	2b64      	cmp	r3, #100	; 0x64
 80072c4:	d901      	bls.n	80072ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80072c6:	2303      	movs	r3, #3
 80072c8:	e1e7      	b.n	800769a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80072ca:	4b6c      	ldr	r3, [pc, #432]	; (800747c <HAL_RCC_OscConfig+0x2ac>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d1f0      	bne.n	80072b8 <HAL_RCC_OscConfig+0xe8>
 80072d6:	e000      	b.n	80072da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f003 0302 	and.w	r3, r3, #2
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d063      	beq.n	80073ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80072e6:	4b65      	ldr	r3, [pc, #404]	; (800747c <HAL_RCC_OscConfig+0x2ac>)
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	f003 030c 	and.w	r3, r3, #12
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d00b      	beq.n	800730a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80072f2:	4b62      	ldr	r3, [pc, #392]	; (800747c <HAL_RCC_OscConfig+0x2ac>)
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80072fa:	2b08      	cmp	r3, #8
 80072fc:	d11c      	bne.n	8007338 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80072fe:	4b5f      	ldr	r3, [pc, #380]	; (800747c <HAL_RCC_OscConfig+0x2ac>)
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007306:	2b00      	cmp	r3, #0
 8007308:	d116      	bne.n	8007338 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800730a:	4b5c      	ldr	r3, [pc, #368]	; (800747c <HAL_RCC_OscConfig+0x2ac>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f003 0302 	and.w	r3, r3, #2
 8007312:	2b00      	cmp	r3, #0
 8007314:	d005      	beq.n	8007322 <HAL_RCC_OscConfig+0x152>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	68db      	ldr	r3, [r3, #12]
 800731a:	2b01      	cmp	r3, #1
 800731c:	d001      	beq.n	8007322 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800731e:	2301      	movs	r3, #1
 8007320:	e1bb      	b.n	800769a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007322:	4b56      	ldr	r3, [pc, #344]	; (800747c <HAL_RCC_OscConfig+0x2ac>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	00db      	lsls	r3, r3, #3
 8007330:	4952      	ldr	r1, [pc, #328]	; (800747c <HAL_RCC_OscConfig+0x2ac>)
 8007332:	4313      	orrs	r3, r2
 8007334:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007336:	e03a      	b.n	80073ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d020      	beq.n	8007382 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007340:	4b4f      	ldr	r3, [pc, #316]	; (8007480 <HAL_RCC_OscConfig+0x2b0>)
 8007342:	2201      	movs	r2, #1
 8007344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007346:	f7fa fd43 	bl	8001dd0 <HAL_GetTick>
 800734a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800734c:	e008      	b.n	8007360 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800734e:	f7fa fd3f 	bl	8001dd0 <HAL_GetTick>
 8007352:	4602      	mov	r2, r0
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	1ad3      	subs	r3, r2, r3
 8007358:	2b02      	cmp	r3, #2
 800735a:	d901      	bls.n	8007360 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800735c:	2303      	movs	r3, #3
 800735e:	e19c      	b.n	800769a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007360:	4b46      	ldr	r3, [pc, #280]	; (800747c <HAL_RCC_OscConfig+0x2ac>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f003 0302 	and.w	r3, r3, #2
 8007368:	2b00      	cmp	r3, #0
 800736a:	d0f0      	beq.n	800734e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800736c:	4b43      	ldr	r3, [pc, #268]	; (800747c <HAL_RCC_OscConfig+0x2ac>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	691b      	ldr	r3, [r3, #16]
 8007378:	00db      	lsls	r3, r3, #3
 800737a:	4940      	ldr	r1, [pc, #256]	; (800747c <HAL_RCC_OscConfig+0x2ac>)
 800737c:	4313      	orrs	r3, r2
 800737e:	600b      	str	r3, [r1, #0]
 8007380:	e015      	b.n	80073ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007382:	4b3f      	ldr	r3, [pc, #252]	; (8007480 <HAL_RCC_OscConfig+0x2b0>)
 8007384:	2200      	movs	r2, #0
 8007386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007388:	f7fa fd22 	bl	8001dd0 <HAL_GetTick>
 800738c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800738e:	e008      	b.n	80073a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007390:	f7fa fd1e 	bl	8001dd0 <HAL_GetTick>
 8007394:	4602      	mov	r2, r0
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	1ad3      	subs	r3, r2, r3
 800739a:	2b02      	cmp	r3, #2
 800739c:	d901      	bls.n	80073a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800739e:	2303      	movs	r3, #3
 80073a0:	e17b      	b.n	800769a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80073a2:	4b36      	ldr	r3, [pc, #216]	; (800747c <HAL_RCC_OscConfig+0x2ac>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f003 0302 	and.w	r3, r3, #2
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d1f0      	bne.n	8007390 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f003 0308 	and.w	r3, r3, #8
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d030      	beq.n	800741c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	695b      	ldr	r3, [r3, #20]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d016      	beq.n	80073f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80073c2:	4b30      	ldr	r3, [pc, #192]	; (8007484 <HAL_RCC_OscConfig+0x2b4>)
 80073c4:	2201      	movs	r2, #1
 80073c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073c8:	f7fa fd02 	bl	8001dd0 <HAL_GetTick>
 80073cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80073ce:	e008      	b.n	80073e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80073d0:	f7fa fcfe 	bl	8001dd0 <HAL_GetTick>
 80073d4:	4602      	mov	r2, r0
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	1ad3      	subs	r3, r2, r3
 80073da:	2b02      	cmp	r3, #2
 80073dc:	d901      	bls.n	80073e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80073de:	2303      	movs	r3, #3
 80073e0:	e15b      	b.n	800769a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80073e2:	4b26      	ldr	r3, [pc, #152]	; (800747c <HAL_RCC_OscConfig+0x2ac>)
 80073e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073e6:	f003 0302 	and.w	r3, r3, #2
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d0f0      	beq.n	80073d0 <HAL_RCC_OscConfig+0x200>
 80073ee:	e015      	b.n	800741c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80073f0:	4b24      	ldr	r3, [pc, #144]	; (8007484 <HAL_RCC_OscConfig+0x2b4>)
 80073f2:	2200      	movs	r2, #0
 80073f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80073f6:	f7fa fceb 	bl	8001dd0 <HAL_GetTick>
 80073fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80073fc:	e008      	b.n	8007410 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80073fe:	f7fa fce7 	bl	8001dd0 <HAL_GetTick>
 8007402:	4602      	mov	r2, r0
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	1ad3      	subs	r3, r2, r3
 8007408:	2b02      	cmp	r3, #2
 800740a:	d901      	bls.n	8007410 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800740c:	2303      	movs	r3, #3
 800740e:	e144      	b.n	800769a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007410:	4b1a      	ldr	r3, [pc, #104]	; (800747c <HAL_RCC_OscConfig+0x2ac>)
 8007412:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007414:	f003 0302 	and.w	r3, r3, #2
 8007418:	2b00      	cmp	r3, #0
 800741a:	d1f0      	bne.n	80073fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f003 0304 	and.w	r3, r3, #4
 8007424:	2b00      	cmp	r3, #0
 8007426:	f000 80a0 	beq.w	800756a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800742a:	2300      	movs	r3, #0
 800742c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800742e:	4b13      	ldr	r3, [pc, #76]	; (800747c <HAL_RCC_OscConfig+0x2ac>)
 8007430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007436:	2b00      	cmp	r3, #0
 8007438:	d10f      	bne.n	800745a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800743a:	2300      	movs	r3, #0
 800743c:	60bb      	str	r3, [r7, #8]
 800743e:	4b0f      	ldr	r3, [pc, #60]	; (800747c <HAL_RCC_OscConfig+0x2ac>)
 8007440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007442:	4a0e      	ldr	r2, [pc, #56]	; (800747c <HAL_RCC_OscConfig+0x2ac>)
 8007444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007448:	6413      	str	r3, [r2, #64]	; 0x40
 800744a:	4b0c      	ldr	r3, [pc, #48]	; (800747c <HAL_RCC_OscConfig+0x2ac>)
 800744c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007452:	60bb      	str	r3, [r7, #8]
 8007454:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007456:	2301      	movs	r3, #1
 8007458:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800745a:	4b0b      	ldr	r3, [pc, #44]	; (8007488 <HAL_RCC_OscConfig+0x2b8>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007462:	2b00      	cmp	r3, #0
 8007464:	d121      	bne.n	80074aa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007466:	4b08      	ldr	r3, [pc, #32]	; (8007488 <HAL_RCC_OscConfig+0x2b8>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a07      	ldr	r2, [pc, #28]	; (8007488 <HAL_RCC_OscConfig+0x2b8>)
 800746c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007470:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007472:	f7fa fcad 	bl	8001dd0 <HAL_GetTick>
 8007476:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007478:	e011      	b.n	800749e <HAL_RCC_OscConfig+0x2ce>
 800747a:	bf00      	nop
 800747c:	40023800 	.word	0x40023800
 8007480:	42470000 	.word	0x42470000
 8007484:	42470e80 	.word	0x42470e80
 8007488:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800748c:	f7fa fca0 	bl	8001dd0 <HAL_GetTick>
 8007490:	4602      	mov	r2, r0
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	1ad3      	subs	r3, r2, r3
 8007496:	2b02      	cmp	r3, #2
 8007498:	d901      	bls.n	800749e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800749a:	2303      	movs	r3, #3
 800749c:	e0fd      	b.n	800769a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800749e:	4b81      	ldr	r3, [pc, #516]	; (80076a4 <HAL_RCC_OscConfig+0x4d4>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d0f0      	beq.n	800748c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d106      	bne.n	80074c0 <HAL_RCC_OscConfig+0x2f0>
 80074b2:	4b7d      	ldr	r3, [pc, #500]	; (80076a8 <HAL_RCC_OscConfig+0x4d8>)
 80074b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074b6:	4a7c      	ldr	r2, [pc, #496]	; (80076a8 <HAL_RCC_OscConfig+0x4d8>)
 80074b8:	f043 0301 	orr.w	r3, r3, #1
 80074bc:	6713      	str	r3, [r2, #112]	; 0x70
 80074be:	e01c      	b.n	80074fa <HAL_RCC_OscConfig+0x32a>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	2b05      	cmp	r3, #5
 80074c6:	d10c      	bne.n	80074e2 <HAL_RCC_OscConfig+0x312>
 80074c8:	4b77      	ldr	r3, [pc, #476]	; (80076a8 <HAL_RCC_OscConfig+0x4d8>)
 80074ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074cc:	4a76      	ldr	r2, [pc, #472]	; (80076a8 <HAL_RCC_OscConfig+0x4d8>)
 80074ce:	f043 0304 	orr.w	r3, r3, #4
 80074d2:	6713      	str	r3, [r2, #112]	; 0x70
 80074d4:	4b74      	ldr	r3, [pc, #464]	; (80076a8 <HAL_RCC_OscConfig+0x4d8>)
 80074d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074d8:	4a73      	ldr	r2, [pc, #460]	; (80076a8 <HAL_RCC_OscConfig+0x4d8>)
 80074da:	f043 0301 	orr.w	r3, r3, #1
 80074de:	6713      	str	r3, [r2, #112]	; 0x70
 80074e0:	e00b      	b.n	80074fa <HAL_RCC_OscConfig+0x32a>
 80074e2:	4b71      	ldr	r3, [pc, #452]	; (80076a8 <HAL_RCC_OscConfig+0x4d8>)
 80074e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074e6:	4a70      	ldr	r2, [pc, #448]	; (80076a8 <HAL_RCC_OscConfig+0x4d8>)
 80074e8:	f023 0301 	bic.w	r3, r3, #1
 80074ec:	6713      	str	r3, [r2, #112]	; 0x70
 80074ee:	4b6e      	ldr	r3, [pc, #440]	; (80076a8 <HAL_RCC_OscConfig+0x4d8>)
 80074f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074f2:	4a6d      	ldr	r2, [pc, #436]	; (80076a8 <HAL_RCC_OscConfig+0x4d8>)
 80074f4:	f023 0304 	bic.w	r3, r3, #4
 80074f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d015      	beq.n	800752e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007502:	f7fa fc65 	bl	8001dd0 <HAL_GetTick>
 8007506:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007508:	e00a      	b.n	8007520 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800750a:	f7fa fc61 	bl	8001dd0 <HAL_GetTick>
 800750e:	4602      	mov	r2, r0
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	1ad3      	subs	r3, r2, r3
 8007514:	f241 3288 	movw	r2, #5000	; 0x1388
 8007518:	4293      	cmp	r3, r2
 800751a:	d901      	bls.n	8007520 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800751c:	2303      	movs	r3, #3
 800751e:	e0bc      	b.n	800769a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007520:	4b61      	ldr	r3, [pc, #388]	; (80076a8 <HAL_RCC_OscConfig+0x4d8>)
 8007522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007524:	f003 0302 	and.w	r3, r3, #2
 8007528:	2b00      	cmp	r3, #0
 800752a:	d0ee      	beq.n	800750a <HAL_RCC_OscConfig+0x33a>
 800752c:	e014      	b.n	8007558 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800752e:	f7fa fc4f 	bl	8001dd0 <HAL_GetTick>
 8007532:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007534:	e00a      	b.n	800754c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007536:	f7fa fc4b 	bl	8001dd0 <HAL_GetTick>
 800753a:	4602      	mov	r2, r0
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	1ad3      	subs	r3, r2, r3
 8007540:	f241 3288 	movw	r2, #5000	; 0x1388
 8007544:	4293      	cmp	r3, r2
 8007546:	d901      	bls.n	800754c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007548:	2303      	movs	r3, #3
 800754a:	e0a6      	b.n	800769a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800754c:	4b56      	ldr	r3, [pc, #344]	; (80076a8 <HAL_RCC_OscConfig+0x4d8>)
 800754e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007550:	f003 0302 	and.w	r3, r3, #2
 8007554:	2b00      	cmp	r3, #0
 8007556:	d1ee      	bne.n	8007536 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007558:	7dfb      	ldrb	r3, [r7, #23]
 800755a:	2b01      	cmp	r3, #1
 800755c:	d105      	bne.n	800756a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800755e:	4b52      	ldr	r3, [pc, #328]	; (80076a8 <HAL_RCC_OscConfig+0x4d8>)
 8007560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007562:	4a51      	ldr	r2, [pc, #324]	; (80076a8 <HAL_RCC_OscConfig+0x4d8>)
 8007564:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007568:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	699b      	ldr	r3, [r3, #24]
 800756e:	2b00      	cmp	r3, #0
 8007570:	f000 8092 	beq.w	8007698 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007574:	4b4c      	ldr	r3, [pc, #304]	; (80076a8 <HAL_RCC_OscConfig+0x4d8>)
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	f003 030c 	and.w	r3, r3, #12
 800757c:	2b08      	cmp	r3, #8
 800757e:	d05c      	beq.n	800763a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	699b      	ldr	r3, [r3, #24]
 8007584:	2b02      	cmp	r3, #2
 8007586:	d141      	bne.n	800760c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007588:	4b48      	ldr	r3, [pc, #288]	; (80076ac <HAL_RCC_OscConfig+0x4dc>)
 800758a:	2200      	movs	r2, #0
 800758c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800758e:	f7fa fc1f 	bl	8001dd0 <HAL_GetTick>
 8007592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007594:	e008      	b.n	80075a8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007596:	f7fa fc1b 	bl	8001dd0 <HAL_GetTick>
 800759a:	4602      	mov	r2, r0
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	1ad3      	subs	r3, r2, r3
 80075a0:	2b02      	cmp	r3, #2
 80075a2:	d901      	bls.n	80075a8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80075a4:	2303      	movs	r3, #3
 80075a6:	e078      	b.n	800769a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075a8:	4b3f      	ldr	r3, [pc, #252]	; (80076a8 <HAL_RCC_OscConfig+0x4d8>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d1f0      	bne.n	8007596 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	69da      	ldr	r2, [r3, #28]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6a1b      	ldr	r3, [r3, #32]
 80075bc:	431a      	orrs	r2, r3
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c2:	019b      	lsls	r3, r3, #6
 80075c4:	431a      	orrs	r2, r3
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ca:	085b      	lsrs	r3, r3, #1
 80075cc:	3b01      	subs	r3, #1
 80075ce:	041b      	lsls	r3, r3, #16
 80075d0:	431a      	orrs	r2, r3
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d6:	061b      	lsls	r3, r3, #24
 80075d8:	4933      	ldr	r1, [pc, #204]	; (80076a8 <HAL_RCC_OscConfig+0x4d8>)
 80075da:	4313      	orrs	r3, r2
 80075dc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80075de:	4b33      	ldr	r3, [pc, #204]	; (80076ac <HAL_RCC_OscConfig+0x4dc>)
 80075e0:	2201      	movs	r2, #1
 80075e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075e4:	f7fa fbf4 	bl	8001dd0 <HAL_GetTick>
 80075e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075ea:	e008      	b.n	80075fe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80075ec:	f7fa fbf0 	bl	8001dd0 <HAL_GetTick>
 80075f0:	4602      	mov	r2, r0
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	1ad3      	subs	r3, r2, r3
 80075f6:	2b02      	cmp	r3, #2
 80075f8:	d901      	bls.n	80075fe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80075fa:	2303      	movs	r3, #3
 80075fc:	e04d      	b.n	800769a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075fe:	4b2a      	ldr	r3, [pc, #168]	; (80076a8 <HAL_RCC_OscConfig+0x4d8>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007606:	2b00      	cmp	r3, #0
 8007608:	d0f0      	beq.n	80075ec <HAL_RCC_OscConfig+0x41c>
 800760a:	e045      	b.n	8007698 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800760c:	4b27      	ldr	r3, [pc, #156]	; (80076ac <HAL_RCC_OscConfig+0x4dc>)
 800760e:	2200      	movs	r2, #0
 8007610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007612:	f7fa fbdd 	bl	8001dd0 <HAL_GetTick>
 8007616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007618:	e008      	b.n	800762c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800761a:	f7fa fbd9 	bl	8001dd0 <HAL_GetTick>
 800761e:	4602      	mov	r2, r0
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	1ad3      	subs	r3, r2, r3
 8007624:	2b02      	cmp	r3, #2
 8007626:	d901      	bls.n	800762c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007628:	2303      	movs	r3, #3
 800762a:	e036      	b.n	800769a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800762c:	4b1e      	ldr	r3, [pc, #120]	; (80076a8 <HAL_RCC_OscConfig+0x4d8>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007634:	2b00      	cmp	r3, #0
 8007636:	d1f0      	bne.n	800761a <HAL_RCC_OscConfig+0x44a>
 8007638:	e02e      	b.n	8007698 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	699b      	ldr	r3, [r3, #24]
 800763e:	2b01      	cmp	r3, #1
 8007640:	d101      	bne.n	8007646 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007642:	2301      	movs	r3, #1
 8007644:	e029      	b.n	800769a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007646:	4b18      	ldr	r3, [pc, #96]	; (80076a8 <HAL_RCC_OscConfig+0x4d8>)
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	69db      	ldr	r3, [r3, #28]
 8007656:	429a      	cmp	r2, r3
 8007658:	d11c      	bne.n	8007694 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007664:	429a      	cmp	r2, r3
 8007666:	d115      	bne.n	8007694 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007668:	68fa      	ldr	r2, [r7, #12]
 800766a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800766e:	4013      	ands	r3, r2
 8007670:	687a      	ldr	r2, [r7, #4]
 8007672:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007674:	4293      	cmp	r3, r2
 8007676:	d10d      	bne.n	8007694 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007682:	429a      	cmp	r2, r3
 8007684:	d106      	bne.n	8007694 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007690:	429a      	cmp	r2, r3
 8007692:	d001      	beq.n	8007698 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	e000      	b.n	800769a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8007698:	2300      	movs	r3, #0
}
 800769a:	4618      	mov	r0, r3
 800769c:	3718      	adds	r7, #24
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
 80076a2:	bf00      	nop
 80076a4:	40007000 	.word	0x40007000
 80076a8:	40023800 	.word	0x40023800
 80076ac:	42470060 	.word	0x42470060

080076b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d101      	bne.n	80076c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80076c0:	2301      	movs	r3, #1
 80076c2:	e0cc      	b.n	800785e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80076c4:	4b68      	ldr	r3, [pc, #416]	; (8007868 <HAL_RCC_ClockConfig+0x1b8>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f003 030f 	and.w	r3, r3, #15
 80076cc:	683a      	ldr	r2, [r7, #0]
 80076ce:	429a      	cmp	r2, r3
 80076d0:	d90c      	bls.n	80076ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076d2:	4b65      	ldr	r3, [pc, #404]	; (8007868 <HAL_RCC_ClockConfig+0x1b8>)
 80076d4:	683a      	ldr	r2, [r7, #0]
 80076d6:	b2d2      	uxtb	r2, r2
 80076d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80076da:	4b63      	ldr	r3, [pc, #396]	; (8007868 <HAL_RCC_ClockConfig+0x1b8>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f003 030f 	and.w	r3, r3, #15
 80076e2:	683a      	ldr	r2, [r7, #0]
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d001      	beq.n	80076ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80076e8:	2301      	movs	r3, #1
 80076ea:	e0b8      	b.n	800785e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f003 0302 	and.w	r3, r3, #2
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d020      	beq.n	800773a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f003 0304 	and.w	r3, r3, #4
 8007700:	2b00      	cmp	r3, #0
 8007702:	d005      	beq.n	8007710 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007704:	4b59      	ldr	r3, [pc, #356]	; (800786c <HAL_RCC_ClockConfig+0x1bc>)
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	4a58      	ldr	r2, [pc, #352]	; (800786c <HAL_RCC_ClockConfig+0x1bc>)
 800770a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800770e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f003 0308 	and.w	r3, r3, #8
 8007718:	2b00      	cmp	r3, #0
 800771a:	d005      	beq.n	8007728 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800771c:	4b53      	ldr	r3, [pc, #332]	; (800786c <HAL_RCC_ClockConfig+0x1bc>)
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	4a52      	ldr	r2, [pc, #328]	; (800786c <HAL_RCC_ClockConfig+0x1bc>)
 8007722:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007726:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007728:	4b50      	ldr	r3, [pc, #320]	; (800786c <HAL_RCC_ClockConfig+0x1bc>)
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	494d      	ldr	r1, [pc, #308]	; (800786c <HAL_RCC_ClockConfig+0x1bc>)
 8007736:	4313      	orrs	r3, r2
 8007738:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f003 0301 	and.w	r3, r3, #1
 8007742:	2b00      	cmp	r3, #0
 8007744:	d044      	beq.n	80077d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	2b01      	cmp	r3, #1
 800774c:	d107      	bne.n	800775e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800774e:	4b47      	ldr	r3, [pc, #284]	; (800786c <HAL_RCC_ClockConfig+0x1bc>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007756:	2b00      	cmp	r3, #0
 8007758:	d119      	bne.n	800778e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	e07f      	b.n	800785e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	2b02      	cmp	r3, #2
 8007764:	d003      	beq.n	800776e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800776a:	2b03      	cmp	r3, #3
 800776c:	d107      	bne.n	800777e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800776e:	4b3f      	ldr	r3, [pc, #252]	; (800786c <HAL_RCC_ClockConfig+0x1bc>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007776:	2b00      	cmp	r3, #0
 8007778:	d109      	bne.n	800778e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	e06f      	b.n	800785e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800777e:	4b3b      	ldr	r3, [pc, #236]	; (800786c <HAL_RCC_ClockConfig+0x1bc>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f003 0302 	and.w	r3, r3, #2
 8007786:	2b00      	cmp	r3, #0
 8007788:	d101      	bne.n	800778e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800778a:	2301      	movs	r3, #1
 800778c:	e067      	b.n	800785e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800778e:	4b37      	ldr	r3, [pc, #220]	; (800786c <HAL_RCC_ClockConfig+0x1bc>)
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	f023 0203 	bic.w	r2, r3, #3
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	4934      	ldr	r1, [pc, #208]	; (800786c <HAL_RCC_ClockConfig+0x1bc>)
 800779c:	4313      	orrs	r3, r2
 800779e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80077a0:	f7fa fb16 	bl	8001dd0 <HAL_GetTick>
 80077a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077a6:	e00a      	b.n	80077be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077a8:	f7fa fb12 	bl	8001dd0 <HAL_GetTick>
 80077ac:	4602      	mov	r2, r0
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	1ad3      	subs	r3, r2, r3
 80077b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d901      	bls.n	80077be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80077ba:	2303      	movs	r3, #3
 80077bc:	e04f      	b.n	800785e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077be:	4b2b      	ldr	r3, [pc, #172]	; (800786c <HAL_RCC_ClockConfig+0x1bc>)
 80077c0:	689b      	ldr	r3, [r3, #8]
 80077c2:	f003 020c 	and.w	r2, r3, #12
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d1eb      	bne.n	80077a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80077d0:	4b25      	ldr	r3, [pc, #148]	; (8007868 <HAL_RCC_ClockConfig+0x1b8>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f003 030f 	and.w	r3, r3, #15
 80077d8:	683a      	ldr	r2, [r7, #0]
 80077da:	429a      	cmp	r2, r3
 80077dc:	d20c      	bcs.n	80077f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077de:	4b22      	ldr	r3, [pc, #136]	; (8007868 <HAL_RCC_ClockConfig+0x1b8>)
 80077e0:	683a      	ldr	r2, [r7, #0]
 80077e2:	b2d2      	uxtb	r2, r2
 80077e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80077e6:	4b20      	ldr	r3, [pc, #128]	; (8007868 <HAL_RCC_ClockConfig+0x1b8>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f003 030f 	and.w	r3, r3, #15
 80077ee:	683a      	ldr	r2, [r7, #0]
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d001      	beq.n	80077f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80077f4:	2301      	movs	r3, #1
 80077f6:	e032      	b.n	800785e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f003 0304 	and.w	r3, r3, #4
 8007800:	2b00      	cmp	r3, #0
 8007802:	d008      	beq.n	8007816 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007804:	4b19      	ldr	r3, [pc, #100]	; (800786c <HAL_RCC_ClockConfig+0x1bc>)
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	4916      	ldr	r1, [pc, #88]	; (800786c <HAL_RCC_ClockConfig+0x1bc>)
 8007812:	4313      	orrs	r3, r2
 8007814:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f003 0308 	and.w	r3, r3, #8
 800781e:	2b00      	cmp	r3, #0
 8007820:	d009      	beq.n	8007836 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007822:	4b12      	ldr	r3, [pc, #72]	; (800786c <HAL_RCC_ClockConfig+0x1bc>)
 8007824:	689b      	ldr	r3, [r3, #8]
 8007826:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	691b      	ldr	r3, [r3, #16]
 800782e:	00db      	lsls	r3, r3, #3
 8007830:	490e      	ldr	r1, [pc, #56]	; (800786c <HAL_RCC_ClockConfig+0x1bc>)
 8007832:	4313      	orrs	r3, r2
 8007834:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007836:	f000 f821 	bl	800787c <HAL_RCC_GetSysClockFreq>
 800783a:	4601      	mov	r1, r0
 800783c:	4b0b      	ldr	r3, [pc, #44]	; (800786c <HAL_RCC_ClockConfig+0x1bc>)
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	091b      	lsrs	r3, r3, #4
 8007842:	f003 030f 	and.w	r3, r3, #15
 8007846:	4a0a      	ldr	r2, [pc, #40]	; (8007870 <HAL_RCC_ClockConfig+0x1c0>)
 8007848:	5cd3      	ldrb	r3, [r2, r3]
 800784a:	fa21 f303 	lsr.w	r3, r1, r3
 800784e:	4a09      	ldr	r2, [pc, #36]	; (8007874 <HAL_RCC_ClockConfig+0x1c4>)
 8007850:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007852:	4b09      	ldr	r3, [pc, #36]	; (8007878 <HAL_RCC_ClockConfig+0x1c8>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4618      	mov	r0, r3
 8007858:	f7fa f940 	bl	8001adc <HAL_InitTick>

  return HAL_OK;
 800785c:	2300      	movs	r3, #0
}
 800785e:	4618      	mov	r0, r3
 8007860:	3710      	adds	r7, #16
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop
 8007868:	40023c00 	.word	0x40023c00
 800786c:	40023800 	.word	0x40023800
 8007870:	08019d0c 	.word	0x08019d0c
 8007874:	20000000 	.word	0x20000000
 8007878:	20000004 	.word	0x20000004

0800787c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800787c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800787e:	b085      	sub	sp, #20
 8007880:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007882:	2300      	movs	r3, #0
 8007884:	607b      	str	r3, [r7, #4]
 8007886:	2300      	movs	r3, #0
 8007888:	60fb      	str	r3, [r7, #12]
 800788a:	2300      	movs	r3, #0
 800788c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800788e:	2300      	movs	r3, #0
 8007890:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007892:	4b63      	ldr	r3, [pc, #396]	; (8007a20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	f003 030c 	and.w	r3, r3, #12
 800789a:	2b04      	cmp	r3, #4
 800789c:	d007      	beq.n	80078ae <HAL_RCC_GetSysClockFreq+0x32>
 800789e:	2b08      	cmp	r3, #8
 80078a0:	d008      	beq.n	80078b4 <HAL_RCC_GetSysClockFreq+0x38>
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	f040 80b4 	bne.w	8007a10 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80078a8:	4b5e      	ldr	r3, [pc, #376]	; (8007a24 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80078aa:	60bb      	str	r3, [r7, #8]
       break;
 80078ac:	e0b3      	b.n	8007a16 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80078ae:	4b5e      	ldr	r3, [pc, #376]	; (8007a28 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80078b0:	60bb      	str	r3, [r7, #8]
      break;
 80078b2:	e0b0      	b.n	8007a16 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80078b4:	4b5a      	ldr	r3, [pc, #360]	; (8007a20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078bc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80078be:	4b58      	ldr	r3, [pc, #352]	; (8007a20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d04a      	beq.n	8007960 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80078ca:	4b55      	ldr	r3, [pc, #340]	; (8007a20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	099b      	lsrs	r3, r3, #6
 80078d0:	f04f 0400 	mov.w	r4, #0
 80078d4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80078d8:	f04f 0200 	mov.w	r2, #0
 80078dc:	ea03 0501 	and.w	r5, r3, r1
 80078e0:	ea04 0602 	and.w	r6, r4, r2
 80078e4:	4629      	mov	r1, r5
 80078e6:	4632      	mov	r2, r6
 80078e8:	f04f 0300 	mov.w	r3, #0
 80078ec:	f04f 0400 	mov.w	r4, #0
 80078f0:	0154      	lsls	r4, r2, #5
 80078f2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80078f6:	014b      	lsls	r3, r1, #5
 80078f8:	4619      	mov	r1, r3
 80078fa:	4622      	mov	r2, r4
 80078fc:	1b49      	subs	r1, r1, r5
 80078fe:	eb62 0206 	sbc.w	r2, r2, r6
 8007902:	f04f 0300 	mov.w	r3, #0
 8007906:	f04f 0400 	mov.w	r4, #0
 800790a:	0194      	lsls	r4, r2, #6
 800790c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007910:	018b      	lsls	r3, r1, #6
 8007912:	1a5b      	subs	r3, r3, r1
 8007914:	eb64 0402 	sbc.w	r4, r4, r2
 8007918:	f04f 0100 	mov.w	r1, #0
 800791c:	f04f 0200 	mov.w	r2, #0
 8007920:	00e2      	lsls	r2, r4, #3
 8007922:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007926:	00d9      	lsls	r1, r3, #3
 8007928:	460b      	mov	r3, r1
 800792a:	4614      	mov	r4, r2
 800792c:	195b      	adds	r3, r3, r5
 800792e:	eb44 0406 	adc.w	r4, r4, r6
 8007932:	f04f 0100 	mov.w	r1, #0
 8007936:	f04f 0200 	mov.w	r2, #0
 800793a:	0262      	lsls	r2, r4, #9
 800793c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8007940:	0259      	lsls	r1, r3, #9
 8007942:	460b      	mov	r3, r1
 8007944:	4614      	mov	r4, r2
 8007946:	4618      	mov	r0, r3
 8007948:	4621      	mov	r1, r4
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f04f 0400 	mov.w	r4, #0
 8007950:	461a      	mov	r2, r3
 8007952:	4623      	mov	r3, r4
 8007954:	f7f8 fc4e 	bl	80001f4 <__aeabi_uldivmod>
 8007958:	4603      	mov	r3, r0
 800795a:	460c      	mov	r4, r1
 800795c:	60fb      	str	r3, [r7, #12]
 800795e:	e049      	b.n	80079f4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007960:	4b2f      	ldr	r3, [pc, #188]	; (8007a20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	099b      	lsrs	r3, r3, #6
 8007966:	f04f 0400 	mov.w	r4, #0
 800796a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800796e:	f04f 0200 	mov.w	r2, #0
 8007972:	ea03 0501 	and.w	r5, r3, r1
 8007976:	ea04 0602 	and.w	r6, r4, r2
 800797a:	4629      	mov	r1, r5
 800797c:	4632      	mov	r2, r6
 800797e:	f04f 0300 	mov.w	r3, #0
 8007982:	f04f 0400 	mov.w	r4, #0
 8007986:	0154      	lsls	r4, r2, #5
 8007988:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800798c:	014b      	lsls	r3, r1, #5
 800798e:	4619      	mov	r1, r3
 8007990:	4622      	mov	r2, r4
 8007992:	1b49      	subs	r1, r1, r5
 8007994:	eb62 0206 	sbc.w	r2, r2, r6
 8007998:	f04f 0300 	mov.w	r3, #0
 800799c:	f04f 0400 	mov.w	r4, #0
 80079a0:	0194      	lsls	r4, r2, #6
 80079a2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80079a6:	018b      	lsls	r3, r1, #6
 80079a8:	1a5b      	subs	r3, r3, r1
 80079aa:	eb64 0402 	sbc.w	r4, r4, r2
 80079ae:	f04f 0100 	mov.w	r1, #0
 80079b2:	f04f 0200 	mov.w	r2, #0
 80079b6:	00e2      	lsls	r2, r4, #3
 80079b8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80079bc:	00d9      	lsls	r1, r3, #3
 80079be:	460b      	mov	r3, r1
 80079c0:	4614      	mov	r4, r2
 80079c2:	195b      	adds	r3, r3, r5
 80079c4:	eb44 0406 	adc.w	r4, r4, r6
 80079c8:	f04f 0100 	mov.w	r1, #0
 80079cc:	f04f 0200 	mov.w	r2, #0
 80079d0:	02a2      	lsls	r2, r4, #10
 80079d2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80079d6:	0299      	lsls	r1, r3, #10
 80079d8:	460b      	mov	r3, r1
 80079da:	4614      	mov	r4, r2
 80079dc:	4618      	mov	r0, r3
 80079de:	4621      	mov	r1, r4
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f04f 0400 	mov.w	r4, #0
 80079e6:	461a      	mov	r2, r3
 80079e8:	4623      	mov	r3, r4
 80079ea:	f7f8 fc03 	bl	80001f4 <__aeabi_uldivmod>
 80079ee:	4603      	mov	r3, r0
 80079f0:	460c      	mov	r4, r1
 80079f2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80079f4:	4b0a      	ldr	r3, [pc, #40]	; (8007a20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	0c1b      	lsrs	r3, r3, #16
 80079fa:	f003 0303 	and.w	r3, r3, #3
 80079fe:	3301      	adds	r3, #1
 8007a00:	005b      	lsls	r3, r3, #1
 8007a02:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007a04:	68fa      	ldr	r2, [r7, #12]
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a0c:	60bb      	str	r3, [r7, #8]
      break;
 8007a0e:	e002      	b.n	8007a16 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007a10:	4b04      	ldr	r3, [pc, #16]	; (8007a24 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007a12:	60bb      	str	r3, [r7, #8]
      break;
 8007a14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007a16:	68bb      	ldr	r3, [r7, #8]
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3714      	adds	r7, #20
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a20:	40023800 	.word	0x40023800
 8007a24:	00f42400 	.word	0x00f42400
 8007a28:	007a1200 	.word	0x007a1200

08007a2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007a30:	4b03      	ldr	r3, [pc, #12]	; (8007a40 <HAL_RCC_GetHCLKFreq+0x14>)
 8007a32:	681b      	ldr	r3, [r3, #0]
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	46bd      	mov	sp, r7
 8007a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3c:	4770      	bx	lr
 8007a3e:	bf00      	nop
 8007a40:	20000000 	.word	0x20000000

08007a44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007a48:	f7ff fff0 	bl	8007a2c <HAL_RCC_GetHCLKFreq>
 8007a4c:	4601      	mov	r1, r0
 8007a4e:	4b05      	ldr	r3, [pc, #20]	; (8007a64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	0a9b      	lsrs	r3, r3, #10
 8007a54:	f003 0307 	and.w	r3, r3, #7
 8007a58:	4a03      	ldr	r2, [pc, #12]	; (8007a68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a5a:	5cd3      	ldrb	r3, [r2, r3]
 8007a5c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	bd80      	pop	{r7, pc}
 8007a64:	40023800 	.word	0x40023800
 8007a68:	08019d1c 	.word	0x08019d1c

08007a6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007a70:	f7ff ffdc 	bl	8007a2c <HAL_RCC_GetHCLKFreq>
 8007a74:	4601      	mov	r1, r0
 8007a76:	4b05      	ldr	r3, [pc, #20]	; (8007a8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	0b5b      	lsrs	r3, r3, #13
 8007a7c:	f003 0307 	and.w	r3, r3, #7
 8007a80:	4a03      	ldr	r2, [pc, #12]	; (8007a90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007a82:	5cd3      	ldrb	r3, [r2, r3]
 8007a84:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	40023800 	.word	0x40023800
 8007a90:	08019d1c 	.word	0x08019d1c

08007a94 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b083      	sub	sp, #12
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	220f      	movs	r2, #15
 8007aa2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007aa4:	4b12      	ldr	r3, [pc, #72]	; (8007af0 <HAL_RCC_GetClockConfig+0x5c>)
 8007aa6:	689b      	ldr	r3, [r3, #8]
 8007aa8:	f003 0203 	and.w	r2, r3, #3
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007ab0:	4b0f      	ldr	r3, [pc, #60]	; (8007af0 <HAL_RCC_GetClockConfig+0x5c>)
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007abc:	4b0c      	ldr	r3, [pc, #48]	; (8007af0 <HAL_RCC_GetClockConfig+0x5c>)
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007ac8:	4b09      	ldr	r3, [pc, #36]	; (8007af0 <HAL_RCC_GetClockConfig+0x5c>)
 8007aca:	689b      	ldr	r3, [r3, #8]
 8007acc:	08db      	lsrs	r3, r3, #3
 8007ace:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007ad6:	4b07      	ldr	r3, [pc, #28]	; (8007af4 <HAL_RCC_GetClockConfig+0x60>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f003 020f 	and.w	r2, r3, #15
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	601a      	str	r2, [r3, #0]
}
 8007ae2:	bf00      	nop
 8007ae4:	370c      	adds	r7, #12
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aec:	4770      	bx	lr
 8007aee:	bf00      	nop
 8007af0:	40023800 	.word	0x40023800
 8007af4:	40023c00 	.word	0x40023c00

08007af8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b086      	sub	sp, #24
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007b00:	2300      	movs	r3, #0
 8007b02:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007b04:	2300      	movs	r3, #0
 8007b06:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f003 0301 	and.w	r3, r3, #1
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d105      	bne.n	8007b20 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d035      	beq.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007b20:	4b62      	ldr	r3, [pc, #392]	; (8007cac <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007b22:	2200      	movs	r2, #0
 8007b24:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007b26:	f7fa f953 	bl	8001dd0 <HAL_GetTick>
 8007b2a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007b2c:	e008      	b.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007b2e:	f7fa f94f 	bl	8001dd0 <HAL_GetTick>
 8007b32:	4602      	mov	r2, r0
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	1ad3      	subs	r3, r2, r3
 8007b38:	2b02      	cmp	r3, #2
 8007b3a:	d901      	bls.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007b3c:	2303      	movs	r3, #3
 8007b3e:	e0b0      	b.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007b40:	4b5b      	ldr	r3, [pc, #364]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d1f0      	bne.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	019a      	lsls	r2, r3, #6
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	071b      	lsls	r3, r3, #28
 8007b58:	4955      	ldr	r1, [pc, #340]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007b60:	4b52      	ldr	r3, [pc, #328]	; (8007cac <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007b62:	2201      	movs	r2, #1
 8007b64:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007b66:	f7fa f933 	bl	8001dd0 <HAL_GetTick>
 8007b6a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007b6c:	e008      	b.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007b6e:	f7fa f92f 	bl	8001dd0 <HAL_GetTick>
 8007b72:	4602      	mov	r2, r0
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	1ad3      	subs	r3, r2, r3
 8007b78:	2b02      	cmp	r3, #2
 8007b7a:	d901      	bls.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007b7c:	2303      	movs	r3, #3
 8007b7e:	e090      	b.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007b80:	4b4b      	ldr	r3, [pc, #300]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d0f0      	beq.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f003 0302 	and.w	r3, r3, #2
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	f000 8083 	beq.w	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	60fb      	str	r3, [r7, #12]
 8007b9e:	4b44      	ldr	r3, [pc, #272]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ba2:	4a43      	ldr	r2, [pc, #268]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8007baa:	4b41      	ldr	r3, [pc, #260]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bb2:	60fb      	str	r3, [r7, #12]
 8007bb4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007bb6:	4b3f      	ldr	r3, [pc, #252]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a3e      	ldr	r2, [pc, #248]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007bbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bc0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007bc2:	f7fa f905 	bl	8001dd0 <HAL_GetTick>
 8007bc6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007bc8:	e008      	b.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007bca:	f7fa f901 	bl	8001dd0 <HAL_GetTick>
 8007bce:	4602      	mov	r2, r0
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	1ad3      	subs	r3, r2, r3
 8007bd4:	2b02      	cmp	r3, #2
 8007bd6:	d901      	bls.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007bd8:	2303      	movs	r3, #3
 8007bda:	e062      	b.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007bdc:	4b35      	ldr	r3, [pc, #212]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d0f0      	beq.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007be8:	4b31      	ldr	r3, [pc, #196]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bf0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d02f      	beq.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	68db      	ldr	r3, [r3, #12]
 8007bfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c00:	693a      	ldr	r2, [r7, #16]
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d028      	beq.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007c06:	4b2a      	ldr	r3, [pc, #168]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c0e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007c10:	4b29      	ldr	r3, [pc, #164]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007c12:	2201      	movs	r2, #1
 8007c14:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007c16:	4b28      	ldr	r3, [pc, #160]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007c18:	2200      	movs	r2, #0
 8007c1a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007c1c:	4a24      	ldr	r2, [pc, #144]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007c22:	4b23      	ldr	r3, [pc, #140]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c26:	f003 0301 	and.w	r3, r3, #1
 8007c2a:	2b01      	cmp	r3, #1
 8007c2c:	d114      	bne.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007c2e:	f7fa f8cf 	bl	8001dd0 <HAL_GetTick>
 8007c32:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c34:	e00a      	b.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c36:	f7fa f8cb 	bl	8001dd0 <HAL_GetTick>
 8007c3a:	4602      	mov	r2, r0
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	1ad3      	subs	r3, r2, r3
 8007c40:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d901      	bls.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007c48:	2303      	movs	r3, #3
 8007c4a:	e02a      	b.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c4c:	4b18      	ldr	r3, [pc, #96]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c50:	f003 0302 	and.w	r3, r3, #2
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d0ee      	beq.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c64:	d10d      	bne.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007c66:	4b12      	ldr	r3, [pc, #72]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c68:	689b      	ldr	r3, [r3, #8]
 8007c6a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	68db      	ldr	r3, [r3, #12]
 8007c72:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007c76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c7a:	490d      	ldr	r1, [pc, #52]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	608b      	str	r3, [r1, #8]
 8007c80:	e005      	b.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007c82:	4b0b      	ldr	r3, [pc, #44]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c84:	689b      	ldr	r3, [r3, #8]
 8007c86:	4a0a      	ldr	r2, [pc, #40]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c88:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007c8c:	6093      	str	r3, [r2, #8]
 8007c8e:	4b08      	ldr	r3, [pc, #32]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c90:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	68db      	ldr	r3, [r3, #12]
 8007c96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c9a:	4905      	ldr	r1, [pc, #20]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007ca0:	2300      	movs	r3, #0
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3718      	adds	r7, #24
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
 8007caa:	bf00      	nop
 8007cac:	42470068 	.word	0x42470068
 8007cb0:	40023800 	.word	0x40023800
 8007cb4:	40007000 	.word	0x40007000
 8007cb8:	42470e40 	.word	0x42470e40

08007cbc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b082      	sub	sp, #8
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d101      	bne.n	8007cce <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	e083      	b.n	8007dd6 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	7f5b      	ldrb	r3, [r3, #29]
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d105      	bne.n	8007ce4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f7f9 fd00 	bl	80016e4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2202      	movs	r2, #2
 8007ce8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	22ca      	movs	r2, #202	; 0xca
 8007cf0:	625a      	str	r2, [r3, #36]	; 0x24
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	2253      	movs	r2, #83	; 0x53
 8007cf8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f000 f897 	bl	8007e2e <RTC_EnterInitMode>
 8007d00:	4603      	mov	r3, r0
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d008      	beq.n	8007d18 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	22ff      	movs	r2, #255	; 0xff
 8007d0c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2204      	movs	r2, #4
 8007d12:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8007d14:	2301      	movs	r3, #1
 8007d16:	e05e      	b.n	8007dd6 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	687a      	ldr	r2, [r7, #4]
 8007d20:	6812      	ldr	r2, [r2, #0]
 8007d22:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007d26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d2a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	6899      	ldr	r1, [r3, #8]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	685a      	ldr	r2, [r3, #4]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	691b      	ldr	r3, [r3, #16]
 8007d3a:	431a      	orrs	r2, r3
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	695b      	ldr	r3, [r3, #20]
 8007d40:	431a      	orrs	r2, r3
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	430a      	orrs	r2, r1
 8007d48:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	68d2      	ldr	r2, [r2, #12]
 8007d52:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	6919      	ldr	r1, [r3, #16]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	041a      	lsls	r2, r3, #16
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	430a      	orrs	r2, r1
 8007d66:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	68da      	ldr	r2, [r3, #12]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d76:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	f003 0320 	and.w	r3, r3, #32
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d10e      	bne.n	8007da4 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 f829 	bl	8007dde <HAL_RTC_WaitForSynchro>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d008      	beq.n	8007da4 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	22ff      	movs	r2, #255	; 0xff
 8007d98:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2204      	movs	r2, #4
 8007d9e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8007da0:	2301      	movs	r3, #1
 8007da2:	e018      	b.n	8007dd6 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007db2:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	699a      	ldr	r2, [r3, #24]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	430a      	orrs	r2, r1
 8007dc4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	22ff      	movs	r2, #255	; 0xff
 8007dcc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2201      	movs	r2, #1
 8007dd2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007dd4:	2300      	movs	r3, #0
  }
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3708      	adds	r7, #8
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}

08007dde <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007dde:	b580      	push	{r7, lr}
 8007de0:	b084      	sub	sp, #16
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007de6:	2300      	movs	r3, #0
 8007de8:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	68da      	ldr	r2, [r3, #12]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007df8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007dfa:	f7f9 ffe9 	bl	8001dd0 <HAL_GetTick>
 8007dfe:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007e00:	e009      	b.n	8007e16 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007e02:	f7f9 ffe5 	bl	8001dd0 <HAL_GetTick>
 8007e06:	4602      	mov	r2, r0
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	1ad3      	subs	r3, r2, r3
 8007e0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e10:	d901      	bls.n	8007e16 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007e12:	2303      	movs	r3, #3
 8007e14:	e007      	b.n	8007e26 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	68db      	ldr	r3, [r3, #12]
 8007e1c:	f003 0320 	and.w	r3, r3, #32
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d0ee      	beq.n	8007e02 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007e24:	2300      	movs	r3, #0
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3710      	adds	r7, #16
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}

08007e2e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007e2e:	b580      	push	{r7, lr}
 8007e30:	b084      	sub	sp, #16
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007e36:	2300      	movs	r3, #0
 8007e38:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d119      	bne.n	8007e7c <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007e50:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007e52:	f7f9 ffbd 	bl	8001dd0 <HAL_GetTick>
 8007e56:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007e58:	e009      	b.n	8007e6e <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007e5a:	f7f9 ffb9 	bl	8001dd0 <HAL_GetTick>
 8007e5e:	4602      	mov	r2, r0
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	1ad3      	subs	r3, r2, r3
 8007e64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e68:	d901      	bls.n	8007e6e <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8007e6a:	2303      	movs	r3, #3
 8007e6c:	e007      	b.n	8007e7e <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	68db      	ldr	r3, [r3, #12]
 8007e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d0ee      	beq.n	8007e5a <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8007e7c:	2300      	movs	r3, #0
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3710      	adds	r7, #16
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}

08007e86 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e86:	b580      	push	{r7, lr}
 8007e88:	b082      	sub	sp, #8
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d101      	bne.n	8007e98 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e94:	2301      	movs	r3, #1
 8007e96:	e01d      	b.n	8007ed4 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e9e:	b2db      	uxtb	r3, r3
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d106      	bne.n	8007eb2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f7f9 fc2f 	bl	8001710 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2202      	movs	r2, #2
 8007eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681a      	ldr	r2, [r3, #0]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	3304      	adds	r3, #4
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	4610      	mov	r0, r2
 8007ec6:	f000 fcd7 	bl	8008878 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2201      	movs	r2, #1
 8007ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ed2:	2300      	movs	r3, #0
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3708      	adds	r7, #8
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b085      	sub	sp, #20
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2202      	movs	r2, #2
 8007ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	f003 0307 	and.w	r3, r3, #7
 8007ef6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	2b06      	cmp	r3, #6
 8007efc:	d007      	beq.n	8007f0e <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f042 0201 	orr.w	r2, r2, #1
 8007f0c:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2201      	movs	r2, #1
 8007f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007f16:	2300      	movs	r3, #0
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3714      	adds	r7, #20
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr

08007f24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b085      	sub	sp, #20
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	68da      	ldr	r2, [r3, #12]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f042 0201 	orr.w	r2, r2, #1
 8007f3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	689b      	ldr	r3, [r3, #8]
 8007f42:	f003 0307 	and.w	r3, r3, #7
 8007f46:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2b06      	cmp	r3, #6
 8007f4c:	d007      	beq.n	8007f5e <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	681a      	ldr	r2, [r3, #0]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f042 0201 	orr.w	r2, r2, #1
 8007f5c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007f5e:	2300      	movs	r3, #0
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3714      	adds	r7, #20
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr

08007f6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b082      	sub	sp, #8
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d101      	bne.n	8007f7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e01d      	b.n	8007fba <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d106      	bne.n	8007f98 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 f815 	bl	8007fc2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2202      	movs	r2, #2
 8007f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	3304      	adds	r3, #4
 8007fa8:	4619      	mov	r1, r3
 8007faa:	4610      	mov	r0, r2
 8007fac:	f000 fc64 	bl	8008878 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007fb8:	2300      	movs	r3, #0
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3708      	adds	r7, #8
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}

08007fc2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007fc2:	b480      	push	{r7}
 8007fc4:	b083      	sub	sp, #12
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007fca:	bf00      	nop
 8007fcc:	370c      	adds	r7, #12
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd4:	4770      	bx	lr
	...

08007fd8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b084      	sub	sp, #16
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	6839      	ldr	r1, [r7, #0]
 8007fea:	4618      	mov	r0, r3
 8007fec:	f000 ffb4 	bl	8008f58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a15      	ldr	r2, [pc, #84]	; (800804c <HAL_TIM_PWM_Start+0x74>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d004      	beq.n	8008004 <HAL_TIM_PWM_Start+0x2c>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a14      	ldr	r2, [pc, #80]	; (8008050 <HAL_TIM_PWM_Start+0x78>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d101      	bne.n	8008008 <HAL_TIM_PWM_Start+0x30>
 8008004:	2301      	movs	r3, #1
 8008006:	e000      	b.n	800800a <HAL_TIM_PWM_Start+0x32>
 8008008:	2300      	movs	r3, #0
 800800a:	2b00      	cmp	r3, #0
 800800c:	d007      	beq.n	800801e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800801c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	689b      	ldr	r3, [r3, #8]
 8008024:	f003 0307 	and.w	r3, r3, #7
 8008028:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2b06      	cmp	r3, #6
 800802e:	d007      	beq.n	8008040 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	681a      	ldr	r2, [r3, #0]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f042 0201 	orr.w	r2, r2, #1
 800803e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008040:	2300      	movs	r3, #0
}
 8008042:	4618      	mov	r0, r3
 8008044:	3710      	adds	r7, #16
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
 800804a:	bf00      	nop
 800804c:	40010000 	.word	0x40010000
 8008050:	40010400 	.word	0x40010400

08008054 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b082      	sub	sp, #8
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	2200      	movs	r2, #0
 8008064:	6839      	ldr	r1, [r7, #0]
 8008066:	4618      	mov	r0, r3
 8008068:	f000 ff76 	bl	8008f58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a22      	ldr	r2, [pc, #136]	; (80080fc <HAL_TIM_PWM_Stop+0xa8>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d004      	beq.n	8008080 <HAL_TIM_PWM_Stop+0x2c>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a21      	ldr	r2, [pc, #132]	; (8008100 <HAL_TIM_PWM_Stop+0xac>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d101      	bne.n	8008084 <HAL_TIM_PWM_Stop+0x30>
 8008080:	2301      	movs	r3, #1
 8008082:	e000      	b.n	8008086 <HAL_TIM_PWM_Stop+0x32>
 8008084:	2300      	movs	r3, #0
 8008086:	2b00      	cmp	r3, #0
 8008088:	d017      	beq.n	80080ba <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	6a1a      	ldr	r2, [r3, #32]
 8008090:	f241 1311 	movw	r3, #4369	; 0x1111
 8008094:	4013      	ands	r3, r2
 8008096:	2b00      	cmp	r3, #0
 8008098:	d10f      	bne.n	80080ba <HAL_TIM_PWM_Stop+0x66>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	6a1a      	ldr	r2, [r3, #32]
 80080a0:	f240 4344 	movw	r3, #1092	; 0x444
 80080a4:	4013      	ands	r3, r2
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d107      	bne.n	80080ba <HAL_TIM_PWM_Stop+0x66>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80080b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	6a1a      	ldr	r2, [r3, #32]
 80080c0:	f241 1311 	movw	r3, #4369	; 0x1111
 80080c4:	4013      	ands	r3, r2
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d10f      	bne.n	80080ea <HAL_TIM_PWM_Stop+0x96>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	6a1a      	ldr	r2, [r3, #32]
 80080d0:	f240 4344 	movw	r3, #1092	; 0x444
 80080d4:	4013      	ands	r3, r2
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d107      	bne.n	80080ea <HAL_TIM_PWM_Stop+0x96>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f022 0201 	bic.w	r2, r2, #1
 80080e8:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2201      	movs	r2, #1
 80080ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80080f2:	2300      	movs	r3, #0
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3708      	adds	r7, #8
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}
 80080fc:	40010000 	.word	0x40010000
 8008100:	40010400 	.word	0x40010400

08008104 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b086      	sub	sp, #24
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d101      	bne.n	8008118 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008114:	2301      	movs	r3, #1
 8008116:	e083      	b.n	8008220 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800811e:	b2db      	uxtb	r3, r3
 8008120:	2b00      	cmp	r3, #0
 8008122:	d106      	bne.n	8008132 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2200      	movs	r2, #0
 8008128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f7f9 fb6d 	bl	800180c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2202      	movs	r2, #2
 8008136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	689b      	ldr	r3, [r3, #8]
 8008140:	687a      	ldr	r2, [r7, #4]
 8008142:	6812      	ldr	r2, [r2, #0]
 8008144:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008148:	f023 0307 	bic.w	r3, r3, #7
 800814c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681a      	ldr	r2, [r3, #0]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	3304      	adds	r3, #4
 8008156:	4619      	mov	r1, r3
 8008158:	4610      	mov	r0, r2
 800815a:	f000 fb8d 	bl	8008878 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	699b      	ldr	r3, [r3, #24]
 800816c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	6a1b      	ldr	r3, [r3, #32]
 8008174:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	697a      	ldr	r2, [r7, #20]
 800817c:	4313      	orrs	r3, r2
 800817e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008186:	f023 0303 	bic.w	r3, r3, #3
 800818a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	689a      	ldr	r2, [r3, #8]
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	699b      	ldr	r3, [r3, #24]
 8008194:	021b      	lsls	r3, r3, #8
 8008196:	4313      	orrs	r3, r2
 8008198:	693a      	ldr	r2, [r7, #16]
 800819a:	4313      	orrs	r3, r2
 800819c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80081a4:	f023 030c 	bic.w	r3, r3, #12
 80081a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80081b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80081b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	68da      	ldr	r2, [r3, #12]
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	69db      	ldr	r3, [r3, #28]
 80081be:	021b      	lsls	r3, r3, #8
 80081c0:	4313      	orrs	r3, r2
 80081c2:	693a      	ldr	r2, [r7, #16]
 80081c4:	4313      	orrs	r3, r2
 80081c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	691b      	ldr	r3, [r3, #16]
 80081cc:	011a      	lsls	r2, r3, #4
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	6a1b      	ldr	r3, [r3, #32]
 80081d2:	031b      	lsls	r3, r3, #12
 80081d4:	4313      	orrs	r3, r2
 80081d6:	693a      	ldr	r2, [r7, #16]
 80081d8:	4313      	orrs	r3, r2
 80081da:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80081e2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80081ea:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	685a      	ldr	r2, [r3, #4]
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	695b      	ldr	r3, [r3, #20]
 80081f4:	011b      	lsls	r3, r3, #4
 80081f6:	4313      	orrs	r3, r2
 80081f8:	68fa      	ldr	r2, [r7, #12]
 80081fa:	4313      	orrs	r3, r2
 80081fc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	697a      	ldr	r2, [r7, #20]
 8008204:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	693a      	ldr	r2, [r7, #16]
 800820c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	68fa      	ldr	r2, [r7, #12]
 8008214:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2201      	movs	r2, #1
 800821a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800821e:	2300      	movs	r3, #0
}
 8008220:	4618      	mov	r0, r3
 8008222:	3718      	adds	r7, #24
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b082      	sub	sp, #8
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d002      	beq.n	800823e <HAL_TIM_Encoder_Start+0x16>
 8008238:	2b04      	cmp	r3, #4
 800823a:	d008      	beq.n	800824e <HAL_TIM_Encoder_Start+0x26>
 800823c:	e00f      	b.n	800825e <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	2201      	movs	r2, #1
 8008244:	2100      	movs	r1, #0
 8008246:	4618      	mov	r0, r3
 8008248:	f000 fe86 	bl	8008f58 <TIM_CCxChannelCmd>
      break;
 800824c:	e016      	b.n	800827c <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	2201      	movs	r2, #1
 8008254:	2104      	movs	r1, #4
 8008256:	4618      	mov	r0, r3
 8008258:	f000 fe7e 	bl	8008f58 <TIM_CCxChannelCmd>
      break;
 800825c:	e00e      	b.n	800827c <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	2201      	movs	r2, #1
 8008264:	2100      	movs	r1, #0
 8008266:	4618      	mov	r0, r3
 8008268:	f000 fe76 	bl	8008f58 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	2201      	movs	r2, #1
 8008272:	2104      	movs	r1, #4
 8008274:	4618      	mov	r0, r3
 8008276:	f000 fe6f 	bl	8008f58 <TIM_CCxChannelCmd>
      break;
 800827a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	681a      	ldr	r2, [r3, #0]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f042 0201 	orr.w	r2, r2, #1
 800828a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800828c:	2300      	movs	r3, #0
}
 800828e:	4618      	mov	r0, r3
 8008290:	3708      	adds	r7, #8
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}

08008296 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008296:	b580      	push	{r7, lr}
 8008298:	b082      	sub	sp, #8
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	691b      	ldr	r3, [r3, #16]
 80082a4:	f003 0302 	and.w	r3, r3, #2
 80082a8:	2b02      	cmp	r3, #2
 80082aa:	d122      	bne.n	80082f2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	68db      	ldr	r3, [r3, #12]
 80082b2:	f003 0302 	and.w	r3, r3, #2
 80082b6:	2b02      	cmp	r3, #2
 80082b8:	d11b      	bne.n	80082f2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f06f 0202 	mvn.w	r2, #2
 80082c2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2201      	movs	r2, #1
 80082c8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	699b      	ldr	r3, [r3, #24]
 80082d0:	f003 0303 	and.w	r3, r3, #3
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d003      	beq.n	80082e0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 faae 	bl	800883a <HAL_TIM_IC_CaptureCallback>
 80082de:	e005      	b.n	80082ec <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f000 faa0 	bl	8008826 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f000 fab1 	bl	800884e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2200      	movs	r2, #0
 80082f0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	691b      	ldr	r3, [r3, #16]
 80082f8:	f003 0304 	and.w	r3, r3, #4
 80082fc:	2b04      	cmp	r3, #4
 80082fe:	d122      	bne.n	8008346 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	68db      	ldr	r3, [r3, #12]
 8008306:	f003 0304 	and.w	r3, r3, #4
 800830a:	2b04      	cmp	r3, #4
 800830c:	d11b      	bne.n	8008346 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f06f 0204 	mvn.w	r2, #4
 8008316:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2202      	movs	r2, #2
 800831c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	699b      	ldr	r3, [r3, #24]
 8008324:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008328:	2b00      	cmp	r3, #0
 800832a:	d003      	beq.n	8008334 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f000 fa84 	bl	800883a <HAL_TIM_IC_CaptureCallback>
 8008332:	e005      	b.n	8008340 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f000 fa76 	bl	8008826 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 fa87 	bl	800884e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2200      	movs	r2, #0
 8008344:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	691b      	ldr	r3, [r3, #16]
 800834c:	f003 0308 	and.w	r3, r3, #8
 8008350:	2b08      	cmp	r3, #8
 8008352:	d122      	bne.n	800839a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	68db      	ldr	r3, [r3, #12]
 800835a:	f003 0308 	and.w	r3, r3, #8
 800835e:	2b08      	cmp	r3, #8
 8008360:	d11b      	bne.n	800839a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f06f 0208 	mvn.w	r2, #8
 800836a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2204      	movs	r2, #4
 8008370:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	69db      	ldr	r3, [r3, #28]
 8008378:	f003 0303 	and.w	r3, r3, #3
 800837c:	2b00      	cmp	r3, #0
 800837e:	d003      	beq.n	8008388 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f000 fa5a 	bl	800883a <HAL_TIM_IC_CaptureCallback>
 8008386:	e005      	b.n	8008394 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 fa4c 	bl	8008826 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 fa5d 	bl	800884e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	691b      	ldr	r3, [r3, #16]
 80083a0:	f003 0310 	and.w	r3, r3, #16
 80083a4:	2b10      	cmp	r3, #16
 80083a6:	d122      	bne.n	80083ee <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	68db      	ldr	r3, [r3, #12]
 80083ae:	f003 0310 	and.w	r3, r3, #16
 80083b2:	2b10      	cmp	r3, #16
 80083b4:	d11b      	bne.n	80083ee <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f06f 0210 	mvn.w	r2, #16
 80083be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2208      	movs	r2, #8
 80083c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	69db      	ldr	r3, [r3, #28]
 80083cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d003      	beq.n	80083dc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 fa30 	bl	800883a <HAL_TIM_IC_CaptureCallback>
 80083da:	e005      	b.n	80083e8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f000 fa22 	bl	8008826 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 fa33 	bl	800884e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2200      	movs	r2, #0
 80083ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	691b      	ldr	r3, [r3, #16]
 80083f4:	f003 0301 	and.w	r3, r3, #1
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d10e      	bne.n	800841a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	68db      	ldr	r3, [r3, #12]
 8008402:	f003 0301 	and.w	r3, r3, #1
 8008406:	2b01      	cmp	r3, #1
 8008408:	d107      	bne.n	800841a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f06f 0201 	mvn.w	r2, #1
 8008412:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f7f8 ff67 	bl	80012e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	691b      	ldr	r3, [r3, #16]
 8008420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008424:	2b80      	cmp	r3, #128	; 0x80
 8008426:	d10e      	bne.n	8008446 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	68db      	ldr	r3, [r3, #12]
 800842e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008432:	2b80      	cmp	r3, #128	; 0x80
 8008434:	d107      	bne.n	8008446 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800843e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f000 fe87 	bl	8009154 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	691b      	ldr	r3, [r3, #16]
 800844c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008450:	2b40      	cmp	r3, #64	; 0x40
 8008452:	d10e      	bne.n	8008472 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	68db      	ldr	r3, [r3, #12]
 800845a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800845e:	2b40      	cmp	r3, #64	; 0x40
 8008460:	d107      	bne.n	8008472 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800846a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f000 f9f8 	bl	8008862 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	691b      	ldr	r3, [r3, #16]
 8008478:	f003 0320 	and.w	r3, r3, #32
 800847c:	2b20      	cmp	r3, #32
 800847e:	d10e      	bne.n	800849e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	68db      	ldr	r3, [r3, #12]
 8008486:	f003 0320 	and.w	r3, r3, #32
 800848a:	2b20      	cmp	r3, #32
 800848c:	d107      	bne.n	800849e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f06f 0220 	mvn.w	r2, #32
 8008496:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f000 fe51 	bl	8009140 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800849e:	bf00      	nop
 80084a0:	3708      	adds	r7, #8
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}
	...

080084a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b084      	sub	sp, #16
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	60f8      	str	r0, [r7, #12]
 80084b0:	60b9      	str	r1, [r7, #8]
 80084b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084ba:	2b01      	cmp	r3, #1
 80084bc:	d101      	bne.n	80084c2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80084be:	2302      	movs	r3, #2
 80084c0:	e0b4      	b.n	800862c <HAL_TIM_PWM_ConfigChannel+0x184>
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	2201      	movs	r2, #1
 80084c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2202      	movs	r2, #2
 80084ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2b0c      	cmp	r3, #12
 80084d6:	f200 809f 	bhi.w	8008618 <HAL_TIM_PWM_ConfigChannel+0x170>
 80084da:	a201      	add	r2, pc, #4	; (adr r2, 80084e0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80084dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e0:	08008515 	.word	0x08008515
 80084e4:	08008619 	.word	0x08008619
 80084e8:	08008619 	.word	0x08008619
 80084ec:	08008619 	.word	0x08008619
 80084f0:	08008555 	.word	0x08008555
 80084f4:	08008619 	.word	0x08008619
 80084f8:	08008619 	.word	0x08008619
 80084fc:	08008619 	.word	0x08008619
 8008500:	08008597 	.word	0x08008597
 8008504:	08008619 	.word	0x08008619
 8008508:	08008619 	.word	0x08008619
 800850c:	08008619 	.word	0x08008619
 8008510:	080085d7 	.word	0x080085d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	68b9      	ldr	r1, [r7, #8]
 800851a:	4618      	mov	r0, r3
 800851c:	f000 fa4c 	bl	80089b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	699a      	ldr	r2, [r3, #24]
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f042 0208 	orr.w	r2, r2, #8
 800852e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	699a      	ldr	r2, [r3, #24]
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f022 0204 	bic.w	r2, r2, #4
 800853e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	6999      	ldr	r1, [r3, #24]
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	691a      	ldr	r2, [r3, #16]
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	430a      	orrs	r2, r1
 8008550:	619a      	str	r2, [r3, #24]
      break;
 8008552:	e062      	b.n	800861a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	68b9      	ldr	r1, [r7, #8]
 800855a:	4618      	mov	r0, r3
 800855c:	f000 fa9c 	bl	8008a98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	699a      	ldr	r2, [r3, #24]
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800856e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	699a      	ldr	r2, [r3, #24]
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800857e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	6999      	ldr	r1, [r3, #24]
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	691b      	ldr	r3, [r3, #16]
 800858a:	021a      	lsls	r2, r3, #8
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	430a      	orrs	r2, r1
 8008592:	619a      	str	r2, [r3, #24]
      break;
 8008594:	e041      	b.n	800861a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	68b9      	ldr	r1, [r7, #8]
 800859c:	4618      	mov	r0, r3
 800859e:	f000 faf1 	bl	8008b84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	69da      	ldr	r2, [r3, #28]
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f042 0208 	orr.w	r2, r2, #8
 80085b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	69da      	ldr	r2, [r3, #28]
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f022 0204 	bic.w	r2, r2, #4
 80085c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	69d9      	ldr	r1, [r3, #28]
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	691a      	ldr	r2, [r3, #16]
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	430a      	orrs	r2, r1
 80085d2:	61da      	str	r2, [r3, #28]
      break;
 80085d4:	e021      	b.n	800861a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	68b9      	ldr	r1, [r7, #8]
 80085dc:	4618      	mov	r0, r3
 80085de:	f000 fb45 	bl	8008c6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	69da      	ldr	r2, [r3, #28]
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80085f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	69da      	ldr	r2, [r3, #28]
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008600:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	69d9      	ldr	r1, [r3, #28]
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	691b      	ldr	r3, [r3, #16]
 800860c:	021a      	lsls	r2, r3, #8
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	430a      	orrs	r2, r1
 8008614:	61da      	str	r2, [r3, #28]
      break;
 8008616:	e000      	b.n	800861a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8008618:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2201      	movs	r2, #1
 800861e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2200      	movs	r2, #0
 8008626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800862a:	2300      	movs	r3, #0
}
 800862c:	4618      	mov	r0, r3
 800862e:	3710      	adds	r7, #16
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b084      	sub	sp, #16
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008644:	2b01      	cmp	r3, #1
 8008646:	d101      	bne.n	800864c <HAL_TIM_ConfigClockSource+0x18>
 8008648:	2302      	movs	r3, #2
 800864a:	e0a6      	b.n	800879a <HAL_TIM_ConfigClockSource+0x166>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2201      	movs	r2, #1
 8008650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2202      	movs	r2, #2
 8008658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	689b      	ldr	r3, [r3, #8]
 8008662:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800866a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008672:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	68fa      	ldr	r2, [r7, #12]
 800867a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	2b40      	cmp	r3, #64	; 0x40
 8008682:	d067      	beq.n	8008754 <HAL_TIM_ConfigClockSource+0x120>
 8008684:	2b40      	cmp	r3, #64	; 0x40
 8008686:	d80b      	bhi.n	80086a0 <HAL_TIM_ConfigClockSource+0x6c>
 8008688:	2b10      	cmp	r3, #16
 800868a:	d073      	beq.n	8008774 <HAL_TIM_ConfigClockSource+0x140>
 800868c:	2b10      	cmp	r3, #16
 800868e:	d802      	bhi.n	8008696 <HAL_TIM_ConfigClockSource+0x62>
 8008690:	2b00      	cmp	r3, #0
 8008692:	d06f      	beq.n	8008774 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008694:	e078      	b.n	8008788 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008696:	2b20      	cmp	r3, #32
 8008698:	d06c      	beq.n	8008774 <HAL_TIM_ConfigClockSource+0x140>
 800869a:	2b30      	cmp	r3, #48	; 0x30
 800869c:	d06a      	beq.n	8008774 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800869e:	e073      	b.n	8008788 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80086a0:	2b70      	cmp	r3, #112	; 0x70
 80086a2:	d00d      	beq.n	80086c0 <HAL_TIM_ConfigClockSource+0x8c>
 80086a4:	2b70      	cmp	r3, #112	; 0x70
 80086a6:	d804      	bhi.n	80086b2 <HAL_TIM_ConfigClockSource+0x7e>
 80086a8:	2b50      	cmp	r3, #80	; 0x50
 80086aa:	d033      	beq.n	8008714 <HAL_TIM_ConfigClockSource+0xe0>
 80086ac:	2b60      	cmp	r3, #96	; 0x60
 80086ae:	d041      	beq.n	8008734 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80086b0:	e06a      	b.n	8008788 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80086b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086b6:	d066      	beq.n	8008786 <HAL_TIM_ConfigClockSource+0x152>
 80086b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086bc:	d017      	beq.n	80086ee <HAL_TIM_ConfigClockSource+0xba>
      break;
 80086be:	e063      	b.n	8008788 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6818      	ldr	r0, [r3, #0]
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	6899      	ldr	r1, [r3, #8]
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	685a      	ldr	r2, [r3, #4]
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	68db      	ldr	r3, [r3, #12]
 80086d0:	f000 fc22 	bl	8008f18 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	689b      	ldr	r3, [r3, #8]
 80086da:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80086e2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	68fa      	ldr	r2, [r7, #12]
 80086ea:	609a      	str	r2, [r3, #8]
      break;
 80086ec:	e04c      	b.n	8008788 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6818      	ldr	r0, [r3, #0]
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	6899      	ldr	r1, [r3, #8]
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	685a      	ldr	r2, [r3, #4]
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	68db      	ldr	r3, [r3, #12]
 80086fe:	f000 fc0b 	bl	8008f18 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	689a      	ldr	r2, [r3, #8]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008710:	609a      	str	r2, [r3, #8]
      break;
 8008712:	e039      	b.n	8008788 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6818      	ldr	r0, [r3, #0]
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	6859      	ldr	r1, [r3, #4]
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	68db      	ldr	r3, [r3, #12]
 8008720:	461a      	mov	r2, r3
 8008722:	f000 fb7f 	bl	8008e24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	2150      	movs	r1, #80	; 0x50
 800872c:	4618      	mov	r0, r3
 800872e:	f000 fbd8 	bl	8008ee2 <TIM_ITRx_SetConfig>
      break;
 8008732:	e029      	b.n	8008788 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6818      	ldr	r0, [r3, #0]
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	6859      	ldr	r1, [r3, #4]
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	68db      	ldr	r3, [r3, #12]
 8008740:	461a      	mov	r2, r3
 8008742:	f000 fb9e 	bl	8008e82 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	2160      	movs	r1, #96	; 0x60
 800874c:	4618      	mov	r0, r3
 800874e:	f000 fbc8 	bl	8008ee2 <TIM_ITRx_SetConfig>
      break;
 8008752:	e019      	b.n	8008788 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6818      	ldr	r0, [r3, #0]
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	6859      	ldr	r1, [r3, #4]
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	68db      	ldr	r3, [r3, #12]
 8008760:	461a      	mov	r2, r3
 8008762:	f000 fb5f 	bl	8008e24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	2140      	movs	r1, #64	; 0x40
 800876c:	4618      	mov	r0, r3
 800876e:	f000 fbb8 	bl	8008ee2 <TIM_ITRx_SetConfig>
      break;
 8008772:	e009      	b.n	8008788 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681a      	ldr	r2, [r3, #0]
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4619      	mov	r1, r3
 800877e:	4610      	mov	r0, r2
 8008780:	f000 fbaf 	bl	8008ee2 <TIM_ITRx_SetConfig>
      break;
 8008784:	e000      	b.n	8008788 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8008786:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2201      	movs	r2, #1
 800878c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2200      	movs	r2, #0
 8008794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008798:	2300      	movs	r3, #0
}
 800879a:	4618      	mov	r0, r3
 800879c:	3710      	adds	r7, #16
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}

080087a2 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80087a2:	b580      	push	{r7, lr}
 80087a4:	b082      	sub	sp, #8
 80087a6:	af00      	add	r7, sp, #0
 80087a8:	6078      	str	r0, [r7, #4]
 80087aa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087b2:	2b01      	cmp	r3, #1
 80087b4:	d101      	bne.n	80087ba <HAL_TIM_SlaveConfigSynchro+0x18>
 80087b6:	2302      	movs	r3, #2
 80087b8:	e031      	b.n	800881e <HAL_TIM_SlaveConfigSynchro+0x7c>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2201      	movs	r2, #1
 80087be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2202      	movs	r2, #2
 80087c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80087ca:	6839      	ldr	r1, [r7, #0]
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f000 faa3 	bl	8008d18 <TIM_SlaveTimer_SetConfig>
 80087d2:	4603      	mov	r3, r0
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d009      	beq.n	80087ec <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2201      	movs	r2, #1
 80087dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2200      	movs	r2, #0
 80087e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80087e8:	2301      	movs	r3, #1
 80087ea:	e018      	b.n	800881e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	68da      	ldr	r2, [r3, #12]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087fa:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	68da      	ldr	r2, [r3, #12]
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800880a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2201      	movs	r2, #1
 8008810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2200      	movs	r2, #0
 8008818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800881c:	2300      	movs	r3, #0
}
 800881e:	4618      	mov	r0, r3
 8008820:	3708      	adds	r7, #8
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}

08008826 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008826:	b480      	push	{r7}
 8008828:	b083      	sub	sp, #12
 800882a:	af00      	add	r7, sp, #0
 800882c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800882e:	bf00      	nop
 8008830:	370c      	adds	r7, #12
 8008832:	46bd      	mov	sp, r7
 8008834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008838:	4770      	bx	lr

0800883a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800883a:	b480      	push	{r7}
 800883c:	b083      	sub	sp, #12
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008842:	bf00      	nop
 8008844:	370c      	adds	r7, #12
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr

0800884e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800884e:	b480      	push	{r7}
 8008850:	b083      	sub	sp, #12
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008856:	bf00      	nop
 8008858:	370c      	adds	r7, #12
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr

08008862 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008862:	b480      	push	{r7}
 8008864:	b083      	sub	sp, #12
 8008866:	af00      	add	r7, sp, #0
 8008868:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800886a:	bf00      	nop
 800886c:	370c      	adds	r7, #12
 800886e:	46bd      	mov	sp, r7
 8008870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008874:	4770      	bx	lr
	...

08008878 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008878:	b480      	push	{r7}
 800887a:	b085      	sub	sp, #20
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	4a40      	ldr	r2, [pc, #256]	; (800898c <TIM_Base_SetConfig+0x114>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d013      	beq.n	80088b8 <TIM_Base_SetConfig+0x40>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008896:	d00f      	beq.n	80088b8 <TIM_Base_SetConfig+0x40>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	4a3d      	ldr	r2, [pc, #244]	; (8008990 <TIM_Base_SetConfig+0x118>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d00b      	beq.n	80088b8 <TIM_Base_SetConfig+0x40>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	4a3c      	ldr	r2, [pc, #240]	; (8008994 <TIM_Base_SetConfig+0x11c>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d007      	beq.n	80088b8 <TIM_Base_SetConfig+0x40>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	4a3b      	ldr	r2, [pc, #236]	; (8008998 <TIM_Base_SetConfig+0x120>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d003      	beq.n	80088b8 <TIM_Base_SetConfig+0x40>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	4a3a      	ldr	r2, [pc, #232]	; (800899c <TIM_Base_SetConfig+0x124>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d108      	bne.n	80088ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	68fa      	ldr	r2, [r7, #12]
 80088c6:	4313      	orrs	r3, r2
 80088c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	4a2f      	ldr	r2, [pc, #188]	; (800898c <TIM_Base_SetConfig+0x114>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d02b      	beq.n	800892a <TIM_Base_SetConfig+0xb2>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088d8:	d027      	beq.n	800892a <TIM_Base_SetConfig+0xb2>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	4a2c      	ldr	r2, [pc, #176]	; (8008990 <TIM_Base_SetConfig+0x118>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d023      	beq.n	800892a <TIM_Base_SetConfig+0xb2>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	4a2b      	ldr	r2, [pc, #172]	; (8008994 <TIM_Base_SetConfig+0x11c>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d01f      	beq.n	800892a <TIM_Base_SetConfig+0xb2>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	4a2a      	ldr	r2, [pc, #168]	; (8008998 <TIM_Base_SetConfig+0x120>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d01b      	beq.n	800892a <TIM_Base_SetConfig+0xb2>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	4a29      	ldr	r2, [pc, #164]	; (800899c <TIM_Base_SetConfig+0x124>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d017      	beq.n	800892a <TIM_Base_SetConfig+0xb2>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	4a28      	ldr	r2, [pc, #160]	; (80089a0 <TIM_Base_SetConfig+0x128>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d013      	beq.n	800892a <TIM_Base_SetConfig+0xb2>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	4a27      	ldr	r2, [pc, #156]	; (80089a4 <TIM_Base_SetConfig+0x12c>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d00f      	beq.n	800892a <TIM_Base_SetConfig+0xb2>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	4a26      	ldr	r2, [pc, #152]	; (80089a8 <TIM_Base_SetConfig+0x130>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d00b      	beq.n	800892a <TIM_Base_SetConfig+0xb2>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	4a25      	ldr	r2, [pc, #148]	; (80089ac <TIM_Base_SetConfig+0x134>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d007      	beq.n	800892a <TIM_Base_SetConfig+0xb2>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	4a24      	ldr	r2, [pc, #144]	; (80089b0 <TIM_Base_SetConfig+0x138>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d003      	beq.n	800892a <TIM_Base_SetConfig+0xb2>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	4a23      	ldr	r2, [pc, #140]	; (80089b4 <TIM_Base_SetConfig+0x13c>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d108      	bne.n	800893c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008930:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	68db      	ldr	r3, [r3, #12]
 8008936:	68fa      	ldr	r2, [r7, #12]
 8008938:	4313      	orrs	r3, r2
 800893a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	695b      	ldr	r3, [r3, #20]
 8008946:	4313      	orrs	r3, r2
 8008948:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	68fa      	ldr	r2, [r7, #12]
 800894e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	689a      	ldr	r2, [r3, #8]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	681a      	ldr	r2, [r3, #0]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	4a0a      	ldr	r2, [pc, #40]	; (800898c <TIM_Base_SetConfig+0x114>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d003      	beq.n	8008970 <TIM_Base_SetConfig+0xf8>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	4a0c      	ldr	r2, [pc, #48]	; (800899c <TIM_Base_SetConfig+0x124>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d103      	bne.n	8008978 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	691a      	ldr	r2, [r3, #16]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2201      	movs	r2, #1
 800897c:	615a      	str	r2, [r3, #20]
}
 800897e:	bf00      	nop
 8008980:	3714      	adds	r7, #20
 8008982:	46bd      	mov	sp, r7
 8008984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008988:	4770      	bx	lr
 800898a:	bf00      	nop
 800898c:	40010000 	.word	0x40010000
 8008990:	40000400 	.word	0x40000400
 8008994:	40000800 	.word	0x40000800
 8008998:	40000c00 	.word	0x40000c00
 800899c:	40010400 	.word	0x40010400
 80089a0:	40014000 	.word	0x40014000
 80089a4:	40014400 	.word	0x40014400
 80089a8:	40014800 	.word	0x40014800
 80089ac:	40001800 	.word	0x40001800
 80089b0:	40001c00 	.word	0x40001c00
 80089b4:	40002000 	.word	0x40002000

080089b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b087      	sub	sp, #28
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6a1b      	ldr	r3, [r3, #32]
 80089c6:	f023 0201 	bic.w	r2, r3, #1
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6a1b      	ldr	r3, [r3, #32]
 80089d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	685b      	ldr	r3, [r3, #4]
 80089d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	699b      	ldr	r3, [r3, #24]
 80089de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f023 0303 	bic.w	r3, r3, #3
 80089ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	68fa      	ldr	r2, [r7, #12]
 80089f6:	4313      	orrs	r3, r2
 80089f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	f023 0302 	bic.w	r3, r3, #2
 8008a00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	689b      	ldr	r3, [r3, #8]
 8008a06:	697a      	ldr	r2, [r7, #20]
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	4a20      	ldr	r2, [pc, #128]	; (8008a90 <TIM_OC1_SetConfig+0xd8>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d003      	beq.n	8008a1c <TIM_OC1_SetConfig+0x64>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	4a1f      	ldr	r2, [pc, #124]	; (8008a94 <TIM_OC1_SetConfig+0xdc>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d10c      	bne.n	8008a36 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	f023 0308 	bic.w	r3, r3, #8
 8008a22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	68db      	ldr	r3, [r3, #12]
 8008a28:	697a      	ldr	r2, [r7, #20]
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	f023 0304 	bic.w	r3, r3, #4
 8008a34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	4a15      	ldr	r2, [pc, #84]	; (8008a90 <TIM_OC1_SetConfig+0xd8>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d003      	beq.n	8008a46 <TIM_OC1_SetConfig+0x8e>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	4a14      	ldr	r2, [pc, #80]	; (8008a94 <TIM_OC1_SetConfig+0xdc>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d111      	bne.n	8008a6a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008a46:	693b      	ldr	r3, [r7, #16]
 8008a48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008a54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	695b      	ldr	r3, [r3, #20]
 8008a5a:	693a      	ldr	r2, [r7, #16]
 8008a5c:	4313      	orrs	r3, r2
 8008a5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	699b      	ldr	r3, [r3, #24]
 8008a64:	693a      	ldr	r2, [r7, #16]
 8008a66:	4313      	orrs	r3, r2
 8008a68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	693a      	ldr	r2, [r7, #16]
 8008a6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	68fa      	ldr	r2, [r7, #12]
 8008a74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	685a      	ldr	r2, [r3, #4]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	697a      	ldr	r2, [r7, #20]
 8008a82:	621a      	str	r2, [r3, #32]
}
 8008a84:	bf00      	nop
 8008a86:	371c      	adds	r7, #28
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8e:	4770      	bx	lr
 8008a90:	40010000 	.word	0x40010000
 8008a94:	40010400 	.word	0x40010400

08008a98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b087      	sub	sp, #28
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6a1b      	ldr	r3, [r3, #32]
 8008aa6:	f023 0210 	bic.w	r2, r3, #16
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6a1b      	ldr	r3, [r3, #32]
 8008ab2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	699b      	ldr	r3, [r3, #24]
 8008abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ac6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ace:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	021b      	lsls	r3, r3, #8
 8008ad6:	68fa      	ldr	r2, [r7, #12]
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	f023 0320 	bic.w	r3, r3, #32
 8008ae2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	689b      	ldr	r3, [r3, #8]
 8008ae8:	011b      	lsls	r3, r3, #4
 8008aea:	697a      	ldr	r2, [r7, #20]
 8008aec:	4313      	orrs	r3, r2
 8008aee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	4a22      	ldr	r2, [pc, #136]	; (8008b7c <TIM_OC2_SetConfig+0xe4>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d003      	beq.n	8008b00 <TIM_OC2_SetConfig+0x68>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	4a21      	ldr	r2, [pc, #132]	; (8008b80 <TIM_OC2_SetConfig+0xe8>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d10d      	bne.n	8008b1c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	68db      	ldr	r3, [r3, #12]
 8008b0c:	011b      	lsls	r3, r3, #4
 8008b0e:	697a      	ldr	r2, [r7, #20]
 8008b10:	4313      	orrs	r3, r2
 8008b12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	4a17      	ldr	r2, [pc, #92]	; (8008b7c <TIM_OC2_SetConfig+0xe4>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d003      	beq.n	8008b2c <TIM_OC2_SetConfig+0x94>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	4a16      	ldr	r2, [pc, #88]	; (8008b80 <TIM_OC2_SetConfig+0xe8>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d113      	bne.n	8008b54 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	695b      	ldr	r3, [r3, #20]
 8008b40:	009b      	lsls	r3, r3, #2
 8008b42:	693a      	ldr	r2, [r7, #16]
 8008b44:	4313      	orrs	r3, r2
 8008b46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	699b      	ldr	r3, [r3, #24]
 8008b4c:	009b      	lsls	r3, r3, #2
 8008b4e:	693a      	ldr	r2, [r7, #16]
 8008b50:	4313      	orrs	r3, r2
 8008b52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	693a      	ldr	r2, [r7, #16]
 8008b58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	68fa      	ldr	r2, [r7, #12]
 8008b5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	685a      	ldr	r2, [r3, #4]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	697a      	ldr	r2, [r7, #20]
 8008b6c:	621a      	str	r2, [r3, #32]
}
 8008b6e:	bf00      	nop
 8008b70:	371c      	adds	r7, #28
 8008b72:	46bd      	mov	sp, r7
 8008b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b78:	4770      	bx	lr
 8008b7a:	bf00      	nop
 8008b7c:	40010000 	.word	0x40010000
 8008b80:	40010400 	.word	0x40010400

08008b84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b087      	sub	sp, #28
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6a1b      	ldr	r3, [r3, #32]
 8008b92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6a1b      	ldr	r3, [r3, #32]
 8008b9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	69db      	ldr	r3, [r3, #28]
 8008baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f023 0303 	bic.w	r3, r3, #3
 8008bba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	68fa      	ldr	r2, [r7, #12]
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008bcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	689b      	ldr	r3, [r3, #8]
 8008bd2:	021b      	lsls	r3, r3, #8
 8008bd4:	697a      	ldr	r2, [r7, #20]
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	4a21      	ldr	r2, [pc, #132]	; (8008c64 <TIM_OC3_SetConfig+0xe0>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d003      	beq.n	8008bea <TIM_OC3_SetConfig+0x66>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	4a20      	ldr	r2, [pc, #128]	; (8008c68 <TIM_OC3_SetConfig+0xe4>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d10d      	bne.n	8008c06 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008bf0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	68db      	ldr	r3, [r3, #12]
 8008bf6:	021b      	lsls	r3, r3, #8
 8008bf8:	697a      	ldr	r2, [r7, #20]
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008c04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	4a16      	ldr	r2, [pc, #88]	; (8008c64 <TIM_OC3_SetConfig+0xe0>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d003      	beq.n	8008c16 <TIM_OC3_SetConfig+0x92>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	4a15      	ldr	r2, [pc, #84]	; (8008c68 <TIM_OC3_SetConfig+0xe4>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d113      	bne.n	8008c3e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008c24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	695b      	ldr	r3, [r3, #20]
 8008c2a:	011b      	lsls	r3, r3, #4
 8008c2c:	693a      	ldr	r2, [r7, #16]
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	699b      	ldr	r3, [r3, #24]
 8008c36:	011b      	lsls	r3, r3, #4
 8008c38:	693a      	ldr	r2, [r7, #16]
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	693a      	ldr	r2, [r7, #16]
 8008c42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	68fa      	ldr	r2, [r7, #12]
 8008c48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	685a      	ldr	r2, [r3, #4]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	697a      	ldr	r2, [r7, #20]
 8008c56:	621a      	str	r2, [r3, #32]
}
 8008c58:	bf00      	nop
 8008c5a:	371c      	adds	r7, #28
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c62:	4770      	bx	lr
 8008c64:	40010000 	.word	0x40010000
 8008c68:	40010400 	.word	0x40010400

08008c6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b087      	sub	sp, #28
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
 8008c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6a1b      	ldr	r3, [r3, #32]
 8008c7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6a1b      	ldr	r3, [r3, #32]
 8008c86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	69db      	ldr	r3, [r3, #28]
 8008c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ca2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	021b      	lsls	r3, r3, #8
 8008caa:	68fa      	ldr	r2, [r7, #12]
 8008cac:	4313      	orrs	r3, r2
 8008cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008cb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	689b      	ldr	r3, [r3, #8]
 8008cbc:	031b      	lsls	r3, r3, #12
 8008cbe:	693a      	ldr	r2, [r7, #16]
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	4a12      	ldr	r2, [pc, #72]	; (8008d10 <TIM_OC4_SetConfig+0xa4>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d003      	beq.n	8008cd4 <TIM_OC4_SetConfig+0x68>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	4a11      	ldr	r2, [pc, #68]	; (8008d14 <TIM_OC4_SetConfig+0xa8>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d109      	bne.n	8008ce8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008cda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	695b      	ldr	r3, [r3, #20]
 8008ce0:	019b      	lsls	r3, r3, #6
 8008ce2:	697a      	ldr	r2, [r7, #20]
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	697a      	ldr	r2, [r7, #20]
 8008cec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	68fa      	ldr	r2, [r7, #12]
 8008cf2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	685a      	ldr	r2, [r3, #4]
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	693a      	ldr	r2, [r7, #16]
 8008d00:	621a      	str	r2, [r3, #32]
}
 8008d02:	bf00      	nop
 8008d04:	371c      	adds	r7, #28
 8008d06:	46bd      	mov	sp, r7
 8008d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0c:	4770      	bx	lr
 8008d0e:	bf00      	nop
 8008d10:	40010000 	.word	0x40010000
 8008d14:	40010400 	.word	0x40010400

08008d18 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b086      	sub	sp, #24
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
 8008d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	689b      	ldr	r3, [r3, #8]
 8008d28:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d30:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	685b      	ldr	r3, [r3, #4]
 8008d36:	697a      	ldr	r2, [r7, #20]
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	f023 0307 	bic.w	r3, r3, #7
 8008d42:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	697a      	ldr	r2, [r7, #20]
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	697a      	ldr	r2, [r7, #20]
 8008d54:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	685b      	ldr	r3, [r3, #4]
 8008d5a:	2b30      	cmp	r3, #48	; 0x30
 8008d5c:	d05c      	beq.n	8008e18 <TIM_SlaveTimer_SetConfig+0x100>
 8008d5e:	2b30      	cmp	r3, #48	; 0x30
 8008d60:	d806      	bhi.n	8008d70 <TIM_SlaveTimer_SetConfig+0x58>
 8008d62:	2b10      	cmp	r3, #16
 8008d64:	d058      	beq.n	8008e18 <TIM_SlaveTimer_SetConfig+0x100>
 8008d66:	2b20      	cmp	r3, #32
 8008d68:	d056      	beq.n	8008e18 <TIM_SlaveTimer_SetConfig+0x100>
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d054      	beq.n	8008e18 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8008d6e:	e054      	b.n	8008e1a <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8008d70:	2b50      	cmp	r3, #80	; 0x50
 8008d72:	d03d      	beq.n	8008df0 <TIM_SlaveTimer_SetConfig+0xd8>
 8008d74:	2b50      	cmp	r3, #80	; 0x50
 8008d76:	d802      	bhi.n	8008d7e <TIM_SlaveTimer_SetConfig+0x66>
 8008d78:	2b40      	cmp	r3, #64	; 0x40
 8008d7a:	d010      	beq.n	8008d9e <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8008d7c:	e04d      	b.n	8008e1a <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8008d7e:	2b60      	cmp	r3, #96	; 0x60
 8008d80:	d040      	beq.n	8008e04 <TIM_SlaveTimer_SetConfig+0xec>
 8008d82:	2b70      	cmp	r3, #112	; 0x70
 8008d84:	d000      	beq.n	8008d88 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8008d86:	e048      	b.n	8008e1a <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6818      	ldr	r0, [r3, #0]
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	68d9      	ldr	r1, [r3, #12]
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	689a      	ldr	r2, [r3, #8]
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	691b      	ldr	r3, [r3, #16]
 8008d98:	f000 f8be 	bl	8008f18 <TIM_ETR_SetConfig>
      break;
 8008d9c:	e03d      	b.n	8008e1a <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	2b05      	cmp	r3, #5
 8008da4:	d101      	bne.n	8008daa <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8008da6:	2301      	movs	r3, #1
 8008da8:	e038      	b.n	8008e1c <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	6a1b      	ldr	r3, [r3, #32]
 8008db0:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	6a1a      	ldr	r2, [r3, #32]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f022 0201 	bic.w	r2, r2, #1
 8008dc0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	699b      	ldr	r3, [r3, #24]
 8008dc8:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008dd0:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	691b      	ldr	r3, [r3, #16]
 8008dd6:	011b      	lsls	r3, r3, #4
 8008dd8:	68fa      	ldr	r2, [r7, #12]
 8008dda:	4313      	orrs	r3, r2
 8008ddc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	68fa      	ldr	r2, [r7, #12]
 8008de4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	693a      	ldr	r2, [r7, #16]
 8008dec:	621a      	str	r2, [r3, #32]
      break;
 8008dee:	e014      	b.n	8008e1a <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6818      	ldr	r0, [r3, #0]
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	6899      	ldr	r1, [r3, #8]
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	691b      	ldr	r3, [r3, #16]
 8008dfc:	461a      	mov	r2, r3
 8008dfe:	f000 f811 	bl	8008e24 <TIM_TI1_ConfigInputStage>
      break;
 8008e02:	e00a      	b.n	8008e1a <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6818      	ldr	r0, [r3, #0]
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	6899      	ldr	r1, [r3, #8]
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	691b      	ldr	r3, [r3, #16]
 8008e10:	461a      	mov	r2, r3
 8008e12:	f000 f836 	bl	8008e82 <TIM_TI2_ConfigInputStage>
      break;
 8008e16:	e000      	b.n	8008e1a <TIM_SlaveTimer_SetConfig+0x102>
      break;
 8008e18:	bf00      	nop
  }
  return HAL_OK;
 8008e1a:	2300      	movs	r3, #0
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3718      	adds	r7, #24
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}

08008e24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b087      	sub	sp, #28
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	60f8      	str	r0, [r7, #12]
 8008e2c:	60b9      	str	r1, [r7, #8]
 8008e2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	6a1b      	ldr	r3, [r3, #32]
 8008e34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	6a1b      	ldr	r3, [r3, #32]
 8008e3a:	f023 0201 	bic.w	r2, r3, #1
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	699b      	ldr	r3, [r3, #24]
 8008e46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008e4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	011b      	lsls	r3, r3, #4
 8008e54:	693a      	ldr	r2, [r7, #16]
 8008e56:	4313      	orrs	r3, r2
 8008e58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	f023 030a 	bic.w	r3, r3, #10
 8008e60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008e62:	697a      	ldr	r2, [r7, #20]
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	4313      	orrs	r3, r2
 8008e68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	693a      	ldr	r2, [r7, #16]
 8008e6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	697a      	ldr	r2, [r7, #20]
 8008e74:	621a      	str	r2, [r3, #32]
}
 8008e76:	bf00      	nop
 8008e78:	371c      	adds	r7, #28
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e80:	4770      	bx	lr

08008e82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e82:	b480      	push	{r7}
 8008e84:	b087      	sub	sp, #28
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	60f8      	str	r0, [r7, #12]
 8008e8a:	60b9      	str	r1, [r7, #8]
 8008e8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	6a1b      	ldr	r3, [r3, #32]
 8008e92:	f023 0210 	bic.w	r2, r3, #16
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	699b      	ldr	r3, [r3, #24]
 8008e9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	6a1b      	ldr	r3, [r3, #32]
 8008ea4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008eac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	031b      	lsls	r3, r3, #12
 8008eb2:	697a      	ldr	r2, [r7, #20]
 8008eb4:	4313      	orrs	r3, r2
 8008eb6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008ebe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	011b      	lsls	r3, r3, #4
 8008ec4:	693a      	ldr	r2, [r7, #16]
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	697a      	ldr	r2, [r7, #20]
 8008ece:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	693a      	ldr	r2, [r7, #16]
 8008ed4:	621a      	str	r2, [r3, #32]
}
 8008ed6:	bf00      	nop
 8008ed8:	371c      	adds	r7, #28
 8008eda:	46bd      	mov	sp, r7
 8008edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee0:	4770      	bx	lr

08008ee2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008ee2:	b480      	push	{r7}
 8008ee4:	b085      	sub	sp, #20
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	6078      	str	r0, [r7, #4]
 8008eea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	689b      	ldr	r3, [r3, #8]
 8008ef0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ef8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008efa:	683a      	ldr	r2, [r7, #0]
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	4313      	orrs	r3, r2
 8008f00:	f043 0307 	orr.w	r3, r3, #7
 8008f04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	68fa      	ldr	r2, [r7, #12]
 8008f0a:	609a      	str	r2, [r3, #8]
}
 8008f0c:	bf00      	nop
 8008f0e:	3714      	adds	r7, #20
 8008f10:	46bd      	mov	sp, r7
 8008f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f16:	4770      	bx	lr

08008f18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b087      	sub	sp, #28
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	60f8      	str	r0, [r7, #12]
 8008f20:	60b9      	str	r1, [r7, #8]
 8008f22:	607a      	str	r2, [r7, #4]
 8008f24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	689b      	ldr	r3, [r3, #8]
 8008f2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008f32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	021a      	lsls	r2, r3, #8
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	431a      	orrs	r2, r3
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	697a      	ldr	r2, [r7, #20]
 8008f42:	4313      	orrs	r3, r2
 8008f44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	697a      	ldr	r2, [r7, #20]
 8008f4a:	609a      	str	r2, [r3, #8]
}
 8008f4c:	bf00      	nop
 8008f4e:	371c      	adds	r7, #28
 8008f50:	46bd      	mov	sp, r7
 8008f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f56:	4770      	bx	lr

08008f58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b087      	sub	sp, #28
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	60f8      	str	r0, [r7, #12]
 8008f60:	60b9      	str	r1, [r7, #8]
 8008f62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	f003 031f 	and.w	r3, r3, #31
 8008f6a:	2201      	movs	r2, #1
 8008f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8008f70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	6a1a      	ldr	r2, [r3, #32]
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	43db      	mvns	r3, r3
 8008f7a:	401a      	ands	r2, r3
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	6a1a      	ldr	r2, [r3, #32]
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	f003 031f 	and.w	r3, r3, #31
 8008f8a:	6879      	ldr	r1, [r7, #4]
 8008f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8008f90:	431a      	orrs	r2, r3
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	621a      	str	r2, [r3, #32]
}
 8008f96:	bf00      	nop
 8008f98:	371c      	adds	r7, #28
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa0:	4770      	bx	lr
	...

08008fa4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b085      	sub	sp, #20
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
 8008fac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008fb4:	2b01      	cmp	r3, #1
 8008fb6:	d101      	bne.n	8008fbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008fb8:	2302      	movs	r3, #2
 8008fba:	e05a      	b.n	8009072 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2202      	movs	r2, #2
 8008fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	685b      	ldr	r3, [r3, #4]
 8008fd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	689b      	ldr	r3, [r3, #8]
 8008fda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fe2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	68fa      	ldr	r2, [r7, #12]
 8008fea:	4313      	orrs	r3, r2
 8008fec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	68fa      	ldr	r2, [r7, #12]
 8008ff4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4a21      	ldr	r2, [pc, #132]	; (8009080 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d022      	beq.n	8009046 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009008:	d01d      	beq.n	8009046 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4a1d      	ldr	r2, [pc, #116]	; (8009084 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d018      	beq.n	8009046 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4a1b      	ldr	r2, [pc, #108]	; (8009088 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d013      	beq.n	8009046 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4a1a      	ldr	r2, [pc, #104]	; (800908c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d00e      	beq.n	8009046 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4a18      	ldr	r2, [pc, #96]	; (8009090 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d009      	beq.n	8009046 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4a17      	ldr	r2, [pc, #92]	; (8009094 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009038:	4293      	cmp	r3, r2
 800903a:	d004      	beq.n	8009046 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4a15      	ldr	r2, [pc, #84]	; (8009098 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d10c      	bne.n	8009060 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800904c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	685b      	ldr	r3, [r3, #4]
 8009052:	68ba      	ldr	r2, [r7, #8]
 8009054:	4313      	orrs	r3, r2
 8009056:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	68ba      	ldr	r2, [r7, #8]
 800905e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2201      	movs	r2, #1
 8009064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2200      	movs	r2, #0
 800906c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009070:	2300      	movs	r3, #0
}
 8009072:	4618      	mov	r0, r3
 8009074:	3714      	adds	r7, #20
 8009076:	46bd      	mov	sp, r7
 8009078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907c:	4770      	bx	lr
 800907e:	bf00      	nop
 8009080:	40010000 	.word	0x40010000
 8009084:	40000400 	.word	0x40000400
 8009088:	40000800 	.word	0x40000800
 800908c:	40000c00 	.word	0x40000c00
 8009090:	40010400 	.word	0x40010400
 8009094:	40014000 	.word	0x40014000
 8009098:	40001800 	.word	0x40001800

0800909c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800909c:	b480      	push	{r7}
 800909e:	b085      	sub	sp, #20
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80090a6:	2300      	movs	r3, #0
 80090a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090b0:	2b01      	cmp	r3, #1
 80090b2:	d101      	bne.n	80090b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80090b4:	2302      	movs	r3, #2
 80090b6:	e03d      	b.n	8009134 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2201      	movs	r2, #1
 80090bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	68db      	ldr	r3, [r3, #12]
 80090ca:	4313      	orrs	r3, r2
 80090cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	689b      	ldr	r3, [r3, #8]
 80090d8:	4313      	orrs	r3, r2
 80090da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	4313      	orrs	r3, r2
 80090e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4313      	orrs	r3, r2
 80090f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	691b      	ldr	r3, [r3, #16]
 8009102:	4313      	orrs	r3, r2
 8009104:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	695b      	ldr	r3, [r3, #20]
 8009110:	4313      	orrs	r3, r2
 8009112:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	69db      	ldr	r3, [r3, #28]
 800911e:	4313      	orrs	r3, r2
 8009120:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	68fa      	ldr	r2, [r7, #12]
 8009128:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2200      	movs	r2, #0
 800912e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009132:	2300      	movs	r3, #0
}
 8009134:	4618      	mov	r0, r3
 8009136:	3714      	adds	r7, #20
 8009138:	46bd      	mov	sp, r7
 800913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913e:	4770      	bx	lr

08009140 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009140:	b480      	push	{r7}
 8009142:	b083      	sub	sp, #12
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009148:	bf00      	nop
 800914a:	370c      	adds	r7, #12
 800914c:	46bd      	mov	sp, r7
 800914e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009152:	4770      	bx	lr

08009154 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009154:	b480      	push	{r7}
 8009156:	b083      	sub	sp, #12
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800915c:	bf00      	nop
 800915e:	370c      	adds	r7, #12
 8009160:	46bd      	mov	sp, r7
 8009162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009166:	4770      	bx	lr

08009168 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b082      	sub	sp, #8
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d101      	bne.n	800917a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009176:	2301      	movs	r3, #1
 8009178:	e03f      	b.n	80091fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009180:	b2db      	uxtb	r3, r3
 8009182:	2b00      	cmp	r3, #0
 8009184:	d106      	bne.n	8009194 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2200      	movs	r2, #0
 800918a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f7f8 fc54 	bl	8001a3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2224      	movs	r2, #36	; 0x24
 8009198:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	68da      	ldr	r2, [r3, #12]
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80091aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f000 fa69 	bl	8009684 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	691a      	ldr	r2, [r3, #16]
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80091c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	695a      	ldr	r2, [r3, #20]
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80091d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	68da      	ldr	r2, [r3, #12]
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80091e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2200      	movs	r2, #0
 80091e6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2220      	movs	r2, #32
 80091ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2220      	movs	r2, #32
 80091f4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80091f8:	2300      	movs	r3, #0
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3708      	adds	r7, #8
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}
	...

08009204 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b088      	sub	sp, #32
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	68db      	ldr	r3, [r3, #12]
 800921a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	695b      	ldr	r3, [r3, #20]
 8009222:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8009224:	2300      	movs	r3, #0
 8009226:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8009228:	2300      	movs	r3, #0
 800922a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800922c:	69fb      	ldr	r3, [r7, #28]
 800922e:	f003 030f 	and.w	r3, r3, #15
 8009232:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8009234:	693b      	ldr	r3, [r7, #16]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d10d      	bne.n	8009256 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800923a:	69fb      	ldr	r3, [r7, #28]
 800923c:	f003 0320 	and.w	r3, r3, #32
 8009240:	2b00      	cmp	r3, #0
 8009242:	d008      	beq.n	8009256 <HAL_UART_IRQHandler+0x52>
 8009244:	69bb      	ldr	r3, [r7, #24]
 8009246:	f003 0320 	and.w	r3, r3, #32
 800924a:	2b00      	cmp	r3, #0
 800924c:	d003      	beq.n	8009256 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f000 f996 	bl	8009580 <UART_Receive_IT>
      return;
 8009254:	e0d1      	b.n	80093fa <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	2b00      	cmp	r3, #0
 800925a:	f000 80b0 	beq.w	80093be <HAL_UART_IRQHandler+0x1ba>
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	f003 0301 	and.w	r3, r3, #1
 8009264:	2b00      	cmp	r3, #0
 8009266:	d105      	bne.n	8009274 <HAL_UART_IRQHandler+0x70>
 8009268:	69bb      	ldr	r3, [r7, #24]
 800926a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800926e:	2b00      	cmp	r3, #0
 8009270:	f000 80a5 	beq.w	80093be <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009274:	69fb      	ldr	r3, [r7, #28]
 8009276:	f003 0301 	and.w	r3, r3, #1
 800927a:	2b00      	cmp	r3, #0
 800927c:	d00a      	beq.n	8009294 <HAL_UART_IRQHandler+0x90>
 800927e:	69bb      	ldr	r3, [r7, #24]
 8009280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009284:	2b00      	cmp	r3, #0
 8009286:	d005      	beq.n	8009294 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800928c:	f043 0201 	orr.w	r2, r3, #1
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009294:	69fb      	ldr	r3, [r7, #28]
 8009296:	f003 0304 	and.w	r3, r3, #4
 800929a:	2b00      	cmp	r3, #0
 800929c:	d00a      	beq.n	80092b4 <HAL_UART_IRQHandler+0xb0>
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	f003 0301 	and.w	r3, r3, #1
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d005      	beq.n	80092b4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092ac:	f043 0202 	orr.w	r2, r3, #2
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80092b4:	69fb      	ldr	r3, [r7, #28]
 80092b6:	f003 0302 	and.w	r3, r3, #2
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d00a      	beq.n	80092d4 <HAL_UART_IRQHandler+0xd0>
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	f003 0301 	and.w	r3, r3, #1
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d005      	beq.n	80092d4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092cc:	f043 0204 	orr.w	r2, r3, #4
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80092d4:	69fb      	ldr	r3, [r7, #28]
 80092d6:	f003 0308 	and.w	r3, r3, #8
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d00f      	beq.n	80092fe <HAL_UART_IRQHandler+0xfa>
 80092de:	69bb      	ldr	r3, [r7, #24]
 80092e0:	f003 0320 	and.w	r3, r3, #32
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d104      	bne.n	80092f2 <HAL_UART_IRQHandler+0xee>
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	f003 0301 	and.w	r3, r3, #1
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d005      	beq.n	80092fe <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092f6:	f043 0208 	orr.w	r2, r3, #8
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009302:	2b00      	cmp	r3, #0
 8009304:	d078      	beq.n	80093f8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009306:	69fb      	ldr	r3, [r7, #28]
 8009308:	f003 0320 	and.w	r3, r3, #32
 800930c:	2b00      	cmp	r3, #0
 800930e:	d007      	beq.n	8009320 <HAL_UART_IRQHandler+0x11c>
 8009310:	69bb      	ldr	r3, [r7, #24]
 8009312:	f003 0320 	and.w	r3, r3, #32
 8009316:	2b00      	cmp	r3, #0
 8009318:	d002      	beq.n	8009320 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 f930 	bl	8009580 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	695b      	ldr	r3, [r3, #20]
 8009326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800932a:	2b40      	cmp	r3, #64	; 0x40
 800932c:	bf0c      	ite	eq
 800932e:	2301      	moveq	r3, #1
 8009330:	2300      	movne	r3, #0
 8009332:	b2db      	uxtb	r3, r3
 8009334:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800933a:	f003 0308 	and.w	r3, r3, #8
 800933e:	2b00      	cmp	r3, #0
 8009340:	d102      	bne.n	8009348 <HAL_UART_IRQHandler+0x144>
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d031      	beq.n	80093ac <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f000 f879 	bl	8009440 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	695b      	ldr	r3, [r3, #20]
 8009354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009358:	2b40      	cmp	r3, #64	; 0x40
 800935a:	d123      	bne.n	80093a4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	695a      	ldr	r2, [r3, #20]
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800936a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009370:	2b00      	cmp	r3, #0
 8009372:	d013      	beq.n	800939c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009378:	4a21      	ldr	r2, [pc, #132]	; (8009400 <HAL_UART_IRQHandler+0x1fc>)
 800937a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009380:	4618      	mov	r0, r3
 8009382:	f7f9 fb11 	bl	80029a8 <HAL_DMA_Abort_IT>
 8009386:	4603      	mov	r3, r0
 8009388:	2b00      	cmp	r3, #0
 800938a:	d016      	beq.n	80093ba <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009390:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009392:	687a      	ldr	r2, [r7, #4]
 8009394:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009396:	4610      	mov	r0, r2
 8009398:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800939a:	e00e      	b.n	80093ba <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f000 f845 	bl	800942c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093a2:	e00a      	b.n	80093ba <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f000 f841 	bl	800942c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093aa:	e006      	b.n	80093ba <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f000 f83d 	bl	800942c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2200      	movs	r2, #0
 80093b6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80093b8:	e01e      	b.n	80093f8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093ba:	bf00      	nop
    return;
 80093bc:	e01c      	b.n	80093f8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80093be:	69fb      	ldr	r3, [r7, #28]
 80093c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d008      	beq.n	80093da <HAL_UART_IRQHandler+0x1d6>
 80093c8:	69bb      	ldr	r3, [r7, #24]
 80093ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d003      	beq.n	80093da <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f000 f866 	bl	80094a4 <UART_Transmit_IT>
    return;
 80093d8:	e00f      	b.n	80093fa <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80093da:	69fb      	ldr	r3, [r7, #28]
 80093dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d00a      	beq.n	80093fa <HAL_UART_IRQHandler+0x1f6>
 80093e4:	69bb      	ldr	r3, [r7, #24]
 80093e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d005      	beq.n	80093fa <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f000 f8ae 	bl	8009550 <UART_EndTransmit_IT>
    return;
 80093f4:	bf00      	nop
 80093f6:	e000      	b.n	80093fa <HAL_UART_IRQHandler+0x1f6>
    return;
 80093f8:	bf00      	nop
  }
}
 80093fa:	3720      	adds	r7, #32
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}
 8009400:	0800947d 	.word	0x0800947d

08009404 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009404:	b480      	push	{r7}
 8009406:	b083      	sub	sp, #12
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800940c:	bf00      	nop
 800940e:	370c      	adds	r7, #12
 8009410:	46bd      	mov	sp, r7
 8009412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009416:	4770      	bx	lr

08009418 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009418:	b480      	push	{r7}
 800941a:	b083      	sub	sp, #12
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009420:	bf00      	nop
 8009422:	370c      	adds	r7, #12
 8009424:	46bd      	mov	sp, r7
 8009426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942a:	4770      	bx	lr

0800942c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800942c:	b480      	push	{r7}
 800942e:	b083      	sub	sp, #12
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009434:	bf00      	nop
 8009436:	370c      	adds	r7, #12
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr

08009440 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009440:	b480      	push	{r7}
 8009442:	b083      	sub	sp, #12
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	68da      	ldr	r2, [r3, #12]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009456:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	695a      	ldr	r2, [r3, #20]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f022 0201 	bic.w	r2, r2, #1
 8009466:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2220      	movs	r2, #32
 800946c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8009470:	bf00      	nop
 8009472:	370c      	adds	r7, #12
 8009474:	46bd      	mov	sp, r7
 8009476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947a:	4770      	bx	lr

0800947c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b084      	sub	sp, #16
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009488:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2200      	movs	r2, #0
 800948e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	2200      	movs	r2, #0
 8009494:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009496:	68f8      	ldr	r0, [r7, #12]
 8009498:	f7ff ffc8 	bl	800942c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800949c:	bf00      	nop
 800949e:	3710      	adds	r7, #16
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}

080094a4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80094a4:	b480      	push	{r7}
 80094a6:	b085      	sub	sp, #20
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80094b2:	b2db      	uxtb	r3, r3
 80094b4:	2b21      	cmp	r3, #33	; 0x21
 80094b6:	d144      	bne.n	8009542 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	689b      	ldr	r3, [r3, #8]
 80094bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094c0:	d11a      	bne.n	80094f8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6a1b      	ldr	r3, [r3, #32]
 80094c6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	881b      	ldrh	r3, [r3, #0]
 80094cc:	461a      	mov	r2, r3
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80094d6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	691b      	ldr	r3, [r3, #16]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d105      	bne.n	80094ec <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6a1b      	ldr	r3, [r3, #32]
 80094e4:	1c9a      	adds	r2, r3, #2
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	621a      	str	r2, [r3, #32]
 80094ea:	e00e      	b.n	800950a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6a1b      	ldr	r3, [r3, #32]
 80094f0:	1c5a      	adds	r2, r3, #1
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	621a      	str	r2, [r3, #32]
 80094f6:	e008      	b.n	800950a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6a1b      	ldr	r3, [r3, #32]
 80094fc:	1c59      	adds	r1, r3, #1
 80094fe:	687a      	ldr	r2, [r7, #4]
 8009500:	6211      	str	r1, [r2, #32]
 8009502:	781a      	ldrb	r2, [r3, #0]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800950e:	b29b      	uxth	r3, r3
 8009510:	3b01      	subs	r3, #1
 8009512:	b29b      	uxth	r3, r3
 8009514:	687a      	ldr	r2, [r7, #4]
 8009516:	4619      	mov	r1, r3
 8009518:	84d1      	strh	r1, [r2, #38]	; 0x26
 800951a:	2b00      	cmp	r3, #0
 800951c:	d10f      	bne.n	800953e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	68da      	ldr	r2, [r3, #12]
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800952c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	68da      	ldr	r2, [r3, #12]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800953c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800953e:	2300      	movs	r3, #0
 8009540:	e000      	b.n	8009544 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8009542:	2302      	movs	r3, #2
  }
}
 8009544:	4618      	mov	r0, r3
 8009546:	3714      	adds	r7, #20
 8009548:	46bd      	mov	sp, r7
 800954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954e:	4770      	bx	lr

08009550 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b082      	sub	sp, #8
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	68da      	ldr	r2, [r3, #12]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009566:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2220      	movs	r2, #32
 800956c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f7ff ff47 	bl	8009404 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009576:	2300      	movs	r3, #0
}
 8009578:	4618      	mov	r0, r3
 800957a:	3708      	adds	r7, #8
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}

08009580 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b084      	sub	sp, #16
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800958e:	b2db      	uxtb	r3, r3
 8009590:	2b22      	cmp	r3, #34	; 0x22
 8009592:	d171      	bne.n	8009678 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	689b      	ldr	r3, [r3, #8]
 8009598:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800959c:	d123      	bne.n	80095e6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095a2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	691b      	ldr	r3, [r3, #16]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d10e      	bne.n	80095ca <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	685b      	ldr	r3, [r3, #4]
 80095b2:	b29b      	uxth	r3, r3
 80095b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095b8:	b29a      	uxth	r2, r3
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095c2:	1c9a      	adds	r2, r3, #2
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	629a      	str	r2, [r3, #40]	; 0x28
 80095c8:	e029      	b.n	800961e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	685b      	ldr	r3, [r3, #4]
 80095d0:	b29b      	uxth	r3, r3
 80095d2:	b2db      	uxtb	r3, r3
 80095d4:	b29a      	uxth	r2, r3
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095de:	1c5a      	adds	r2, r3, #1
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	629a      	str	r2, [r3, #40]	; 0x28
 80095e4:	e01b      	b.n	800961e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	691b      	ldr	r3, [r3, #16]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d10a      	bne.n	8009604 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	6858      	ldr	r0, [r3, #4]
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095f8:	1c59      	adds	r1, r3, #1
 80095fa:	687a      	ldr	r2, [r7, #4]
 80095fc:	6291      	str	r1, [r2, #40]	; 0x28
 80095fe:	b2c2      	uxtb	r2, r0
 8009600:	701a      	strb	r2, [r3, #0]
 8009602:	e00c      	b.n	800961e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	685b      	ldr	r3, [r3, #4]
 800960a:	b2da      	uxtb	r2, r3
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009610:	1c58      	adds	r0, r3, #1
 8009612:	6879      	ldr	r1, [r7, #4]
 8009614:	6288      	str	r0, [r1, #40]	; 0x28
 8009616:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800961a:	b2d2      	uxtb	r2, r2
 800961c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009622:	b29b      	uxth	r3, r3
 8009624:	3b01      	subs	r3, #1
 8009626:	b29b      	uxth	r3, r3
 8009628:	687a      	ldr	r2, [r7, #4]
 800962a:	4619      	mov	r1, r3
 800962c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800962e:	2b00      	cmp	r3, #0
 8009630:	d120      	bne.n	8009674 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	68da      	ldr	r2, [r3, #12]
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f022 0220 	bic.w	r2, r2, #32
 8009640:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	68da      	ldr	r2, [r3, #12]
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009650:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	695a      	ldr	r2, [r3, #20]
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f022 0201 	bic.w	r2, r2, #1
 8009660:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2220      	movs	r2, #32
 8009666:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f7ff fed4 	bl	8009418 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8009670:	2300      	movs	r3, #0
 8009672:	e002      	b.n	800967a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8009674:	2300      	movs	r3, #0
 8009676:	e000      	b.n	800967a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8009678:	2302      	movs	r3, #2
  }
}
 800967a:	4618      	mov	r0, r3
 800967c:	3710      	adds	r7, #16
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}
	...

08009684 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009688:	b085      	sub	sp, #20
 800968a:	af00      	add	r7, sp, #0
 800968c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	691b      	ldr	r3, [r3, #16]
 8009694:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	68da      	ldr	r2, [r3, #12]
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	430a      	orrs	r2, r1
 80096a2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	689a      	ldr	r2, [r3, #8]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	691b      	ldr	r3, [r3, #16]
 80096ac:	431a      	orrs	r2, r3
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	695b      	ldr	r3, [r3, #20]
 80096b2:	431a      	orrs	r2, r3
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	69db      	ldr	r3, [r3, #28]
 80096b8:	4313      	orrs	r3, r2
 80096ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	68db      	ldr	r3, [r3, #12]
 80096c2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80096c6:	f023 030c 	bic.w	r3, r3, #12
 80096ca:	687a      	ldr	r2, [r7, #4]
 80096cc:	6812      	ldr	r2, [r2, #0]
 80096ce:	68f9      	ldr	r1, [r7, #12]
 80096d0:	430b      	orrs	r3, r1
 80096d2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	695b      	ldr	r3, [r3, #20]
 80096da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	699a      	ldr	r2, [r3, #24]
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	430a      	orrs	r2, r1
 80096e8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	69db      	ldr	r3, [r3, #28]
 80096ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096f2:	f040 818b 	bne.w	8009a0c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4ac1      	ldr	r2, [pc, #772]	; (8009a00 <UART_SetConfig+0x37c>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d005      	beq.n	800970c <UART_SetConfig+0x88>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	4abf      	ldr	r2, [pc, #764]	; (8009a04 <UART_SetConfig+0x380>)
 8009706:	4293      	cmp	r3, r2
 8009708:	f040 80bd 	bne.w	8009886 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800970c:	f7fe f9ae 	bl	8007a6c <HAL_RCC_GetPCLK2Freq>
 8009710:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	461d      	mov	r5, r3
 8009716:	f04f 0600 	mov.w	r6, #0
 800971a:	46a8      	mov	r8, r5
 800971c:	46b1      	mov	r9, r6
 800971e:	eb18 0308 	adds.w	r3, r8, r8
 8009722:	eb49 0409 	adc.w	r4, r9, r9
 8009726:	4698      	mov	r8, r3
 8009728:	46a1      	mov	r9, r4
 800972a:	eb18 0805 	adds.w	r8, r8, r5
 800972e:	eb49 0906 	adc.w	r9, r9, r6
 8009732:	f04f 0100 	mov.w	r1, #0
 8009736:	f04f 0200 	mov.w	r2, #0
 800973a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800973e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009742:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009746:	4688      	mov	r8, r1
 8009748:	4691      	mov	r9, r2
 800974a:	eb18 0005 	adds.w	r0, r8, r5
 800974e:	eb49 0106 	adc.w	r1, r9, r6
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	685b      	ldr	r3, [r3, #4]
 8009756:	461d      	mov	r5, r3
 8009758:	f04f 0600 	mov.w	r6, #0
 800975c:	196b      	adds	r3, r5, r5
 800975e:	eb46 0406 	adc.w	r4, r6, r6
 8009762:	461a      	mov	r2, r3
 8009764:	4623      	mov	r3, r4
 8009766:	f7f6 fd45 	bl	80001f4 <__aeabi_uldivmod>
 800976a:	4603      	mov	r3, r0
 800976c:	460c      	mov	r4, r1
 800976e:	461a      	mov	r2, r3
 8009770:	4ba5      	ldr	r3, [pc, #660]	; (8009a08 <UART_SetConfig+0x384>)
 8009772:	fba3 2302 	umull	r2, r3, r3, r2
 8009776:	095b      	lsrs	r3, r3, #5
 8009778:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	461d      	mov	r5, r3
 8009780:	f04f 0600 	mov.w	r6, #0
 8009784:	46a9      	mov	r9, r5
 8009786:	46b2      	mov	sl, r6
 8009788:	eb19 0309 	adds.w	r3, r9, r9
 800978c:	eb4a 040a 	adc.w	r4, sl, sl
 8009790:	4699      	mov	r9, r3
 8009792:	46a2      	mov	sl, r4
 8009794:	eb19 0905 	adds.w	r9, r9, r5
 8009798:	eb4a 0a06 	adc.w	sl, sl, r6
 800979c:	f04f 0100 	mov.w	r1, #0
 80097a0:	f04f 0200 	mov.w	r2, #0
 80097a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80097a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80097ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80097b0:	4689      	mov	r9, r1
 80097b2:	4692      	mov	sl, r2
 80097b4:	eb19 0005 	adds.w	r0, r9, r5
 80097b8:	eb4a 0106 	adc.w	r1, sl, r6
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	685b      	ldr	r3, [r3, #4]
 80097c0:	461d      	mov	r5, r3
 80097c2:	f04f 0600 	mov.w	r6, #0
 80097c6:	196b      	adds	r3, r5, r5
 80097c8:	eb46 0406 	adc.w	r4, r6, r6
 80097cc:	461a      	mov	r2, r3
 80097ce:	4623      	mov	r3, r4
 80097d0:	f7f6 fd10 	bl	80001f4 <__aeabi_uldivmod>
 80097d4:	4603      	mov	r3, r0
 80097d6:	460c      	mov	r4, r1
 80097d8:	461a      	mov	r2, r3
 80097da:	4b8b      	ldr	r3, [pc, #556]	; (8009a08 <UART_SetConfig+0x384>)
 80097dc:	fba3 1302 	umull	r1, r3, r3, r2
 80097e0:	095b      	lsrs	r3, r3, #5
 80097e2:	2164      	movs	r1, #100	; 0x64
 80097e4:	fb01 f303 	mul.w	r3, r1, r3
 80097e8:	1ad3      	subs	r3, r2, r3
 80097ea:	00db      	lsls	r3, r3, #3
 80097ec:	3332      	adds	r3, #50	; 0x32
 80097ee:	4a86      	ldr	r2, [pc, #536]	; (8009a08 <UART_SetConfig+0x384>)
 80097f0:	fba2 2303 	umull	r2, r3, r2, r3
 80097f4:	095b      	lsrs	r3, r3, #5
 80097f6:	005b      	lsls	r3, r3, #1
 80097f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80097fc:	4498      	add	r8, r3
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	461d      	mov	r5, r3
 8009802:	f04f 0600 	mov.w	r6, #0
 8009806:	46a9      	mov	r9, r5
 8009808:	46b2      	mov	sl, r6
 800980a:	eb19 0309 	adds.w	r3, r9, r9
 800980e:	eb4a 040a 	adc.w	r4, sl, sl
 8009812:	4699      	mov	r9, r3
 8009814:	46a2      	mov	sl, r4
 8009816:	eb19 0905 	adds.w	r9, r9, r5
 800981a:	eb4a 0a06 	adc.w	sl, sl, r6
 800981e:	f04f 0100 	mov.w	r1, #0
 8009822:	f04f 0200 	mov.w	r2, #0
 8009826:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800982a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800982e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009832:	4689      	mov	r9, r1
 8009834:	4692      	mov	sl, r2
 8009836:	eb19 0005 	adds.w	r0, r9, r5
 800983a:	eb4a 0106 	adc.w	r1, sl, r6
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	685b      	ldr	r3, [r3, #4]
 8009842:	461d      	mov	r5, r3
 8009844:	f04f 0600 	mov.w	r6, #0
 8009848:	196b      	adds	r3, r5, r5
 800984a:	eb46 0406 	adc.w	r4, r6, r6
 800984e:	461a      	mov	r2, r3
 8009850:	4623      	mov	r3, r4
 8009852:	f7f6 fccf 	bl	80001f4 <__aeabi_uldivmod>
 8009856:	4603      	mov	r3, r0
 8009858:	460c      	mov	r4, r1
 800985a:	461a      	mov	r2, r3
 800985c:	4b6a      	ldr	r3, [pc, #424]	; (8009a08 <UART_SetConfig+0x384>)
 800985e:	fba3 1302 	umull	r1, r3, r3, r2
 8009862:	095b      	lsrs	r3, r3, #5
 8009864:	2164      	movs	r1, #100	; 0x64
 8009866:	fb01 f303 	mul.w	r3, r1, r3
 800986a:	1ad3      	subs	r3, r2, r3
 800986c:	00db      	lsls	r3, r3, #3
 800986e:	3332      	adds	r3, #50	; 0x32
 8009870:	4a65      	ldr	r2, [pc, #404]	; (8009a08 <UART_SetConfig+0x384>)
 8009872:	fba2 2303 	umull	r2, r3, r2, r3
 8009876:	095b      	lsrs	r3, r3, #5
 8009878:	f003 0207 	and.w	r2, r3, #7
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	4442      	add	r2, r8
 8009882:	609a      	str	r2, [r3, #8]
 8009884:	e26f      	b.n	8009d66 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009886:	f7fe f8dd 	bl	8007a44 <HAL_RCC_GetPCLK1Freq>
 800988a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	461d      	mov	r5, r3
 8009890:	f04f 0600 	mov.w	r6, #0
 8009894:	46a8      	mov	r8, r5
 8009896:	46b1      	mov	r9, r6
 8009898:	eb18 0308 	adds.w	r3, r8, r8
 800989c:	eb49 0409 	adc.w	r4, r9, r9
 80098a0:	4698      	mov	r8, r3
 80098a2:	46a1      	mov	r9, r4
 80098a4:	eb18 0805 	adds.w	r8, r8, r5
 80098a8:	eb49 0906 	adc.w	r9, r9, r6
 80098ac:	f04f 0100 	mov.w	r1, #0
 80098b0:	f04f 0200 	mov.w	r2, #0
 80098b4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80098b8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80098bc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80098c0:	4688      	mov	r8, r1
 80098c2:	4691      	mov	r9, r2
 80098c4:	eb18 0005 	adds.w	r0, r8, r5
 80098c8:	eb49 0106 	adc.w	r1, r9, r6
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	685b      	ldr	r3, [r3, #4]
 80098d0:	461d      	mov	r5, r3
 80098d2:	f04f 0600 	mov.w	r6, #0
 80098d6:	196b      	adds	r3, r5, r5
 80098d8:	eb46 0406 	adc.w	r4, r6, r6
 80098dc:	461a      	mov	r2, r3
 80098de:	4623      	mov	r3, r4
 80098e0:	f7f6 fc88 	bl	80001f4 <__aeabi_uldivmod>
 80098e4:	4603      	mov	r3, r0
 80098e6:	460c      	mov	r4, r1
 80098e8:	461a      	mov	r2, r3
 80098ea:	4b47      	ldr	r3, [pc, #284]	; (8009a08 <UART_SetConfig+0x384>)
 80098ec:	fba3 2302 	umull	r2, r3, r3, r2
 80098f0:	095b      	lsrs	r3, r3, #5
 80098f2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	461d      	mov	r5, r3
 80098fa:	f04f 0600 	mov.w	r6, #0
 80098fe:	46a9      	mov	r9, r5
 8009900:	46b2      	mov	sl, r6
 8009902:	eb19 0309 	adds.w	r3, r9, r9
 8009906:	eb4a 040a 	adc.w	r4, sl, sl
 800990a:	4699      	mov	r9, r3
 800990c:	46a2      	mov	sl, r4
 800990e:	eb19 0905 	adds.w	r9, r9, r5
 8009912:	eb4a 0a06 	adc.w	sl, sl, r6
 8009916:	f04f 0100 	mov.w	r1, #0
 800991a:	f04f 0200 	mov.w	r2, #0
 800991e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009922:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009926:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800992a:	4689      	mov	r9, r1
 800992c:	4692      	mov	sl, r2
 800992e:	eb19 0005 	adds.w	r0, r9, r5
 8009932:	eb4a 0106 	adc.w	r1, sl, r6
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	685b      	ldr	r3, [r3, #4]
 800993a:	461d      	mov	r5, r3
 800993c:	f04f 0600 	mov.w	r6, #0
 8009940:	196b      	adds	r3, r5, r5
 8009942:	eb46 0406 	adc.w	r4, r6, r6
 8009946:	461a      	mov	r2, r3
 8009948:	4623      	mov	r3, r4
 800994a:	f7f6 fc53 	bl	80001f4 <__aeabi_uldivmod>
 800994e:	4603      	mov	r3, r0
 8009950:	460c      	mov	r4, r1
 8009952:	461a      	mov	r2, r3
 8009954:	4b2c      	ldr	r3, [pc, #176]	; (8009a08 <UART_SetConfig+0x384>)
 8009956:	fba3 1302 	umull	r1, r3, r3, r2
 800995a:	095b      	lsrs	r3, r3, #5
 800995c:	2164      	movs	r1, #100	; 0x64
 800995e:	fb01 f303 	mul.w	r3, r1, r3
 8009962:	1ad3      	subs	r3, r2, r3
 8009964:	00db      	lsls	r3, r3, #3
 8009966:	3332      	adds	r3, #50	; 0x32
 8009968:	4a27      	ldr	r2, [pc, #156]	; (8009a08 <UART_SetConfig+0x384>)
 800996a:	fba2 2303 	umull	r2, r3, r2, r3
 800996e:	095b      	lsrs	r3, r3, #5
 8009970:	005b      	lsls	r3, r3, #1
 8009972:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009976:	4498      	add	r8, r3
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	461d      	mov	r5, r3
 800997c:	f04f 0600 	mov.w	r6, #0
 8009980:	46a9      	mov	r9, r5
 8009982:	46b2      	mov	sl, r6
 8009984:	eb19 0309 	adds.w	r3, r9, r9
 8009988:	eb4a 040a 	adc.w	r4, sl, sl
 800998c:	4699      	mov	r9, r3
 800998e:	46a2      	mov	sl, r4
 8009990:	eb19 0905 	adds.w	r9, r9, r5
 8009994:	eb4a 0a06 	adc.w	sl, sl, r6
 8009998:	f04f 0100 	mov.w	r1, #0
 800999c:	f04f 0200 	mov.w	r2, #0
 80099a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80099a4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80099a8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80099ac:	4689      	mov	r9, r1
 80099ae:	4692      	mov	sl, r2
 80099b0:	eb19 0005 	adds.w	r0, r9, r5
 80099b4:	eb4a 0106 	adc.w	r1, sl, r6
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	685b      	ldr	r3, [r3, #4]
 80099bc:	461d      	mov	r5, r3
 80099be:	f04f 0600 	mov.w	r6, #0
 80099c2:	196b      	adds	r3, r5, r5
 80099c4:	eb46 0406 	adc.w	r4, r6, r6
 80099c8:	461a      	mov	r2, r3
 80099ca:	4623      	mov	r3, r4
 80099cc:	f7f6 fc12 	bl	80001f4 <__aeabi_uldivmod>
 80099d0:	4603      	mov	r3, r0
 80099d2:	460c      	mov	r4, r1
 80099d4:	461a      	mov	r2, r3
 80099d6:	4b0c      	ldr	r3, [pc, #48]	; (8009a08 <UART_SetConfig+0x384>)
 80099d8:	fba3 1302 	umull	r1, r3, r3, r2
 80099dc:	095b      	lsrs	r3, r3, #5
 80099de:	2164      	movs	r1, #100	; 0x64
 80099e0:	fb01 f303 	mul.w	r3, r1, r3
 80099e4:	1ad3      	subs	r3, r2, r3
 80099e6:	00db      	lsls	r3, r3, #3
 80099e8:	3332      	adds	r3, #50	; 0x32
 80099ea:	4a07      	ldr	r2, [pc, #28]	; (8009a08 <UART_SetConfig+0x384>)
 80099ec:	fba2 2303 	umull	r2, r3, r2, r3
 80099f0:	095b      	lsrs	r3, r3, #5
 80099f2:	f003 0207 	and.w	r2, r3, #7
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	4442      	add	r2, r8
 80099fc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80099fe:	e1b2      	b.n	8009d66 <UART_SetConfig+0x6e2>
 8009a00:	40011000 	.word	0x40011000
 8009a04:	40011400 	.word	0x40011400
 8009a08:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4ad7      	ldr	r2, [pc, #860]	; (8009d70 <UART_SetConfig+0x6ec>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d005      	beq.n	8009a22 <UART_SetConfig+0x39e>
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	4ad6      	ldr	r2, [pc, #856]	; (8009d74 <UART_SetConfig+0x6f0>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	f040 80d1 	bne.w	8009bc4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8009a22:	f7fe f823 	bl	8007a6c <HAL_RCC_GetPCLK2Freq>
 8009a26:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	469a      	mov	sl, r3
 8009a2c:	f04f 0b00 	mov.w	fp, #0
 8009a30:	46d0      	mov	r8, sl
 8009a32:	46d9      	mov	r9, fp
 8009a34:	eb18 0308 	adds.w	r3, r8, r8
 8009a38:	eb49 0409 	adc.w	r4, r9, r9
 8009a3c:	4698      	mov	r8, r3
 8009a3e:	46a1      	mov	r9, r4
 8009a40:	eb18 080a 	adds.w	r8, r8, sl
 8009a44:	eb49 090b 	adc.w	r9, r9, fp
 8009a48:	f04f 0100 	mov.w	r1, #0
 8009a4c:	f04f 0200 	mov.w	r2, #0
 8009a50:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009a54:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009a58:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009a5c:	4688      	mov	r8, r1
 8009a5e:	4691      	mov	r9, r2
 8009a60:	eb1a 0508 	adds.w	r5, sl, r8
 8009a64:	eb4b 0609 	adc.w	r6, fp, r9
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	685b      	ldr	r3, [r3, #4]
 8009a6c:	4619      	mov	r1, r3
 8009a6e:	f04f 0200 	mov.w	r2, #0
 8009a72:	f04f 0300 	mov.w	r3, #0
 8009a76:	f04f 0400 	mov.w	r4, #0
 8009a7a:	0094      	lsls	r4, r2, #2
 8009a7c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009a80:	008b      	lsls	r3, r1, #2
 8009a82:	461a      	mov	r2, r3
 8009a84:	4623      	mov	r3, r4
 8009a86:	4628      	mov	r0, r5
 8009a88:	4631      	mov	r1, r6
 8009a8a:	f7f6 fbb3 	bl	80001f4 <__aeabi_uldivmod>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	460c      	mov	r4, r1
 8009a92:	461a      	mov	r2, r3
 8009a94:	4bb8      	ldr	r3, [pc, #736]	; (8009d78 <UART_SetConfig+0x6f4>)
 8009a96:	fba3 2302 	umull	r2, r3, r3, r2
 8009a9a:	095b      	lsrs	r3, r3, #5
 8009a9c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	469b      	mov	fp, r3
 8009aa4:	f04f 0c00 	mov.w	ip, #0
 8009aa8:	46d9      	mov	r9, fp
 8009aaa:	46e2      	mov	sl, ip
 8009aac:	eb19 0309 	adds.w	r3, r9, r9
 8009ab0:	eb4a 040a 	adc.w	r4, sl, sl
 8009ab4:	4699      	mov	r9, r3
 8009ab6:	46a2      	mov	sl, r4
 8009ab8:	eb19 090b 	adds.w	r9, r9, fp
 8009abc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009ac0:	f04f 0100 	mov.w	r1, #0
 8009ac4:	f04f 0200 	mov.w	r2, #0
 8009ac8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009acc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009ad0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009ad4:	4689      	mov	r9, r1
 8009ad6:	4692      	mov	sl, r2
 8009ad8:	eb1b 0509 	adds.w	r5, fp, r9
 8009adc:	eb4c 060a 	adc.w	r6, ip, sl
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	685b      	ldr	r3, [r3, #4]
 8009ae4:	4619      	mov	r1, r3
 8009ae6:	f04f 0200 	mov.w	r2, #0
 8009aea:	f04f 0300 	mov.w	r3, #0
 8009aee:	f04f 0400 	mov.w	r4, #0
 8009af2:	0094      	lsls	r4, r2, #2
 8009af4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009af8:	008b      	lsls	r3, r1, #2
 8009afa:	461a      	mov	r2, r3
 8009afc:	4623      	mov	r3, r4
 8009afe:	4628      	mov	r0, r5
 8009b00:	4631      	mov	r1, r6
 8009b02:	f7f6 fb77 	bl	80001f4 <__aeabi_uldivmod>
 8009b06:	4603      	mov	r3, r0
 8009b08:	460c      	mov	r4, r1
 8009b0a:	461a      	mov	r2, r3
 8009b0c:	4b9a      	ldr	r3, [pc, #616]	; (8009d78 <UART_SetConfig+0x6f4>)
 8009b0e:	fba3 1302 	umull	r1, r3, r3, r2
 8009b12:	095b      	lsrs	r3, r3, #5
 8009b14:	2164      	movs	r1, #100	; 0x64
 8009b16:	fb01 f303 	mul.w	r3, r1, r3
 8009b1a:	1ad3      	subs	r3, r2, r3
 8009b1c:	011b      	lsls	r3, r3, #4
 8009b1e:	3332      	adds	r3, #50	; 0x32
 8009b20:	4a95      	ldr	r2, [pc, #596]	; (8009d78 <UART_SetConfig+0x6f4>)
 8009b22:	fba2 2303 	umull	r2, r3, r2, r3
 8009b26:	095b      	lsrs	r3, r3, #5
 8009b28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b2c:	4498      	add	r8, r3
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	469b      	mov	fp, r3
 8009b32:	f04f 0c00 	mov.w	ip, #0
 8009b36:	46d9      	mov	r9, fp
 8009b38:	46e2      	mov	sl, ip
 8009b3a:	eb19 0309 	adds.w	r3, r9, r9
 8009b3e:	eb4a 040a 	adc.w	r4, sl, sl
 8009b42:	4699      	mov	r9, r3
 8009b44:	46a2      	mov	sl, r4
 8009b46:	eb19 090b 	adds.w	r9, r9, fp
 8009b4a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009b4e:	f04f 0100 	mov.w	r1, #0
 8009b52:	f04f 0200 	mov.w	r2, #0
 8009b56:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009b5a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009b5e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009b62:	4689      	mov	r9, r1
 8009b64:	4692      	mov	sl, r2
 8009b66:	eb1b 0509 	adds.w	r5, fp, r9
 8009b6a:	eb4c 060a 	adc.w	r6, ip, sl
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	685b      	ldr	r3, [r3, #4]
 8009b72:	4619      	mov	r1, r3
 8009b74:	f04f 0200 	mov.w	r2, #0
 8009b78:	f04f 0300 	mov.w	r3, #0
 8009b7c:	f04f 0400 	mov.w	r4, #0
 8009b80:	0094      	lsls	r4, r2, #2
 8009b82:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009b86:	008b      	lsls	r3, r1, #2
 8009b88:	461a      	mov	r2, r3
 8009b8a:	4623      	mov	r3, r4
 8009b8c:	4628      	mov	r0, r5
 8009b8e:	4631      	mov	r1, r6
 8009b90:	f7f6 fb30 	bl	80001f4 <__aeabi_uldivmod>
 8009b94:	4603      	mov	r3, r0
 8009b96:	460c      	mov	r4, r1
 8009b98:	461a      	mov	r2, r3
 8009b9a:	4b77      	ldr	r3, [pc, #476]	; (8009d78 <UART_SetConfig+0x6f4>)
 8009b9c:	fba3 1302 	umull	r1, r3, r3, r2
 8009ba0:	095b      	lsrs	r3, r3, #5
 8009ba2:	2164      	movs	r1, #100	; 0x64
 8009ba4:	fb01 f303 	mul.w	r3, r1, r3
 8009ba8:	1ad3      	subs	r3, r2, r3
 8009baa:	011b      	lsls	r3, r3, #4
 8009bac:	3332      	adds	r3, #50	; 0x32
 8009bae:	4a72      	ldr	r2, [pc, #456]	; (8009d78 <UART_SetConfig+0x6f4>)
 8009bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8009bb4:	095b      	lsrs	r3, r3, #5
 8009bb6:	f003 020f 	and.w	r2, r3, #15
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	4442      	add	r2, r8
 8009bc0:	609a      	str	r2, [r3, #8]
 8009bc2:	e0d0      	b.n	8009d66 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8009bc4:	f7fd ff3e 	bl	8007a44 <HAL_RCC_GetPCLK1Freq>
 8009bc8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	469a      	mov	sl, r3
 8009bce:	f04f 0b00 	mov.w	fp, #0
 8009bd2:	46d0      	mov	r8, sl
 8009bd4:	46d9      	mov	r9, fp
 8009bd6:	eb18 0308 	adds.w	r3, r8, r8
 8009bda:	eb49 0409 	adc.w	r4, r9, r9
 8009bde:	4698      	mov	r8, r3
 8009be0:	46a1      	mov	r9, r4
 8009be2:	eb18 080a 	adds.w	r8, r8, sl
 8009be6:	eb49 090b 	adc.w	r9, r9, fp
 8009bea:	f04f 0100 	mov.w	r1, #0
 8009bee:	f04f 0200 	mov.w	r2, #0
 8009bf2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009bf6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009bfa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009bfe:	4688      	mov	r8, r1
 8009c00:	4691      	mov	r9, r2
 8009c02:	eb1a 0508 	adds.w	r5, sl, r8
 8009c06:	eb4b 0609 	adc.w	r6, fp, r9
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	685b      	ldr	r3, [r3, #4]
 8009c0e:	4619      	mov	r1, r3
 8009c10:	f04f 0200 	mov.w	r2, #0
 8009c14:	f04f 0300 	mov.w	r3, #0
 8009c18:	f04f 0400 	mov.w	r4, #0
 8009c1c:	0094      	lsls	r4, r2, #2
 8009c1e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009c22:	008b      	lsls	r3, r1, #2
 8009c24:	461a      	mov	r2, r3
 8009c26:	4623      	mov	r3, r4
 8009c28:	4628      	mov	r0, r5
 8009c2a:	4631      	mov	r1, r6
 8009c2c:	f7f6 fae2 	bl	80001f4 <__aeabi_uldivmod>
 8009c30:	4603      	mov	r3, r0
 8009c32:	460c      	mov	r4, r1
 8009c34:	461a      	mov	r2, r3
 8009c36:	4b50      	ldr	r3, [pc, #320]	; (8009d78 <UART_SetConfig+0x6f4>)
 8009c38:	fba3 2302 	umull	r2, r3, r3, r2
 8009c3c:	095b      	lsrs	r3, r3, #5
 8009c3e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	469b      	mov	fp, r3
 8009c46:	f04f 0c00 	mov.w	ip, #0
 8009c4a:	46d9      	mov	r9, fp
 8009c4c:	46e2      	mov	sl, ip
 8009c4e:	eb19 0309 	adds.w	r3, r9, r9
 8009c52:	eb4a 040a 	adc.w	r4, sl, sl
 8009c56:	4699      	mov	r9, r3
 8009c58:	46a2      	mov	sl, r4
 8009c5a:	eb19 090b 	adds.w	r9, r9, fp
 8009c5e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009c62:	f04f 0100 	mov.w	r1, #0
 8009c66:	f04f 0200 	mov.w	r2, #0
 8009c6a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009c6e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009c72:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009c76:	4689      	mov	r9, r1
 8009c78:	4692      	mov	sl, r2
 8009c7a:	eb1b 0509 	adds.w	r5, fp, r9
 8009c7e:	eb4c 060a 	adc.w	r6, ip, sl
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	685b      	ldr	r3, [r3, #4]
 8009c86:	4619      	mov	r1, r3
 8009c88:	f04f 0200 	mov.w	r2, #0
 8009c8c:	f04f 0300 	mov.w	r3, #0
 8009c90:	f04f 0400 	mov.w	r4, #0
 8009c94:	0094      	lsls	r4, r2, #2
 8009c96:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009c9a:	008b      	lsls	r3, r1, #2
 8009c9c:	461a      	mov	r2, r3
 8009c9e:	4623      	mov	r3, r4
 8009ca0:	4628      	mov	r0, r5
 8009ca2:	4631      	mov	r1, r6
 8009ca4:	f7f6 faa6 	bl	80001f4 <__aeabi_uldivmod>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	460c      	mov	r4, r1
 8009cac:	461a      	mov	r2, r3
 8009cae:	4b32      	ldr	r3, [pc, #200]	; (8009d78 <UART_SetConfig+0x6f4>)
 8009cb0:	fba3 1302 	umull	r1, r3, r3, r2
 8009cb4:	095b      	lsrs	r3, r3, #5
 8009cb6:	2164      	movs	r1, #100	; 0x64
 8009cb8:	fb01 f303 	mul.w	r3, r1, r3
 8009cbc:	1ad3      	subs	r3, r2, r3
 8009cbe:	011b      	lsls	r3, r3, #4
 8009cc0:	3332      	adds	r3, #50	; 0x32
 8009cc2:	4a2d      	ldr	r2, [pc, #180]	; (8009d78 <UART_SetConfig+0x6f4>)
 8009cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8009cc8:	095b      	lsrs	r3, r3, #5
 8009cca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009cce:	4498      	add	r8, r3
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	469b      	mov	fp, r3
 8009cd4:	f04f 0c00 	mov.w	ip, #0
 8009cd8:	46d9      	mov	r9, fp
 8009cda:	46e2      	mov	sl, ip
 8009cdc:	eb19 0309 	adds.w	r3, r9, r9
 8009ce0:	eb4a 040a 	adc.w	r4, sl, sl
 8009ce4:	4699      	mov	r9, r3
 8009ce6:	46a2      	mov	sl, r4
 8009ce8:	eb19 090b 	adds.w	r9, r9, fp
 8009cec:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009cf0:	f04f 0100 	mov.w	r1, #0
 8009cf4:	f04f 0200 	mov.w	r2, #0
 8009cf8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009cfc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009d00:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009d04:	4689      	mov	r9, r1
 8009d06:	4692      	mov	sl, r2
 8009d08:	eb1b 0509 	adds.w	r5, fp, r9
 8009d0c:	eb4c 060a 	adc.w	r6, ip, sl
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	685b      	ldr	r3, [r3, #4]
 8009d14:	4619      	mov	r1, r3
 8009d16:	f04f 0200 	mov.w	r2, #0
 8009d1a:	f04f 0300 	mov.w	r3, #0
 8009d1e:	f04f 0400 	mov.w	r4, #0
 8009d22:	0094      	lsls	r4, r2, #2
 8009d24:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009d28:	008b      	lsls	r3, r1, #2
 8009d2a:	461a      	mov	r2, r3
 8009d2c:	4623      	mov	r3, r4
 8009d2e:	4628      	mov	r0, r5
 8009d30:	4631      	mov	r1, r6
 8009d32:	f7f6 fa5f 	bl	80001f4 <__aeabi_uldivmod>
 8009d36:	4603      	mov	r3, r0
 8009d38:	460c      	mov	r4, r1
 8009d3a:	461a      	mov	r2, r3
 8009d3c:	4b0e      	ldr	r3, [pc, #56]	; (8009d78 <UART_SetConfig+0x6f4>)
 8009d3e:	fba3 1302 	umull	r1, r3, r3, r2
 8009d42:	095b      	lsrs	r3, r3, #5
 8009d44:	2164      	movs	r1, #100	; 0x64
 8009d46:	fb01 f303 	mul.w	r3, r1, r3
 8009d4a:	1ad3      	subs	r3, r2, r3
 8009d4c:	011b      	lsls	r3, r3, #4
 8009d4e:	3332      	adds	r3, #50	; 0x32
 8009d50:	4a09      	ldr	r2, [pc, #36]	; (8009d78 <UART_SetConfig+0x6f4>)
 8009d52:	fba2 2303 	umull	r2, r3, r2, r3
 8009d56:	095b      	lsrs	r3, r3, #5
 8009d58:	f003 020f 	and.w	r2, r3, #15
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4442      	add	r2, r8
 8009d62:	609a      	str	r2, [r3, #8]
}
 8009d64:	e7ff      	b.n	8009d66 <UART_SetConfig+0x6e2>
 8009d66:	bf00      	nop
 8009d68:	3714      	adds	r7, #20
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d70:	40011000 	.word	0x40011000
 8009d74:	40011400 	.word	0x40011400
 8009d78:	51eb851f 	.word	0x51eb851f

08009d7c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009d7c:	b084      	sub	sp, #16
 8009d7e:	b580      	push	{r7, lr}
 8009d80:	b084      	sub	sp, #16
 8009d82:	af00      	add	r7, sp, #0
 8009d84:	6078      	str	r0, [r7, #4]
 8009d86:	f107 001c 	add.w	r0, r7, #28
 8009d8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d90:	2b01      	cmp	r3, #1
 8009d92:	d122      	bne.n	8009dda <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d98:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	68db      	ldr	r3, [r3, #12]
 8009da4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009da8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009dac:	687a      	ldr	r2, [r7, #4]
 8009dae:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	68db      	ldr	r3, [r3, #12]
 8009db4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009dbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009dbe:	2b01      	cmp	r3, #1
 8009dc0:	d105      	bne.n	8009dce <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	68db      	ldr	r3, [r3, #12]
 8009dc6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f001 fac6 	bl	800b360 <USB_CoreReset>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	73fb      	strb	r3, [r7, #15]
 8009dd8:	e01a      	b.n	8009e10 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	68db      	ldr	r3, [r3, #12]
 8009dde:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f001 faba 	bl	800b360 <USB_CoreReset>
 8009dec:	4603      	mov	r3, r0
 8009dee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009df0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d106      	bne.n	8009e04 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dfa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	639a      	str	r2, [r3, #56]	; 0x38
 8009e02:	e005      	b.n	8009e10 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e12:	2b01      	cmp	r3, #1
 8009e14:	d10b      	bne.n	8009e2e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	689b      	ldr	r3, [r3, #8]
 8009e1a:	f043 0206 	orr.w	r2, r3, #6
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	689b      	ldr	r3, [r3, #8]
 8009e26:	f043 0220 	orr.w	r2, r3, #32
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3710      	adds	r7, #16
 8009e34:	46bd      	mov	sp, r7
 8009e36:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009e3a:	b004      	add	sp, #16
 8009e3c:	4770      	bx	lr
	...

08009e40 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009e40:	b480      	push	{r7}
 8009e42:	b087      	sub	sp, #28
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	60f8      	str	r0, [r7, #12]
 8009e48:	60b9      	str	r1, [r7, #8]
 8009e4a:	4613      	mov	r3, r2
 8009e4c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009e4e:	79fb      	ldrb	r3, [r7, #7]
 8009e50:	2b02      	cmp	r3, #2
 8009e52:	d165      	bne.n	8009f20 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	4a41      	ldr	r2, [pc, #260]	; (8009f5c <USB_SetTurnaroundTime+0x11c>)
 8009e58:	4293      	cmp	r3, r2
 8009e5a:	d906      	bls.n	8009e6a <USB_SetTurnaroundTime+0x2a>
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	4a40      	ldr	r2, [pc, #256]	; (8009f60 <USB_SetTurnaroundTime+0x120>)
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d802      	bhi.n	8009e6a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009e64:	230f      	movs	r3, #15
 8009e66:	617b      	str	r3, [r7, #20]
 8009e68:	e062      	b.n	8009f30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	4a3c      	ldr	r2, [pc, #240]	; (8009f60 <USB_SetTurnaroundTime+0x120>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d906      	bls.n	8009e80 <USB_SetTurnaroundTime+0x40>
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	4a3b      	ldr	r2, [pc, #236]	; (8009f64 <USB_SetTurnaroundTime+0x124>)
 8009e76:	4293      	cmp	r3, r2
 8009e78:	d802      	bhi.n	8009e80 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009e7a:	230e      	movs	r3, #14
 8009e7c:	617b      	str	r3, [r7, #20]
 8009e7e:	e057      	b.n	8009f30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	4a38      	ldr	r2, [pc, #224]	; (8009f64 <USB_SetTurnaroundTime+0x124>)
 8009e84:	4293      	cmp	r3, r2
 8009e86:	d906      	bls.n	8009e96 <USB_SetTurnaroundTime+0x56>
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	4a37      	ldr	r2, [pc, #220]	; (8009f68 <USB_SetTurnaroundTime+0x128>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d802      	bhi.n	8009e96 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009e90:	230d      	movs	r3, #13
 8009e92:	617b      	str	r3, [r7, #20]
 8009e94:	e04c      	b.n	8009f30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	4a33      	ldr	r2, [pc, #204]	; (8009f68 <USB_SetTurnaroundTime+0x128>)
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	d906      	bls.n	8009eac <USB_SetTurnaroundTime+0x6c>
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	4a32      	ldr	r2, [pc, #200]	; (8009f6c <USB_SetTurnaroundTime+0x12c>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d802      	bhi.n	8009eac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009ea6:	230c      	movs	r3, #12
 8009ea8:	617b      	str	r3, [r7, #20]
 8009eaa:	e041      	b.n	8009f30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	4a2f      	ldr	r2, [pc, #188]	; (8009f6c <USB_SetTurnaroundTime+0x12c>)
 8009eb0:	4293      	cmp	r3, r2
 8009eb2:	d906      	bls.n	8009ec2 <USB_SetTurnaroundTime+0x82>
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	4a2e      	ldr	r2, [pc, #184]	; (8009f70 <USB_SetTurnaroundTime+0x130>)
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d802      	bhi.n	8009ec2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009ebc:	230b      	movs	r3, #11
 8009ebe:	617b      	str	r3, [r7, #20]
 8009ec0:	e036      	b.n	8009f30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	4a2a      	ldr	r2, [pc, #168]	; (8009f70 <USB_SetTurnaroundTime+0x130>)
 8009ec6:	4293      	cmp	r3, r2
 8009ec8:	d906      	bls.n	8009ed8 <USB_SetTurnaroundTime+0x98>
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	4a29      	ldr	r2, [pc, #164]	; (8009f74 <USB_SetTurnaroundTime+0x134>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d802      	bhi.n	8009ed8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009ed2:	230a      	movs	r3, #10
 8009ed4:	617b      	str	r3, [r7, #20]
 8009ed6:	e02b      	b.n	8009f30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	4a26      	ldr	r2, [pc, #152]	; (8009f74 <USB_SetTurnaroundTime+0x134>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d906      	bls.n	8009eee <USB_SetTurnaroundTime+0xae>
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	4a25      	ldr	r2, [pc, #148]	; (8009f78 <USB_SetTurnaroundTime+0x138>)
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d802      	bhi.n	8009eee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009ee8:	2309      	movs	r3, #9
 8009eea:	617b      	str	r3, [r7, #20]
 8009eec:	e020      	b.n	8009f30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	4a21      	ldr	r2, [pc, #132]	; (8009f78 <USB_SetTurnaroundTime+0x138>)
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d906      	bls.n	8009f04 <USB_SetTurnaroundTime+0xc4>
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	4a20      	ldr	r2, [pc, #128]	; (8009f7c <USB_SetTurnaroundTime+0x13c>)
 8009efa:	4293      	cmp	r3, r2
 8009efc:	d802      	bhi.n	8009f04 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009efe:	2308      	movs	r3, #8
 8009f00:	617b      	str	r3, [r7, #20]
 8009f02:	e015      	b.n	8009f30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	4a1d      	ldr	r2, [pc, #116]	; (8009f7c <USB_SetTurnaroundTime+0x13c>)
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d906      	bls.n	8009f1a <USB_SetTurnaroundTime+0xda>
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	4a1c      	ldr	r2, [pc, #112]	; (8009f80 <USB_SetTurnaroundTime+0x140>)
 8009f10:	4293      	cmp	r3, r2
 8009f12:	d802      	bhi.n	8009f1a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009f14:	2307      	movs	r3, #7
 8009f16:	617b      	str	r3, [r7, #20]
 8009f18:	e00a      	b.n	8009f30 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009f1a:	2306      	movs	r3, #6
 8009f1c:	617b      	str	r3, [r7, #20]
 8009f1e:	e007      	b.n	8009f30 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009f20:	79fb      	ldrb	r3, [r7, #7]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d102      	bne.n	8009f2c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009f26:	2309      	movs	r3, #9
 8009f28:	617b      	str	r3, [r7, #20]
 8009f2a:	e001      	b.n	8009f30 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009f2c:	2309      	movs	r3, #9
 8009f2e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	68db      	ldr	r3, [r3, #12]
 8009f34:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	68da      	ldr	r2, [r3, #12]
 8009f40:	697b      	ldr	r3, [r7, #20]
 8009f42:	029b      	lsls	r3, r3, #10
 8009f44:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009f48:	431a      	orrs	r2, r3
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009f4e:	2300      	movs	r3, #0
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	371c      	adds	r7, #28
 8009f54:	46bd      	mov	sp, r7
 8009f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5a:	4770      	bx	lr
 8009f5c:	00d8acbf 	.word	0x00d8acbf
 8009f60:	00e4e1bf 	.word	0x00e4e1bf
 8009f64:	00f423ff 	.word	0x00f423ff
 8009f68:	0106737f 	.word	0x0106737f
 8009f6c:	011a499f 	.word	0x011a499f
 8009f70:	01312cff 	.word	0x01312cff
 8009f74:	014ca43f 	.word	0x014ca43f
 8009f78:	016e35ff 	.word	0x016e35ff
 8009f7c:	01a6ab1f 	.word	0x01a6ab1f
 8009f80:	01e847ff 	.word	0x01e847ff

08009f84 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009f84:	b480      	push	{r7}
 8009f86:	b083      	sub	sp, #12
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	689b      	ldr	r3, [r3, #8]
 8009f90:	f043 0201 	orr.w	r2, r3, #1
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009f98:	2300      	movs	r3, #0
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	370c      	adds	r7, #12
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa4:	4770      	bx	lr

08009fa6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009fa6:	b480      	push	{r7}
 8009fa8:	b083      	sub	sp, #12
 8009faa:	af00      	add	r7, sp, #0
 8009fac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	689b      	ldr	r3, [r3, #8]
 8009fb2:	f023 0201 	bic.w	r2, r3, #1
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009fba:	2300      	movs	r3, #0
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	370c      	adds	r7, #12
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr

08009fc8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b082      	sub	sp, #8
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
 8009fd0:	460b      	mov	r3, r1
 8009fd2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	68db      	ldr	r3, [r3, #12]
 8009fd8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009fe0:	78fb      	ldrb	r3, [r7, #3]
 8009fe2:	2b01      	cmp	r3, #1
 8009fe4:	d106      	bne.n	8009ff4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	68db      	ldr	r3, [r3, #12]
 8009fea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	60da      	str	r2, [r3, #12]
 8009ff2:	e00b      	b.n	800a00c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8009ff4:	78fb      	ldrb	r3, [r7, #3]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d106      	bne.n	800a008 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	68db      	ldr	r3, [r3, #12]
 8009ffe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	60da      	str	r2, [r3, #12]
 800a006:	e001      	b.n	800a00c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800a008:	2301      	movs	r3, #1
 800a00a:	e003      	b.n	800a014 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800a00c:	2032      	movs	r0, #50	; 0x32
 800a00e:	f7f7 feeb 	bl	8001de8 <HAL_Delay>

  return HAL_OK;
 800a012:	2300      	movs	r3, #0
}
 800a014:	4618      	mov	r0, r3
 800a016:	3708      	adds	r7, #8
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}

0800a01c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a01c:	b084      	sub	sp, #16
 800a01e:	b580      	push	{r7, lr}
 800a020:	b086      	sub	sp, #24
 800a022:	af00      	add	r7, sp, #0
 800a024:	6078      	str	r0, [r7, #4]
 800a026:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a02a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a02e:	2300      	movs	r3, #0
 800a030:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a036:	2300      	movs	r3, #0
 800a038:	613b      	str	r3, [r7, #16]
 800a03a:	e009      	b.n	800a050 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a03c:	687a      	ldr	r2, [r7, #4]
 800a03e:	693b      	ldr	r3, [r7, #16]
 800a040:	3340      	adds	r3, #64	; 0x40
 800a042:	009b      	lsls	r3, r3, #2
 800a044:	4413      	add	r3, r2
 800a046:	2200      	movs	r2, #0
 800a048:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a04a:	693b      	ldr	r3, [r7, #16]
 800a04c:	3301      	adds	r3, #1
 800a04e:	613b      	str	r3, [r7, #16]
 800a050:	693b      	ldr	r3, [r7, #16]
 800a052:	2b0e      	cmp	r3, #14
 800a054:	d9f2      	bls.n	800a03c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a056:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d11c      	bne.n	800a096 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a062:	685b      	ldr	r3, [r3, #4]
 800a064:	68fa      	ldr	r2, [r7, #12]
 800a066:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a06a:	f043 0302 	orr.w	r3, r3, #2
 800a06e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a074:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a080:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a08c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	639a      	str	r2, [r3, #56]	; 0x38
 800a094:	e00b      	b.n	800a0ae <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a09a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0a6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a0b4:	461a      	mov	r2, r3
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0c0:	4619      	mov	r1, r3
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0c8:	461a      	mov	r2, r3
 800a0ca:	680b      	ldr	r3, [r1, #0]
 800a0cc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a0ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0d0:	2b01      	cmp	r3, #1
 800a0d2:	d10c      	bne.n	800a0ee <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a0d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d104      	bne.n	800a0e4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a0da:	2100      	movs	r1, #0
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	f000 f949 	bl	800a374 <USB_SetDevSpeed>
 800a0e2:	e008      	b.n	800a0f6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a0e4:	2101      	movs	r1, #1
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f000 f944 	bl	800a374 <USB_SetDevSpeed>
 800a0ec:	e003      	b.n	800a0f6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a0ee:	2103      	movs	r1, #3
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f000 f93f 	bl	800a374 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a0f6:	2110      	movs	r1, #16
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f000 f8f3 	bl	800a2e4 <USB_FlushTxFifo>
 800a0fe:	4603      	mov	r3, r0
 800a100:	2b00      	cmp	r3, #0
 800a102:	d001      	beq.n	800a108 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800a104:	2301      	movs	r3, #1
 800a106:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a108:	6878      	ldr	r0, [r7, #4]
 800a10a:	f000 f911 	bl	800a330 <USB_FlushRxFifo>
 800a10e:	4603      	mov	r3, r0
 800a110:	2b00      	cmp	r3, #0
 800a112:	d001      	beq.n	800a118 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800a114:	2301      	movs	r3, #1
 800a116:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a11e:	461a      	mov	r2, r3
 800a120:	2300      	movs	r3, #0
 800a122:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a12a:	461a      	mov	r2, r3
 800a12c:	2300      	movs	r3, #0
 800a12e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a136:	461a      	mov	r2, r3
 800a138:	2300      	movs	r3, #0
 800a13a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a13c:	2300      	movs	r3, #0
 800a13e:	613b      	str	r3, [r7, #16]
 800a140:	e043      	b.n	800a1ca <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a142:	693b      	ldr	r3, [r7, #16]
 800a144:	015a      	lsls	r2, r3, #5
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	4413      	add	r3, r2
 800a14a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a154:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a158:	d118      	bne.n	800a18c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800a15a:	693b      	ldr	r3, [r7, #16]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d10a      	bne.n	800a176 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a160:	693b      	ldr	r3, [r7, #16]
 800a162:	015a      	lsls	r2, r3, #5
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	4413      	add	r3, r2
 800a168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a16c:	461a      	mov	r2, r3
 800a16e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a172:	6013      	str	r3, [r2, #0]
 800a174:	e013      	b.n	800a19e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	015a      	lsls	r2, r3, #5
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	4413      	add	r3, r2
 800a17e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a182:	461a      	mov	r2, r3
 800a184:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a188:	6013      	str	r3, [r2, #0]
 800a18a:	e008      	b.n	800a19e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a18c:	693b      	ldr	r3, [r7, #16]
 800a18e:	015a      	lsls	r2, r3, #5
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	4413      	add	r3, r2
 800a194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a198:	461a      	mov	r2, r3
 800a19a:	2300      	movs	r3, #0
 800a19c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a19e:	693b      	ldr	r3, [r7, #16]
 800a1a0:	015a      	lsls	r2, r3, #5
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	4413      	add	r3, r2
 800a1a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1aa:	461a      	mov	r2, r3
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a1b0:	693b      	ldr	r3, [r7, #16]
 800a1b2:	015a      	lsls	r2, r3, #5
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	4413      	add	r3, r2
 800a1b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1bc:	461a      	mov	r2, r3
 800a1be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a1c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	3301      	adds	r3, #1
 800a1c8:	613b      	str	r3, [r7, #16]
 800a1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1cc:	693a      	ldr	r2, [r7, #16]
 800a1ce:	429a      	cmp	r2, r3
 800a1d0:	d3b7      	bcc.n	800a142 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	613b      	str	r3, [r7, #16]
 800a1d6:	e043      	b.n	800a260 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	015a      	lsls	r2, r3, #5
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	4413      	add	r3, r2
 800a1e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a1ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a1ee:	d118      	bne.n	800a222 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800a1f0:	693b      	ldr	r3, [r7, #16]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d10a      	bne.n	800a20c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a1f6:	693b      	ldr	r3, [r7, #16]
 800a1f8:	015a      	lsls	r2, r3, #5
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	4413      	add	r3, r2
 800a1fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a202:	461a      	mov	r2, r3
 800a204:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a208:	6013      	str	r3, [r2, #0]
 800a20a:	e013      	b.n	800a234 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a20c:	693b      	ldr	r3, [r7, #16]
 800a20e:	015a      	lsls	r2, r3, #5
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	4413      	add	r3, r2
 800a214:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a218:	461a      	mov	r2, r3
 800a21a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a21e:	6013      	str	r3, [r2, #0]
 800a220:	e008      	b.n	800a234 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	015a      	lsls	r2, r3, #5
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	4413      	add	r3, r2
 800a22a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a22e:	461a      	mov	r2, r3
 800a230:	2300      	movs	r3, #0
 800a232:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a234:	693b      	ldr	r3, [r7, #16]
 800a236:	015a      	lsls	r2, r3, #5
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	4413      	add	r3, r2
 800a23c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a240:	461a      	mov	r2, r3
 800a242:	2300      	movs	r3, #0
 800a244:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	015a      	lsls	r2, r3, #5
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	4413      	add	r3, r2
 800a24e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a252:	461a      	mov	r2, r3
 800a254:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a258:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	3301      	adds	r3, #1
 800a25e:	613b      	str	r3, [r7, #16]
 800a260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a262:	693a      	ldr	r2, [r7, #16]
 800a264:	429a      	cmp	r2, r3
 800a266:	d3b7      	bcc.n	800a1d8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a26e:	691b      	ldr	r3, [r3, #16]
 800a270:	68fa      	ldr	r2, [r7, #12]
 800a272:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a276:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a27a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2200      	movs	r2, #0
 800a280:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a288:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a28a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d105      	bne.n	800a29c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	699b      	ldr	r3, [r3, #24]
 800a294:	f043 0210 	orr.w	r2, r3, #16
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	699a      	ldr	r2, [r3, #24]
 800a2a0:	4b0f      	ldr	r3, [pc, #60]	; (800a2e0 <USB_DevInit+0x2c4>)
 800a2a2:	4313      	orrs	r3, r2
 800a2a4:	687a      	ldr	r2, [r7, #4]
 800a2a6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a2a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d005      	beq.n	800a2ba <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	699b      	ldr	r3, [r3, #24]
 800a2b2:	f043 0208 	orr.w	r2, r3, #8
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a2ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2bc:	2b01      	cmp	r3, #1
 800a2be:	d107      	bne.n	800a2d0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	699b      	ldr	r3, [r3, #24]
 800a2c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a2c8:	f043 0304 	orr.w	r3, r3, #4
 800a2cc:	687a      	ldr	r2, [r7, #4]
 800a2ce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a2d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	3718      	adds	r7, #24
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a2dc:	b004      	add	sp, #16
 800a2de:	4770      	bx	lr
 800a2e0:	803c3800 	.word	0x803c3800

0800a2e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b085      	sub	sp, #20
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
 800a2ec:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	019b      	lsls	r3, r3, #6
 800a2f6:	f043 0220 	orr.w	r2, r3, #32
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	3301      	adds	r3, #1
 800a302:	60fb      	str	r3, [r7, #12]
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	4a09      	ldr	r2, [pc, #36]	; (800a32c <USB_FlushTxFifo+0x48>)
 800a308:	4293      	cmp	r3, r2
 800a30a:	d901      	bls.n	800a310 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a30c:	2303      	movs	r3, #3
 800a30e:	e006      	b.n	800a31e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	691b      	ldr	r3, [r3, #16]
 800a314:	f003 0320 	and.w	r3, r3, #32
 800a318:	2b20      	cmp	r3, #32
 800a31a:	d0f0      	beq.n	800a2fe <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a31c:	2300      	movs	r3, #0
}
 800a31e:	4618      	mov	r0, r3
 800a320:	3714      	adds	r7, #20
 800a322:	46bd      	mov	sp, r7
 800a324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a328:	4770      	bx	lr
 800a32a:	bf00      	nop
 800a32c:	00030d40 	.word	0x00030d40

0800a330 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a330:	b480      	push	{r7}
 800a332:	b085      	sub	sp, #20
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800a338:	2300      	movs	r3, #0
 800a33a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2210      	movs	r2, #16
 800a340:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	3301      	adds	r3, #1
 800a346:	60fb      	str	r3, [r7, #12]
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	4a09      	ldr	r2, [pc, #36]	; (800a370 <USB_FlushRxFifo+0x40>)
 800a34c:	4293      	cmp	r3, r2
 800a34e:	d901      	bls.n	800a354 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800a350:	2303      	movs	r3, #3
 800a352:	e006      	b.n	800a362 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	691b      	ldr	r3, [r3, #16]
 800a358:	f003 0310 	and.w	r3, r3, #16
 800a35c:	2b10      	cmp	r3, #16
 800a35e:	d0f0      	beq.n	800a342 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a360:	2300      	movs	r3, #0
}
 800a362:	4618      	mov	r0, r3
 800a364:	3714      	adds	r7, #20
 800a366:	46bd      	mov	sp, r7
 800a368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36c:	4770      	bx	lr
 800a36e:	bf00      	nop
 800a370:	00030d40 	.word	0x00030d40

0800a374 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a374:	b480      	push	{r7}
 800a376:	b085      	sub	sp, #20
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
 800a37c:	460b      	mov	r3, r1
 800a37e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a38a:	681a      	ldr	r2, [r3, #0]
 800a38c:	78fb      	ldrb	r3, [r7, #3]
 800a38e:	68f9      	ldr	r1, [r7, #12]
 800a390:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a394:	4313      	orrs	r3, r2
 800a396:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a398:	2300      	movs	r3, #0
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	3714      	adds	r7, #20
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a4:	4770      	bx	lr

0800a3a6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a3a6:	b480      	push	{r7}
 800a3a8:	b087      	sub	sp, #28
 800a3aa:	af00      	add	r7, sp, #0
 800a3ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a3b2:	693b      	ldr	r3, [r7, #16]
 800a3b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3b8:	689b      	ldr	r3, [r3, #8]
 800a3ba:	f003 0306 	and.w	r3, r3, #6
 800a3be:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d102      	bne.n	800a3cc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	75fb      	strb	r3, [r7, #23]
 800a3ca:	e00a      	b.n	800a3e2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	2b02      	cmp	r3, #2
 800a3d0:	d002      	beq.n	800a3d8 <USB_GetDevSpeed+0x32>
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	2b06      	cmp	r3, #6
 800a3d6:	d102      	bne.n	800a3de <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a3d8:	2302      	movs	r3, #2
 800a3da:	75fb      	strb	r3, [r7, #23]
 800a3dc:	e001      	b.n	800a3e2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a3de:	230f      	movs	r3, #15
 800a3e0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a3e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	371c      	adds	r7, #28
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ee:	4770      	bx	lr

0800a3f0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b085      	sub	sp, #20
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
 800a3f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	781b      	ldrb	r3, [r3, #0]
 800a402:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	785b      	ldrb	r3, [r3, #1]
 800a408:	2b01      	cmp	r3, #1
 800a40a:	d13a      	bne.n	800a482 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a412:	69da      	ldr	r2, [r3, #28]
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	781b      	ldrb	r3, [r3, #0]
 800a418:	f003 030f 	and.w	r3, r3, #15
 800a41c:	2101      	movs	r1, #1
 800a41e:	fa01 f303 	lsl.w	r3, r1, r3
 800a422:	b29b      	uxth	r3, r3
 800a424:	68f9      	ldr	r1, [r7, #12]
 800a426:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a42a:	4313      	orrs	r3, r2
 800a42c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	015a      	lsls	r2, r3, #5
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	4413      	add	r3, r2
 800a436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a440:	2b00      	cmp	r3, #0
 800a442:	d155      	bne.n	800a4f0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	015a      	lsls	r2, r3, #5
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	4413      	add	r3, r2
 800a44c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a450:	681a      	ldr	r2, [r3, #0]
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	689b      	ldr	r3, [r3, #8]
 800a456:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	78db      	ldrb	r3, [r3, #3]
 800a45e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a460:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	059b      	lsls	r3, r3, #22
 800a466:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a468:	4313      	orrs	r3, r2
 800a46a:	68ba      	ldr	r2, [r7, #8]
 800a46c:	0151      	lsls	r1, r2, #5
 800a46e:	68fa      	ldr	r2, [r7, #12]
 800a470:	440a      	add	r2, r1
 800a472:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a476:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a47a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a47e:	6013      	str	r3, [r2, #0]
 800a480:	e036      	b.n	800a4f0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a488:	69da      	ldr	r2, [r3, #28]
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	781b      	ldrb	r3, [r3, #0]
 800a48e:	f003 030f 	and.w	r3, r3, #15
 800a492:	2101      	movs	r1, #1
 800a494:	fa01 f303 	lsl.w	r3, r1, r3
 800a498:	041b      	lsls	r3, r3, #16
 800a49a:	68f9      	ldr	r1, [r7, #12]
 800a49c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a4a0:	4313      	orrs	r3, r2
 800a4a2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	015a      	lsls	r2, r3, #5
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	4413      	add	r3, r2
 800a4ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d11a      	bne.n	800a4f0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	015a      	lsls	r2, r3, #5
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	4413      	add	r3, r2
 800a4c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4c6:	681a      	ldr	r2, [r3, #0]
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	689b      	ldr	r3, [r3, #8]
 800a4cc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	78db      	ldrb	r3, [r3, #3]
 800a4d4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a4d6:	430b      	orrs	r3, r1
 800a4d8:	4313      	orrs	r3, r2
 800a4da:	68ba      	ldr	r2, [r7, #8]
 800a4dc:	0151      	lsls	r1, r2, #5
 800a4de:	68fa      	ldr	r2, [r7, #12]
 800a4e0:	440a      	add	r2, r1
 800a4e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a4e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a4ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a4ee:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a4f0:	2300      	movs	r3, #0
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3714      	adds	r7, #20
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fc:	4770      	bx	lr
	...

0800a500 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a500:	b480      	push	{r7}
 800a502:	b085      	sub	sp, #20
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
 800a508:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	781b      	ldrb	r3, [r3, #0]
 800a512:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	785b      	ldrb	r3, [r3, #1]
 800a518:	2b01      	cmp	r3, #1
 800a51a:	d161      	bne.n	800a5e0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	015a      	lsls	r2, r3, #5
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	4413      	add	r3, r2
 800a524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a52e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a532:	d11f      	bne.n	800a574 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	015a      	lsls	r2, r3, #5
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	4413      	add	r3, r2
 800a53c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	68ba      	ldr	r2, [r7, #8]
 800a544:	0151      	lsls	r1, r2, #5
 800a546:	68fa      	ldr	r2, [r7, #12]
 800a548:	440a      	add	r2, r1
 800a54a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a54e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a552:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	015a      	lsls	r2, r3, #5
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	4413      	add	r3, r2
 800a55c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	68ba      	ldr	r2, [r7, #8]
 800a564:	0151      	lsls	r1, r2, #5
 800a566:	68fa      	ldr	r2, [r7, #12]
 800a568:	440a      	add	r2, r1
 800a56a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a56e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a572:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a57a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	781b      	ldrb	r3, [r3, #0]
 800a580:	f003 030f 	and.w	r3, r3, #15
 800a584:	2101      	movs	r1, #1
 800a586:	fa01 f303 	lsl.w	r3, r1, r3
 800a58a:	b29b      	uxth	r3, r3
 800a58c:	43db      	mvns	r3, r3
 800a58e:	68f9      	ldr	r1, [r7, #12]
 800a590:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a594:	4013      	ands	r3, r2
 800a596:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a59e:	69da      	ldr	r2, [r3, #28]
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	781b      	ldrb	r3, [r3, #0]
 800a5a4:	f003 030f 	and.w	r3, r3, #15
 800a5a8:	2101      	movs	r1, #1
 800a5aa:	fa01 f303 	lsl.w	r3, r1, r3
 800a5ae:	b29b      	uxth	r3, r3
 800a5b0:	43db      	mvns	r3, r3
 800a5b2:	68f9      	ldr	r1, [r7, #12]
 800a5b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a5b8:	4013      	ands	r3, r2
 800a5ba:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	015a      	lsls	r2, r3, #5
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	4413      	add	r3, r2
 800a5c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5c8:	681a      	ldr	r2, [r3, #0]
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	0159      	lsls	r1, r3, #5
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	440b      	add	r3, r1
 800a5d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5d6:	4619      	mov	r1, r3
 800a5d8:	4b35      	ldr	r3, [pc, #212]	; (800a6b0 <USB_DeactivateEndpoint+0x1b0>)
 800a5da:	4013      	ands	r3, r2
 800a5dc:	600b      	str	r3, [r1, #0]
 800a5de:	e060      	b.n	800a6a2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	015a      	lsls	r2, r3, #5
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	4413      	add	r3, r2
 800a5e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a5f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a5f6:	d11f      	bne.n	800a638 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	015a      	lsls	r2, r3, #5
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	4413      	add	r3, r2
 800a600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	68ba      	ldr	r2, [r7, #8]
 800a608:	0151      	lsls	r1, r2, #5
 800a60a:	68fa      	ldr	r2, [r7, #12]
 800a60c:	440a      	add	r2, r1
 800a60e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a612:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a616:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	015a      	lsls	r2, r3, #5
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	4413      	add	r3, r2
 800a620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	68ba      	ldr	r2, [r7, #8]
 800a628:	0151      	lsls	r1, r2, #5
 800a62a:	68fa      	ldr	r2, [r7, #12]
 800a62c:	440a      	add	r2, r1
 800a62e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a632:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a636:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a63e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	781b      	ldrb	r3, [r3, #0]
 800a644:	f003 030f 	and.w	r3, r3, #15
 800a648:	2101      	movs	r1, #1
 800a64a:	fa01 f303 	lsl.w	r3, r1, r3
 800a64e:	041b      	lsls	r3, r3, #16
 800a650:	43db      	mvns	r3, r3
 800a652:	68f9      	ldr	r1, [r7, #12]
 800a654:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a658:	4013      	ands	r3, r2
 800a65a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a662:	69da      	ldr	r2, [r3, #28]
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	781b      	ldrb	r3, [r3, #0]
 800a668:	f003 030f 	and.w	r3, r3, #15
 800a66c:	2101      	movs	r1, #1
 800a66e:	fa01 f303 	lsl.w	r3, r1, r3
 800a672:	041b      	lsls	r3, r3, #16
 800a674:	43db      	mvns	r3, r3
 800a676:	68f9      	ldr	r1, [r7, #12]
 800a678:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a67c:	4013      	ands	r3, r2
 800a67e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	015a      	lsls	r2, r3, #5
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	4413      	add	r3, r2
 800a688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a68c:	681a      	ldr	r2, [r3, #0]
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	0159      	lsls	r1, r3, #5
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	440b      	add	r3, r1
 800a696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a69a:	4619      	mov	r1, r3
 800a69c:	4b05      	ldr	r3, [pc, #20]	; (800a6b4 <USB_DeactivateEndpoint+0x1b4>)
 800a69e:	4013      	ands	r3, r2
 800a6a0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a6a2:	2300      	movs	r3, #0
}
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	3714      	adds	r7, #20
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ae:	4770      	bx	lr
 800a6b0:	ec337800 	.word	0xec337800
 800a6b4:	eff37800 	.word	0xeff37800

0800a6b8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b08a      	sub	sp, #40	; 0x28
 800a6bc:	af02      	add	r7, sp, #8
 800a6be:	60f8      	str	r0, [r7, #12]
 800a6c0:	60b9      	str	r1, [r7, #8]
 800a6c2:	4613      	mov	r3, r2
 800a6c4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	781b      	ldrb	r3, [r3, #0]
 800a6ce:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	785b      	ldrb	r3, [r3, #1]
 800a6d4:	2b01      	cmp	r3, #1
 800a6d6:	f040 815c 	bne.w	800a992 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	695b      	ldr	r3, [r3, #20]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d132      	bne.n	800a748 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a6e2:	69bb      	ldr	r3, [r7, #24]
 800a6e4:	015a      	lsls	r2, r3, #5
 800a6e6:	69fb      	ldr	r3, [r7, #28]
 800a6e8:	4413      	add	r3, r2
 800a6ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6ee:	691b      	ldr	r3, [r3, #16]
 800a6f0:	69ba      	ldr	r2, [r7, #24]
 800a6f2:	0151      	lsls	r1, r2, #5
 800a6f4:	69fa      	ldr	r2, [r7, #28]
 800a6f6:	440a      	add	r2, r1
 800a6f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a700:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a704:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a706:	69bb      	ldr	r3, [r7, #24]
 800a708:	015a      	lsls	r2, r3, #5
 800a70a:	69fb      	ldr	r3, [r7, #28]
 800a70c:	4413      	add	r3, r2
 800a70e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a712:	691b      	ldr	r3, [r3, #16]
 800a714:	69ba      	ldr	r2, [r7, #24]
 800a716:	0151      	lsls	r1, r2, #5
 800a718:	69fa      	ldr	r2, [r7, #28]
 800a71a:	440a      	add	r2, r1
 800a71c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a720:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a724:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a726:	69bb      	ldr	r3, [r7, #24]
 800a728:	015a      	lsls	r2, r3, #5
 800a72a:	69fb      	ldr	r3, [r7, #28]
 800a72c:	4413      	add	r3, r2
 800a72e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a732:	691b      	ldr	r3, [r3, #16]
 800a734:	69ba      	ldr	r2, [r7, #24]
 800a736:	0151      	lsls	r1, r2, #5
 800a738:	69fa      	ldr	r2, [r7, #28]
 800a73a:	440a      	add	r2, r1
 800a73c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a740:	0cdb      	lsrs	r3, r3, #19
 800a742:	04db      	lsls	r3, r3, #19
 800a744:	6113      	str	r3, [r2, #16]
 800a746:	e074      	b.n	800a832 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a748:	69bb      	ldr	r3, [r7, #24]
 800a74a:	015a      	lsls	r2, r3, #5
 800a74c:	69fb      	ldr	r3, [r7, #28]
 800a74e:	4413      	add	r3, r2
 800a750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a754:	691b      	ldr	r3, [r3, #16]
 800a756:	69ba      	ldr	r2, [r7, #24]
 800a758:	0151      	lsls	r1, r2, #5
 800a75a:	69fa      	ldr	r2, [r7, #28]
 800a75c:	440a      	add	r2, r1
 800a75e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a762:	0cdb      	lsrs	r3, r3, #19
 800a764:	04db      	lsls	r3, r3, #19
 800a766:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a768:	69bb      	ldr	r3, [r7, #24]
 800a76a:	015a      	lsls	r2, r3, #5
 800a76c:	69fb      	ldr	r3, [r7, #28]
 800a76e:	4413      	add	r3, r2
 800a770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a774:	691b      	ldr	r3, [r3, #16]
 800a776:	69ba      	ldr	r2, [r7, #24]
 800a778:	0151      	lsls	r1, r2, #5
 800a77a:	69fa      	ldr	r2, [r7, #28]
 800a77c:	440a      	add	r2, r1
 800a77e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a782:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a786:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a78a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a78c:	69bb      	ldr	r3, [r7, #24]
 800a78e:	015a      	lsls	r2, r3, #5
 800a790:	69fb      	ldr	r3, [r7, #28]
 800a792:	4413      	add	r3, r2
 800a794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a798:	691a      	ldr	r2, [r3, #16]
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	6959      	ldr	r1, [r3, #20]
 800a79e:	68bb      	ldr	r3, [r7, #8]
 800a7a0:	689b      	ldr	r3, [r3, #8]
 800a7a2:	440b      	add	r3, r1
 800a7a4:	1e59      	subs	r1, r3, #1
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	689b      	ldr	r3, [r3, #8]
 800a7aa:	fbb1 f3f3 	udiv	r3, r1, r3
 800a7ae:	04d9      	lsls	r1, r3, #19
 800a7b0:	4b9d      	ldr	r3, [pc, #628]	; (800aa28 <USB_EPStartXfer+0x370>)
 800a7b2:	400b      	ands	r3, r1
 800a7b4:	69b9      	ldr	r1, [r7, #24]
 800a7b6:	0148      	lsls	r0, r1, #5
 800a7b8:	69f9      	ldr	r1, [r7, #28]
 800a7ba:	4401      	add	r1, r0
 800a7bc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a7c0:	4313      	orrs	r3, r2
 800a7c2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a7c4:	69bb      	ldr	r3, [r7, #24]
 800a7c6:	015a      	lsls	r2, r3, #5
 800a7c8:	69fb      	ldr	r3, [r7, #28]
 800a7ca:	4413      	add	r3, r2
 800a7cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7d0:	691a      	ldr	r2, [r3, #16]
 800a7d2:	68bb      	ldr	r3, [r7, #8]
 800a7d4:	695b      	ldr	r3, [r3, #20]
 800a7d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a7da:	69b9      	ldr	r1, [r7, #24]
 800a7dc:	0148      	lsls	r0, r1, #5
 800a7de:	69f9      	ldr	r1, [r7, #28]
 800a7e0:	4401      	add	r1, r0
 800a7e2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a7e6:	4313      	orrs	r3, r2
 800a7e8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	78db      	ldrb	r3, [r3, #3]
 800a7ee:	2b01      	cmp	r3, #1
 800a7f0:	d11f      	bne.n	800a832 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a7f2:	69bb      	ldr	r3, [r7, #24]
 800a7f4:	015a      	lsls	r2, r3, #5
 800a7f6:	69fb      	ldr	r3, [r7, #28]
 800a7f8:	4413      	add	r3, r2
 800a7fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7fe:	691b      	ldr	r3, [r3, #16]
 800a800:	69ba      	ldr	r2, [r7, #24]
 800a802:	0151      	lsls	r1, r2, #5
 800a804:	69fa      	ldr	r2, [r7, #28]
 800a806:	440a      	add	r2, r1
 800a808:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a80c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a810:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a812:	69bb      	ldr	r3, [r7, #24]
 800a814:	015a      	lsls	r2, r3, #5
 800a816:	69fb      	ldr	r3, [r7, #28]
 800a818:	4413      	add	r3, r2
 800a81a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a81e:	691b      	ldr	r3, [r3, #16]
 800a820:	69ba      	ldr	r2, [r7, #24]
 800a822:	0151      	lsls	r1, r2, #5
 800a824:	69fa      	ldr	r2, [r7, #28]
 800a826:	440a      	add	r2, r1
 800a828:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a82c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a830:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a832:	79fb      	ldrb	r3, [r7, #7]
 800a834:	2b01      	cmp	r3, #1
 800a836:	d14b      	bne.n	800a8d0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	691b      	ldr	r3, [r3, #16]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d009      	beq.n	800a854 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a840:	69bb      	ldr	r3, [r7, #24]
 800a842:	015a      	lsls	r2, r3, #5
 800a844:	69fb      	ldr	r3, [r7, #28]
 800a846:	4413      	add	r3, r2
 800a848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a84c:	461a      	mov	r2, r3
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	691b      	ldr	r3, [r3, #16]
 800a852:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	78db      	ldrb	r3, [r3, #3]
 800a858:	2b01      	cmp	r3, #1
 800a85a:	d128      	bne.n	800a8ae <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a85c:	69fb      	ldr	r3, [r7, #28]
 800a85e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a862:	689b      	ldr	r3, [r3, #8]
 800a864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d110      	bne.n	800a88e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a86c:	69bb      	ldr	r3, [r7, #24]
 800a86e:	015a      	lsls	r2, r3, #5
 800a870:	69fb      	ldr	r3, [r7, #28]
 800a872:	4413      	add	r3, r2
 800a874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	69ba      	ldr	r2, [r7, #24]
 800a87c:	0151      	lsls	r1, r2, #5
 800a87e:	69fa      	ldr	r2, [r7, #28]
 800a880:	440a      	add	r2, r1
 800a882:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a886:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a88a:	6013      	str	r3, [r2, #0]
 800a88c:	e00f      	b.n	800a8ae <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a88e:	69bb      	ldr	r3, [r7, #24]
 800a890:	015a      	lsls	r2, r3, #5
 800a892:	69fb      	ldr	r3, [r7, #28]
 800a894:	4413      	add	r3, r2
 800a896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	69ba      	ldr	r2, [r7, #24]
 800a89e:	0151      	lsls	r1, r2, #5
 800a8a0:	69fa      	ldr	r2, [r7, #28]
 800a8a2:	440a      	add	r2, r1
 800a8a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a8a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a8ac:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a8ae:	69bb      	ldr	r3, [r7, #24]
 800a8b0:	015a      	lsls	r2, r3, #5
 800a8b2:	69fb      	ldr	r3, [r7, #28]
 800a8b4:	4413      	add	r3, r2
 800a8b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	69ba      	ldr	r2, [r7, #24]
 800a8be:	0151      	lsls	r1, r2, #5
 800a8c0:	69fa      	ldr	r2, [r7, #28]
 800a8c2:	440a      	add	r2, r1
 800a8c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a8c8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a8cc:	6013      	str	r3, [r2, #0]
 800a8ce:	e12f      	b.n	800ab30 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a8d0:	69bb      	ldr	r3, [r7, #24]
 800a8d2:	015a      	lsls	r2, r3, #5
 800a8d4:	69fb      	ldr	r3, [r7, #28]
 800a8d6:	4413      	add	r3, r2
 800a8d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	69ba      	ldr	r2, [r7, #24]
 800a8e0:	0151      	lsls	r1, r2, #5
 800a8e2:	69fa      	ldr	r2, [r7, #28]
 800a8e4:	440a      	add	r2, r1
 800a8e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a8ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a8ee:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	78db      	ldrb	r3, [r3, #3]
 800a8f4:	2b01      	cmp	r3, #1
 800a8f6:	d015      	beq.n	800a924 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	695b      	ldr	r3, [r3, #20]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	f000 8117 	beq.w	800ab30 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a902:	69fb      	ldr	r3, [r7, #28]
 800a904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a908:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	781b      	ldrb	r3, [r3, #0]
 800a90e:	f003 030f 	and.w	r3, r3, #15
 800a912:	2101      	movs	r1, #1
 800a914:	fa01 f303 	lsl.w	r3, r1, r3
 800a918:	69f9      	ldr	r1, [r7, #28]
 800a91a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a91e:	4313      	orrs	r3, r2
 800a920:	634b      	str	r3, [r1, #52]	; 0x34
 800a922:	e105      	b.n	800ab30 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a924:	69fb      	ldr	r3, [r7, #28]
 800a926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a92a:	689b      	ldr	r3, [r3, #8]
 800a92c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a930:	2b00      	cmp	r3, #0
 800a932:	d110      	bne.n	800a956 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a934:	69bb      	ldr	r3, [r7, #24]
 800a936:	015a      	lsls	r2, r3, #5
 800a938:	69fb      	ldr	r3, [r7, #28]
 800a93a:	4413      	add	r3, r2
 800a93c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	69ba      	ldr	r2, [r7, #24]
 800a944:	0151      	lsls	r1, r2, #5
 800a946:	69fa      	ldr	r2, [r7, #28]
 800a948:	440a      	add	r2, r1
 800a94a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a94e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a952:	6013      	str	r3, [r2, #0]
 800a954:	e00f      	b.n	800a976 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a956:	69bb      	ldr	r3, [r7, #24]
 800a958:	015a      	lsls	r2, r3, #5
 800a95a:	69fb      	ldr	r3, [r7, #28]
 800a95c:	4413      	add	r3, r2
 800a95e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	69ba      	ldr	r2, [r7, #24]
 800a966:	0151      	lsls	r1, r2, #5
 800a968:	69fa      	ldr	r2, [r7, #28]
 800a96a:	440a      	add	r2, r1
 800a96c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a974:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a976:	68bb      	ldr	r3, [r7, #8]
 800a978:	68d9      	ldr	r1, [r3, #12]
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	781a      	ldrb	r2, [r3, #0]
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	695b      	ldr	r3, [r3, #20]
 800a982:	b298      	uxth	r0, r3
 800a984:	79fb      	ldrb	r3, [r7, #7]
 800a986:	9300      	str	r3, [sp, #0]
 800a988:	4603      	mov	r3, r0
 800a98a:	68f8      	ldr	r0, [r7, #12]
 800a98c:	f000 fa2b 	bl	800ade6 <USB_WritePacket>
 800a990:	e0ce      	b.n	800ab30 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a992:	69bb      	ldr	r3, [r7, #24]
 800a994:	015a      	lsls	r2, r3, #5
 800a996:	69fb      	ldr	r3, [r7, #28]
 800a998:	4413      	add	r3, r2
 800a99a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a99e:	691b      	ldr	r3, [r3, #16]
 800a9a0:	69ba      	ldr	r2, [r7, #24]
 800a9a2:	0151      	lsls	r1, r2, #5
 800a9a4:	69fa      	ldr	r2, [r7, #28]
 800a9a6:	440a      	add	r2, r1
 800a9a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9ac:	0cdb      	lsrs	r3, r3, #19
 800a9ae:	04db      	lsls	r3, r3, #19
 800a9b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a9b2:	69bb      	ldr	r3, [r7, #24]
 800a9b4:	015a      	lsls	r2, r3, #5
 800a9b6:	69fb      	ldr	r3, [r7, #28]
 800a9b8:	4413      	add	r3, r2
 800a9ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9be:	691b      	ldr	r3, [r3, #16]
 800a9c0:	69ba      	ldr	r2, [r7, #24]
 800a9c2:	0151      	lsls	r1, r2, #5
 800a9c4:	69fa      	ldr	r2, [r7, #28]
 800a9c6:	440a      	add	r2, r1
 800a9c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9cc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a9d0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a9d4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	695b      	ldr	r3, [r3, #20]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d126      	bne.n	800aa2c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a9de:	69bb      	ldr	r3, [r7, #24]
 800a9e0:	015a      	lsls	r2, r3, #5
 800a9e2:	69fb      	ldr	r3, [r7, #28]
 800a9e4:	4413      	add	r3, r2
 800a9e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9ea:	691a      	ldr	r2, [r3, #16]
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	689b      	ldr	r3, [r3, #8]
 800a9f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a9f4:	69b9      	ldr	r1, [r7, #24]
 800a9f6:	0148      	lsls	r0, r1, #5
 800a9f8:	69f9      	ldr	r1, [r7, #28]
 800a9fa:	4401      	add	r1, r0
 800a9fc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800aa00:	4313      	orrs	r3, r2
 800aa02:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aa04:	69bb      	ldr	r3, [r7, #24]
 800aa06:	015a      	lsls	r2, r3, #5
 800aa08:	69fb      	ldr	r3, [r7, #28]
 800aa0a:	4413      	add	r3, r2
 800aa0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa10:	691b      	ldr	r3, [r3, #16]
 800aa12:	69ba      	ldr	r2, [r7, #24]
 800aa14:	0151      	lsls	r1, r2, #5
 800aa16:	69fa      	ldr	r2, [r7, #28]
 800aa18:	440a      	add	r2, r1
 800aa1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa1e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aa22:	6113      	str	r3, [r2, #16]
 800aa24:	e036      	b.n	800aa94 <USB_EPStartXfer+0x3dc>
 800aa26:	bf00      	nop
 800aa28:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	695a      	ldr	r2, [r3, #20]
 800aa30:	68bb      	ldr	r3, [r7, #8]
 800aa32:	689b      	ldr	r3, [r3, #8]
 800aa34:	4413      	add	r3, r2
 800aa36:	1e5a      	subs	r2, r3, #1
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	689b      	ldr	r3, [r3, #8]
 800aa3c:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa40:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800aa42:	69bb      	ldr	r3, [r7, #24]
 800aa44:	015a      	lsls	r2, r3, #5
 800aa46:	69fb      	ldr	r3, [r7, #28]
 800aa48:	4413      	add	r3, r2
 800aa4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa4e:	691a      	ldr	r2, [r3, #16]
 800aa50:	8afb      	ldrh	r3, [r7, #22]
 800aa52:	04d9      	lsls	r1, r3, #19
 800aa54:	4b39      	ldr	r3, [pc, #228]	; (800ab3c <USB_EPStartXfer+0x484>)
 800aa56:	400b      	ands	r3, r1
 800aa58:	69b9      	ldr	r1, [r7, #24]
 800aa5a:	0148      	lsls	r0, r1, #5
 800aa5c:	69f9      	ldr	r1, [r7, #28]
 800aa5e:	4401      	add	r1, r0
 800aa60:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800aa64:	4313      	orrs	r3, r2
 800aa66:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800aa68:	69bb      	ldr	r3, [r7, #24]
 800aa6a:	015a      	lsls	r2, r3, #5
 800aa6c:	69fb      	ldr	r3, [r7, #28]
 800aa6e:	4413      	add	r3, r2
 800aa70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa74:	691a      	ldr	r2, [r3, #16]
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	689b      	ldr	r3, [r3, #8]
 800aa7a:	8af9      	ldrh	r1, [r7, #22]
 800aa7c:	fb01 f303 	mul.w	r3, r1, r3
 800aa80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aa84:	69b9      	ldr	r1, [r7, #24]
 800aa86:	0148      	lsls	r0, r1, #5
 800aa88:	69f9      	ldr	r1, [r7, #28]
 800aa8a:	4401      	add	r1, r0
 800aa8c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800aa90:	4313      	orrs	r3, r2
 800aa92:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800aa94:	79fb      	ldrb	r3, [r7, #7]
 800aa96:	2b01      	cmp	r3, #1
 800aa98:	d10d      	bne.n	800aab6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	68db      	ldr	r3, [r3, #12]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d009      	beq.n	800aab6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800aaa2:	68bb      	ldr	r3, [r7, #8]
 800aaa4:	68d9      	ldr	r1, [r3, #12]
 800aaa6:	69bb      	ldr	r3, [r7, #24]
 800aaa8:	015a      	lsls	r2, r3, #5
 800aaaa:	69fb      	ldr	r3, [r7, #28]
 800aaac:	4413      	add	r3, r2
 800aaae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aab2:	460a      	mov	r2, r1
 800aab4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	78db      	ldrb	r3, [r3, #3]
 800aaba:	2b01      	cmp	r3, #1
 800aabc:	d128      	bne.n	800ab10 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800aabe:	69fb      	ldr	r3, [r7, #28]
 800aac0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aac4:	689b      	ldr	r3, [r3, #8]
 800aac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d110      	bne.n	800aaf0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800aace:	69bb      	ldr	r3, [r7, #24]
 800aad0:	015a      	lsls	r2, r3, #5
 800aad2:	69fb      	ldr	r3, [r7, #28]
 800aad4:	4413      	add	r3, r2
 800aad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	69ba      	ldr	r2, [r7, #24]
 800aade:	0151      	lsls	r1, r2, #5
 800aae0:	69fa      	ldr	r2, [r7, #28]
 800aae2:	440a      	add	r2, r1
 800aae4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aae8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800aaec:	6013      	str	r3, [r2, #0]
 800aaee:	e00f      	b.n	800ab10 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800aaf0:	69bb      	ldr	r3, [r7, #24]
 800aaf2:	015a      	lsls	r2, r3, #5
 800aaf4:	69fb      	ldr	r3, [r7, #28]
 800aaf6:	4413      	add	r3, r2
 800aaf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	69ba      	ldr	r2, [r7, #24]
 800ab00:	0151      	lsls	r1, r2, #5
 800ab02:	69fa      	ldr	r2, [r7, #28]
 800ab04:	440a      	add	r2, r1
 800ab06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab0e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ab10:	69bb      	ldr	r3, [r7, #24]
 800ab12:	015a      	lsls	r2, r3, #5
 800ab14:	69fb      	ldr	r3, [r7, #28]
 800ab16:	4413      	add	r3, r2
 800ab18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	69ba      	ldr	r2, [r7, #24]
 800ab20:	0151      	lsls	r1, r2, #5
 800ab22:	69fa      	ldr	r2, [r7, #28]
 800ab24:	440a      	add	r2, r1
 800ab26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab2a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ab2e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ab30:	2300      	movs	r3, #0
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	3720      	adds	r7, #32
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bd80      	pop	{r7, pc}
 800ab3a:	bf00      	nop
 800ab3c:	1ff80000 	.word	0x1ff80000

0800ab40 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ab40:	b480      	push	{r7}
 800ab42:	b087      	sub	sp, #28
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	60f8      	str	r0, [r7, #12]
 800ab48:	60b9      	str	r1, [r7, #8]
 800ab4a:	4613      	mov	r3, r2
 800ab4c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	781b      	ldrb	r3, [r3, #0]
 800ab56:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	785b      	ldrb	r3, [r3, #1]
 800ab5c:	2b01      	cmp	r3, #1
 800ab5e:	f040 80cd 	bne.w	800acfc <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	695b      	ldr	r3, [r3, #20]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d132      	bne.n	800abd0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ab6a:	693b      	ldr	r3, [r7, #16]
 800ab6c:	015a      	lsls	r2, r3, #5
 800ab6e:	697b      	ldr	r3, [r7, #20]
 800ab70:	4413      	add	r3, r2
 800ab72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab76:	691b      	ldr	r3, [r3, #16]
 800ab78:	693a      	ldr	r2, [r7, #16]
 800ab7a:	0151      	lsls	r1, r2, #5
 800ab7c:	697a      	ldr	r2, [r7, #20]
 800ab7e:	440a      	add	r2, r1
 800ab80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab84:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ab88:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ab8c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ab8e:	693b      	ldr	r3, [r7, #16]
 800ab90:	015a      	lsls	r2, r3, #5
 800ab92:	697b      	ldr	r3, [r7, #20]
 800ab94:	4413      	add	r3, r2
 800ab96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab9a:	691b      	ldr	r3, [r3, #16]
 800ab9c:	693a      	ldr	r2, [r7, #16]
 800ab9e:	0151      	lsls	r1, r2, #5
 800aba0:	697a      	ldr	r2, [r7, #20]
 800aba2:	440a      	add	r2, r1
 800aba4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aba8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800abac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800abae:	693b      	ldr	r3, [r7, #16]
 800abb0:	015a      	lsls	r2, r3, #5
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	4413      	add	r3, r2
 800abb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abba:	691b      	ldr	r3, [r3, #16]
 800abbc:	693a      	ldr	r2, [r7, #16]
 800abbe:	0151      	lsls	r1, r2, #5
 800abc0:	697a      	ldr	r2, [r7, #20]
 800abc2:	440a      	add	r2, r1
 800abc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abc8:	0cdb      	lsrs	r3, r3, #19
 800abca:	04db      	lsls	r3, r3, #19
 800abcc:	6113      	str	r3, [r2, #16]
 800abce:	e04e      	b.n	800ac6e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800abd0:	693b      	ldr	r3, [r7, #16]
 800abd2:	015a      	lsls	r2, r3, #5
 800abd4:	697b      	ldr	r3, [r7, #20]
 800abd6:	4413      	add	r3, r2
 800abd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abdc:	691b      	ldr	r3, [r3, #16]
 800abde:	693a      	ldr	r2, [r7, #16]
 800abe0:	0151      	lsls	r1, r2, #5
 800abe2:	697a      	ldr	r2, [r7, #20]
 800abe4:	440a      	add	r2, r1
 800abe6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abea:	0cdb      	lsrs	r3, r3, #19
 800abec:	04db      	lsls	r3, r3, #19
 800abee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800abf0:	693b      	ldr	r3, [r7, #16]
 800abf2:	015a      	lsls	r2, r3, #5
 800abf4:	697b      	ldr	r3, [r7, #20]
 800abf6:	4413      	add	r3, r2
 800abf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abfc:	691b      	ldr	r3, [r3, #16]
 800abfe:	693a      	ldr	r2, [r7, #16]
 800ac00:	0151      	lsls	r1, r2, #5
 800ac02:	697a      	ldr	r2, [r7, #20]
 800ac04:	440a      	add	r2, r1
 800ac06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac0a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ac0e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ac12:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	695a      	ldr	r2, [r3, #20]
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	689b      	ldr	r3, [r3, #8]
 800ac1c:	429a      	cmp	r2, r3
 800ac1e:	d903      	bls.n	800ac28 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	689a      	ldr	r2, [r3, #8]
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ac28:	693b      	ldr	r3, [r7, #16]
 800ac2a:	015a      	lsls	r2, r3, #5
 800ac2c:	697b      	ldr	r3, [r7, #20]
 800ac2e:	4413      	add	r3, r2
 800ac30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac34:	691b      	ldr	r3, [r3, #16]
 800ac36:	693a      	ldr	r2, [r7, #16]
 800ac38:	0151      	lsls	r1, r2, #5
 800ac3a:	697a      	ldr	r2, [r7, #20]
 800ac3c:	440a      	add	r2, r1
 800ac3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac42:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ac46:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ac48:	693b      	ldr	r3, [r7, #16]
 800ac4a:	015a      	lsls	r2, r3, #5
 800ac4c:	697b      	ldr	r3, [r7, #20]
 800ac4e:	4413      	add	r3, r2
 800ac50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac54:	691a      	ldr	r2, [r3, #16]
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	695b      	ldr	r3, [r3, #20]
 800ac5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ac5e:	6939      	ldr	r1, [r7, #16]
 800ac60:	0148      	lsls	r0, r1, #5
 800ac62:	6979      	ldr	r1, [r7, #20]
 800ac64:	4401      	add	r1, r0
 800ac66:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ac6a:	4313      	orrs	r3, r2
 800ac6c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ac6e:	79fb      	ldrb	r3, [r7, #7]
 800ac70:	2b01      	cmp	r3, #1
 800ac72:	d11e      	bne.n	800acb2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	691b      	ldr	r3, [r3, #16]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d009      	beq.n	800ac90 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ac7c:	693b      	ldr	r3, [r7, #16]
 800ac7e:	015a      	lsls	r2, r3, #5
 800ac80:	697b      	ldr	r3, [r7, #20]
 800ac82:	4413      	add	r3, r2
 800ac84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac88:	461a      	mov	r2, r3
 800ac8a:	68bb      	ldr	r3, [r7, #8]
 800ac8c:	691b      	ldr	r3, [r3, #16]
 800ac8e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ac90:	693b      	ldr	r3, [r7, #16]
 800ac92:	015a      	lsls	r2, r3, #5
 800ac94:	697b      	ldr	r3, [r7, #20]
 800ac96:	4413      	add	r3, r2
 800ac98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	693a      	ldr	r2, [r7, #16]
 800aca0:	0151      	lsls	r1, r2, #5
 800aca2:	697a      	ldr	r2, [r7, #20]
 800aca4:	440a      	add	r2, r1
 800aca6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800acaa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800acae:	6013      	str	r3, [r2, #0]
 800acb0:	e092      	b.n	800add8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800acb2:	693b      	ldr	r3, [r7, #16]
 800acb4:	015a      	lsls	r2, r3, #5
 800acb6:	697b      	ldr	r3, [r7, #20]
 800acb8:	4413      	add	r3, r2
 800acba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	693a      	ldr	r2, [r7, #16]
 800acc2:	0151      	lsls	r1, r2, #5
 800acc4:	697a      	ldr	r2, [r7, #20]
 800acc6:	440a      	add	r2, r1
 800acc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800accc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800acd0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800acd2:	68bb      	ldr	r3, [r7, #8]
 800acd4:	695b      	ldr	r3, [r3, #20]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d07e      	beq.n	800add8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800acda:	697b      	ldr	r3, [r7, #20]
 800acdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ace0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	781b      	ldrb	r3, [r3, #0]
 800ace6:	f003 030f 	and.w	r3, r3, #15
 800acea:	2101      	movs	r1, #1
 800acec:	fa01 f303 	lsl.w	r3, r1, r3
 800acf0:	6979      	ldr	r1, [r7, #20]
 800acf2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800acf6:	4313      	orrs	r3, r2
 800acf8:	634b      	str	r3, [r1, #52]	; 0x34
 800acfa:	e06d      	b.n	800add8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800acfc:	693b      	ldr	r3, [r7, #16]
 800acfe:	015a      	lsls	r2, r3, #5
 800ad00:	697b      	ldr	r3, [r7, #20]
 800ad02:	4413      	add	r3, r2
 800ad04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad08:	691b      	ldr	r3, [r3, #16]
 800ad0a:	693a      	ldr	r2, [r7, #16]
 800ad0c:	0151      	lsls	r1, r2, #5
 800ad0e:	697a      	ldr	r2, [r7, #20]
 800ad10:	440a      	add	r2, r1
 800ad12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad16:	0cdb      	lsrs	r3, r3, #19
 800ad18:	04db      	lsls	r3, r3, #19
 800ad1a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ad1c:	693b      	ldr	r3, [r7, #16]
 800ad1e:	015a      	lsls	r2, r3, #5
 800ad20:	697b      	ldr	r3, [r7, #20]
 800ad22:	4413      	add	r3, r2
 800ad24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad28:	691b      	ldr	r3, [r3, #16]
 800ad2a:	693a      	ldr	r2, [r7, #16]
 800ad2c:	0151      	lsls	r1, r2, #5
 800ad2e:	697a      	ldr	r2, [r7, #20]
 800ad30:	440a      	add	r2, r1
 800ad32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad36:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ad3a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ad3e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	695b      	ldr	r3, [r3, #20]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d003      	beq.n	800ad50 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800ad48:	68bb      	ldr	r3, [r7, #8]
 800ad4a:	689a      	ldr	r2, [r3, #8]
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ad50:	693b      	ldr	r3, [r7, #16]
 800ad52:	015a      	lsls	r2, r3, #5
 800ad54:	697b      	ldr	r3, [r7, #20]
 800ad56:	4413      	add	r3, r2
 800ad58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad5c:	691b      	ldr	r3, [r3, #16]
 800ad5e:	693a      	ldr	r2, [r7, #16]
 800ad60:	0151      	lsls	r1, r2, #5
 800ad62:	697a      	ldr	r2, [r7, #20]
 800ad64:	440a      	add	r2, r1
 800ad66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ad6e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	015a      	lsls	r2, r3, #5
 800ad74:	697b      	ldr	r3, [r7, #20]
 800ad76:	4413      	add	r3, r2
 800ad78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad7c:	691a      	ldr	r2, [r3, #16]
 800ad7e:	68bb      	ldr	r3, [r7, #8]
 800ad80:	689b      	ldr	r3, [r3, #8]
 800ad82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ad86:	6939      	ldr	r1, [r7, #16]
 800ad88:	0148      	lsls	r0, r1, #5
 800ad8a:	6979      	ldr	r1, [r7, #20]
 800ad8c:	4401      	add	r1, r0
 800ad8e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ad92:	4313      	orrs	r3, r2
 800ad94:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800ad96:	79fb      	ldrb	r3, [r7, #7]
 800ad98:	2b01      	cmp	r3, #1
 800ad9a:	d10d      	bne.n	800adb8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ad9c:	68bb      	ldr	r3, [r7, #8]
 800ad9e:	68db      	ldr	r3, [r3, #12]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d009      	beq.n	800adb8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	68d9      	ldr	r1, [r3, #12]
 800ada8:	693b      	ldr	r3, [r7, #16]
 800adaa:	015a      	lsls	r2, r3, #5
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	4413      	add	r3, r2
 800adb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adb4:	460a      	mov	r2, r1
 800adb6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800adb8:	693b      	ldr	r3, [r7, #16]
 800adba:	015a      	lsls	r2, r3, #5
 800adbc:	697b      	ldr	r3, [r7, #20]
 800adbe:	4413      	add	r3, r2
 800adc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	693a      	ldr	r2, [r7, #16]
 800adc8:	0151      	lsls	r1, r2, #5
 800adca:	697a      	ldr	r2, [r7, #20]
 800adcc:	440a      	add	r2, r1
 800adce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800add2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800add6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800add8:	2300      	movs	r3, #0
}
 800adda:	4618      	mov	r0, r3
 800addc:	371c      	adds	r7, #28
 800adde:	46bd      	mov	sp, r7
 800ade0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade4:	4770      	bx	lr

0800ade6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ade6:	b480      	push	{r7}
 800ade8:	b089      	sub	sp, #36	; 0x24
 800adea:	af00      	add	r7, sp, #0
 800adec:	60f8      	str	r0, [r7, #12]
 800adee:	60b9      	str	r1, [r7, #8]
 800adf0:	4611      	mov	r1, r2
 800adf2:	461a      	mov	r2, r3
 800adf4:	460b      	mov	r3, r1
 800adf6:	71fb      	strb	r3, [r7, #7]
 800adf8:	4613      	mov	r3, r2
 800adfa:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800ae04:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d11a      	bne.n	800ae42 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ae0c:	88bb      	ldrh	r3, [r7, #4]
 800ae0e:	3303      	adds	r3, #3
 800ae10:	089b      	lsrs	r3, r3, #2
 800ae12:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ae14:	2300      	movs	r3, #0
 800ae16:	61bb      	str	r3, [r7, #24]
 800ae18:	e00f      	b.n	800ae3a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ae1a:	79fb      	ldrb	r3, [r7, #7]
 800ae1c:	031a      	lsls	r2, r3, #12
 800ae1e:	697b      	ldr	r3, [r7, #20]
 800ae20:	4413      	add	r3, r2
 800ae22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae26:	461a      	mov	r2, r3
 800ae28:	69fb      	ldr	r3, [r7, #28]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ae2e:	69fb      	ldr	r3, [r7, #28]
 800ae30:	3304      	adds	r3, #4
 800ae32:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ae34:	69bb      	ldr	r3, [r7, #24]
 800ae36:	3301      	adds	r3, #1
 800ae38:	61bb      	str	r3, [r7, #24]
 800ae3a:	69ba      	ldr	r2, [r7, #24]
 800ae3c:	693b      	ldr	r3, [r7, #16]
 800ae3e:	429a      	cmp	r2, r3
 800ae40:	d3eb      	bcc.n	800ae1a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ae42:	2300      	movs	r3, #0
}
 800ae44:	4618      	mov	r0, r3
 800ae46:	3724      	adds	r7, #36	; 0x24
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4e:	4770      	bx	lr

0800ae50 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ae50:	b480      	push	{r7}
 800ae52:	b089      	sub	sp, #36	; 0x24
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	60f8      	str	r0, [r7, #12]
 800ae58:	60b9      	str	r1, [r7, #8]
 800ae5a:	4613      	mov	r3, r2
 800ae5c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800ae66:	88fb      	ldrh	r3, [r7, #6]
 800ae68:	3303      	adds	r3, #3
 800ae6a:	089b      	lsrs	r3, r3, #2
 800ae6c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800ae6e:	2300      	movs	r3, #0
 800ae70:	61bb      	str	r3, [r7, #24]
 800ae72:	e00b      	b.n	800ae8c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ae74:	697b      	ldr	r3, [r7, #20]
 800ae76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae7a:	681a      	ldr	r2, [r3, #0]
 800ae7c:	69fb      	ldr	r3, [r7, #28]
 800ae7e:	601a      	str	r2, [r3, #0]
    pDest++;
 800ae80:	69fb      	ldr	r3, [r7, #28]
 800ae82:	3304      	adds	r3, #4
 800ae84:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800ae86:	69bb      	ldr	r3, [r7, #24]
 800ae88:	3301      	adds	r3, #1
 800ae8a:	61bb      	str	r3, [r7, #24]
 800ae8c:	69ba      	ldr	r2, [r7, #24]
 800ae8e:	693b      	ldr	r3, [r7, #16]
 800ae90:	429a      	cmp	r2, r3
 800ae92:	d3ef      	bcc.n	800ae74 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800ae94:	69fb      	ldr	r3, [r7, #28]
}
 800ae96:	4618      	mov	r0, r3
 800ae98:	3724      	adds	r7, #36	; 0x24
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea0:	4770      	bx	lr

0800aea2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800aea2:	b480      	push	{r7}
 800aea4:	b085      	sub	sp, #20
 800aea6:	af00      	add	r7, sp, #0
 800aea8:	6078      	str	r0, [r7, #4]
 800aeaa:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	781b      	ldrb	r3, [r3, #0]
 800aeb4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	785b      	ldrb	r3, [r3, #1]
 800aeba:	2b01      	cmp	r3, #1
 800aebc:	d12c      	bne.n	800af18 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800aebe:	68bb      	ldr	r3, [r7, #8]
 800aec0:	015a      	lsls	r2, r3, #5
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	4413      	add	r3, r2
 800aec6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	db12      	blt.n	800aef6 <USB_EPSetStall+0x54>
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d00f      	beq.n	800aef6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800aed6:	68bb      	ldr	r3, [r7, #8]
 800aed8:	015a      	lsls	r2, r3, #5
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	4413      	add	r3, r2
 800aede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	68ba      	ldr	r2, [r7, #8]
 800aee6:	0151      	lsls	r1, r2, #5
 800aee8:	68fa      	ldr	r2, [r7, #12]
 800aeea:	440a      	add	r2, r1
 800aeec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aef0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800aef4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	015a      	lsls	r2, r3, #5
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	4413      	add	r3, r2
 800aefe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	68ba      	ldr	r2, [r7, #8]
 800af06:	0151      	lsls	r1, r2, #5
 800af08:	68fa      	ldr	r2, [r7, #12]
 800af0a:	440a      	add	r2, r1
 800af0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800af14:	6013      	str	r3, [r2, #0]
 800af16:	e02b      	b.n	800af70 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800af18:	68bb      	ldr	r3, [r7, #8]
 800af1a:	015a      	lsls	r2, r3, #5
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	4413      	add	r3, r2
 800af20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	2b00      	cmp	r3, #0
 800af28:	db12      	blt.n	800af50 <USB_EPSetStall+0xae>
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d00f      	beq.n	800af50 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800af30:	68bb      	ldr	r3, [r7, #8]
 800af32:	015a      	lsls	r2, r3, #5
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	4413      	add	r3, r2
 800af38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	68ba      	ldr	r2, [r7, #8]
 800af40:	0151      	lsls	r1, r2, #5
 800af42:	68fa      	ldr	r2, [r7, #12]
 800af44:	440a      	add	r2, r1
 800af46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af4a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800af4e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800af50:	68bb      	ldr	r3, [r7, #8]
 800af52:	015a      	lsls	r2, r3, #5
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	4413      	add	r3, r2
 800af58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	68ba      	ldr	r2, [r7, #8]
 800af60:	0151      	lsls	r1, r2, #5
 800af62:	68fa      	ldr	r2, [r7, #12]
 800af64:	440a      	add	r2, r1
 800af66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800af6e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800af70:	2300      	movs	r3, #0
}
 800af72:	4618      	mov	r0, r3
 800af74:	3714      	adds	r7, #20
 800af76:	46bd      	mov	sp, r7
 800af78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7c:	4770      	bx	lr

0800af7e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800af7e:	b480      	push	{r7}
 800af80:	b085      	sub	sp, #20
 800af82:	af00      	add	r7, sp, #0
 800af84:	6078      	str	r0, [r7, #4]
 800af86:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	781b      	ldrb	r3, [r3, #0]
 800af90:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	785b      	ldrb	r3, [r3, #1]
 800af96:	2b01      	cmp	r3, #1
 800af98:	d128      	bne.n	800afec <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800af9a:	68bb      	ldr	r3, [r7, #8]
 800af9c:	015a      	lsls	r2, r3, #5
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	4413      	add	r3, r2
 800afa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	68ba      	ldr	r2, [r7, #8]
 800afaa:	0151      	lsls	r1, r2, #5
 800afac:	68fa      	ldr	r2, [r7, #12]
 800afae:	440a      	add	r2, r1
 800afb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800afb4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800afb8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	78db      	ldrb	r3, [r3, #3]
 800afbe:	2b03      	cmp	r3, #3
 800afc0:	d003      	beq.n	800afca <USB_EPClearStall+0x4c>
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	78db      	ldrb	r3, [r3, #3]
 800afc6:	2b02      	cmp	r3, #2
 800afc8:	d138      	bne.n	800b03c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	015a      	lsls	r2, r3, #5
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	4413      	add	r3, r2
 800afd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	68ba      	ldr	r2, [r7, #8]
 800afda:	0151      	lsls	r1, r2, #5
 800afdc:	68fa      	ldr	r2, [r7, #12]
 800afde:	440a      	add	r2, r1
 800afe0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800afe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800afe8:	6013      	str	r3, [r2, #0]
 800afea:	e027      	b.n	800b03c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	015a      	lsls	r2, r3, #5
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	4413      	add	r3, r2
 800aff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	68ba      	ldr	r2, [r7, #8]
 800affc:	0151      	lsls	r1, r2, #5
 800affe:	68fa      	ldr	r2, [r7, #12]
 800b000:	440a      	add	r2, r1
 800b002:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b006:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b00a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	78db      	ldrb	r3, [r3, #3]
 800b010:	2b03      	cmp	r3, #3
 800b012:	d003      	beq.n	800b01c <USB_EPClearStall+0x9e>
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	78db      	ldrb	r3, [r3, #3]
 800b018:	2b02      	cmp	r3, #2
 800b01a:	d10f      	bne.n	800b03c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	015a      	lsls	r2, r3, #5
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	4413      	add	r3, r2
 800b024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	68ba      	ldr	r2, [r7, #8]
 800b02c:	0151      	lsls	r1, r2, #5
 800b02e:	68fa      	ldr	r2, [r7, #12]
 800b030:	440a      	add	r2, r1
 800b032:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b036:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b03a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b03c:	2300      	movs	r3, #0
}
 800b03e:	4618      	mov	r0, r3
 800b040:	3714      	adds	r7, #20
 800b042:	46bd      	mov	sp, r7
 800b044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b048:	4770      	bx	lr

0800b04a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b04a:	b480      	push	{r7}
 800b04c:	b085      	sub	sp, #20
 800b04e:	af00      	add	r7, sp, #0
 800b050:	6078      	str	r0, [r7, #4]
 800b052:	460b      	mov	r3, r1
 800b054:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	68fa      	ldr	r2, [r7, #12]
 800b064:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b068:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b06c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b074:	681a      	ldr	r2, [r3, #0]
 800b076:	78fb      	ldrb	r3, [r7, #3]
 800b078:	011b      	lsls	r3, r3, #4
 800b07a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b07e:	68f9      	ldr	r1, [r7, #12]
 800b080:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b084:	4313      	orrs	r3, r2
 800b086:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b088:	2300      	movs	r3, #0
}
 800b08a:	4618      	mov	r0, r3
 800b08c:	3714      	adds	r7, #20
 800b08e:	46bd      	mov	sp, r7
 800b090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b094:	4770      	bx	lr

0800b096 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b096:	b480      	push	{r7}
 800b098:	b085      	sub	sp, #20
 800b09a:	af00      	add	r7, sp, #0
 800b09c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	68fa      	ldr	r2, [r7, #12]
 800b0ac:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b0b0:	f023 0303 	bic.w	r3, r3, #3
 800b0b4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0bc:	685b      	ldr	r3, [r3, #4]
 800b0be:	68fa      	ldr	r2, [r7, #12]
 800b0c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b0c4:	f023 0302 	bic.w	r3, r3, #2
 800b0c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b0ca:	2300      	movs	r3, #0
}
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	3714      	adds	r7, #20
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d6:	4770      	bx	lr

0800b0d8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b0d8:	b480      	push	{r7}
 800b0da:	b085      	sub	sp, #20
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	68fa      	ldr	r2, [r7, #12]
 800b0ee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b0f2:	f023 0303 	bic.w	r3, r3, #3
 800b0f6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0fe:	685b      	ldr	r3, [r3, #4]
 800b100:	68fa      	ldr	r2, [r7, #12]
 800b102:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b106:	f043 0302 	orr.w	r3, r3, #2
 800b10a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b10c:	2300      	movs	r3, #0
}
 800b10e:	4618      	mov	r0, r3
 800b110:	3714      	adds	r7, #20
 800b112:	46bd      	mov	sp, r7
 800b114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b118:	4770      	bx	lr

0800b11a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b11a:	b480      	push	{r7}
 800b11c:	b085      	sub	sp, #20
 800b11e:	af00      	add	r7, sp, #0
 800b120:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	695b      	ldr	r3, [r3, #20]
 800b126:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	699b      	ldr	r3, [r3, #24]
 800b12c:	68fa      	ldr	r2, [r7, #12]
 800b12e:	4013      	ands	r3, r2
 800b130:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b132:	68fb      	ldr	r3, [r7, #12]
}
 800b134:	4618      	mov	r0, r3
 800b136:	3714      	adds	r7, #20
 800b138:	46bd      	mov	sp, r7
 800b13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13e:	4770      	bx	lr

0800b140 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b140:	b480      	push	{r7}
 800b142:	b085      	sub	sp, #20
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b152:	699b      	ldr	r3, [r3, #24]
 800b154:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b15c:	69db      	ldr	r3, [r3, #28]
 800b15e:	68ba      	ldr	r2, [r7, #8]
 800b160:	4013      	ands	r3, r2
 800b162:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	0c1b      	lsrs	r3, r3, #16
}
 800b168:	4618      	mov	r0, r3
 800b16a:	3714      	adds	r7, #20
 800b16c:	46bd      	mov	sp, r7
 800b16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b172:	4770      	bx	lr

0800b174 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b174:	b480      	push	{r7}
 800b176:	b085      	sub	sp, #20
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b186:	699b      	ldr	r3, [r3, #24]
 800b188:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b190:	69db      	ldr	r3, [r3, #28]
 800b192:	68ba      	ldr	r2, [r7, #8]
 800b194:	4013      	ands	r3, r2
 800b196:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b198:	68bb      	ldr	r3, [r7, #8]
 800b19a:	b29b      	uxth	r3, r3
}
 800b19c:	4618      	mov	r0, r3
 800b19e:	3714      	adds	r7, #20
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a6:	4770      	bx	lr

0800b1a8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b1a8:	b480      	push	{r7}
 800b1aa:	b085      	sub	sp, #20
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
 800b1b0:	460b      	mov	r3, r1
 800b1b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b1b8:	78fb      	ldrb	r3, [r7, #3]
 800b1ba:	015a      	lsls	r2, r3, #5
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	4413      	add	r3, r2
 800b1c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1c4:	689b      	ldr	r3, [r3, #8]
 800b1c6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1ce:	695b      	ldr	r3, [r3, #20]
 800b1d0:	68ba      	ldr	r2, [r7, #8]
 800b1d2:	4013      	ands	r3, r2
 800b1d4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b1d6:	68bb      	ldr	r3, [r7, #8]
}
 800b1d8:	4618      	mov	r0, r3
 800b1da:	3714      	adds	r7, #20
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e2:	4770      	bx	lr

0800b1e4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	b087      	sub	sp, #28
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
 800b1ec:	460b      	mov	r3, r1
 800b1ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b1f4:	697b      	ldr	r3, [r7, #20]
 800b1f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1fa:	691b      	ldr	r3, [r3, #16]
 800b1fc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b1fe:	697b      	ldr	r3, [r7, #20]
 800b200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b206:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b208:	78fb      	ldrb	r3, [r7, #3]
 800b20a:	f003 030f 	and.w	r3, r3, #15
 800b20e:	68fa      	ldr	r2, [r7, #12]
 800b210:	fa22 f303 	lsr.w	r3, r2, r3
 800b214:	01db      	lsls	r3, r3, #7
 800b216:	b2db      	uxtb	r3, r3
 800b218:	693a      	ldr	r2, [r7, #16]
 800b21a:	4313      	orrs	r3, r2
 800b21c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b21e:	78fb      	ldrb	r3, [r7, #3]
 800b220:	015a      	lsls	r2, r3, #5
 800b222:	697b      	ldr	r3, [r7, #20]
 800b224:	4413      	add	r3, r2
 800b226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b22a:	689b      	ldr	r3, [r3, #8]
 800b22c:	693a      	ldr	r2, [r7, #16]
 800b22e:	4013      	ands	r3, r2
 800b230:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b232:	68bb      	ldr	r3, [r7, #8]
}
 800b234:	4618      	mov	r0, r3
 800b236:	371c      	adds	r7, #28
 800b238:	46bd      	mov	sp, r7
 800b23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23e:	4770      	bx	lr

0800b240 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b240:	b480      	push	{r7}
 800b242:	b083      	sub	sp, #12
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	695b      	ldr	r3, [r3, #20]
 800b24c:	f003 0301 	and.w	r3, r3, #1
}
 800b250:	4618      	mov	r0, r3
 800b252:	370c      	adds	r7, #12
 800b254:	46bd      	mov	sp, r7
 800b256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25a:	4770      	bx	lr

0800b25c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b25c:	b480      	push	{r7}
 800b25e:	b085      	sub	sp, #20
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	68fa      	ldr	r2, [r7, #12]
 800b272:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b276:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b27a:	f023 0307 	bic.w	r3, r3, #7
 800b27e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b286:	685b      	ldr	r3, [r3, #4]
 800b288:	68fa      	ldr	r2, [r7, #12]
 800b28a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b28e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b292:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b294:	2300      	movs	r3, #0
}
 800b296:	4618      	mov	r0, r3
 800b298:	3714      	adds	r7, #20
 800b29a:	46bd      	mov	sp, r7
 800b29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a0:	4770      	bx	lr
	...

0800b2a4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800b2a4:	b480      	push	{r7}
 800b2a6:	b087      	sub	sp, #28
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	60f8      	str	r0, [r7, #12]
 800b2ac:	460b      	mov	r3, r1
 800b2ae:	607a      	str	r2, [r7, #4]
 800b2b0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	333c      	adds	r3, #60	; 0x3c
 800b2ba:	3304      	adds	r3, #4
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b2c0:	693b      	ldr	r3, [r7, #16]
 800b2c2:	4a26      	ldr	r2, [pc, #152]	; (800b35c <USB_EP0_OutStart+0xb8>)
 800b2c4:	4293      	cmp	r3, r2
 800b2c6:	d90a      	bls.n	800b2de <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b2c8:	697b      	ldr	r3, [r7, #20]
 800b2ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b2d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b2d8:	d101      	bne.n	800b2de <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b2da:	2300      	movs	r3, #0
 800b2dc:	e037      	b.n	800b34e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b2de:	697b      	ldr	r3, [r7, #20]
 800b2e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2e4:	461a      	mov	r2, r3
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b2ea:	697b      	ldr	r3, [r7, #20]
 800b2ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2f0:	691b      	ldr	r3, [r3, #16]
 800b2f2:	697a      	ldr	r2, [r7, #20]
 800b2f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b2f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b2fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b2fe:	697b      	ldr	r3, [r7, #20]
 800b300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b304:	691b      	ldr	r3, [r3, #16]
 800b306:	697a      	ldr	r2, [r7, #20]
 800b308:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b30c:	f043 0318 	orr.w	r3, r3, #24
 800b310:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b312:	697b      	ldr	r3, [r7, #20]
 800b314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b318:	691b      	ldr	r3, [r3, #16]
 800b31a:	697a      	ldr	r2, [r7, #20]
 800b31c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b320:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b324:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b326:	7afb      	ldrb	r3, [r7, #11]
 800b328:	2b01      	cmp	r3, #1
 800b32a:	d10f      	bne.n	800b34c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b32c:	697b      	ldr	r3, [r7, #20]
 800b32e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b332:	461a      	mov	r2, r3
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b338:	697b      	ldr	r3, [r7, #20]
 800b33a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	697a      	ldr	r2, [r7, #20]
 800b342:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b346:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800b34a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b34c:	2300      	movs	r3, #0
}
 800b34e:	4618      	mov	r0, r3
 800b350:	371c      	adds	r7, #28
 800b352:	46bd      	mov	sp, r7
 800b354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b358:	4770      	bx	lr
 800b35a:	bf00      	nop
 800b35c:	4f54300a 	.word	0x4f54300a

0800b360 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b360:	b480      	push	{r7}
 800b362:	b085      	sub	sp, #20
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b368:	2300      	movs	r3, #0
 800b36a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	3301      	adds	r3, #1
 800b370:	60fb      	str	r3, [r7, #12]
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	4a13      	ldr	r2, [pc, #76]	; (800b3c4 <USB_CoreReset+0x64>)
 800b376:	4293      	cmp	r3, r2
 800b378:	d901      	bls.n	800b37e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b37a:	2303      	movs	r3, #3
 800b37c:	e01b      	b.n	800b3b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	691b      	ldr	r3, [r3, #16]
 800b382:	2b00      	cmp	r3, #0
 800b384:	daf2      	bge.n	800b36c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b386:	2300      	movs	r3, #0
 800b388:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	691b      	ldr	r3, [r3, #16]
 800b38e:	f043 0201 	orr.w	r2, r3, #1
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	3301      	adds	r3, #1
 800b39a:	60fb      	str	r3, [r7, #12]
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	4a09      	ldr	r2, [pc, #36]	; (800b3c4 <USB_CoreReset+0x64>)
 800b3a0:	4293      	cmp	r3, r2
 800b3a2:	d901      	bls.n	800b3a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b3a4:	2303      	movs	r3, #3
 800b3a6:	e006      	b.n	800b3b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	691b      	ldr	r3, [r3, #16]
 800b3ac:	f003 0301 	and.w	r3, r3, #1
 800b3b0:	2b01      	cmp	r3, #1
 800b3b2:	d0f0      	beq.n	800b396 <USB_CoreReset+0x36>

  return HAL_OK;
 800b3b4:	2300      	movs	r3, #0
}
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	3714      	adds	r7, #20
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c0:	4770      	bx	lr
 800b3c2:	bf00      	nop
 800b3c4:	00030d40 	.word	0x00030d40

0800b3c8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b084      	sub	sp, #16
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
 800b3d0:	460b      	mov	r3, r1
 800b3d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b3d4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b3d8:	f00d fe62 	bl	80190a0 <malloc>
 800b3dc:	4603      	mov	r3, r0
 800b3de:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d105      	bne.n	800b3f2 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800b3ee:	2302      	movs	r3, #2
 800b3f0:	e066      	b.n	800b4c0 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	68fa      	ldr	r2, [r7, #12]
 800b3f6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	7c1b      	ldrb	r3, [r3, #16]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d119      	bne.n	800b436 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b402:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b406:	2202      	movs	r2, #2
 800b408:	2181      	movs	r1, #129	; 0x81
 800b40a:	6878      	ldr	r0, [r7, #4]
 800b40c:	f005 f939 	bl	8010682 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2201      	movs	r2, #1
 800b414:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b416:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b41a:	2202      	movs	r2, #2
 800b41c:	2101      	movs	r1, #1
 800b41e:	6878      	ldr	r0, [r7, #4]
 800b420:	f005 f92f 	bl	8010682 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2201      	movs	r2, #1
 800b428:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2210      	movs	r2, #16
 800b430:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800b434:	e016      	b.n	800b464 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b436:	2340      	movs	r3, #64	; 0x40
 800b438:	2202      	movs	r2, #2
 800b43a:	2181      	movs	r1, #129	; 0x81
 800b43c:	6878      	ldr	r0, [r7, #4]
 800b43e:	f005 f920 	bl	8010682 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	2201      	movs	r2, #1
 800b446:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b448:	2340      	movs	r3, #64	; 0x40
 800b44a:	2202      	movs	r2, #2
 800b44c:	2101      	movs	r1, #1
 800b44e:	6878      	ldr	r0, [r7, #4]
 800b450:	f005 f917 	bl	8010682 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2201      	movs	r2, #1
 800b458:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2210      	movs	r2, #16
 800b460:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b464:	2308      	movs	r3, #8
 800b466:	2203      	movs	r2, #3
 800b468:	2182      	movs	r1, #130	; 0x82
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f005 f909 	bl	8010682 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2201      	movs	r2, #1
 800b474:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	2200      	movs	r2, #0
 800b486:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	2200      	movs	r2, #0
 800b48e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	7c1b      	ldrb	r3, [r3, #16]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d109      	bne.n	800b4ae <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b4a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b4a4:	2101      	movs	r1, #1
 800b4a6:	6878      	ldr	r0, [r7, #4]
 800b4a8:	f005 f9da 	bl	8010860 <USBD_LL_PrepareReceive>
 800b4ac:	e007      	b.n	800b4be <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b4b4:	2340      	movs	r3, #64	; 0x40
 800b4b6:	2101      	movs	r1, #1
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f005 f9d1 	bl	8010860 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b4be:	2300      	movs	r3, #0
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	3710      	adds	r7, #16
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bd80      	pop	{r7, pc}

0800b4c8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b084      	sub	sp, #16
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
 800b4d0:	460b      	mov	r3, r1
 800b4d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b4d8:	2181      	movs	r1, #129	; 0x81
 800b4da:	6878      	ldr	r0, [r7, #4]
 800b4dc:	f005 f8f7 	bl	80106ce <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b4e6:	2101      	movs	r1, #1
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f005 f8f0 	bl	80106ce <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b4f6:	2182      	movs	r1, #130	; 0x82
 800b4f8:	6878      	ldr	r0, [r7, #4]
 800b4fa:	f005 f8e8 	bl	80106ce <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2200      	movs	r2, #0
 800b502:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2200      	movs	r2, #0
 800b50a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b514:	2b00      	cmp	r3, #0
 800b516:	d00e      	beq.n	800b536 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b51e:	685b      	ldr	r3, [r3, #4]
 800b520:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b528:	4618      	mov	r0, r3
 800b52a:	f00d fdc1 	bl	80190b0 <free>
    pdev->pClassData = NULL;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2200      	movs	r2, #0
 800b532:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800b536:	7bfb      	ldrb	r3, [r7, #15]
}
 800b538:	4618      	mov	r0, r3
 800b53a:	3710      	adds	r7, #16
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bd80      	pop	{r7, pc}

0800b540 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b086      	sub	sp, #24
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
 800b548:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b550:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800b552:	2300      	movs	r3, #0
 800b554:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800b556:	2300      	movs	r3, #0
 800b558:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800b55a:	2300      	movs	r3, #0
 800b55c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	781b      	ldrb	r3, [r3, #0]
 800b562:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b566:	2b00      	cmp	r3, #0
 800b568:	d03a      	beq.n	800b5e0 <USBD_CDC_Setup+0xa0>
 800b56a:	2b20      	cmp	r3, #32
 800b56c:	f040 8097 	bne.w	800b69e <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	88db      	ldrh	r3, [r3, #6]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d029      	beq.n	800b5cc <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	781b      	ldrb	r3, [r3, #0]
 800b57c:	b25b      	sxtb	r3, r3
 800b57e:	2b00      	cmp	r3, #0
 800b580:	da11      	bge.n	800b5a6 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b588:	689b      	ldr	r3, [r3, #8]
 800b58a:	683a      	ldr	r2, [r7, #0]
 800b58c:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800b58e:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b590:	683a      	ldr	r2, [r7, #0]
 800b592:	88d2      	ldrh	r2, [r2, #6]
 800b594:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b596:	6939      	ldr	r1, [r7, #16]
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	88db      	ldrh	r3, [r3, #6]
 800b59c:	461a      	mov	r2, r3
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f001 fa9d 	bl	800cade <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800b5a4:	e082      	b.n	800b6ac <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	785a      	ldrb	r2, [r3, #1]
 800b5aa:	693b      	ldr	r3, [r7, #16]
 800b5ac:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800b5b0:	683b      	ldr	r3, [r7, #0]
 800b5b2:	88db      	ldrh	r3, [r3, #6]
 800b5b4:	b2da      	uxtb	r2, r3
 800b5b6:	693b      	ldr	r3, [r7, #16]
 800b5b8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b5bc:	6939      	ldr	r1, [r7, #16]
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	88db      	ldrh	r3, [r3, #6]
 800b5c2:	461a      	mov	r2, r3
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	f001 fab6 	bl	800cb36 <USBD_CtlPrepareRx>
    break;
 800b5ca:	e06f      	b.n	800b6ac <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b5d2:	689b      	ldr	r3, [r3, #8]
 800b5d4:	683a      	ldr	r2, [r7, #0]
 800b5d6:	7850      	ldrb	r0, [r2, #1]
 800b5d8:	2200      	movs	r2, #0
 800b5da:	6839      	ldr	r1, [r7, #0]
 800b5dc:	4798      	blx	r3
    break;
 800b5de:	e065      	b.n	800b6ac <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	785b      	ldrb	r3, [r3, #1]
 800b5e4:	2b0b      	cmp	r3, #11
 800b5e6:	d84f      	bhi.n	800b688 <USBD_CDC_Setup+0x148>
 800b5e8:	a201      	add	r2, pc, #4	; (adr r2, 800b5f0 <USBD_CDC_Setup+0xb0>)
 800b5ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5ee:	bf00      	nop
 800b5f0:	0800b621 	.word	0x0800b621
 800b5f4:	0800b697 	.word	0x0800b697
 800b5f8:	0800b689 	.word	0x0800b689
 800b5fc:	0800b689 	.word	0x0800b689
 800b600:	0800b689 	.word	0x0800b689
 800b604:	0800b689 	.word	0x0800b689
 800b608:	0800b689 	.word	0x0800b689
 800b60c:	0800b689 	.word	0x0800b689
 800b610:	0800b689 	.word	0x0800b689
 800b614:	0800b689 	.word	0x0800b689
 800b618:	0800b649 	.word	0x0800b649
 800b61c:	0800b671 	.word	0x0800b671
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b626:	2b03      	cmp	r3, #3
 800b628:	d107      	bne.n	800b63a <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b62a:	f107 030c 	add.w	r3, r7, #12
 800b62e:	2202      	movs	r2, #2
 800b630:	4619      	mov	r1, r3
 800b632:	6878      	ldr	r0, [r7, #4]
 800b634:	f001 fa53 	bl	800cade <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b638:	e030      	b.n	800b69c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800b63a:	6839      	ldr	r1, [r7, #0]
 800b63c:	6878      	ldr	r0, [r7, #4]
 800b63e:	f001 f9dd 	bl	800c9fc <USBD_CtlError>
        ret = USBD_FAIL;
 800b642:	2303      	movs	r3, #3
 800b644:	75fb      	strb	r3, [r7, #23]
      break;
 800b646:	e029      	b.n	800b69c <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b64e:	2b03      	cmp	r3, #3
 800b650:	d107      	bne.n	800b662 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b652:	f107 030f 	add.w	r3, r7, #15
 800b656:	2201      	movs	r2, #1
 800b658:	4619      	mov	r1, r3
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f001 fa3f 	bl	800cade <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b660:	e01c      	b.n	800b69c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800b662:	6839      	ldr	r1, [r7, #0]
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f001 f9c9 	bl	800c9fc <USBD_CtlError>
        ret = USBD_FAIL;
 800b66a:	2303      	movs	r3, #3
 800b66c:	75fb      	strb	r3, [r7, #23]
      break;
 800b66e:	e015      	b.n	800b69c <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b676:	2b03      	cmp	r3, #3
 800b678:	d00f      	beq.n	800b69a <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800b67a:	6839      	ldr	r1, [r7, #0]
 800b67c:	6878      	ldr	r0, [r7, #4]
 800b67e:	f001 f9bd 	bl	800c9fc <USBD_CtlError>
        ret = USBD_FAIL;
 800b682:	2303      	movs	r3, #3
 800b684:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800b686:	e008      	b.n	800b69a <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800b688:	6839      	ldr	r1, [r7, #0]
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	f001 f9b6 	bl	800c9fc <USBD_CtlError>
      ret = USBD_FAIL;
 800b690:	2303      	movs	r3, #3
 800b692:	75fb      	strb	r3, [r7, #23]
      break;
 800b694:	e002      	b.n	800b69c <USBD_CDC_Setup+0x15c>
      break;
 800b696:	bf00      	nop
 800b698:	e008      	b.n	800b6ac <USBD_CDC_Setup+0x16c>
      break;
 800b69a:	bf00      	nop
    }
    break;
 800b69c:	e006      	b.n	800b6ac <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800b69e:	6839      	ldr	r1, [r7, #0]
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	f001 f9ab 	bl	800c9fc <USBD_CtlError>
    ret = USBD_FAIL;
 800b6a6:	2303      	movs	r3, #3
 800b6a8:	75fb      	strb	r3, [r7, #23]
    break;
 800b6aa:	bf00      	nop
  }

  return (uint8_t)ret;
 800b6ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	3718      	adds	r7, #24
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	bd80      	pop	{r7, pc}
 800b6b6:	bf00      	nop

0800b6b8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b084      	sub	sp, #16
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
 800b6c0:	460b      	mov	r3, r1
 800b6c2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b6ca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d101      	bne.n	800b6da <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b6d6:	2303      	movs	r3, #3
 800b6d8:	e049      	b.n	800b76e <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b6e0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b6e2:	78fa      	ldrb	r2, [r7, #3]
 800b6e4:	6879      	ldr	r1, [r7, #4]
 800b6e6:	4613      	mov	r3, r2
 800b6e8:	009b      	lsls	r3, r3, #2
 800b6ea:	4413      	add	r3, r2
 800b6ec:	009b      	lsls	r3, r3, #2
 800b6ee:	440b      	add	r3, r1
 800b6f0:	3318      	adds	r3, #24
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d029      	beq.n	800b74c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b6f8:	78fa      	ldrb	r2, [r7, #3]
 800b6fa:	6879      	ldr	r1, [r7, #4]
 800b6fc:	4613      	mov	r3, r2
 800b6fe:	009b      	lsls	r3, r3, #2
 800b700:	4413      	add	r3, r2
 800b702:	009b      	lsls	r3, r3, #2
 800b704:	440b      	add	r3, r1
 800b706:	3318      	adds	r3, #24
 800b708:	681a      	ldr	r2, [r3, #0]
 800b70a:	78f9      	ldrb	r1, [r7, #3]
 800b70c:	68f8      	ldr	r0, [r7, #12]
 800b70e:	460b      	mov	r3, r1
 800b710:	00db      	lsls	r3, r3, #3
 800b712:	1a5b      	subs	r3, r3, r1
 800b714:	009b      	lsls	r3, r3, #2
 800b716:	4403      	add	r3, r0
 800b718:	3344      	adds	r3, #68	; 0x44
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	fbb2 f1f3 	udiv	r1, r2, r3
 800b720:	fb03 f301 	mul.w	r3, r3, r1
 800b724:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b726:	2b00      	cmp	r3, #0
 800b728:	d110      	bne.n	800b74c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800b72a:	78fa      	ldrb	r2, [r7, #3]
 800b72c:	6879      	ldr	r1, [r7, #4]
 800b72e:	4613      	mov	r3, r2
 800b730:	009b      	lsls	r3, r3, #2
 800b732:	4413      	add	r3, r2
 800b734:	009b      	lsls	r3, r3, #2
 800b736:	440b      	add	r3, r1
 800b738:	3318      	adds	r3, #24
 800b73a:	2200      	movs	r2, #0
 800b73c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b73e:	78f9      	ldrb	r1, [r7, #3]
 800b740:	2300      	movs	r3, #0
 800b742:	2200      	movs	r2, #0
 800b744:	6878      	ldr	r0, [r7, #4]
 800b746:	f005 f86a 	bl	801081e <USBD_LL_Transmit>
 800b74a:	e00f      	b.n	800b76c <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b74c:	68bb      	ldr	r3, [r7, #8]
 800b74e:	2200      	movs	r2, #0
 800b750:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b75a:	691b      	ldr	r3, [r3, #16]
 800b75c:	68ba      	ldr	r2, [r7, #8]
 800b75e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b762:	68ba      	ldr	r2, [r7, #8]
 800b764:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b768:	78fa      	ldrb	r2, [r7, #3]
 800b76a:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800b76c:	2300      	movs	r3, #0
}
 800b76e:	4618      	mov	r0, r3
 800b770:	3710      	adds	r7, #16
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}

0800b776 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b776:	b580      	push	{r7, lr}
 800b778:	b084      	sub	sp, #16
 800b77a:	af00      	add	r7, sp, #0
 800b77c:	6078      	str	r0, [r7, #4]
 800b77e:	460b      	mov	r3, r1
 800b780:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b788:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b790:	2b00      	cmp	r3, #0
 800b792:	d101      	bne.n	800b798 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b794:	2303      	movs	r3, #3
 800b796:	e015      	b.n	800b7c4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b798:	78fb      	ldrb	r3, [r7, #3]
 800b79a:	4619      	mov	r1, r3
 800b79c:	6878      	ldr	r0, [r7, #4]
 800b79e:	f005 f880 	bl	80108a2 <USBD_LL_GetRxDataSize>
 800b7a2:	4602      	mov	r2, r0
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b7b0:	68db      	ldr	r3, [r3, #12]
 800b7b2:	68fa      	ldr	r2, [r7, #12]
 800b7b4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b7b8:	68fa      	ldr	r2, [r7, #12]
 800b7ba:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b7be:	4611      	mov	r1, r2
 800b7c0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b7c2:	2300      	movs	r3, #0
}
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	3710      	adds	r7, #16
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	bd80      	pop	{r7, pc}

0800b7cc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b084      	sub	sp, #16
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b7da:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d015      	beq.n	800b812 <USBD_CDC_EP0_RxReady+0x46>
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b7ec:	2bff      	cmp	r3, #255	; 0xff
 800b7ee:	d010      	beq.n	800b812 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b7f6:	689b      	ldr	r3, [r3, #8]
 800b7f8:	68fa      	ldr	r2, [r7, #12]
 800b7fa:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800b7fe:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b800:	68fa      	ldr	r2, [r7, #12]
 800b802:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b806:	b292      	uxth	r2, r2
 800b808:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	22ff      	movs	r2, #255	; 0xff
 800b80e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800b812:	2300      	movs	r3, #0
}
 800b814:	4618      	mov	r0, r3
 800b816:	3710      	adds	r7, #16
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}

0800b81c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b81c:	b480      	push	{r7}
 800b81e:	b083      	sub	sp, #12
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2243      	movs	r2, #67	; 0x43
 800b828:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800b82a:	4b03      	ldr	r3, [pc, #12]	; (800b838 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b82c:	4618      	mov	r0, r3
 800b82e:	370c      	adds	r7, #12
 800b830:	46bd      	mov	sp, r7
 800b832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b836:	4770      	bx	lr
 800b838:	20000094 	.word	0x20000094

0800b83c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b83c:	b480      	push	{r7}
 800b83e:	b083      	sub	sp, #12
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2243      	movs	r2, #67	; 0x43
 800b848:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800b84a:	4b03      	ldr	r3, [pc, #12]	; (800b858 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b84c:	4618      	mov	r0, r3
 800b84e:	370c      	adds	r7, #12
 800b850:	46bd      	mov	sp, r7
 800b852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b856:	4770      	bx	lr
 800b858:	20000050 	.word	0x20000050

0800b85c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b85c:	b480      	push	{r7}
 800b85e:	b083      	sub	sp, #12
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2243      	movs	r2, #67	; 0x43
 800b868:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800b86a:	4b03      	ldr	r3, [pc, #12]	; (800b878 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b86c:	4618      	mov	r0, r3
 800b86e:	370c      	adds	r7, #12
 800b870:	46bd      	mov	sp, r7
 800b872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b876:	4770      	bx	lr
 800b878:	200000d8 	.word	0x200000d8

0800b87c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b87c:	b480      	push	{r7}
 800b87e:	b083      	sub	sp, #12
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	220a      	movs	r2, #10
 800b888:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b88a:	4b03      	ldr	r3, [pc, #12]	; (800b898 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b88c:	4618      	mov	r0, r3
 800b88e:	370c      	adds	r7, #12
 800b890:	46bd      	mov	sp, r7
 800b892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b896:	4770      	bx	lr
 800b898:	2000000c 	.word	0x2000000c

0800b89c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b89c:	b480      	push	{r7}
 800b89e:	b083      	sub	sp, #12
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
 800b8a4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d101      	bne.n	800b8b0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b8ac:	2303      	movs	r3, #3
 800b8ae:	e004      	b.n	800b8ba <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	683a      	ldr	r2, [r7, #0]
 800b8b4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800b8b8:	2300      	movs	r3, #0
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	370c      	adds	r7, #12
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c4:	4770      	bx	lr

0800b8c6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b8c6:	b480      	push	{r7}
 800b8c8:	b087      	sub	sp, #28
 800b8ca:	af00      	add	r7, sp, #0
 800b8cc:	60f8      	str	r0, [r7, #12]
 800b8ce:	60b9      	str	r1, [r7, #8]
 800b8d0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b8d8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b8da:	697b      	ldr	r3, [r7, #20]
 800b8dc:	68ba      	ldr	r2, [r7, #8]
 800b8de:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b8e2:	697b      	ldr	r3, [r7, #20]
 800b8e4:	687a      	ldr	r2, [r7, #4]
 800b8e6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b8ea:	2300      	movs	r3, #0
}
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	371c      	adds	r7, #28
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f6:	4770      	bx	lr

0800b8f8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b8f8:	b480      	push	{r7}
 800b8fa:	b085      	sub	sp, #20
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
 800b900:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b908:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	683a      	ldr	r2, [r7, #0]
 800b90e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b912:	2300      	movs	r3, #0
}
 800b914:	4618      	mov	r0, r3
 800b916:	3714      	adds	r7, #20
 800b918:	46bd      	mov	sp, r7
 800b91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91e:	4770      	bx	lr

0800b920 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b084      	sub	sp, #16
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b92e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800b930:	2301      	movs	r3, #1
 800b932:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d101      	bne.n	800b942 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b93e:	2303      	movs	r3, #3
 800b940:	e01a      	b.n	800b978 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800b942:	68bb      	ldr	r3, [r7, #8]
 800b944:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d114      	bne.n	800b976 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	2201      	movs	r2, #1
 800b950:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b954:	68bb      	ldr	r3, [r7, #8]
 800b956:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800b95e:	68bb      	ldr	r3, [r7, #8]
 800b960:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b96a:	2181      	movs	r1, #129	; 0x81
 800b96c:	6878      	ldr	r0, [r7, #4]
 800b96e:	f004 ff56 	bl	801081e <USBD_LL_Transmit>

    ret = USBD_OK;
 800b972:	2300      	movs	r3, #0
 800b974:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b976:	7bfb      	ldrb	r3, [r7, #15]
}
 800b978:	4618      	mov	r0, r3
 800b97a:	3710      	adds	r7, #16
 800b97c:	46bd      	mov	sp, r7
 800b97e:	bd80      	pop	{r7, pc}

0800b980 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b084      	sub	sp, #16
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b98e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b996:	2b00      	cmp	r3, #0
 800b998:	d101      	bne.n	800b99e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b99a:	2303      	movs	r3, #3
 800b99c:	e016      	b.n	800b9cc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	7c1b      	ldrb	r3, [r3, #16]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d109      	bne.n	800b9ba <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b9ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b9b0:	2101      	movs	r1, #1
 800b9b2:	6878      	ldr	r0, [r7, #4]
 800b9b4:	f004 ff54 	bl	8010860 <USBD_LL_PrepareReceive>
 800b9b8:	e007      	b.n	800b9ca <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b9c0:	2340      	movs	r3, #64	; 0x40
 800b9c2:	2101      	movs	r1, #1
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	f004 ff4b 	bl	8010860 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b9ca:	2300      	movs	r3, #0
}
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	3710      	adds	r7, #16
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	bd80      	pop	{r7, pc}

0800b9d4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b086      	sub	sp, #24
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	60f8      	str	r0, [r7, #12]
 800b9dc:	60b9      	str	r1, [r7, #8]
 800b9de:	4613      	mov	r3, r2
 800b9e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d101      	bne.n	800b9ec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b9e8:	2303      	movs	r3, #3
 800b9ea:	e025      	b.n	800ba38 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d003      	beq.n	800b9fe <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d003      	beq.n	800ba10 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ba10:	68bb      	ldr	r3, [r7, #8]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d003      	beq.n	800ba1e <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	68ba      	ldr	r2, [r7, #8]
 800ba1a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	2201      	movs	r2, #1
 800ba22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	79fa      	ldrb	r2, [r7, #7]
 800ba2a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ba2c:	68f8      	ldr	r0, [r7, #12]
 800ba2e:	f004 fdc1 	bl	80105b4 <USBD_LL_Init>
 800ba32:	4603      	mov	r3, r0
 800ba34:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ba36:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba38:	4618      	mov	r0, r3
 800ba3a:	3718      	adds	r7, #24
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bd80      	pop	{r7, pc}

0800ba40 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b084      	sub	sp, #16
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
 800ba48:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ba4e:	683b      	ldr	r3, [r7, #0]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d101      	bne.n	800ba58 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800ba54:	2303      	movs	r3, #3
 800ba56:	e010      	b.n	800ba7a <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	683a      	ldr	r2, [r7, #0]
 800ba5c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba68:	f107 020e 	add.w	r2, r7, #14
 800ba6c:	4610      	mov	r0, r2
 800ba6e:	4798      	blx	r3
 800ba70:	4602      	mov	r2, r0
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800ba78:	2300      	movs	r3, #0
}
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	3710      	adds	r7, #16
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bd80      	pop	{r7, pc}

0800ba82 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ba82:	b580      	push	{r7, lr}
 800ba84:	b082      	sub	sp, #8
 800ba86:	af00      	add	r7, sp, #0
 800ba88:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ba8a:	6878      	ldr	r0, [r7, #4]
 800ba8c:	f004 fdde 	bl	801064c <USBD_LL_Start>
 800ba90:	4603      	mov	r3, r0
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	3708      	adds	r7, #8
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bd80      	pop	{r7, pc}

0800ba9a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ba9a:	b480      	push	{r7}
 800ba9c:	b083      	sub	sp, #12
 800ba9e:	af00      	add	r7, sp, #0
 800baa0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800baa2:	2300      	movs	r3, #0
}
 800baa4:	4618      	mov	r0, r3
 800baa6:	370c      	adds	r7, #12
 800baa8:	46bd      	mov	sp, r7
 800baaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baae:	4770      	bx	lr

0800bab0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b084      	sub	sp, #16
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
 800bab8:	460b      	mov	r3, r1
 800baba:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800babc:	2303      	movs	r3, #3
 800babe:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d009      	beq.n	800bade <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	78fa      	ldrb	r2, [r7, #3]
 800bad4:	4611      	mov	r1, r2
 800bad6:	6878      	ldr	r0, [r7, #4]
 800bad8:	4798      	blx	r3
 800bada:	4603      	mov	r3, r0
 800badc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800bade:	7bfb      	ldrb	r3, [r7, #15]
}
 800bae0:	4618      	mov	r0, r3
 800bae2:	3710      	adds	r7, #16
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd80      	pop	{r7, pc}

0800bae8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b082      	sub	sp, #8
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
 800baf0:	460b      	mov	r3, r1
 800baf2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d007      	beq.n	800bb0e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb04:	685b      	ldr	r3, [r3, #4]
 800bb06:	78fa      	ldrb	r2, [r7, #3]
 800bb08:	4611      	mov	r1, r2
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	4798      	blx	r3
  }

  return USBD_OK;
 800bb0e:	2300      	movs	r3, #0
}
 800bb10:	4618      	mov	r0, r3
 800bb12:	3708      	adds	r7, #8
 800bb14:	46bd      	mov	sp, r7
 800bb16:	bd80      	pop	{r7, pc}

0800bb18 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b084      	sub	sp, #16
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
 800bb20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bb28:	6839      	ldr	r1, [r7, #0]
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	f000 ff2c 	bl	800c988 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2201      	movs	r2, #1
 800bb34:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800bb3e:	461a      	mov	r2, r3
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bb4c:	f003 031f 	and.w	r3, r3, #31
 800bb50:	2b01      	cmp	r3, #1
 800bb52:	d00e      	beq.n	800bb72 <USBD_LL_SetupStage+0x5a>
 800bb54:	2b01      	cmp	r3, #1
 800bb56:	d302      	bcc.n	800bb5e <USBD_LL_SetupStage+0x46>
 800bb58:	2b02      	cmp	r3, #2
 800bb5a:	d014      	beq.n	800bb86 <USBD_LL_SetupStage+0x6e>
 800bb5c:	e01d      	b.n	800bb9a <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bb64:	4619      	mov	r1, r3
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	f000 fa18 	bl	800bf9c <USBD_StdDevReq>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	73fb      	strb	r3, [r7, #15]
      break;
 800bb70:	e020      	b.n	800bbb4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bb78:	4619      	mov	r1, r3
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	f000 fa7c 	bl	800c078 <USBD_StdItfReq>
 800bb80:	4603      	mov	r3, r0
 800bb82:	73fb      	strb	r3, [r7, #15]
      break;
 800bb84:	e016      	b.n	800bbb4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bb8c:	4619      	mov	r1, r3
 800bb8e:	6878      	ldr	r0, [r7, #4]
 800bb90:	f000 fab8 	bl	800c104 <USBD_StdEPReq>
 800bb94:	4603      	mov	r3, r0
 800bb96:	73fb      	strb	r3, [r7, #15]
      break;
 800bb98:	e00c      	b.n	800bbb4 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bba0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bba4:	b2db      	uxtb	r3, r3
 800bba6:	4619      	mov	r1, r3
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f004 fdaf 	bl	801070c <USBD_LL_StallEP>
 800bbae:	4603      	mov	r3, r0
 800bbb0:	73fb      	strb	r3, [r7, #15]
      break;
 800bbb2:	bf00      	nop
  }

  return ret;
 800bbb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	3710      	adds	r7, #16
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}

0800bbbe <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bbbe:	b580      	push	{r7, lr}
 800bbc0:	b086      	sub	sp, #24
 800bbc2:	af00      	add	r7, sp, #0
 800bbc4:	60f8      	str	r0, [r7, #12]
 800bbc6:	460b      	mov	r3, r1
 800bbc8:	607a      	str	r2, [r7, #4]
 800bbca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bbcc:	7afb      	ldrb	r3, [r7, #11]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d137      	bne.n	800bc42 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800bbd8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bbe0:	2b03      	cmp	r3, #3
 800bbe2:	d14a      	bne.n	800bc7a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800bbe4:	693b      	ldr	r3, [r7, #16]
 800bbe6:	689a      	ldr	r2, [r3, #8]
 800bbe8:	693b      	ldr	r3, [r7, #16]
 800bbea:	68db      	ldr	r3, [r3, #12]
 800bbec:	429a      	cmp	r2, r3
 800bbee:	d913      	bls.n	800bc18 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bbf0:	693b      	ldr	r3, [r7, #16]
 800bbf2:	689a      	ldr	r2, [r3, #8]
 800bbf4:	693b      	ldr	r3, [r7, #16]
 800bbf6:	68db      	ldr	r3, [r3, #12]
 800bbf8:	1ad2      	subs	r2, r2, r3
 800bbfa:	693b      	ldr	r3, [r7, #16]
 800bbfc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800bbfe:	693b      	ldr	r3, [r7, #16]
 800bc00:	68da      	ldr	r2, [r3, #12]
 800bc02:	693b      	ldr	r3, [r7, #16]
 800bc04:	689b      	ldr	r3, [r3, #8]
 800bc06:	4293      	cmp	r3, r2
 800bc08:	bf28      	it	cs
 800bc0a:	4613      	movcs	r3, r2
 800bc0c:	461a      	mov	r2, r3
 800bc0e:	6879      	ldr	r1, [r7, #4]
 800bc10:	68f8      	ldr	r0, [r7, #12]
 800bc12:	f000 ffad 	bl	800cb70 <USBD_CtlContinueRx>
 800bc16:	e030      	b.n	800bc7a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc1e:	691b      	ldr	r3, [r3, #16]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d00a      	beq.n	800bc3a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800bc2a:	2b03      	cmp	r3, #3
 800bc2c:	d105      	bne.n	800bc3a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc34:	691b      	ldr	r3, [r3, #16]
 800bc36:	68f8      	ldr	r0, [r7, #12]
 800bc38:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800bc3a:	68f8      	ldr	r0, [r7, #12]
 800bc3c:	f000 ffa9 	bl	800cb92 <USBD_CtlSendStatus>
 800bc40:	e01b      	b.n	800bc7a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc48:	699b      	ldr	r3, [r3, #24]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d013      	beq.n	800bc76 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800bc54:	2b03      	cmp	r3, #3
 800bc56:	d10e      	bne.n	800bc76 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc5e:	699b      	ldr	r3, [r3, #24]
 800bc60:	7afa      	ldrb	r2, [r7, #11]
 800bc62:	4611      	mov	r1, r2
 800bc64:	68f8      	ldr	r0, [r7, #12]
 800bc66:	4798      	blx	r3
 800bc68:	4603      	mov	r3, r0
 800bc6a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800bc6c:	7dfb      	ldrb	r3, [r7, #23]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d003      	beq.n	800bc7a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800bc72:	7dfb      	ldrb	r3, [r7, #23]
 800bc74:	e002      	b.n	800bc7c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bc76:	2303      	movs	r3, #3
 800bc78:	e000      	b.n	800bc7c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800bc7a:	2300      	movs	r3, #0
}
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	3718      	adds	r7, #24
 800bc80:	46bd      	mov	sp, r7
 800bc82:	bd80      	pop	{r7, pc}

0800bc84 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b086      	sub	sp, #24
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	60f8      	str	r0, [r7, #12]
 800bc8c:	460b      	mov	r3, r1
 800bc8e:	607a      	str	r2, [r7, #4]
 800bc90:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bc92:	7afb      	ldrb	r3, [r7, #11]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d16a      	bne.n	800bd6e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	3314      	adds	r3, #20
 800bc9c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bca4:	2b02      	cmp	r3, #2
 800bca6:	d155      	bne.n	800bd54 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800bca8:	693b      	ldr	r3, [r7, #16]
 800bcaa:	689a      	ldr	r2, [r3, #8]
 800bcac:	693b      	ldr	r3, [r7, #16]
 800bcae:	68db      	ldr	r3, [r3, #12]
 800bcb0:	429a      	cmp	r2, r3
 800bcb2:	d914      	bls.n	800bcde <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bcb4:	693b      	ldr	r3, [r7, #16]
 800bcb6:	689a      	ldr	r2, [r3, #8]
 800bcb8:	693b      	ldr	r3, [r7, #16]
 800bcba:	68db      	ldr	r3, [r3, #12]
 800bcbc:	1ad2      	subs	r2, r2, r3
 800bcbe:	693b      	ldr	r3, [r7, #16]
 800bcc0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bcc2:	693b      	ldr	r3, [r7, #16]
 800bcc4:	689b      	ldr	r3, [r3, #8]
 800bcc6:	461a      	mov	r2, r3
 800bcc8:	6879      	ldr	r1, [r7, #4]
 800bcca:	68f8      	ldr	r0, [r7, #12]
 800bccc:	f000 ff22 	bl	800cb14 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	2100      	movs	r1, #0
 800bcd6:	68f8      	ldr	r0, [r7, #12]
 800bcd8:	f004 fdc2 	bl	8010860 <USBD_LL_PrepareReceive>
 800bcdc:	e03a      	b.n	800bd54 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bcde:	693b      	ldr	r3, [r7, #16]
 800bce0:	68da      	ldr	r2, [r3, #12]
 800bce2:	693b      	ldr	r3, [r7, #16]
 800bce4:	689b      	ldr	r3, [r3, #8]
 800bce6:	429a      	cmp	r2, r3
 800bce8:	d11c      	bne.n	800bd24 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bcea:	693b      	ldr	r3, [r7, #16]
 800bcec:	685a      	ldr	r2, [r3, #4]
 800bcee:	693b      	ldr	r3, [r7, #16]
 800bcf0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bcf2:	429a      	cmp	r2, r3
 800bcf4:	d316      	bcc.n	800bd24 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bcf6:	693b      	ldr	r3, [r7, #16]
 800bcf8:	685a      	ldr	r2, [r3, #4]
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bd00:	429a      	cmp	r2, r3
 800bd02:	d20f      	bcs.n	800bd24 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bd04:	2200      	movs	r2, #0
 800bd06:	2100      	movs	r1, #0
 800bd08:	68f8      	ldr	r0, [r7, #12]
 800bd0a:	f000 ff03 	bl	800cb14 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	2200      	movs	r2, #0
 800bd12:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bd16:	2300      	movs	r3, #0
 800bd18:	2200      	movs	r2, #0
 800bd1a:	2100      	movs	r1, #0
 800bd1c:	68f8      	ldr	r0, [r7, #12]
 800bd1e:	f004 fd9f 	bl	8010860 <USBD_LL_PrepareReceive>
 800bd22:	e017      	b.n	800bd54 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd2a:	68db      	ldr	r3, [r3, #12]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d00a      	beq.n	800bd46 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bd36:	2b03      	cmp	r3, #3
 800bd38:	d105      	bne.n	800bd46 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd40:	68db      	ldr	r3, [r3, #12]
 800bd42:	68f8      	ldr	r0, [r7, #12]
 800bd44:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bd46:	2180      	movs	r1, #128	; 0x80
 800bd48:	68f8      	ldr	r0, [r7, #12]
 800bd4a:	f004 fcdf 	bl	801070c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bd4e:	68f8      	ldr	r0, [r7, #12]
 800bd50:	f000 ff32 	bl	800cbb8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800bd5a:	2b01      	cmp	r3, #1
 800bd5c:	d123      	bne.n	800bda6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800bd5e:	68f8      	ldr	r0, [r7, #12]
 800bd60:	f7ff fe9b 	bl	800ba9a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	2200      	movs	r2, #0
 800bd68:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800bd6c:	e01b      	b.n	800bda6 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd74:	695b      	ldr	r3, [r3, #20]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d013      	beq.n	800bda2 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800bd80:	2b03      	cmp	r3, #3
 800bd82:	d10e      	bne.n	800bda2 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd8a:	695b      	ldr	r3, [r3, #20]
 800bd8c:	7afa      	ldrb	r2, [r7, #11]
 800bd8e:	4611      	mov	r1, r2
 800bd90:	68f8      	ldr	r0, [r7, #12]
 800bd92:	4798      	blx	r3
 800bd94:	4603      	mov	r3, r0
 800bd96:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800bd98:	7dfb      	ldrb	r3, [r7, #23]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d003      	beq.n	800bda6 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800bd9e:	7dfb      	ldrb	r3, [r7, #23]
 800bda0:	e002      	b.n	800bda8 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bda2:	2303      	movs	r3, #3
 800bda4:	e000      	b.n	800bda8 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800bda6:	2300      	movs	r3, #0
}
 800bda8:	4618      	mov	r0, r3
 800bdaa:	3718      	adds	r7, #24
 800bdac:	46bd      	mov	sp, r7
 800bdae:	bd80      	pop	{r7, pc}

0800bdb0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b082      	sub	sp, #8
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2201      	movs	r2, #1
 800bdbc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2200      	movs	r2, #0
 800bdcc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d009      	beq.n	800bdf4 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bde6:	685b      	ldr	r3, [r3, #4]
 800bde8:	687a      	ldr	r2, [r7, #4]
 800bdea:	6852      	ldr	r2, [r2, #4]
 800bdec:	b2d2      	uxtb	r2, r2
 800bdee:	4611      	mov	r1, r2
 800bdf0:	6878      	ldr	r0, [r7, #4]
 800bdf2:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bdf4:	2340      	movs	r3, #64	; 0x40
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	2100      	movs	r1, #0
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f004 fc41 	bl	8010682 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2201      	movs	r2, #1
 800be04:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2240      	movs	r2, #64	; 0x40
 800be0c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800be10:	2340      	movs	r3, #64	; 0x40
 800be12:	2200      	movs	r2, #0
 800be14:	2180      	movs	r1, #128	; 0x80
 800be16:	6878      	ldr	r0, [r7, #4]
 800be18:	f004 fc33 	bl	8010682 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2201      	movs	r2, #1
 800be20:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2240      	movs	r2, #64	; 0x40
 800be26:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800be28:	2300      	movs	r3, #0
}
 800be2a:	4618      	mov	r0, r3
 800be2c:	3708      	adds	r7, #8
 800be2e:	46bd      	mov	sp, r7
 800be30:	bd80      	pop	{r7, pc}

0800be32 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800be32:	b480      	push	{r7}
 800be34:	b083      	sub	sp, #12
 800be36:	af00      	add	r7, sp, #0
 800be38:	6078      	str	r0, [r7, #4]
 800be3a:	460b      	mov	r3, r1
 800be3c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	78fa      	ldrb	r2, [r7, #3]
 800be42:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800be44:	2300      	movs	r3, #0
}
 800be46:	4618      	mov	r0, r3
 800be48:	370c      	adds	r7, #12
 800be4a:	46bd      	mov	sp, r7
 800be4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be50:	4770      	bx	lr

0800be52 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800be52:	b480      	push	{r7}
 800be54:	b083      	sub	sp, #12
 800be56:	af00      	add	r7, sp, #0
 800be58:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	2204      	movs	r2, #4
 800be6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800be6e:	2300      	movs	r3, #0
}
 800be70:	4618      	mov	r0, r3
 800be72:	370c      	adds	r7, #12
 800be74:	46bd      	mov	sp, r7
 800be76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7a:	4770      	bx	lr

0800be7c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800be7c:	b480      	push	{r7}
 800be7e:	b083      	sub	sp, #12
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be8a:	2b04      	cmp	r3, #4
 800be8c:	d105      	bne.n	800be9a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800be9a:	2300      	movs	r3, #0
}
 800be9c:	4618      	mov	r0, r3
 800be9e:	370c      	adds	r7, #12
 800bea0:	46bd      	mov	sp, r7
 800bea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea6:	4770      	bx	lr

0800bea8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b082      	sub	sp, #8
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800beb6:	2b03      	cmp	r3, #3
 800beb8:	d10b      	bne.n	800bed2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bec0:	69db      	ldr	r3, [r3, #28]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d005      	beq.n	800bed2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800becc:	69db      	ldr	r3, [r3, #28]
 800bece:	6878      	ldr	r0, [r7, #4]
 800bed0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bed2:	2300      	movs	r3, #0
}
 800bed4:	4618      	mov	r0, r3
 800bed6:	3708      	adds	r7, #8
 800bed8:	46bd      	mov	sp, r7
 800beda:	bd80      	pop	{r7, pc}

0800bedc <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bedc:	b480      	push	{r7}
 800bede:	b083      	sub	sp, #12
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
 800bee4:	460b      	mov	r3, r1
 800bee6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800bee8:	2300      	movs	r3, #0
}
 800beea:	4618      	mov	r0, r3
 800beec:	370c      	adds	r7, #12
 800beee:	46bd      	mov	sp, r7
 800bef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef4:	4770      	bx	lr

0800bef6 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bef6:	b480      	push	{r7}
 800bef8:	b083      	sub	sp, #12
 800befa:	af00      	add	r7, sp, #0
 800befc:	6078      	str	r0, [r7, #4]
 800befe:	460b      	mov	r3, r1
 800bf00:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800bf02:	2300      	movs	r3, #0
}
 800bf04:	4618      	mov	r0, r3
 800bf06:	370c      	adds	r7, #12
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0e:	4770      	bx	lr

0800bf10 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bf10:	b480      	push	{r7}
 800bf12:	b083      	sub	sp, #12
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bf18:	2300      	movs	r3, #0
}
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	370c      	adds	r7, #12
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf24:	4770      	bx	lr

0800bf26 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bf26:	b580      	push	{r7, lr}
 800bf28:	b082      	sub	sp, #8
 800bf2a:	af00      	add	r7, sp, #0
 800bf2c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	2201      	movs	r2, #1
 800bf32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d009      	beq.n	800bf54 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf46:	685b      	ldr	r3, [r3, #4]
 800bf48:	687a      	ldr	r2, [r7, #4]
 800bf4a:	6852      	ldr	r2, [r2, #4]
 800bf4c:	b2d2      	uxtb	r2, r2
 800bf4e:	4611      	mov	r1, r2
 800bf50:	6878      	ldr	r0, [r7, #4]
 800bf52:	4798      	blx	r3
  }

  return USBD_OK;
 800bf54:	2300      	movs	r3, #0
}
 800bf56:	4618      	mov	r0, r3
 800bf58:	3708      	adds	r7, #8
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	bd80      	pop	{r7, pc}

0800bf5e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bf5e:	b480      	push	{r7}
 800bf60:	b087      	sub	sp, #28
 800bf62:	af00      	add	r7, sp, #0
 800bf64:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bf6a:	697b      	ldr	r3, [r7, #20]
 800bf6c:	781b      	ldrb	r3, [r3, #0]
 800bf6e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bf70:	697b      	ldr	r3, [r7, #20]
 800bf72:	3301      	adds	r3, #1
 800bf74:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bf76:	697b      	ldr	r3, [r7, #20]
 800bf78:	781b      	ldrb	r3, [r3, #0]
 800bf7a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bf7c:	8a3b      	ldrh	r3, [r7, #16]
 800bf7e:	021b      	lsls	r3, r3, #8
 800bf80:	b21a      	sxth	r2, r3
 800bf82:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bf86:	4313      	orrs	r3, r2
 800bf88:	b21b      	sxth	r3, r3
 800bf8a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bf8c:	89fb      	ldrh	r3, [r7, #14]
}
 800bf8e:	4618      	mov	r0, r3
 800bf90:	371c      	adds	r7, #28
 800bf92:	46bd      	mov	sp, r7
 800bf94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf98:	4770      	bx	lr
	...

0800bf9c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b084      	sub	sp, #16
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
 800bfa4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	781b      	ldrb	r3, [r3, #0]
 800bfae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bfb2:	2b20      	cmp	r3, #32
 800bfb4:	d004      	beq.n	800bfc0 <USBD_StdDevReq+0x24>
 800bfb6:	2b40      	cmp	r3, #64	; 0x40
 800bfb8:	d002      	beq.n	800bfc0 <USBD_StdDevReq+0x24>
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d00a      	beq.n	800bfd4 <USBD_StdDevReq+0x38>
 800bfbe:	e050      	b.n	800c062 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfc6:	689b      	ldr	r3, [r3, #8]
 800bfc8:	6839      	ldr	r1, [r7, #0]
 800bfca:	6878      	ldr	r0, [r7, #4]
 800bfcc:	4798      	blx	r3
 800bfce:	4603      	mov	r3, r0
 800bfd0:	73fb      	strb	r3, [r7, #15]
    break;
 800bfd2:	e04b      	b.n	800c06c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	785b      	ldrb	r3, [r3, #1]
 800bfd8:	2b09      	cmp	r3, #9
 800bfda:	d83c      	bhi.n	800c056 <USBD_StdDevReq+0xba>
 800bfdc:	a201      	add	r2, pc, #4	; (adr r2, 800bfe4 <USBD_StdDevReq+0x48>)
 800bfde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfe2:	bf00      	nop
 800bfe4:	0800c039 	.word	0x0800c039
 800bfe8:	0800c04d 	.word	0x0800c04d
 800bfec:	0800c057 	.word	0x0800c057
 800bff0:	0800c043 	.word	0x0800c043
 800bff4:	0800c057 	.word	0x0800c057
 800bff8:	0800c017 	.word	0x0800c017
 800bffc:	0800c00d 	.word	0x0800c00d
 800c000:	0800c057 	.word	0x0800c057
 800c004:	0800c02f 	.word	0x0800c02f
 800c008:	0800c021 	.word	0x0800c021
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800c00c:	6839      	ldr	r1, [r7, #0]
 800c00e:	6878      	ldr	r0, [r7, #4]
 800c010:	f000 f9ce 	bl	800c3b0 <USBD_GetDescriptor>
      break;
 800c014:	e024      	b.n	800c060 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800c016:	6839      	ldr	r1, [r7, #0]
 800c018:	6878      	ldr	r0, [r7, #4]
 800c01a:	f000 fb33 	bl	800c684 <USBD_SetAddress>
      break;
 800c01e:	e01f      	b.n	800c060 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800c020:	6839      	ldr	r1, [r7, #0]
 800c022:	6878      	ldr	r0, [r7, #4]
 800c024:	f000 fb70 	bl	800c708 <USBD_SetConfig>
 800c028:	4603      	mov	r3, r0
 800c02a:	73fb      	strb	r3, [r7, #15]
      break;
 800c02c:	e018      	b.n	800c060 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800c02e:	6839      	ldr	r1, [r7, #0]
 800c030:	6878      	ldr	r0, [r7, #4]
 800c032:	f000 fc0d 	bl	800c850 <USBD_GetConfig>
      break;
 800c036:	e013      	b.n	800c060 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800c038:	6839      	ldr	r1, [r7, #0]
 800c03a:	6878      	ldr	r0, [r7, #4]
 800c03c:	f000 fc3c 	bl	800c8b8 <USBD_GetStatus>
      break;
 800c040:	e00e      	b.n	800c060 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800c042:	6839      	ldr	r1, [r7, #0]
 800c044:	6878      	ldr	r0, [r7, #4]
 800c046:	f000 fc6a 	bl	800c91e <USBD_SetFeature>
      break;
 800c04a:	e009      	b.n	800c060 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800c04c:	6839      	ldr	r1, [r7, #0]
 800c04e:	6878      	ldr	r0, [r7, #4]
 800c050:	f000 fc79 	bl	800c946 <USBD_ClrFeature>
      break;
 800c054:	e004      	b.n	800c060 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800c056:	6839      	ldr	r1, [r7, #0]
 800c058:	6878      	ldr	r0, [r7, #4]
 800c05a:	f000 fccf 	bl	800c9fc <USBD_CtlError>
      break;
 800c05e:	bf00      	nop
    }
    break;
 800c060:	e004      	b.n	800c06c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800c062:	6839      	ldr	r1, [r7, #0]
 800c064:	6878      	ldr	r0, [r7, #4]
 800c066:	f000 fcc9 	bl	800c9fc <USBD_CtlError>
    break;
 800c06a:	bf00      	nop
  }

  return ret;
 800c06c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c06e:	4618      	mov	r0, r3
 800c070:	3710      	adds	r7, #16
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}
 800c076:	bf00      	nop

0800c078 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b084      	sub	sp, #16
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
 800c080:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c082:	2300      	movs	r3, #0
 800c084:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	781b      	ldrb	r3, [r3, #0]
 800c08a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c08e:	2b20      	cmp	r3, #32
 800c090:	d003      	beq.n	800c09a <USBD_StdItfReq+0x22>
 800c092:	2b40      	cmp	r3, #64	; 0x40
 800c094:	d001      	beq.n	800c09a <USBD_StdItfReq+0x22>
 800c096:	2b00      	cmp	r3, #0
 800c098:	d12a      	bne.n	800c0f0 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0a0:	3b01      	subs	r3, #1
 800c0a2:	2b02      	cmp	r3, #2
 800c0a4:	d81d      	bhi.n	800c0e2 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	889b      	ldrh	r3, [r3, #4]
 800c0aa:	b2db      	uxtb	r3, r3
 800c0ac:	2b01      	cmp	r3, #1
 800c0ae:	d813      	bhi.n	800c0d8 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0b6:	689b      	ldr	r3, [r3, #8]
 800c0b8:	6839      	ldr	r1, [r7, #0]
 800c0ba:	6878      	ldr	r0, [r7, #4]
 800c0bc:	4798      	blx	r3
 800c0be:	4603      	mov	r3, r0
 800c0c0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	88db      	ldrh	r3, [r3, #6]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d110      	bne.n	800c0ec <USBD_StdItfReq+0x74>
 800c0ca:	7bfb      	ldrb	r3, [r7, #15]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d10d      	bne.n	800c0ec <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800c0d0:	6878      	ldr	r0, [r7, #4]
 800c0d2:	f000 fd5e 	bl	800cb92 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800c0d6:	e009      	b.n	800c0ec <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800c0d8:	6839      	ldr	r1, [r7, #0]
 800c0da:	6878      	ldr	r0, [r7, #4]
 800c0dc:	f000 fc8e 	bl	800c9fc <USBD_CtlError>
      break;
 800c0e0:	e004      	b.n	800c0ec <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800c0e2:	6839      	ldr	r1, [r7, #0]
 800c0e4:	6878      	ldr	r0, [r7, #4]
 800c0e6:	f000 fc89 	bl	800c9fc <USBD_CtlError>
      break;
 800c0ea:	e000      	b.n	800c0ee <USBD_StdItfReq+0x76>
      break;
 800c0ec:	bf00      	nop
    }
    break;
 800c0ee:	e004      	b.n	800c0fa <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800c0f0:	6839      	ldr	r1, [r7, #0]
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f000 fc82 	bl	800c9fc <USBD_CtlError>
    break;
 800c0f8:	bf00      	nop
  }

  return ret;
 800c0fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	3710      	adds	r7, #16
 800c100:	46bd      	mov	sp, r7
 800c102:	bd80      	pop	{r7, pc}

0800c104 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b084      	sub	sp, #16
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
 800c10c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c10e:	2300      	movs	r3, #0
 800c110:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c112:	683b      	ldr	r3, [r7, #0]
 800c114:	889b      	ldrh	r3, [r3, #4]
 800c116:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	781b      	ldrb	r3, [r3, #0]
 800c11c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c120:	2b20      	cmp	r3, #32
 800c122:	d004      	beq.n	800c12e <USBD_StdEPReq+0x2a>
 800c124:	2b40      	cmp	r3, #64	; 0x40
 800c126:	d002      	beq.n	800c12e <USBD_StdEPReq+0x2a>
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d00a      	beq.n	800c142 <USBD_StdEPReq+0x3e>
 800c12c:	e135      	b.n	800c39a <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c134:	689b      	ldr	r3, [r3, #8]
 800c136:	6839      	ldr	r1, [r7, #0]
 800c138:	6878      	ldr	r0, [r7, #4]
 800c13a:	4798      	blx	r3
 800c13c:	4603      	mov	r3, r0
 800c13e:	73fb      	strb	r3, [r7, #15]
    break;
 800c140:	e130      	b.n	800c3a4 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	785b      	ldrb	r3, [r3, #1]
 800c146:	2b01      	cmp	r3, #1
 800c148:	d03e      	beq.n	800c1c8 <USBD_StdEPReq+0xc4>
 800c14a:	2b03      	cmp	r3, #3
 800c14c:	d002      	beq.n	800c154 <USBD_StdEPReq+0x50>
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d077      	beq.n	800c242 <USBD_StdEPReq+0x13e>
 800c152:	e11c      	b.n	800c38e <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c15a:	2b02      	cmp	r3, #2
 800c15c:	d002      	beq.n	800c164 <USBD_StdEPReq+0x60>
 800c15e:	2b03      	cmp	r3, #3
 800c160:	d015      	beq.n	800c18e <USBD_StdEPReq+0x8a>
 800c162:	e02b      	b.n	800c1bc <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c164:	7bbb      	ldrb	r3, [r7, #14]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d00c      	beq.n	800c184 <USBD_StdEPReq+0x80>
 800c16a:	7bbb      	ldrb	r3, [r7, #14]
 800c16c:	2b80      	cmp	r3, #128	; 0x80
 800c16e:	d009      	beq.n	800c184 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800c170:	7bbb      	ldrb	r3, [r7, #14]
 800c172:	4619      	mov	r1, r3
 800c174:	6878      	ldr	r0, [r7, #4]
 800c176:	f004 fac9 	bl	801070c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c17a:	2180      	movs	r1, #128	; 0x80
 800c17c:	6878      	ldr	r0, [r7, #4]
 800c17e:	f004 fac5 	bl	801070c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c182:	e020      	b.n	800c1c6 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800c184:	6839      	ldr	r1, [r7, #0]
 800c186:	6878      	ldr	r0, [r7, #4]
 800c188:	f000 fc38 	bl	800c9fc <USBD_CtlError>
        break;
 800c18c:	e01b      	b.n	800c1c6 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c18e:	683b      	ldr	r3, [r7, #0]
 800c190:	885b      	ldrh	r3, [r3, #2]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d10e      	bne.n	800c1b4 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c196:	7bbb      	ldrb	r3, [r7, #14]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d00b      	beq.n	800c1b4 <USBD_StdEPReq+0xb0>
 800c19c:	7bbb      	ldrb	r3, [r7, #14]
 800c19e:	2b80      	cmp	r3, #128	; 0x80
 800c1a0:	d008      	beq.n	800c1b4 <USBD_StdEPReq+0xb0>
 800c1a2:	683b      	ldr	r3, [r7, #0]
 800c1a4:	88db      	ldrh	r3, [r3, #6]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d104      	bne.n	800c1b4 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800c1aa:	7bbb      	ldrb	r3, [r7, #14]
 800c1ac:	4619      	mov	r1, r3
 800c1ae:	6878      	ldr	r0, [r7, #4]
 800c1b0:	f004 faac 	bl	801070c <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800c1b4:	6878      	ldr	r0, [r7, #4]
 800c1b6:	f000 fcec 	bl	800cb92 <USBD_CtlSendStatus>

        break;
 800c1ba:	e004      	b.n	800c1c6 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800c1bc:	6839      	ldr	r1, [r7, #0]
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	f000 fc1c 	bl	800c9fc <USBD_CtlError>
        break;
 800c1c4:	bf00      	nop
      }
      break;
 800c1c6:	e0e7      	b.n	800c398 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1ce:	2b02      	cmp	r3, #2
 800c1d0:	d002      	beq.n	800c1d8 <USBD_StdEPReq+0xd4>
 800c1d2:	2b03      	cmp	r3, #3
 800c1d4:	d015      	beq.n	800c202 <USBD_StdEPReq+0xfe>
 800c1d6:	e02d      	b.n	800c234 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c1d8:	7bbb      	ldrb	r3, [r7, #14]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d00c      	beq.n	800c1f8 <USBD_StdEPReq+0xf4>
 800c1de:	7bbb      	ldrb	r3, [r7, #14]
 800c1e0:	2b80      	cmp	r3, #128	; 0x80
 800c1e2:	d009      	beq.n	800c1f8 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800c1e4:	7bbb      	ldrb	r3, [r7, #14]
 800c1e6:	4619      	mov	r1, r3
 800c1e8:	6878      	ldr	r0, [r7, #4]
 800c1ea:	f004 fa8f 	bl	801070c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c1ee:	2180      	movs	r1, #128	; 0x80
 800c1f0:	6878      	ldr	r0, [r7, #4]
 800c1f2:	f004 fa8b 	bl	801070c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c1f6:	e023      	b.n	800c240 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800c1f8:	6839      	ldr	r1, [r7, #0]
 800c1fa:	6878      	ldr	r0, [r7, #4]
 800c1fc:	f000 fbfe 	bl	800c9fc <USBD_CtlError>
        break;
 800c200:	e01e      	b.n	800c240 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	885b      	ldrh	r3, [r3, #2]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d119      	bne.n	800c23e <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800c20a:	7bbb      	ldrb	r3, [r7, #14]
 800c20c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c210:	2b00      	cmp	r3, #0
 800c212:	d004      	beq.n	800c21e <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c214:	7bbb      	ldrb	r3, [r7, #14]
 800c216:	4619      	mov	r1, r3
 800c218:	6878      	ldr	r0, [r7, #4]
 800c21a:	f004 fa96 	bl	801074a <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800c21e:	6878      	ldr	r0, [r7, #4]
 800c220:	f000 fcb7 	bl	800cb92 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c22a:	689b      	ldr	r3, [r3, #8]
 800c22c:	6839      	ldr	r1, [r7, #0]
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	4798      	blx	r3
        }
        break;
 800c232:	e004      	b.n	800c23e <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800c234:	6839      	ldr	r1, [r7, #0]
 800c236:	6878      	ldr	r0, [r7, #4]
 800c238:	f000 fbe0 	bl	800c9fc <USBD_CtlError>
        break;
 800c23c:	e000      	b.n	800c240 <USBD_StdEPReq+0x13c>
        break;
 800c23e:	bf00      	nop
      }
      break;
 800c240:	e0aa      	b.n	800c398 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c248:	2b02      	cmp	r3, #2
 800c24a:	d002      	beq.n	800c252 <USBD_StdEPReq+0x14e>
 800c24c:	2b03      	cmp	r3, #3
 800c24e:	d032      	beq.n	800c2b6 <USBD_StdEPReq+0x1b2>
 800c250:	e097      	b.n	800c382 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c252:	7bbb      	ldrb	r3, [r7, #14]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d007      	beq.n	800c268 <USBD_StdEPReq+0x164>
 800c258:	7bbb      	ldrb	r3, [r7, #14]
 800c25a:	2b80      	cmp	r3, #128	; 0x80
 800c25c:	d004      	beq.n	800c268 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800c25e:	6839      	ldr	r1, [r7, #0]
 800c260:	6878      	ldr	r0, [r7, #4]
 800c262:	f000 fbcb 	bl	800c9fc <USBD_CtlError>
          break;
 800c266:	e091      	b.n	800c38c <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c268:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	da0b      	bge.n	800c288 <USBD_StdEPReq+0x184>
 800c270:	7bbb      	ldrb	r3, [r7, #14]
 800c272:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c276:	4613      	mov	r3, r2
 800c278:	009b      	lsls	r3, r3, #2
 800c27a:	4413      	add	r3, r2
 800c27c:	009b      	lsls	r3, r3, #2
 800c27e:	3310      	adds	r3, #16
 800c280:	687a      	ldr	r2, [r7, #4]
 800c282:	4413      	add	r3, r2
 800c284:	3304      	adds	r3, #4
 800c286:	e00b      	b.n	800c2a0 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800c288:	7bbb      	ldrb	r3, [r7, #14]
 800c28a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c28e:	4613      	mov	r3, r2
 800c290:	009b      	lsls	r3, r3, #2
 800c292:	4413      	add	r3, r2
 800c294:	009b      	lsls	r3, r3, #2
 800c296:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c29a:	687a      	ldr	r2, [r7, #4]
 800c29c:	4413      	add	r3, r2
 800c29e:	3304      	adds	r3, #4
 800c2a0:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800c2a2:	68bb      	ldr	r3, [r7, #8]
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	2202      	movs	r2, #2
 800c2ac:	4619      	mov	r1, r3
 800c2ae:	6878      	ldr	r0, [r7, #4]
 800c2b0:	f000 fc15 	bl	800cade <USBD_CtlSendData>
        break;
 800c2b4:	e06a      	b.n	800c38c <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800c2b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	da11      	bge.n	800c2e2 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c2be:	7bbb      	ldrb	r3, [r7, #14]
 800c2c0:	f003 020f 	and.w	r2, r3, #15
 800c2c4:	6879      	ldr	r1, [r7, #4]
 800c2c6:	4613      	mov	r3, r2
 800c2c8:	009b      	lsls	r3, r3, #2
 800c2ca:	4413      	add	r3, r2
 800c2cc:	009b      	lsls	r3, r3, #2
 800c2ce:	440b      	add	r3, r1
 800c2d0:	3324      	adds	r3, #36	; 0x24
 800c2d2:	881b      	ldrh	r3, [r3, #0]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d117      	bne.n	800c308 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800c2d8:	6839      	ldr	r1, [r7, #0]
 800c2da:	6878      	ldr	r0, [r7, #4]
 800c2dc:	f000 fb8e 	bl	800c9fc <USBD_CtlError>
            break;
 800c2e0:	e054      	b.n	800c38c <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c2e2:	7bbb      	ldrb	r3, [r7, #14]
 800c2e4:	f003 020f 	and.w	r2, r3, #15
 800c2e8:	6879      	ldr	r1, [r7, #4]
 800c2ea:	4613      	mov	r3, r2
 800c2ec:	009b      	lsls	r3, r3, #2
 800c2ee:	4413      	add	r3, r2
 800c2f0:	009b      	lsls	r3, r3, #2
 800c2f2:	440b      	add	r3, r1
 800c2f4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c2f8:	881b      	ldrh	r3, [r3, #0]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d104      	bne.n	800c308 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800c2fe:	6839      	ldr	r1, [r7, #0]
 800c300:	6878      	ldr	r0, [r7, #4]
 800c302:	f000 fb7b 	bl	800c9fc <USBD_CtlError>
            break;
 800c306:	e041      	b.n	800c38c <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c308:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	da0b      	bge.n	800c328 <USBD_StdEPReq+0x224>
 800c310:	7bbb      	ldrb	r3, [r7, #14]
 800c312:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c316:	4613      	mov	r3, r2
 800c318:	009b      	lsls	r3, r3, #2
 800c31a:	4413      	add	r3, r2
 800c31c:	009b      	lsls	r3, r3, #2
 800c31e:	3310      	adds	r3, #16
 800c320:	687a      	ldr	r2, [r7, #4]
 800c322:	4413      	add	r3, r2
 800c324:	3304      	adds	r3, #4
 800c326:	e00b      	b.n	800c340 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800c328:	7bbb      	ldrb	r3, [r7, #14]
 800c32a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c32e:	4613      	mov	r3, r2
 800c330:	009b      	lsls	r3, r3, #2
 800c332:	4413      	add	r3, r2
 800c334:	009b      	lsls	r3, r3, #2
 800c336:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c33a:	687a      	ldr	r2, [r7, #4]
 800c33c:	4413      	add	r3, r2
 800c33e:	3304      	adds	r3, #4
 800c340:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c342:	7bbb      	ldrb	r3, [r7, #14]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d002      	beq.n	800c34e <USBD_StdEPReq+0x24a>
 800c348:	7bbb      	ldrb	r3, [r7, #14]
 800c34a:	2b80      	cmp	r3, #128	; 0x80
 800c34c:	d103      	bne.n	800c356 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800c34e:	68bb      	ldr	r3, [r7, #8]
 800c350:	2200      	movs	r2, #0
 800c352:	601a      	str	r2, [r3, #0]
 800c354:	e00e      	b.n	800c374 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c356:	7bbb      	ldrb	r3, [r7, #14]
 800c358:	4619      	mov	r1, r3
 800c35a:	6878      	ldr	r0, [r7, #4]
 800c35c:	f004 fa14 	bl	8010788 <USBD_LL_IsStallEP>
 800c360:	4603      	mov	r3, r0
 800c362:	2b00      	cmp	r3, #0
 800c364:	d003      	beq.n	800c36e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800c366:	68bb      	ldr	r3, [r7, #8]
 800c368:	2201      	movs	r2, #1
 800c36a:	601a      	str	r2, [r3, #0]
 800c36c:	e002      	b.n	800c374 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800c36e:	68bb      	ldr	r3, [r7, #8]
 800c370:	2200      	movs	r2, #0
 800c372:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c374:	68bb      	ldr	r3, [r7, #8]
 800c376:	2202      	movs	r2, #2
 800c378:	4619      	mov	r1, r3
 800c37a:	6878      	ldr	r0, [r7, #4]
 800c37c:	f000 fbaf 	bl	800cade <USBD_CtlSendData>
          break;
 800c380:	e004      	b.n	800c38c <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800c382:	6839      	ldr	r1, [r7, #0]
 800c384:	6878      	ldr	r0, [r7, #4]
 800c386:	f000 fb39 	bl	800c9fc <USBD_CtlError>
        break;
 800c38a:	bf00      	nop
      }
      break;
 800c38c:	e004      	b.n	800c398 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800c38e:	6839      	ldr	r1, [r7, #0]
 800c390:	6878      	ldr	r0, [r7, #4]
 800c392:	f000 fb33 	bl	800c9fc <USBD_CtlError>
      break;
 800c396:	bf00      	nop
    }
    break;
 800c398:	e004      	b.n	800c3a4 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800c39a:	6839      	ldr	r1, [r7, #0]
 800c39c:	6878      	ldr	r0, [r7, #4]
 800c39e:	f000 fb2d 	bl	800c9fc <USBD_CtlError>
    break;
 800c3a2:	bf00      	nop
  }

  return ret;
 800c3a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	3710      	adds	r7, #16
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	bd80      	pop	{r7, pc}
	...

0800c3b0 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b084      	sub	sp, #16
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
 800c3b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c3be:	2300      	movs	r3, #0
 800c3c0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c3c6:	683b      	ldr	r3, [r7, #0]
 800c3c8:	885b      	ldrh	r3, [r3, #2]
 800c3ca:	0a1b      	lsrs	r3, r3, #8
 800c3cc:	b29b      	uxth	r3, r3
 800c3ce:	3b01      	subs	r3, #1
 800c3d0:	2b06      	cmp	r3, #6
 800c3d2:	f200 8128 	bhi.w	800c626 <USBD_GetDescriptor+0x276>
 800c3d6:	a201      	add	r2, pc, #4	; (adr r2, 800c3dc <USBD_GetDescriptor+0x2c>)
 800c3d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3dc:	0800c3f9 	.word	0x0800c3f9
 800c3e0:	0800c411 	.word	0x0800c411
 800c3e4:	0800c451 	.word	0x0800c451
 800c3e8:	0800c627 	.word	0x0800c627
 800c3ec:	0800c627 	.word	0x0800c627
 800c3f0:	0800c5c7 	.word	0x0800c5c7
 800c3f4:	0800c5f3 	.word	0x0800c5f3
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	687a      	ldr	r2, [r7, #4]
 800c402:	7c12      	ldrb	r2, [r2, #16]
 800c404:	f107 0108 	add.w	r1, r7, #8
 800c408:	4610      	mov	r0, r2
 800c40a:	4798      	blx	r3
 800c40c:	60f8      	str	r0, [r7, #12]
    break;
 800c40e:	e112      	b.n	800c636 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	7c1b      	ldrb	r3, [r3, #16]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d10d      	bne.n	800c434 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c41e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c420:	f107 0208 	add.w	r2, r7, #8
 800c424:	4610      	mov	r0, r2
 800c426:	4798      	blx	r3
 800c428:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	3301      	adds	r3, #1
 800c42e:	2202      	movs	r2, #2
 800c430:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800c432:	e100      	b.n	800c636 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c43a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c43c:	f107 0208 	add.w	r2, r7, #8
 800c440:	4610      	mov	r0, r2
 800c442:	4798      	blx	r3
 800c444:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	3301      	adds	r3, #1
 800c44a:	2202      	movs	r2, #2
 800c44c:	701a      	strb	r2, [r3, #0]
    break;
 800c44e:	e0f2      	b.n	800c636 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800c450:	683b      	ldr	r3, [r7, #0]
 800c452:	885b      	ldrh	r3, [r3, #2]
 800c454:	b2db      	uxtb	r3, r3
 800c456:	2b05      	cmp	r3, #5
 800c458:	f200 80ac 	bhi.w	800c5b4 <USBD_GetDescriptor+0x204>
 800c45c:	a201      	add	r2, pc, #4	; (adr r2, 800c464 <USBD_GetDescriptor+0xb4>)
 800c45e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c462:	bf00      	nop
 800c464:	0800c47d 	.word	0x0800c47d
 800c468:	0800c4b1 	.word	0x0800c4b1
 800c46c:	0800c4e5 	.word	0x0800c4e5
 800c470:	0800c519 	.word	0x0800c519
 800c474:	0800c54d 	.word	0x0800c54d
 800c478:	0800c581 	.word	0x0800c581
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c482:	685b      	ldr	r3, [r3, #4]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d00b      	beq.n	800c4a0 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c48e:	685b      	ldr	r3, [r3, #4]
 800c490:	687a      	ldr	r2, [r7, #4]
 800c492:	7c12      	ldrb	r2, [r2, #16]
 800c494:	f107 0108 	add.w	r1, r7, #8
 800c498:	4610      	mov	r0, r2
 800c49a:	4798      	blx	r3
 800c49c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c49e:	e091      	b.n	800c5c4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c4a0:	6839      	ldr	r1, [r7, #0]
 800c4a2:	6878      	ldr	r0, [r7, #4]
 800c4a4:	f000 faaa 	bl	800c9fc <USBD_CtlError>
        err++;
 800c4a8:	7afb      	ldrb	r3, [r7, #11]
 800c4aa:	3301      	adds	r3, #1
 800c4ac:	72fb      	strb	r3, [r7, #11]
      break;
 800c4ae:	e089      	b.n	800c5c4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4b6:	689b      	ldr	r3, [r3, #8]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d00b      	beq.n	800c4d4 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4c2:	689b      	ldr	r3, [r3, #8]
 800c4c4:	687a      	ldr	r2, [r7, #4]
 800c4c6:	7c12      	ldrb	r2, [r2, #16]
 800c4c8:	f107 0108 	add.w	r1, r7, #8
 800c4cc:	4610      	mov	r0, r2
 800c4ce:	4798      	blx	r3
 800c4d0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c4d2:	e077      	b.n	800c5c4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c4d4:	6839      	ldr	r1, [r7, #0]
 800c4d6:	6878      	ldr	r0, [r7, #4]
 800c4d8:	f000 fa90 	bl	800c9fc <USBD_CtlError>
        err++;
 800c4dc:	7afb      	ldrb	r3, [r7, #11]
 800c4de:	3301      	adds	r3, #1
 800c4e0:	72fb      	strb	r3, [r7, #11]
      break;
 800c4e2:	e06f      	b.n	800c5c4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4ea:	68db      	ldr	r3, [r3, #12]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d00b      	beq.n	800c508 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4f6:	68db      	ldr	r3, [r3, #12]
 800c4f8:	687a      	ldr	r2, [r7, #4]
 800c4fa:	7c12      	ldrb	r2, [r2, #16]
 800c4fc:	f107 0108 	add.w	r1, r7, #8
 800c500:	4610      	mov	r0, r2
 800c502:	4798      	blx	r3
 800c504:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c506:	e05d      	b.n	800c5c4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c508:	6839      	ldr	r1, [r7, #0]
 800c50a:	6878      	ldr	r0, [r7, #4]
 800c50c:	f000 fa76 	bl	800c9fc <USBD_CtlError>
        err++;
 800c510:	7afb      	ldrb	r3, [r7, #11]
 800c512:	3301      	adds	r3, #1
 800c514:	72fb      	strb	r3, [r7, #11]
      break;
 800c516:	e055      	b.n	800c5c4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c51e:	691b      	ldr	r3, [r3, #16]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d00b      	beq.n	800c53c <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c52a:	691b      	ldr	r3, [r3, #16]
 800c52c:	687a      	ldr	r2, [r7, #4]
 800c52e:	7c12      	ldrb	r2, [r2, #16]
 800c530:	f107 0108 	add.w	r1, r7, #8
 800c534:	4610      	mov	r0, r2
 800c536:	4798      	blx	r3
 800c538:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c53a:	e043      	b.n	800c5c4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c53c:	6839      	ldr	r1, [r7, #0]
 800c53e:	6878      	ldr	r0, [r7, #4]
 800c540:	f000 fa5c 	bl	800c9fc <USBD_CtlError>
        err++;
 800c544:	7afb      	ldrb	r3, [r7, #11]
 800c546:	3301      	adds	r3, #1
 800c548:	72fb      	strb	r3, [r7, #11]
      break;
 800c54a:	e03b      	b.n	800c5c4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c552:	695b      	ldr	r3, [r3, #20]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d00b      	beq.n	800c570 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c55e:	695b      	ldr	r3, [r3, #20]
 800c560:	687a      	ldr	r2, [r7, #4]
 800c562:	7c12      	ldrb	r2, [r2, #16]
 800c564:	f107 0108 	add.w	r1, r7, #8
 800c568:	4610      	mov	r0, r2
 800c56a:	4798      	blx	r3
 800c56c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c56e:	e029      	b.n	800c5c4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c570:	6839      	ldr	r1, [r7, #0]
 800c572:	6878      	ldr	r0, [r7, #4]
 800c574:	f000 fa42 	bl	800c9fc <USBD_CtlError>
        err++;
 800c578:	7afb      	ldrb	r3, [r7, #11]
 800c57a:	3301      	adds	r3, #1
 800c57c:	72fb      	strb	r3, [r7, #11]
      break;
 800c57e:	e021      	b.n	800c5c4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c586:	699b      	ldr	r3, [r3, #24]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d00b      	beq.n	800c5a4 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c592:	699b      	ldr	r3, [r3, #24]
 800c594:	687a      	ldr	r2, [r7, #4]
 800c596:	7c12      	ldrb	r2, [r2, #16]
 800c598:	f107 0108 	add.w	r1, r7, #8
 800c59c:	4610      	mov	r0, r2
 800c59e:	4798      	blx	r3
 800c5a0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c5a2:	e00f      	b.n	800c5c4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c5a4:	6839      	ldr	r1, [r7, #0]
 800c5a6:	6878      	ldr	r0, [r7, #4]
 800c5a8:	f000 fa28 	bl	800c9fc <USBD_CtlError>
        err++;
 800c5ac:	7afb      	ldrb	r3, [r7, #11]
 800c5ae:	3301      	adds	r3, #1
 800c5b0:	72fb      	strb	r3, [r7, #11]
      break;
 800c5b2:	e007      	b.n	800c5c4 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800c5b4:	6839      	ldr	r1, [r7, #0]
 800c5b6:	6878      	ldr	r0, [r7, #4]
 800c5b8:	f000 fa20 	bl	800c9fc <USBD_CtlError>
      err++;
 800c5bc:	7afb      	ldrb	r3, [r7, #11]
 800c5be:	3301      	adds	r3, #1
 800c5c0:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800c5c2:	bf00      	nop
    }
    break;
 800c5c4:	e037      	b.n	800c636 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	7c1b      	ldrb	r3, [r3, #16]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d109      	bne.n	800c5e2 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5d6:	f107 0208 	add.w	r2, r7, #8
 800c5da:	4610      	mov	r0, r2
 800c5dc:	4798      	blx	r3
 800c5de:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800c5e0:	e029      	b.n	800c636 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800c5e2:	6839      	ldr	r1, [r7, #0]
 800c5e4:	6878      	ldr	r0, [r7, #4]
 800c5e6:	f000 fa09 	bl	800c9fc <USBD_CtlError>
      err++;
 800c5ea:	7afb      	ldrb	r3, [r7, #11]
 800c5ec:	3301      	adds	r3, #1
 800c5ee:	72fb      	strb	r3, [r7, #11]
    break;
 800c5f0:	e021      	b.n	800c636 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	7c1b      	ldrb	r3, [r3, #16]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d10d      	bne.n	800c616 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c602:	f107 0208 	add.w	r2, r7, #8
 800c606:	4610      	mov	r0, r2
 800c608:	4798      	blx	r3
 800c60a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	3301      	adds	r3, #1
 800c610:	2207      	movs	r2, #7
 800c612:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800c614:	e00f      	b.n	800c636 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800c616:	6839      	ldr	r1, [r7, #0]
 800c618:	6878      	ldr	r0, [r7, #4]
 800c61a:	f000 f9ef 	bl	800c9fc <USBD_CtlError>
      err++;
 800c61e:	7afb      	ldrb	r3, [r7, #11]
 800c620:	3301      	adds	r3, #1
 800c622:	72fb      	strb	r3, [r7, #11]
    break;
 800c624:	e007      	b.n	800c636 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800c626:	6839      	ldr	r1, [r7, #0]
 800c628:	6878      	ldr	r0, [r7, #4]
 800c62a:	f000 f9e7 	bl	800c9fc <USBD_CtlError>
    err++;
 800c62e:	7afb      	ldrb	r3, [r7, #11]
 800c630:	3301      	adds	r3, #1
 800c632:	72fb      	strb	r3, [r7, #11]
    break;
 800c634:	bf00      	nop
  }

  if (err != 0U)
 800c636:	7afb      	ldrb	r3, [r7, #11]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d11e      	bne.n	800c67a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800c63c:	683b      	ldr	r3, [r7, #0]
 800c63e:	88db      	ldrh	r3, [r3, #6]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d016      	beq.n	800c672 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800c644:	893b      	ldrh	r3, [r7, #8]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d00e      	beq.n	800c668 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800c64a:	683b      	ldr	r3, [r7, #0]
 800c64c:	88da      	ldrh	r2, [r3, #6]
 800c64e:	893b      	ldrh	r3, [r7, #8]
 800c650:	4293      	cmp	r3, r2
 800c652:	bf28      	it	cs
 800c654:	4613      	movcs	r3, r2
 800c656:	b29b      	uxth	r3, r3
 800c658:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800c65a:	893b      	ldrh	r3, [r7, #8]
 800c65c:	461a      	mov	r2, r3
 800c65e:	68f9      	ldr	r1, [r7, #12]
 800c660:	6878      	ldr	r0, [r7, #4]
 800c662:	f000 fa3c 	bl	800cade <USBD_CtlSendData>
 800c666:	e009      	b.n	800c67c <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800c668:	6839      	ldr	r1, [r7, #0]
 800c66a:	6878      	ldr	r0, [r7, #4]
 800c66c:	f000 f9c6 	bl	800c9fc <USBD_CtlError>
 800c670:	e004      	b.n	800c67c <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800c672:	6878      	ldr	r0, [r7, #4]
 800c674:	f000 fa8d 	bl	800cb92 <USBD_CtlSendStatus>
 800c678:	e000      	b.n	800c67c <USBD_GetDescriptor+0x2cc>
    return;
 800c67a:	bf00      	nop
    }
  }
}
 800c67c:	3710      	adds	r7, #16
 800c67e:	46bd      	mov	sp, r7
 800c680:	bd80      	pop	{r7, pc}
 800c682:	bf00      	nop

0800c684 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b084      	sub	sp, #16
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
 800c68c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	889b      	ldrh	r3, [r3, #4]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d130      	bne.n	800c6f8 <USBD_SetAddress+0x74>
 800c696:	683b      	ldr	r3, [r7, #0]
 800c698:	88db      	ldrh	r3, [r3, #6]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d12c      	bne.n	800c6f8 <USBD_SetAddress+0x74>
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	885b      	ldrh	r3, [r3, #2]
 800c6a2:	2b7f      	cmp	r3, #127	; 0x7f
 800c6a4:	d828      	bhi.n	800c6f8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	885b      	ldrh	r3, [r3, #2]
 800c6aa:	b2db      	uxtb	r3, r3
 800c6ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6b0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6b8:	2b03      	cmp	r3, #3
 800c6ba:	d104      	bne.n	800c6c6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800c6bc:	6839      	ldr	r1, [r7, #0]
 800c6be:	6878      	ldr	r0, [r7, #4]
 800c6c0:	f000 f99c 	bl	800c9fc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6c4:	e01c      	b.n	800c700 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	7bfa      	ldrb	r2, [r7, #15]
 800c6ca:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c6ce:	7bfb      	ldrb	r3, [r7, #15]
 800c6d0:	4619      	mov	r1, r3
 800c6d2:	6878      	ldr	r0, [r7, #4]
 800c6d4:	f004 f884 	bl	80107e0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c6d8:	6878      	ldr	r0, [r7, #4]
 800c6da:	f000 fa5a 	bl	800cb92 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c6de:	7bfb      	ldrb	r3, [r7, #15]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d004      	beq.n	800c6ee <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	2202      	movs	r2, #2
 800c6e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6ec:	e008      	b.n	800c700 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	2201      	movs	r2, #1
 800c6f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6f6:	e003      	b.n	800c700 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c6f8:	6839      	ldr	r1, [r7, #0]
 800c6fa:	6878      	ldr	r0, [r7, #4]
 800c6fc:	f000 f97e 	bl	800c9fc <USBD_CtlError>
  }
}
 800c700:	bf00      	nop
 800c702:	3710      	adds	r7, #16
 800c704:	46bd      	mov	sp, r7
 800c706:	bd80      	pop	{r7, pc}

0800c708 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b084      	sub	sp, #16
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
 800c710:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c712:	2300      	movs	r3, #0
 800c714:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c716:	683b      	ldr	r3, [r7, #0]
 800c718:	885b      	ldrh	r3, [r3, #2]
 800c71a:	b2da      	uxtb	r2, r3
 800c71c:	4b4b      	ldr	r3, [pc, #300]	; (800c84c <USBD_SetConfig+0x144>)
 800c71e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c720:	4b4a      	ldr	r3, [pc, #296]	; (800c84c <USBD_SetConfig+0x144>)
 800c722:	781b      	ldrb	r3, [r3, #0]
 800c724:	2b01      	cmp	r3, #1
 800c726:	d905      	bls.n	800c734 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c728:	6839      	ldr	r1, [r7, #0]
 800c72a:	6878      	ldr	r0, [r7, #4]
 800c72c:	f000 f966 	bl	800c9fc <USBD_CtlError>
    return USBD_FAIL;
 800c730:	2303      	movs	r3, #3
 800c732:	e087      	b.n	800c844 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c73a:	2b02      	cmp	r3, #2
 800c73c:	d002      	beq.n	800c744 <USBD_SetConfig+0x3c>
 800c73e:	2b03      	cmp	r3, #3
 800c740:	d025      	beq.n	800c78e <USBD_SetConfig+0x86>
 800c742:	e071      	b.n	800c828 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800c744:	4b41      	ldr	r3, [pc, #260]	; (800c84c <USBD_SetConfig+0x144>)
 800c746:	781b      	ldrb	r3, [r3, #0]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d01c      	beq.n	800c786 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800c74c:	4b3f      	ldr	r3, [pc, #252]	; (800c84c <USBD_SetConfig+0x144>)
 800c74e:	781b      	ldrb	r3, [r3, #0]
 800c750:	461a      	mov	r2, r3
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800c756:	4b3d      	ldr	r3, [pc, #244]	; (800c84c <USBD_SetConfig+0x144>)
 800c758:	781b      	ldrb	r3, [r3, #0]
 800c75a:	4619      	mov	r1, r3
 800c75c:	6878      	ldr	r0, [r7, #4]
 800c75e:	f7ff f9a7 	bl	800bab0 <USBD_SetClassConfig>
 800c762:	4603      	mov	r3, r0
 800c764:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800c766:	7bfb      	ldrb	r3, [r7, #15]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d004      	beq.n	800c776 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800c76c:	6839      	ldr	r1, [r7, #0]
 800c76e:	6878      	ldr	r0, [r7, #4]
 800c770:	f000 f944 	bl	800c9fc <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800c774:	e065      	b.n	800c842 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800c776:	6878      	ldr	r0, [r7, #4]
 800c778:	f000 fa0b 	bl	800cb92 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	2203      	movs	r2, #3
 800c780:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800c784:	e05d      	b.n	800c842 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	f000 fa03 	bl	800cb92 <USBD_CtlSendStatus>
    break;
 800c78c:	e059      	b.n	800c842 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800c78e:	4b2f      	ldr	r3, [pc, #188]	; (800c84c <USBD_SetConfig+0x144>)
 800c790:	781b      	ldrb	r3, [r3, #0]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d112      	bne.n	800c7bc <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	2202      	movs	r2, #2
 800c79a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800c79e:	4b2b      	ldr	r3, [pc, #172]	; (800c84c <USBD_SetConfig+0x144>)
 800c7a0:	781b      	ldrb	r3, [r3, #0]
 800c7a2:	461a      	mov	r2, r3
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c7a8:	4b28      	ldr	r3, [pc, #160]	; (800c84c <USBD_SetConfig+0x144>)
 800c7aa:	781b      	ldrb	r3, [r3, #0]
 800c7ac:	4619      	mov	r1, r3
 800c7ae:	6878      	ldr	r0, [r7, #4]
 800c7b0:	f7ff f99a 	bl	800bae8 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800c7b4:	6878      	ldr	r0, [r7, #4]
 800c7b6:	f000 f9ec 	bl	800cb92 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800c7ba:	e042      	b.n	800c842 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800c7bc:	4b23      	ldr	r3, [pc, #140]	; (800c84c <USBD_SetConfig+0x144>)
 800c7be:	781b      	ldrb	r3, [r3, #0]
 800c7c0:	461a      	mov	r2, r3
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	685b      	ldr	r3, [r3, #4]
 800c7c6:	429a      	cmp	r2, r3
 800c7c8:	d02a      	beq.n	800c820 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	685b      	ldr	r3, [r3, #4]
 800c7ce:	b2db      	uxtb	r3, r3
 800c7d0:	4619      	mov	r1, r3
 800c7d2:	6878      	ldr	r0, [r7, #4]
 800c7d4:	f7ff f988 	bl	800bae8 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800c7d8:	4b1c      	ldr	r3, [pc, #112]	; (800c84c <USBD_SetConfig+0x144>)
 800c7da:	781b      	ldrb	r3, [r3, #0]
 800c7dc:	461a      	mov	r2, r3
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800c7e2:	4b1a      	ldr	r3, [pc, #104]	; (800c84c <USBD_SetConfig+0x144>)
 800c7e4:	781b      	ldrb	r3, [r3, #0]
 800c7e6:	4619      	mov	r1, r3
 800c7e8:	6878      	ldr	r0, [r7, #4]
 800c7ea:	f7ff f961 	bl	800bab0 <USBD_SetClassConfig>
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800c7f2:	7bfb      	ldrb	r3, [r7, #15]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d00f      	beq.n	800c818 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800c7f8:	6839      	ldr	r1, [r7, #0]
 800c7fa:	6878      	ldr	r0, [r7, #4]
 800c7fc:	f000 f8fe 	bl	800c9fc <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	685b      	ldr	r3, [r3, #4]
 800c804:	b2db      	uxtb	r3, r3
 800c806:	4619      	mov	r1, r3
 800c808:	6878      	ldr	r0, [r7, #4]
 800c80a:	f7ff f96d 	bl	800bae8 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	2202      	movs	r2, #2
 800c812:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800c816:	e014      	b.n	800c842 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800c818:	6878      	ldr	r0, [r7, #4]
 800c81a:	f000 f9ba 	bl	800cb92 <USBD_CtlSendStatus>
    break;
 800c81e:	e010      	b.n	800c842 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800c820:	6878      	ldr	r0, [r7, #4]
 800c822:	f000 f9b6 	bl	800cb92 <USBD_CtlSendStatus>
    break;
 800c826:	e00c      	b.n	800c842 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800c828:	6839      	ldr	r1, [r7, #0]
 800c82a:	6878      	ldr	r0, [r7, #4]
 800c82c:	f000 f8e6 	bl	800c9fc <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c830:	4b06      	ldr	r3, [pc, #24]	; (800c84c <USBD_SetConfig+0x144>)
 800c832:	781b      	ldrb	r3, [r3, #0]
 800c834:	4619      	mov	r1, r3
 800c836:	6878      	ldr	r0, [r7, #4]
 800c838:	f7ff f956 	bl	800bae8 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800c83c:	2303      	movs	r3, #3
 800c83e:	73fb      	strb	r3, [r7, #15]
    break;
 800c840:	bf00      	nop
  }

  return ret;
 800c842:	7bfb      	ldrb	r3, [r7, #15]
}
 800c844:	4618      	mov	r0, r3
 800c846:	3710      	adds	r7, #16
 800c848:	46bd      	mov	sp, r7
 800c84a:	bd80      	pop	{r7, pc}
 800c84c:	20000634 	.word	0x20000634

0800c850 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b082      	sub	sp, #8
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
 800c858:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	88db      	ldrh	r3, [r3, #6]
 800c85e:	2b01      	cmp	r3, #1
 800c860:	d004      	beq.n	800c86c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c862:	6839      	ldr	r1, [r7, #0]
 800c864:	6878      	ldr	r0, [r7, #4]
 800c866:	f000 f8c9 	bl	800c9fc <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800c86a:	e021      	b.n	800c8b0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c872:	2b01      	cmp	r3, #1
 800c874:	db17      	blt.n	800c8a6 <USBD_GetConfig+0x56>
 800c876:	2b02      	cmp	r3, #2
 800c878:	dd02      	ble.n	800c880 <USBD_GetConfig+0x30>
 800c87a:	2b03      	cmp	r3, #3
 800c87c:	d00b      	beq.n	800c896 <USBD_GetConfig+0x46>
 800c87e:	e012      	b.n	800c8a6 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	2200      	movs	r2, #0
 800c884:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	3308      	adds	r3, #8
 800c88a:	2201      	movs	r2, #1
 800c88c:	4619      	mov	r1, r3
 800c88e:	6878      	ldr	r0, [r7, #4]
 800c890:	f000 f925 	bl	800cade <USBD_CtlSendData>
      break;
 800c894:	e00c      	b.n	800c8b0 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	3304      	adds	r3, #4
 800c89a:	2201      	movs	r2, #1
 800c89c:	4619      	mov	r1, r3
 800c89e:	6878      	ldr	r0, [r7, #4]
 800c8a0:	f000 f91d 	bl	800cade <USBD_CtlSendData>
      break;
 800c8a4:	e004      	b.n	800c8b0 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800c8a6:	6839      	ldr	r1, [r7, #0]
 800c8a8:	6878      	ldr	r0, [r7, #4]
 800c8aa:	f000 f8a7 	bl	800c9fc <USBD_CtlError>
      break;
 800c8ae:	bf00      	nop
}
 800c8b0:	bf00      	nop
 800c8b2:	3708      	adds	r7, #8
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	bd80      	pop	{r7, pc}

0800c8b8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b082      	sub	sp, #8
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
 800c8c0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8c8:	3b01      	subs	r3, #1
 800c8ca:	2b02      	cmp	r3, #2
 800c8cc:	d81e      	bhi.n	800c90c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800c8ce:	683b      	ldr	r3, [r7, #0]
 800c8d0:	88db      	ldrh	r3, [r3, #6]
 800c8d2:	2b02      	cmp	r3, #2
 800c8d4:	d004      	beq.n	800c8e0 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800c8d6:	6839      	ldr	r1, [r7, #0]
 800c8d8:	6878      	ldr	r0, [r7, #4]
 800c8da:	f000 f88f 	bl	800c9fc <USBD_CtlError>
      break;
 800c8de:	e01a      	b.n	800c916 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	2201      	movs	r2, #1
 800c8e4:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d005      	beq.n	800c8fc <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	68db      	ldr	r3, [r3, #12]
 800c8f4:	f043 0202 	orr.w	r2, r3, #2
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	330c      	adds	r3, #12
 800c900:	2202      	movs	r2, #2
 800c902:	4619      	mov	r1, r3
 800c904:	6878      	ldr	r0, [r7, #4]
 800c906:	f000 f8ea 	bl	800cade <USBD_CtlSendData>
    break;
 800c90a:	e004      	b.n	800c916 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800c90c:	6839      	ldr	r1, [r7, #0]
 800c90e:	6878      	ldr	r0, [r7, #4]
 800c910:	f000 f874 	bl	800c9fc <USBD_CtlError>
    break;
 800c914:	bf00      	nop
  }
}
 800c916:	bf00      	nop
 800c918:	3708      	adds	r7, #8
 800c91a:	46bd      	mov	sp, r7
 800c91c:	bd80      	pop	{r7, pc}

0800c91e <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c91e:	b580      	push	{r7, lr}
 800c920:	b082      	sub	sp, #8
 800c922:	af00      	add	r7, sp, #0
 800c924:	6078      	str	r0, [r7, #4]
 800c926:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	885b      	ldrh	r3, [r3, #2]
 800c92c:	2b01      	cmp	r3, #1
 800c92e:	d106      	bne.n	800c93e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2201      	movs	r2, #1
 800c934:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c938:	6878      	ldr	r0, [r7, #4]
 800c93a:	f000 f92a 	bl	800cb92 <USBD_CtlSendStatus>
  }
}
 800c93e:	bf00      	nop
 800c940:	3708      	adds	r7, #8
 800c942:	46bd      	mov	sp, r7
 800c944:	bd80      	pop	{r7, pc}

0800c946 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c946:	b580      	push	{r7, lr}
 800c948:	b082      	sub	sp, #8
 800c94a:	af00      	add	r7, sp, #0
 800c94c:	6078      	str	r0, [r7, #4]
 800c94e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c956:	3b01      	subs	r3, #1
 800c958:	2b02      	cmp	r3, #2
 800c95a:	d80b      	bhi.n	800c974 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	885b      	ldrh	r3, [r3, #2]
 800c960:	2b01      	cmp	r3, #1
 800c962:	d10c      	bne.n	800c97e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2200      	movs	r2, #0
 800c968:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c96c:	6878      	ldr	r0, [r7, #4]
 800c96e:	f000 f910 	bl	800cb92 <USBD_CtlSendStatus>
      }
      break;
 800c972:	e004      	b.n	800c97e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c974:	6839      	ldr	r1, [r7, #0]
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f000 f840 	bl	800c9fc <USBD_CtlError>
      break;
 800c97c:	e000      	b.n	800c980 <USBD_ClrFeature+0x3a>
      break;
 800c97e:	bf00      	nop
  }
}
 800c980:	bf00      	nop
 800c982:	3708      	adds	r7, #8
 800c984:	46bd      	mov	sp, r7
 800c986:	bd80      	pop	{r7, pc}

0800c988 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b084      	sub	sp, #16
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
 800c990:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c992:	683b      	ldr	r3, [r7, #0]
 800c994:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	781a      	ldrb	r2, [r3, #0]
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	3301      	adds	r3, #1
 800c9a2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	781a      	ldrb	r2, [r3, #0]
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	3301      	adds	r3, #1
 800c9b0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c9b2:	68f8      	ldr	r0, [r7, #12]
 800c9b4:	f7ff fad3 	bl	800bf5e <SWAPBYTE>
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	461a      	mov	r2, r3
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	3301      	adds	r3, #1
 800c9c4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	3301      	adds	r3, #1
 800c9ca:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c9cc:	68f8      	ldr	r0, [r7, #12]
 800c9ce:	f7ff fac6 	bl	800bf5e <SWAPBYTE>
 800c9d2:	4603      	mov	r3, r0
 800c9d4:	461a      	mov	r2, r3
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	3301      	adds	r3, #1
 800c9de:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	3301      	adds	r3, #1
 800c9e4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c9e6:	68f8      	ldr	r0, [r7, #12]
 800c9e8:	f7ff fab9 	bl	800bf5e <SWAPBYTE>
 800c9ec:	4603      	mov	r3, r0
 800c9ee:	461a      	mov	r2, r3
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	80da      	strh	r2, [r3, #6]
}
 800c9f4:	bf00      	nop
 800c9f6:	3710      	adds	r7, #16
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	bd80      	pop	{r7, pc}

0800c9fc <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b082      	sub	sp, #8
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	6078      	str	r0, [r7, #4]
 800ca04:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ca06:	2180      	movs	r1, #128	; 0x80
 800ca08:	6878      	ldr	r0, [r7, #4]
 800ca0a:	f003 fe7f 	bl	801070c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ca0e:	2100      	movs	r1, #0
 800ca10:	6878      	ldr	r0, [r7, #4]
 800ca12:	f003 fe7b 	bl	801070c <USBD_LL_StallEP>
}
 800ca16:	bf00      	nop
 800ca18:	3708      	adds	r7, #8
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	bd80      	pop	{r7, pc}

0800ca1e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ca1e:	b580      	push	{r7, lr}
 800ca20:	b086      	sub	sp, #24
 800ca22:	af00      	add	r7, sp, #0
 800ca24:	60f8      	str	r0, [r7, #12]
 800ca26:	60b9      	str	r1, [r7, #8]
 800ca28:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d036      	beq.n	800caa2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ca38:	6938      	ldr	r0, [r7, #16]
 800ca3a:	f000 f836 	bl	800caaa <USBD_GetLen>
 800ca3e:	4603      	mov	r3, r0
 800ca40:	3301      	adds	r3, #1
 800ca42:	b29b      	uxth	r3, r3
 800ca44:	005b      	lsls	r3, r3, #1
 800ca46:	b29a      	uxth	r2, r3
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ca4c:	7dfb      	ldrb	r3, [r7, #23]
 800ca4e:	68ba      	ldr	r2, [r7, #8]
 800ca50:	4413      	add	r3, r2
 800ca52:	687a      	ldr	r2, [r7, #4]
 800ca54:	7812      	ldrb	r2, [r2, #0]
 800ca56:	701a      	strb	r2, [r3, #0]
  idx++;
 800ca58:	7dfb      	ldrb	r3, [r7, #23]
 800ca5a:	3301      	adds	r3, #1
 800ca5c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ca5e:	7dfb      	ldrb	r3, [r7, #23]
 800ca60:	68ba      	ldr	r2, [r7, #8]
 800ca62:	4413      	add	r3, r2
 800ca64:	2203      	movs	r2, #3
 800ca66:	701a      	strb	r2, [r3, #0]
  idx++;
 800ca68:	7dfb      	ldrb	r3, [r7, #23]
 800ca6a:	3301      	adds	r3, #1
 800ca6c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ca6e:	e013      	b.n	800ca98 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ca70:	7dfb      	ldrb	r3, [r7, #23]
 800ca72:	68ba      	ldr	r2, [r7, #8]
 800ca74:	4413      	add	r3, r2
 800ca76:	693a      	ldr	r2, [r7, #16]
 800ca78:	7812      	ldrb	r2, [r2, #0]
 800ca7a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ca7c:	693b      	ldr	r3, [r7, #16]
 800ca7e:	3301      	adds	r3, #1
 800ca80:	613b      	str	r3, [r7, #16]
    idx++;
 800ca82:	7dfb      	ldrb	r3, [r7, #23]
 800ca84:	3301      	adds	r3, #1
 800ca86:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ca88:	7dfb      	ldrb	r3, [r7, #23]
 800ca8a:	68ba      	ldr	r2, [r7, #8]
 800ca8c:	4413      	add	r3, r2
 800ca8e:	2200      	movs	r2, #0
 800ca90:	701a      	strb	r2, [r3, #0]
    idx++;
 800ca92:	7dfb      	ldrb	r3, [r7, #23]
 800ca94:	3301      	adds	r3, #1
 800ca96:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ca98:	693b      	ldr	r3, [r7, #16]
 800ca9a:	781b      	ldrb	r3, [r3, #0]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d1e7      	bne.n	800ca70 <USBD_GetString+0x52>
 800caa0:	e000      	b.n	800caa4 <USBD_GetString+0x86>
    return;
 800caa2:	bf00      	nop
  }
}
 800caa4:	3718      	adds	r7, #24
 800caa6:	46bd      	mov	sp, r7
 800caa8:	bd80      	pop	{r7, pc}

0800caaa <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800caaa:	b480      	push	{r7}
 800caac:	b085      	sub	sp, #20
 800caae:	af00      	add	r7, sp, #0
 800cab0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cab2:	2300      	movs	r3, #0
 800cab4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800caba:	e005      	b.n	800cac8 <USBD_GetLen+0x1e>
  {
    len++;
 800cabc:	7bfb      	ldrb	r3, [r7, #15]
 800cabe:	3301      	adds	r3, #1
 800cac0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cac2:	68bb      	ldr	r3, [r7, #8]
 800cac4:	3301      	adds	r3, #1
 800cac6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cac8:	68bb      	ldr	r3, [r7, #8]
 800caca:	781b      	ldrb	r3, [r3, #0]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d1f5      	bne.n	800cabc <USBD_GetLen+0x12>
  }

  return len;
 800cad0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cad2:	4618      	mov	r0, r3
 800cad4:	3714      	adds	r7, #20
 800cad6:	46bd      	mov	sp, r7
 800cad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cadc:	4770      	bx	lr

0800cade <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cade:	b580      	push	{r7, lr}
 800cae0:	b084      	sub	sp, #16
 800cae2:	af00      	add	r7, sp, #0
 800cae4:	60f8      	str	r0, [r7, #12]
 800cae6:	60b9      	str	r1, [r7, #8]
 800cae8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	2202      	movs	r2, #2
 800caee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	687a      	ldr	r2, [r7, #4]
 800caf6:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	687a      	ldr	r2, [r7, #4]
 800cafc:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	68ba      	ldr	r2, [r7, #8]
 800cb02:	2100      	movs	r1, #0
 800cb04:	68f8      	ldr	r0, [r7, #12]
 800cb06:	f003 fe8a 	bl	801081e <USBD_LL_Transmit>

  return USBD_OK;
 800cb0a:	2300      	movs	r3, #0
}
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	3710      	adds	r7, #16
 800cb10:	46bd      	mov	sp, r7
 800cb12:	bd80      	pop	{r7, pc}

0800cb14 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b084      	sub	sp, #16
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	60f8      	str	r0, [r7, #12]
 800cb1c:	60b9      	str	r1, [r7, #8]
 800cb1e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	68ba      	ldr	r2, [r7, #8]
 800cb24:	2100      	movs	r1, #0
 800cb26:	68f8      	ldr	r0, [r7, #12]
 800cb28:	f003 fe79 	bl	801081e <USBD_LL_Transmit>

  return USBD_OK;
 800cb2c:	2300      	movs	r3, #0
}
 800cb2e:	4618      	mov	r0, r3
 800cb30:	3710      	adds	r7, #16
 800cb32:	46bd      	mov	sp, r7
 800cb34:	bd80      	pop	{r7, pc}

0800cb36 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cb36:	b580      	push	{r7, lr}
 800cb38:	b084      	sub	sp, #16
 800cb3a:	af00      	add	r7, sp, #0
 800cb3c:	60f8      	str	r0, [r7, #12]
 800cb3e:	60b9      	str	r1, [r7, #8]
 800cb40:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	2203      	movs	r2, #3
 800cb46:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	687a      	ldr	r2, [r7, #4]
 800cb4e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	687a      	ldr	r2, [r7, #4]
 800cb56:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	68ba      	ldr	r2, [r7, #8]
 800cb5e:	2100      	movs	r1, #0
 800cb60:	68f8      	ldr	r0, [r7, #12]
 800cb62:	f003 fe7d 	bl	8010860 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb66:	2300      	movs	r3, #0
}
 800cb68:	4618      	mov	r0, r3
 800cb6a:	3710      	adds	r7, #16
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bd80      	pop	{r7, pc}

0800cb70 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b084      	sub	sp, #16
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	60f8      	str	r0, [r7, #12]
 800cb78:	60b9      	str	r1, [r7, #8]
 800cb7a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	68ba      	ldr	r2, [r7, #8]
 800cb80:	2100      	movs	r1, #0
 800cb82:	68f8      	ldr	r0, [r7, #12]
 800cb84:	f003 fe6c 	bl	8010860 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb88:	2300      	movs	r3, #0
}
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	3710      	adds	r7, #16
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	bd80      	pop	{r7, pc}

0800cb92 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cb92:	b580      	push	{r7, lr}
 800cb94:	b082      	sub	sp, #8
 800cb96:	af00      	add	r7, sp, #0
 800cb98:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	2204      	movs	r2, #4
 800cb9e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cba2:	2300      	movs	r3, #0
 800cba4:	2200      	movs	r2, #0
 800cba6:	2100      	movs	r1, #0
 800cba8:	6878      	ldr	r0, [r7, #4]
 800cbaa:	f003 fe38 	bl	801081e <USBD_LL_Transmit>

  return USBD_OK;
 800cbae:	2300      	movs	r3, #0
}
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	3708      	adds	r7, #8
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	bd80      	pop	{r7, pc}

0800cbb8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b082      	sub	sp, #8
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	2205      	movs	r2, #5
 800cbc4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cbc8:	2300      	movs	r3, #0
 800cbca:	2200      	movs	r2, #0
 800cbcc:	2100      	movs	r1, #0
 800cbce:	6878      	ldr	r0, [r7, #4]
 800cbd0:	f003 fe46 	bl	8010860 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cbd4:	2300      	movs	r3, #0
}
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	3708      	adds	r7, #8
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bd80      	pop	{r7, pc}

0800cbde <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800cbde:	b480      	push	{r7}
 800cbe0:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800cbe2:	bf00      	nop
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbea:	4770      	bx	lr

0800cbec <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800cbec:	b480      	push	{r7}
 800cbee:	b085      	sub	sp, #20
 800cbf0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cbf2:	f3ef 8305 	mrs	r3, IPSR
 800cbf6:	60bb      	str	r3, [r7, #8]
  return(result);
 800cbf8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d10f      	bne.n	800cc1e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cbfe:	f3ef 8310 	mrs	r3, PRIMASK
 800cc02:	607b      	str	r3, [r7, #4]
  return(result);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d105      	bne.n	800cc16 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cc0a:	f3ef 8311 	mrs	r3, BASEPRI
 800cc0e:	603b      	str	r3, [r7, #0]
  return(result);
 800cc10:	683b      	ldr	r3, [r7, #0]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d007      	beq.n	800cc26 <osKernelInitialize+0x3a>
 800cc16:	4b0e      	ldr	r3, [pc, #56]	; (800cc50 <osKernelInitialize+0x64>)
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	2b02      	cmp	r3, #2
 800cc1c:	d103      	bne.n	800cc26 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800cc1e:	f06f 0305 	mvn.w	r3, #5
 800cc22:	60fb      	str	r3, [r7, #12]
 800cc24:	e00c      	b.n	800cc40 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800cc26:	4b0a      	ldr	r3, [pc, #40]	; (800cc50 <osKernelInitialize+0x64>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d105      	bne.n	800cc3a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800cc2e:	4b08      	ldr	r3, [pc, #32]	; (800cc50 <osKernelInitialize+0x64>)
 800cc30:	2201      	movs	r2, #1
 800cc32:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800cc34:	2300      	movs	r3, #0
 800cc36:	60fb      	str	r3, [r7, #12]
 800cc38:	e002      	b.n	800cc40 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800cc3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cc3e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800cc40:	68fb      	ldr	r3, [r7, #12]
}
 800cc42:	4618      	mov	r0, r3
 800cc44:	3714      	adds	r7, #20
 800cc46:	46bd      	mov	sp, r7
 800cc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4c:	4770      	bx	lr
 800cc4e:	bf00      	nop
 800cc50:	20000638 	.word	0x20000638

0800cc54 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b084      	sub	sp, #16
 800cc58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc5a:	f3ef 8305 	mrs	r3, IPSR
 800cc5e:	60bb      	str	r3, [r7, #8]
  return(result);
 800cc60:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d10f      	bne.n	800cc86 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc66:	f3ef 8310 	mrs	r3, PRIMASK
 800cc6a:	607b      	str	r3, [r7, #4]
  return(result);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d105      	bne.n	800cc7e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cc72:	f3ef 8311 	mrs	r3, BASEPRI
 800cc76:	603b      	str	r3, [r7, #0]
  return(result);
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d007      	beq.n	800cc8e <osKernelStart+0x3a>
 800cc7e:	4b0f      	ldr	r3, [pc, #60]	; (800ccbc <osKernelStart+0x68>)
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	2b02      	cmp	r3, #2
 800cc84:	d103      	bne.n	800cc8e <osKernelStart+0x3a>
    stat = osErrorISR;
 800cc86:	f06f 0305 	mvn.w	r3, #5
 800cc8a:	60fb      	str	r3, [r7, #12]
 800cc8c:	e010      	b.n	800ccb0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800cc8e:	4b0b      	ldr	r3, [pc, #44]	; (800ccbc <osKernelStart+0x68>)
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	2b01      	cmp	r3, #1
 800cc94:	d109      	bne.n	800ccaa <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800cc96:	f7ff ffa2 	bl	800cbde <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800cc9a:	4b08      	ldr	r3, [pc, #32]	; (800ccbc <osKernelStart+0x68>)
 800cc9c:	2202      	movs	r2, #2
 800cc9e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800cca0:	f001 fb84 	bl	800e3ac <vTaskStartScheduler>
      stat = osOK;
 800cca4:	2300      	movs	r3, #0
 800cca6:	60fb      	str	r3, [r7, #12]
 800cca8:	e002      	b.n	800ccb0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800ccaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ccae:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800ccb0:	68fb      	ldr	r3, [r7, #12]
}
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	3710      	adds	r7, #16
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	bd80      	pop	{r7, pc}
 800ccba:	bf00      	nop
 800ccbc:	20000638 	.word	0x20000638

0800ccc0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b090      	sub	sp, #64	; 0x40
 800ccc4:	af04      	add	r7, sp, #16
 800ccc6:	60f8      	str	r0, [r7, #12]
 800ccc8:	60b9      	str	r1, [r7, #8]
 800ccca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800cccc:	2300      	movs	r3, #0
 800ccce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ccd0:	f3ef 8305 	mrs	r3, IPSR
 800ccd4:	61fb      	str	r3, [r7, #28]
  return(result);
 800ccd6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	f040 808f 	bne.w	800cdfc <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ccde:	f3ef 8310 	mrs	r3, PRIMASK
 800cce2:	61bb      	str	r3, [r7, #24]
  return(result);
 800cce4:	69bb      	ldr	r3, [r7, #24]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d105      	bne.n	800ccf6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ccea:	f3ef 8311 	mrs	r3, BASEPRI
 800ccee:	617b      	str	r3, [r7, #20]
  return(result);
 800ccf0:	697b      	ldr	r3, [r7, #20]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d003      	beq.n	800ccfe <osThreadNew+0x3e>
 800ccf6:	4b44      	ldr	r3, [pc, #272]	; (800ce08 <osThreadNew+0x148>)
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	2b02      	cmp	r3, #2
 800ccfc:	d07e      	beq.n	800cdfc <osThreadNew+0x13c>
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d07b      	beq.n	800cdfc <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800cd04:	2380      	movs	r3, #128	; 0x80
 800cd06:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800cd08:	2318      	movs	r3, #24
 800cd0a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800cd10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cd14:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d045      	beq.n	800cda8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d002      	beq.n	800cd2a <osThreadNew+0x6a>
        name = attr->name;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	699b      	ldr	r3, [r3, #24]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d002      	beq.n	800cd38 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	699b      	ldr	r3, [r3, #24]
 800cd36:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800cd38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d008      	beq.n	800cd50 <osThreadNew+0x90>
 800cd3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd40:	2b38      	cmp	r3, #56	; 0x38
 800cd42:	d805      	bhi.n	800cd50 <osThreadNew+0x90>
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	685b      	ldr	r3, [r3, #4]
 800cd48:	f003 0301 	and.w	r3, r3, #1
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d001      	beq.n	800cd54 <osThreadNew+0x94>
        return (NULL);
 800cd50:	2300      	movs	r3, #0
 800cd52:	e054      	b.n	800cdfe <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	695b      	ldr	r3, [r3, #20]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d003      	beq.n	800cd64 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	695b      	ldr	r3, [r3, #20]
 800cd60:	089b      	lsrs	r3, r3, #2
 800cd62:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	689b      	ldr	r3, [r3, #8]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d00e      	beq.n	800cd8a <osThreadNew+0xca>
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	68db      	ldr	r3, [r3, #12]
 800cd70:	2b63      	cmp	r3, #99	; 0x63
 800cd72:	d90a      	bls.n	800cd8a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d006      	beq.n	800cd8a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	695b      	ldr	r3, [r3, #20]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d002      	beq.n	800cd8a <osThreadNew+0xca>
        mem = 1;
 800cd84:	2301      	movs	r3, #1
 800cd86:	623b      	str	r3, [r7, #32]
 800cd88:	e010      	b.n	800cdac <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	689b      	ldr	r3, [r3, #8]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d10c      	bne.n	800cdac <osThreadNew+0xec>
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	68db      	ldr	r3, [r3, #12]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d108      	bne.n	800cdac <osThreadNew+0xec>
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	691b      	ldr	r3, [r3, #16]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d104      	bne.n	800cdac <osThreadNew+0xec>
          mem = 0;
 800cda2:	2300      	movs	r3, #0
 800cda4:	623b      	str	r3, [r7, #32]
 800cda6:	e001      	b.n	800cdac <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800cda8:	2300      	movs	r3, #0
 800cdaa:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800cdac:	6a3b      	ldr	r3, [r7, #32]
 800cdae:	2b01      	cmp	r3, #1
 800cdb0:	d110      	bne.n	800cdd4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800cdb6:	687a      	ldr	r2, [r7, #4]
 800cdb8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cdba:	9202      	str	r2, [sp, #8]
 800cdbc:	9301      	str	r3, [sp, #4]
 800cdbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdc0:	9300      	str	r3, [sp, #0]
 800cdc2:	68bb      	ldr	r3, [r7, #8]
 800cdc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cdc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cdc8:	68f8      	ldr	r0, [r7, #12]
 800cdca:	f001 f89d 	bl	800df08 <xTaskCreateStatic>
 800cdce:	4603      	mov	r3, r0
 800cdd0:	613b      	str	r3, [r7, #16]
 800cdd2:	e013      	b.n	800cdfc <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800cdd4:	6a3b      	ldr	r3, [r7, #32]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d110      	bne.n	800cdfc <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800cdda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cddc:	b29a      	uxth	r2, r3
 800cdde:	f107 0310 	add.w	r3, r7, #16
 800cde2:	9301      	str	r3, [sp, #4]
 800cde4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cde6:	9300      	str	r3, [sp, #0]
 800cde8:	68bb      	ldr	r3, [r7, #8]
 800cdea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cdec:	68f8      	ldr	r0, [r7, #12]
 800cdee:	f001 f8e5 	bl	800dfbc <xTaskCreate>
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	2b01      	cmp	r3, #1
 800cdf6:	d001      	beq.n	800cdfc <osThreadNew+0x13c>
          hTask = NULL;
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800cdfc:	693b      	ldr	r3, [r7, #16]
}
 800cdfe:	4618      	mov	r0, r3
 800ce00:	3730      	adds	r7, #48	; 0x30
 800ce02:	46bd      	mov	sp, r7
 800ce04:	bd80      	pop	{r7, pc}
 800ce06:	bf00      	nop
 800ce08:	20000638 	.word	0x20000638

0800ce0c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b086      	sub	sp, #24
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ce14:	f3ef 8305 	mrs	r3, IPSR
 800ce18:	613b      	str	r3, [r7, #16]
  return(result);
 800ce1a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d10f      	bne.n	800ce40 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce20:	f3ef 8310 	mrs	r3, PRIMASK
 800ce24:	60fb      	str	r3, [r7, #12]
  return(result);
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d105      	bne.n	800ce38 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ce2c:	f3ef 8311 	mrs	r3, BASEPRI
 800ce30:	60bb      	str	r3, [r7, #8]
  return(result);
 800ce32:	68bb      	ldr	r3, [r7, #8]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d007      	beq.n	800ce48 <osDelay+0x3c>
 800ce38:	4b0a      	ldr	r3, [pc, #40]	; (800ce64 <osDelay+0x58>)
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	2b02      	cmp	r3, #2
 800ce3e:	d103      	bne.n	800ce48 <osDelay+0x3c>
    stat = osErrorISR;
 800ce40:	f06f 0305 	mvn.w	r3, #5
 800ce44:	617b      	str	r3, [r7, #20]
 800ce46:	e007      	b.n	800ce58 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800ce48:	2300      	movs	r3, #0
 800ce4a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d002      	beq.n	800ce58 <osDelay+0x4c>
      vTaskDelay(ticks);
 800ce52:	6878      	ldr	r0, [r7, #4]
 800ce54:	f001 fa76 	bl	800e344 <vTaskDelay>
    }
  }

  return (stat);
 800ce58:	697b      	ldr	r3, [r7, #20]
}
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	3718      	adds	r7, #24
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	bd80      	pop	{r7, pc}
 800ce62:	bf00      	nop
 800ce64:	20000638 	.word	0x20000638

0800ce68 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b08c      	sub	sp, #48	; 0x30
 800ce6c:	af02      	add	r7, sp, #8
 800ce6e:	60f8      	str	r0, [r7, #12]
 800ce70:	60b9      	str	r1, [r7, #8]
 800ce72:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800ce74:	2300      	movs	r3, #0
 800ce76:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ce78:	f3ef 8305 	mrs	r3, IPSR
 800ce7c:	61bb      	str	r3, [r7, #24]
  return(result);
 800ce7e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d170      	bne.n	800cf66 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce84:	f3ef 8310 	mrs	r3, PRIMASK
 800ce88:	617b      	str	r3, [r7, #20]
  return(result);
 800ce8a:	697b      	ldr	r3, [r7, #20]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d105      	bne.n	800ce9c <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ce90:	f3ef 8311 	mrs	r3, BASEPRI
 800ce94:	613b      	str	r3, [r7, #16]
  return(result);
 800ce96:	693b      	ldr	r3, [r7, #16]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d003      	beq.n	800cea4 <osMessageQueueNew+0x3c>
 800ce9c:	4b34      	ldr	r3, [pc, #208]	; (800cf70 <osMessageQueueNew+0x108>)
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	2b02      	cmp	r3, #2
 800cea2:	d060      	beq.n	800cf66 <osMessageQueueNew+0xfe>
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d05d      	beq.n	800cf66 <osMessageQueueNew+0xfe>
 800ceaa:	68bb      	ldr	r3, [r7, #8]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d05a      	beq.n	800cf66 <osMessageQueueNew+0xfe>
    mem = -1;
 800ceb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ceb4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d029      	beq.n	800cf10 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	689b      	ldr	r3, [r3, #8]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d012      	beq.n	800ceea <osMessageQueueNew+0x82>
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	68db      	ldr	r3, [r3, #12]
 800cec8:	2b4f      	cmp	r3, #79	; 0x4f
 800ceca:	d90e      	bls.n	800ceea <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d00a      	beq.n	800ceea <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	695a      	ldr	r2, [r3, #20]
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	68b9      	ldr	r1, [r7, #8]
 800cedc:	fb01 f303 	mul.w	r3, r1, r3
 800cee0:	429a      	cmp	r2, r3
 800cee2:	d302      	bcc.n	800ceea <osMessageQueueNew+0x82>
        mem = 1;
 800cee4:	2301      	movs	r3, #1
 800cee6:	623b      	str	r3, [r7, #32]
 800cee8:	e014      	b.n	800cf14 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	689b      	ldr	r3, [r3, #8]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d110      	bne.n	800cf14 <osMessageQueueNew+0xac>
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	68db      	ldr	r3, [r3, #12]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d10c      	bne.n	800cf14 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d108      	bne.n	800cf14 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	695b      	ldr	r3, [r3, #20]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d104      	bne.n	800cf14 <osMessageQueueNew+0xac>
          mem = 0;
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	623b      	str	r3, [r7, #32]
 800cf0e:	e001      	b.n	800cf14 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800cf10:	2300      	movs	r3, #0
 800cf12:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800cf14:	6a3b      	ldr	r3, [r7, #32]
 800cf16:	2b01      	cmp	r3, #1
 800cf18:	d10c      	bne.n	800cf34 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	691a      	ldr	r2, [r3, #16]
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	6899      	ldr	r1, [r3, #8]
 800cf22:	2300      	movs	r3, #0
 800cf24:	9300      	str	r3, [sp, #0]
 800cf26:	460b      	mov	r3, r1
 800cf28:	68b9      	ldr	r1, [r7, #8]
 800cf2a:	68f8      	ldr	r0, [r7, #12]
 800cf2c:	f000 faa0 	bl	800d470 <xQueueGenericCreateStatic>
 800cf30:	6278      	str	r0, [r7, #36]	; 0x24
 800cf32:	e008      	b.n	800cf46 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800cf34:	6a3b      	ldr	r3, [r7, #32]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d105      	bne.n	800cf46 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	68b9      	ldr	r1, [r7, #8]
 800cf3e:	68f8      	ldr	r0, [r7, #12]
 800cf40:	f000 fb09 	bl	800d556 <xQueueGenericCreate>
 800cf44:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800cf46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d00c      	beq.n	800cf66 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d003      	beq.n	800cf5a <osMessageQueueNew+0xf2>
        name = attr->name;
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	61fb      	str	r3, [r7, #28]
 800cf58:	e001      	b.n	800cf5e <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800cf5e:	69f9      	ldr	r1, [r7, #28]
 800cf60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cf62:	f000 ff75 	bl	800de50 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800cf66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cf68:	4618      	mov	r0, r3
 800cf6a:	3728      	adds	r7, #40	; 0x28
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	bd80      	pop	{r7, pc}
 800cf70:	20000638 	.word	0x20000638

0800cf74 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b08a      	sub	sp, #40	; 0x28
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	60f8      	str	r0, [r7, #12]
 800cf7c:	60b9      	str	r1, [r7, #8]
 800cf7e:	603b      	str	r3, [r7, #0]
 800cf80:	4613      	mov	r3, r2
 800cf82:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800cf88:	2300      	movs	r3, #0
 800cf8a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf8c:	f3ef 8305 	mrs	r3, IPSR
 800cf90:	61fb      	str	r3, [r7, #28]
  return(result);
 800cf92:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d10f      	bne.n	800cfb8 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf98:	f3ef 8310 	mrs	r3, PRIMASK
 800cf9c:	61bb      	str	r3, [r7, #24]
  return(result);
 800cf9e:	69bb      	ldr	r3, [r7, #24]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d105      	bne.n	800cfb0 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cfa4:	f3ef 8311 	mrs	r3, BASEPRI
 800cfa8:	617b      	str	r3, [r7, #20]
  return(result);
 800cfaa:	697b      	ldr	r3, [r7, #20]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d02c      	beq.n	800d00a <osMessageQueuePut+0x96>
 800cfb0:	4b28      	ldr	r3, [pc, #160]	; (800d054 <osMessageQueuePut+0xe0>)
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	2b02      	cmp	r3, #2
 800cfb6:	d128      	bne.n	800d00a <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cfb8:	6a3b      	ldr	r3, [r7, #32]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d005      	beq.n	800cfca <osMessageQueuePut+0x56>
 800cfbe:	68bb      	ldr	r3, [r7, #8]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d002      	beq.n	800cfca <osMessageQueuePut+0x56>
 800cfc4:	683b      	ldr	r3, [r7, #0]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d003      	beq.n	800cfd2 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800cfca:	f06f 0303 	mvn.w	r3, #3
 800cfce:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cfd0:	e039      	b.n	800d046 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800cfd6:	f107 0210 	add.w	r2, r7, #16
 800cfda:	2300      	movs	r3, #0
 800cfdc:	68b9      	ldr	r1, [r7, #8]
 800cfde:	6a38      	ldr	r0, [r7, #32]
 800cfe0:	f000 fc16 	bl	800d810 <xQueueGenericSendFromISR>
 800cfe4:	4603      	mov	r3, r0
 800cfe6:	2b01      	cmp	r3, #1
 800cfe8:	d003      	beq.n	800cff2 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800cfea:	f06f 0302 	mvn.w	r3, #2
 800cfee:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cff0:	e029      	b.n	800d046 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800cff2:	693b      	ldr	r3, [r7, #16]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d026      	beq.n	800d046 <osMessageQueuePut+0xd2>
 800cff8:	4b17      	ldr	r3, [pc, #92]	; (800d058 <osMessageQueuePut+0xe4>)
 800cffa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cffe:	601a      	str	r2, [r3, #0]
 800d000:	f3bf 8f4f 	dsb	sy
 800d004:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d008:	e01d      	b.n	800d046 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d00a:	6a3b      	ldr	r3, [r7, #32]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d002      	beq.n	800d016 <osMessageQueuePut+0xa2>
 800d010:	68bb      	ldr	r3, [r7, #8]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d103      	bne.n	800d01e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800d016:	f06f 0303 	mvn.w	r3, #3
 800d01a:	627b      	str	r3, [r7, #36]	; 0x24
 800d01c:	e014      	b.n	800d048 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d01e:	2300      	movs	r3, #0
 800d020:	683a      	ldr	r2, [r7, #0]
 800d022:	68b9      	ldr	r1, [r7, #8]
 800d024:	6a38      	ldr	r0, [r7, #32]
 800d026:	f000 faf9 	bl	800d61c <xQueueGenericSend>
 800d02a:	4603      	mov	r3, r0
 800d02c:	2b01      	cmp	r3, #1
 800d02e:	d00b      	beq.n	800d048 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800d030:	683b      	ldr	r3, [r7, #0]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d003      	beq.n	800d03e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800d036:	f06f 0301 	mvn.w	r3, #1
 800d03a:	627b      	str	r3, [r7, #36]	; 0x24
 800d03c:	e004      	b.n	800d048 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800d03e:	f06f 0302 	mvn.w	r3, #2
 800d042:	627b      	str	r3, [r7, #36]	; 0x24
 800d044:	e000      	b.n	800d048 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d046:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800d048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d04a:	4618      	mov	r0, r3
 800d04c:	3728      	adds	r7, #40	; 0x28
 800d04e:	46bd      	mov	sp, r7
 800d050:	bd80      	pop	{r7, pc}
 800d052:	bf00      	nop
 800d054:	20000638 	.word	0x20000638
 800d058:	e000ed04 	.word	0xe000ed04

0800d05c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b08a      	sub	sp, #40	; 0x28
 800d060:	af00      	add	r7, sp, #0
 800d062:	60f8      	str	r0, [r7, #12]
 800d064:	60b9      	str	r1, [r7, #8]
 800d066:	607a      	str	r2, [r7, #4]
 800d068:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d06e:	2300      	movs	r3, #0
 800d070:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d072:	f3ef 8305 	mrs	r3, IPSR
 800d076:	61fb      	str	r3, [r7, #28]
  return(result);
 800d078:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d10f      	bne.n	800d09e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d07e:	f3ef 8310 	mrs	r3, PRIMASK
 800d082:	61bb      	str	r3, [r7, #24]
  return(result);
 800d084:	69bb      	ldr	r3, [r7, #24]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d105      	bne.n	800d096 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d08a:	f3ef 8311 	mrs	r3, BASEPRI
 800d08e:	617b      	str	r3, [r7, #20]
  return(result);
 800d090:	697b      	ldr	r3, [r7, #20]
 800d092:	2b00      	cmp	r3, #0
 800d094:	d02c      	beq.n	800d0f0 <osMessageQueueGet+0x94>
 800d096:	4b28      	ldr	r3, [pc, #160]	; (800d138 <osMessageQueueGet+0xdc>)
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	2b02      	cmp	r3, #2
 800d09c:	d128      	bne.n	800d0f0 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d09e:	6a3b      	ldr	r3, [r7, #32]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d005      	beq.n	800d0b0 <osMessageQueueGet+0x54>
 800d0a4:	68bb      	ldr	r3, [r7, #8]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d002      	beq.n	800d0b0 <osMessageQueueGet+0x54>
 800d0aa:	683b      	ldr	r3, [r7, #0]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d003      	beq.n	800d0b8 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800d0b0:	f06f 0303 	mvn.w	r3, #3
 800d0b4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d0b6:	e038      	b.n	800d12a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800d0bc:	f107 0310 	add.w	r3, r7, #16
 800d0c0:	461a      	mov	r2, r3
 800d0c2:	68b9      	ldr	r1, [r7, #8]
 800d0c4:	6a38      	ldr	r0, [r7, #32]
 800d0c6:	f000 fd13 	bl	800daf0 <xQueueReceiveFromISR>
 800d0ca:	4603      	mov	r3, r0
 800d0cc:	2b01      	cmp	r3, #1
 800d0ce:	d003      	beq.n	800d0d8 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800d0d0:	f06f 0302 	mvn.w	r3, #2
 800d0d4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d0d6:	e028      	b.n	800d12a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800d0d8:	693b      	ldr	r3, [r7, #16]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d025      	beq.n	800d12a <osMessageQueueGet+0xce>
 800d0de:	4b17      	ldr	r3, [pc, #92]	; (800d13c <osMessageQueueGet+0xe0>)
 800d0e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0e4:	601a      	str	r2, [r3, #0]
 800d0e6:	f3bf 8f4f 	dsb	sy
 800d0ea:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d0ee:	e01c      	b.n	800d12a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d0f0:	6a3b      	ldr	r3, [r7, #32]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d002      	beq.n	800d0fc <osMessageQueueGet+0xa0>
 800d0f6:	68bb      	ldr	r3, [r7, #8]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d103      	bne.n	800d104 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800d0fc:	f06f 0303 	mvn.w	r3, #3
 800d100:	627b      	str	r3, [r7, #36]	; 0x24
 800d102:	e013      	b.n	800d12c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d104:	683a      	ldr	r2, [r7, #0]
 800d106:	68b9      	ldr	r1, [r7, #8]
 800d108:	6a38      	ldr	r0, [r7, #32]
 800d10a:	f000 fc15 	bl	800d938 <xQueueReceive>
 800d10e:	4603      	mov	r3, r0
 800d110:	2b01      	cmp	r3, #1
 800d112:	d00b      	beq.n	800d12c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800d114:	683b      	ldr	r3, [r7, #0]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d003      	beq.n	800d122 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800d11a:	f06f 0301 	mvn.w	r3, #1
 800d11e:	627b      	str	r3, [r7, #36]	; 0x24
 800d120:	e004      	b.n	800d12c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800d122:	f06f 0302 	mvn.w	r3, #2
 800d126:	627b      	str	r3, [r7, #36]	; 0x24
 800d128:	e000      	b.n	800d12c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d12a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800d12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d12e:	4618      	mov	r0, r3
 800d130:	3728      	adds	r7, #40	; 0x28
 800d132:	46bd      	mov	sp, r7
 800d134:	bd80      	pop	{r7, pc}
 800d136:	bf00      	nop
 800d138:	20000638 	.word	0x20000638
 800d13c:	e000ed04 	.word	0xe000ed04

0800d140 <osMessageQueueGetSpace>:
  }

  return ((uint32_t)count);
}

uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
 800d140:	b580      	push	{r7, lr}
 800d142:	b08c      	sub	sp, #48	; 0x30
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t space;
  uint32_t isrm;

  if (mq == NULL) {
 800d14c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d102      	bne.n	800d158 <osMessageQueueGetSpace+0x18>
    space = 0U;
 800d152:	2300      	movs	r3, #0
 800d154:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d156:	e033      	b.n	800d1c0 <osMessageQueueGetSpace+0x80>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d158:	f3ef 8305 	mrs	r3, IPSR
 800d15c:	623b      	str	r3, [r7, #32]
  return(result);
 800d15e:	6a3b      	ldr	r3, [r7, #32]
  }
  else if (IS_IRQ()) {
 800d160:	2b00      	cmp	r3, #0
 800d162:	d10f      	bne.n	800d184 <osMessageQueueGetSpace+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d164:	f3ef 8310 	mrs	r3, PRIMASK
 800d168:	61fb      	str	r3, [r7, #28]
  return(result);
 800d16a:	69fb      	ldr	r3, [r7, #28]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d105      	bne.n	800d17c <osMessageQueueGetSpace+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d170:	f3ef 8311 	mrs	r3, BASEPRI
 800d174:	61bb      	str	r3, [r7, #24]
  return(result);
 800d176:	69bb      	ldr	r3, [r7, #24]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d01d      	beq.n	800d1b8 <osMessageQueueGetSpace+0x78>
 800d17c:	4b13      	ldr	r3, [pc, #76]	; (800d1cc <osMessageQueueGetSpace+0x8c>)
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	2b02      	cmp	r3, #2
 800d182:	d119      	bne.n	800d1b8 <osMessageQueueGetSpace+0x78>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d184:	f3ef 8211 	mrs	r2, BASEPRI
 800d188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d18c:	f383 8811 	msr	BASEPRI, r3
 800d190:	f3bf 8f6f 	isb	sy
 800d194:	f3bf 8f4f 	dsb	sy
 800d198:	613a      	str	r2, [r7, #16]
 800d19a:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d19c:	693b      	ldr	r3, [r7, #16]
    isrm = taskENTER_CRITICAL_FROM_ISR();
 800d19e:	627b      	str	r3, [r7, #36]	; 0x24

    /* space = pxQueue->uxLength - pxQueue->uxMessagesWaiting; */
    space = mq->uxDummy4[1] - mq->uxDummy4[0];
 800d1a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d1a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1a8:	1ad3      	subs	r3, r2, r3
 800d1aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ae:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d1b0:	697b      	ldr	r3, [r7, #20]
 800d1b2:	f383 8811 	msr	BASEPRI, r3

    taskEXIT_CRITICAL_FROM_ISR(isrm);
 800d1b6:	e003      	b.n	800d1c0 <osMessageQueueGetSpace+0x80>
  }
  else {
    space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
 800d1b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1ba:	f000 fd16 	bl	800dbea <uxQueueSpacesAvailable>
 800d1be:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return (space);
 800d1c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	3730      	adds	r7, #48	; 0x30
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	bd80      	pop	{r7, pc}
 800d1ca:	bf00      	nop
 800d1cc:	20000638 	.word	0x20000638

0800d1d0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d1d0:	b480      	push	{r7}
 800d1d2:	b085      	sub	sp, #20
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	60f8      	str	r0, [r7, #12]
 800d1d8:	60b9      	str	r1, [r7, #8]
 800d1da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	4a07      	ldr	r2, [pc, #28]	; (800d1fc <vApplicationGetIdleTaskMemory+0x2c>)
 800d1e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d1e2:	68bb      	ldr	r3, [r7, #8]
 800d1e4:	4a06      	ldr	r2, [pc, #24]	; (800d200 <vApplicationGetIdleTaskMemory+0x30>)
 800d1e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	2280      	movs	r2, #128	; 0x80
 800d1ec:	601a      	str	r2, [r3, #0]
}
 800d1ee:	bf00      	nop
 800d1f0:	3714      	adds	r7, #20
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f8:	4770      	bx	lr
 800d1fa:	bf00      	nop
 800d1fc:	2000063c 	.word	0x2000063c
 800d200:	200006a0 	.word	0x200006a0

0800d204 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d204:	b480      	push	{r7}
 800d206:	b085      	sub	sp, #20
 800d208:	af00      	add	r7, sp, #0
 800d20a:	60f8      	str	r0, [r7, #12]
 800d20c:	60b9      	str	r1, [r7, #8]
 800d20e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	4a07      	ldr	r2, [pc, #28]	; (800d230 <vApplicationGetTimerTaskMemory+0x2c>)
 800d214:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d216:	68bb      	ldr	r3, [r7, #8]
 800d218:	4a06      	ldr	r2, [pc, #24]	; (800d234 <vApplicationGetTimerTaskMemory+0x30>)
 800d21a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d222:	601a      	str	r2, [r3, #0]
}
 800d224:	bf00      	nop
 800d226:	3714      	adds	r7, #20
 800d228:	46bd      	mov	sp, r7
 800d22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22e:	4770      	bx	lr
 800d230:	200008a0 	.word	0x200008a0
 800d234:	20000904 	.word	0x20000904

0800d238 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d238:	b480      	push	{r7}
 800d23a:	b083      	sub	sp, #12
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	f103 0208 	add.w	r2, r3, #8
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d250:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	f103 0208 	add.w	r2, r3, #8
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	f103 0208 	add.w	r2, r3, #8
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	2200      	movs	r2, #0
 800d26a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d26c:	bf00      	nop
 800d26e:	370c      	adds	r7, #12
 800d270:	46bd      	mov	sp, r7
 800d272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d276:	4770      	bx	lr

0800d278 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d278:	b480      	push	{r7}
 800d27a:	b083      	sub	sp, #12
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	2200      	movs	r2, #0
 800d284:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d286:	bf00      	nop
 800d288:	370c      	adds	r7, #12
 800d28a:	46bd      	mov	sp, r7
 800d28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d290:	4770      	bx	lr

0800d292 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d292:	b480      	push	{r7}
 800d294:	b085      	sub	sp, #20
 800d296:	af00      	add	r7, sp, #0
 800d298:	6078      	str	r0, [r7, #4]
 800d29a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	685b      	ldr	r3, [r3, #4]
 800d2a0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d2a2:	683b      	ldr	r3, [r7, #0]
 800d2a4:	68fa      	ldr	r2, [r7, #12]
 800d2a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	689a      	ldr	r2, [r3, #8]
 800d2ac:	683b      	ldr	r3, [r7, #0]
 800d2ae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	689b      	ldr	r3, [r3, #8]
 800d2b4:	683a      	ldr	r2, [r7, #0]
 800d2b6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	683a      	ldr	r2, [r7, #0]
 800d2bc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d2be:	683b      	ldr	r3, [r7, #0]
 800d2c0:	687a      	ldr	r2, [r7, #4]
 800d2c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	1c5a      	adds	r2, r3, #1
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	601a      	str	r2, [r3, #0]
}
 800d2ce:	bf00      	nop
 800d2d0:	3714      	adds	r7, #20
 800d2d2:	46bd      	mov	sp, r7
 800d2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d8:	4770      	bx	lr

0800d2da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d2da:	b480      	push	{r7}
 800d2dc:	b085      	sub	sp, #20
 800d2de:	af00      	add	r7, sp, #0
 800d2e0:	6078      	str	r0, [r7, #4]
 800d2e2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d2e4:	683b      	ldr	r3, [r7, #0]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d2ea:	68bb      	ldr	r3, [r7, #8]
 800d2ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d2f0:	d103      	bne.n	800d2fa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	691b      	ldr	r3, [r3, #16]
 800d2f6:	60fb      	str	r3, [r7, #12]
 800d2f8:	e00c      	b.n	800d314 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	3308      	adds	r3, #8
 800d2fe:	60fb      	str	r3, [r7, #12]
 800d300:	e002      	b.n	800d308 <vListInsert+0x2e>
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	685b      	ldr	r3, [r3, #4]
 800d306:	60fb      	str	r3, [r7, #12]
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	685b      	ldr	r3, [r3, #4]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	68ba      	ldr	r2, [r7, #8]
 800d310:	429a      	cmp	r2, r3
 800d312:	d2f6      	bcs.n	800d302 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	685a      	ldr	r2, [r3, #4]
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d31c:	683b      	ldr	r3, [r7, #0]
 800d31e:	685b      	ldr	r3, [r3, #4]
 800d320:	683a      	ldr	r2, [r7, #0]
 800d322:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	68fa      	ldr	r2, [r7, #12]
 800d328:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	683a      	ldr	r2, [r7, #0]
 800d32e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	687a      	ldr	r2, [r7, #4]
 800d334:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	1c5a      	adds	r2, r3, #1
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	601a      	str	r2, [r3, #0]
}
 800d340:	bf00      	nop
 800d342:	3714      	adds	r7, #20
 800d344:	46bd      	mov	sp, r7
 800d346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34a:	4770      	bx	lr

0800d34c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d34c:	b480      	push	{r7}
 800d34e:	b085      	sub	sp, #20
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	691b      	ldr	r3, [r3, #16]
 800d358:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	685b      	ldr	r3, [r3, #4]
 800d35e:	687a      	ldr	r2, [r7, #4]
 800d360:	6892      	ldr	r2, [r2, #8]
 800d362:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	689b      	ldr	r3, [r3, #8]
 800d368:	687a      	ldr	r2, [r7, #4]
 800d36a:	6852      	ldr	r2, [r2, #4]
 800d36c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	685b      	ldr	r3, [r3, #4]
 800d372:	687a      	ldr	r2, [r7, #4]
 800d374:	429a      	cmp	r2, r3
 800d376:	d103      	bne.n	800d380 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	689a      	ldr	r2, [r3, #8]
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	2200      	movs	r2, #0
 800d384:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	1e5a      	subs	r2, r3, #1
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	681b      	ldr	r3, [r3, #0]
}
 800d394:	4618      	mov	r0, r3
 800d396:	3714      	adds	r7, #20
 800d398:	46bd      	mov	sp, r7
 800d39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39e:	4770      	bx	lr

0800d3a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b084      	sub	sp, #16
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
 800d3a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d109      	bne.n	800d3c8 <xQueueGenericReset+0x28>
	__asm volatile
 800d3b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3b8:	f383 8811 	msr	BASEPRI, r3
 800d3bc:	f3bf 8f6f 	isb	sy
 800d3c0:	f3bf 8f4f 	dsb	sy
 800d3c4:	60bb      	str	r3, [r7, #8]
 800d3c6:	e7fe      	b.n	800d3c6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800d3c8:	f002 fac0 	bl	800f94c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	681a      	ldr	r2, [r3, #0]
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3d4:	68f9      	ldr	r1, [r7, #12]
 800d3d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d3d8:	fb01 f303 	mul.w	r3, r1, r3
 800d3dc:	441a      	add	r2, r3
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	2200      	movs	r2, #0
 800d3e6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	681a      	ldr	r2, [r3, #0]
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	681a      	ldr	r2, [r3, #0]
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3f8:	3b01      	subs	r3, #1
 800d3fa:	68f9      	ldr	r1, [r7, #12]
 800d3fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d3fe:	fb01 f303 	mul.w	r3, r1, r3
 800d402:	441a      	add	r2, r3
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	22ff      	movs	r2, #255	; 0xff
 800d40c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	22ff      	movs	r2, #255	; 0xff
 800d414:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d418:	683b      	ldr	r3, [r7, #0]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d114      	bne.n	800d448 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	691b      	ldr	r3, [r3, #16]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d01a      	beq.n	800d45c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	3310      	adds	r3, #16
 800d42a:	4618      	mov	r0, r3
 800d42c:	f001 fa5c 	bl	800e8e8 <xTaskRemoveFromEventList>
 800d430:	4603      	mov	r3, r0
 800d432:	2b00      	cmp	r3, #0
 800d434:	d012      	beq.n	800d45c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d436:	4b0d      	ldr	r3, [pc, #52]	; (800d46c <xQueueGenericReset+0xcc>)
 800d438:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d43c:	601a      	str	r2, [r3, #0]
 800d43e:	f3bf 8f4f 	dsb	sy
 800d442:	f3bf 8f6f 	isb	sy
 800d446:	e009      	b.n	800d45c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	3310      	adds	r3, #16
 800d44c:	4618      	mov	r0, r3
 800d44e:	f7ff fef3 	bl	800d238 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	3324      	adds	r3, #36	; 0x24
 800d456:	4618      	mov	r0, r3
 800d458:	f7ff feee 	bl	800d238 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d45c:	f002 faa4 	bl	800f9a8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d460:	2301      	movs	r3, #1
}
 800d462:	4618      	mov	r0, r3
 800d464:	3710      	adds	r7, #16
 800d466:	46bd      	mov	sp, r7
 800d468:	bd80      	pop	{r7, pc}
 800d46a:	bf00      	nop
 800d46c:	e000ed04 	.word	0xe000ed04

0800d470 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d470:	b580      	push	{r7, lr}
 800d472:	b08e      	sub	sp, #56	; 0x38
 800d474:	af02      	add	r7, sp, #8
 800d476:	60f8      	str	r0, [r7, #12]
 800d478:	60b9      	str	r1, [r7, #8]
 800d47a:	607a      	str	r2, [r7, #4]
 800d47c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d109      	bne.n	800d498 <xQueueGenericCreateStatic+0x28>
 800d484:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d488:	f383 8811 	msr	BASEPRI, r3
 800d48c:	f3bf 8f6f 	isb	sy
 800d490:	f3bf 8f4f 	dsb	sy
 800d494:	62bb      	str	r3, [r7, #40]	; 0x28
 800d496:	e7fe      	b.n	800d496 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d498:	683b      	ldr	r3, [r7, #0]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d109      	bne.n	800d4b2 <xQueueGenericCreateStatic+0x42>
 800d49e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4a2:	f383 8811 	msr	BASEPRI, r3
 800d4a6:	f3bf 8f6f 	isb	sy
 800d4aa:	f3bf 8f4f 	dsb	sy
 800d4ae:	627b      	str	r3, [r7, #36]	; 0x24
 800d4b0:	e7fe      	b.n	800d4b0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d002      	beq.n	800d4be <xQueueGenericCreateStatic+0x4e>
 800d4b8:	68bb      	ldr	r3, [r7, #8]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d001      	beq.n	800d4c2 <xQueueGenericCreateStatic+0x52>
 800d4be:	2301      	movs	r3, #1
 800d4c0:	e000      	b.n	800d4c4 <xQueueGenericCreateStatic+0x54>
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d109      	bne.n	800d4dc <xQueueGenericCreateStatic+0x6c>
 800d4c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4cc:	f383 8811 	msr	BASEPRI, r3
 800d4d0:	f3bf 8f6f 	isb	sy
 800d4d4:	f3bf 8f4f 	dsb	sy
 800d4d8:	623b      	str	r3, [r7, #32]
 800d4da:	e7fe      	b.n	800d4da <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d102      	bne.n	800d4e8 <xQueueGenericCreateStatic+0x78>
 800d4e2:	68bb      	ldr	r3, [r7, #8]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d101      	bne.n	800d4ec <xQueueGenericCreateStatic+0x7c>
 800d4e8:	2301      	movs	r3, #1
 800d4ea:	e000      	b.n	800d4ee <xQueueGenericCreateStatic+0x7e>
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d109      	bne.n	800d506 <xQueueGenericCreateStatic+0x96>
 800d4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4f6:	f383 8811 	msr	BASEPRI, r3
 800d4fa:	f3bf 8f6f 	isb	sy
 800d4fe:	f3bf 8f4f 	dsb	sy
 800d502:	61fb      	str	r3, [r7, #28]
 800d504:	e7fe      	b.n	800d504 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d506:	2350      	movs	r3, #80	; 0x50
 800d508:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d50a:	697b      	ldr	r3, [r7, #20]
 800d50c:	2b50      	cmp	r3, #80	; 0x50
 800d50e:	d009      	beq.n	800d524 <xQueueGenericCreateStatic+0xb4>
 800d510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d514:	f383 8811 	msr	BASEPRI, r3
 800d518:	f3bf 8f6f 	isb	sy
 800d51c:	f3bf 8f4f 	dsb	sy
 800d520:	61bb      	str	r3, [r7, #24]
 800d522:	e7fe      	b.n	800d522 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d524:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d526:	683b      	ldr	r3, [r7, #0]
 800d528:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d52a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d00d      	beq.n	800d54c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d532:	2201      	movs	r2, #1
 800d534:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d538:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d53c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d53e:	9300      	str	r3, [sp, #0]
 800d540:	4613      	mov	r3, r2
 800d542:	687a      	ldr	r2, [r7, #4]
 800d544:	68b9      	ldr	r1, [r7, #8]
 800d546:	68f8      	ldr	r0, [r7, #12]
 800d548:	f000 f844 	bl	800d5d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d54c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d54e:	4618      	mov	r0, r3
 800d550:	3730      	adds	r7, #48	; 0x30
 800d552:	46bd      	mov	sp, r7
 800d554:	bd80      	pop	{r7, pc}

0800d556 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d556:	b580      	push	{r7, lr}
 800d558:	b08a      	sub	sp, #40	; 0x28
 800d55a:	af02      	add	r7, sp, #8
 800d55c:	60f8      	str	r0, [r7, #12]
 800d55e:	60b9      	str	r1, [r7, #8]
 800d560:	4613      	mov	r3, r2
 800d562:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d109      	bne.n	800d57e <xQueueGenericCreate+0x28>
 800d56a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d56e:	f383 8811 	msr	BASEPRI, r3
 800d572:	f3bf 8f6f 	isb	sy
 800d576:	f3bf 8f4f 	dsb	sy
 800d57a:	613b      	str	r3, [r7, #16]
 800d57c:	e7fe      	b.n	800d57c <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800d57e:	68bb      	ldr	r3, [r7, #8]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d102      	bne.n	800d58a <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800d584:	2300      	movs	r3, #0
 800d586:	61fb      	str	r3, [r7, #28]
 800d588:	e004      	b.n	800d594 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	68ba      	ldr	r2, [r7, #8]
 800d58e:	fb02 f303 	mul.w	r3, r2, r3
 800d592:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d594:	69fb      	ldr	r3, [r7, #28]
 800d596:	3350      	adds	r3, #80	; 0x50
 800d598:	4618      	mov	r0, r3
 800d59a:	f002 faf1 	bl	800fb80 <pvPortMalloc>
 800d59e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d5a0:	69bb      	ldr	r3, [r7, #24]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d011      	beq.n	800d5ca <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d5a6:	69bb      	ldr	r3, [r7, #24]
 800d5a8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d5aa:	697b      	ldr	r3, [r7, #20]
 800d5ac:	3350      	adds	r3, #80	; 0x50
 800d5ae:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d5b0:	69bb      	ldr	r3, [r7, #24]
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d5b8:	79fa      	ldrb	r2, [r7, #7]
 800d5ba:	69bb      	ldr	r3, [r7, #24]
 800d5bc:	9300      	str	r3, [sp, #0]
 800d5be:	4613      	mov	r3, r2
 800d5c0:	697a      	ldr	r2, [r7, #20]
 800d5c2:	68b9      	ldr	r1, [r7, #8]
 800d5c4:	68f8      	ldr	r0, [r7, #12]
 800d5c6:	f000 f805 	bl	800d5d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d5ca:	69bb      	ldr	r3, [r7, #24]
	}
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	3720      	adds	r7, #32
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	bd80      	pop	{r7, pc}

0800d5d4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b084      	sub	sp, #16
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	60f8      	str	r0, [r7, #12]
 800d5dc:	60b9      	str	r1, [r7, #8]
 800d5de:	607a      	str	r2, [r7, #4]
 800d5e0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d5e2:	68bb      	ldr	r3, [r7, #8]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d103      	bne.n	800d5f0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d5e8:	69bb      	ldr	r3, [r7, #24]
 800d5ea:	69ba      	ldr	r2, [r7, #24]
 800d5ec:	601a      	str	r2, [r3, #0]
 800d5ee:	e002      	b.n	800d5f6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d5f0:	69bb      	ldr	r3, [r7, #24]
 800d5f2:	687a      	ldr	r2, [r7, #4]
 800d5f4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d5f6:	69bb      	ldr	r3, [r7, #24]
 800d5f8:	68fa      	ldr	r2, [r7, #12]
 800d5fa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d5fc:	69bb      	ldr	r3, [r7, #24]
 800d5fe:	68ba      	ldr	r2, [r7, #8]
 800d600:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d602:	2101      	movs	r1, #1
 800d604:	69b8      	ldr	r0, [r7, #24]
 800d606:	f7ff fecb 	bl	800d3a0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d60a:	69bb      	ldr	r3, [r7, #24]
 800d60c:	78fa      	ldrb	r2, [r7, #3]
 800d60e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d612:	bf00      	nop
 800d614:	3710      	adds	r7, #16
 800d616:	46bd      	mov	sp, r7
 800d618:	bd80      	pop	{r7, pc}
	...

0800d61c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b08e      	sub	sp, #56	; 0x38
 800d620:	af00      	add	r7, sp, #0
 800d622:	60f8      	str	r0, [r7, #12]
 800d624:	60b9      	str	r1, [r7, #8]
 800d626:	607a      	str	r2, [r7, #4]
 800d628:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d62a:	2300      	movs	r3, #0
 800d62c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d634:	2b00      	cmp	r3, #0
 800d636:	d109      	bne.n	800d64c <xQueueGenericSend+0x30>
 800d638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d63c:	f383 8811 	msr	BASEPRI, r3
 800d640:	f3bf 8f6f 	isb	sy
 800d644:	f3bf 8f4f 	dsb	sy
 800d648:	62bb      	str	r3, [r7, #40]	; 0x28
 800d64a:	e7fe      	b.n	800d64a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d64c:	68bb      	ldr	r3, [r7, #8]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d103      	bne.n	800d65a <xQueueGenericSend+0x3e>
 800d652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d656:	2b00      	cmp	r3, #0
 800d658:	d101      	bne.n	800d65e <xQueueGenericSend+0x42>
 800d65a:	2301      	movs	r3, #1
 800d65c:	e000      	b.n	800d660 <xQueueGenericSend+0x44>
 800d65e:	2300      	movs	r3, #0
 800d660:	2b00      	cmp	r3, #0
 800d662:	d109      	bne.n	800d678 <xQueueGenericSend+0x5c>
 800d664:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d668:	f383 8811 	msr	BASEPRI, r3
 800d66c:	f3bf 8f6f 	isb	sy
 800d670:	f3bf 8f4f 	dsb	sy
 800d674:	627b      	str	r3, [r7, #36]	; 0x24
 800d676:	e7fe      	b.n	800d676 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d678:	683b      	ldr	r3, [r7, #0]
 800d67a:	2b02      	cmp	r3, #2
 800d67c:	d103      	bne.n	800d686 <xQueueGenericSend+0x6a>
 800d67e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d682:	2b01      	cmp	r3, #1
 800d684:	d101      	bne.n	800d68a <xQueueGenericSend+0x6e>
 800d686:	2301      	movs	r3, #1
 800d688:	e000      	b.n	800d68c <xQueueGenericSend+0x70>
 800d68a:	2300      	movs	r3, #0
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d109      	bne.n	800d6a4 <xQueueGenericSend+0x88>
 800d690:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d694:	f383 8811 	msr	BASEPRI, r3
 800d698:	f3bf 8f6f 	isb	sy
 800d69c:	f3bf 8f4f 	dsb	sy
 800d6a0:	623b      	str	r3, [r7, #32]
 800d6a2:	e7fe      	b.n	800d6a2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d6a4:	f001 fad6 	bl	800ec54 <xTaskGetSchedulerState>
 800d6a8:	4603      	mov	r3, r0
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d102      	bne.n	800d6b4 <xQueueGenericSend+0x98>
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d101      	bne.n	800d6b8 <xQueueGenericSend+0x9c>
 800d6b4:	2301      	movs	r3, #1
 800d6b6:	e000      	b.n	800d6ba <xQueueGenericSend+0x9e>
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d109      	bne.n	800d6d2 <xQueueGenericSend+0xb6>
 800d6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6c2:	f383 8811 	msr	BASEPRI, r3
 800d6c6:	f3bf 8f6f 	isb	sy
 800d6ca:	f3bf 8f4f 	dsb	sy
 800d6ce:	61fb      	str	r3, [r7, #28]
 800d6d0:	e7fe      	b.n	800d6d0 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d6d2:	f002 f93b 	bl	800f94c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d6d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6de:	429a      	cmp	r2, r3
 800d6e0:	d302      	bcc.n	800d6e8 <xQueueGenericSend+0xcc>
 800d6e2:	683b      	ldr	r3, [r7, #0]
 800d6e4:	2b02      	cmp	r3, #2
 800d6e6:	d129      	bne.n	800d73c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d6e8:	683a      	ldr	r2, [r7, #0]
 800d6ea:	68b9      	ldr	r1, [r7, #8]
 800d6ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d6ee:	f000 fa9e 	bl	800dc2e <prvCopyDataToQueue>
 800d6f2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d6f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d010      	beq.n	800d71e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d6fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6fe:	3324      	adds	r3, #36	; 0x24
 800d700:	4618      	mov	r0, r3
 800d702:	f001 f8f1 	bl	800e8e8 <xTaskRemoveFromEventList>
 800d706:	4603      	mov	r3, r0
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d013      	beq.n	800d734 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d70c:	4b3f      	ldr	r3, [pc, #252]	; (800d80c <xQueueGenericSend+0x1f0>)
 800d70e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d712:	601a      	str	r2, [r3, #0]
 800d714:	f3bf 8f4f 	dsb	sy
 800d718:	f3bf 8f6f 	isb	sy
 800d71c:	e00a      	b.n	800d734 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d71e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d720:	2b00      	cmp	r3, #0
 800d722:	d007      	beq.n	800d734 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d724:	4b39      	ldr	r3, [pc, #228]	; (800d80c <xQueueGenericSend+0x1f0>)
 800d726:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d72a:	601a      	str	r2, [r3, #0]
 800d72c:	f3bf 8f4f 	dsb	sy
 800d730:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d734:	f002 f938 	bl	800f9a8 <vPortExitCritical>
				return pdPASS;
 800d738:	2301      	movs	r3, #1
 800d73a:	e063      	b.n	800d804 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d103      	bne.n	800d74a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d742:	f002 f931 	bl	800f9a8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d746:	2300      	movs	r3, #0
 800d748:	e05c      	b.n	800d804 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d74a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d106      	bne.n	800d75e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d750:	f107 0314 	add.w	r3, r7, #20
 800d754:	4618      	mov	r0, r3
 800d756:	f001 f929 	bl	800e9ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d75a:	2301      	movs	r3, #1
 800d75c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d75e:	f002 f923 	bl	800f9a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d762:	f000 fe89 	bl	800e478 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d766:	f002 f8f1 	bl	800f94c <vPortEnterCritical>
 800d76a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d76c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d770:	b25b      	sxtb	r3, r3
 800d772:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d776:	d103      	bne.n	800d780 <xQueueGenericSend+0x164>
 800d778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d77a:	2200      	movs	r2, #0
 800d77c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d782:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d786:	b25b      	sxtb	r3, r3
 800d788:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d78c:	d103      	bne.n	800d796 <xQueueGenericSend+0x17a>
 800d78e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d790:	2200      	movs	r2, #0
 800d792:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d796:	f002 f907 	bl	800f9a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d79a:	1d3a      	adds	r2, r7, #4
 800d79c:	f107 0314 	add.w	r3, r7, #20
 800d7a0:	4611      	mov	r1, r2
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	f001 f918 	bl	800e9d8 <xTaskCheckForTimeOut>
 800d7a8:	4603      	mov	r3, r0
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d124      	bne.n	800d7f8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d7ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d7b0:	f000 fb35 	bl	800de1e <prvIsQueueFull>
 800d7b4:	4603      	mov	r3, r0
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d018      	beq.n	800d7ec <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d7ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7bc:	3310      	adds	r3, #16
 800d7be:	687a      	ldr	r2, [r7, #4]
 800d7c0:	4611      	mov	r1, r2
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	f001 f842 	bl	800e84c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d7c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d7ca:	f000 fac0 	bl	800dd4e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d7ce:	f000 fe61 	bl	800e494 <xTaskResumeAll>
 800d7d2:	4603      	mov	r3, r0
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	f47f af7c 	bne.w	800d6d2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800d7da:	4b0c      	ldr	r3, [pc, #48]	; (800d80c <xQueueGenericSend+0x1f0>)
 800d7dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7e0:	601a      	str	r2, [r3, #0]
 800d7e2:	f3bf 8f4f 	dsb	sy
 800d7e6:	f3bf 8f6f 	isb	sy
 800d7ea:	e772      	b.n	800d6d2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d7ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d7ee:	f000 faae 	bl	800dd4e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d7f2:	f000 fe4f 	bl	800e494 <xTaskResumeAll>
 800d7f6:	e76c      	b.n	800d6d2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d7f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d7fa:	f000 faa8 	bl	800dd4e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d7fe:	f000 fe49 	bl	800e494 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d802:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d804:	4618      	mov	r0, r3
 800d806:	3738      	adds	r7, #56	; 0x38
 800d808:	46bd      	mov	sp, r7
 800d80a:	bd80      	pop	{r7, pc}
 800d80c:	e000ed04 	.word	0xe000ed04

0800d810 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d810:	b580      	push	{r7, lr}
 800d812:	b08e      	sub	sp, #56	; 0x38
 800d814:	af00      	add	r7, sp, #0
 800d816:	60f8      	str	r0, [r7, #12]
 800d818:	60b9      	str	r1, [r7, #8]
 800d81a:	607a      	str	r2, [r7, #4]
 800d81c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d824:	2b00      	cmp	r3, #0
 800d826:	d109      	bne.n	800d83c <xQueueGenericSendFromISR+0x2c>
 800d828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d82c:	f383 8811 	msr	BASEPRI, r3
 800d830:	f3bf 8f6f 	isb	sy
 800d834:	f3bf 8f4f 	dsb	sy
 800d838:	627b      	str	r3, [r7, #36]	; 0x24
 800d83a:	e7fe      	b.n	800d83a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d83c:	68bb      	ldr	r3, [r7, #8]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d103      	bne.n	800d84a <xQueueGenericSendFromISR+0x3a>
 800d842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d846:	2b00      	cmp	r3, #0
 800d848:	d101      	bne.n	800d84e <xQueueGenericSendFromISR+0x3e>
 800d84a:	2301      	movs	r3, #1
 800d84c:	e000      	b.n	800d850 <xQueueGenericSendFromISR+0x40>
 800d84e:	2300      	movs	r3, #0
 800d850:	2b00      	cmp	r3, #0
 800d852:	d109      	bne.n	800d868 <xQueueGenericSendFromISR+0x58>
 800d854:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d858:	f383 8811 	msr	BASEPRI, r3
 800d85c:	f3bf 8f6f 	isb	sy
 800d860:	f3bf 8f4f 	dsb	sy
 800d864:	623b      	str	r3, [r7, #32]
 800d866:	e7fe      	b.n	800d866 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d868:	683b      	ldr	r3, [r7, #0]
 800d86a:	2b02      	cmp	r3, #2
 800d86c:	d103      	bne.n	800d876 <xQueueGenericSendFromISR+0x66>
 800d86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d872:	2b01      	cmp	r3, #1
 800d874:	d101      	bne.n	800d87a <xQueueGenericSendFromISR+0x6a>
 800d876:	2301      	movs	r3, #1
 800d878:	e000      	b.n	800d87c <xQueueGenericSendFromISR+0x6c>
 800d87a:	2300      	movs	r3, #0
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d109      	bne.n	800d894 <xQueueGenericSendFromISR+0x84>
 800d880:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d884:	f383 8811 	msr	BASEPRI, r3
 800d888:	f3bf 8f6f 	isb	sy
 800d88c:	f3bf 8f4f 	dsb	sy
 800d890:	61fb      	str	r3, [r7, #28]
 800d892:	e7fe      	b.n	800d892 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d894:	f002 f936 	bl	800fb04 <vPortValidateInterruptPriority>
	__asm volatile
 800d898:	f3ef 8211 	mrs	r2, BASEPRI
 800d89c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8a0:	f383 8811 	msr	BASEPRI, r3
 800d8a4:	f3bf 8f6f 	isb	sy
 800d8a8:	f3bf 8f4f 	dsb	sy
 800d8ac:	61ba      	str	r2, [r7, #24]
 800d8ae:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d8b0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d8b2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d8b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d8b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8bc:	429a      	cmp	r2, r3
 800d8be:	d302      	bcc.n	800d8c6 <xQueueGenericSendFromISR+0xb6>
 800d8c0:	683b      	ldr	r3, [r7, #0]
 800d8c2:	2b02      	cmp	r3, #2
 800d8c4:	d12c      	bne.n	800d920 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d8c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d8cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d8d0:	683a      	ldr	r2, [r7, #0]
 800d8d2:	68b9      	ldr	r1, [r7, #8]
 800d8d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d8d6:	f000 f9aa 	bl	800dc2e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d8da:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800d8de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d8e2:	d112      	bne.n	800d90a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d8e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d016      	beq.n	800d91a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d8ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ee:	3324      	adds	r3, #36	; 0x24
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	f000 fff9 	bl	800e8e8 <xTaskRemoveFromEventList>
 800d8f6:	4603      	mov	r3, r0
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d00e      	beq.n	800d91a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d00b      	beq.n	800d91a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	2201      	movs	r2, #1
 800d906:	601a      	str	r2, [r3, #0]
 800d908:	e007      	b.n	800d91a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d90a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d90e:	3301      	adds	r3, #1
 800d910:	b2db      	uxtb	r3, r3
 800d912:	b25a      	sxtb	r2, r3
 800d914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d916:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d91a:	2301      	movs	r3, #1
 800d91c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800d91e:	e001      	b.n	800d924 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d920:	2300      	movs	r3, #0
 800d922:	637b      	str	r3, [r7, #52]	; 0x34
 800d924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d926:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d928:	693b      	ldr	r3, [r7, #16]
 800d92a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d92e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d930:	4618      	mov	r0, r3
 800d932:	3738      	adds	r7, #56	; 0x38
 800d934:	46bd      	mov	sp, r7
 800d936:	bd80      	pop	{r7, pc}

0800d938 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	b08c      	sub	sp, #48	; 0x30
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	60f8      	str	r0, [r7, #12]
 800d940:	60b9      	str	r1, [r7, #8]
 800d942:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d944:	2300      	movs	r3, #0
 800d946:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d94c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d109      	bne.n	800d966 <xQueueReceive+0x2e>
	__asm volatile
 800d952:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d956:	f383 8811 	msr	BASEPRI, r3
 800d95a:	f3bf 8f6f 	isb	sy
 800d95e:	f3bf 8f4f 	dsb	sy
 800d962:	623b      	str	r3, [r7, #32]
 800d964:	e7fe      	b.n	800d964 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d966:	68bb      	ldr	r3, [r7, #8]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d103      	bne.n	800d974 <xQueueReceive+0x3c>
 800d96c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d96e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d970:	2b00      	cmp	r3, #0
 800d972:	d101      	bne.n	800d978 <xQueueReceive+0x40>
 800d974:	2301      	movs	r3, #1
 800d976:	e000      	b.n	800d97a <xQueueReceive+0x42>
 800d978:	2300      	movs	r3, #0
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d109      	bne.n	800d992 <xQueueReceive+0x5a>
 800d97e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d982:	f383 8811 	msr	BASEPRI, r3
 800d986:	f3bf 8f6f 	isb	sy
 800d98a:	f3bf 8f4f 	dsb	sy
 800d98e:	61fb      	str	r3, [r7, #28]
 800d990:	e7fe      	b.n	800d990 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d992:	f001 f95f 	bl	800ec54 <xTaskGetSchedulerState>
 800d996:	4603      	mov	r3, r0
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d102      	bne.n	800d9a2 <xQueueReceive+0x6a>
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d101      	bne.n	800d9a6 <xQueueReceive+0x6e>
 800d9a2:	2301      	movs	r3, #1
 800d9a4:	e000      	b.n	800d9a8 <xQueueReceive+0x70>
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d109      	bne.n	800d9c0 <xQueueReceive+0x88>
 800d9ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9b0:	f383 8811 	msr	BASEPRI, r3
 800d9b4:	f3bf 8f6f 	isb	sy
 800d9b8:	f3bf 8f4f 	dsb	sy
 800d9bc:	61bb      	str	r3, [r7, #24]
 800d9be:	e7fe      	b.n	800d9be <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d9c0:	f001 ffc4 	bl	800f94c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d9c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9c8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d01f      	beq.n	800da10 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d9d0:	68b9      	ldr	r1, [r7, #8]
 800d9d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d9d4:	f000 f995 	bl	800dd02 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9da:	1e5a      	subs	r2, r3, #1
 800d9dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9de:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d9e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9e2:	691b      	ldr	r3, [r3, #16]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d00f      	beq.n	800da08 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9ea:	3310      	adds	r3, #16
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	f000 ff7b 	bl	800e8e8 <xTaskRemoveFromEventList>
 800d9f2:	4603      	mov	r3, r0
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d007      	beq.n	800da08 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d9f8:	4b3c      	ldr	r3, [pc, #240]	; (800daec <xQueueReceive+0x1b4>)
 800d9fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9fe:	601a      	str	r2, [r3, #0]
 800da00:	f3bf 8f4f 	dsb	sy
 800da04:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800da08:	f001 ffce 	bl	800f9a8 <vPortExitCritical>
				return pdPASS;
 800da0c:	2301      	movs	r3, #1
 800da0e:	e069      	b.n	800dae4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d103      	bne.n	800da1e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800da16:	f001 ffc7 	bl	800f9a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800da1a:	2300      	movs	r3, #0
 800da1c:	e062      	b.n	800dae4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800da1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da20:	2b00      	cmp	r3, #0
 800da22:	d106      	bne.n	800da32 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800da24:	f107 0310 	add.w	r3, r7, #16
 800da28:	4618      	mov	r0, r3
 800da2a:	f000 ffbf 	bl	800e9ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800da2e:	2301      	movs	r3, #1
 800da30:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800da32:	f001 ffb9 	bl	800f9a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800da36:	f000 fd1f 	bl	800e478 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800da3a:	f001 ff87 	bl	800f94c <vPortEnterCritical>
 800da3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800da44:	b25b      	sxtb	r3, r3
 800da46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800da4a:	d103      	bne.n	800da54 <xQueueReceive+0x11c>
 800da4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da4e:	2200      	movs	r2, #0
 800da50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800da54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800da5a:	b25b      	sxtb	r3, r3
 800da5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800da60:	d103      	bne.n	800da6a <xQueueReceive+0x132>
 800da62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da64:	2200      	movs	r2, #0
 800da66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800da6a:	f001 ff9d 	bl	800f9a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800da6e:	1d3a      	adds	r2, r7, #4
 800da70:	f107 0310 	add.w	r3, r7, #16
 800da74:	4611      	mov	r1, r2
 800da76:	4618      	mov	r0, r3
 800da78:	f000 ffae 	bl	800e9d8 <xTaskCheckForTimeOut>
 800da7c:	4603      	mov	r3, r0
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d123      	bne.n	800daca <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800da82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da84:	f000 f9b5 	bl	800ddf2 <prvIsQueueEmpty>
 800da88:	4603      	mov	r3, r0
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d017      	beq.n	800dabe <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800da8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da90:	3324      	adds	r3, #36	; 0x24
 800da92:	687a      	ldr	r2, [r7, #4]
 800da94:	4611      	mov	r1, r2
 800da96:	4618      	mov	r0, r3
 800da98:	f000 fed8 	bl	800e84c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800da9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da9e:	f000 f956 	bl	800dd4e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800daa2:	f000 fcf7 	bl	800e494 <xTaskResumeAll>
 800daa6:	4603      	mov	r3, r0
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d189      	bne.n	800d9c0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800daac:	4b0f      	ldr	r3, [pc, #60]	; (800daec <xQueueReceive+0x1b4>)
 800daae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dab2:	601a      	str	r2, [r3, #0]
 800dab4:	f3bf 8f4f 	dsb	sy
 800dab8:	f3bf 8f6f 	isb	sy
 800dabc:	e780      	b.n	800d9c0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800dabe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dac0:	f000 f945 	bl	800dd4e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dac4:	f000 fce6 	bl	800e494 <xTaskResumeAll>
 800dac8:	e77a      	b.n	800d9c0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800daca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dacc:	f000 f93f 	bl	800dd4e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dad0:	f000 fce0 	bl	800e494 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dad4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dad6:	f000 f98c 	bl	800ddf2 <prvIsQueueEmpty>
 800dada:	4603      	mov	r3, r0
 800dadc:	2b00      	cmp	r3, #0
 800dade:	f43f af6f 	beq.w	800d9c0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dae2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dae4:	4618      	mov	r0, r3
 800dae6:	3730      	adds	r7, #48	; 0x30
 800dae8:	46bd      	mov	sp, r7
 800daea:	bd80      	pop	{r7, pc}
 800daec:	e000ed04 	.word	0xe000ed04

0800daf0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b08e      	sub	sp, #56	; 0x38
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	60f8      	str	r0, [r7, #12]
 800daf8:	60b9      	str	r1, [r7, #8]
 800dafa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800db00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db02:	2b00      	cmp	r3, #0
 800db04:	d109      	bne.n	800db1a <xQueueReceiveFromISR+0x2a>
 800db06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db0a:	f383 8811 	msr	BASEPRI, r3
 800db0e:	f3bf 8f6f 	isb	sy
 800db12:	f3bf 8f4f 	dsb	sy
 800db16:	623b      	str	r3, [r7, #32]
 800db18:	e7fe      	b.n	800db18 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800db1a:	68bb      	ldr	r3, [r7, #8]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d103      	bne.n	800db28 <xQueueReceiveFromISR+0x38>
 800db20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db24:	2b00      	cmp	r3, #0
 800db26:	d101      	bne.n	800db2c <xQueueReceiveFromISR+0x3c>
 800db28:	2301      	movs	r3, #1
 800db2a:	e000      	b.n	800db2e <xQueueReceiveFromISR+0x3e>
 800db2c:	2300      	movs	r3, #0
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d109      	bne.n	800db46 <xQueueReceiveFromISR+0x56>
 800db32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db36:	f383 8811 	msr	BASEPRI, r3
 800db3a:	f3bf 8f6f 	isb	sy
 800db3e:	f3bf 8f4f 	dsb	sy
 800db42:	61fb      	str	r3, [r7, #28]
 800db44:	e7fe      	b.n	800db44 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800db46:	f001 ffdd 	bl	800fb04 <vPortValidateInterruptPriority>
	__asm volatile
 800db4a:	f3ef 8211 	mrs	r2, BASEPRI
 800db4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db52:	f383 8811 	msr	BASEPRI, r3
 800db56:	f3bf 8f6f 	isb	sy
 800db5a:	f3bf 8f4f 	dsb	sy
 800db5e:	61ba      	str	r2, [r7, #24]
 800db60:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800db62:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800db64:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800db66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db6a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800db6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d02f      	beq.n	800dbd2 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800db72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800db78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800db7c:	68b9      	ldr	r1, [r7, #8]
 800db7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800db80:	f000 f8bf 	bl	800dd02 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800db84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db86:	1e5a      	subs	r2, r3, #1
 800db88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db8a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800db8c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800db90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800db94:	d112      	bne.n	800dbbc <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800db96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db98:	691b      	ldr	r3, [r3, #16]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d016      	beq.n	800dbcc <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800db9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dba0:	3310      	adds	r3, #16
 800dba2:	4618      	mov	r0, r3
 800dba4:	f000 fea0 	bl	800e8e8 <xTaskRemoveFromEventList>
 800dba8:	4603      	mov	r3, r0
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d00e      	beq.n	800dbcc <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d00b      	beq.n	800dbcc <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	2201      	movs	r2, #1
 800dbb8:	601a      	str	r2, [r3, #0]
 800dbba:	e007      	b.n	800dbcc <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800dbbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dbc0:	3301      	adds	r3, #1
 800dbc2:	b2db      	uxtb	r3, r3
 800dbc4:	b25a      	sxtb	r2, r3
 800dbc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800dbcc:	2301      	movs	r3, #1
 800dbce:	637b      	str	r3, [r7, #52]	; 0x34
 800dbd0:	e001      	b.n	800dbd6 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	637b      	str	r3, [r7, #52]	; 0x34
 800dbd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbd8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800dbda:	693b      	ldr	r3, [r7, #16]
 800dbdc:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dbe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	3738      	adds	r7, #56	; 0x38
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	bd80      	pop	{r7, pc}

0800dbea <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 800dbea:	b580      	push	{r7, lr}
 800dbec:	b086      	sub	sp, #24
 800dbee:	af00      	add	r7, sp, #0
 800dbf0:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800dbf6:	697b      	ldr	r3, [r7, #20]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d109      	bne.n	800dc10 <uxQueueSpacesAvailable+0x26>
	__asm volatile
 800dbfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc00:	f383 8811 	msr	BASEPRI, r3
 800dc04:	f3bf 8f6f 	isb	sy
 800dc08:	f3bf 8f4f 	dsb	sy
 800dc0c:	60fb      	str	r3, [r7, #12]
 800dc0e:	e7fe      	b.n	800dc0e <uxQueueSpacesAvailable+0x24>

	taskENTER_CRITICAL();
 800dc10:	f001 fe9c 	bl	800f94c <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 800dc14:	697b      	ldr	r3, [r7, #20]
 800dc16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dc18:	697b      	ldr	r3, [r7, #20]
 800dc1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc1c:	1ad3      	subs	r3, r2, r3
 800dc1e:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800dc20:	f001 fec2 	bl	800f9a8 <vPortExitCritical>

	return uxReturn;
 800dc24:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800dc26:	4618      	mov	r0, r3
 800dc28:	3718      	adds	r7, #24
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	bd80      	pop	{r7, pc}

0800dc2e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800dc2e:	b580      	push	{r7, lr}
 800dc30:	b086      	sub	sp, #24
 800dc32:	af00      	add	r7, sp, #0
 800dc34:	60f8      	str	r0, [r7, #12]
 800dc36:	60b9      	str	r1, [r7, #8]
 800dc38:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc42:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d10d      	bne.n	800dc68 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d14d      	bne.n	800dcf0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	689b      	ldr	r3, [r3, #8]
 800dc58:	4618      	mov	r0, r3
 800dc5a:	f001 f819 	bl	800ec90 <xTaskPriorityDisinherit>
 800dc5e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	2200      	movs	r2, #0
 800dc64:	609a      	str	r2, [r3, #8]
 800dc66:	e043      	b.n	800dcf0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d119      	bne.n	800dca2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	6858      	ldr	r0, [r3, #4]
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc76:	461a      	mov	r2, r3
 800dc78:	68b9      	ldr	r1, [r7, #8]
 800dc7a:	f00b fa21 	bl	80190c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	685a      	ldr	r2, [r3, #4]
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc86:	441a      	add	r2, r3
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	685a      	ldr	r2, [r3, #4]
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	689b      	ldr	r3, [r3, #8]
 800dc94:	429a      	cmp	r2, r3
 800dc96:	d32b      	bcc.n	800dcf0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	681a      	ldr	r2, [r3, #0]
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	605a      	str	r2, [r3, #4]
 800dca0:	e026      	b.n	800dcf0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	68d8      	ldr	r0, [r3, #12]
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcaa:	461a      	mov	r2, r3
 800dcac:	68b9      	ldr	r1, [r7, #8]
 800dcae:	f00b fa07 	bl	80190c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	68da      	ldr	r2, [r3, #12]
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcba:	425b      	negs	r3, r3
 800dcbc:	441a      	add	r2, r3
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	68da      	ldr	r2, [r3, #12]
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	429a      	cmp	r2, r3
 800dccc:	d207      	bcs.n	800dcde <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	689a      	ldr	r2, [r3, #8]
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcd6:	425b      	negs	r3, r3
 800dcd8:	441a      	add	r2, r3
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	2b02      	cmp	r3, #2
 800dce2:	d105      	bne.n	800dcf0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dce4:	693b      	ldr	r3, [r7, #16]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d002      	beq.n	800dcf0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800dcea:	693b      	ldr	r3, [r7, #16]
 800dcec:	3b01      	subs	r3, #1
 800dcee:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dcf0:	693b      	ldr	r3, [r7, #16]
 800dcf2:	1c5a      	adds	r2, r3, #1
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800dcf8:	697b      	ldr	r3, [r7, #20]
}
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	3718      	adds	r7, #24
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	bd80      	pop	{r7, pc}

0800dd02 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800dd02:	b580      	push	{r7, lr}
 800dd04:	b082      	sub	sp, #8
 800dd06:	af00      	add	r7, sp, #0
 800dd08:	6078      	str	r0, [r7, #4]
 800dd0a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d018      	beq.n	800dd46 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	68da      	ldr	r2, [r3, #12]
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd1c:	441a      	add	r2, r3
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	68da      	ldr	r2, [r3, #12]
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	689b      	ldr	r3, [r3, #8]
 800dd2a:	429a      	cmp	r2, r3
 800dd2c:	d303      	bcc.n	800dd36 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	681a      	ldr	r2, [r3, #0]
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	68d9      	ldr	r1, [r3, #12]
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd3e:	461a      	mov	r2, r3
 800dd40:	6838      	ldr	r0, [r7, #0]
 800dd42:	f00b f9bd 	bl	80190c0 <memcpy>
	}
}
 800dd46:	bf00      	nop
 800dd48:	3708      	adds	r7, #8
 800dd4a:	46bd      	mov	sp, r7
 800dd4c:	bd80      	pop	{r7, pc}

0800dd4e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800dd4e:	b580      	push	{r7, lr}
 800dd50:	b084      	sub	sp, #16
 800dd52:	af00      	add	r7, sp, #0
 800dd54:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800dd56:	f001 fdf9 	bl	800f94c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dd60:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dd62:	e011      	b.n	800dd88 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d012      	beq.n	800dd92 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	3324      	adds	r3, #36	; 0x24
 800dd70:	4618      	mov	r0, r3
 800dd72:	f000 fdb9 	bl	800e8e8 <xTaskRemoveFromEventList>
 800dd76:	4603      	mov	r3, r0
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d001      	beq.n	800dd80 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800dd7c:	f000 fe8c 	bl	800ea98 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800dd80:	7bfb      	ldrb	r3, [r7, #15]
 800dd82:	3b01      	subs	r3, #1
 800dd84:	b2db      	uxtb	r3, r3
 800dd86:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dd88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	dce9      	bgt.n	800dd64 <prvUnlockQueue+0x16>
 800dd90:	e000      	b.n	800dd94 <prvUnlockQueue+0x46>
					break;
 800dd92:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	22ff      	movs	r2, #255	; 0xff
 800dd98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800dd9c:	f001 fe04 	bl	800f9a8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dda0:	f001 fdd4 	bl	800f94c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ddaa:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ddac:	e011      	b.n	800ddd2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	691b      	ldr	r3, [r3, #16]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d012      	beq.n	800dddc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	3310      	adds	r3, #16
 800ddba:	4618      	mov	r0, r3
 800ddbc:	f000 fd94 	bl	800e8e8 <xTaskRemoveFromEventList>
 800ddc0:	4603      	mov	r3, r0
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d001      	beq.n	800ddca <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ddc6:	f000 fe67 	bl	800ea98 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ddca:	7bbb      	ldrb	r3, [r7, #14]
 800ddcc:	3b01      	subs	r3, #1
 800ddce:	b2db      	uxtb	r3, r3
 800ddd0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ddd2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	dce9      	bgt.n	800ddae <prvUnlockQueue+0x60>
 800ddda:	e000      	b.n	800ddde <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800dddc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	22ff      	movs	r2, #255	; 0xff
 800dde2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800dde6:	f001 fddf 	bl	800f9a8 <vPortExitCritical>
}
 800ddea:	bf00      	nop
 800ddec:	3710      	adds	r7, #16
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	bd80      	pop	{r7, pc}

0800ddf2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ddf2:	b580      	push	{r7, lr}
 800ddf4:	b084      	sub	sp, #16
 800ddf6:	af00      	add	r7, sp, #0
 800ddf8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ddfa:	f001 fda7 	bl	800f94c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de02:	2b00      	cmp	r3, #0
 800de04:	d102      	bne.n	800de0c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800de06:	2301      	movs	r3, #1
 800de08:	60fb      	str	r3, [r7, #12]
 800de0a:	e001      	b.n	800de10 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800de0c:	2300      	movs	r3, #0
 800de0e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800de10:	f001 fdca 	bl	800f9a8 <vPortExitCritical>

	return xReturn;
 800de14:	68fb      	ldr	r3, [r7, #12]
}
 800de16:	4618      	mov	r0, r3
 800de18:	3710      	adds	r7, #16
 800de1a:	46bd      	mov	sp, r7
 800de1c:	bd80      	pop	{r7, pc}

0800de1e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800de1e:	b580      	push	{r7, lr}
 800de20:	b084      	sub	sp, #16
 800de22:	af00      	add	r7, sp, #0
 800de24:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800de26:	f001 fd91 	bl	800f94c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de32:	429a      	cmp	r2, r3
 800de34:	d102      	bne.n	800de3c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800de36:	2301      	movs	r3, #1
 800de38:	60fb      	str	r3, [r7, #12]
 800de3a:	e001      	b.n	800de40 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800de3c:	2300      	movs	r3, #0
 800de3e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800de40:	f001 fdb2 	bl	800f9a8 <vPortExitCritical>

	return xReturn;
 800de44:	68fb      	ldr	r3, [r7, #12]
}
 800de46:	4618      	mov	r0, r3
 800de48:	3710      	adds	r7, #16
 800de4a:	46bd      	mov	sp, r7
 800de4c:	bd80      	pop	{r7, pc}
	...

0800de50 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800de50:	b480      	push	{r7}
 800de52:	b085      	sub	sp, #20
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]
 800de58:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800de5a:	2300      	movs	r3, #0
 800de5c:	60fb      	str	r3, [r7, #12]
 800de5e:	e014      	b.n	800de8a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800de60:	4a0e      	ldr	r2, [pc, #56]	; (800de9c <vQueueAddToRegistry+0x4c>)
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d10b      	bne.n	800de84 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800de6c:	490b      	ldr	r1, [pc, #44]	; (800de9c <vQueueAddToRegistry+0x4c>)
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	683a      	ldr	r2, [r7, #0]
 800de72:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800de76:	4a09      	ldr	r2, [pc, #36]	; (800de9c <vQueueAddToRegistry+0x4c>)
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	00db      	lsls	r3, r3, #3
 800de7c:	4413      	add	r3, r2
 800de7e:	687a      	ldr	r2, [r7, #4]
 800de80:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800de82:	e005      	b.n	800de90 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	3301      	adds	r3, #1
 800de88:	60fb      	str	r3, [r7, #12]
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	2b07      	cmp	r3, #7
 800de8e:	d9e7      	bls.n	800de60 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800de90:	bf00      	nop
 800de92:	3714      	adds	r7, #20
 800de94:	46bd      	mov	sp, r7
 800de96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de9a:	4770      	bx	lr
 800de9c:	20006fbc 	.word	0x20006fbc

0800dea0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b086      	sub	sp, #24
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	60f8      	str	r0, [r7, #12]
 800dea8:	60b9      	str	r1, [r7, #8]
 800deaa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800deb0:	f001 fd4c 	bl	800f94c <vPortEnterCritical>
 800deb4:	697b      	ldr	r3, [r7, #20]
 800deb6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800deba:	b25b      	sxtb	r3, r3
 800debc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dec0:	d103      	bne.n	800deca <vQueueWaitForMessageRestricted+0x2a>
 800dec2:	697b      	ldr	r3, [r7, #20]
 800dec4:	2200      	movs	r2, #0
 800dec6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800deca:	697b      	ldr	r3, [r7, #20]
 800decc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ded0:	b25b      	sxtb	r3, r3
 800ded2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ded6:	d103      	bne.n	800dee0 <vQueueWaitForMessageRestricted+0x40>
 800ded8:	697b      	ldr	r3, [r7, #20]
 800deda:	2200      	movs	r2, #0
 800dedc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dee0:	f001 fd62 	bl	800f9a8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800dee4:	697b      	ldr	r3, [r7, #20]
 800dee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d106      	bne.n	800defa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800deec:	697b      	ldr	r3, [r7, #20]
 800deee:	3324      	adds	r3, #36	; 0x24
 800def0:	687a      	ldr	r2, [r7, #4]
 800def2:	68b9      	ldr	r1, [r7, #8]
 800def4:	4618      	mov	r0, r3
 800def6:	f000 fccd 	bl	800e894 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800defa:	6978      	ldr	r0, [r7, #20]
 800defc:	f7ff ff27 	bl	800dd4e <prvUnlockQueue>
	}
 800df00:	bf00      	nop
 800df02:	3718      	adds	r7, #24
 800df04:	46bd      	mov	sp, r7
 800df06:	bd80      	pop	{r7, pc}

0800df08 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800df08:	b580      	push	{r7, lr}
 800df0a:	b08e      	sub	sp, #56	; 0x38
 800df0c:	af04      	add	r7, sp, #16
 800df0e:	60f8      	str	r0, [r7, #12]
 800df10:	60b9      	str	r1, [r7, #8]
 800df12:	607a      	str	r2, [r7, #4]
 800df14:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800df16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d109      	bne.n	800df30 <xTaskCreateStatic+0x28>
 800df1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df20:	f383 8811 	msr	BASEPRI, r3
 800df24:	f3bf 8f6f 	isb	sy
 800df28:	f3bf 8f4f 	dsb	sy
 800df2c:	623b      	str	r3, [r7, #32]
 800df2e:	e7fe      	b.n	800df2e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800df30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df32:	2b00      	cmp	r3, #0
 800df34:	d109      	bne.n	800df4a <xTaskCreateStatic+0x42>
 800df36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df3a:	f383 8811 	msr	BASEPRI, r3
 800df3e:	f3bf 8f6f 	isb	sy
 800df42:	f3bf 8f4f 	dsb	sy
 800df46:	61fb      	str	r3, [r7, #28]
 800df48:	e7fe      	b.n	800df48 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800df4a:	2364      	movs	r3, #100	; 0x64
 800df4c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800df4e:	693b      	ldr	r3, [r7, #16]
 800df50:	2b64      	cmp	r3, #100	; 0x64
 800df52:	d009      	beq.n	800df68 <xTaskCreateStatic+0x60>
 800df54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df58:	f383 8811 	msr	BASEPRI, r3
 800df5c:	f3bf 8f6f 	isb	sy
 800df60:	f3bf 8f4f 	dsb	sy
 800df64:	61bb      	str	r3, [r7, #24]
 800df66:	e7fe      	b.n	800df66 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800df68:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800df6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d01e      	beq.n	800dfae <xTaskCreateStatic+0xa6>
 800df70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df72:	2b00      	cmp	r3, #0
 800df74:	d01b      	beq.n	800dfae <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800df76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df78:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800df7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800df7e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800df80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df82:	2202      	movs	r2, #2
 800df84:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800df88:	2300      	movs	r3, #0
 800df8a:	9303      	str	r3, [sp, #12]
 800df8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df8e:	9302      	str	r3, [sp, #8]
 800df90:	f107 0314 	add.w	r3, r7, #20
 800df94:	9301      	str	r3, [sp, #4]
 800df96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df98:	9300      	str	r3, [sp, #0]
 800df9a:	683b      	ldr	r3, [r7, #0]
 800df9c:	687a      	ldr	r2, [r7, #4]
 800df9e:	68b9      	ldr	r1, [r7, #8]
 800dfa0:	68f8      	ldr	r0, [r7, #12]
 800dfa2:	f000 f850 	bl	800e046 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dfa6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dfa8:	f000 f8e2 	bl	800e170 <prvAddNewTaskToReadyList>
 800dfac:	e001      	b.n	800dfb2 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800dfae:	2300      	movs	r3, #0
 800dfb0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800dfb2:	697b      	ldr	r3, [r7, #20]
	}
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	3728      	adds	r7, #40	; 0x28
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	bd80      	pop	{r7, pc}

0800dfbc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	b08c      	sub	sp, #48	; 0x30
 800dfc0:	af04      	add	r7, sp, #16
 800dfc2:	60f8      	str	r0, [r7, #12]
 800dfc4:	60b9      	str	r1, [r7, #8]
 800dfc6:	603b      	str	r3, [r7, #0]
 800dfc8:	4613      	mov	r3, r2
 800dfca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800dfcc:	88fb      	ldrh	r3, [r7, #6]
 800dfce:	009b      	lsls	r3, r3, #2
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	f001 fdd5 	bl	800fb80 <pvPortMalloc>
 800dfd6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800dfd8:	697b      	ldr	r3, [r7, #20]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d00e      	beq.n	800dffc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800dfde:	2064      	movs	r0, #100	; 0x64
 800dfe0:	f001 fdce 	bl	800fb80 <pvPortMalloc>
 800dfe4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800dfe6:	69fb      	ldr	r3, [r7, #28]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d003      	beq.n	800dff4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800dfec:	69fb      	ldr	r3, [r7, #28]
 800dfee:	697a      	ldr	r2, [r7, #20]
 800dff0:	631a      	str	r2, [r3, #48]	; 0x30
 800dff2:	e005      	b.n	800e000 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800dff4:	6978      	ldr	r0, [r7, #20]
 800dff6:	f001 fe85 	bl	800fd04 <vPortFree>
 800dffa:	e001      	b.n	800e000 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800dffc:	2300      	movs	r3, #0
 800dffe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e000:	69fb      	ldr	r3, [r7, #28]
 800e002:	2b00      	cmp	r3, #0
 800e004:	d017      	beq.n	800e036 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e006:	69fb      	ldr	r3, [r7, #28]
 800e008:	2200      	movs	r2, #0
 800e00a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e00e:	88fa      	ldrh	r2, [r7, #6]
 800e010:	2300      	movs	r3, #0
 800e012:	9303      	str	r3, [sp, #12]
 800e014:	69fb      	ldr	r3, [r7, #28]
 800e016:	9302      	str	r3, [sp, #8]
 800e018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e01a:	9301      	str	r3, [sp, #4]
 800e01c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e01e:	9300      	str	r3, [sp, #0]
 800e020:	683b      	ldr	r3, [r7, #0]
 800e022:	68b9      	ldr	r1, [r7, #8]
 800e024:	68f8      	ldr	r0, [r7, #12]
 800e026:	f000 f80e 	bl	800e046 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e02a:	69f8      	ldr	r0, [r7, #28]
 800e02c:	f000 f8a0 	bl	800e170 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e030:	2301      	movs	r3, #1
 800e032:	61bb      	str	r3, [r7, #24]
 800e034:	e002      	b.n	800e03c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e036:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e03a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e03c:	69bb      	ldr	r3, [r7, #24]
	}
 800e03e:	4618      	mov	r0, r3
 800e040:	3720      	adds	r7, #32
 800e042:	46bd      	mov	sp, r7
 800e044:	bd80      	pop	{r7, pc}

0800e046 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e046:	b580      	push	{r7, lr}
 800e048:	b088      	sub	sp, #32
 800e04a:	af00      	add	r7, sp, #0
 800e04c:	60f8      	str	r0, [r7, #12]
 800e04e:	60b9      	str	r1, [r7, #8]
 800e050:	607a      	str	r2, [r7, #4]
 800e052:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e056:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	009b      	lsls	r3, r3, #2
 800e05c:	461a      	mov	r2, r3
 800e05e:	21a5      	movs	r1, #165	; 0xa5
 800e060:	f00b f839 	bl	80190d6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e066:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e06e:	3b01      	subs	r3, #1
 800e070:	009b      	lsls	r3, r3, #2
 800e072:	4413      	add	r3, r2
 800e074:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e076:	69bb      	ldr	r3, [r7, #24]
 800e078:	f023 0307 	bic.w	r3, r3, #7
 800e07c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e07e:	69bb      	ldr	r3, [r7, #24]
 800e080:	f003 0307 	and.w	r3, r3, #7
 800e084:	2b00      	cmp	r3, #0
 800e086:	d009      	beq.n	800e09c <prvInitialiseNewTask+0x56>
 800e088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e08c:	f383 8811 	msr	BASEPRI, r3
 800e090:	f3bf 8f6f 	isb	sy
 800e094:	f3bf 8f4f 	dsb	sy
 800e098:	617b      	str	r3, [r7, #20]
 800e09a:	e7fe      	b.n	800e09a <prvInitialiseNewTask+0x54>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800e09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e09e:	69ba      	ldr	r2, [r7, #24]
 800e0a0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e0a2:	68bb      	ldr	r3, [r7, #8]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d01f      	beq.n	800e0e8 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	61fb      	str	r3, [r7, #28]
 800e0ac:	e012      	b.n	800e0d4 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e0ae:	68ba      	ldr	r2, [r7, #8]
 800e0b0:	69fb      	ldr	r3, [r7, #28]
 800e0b2:	4413      	add	r3, r2
 800e0b4:	7819      	ldrb	r1, [r3, #0]
 800e0b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e0b8:	69fb      	ldr	r3, [r7, #28]
 800e0ba:	4413      	add	r3, r2
 800e0bc:	3334      	adds	r3, #52	; 0x34
 800e0be:	460a      	mov	r2, r1
 800e0c0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e0c2:	68ba      	ldr	r2, [r7, #8]
 800e0c4:	69fb      	ldr	r3, [r7, #28]
 800e0c6:	4413      	add	r3, r2
 800e0c8:	781b      	ldrb	r3, [r3, #0]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d006      	beq.n	800e0dc <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e0ce:	69fb      	ldr	r3, [r7, #28]
 800e0d0:	3301      	adds	r3, #1
 800e0d2:	61fb      	str	r3, [r7, #28]
 800e0d4:	69fb      	ldr	r3, [r7, #28]
 800e0d6:	2b0f      	cmp	r3, #15
 800e0d8:	d9e9      	bls.n	800e0ae <prvInitialiseNewTask+0x68>
 800e0da:	e000      	b.n	800e0de <prvInitialiseNewTask+0x98>
			{
				break;
 800e0dc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e0de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0e0:	2200      	movs	r2, #0
 800e0e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e0e6:	e003      	b.n	800e0f0 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0ea:	2200      	movs	r2, #0
 800e0ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0f2:	2b37      	cmp	r3, #55	; 0x37
 800e0f4:	d901      	bls.n	800e0fa <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e0f6:	2337      	movs	r3, #55	; 0x37
 800e0f8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e0fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e0fe:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e102:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e104:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800e106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e108:	2200      	movs	r2, #0
 800e10a:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e10c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e10e:	3304      	adds	r3, #4
 800e110:	4618      	mov	r0, r3
 800e112:	f7ff f8b1 	bl	800d278 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e118:	3318      	adds	r3, #24
 800e11a:	4618      	mov	r0, r3
 800e11c:	f7ff f8ac 	bl	800d278 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e122:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e124:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e128:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e12e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e132:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e134:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800e136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e138:	2200      	movs	r2, #0
 800e13a:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e13c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e13e:	2200      	movs	r2, #0
 800e140:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e144:	2200      	movs	r2, #0
 800e146:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e14a:	683a      	ldr	r2, [r7, #0]
 800e14c:	68f9      	ldr	r1, [r7, #12]
 800e14e:	69b8      	ldr	r0, [r7, #24]
 800e150:	f001 fad6 	bl	800f700 <pxPortInitialiseStack>
 800e154:	4602      	mov	r2, r0
 800e156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e158:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e15a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d002      	beq.n	800e166 <prvInitialiseNewTask+0x120>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e162:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e164:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e166:	bf00      	nop
 800e168:	3720      	adds	r7, #32
 800e16a:	46bd      	mov	sp, r7
 800e16c:	bd80      	pop	{r7, pc}
	...

0800e170 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e170:	b580      	push	{r7, lr}
 800e172:	b082      	sub	sp, #8
 800e174:	af00      	add	r7, sp, #0
 800e176:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e178:	f001 fbe8 	bl	800f94c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e17c:	4b2d      	ldr	r3, [pc, #180]	; (800e234 <prvAddNewTaskToReadyList+0xc4>)
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	3301      	adds	r3, #1
 800e182:	4a2c      	ldr	r2, [pc, #176]	; (800e234 <prvAddNewTaskToReadyList+0xc4>)
 800e184:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e186:	4b2c      	ldr	r3, [pc, #176]	; (800e238 <prvAddNewTaskToReadyList+0xc8>)
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d109      	bne.n	800e1a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e18e:	4a2a      	ldr	r2, [pc, #168]	; (800e238 <prvAddNewTaskToReadyList+0xc8>)
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e194:	4b27      	ldr	r3, [pc, #156]	; (800e234 <prvAddNewTaskToReadyList+0xc4>)
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	2b01      	cmp	r3, #1
 800e19a:	d110      	bne.n	800e1be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e19c:	f000 fca0 	bl	800eae0 <prvInitialiseTaskLists>
 800e1a0:	e00d      	b.n	800e1be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e1a2:	4b26      	ldr	r3, [pc, #152]	; (800e23c <prvAddNewTaskToReadyList+0xcc>)
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d109      	bne.n	800e1be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e1aa:	4b23      	ldr	r3, [pc, #140]	; (800e238 <prvAddNewTaskToReadyList+0xc8>)
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1b4:	429a      	cmp	r2, r3
 800e1b6:	d802      	bhi.n	800e1be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e1b8:	4a1f      	ldr	r2, [pc, #124]	; (800e238 <prvAddNewTaskToReadyList+0xc8>)
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e1be:	4b20      	ldr	r3, [pc, #128]	; (800e240 <prvAddNewTaskToReadyList+0xd0>)
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	3301      	adds	r3, #1
 800e1c4:	4a1e      	ldr	r2, [pc, #120]	; (800e240 <prvAddNewTaskToReadyList+0xd0>)
 800e1c6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e1c8:	4b1d      	ldr	r3, [pc, #116]	; (800e240 <prvAddNewTaskToReadyList+0xd0>)
 800e1ca:	681a      	ldr	r2, [r3, #0]
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1d4:	4b1b      	ldr	r3, [pc, #108]	; (800e244 <prvAddNewTaskToReadyList+0xd4>)
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	429a      	cmp	r2, r3
 800e1da:	d903      	bls.n	800e1e4 <prvAddNewTaskToReadyList+0x74>
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1e0:	4a18      	ldr	r2, [pc, #96]	; (800e244 <prvAddNewTaskToReadyList+0xd4>)
 800e1e2:	6013      	str	r3, [r2, #0]
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1e8:	4613      	mov	r3, r2
 800e1ea:	009b      	lsls	r3, r3, #2
 800e1ec:	4413      	add	r3, r2
 800e1ee:	009b      	lsls	r3, r3, #2
 800e1f0:	4a15      	ldr	r2, [pc, #84]	; (800e248 <prvAddNewTaskToReadyList+0xd8>)
 800e1f2:	441a      	add	r2, r3
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	3304      	adds	r3, #4
 800e1f8:	4619      	mov	r1, r3
 800e1fa:	4610      	mov	r0, r2
 800e1fc:	f7ff f849 	bl	800d292 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e200:	f001 fbd2 	bl	800f9a8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e204:	4b0d      	ldr	r3, [pc, #52]	; (800e23c <prvAddNewTaskToReadyList+0xcc>)
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d00e      	beq.n	800e22a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e20c:	4b0a      	ldr	r3, [pc, #40]	; (800e238 <prvAddNewTaskToReadyList+0xc8>)
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e216:	429a      	cmp	r2, r3
 800e218:	d207      	bcs.n	800e22a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e21a:	4b0c      	ldr	r3, [pc, #48]	; (800e24c <prvAddNewTaskToReadyList+0xdc>)
 800e21c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e220:	601a      	str	r2, [r3, #0]
 800e222:	f3bf 8f4f 	dsb	sy
 800e226:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e22a:	bf00      	nop
 800e22c:	3708      	adds	r7, #8
 800e22e:	46bd      	mov	sp, r7
 800e230:	bd80      	pop	{r7, pc}
 800e232:	bf00      	nop
 800e234:	200011d8 	.word	0x200011d8
 800e238:	20000d04 	.word	0x20000d04
 800e23c:	200011e4 	.word	0x200011e4
 800e240:	200011f4 	.word	0x200011f4
 800e244:	200011e0 	.word	0x200011e0
 800e248:	20000d08 	.word	0x20000d08
 800e24c:	e000ed04 	.word	0xe000ed04

0800e250 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800e250:	b580      	push	{r7, lr}
 800e252:	b08a      	sub	sp, #40	; 0x28
 800e254:	af00      	add	r7, sp, #0
 800e256:	6078      	str	r0, [r7, #4]
 800e258:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800e25a:	2300      	movs	r3, #0
 800e25c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	2b00      	cmp	r3, #0
 800e262:	d109      	bne.n	800e278 <vTaskDelayUntil+0x28>
 800e264:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e268:	f383 8811 	msr	BASEPRI, r3
 800e26c:	f3bf 8f6f 	isb	sy
 800e270:	f3bf 8f4f 	dsb	sy
 800e274:	617b      	str	r3, [r7, #20]
 800e276:	e7fe      	b.n	800e276 <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 800e278:	683b      	ldr	r3, [r7, #0]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d109      	bne.n	800e292 <vTaskDelayUntil+0x42>
 800e27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e282:	f383 8811 	msr	BASEPRI, r3
 800e286:	f3bf 8f6f 	isb	sy
 800e28a:	f3bf 8f4f 	dsb	sy
 800e28e:	613b      	str	r3, [r7, #16]
 800e290:	e7fe      	b.n	800e290 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 800e292:	4b29      	ldr	r3, [pc, #164]	; (800e338 <vTaskDelayUntil+0xe8>)
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	2b00      	cmp	r3, #0
 800e298:	d009      	beq.n	800e2ae <vTaskDelayUntil+0x5e>
 800e29a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e29e:	f383 8811 	msr	BASEPRI, r3
 800e2a2:	f3bf 8f6f 	isb	sy
 800e2a6:	f3bf 8f4f 	dsb	sy
 800e2aa:	60fb      	str	r3, [r7, #12]
 800e2ac:	e7fe      	b.n	800e2ac <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 800e2ae:	f000 f8e3 	bl	800e478 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800e2b2:	4b22      	ldr	r3, [pc, #136]	; (800e33c <vTaskDelayUntil+0xec>)
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	683a      	ldr	r2, [r7, #0]
 800e2be:	4413      	add	r3, r2
 800e2c0:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	6a3a      	ldr	r2, [r7, #32]
 800e2c8:	429a      	cmp	r2, r3
 800e2ca:	d20b      	bcs.n	800e2e4 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	69fa      	ldr	r2, [r7, #28]
 800e2d2:	429a      	cmp	r2, r3
 800e2d4:	d211      	bcs.n	800e2fa <vTaskDelayUntil+0xaa>
 800e2d6:	69fa      	ldr	r2, [r7, #28]
 800e2d8:	6a3b      	ldr	r3, [r7, #32]
 800e2da:	429a      	cmp	r2, r3
 800e2dc:	d90d      	bls.n	800e2fa <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800e2de:	2301      	movs	r3, #1
 800e2e0:	627b      	str	r3, [r7, #36]	; 0x24
 800e2e2:	e00a      	b.n	800e2fa <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	69fa      	ldr	r2, [r7, #28]
 800e2ea:	429a      	cmp	r2, r3
 800e2ec:	d303      	bcc.n	800e2f6 <vTaskDelayUntil+0xa6>
 800e2ee:	69fa      	ldr	r2, [r7, #28]
 800e2f0:	6a3b      	ldr	r3, [r7, #32]
 800e2f2:	429a      	cmp	r2, r3
 800e2f4:	d901      	bls.n	800e2fa <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800e2f6:	2301      	movs	r3, #1
 800e2f8:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	69fa      	ldr	r2, [r7, #28]
 800e2fe:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800e300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e302:	2b00      	cmp	r3, #0
 800e304:	d006      	beq.n	800e314 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800e306:	69fa      	ldr	r2, [r7, #28]
 800e308:	6a3b      	ldr	r3, [r7, #32]
 800e30a:	1ad3      	subs	r3, r2, r3
 800e30c:	2100      	movs	r1, #0
 800e30e:	4618      	mov	r0, r3
 800e310:	f000 fe5c 	bl	800efcc <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800e314:	f000 f8be 	bl	800e494 <xTaskResumeAll>
 800e318:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e31a:	69bb      	ldr	r3, [r7, #24]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d107      	bne.n	800e330 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 800e320:	4b07      	ldr	r3, [pc, #28]	; (800e340 <vTaskDelayUntil+0xf0>)
 800e322:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e326:	601a      	str	r2, [r3, #0]
 800e328:	f3bf 8f4f 	dsb	sy
 800e32c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e330:	bf00      	nop
 800e332:	3728      	adds	r7, #40	; 0x28
 800e334:	46bd      	mov	sp, r7
 800e336:	bd80      	pop	{r7, pc}
 800e338:	20001200 	.word	0x20001200
 800e33c:	200011dc 	.word	0x200011dc
 800e340:	e000ed04 	.word	0xe000ed04

0800e344 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e344:	b580      	push	{r7, lr}
 800e346:	b084      	sub	sp, #16
 800e348:	af00      	add	r7, sp, #0
 800e34a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e34c:	2300      	movs	r3, #0
 800e34e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	2b00      	cmp	r3, #0
 800e354:	d016      	beq.n	800e384 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e356:	4b13      	ldr	r3, [pc, #76]	; (800e3a4 <vTaskDelay+0x60>)
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d009      	beq.n	800e372 <vTaskDelay+0x2e>
 800e35e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e362:	f383 8811 	msr	BASEPRI, r3
 800e366:	f3bf 8f6f 	isb	sy
 800e36a:	f3bf 8f4f 	dsb	sy
 800e36e:	60bb      	str	r3, [r7, #8]
 800e370:	e7fe      	b.n	800e370 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800e372:	f000 f881 	bl	800e478 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e376:	2100      	movs	r1, #0
 800e378:	6878      	ldr	r0, [r7, #4]
 800e37a:	f000 fe27 	bl	800efcc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e37e:	f000 f889 	bl	800e494 <xTaskResumeAll>
 800e382:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	2b00      	cmp	r3, #0
 800e388:	d107      	bne.n	800e39a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800e38a:	4b07      	ldr	r3, [pc, #28]	; (800e3a8 <vTaskDelay+0x64>)
 800e38c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e390:	601a      	str	r2, [r3, #0]
 800e392:	f3bf 8f4f 	dsb	sy
 800e396:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e39a:	bf00      	nop
 800e39c:	3710      	adds	r7, #16
 800e39e:	46bd      	mov	sp, r7
 800e3a0:	bd80      	pop	{r7, pc}
 800e3a2:	bf00      	nop
 800e3a4:	20001200 	.word	0x20001200
 800e3a8:	e000ed04 	.word	0xe000ed04

0800e3ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	b08a      	sub	sp, #40	; 0x28
 800e3b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e3ba:	463a      	mov	r2, r7
 800e3bc:	1d39      	adds	r1, r7, #4
 800e3be:	f107 0308 	add.w	r3, r7, #8
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	f7fe ff04 	bl	800d1d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e3c8:	6839      	ldr	r1, [r7, #0]
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	68ba      	ldr	r2, [r7, #8]
 800e3ce:	9202      	str	r2, [sp, #8]
 800e3d0:	9301      	str	r3, [sp, #4]
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	9300      	str	r3, [sp, #0]
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	460a      	mov	r2, r1
 800e3da:	4921      	ldr	r1, [pc, #132]	; (800e460 <vTaskStartScheduler+0xb4>)
 800e3dc:	4821      	ldr	r0, [pc, #132]	; (800e464 <vTaskStartScheduler+0xb8>)
 800e3de:	f7ff fd93 	bl	800df08 <xTaskCreateStatic>
 800e3e2:	4602      	mov	r2, r0
 800e3e4:	4b20      	ldr	r3, [pc, #128]	; (800e468 <vTaskStartScheduler+0xbc>)
 800e3e6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e3e8:	4b1f      	ldr	r3, [pc, #124]	; (800e468 <vTaskStartScheduler+0xbc>)
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d002      	beq.n	800e3f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e3f0:	2301      	movs	r3, #1
 800e3f2:	617b      	str	r3, [r7, #20]
 800e3f4:	e001      	b.n	800e3fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e3fa:	697b      	ldr	r3, [r7, #20]
 800e3fc:	2b01      	cmp	r3, #1
 800e3fe:	d102      	bne.n	800e406 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e400:	f000 fe38 	bl	800f074 <xTimerCreateTimerTask>
 800e404:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e406:	697b      	ldr	r3, [r7, #20]
 800e408:	2b01      	cmp	r3, #1
 800e40a:	d117      	bne.n	800e43c <vTaskStartScheduler+0x90>
 800e40c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e410:	f383 8811 	msr	BASEPRI, r3
 800e414:	f3bf 8f6f 	isb	sy
 800e418:	f3bf 8f4f 	dsb	sy
 800e41c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e41e:	4b13      	ldr	r3, [pc, #76]	; (800e46c <vTaskStartScheduler+0xc0>)
 800e420:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e424:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e426:	4b12      	ldr	r3, [pc, #72]	; (800e470 <vTaskStartScheduler+0xc4>)
 800e428:	2201      	movs	r2, #1
 800e42a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e42c:	4b11      	ldr	r3, [pc, #68]	; (800e474 <vTaskStartScheduler+0xc8>)
 800e42e:	2200      	movs	r2, #0
 800e430:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800e432:	f7f2 f85f 	bl	80004f4 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e436:	f001 f9eb 	bl	800f810 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e43a:	e00d      	b.n	800e458 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e43c:	697b      	ldr	r3, [r7, #20]
 800e43e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e442:	d109      	bne.n	800e458 <vTaskStartScheduler+0xac>
 800e444:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e448:	f383 8811 	msr	BASEPRI, r3
 800e44c:	f3bf 8f6f 	isb	sy
 800e450:	f3bf 8f4f 	dsb	sy
 800e454:	60fb      	str	r3, [r7, #12]
 800e456:	e7fe      	b.n	800e456 <vTaskStartScheduler+0xaa>
}
 800e458:	bf00      	nop
 800e45a:	3718      	adds	r7, #24
 800e45c:	46bd      	mov	sp, r7
 800e45e:	bd80      	pop	{r7, pc}
 800e460:	0801936c 	.word	0x0801936c
 800e464:	0800eab1 	.word	0x0800eab1
 800e468:	200011fc 	.word	0x200011fc
 800e46c:	200011f8 	.word	0x200011f8
 800e470:	200011e4 	.word	0x200011e4
 800e474:	200011dc 	.word	0x200011dc

0800e478 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e478:	b480      	push	{r7}
 800e47a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800e47c:	4b04      	ldr	r3, [pc, #16]	; (800e490 <vTaskSuspendAll+0x18>)
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	3301      	adds	r3, #1
 800e482:	4a03      	ldr	r2, [pc, #12]	; (800e490 <vTaskSuspendAll+0x18>)
 800e484:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800e486:	bf00      	nop
 800e488:	46bd      	mov	sp, r7
 800e48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e48e:	4770      	bx	lr
 800e490:	20001200 	.word	0x20001200

0800e494 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e494:	b580      	push	{r7, lr}
 800e496:	b084      	sub	sp, #16
 800e498:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e49a:	2300      	movs	r3, #0
 800e49c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e49e:	2300      	movs	r3, #0
 800e4a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e4a2:	4b41      	ldr	r3, [pc, #260]	; (800e5a8 <xTaskResumeAll+0x114>)
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d109      	bne.n	800e4be <xTaskResumeAll+0x2a>
 800e4aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4ae:	f383 8811 	msr	BASEPRI, r3
 800e4b2:	f3bf 8f6f 	isb	sy
 800e4b6:	f3bf 8f4f 	dsb	sy
 800e4ba:	603b      	str	r3, [r7, #0]
 800e4bc:	e7fe      	b.n	800e4bc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e4be:	f001 fa45 	bl	800f94c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e4c2:	4b39      	ldr	r3, [pc, #228]	; (800e5a8 <xTaskResumeAll+0x114>)
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	3b01      	subs	r3, #1
 800e4c8:	4a37      	ldr	r2, [pc, #220]	; (800e5a8 <xTaskResumeAll+0x114>)
 800e4ca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e4cc:	4b36      	ldr	r3, [pc, #216]	; (800e5a8 <xTaskResumeAll+0x114>)
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d162      	bne.n	800e59a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e4d4:	4b35      	ldr	r3, [pc, #212]	; (800e5ac <xTaskResumeAll+0x118>)
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d05e      	beq.n	800e59a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e4dc:	e02f      	b.n	800e53e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4de:	4b34      	ldr	r3, [pc, #208]	; (800e5b0 <xTaskResumeAll+0x11c>)
 800e4e0:	68db      	ldr	r3, [r3, #12]
 800e4e2:	68db      	ldr	r3, [r3, #12]
 800e4e4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	3318      	adds	r3, #24
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	f7fe ff2e 	bl	800d34c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	3304      	adds	r3, #4
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	f7fe ff29 	bl	800d34c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4fe:	4b2d      	ldr	r3, [pc, #180]	; (800e5b4 <xTaskResumeAll+0x120>)
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	429a      	cmp	r2, r3
 800e504:	d903      	bls.n	800e50e <xTaskResumeAll+0x7a>
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e50a:	4a2a      	ldr	r2, [pc, #168]	; (800e5b4 <xTaskResumeAll+0x120>)
 800e50c:	6013      	str	r3, [r2, #0]
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e512:	4613      	mov	r3, r2
 800e514:	009b      	lsls	r3, r3, #2
 800e516:	4413      	add	r3, r2
 800e518:	009b      	lsls	r3, r3, #2
 800e51a:	4a27      	ldr	r2, [pc, #156]	; (800e5b8 <xTaskResumeAll+0x124>)
 800e51c:	441a      	add	r2, r3
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	3304      	adds	r3, #4
 800e522:	4619      	mov	r1, r3
 800e524:	4610      	mov	r0, r2
 800e526:	f7fe feb4 	bl	800d292 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e52e:	4b23      	ldr	r3, [pc, #140]	; (800e5bc <xTaskResumeAll+0x128>)
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e534:	429a      	cmp	r2, r3
 800e536:	d302      	bcc.n	800e53e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800e538:	4b21      	ldr	r3, [pc, #132]	; (800e5c0 <xTaskResumeAll+0x12c>)
 800e53a:	2201      	movs	r2, #1
 800e53c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e53e:	4b1c      	ldr	r3, [pc, #112]	; (800e5b0 <xTaskResumeAll+0x11c>)
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	2b00      	cmp	r3, #0
 800e544:	d1cb      	bne.n	800e4de <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d001      	beq.n	800e550 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e54c:	f000 fb62 	bl	800ec14 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800e550:	4b1c      	ldr	r3, [pc, #112]	; (800e5c4 <xTaskResumeAll+0x130>)
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d010      	beq.n	800e57e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e55c:	f000 f846 	bl	800e5ec <xTaskIncrementTick>
 800e560:	4603      	mov	r3, r0
 800e562:	2b00      	cmp	r3, #0
 800e564:	d002      	beq.n	800e56c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800e566:	4b16      	ldr	r3, [pc, #88]	; (800e5c0 <xTaskResumeAll+0x12c>)
 800e568:	2201      	movs	r2, #1
 800e56a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	3b01      	subs	r3, #1
 800e570:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	2b00      	cmp	r3, #0
 800e576:	d1f1      	bne.n	800e55c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800e578:	4b12      	ldr	r3, [pc, #72]	; (800e5c4 <xTaskResumeAll+0x130>)
 800e57a:	2200      	movs	r2, #0
 800e57c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e57e:	4b10      	ldr	r3, [pc, #64]	; (800e5c0 <xTaskResumeAll+0x12c>)
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d009      	beq.n	800e59a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e586:	2301      	movs	r3, #1
 800e588:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e58a:	4b0f      	ldr	r3, [pc, #60]	; (800e5c8 <xTaskResumeAll+0x134>)
 800e58c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e590:	601a      	str	r2, [r3, #0]
 800e592:	f3bf 8f4f 	dsb	sy
 800e596:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e59a:	f001 fa05 	bl	800f9a8 <vPortExitCritical>

	return xAlreadyYielded;
 800e59e:	68bb      	ldr	r3, [r7, #8]
}
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	3710      	adds	r7, #16
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	bd80      	pop	{r7, pc}
 800e5a8:	20001200 	.word	0x20001200
 800e5ac:	200011d8 	.word	0x200011d8
 800e5b0:	20001198 	.word	0x20001198
 800e5b4:	200011e0 	.word	0x200011e0
 800e5b8:	20000d08 	.word	0x20000d08
 800e5bc:	20000d04 	.word	0x20000d04
 800e5c0:	200011ec 	.word	0x200011ec
 800e5c4:	200011e8 	.word	0x200011e8
 800e5c8:	e000ed04 	.word	0xe000ed04

0800e5cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e5cc:	b480      	push	{r7}
 800e5ce:	b083      	sub	sp, #12
 800e5d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e5d2:	4b05      	ldr	r3, [pc, #20]	; (800e5e8 <xTaskGetTickCount+0x1c>)
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e5d8:	687b      	ldr	r3, [r7, #4]
}
 800e5da:	4618      	mov	r0, r3
 800e5dc:	370c      	adds	r7, #12
 800e5de:	46bd      	mov	sp, r7
 800e5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e4:	4770      	bx	lr
 800e5e6:	bf00      	nop
 800e5e8:	200011dc 	.word	0x200011dc

0800e5ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	b086      	sub	sp, #24
 800e5f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e5f6:	4b4e      	ldr	r3, [pc, #312]	; (800e730 <xTaskIncrementTick+0x144>)
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	f040 8088 	bne.w	800e710 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e600:	4b4c      	ldr	r3, [pc, #304]	; (800e734 <xTaskIncrementTick+0x148>)
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	3301      	adds	r3, #1
 800e606:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e608:	4a4a      	ldr	r2, [pc, #296]	; (800e734 <xTaskIncrementTick+0x148>)
 800e60a:	693b      	ldr	r3, [r7, #16]
 800e60c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e60e:	693b      	ldr	r3, [r7, #16]
 800e610:	2b00      	cmp	r3, #0
 800e612:	d11f      	bne.n	800e654 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800e614:	4b48      	ldr	r3, [pc, #288]	; (800e738 <xTaskIncrementTick+0x14c>)
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d009      	beq.n	800e632 <xTaskIncrementTick+0x46>
 800e61e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e622:	f383 8811 	msr	BASEPRI, r3
 800e626:	f3bf 8f6f 	isb	sy
 800e62a:	f3bf 8f4f 	dsb	sy
 800e62e:	603b      	str	r3, [r7, #0]
 800e630:	e7fe      	b.n	800e630 <xTaskIncrementTick+0x44>
 800e632:	4b41      	ldr	r3, [pc, #260]	; (800e738 <xTaskIncrementTick+0x14c>)
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	60fb      	str	r3, [r7, #12]
 800e638:	4b40      	ldr	r3, [pc, #256]	; (800e73c <xTaskIncrementTick+0x150>)
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	4a3e      	ldr	r2, [pc, #248]	; (800e738 <xTaskIncrementTick+0x14c>)
 800e63e:	6013      	str	r3, [r2, #0]
 800e640:	4a3e      	ldr	r2, [pc, #248]	; (800e73c <xTaskIncrementTick+0x150>)
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	6013      	str	r3, [r2, #0]
 800e646:	4b3e      	ldr	r3, [pc, #248]	; (800e740 <xTaskIncrementTick+0x154>)
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	3301      	adds	r3, #1
 800e64c:	4a3c      	ldr	r2, [pc, #240]	; (800e740 <xTaskIncrementTick+0x154>)
 800e64e:	6013      	str	r3, [r2, #0]
 800e650:	f000 fae0 	bl	800ec14 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e654:	4b3b      	ldr	r3, [pc, #236]	; (800e744 <xTaskIncrementTick+0x158>)
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	693a      	ldr	r2, [r7, #16]
 800e65a:	429a      	cmp	r2, r3
 800e65c:	d349      	bcc.n	800e6f2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e65e:	4b36      	ldr	r3, [pc, #216]	; (800e738 <xTaskIncrementTick+0x14c>)
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	2b00      	cmp	r3, #0
 800e666:	d104      	bne.n	800e672 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e668:	4b36      	ldr	r3, [pc, #216]	; (800e744 <xTaskIncrementTick+0x158>)
 800e66a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e66e:	601a      	str	r2, [r3, #0]
					break;
 800e670:	e03f      	b.n	800e6f2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e672:	4b31      	ldr	r3, [pc, #196]	; (800e738 <xTaskIncrementTick+0x14c>)
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	68db      	ldr	r3, [r3, #12]
 800e678:	68db      	ldr	r3, [r3, #12]
 800e67a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e67c:	68bb      	ldr	r3, [r7, #8]
 800e67e:	685b      	ldr	r3, [r3, #4]
 800e680:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e682:	693a      	ldr	r2, [r7, #16]
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	429a      	cmp	r2, r3
 800e688:	d203      	bcs.n	800e692 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e68a:	4a2e      	ldr	r2, [pc, #184]	; (800e744 <xTaskIncrementTick+0x158>)
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e690:	e02f      	b.n	800e6f2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e692:	68bb      	ldr	r3, [r7, #8]
 800e694:	3304      	adds	r3, #4
 800e696:	4618      	mov	r0, r3
 800e698:	f7fe fe58 	bl	800d34c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e69c:	68bb      	ldr	r3, [r7, #8]
 800e69e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d004      	beq.n	800e6ae <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e6a4:	68bb      	ldr	r3, [r7, #8]
 800e6a6:	3318      	adds	r3, #24
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	f7fe fe4f 	bl	800d34c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e6ae:	68bb      	ldr	r3, [r7, #8]
 800e6b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6b2:	4b25      	ldr	r3, [pc, #148]	; (800e748 <xTaskIncrementTick+0x15c>)
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	429a      	cmp	r2, r3
 800e6b8:	d903      	bls.n	800e6c2 <xTaskIncrementTick+0xd6>
 800e6ba:	68bb      	ldr	r3, [r7, #8]
 800e6bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6be:	4a22      	ldr	r2, [pc, #136]	; (800e748 <xTaskIncrementTick+0x15c>)
 800e6c0:	6013      	str	r3, [r2, #0]
 800e6c2:	68bb      	ldr	r3, [r7, #8]
 800e6c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6c6:	4613      	mov	r3, r2
 800e6c8:	009b      	lsls	r3, r3, #2
 800e6ca:	4413      	add	r3, r2
 800e6cc:	009b      	lsls	r3, r3, #2
 800e6ce:	4a1f      	ldr	r2, [pc, #124]	; (800e74c <xTaskIncrementTick+0x160>)
 800e6d0:	441a      	add	r2, r3
 800e6d2:	68bb      	ldr	r3, [r7, #8]
 800e6d4:	3304      	adds	r3, #4
 800e6d6:	4619      	mov	r1, r3
 800e6d8:	4610      	mov	r0, r2
 800e6da:	f7fe fdda 	bl	800d292 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e6de:	68bb      	ldr	r3, [r7, #8]
 800e6e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6e2:	4b1b      	ldr	r3, [pc, #108]	; (800e750 <xTaskIncrementTick+0x164>)
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6e8:	429a      	cmp	r2, r3
 800e6ea:	d3b8      	bcc.n	800e65e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800e6ec:	2301      	movs	r3, #1
 800e6ee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e6f0:	e7b5      	b.n	800e65e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e6f2:	4b17      	ldr	r3, [pc, #92]	; (800e750 <xTaskIncrementTick+0x164>)
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6f8:	4914      	ldr	r1, [pc, #80]	; (800e74c <xTaskIncrementTick+0x160>)
 800e6fa:	4613      	mov	r3, r2
 800e6fc:	009b      	lsls	r3, r3, #2
 800e6fe:	4413      	add	r3, r2
 800e700:	009b      	lsls	r3, r3, #2
 800e702:	440b      	add	r3, r1
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	2b01      	cmp	r3, #1
 800e708:	d907      	bls.n	800e71a <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800e70a:	2301      	movs	r3, #1
 800e70c:	617b      	str	r3, [r7, #20]
 800e70e:	e004      	b.n	800e71a <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800e710:	4b10      	ldr	r3, [pc, #64]	; (800e754 <xTaskIncrementTick+0x168>)
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	3301      	adds	r3, #1
 800e716:	4a0f      	ldr	r2, [pc, #60]	; (800e754 <xTaskIncrementTick+0x168>)
 800e718:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800e71a:	4b0f      	ldr	r3, [pc, #60]	; (800e758 <xTaskIncrementTick+0x16c>)
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d001      	beq.n	800e726 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800e722:	2301      	movs	r3, #1
 800e724:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800e726:	697b      	ldr	r3, [r7, #20]
}
 800e728:	4618      	mov	r0, r3
 800e72a:	3718      	adds	r7, #24
 800e72c:	46bd      	mov	sp, r7
 800e72e:	bd80      	pop	{r7, pc}
 800e730:	20001200 	.word	0x20001200
 800e734:	200011dc 	.word	0x200011dc
 800e738:	20001190 	.word	0x20001190
 800e73c:	20001194 	.word	0x20001194
 800e740:	200011f0 	.word	0x200011f0
 800e744:	200011f8 	.word	0x200011f8
 800e748:	200011e0 	.word	0x200011e0
 800e74c:	20000d08 	.word	0x20000d08
 800e750:	20000d04 	.word	0x20000d04
 800e754:	200011e8 	.word	0x200011e8
 800e758:	200011ec 	.word	0x200011ec

0800e75c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e75c:	b580      	push	{r7, lr}
 800e75e:	b084      	sub	sp, #16
 800e760:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e762:	4b33      	ldr	r3, [pc, #204]	; (800e830 <vTaskSwitchContext+0xd4>)
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d003      	beq.n	800e772 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e76a:	4b32      	ldr	r3, [pc, #200]	; (800e834 <vTaskSwitchContext+0xd8>)
 800e76c:	2201      	movs	r2, #1
 800e76e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e770:	e059      	b.n	800e826 <vTaskSwitchContext+0xca>
		xYieldPending = pdFALSE;
 800e772:	4b30      	ldr	r3, [pc, #192]	; (800e834 <vTaskSwitchContext+0xd8>)
 800e774:	2200      	movs	r2, #0
 800e776:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800e778:	f7f1 fec3 	bl	8000502 <getRunTimeCounterValue>
 800e77c:	4602      	mov	r2, r0
 800e77e:	4b2e      	ldr	r3, [pc, #184]	; (800e838 <vTaskSwitchContext+0xdc>)
 800e780:	601a      	str	r2, [r3, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800e782:	4b2d      	ldr	r3, [pc, #180]	; (800e838 <vTaskSwitchContext+0xdc>)
 800e784:	681a      	ldr	r2, [r3, #0]
 800e786:	4b2d      	ldr	r3, [pc, #180]	; (800e83c <vTaskSwitchContext+0xe0>)
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	429a      	cmp	r2, r3
 800e78c:	d909      	bls.n	800e7a2 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800e78e:	4b2c      	ldr	r3, [pc, #176]	; (800e840 <vTaskSwitchContext+0xe4>)
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800e794:	4a28      	ldr	r2, [pc, #160]	; (800e838 <vTaskSwitchContext+0xdc>)
 800e796:	6810      	ldr	r0, [r2, #0]
 800e798:	4a28      	ldr	r2, [pc, #160]	; (800e83c <vTaskSwitchContext+0xe0>)
 800e79a:	6812      	ldr	r2, [r2, #0]
 800e79c:	1a82      	subs	r2, r0, r2
 800e79e:	440a      	add	r2, r1
 800e7a0:	659a      	str	r2, [r3, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 800e7a2:	4b25      	ldr	r3, [pc, #148]	; (800e838 <vTaskSwitchContext+0xdc>)
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	4a25      	ldr	r2, [pc, #148]	; (800e83c <vTaskSwitchContext+0xe0>)
 800e7a8:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e7aa:	4b26      	ldr	r3, [pc, #152]	; (800e844 <vTaskSwitchContext+0xe8>)
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	60fb      	str	r3, [r7, #12]
 800e7b0:	e00f      	b.n	800e7d2 <vTaskSwitchContext+0x76>
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d109      	bne.n	800e7cc <vTaskSwitchContext+0x70>
 800e7b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7bc:	f383 8811 	msr	BASEPRI, r3
 800e7c0:	f3bf 8f6f 	isb	sy
 800e7c4:	f3bf 8f4f 	dsb	sy
 800e7c8:	607b      	str	r3, [r7, #4]
 800e7ca:	e7fe      	b.n	800e7ca <vTaskSwitchContext+0x6e>
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	3b01      	subs	r3, #1
 800e7d0:	60fb      	str	r3, [r7, #12]
 800e7d2:	491d      	ldr	r1, [pc, #116]	; (800e848 <vTaskSwitchContext+0xec>)
 800e7d4:	68fa      	ldr	r2, [r7, #12]
 800e7d6:	4613      	mov	r3, r2
 800e7d8:	009b      	lsls	r3, r3, #2
 800e7da:	4413      	add	r3, r2
 800e7dc:	009b      	lsls	r3, r3, #2
 800e7de:	440b      	add	r3, r1
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d0e5      	beq.n	800e7b2 <vTaskSwitchContext+0x56>
 800e7e6:	68fa      	ldr	r2, [r7, #12]
 800e7e8:	4613      	mov	r3, r2
 800e7ea:	009b      	lsls	r3, r3, #2
 800e7ec:	4413      	add	r3, r2
 800e7ee:	009b      	lsls	r3, r3, #2
 800e7f0:	4a15      	ldr	r2, [pc, #84]	; (800e848 <vTaskSwitchContext+0xec>)
 800e7f2:	4413      	add	r3, r2
 800e7f4:	60bb      	str	r3, [r7, #8]
 800e7f6:	68bb      	ldr	r3, [r7, #8]
 800e7f8:	685b      	ldr	r3, [r3, #4]
 800e7fa:	685a      	ldr	r2, [r3, #4]
 800e7fc:	68bb      	ldr	r3, [r7, #8]
 800e7fe:	605a      	str	r2, [r3, #4]
 800e800:	68bb      	ldr	r3, [r7, #8]
 800e802:	685a      	ldr	r2, [r3, #4]
 800e804:	68bb      	ldr	r3, [r7, #8]
 800e806:	3308      	adds	r3, #8
 800e808:	429a      	cmp	r2, r3
 800e80a:	d104      	bne.n	800e816 <vTaskSwitchContext+0xba>
 800e80c:	68bb      	ldr	r3, [r7, #8]
 800e80e:	685b      	ldr	r3, [r3, #4]
 800e810:	685a      	ldr	r2, [r3, #4]
 800e812:	68bb      	ldr	r3, [r7, #8]
 800e814:	605a      	str	r2, [r3, #4]
 800e816:	68bb      	ldr	r3, [r7, #8]
 800e818:	685b      	ldr	r3, [r3, #4]
 800e81a:	68db      	ldr	r3, [r3, #12]
 800e81c:	4a08      	ldr	r2, [pc, #32]	; (800e840 <vTaskSwitchContext+0xe4>)
 800e81e:	6013      	str	r3, [r2, #0]
 800e820:	4a08      	ldr	r2, [pc, #32]	; (800e844 <vTaskSwitchContext+0xe8>)
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	6013      	str	r3, [r2, #0]
}
 800e826:	bf00      	nop
 800e828:	3710      	adds	r7, #16
 800e82a:	46bd      	mov	sp, r7
 800e82c:	bd80      	pop	{r7, pc}
 800e82e:	bf00      	nop
 800e830:	20001200 	.word	0x20001200
 800e834:	200011ec 	.word	0x200011ec
 800e838:	20001208 	.word	0x20001208
 800e83c:	20001204 	.word	0x20001204
 800e840:	20000d04 	.word	0x20000d04
 800e844:	200011e0 	.word	0x200011e0
 800e848:	20000d08 	.word	0x20000d08

0800e84c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b084      	sub	sp, #16
 800e850:	af00      	add	r7, sp, #0
 800e852:	6078      	str	r0, [r7, #4]
 800e854:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d109      	bne.n	800e870 <vTaskPlaceOnEventList+0x24>
 800e85c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e860:	f383 8811 	msr	BASEPRI, r3
 800e864:	f3bf 8f6f 	isb	sy
 800e868:	f3bf 8f4f 	dsb	sy
 800e86c:	60fb      	str	r3, [r7, #12]
 800e86e:	e7fe      	b.n	800e86e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e870:	4b07      	ldr	r3, [pc, #28]	; (800e890 <vTaskPlaceOnEventList+0x44>)
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	3318      	adds	r3, #24
 800e876:	4619      	mov	r1, r3
 800e878:	6878      	ldr	r0, [r7, #4]
 800e87a:	f7fe fd2e 	bl	800d2da <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e87e:	2101      	movs	r1, #1
 800e880:	6838      	ldr	r0, [r7, #0]
 800e882:	f000 fba3 	bl	800efcc <prvAddCurrentTaskToDelayedList>
}
 800e886:	bf00      	nop
 800e888:	3710      	adds	r7, #16
 800e88a:	46bd      	mov	sp, r7
 800e88c:	bd80      	pop	{r7, pc}
 800e88e:	bf00      	nop
 800e890:	20000d04 	.word	0x20000d04

0800e894 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e894:	b580      	push	{r7, lr}
 800e896:	b086      	sub	sp, #24
 800e898:	af00      	add	r7, sp, #0
 800e89a:	60f8      	str	r0, [r7, #12]
 800e89c:	60b9      	str	r1, [r7, #8]
 800e89e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d109      	bne.n	800e8ba <vTaskPlaceOnEventListRestricted+0x26>
 800e8a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8aa:	f383 8811 	msr	BASEPRI, r3
 800e8ae:	f3bf 8f6f 	isb	sy
 800e8b2:	f3bf 8f4f 	dsb	sy
 800e8b6:	617b      	str	r3, [r7, #20]
 800e8b8:	e7fe      	b.n	800e8b8 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e8ba:	4b0a      	ldr	r3, [pc, #40]	; (800e8e4 <vTaskPlaceOnEventListRestricted+0x50>)
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	3318      	adds	r3, #24
 800e8c0:	4619      	mov	r1, r3
 800e8c2:	68f8      	ldr	r0, [r7, #12]
 800e8c4:	f7fe fce5 	bl	800d292 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d002      	beq.n	800e8d4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800e8ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e8d2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e8d4:	6879      	ldr	r1, [r7, #4]
 800e8d6:	68b8      	ldr	r0, [r7, #8]
 800e8d8:	f000 fb78 	bl	800efcc <prvAddCurrentTaskToDelayedList>
	}
 800e8dc:	bf00      	nop
 800e8de:	3718      	adds	r7, #24
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	bd80      	pop	{r7, pc}
 800e8e4:	20000d04 	.word	0x20000d04

0800e8e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b086      	sub	sp, #24
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	68db      	ldr	r3, [r3, #12]
 800e8f4:	68db      	ldr	r3, [r3, #12]
 800e8f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e8f8:	693b      	ldr	r3, [r7, #16]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d109      	bne.n	800e912 <xTaskRemoveFromEventList+0x2a>
 800e8fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e902:	f383 8811 	msr	BASEPRI, r3
 800e906:	f3bf 8f6f 	isb	sy
 800e90a:	f3bf 8f4f 	dsb	sy
 800e90e:	60fb      	str	r3, [r7, #12]
 800e910:	e7fe      	b.n	800e910 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e912:	693b      	ldr	r3, [r7, #16]
 800e914:	3318      	adds	r3, #24
 800e916:	4618      	mov	r0, r3
 800e918:	f7fe fd18 	bl	800d34c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e91c:	4b1d      	ldr	r3, [pc, #116]	; (800e994 <xTaskRemoveFromEventList+0xac>)
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d11d      	bne.n	800e960 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e924:	693b      	ldr	r3, [r7, #16]
 800e926:	3304      	adds	r3, #4
 800e928:	4618      	mov	r0, r3
 800e92a:	f7fe fd0f 	bl	800d34c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e92e:	693b      	ldr	r3, [r7, #16]
 800e930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e932:	4b19      	ldr	r3, [pc, #100]	; (800e998 <xTaskRemoveFromEventList+0xb0>)
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	429a      	cmp	r2, r3
 800e938:	d903      	bls.n	800e942 <xTaskRemoveFromEventList+0x5a>
 800e93a:	693b      	ldr	r3, [r7, #16]
 800e93c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e93e:	4a16      	ldr	r2, [pc, #88]	; (800e998 <xTaskRemoveFromEventList+0xb0>)
 800e940:	6013      	str	r3, [r2, #0]
 800e942:	693b      	ldr	r3, [r7, #16]
 800e944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e946:	4613      	mov	r3, r2
 800e948:	009b      	lsls	r3, r3, #2
 800e94a:	4413      	add	r3, r2
 800e94c:	009b      	lsls	r3, r3, #2
 800e94e:	4a13      	ldr	r2, [pc, #76]	; (800e99c <xTaskRemoveFromEventList+0xb4>)
 800e950:	441a      	add	r2, r3
 800e952:	693b      	ldr	r3, [r7, #16]
 800e954:	3304      	adds	r3, #4
 800e956:	4619      	mov	r1, r3
 800e958:	4610      	mov	r0, r2
 800e95a:	f7fe fc9a 	bl	800d292 <vListInsertEnd>
 800e95e:	e005      	b.n	800e96c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e960:	693b      	ldr	r3, [r7, #16]
 800e962:	3318      	adds	r3, #24
 800e964:	4619      	mov	r1, r3
 800e966:	480e      	ldr	r0, [pc, #56]	; (800e9a0 <xTaskRemoveFromEventList+0xb8>)
 800e968:	f7fe fc93 	bl	800d292 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e96c:	693b      	ldr	r3, [r7, #16]
 800e96e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e970:	4b0c      	ldr	r3, [pc, #48]	; (800e9a4 <xTaskRemoveFromEventList+0xbc>)
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e976:	429a      	cmp	r2, r3
 800e978:	d905      	bls.n	800e986 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e97a:	2301      	movs	r3, #1
 800e97c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e97e:	4b0a      	ldr	r3, [pc, #40]	; (800e9a8 <xTaskRemoveFromEventList+0xc0>)
 800e980:	2201      	movs	r2, #1
 800e982:	601a      	str	r2, [r3, #0]
 800e984:	e001      	b.n	800e98a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800e986:	2300      	movs	r3, #0
 800e988:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e98a:	697b      	ldr	r3, [r7, #20]
}
 800e98c:	4618      	mov	r0, r3
 800e98e:	3718      	adds	r7, #24
 800e990:	46bd      	mov	sp, r7
 800e992:	bd80      	pop	{r7, pc}
 800e994:	20001200 	.word	0x20001200
 800e998:	200011e0 	.word	0x200011e0
 800e99c:	20000d08 	.word	0x20000d08
 800e9a0:	20001198 	.word	0x20001198
 800e9a4:	20000d04 	.word	0x20000d04
 800e9a8:	200011ec 	.word	0x200011ec

0800e9ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e9ac:	b480      	push	{r7}
 800e9ae:	b083      	sub	sp, #12
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e9b4:	4b06      	ldr	r3, [pc, #24]	; (800e9d0 <vTaskInternalSetTimeOutState+0x24>)
 800e9b6:	681a      	ldr	r2, [r3, #0]
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e9bc:	4b05      	ldr	r3, [pc, #20]	; (800e9d4 <vTaskInternalSetTimeOutState+0x28>)
 800e9be:	681a      	ldr	r2, [r3, #0]
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	605a      	str	r2, [r3, #4]
}
 800e9c4:	bf00      	nop
 800e9c6:	370c      	adds	r7, #12
 800e9c8:	46bd      	mov	sp, r7
 800e9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ce:	4770      	bx	lr
 800e9d0:	200011f0 	.word	0x200011f0
 800e9d4:	200011dc 	.word	0x200011dc

0800e9d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	b088      	sub	sp, #32
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]
 800e9e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d109      	bne.n	800e9fc <xTaskCheckForTimeOut+0x24>
 800e9e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9ec:	f383 8811 	msr	BASEPRI, r3
 800e9f0:	f3bf 8f6f 	isb	sy
 800e9f4:	f3bf 8f4f 	dsb	sy
 800e9f8:	613b      	str	r3, [r7, #16]
 800e9fa:	e7fe      	b.n	800e9fa <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800e9fc:	683b      	ldr	r3, [r7, #0]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d109      	bne.n	800ea16 <xTaskCheckForTimeOut+0x3e>
 800ea02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea06:	f383 8811 	msr	BASEPRI, r3
 800ea0a:	f3bf 8f6f 	isb	sy
 800ea0e:	f3bf 8f4f 	dsb	sy
 800ea12:	60fb      	str	r3, [r7, #12]
 800ea14:	e7fe      	b.n	800ea14 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800ea16:	f000 ff99 	bl	800f94c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ea1a:	4b1d      	ldr	r3, [pc, #116]	; (800ea90 <xTaskCheckForTimeOut+0xb8>)
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	685b      	ldr	r3, [r3, #4]
 800ea24:	69ba      	ldr	r2, [r7, #24]
 800ea26:	1ad3      	subs	r3, r2, r3
 800ea28:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ea2a:	683b      	ldr	r3, [r7, #0]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ea32:	d102      	bne.n	800ea3a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ea34:	2300      	movs	r3, #0
 800ea36:	61fb      	str	r3, [r7, #28]
 800ea38:	e023      	b.n	800ea82 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	681a      	ldr	r2, [r3, #0]
 800ea3e:	4b15      	ldr	r3, [pc, #84]	; (800ea94 <xTaskCheckForTimeOut+0xbc>)
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	429a      	cmp	r2, r3
 800ea44:	d007      	beq.n	800ea56 <xTaskCheckForTimeOut+0x7e>
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	685b      	ldr	r3, [r3, #4]
 800ea4a:	69ba      	ldr	r2, [r7, #24]
 800ea4c:	429a      	cmp	r2, r3
 800ea4e:	d302      	bcc.n	800ea56 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ea50:	2301      	movs	r3, #1
 800ea52:	61fb      	str	r3, [r7, #28]
 800ea54:	e015      	b.n	800ea82 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ea56:	683b      	ldr	r3, [r7, #0]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	697a      	ldr	r2, [r7, #20]
 800ea5c:	429a      	cmp	r2, r3
 800ea5e:	d20b      	bcs.n	800ea78 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ea60:	683b      	ldr	r3, [r7, #0]
 800ea62:	681a      	ldr	r2, [r3, #0]
 800ea64:	697b      	ldr	r3, [r7, #20]
 800ea66:	1ad2      	subs	r2, r2, r3
 800ea68:	683b      	ldr	r3, [r7, #0]
 800ea6a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ea6c:	6878      	ldr	r0, [r7, #4]
 800ea6e:	f7ff ff9d 	bl	800e9ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ea72:	2300      	movs	r3, #0
 800ea74:	61fb      	str	r3, [r7, #28]
 800ea76:	e004      	b.n	800ea82 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800ea78:	683b      	ldr	r3, [r7, #0]
 800ea7a:	2200      	movs	r2, #0
 800ea7c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ea7e:	2301      	movs	r3, #1
 800ea80:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ea82:	f000 ff91 	bl	800f9a8 <vPortExitCritical>

	return xReturn;
 800ea86:	69fb      	ldr	r3, [r7, #28]
}
 800ea88:	4618      	mov	r0, r3
 800ea8a:	3720      	adds	r7, #32
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	bd80      	pop	{r7, pc}
 800ea90:	200011dc 	.word	0x200011dc
 800ea94:	200011f0 	.word	0x200011f0

0800ea98 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ea98:	b480      	push	{r7}
 800ea9a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ea9c:	4b03      	ldr	r3, [pc, #12]	; (800eaac <vTaskMissedYield+0x14>)
 800ea9e:	2201      	movs	r2, #1
 800eaa0:	601a      	str	r2, [r3, #0]
}
 800eaa2:	bf00      	nop
 800eaa4:	46bd      	mov	sp, r7
 800eaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaaa:	4770      	bx	lr
 800eaac:	200011ec 	.word	0x200011ec

0800eab0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800eab0:	b580      	push	{r7, lr}
 800eab2:	b082      	sub	sp, #8
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800eab8:	f000 f852 	bl	800eb60 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800eabc:	4b06      	ldr	r3, [pc, #24]	; (800ead8 <prvIdleTask+0x28>)
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	2b01      	cmp	r3, #1
 800eac2:	d9f9      	bls.n	800eab8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800eac4:	4b05      	ldr	r3, [pc, #20]	; (800eadc <prvIdleTask+0x2c>)
 800eac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eaca:	601a      	str	r2, [r3, #0]
 800eacc:	f3bf 8f4f 	dsb	sy
 800ead0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ead4:	e7f0      	b.n	800eab8 <prvIdleTask+0x8>
 800ead6:	bf00      	nop
 800ead8:	20000d08 	.word	0x20000d08
 800eadc:	e000ed04 	.word	0xe000ed04

0800eae0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b082      	sub	sp, #8
 800eae4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eae6:	2300      	movs	r3, #0
 800eae8:	607b      	str	r3, [r7, #4]
 800eaea:	e00c      	b.n	800eb06 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800eaec:	687a      	ldr	r2, [r7, #4]
 800eaee:	4613      	mov	r3, r2
 800eaf0:	009b      	lsls	r3, r3, #2
 800eaf2:	4413      	add	r3, r2
 800eaf4:	009b      	lsls	r3, r3, #2
 800eaf6:	4a12      	ldr	r2, [pc, #72]	; (800eb40 <prvInitialiseTaskLists+0x60>)
 800eaf8:	4413      	add	r3, r2
 800eafa:	4618      	mov	r0, r3
 800eafc:	f7fe fb9c 	bl	800d238 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	3301      	adds	r3, #1
 800eb04:	607b      	str	r3, [r7, #4]
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	2b37      	cmp	r3, #55	; 0x37
 800eb0a:	d9ef      	bls.n	800eaec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800eb0c:	480d      	ldr	r0, [pc, #52]	; (800eb44 <prvInitialiseTaskLists+0x64>)
 800eb0e:	f7fe fb93 	bl	800d238 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800eb12:	480d      	ldr	r0, [pc, #52]	; (800eb48 <prvInitialiseTaskLists+0x68>)
 800eb14:	f7fe fb90 	bl	800d238 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800eb18:	480c      	ldr	r0, [pc, #48]	; (800eb4c <prvInitialiseTaskLists+0x6c>)
 800eb1a:	f7fe fb8d 	bl	800d238 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800eb1e:	480c      	ldr	r0, [pc, #48]	; (800eb50 <prvInitialiseTaskLists+0x70>)
 800eb20:	f7fe fb8a 	bl	800d238 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800eb24:	480b      	ldr	r0, [pc, #44]	; (800eb54 <prvInitialiseTaskLists+0x74>)
 800eb26:	f7fe fb87 	bl	800d238 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800eb2a:	4b0b      	ldr	r3, [pc, #44]	; (800eb58 <prvInitialiseTaskLists+0x78>)
 800eb2c:	4a05      	ldr	r2, [pc, #20]	; (800eb44 <prvInitialiseTaskLists+0x64>)
 800eb2e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800eb30:	4b0a      	ldr	r3, [pc, #40]	; (800eb5c <prvInitialiseTaskLists+0x7c>)
 800eb32:	4a05      	ldr	r2, [pc, #20]	; (800eb48 <prvInitialiseTaskLists+0x68>)
 800eb34:	601a      	str	r2, [r3, #0]
}
 800eb36:	bf00      	nop
 800eb38:	3708      	adds	r7, #8
 800eb3a:	46bd      	mov	sp, r7
 800eb3c:	bd80      	pop	{r7, pc}
 800eb3e:	bf00      	nop
 800eb40:	20000d08 	.word	0x20000d08
 800eb44:	20001168 	.word	0x20001168
 800eb48:	2000117c 	.word	0x2000117c
 800eb4c:	20001198 	.word	0x20001198
 800eb50:	200011ac 	.word	0x200011ac
 800eb54:	200011c4 	.word	0x200011c4
 800eb58:	20001190 	.word	0x20001190
 800eb5c:	20001194 	.word	0x20001194

0800eb60 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800eb60:	b580      	push	{r7, lr}
 800eb62:	b082      	sub	sp, #8
 800eb64:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800eb66:	e019      	b.n	800eb9c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800eb68:	f000 fef0 	bl	800f94c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb6c:	4b0f      	ldr	r3, [pc, #60]	; (800ebac <prvCheckTasksWaitingTermination+0x4c>)
 800eb6e:	68db      	ldr	r3, [r3, #12]
 800eb70:	68db      	ldr	r3, [r3, #12]
 800eb72:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	3304      	adds	r3, #4
 800eb78:	4618      	mov	r0, r3
 800eb7a:	f7fe fbe7 	bl	800d34c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800eb7e:	4b0c      	ldr	r3, [pc, #48]	; (800ebb0 <prvCheckTasksWaitingTermination+0x50>)
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	3b01      	subs	r3, #1
 800eb84:	4a0a      	ldr	r2, [pc, #40]	; (800ebb0 <prvCheckTasksWaitingTermination+0x50>)
 800eb86:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800eb88:	4b0a      	ldr	r3, [pc, #40]	; (800ebb4 <prvCheckTasksWaitingTermination+0x54>)
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	3b01      	subs	r3, #1
 800eb8e:	4a09      	ldr	r2, [pc, #36]	; (800ebb4 <prvCheckTasksWaitingTermination+0x54>)
 800eb90:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800eb92:	f000 ff09 	bl	800f9a8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800eb96:	6878      	ldr	r0, [r7, #4]
 800eb98:	f000 f80e 	bl	800ebb8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800eb9c:	4b05      	ldr	r3, [pc, #20]	; (800ebb4 <prvCheckTasksWaitingTermination+0x54>)
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d1e1      	bne.n	800eb68 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800eba4:	bf00      	nop
 800eba6:	3708      	adds	r7, #8
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	bd80      	pop	{r7, pc}
 800ebac:	200011ac 	.word	0x200011ac
 800ebb0:	200011d8 	.word	0x200011d8
 800ebb4:	200011c0 	.word	0x200011c0

0800ebb8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ebb8:	b580      	push	{r7, lr}
 800ebba:	b084      	sub	sp, #16
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d108      	bne.n	800ebdc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebce:	4618      	mov	r0, r3
 800ebd0:	f001 f898 	bl	800fd04 <vPortFree>
				vPortFree( pxTCB );
 800ebd4:	6878      	ldr	r0, [r7, #4]
 800ebd6:	f001 f895 	bl	800fd04 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ebda:	e017      	b.n	800ec0c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800ebe2:	2b01      	cmp	r3, #1
 800ebe4:	d103      	bne.n	800ebee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ebe6:	6878      	ldr	r0, [r7, #4]
 800ebe8:	f001 f88c 	bl	800fd04 <vPortFree>
	}
 800ebec:	e00e      	b.n	800ec0c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800ebf4:	2b02      	cmp	r3, #2
 800ebf6:	d009      	beq.n	800ec0c <prvDeleteTCB+0x54>
 800ebf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebfc:	f383 8811 	msr	BASEPRI, r3
 800ec00:	f3bf 8f6f 	isb	sy
 800ec04:	f3bf 8f4f 	dsb	sy
 800ec08:	60fb      	str	r3, [r7, #12]
 800ec0a:	e7fe      	b.n	800ec0a <prvDeleteTCB+0x52>
	}
 800ec0c:	bf00      	nop
 800ec0e:	3710      	adds	r7, #16
 800ec10:	46bd      	mov	sp, r7
 800ec12:	bd80      	pop	{r7, pc}

0800ec14 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ec14:	b480      	push	{r7}
 800ec16:	b083      	sub	sp, #12
 800ec18:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ec1a:	4b0c      	ldr	r3, [pc, #48]	; (800ec4c <prvResetNextTaskUnblockTime+0x38>)
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d104      	bne.n	800ec2e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ec24:	4b0a      	ldr	r3, [pc, #40]	; (800ec50 <prvResetNextTaskUnblockTime+0x3c>)
 800ec26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ec2a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ec2c:	e008      	b.n	800ec40 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec2e:	4b07      	ldr	r3, [pc, #28]	; (800ec4c <prvResetNextTaskUnblockTime+0x38>)
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	68db      	ldr	r3, [r3, #12]
 800ec34:	68db      	ldr	r3, [r3, #12]
 800ec36:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	685b      	ldr	r3, [r3, #4]
 800ec3c:	4a04      	ldr	r2, [pc, #16]	; (800ec50 <prvResetNextTaskUnblockTime+0x3c>)
 800ec3e:	6013      	str	r3, [r2, #0]
}
 800ec40:	bf00      	nop
 800ec42:	370c      	adds	r7, #12
 800ec44:	46bd      	mov	sp, r7
 800ec46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec4a:	4770      	bx	lr
 800ec4c:	20001190 	.word	0x20001190
 800ec50:	200011f8 	.word	0x200011f8

0800ec54 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ec54:	b480      	push	{r7}
 800ec56:	b083      	sub	sp, #12
 800ec58:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ec5a:	4b0b      	ldr	r3, [pc, #44]	; (800ec88 <xTaskGetSchedulerState+0x34>)
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d102      	bne.n	800ec68 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ec62:	2301      	movs	r3, #1
 800ec64:	607b      	str	r3, [r7, #4]
 800ec66:	e008      	b.n	800ec7a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ec68:	4b08      	ldr	r3, [pc, #32]	; (800ec8c <xTaskGetSchedulerState+0x38>)
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d102      	bne.n	800ec76 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ec70:	2302      	movs	r3, #2
 800ec72:	607b      	str	r3, [r7, #4]
 800ec74:	e001      	b.n	800ec7a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ec76:	2300      	movs	r3, #0
 800ec78:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ec7a:	687b      	ldr	r3, [r7, #4]
	}
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	370c      	adds	r7, #12
 800ec80:	46bd      	mov	sp, r7
 800ec82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec86:	4770      	bx	lr
 800ec88:	200011e4 	.word	0x200011e4
 800ec8c:	20001200 	.word	0x20001200

0800ec90 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b086      	sub	sp, #24
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ec9c:	2300      	movs	r3, #0
 800ec9e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d054      	beq.n	800ed50 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800eca6:	4b2d      	ldr	r3, [pc, #180]	; (800ed5c <xTaskPriorityDisinherit+0xcc>)
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	693a      	ldr	r2, [r7, #16]
 800ecac:	429a      	cmp	r2, r3
 800ecae:	d009      	beq.n	800ecc4 <xTaskPriorityDisinherit+0x34>
 800ecb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecb4:	f383 8811 	msr	BASEPRI, r3
 800ecb8:	f3bf 8f6f 	isb	sy
 800ecbc:	f3bf 8f4f 	dsb	sy
 800ecc0:	60fb      	str	r3, [r7, #12]
 800ecc2:	e7fe      	b.n	800ecc2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800ecc4:	693b      	ldr	r3, [r7, #16]
 800ecc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d109      	bne.n	800ece0 <xTaskPriorityDisinherit+0x50>
 800eccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecd0:	f383 8811 	msr	BASEPRI, r3
 800ecd4:	f3bf 8f6f 	isb	sy
 800ecd8:	f3bf 8f4f 	dsb	sy
 800ecdc:	60bb      	str	r3, [r7, #8]
 800ecde:	e7fe      	b.n	800ecde <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800ece0:	693b      	ldr	r3, [r7, #16]
 800ece2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ece4:	1e5a      	subs	r2, r3, #1
 800ece6:	693b      	ldr	r3, [r7, #16]
 800ece8:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ecea:	693b      	ldr	r3, [r7, #16]
 800ecec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecee:	693b      	ldr	r3, [r7, #16]
 800ecf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ecf2:	429a      	cmp	r2, r3
 800ecf4:	d02c      	beq.n	800ed50 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ecf6:	693b      	ldr	r3, [r7, #16]
 800ecf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d128      	bne.n	800ed50 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ecfe:	693b      	ldr	r3, [r7, #16]
 800ed00:	3304      	adds	r3, #4
 800ed02:	4618      	mov	r0, r3
 800ed04:	f7fe fb22 	bl	800d34c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ed08:	693b      	ldr	r3, [r7, #16]
 800ed0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ed0c:	693b      	ldr	r3, [r7, #16]
 800ed0e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed10:	693b      	ldr	r3, [r7, #16]
 800ed12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed14:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ed18:	693b      	ldr	r3, [r7, #16]
 800ed1a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ed1c:	693b      	ldr	r3, [r7, #16]
 800ed1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed20:	4b0f      	ldr	r3, [pc, #60]	; (800ed60 <xTaskPriorityDisinherit+0xd0>)
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	429a      	cmp	r2, r3
 800ed26:	d903      	bls.n	800ed30 <xTaskPriorityDisinherit+0xa0>
 800ed28:	693b      	ldr	r3, [r7, #16]
 800ed2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed2c:	4a0c      	ldr	r2, [pc, #48]	; (800ed60 <xTaskPriorityDisinherit+0xd0>)
 800ed2e:	6013      	str	r3, [r2, #0]
 800ed30:	693b      	ldr	r3, [r7, #16]
 800ed32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed34:	4613      	mov	r3, r2
 800ed36:	009b      	lsls	r3, r3, #2
 800ed38:	4413      	add	r3, r2
 800ed3a:	009b      	lsls	r3, r3, #2
 800ed3c:	4a09      	ldr	r2, [pc, #36]	; (800ed64 <xTaskPriorityDisinherit+0xd4>)
 800ed3e:	441a      	add	r2, r3
 800ed40:	693b      	ldr	r3, [r7, #16]
 800ed42:	3304      	adds	r3, #4
 800ed44:	4619      	mov	r1, r3
 800ed46:	4610      	mov	r0, r2
 800ed48:	f7fe faa3 	bl	800d292 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ed4c:	2301      	movs	r3, #1
 800ed4e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ed50:	697b      	ldr	r3, [r7, #20]
	}
 800ed52:	4618      	mov	r0, r3
 800ed54:	3718      	adds	r7, #24
 800ed56:	46bd      	mov	sp, r7
 800ed58:	bd80      	pop	{r7, pc}
 800ed5a:	bf00      	nop
 800ed5c:	20000d04 	.word	0x20000d04
 800ed60:	200011e0 	.word	0x200011e0
 800ed64:	20000d08 	.word	0x20000d08

0800ed68 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b086      	sub	sp, #24
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	60f8      	str	r0, [r7, #12]
 800ed70:	60b9      	str	r1, [r7, #8]
 800ed72:	607a      	str	r2, [r7, #4]
 800ed74:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800ed76:	f000 fde9 	bl	800f94c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800ed7a:	4b26      	ldr	r3, [pc, #152]	; (800ee14 <xTaskNotifyWait+0xac>)
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800ed82:	b2db      	uxtb	r3, r3
 800ed84:	2b02      	cmp	r3, #2
 800ed86:	d01a      	beq.n	800edbe <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800ed88:	4b22      	ldr	r3, [pc, #136]	; (800ee14 <xTaskNotifyWait+0xac>)
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800ed8e:	68fa      	ldr	r2, [r7, #12]
 800ed90:	43d2      	mvns	r2, r2
 800ed92:	400a      	ands	r2, r1
 800ed94:	65da      	str	r2, [r3, #92]	; 0x5c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800ed96:	4b1f      	ldr	r3, [pc, #124]	; (800ee14 <xTaskNotifyWait+0xac>)
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	2201      	movs	r2, #1
 800ed9c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

				if( xTicksToWait > ( TickType_t ) 0 )
 800eda0:	683b      	ldr	r3, [r7, #0]
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d00b      	beq.n	800edbe <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800eda6:	2101      	movs	r1, #1
 800eda8:	6838      	ldr	r0, [r7, #0]
 800edaa:	f000 f90f 	bl	800efcc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800edae:	4b1a      	ldr	r3, [pc, #104]	; (800ee18 <xTaskNotifyWait+0xb0>)
 800edb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800edb4:	601a      	str	r2, [r3, #0]
 800edb6:	f3bf 8f4f 	dsb	sy
 800edba:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800edbe:	f000 fdf3 	bl	800f9a8 <vPortExitCritical>

		taskENTER_CRITICAL();
 800edc2:	f000 fdc3 	bl	800f94c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d004      	beq.n	800edd6 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800edcc:	4b11      	ldr	r3, [pc, #68]	; (800ee14 <xTaskNotifyWait+0xac>)
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800edd6:	4b0f      	ldr	r3, [pc, #60]	; (800ee14 <xTaskNotifyWait+0xac>)
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800edde:	b2db      	uxtb	r3, r3
 800ede0:	2b02      	cmp	r3, #2
 800ede2:	d002      	beq.n	800edea <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800ede4:	2300      	movs	r3, #0
 800ede6:	617b      	str	r3, [r7, #20]
 800ede8:	e008      	b.n	800edfc <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800edea:	4b0a      	ldr	r3, [pc, #40]	; (800ee14 <xTaskNotifyWait+0xac>)
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800edf0:	68ba      	ldr	r2, [r7, #8]
 800edf2:	43d2      	mvns	r2, r2
 800edf4:	400a      	ands	r2, r1
 800edf6:	65da      	str	r2, [r3, #92]	; 0x5c
				xReturn = pdTRUE;
 800edf8:	2301      	movs	r3, #1
 800edfa:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800edfc:	4b05      	ldr	r3, [pc, #20]	; (800ee14 <xTaskNotifyWait+0xac>)
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	2200      	movs	r2, #0
 800ee02:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		}
		taskEXIT_CRITICAL();
 800ee06:	f000 fdcf 	bl	800f9a8 <vPortExitCritical>

		return xReturn;
 800ee0a:	697b      	ldr	r3, [r7, #20]
	}
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	3718      	adds	r7, #24
 800ee10:	46bd      	mov	sp, r7
 800ee12:	bd80      	pop	{r7, pc}
 800ee14:	20000d04 	.word	0x20000d04
 800ee18:	e000ed04 	.word	0xe000ed04

0800ee1c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b08e      	sub	sp, #56	; 0x38
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	60f8      	str	r0, [r7, #12]
 800ee24:	60b9      	str	r1, [r7, #8]
 800ee26:	603b      	str	r3, [r7, #0]
 800ee28:	4613      	mov	r3, r2
 800ee2a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800ee2c:	2301      	movs	r3, #1
 800ee2e:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d109      	bne.n	800ee4a <xTaskGenericNotifyFromISR+0x2e>
 800ee36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee3a:	f383 8811 	msr	BASEPRI, r3
 800ee3e:	f3bf 8f6f 	isb	sy
 800ee42:	f3bf 8f4f 	dsb	sy
 800ee46:	627b      	str	r3, [r7, #36]	; 0x24
 800ee48:	e7fe      	b.n	800ee48 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ee4a:	f000 fe5b 	bl	800fb04 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800ee52:	f3ef 8211 	mrs	r2, BASEPRI
 800ee56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee5a:	f383 8811 	msr	BASEPRI, r3
 800ee5e:	f3bf 8f6f 	isb	sy
 800ee62:	f3bf 8f4f 	dsb	sy
 800ee66:	623a      	str	r2, [r7, #32]
 800ee68:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800ee6a:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ee6c:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800ee6e:	683b      	ldr	r3, [r7, #0]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d003      	beq.n	800ee7c <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800ee74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee76:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ee78:	683b      	ldr	r3, [r7, #0]
 800ee7a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800ee7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee7e:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800ee82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800ee86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee88:	2202      	movs	r2, #2
 800ee8a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

			switch( eAction )
 800ee8e:	79fb      	ldrb	r3, [r7, #7]
 800ee90:	2b04      	cmp	r3, #4
 800ee92:	d829      	bhi.n	800eee8 <xTaskGenericNotifyFromISR+0xcc>
 800ee94:	a201      	add	r2, pc, #4	; (adr r2, 800ee9c <xTaskGenericNotifyFromISR+0x80>)
 800ee96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee9a:	bf00      	nop
 800ee9c:	0800ef07 	.word	0x0800ef07
 800eea0:	0800eeb1 	.word	0x0800eeb1
 800eea4:	0800eebf 	.word	0x0800eebf
 800eea8:	0800eecb 	.word	0x0800eecb
 800eeac:	0800eed3 	.word	0x0800eed3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800eeb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeb2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800eeb4:	68bb      	ldr	r3, [r7, #8]
 800eeb6:	431a      	orrs	r2, r3
 800eeb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeba:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 800eebc:	e026      	b.n	800ef0c <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800eebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eec2:	1c5a      	adds	r2, r3, #1
 800eec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eec6:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 800eec8:	e020      	b.n	800ef0c <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800eeca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eecc:	68ba      	ldr	r2, [r7, #8]
 800eece:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 800eed0:	e01c      	b.n	800ef0c <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800eed2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800eed6:	2b02      	cmp	r3, #2
 800eed8:	d003      	beq.n	800eee2 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800eeda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eedc:	68ba      	ldr	r2, [r7, #8]
 800eede:	65da      	str	r2, [r3, #92]	; 0x5c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800eee0:	e014      	b.n	800ef0c <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 800eee2:	2300      	movs	r3, #0
 800eee4:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800eee6:	e011      	b.n	800ef0c <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800eee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eeec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eef0:	d00b      	beq.n	800ef0a <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 800eef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eef6:	f383 8811 	msr	BASEPRI, r3
 800eefa:	f3bf 8f6f 	isb	sy
 800eefe:	f3bf 8f4f 	dsb	sy
 800ef02:	61bb      	str	r3, [r7, #24]
 800ef04:	e7fe      	b.n	800ef04 <xTaskGenericNotifyFromISR+0xe8>
					break;
 800ef06:	bf00      	nop
 800ef08:	e000      	b.n	800ef0c <xTaskGenericNotifyFromISR+0xf0>
					break;
 800ef0a:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800ef0c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ef10:	2b01      	cmp	r3, #1
 800ef12:	d145      	bne.n	800efa0 <xTaskGenericNotifyFromISR+0x184>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800ef14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d009      	beq.n	800ef30 <xTaskGenericNotifyFromISR+0x114>
 800ef1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef20:	f383 8811 	msr	BASEPRI, r3
 800ef24:	f3bf 8f6f 	isb	sy
 800ef28:	f3bf 8f4f 	dsb	sy
 800ef2c:	617b      	str	r3, [r7, #20]
 800ef2e:	e7fe      	b.n	800ef2e <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ef30:	4b20      	ldr	r3, [pc, #128]	; (800efb4 <xTaskGenericNotifyFromISR+0x198>)
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d11d      	bne.n	800ef74 <xTaskGenericNotifyFromISR+0x158>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ef38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef3a:	3304      	adds	r3, #4
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	f7fe fa05 	bl	800d34c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ef42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef46:	4b1c      	ldr	r3, [pc, #112]	; (800efb8 <xTaskGenericNotifyFromISR+0x19c>)
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	429a      	cmp	r2, r3
 800ef4c:	d903      	bls.n	800ef56 <xTaskGenericNotifyFromISR+0x13a>
 800ef4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef52:	4a19      	ldr	r2, [pc, #100]	; (800efb8 <xTaskGenericNotifyFromISR+0x19c>)
 800ef54:	6013      	str	r3, [r2, #0]
 800ef56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef5a:	4613      	mov	r3, r2
 800ef5c:	009b      	lsls	r3, r3, #2
 800ef5e:	4413      	add	r3, r2
 800ef60:	009b      	lsls	r3, r3, #2
 800ef62:	4a16      	ldr	r2, [pc, #88]	; (800efbc <xTaskGenericNotifyFromISR+0x1a0>)
 800ef64:	441a      	add	r2, r3
 800ef66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef68:	3304      	adds	r3, #4
 800ef6a:	4619      	mov	r1, r3
 800ef6c:	4610      	mov	r0, r2
 800ef6e:	f7fe f990 	bl	800d292 <vListInsertEnd>
 800ef72:	e005      	b.n	800ef80 <xTaskGenericNotifyFromISR+0x164>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800ef74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef76:	3318      	adds	r3, #24
 800ef78:	4619      	mov	r1, r3
 800ef7a:	4811      	ldr	r0, [pc, #68]	; (800efc0 <xTaskGenericNotifyFromISR+0x1a4>)
 800ef7c:	f7fe f989 	bl	800d292 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ef80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef84:	4b0f      	ldr	r3, [pc, #60]	; (800efc4 <xTaskGenericNotifyFromISR+0x1a8>)
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef8a:	429a      	cmp	r2, r3
 800ef8c:	d908      	bls.n	800efa0 <xTaskGenericNotifyFromISR+0x184>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800ef8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d002      	beq.n	800ef9a <xTaskGenericNotifyFromISR+0x17e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800ef94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef96:	2201      	movs	r2, #1
 800ef98:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800ef9a:	4b0b      	ldr	r3, [pc, #44]	; (800efc8 <xTaskGenericNotifyFromISR+0x1ac>)
 800ef9c:	2201      	movs	r2, #1
 800ef9e:	601a      	str	r2, [r3, #0]
 800efa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efa2:	613b      	str	r3, [r7, #16]
	__asm volatile
 800efa4:	693b      	ldr	r3, [r7, #16]
 800efa6:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800efaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800efac:	4618      	mov	r0, r3
 800efae:	3738      	adds	r7, #56	; 0x38
 800efb0:	46bd      	mov	sp, r7
 800efb2:	bd80      	pop	{r7, pc}
 800efb4:	20001200 	.word	0x20001200
 800efb8:	200011e0 	.word	0x200011e0
 800efbc:	20000d08 	.word	0x20000d08
 800efc0:	20001198 	.word	0x20001198
 800efc4:	20000d04 	.word	0x20000d04
 800efc8:	200011ec 	.word	0x200011ec

0800efcc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800efcc:	b580      	push	{r7, lr}
 800efce:	b084      	sub	sp, #16
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	6078      	str	r0, [r7, #4]
 800efd4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800efd6:	4b21      	ldr	r3, [pc, #132]	; (800f05c <prvAddCurrentTaskToDelayedList+0x90>)
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800efdc:	4b20      	ldr	r3, [pc, #128]	; (800f060 <prvAddCurrentTaskToDelayedList+0x94>)
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	3304      	adds	r3, #4
 800efe2:	4618      	mov	r0, r3
 800efe4:	f7fe f9b2 	bl	800d34c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800efee:	d10a      	bne.n	800f006 <prvAddCurrentTaskToDelayedList+0x3a>
 800eff0:	683b      	ldr	r3, [r7, #0]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d007      	beq.n	800f006 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eff6:	4b1a      	ldr	r3, [pc, #104]	; (800f060 <prvAddCurrentTaskToDelayedList+0x94>)
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	3304      	adds	r3, #4
 800effc:	4619      	mov	r1, r3
 800effe:	4819      	ldr	r0, [pc, #100]	; (800f064 <prvAddCurrentTaskToDelayedList+0x98>)
 800f000:	f7fe f947 	bl	800d292 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f004:	e026      	b.n	800f054 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f006:	68fa      	ldr	r2, [r7, #12]
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	4413      	add	r3, r2
 800f00c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f00e:	4b14      	ldr	r3, [pc, #80]	; (800f060 <prvAddCurrentTaskToDelayedList+0x94>)
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	68ba      	ldr	r2, [r7, #8]
 800f014:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f016:	68ba      	ldr	r2, [r7, #8]
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	429a      	cmp	r2, r3
 800f01c:	d209      	bcs.n	800f032 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f01e:	4b12      	ldr	r3, [pc, #72]	; (800f068 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f020:	681a      	ldr	r2, [r3, #0]
 800f022:	4b0f      	ldr	r3, [pc, #60]	; (800f060 <prvAddCurrentTaskToDelayedList+0x94>)
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	3304      	adds	r3, #4
 800f028:	4619      	mov	r1, r3
 800f02a:	4610      	mov	r0, r2
 800f02c:	f7fe f955 	bl	800d2da <vListInsert>
}
 800f030:	e010      	b.n	800f054 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f032:	4b0e      	ldr	r3, [pc, #56]	; (800f06c <prvAddCurrentTaskToDelayedList+0xa0>)
 800f034:	681a      	ldr	r2, [r3, #0]
 800f036:	4b0a      	ldr	r3, [pc, #40]	; (800f060 <prvAddCurrentTaskToDelayedList+0x94>)
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	3304      	adds	r3, #4
 800f03c:	4619      	mov	r1, r3
 800f03e:	4610      	mov	r0, r2
 800f040:	f7fe f94b 	bl	800d2da <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f044:	4b0a      	ldr	r3, [pc, #40]	; (800f070 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	68ba      	ldr	r2, [r7, #8]
 800f04a:	429a      	cmp	r2, r3
 800f04c:	d202      	bcs.n	800f054 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f04e:	4a08      	ldr	r2, [pc, #32]	; (800f070 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f050:	68bb      	ldr	r3, [r7, #8]
 800f052:	6013      	str	r3, [r2, #0]
}
 800f054:	bf00      	nop
 800f056:	3710      	adds	r7, #16
 800f058:	46bd      	mov	sp, r7
 800f05a:	bd80      	pop	{r7, pc}
 800f05c:	200011dc 	.word	0x200011dc
 800f060:	20000d04 	.word	0x20000d04
 800f064:	200011c4 	.word	0x200011c4
 800f068:	20001194 	.word	0x20001194
 800f06c:	20001190 	.word	0x20001190
 800f070:	200011f8 	.word	0x200011f8

0800f074 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f074:	b580      	push	{r7, lr}
 800f076:	b08a      	sub	sp, #40	; 0x28
 800f078:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f07a:	2300      	movs	r3, #0
 800f07c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f07e:	f000 faff 	bl	800f680 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f082:	4b1c      	ldr	r3, [pc, #112]	; (800f0f4 <xTimerCreateTimerTask+0x80>)
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	2b00      	cmp	r3, #0
 800f088:	d021      	beq.n	800f0ce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f08a:	2300      	movs	r3, #0
 800f08c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f08e:	2300      	movs	r3, #0
 800f090:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f092:	1d3a      	adds	r2, r7, #4
 800f094:	f107 0108 	add.w	r1, r7, #8
 800f098:	f107 030c 	add.w	r3, r7, #12
 800f09c:	4618      	mov	r0, r3
 800f09e:	f7fe f8b1 	bl	800d204 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f0a2:	6879      	ldr	r1, [r7, #4]
 800f0a4:	68bb      	ldr	r3, [r7, #8]
 800f0a6:	68fa      	ldr	r2, [r7, #12]
 800f0a8:	9202      	str	r2, [sp, #8]
 800f0aa:	9301      	str	r3, [sp, #4]
 800f0ac:	2302      	movs	r3, #2
 800f0ae:	9300      	str	r3, [sp, #0]
 800f0b0:	2300      	movs	r3, #0
 800f0b2:	460a      	mov	r2, r1
 800f0b4:	4910      	ldr	r1, [pc, #64]	; (800f0f8 <xTimerCreateTimerTask+0x84>)
 800f0b6:	4811      	ldr	r0, [pc, #68]	; (800f0fc <xTimerCreateTimerTask+0x88>)
 800f0b8:	f7fe ff26 	bl	800df08 <xTaskCreateStatic>
 800f0bc:	4602      	mov	r2, r0
 800f0be:	4b10      	ldr	r3, [pc, #64]	; (800f100 <xTimerCreateTimerTask+0x8c>)
 800f0c0:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f0c2:	4b0f      	ldr	r3, [pc, #60]	; (800f100 <xTimerCreateTimerTask+0x8c>)
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d001      	beq.n	800f0ce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f0ca:	2301      	movs	r3, #1
 800f0cc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f0ce:	697b      	ldr	r3, [r7, #20]
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d109      	bne.n	800f0e8 <xTimerCreateTimerTask+0x74>
	__asm volatile
 800f0d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0d8:	f383 8811 	msr	BASEPRI, r3
 800f0dc:	f3bf 8f6f 	isb	sy
 800f0e0:	f3bf 8f4f 	dsb	sy
 800f0e4:	613b      	str	r3, [r7, #16]
 800f0e6:	e7fe      	b.n	800f0e6 <xTimerCreateTimerTask+0x72>
	return xReturn;
 800f0e8:	697b      	ldr	r3, [r7, #20]
}
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	3718      	adds	r7, #24
 800f0ee:	46bd      	mov	sp, r7
 800f0f0:	bd80      	pop	{r7, pc}
 800f0f2:	bf00      	nop
 800f0f4:	2000123c 	.word	0x2000123c
 800f0f8:	08019374 	.word	0x08019374
 800f0fc:	0800f235 	.word	0x0800f235
 800f100:	20001240 	.word	0x20001240

0800f104 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f104:	b580      	push	{r7, lr}
 800f106:	b08a      	sub	sp, #40	; 0x28
 800f108:	af00      	add	r7, sp, #0
 800f10a:	60f8      	str	r0, [r7, #12]
 800f10c:	60b9      	str	r1, [r7, #8]
 800f10e:	607a      	str	r2, [r7, #4]
 800f110:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f112:	2300      	movs	r3, #0
 800f114:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d109      	bne.n	800f130 <xTimerGenericCommand+0x2c>
 800f11c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f120:	f383 8811 	msr	BASEPRI, r3
 800f124:	f3bf 8f6f 	isb	sy
 800f128:	f3bf 8f4f 	dsb	sy
 800f12c:	623b      	str	r3, [r7, #32]
 800f12e:	e7fe      	b.n	800f12e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f130:	4b19      	ldr	r3, [pc, #100]	; (800f198 <xTimerGenericCommand+0x94>)
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d02a      	beq.n	800f18e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f138:	68bb      	ldr	r3, [r7, #8]
 800f13a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f144:	68bb      	ldr	r3, [r7, #8]
 800f146:	2b05      	cmp	r3, #5
 800f148:	dc18      	bgt.n	800f17c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f14a:	f7ff fd83 	bl	800ec54 <xTaskGetSchedulerState>
 800f14e:	4603      	mov	r3, r0
 800f150:	2b02      	cmp	r3, #2
 800f152:	d109      	bne.n	800f168 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f154:	4b10      	ldr	r3, [pc, #64]	; (800f198 <xTimerGenericCommand+0x94>)
 800f156:	6818      	ldr	r0, [r3, #0]
 800f158:	f107 0110 	add.w	r1, r7, #16
 800f15c:	2300      	movs	r3, #0
 800f15e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f160:	f7fe fa5c 	bl	800d61c <xQueueGenericSend>
 800f164:	6278      	str	r0, [r7, #36]	; 0x24
 800f166:	e012      	b.n	800f18e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f168:	4b0b      	ldr	r3, [pc, #44]	; (800f198 <xTimerGenericCommand+0x94>)
 800f16a:	6818      	ldr	r0, [r3, #0]
 800f16c:	f107 0110 	add.w	r1, r7, #16
 800f170:	2300      	movs	r3, #0
 800f172:	2200      	movs	r2, #0
 800f174:	f7fe fa52 	bl	800d61c <xQueueGenericSend>
 800f178:	6278      	str	r0, [r7, #36]	; 0x24
 800f17a:	e008      	b.n	800f18e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f17c:	4b06      	ldr	r3, [pc, #24]	; (800f198 <xTimerGenericCommand+0x94>)
 800f17e:	6818      	ldr	r0, [r3, #0]
 800f180:	f107 0110 	add.w	r1, r7, #16
 800f184:	2300      	movs	r3, #0
 800f186:	683a      	ldr	r2, [r7, #0]
 800f188:	f7fe fb42 	bl	800d810 <xQueueGenericSendFromISR>
 800f18c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f18e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f190:	4618      	mov	r0, r3
 800f192:	3728      	adds	r7, #40	; 0x28
 800f194:	46bd      	mov	sp, r7
 800f196:	bd80      	pop	{r7, pc}
 800f198:	2000123c 	.word	0x2000123c

0800f19c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f19c:	b580      	push	{r7, lr}
 800f19e:	b088      	sub	sp, #32
 800f1a0:	af02      	add	r7, sp, #8
 800f1a2:	6078      	str	r0, [r7, #4]
 800f1a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f1a6:	4b22      	ldr	r3, [pc, #136]	; (800f230 <prvProcessExpiredTimer+0x94>)
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	68db      	ldr	r3, [r3, #12]
 800f1ac:	68db      	ldr	r3, [r3, #12]
 800f1ae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f1b0:	697b      	ldr	r3, [r7, #20]
 800f1b2:	3304      	adds	r3, #4
 800f1b4:	4618      	mov	r0, r3
 800f1b6:	f7fe f8c9 	bl	800d34c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f1ba:	697b      	ldr	r3, [r7, #20]
 800f1bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f1c0:	f003 0304 	and.w	r3, r3, #4
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d021      	beq.n	800f20c <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f1c8:	697b      	ldr	r3, [r7, #20]
 800f1ca:	699a      	ldr	r2, [r3, #24]
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	18d1      	adds	r1, r2, r3
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	683a      	ldr	r2, [r7, #0]
 800f1d4:	6978      	ldr	r0, [r7, #20]
 800f1d6:	f000 f8d1 	bl	800f37c <prvInsertTimerInActiveList>
 800f1da:	4603      	mov	r3, r0
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d01e      	beq.n	800f21e <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f1e0:	2300      	movs	r3, #0
 800f1e2:	9300      	str	r3, [sp, #0]
 800f1e4:	2300      	movs	r3, #0
 800f1e6:	687a      	ldr	r2, [r7, #4]
 800f1e8:	2100      	movs	r1, #0
 800f1ea:	6978      	ldr	r0, [r7, #20]
 800f1ec:	f7ff ff8a 	bl	800f104 <xTimerGenericCommand>
 800f1f0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f1f2:	693b      	ldr	r3, [r7, #16]
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d112      	bne.n	800f21e <prvProcessExpiredTimer+0x82>
 800f1f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1fc:	f383 8811 	msr	BASEPRI, r3
 800f200:	f3bf 8f6f 	isb	sy
 800f204:	f3bf 8f4f 	dsb	sy
 800f208:	60fb      	str	r3, [r7, #12]
 800f20a:	e7fe      	b.n	800f20a <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f20c:	697b      	ldr	r3, [r7, #20]
 800f20e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f212:	f023 0301 	bic.w	r3, r3, #1
 800f216:	b2da      	uxtb	r2, r3
 800f218:	697b      	ldr	r3, [r7, #20]
 800f21a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f21e:	697b      	ldr	r3, [r7, #20]
 800f220:	6a1b      	ldr	r3, [r3, #32]
 800f222:	6978      	ldr	r0, [r7, #20]
 800f224:	4798      	blx	r3
}
 800f226:	bf00      	nop
 800f228:	3718      	adds	r7, #24
 800f22a:	46bd      	mov	sp, r7
 800f22c:	bd80      	pop	{r7, pc}
 800f22e:	bf00      	nop
 800f230:	20001234 	.word	0x20001234

0800f234 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f234:	b580      	push	{r7, lr}
 800f236:	b084      	sub	sp, #16
 800f238:	af00      	add	r7, sp, #0
 800f23a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f23c:	f107 0308 	add.w	r3, r7, #8
 800f240:	4618      	mov	r0, r3
 800f242:	f000 f857 	bl	800f2f4 <prvGetNextExpireTime>
 800f246:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f248:	68bb      	ldr	r3, [r7, #8]
 800f24a:	4619      	mov	r1, r3
 800f24c:	68f8      	ldr	r0, [r7, #12]
 800f24e:	f000 f803 	bl	800f258 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f252:	f000 f8d5 	bl	800f400 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f256:	e7f1      	b.n	800f23c <prvTimerTask+0x8>

0800f258 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f258:	b580      	push	{r7, lr}
 800f25a:	b084      	sub	sp, #16
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	6078      	str	r0, [r7, #4]
 800f260:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f262:	f7ff f909 	bl	800e478 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f266:	f107 0308 	add.w	r3, r7, #8
 800f26a:	4618      	mov	r0, r3
 800f26c:	f000 f866 	bl	800f33c <prvSampleTimeNow>
 800f270:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f272:	68bb      	ldr	r3, [r7, #8]
 800f274:	2b00      	cmp	r3, #0
 800f276:	d130      	bne.n	800f2da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f278:	683b      	ldr	r3, [r7, #0]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d10a      	bne.n	800f294 <prvProcessTimerOrBlockTask+0x3c>
 800f27e:	687a      	ldr	r2, [r7, #4]
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	429a      	cmp	r2, r3
 800f284:	d806      	bhi.n	800f294 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f286:	f7ff f905 	bl	800e494 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f28a:	68f9      	ldr	r1, [r7, #12]
 800f28c:	6878      	ldr	r0, [r7, #4]
 800f28e:	f7ff ff85 	bl	800f19c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f292:	e024      	b.n	800f2de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f294:	683b      	ldr	r3, [r7, #0]
 800f296:	2b00      	cmp	r3, #0
 800f298:	d008      	beq.n	800f2ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f29a:	4b13      	ldr	r3, [pc, #76]	; (800f2e8 <prvProcessTimerOrBlockTask+0x90>)
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d101      	bne.n	800f2a8 <prvProcessTimerOrBlockTask+0x50>
 800f2a4:	2301      	movs	r3, #1
 800f2a6:	e000      	b.n	800f2aa <prvProcessTimerOrBlockTask+0x52>
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f2ac:	4b0f      	ldr	r3, [pc, #60]	; (800f2ec <prvProcessTimerOrBlockTask+0x94>)
 800f2ae:	6818      	ldr	r0, [r3, #0]
 800f2b0:	687a      	ldr	r2, [r7, #4]
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	1ad3      	subs	r3, r2, r3
 800f2b6:	683a      	ldr	r2, [r7, #0]
 800f2b8:	4619      	mov	r1, r3
 800f2ba:	f7fe fdf1 	bl	800dea0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f2be:	f7ff f8e9 	bl	800e494 <xTaskResumeAll>
 800f2c2:	4603      	mov	r3, r0
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d10a      	bne.n	800f2de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f2c8:	4b09      	ldr	r3, [pc, #36]	; (800f2f0 <prvProcessTimerOrBlockTask+0x98>)
 800f2ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f2ce:	601a      	str	r2, [r3, #0]
 800f2d0:	f3bf 8f4f 	dsb	sy
 800f2d4:	f3bf 8f6f 	isb	sy
}
 800f2d8:	e001      	b.n	800f2de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f2da:	f7ff f8db 	bl	800e494 <xTaskResumeAll>
}
 800f2de:	bf00      	nop
 800f2e0:	3710      	adds	r7, #16
 800f2e2:	46bd      	mov	sp, r7
 800f2e4:	bd80      	pop	{r7, pc}
 800f2e6:	bf00      	nop
 800f2e8:	20001238 	.word	0x20001238
 800f2ec:	2000123c 	.word	0x2000123c
 800f2f0:	e000ed04 	.word	0xe000ed04

0800f2f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f2f4:	b480      	push	{r7}
 800f2f6:	b085      	sub	sp, #20
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f2fc:	4b0e      	ldr	r3, [pc, #56]	; (800f338 <prvGetNextExpireTime+0x44>)
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	2b00      	cmp	r3, #0
 800f304:	d101      	bne.n	800f30a <prvGetNextExpireTime+0x16>
 800f306:	2201      	movs	r2, #1
 800f308:	e000      	b.n	800f30c <prvGetNextExpireTime+0x18>
 800f30a:	2200      	movs	r2, #0
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	2b00      	cmp	r3, #0
 800f316:	d105      	bne.n	800f324 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f318:	4b07      	ldr	r3, [pc, #28]	; (800f338 <prvGetNextExpireTime+0x44>)
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	68db      	ldr	r3, [r3, #12]
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	60fb      	str	r3, [r7, #12]
 800f322:	e001      	b.n	800f328 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f324:	2300      	movs	r3, #0
 800f326:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f328:	68fb      	ldr	r3, [r7, #12]
}
 800f32a:	4618      	mov	r0, r3
 800f32c:	3714      	adds	r7, #20
 800f32e:	46bd      	mov	sp, r7
 800f330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f334:	4770      	bx	lr
 800f336:	bf00      	nop
 800f338:	20001234 	.word	0x20001234

0800f33c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f33c:	b580      	push	{r7, lr}
 800f33e:	b084      	sub	sp, #16
 800f340:	af00      	add	r7, sp, #0
 800f342:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f344:	f7ff f942 	bl	800e5cc <xTaskGetTickCount>
 800f348:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f34a:	4b0b      	ldr	r3, [pc, #44]	; (800f378 <prvSampleTimeNow+0x3c>)
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	68fa      	ldr	r2, [r7, #12]
 800f350:	429a      	cmp	r2, r3
 800f352:	d205      	bcs.n	800f360 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f354:	f000 f930 	bl	800f5b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	2201      	movs	r2, #1
 800f35c:	601a      	str	r2, [r3, #0]
 800f35e:	e002      	b.n	800f366 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	2200      	movs	r2, #0
 800f364:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f366:	4a04      	ldr	r2, [pc, #16]	; (800f378 <prvSampleTimeNow+0x3c>)
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f36c:	68fb      	ldr	r3, [r7, #12]
}
 800f36e:	4618      	mov	r0, r3
 800f370:	3710      	adds	r7, #16
 800f372:	46bd      	mov	sp, r7
 800f374:	bd80      	pop	{r7, pc}
 800f376:	bf00      	nop
 800f378:	20001244 	.word	0x20001244

0800f37c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f37c:	b580      	push	{r7, lr}
 800f37e:	b086      	sub	sp, #24
 800f380:	af00      	add	r7, sp, #0
 800f382:	60f8      	str	r0, [r7, #12]
 800f384:	60b9      	str	r1, [r7, #8]
 800f386:	607a      	str	r2, [r7, #4]
 800f388:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f38a:	2300      	movs	r3, #0
 800f38c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	68ba      	ldr	r2, [r7, #8]
 800f392:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	68fa      	ldr	r2, [r7, #12]
 800f398:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f39a:	68ba      	ldr	r2, [r7, #8]
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	429a      	cmp	r2, r3
 800f3a0:	d812      	bhi.n	800f3c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f3a2:	687a      	ldr	r2, [r7, #4]
 800f3a4:	683b      	ldr	r3, [r7, #0]
 800f3a6:	1ad2      	subs	r2, r2, r3
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	699b      	ldr	r3, [r3, #24]
 800f3ac:	429a      	cmp	r2, r3
 800f3ae:	d302      	bcc.n	800f3b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f3b0:	2301      	movs	r3, #1
 800f3b2:	617b      	str	r3, [r7, #20]
 800f3b4:	e01b      	b.n	800f3ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f3b6:	4b10      	ldr	r3, [pc, #64]	; (800f3f8 <prvInsertTimerInActiveList+0x7c>)
 800f3b8:	681a      	ldr	r2, [r3, #0]
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	3304      	adds	r3, #4
 800f3be:	4619      	mov	r1, r3
 800f3c0:	4610      	mov	r0, r2
 800f3c2:	f7fd ff8a 	bl	800d2da <vListInsert>
 800f3c6:	e012      	b.n	800f3ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f3c8:	687a      	ldr	r2, [r7, #4]
 800f3ca:	683b      	ldr	r3, [r7, #0]
 800f3cc:	429a      	cmp	r2, r3
 800f3ce:	d206      	bcs.n	800f3de <prvInsertTimerInActiveList+0x62>
 800f3d0:	68ba      	ldr	r2, [r7, #8]
 800f3d2:	683b      	ldr	r3, [r7, #0]
 800f3d4:	429a      	cmp	r2, r3
 800f3d6:	d302      	bcc.n	800f3de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f3d8:	2301      	movs	r3, #1
 800f3da:	617b      	str	r3, [r7, #20]
 800f3dc:	e007      	b.n	800f3ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f3de:	4b07      	ldr	r3, [pc, #28]	; (800f3fc <prvInsertTimerInActiveList+0x80>)
 800f3e0:	681a      	ldr	r2, [r3, #0]
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	3304      	adds	r3, #4
 800f3e6:	4619      	mov	r1, r3
 800f3e8:	4610      	mov	r0, r2
 800f3ea:	f7fd ff76 	bl	800d2da <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f3ee:	697b      	ldr	r3, [r7, #20]
}
 800f3f0:	4618      	mov	r0, r3
 800f3f2:	3718      	adds	r7, #24
 800f3f4:	46bd      	mov	sp, r7
 800f3f6:	bd80      	pop	{r7, pc}
 800f3f8:	20001238 	.word	0x20001238
 800f3fc:	20001234 	.word	0x20001234

0800f400 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f400:	b580      	push	{r7, lr}
 800f402:	b08e      	sub	sp, #56	; 0x38
 800f404:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f406:	e0c6      	b.n	800f596 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	da17      	bge.n	800f43e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f40e:	1d3b      	adds	r3, r7, #4
 800f410:	3304      	adds	r3, #4
 800f412:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f416:	2b00      	cmp	r3, #0
 800f418:	d109      	bne.n	800f42e <prvProcessReceivedCommands+0x2e>
 800f41a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f41e:	f383 8811 	msr	BASEPRI, r3
 800f422:	f3bf 8f6f 	isb	sy
 800f426:	f3bf 8f4f 	dsb	sy
 800f42a:	61fb      	str	r3, [r7, #28]
 800f42c:	e7fe      	b.n	800f42c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f42e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f434:	6850      	ldr	r0, [r2, #4]
 800f436:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f438:	6892      	ldr	r2, [r2, #8]
 800f43a:	4611      	mov	r1, r2
 800f43c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	2b00      	cmp	r3, #0
 800f442:	f2c0 80a7 	blt.w	800f594 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f44a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f44c:	695b      	ldr	r3, [r3, #20]
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d004      	beq.n	800f45c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f454:	3304      	adds	r3, #4
 800f456:	4618      	mov	r0, r3
 800f458:	f7fd ff78 	bl	800d34c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f45c:	463b      	mov	r3, r7
 800f45e:	4618      	mov	r0, r3
 800f460:	f7ff ff6c 	bl	800f33c <prvSampleTimeNow>
 800f464:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	2b09      	cmp	r3, #9
 800f46a:	f200 8094 	bhi.w	800f596 <prvProcessReceivedCommands+0x196>
 800f46e:	a201      	add	r2, pc, #4	; (adr r2, 800f474 <prvProcessReceivedCommands+0x74>)
 800f470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f474:	0800f49d 	.word	0x0800f49d
 800f478:	0800f49d 	.word	0x0800f49d
 800f47c:	0800f49d 	.word	0x0800f49d
 800f480:	0800f50f 	.word	0x0800f50f
 800f484:	0800f523 	.word	0x0800f523
 800f488:	0800f56b 	.word	0x0800f56b
 800f48c:	0800f49d 	.word	0x0800f49d
 800f490:	0800f49d 	.word	0x0800f49d
 800f494:	0800f50f 	.word	0x0800f50f
 800f498:	0800f523 	.word	0x0800f523
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f49c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f49e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f4a2:	f043 0301 	orr.w	r3, r3, #1
 800f4a6:	b2da      	uxtb	r2, r3
 800f4a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f4ae:	68ba      	ldr	r2, [r7, #8]
 800f4b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4b2:	699b      	ldr	r3, [r3, #24]
 800f4b4:	18d1      	adds	r1, r2, r3
 800f4b6:	68bb      	ldr	r3, [r7, #8]
 800f4b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f4bc:	f7ff ff5e 	bl	800f37c <prvInsertTimerInActiveList>
 800f4c0:	4603      	mov	r3, r0
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d067      	beq.n	800f596 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4c8:	6a1b      	ldr	r3, [r3, #32]
 800f4ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f4cc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f4ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f4d4:	f003 0304 	and.w	r3, r3, #4
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d05c      	beq.n	800f596 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f4dc:	68ba      	ldr	r2, [r7, #8]
 800f4de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4e0:	699b      	ldr	r3, [r3, #24]
 800f4e2:	441a      	add	r2, r3
 800f4e4:	2300      	movs	r3, #0
 800f4e6:	9300      	str	r3, [sp, #0]
 800f4e8:	2300      	movs	r3, #0
 800f4ea:	2100      	movs	r1, #0
 800f4ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f4ee:	f7ff fe09 	bl	800f104 <xTimerGenericCommand>
 800f4f2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f4f4:	6a3b      	ldr	r3, [r7, #32]
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d14d      	bne.n	800f596 <prvProcessReceivedCommands+0x196>
 800f4fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4fe:	f383 8811 	msr	BASEPRI, r3
 800f502:	f3bf 8f6f 	isb	sy
 800f506:	f3bf 8f4f 	dsb	sy
 800f50a:	61bb      	str	r3, [r7, #24]
 800f50c:	e7fe      	b.n	800f50c <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f50e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f510:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f514:	f023 0301 	bic.w	r3, r3, #1
 800f518:	b2da      	uxtb	r2, r3
 800f51a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f51c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800f520:	e039      	b.n	800f596 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f524:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f528:	f043 0301 	orr.w	r3, r3, #1
 800f52c:	b2da      	uxtb	r2, r3
 800f52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f530:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f534:	68ba      	ldr	r2, [r7, #8]
 800f536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f538:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f53a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f53c:	699b      	ldr	r3, [r3, #24]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d109      	bne.n	800f556 <prvProcessReceivedCommands+0x156>
 800f542:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f546:	f383 8811 	msr	BASEPRI, r3
 800f54a:	f3bf 8f6f 	isb	sy
 800f54e:	f3bf 8f4f 	dsb	sy
 800f552:	617b      	str	r3, [r7, #20]
 800f554:	e7fe      	b.n	800f554 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f558:	699a      	ldr	r2, [r3, #24]
 800f55a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f55c:	18d1      	adds	r1, r2, r3
 800f55e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f562:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f564:	f7ff ff0a 	bl	800f37c <prvInsertTimerInActiveList>
					break;
 800f568:	e015      	b.n	800f596 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f56a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f56c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f570:	f003 0302 	and.w	r3, r3, #2
 800f574:	2b00      	cmp	r3, #0
 800f576:	d103      	bne.n	800f580 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800f578:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f57a:	f000 fbc3 	bl	800fd04 <vPortFree>
 800f57e:	e00a      	b.n	800f596 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f582:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f586:	f023 0301 	bic.w	r3, r3, #1
 800f58a:	b2da      	uxtb	r2, r3
 800f58c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f58e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f592:	e000      	b.n	800f596 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800f594:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f596:	4b07      	ldr	r3, [pc, #28]	; (800f5b4 <prvProcessReceivedCommands+0x1b4>)
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	1d39      	adds	r1, r7, #4
 800f59c:	2200      	movs	r2, #0
 800f59e:	4618      	mov	r0, r3
 800f5a0:	f7fe f9ca 	bl	800d938 <xQueueReceive>
 800f5a4:	4603      	mov	r3, r0
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	f47f af2e 	bne.w	800f408 <prvProcessReceivedCommands+0x8>
	}
}
 800f5ac:	bf00      	nop
 800f5ae:	3730      	adds	r7, #48	; 0x30
 800f5b0:	46bd      	mov	sp, r7
 800f5b2:	bd80      	pop	{r7, pc}
 800f5b4:	2000123c 	.word	0x2000123c

0800f5b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f5b8:	b580      	push	{r7, lr}
 800f5ba:	b088      	sub	sp, #32
 800f5bc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f5be:	e047      	b.n	800f650 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f5c0:	4b2d      	ldr	r3, [pc, #180]	; (800f678 <prvSwitchTimerLists+0xc0>)
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	68db      	ldr	r3, [r3, #12]
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f5ca:	4b2b      	ldr	r3, [pc, #172]	; (800f678 <prvSwitchTimerLists+0xc0>)
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	68db      	ldr	r3, [r3, #12]
 800f5d0:	68db      	ldr	r3, [r3, #12]
 800f5d2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	3304      	adds	r3, #4
 800f5d8:	4618      	mov	r0, r3
 800f5da:	f7fd feb7 	bl	800d34c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	6a1b      	ldr	r3, [r3, #32]
 800f5e2:	68f8      	ldr	r0, [r7, #12]
 800f5e4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f5ec:	f003 0304 	and.w	r3, r3, #4
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d02d      	beq.n	800f650 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	699b      	ldr	r3, [r3, #24]
 800f5f8:	693a      	ldr	r2, [r7, #16]
 800f5fa:	4413      	add	r3, r2
 800f5fc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f5fe:	68ba      	ldr	r2, [r7, #8]
 800f600:	693b      	ldr	r3, [r7, #16]
 800f602:	429a      	cmp	r2, r3
 800f604:	d90e      	bls.n	800f624 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	68ba      	ldr	r2, [r7, #8]
 800f60a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	68fa      	ldr	r2, [r7, #12]
 800f610:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f612:	4b19      	ldr	r3, [pc, #100]	; (800f678 <prvSwitchTimerLists+0xc0>)
 800f614:	681a      	ldr	r2, [r3, #0]
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	3304      	adds	r3, #4
 800f61a:	4619      	mov	r1, r3
 800f61c:	4610      	mov	r0, r2
 800f61e:	f7fd fe5c 	bl	800d2da <vListInsert>
 800f622:	e015      	b.n	800f650 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f624:	2300      	movs	r3, #0
 800f626:	9300      	str	r3, [sp, #0]
 800f628:	2300      	movs	r3, #0
 800f62a:	693a      	ldr	r2, [r7, #16]
 800f62c:	2100      	movs	r1, #0
 800f62e:	68f8      	ldr	r0, [r7, #12]
 800f630:	f7ff fd68 	bl	800f104 <xTimerGenericCommand>
 800f634:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d109      	bne.n	800f650 <prvSwitchTimerLists+0x98>
 800f63c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f640:	f383 8811 	msr	BASEPRI, r3
 800f644:	f3bf 8f6f 	isb	sy
 800f648:	f3bf 8f4f 	dsb	sy
 800f64c:	603b      	str	r3, [r7, #0]
 800f64e:	e7fe      	b.n	800f64e <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f650:	4b09      	ldr	r3, [pc, #36]	; (800f678 <prvSwitchTimerLists+0xc0>)
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	2b00      	cmp	r3, #0
 800f658:	d1b2      	bne.n	800f5c0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f65a:	4b07      	ldr	r3, [pc, #28]	; (800f678 <prvSwitchTimerLists+0xc0>)
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f660:	4b06      	ldr	r3, [pc, #24]	; (800f67c <prvSwitchTimerLists+0xc4>)
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	4a04      	ldr	r2, [pc, #16]	; (800f678 <prvSwitchTimerLists+0xc0>)
 800f666:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f668:	4a04      	ldr	r2, [pc, #16]	; (800f67c <prvSwitchTimerLists+0xc4>)
 800f66a:	697b      	ldr	r3, [r7, #20]
 800f66c:	6013      	str	r3, [r2, #0]
}
 800f66e:	bf00      	nop
 800f670:	3718      	adds	r7, #24
 800f672:	46bd      	mov	sp, r7
 800f674:	bd80      	pop	{r7, pc}
 800f676:	bf00      	nop
 800f678:	20001234 	.word	0x20001234
 800f67c:	20001238 	.word	0x20001238

0800f680 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f680:	b580      	push	{r7, lr}
 800f682:	b082      	sub	sp, #8
 800f684:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f686:	f000 f961 	bl	800f94c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f68a:	4b15      	ldr	r3, [pc, #84]	; (800f6e0 <prvCheckForValidListAndQueue+0x60>)
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d120      	bne.n	800f6d4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f692:	4814      	ldr	r0, [pc, #80]	; (800f6e4 <prvCheckForValidListAndQueue+0x64>)
 800f694:	f7fd fdd0 	bl	800d238 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f698:	4813      	ldr	r0, [pc, #76]	; (800f6e8 <prvCheckForValidListAndQueue+0x68>)
 800f69a:	f7fd fdcd 	bl	800d238 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f69e:	4b13      	ldr	r3, [pc, #76]	; (800f6ec <prvCheckForValidListAndQueue+0x6c>)
 800f6a0:	4a10      	ldr	r2, [pc, #64]	; (800f6e4 <prvCheckForValidListAndQueue+0x64>)
 800f6a2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f6a4:	4b12      	ldr	r3, [pc, #72]	; (800f6f0 <prvCheckForValidListAndQueue+0x70>)
 800f6a6:	4a10      	ldr	r2, [pc, #64]	; (800f6e8 <prvCheckForValidListAndQueue+0x68>)
 800f6a8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	9300      	str	r3, [sp, #0]
 800f6ae:	4b11      	ldr	r3, [pc, #68]	; (800f6f4 <prvCheckForValidListAndQueue+0x74>)
 800f6b0:	4a11      	ldr	r2, [pc, #68]	; (800f6f8 <prvCheckForValidListAndQueue+0x78>)
 800f6b2:	2110      	movs	r1, #16
 800f6b4:	200a      	movs	r0, #10
 800f6b6:	f7fd fedb 	bl	800d470 <xQueueGenericCreateStatic>
 800f6ba:	4602      	mov	r2, r0
 800f6bc:	4b08      	ldr	r3, [pc, #32]	; (800f6e0 <prvCheckForValidListAndQueue+0x60>)
 800f6be:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f6c0:	4b07      	ldr	r3, [pc, #28]	; (800f6e0 <prvCheckForValidListAndQueue+0x60>)
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d005      	beq.n	800f6d4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f6c8:	4b05      	ldr	r3, [pc, #20]	; (800f6e0 <prvCheckForValidListAndQueue+0x60>)
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	490b      	ldr	r1, [pc, #44]	; (800f6fc <prvCheckForValidListAndQueue+0x7c>)
 800f6ce:	4618      	mov	r0, r3
 800f6d0:	f7fe fbbe 	bl	800de50 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f6d4:	f000 f968 	bl	800f9a8 <vPortExitCritical>
}
 800f6d8:	bf00      	nop
 800f6da:	46bd      	mov	sp, r7
 800f6dc:	bd80      	pop	{r7, pc}
 800f6de:	bf00      	nop
 800f6e0:	2000123c 	.word	0x2000123c
 800f6e4:	2000120c 	.word	0x2000120c
 800f6e8:	20001220 	.word	0x20001220
 800f6ec:	20001234 	.word	0x20001234
 800f6f0:	20001238 	.word	0x20001238
 800f6f4:	200012e8 	.word	0x200012e8
 800f6f8:	20001248 	.word	0x20001248
 800f6fc:	0801937c 	.word	0x0801937c

0800f700 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f700:	b480      	push	{r7}
 800f702:	b085      	sub	sp, #20
 800f704:	af00      	add	r7, sp, #0
 800f706:	60f8      	str	r0, [r7, #12]
 800f708:	60b9      	str	r1, [r7, #8]
 800f70a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	3b04      	subs	r3, #4
 800f710:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f718:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	3b04      	subs	r3, #4
 800f71e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f720:	68bb      	ldr	r3, [r7, #8]
 800f722:	f023 0201 	bic.w	r2, r3, #1
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	3b04      	subs	r3, #4
 800f72e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f730:	4a0c      	ldr	r2, [pc, #48]	; (800f764 <pxPortInitialiseStack+0x64>)
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	3b14      	subs	r3, #20
 800f73a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f73c:	687a      	ldr	r2, [r7, #4]
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	3b04      	subs	r3, #4
 800f746:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	f06f 0202 	mvn.w	r2, #2
 800f74e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	3b20      	subs	r3, #32
 800f754:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f756:	68fb      	ldr	r3, [r7, #12]
}
 800f758:	4618      	mov	r0, r3
 800f75a:	3714      	adds	r7, #20
 800f75c:	46bd      	mov	sp, r7
 800f75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f762:	4770      	bx	lr
 800f764:	0800f769 	.word	0x0800f769

0800f768 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f768:	b480      	push	{r7}
 800f76a:	b085      	sub	sp, #20
 800f76c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f76e:	2300      	movs	r3, #0
 800f770:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f772:	4b11      	ldr	r3, [pc, #68]	; (800f7b8 <prvTaskExitError+0x50>)
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f77a:	d009      	beq.n	800f790 <prvTaskExitError+0x28>
 800f77c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f780:	f383 8811 	msr	BASEPRI, r3
 800f784:	f3bf 8f6f 	isb	sy
 800f788:	f3bf 8f4f 	dsb	sy
 800f78c:	60fb      	str	r3, [r7, #12]
 800f78e:	e7fe      	b.n	800f78e <prvTaskExitError+0x26>
 800f790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f794:	f383 8811 	msr	BASEPRI, r3
 800f798:	f3bf 8f6f 	isb	sy
 800f79c:	f3bf 8f4f 	dsb	sy
 800f7a0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f7a2:	bf00      	nop
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d0fc      	beq.n	800f7a4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f7aa:	bf00      	nop
 800f7ac:	3714      	adds	r7, #20
 800f7ae:	46bd      	mov	sp, r7
 800f7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b4:	4770      	bx	lr
 800f7b6:	bf00      	nop
 800f7b8:	2000011c 	.word	0x2000011c
 800f7bc:	00000000 	.word	0x00000000

0800f7c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f7c0:	4b07      	ldr	r3, [pc, #28]	; (800f7e0 <pxCurrentTCBConst2>)
 800f7c2:	6819      	ldr	r1, [r3, #0]
 800f7c4:	6808      	ldr	r0, [r1, #0]
 800f7c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7ca:	f380 8809 	msr	PSP, r0
 800f7ce:	f3bf 8f6f 	isb	sy
 800f7d2:	f04f 0000 	mov.w	r0, #0
 800f7d6:	f380 8811 	msr	BASEPRI, r0
 800f7da:	4770      	bx	lr
 800f7dc:	f3af 8000 	nop.w

0800f7e0 <pxCurrentTCBConst2>:
 800f7e0:	20000d04 	.word	0x20000d04
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f7e4:	bf00      	nop
 800f7e6:	bf00      	nop

0800f7e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f7e8:	4808      	ldr	r0, [pc, #32]	; (800f80c <prvPortStartFirstTask+0x24>)
 800f7ea:	6800      	ldr	r0, [r0, #0]
 800f7ec:	6800      	ldr	r0, [r0, #0]
 800f7ee:	f380 8808 	msr	MSP, r0
 800f7f2:	f04f 0000 	mov.w	r0, #0
 800f7f6:	f380 8814 	msr	CONTROL, r0
 800f7fa:	b662      	cpsie	i
 800f7fc:	b661      	cpsie	f
 800f7fe:	f3bf 8f4f 	dsb	sy
 800f802:	f3bf 8f6f 	isb	sy
 800f806:	df00      	svc	0
 800f808:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f80a:	bf00      	nop
 800f80c:	e000ed08 	.word	0xe000ed08

0800f810 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f810:	b580      	push	{r7, lr}
 800f812:	b086      	sub	sp, #24
 800f814:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f816:	4b44      	ldr	r3, [pc, #272]	; (800f928 <xPortStartScheduler+0x118>)
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	4a44      	ldr	r2, [pc, #272]	; (800f92c <xPortStartScheduler+0x11c>)
 800f81c:	4293      	cmp	r3, r2
 800f81e:	d109      	bne.n	800f834 <xPortStartScheduler+0x24>
 800f820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f824:	f383 8811 	msr	BASEPRI, r3
 800f828:	f3bf 8f6f 	isb	sy
 800f82c:	f3bf 8f4f 	dsb	sy
 800f830:	613b      	str	r3, [r7, #16]
 800f832:	e7fe      	b.n	800f832 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f834:	4b3c      	ldr	r3, [pc, #240]	; (800f928 <xPortStartScheduler+0x118>)
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	4a3d      	ldr	r2, [pc, #244]	; (800f930 <xPortStartScheduler+0x120>)
 800f83a:	4293      	cmp	r3, r2
 800f83c:	d109      	bne.n	800f852 <xPortStartScheduler+0x42>
 800f83e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f842:	f383 8811 	msr	BASEPRI, r3
 800f846:	f3bf 8f6f 	isb	sy
 800f84a:	f3bf 8f4f 	dsb	sy
 800f84e:	60fb      	str	r3, [r7, #12]
 800f850:	e7fe      	b.n	800f850 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f852:	4b38      	ldr	r3, [pc, #224]	; (800f934 <xPortStartScheduler+0x124>)
 800f854:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f856:	697b      	ldr	r3, [r7, #20]
 800f858:	781b      	ldrb	r3, [r3, #0]
 800f85a:	b2db      	uxtb	r3, r3
 800f85c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f85e:	697b      	ldr	r3, [r7, #20]
 800f860:	22ff      	movs	r2, #255	; 0xff
 800f862:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f864:	697b      	ldr	r3, [r7, #20]
 800f866:	781b      	ldrb	r3, [r3, #0]
 800f868:	b2db      	uxtb	r3, r3
 800f86a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f86c:	78fb      	ldrb	r3, [r7, #3]
 800f86e:	b2db      	uxtb	r3, r3
 800f870:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f874:	b2da      	uxtb	r2, r3
 800f876:	4b30      	ldr	r3, [pc, #192]	; (800f938 <xPortStartScheduler+0x128>)
 800f878:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f87a:	4b30      	ldr	r3, [pc, #192]	; (800f93c <xPortStartScheduler+0x12c>)
 800f87c:	2207      	movs	r2, #7
 800f87e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f880:	e009      	b.n	800f896 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800f882:	4b2e      	ldr	r3, [pc, #184]	; (800f93c <xPortStartScheduler+0x12c>)
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	3b01      	subs	r3, #1
 800f888:	4a2c      	ldr	r2, [pc, #176]	; (800f93c <xPortStartScheduler+0x12c>)
 800f88a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f88c:	78fb      	ldrb	r3, [r7, #3]
 800f88e:	b2db      	uxtb	r3, r3
 800f890:	005b      	lsls	r3, r3, #1
 800f892:	b2db      	uxtb	r3, r3
 800f894:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f896:	78fb      	ldrb	r3, [r7, #3]
 800f898:	b2db      	uxtb	r3, r3
 800f89a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f89e:	2b80      	cmp	r3, #128	; 0x80
 800f8a0:	d0ef      	beq.n	800f882 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f8a2:	4b26      	ldr	r3, [pc, #152]	; (800f93c <xPortStartScheduler+0x12c>)
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	f1c3 0307 	rsb	r3, r3, #7
 800f8aa:	2b04      	cmp	r3, #4
 800f8ac:	d009      	beq.n	800f8c2 <xPortStartScheduler+0xb2>
 800f8ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8b2:	f383 8811 	msr	BASEPRI, r3
 800f8b6:	f3bf 8f6f 	isb	sy
 800f8ba:	f3bf 8f4f 	dsb	sy
 800f8be:	60bb      	str	r3, [r7, #8]
 800f8c0:	e7fe      	b.n	800f8c0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f8c2:	4b1e      	ldr	r3, [pc, #120]	; (800f93c <xPortStartScheduler+0x12c>)
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	021b      	lsls	r3, r3, #8
 800f8c8:	4a1c      	ldr	r2, [pc, #112]	; (800f93c <xPortStartScheduler+0x12c>)
 800f8ca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f8cc:	4b1b      	ldr	r3, [pc, #108]	; (800f93c <xPortStartScheduler+0x12c>)
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f8d4:	4a19      	ldr	r2, [pc, #100]	; (800f93c <xPortStartScheduler+0x12c>)
 800f8d6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	b2da      	uxtb	r2, r3
 800f8dc:	697b      	ldr	r3, [r7, #20]
 800f8de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f8e0:	4b17      	ldr	r3, [pc, #92]	; (800f940 <xPortStartScheduler+0x130>)
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	4a16      	ldr	r2, [pc, #88]	; (800f940 <xPortStartScheduler+0x130>)
 800f8e6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f8ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f8ec:	4b14      	ldr	r3, [pc, #80]	; (800f940 <xPortStartScheduler+0x130>)
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	4a13      	ldr	r2, [pc, #76]	; (800f940 <xPortStartScheduler+0x130>)
 800f8f2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f8f6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f8f8:	f000 f8d6 	bl	800faa8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f8fc:	4b11      	ldr	r3, [pc, #68]	; (800f944 <xPortStartScheduler+0x134>)
 800f8fe:	2200      	movs	r2, #0
 800f900:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f902:	f000 f8f5 	bl	800faf0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f906:	4b10      	ldr	r3, [pc, #64]	; (800f948 <xPortStartScheduler+0x138>)
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	4a0f      	ldr	r2, [pc, #60]	; (800f948 <xPortStartScheduler+0x138>)
 800f90c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f910:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f912:	f7ff ff69 	bl	800f7e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f916:	f7fe ff21 	bl	800e75c <vTaskSwitchContext>
	prvTaskExitError();
 800f91a:	f7ff ff25 	bl	800f768 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f91e:	2300      	movs	r3, #0
}
 800f920:	4618      	mov	r0, r3
 800f922:	3718      	adds	r7, #24
 800f924:	46bd      	mov	sp, r7
 800f926:	bd80      	pop	{r7, pc}
 800f928:	e000ed00 	.word	0xe000ed00
 800f92c:	410fc271 	.word	0x410fc271
 800f930:	410fc270 	.word	0x410fc270
 800f934:	e000e400 	.word	0xe000e400
 800f938:	20001338 	.word	0x20001338
 800f93c:	2000133c 	.word	0x2000133c
 800f940:	e000ed20 	.word	0xe000ed20
 800f944:	2000011c 	.word	0x2000011c
 800f948:	e000ef34 	.word	0xe000ef34

0800f94c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f94c:	b480      	push	{r7}
 800f94e:	b083      	sub	sp, #12
 800f950:	af00      	add	r7, sp, #0
 800f952:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f956:	f383 8811 	msr	BASEPRI, r3
 800f95a:	f3bf 8f6f 	isb	sy
 800f95e:	f3bf 8f4f 	dsb	sy
 800f962:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f964:	4b0e      	ldr	r3, [pc, #56]	; (800f9a0 <vPortEnterCritical+0x54>)
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	3301      	adds	r3, #1
 800f96a:	4a0d      	ldr	r2, [pc, #52]	; (800f9a0 <vPortEnterCritical+0x54>)
 800f96c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f96e:	4b0c      	ldr	r3, [pc, #48]	; (800f9a0 <vPortEnterCritical+0x54>)
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	2b01      	cmp	r3, #1
 800f974:	d10e      	bne.n	800f994 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f976:	4b0b      	ldr	r3, [pc, #44]	; (800f9a4 <vPortEnterCritical+0x58>)
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	b2db      	uxtb	r3, r3
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d009      	beq.n	800f994 <vPortEnterCritical+0x48>
 800f980:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f984:	f383 8811 	msr	BASEPRI, r3
 800f988:	f3bf 8f6f 	isb	sy
 800f98c:	f3bf 8f4f 	dsb	sy
 800f990:	603b      	str	r3, [r7, #0]
 800f992:	e7fe      	b.n	800f992 <vPortEnterCritical+0x46>
	}
}
 800f994:	bf00      	nop
 800f996:	370c      	adds	r7, #12
 800f998:	46bd      	mov	sp, r7
 800f99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f99e:	4770      	bx	lr
 800f9a0:	2000011c 	.word	0x2000011c
 800f9a4:	e000ed04 	.word	0xe000ed04

0800f9a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f9a8:	b480      	push	{r7}
 800f9aa:	b083      	sub	sp, #12
 800f9ac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f9ae:	4b11      	ldr	r3, [pc, #68]	; (800f9f4 <vPortExitCritical+0x4c>)
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d109      	bne.n	800f9ca <vPortExitCritical+0x22>
 800f9b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9ba:	f383 8811 	msr	BASEPRI, r3
 800f9be:	f3bf 8f6f 	isb	sy
 800f9c2:	f3bf 8f4f 	dsb	sy
 800f9c6:	607b      	str	r3, [r7, #4]
 800f9c8:	e7fe      	b.n	800f9c8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800f9ca:	4b0a      	ldr	r3, [pc, #40]	; (800f9f4 <vPortExitCritical+0x4c>)
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	3b01      	subs	r3, #1
 800f9d0:	4a08      	ldr	r2, [pc, #32]	; (800f9f4 <vPortExitCritical+0x4c>)
 800f9d2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f9d4:	4b07      	ldr	r3, [pc, #28]	; (800f9f4 <vPortExitCritical+0x4c>)
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d104      	bne.n	800f9e6 <vPortExitCritical+0x3e>
 800f9dc:	2300      	movs	r3, #0
 800f9de:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f9e0:	683b      	ldr	r3, [r7, #0]
 800f9e2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800f9e6:	bf00      	nop
 800f9e8:	370c      	adds	r7, #12
 800f9ea:	46bd      	mov	sp, r7
 800f9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f0:	4770      	bx	lr
 800f9f2:	bf00      	nop
 800f9f4:	2000011c 	.word	0x2000011c
	...

0800fa00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fa00:	f3ef 8009 	mrs	r0, PSP
 800fa04:	f3bf 8f6f 	isb	sy
 800fa08:	4b15      	ldr	r3, [pc, #84]	; (800fa60 <pxCurrentTCBConst>)
 800fa0a:	681a      	ldr	r2, [r3, #0]
 800fa0c:	f01e 0f10 	tst.w	lr, #16
 800fa10:	bf08      	it	eq
 800fa12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fa16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa1a:	6010      	str	r0, [r2, #0]
 800fa1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fa20:	f04f 0050 	mov.w	r0, #80	; 0x50
 800fa24:	f380 8811 	msr	BASEPRI, r0
 800fa28:	f3bf 8f4f 	dsb	sy
 800fa2c:	f3bf 8f6f 	isb	sy
 800fa30:	f7fe fe94 	bl	800e75c <vTaskSwitchContext>
 800fa34:	f04f 0000 	mov.w	r0, #0
 800fa38:	f380 8811 	msr	BASEPRI, r0
 800fa3c:	bc09      	pop	{r0, r3}
 800fa3e:	6819      	ldr	r1, [r3, #0]
 800fa40:	6808      	ldr	r0, [r1, #0]
 800fa42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa46:	f01e 0f10 	tst.w	lr, #16
 800fa4a:	bf08      	it	eq
 800fa4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fa50:	f380 8809 	msr	PSP, r0
 800fa54:	f3bf 8f6f 	isb	sy
 800fa58:	4770      	bx	lr
 800fa5a:	bf00      	nop
 800fa5c:	f3af 8000 	nop.w

0800fa60 <pxCurrentTCBConst>:
 800fa60:	20000d04 	.word	0x20000d04
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fa64:	bf00      	nop
 800fa66:	bf00      	nop

0800fa68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fa68:	b580      	push	{r7, lr}
 800fa6a:	b082      	sub	sp, #8
 800fa6c:	af00      	add	r7, sp, #0
	__asm volatile
 800fa6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa72:	f383 8811 	msr	BASEPRI, r3
 800fa76:	f3bf 8f6f 	isb	sy
 800fa7a:	f3bf 8f4f 	dsb	sy
 800fa7e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fa80:	f7fe fdb4 	bl	800e5ec <xTaskIncrementTick>
 800fa84:	4603      	mov	r3, r0
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d003      	beq.n	800fa92 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fa8a:	4b06      	ldr	r3, [pc, #24]	; (800faa4 <SysTick_Handler+0x3c>)
 800fa8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa90:	601a      	str	r2, [r3, #0]
 800fa92:	2300      	movs	r3, #0
 800fa94:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fa96:	683b      	ldr	r3, [r7, #0]
 800fa98:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800fa9c:	bf00      	nop
 800fa9e:	3708      	adds	r7, #8
 800faa0:	46bd      	mov	sp, r7
 800faa2:	bd80      	pop	{r7, pc}
 800faa4:	e000ed04 	.word	0xe000ed04

0800faa8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800faa8:	b480      	push	{r7}
 800faaa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800faac:	4b0b      	ldr	r3, [pc, #44]	; (800fadc <vPortSetupTimerInterrupt+0x34>)
 800faae:	2200      	movs	r2, #0
 800fab0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fab2:	4b0b      	ldr	r3, [pc, #44]	; (800fae0 <vPortSetupTimerInterrupt+0x38>)
 800fab4:	2200      	movs	r2, #0
 800fab6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fab8:	4b0a      	ldr	r3, [pc, #40]	; (800fae4 <vPortSetupTimerInterrupt+0x3c>)
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	4a0a      	ldr	r2, [pc, #40]	; (800fae8 <vPortSetupTimerInterrupt+0x40>)
 800fabe:	fba2 2303 	umull	r2, r3, r2, r3
 800fac2:	099b      	lsrs	r3, r3, #6
 800fac4:	4a09      	ldr	r2, [pc, #36]	; (800faec <vPortSetupTimerInterrupt+0x44>)
 800fac6:	3b01      	subs	r3, #1
 800fac8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800faca:	4b04      	ldr	r3, [pc, #16]	; (800fadc <vPortSetupTimerInterrupt+0x34>)
 800facc:	2207      	movs	r2, #7
 800face:	601a      	str	r2, [r3, #0]
}
 800fad0:	bf00      	nop
 800fad2:	46bd      	mov	sp, r7
 800fad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad8:	4770      	bx	lr
 800fada:	bf00      	nop
 800fadc:	e000e010 	.word	0xe000e010
 800fae0:	e000e018 	.word	0xe000e018
 800fae4:	20000000 	.word	0x20000000
 800fae8:	10624dd3 	.word	0x10624dd3
 800faec:	e000e014 	.word	0xe000e014

0800faf0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800faf0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800fb00 <vPortEnableVFP+0x10>
 800faf4:	6801      	ldr	r1, [r0, #0]
 800faf6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800fafa:	6001      	str	r1, [r0, #0]
 800fafc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fafe:	bf00      	nop
 800fb00:	e000ed88 	.word	0xe000ed88

0800fb04 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fb04:	b480      	push	{r7}
 800fb06:	b085      	sub	sp, #20
 800fb08:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fb0a:	f3ef 8305 	mrs	r3, IPSR
 800fb0e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	2b0f      	cmp	r3, #15
 800fb14:	d913      	bls.n	800fb3e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fb16:	4a16      	ldr	r2, [pc, #88]	; (800fb70 <vPortValidateInterruptPriority+0x6c>)
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	4413      	add	r3, r2
 800fb1c:	781b      	ldrb	r3, [r3, #0]
 800fb1e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fb20:	4b14      	ldr	r3, [pc, #80]	; (800fb74 <vPortValidateInterruptPriority+0x70>)
 800fb22:	781b      	ldrb	r3, [r3, #0]
 800fb24:	7afa      	ldrb	r2, [r7, #11]
 800fb26:	429a      	cmp	r2, r3
 800fb28:	d209      	bcs.n	800fb3e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800fb2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb2e:	f383 8811 	msr	BASEPRI, r3
 800fb32:	f3bf 8f6f 	isb	sy
 800fb36:	f3bf 8f4f 	dsb	sy
 800fb3a:	607b      	str	r3, [r7, #4]
 800fb3c:	e7fe      	b.n	800fb3c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fb3e:	4b0e      	ldr	r3, [pc, #56]	; (800fb78 <vPortValidateInterruptPriority+0x74>)
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800fb46:	4b0d      	ldr	r3, [pc, #52]	; (800fb7c <vPortValidateInterruptPriority+0x78>)
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	429a      	cmp	r2, r3
 800fb4c:	d909      	bls.n	800fb62 <vPortValidateInterruptPriority+0x5e>
 800fb4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb52:	f383 8811 	msr	BASEPRI, r3
 800fb56:	f3bf 8f6f 	isb	sy
 800fb5a:	f3bf 8f4f 	dsb	sy
 800fb5e:	603b      	str	r3, [r7, #0]
 800fb60:	e7fe      	b.n	800fb60 <vPortValidateInterruptPriority+0x5c>
	}
 800fb62:	bf00      	nop
 800fb64:	3714      	adds	r7, #20
 800fb66:	46bd      	mov	sp, r7
 800fb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb6c:	4770      	bx	lr
 800fb6e:	bf00      	nop
 800fb70:	e000e3f0 	.word	0xe000e3f0
 800fb74:	20001338 	.word	0x20001338
 800fb78:	e000ed0c 	.word	0xe000ed0c
 800fb7c:	2000133c 	.word	0x2000133c

0800fb80 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fb80:	b580      	push	{r7, lr}
 800fb82:	b08a      	sub	sp, #40	; 0x28
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fb88:	2300      	movs	r3, #0
 800fb8a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fb8c:	f7fe fc74 	bl	800e478 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fb90:	4b57      	ldr	r3, [pc, #348]	; (800fcf0 <pvPortMalloc+0x170>)
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d101      	bne.n	800fb9c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fb98:	f000 f90c 	bl	800fdb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fb9c:	4b55      	ldr	r3, [pc, #340]	; (800fcf4 <pvPortMalloc+0x174>)
 800fb9e:	681a      	ldr	r2, [r3, #0]
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	4013      	ands	r3, r2
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	f040 808c 	bne.w	800fcc2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d01c      	beq.n	800fbea <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800fbb0:	2208      	movs	r2, #8
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	4413      	add	r3, r2
 800fbb6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	f003 0307 	and.w	r3, r3, #7
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d013      	beq.n	800fbea <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	f023 0307 	bic.w	r3, r3, #7
 800fbc8:	3308      	adds	r3, #8
 800fbca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	f003 0307 	and.w	r3, r3, #7
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d009      	beq.n	800fbea <pvPortMalloc+0x6a>
 800fbd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbda:	f383 8811 	msr	BASEPRI, r3
 800fbde:	f3bf 8f6f 	isb	sy
 800fbe2:	f3bf 8f4f 	dsb	sy
 800fbe6:	617b      	str	r3, [r7, #20]
 800fbe8:	e7fe      	b.n	800fbe8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d068      	beq.n	800fcc2 <pvPortMalloc+0x142>
 800fbf0:	4b41      	ldr	r3, [pc, #260]	; (800fcf8 <pvPortMalloc+0x178>)
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	687a      	ldr	r2, [r7, #4]
 800fbf6:	429a      	cmp	r2, r3
 800fbf8:	d863      	bhi.n	800fcc2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fbfa:	4b40      	ldr	r3, [pc, #256]	; (800fcfc <pvPortMalloc+0x17c>)
 800fbfc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fbfe:	4b3f      	ldr	r3, [pc, #252]	; (800fcfc <pvPortMalloc+0x17c>)
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fc04:	e004      	b.n	800fc10 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800fc06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc08:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fc0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fc10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc12:	685b      	ldr	r3, [r3, #4]
 800fc14:	687a      	ldr	r2, [r7, #4]
 800fc16:	429a      	cmp	r2, r3
 800fc18:	d903      	bls.n	800fc22 <pvPortMalloc+0xa2>
 800fc1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d1f1      	bne.n	800fc06 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fc22:	4b33      	ldr	r3, [pc, #204]	; (800fcf0 <pvPortMalloc+0x170>)
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc28:	429a      	cmp	r2, r3
 800fc2a:	d04a      	beq.n	800fcc2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fc2c:	6a3b      	ldr	r3, [r7, #32]
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	2208      	movs	r2, #8
 800fc32:	4413      	add	r3, r2
 800fc34:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fc36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc38:	681a      	ldr	r2, [r3, #0]
 800fc3a:	6a3b      	ldr	r3, [r7, #32]
 800fc3c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fc3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc40:	685a      	ldr	r2, [r3, #4]
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	1ad2      	subs	r2, r2, r3
 800fc46:	2308      	movs	r3, #8
 800fc48:	005b      	lsls	r3, r3, #1
 800fc4a:	429a      	cmp	r2, r3
 800fc4c:	d91e      	bls.n	800fc8c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fc4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	4413      	add	r3, r2
 800fc54:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fc56:	69bb      	ldr	r3, [r7, #24]
 800fc58:	f003 0307 	and.w	r3, r3, #7
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d009      	beq.n	800fc74 <pvPortMalloc+0xf4>
 800fc60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc64:	f383 8811 	msr	BASEPRI, r3
 800fc68:	f3bf 8f6f 	isb	sy
 800fc6c:	f3bf 8f4f 	dsb	sy
 800fc70:	613b      	str	r3, [r7, #16]
 800fc72:	e7fe      	b.n	800fc72 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fc74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc76:	685a      	ldr	r2, [r3, #4]
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	1ad2      	subs	r2, r2, r3
 800fc7c:	69bb      	ldr	r3, [r7, #24]
 800fc7e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fc80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc82:	687a      	ldr	r2, [r7, #4]
 800fc84:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fc86:	69b8      	ldr	r0, [r7, #24]
 800fc88:	f000 f8f6 	bl	800fe78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fc8c:	4b1a      	ldr	r3, [pc, #104]	; (800fcf8 <pvPortMalloc+0x178>)
 800fc8e:	681a      	ldr	r2, [r3, #0]
 800fc90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc92:	685b      	ldr	r3, [r3, #4]
 800fc94:	1ad3      	subs	r3, r2, r3
 800fc96:	4a18      	ldr	r2, [pc, #96]	; (800fcf8 <pvPortMalloc+0x178>)
 800fc98:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fc9a:	4b17      	ldr	r3, [pc, #92]	; (800fcf8 <pvPortMalloc+0x178>)
 800fc9c:	681a      	ldr	r2, [r3, #0]
 800fc9e:	4b18      	ldr	r3, [pc, #96]	; (800fd00 <pvPortMalloc+0x180>)
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	429a      	cmp	r2, r3
 800fca4:	d203      	bcs.n	800fcae <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fca6:	4b14      	ldr	r3, [pc, #80]	; (800fcf8 <pvPortMalloc+0x178>)
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	4a15      	ldr	r2, [pc, #84]	; (800fd00 <pvPortMalloc+0x180>)
 800fcac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fcae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcb0:	685a      	ldr	r2, [r3, #4]
 800fcb2:	4b10      	ldr	r3, [pc, #64]	; (800fcf4 <pvPortMalloc+0x174>)
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	431a      	orrs	r2, r3
 800fcb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fcbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcbe:	2200      	movs	r2, #0
 800fcc0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fcc2:	f7fe fbe7 	bl	800e494 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fcc6:	69fb      	ldr	r3, [r7, #28]
 800fcc8:	f003 0307 	and.w	r3, r3, #7
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d009      	beq.n	800fce4 <pvPortMalloc+0x164>
 800fcd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcd4:	f383 8811 	msr	BASEPRI, r3
 800fcd8:	f3bf 8f6f 	isb	sy
 800fcdc:	f3bf 8f4f 	dsb	sy
 800fce0:	60fb      	str	r3, [r7, #12]
 800fce2:	e7fe      	b.n	800fce2 <pvPortMalloc+0x162>
	return pvReturn;
 800fce4:	69fb      	ldr	r3, [r7, #28]
}
 800fce6:	4618      	mov	r0, r3
 800fce8:	3728      	adds	r7, #40	; 0x28
 800fcea:	46bd      	mov	sp, r7
 800fcec:	bd80      	pop	{r7, pc}
 800fcee:	bf00      	nop
 800fcf0:	20004f48 	.word	0x20004f48
 800fcf4:	20004f54 	.word	0x20004f54
 800fcf8:	20004f4c 	.word	0x20004f4c
 800fcfc:	20004f40 	.word	0x20004f40
 800fd00:	20004f50 	.word	0x20004f50

0800fd04 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fd04:	b580      	push	{r7, lr}
 800fd06:	b086      	sub	sp, #24
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d046      	beq.n	800fda4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fd16:	2308      	movs	r3, #8
 800fd18:	425b      	negs	r3, r3
 800fd1a:	697a      	ldr	r2, [r7, #20]
 800fd1c:	4413      	add	r3, r2
 800fd1e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fd20:	697b      	ldr	r3, [r7, #20]
 800fd22:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fd24:	693b      	ldr	r3, [r7, #16]
 800fd26:	685a      	ldr	r2, [r3, #4]
 800fd28:	4b20      	ldr	r3, [pc, #128]	; (800fdac <vPortFree+0xa8>)
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	4013      	ands	r3, r2
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d109      	bne.n	800fd46 <vPortFree+0x42>
 800fd32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd36:	f383 8811 	msr	BASEPRI, r3
 800fd3a:	f3bf 8f6f 	isb	sy
 800fd3e:	f3bf 8f4f 	dsb	sy
 800fd42:	60fb      	str	r3, [r7, #12]
 800fd44:	e7fe      	b.n	800fd44 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fd46:	693b      	ldr	r3, [r7, #16]
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d009      	beq.n	800fd62 <vPortFree+0x5e>
 800fd4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd52:	f383 8811 	msr	BASEPRI, r3
 800fd56:	f3bf 8f6f 	isb	sy
 800fd5a:	f3bf 8f4f 	dsb	sy
 800fd5e:	60bb      	str	r3, [r7, #8]
 800fd60:	e7fe      	b.n	800fd60 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fd62:	693b      	ldr	r3, [r7, #16]
 800fd64:	685a      	ldr	r2, [r3, #4]
 800fd66:	4b11      	ldr	r3, [pc, #68]	; (800fdac <vPortFree+0xa8>)
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	4013      	ands	r3, r2
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d019      	beq.n	800fda4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fd70:	693b      	ldr	r3, [r7, #16]
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d115      	bne.n	800fda4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fd78:	693b      	ldr	r3, [r7, #16]
 800fd7a:	685a      	ldr	r2, [r3, #4]
 800fd7c:	4b0b      	ldr	r3, [pc, #44]	; (800fdac <vPortFree+0xa8>)
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	43db      	mvns	r3, r3
 800fd82:	401a      	ands	r2, r3
 800fd84:	693b      	ldr	r3, [r7, #16]
 800fd86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fd88:	f7fe fb76 	bl	800e478 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fd8c:	693b      	ldr	r3, [r7, #16]
 800fd8e:	685a      	ldr	r2, [r3, #4]
 800fd90:	4b07      	ldr	r3, [pc, #28]	; (800fdb0 <vPortFree+0xac>)
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	4413      	add	r3, r2
 800fd96:	4a06      	ldr	r2, [pc, #24]	; (800fdb0 <vPortFree+0xac>)
 800fd98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fd9a:	6938      	ldr	r0, [r7, #16]
 800fd9c:	f000 f86c 	bl	800fe78 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800fda0:	f7fe fb78 	bl	800e494 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fda4:	bf00      	nop
 800fda6:	3718      	adds	r7, #24
 800fda8:	46bd      	mov	sp, r7
 800fdaa:	bd80      	pop	{r7, pc}
 800fdac:	20004f54 	.word	0x20004f54
 800fdb0:	20004f4c 	.word	0x20004f4c

0800fdb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fdb4:	b480      	push	{r7}
 800fdb6:	b085      	sub	sp, #20
 800fdb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fdba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800fdbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fdc0:	4b27      	ldr	r3, [pc, #156]	; (800fe60 <prvHeapInit+0xac>)
 800fdc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	f003 0307 	and.w	r3, r3, #7
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d00c      	beq.n	800fde8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	3307      	adds	r3, #7
 800fdd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	f023 0307 	bic.w	r3, r3, #7
 800fdda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fddc:	68ba      	ldr	r2, [r7, #8]
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	1ad3      	subs	r3, r2, r3
 800fde2:	4a1f      	ldr	r2, [pc, #124]	; (800fe60 <prvHeapInit+0xac>)
 800fde4:	4413      	add	r3, r2
 800fde6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fdec:	4a1d      	ldr	r2, [pc, #116]	; (800fe64 <prvHeapInit+0xb0>)
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fdf2:	4b1c      	ldr	r3, [pc, #112]	; (800fe64 <prvHeapInit+0xb0>)
 800fdf4:	2200      	movs	r2, #0
 800fdf6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	68ba      	ldr	r2, [r7, #8]
 800fdfc:	4413      	add	r3, r2
 800fdfe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fe00:	2208      	movs	r2, #8
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	1a9b      	subs	r3, r3, r2
 800fe06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	f023 0307 	bic.w	r3, r3, #7
 800fe0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	4a15      	ldr	r2, [pc, #84]	; (800fe68 <prvHeapInit+0xb4>)
 800fe14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fe16:	4b14      	ldr	r3, [pc, #80]	; (800fe68 <prvHeapInit+0xb4>)
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	2200      	movs	r2, #0
 800fe1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fe1e:	4b12      	ldr	r3, [pc, #72]	; (800fe68 <prvHeapInit+0xb4>)
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	2200      	movs	r2, #0
 800fe24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fe2a:	683b      	ldr	r3, [r7, #0]
 800fe2c:	68fa      	ldr	r2, [r7, #12]
 800fe2e:	1ad2      	subs	r2, r2, r3
 800fe30:	683b      	ldr	r3, [r7, #0]
 800fe32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fe34:	4b0c      	ldr	r3, [pc, #48]	; (800fe68 <prvHeapInit+0xb4>)
 800fe36:	681a      	ldr	r2, [r3, #0]
 800fe38:	683b      	ldr	r3, [r7, #0]
 800fe3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fe3c:	683b      	ldr	r3, [r7, #0]
 800fe3e:	685b      	ldr	r3, [r3, #4]
 800fe40:	4a0a      	ldr	r2, [pc, #40]	; (800fe6c <prvHeapInit+0xb8>)
 800fe42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fe44:	683b      	ldr	r3, [r7, #0]
 800fe46:	685b      	ldr	r3, [r3, #4]
 800fe48:	4a09      	ldr	r2, [pc, #36]	; (800fe70 <prvHeapInit+0xbc>)
 800fe4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fe4c:	4b09      	ldr	r3, [pc, #36]	; (800fe74 <prvHeapInit+0xc0>)
 800fe4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800fe52:	601a      	str	r2, [r3, #0]
}
 800fe54:	bf00      	nop
 800fe56:	3714      	adds	r7, #20
 800fe58:	46bd      	mov	sp, r7
 800fe5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe5e:	4770      	bx	lr
 800fe60:	20001340 	.word	0x20001340
 800fe64:	20004f40 	.word	0x20004f40
 800fe68:	20004f48 	.word	0x20004f48
 800fe6c:	20004f50 	.word	0x20004f50
 800fe70:	20004f4c 	.word	0x20004f4c
 800fe74:	20004f54 	.word	0x20004f54

0800fe78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fe78:	b480      	push	{r7}
 800fe7a:	b085      	sub	sp, #20
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fe80:	4b28      	ldr	r3, [pc, #160]	; (800ff24 <prvInsertBlockIntoFreeList+0xac>)
 800fe82:	60fb      	str	r3, [r7, #12]
 800fe84:	e002      	b.n	800fe8c <prvInsertBlockIntoFreeList+0x14>
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	60fb      	str	r3, [r7, #12]
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	687a      	ldr	r2, [r7, #4]
 800fe92:	429a      	cmp	r2, r3
 800fe94:	d8f7      	bhi.n	800fe86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	685b      	ldr	r3, [r3, #4]
 800fe9e:	68ba      	ldr	r2, [r7, #8]
 800fea0:	4413      	add	r3, r2
 800fea2:	687a      	ldr	r2, [r7, #4]
 800fea4:	429a      	cmp	r2, r3
 800fea6:	d108      	bne.n	800feba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	685a      	ldr	r2, [r3, #4]
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	685b      	ldr	r3, [r3, #4]
 800feb0:	441a      	add	r2, r3
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	685b      	ldr	r3, [r3, #4]
 800fec2:	68ba      	ldr	r2, [r7, #8]
 800fec4:	441a      	add	r2, r3
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	429a      	cmp	r2, r3
 800fecc:	d118      	bne.n	800ff00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	681a      	ldr	r2, [r3, #0]
 800fed2:	4b15      	ldr	r3, [pc, #84]	; (800ff28 <prvInsertBlockIntoFreeList+0xb0>)
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	429a      	cmp	r2, r3
 800fed8:	d00d      	beq.n	800fef6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	685a      	ldr	r2, [r3, #4]
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	685b      	ldr	r3, [r3, #4]
 800fee4:	441a      	add	r2, r3
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	681a      	ldr	r2, [r3, #0]
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	601a      	str	r2, [r3, #0]
 800fef4:	e008      	b.n	800ff08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fef6:	4b0c      	ldr	r3, [pc, #48]	; (800ff28 <prvInsertBlockIntoFreeList+0xb0>)
 800fef8:	681a      	ldr	r2, [r3, #0]
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	601a      	str	r2, [r3, #0]
 800fefe:	e003      	b.n	800ff08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	681a      	ldr	r2, [r3, #0]
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ff08:	68fa      	ldr	r2, [r7, #12]
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	429a      	cmp	r2, r3
 800ff0e:	d002      	beq.n	800ff16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	687a      	ldr	r2, [r7, #4]
 800ff14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ff16:	bf00      	nop
 800ff18:	3714      	adds	r7, #20
 800ff1a:	46bd      	mov	sp, r7
 800ff1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff20:	4770      	bx	lr
 800ff22:	bf00      	nop
 800ff24:	20004f40 	.word	0x20004f40
 800ff28:	20004f48 	.word	0x20004f48

0800ff2c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ff2c:	b580      	push	{r7, lr}
 800ff2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ff30:	2200      	movs	r2, #0
 800ff32:	4912      	ldr	r1, [pc, #72]	; (800ff7c <MX_USB_DEVICE_Init+0x50>)
 800ff34:	4812      	ldr	r0, [pc, #72]	; (800ff80 <MX_USB_DEVICE_Init+0x54>)
 800ff36:	f7fb fd4d 	bl	800b9d4 <USBD_Init>
 800ff3a:	4603      	mov	r3, r0
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d001      	beq.n	800ff44 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ff40:	f7f1 fa32 	bl	80013a8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ff44:	490f      	ldr	r1, [pc, #60]	; (800ff84 <MX_USB_DEVICE_Init+0x58>)
 800ff46:	480e      	ldr	r0, [pc, #56]	; (800ff80 <MX_USB_DEVICE_Init+0x54>)
 800ff48:	f7fb fd7a 	bl	800ba40 <USBD_RegisterClass>
 800ff4c:	4603      	mov	r3, r0
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d001      	beq.n	800ff56 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ff52:	f7f1 fa29 	bl	80013a8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ff56:	490c      	ldr	r1, [pc, #48]	; (800ff88 <MX_USB_DEVICE_Init+0x5c>)
 800ff58:	4809      	ldr	r0, [pc, #36]	; (800ff80 <MX_USB_DEVICE_Init+0x54>)
 800ff5a:	f7fb fc9f 	bl	800b89c <USBD_CDC_RegisterInterface>
 800ff5e:	4603      	mov	r3, r0
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d001      	beq.n	800ff68 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ff64:	f7f1 fa20 	bl	80013a8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ff68:	4805      	ldr	r0, [pc, #20]	; (800ff80 <MX_USB_DEVICE_Init+0x54>)
 800ff6a:	f7fb fd8a 	bl	800ba82 <USBD_Start>
 800ff6e:	4603      	mov	r3, r0
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d001      	beq.n	800ff78 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ff74:	f7f1 fa18 	bl	80013a8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ff78:	bf00      	nop
 800ff7a:	bd80      	pop	{r7, pc}
 800ff7c:	20000134 	.word	0x20000134
 800ff80:	20006ffc 	.word	0x20006ffc
 800ff84:	20000018 	.word	0x20000018
 800ff88:	20000120 	.word	0x20000120

0800ff8c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ff8c:	b580      	push	{r7, lr}
 800ff8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ff90:	2200      	movs	r2, #0
 800ff92:	4905      	ldr	r1, [pc, #20]	; (800ffa8 <CDC_Init_FS+0x1c>)
 800ff94:	4805      	ldr	r0, [pc, #20]	; (800ffac <CDC_Init_FS+0x20>)
 800ff96:	f7fb fc96 	bl	800b8c6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ff9a:	4905      	ldr	r1, [pc, #20]	; (800ffb0 <CDC_Init_FS+0x24>)
 800ff9c:	4803      	ldr	r0, [pc, #12]	; (800ffac <CDC_Init_FS+0x20>)
 800ff9e:	f7fb fcab 	bl	800b8f8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ffa2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ffa4:	4618      	mov	r0, r3
 800ffa6:	bd80      	pop	{r7, pc}
 800ffa8:	20007acc 	.word	0x20007acc
 800ffac:	20006ffc 	.word	0x20006ffc
 800ffb0:	200072cc 	.word	0x200072cc

0800ffb4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ffb4:	b480      	push	{r7}
 800ffb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ffb8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ffba:	4618      	mov	r0, r3
 800ffbc:	46bd      	mov	sp, r7
 800ffbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc2:	4770      	bx	lr

0800ffc4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ffc4:	b480      	push	{r7}
 800ffc6:	b083      	sub	sp, #12
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	4603      	mov	r3, r0
 800ffcc:	6039      	str	r1, [r7, #0]
 800ffce:	71fb      	strb	r3, [r7, #7]
 800ffd0:	4613      	mov	r3, r2
 800ffd2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ffd4:	79fb      	ldrb	r3, [r7, #7]
 800ffd6:	2b23      	cmp	r3, #35	; 0x23
 800ffd8:	d84a      	bhi.n	8010070 <CDC_Control_FS+0xac>
 800ffda:	a201      	add	r2, pc, #4	; (adr r2, 800ffe0 <CDC_Control_FS+0x1c>)
 800ffdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffe0:	08010071 	.word	0x08010071
 800ffe4:	08010071 	.word	0x08010071
 800ffe8:	08010071 	.word	0x08010071
 800ffec:	08010071 	.word	0x08010071
 800fff0:	08010071 	.word	0x08010071
 800fff4:	08010071 	.word	0x08010071
 800fff8:	08010071 	.word	0x08010071
 800fffc:	08010071 	.word	0x08010071
 8010000:	08010071 	.word	0x08010071
 8010004:	08010071 	.word	0x08010071
 8010008:	08010071 	.word	0x08010071
 801000c:	08010071 	.word	0x08010071
 8010010:	08010071 	.word	0x08010071
 8010014:	08010071 	.word	0x08010071
 8010018:	08010071 	.word	0x08010071
 801001c:	08010071 	.word	0x08010071
 8010020:	08010071 	.word	0x08010071
 8010024:	08010071 	.word	0x08010071
 8010028:	08010071 	.word	0x08010071
 801002c:	08010071 	.word	0x08010071
 8010030:	08010071 	.word	0x08010071
 8010034:	08010071 	.word	0x08010071
 8010038:	08010071 	.word	0x08010071
 801003c:	08010071 	.word	0x08010071
 8010040:	08010071 	.word	0x08010071
 8010044:	08010071 	.word	0x08010071
 8010048:	08010071 	.word	0x08010071
 801004c:	08010071 	.word	0x08010071
 8010050:	08010071 	.word	0x08010071
 8010054:	08010071 	.word	0x08010071
 8010058:	08010071 	.word	0x08010071
 801005c:	08010071 	.word	0x08010071
 8010060:	08010071 	.word	0x08010071
 8010064:	08010071 	.word	0x08010071
 8010068:	08010071 	.word	0x08010071
 801006c:	08010071 	.word	0x08010071
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010070:	bf00      	nop
  }

  return (USBD_OK);
 8010072:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010074:	4618      	mov	r0, r3
 8010076:	370c      	adds	r7, #12
 8010078:	46bd      	mov	sp, r7
 801007a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801007e:	4770      	bx	lr

08010080 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010080:	b580      	push	{r7, lr}
 8010082:	b082      	sub	sp, #8
 8010084:	af00      	add	r7, sp, #0
 8010086:	6078      	str	r0, [r7, #4]
 8010088:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	return impl_CDC_Receive_FS(Buf, Len);
 801008a:	6839      	ldr	r1, [r7, #0]
 801008c:	6878      	ldr	r0, [r7, #4]
 801008e:	f008 fc4f 	bl	8018930 <impl_CDC_Receive_FS>
 8010092:	4603      	mov	r3, r0

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8010094:	4618      	mov	r0, r3
 8010096:	3708      	adds	r7, #8
 8010098:	46bd      	mov	sp, r7
 801009a:	bd80      	pop	{r7, pc}

0801009c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801009c:	b580      	push	{r7, lr}
 801009e:	b084      	sub	sp, #16
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	6078      	str	r0, [r7, #4]
 80100a4:	460b      	mov	r3, r1
 80100a6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80100a8:	2300      	movs	r3, #0
 80100aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80100ac:	4b0d      	ldr	r3, [pc, #52]	; (80100e4 <CDC_Transmit_FS+0x48>)
 80100ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80100b2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80100b4:	68bb      	ldr	r3, [r7, #8]
 80100b6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d001      	beq.n	80100c2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80100be:	2301      	movs	r3, #1
 80100c0:	e00b      	b.n	80100da <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80100c2:	887b      	ldrh	r3, [r7, #2]
 80100c4:	461a      	mov	r2, r3
 80100c6:	6879      	ldr	r1, [r7, #4]
 80100c8:	4806      	ldr	r0, [pc, #24]	; (80100e4 <CDC_Transmit_FS+0x48>)
 80100ca:	f7fb fbfc 	bl	800b8c6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80100ce:	4805      	ldr	r0, [pc, #20]	; (80100e4 <CDC_Transmit_FS+0x48>)
 80100d0:	f7fb fc26 	bl	800b920 <USBD_CDC_TransmitPacket>
 80100d4:	4603      	mov	r3, r0
 80100d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80100d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80100da:	4618      	mov	r0, r3
 80100dc:	3710      	adds	r7, #16
 80100de:	46bd      	mov	sp, r7
 80100e0:	bd80      	pop	{r7, pc}
 80100e2:	bf00      	nop
 80100e4:	20006ffc 	.word	0x20006ffc

080100e8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80100e8:	b480      	push	{r7}
 80100ea:	b087      	sub	sp, #28
 80100ec:	af00      	add	r7, sp, #0
 80100ee:	60f8      	str	r0, [r7, #12]
 80100f0:	60b9      	str	r1, [r7, #8]
 80100f2:	4613      	mov	r3, r2
 80100f4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80100f6:	2300      	movs	r3, #0
 80100f8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80100fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80100fe:	4618      	mov	r0, r3
 8010100:	371c      	adds	r7, #28
 8010102:	46bd      	mov	sp, r7
 8010104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010108:	4770      	bx	lr
	...

0801010c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801010c:	b480      	push	{r7}
 801010e:	b083      	sub	sp, #12
 8010110:	af00      	add	r7, sp, #0
 8010112:	4603      	mov	r3, r0
 8010114:	6039      	str	r1, [r7, #0]
 8010116:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010118:	683b      	ldr	r3, [r7, #0]
 801011a:	2212      	movs	r2, #18
 801011c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801011e:	4b03      	ldr	r3, [pc, #12]	; (801012c <USBD_FS_DeviceDescriptor+0x20>)
}
 8010120:	4618      	mov	r0, r3
 8010122:	370c      	adds	r7, #12
 8010124:	46bd      	mov	sp, r7
 8010126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801012a:	4770      	bx	lr
 801012c:	20000150 	.word	0x20000150

08010130 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010130:	b480      	push	{r7}
 8010132:	b083      	sub	sp, #12
 8010134:	af00      	add	r7, sp, #0
 8010136:	4603      	mov	r3, r0
 8010138:	6039      	str	r1, [r7, #0]
 801013a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801013c:	683b      	ldr	r3, [r7, #0]
 801013e:	2204      	movs	r2, #4
 8010140:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010142:	4b03      	ldr	r3, [pc, #12]	; (8010150 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010144:	4618      	mov	r0, r3
 8010146:	370c      	adds	r7, #12
 8010148:	46bd      	mov	sp, r7
 801014a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801014e:	4770      	bx	lr
 8010150:	20000164 	.word	0x20000164

08010154 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010154:	b580      	push	{r7, lr}
 8010156:	b082      	sub	sp, #8
 8010158:	af00      	add	r7, sp, #0
 801015a:	4603      	mov	r3, r0
 801015c:	6039      	str	r1, [r7, #0]
 801015e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010160:	79fb      	ldrb	r3, [r7, #7]
 8010162:	2b00      	cmp	r3, #0
 8010164:	d105      	bne.n	8010172 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010166:	683a      	ldr	r2, [r7, #0]
 8010168:	4907      	ldr	r1, [pc, #28]	; (8010188 <USBD_FS_ProductStrDescriptor+0x34>)
 801016a:	4808      	ldr	r0, [pc, #32]	; (801018c <USBD_FS_ProductStrDescriptor+0x38>)
 801016c:	f7fc fc57 	bl	800ca1e <USBD_GetString>
 8010170:	e004      	b.n	801017c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010172:	683a      	ldr	r2, [r7, #0]
 8010174:	4904      	ldr	r1, [pc, #16]	; (8010188 <USBD_FS_ProductStrDescriptor+0x34>)
 8010176:	4805      	ldr	r0, [pc, #20]	; (801018c <USBD_FS_ProductStrDescriptor+0x38>)
 8010178:	f7fc fc51 	bl	800ca1e <USBD_GetString>
  }
  return USBD_StrDesc;
 801017c:	4b02      	ldr	r3, [pc, #8]	; (8010188 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801017e:	4618      	mov	r0, r3
 8010180:	3708      	adds	r7, #8
 8010182:	46bd      	mov	sp, r7
 8010184:	bd80      	pop	{r7, pc}
 8010186:	bf00      	nop
 8010188:	200082cc 	.word	0x200082cc
 801018c:	08019384 	.word	0x08019384

08010190 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010190:	b580      	push	{r7, lr}
 8010192:	b082      	sub	sp, #8
 8010194:	af00      	add	r7, sp, #0
 8010196:	4603      	mov	r3, r0
 8010198:	6039      	str	r1, [r7, #0]
 801019a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801019c:	683a      	ldr	r2, [r7, #0]
 801019e:	4904      	ldr	r1, [pc, #16]	; (80101b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80101a0:	4804      	ldr	r0, [pc, #16]	; (80101b4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80101a2:	f7fc fc3c 	bl	800ca1e <USBD_GetString>
  return USBD_StrDesc;
 80101a6:	4b02      	ldr	r3, [pc, #8]	; (80101b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80101a8:	4618      	mov	r0, r3
 80101aa:	3708      	adds	r7, #8
 80101ac:	46bd      	mov	sp, r7
 80101ae:	bd80      	pop	{r7, pc}
 80101b0:	200082cc 	.word	0x200082cc
 80101b4:	0801939c 	.word	0x0801939c

080101b8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80101b8:	b580      	push	{r7, lr}
 80101ba:	b082      	sub	sp, #8
 80101bc:	af00      	add	r7, sp, #0
 80101be:	4603      	mov	r3, r0
 80101c0:	6039      	str	r1, [r7, #0]
 80101c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80101c4:	683b      	ldr	r3, [r7, #0]
 80101c6:	221a      	movs	r2, #26
 80101c8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80101ca:	f000 f843 	bl	8010254 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80101ce:	4b02      	ldr	r3, [pc, #8]	; (80101d8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80101d0:	4618      	mov	r0, r3
 80101d2:	3708      	adds	r7, #8
 80101d4:	46bd      	mov	sp, r7
 80101d6:	bd80      	pop	{r7, pc}
 80101d8:	20000168 	.word	0x20000168

080101dc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80101dc:	b580      	push	{r7, lr}
 80101de:	b082      	sub	sp, #8
 80101e0:	af00      	add	r7, sp, #0
 80101e2:	4603      	mov	r3, r0
 80101e4:	6039      	str	r1, [r7, #0]
 80101e6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80101e8:	79fb      	ldrb	r3, [r7, #7]
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d105      	bne.n	80101fa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80101ee:	683a      	ldr	r2, [r7, #0]
 80101f0:	4907      	ldr	r1, [pc, #28]	; (8010210 <USBD_FS_ConfigStrDescriptor+0x34>)
 80101f2:	4808      	ldr	r0, [pc, #32]	; (8010214 <USBD_FS_ConfigStrDescriptor+0x38>)
 80101f4:	f7fc fc13 	bl	800ca1e <USBD_GetString>
 80101f8:	e004      	b.n	8010204 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80101fa:	683a      	ldr	r2, [r7, #0]
 80101fc:	4904      	ldr	r1, [pc, #16]	; (8010210 <USBD_FS_ConfigStrDescriptor+0x34>)
 80101fe:	4805      	ldr	r0, [pc, #20]	; (8010214 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010200:	f7fc fc0d 	bl	800ca1e <USBD_GetString>
  }
  return USBD_StrDesc;
 8010204:	4b02      	ldr	r3, [pc, #8]	; (8010210 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010206:	4618      	mov	r0, r3
 8010208:	3708      	adds	r7, #8
 801020a:	46bd      	mov	sp, r7
 801020c:	bd80      	pop	{r7, pc}
 801020e:	bf00      	nop
 8010210:	200082cc 	.word	0x200082cc
 8010214:	080193b0 	.word	0x080193b0

08010218 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010218:	b580      	push	{r7, lr}
 801021a:	b082      	sub	sp, #8
 801021c:	af00      	add	r7, sp, #0
 801021e:	4603      	mov	r3, r0
 8010220:	6039      	str	r1, [r7, #0]
 8010222:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010224:	79fb      	ldrb	r3, [r7, #7]
 8010226:	2b00      	cmp	r3, #0
 8010228:	d105      	bne.n	8010236 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801022a:	683a      	ldr	r2, [r7, #0]
 801022c:	4907      	ldr	r1, [pc, #28]	; (801024c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801022e:	4808      	ldr	r0, [pc, #32]	; (8010250 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010230:	f7fc fbf5 	bl	800ca1e <USBD_GetString>
 8010234:	e004      	b.n	8010240 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010236:	683a      	ldr	r2, [r7, #0]
 8010238:	4904      	ldr	r1, [pc, #16]	; (801024c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801023a:	4805      	ldr	r0, [pc, #20]	; (8010250 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801023c:	f7fc fbef 	bl	800ca1e <USBD_GetString>
  }
  return USBD_StrDesc;
 8010240:	4b02      	ldr	r3, [pc, #8]	; (801024c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010242:	4618      	mov	r0, r3
 8010244:	3708      	adds	r7, #8
 8010246:	46bd      	mov	sp, r7
 8010248:	bd80      	pop	{r7, pc}
 801024a:	bf00      	nop
 801024c:	200082cc 	.word	0x200082cc
 8010250:	080193bc 	.word	0x080193bc

08010254 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010254:	b580      	push	{r7, lr}
 8010256:	b084      	sub	sp, #16
 8010258:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801025a:	4b0f      	ldr	r3, [pc, #60]	; (8010298 <Get_SerialNum+0x44>)
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010260:	4b0e      	ldr	r3, [pc, #56]	; (801029c <Get_SerialNum+0x48>)
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010266:	4b0e      	ldr	r3, [pc, #56]	; (80102a0 <Get_SerialNum+0x4c>)
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801026c:	68fa      	ldr	r2, [r7, #12]
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	4413      	add	r3, r2
 8010272:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	2b00      	cmp	r3, #0
 8010278:	d009      	beq.n	801028e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801027a:	2208      	movs	r2, #8
 801027c:	4909      	ldr	r1, [pc, #36]	; (80102a4 <Get_SerialNum+0x50>)
 801027e:	68f8      	ldr	r0, [r7, #12]
 8010280:	f000 f814 	bl	80102ac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010284:	2204      	movs	r2, #4
 8010286:	4908      	ldr	r1, [pc, #32]	; (80102a8 <Get_SerialNum+0x54>)
 8010288:	68b8      	ldr	r0, [r7, #8]
 801028a:	f000 f80f 	bl	80102ac <IntToUnicode>
  }
}
 801028e:	bf00      	nop
 8010290:	3710      	adds	r7, #16
 8010292:	46bd      	mov	sp, r7
 8010294:	bd80      	pop	{r7, pc}
 8010296:	bf00      	nop
 8010298:	1fff7a10 	.word	0x1fff7a10
 801029c:	1fff7a14 	.word	0x1fff7a14
 80102a0:	1fff7a18 	.word	0x1fff7a18
 80102a4:	2000016a 	.word	0x2000016a
 80102a8:	2000017a 	.word	0x2000017a

080102ac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80102ac:	b480      	push	{r7}
 80102ae:	b087      	sub	sp, #28
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	60f8      	str	r0, [r7, #12]
 80102b4:	60b9      	str	r1, [r7, #8]
 80102b6:	4613      	mov	r3, r2
 80102b8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80102ba:	2300      	movs	r3, #0
 80102bc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80102be:	2300      	movs	r3, #0
 80102c0:	75fb      	strb	r3, [r7, #23]
 80102c2:	e027      	b.n	8010314 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	0f1b      	lsrs	r3, r3, #28
 80102c8:	2b09      	cmp	r3, #9
 80102ca:	d80b      	bhi.n	80102e4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	0f1b      	lsrs	r3, r3, #28
 80102d0:	b2da      	uxtb	r2, r3
 80102d2:	7dfb      	ldrb	r3, [r7, #23]
 80102d4:	005b      	lsls	r3, r3, #1
 80102d6:	4619      	mov	r1, r3
 80102d8:	68bb      	ldr	r3, [r7, #8]
 80102da:	440b      	add	r3, r1
 80102dc:	3230      	adds	r2, #48	; 0x30
 80102de:	b2d2      	uxtb	r2, r2
 80102e0:	701a      	strb	r2, [r3, #0]
 80102e2:	e00a      	b.n	80102fa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	0f1b      	lsrs	r3, r3, #28
 80102e8:	b2da      	uxtb	r2, r3
 80102ea:	7dfb      	ldrb	r3, [r7, #23]
 80102ec:	005b      	lsls	r3, r3, #1
 80102ee:	4619      	mov	r1, r3
 80102f0:	68bb      	ldr	r3, [r7, #8]
 80102f2:	440b      	add	r3, r1
 80102f4:	3237      	adds	r2, #55	; 0x37
 80102f6:	b2d2      	uxtb	r2, r2
 80102f8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	011b      	lsls	r3, r3, #4
 80102fe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010300:	7dfb      	ldrb	r3, [r7, #23]
 8010302:	005b      	lsls	r3, r3, #1
 8010304:	3301      	adds	r3, #1
 8010306:	68ba      	ldr	r2, [r7, #8]
 8010308:	4413      	add	r3, r2
 801030a:	2200      	movs	r2, #0
 801030c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801030e:	7dfb      	ldrb	r3, [r7, #23]
 8010310:	3301      	adds	r3, #1
 8010312:	75fb      	strb	r3, [r7, #23]
 8010314:	7dfa      	ldrb	r2, [r7, #23]
 8010316:	79fb      	ldrb	r3, [r7, #7]
 8010318:	429a      	cmp	r2, r3
 801031a:	d3d3      	bcc.n	80102c4 <IntToUnicode+0x18>
  }
}
 801031c:	bf00      	nop
 801031e:	371c      	adds	r7, #28
 8010320:	46bd      	mov	sp, r7
 8010322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010326:	4770      	bx	lr

08010328 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010328:	b580      	push	{r7, lr}
 801032a:	b08a      	sub	sp, #40	; 0x28
 801032c:	af00      	add	r7, sp, #0
 801032e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010330:	f107 0314 	add.w	r3, r7, #20
 8010334:	2200      	movs	r2, #0
 8010336:	601a      	str	r2, [r3, #0]
 8010338:	605a      	str	r2, [r3, #4]
 801033a:	609a      	str	r2, [r3, #8]
 801033c:	60da      	str	r2, [r3, #12]
 801033e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010348:	d13a      	bne.n	80103c0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801034a:	2300      	movs	r3, #0
 801034c:	613b      	str	r3, [r7, #16]
 801034e:	4b1e      	ldr	r3, [pc, #120]	; (80103c8 <HAL_PCD_MspInit+0xa0>)
 8010350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010352:	4a1d      	ldr	r2, [pc, #116]	; (80103c8 <HAL_PCD_MspInit+0xa0>)
 8010354:	f043 0301 	orr.w	r3, r3, #1
 8010358:	6313      	str	r3, [r2, #48]	; 0x30
 801035a:	4b1b      	ldr	r3, [pc, #108]	; (80103c8 <HAL_PCD_MspInit+0xa0>)
 801035c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801035e:	f003 0301 	and.w	r3, r3, #1
 8010362:	613b      	str	r3, [r7, #16]
 8010364:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010366:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801036a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801036c:	2302      	movs	r3, #2
 801036e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010370:	2300      	movs	r3, #0
 8010372:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010374:	2303      	movs	r3, #3
 8010376:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010378:	230a      	movs	r3, #10
 801037a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801037c:	f107 0314 	add.w	r3, r7, #20
 8010380:	4619      	mov	r1, r3
 8010382:	4812      	ldr	r0, [pc, #72]	; (80103cc <HAL_PCD_MspInit+0xa4>)
 8010384:	f7f2 fda8 	bl	8002ed8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010388:	4b0f      	ldr	r3, [pc, #60]	; (80103c8 <HAL_PCD_MspInit+0xa0>)
 801038a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801038c:	4a0e      	ldr	r2, [pc, #56]	; (80103c8 <HAL_PCD_MspInit+0xa0>)
 801038e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010392:	6353      	str	r3, [r2, #52]	; 0x34
 8010394:	2300      	movs	r3, #0
 8010396:	60fb      	str	r3, [r7, #12]
 8010398:	4b0b      	ldr	r3, [pc, #44]	; (80103c8 <HAL_PCD_MspInit+0xa0>)
 801039a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801039c:	4a0a      	ldr	r2, [pc, #40]	; (80103c8 <HAL_PCD_MspInit+0xa0>)
 801039e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80103a2:	6453      	str	r3, [r2, #68]	; 0x44
 80103a4:	4b08      	ldr	r3, [pc, #32]	; (80103c8 <HAL_PCD_MspInit+0xa0>)
 80103a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80103a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80103ac:	60fb      	str	r3, [r7, #12]
 80103ae:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80103b0:	2200      	movs	r2, #0
 80103b2:	2105      	movs	r1, #5
 80103b4:	2043      	movs	r0, #67	; 0x43
 80103b6:	f7f2 f9c7 	bl	8002748 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80103ba:	2043      	movs	r0, #67	; 0x43
 80103bc:	f7f2 f9e0 	bl	8002780 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80103c0:	bf00      	nop
 80103c2:	3728      	adds	r7, #40	; 0x28
 80103c4:	46bd      	mov	sp, r7
 80103c6:	bd80      	pop	{r7, pc}
 80103c8:	40023800 	.word	0x40023800
 80103cc:	40020000 	.word	0x40020000

080103d0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80103d0:	b580      	push	{r7, lr}
 80103d2:	b082      	sub	sp, #8
 80103d4:	af00      	add	r7, sp, #0
 80103d6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80103e4:	4619      	mov	r1, r3
 80103e6:	4610      	mov	r0, r2
 80103e8:	f7fb fb96 	bl	800bb18 <USBD_LL_SetupStage>
}
 80103ec:	bf00      	nop
 80103ee:	3708      	adds	r7, #8
 80103f0:	46bd      	mov	sp, r7
 80103f2:	bd80      	pop	{r7, pc}

080103f4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80103f4:	b580      	push	{r7, lr}
 80103f6:	b082      	sub	sp, #8
 80103f8:	af00      	add	r7, sp, #0
 80103fa:	6078      	str	r0, [r7, #4]
 80103fc:	460b      	mov	r3, r1
 80103fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8010406:	78fa      	ldrb	r2, [r7, #3]
 8010408:	6879      	ldr	r1, [r7, #4]
 801040a:	4613      	mov	r3, r2
 801040c:	00db      	lsls	r3, r3, #3
 801040e:	1a9b      	subs	r3, r3, r2
 8010410:	009b      	lsls	r3, r3, #2
 8010412:	440b      	add	r3, r1
 8010414:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8010418:	681a      	ldr	r2, [r3, #0]
 801041a:	78fb      	ldrb	r3, [r7, #3]
 801041c:	4619      	mov	r1, r3
 801041e:	f7fb fbce 	bl	800bbbe <USBD_LL_DataOutStage>
}
 8010422:	bf00      	nop
 8010424:	3708      	adds	r7, #8
 8010426:	46bd      	mov	sp, r7
 8010428:	bd80      	pop	{r7, pc}

0801042a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801042a:	b580      	push	{r7, lr}
 801042c:	b082      	sub	sp, #8
 801042e:	af00      	add	r7, sp, #0
 8010430:	6078      	str	r0, [r7, #4]
 8010432:	460b      	mov	r3, r1
 8010434:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801043c:	78fa      	ldrb	r2, [r7, #3]
 801043e:	6879      	ldr	r1, [r7, #4]
 8010440:	4613      	mov	r3, r2
 8010442:	00db      	lsls	r3, r3, #3
 8010444:	1a9b      	subs	r3, r3, r2
 8010446:	009b      	lsls	r3, r3, #2
 8010448:	440b      	add	r3, r1
 801044a:	3348      	adds	r3, #72	; 0x48
 801044c:	681a      	ldr	r2, [r3, #0]
 801044e:	78fb      	ldrb	r3, [r7, #3]
 8010450:	4619      	mov	r1, r3
 8010452:	f7fb fc17 	bl	800bc84 <USBD_LL_DataInStage>
}
 8010456:	bf00      	nop
 8010458:	3708      	adds	r7, #8
 801045a:	46bd      	mov	sp, r7
 801045c:	bd80      	pop	{r7, pc}

0801045e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801045e:	b580      	push	{r7, lr}
 8010460:	b082      	sub	sp, #8
 8010462:	af00      	add	r7, sp, #0
 8010464:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801046c:	4618      	mov	r0, r3
 801046e:	f7fb fd1b 	bl	800bea8 <USBD_LL_SOF>
}
 8010472:	bf00      	nop
 8010474:	3708      	adds	r7, #8
 8010476:	46bd      	mov	sp, r7
 8010478:	bd80      	pop	{r7, pc}

0801047a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801047a:	b580      	push	{r7, lr}
 801047c:	b084      	sub	sp, #16
 801047e:	af00      	add	r7, sp, #0
 8010480:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010482:	2301      	movs	r3, #1
 8010484:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	68db      	ldr	r3, [r3, #12]
 801048a:	2b00      	cmp	r3, #0
 801048c:	d102      	bne.n	8010494 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801048e:	2300      	movs	r3, #0
 8010490:	73fb      	strb	r3, [r7, #15]
 8010492:	e008      	b.n	80104a6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	68db      	ldr	r3, [r3, #12]
 8010498:	2b02      	cmp	r3, #2
 801049a:	d102      	bne.n	80104a2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801049c:	2301      	movs	r3, #1
 801049e:	73fb      	strb	r3, [r7, #15]
 80104a0:	e001      	b.n	80104a6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80104a2:	f7f0 ff81 	bl	80013a8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80104ac:	7bfa      	ldrb	r2, [r7, #15]
 80104ae:	4611      	mov	r1, r2
 80104b0:	4618      	mov	r0, r3
 80104b2:	f7fb fcbe 	bl	800be32 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80104bc:	4618      	mov	r0, r3
 80104be:	f7fb fc77 	bl	800bdb0 <USBD_LL_Reset>
}
 80104c2:	bf00      	nop
 80104c4:	3710      	adds	r7, #16
 80104c6:	46bd      	mov	sp, r7
 80104c8:	bd80      	pop	{r7, pc}
	...

080104cc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80104cc:	b580      	push	{r7, lr}
 80104ce:	b082      	sub	sp, #8
 80104d0:	af00      	add	r7, sp, #0
 80104d2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80104da:	4618      	mov	r0, r3
 80104dc:	f7fb fcb9 	bl	800be52 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	687a      	ldr	r2, [r7, #4]
 80104ec:	6812      	ldr	r2, [r2, #0]
 80104ee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80104f2:	f043 0301 	orr.w	r3, r3, #1
 80104f6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	6a1b      	ldr	r3, [r3, #32]
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d005      	beq.n	801050c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010500:	4b04      	ldr	r3, [pc, #16]	; (8010514 <HAL_PCD_SuspendCallback+0x48>)
 8010502:	691b      	ldr	r3, [r3, #16]
 8010504:	4a03      	ldr	r2, [pc, #12]	; (8010514 <HAL_PCD_SuspendCallback+0x48>)
 8010506:	f043 0306 	orr.w	r3, r3, #6
 801050a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801050c:	bf00      	nop
 801050e:	3708      	adds	r7, #8
 8010510:	46bd      	mov	sp, r7
 8010512:	bd80      	pop	{r7, pc}
 8010514:	e000ed00 	.word	0xe000ed00

08010518 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010518:	b580      	push	{r7, lr}
 801051a:	b082      	sub	sp, #8
 801051c:	af00      	add	r7, sp, #0
 801051e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010526:	4618      	mov	r0, r3
 8010528:	f7fb fca8 	bl	800be7c <USBD_LL_Resume>
}
 801052c:	bf00      	nop
 801052e:	3708      	adds	r7, #8
 8010530:	46bd      	mov	sp, r7
 8010532:	bd80      	pop	{r7, pc}

08010534 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010534:	b580      	push	{r7, lr}
 8010536:	b082      	sub	sp, #8
 8010538:	af00      	add	r7, sp, #0
 801053a:	6078      	str	r0, [r7, #4]
 801053c:	460b      	mov	r3, r1
 801053e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010546:	78fa      	ldrb	r2, [r7, #3]
 8010548:	4611      	mov	r1, r2
 801054a:	4618      	mov	r0, r3
 801054c:	f7fb fcd3 	bl	800bef6 <USBD_LL_IsoOUTIncomplete>
}
 8010550:	bf00      	nop
 8010552:	3708      	adds	r7, #8
 8010554:	46bd      	mov	sp, r7
 8010556:	bd80      	pop	{r7, pc}

08010558 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010558:	b580      	push	{r7, lr}
 801055a:	b082      	sub	sp, #8
 801055c:	af00      	add	r7, sp, #0
 801055e:	6078      	str	r0, [r7, #4]
 8010560:	460b      	mov	r3, r1
 8010562:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801056a:	78fa      	ldrb	r2, [r7, #3]
 801056c:	4611      	mov	r1, r2
 801056e:	4618      	mov	r0, r3
 8010570:	f7fb fcb4 	bl	800bedc <USBD_LL_IsoINIncomplete>
}
 8010574:	bf00      	nop
 8010576:	3708      	adds	r7, #8
 8010578:	46bd      	mov	sp, r7
 801057a:	bd80      	pop	{r7, pc}

0801057c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801057c:	b580      	push	{r7, lr}
 801057e:	b082      	sub	sp, #8
 8010580:	af00      	add	r7, sp, #0
 8010582:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801058a:	4618      	mov	r0, r3
 801058c:	f7fb fcc0 	bl	800bf10 <USBD_LL_DevConnected>
}
 8010590:	bf00      	nop
 8010592:	3708      	adds	r7, #8
 8010594:	46bd      	mov	sp, r7
 8010596:	bd80      	pop	{r7, pc}

08010598 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010598:	b580      	push	{r7, lr}
 801059a:	b082      	sub	sp, #8
 801059c:	af00      	add	r7, sp, #0
 801059e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80105a6:	4618      	mov	r0, r3
 80105a8:	f7fb fcbd 	bl	800bf26 <USBD_LL_DevDisconnected>
}
 80105ac:	bf00      	nop
 80105ae:	3708      	adds	r7, #8
 80105b0:	46bd      	mov	sp, r7
 80105b2:	bd80      	pop	{r7, pc}

080105b4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80105b4:	b580      	push	{r7, lr}
 80105b6:	b082      	sub	sp, #8
 80105b8:	af00      	add	r7, sp, #0
 80105ba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	781b      	ldrb	r3, [r3, #0]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d13c      	bne.n	801063e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80105c4:	4a20      	ldr	r2, [pc, #128]	; (8010648 <USBD_LL_Init+0x94>)
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	4a1e      	ldr	r2, [pc, #120]	; (8010648 <USBD_LL_Init+0x94>)
 80105d0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80105d4:	4b1c      	ldr	r3, [pc, #112]	; (8010648 <USBD_LL_Init+0x94>)
 80105d6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80105da:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80105dc:	4b1a      	ldr	r3, [pc, #104]	; (8010648 <USBD_LL_Init+0x94>)
 80105de:	2204      	movs	r2, #4
 80105e0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80105e2:	4b19      	ldr	r3, [pc, #100]	; (8010648 <USBD_LL_Init+0x94>)
 80105e4:	2202      	movs	r2, #2
 80105e6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80105e8:	4b17      	ldr	r3, [pc, #92]	; (8010648 <USBD_LL_Init+0x94>)
 80105ea:	2200      	movs	r2, #0
 80105ec:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80105ee:	4b16      	ldr	r3, [pc, #88]	; (8010648 <USBD_LL_Init+0x94>)
 80105f0:	2202      	movs	r2, #2
 80105f2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80105f4:	4b14      	ldr	r3, [pc, #80]	; (8010648 <USBD_LL_Init+0x94>)
 80105f6:	2200      	movs	r2, #0
 80105f8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80105fa:	4b13      	ldr	r3, [pc, #76]	; (8010648 <USBD_LL_Init+0x94>)
 80105fc:	2200      	movs	r2, #0
 80105fe:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010600:	4b11      	ldr	r3, [pc, #68]	; (8010648 <USBD_LL_Init+0x94>)
 8010602:	2200      	movs	r2, #0
 8010604:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8010606:	4b10      	ldr	r3, [pc, #64]	; (8010648 <USBD_LL_Init+0x94>)
 8010608:	2200      	movs	r2, #0
 801060a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801060c:	4b0e      	ldr	r3, [pc, #56]	; (8010648 <USBD_LL_Init+0x94>)
 801060e:	2200      	movs	r2, #0
 8010610:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010612:	480d      	ldr	r0, [pc, #52]	; (8010648 <USBD_LL_Init+0x94>)
 8010614:	f7f5 fc58 	bl	8005ec8 <HAL_PCD_Init>
 8010618:	4603      	mov	r3, r0
 801061a:	2b00      	cmp	r3, #0
 801061c:	d001      	beq.n	8010622 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801061e:	f7f0 fec3 	bl	80013a8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8010622:	2180      	movs	r1, #128	; 0x80
 8010624:	4808      	ldr	r0, [pc, #32]	; (8010648 <USBD_LL_Init+0x94>)
 8010626:	f7f6 fdb6 	bl	8007196 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801062a:	2240      	movs	r2, #64	; 0x40
 801062c:	2100      	movs	r1, #0
 801062e:	4806      	ldr	r0, [pc, #24]	; (8010648 <USBD_LL_Init+0x94>)
 8010630:	f7f6 fd6a 	bl	8007108 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010634:	2280      	movs	r2, #128	; 0x80
 8010636:	2101      	movs	r1, #1
 8010638:	4803      	ldr	r0, [pc, #12]	; (8010648 <USBD_LL_Init+0x94>)
 801063a:	f7f6 fd65 	bl	8007108 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801063e:	2300      	movs	r3, #0
}
 8010640:	4618      	mov	r0, r3
 8010642:	3708      	adds	r7, #8
 8010644:	46bd      	mov	sp, r7
 8010646:	bd80      	pop	{r7, pc}
 8010648:	200084cc 	.word	0x200084cc

0801064c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801064c:	b580      	push	{r7, lr}
 801064e:	b084      	sub	sp, #16
 8010650:	af00      	add	r7, sp, #0
 8010652:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010654:	2300      	movs	r3, #0
 8010656:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010658:	2300      	movs	r3, #0
 801065a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010662:	4618      	mov	r0, r3
 8010664:	f7f5 fd4d 	bl	8006102 <HAL_PCD_Start>
 8010668:	4603      	mov	r3, r0
 801066a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801066c:	7bfb      	ldrb	r3, [r7, #15]
 801066e:	4618      	mov	r0, r3
 8010670:	f000 f92a 	bl	80108c8 <USBD_Get_USB_Status>
 8010674:	4603      	mov	r3, r0
 8010676:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010678:	7bbb      	ldrb	r3, [r7, #14]
}
 801067a:	4618      	mov	r0, r3
 801067c:	3710      	adds	r7, #16
 801067e:	46bd      	mov	sp, r7
 8010680:	bd80      	pop	{r7, pc}

08010682 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010682:	b580      	push	{r7, lr}
 8010684:	b084      	sub	sp, #16
 8010686:	af00      	add	r7, sp, #0
 8010688:	6078      	str	r0, [r7, #4]
 801068a:	4608      	mov	r0, r1
 801068c:	4611      	mov	r1, r2
 801068e:	461a      	mov	r2, r3
 8010690:	4603      	mov	r3, r0
 8010692:	70fb      	strb	r3, [r7, #3]
 8010694:	460b      	mov	r3, r1
 8010696:	70bb      	strb	r3, [r7, #2]
 8010698:	4613      	mov	r3, r2
 801069a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801069c:	2300      	movs	r3, #0
 801069e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80106a0:	2300      	movs	r3, #0
 80106a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80106aa:	78bb      	ldrb	r3, [r7, #2]
 80106ac:	883a      	ldrh	r2, [r7, #0]
 80106ae:	78f9      	ldrb	r1, [r7, #3]
 80106b0:	f7f6 f931 	bl	8006916 <HAL_PCD_EP_Open>
 80106b4:	4603      	mov	r3, r0
 80106b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80106b8:	7bfb      	ldrb	r3, [r7, #15]
 80106ba:	4618      	mov	r0, r3
 80106bc:	f000 f904 	bl	80108c8 <USBD_Get_USB_Status>
 80106c0:	4603      	mov	r3, r0
 80106c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80106c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80106c6:	4618      	mov	r0, r3
 80106c8:	3710      	adds	r7, #16
 80106ca:	46bd      	mov	sp, r7
 80106cc:	bd80      	pop	{r7, pc}

080106ce <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80106ce:	b580      	push	{r7, lr}
 80106d0:	b084      	sub	sp, #16
 80106d2:	af00      	add	r7, sp, #0
 80106d4:	6078      	str	r0, [r7, #4]
 80106d6:	460b      	mov	r3, r1
 80106d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80106da:	2300      	movs	r3, #0
 80106dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80106de:	2300      	movs	r3, #0
 80106e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80106e8:	78fa      	ldrb	r2, [r7, #3]
 80106ea:	4611      	mov	r1, r2
 80106ec:	4618      	mov	r0, r3
 80106ee:	f7f6 f97a 	bl	80069e6 <HAL_PCD_EP_Close>
 80106f2:	4603      	mov	r3, r0
 80106f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80106f6:	7bfb      	ldrb	r3, [r7, #15]
 80106f8:	4618      	mov	r0, r3
 80106fa:	f000 f8e5 	bl	80108c8 <USBD_Get_USB_Status>
 80106fe:	4603      	mov	r3, r0
 8010700:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010702:	7bbb      	ldrb	r3, [r7, #14]
}
 8010704:	4618      	mov	r0, r3
 8010706:	3710      	adds	r7, #16
 8010708:	46bd      	mov	sp, r7
 801070a:	bd80      	pop	{r7, pc}

0801070c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801070c:	b580      	push	{r7, lr}
 801070e:	b084      	sub	sp, #16
 8010710:	af00      	add	r7, sp, #0
 8010712:	6078      	str	r0, [r7, #4]
 8010714:	460b      	mov	r3, r1
 8010716:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010718:	2300      	movs	r3, #0
 801071a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801071c:	2300      	movs	r3, #0
 801071e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010726:	78fa      	ldrb	r2, [r7, #3]
 8010728:	4611      	mov	r1, r2
 801072a:	4618      	mov	r0, r3
 801072c:	f7f6 fa52 	bl	8006bd4 <HAL_PCD_EP_SetStall>
 8010730:	4603      	mov	r3, r0
 8010732:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010734:	7bfb      	ldrb	r3, [r7, #15]
 8010736:	4618      	mov	r0, r3
 8010738:	f000 f8c6 	bl	80108c8 <USBD_Get_USB_Status>
 801073c:	4603      	mov	r3, r0
 801073e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010740:	7bbb      	ldrb	r3, [r7, #14]
}
 8010742:	4618      	mov	r0, r3
 8010744:	3710      	adds	r7, #16
 8010746:	46bd      	mov	sp, r7
 8010748:	bd80      	pop	{r7, pc}

0801074a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801074a:	b580      	push	{r7, lr}
 801074c:	b084      	sub	sp, #16
 801074e:	af00      	add	r7, sp, #0
 8010750:	6078      	str	r0, [r7, #4]
 8010752:	460b      	mov	r3, r1
 8010754:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010756:	2300      	movs	r3, #0
 8010758:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801075a:	2300      	movs	r3, #0
 801075c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010764:	78fa      	ldrb	r2, [r7, #3]
 8010766:	4611      	mov	r1, r2
 8010768:	4618      	mov	r0, r3
 801076a:	f7f6 fa97 	bl	8006c9c <HAL_PCD_EP_ClrStall>
 801076e:	4603      	mov	r3, r0
 8010770:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010772:	7bfb      	ldrb	r3, [r7, #15]
 8010774:	4618      	mov	r0, r3
 8010776:	f000 f8a7 	bl	80108c8 <USBD_Get_USB_Status>
 801077a:	4603      	mov	r3, r0
 801077c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801077e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010780:	4618      	mov	r0, r3
 8010782:	3710      	adds	r7, #16
 8010784:	46bd      	mov	sp, r7
 8010786:	bd80      	pop	{r7, pc}

08010788 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010788:	b480      	push	{r7}
 801078a:	b085      	sub	sp, #20
 801078c:	af00      	add	r7, sp, #0
 801078e:	6078      	str	r0, [r7, #4]
 8010790:	460b      	mov	r3, r1
 8010792:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801079a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801079c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	da0b      	bge.n	80107bc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80107a4:	78fb      	ldrb	r3, [r7, #3]
 80107a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80107aa:	68f9      	ldr	r1, [r7, #12]
 80107ac:	4613      	mov	r3, r2
 80107ae:	00db      	lsls	r3, r3, #3
 80107b0:	1a9b      	subs	r3, r3, r2
 80107b2:	009b      	lsls	r3, r3, #2
 80107b4:	440b      	add	r3, r1
 80107b6:	333e      	adds	r3, #62	; 0x3e
 80107b8:	781b      	ldrb	r3, [r3, #0]
 80107ba:	e00b      	b.n	80107d4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80107bc:	78fb      	ldrb	r3, [r7, #3]
 80107be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80107c2:	68f9      	ldr	r1, [r7, #12]
 80107c4:	4613      	mov	r3, r2
 80107c6:	00db      	lsls	r3, r3, #3
 80107c8:	1a9b      	subs	r3, r3, r2
 80107ca:	009b      	lsls	r3, r3, #2
 80107cc:	440b      	add	r3, r1
 80107ce:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80107d2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80107d4:	4618      	mov	r0, r3
 80107d6:	3714      	adds	r7, #20
 80107d8:	46bd      	mov	sp, r7
 80107da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107de:	4770      	bx	lr

080107e0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80107e0:	b580      	push	{r7, lr}
 80107e2:	b084      	sub	sp, #16
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	6078      	str	r0, [r7, #4]
 80107e8:	460b      	mov	r3, r1
 80107ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80107ec:	2300      	movs	r3, #0
 80107ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80107f0:	2300      	movs	r3, #0
 80107f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80107fa:	78fa      	ldrb	r2, [r7, #3]
 80107fc:	4611      	mov	r1, r2
 80107fe:	4618      	mov	r0, r3
 8010800:	f7f6 f864 	bl	80068cc <HAL_PCD_SetAddress>
 8010804:	4603      	mov	r3, r0
 8010806:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010808:	7bfb      	ldrb	r3, [r7, #15]
 801080a:	4618      	mov	r0, r3
 801080c:	f000 f85c 	bl	80108c8 <USBD_Get_USB_Status>
 8010810:	4603      	mov	r3, r0
 8010812:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010814:	7bbb      	ldrb	r3, [r7, #14]
}
 8010816:	4618      	mov	r0, r3
 8010818:	3710      	adds	r7, #16
 801081a:	46bd      	mov	sp, r7
 801081c:	bd80      	pop	{r7, pc}

0801081e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801081e:	b580      	push	{r7, lr}
 8010820:	b086      	sub	sp, #24
 8010822:	af00      	add	r7, sp, #0
 8010824:	60f8      	str	r0, [r7, #12]
 8010826:	607a      	str	r2, [r7, #4]
 8010828:	603b      	str	r3, [r7, #0]
 801082a:	460b      	mov	r3, r1
 801082c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801082e:	2300      	movs	r3, #0
 8010830:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010832:	2300      	movs	r3, #0
 8010834:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801083c:	7af9      	ldrb	r1, [r7, #11]
 801083e:	683b      	ldr	r3, [r7, #0]
 8010840:	687a      	ldr	r2, [r7, #4]
 8010842:	f7f6 f97d 	bl	8006b40 <HAL_PCD_EP_Transmit>
 8010846:	4603      	mov	r3, r0
 8010848:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801084a:	7dfb      	ldrb	r3, [r7, #23]
 801084c:	4618      	mov	r0, r3
 801084e:	f000 f83b 	bl	80108c8 <USBD_Get_USB_Status>
 8010852:	4603      	mov	r3, r0
 8010854:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010856:	7dbb      	ldrb	r3, [r7, #22]
}
 8010858:	4618      	mov	r0, r3
 801085a:	3718      	adds	r7, #24
 801085c:	46bd      	mov	sp, r7
 801085e:	bd80      	pop	{r7, pc}

08010860 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010860:	b580      	push	{r7, lr}
 8010862:	b086      	sub	sp, #24
 8010864:	af00      	add	r7, sp, #0
 8010866:	60f8      	str	r0, [r7, #12]
 8010868:	607a      	str	r2, [r7, #4]
 801086a:	603b      	str	r3, [r7, #0]
 801086c:	460b      	mov	r3, r1
 801086e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010870:	2300      	movs	r3, #0
 8010872:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010874:	2300      	movs	r3, #0
 8010876:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801087e:	7af9      	ldrb	r1, [r7, #11]
 8010880:	683b      	ldr	r3, [r7, #0]
 8010882:	687a      	ldr	r2, [r7, #4]
 8010884:	f7f6 f8f9 	bl	8006a7a <HAL_PCD_EP_Receive>
 8010888:	4603      	mov	r3, r0
 801088a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801088c:	7dfb      	ldrb	r3, [r7, #23]
 801088e:	4618      	mov	r0, r3
 8010890:	f000 f81a 	bl	80108c8 <USBD_Get_USB_Status>
 8010894:	4603      	mov	r3, r0
 8010896:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010898:	7dbb      	ldrb	r3, [r7, #22]
}
 801089a:	4618      	mov	r0, r3
 801089c:	3718      	adds	r7, #24
 801089e:	46bd      	mov	sp, r7
 80108a0:	bd80      	pop	{r7, pc}

080108a2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80108a2:	b580      	push	{r7, lr}
 80108a4:	b082      	sub	sp, #8
 80108a6:	af00      	add	r7, sp, #0
 80108a8:	6078      	str	r0, [r7, #4]
 80108aa:	460b      	mov	r3, r1
 80108ac:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80108b4:	78fa      	ldrb	r2, [r7, #3]
 80108b6:	4611      	mov	r1, r2
 80108b8:	4618      	mov	r0, r3
 80108ba:	f7f6 f929 	bl	8006b10 <HAL_PCD_EP_GetRxCount>
 80108be:	4603      	mov	r3, r0
}
 80108c0:	4618      	mov	r0, r3
 80108c2:	3708      	adds	r7, #8
 80108c4:	46bd      	mov	sp, r7
 80108c6:	bd80      	pop	{r7, pc}

080108c8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80108c8:	b480      	push	{r7}
 80108ca:	b085      	sub	sp, #20
 80108cc:	af00      	add	r7, sp, #0
 80108ce:	4603      	mov	r3, r0
 80108d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80108d2:	2300      	movs	r3, #0
 80108d4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80108d6:	79fb      	ldrb	r3, [r7, #7]
 80108d8:	2b03      	cmp	r3, #3
 80108da:	d817      	bhi.n	801090c <USBD_Get_USB_Status+0x44>
 80108dc:	a201      	add	r2, pc, #4	; (adr r2, 80108e4 <USBD_Get_USB_Status+0x1c>)
 80108de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108e2:	bf00      	nop
 80108e4:	080108f5 	.word	0x080108f5
 80108e8:	080108fb 	.word	0x080108fb
 80108ec:	08010901 	.word	0x08010901
 80108f0:	08010907 	.word	0x08010907
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80108f4:	2300      	movs	r3, #0
 80108f6:	73fb      	strb	r3, [r7, #15]
    break;
 80108f8:	e00b      	b.n	8010912 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80108fa:	2303      	movs	r3, #3
 80108fc:	73fb      	strb	r3, [r7, #15]
    break;
 80108fe:	e008      	b.n	8010912 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010900:	2301      	movs	r3, #1
 8010902:	73fb      	strb	r3, [r7, #15]
    break;
 8010904:	e005      	b.n	8010912 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010906:	2303      	movs	r3, #3
 8010908:	73fb      	strb	r3, [r7, #15]
    break;
 801090a:	e002      	b.n	8010912 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801090c:	2303      	movs	r3, #3
 801090e:	73fb      	strb	r3, [r7, #15]
    break;
 8010910:	bf00      	nop
  }
  return usb_status;
 8010912:	7bfb      	ldrb	r3, [r7, #15]
}
 8010914:	4618      	mov	r0, r3
 8010916:	3714      	adds	r7, #20
 8010918:	46bd      	mov	sp, r7
 801091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801091e:	4770      	bx	lr

08010920 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8010920:	b480      	push	{r7}
 8010922:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8010924:	bf00      	nop
 8010926:	46bd      	mov	sp, r7
 8010928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801092c:	4770      	bx	lr
	...

08010930 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8010930:	b580      	push	{r7, lr}
 8010932:	b086      	sub	sp, #24
 8010934:	af04      	add	r7, sp, #16
 8010936:	4603      	mov	r3, r0
 8010938:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 801093a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801093e:	9302      	str	r3, [sp, #8]
 8010940:	2301      	movs	r3, #1
 8010942:	9301      	str	r3, [sp, #4]
 8010944:	1dfb      	adds	r3, r7, #7
 8010946:	9300      	str	r3, [sp, #0]
 8010948:	2301      	movs	r3, #1
 801094a:	2200      	movs	r2, #0
 801094c:	2178      	movs	r1, #120	; 0x78
 801094e:	4803      	ldr	r0, [pc, #12]	; (801095c <ssd1306_WriteCommand+0x2c>)
 8010950:	f7f2 fdae 	bl	80034b0 <HAL_I2C_Mem_Write>
}
 8010954:	bf00      	nop
 8010956:	3708      	adds	r7, #8
 8010958:	46bd      	mov	sp, r7
 801095a:	bd80      	pop	{r7, pc}
 801095c:	20005d90 	.word	0x20005d90

08010960 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8010960:	b580      	push	{r7, lr}
 8010962:	b086      	sub	sp, #24
 8010964:	af04      	add	r7, sp, #16
 8010966:	6078      	str	r0, [r7, #4]
 8010968:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 801096a:	683b      	ldr	r3, [r7, #0]
 801096c:	b29b      	uxth	r3, r3
 801096e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010972:	9202      	str	r2, [sp, #8]
 8010974:	9301      	str	r3, [sp, #4]
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	9300      	str	r3, [sp, #0]
 801097a:	2301      	movs	r3, #1
 801097c:	2240      	movs	r2, #64	; 0x40
 801097e:	2178      	movs	r1, #120	; 0x78
 8010980:	4803      	ldr	r0, [pc, #12]	; (8010990 <ssd1306_WriteData+0x30>)
 8010982:	f7f2 fd95 	bl	80034b0 <HAL_I2C_Mem_Write>
}
 8010986:	bf00      	nop
 8010988:	3708      	adds	r7, #8
 801098a:	46bd      	mov	sp, r7
 801098c:	bd80      	pop	{r7, pc}
 801098e:	bf00      	nop
 8010990:	20005d90 	.word	0x20005d90

08010994 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8010994:	b580      	push	{r7, lr}
 8010996:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8010998:	f7ff ffc2 	bl	8010920 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 801099c:	2064      	movs	r0, #100	; 0x64
 801099e:	f7f1 fa23 	bl	8001de8 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80109a2:	2000      	movs	r0, #0
 80109a4:	f000 fb2a 	bl	8010ffc <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80109a8:	2020      	movs	r0, #32
 80109aa:	f7ff ffc1 	bl	8010930 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80109ae:	2000      	movs	r0, #0
 80109b0:	f7ff ffbe 	bl	8010930 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80109b4:	20b0      	movs	r0, #176	; 0xb0
 80109b6:	f7ff ffbb 	bl	8010930 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80109ba:	20c8      	movs	r0, #200	; 0xc8
 80109bc:	f7ff ffb8 	bl	8010930 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80109c0:	2000      	movs	r0, #0
 80109c2:	f7ff ffb5 	bl	8010930 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80109c6:	2010      	movs	r0, #16
 80109c8:	f7ff ffb2 	bl	8010930 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80109cc:	2040      	movs	r0, #64	; 0x40
 80109ce:	f7ff ffaf 	bl	8010930 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80109d2:	20ff      	movs	r0, #255	; 0xff
 80109d4:	f000 faff 	bl	8010fd6 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80109d8:	20a1      	movs	r0, #161	; 0xa1
 80109da:	f7ff ffa9 	bl	8010930 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80109de:	20a6      	movs	r0, #166	; 0xa6
 80109e0:	f7ff ffa6 	bl	8010930 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80109e4:	20a8      	movs	r0, #168	; 0xa8
 80109e6:	f7ff ffa3 	bl	8010930 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 80109ea:	201f      	movs	r0, #31
 80109ec:	f7ff ffa0 	bl	8010930 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80109f0:	20a4      	movs	r0, #164	; 0xa4
 80109f2:	f7ff ff9d 	bl	8010930 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80109f6:	20d3      	movs	r0, #211	; 0xd3
 80109f8:	f7ff ff9a 	bl	8010930 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80109fc:	2000      	movs	r0, #0
 80109fe:	f7ff ff97 	bl	8010930 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8010a02:	20d5      	movs	r0, #213	; 0xd5
 8010a04:	f7ff ff94 	bl	8010930 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8010a08:	20f0      	movs	r0, #240	; 0xf0
 8010a0a:	f7ff ff91 	bl	8010930 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8010a0e:	20d9      	movs	r0, #217	; 0xd9
 8010a10:	f7ff ff8e 	bl	8010930 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8010a14:	2022      	movs	r0, #34	; 0x22
 8010a16:	f7ff ff8b 	bl	8010930 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8010a1a:	20da      	movs	r0, #218	; 0xda
 8010a1c:	f7ff ff88 	bl	8010930 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 8010a20:	2002      	movs	r0, #2
 8010a22:	f7ff ff85 	bl	8010930 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8010a26:	20db      	movs	r0, #219	; 0xdb
 8010a28:	f7ff ff82 	bl	8010930 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8010a2c:	2020      	movs	r0, #32
 8010a2e:	f7ff ff7f 	bl	8010930 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8010a32:	208d      	movs	r0, #141	; 0x8d
 8010a34:	f7ff ff7c 	bl	8010930 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8010a38:	2014      	movs	r0, #20
 8010a3a:	f7ff ff79 	bl	8010930 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8010a3e:	2001      	movs	r0, #1
 8010a40:	f000 fadc 	bl	8010ffc <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8010a44:	2000      	movs	r0, #0
 8010a46:	f000 f80f 	bl	8010a68 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8010a4a:	f000 f8bd 	bl	8010bc8 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8010a4e:	4b05      	ldr	r3, [pc, #20]	; (8010a64 <ssd1306_Init+0xd0>)
 8010a50:	2200      	movs	r2, #0
 8010a52:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8010a54:	4b03      	ldr	r3, [pc, #12]	; (8010a64 <ssd1306_Init+0xd0>)
 8010a56:	2200      	movs	r2, #0
 8010a58:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8010a5a:	4b02      	ldr	r3, [pc, #8]	; (8010a64 <ssd1306_Init+0xd0>)
 8010a5c:	2201      	movs	r2, #1
 8010a5e:	715a      	strb	r2, [r3, #5]
}
 8010a60:	bf00      	nop
 8010a62:	bd80      	pop	{r7, pc}
 8010a64:	20005158 	.word	0x20005158

08010a68 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8010a68:	b480      	push	{r7}
 8010a6a:	b085      	sub	sp, #20
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	4603      	mov	r3, r0
 8010a70:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8010a72:	2300      	movs	r3, #0
 8010a74:	60fb      	str	r3, [r7, #12]
 8010a76:	e00d      	b.n	8010a94 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8010a78:	79fb      	ldrb	r3, [r7, #7]
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d101      	bne.n	8010a82 <ssd1306_Fill+0x1a>
 8010a7e:	2100      	movs	r1, #0
 8010a80:	e000      	b.n	8010a84 <ssd1306_Fill+0x1c>
 8010a82:	21ff      	movs	r1, #255	; 0xff
 8010a84:	4a08      	ldr	r2, [pc, #32]	; (8010aa8 <ssd1306_Fill+0x40>)
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	4413      	add	r3, r2
 8010a8a:	460a      	mov	r2, r1
 8010a8c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	3301      	adds	r3, #1
 8010a92:	60fb      	str	r3, [r7, #12]
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010a9a:	d3ed      	bcc.n	8010a78 <ssd1306_Fill+0x10>
    }
}
 8010a9c:	bf00      	nop
 8010a9e:	3714      	adds	r7, #20
 8010aa0:	46bd      	mov	sp, r7
 8010aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aa6:	4770      	bx	lr
 8010aa8:	20004f58 	.word	0x20004f58

08010aac <ssd1306_FillZone>:


void ssd1306_FillZone(uint8_t x, uint8_t y, uint8_t wx, uint8_t wy, SSD1306_COLOR color)
{
 8010aac:	b490      	push	{r4, r7}
 8010aae:	b08a      	sub	sp, #40	; 0x28
 8010ab0:	af00      	add	r7, sp, #0
 8010ab2:	4604      	mov	r4, r0
 8010ab4:	4608      	mov	r0, r1
 8010ab6:	4611      	mov	r1, r2
 8010ab8:	461a      	mov	r2, r3
 8010aba:	4623      	mov	r3, r4
 8010abc:	71fb      	strb	r3, [r7, #7]
 8010abe:	4603      	mov	r3, r0
 8010ac0:	71bb      	strb	r3, [r7, #6]
 8010ac2:	460b      	mov	r3, r1
 8010ac4:	717b      	strb	r3, [r7, #5]
 8010ac6:	4613      	mov	r3, r2
 8010ac8:	713b      	strb	r3, [r7, #4]
    uint32_t xi;
    uint32_t yi;

    int by = y/8;
 8010aca:	79bb      	ldrb	r3, [r7, #6]
 8010acc:	08db      	lsrs	r3, r3, #3
 8010ace:	b2db      	uxtb	r3, r3
 8010ad0:	61bb      	str	r3, [r7, #24]
    int bly = (y+wy+7)/8;
 8010ad2:	79ba      	ldrb	r2, [r7, #6]
 8010ad4:	793b      	ldrb	r3, [r7, #4]
 8010ad6:	4413      	add	r3, r2
 8010ad8:	3307      	adds	r3, #7
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	da00      	bge.n	8010ae0 <ssd1306_FillZone+0x34>
 8010ade:	3307      	adds	r3, #7
 8010ae0:	10db      	asrs	r3, r3, #3
 8010ae2:	617b      	str	r3, [r7, #20]

    for (yi = by; yi < bly; yi++) {
 8010ae4:	69bb      	ldr	r3, [r7, #24]
 8010ae6:	623b      	str	r3, [r7, #32]
 8010ae8:	e063      	b.n	8010bb2 <ssd1306_FillZone+0x106>
    	uint8_t b = 0xFF;
 8010aea:	23ff      	movs	r3, #255	; 0xff
 8010aec:	77fb      	strb	r3, [r7, #31]
    	if (yi == by) {
 8010aee:	69bb      	ldr	r3, [r7, #24]
 8010af0:	6a3a      	ldr	r2, [r7, #32]
 8010af2:	429a      	cmp	r2, r3
 8010af4:	d106      	bne.n	8010b04 <ssd1306_FillZone+0x58>
    		b = b << (y & 0x7);
 8010af6:	7ffa      	ldrb	r2, [r7, #31]
 8010af8:	79bb      	ldrb	r3, [r7, #6]
 8010afa:	f003 0307 	and.w	r3, r3, #7
 8010afe:	fa02 f303 	lsl.w	r3, r2, r3
 8010b02:	77fb      	strb	r3, [r7, #31]
    	}
    	if (yi == bly-1) {
 8010b04:	697b      	ldr	r3, [r7, #20]
 8010b06:	3b01      	subs	r3, #1
 8010b08:	461a      	mov	r2, r3
 8010b0a:	6a3b      	ldr	r3, [r7, #32]
 8010b0c:	4293      	cmp	r3, r2
 8010b0e:	d113      	bne.n	8010b38 <ssd1306_FillZone+0x8c>
    		int s = (y+wy) & 0x7;
 8010b10:	79ba      	ldrb	r2, [r7, #6]
 8010b12:	793b      	ldrb	r3, [r7, #4]
 8010b14:	4413      	add	r3, r2
 8010b16:	b2db      	uxtb	r3, r3
 8010b18:	f003 0307 	and.w	r3, r3, #7
 8010b1c:	613b      	str	r3, [r7, #16]
    		if (s) b &= ~(0xFFU << s);
 8010b1e:	693b      	ldr	r3, [r7, #16]
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d009      	beq.n	8010b38 <ssd1306_FillZone+0x8c>
 8010b24:	22ff      	movs	r2, #255	; 0xff
 8010b26:	693b      	ldr	r3, [r7, #16]
 8010b28:	fa02 f303 	lsl.w	r3, r2, r3
 8010b2c:	b2db      	uxtb	r3, r3
 8010b2e:	43db      	mvns	r3, r3
 8010b30:	b2da      	uxtb	r2, r3
 8010b32:	7ffb      	ldrb	r3, [r7, #31]
 8010b34:	4013      	ands	r3, r2
 8010b36:	77fb      	strb	r3, [r7, #31]
    	}
    	for (xi = x; xi <x+wx; xi++) {
 8010b38:	79fb      	ldrb	r3, [r7, #7]
 8010b3a:	627b      	str	r3, [r7, #36]	; 0x24
 8010b3c:	e02d      	b.n	8010b9a <ssd1306_FillZone+0xee>
    		int i = yi*SSD1306_WIDTH+xi;
 8010b3e:	6a3b      	ldr	r3, [r7, #32]
 8010b40:	01da      	lsls	r2, r3, #7
 8010b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b44:	4413      	add	r3, r2
 8010b46:	60fb      	str	r3, [r7, #12]
    		if (i>=SSD1306_BUFFER_SIZE) break;
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010b4e:	da2c      	bge.n	8010baa <ssd1306_FillZone+0xfe>
    		if (color == Black) {
 8010b50:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d111      	bne.n	8010b7c <ssd1306_FillZone+0xd0>
    			SSD1306_Buffer[i] &= ~b;
 8010b58:	4a1a      	ldr	r2, [pc, #104]	; (8010bc4 <ssd1306_FillZone+0x118>)
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	4413      	add	r3, r2
 8010b5e:	781b      	ldrb	r3, [r3, #0]
 8010b60:	b25a      	sxtb	r2, r3
 8010b62:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010b66:	43db      	mvns	r3, r3
 8010b68:	b25b      	sxtb	r3, r3
 8010b6a:	4013      	ands	r3, r2
 8010b6c:	b25b      	sxtb	r3, r3
 8010b6e:	b2d9      	uxtb	r1, r3
 8010b70:	4a14      	ldr	r2, [pc, #80]	; (8010bc4 <ssd1306_FillZone+0x118>)
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	4413      	add	r3, r2
 8010b76:	460a      	mov	r2, r1
 8010b78:	701a      	strb	r2, [r3, #0]
 8010b7a:	e00b      	b.n	8010b94 <ssd1306_FillZone+0xe8>
    		} else {
    			SSD1306_Buffer[i] |= b;
 8010b7c:	4a11      	ldr	r2, [pc, #68]	; (8010bc4 <ssd1306_FillZone+0x118>)
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	4413      	add	r3, r2
 8010b82:	781a      	ldrb	r2, [r3, #0]
 8010b84:	7ffb      	ldrb	r3, [r7, #31]
 8010b86:	4313      	orrs	r3, r2
 8010b88:	b2d9      	uxtb	r1, r3
 8010b8a:	4a0e      	ldr	r2, [pc, #56]	; (8010bc4 <ssd1306_FillZone+0x118>)
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	4413      	add	r3, r2
 8010b90:	460a      	mov	r2, r1
 8010b92:	701a      	strb	r2, [r3, #0]
    	for (xi = x; xi <x+wx; xi++) {
 8010b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b96:	3301      	adds	r3, #1
 8010b98:	627b      	str	r3, [r7, #36]	; 0x24
 8010b9a:	79fa      	ldrb	r2, [r7, #7]
 8010b9c:	797b      	ldrb	r3, [r7, #5]
 8010b9e:	4413      	add	r3, r2
 8010ba0:	461a      	mov	r2, r3
 8010ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ba4:	4293      	cmp	r3, r2
 8010ba6:	d3ca      	bcc.n	8010b3e <ssd1306_FillZone+0x92>
 8010ba8:	e000      	b.n	8010bac <ssd1306_FillZone+0x100>
    		if (i>=SSD1306_BUFFER_SIZE) break;
 8010baa:	bf00      	nop
    for (yi = by; yi < bly; yi++) {
 8010bac:	6a3b      	ldr	r3, [r7, #32]
 8010bae:	3301      	adds	r3, #1
 8010bb0:	623b      	str	r3, [r7, #32]
 8010bb2:	697b      	ldr	r3, [r7, #20]
 8010bb4:	6a3a      	ldr	r2, [r7, #32]
 8010bb6:	429a      	cmp	r2, r3
 8010bb8:	d397      	bcc.n	8010aea <ssd1306_FillZone+0x3e>
    		}
    	}
    }

}
 8010bba:	bf00      	nop
 8010bbc:	3728      	adds	r7, #40	; 0x28
 8010bbe:	46bd      	mov	sp, r7
 8010bc0:	bc90      	pop	{r4, r7}
 8010bc2:	4770      	bx	lr
 8010bc4:	20004f58 	.word	0x20004f58

08010bc8 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8010bc8:	b580      	push	{r7, lr}
 8010bca:	b082      	sub	sp, #8
 8010bcc:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8010bce:	2300      	movs	r3, #0
 8010bd0:	71fb      	strb	r3, [r7, #7]
 8010bd2:	e016      	b.n	8010c02 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8010bd4:	79fb      	ldrb	r3, [r7, #7]
 8010bd6:	3b50      	subs	r3, #80	; 0x50
 8010bd8:	b2db      	uxtb	r3, r3
 8010bda:	4618      	mov	r0, r3
 8010bdc:	f7ff fea8 	bl	8010930 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8010be0:	2000      	movs	r0, #0
 8010be2:	f7ff fea5 	bl	8010930 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8010be6:	2010      	movs	r0, #16
 8010be8:	f7ff fea2 	bl	8010930 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8010bec:	79fb      	ldrb	r3, [r7, #7]
 8010bee:	01db      	lsls	r3, r3, #7
 8010bf0:	4a07      	ldr	r2, [pc, #28]	; (8010c10 <ssd1306_UpdateScreen+0x48>)
 8010bf2:	4413      	add	r3, r2
 8010bf4:	2180      	movs	r1, #128	; 0x80
 8010bf6:	4618      	mov	r0, r3
 8010bf8:	f7ff feb2 	bl	8010960 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8010bfc:	79fb      	ldrb	r3, [r7, #7]
 8010bfe:	3301      	adds	r3, #1
 8010c00:	71fb      	strb	r3, [r7, #7]
 8010c02:	79fb      	ldrb	r3, [r7, #7]
 8010c04:	2b03      	cmp	r3, #3
 8010c06:	d9e5      	bls.n	8010bd4 <ssd1306_UpdateScreen+0xc>
    }
}
 8010c08:	bf00      	nop
 8010c0a:	3708      	adds	r7, #8
 8010c0c:	46bd      	mov	sp, r7
 8010c0e:	bd80      	pop	{r7, pc}
 8010c10:	20004f58 	.word	0x20004f58

08010c14 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8010c14:	b480      	push	{r7}
 8010c16:	b083      	sub	sp, #12
 8010c18:	af00      	add	r7, sp, #0
 8010c1a:	4603      	mov	r3, r0
 8010c1c:	71fb      	strb	r3, [r7, #7]
 8010c1e:	460b      	mov	r3, r1
 8010c20:	71bb      	strb	r3, [r7, #6]
 8010c22:	4613      	mov	r3, r2
 8010c24:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8010c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	db48      	blt.n	8010cc0 <ssd1306_DrawPixel+0xac>
 8010c2e:	79bb      	ldrb	r3, [r7, #6]
 8010c30:	2b1f      	cmp	r3, #31
 8010c32:	d845      	bhi.n	8010cc0 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8010c34:	4b25      	ldr	r3, [pc, #148]	; (8010ccc <ssd1306_DrawPixel+0xb8>)
 8010c36:	791b      	ldrb	r3, [r3, #4]
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d006      	beq.n	8010c4a <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 8010c3c:	797b      	ldrb	r3, [r7, #5]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	bf0c      	ite	eq
 8010c42:	2301      	moveq	r3, #1
 8010c44:	2300      	movne	r3, #0
 8010c46:	b2db      	uxtb	r3, r3
 8010c48:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 8010c4a:	797b      	ldrb	r3, [r7, #5]
 8010c4c:	2b01      	cmp	r3, #1
 8010c4e:	d11a      	bne.n	8010c86 <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8010c50:	79fa      	ldrb	r2, [r7, #7]
 8010c52:	79bb      	ldrb	r3, [r7, #6]
 8010c54:	08db      	lsrs	r3, r3, #3
 8010c56:	b2d8      	uxtb	r0, r3
 8010c58:	4603      	mov	r3, r0
 8010c5a:	01db      	lsls	r3, r3, #7
 8010c5c:	4413      	add	r3, r2
 8010c5e:	4a1c      	ldr	r2, [pc, #112]	; (8010cd0 <ssd1306_DrawPixel+0xbc>)
 8010c60:	5cd3      	ldrb	r3, [r2, r3]
 8010c62:	b25a      	sxtb	r2, r3
 8010c64:	79bb      	ldrb	r3, [r7, #6]
 8010c66:	f003 0307 	and.w	r3, r3, #7
 8010c6a:	2101      	movs	r1, #1
 8010c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8010c70:	b25b      	sxtb	r3, r3
 8010c72:	4313      	orrs	r3, r2
 8010c74:	b259      	sxtb	r1, r3
 8010c76:	79fa      	ldrb	r2, [r7, #7]
 8010c78:	4603      	mov	r3, r0
 8010c7a:	01db      	lsls	r3, r3, #7
 8010c7c:	4413      	add	r3, r2
 8010c7e:	b2c9      	uxtb	r1, r1
 8010c80:	4a13      	ldr	r2, [pc, #76]	; (8010cd0 <ssd1306_DrawPixel+0xbc>)
 8010c82:	54d1      	strb	r1, [r2, r3]
 8010c84:	e01d      	b.n	8010cc2 <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8010c86:	79fa      	ldrb	r2, [r7, #7]
 8010c88:	79bb      	ldrb	r3, [r7, #6]
 8010c8a:	08db      	lsrs	r3, r3, #3
 8010c8c:	b2d8      	uxtb	r0, r3
 8010c8e:	4603      	mov	r3, r0
 8010c90:	01db      	lsls	r3, r3, #7
 8010c92:	4413      	add	r3, r2
 8010c94:	4a0e      	ldr	r2, [pc, #56]	; (8010cd0 <ssd1306_DrawPixel+0xbc>)
 8010c96:	5cd3      	ldrb	r3, [r2, r3]
 8010c98:	b25a      	sxtb	r2, r3
 8010c9a:	79bb      	ldrb	r3, [r7, #6]
 8010c9c:	f003 0307 	and.w	r3, r3, #7
 8010ca0:	2101      	movs	r1, #1
 8010ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8010ca6:	b25b      	sxtb	r3, r3
 8010ca8:	43db      	mvns	r3, r3
 8010caa:	b25b      	sxtb	r3, r3
 8010cac:	4013      	ands	r3, r2
 8010cae:	b259      	sxtb	r1, r3
 8010cb0:	79fa      	ldrb	r2, [r7, #7]
 8010cb2:	4603      	mov	r3, r0
 8010cb4:	01db      	lsls	r3, r3, #7
 8010cb6:	4413      	add	r3, r2
 8010cb8:	b2c9      	uxtb	r1, r1
 8010cba:	4a05      	ldr	r2, [pc, #20]	; (8010cd0 <ssd1306_DrawPixel+0xbc>)
 8010cbc:	54d1      	strb	r1, [r2, r3]
 8010cbe:	e000      	b.n	8010cc2 <ssd1306_DrawPixel+0xae>
        return;
 8010cc0:	bf00      	nop
    }
}
 8010cc2:	370c      	adds	r7, #12
 8010cc4:	46bd      	mov	sp, r7
 8010cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cca:	4770      	bx	lr
 8010ccc:	20005158 	.word	0x20005158
 8010cd0:	20004f58 	.word	0x20004f58

08010cd4 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8010cd4:	b590      	push	{r4, r7, lr}
 8010cd6:	b089      	sub	sp, #36	; 0x24
 8010cd8:	af00      	add	r7, sp, #0
 8010cda:	4604      	mov	r4, r0
 8010cdc:	1d38      	adds	r0, r7, #4
 8010cde:	e880 0006 	stmia.w	r0, {r1, r2}
 8010ce2:	461a      	mov	r2, r3
 8010ce4:	4623      	mov	r3, r4
 8010ce6:	73fb      	strb	r3, [r7, #15]
 8010ce8:	4613      	mov	r3, r2
 8010cea:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8010cec:	7bfb      	ldrb	r3, [r7, #15]
 8010cee:	2b1f      	cmp	r3, #31
 8010cf0:	d902      	bls.n	8010cf8 <ssd1306_WriteChar+0x24>
 8010cf2:	7bfb      	ldrb	r3, [r7, #15]
 8010cf4:	2b7e      	cmp	r3, #126	; 0x7e
 8010cf6:	d901      	bls.n	8010cfc <ssd1306_WriteChar+0x28>
        return 0;
 8010cf8:	2300      	movs	r3, #0
 8010cfa:	e06d      	b.n	8010dd8 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8010cfc:	4b38      	ldr	r3, [pc, #224]	; (8010de0 <ssd1306_WriteChar+0x10c>)
 8010cfe:	881b      	ldrh	r3, [r3, #0]
 8010d00:	461a      	mov	r2, r3
 8010d02:	793b      	ldrb	r3, [r7, #4]
 8010d04:	4413      	add	r3, r2
 8010d06:	2b80      	cmp	r3, #128	; 0x80
 8010d08:	dc06      	bgt.n	8010d18 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8010d0a:	4b35      	ldr	r3, [pc, #212]	; (8010de0 <ssd1306_WriteChar+0x10c>)
 8010d0c:	885b      	ldrh	r3, [r3, #2]
 8010d0e:	461a      	mov	r2, r3
 8010d10:	797b      	ldrb	r3, [r7, #5]
 8010d12:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8010d14:	2b20      	cmp	r3, #32
 8010d16:	dd01      	ble.n	8010d1c <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8010d18:	2300      	movs	r3, #0
 8010d1a:	e05d      	b.n	8010dd8 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8010d1c:	2300      	movs	r3, #0
 8010d1e:	61fb      	str	r3, [r7, #28]
 8010d20:	e04c      	b.n	8010dbc <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8010d22:	68ba      	ldr	r2, [r7, #8]
 8010d24:	7bfb      	ldrb	r3, [r7, #15]
 8010d26:	3b20      	subs	r3, #32
 8010d28:	7979      	ldrb	r1, [r7, #5]
 8010d2a:	fb01 f303 	mul.w	r3, r1, r3
 8010d2e:	4619      	mov	r1, r3
 8010d30:	69fb      	ldr	r3, [r7, #28]
 8010d32:	440b      	add	r3, r1
 8010d34:	005b      	lsls	r3, r3, #1
 8010d36:	4413      	add	r3, r2
 8010d38:	881b      	ldrh	r3, [r3, #0]
 8010d3a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8010d3c:	2300      	movs	r3, #0
 8010d3e:	61bb      	str	r3, [r7, #24]
 8010d40:	e034      	b.n	8010dac <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8010d42:	697a      	ldr	r2, [r7, #20]
 8010d44:	69bb      	ldr	r3, [r7, #24]
 8010d46:	fa02 f303 	lsl.w	r3, r2, r3
 8010d4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d012      	beq.n	8010d78 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8010d52:	4b23      	ldr	r3, [pc, #140]	; (8010de0 <ssd1306_WriteChar+0x10c>)
 8010d54:	881b      	ldrh	r3, [r3, #0]
 8010d56:	b2da      	uxtb	r2, r3
 8010d58:	69bb      	ldr	r3, [r7, #24]
 8010d5a:	b2db      	uxtb	r3, r3
 8010d5c:	4413      	add	r3, r2
 8010d5e:	b2d8      	uxtb	r0, r3
 8010d60:	4b1f      	ldr	r3, [pc, #124]	; (8010de0 <ssd1306_WriteChar+0x10c>)
 8010d62:	885b      	ldrh	r3, [r3, #2]
 8010d64:	b2da      	uxtb	r2, r3
 8010d66:	69fb      	ldr	r3, [r7, #28]
 8010d68:	b2db      	uxtb	r3, r3
 8010d6a:	4413      	add	r3, r2
 8010d6c:	b2db      	uxtb	r3, r3
 8010d6e:	7bba      	ldrb	r2, [r7, #14]
 8010d70:	4619      	mov	r1, r3
 8010d72:	f7ff ff4f 	bl	8010c14 <ssd1306_DrawPixel>
 8010d76:	e016      	b.n	8010da6 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8010d78:	4b19      	ldr	r3, [pc, #100]	; (8010de0 <ssd1306_WriteChar+0x10c>)
 8010d7a:	881b      	ldrh	r3, [r3, #0]
 8010d7c:	b2da      	uxtb	r2, r3
 8010d7e:	69bb      	ldr	r3, [r7, #24]
 8010d80:	b2db      	uxtb	r3, r3
 8010d82:	4413      	add	r3, r2
 8010d84:	b2d8      	uxtb	r0, r3
 8010d86:	4b16      	ldr	r3, [pc, #88]	; (8010de0 <ssd1306_WriteChar+0x10c>)
 8010d88:	885b      	ldrh	r3, [r3, #2]
 8010d8a:	b2da      	uxtb	r2, r3
 8010d8c:	69fb      	ldr	r3, [r7, #28]
 8010d8e:	b2db      	uxtb	r3, r3
 8010d90:	4413      	add	r3, r2
 8010d92:	b2d9      	uxtb	r1, r3
 8010d94:	7bbb      	ldrb	r3, [r7, #14]
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	bf0c      	ite	eq
 8010d9a:	2301      	moveq	r3, #1
 8010d9c:	2300      	movne	r3, #0
 8010d9e:	b2db      	uxtb	r3, r3
 8010da0:	461a      	mov	r2, r3
 8010da2:	f7ff ff37 	bl	8010c14 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8010da6:	69bb      	ldr	r3, [r7, #24]
 8010da8:	3301      	adds	r3, #1
 8010daa:	61bb      	str	r3, [r7, #24]
 8010dac:	793b      	ldrb	r3, [r7, #4]
 8010dae:	461a      	mov	r2, r3
 8010db0:	69bb      	ldr	r3, [r7, #24]
 8010db2:	4293      	cmp	r3, r2
 8010db4:	d3c5      	bcc.n	8010d42 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8010db6:	69fb      	ldr	r3, [r7, #28]
 8010db8:	3301      	adds	r3, #1
 8010dba:	61fb      	str	r3, [r7, #28]
 8010dbc:	797b      	ldrb	r3, [r7, #5]
 8010dbe:	461a      	mov	r2, r3
 8010dc0:	69fb      	ldr	r3, [r7, #28]
 8010dc2:	4293      	cmp	r3, r2
 8010dc4:	d3ad      	bcc.n	8010d22 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8010dc6:	4b06      	ldr	r3, [pc, #24]	; (8010de0 <ssd1306_WriteChar+0x10c>)
 8010dc8:	881a      	ldrh	r2, [r3, #0]
 8010dca:	793b      	ldrb	r3, [r7, #4]
 8010dcc:	b29b      	uxth	r3, r3
 8010dce:	4413      	add	r3, r2
 8010dd0:	b29a      	uxth	r2, r3
 8010dd2:	4b03      	ldr	r3, [pc, #12]	; (8010de0 <ssd1306_WriteChar+0x10c>)
 8010dd4:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8010dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8010dd8:	4618      	mov	r0, r3
 8010dda:	3724      	adds	r7, #36	; 0x24
 8010ddc:	46bd      	mov	sp, r7
 8010dde:	bd90      	pop	{r4, r7, pc}
 8010de0:	20005158 	.word	0x20005158

08010de4 <ssd1306_WriteString>:
    }

    // Everything ok
    return *str;
}
char ssd1306_WriteString(const char* str, FontDef Font, SSD1306_COLOR color) {
 8010de4:	b580      	push	{r7, lr}
 8010de6:	b084      	sub	sp, #16
 8010de8:	af00      	add	r7, sp, #0
 8010dea:	60f8      	str	r0, [r7, #12]
 8010dec:	1d38      	adds	r0, r7, #4
 8010dee:	e880 0006 	stmia.w	r0, {r1, r2}
 8010df2:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8010df4:	e012      	b.n	8010e1c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	7818      	ldrb	r0, [r3, #0]
 8010dfa:	78fb      	ldrb	r3, [r7, #3]
 8010dfc:	1d3a      	adds	r2, r7, #4
 8010dfe:	ca06      	ldmia	r2, {r1, r2}
 8010e00:	f7ff ff68 	bl	8010cd4 <ssd1306_WriteChar>
 8010e04:	4603      	mov	r3, r0
 8010e06:	461a      	mov	r2, r3
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	781b      	ldrb	r3, [r3, #0]
 8010e0c:	429a      	cmp	r2, r3
 8010e0e:	d002      	beq.n	8010e16 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	781b      	ldrb	r3, [r3, #0]
 8010e14:	e008      	b.n	8010e28 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8010e16:	68fb      	ldr	r3, [r7, #12]
 8010e18:	3301      	adds	r3, #1
 8010e1a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	781b      	ldrb	r3, [r3, #0]
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d1e8      	bne.n	8010df6 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	781b      	ldrb	r3, [r3, #0]
}
 8010e28:	4618      	mov	r0, r3
 8010e2a:	3710      	adds	r7, #16
 8010e2c:	46bd      	mov	sp, r7
 8010e2e:	bd80      	pop	{r7, pc}

08010e30 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8010e30:	b480      	push	{r7}
 8010e32:	b083      	sub	sp, #12
 8010e34:	af00      	add	r7, sp, #0
 8010e36:	4603      	mov	r3, r0
 8010e38:	460a      	mov	r2, r1
 8010e3a:	71fb      	strb	r3, [r7, #7]
 8010e3c:	4613      	mov	r3, r2
 8010e3e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8010e40:	79fb      	ldrb	r3, [r7, #7]
 8010e42:	b29a      	uxth	r2, r3
 8010e44:	4b05      	ldr	r3, [pc, #20]	; (8010e5c <ssd1306_SetCursor+0x2c>)
 8010e46:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8010e48:	79bb      	ldrb	r3, [r7, #6]
 8010e4a:	b29a      	uxth	r2, r3
 8010e4c:	4b03      	ldr	r3, [pc, #12]	; (8010e5c <ssd1306_SetCursor+0x2c>)
 8010e4e:	805a      	strh	r2, [r3, #2]
}
 8010e50:	bf00      	nop
 8010e52:	370c      	adds	r7, #12
 8010e54:	46bd      	mov	sp, r7
 8010e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e5a:	4770      	bx	lr
 8010e5c:	20005158 	.word	0x20005158

08010e60 <ssd1306_GetCursorX>:

uint8_t ssd1306_GetCursorX(void)
{
 8010e60:	b480      	push	{r7}
 8010e62:	af00      	add	r7, sp, #0
	return SSD1306.CurrentX;
 8010e64:	4b03      	ldr	r3, [pc, #12]	; (8010e74 <ssd1306_GetCursorX+0x14>)
 8010e66:	881b      	ldrh	r3, [r3, #0]
 8010e68:	b2db      	uxtb	r3, r3
}
 8010e6a:	4618      	mov	r0, r3
 8010e6c:	46bd      	mov	sp, r7
 8010e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e72:	4770      	bx	lr
 8010e74:	20005158 	.word	0x20005158

08010e78 <ssd1306_GetCursorY>:
uint8_t ssd1306_GetCursorY(void)
{
 8010e78:	b480      	push	{r7}
 8010e7a:	af00      	add	r7, sp, #0
	return SSD1306.CurrentY;
 8010e7c:	4b03      	ldr	r3, [pc, #12]	; (8010e8c <ssd1306_GetCursorY+0x14>)
 8010e7e:	885b      	ldrh	r3, [r3, #2]
 8010e80:	b2db      	uxtb	r3, r3
}
 8010e82:	4618      	mov	r0, r3
 8010e84:	46bd      	mov	sp, r7
 8010e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e8a:	4770      	bx	lr
 8010e8c:	20005158 	.word	0x20005158

08010e90 <ssd1306_Line>:

// Draw line by Bresenhem's algorithm
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8010e90:	b590      	push	{r4, r7, lr}
 8010e92:	b089      	sub	sp, #36	; 0x24
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	4604      	mov	r4, r0
 8010e98:	4608      	mov	r0, r1
 8010e9a:	4611      	mov	r1, r2
 8010e9c:	461a      	mov	r2, r3
 8010e9e:	4623      	mov	r3, r4
 8010ea0:	71fb      	strb	r3, [r7, #7]
 8010ea2:	4603      	mov	r3, r0
 8010ea4:	71bb      	strb	r3, [r7, #6]
 8010ea6:	460b      	mov	r3, r1
 8010ea8:	717b      	strb	r3, [r7, #5]
 8010eaa:	4613      	mov	r3, r2
 8010eac:	713b      	strb	r3, [r7, #4]
  int32_t deltaX = abs(x2 - x1);
 8010eae:	797a      	ldrb	r2, [r7, #5]
 8010eb0:	79fb      	ldrb	r3, [r7, #7]
 8010eb2:	1ad3      	subs	r3, r2, r3
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	bfb8      	it	lt
 8010eb8:	425b      	neglt	r3, r3
 8010eba:	61bb      	str	r3, [r7, #24]
  int32_t deltaY = abs(y2 - y1);
 8010ebc:	793a      	ldrb	r2, [r7, #4]
 8010ebe:	79bb      	ldrb	r3, [r7, #6]
 8010ec0:	1ad3      	subs	r3, r2, r3
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	bfb8      	it	lt
 8010ec6:	425b      	neglt	r3, r3
 8010ec8:	617b      	str	r3, [r7, #20]
  int32_t signX = ((x1 < x2) ? 1 : -1);
 8010eca:	79fa      	ldrb	r2, [r7, #7]
 8010ecc:	797b      	ldrb	r3, [r7, #5]
 8010ece:	429a      	cmp	r2, r3
 8010ed0:	d201      	bcs.n	8010ed6 <ssd1306_Line+0x46>
 8010ed2:	2301      	movs	r3, #1
 8010ed4:	e001      	b.n	8010eda <ssd1306_Line+0x4a>
 8010ed6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010eda:	613b      	str	r3, [r7, #16]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 8010edc:	79ba      	ldrb	r2, [r7, #6]
 8010ede:	793b      	ldrb	r3, [r7, #4]
 8010ee0:	429a      	cmp	r2, r3
 8010ee2:	d201      	bcs.n	8010ee8 <ssd1306_Line+0x58>
 8010ee4:	2301      	movs	r3, #1
 8010ee6:	e001      	b.n	8010eec <ssd1306_Line+0x5c>
 8010ee8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010eec:	60fb      	str	r3, [r7, #12]
  int32_t error = deltaX - deltaY;
 8010eee:	69ba      	ldr	r2, [r7, #24]
 8010ef0:	697b      	ldr	r3, [r7, #20]
 8010ef2:	1ad3      	subs	r3, r2, r3
 8010ef4:	61fb      	str	r3, [r7, #28]
  int32_t error2;
    
  ssd1306_DrawPixel(x2, y2, color);
 8010ef6:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8010efa:	7939      	ldrb	r1, [r7, #4]
 8010efc:	797b      	ldrb	r3, [r7, #5]
 8010efe:	4618      	mov	r0, r3
 8010f00:	f7ff fe88 	bl	8010c14 <ssd1306_DrawPixel>
    while((x1 != x2) || (y1 != y2))
 8010f04:	e024      	b.n	8010f50 <ssd1306_Line+0xc0>
    {
    ssd1306_DrawPixel(x1, y1, color);
 8010f06:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8010f0a:	79b9      	ldrb	r1, [r7, #6]
 8010f0c:	79fb      	ldrb	r3, [r7, #7]
 8010f0e:	4618      	mov	r0, r3
 8010f10:	f7ff fe80 	bl	8010c14 <ssd1306_DrawPixel>
    error2 = error * 2;
 8010f14:	69fb      	ldr	r3, [r7, #28]
 8010f16:	005b      	lsls	r3, r3, #1
 8010f18:	60bb      	str	r3, [r7, #8]
    if(error2 > -deltaY)
 8010f1a:	697b      	ldr	r3, [r7, #20]
 8010f1c:	425b      	negs	r3, r3
 8010f1e:	68ba      	ldr	r2, [r7, #8]
 8010f20:	429a      	cmp	r2, r3
 8010f22:	dd08      	ble.n	8010f36 <ssd1306_Line+0xa6>
    {
      error -= deltaY;
 8010f24:	69fa      	ldr	r2, [r7, #28]
 8010f26:	697b      	ldr	r3, [r7, #20]
 8010f28:	1ad3      	subs	r3, r2, r3
 8010f2a:	61fb      	str	r3, [r7, #28]
      x1 += signX;
 8010f2c:	693b      	ldr	r3, [r7, #16]
 8010f2e:	b2da      	uxtb	r2, r3
 8010f30:	79fb      	ldrb	r3, [r7, #7]
 8010f32:	4413      	add	r3, r2
 8010f34:	71fb      	strb	r3, [r7, #7]
    else
    {
    /*nothing to do*/
    }
        
    if(error2 < deltaX)
 8010f36:	68ba      	ldr	r2, [r7, #8]
 8010f38:	69bb      	ldr	r3, [r7, #24]
 8010f3a:	429a      	cmp	r2, r3
 8010f3c:	da08      	bge.n	8010f50 <ssd1306_Line+0xc0>
    {
      error += deltaX;
 8010f3e:	69fa      	ldr	r2, [r7, #28]
 8010f40:	69bb      	ldr	r3, [r7, #24]
 8010f42:	4413      	add	r3, r2
 8010f44:	61fb      	str	r3, [r7, #28]
      y1 += signY;
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	b2da      	uxtb	r2, r3
 8010f4a:	79bb      	ldrb	r3, [r7, #6]
 8010f4c:	4413      	add	r3, r2
 8010f4e:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2))
 8010f50:	79fa      	ldrb	r2, [r7, #7]
 8010f52:	797b      	ldrb	r3, [r7, #5]
 8010f54:	429a      	cmp	r2, r3
 8010f56:	d1d6      	bne.n	8010f06 <ssd1306_Line+0x76>
 8010f58:	79ba      	ldrb	r2, [r7, #6]
 8010f5a:	793b      	ldrb	r3, [r7, #4]
 8010f5c:	429a      	cmp	r2, r3
 8010f5e:	d1d2      	bne.n	8010f06 <ssd1306_Line+0x76>
    else
    {
    /*nothing to do*/
    }
  }
  return;
 8010f60:	bf00      	nop
}
 8010f62:	3724      	adds	r7, #36	; 0x24
 8010f64:	46bd      	mov	sp, r7
 8010f66:	bd90      	pop	{r4, r7, pc}

08010f68 <ssd1306_DrawRectangle>:

    return;
}

//Draw rectangle
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8010f68:	b590      	push	{r4, r7, lr}
 8010f6a:	b085      	sub	sp, #20
 8010f6c:	af02      	add	r7, sp, #8
 8010f6e:	4604      	mov	r4, r0
 8010f70:	4608      	mov	r0, r1
 8010f72:	4611      	mov	r1, r2
 8010f74:	461a      	mov	r2, r3
 8010f76:	4623      	mov	r3, r4
 8010f78:	71fb      	strb	r3, [r7, #7]
 8010f7a:	4603      	mov	r3, r0
 8010f7c:	71bb      	strb	r3, [r7, #6]
 8010f7e:	460b      	mov	r3, r1
 8010f80:	717b      	strb	r3, [r7, #5]
 8010f82:	4613      	mov	r3, r2
 8010f84:	713b      	strb	r3, [r7, #4]
  ssd1306_Line(x1,y1,x2,y1,color);
 8010f86:	79bc      	ldrb	r4, [r7, #6]
 8010f88:	797a      	ldrb	r2, [r7, #5]
 8010f8a:	79b9      	ldrb	r1, [r7, #6]
 8010f8c:	79f8      	ldrb	r0, [r7, #7]
 8010f8e:	7e3b      	ldrb	r3, [r7, #24]
 8010f90:	9300      	str	r3, [sp, #0]
 8010f92:	4623      	mov	r3, r4
 8010f94:	f7ff ff7c 	bl	8010e90 <ssd1306_Line>
  ssd1306_Line(x2,y1,x2,y2,color);
 8010f98:	793c      	ldrb	r4, [r7, #4]
 8010f9a:	797a      	ldrb	r2, [r7, #5]
 8010f9c:	79b9      	ldrb	r1, [r7, #6]
 8010f9e:	7978      	ldrb	r0, [r7, #5]
 8010fa0:	7e3b      	ldrb	r3, [r7, #24]
 8010fa2:	9300      	str	r3, [sp, #0]
 8010fa4:	4623      	mov	r3, r4
 8010fa6:	f7ff ff73 	bl	8010e90 <ssd1306_Line>
  ssd1306_Line(x2,y2,x1,y2,color);
 8010faa:	793c      	ldrb	r4, [r7, #4]
 8010fac:	79fa      	ldrb	r2, [r7, #7]
 8010fae:	7939      	ldrb	r1, [r7, #4]
 8010fb0:	7978      	ldrb	r0, [r7, #5]
 8010fb2:	7e3b      	ldrb	r3, [r7, #24]
 8010fb4:	9300      	str	r3, [sp, #0]
 8010fb6:	4623      	mov	r3, r4
 8010fb8:	f7ff ff6a 	bl	8010e90 <ssd1306_Line>
  ssd1306_Line(x1,y2,x1,y1,color);
 8010fbc:	79bc      	ldrb	r4, [r7, #6]
 8010fbe:	79fa      	ldrb	r2, [r7, #7]
 8010fc0:	7939      	ldrb	r1, [r7, #4]
 8010fc2:	79f8      	ldrb	r0, [r7, #7]
 8010fc4:	7e3b      	ldrb	r3, [r7, #24]
 8010fc6:	9300      	str	r3, [sp, #0]
 8010fc8:	4623      	mov	r3, r4
 8010fca:	f7ff ff61 	bl	8010e90 <ssd1306_Line>

  return;
 8010fce:	bf00      	nop
}
 8010fd0:	370c      	adds	r7, #12
 8010fd2:	46bd      	mov	sp, r7
 8010fd4:	bd90      	pop	{r4, r7, pc}

08010fd6 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8010fd6:	b580      	push	{r7, lr}
 8010fd8:	b084      	sub	sp, #16
 8010fda:	af00      	add	r7, sp, #0
 8010fdc:	4603      	mov	r3, r0
 8010fde:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8010fe0:	2381      	movs	r3, #129	; 0x81
 8010fe2:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8010fe4:	7bfb      	ldrb	r3, [r7, #15]
 8010fe6:	4618      	mov	r0, r3
 8010fe8:	f7ff fca2 	bl	8010930 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8010fec:	79fb      	ldrb	r3, [r7, #7]
 8010fee:	4618      	mov	r0, r3
 8010ff0:	f7ff fc9e 	bl	8010930 <ssd1306_WriteCommand>
}
 8010ff4:	bf00      	nop
 8010ff6:	3710      	adds	r7, #16
 8010ff8:	46bd      	mov	sp, r7
 8010ffa:	bd80      	pop	{r7, pc}

08010ffc <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8010ffc:	b580      	push	{r7, lr}
 8010ffe:	b084      	sub	sp, #16
 8011000:	af00      	add	r7, sp, #0
 8011002:	4603      	mov	r3, r0
 8011004:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8011006:	79fb      	ldrb	r3, [r7, #7]
 8011008:	2b00      	cmp	r3, #0
 801100a:	d005      	beq.n	8011018 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 801100c:	23af      	movs	r3, #175	; 0xaf
 801100e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8011010:	4b08      	ldr	r3, [pc, #32]	; (8011034 <ssd1306_SetDisplayOn+0x38>)
 8011012:	2201      	movs	r2, #1
 8011014:	719a      	strb	r2, [r3, #6]
 8011016:	e004      	b.n	8011022 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8011018:	23ae      	movs	r3, #174	; 0xae
 801101a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 801101c:	4b05      	ldr	r3, [pc, #20]	; (8011034 <ssd1306_SetDisplayOn+0x38>)
 801101e:	2200      	movs	r2, #0
 8011020:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 8011022:	7bfb      	ldrb	r3, [r7, #15]
 8011024:	4618      	mov	r0, r3
 8011026:	f7ff fc83 	bl	8010930 <ssd1306_WriteCommand>
}
 801102a:	bf00      	nop
 801102c:	3710      	adds	r7, #16
 801102e:	46bd      	mov	sp, r7
 8011030:	bd80      	pop	{r7, pc}
 8011032:	bf00      	nop
 8011034:	20005158 	.word	0x20005158

08011038 <itm_debug1>:
{
 8011038:	b580      	push	{r7, lr}
 801103a:	b086      	sub	sp, #24
 801103c:	af02      	add	r7, sp, #8
 801103e:	60f8      	str	r0, [r7, #12]
 8011040:	60b9      	str	r1, [r7, #8]
 8011042:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 8011044:	4b08      	ldr	r3, [pc, #32]	; (8011068 <itm_debug1+0x30>)
 8011046:	681a      	ldr	r2, [r3, #0]
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	4013      	ands	r3, r2
 801104c:	2b00      	cmp	r3, #0
 801104e:	d007      	beq.n	8011060 <itm_debug1+0x28>
 8011050:	2301      	movs	r3, #1
 8011052:	9300      	str	r3, [sp, #0]
 8011054:	2300      	movs	r3, #0
 8011056:	2200      	movs	r2, #0
 8011058:	6879      	ldr	r1, [r7, #4]
 801105a:	68b8      	ldr	r0, [r7, #8]
 801105c:	f007 fe1a 	bl	8018c94 <_itm_debug3>
}
 8011060:	bf00      	nop
 8011062:	3710      	adds	r7, #16
 8011064:	46bd      	mov	sp, r7
 8011066:	bd80      	pop	{r7, pc}
 8011068:	200005a4 	.word	0x200005a4

0801106c <itm_debug2>:
{
 801106c:	b580      	push	{r7, lr}
 801106e:	b086      	sub	sp, #24
 8011070:	af02      	add	r7, sp, #8
 8011072:	60f8      	str	r0, [r7, #12]
 8011074:	60b9      	str	r1, [r7, #8]
 8011076:	607a      	str	r2, [r7, #4]
 8011078:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, 0, 2);
 801107a:	4b09      	ldr	r3, [pc, #36]	; (80110a0 <itm_debug2+0x34>)
 801107c:	681a      	ldr	r2, [r3, #0]
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	4013      	ands	r3, r2
 8011082:	2b00      	cmp	r3, #0
 8011084:	d007      	beq.n	8011096 <itm_debug2+0x2a>
 8011086:	2302      	movs	r3, #2
 8011088:	9300      	str	r3, [sp, #0]
 801108a:	2300      	movs	r3, #0
 801108c:	683a      	ldr	r2, [r7, #0]
 801108e:	6879      	ldr	r1, [r7, #4]
 8011090:	68b8      	ldr	r0, [r7, #8]
 8011092:	f007 fdff 	bl	8018c94 <_itm_debug3>
}
 8011096:	bf00      	nop
 8011098:	3710      	adds	r7, #16
 801109a:	46bd      	mov	sp, r7
 801109c:	bd80      	pop	{r7, pc}
 801109e:	bf00      	nop
 80110a0:	200005a4 	.word	0x200005a4

080110a4 <itm_debug3>:
static inline void itm_debug3(uint32_t f, const char *msg, int v1, int v2, int v3)
{
 80110a4:	b580      	push	{r7, lr}
 80110a6:	b086      	sub	sp, #24
 80110a8:	af02      	add	r7, sp, #8
 80110aa:	60f8      	str	r0, [r7, #12]
 80110ac:	60b9      	str	r1, [r7, #8]
 80110ae:	607a      	str	r2, [r7, #4]
 80110b0:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, v3, 3);
 80110b2:	4b09      	ldr	r3, [pc, #36]	; (80110d8 <itm_debug3+0x34>)
 80110b4:	681a      	ldr	r2, [r3, #0]
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	4013      	ands	r3, r2
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d007      	beq.n	80110ce <itm_debug3+0x2a>
 80110be:	2303      	movs	r3, #3
 80110c0:	9300      	str	r3, [sp, #0]
 80110c2:	69bb      	ldr	r3, [r7, #24]
 80110c4:	683a      	ldr	r2, [r7, #0]
 80110c6:	6879      	ldr	r1, [r7, #4]
 80110c8:	68b8      	ldr	r0, [r7, #8]
 80110ca:	f007 fde3 	bl	8018c94 <_itm_debug3>
}
 80110ce:	bf00      	nop
 80110d0:	3710      	adds	r7, #16
 80110d2:	46bd      	mov	sp, r7
 80110d4:	bd80      	pop	{r7, pc}
 80110d6:	bf00      	nop
 80110d8:	200005a4 	.word	0x200005a4

080110dc <mqf_read_to_ina3221>:

LFMQUEUE_DEF_H(to_ui, msg_64_t)
LFMQUEUE_DEF_H(from_ui, msg_64_t)


LFMQUEUE_DEF_H(to_ina3221, msg_64_t)
 80110dc:	b580      	push	{r7, lr}
 80110de:	b082      	sub	sp, #8
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	6078      	str	r0, [r7, #4]
 80110e4:	6879      	ldr	r1, [r7, #4]
 80110e6:	4804      	ldr	r0, [pc, #16]	; (80110f8 <mqf_read_to_ina3221+0x1c>)
 80110e8:	f007 ff54 	bl	8018f94 <mqf_read>
 80110ec:	4603      	mov	r3, r0
 80110ee:	4618      	mov	r0, r3
 80110f0:	3708      	adds	r7, #8
 80110f2:	46bd      	mov	sp, r7
 80110f4:	bd80      	pop	{r7, pc}
 80110f6:	bf00      	nop
 80110f8:	20000584 	.word	0x20000584

080110fc <mqf_write_from_ina3221>:
LFMQUEUE_DEF_H(from_ina3221, msg_64_t)
 80110fc:	b580      	push	{r7, lr}
 80110fe:	b082      	sub	sp, #8
 8011100:	af00      	add	r7, sp, #0
 8011102:	6078      	str	r0, [r7, #4]
 8011104:	6879      	ldr	r1, [r7, #4]
 8011106:	4804      	ldr	r0, [pc, #16]	; (8011118 <mqf_write_from_ina3221+0x1c>)
 8011108:	f007 feca 	bl	8018ea0 <mqf_write>
 801110c:	4603      	mov	r3, r0
 801110e:	4618      	mov	r0, r3
 8011110:	3708      	adds	r7, #8
 8011112:	46bd      	mov	sp, r7
 8011114:	bd80      	pop	{r7, pc}
 8011116:	bf00      	nop
 8011118:	20000590 	.word	0x20000590

0801111c <bkpoint>:
#ifndef INA3221_TASKRD
#error hu?
#endif

static void bkpoint(int loc, int err)
{
 801111c:	b580      	push	{r7, lr}
 801111e:	b082      	sub	sp, #8
 8011120:	af00      	add	r7, sp, #0
 8011122:	6078      	str	r0, [r7, #4]
 8011124:	6039      	str	r1, [r7, #0]
	itm_debug2(DBG_ERR|DBG_INA3221, "INA ERR", loc, err);
 8011126:	683b      	ldr	r3, [r7, #0]
 8011128:	687a      	ldr	r2, [r7, #4]
 801112a:	4904      	ldr	r1, [pc, #16]	; (801113c <bkpoint+0x20>)
 801112c:	4804      	ldr	r0, [pc, #16]	; (8011140 <bkpoint+0x24>)
 801112e:	f7ff ff9d 	bl	801106c <itm_debug2>
}
 8011132:	bf00      	nop
 8011134:	3708      	adds	r7, #8
 8011136:	46bd      	mov	sp, r7
 8011138:	bd80      	pop	{r7, pc}
 801113a:	bf00      	nop
 801113c:	080193cc 	.word	0x080193cc
 8011140:	80000020 	.word	0x80000020

08011144 <run_ina_task>:
static void handle_ina_notif(uint32_t notif);

static 	ina_state_t state = state_idle;

static void run_ina_task(void)
{
 8011144:	b580      	push	{r7, lr}
 8011146:	b086      	sub	sp, #24
 8011148:	af00      	add	r7, sp, #0
	ina3221_init_and_configure();
 801114a:	f000 fdc9 	bl	8011ce0 <ina3221_init_and_configure>
	_UNUSED_ int nstuck = 0;
 801114e:	2300      	movs	r3, #0
 8011150:	617b      	str	r3, [r7, #20]
	for (;;) {
		uint32_t notif = 0;
 8011152:	2300      	movs	r3, #0
 8011154:	60fb      	str	r3, [r7, #12]
		xTaskNotifyWait(0, 0xFFFFFFFF, &notif, portMAX_DELAY);
 8011156:	f107 020c 	add.w	r2, r7, #12
 801115a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801115e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8011162:	2000      	movs	r0, #0
 8011164:	f7fd fe00 	bl	800ed68 <xTaskNotifyWait>
		handle_ina_notif(notif);
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	4618      	mov	r0, r3
 801116c:	f000 f828 	bl	80111c0 <handle_ina_notif>

		for (;;) {
			msg_64_t m;
			int rc = mqf_read_to_ina3221(&m);
 8011170:	463b      	mov	r3, r7
 8011172:	4618      	mov	r0, r3
 8011174:	f7ff ffb2 	bl	80110dc <mqf_read_to_ina3221>
 8011178:	6138      	str	r0, [r7, #16]
			if (rc) break;
 801117a:	693b      	ldr	r3, [r7, #16]
 801117c:	2b00      	cmp	r3, #0
 801117e:	d000      	beq.n	8011182 <run_ina_task+0x3e>
	for (;;) {
 8011180:	e7e7      	b.n	8011152 <run_ina_task+0xe>
			switch (m.cmd) {
 8011182:	78bb      	ldrb	r3, [r7, #2]
 8011184:	2bfc      	cmp	r3, #252	; 0xfc
 8011186:	d004      	beq.n	8011192 <run_ina_task+0x4e>
 8011188:	2bfc      	cmp	r3, #252	; 0xfc
 801118a:	db10      	blt.n	80111ae <run_ina_task+0x6a>
 801118c:	3bfe      	subs	r3, #254	; 0xfe
 801118e:	2b01      	cmp	r3, #1
					testerAddr = m.from;
				}
				continue;
				break;
			default:
				break;
 8011190:	e00d      	b.n	80111ae <run_ina_task+0x6a>
				if (run_mode != m.v1u) {
 8011192:	4b09      	ldr	r3, [pc, #36]	; (80111b8 <run_ina_task+0x74>)
 8011194:	781b      	ldrb	r3, [r3, #0]
 8011196:	b29a      	uxth	r2, r3
 8011198:	88bb      	ldrh	r3, [r7, #4]
 801119a:	429a      	cmp	r2, r3
 801119c:	d009      	beq.n	80111b2 <run_ina_task+0x6e>
					run_mode = m.v1u;
 801119e:	88bb      	ldrh	r3, [r7, #4]
 80111a0:	b2da      	uxtb	r2, r3
 80111a2:	4b05      	ldr	r3, [pc, #20]	; (80111b8 <run_ina_task+0x74>)
 80111a4:	701a      	strb	r2, [r3, #0]
					testerAddr = m.from;
 80111a6:	787a      	ldrb	r2, [r7, #1]
 80111a8:	4b04      	ldr	r3, [pc, #16]	; (80111bc <run_ina_task+0x78>)
 80111aa:	701a      	strb	r2, [r3, #0]
				continue;
 80111ac:	e001      	b.n	80111b2 <run_ina_task+0x6e>
				break;
 80111ae:	bf00      	nop
 80111b0:	e7de      	b.n	8011170 <run_ina_task+0x2c>
				continue;
 80111b2:	bf00      	nop
		for (;;) {
 80111b4:	e7dc      	b.n	8011170 <run_ina_task+0x2c>
 80111b6:	bf00      	nop
 80111b8:	20005160 	.word	0x20005160
 80111bc:	20005161 	.word	0x20005161

080111c0 <handle_ina_notif>:
		}
	}
}

static void handle_ina_notif(uint32_t notif)
{
 80111c0:	b580      	push	{r7, lr}
 80111c2:	b088      	sub	sp, #32
 80111c4:	af00      	add	r7, sp, #0
 80111c6:	6078      	str	r0, [r7, #4]
				continue;
			}
		}
#endif // INA3221_CONTIUNOUS
	}
	if (notif & NOTIF_INA_WRCOMPL) {
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	f003 0310 	and.w	r3, r3, #16
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d035      	beq.n	801123e <handle_ina_notif+0x7e>
		itm_debug1(DBG_INA3221, "WRcpl", state);
 80111d2:	4b74      	ldr	r3, [pc, #464]	; (80113a4 <handle_ina_notif+0x1e4>)
 80111d4:	781b      	ldrb	r3, [r3, #0]
 80111d6:	461a      	mov	r2, r3
 80111d8:	4973      	ldr	r1, [pc, #460]	; (80113a8 <handle_ina_notif+0x1e8>)
 80111da:	2020      	movs	r0, #32
 80111dc:	f7ff ff2c 	bl	8011038 <itm_debug1>
		if ((state >= state_trig_0) && (state <= state_trig_3)) {
 80111e0:	4b70      	ldr	r3, [pc, #448]	; (80113a4 <handle_ina_notif+0x1e4>)
 80111e2:	781b      	ldrb	r3, [r3, #0]
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d023      	beq.n	8011230 <handle_ina_notif+0x70>
 80111e8:	4b6e      	ldr	r3, [pc, #440]	; (80113a4 <handle_ina_notif+0x1e4>)
 80111ea:	781b      	ldrb	r3, [r3, #0]
 80111ec:	2b04      	cmp	r3, #4
 80111ee:	d81f      	bhi.n	8011230 <handle_ina_notif+0x70>
			int dev = state - state_trig_0;
 80111f0:	4b6c      	ldr	r3, [pc, #432]	; (80113a4 <handle_ina_notif+0x1e4>)
 80111f2:	781b      	ldrb	r3, [r3, #0]
 80111f4:	3b01      	subs	r3, #1
 80111f6:	61fb      	str	r3, [r7, #28]
			dev = _next_dev(dev);
 80111f8:	69f8      	ldr	r0, [r7, #28]
 80111fa:	f000 f8e3 	bl	80113c4 <_next_dev>
 80111fe:	61f8      	str	r0, [r7, #28]
			if (dev >= 0) {
 8011200:	69fb      	ldr	r3, [r7, #28]
 8011202:	2b00      	cmp	r3, #0
 8011204:	db10      	blt.n	8011228 <handle_ina_notif+0x68>
				state = dev + state_trig_0;
 8011206:	69fb      	ldr	r3, [r7, #28]
 8011208:	b2db      	uxtb	r3, r3
 801120a:	3301      	adds	r3, #1
 801120c:	b2da      	uxtb	r2, r3
 801120e:	4b65      	ldr	r3, [pc, #404]	; (80113a4 <handle_ina_notif+0x1e4>)
 8011210:	701a      	strb	r2, [r3, #0]
				rc = _trig(dev);
 8011212:	69f8      	ldr	r0, [r7, #28]
 8011214:	f000 f8f6 	bl	8011404 <_trig>
 8011218:	61b8      	str	r0, [r7, #24]
				if (rc) {
 801121a:	69bb      	ldr	r3, [r7, #24]
 801121c:	2b00      	cmp	r3, #0
 801121e:	d00d      	beq.n	801123c <handle_ina_notif+0x7c>
					state = state_idle;
 8011220:	4b60      	ldr	r3, [pc, #384]	; (80113a4 <handle_ina_notif+0x1e4>)
 8011222:	2200      	movs	r2, #0
 8011224:	701a      	strb	r2, [r3, #0]
					return;
 8011226:	e0b9      	b.n	801139c <handle_ina_notif+0x1dc>
				}
			} else {
#if INA3221_TASKRD
state = state_idle;
 8011228:	4b5e      	ldr	r3, [pc, #376]	; (80113a4 <handle_ina_notif+0x1e4>)
 801122a:	2200      	movs	r2, #0
 801122c:	701a      	strb	r2, [r3, #0]
		if ((state >= state_trig_0) && (state <= state_trig_3)) {
 801122e:	e005      	b.n	801123c <handle_ina_notif+0x7c>
                        _read_complete(0);
                        state = state_idle;
                    }
                }*/
		} else {
			bkpoint(1,1000);
 8011230:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8011234:	2001      	movs	r0, #1
 8011236:	f7ff ff71 	bl	801111c <bkpoint>
 801123a:	e000      	b.n	801123e <handle_ina_notif+0x7e>
		if ((state >= state_trig_0) && (state <= state_trig_3)) {
 801123c:	bf00      	nop
		}
	}
	if (notif & NOTIF_INA_READ) {
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	f003 0308 	and.w	r3, r3, #8
 8011244:	2b00      	cmp	r3, #0
 8011246:	d01c      	beq.n	8011282 <handle_ina_notif+0xc2>
#if INA3221_TASKRD
#if INA3221_CHECKCONV
		state = state_chk_cvrf;
		_read_cvrf();
#else
		int dev = _next_dev(-1);
 8011248:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801124c:	f000 f8ba 	bl	80113c4 <_next_dev>
 8011250:	6178      	str	r0, [r7, #20]
		if (dev >= 0) {
 8011252:	697b      	ldr	r3, [r7, #20]
 8011254:	2b00      	cmp	r3, #0
 8011256:	db0e      	blt.n	8011276 <handle_ina_notif+0xb6>
			state = state_rd_0 + dev * 3;
 8011258:	697b      	ldr	r3, [r7, #20]
 801125a:	b2db      	uxtb	r3, r3
 801125c:	461a      	mov	r2, r3
 801125e:	0052      	lsls	r2, r2, #1
 8011260:	4413      	add	r3, r2
 8011262:	b2db      	uxtb	r3, r3
 8011264:	3305      	adds	r3, #5
 8011266:	b2da      	uxtb	r2, r3
 8011268:	4b4e      	ldr	r3, [pc, #312]	; (80113a4 <handle_ina_notif+0x1e4>)
 801126a:	701a      	strb	r2, [r3, #0]
			_reg_read(dev, 0);
 801126c:	2100      	movs	r1, #0
 801126e:	6978      	ldr	r0, [r7, #20]
 8011270:	f000 f8f4 	bl	801145c <_reg_read>
 8011274:	e005      	b.n	8011282 <handle_ina_notif+0xc2>
		} else {
			_read_complete(0);
 8011276:	2000      	movs	r0, #0
 8011278:	f000 f95a 	bl	8011530 <_read_complete>
			state = state_idle;
 801127c:	4b49      	ldr	r3, [pc, #292]	; (80113a4 <handle_ina_notif+0x1e4>)
 801127e:	2200      	movs	r2, #0
 8011280:	701a      	strb	r2, [r3, #0]
		}

#endif
#endif
	}
	if (notif & NOTIF_INA_RDCOMPL) {
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	f003 0320 	and.w	r3, r3, #32
 8011288:	2b00      	cmp	r3, #0
 801128a:	d055      	beq.n	8011338 <handle_ina_notif+0x178>
		itm_debug1(DBG_INA3221, "RDcpl", state);
 801128c:	4b45      	ldr	r3, [pc, #276]	; (80113a4 <handle_ina_notif+0x1e4>)
 801128e:	781b      	ldrb	r3, [r3, #0]
 8011290:	461a      	mov	r2, r3
 8011292:	4946      	ldr	r1, [pc, #280]	; (80113ac <handle_ina_notif+0x1ec>)
 8011294:	2020      	movs	r0, #32
 8011296:	f7ff fecf 	bl	8011038 <itm_debug1>
				_read_cvrf();
			}
#else
		if (0) {
#endif
		} else if ((state >= state_rd_0) && (state <= state_rd_11)) {
 801129a:	4b42      	ldr	r3, [pc, #264]	; (80113a4 <handle_ina_notif+0x1e4>)
 801129c:	781b      	ldrb	r3, [r3, #0]
 801129e:	2b04      	cmp	r3, #4
 80112a0:	d945      	bls.n	801132e <handle_ina_notif+0x16e>
 80112a2:	4b40      	ldr	r3, [pc, #256]	; (80113a4 <handle_ina_notif+0x1e4>)
 80112a4:	781b      	ldrb	r3, [r3, #0]
 80112a6:	2b10      	cmp	r3, #16
 80112a8:	d841      	bhi.n	801132e <handle_ina_notif+0x16e>
			int reg = (state - state_rd_0) % 3;
 80112aa:	4b3e      	ldr	r3, [pc, #248]	; (80113a4 <handle_ina_notif+0x1e4>)
 80112ac:	781b      	ldrb	r3, [r3, #0]
 80112ae:	1f5a      	subs	r2, r3, #5
 80112b0:	4b3f      	ldr	r3, [pc, #252]	; (80113b0 <handle_ina_notif+0x1f0>)
 80112b2:	fb83 3102 	smull	r3, r1, r3, r2
 80112b6:	17d3      	asrs	r3, r2, #31
 80112b8:	1ac9      	subs	r1, r1, r3
 80112ba:	460b      	mov	r3, r1
 80112bc:	005b      	lsls	r3, r3, #1
 80112be:	440b      	add	r3, r1
 80112c0:	1ad3      	subs	r3, r2, r3
 80112c2:	613b      	str	r3, [r7, #16]
			int dev = (state - state_rd_0) / 3;
 80112c4:	4b37      	ldr	r3, [pc, #220]	; (80113a4 <handle_ina_notif+0x1e4>)
 80112c6:	781b      	ldrb	r3, [r3, #0]
 80112c8:	3b05      	subs	r3, #5
 80112ca:	4a39      	ldr	r2, [pc, #228]	; (80113b0 <handle_ina_notif+0x1f0>)
 80112cc:	fb82 1203 	smull	r1, r2, r2, r3
 80112d0:	17db      	asrs	r3, r3, #31
 80112d2:	1ad3      	subs	r3, r2, r3
 80112d4:	60fb      	str	r3, [r7, #12]
			if (reg==2){
 80112d6:	693b      	ldr	r3, [r7, #16]
 80112d8:	2b02      	cmp	r3, #2
 80112da:	d11b      	bne.n	8011314 <handle_ina_notif+0x154>
				dev = _next_dev(dev);
 80112dc:	68f8      	ldr	r0, [r7, #12]
 80112de:	f000 f871 	bl	80113c4 <_next_dev>
 80112e2:	60f8      	str	r0, [r7, #12]
				if (dev >= 0) {
 80112e4:	68fb      	ldr	r3, [r7, #12]
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	db0d      	blt.n	8011306 <handle_ina_notif+0x146>
					state = (state_rd_0 + dev) * 3;
 80112ea:	68fb      	ldr	r3, [r7, #12]
 80112ec:	3305      	adds	r3, #5
 80112ee:	b2db      	uxtb	r3, r3
 80112f0:	461a      	mov	r2, r3
 80112f2:	0052      	lsls	r2, r2, #1
 80112f4:	4413      	add	r3, r2
 80112f6:	b2da      	uxtb	r2, r3
 80112f8:	4b2a      	ldr	r3, [pc, #168]	; (80113a4 <handle_ina_notif+0x1e4>)
 80112fa:	701a      	strb	r2, [r3, #0]
					_reg_read(dev, 0);
 80112fc:	2100      	movs	r1, #0
 80112fe:	68f8      	ldr	r0, [r7, #12]
 8011300:	f000 f8ac 	bl	801145c <_reg_read>
		} else if ((state >= state_rd_0) && (state <= state_rd_11)) {
 8011304:	e018      	b.n	8011338 <handle_ina_notif+0x178>
				} else {
					_read_complete(0);
 8011306:	2000      	movs	r0, #0
 8011308:	f000 f912 	bl	8011530 <_read_complete>
					state = state_idle;
 801130c:	4b25      	ldr	r3, [pc, #148]	; (80113a4 <handle_ina_notif+0x1e4>)
 801130e:	2200      	movs	r2, #0
 8011310:	701a      	strb	r2, [r3, #0]
		} else if ((state >= state_rd_0) && (state <= state_rd_11)) {
 8011312:	e011      	b.n	8011338 <handle_ina_notif+0x178>
				}
			} else {
				state++;
 8011314:	4b23      	ldr	r3, [pc, #140]	; (80113a4 <handle_ina_notif+0x1e4>)
 8011316:	781b      	ldrb	r3, [r3, #0]
 8011318:	3301      	adds	r3, #1
 801131a:	b2da      	uxtb	r2, r3
 801131c:	4b21      	ldr	r3, [pc, #132]	; (80113a4 <handle_ina_notif+0x1e4>)
 801131e:	701a      	strb	r2, [r3, #0]
				_reg_read(dev, reg+1);
 8011320:	693b      	ldr	r3, [r7, #16]
 8011322:	3301      	adds	r3, #1
 8011324:	4619      	mov	r1, r3
 8011326:	68f8      	ldr	r0, [r7, #12]
 8011328:	f000 f898 	bl	801145c <_reg_read>
		} else if ((state >= state_rd_0) && (state <= state_rd_11)) {
 801132c:	e004      	b.n	8011338 <handle_ina_notif+0x178>
			}
		} else {
			bkpoint(2,1000);
 801132e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8011332:	2002      	movs	r0, #2
 8011334:	f7ff fef2 	bl	801111c <bkpoint>
		}
	}
	if (notif & NOTIF_INA_ERR) {
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801133e:	2b00      	cmp	r3, #0
 8011340:	d02c      	beq.n	801139c <handle_ina_notif+0x1dc>
		bkpoint(3, lastErr);
 8011342:	4b1c      	ldr	r3, [pc, #112]	; (80113b4 <handle_ina_notif+0x1f4>)
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	4619      	mov	r1, r3
 8011348:	2003      	movs	r0, #3
 801134a:	f7ff fee7 	bl	801111c <bkpoint>
		if ((state >= state_rd_0) && (state <= state_rd_11)) {
 801134e:	4b15      	ldr	r3, [pc, #84]	; (80113a4 <handle_ina_notif+0x1e4>)
 8011350:	781b      	ldrb	r3, [r3, #0]
 8011352:	2b04      	cmp	r3, #4
 8011354:	d907      	bls.n	8011366 <handle_ina_notif+0x1a6>
 8011356:	4b13      	ldr	r3, [pc, #76]	; (80113a4 <handle_ina_notif+0x1e4>)
 8011358:	781b      	ldrb	r3, [r3, #0]
 801135a:	2b10      	cmp	r3, #16
 801135c:	d803      	bhi.n	8011366 <handle_ina_notif+0x1a6>
			// write error
			// TODO
			state = state_idle;
 801135e:	4b11      	ldr	r3, [pc, #68]	; (80113a4 <handle_ina_notif+0x1e4>)
 8011360:	2200      	movs	r2, #0
 8011362:	701a      	strb	r2, [r3, #0]
 8011364:	e010      	b.n	8011388 <handle_ina_notif+0x1c8>
		} else if ((state >= state_trig_0) && (state <= state_trig_3)) {
 8011366:	4b0f      	ldr	r3, [pc, #60]	; (80113a4 <handle_ina_notif+0x1e4>)
 8011368:	781b      	ldrb	r3, [r3, #0]
 801136a:	2b00      	cmp	r3, #0
 801136c:	d007      	beq.n	801137e <handle_ina_notif+0x1be>
 801136e:	4b0d      	ldr	r3, [pc, #52]	; (80113a4 <handle_ina_notif+0x1e4>)
 8011370:	781b      	ldrb	r3, [r3, #0]
 8011372:	2b04      	cmp	r3, #4
 8011374:	d803      	bhi.n	801137e <handle_ina_notif+0x1be>
			// read error
			// TODO
			state = state_idle;
 8011376:	4b0b      	ldr	r3, [pc, #44]	; (80113a4 <handle_ina_notif+0x1e4>)
 8011378:	2200      	movs	r2, #0
 801137a:	701a      	strb	r2, [r3, #0]
 801137c:	e004      	b.n	8011388 <handle_ina_notif+0x1c8>
		} else {
			bkpoint(3,1000);
 801137e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8011382:	2003      	movs	r0, #3
 8011384:	f7ff feca 	bl	801111c <bkpoint>
		}
		itm_debug1(DBG_INA3221|DBG_ERR, "i2c rst", lastErr);
 8011388:	4b0a      	ldr	r3, [pc, #40]	; (80113b4 <handle_ina_notif+0x1f4>)
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	461a      	mov	r2, r3
 801138e:	490a      	ldr	r1, [pc, #40]	; (80113b8 <handle_ina_notif+0x1f8>)
 8011390:	480a      	ldr	r0, [pc, #40]	; (80113bc <handle_ina_notif+0x1fc>)
 8011392:	f7ff fe51 	bl	8011038 <itm_debug1>
		HAL_I2C_Init(&INA3221_I2C_PORT);
 8011396:	480a      	ldr	r0, [pc, #40]	; (80113c0 <handle_ina_notif+0x200>)
 8011398:	f7f1 ff52 	bl	8003240 <HAL_I2C_Init>
	}
}
 801139c:	3720      	adds	r7, #32
 801139e:	46bd      	mov	sp, r7
 80113a0:	bd80      	pop	{r7, pc}
 80113a2:	bf00      	nop
 80113a4:	200051ac 	.word	0x200051ac
 80113a8:	080193d4 	.word	0x080193d4
 80113ac:	080193dc 	.word	0x080193dc
 80113b0:	55555556 	.word	0x55555556
 80113b4:	200051a4 	.word	0x200051a4
 80113b8:	080193e4 	.word	0x080193e4
 80113bc:	80000020 	.word	0x80000020
 80113c0:	20005624 	.word	0x20005624

080113c4 <_next_dev>:




static int _next_dev(int dev)
{
 80113c4:	b480      	push	{r7}
 80113c6:	b083      	sub	sp, #12
 80113c8:	af00      	add	r7, sp, #0
 80113ca:	6078      	str	r0, [r7, #4]
	dev = dev+1;
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	3301      	adds	r3, #1
 80113d0:	607b      	str	r3, [r7, #4]
	for (;dev<=3;dev++) {
 80113d2:	e00a      	b.n	80113ea <_next_dev+0x26>
		if (ina3221_devices[dev]) return dev;
 80113d4:	4a0a      	ldr	r2, [pc, #40]	; (8011400 <_next_dev+0x3c>)
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	4413      	add	r3, r2
 80113da:	781b      	ldrb	r3, [r3, #0]
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d001      	beq.n	80113e4 <_next_dev+0x20>
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	e007      	b.n	80113f4 <_next_dev+0x30>
	for (;dev<=3;dev++) {
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	3301      	adds	r3, #1
 80113e8:	607b      	str	r3, [r7, #4]
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	2b03      	cmp	r3, #3
 80113ee:	ddf1      	ble.n	80113d4 <_next_dev+0x10>
	}
	return -1;
 80113f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80113f4:	4618      	mov	r0, r3
 80113f6:	370c      	adds	r7, #12
 80113f8:	46bd      	mov	sp, r7
 80113fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113fe:	4770      	bx	lr
 8011400:	20005164 	.word	0x20005164

08011404 <_trig>:


static int  _trig(int dev)
{
 8011404:	b580      	push	{r7, lr}
 8011406:	b084      	sub	sp, #16
 8011408:	af00      	add	r7, sp, #0
 801140a:	6078      	str	r0, [r7, #4]
	if (disable_ina3221) return 0;
 801140c:	4b0f      	ldr	r3, [pc, #60]	; (801144c <_trig+0x48>)
 801140e:	781b      	ldrb	r3, [r3, #0]
 8011410:	2b00      	cmp	r3, #0
 8011412:	d001      	beq.n	8011418 <_trig+0x14>
 8011414:	2300      	movs	r3, #0
 8011416:	e014      	b.n	8011442 <_trig+0x3e>
	cvrf_dev = dev;
 8011418:	4a0d      	ldr	r2, [pc, #52]	; (8011450 <_trig+0x4c>)
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	6013      	str	r3, [r2, #0]
	int addr = 0x40 + dev;
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	3340      	adds	r3, #64	; 0x40
 8011422:	60fb      	str	r3, [r7, #12]
	itm_debug2(DBG_INA3221, "TRIG", dev, addr);
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	687a      	ldr	r2, [r7, #4]
 8011428:	490a      	ldr	r1, [pc, #40]	; (8011454 <_trig+0x50>)
 801142a:	2020      	movs	r0, #32
 801142c:	f7ff fe1e 	bl	801106c <itm_debug2>
	return ina3221_write16it(addr, INA3221_REG_CONFIG, ina_conf_val);
 8011430:	4b09      	ldr	r3, [pc, #36]	; (8011458 <_trig+0x54>)
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	b29b      	uxth	r3, r3
 8011436:	461a      	mov	r2, r3
 8011438:	2100      	movs	r1, #0
 801143a:	68f8      	ldr	r0, [r7, #12]
 801143c:	f000 fa92 	bl	8011964 <ina3221_write16it>
 8011440:	4603      	mov	r3, r0
}
 8011442:	4618      	mov	r0, r3
 8011444:	3710      	adds	r7, #16
 8011446:	46bd      	mov	sp, r7
 8011448:	bd80      	pop	{r7, pc}
 801144a:	bf00      	nop
 801144c:	2000516a 	.word	0x2000516a
 8011450:	200051a8 	.word	0x200051a8
 8011454:	080193ec 	.word	0x080193ec
 8011458:	20005170 	.word	0x20005170

0801145c <_reg_read>:
static void _reg_read(int dev, int nreg)
{
 801145c:	b590      	push	{r4, r7, lr}
 801145e:	b089      	sub	sp, #36	; 0x24
 8011460:	af02      	add	r7, sp, #8
 8011462:	6078      	str	r0, [r7, #4]
 8011464:	6039      	str	r1, [r7, #0]
	int addr = 0x40 + dev;
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	3340      	adds	r3, #64	; 0x40
 801146a:	613b      	str	r3, [r7, #16]
	int hwreg;
	switch (nreg) {
 801146c:	683b      	ldr	r3, [r7, #0]
 801146e:	2b01      	cmp	r3, #1
 8011470:	d006      	beq.n	8011480 <_reg_read+0x24>
 8011472:	2b02      	cmp	r3, #2
 8011474:	d007      	beq.n	8011486 <_reg_read+0x2a>
 8011476:	2b00      	cmp	r3, #0
 8011478:	d108      	bne.n	801148c <_reg_read+0x30>
	case 0: hwreg = INA3221_REG_CH1_SHUNTVOLT; break;
 801147a:	2301      	movs	r3, #1
 801147c:	617b      	str	r3, [r7, #20]
 801147e:	e00b      	b.n	8011498 <_reg_read+0x3c>
	case 1: hwreg = INA3221_REG_CH2_SHUNTVOLT; break;
 8011480:	2303      	movs	r3, #3
 8011482:	617b      	str	r3, [r7, #20]
 8011484:	e008      	b.n	8011498 <_reg_read+0x3c>
	case 2: hwreg = INA3221_REG_CH3_SHUNTVOLT; break;
 8011486:	2305      	movs	r3, #5
 8011488:	617b      	str	r3, [r7, #20]
 801148a:	e005      	b.n	8011498 <_reg_read+0x3c>
	default:
		itm_debug1(DBG_ERR|DBG_INA3221, "hu?", nreg);
 801148c:	683a      	ldr	r2, [r7, #0]
 801148e:	4921      	ldr	r1, [pc, #132]	; (8011514 <_reg_read+0xb8>)
 8011490:	4821      	ldr	r0, [pc, #132]	; (8011518 <_reg_read+0xbc>)
 8011492:	f7ff fdd1 	bl	8011038 <itm_debug1>
		return;
 8011496:	e039      	b.n	801150c <_reg_read+0xb0>
	}
	itm_debug3(DBG_INA3221, "gns read", dev, nreg, hwreg);
 8011498:	697b      	ldr	r3, [r7, #20]
 801149a:	9300      	str	r3, [sp, #0]
 801149c:	683b      	ldr	r3, [r7, #0]
 801149e:	687a      	ldr	r2, [r7, #4]
 80114a0:	491e      	ldr	r1, [pc, #120]	; (801151c <_reg_read+0xc0>)
 80114a2:	2020      	movs	r0, #32
 80114a4:	f7ff fdfe 	bl	80110a4 <itm_debug3>
	HAL_StatusTypeDef status;

	if (__HAL_I2C_GET_FLAG(&INA3221_I2C_PORT, I2C_FLAG_BUSY) != RESET) {
 80114a8:	4b1d      	ldr	r3, [pc, #116]	; (8011520 <_reg_read+0xc4>)
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	699b      	ldr	r3, [r3, #24]
 80114ae:	f003 0302 	and.w	r3, r3, #2
 80114b2:	2b02      	cmp	r3, #2
 80114b4:	d105      	bne.n	80114c2 <_reg_read+0x66>
		itm_debug1(DBG_ERR|DBG_INA3221, "busy", 0);
 80114b6:	2200      	movs	r2, #0
 80114b8:	491a      	ldr	r1, [pc, #104]	; (8011524 <_reg_read+0xc8>)
 80114ba:	4817      	ldr	r0, [pc, #92]	; (8011518 <_reg_read+0xbc>)
 80114bc:	f7ff fdbc 	bl	8011038 <itm_debug1>
		// TODO _end_next_reg(1);
		return;
 80114c0:	e024      	b.n	801150c <_reg_read+0xb0>
	}

	status = HAL_I2C_Mem_Read_IT(&INA3221_I2C_PORT, addr<<1, hwreg, I2C_MEMADD_SIZE_8BIT,
 80114c2:	693b      	ldr	r3, [r7, #16]
 80114c4:	b29b      	uxth	r3, r3
 80114c6:	005b      	lsls	r3, r3, #1
 80114c8:	b298      	uxth	r0, r3
 80114ca:	697b      	ldr	r3, [r7, #20]
 80114cc:	b29c      	uxth	r4, r3
 80114ce:	4b16      	ldr	r3, [pc, #88]	; (8011528 <_reg_read+0xcc>)
 80114d0:	6819      	ldr	r1, [r3, #0]
			(uint8_t *)&cur_values[dev*3+nreg], 2);
 80114d2:	687a      	ldr	r2, [r7, #4]
 80114d4:	4613      	mov	r3, r2
 80114d6:	005b      	lsls	r3, r3, #1
 80114d8:	441a      	add	r2, r3
 80114da:	683b      	ldr	r3, [r7, #0]
 80114dc:	4413      	add	r3, r2
 80114de:	005b      	lsls	r3, r3, #1
 80114e0:	440b      	add	r3, r1
	status = HAL_I2C_Mem_Read_IT(&INA3221_I2C_PORT, addr<<1, hwreg, I2C_MEMADD_SIZE_8BIT,
 80114e2:	2202      	movs	r2, #2
 80114e4:	9201      	str	r2, [sp, #4]
 80114e6:	9300      	str	r3, [sp, #0]
 80114e8:	2301      	movs	r3, #1
 80114ea:	4622      	mov	r2, r4
 80114ec:	4601      	mov	r1, r0
 80114ee:	480c      	ldr	r0, [pc, #48]	; (8011520 <_reg_read+0xc4>)
 80114f0:	f7f2 fafe 	bl	8003af0 <HAL_I2C_Mem_Read_IT>
 80114f4:	4603      	mov	r3, r0
 80114f6:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
 80114f8:	7bfb      	ldrb	r3, [r7, #15]
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d006      	beq.n	801150c <_reg_read+0xb0>
		itm_debug1(DBG_INA3221|DBG_ERR, "readit", status);
 80114fe:	7bfb      	ldrb	r3, [r7, #15]
 8011500:	461a      	mov	r2, r3
 8011502:	490a      	ldr	r1, [pc, #40]	; (801152c <_reg_read+0xd0>)
 8011504:	4804      	ldr	r0, [pc, #16]	; (8011518 <_reg_read+0xbc>)
 8011506:	f7ff fd97 	bl	8011038 <itm_debug1>
		// TODO
		return;
 801150a:	bf00      	nop
	}
}
 801150c:	371c      	adds	r7, #28
 801150e:	46bd      	mov	sp, r7
 8011510:	bd90      	pop	{r4, r7, pc}
 8011512:	bf00      	nop
 8011514:	080193f4 	.word	0x080193f4
 8011518:	80000020 	.word	0x80000020
 801151c:	080193f8 	.word	0x080193f8
 8011520:	20005624 	.word	0x20005624
 8011524:	08019404 	.word	0x08019404
 8011528:	2000019c 	.word	0x2000019c
 801152c:	0801940c 	.word	0x0801940c

08011530 <_read_complete>:
	return 0;
}
#endif

static void _read_complete(_UNUSED_ int err)
{
 8011530:	b580      	push	{r7, lr}
 8011532:	b08e      	sub	sp, #56	; 0x38
 8011534:	af02      	add	r7, sp, #8
 8011536:	6078      	str	r0, [r7, #4]
	uint16_t *valu = (uint16_t *) cur_values;
 8011538:	4b51      	ldr	r3, [pc, #324]	; (8011680 <_read_complete+0x150>)
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	627b      	str	r3, [r7, #36]	; 0x24
	int16_t  *vals = (int16_t *) cur_values;
 801153e:	4b50      	ldr	r3, [pc, #320]	; (8011680 <_read_complete+0x150>)
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	623b      	str	r3, [r7, #32]
	static int8_t presence[INA3221_NUM_VALS] = {0};

	for (int i = 0; i<INA3221_NUM_VALS; i++) {
 8011544:	2300      	movs	r3, #0
 8011546:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011548:	e00e      	b.n	8011568 <_read_complete+0x38>
			valu[i] = __builtin_bswap16(valu[i]);
 801154a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801154c:	005b      	lsls	r3, r3, #1
 801154e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011550:	4413      	add	r3, r2
 8011552:	881a      	ldrh	r2, [r3, #0]
 8011554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011556:	005b      	lsls	r3, r3, #1
 8011558:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801155a:	440b      	add	r3, r1
 801155c:	ba52      	rev16	r2, r2
 801155e:	b292      	uxth	r2, r2
 8011560:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i<INA3221_NUM_VALS; i++) {
 8011562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011564:	3301      	adds	r3, #1
 8011566:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801156a:	2b0b      	cmp	r3, #11
 801156c:	dded      	ble.n	801154a <_read_complete+0x1a>
	}
	msg_64_t m;

	switch (run_mode) {
 801156e:	4b45      	ldr	r3, [pc, #276]	; (8011684 <_read_complete+0x154>)
 8011570:	781b      	ldrb	r3, [r3, #0]
 8011572:	2b01      	cmp	r3, #1
 8011574:	d01a      	beq.n	80115ac <_read_complete+0x7c>
 8011576:	2b03      	cmp	r3, #3
 8011578:	d000      	beq.n	801157c <_read_complete+0x4c>
	default:
		break;
 801157a:	e07d      	b.n	8011678 <_read_complete+0x148>
	case runmode_detect1:
		m.from =  MA_CANTON(localBoardNum, 0);
 801157c:	4b42      	ldr	r3, [pc, #264]	; (8011688 <_read_complete+0x158>)
 801157e:	781b      	ldrb	r3, [r3, #0]
 8011580:	00db      	lsls	r3, r3, #3
 8011582:	b2db      	uxtb	r3, r3
 8011584:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011588:	b2db      	uxtb	r3, r3
 801158a:	747b      	strb	r3, [r7, #17]
		m.to = MA_UI(1);
 801158c:	2381      	movs	r3, #129	; 0x81
 801158e:	743b      	strb	r3, [r7, #16]
		m.cmd = CMD_INA3221_VAL1;
 8011590:	2327      	movs	r3, #39	; 0x27
 8011592:	74bb      	strb	r3, [r7, #18]
		m.sub = 1;
 8011594:	2301      	movs	r3, #1
 8011596:	74fb      	strb	r3, [r7, #19]
		m.v1 = vals[1];
 8011598:	6a3b      	ldr	r3, [r7, #32]
 801159a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801159e:	82bb      	strh	r3, [r7, #20]
		mqf_write_from_ina3221(&m);
 80115a0:	f107 0310 	add.w	r3, r7, #16
 80115a4:	4618      	mov	r0, r3
 80115a6:	f7ff fda9 	bl	80110fc <mqf_write_from_ina3221>
		break;
 80115aa:	e065      	b.n	8011678 <_read_complete+0x148>
	case runmode_normal:
		for (int i = 0; i<INA3221_NUM_VALS; i++) {
 80115ac:	2300      	movs	r3, #0
 80115ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80115b0:	e05f      	b.n	8011672 <_read_complete+0x142>
			itm_debug2(DBG_INA3221, "ina val", i, vals[i]);
 80115b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115b4:	005b      	lsls	r3, r3, #1
 80115b6:	6a3a      	ldr	r2, [r7, #32]
 80115b8:	4413      	add	r3, r2
 80115ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80115be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80115c0:	4932      	ldr	r1, [pc, #200]	; (801168c <_read_complete+0x15c>)
 80115c2:	2020      	movs	r0, #32
 80115c4:	f7ff fd52 	bl	801106c <itm_debug2>
			int p = (abs(vals[i])>1000) ? 1 : 0;
 80115c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115ca:	005b      	lsls	r3, r3, #1
 80115cc:	6a3a      	ldr	r2, [r7, #32]
 80115ce:	4413      	add	r3, r2
 80115d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	bfb8      	it	lt
 80115d8:	425b      	neglt	r3, r3
 80115da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80115de:	bfcc      	ite	gt
 80115e0:	2301      	movgt	r3, #1
 80115e2:	2300      	movle	r3, #0
 80115e4:	b2db      	uxtb	r3, r3
 80115e6:	61fb      	str	r3, [r7, #28]
			if (p == presence[i]) continue;
 80115e8:	4a29      	ldr	r2, [pc, #164]	; (8011690 <_read_complete+0x160>)
 80115ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115ec:	4413      	add	r3, r2
 80115ee:	f993 3000 	ldrsb.w	r3, [r3]
 80115f2:	461a      	mov	r2, r3
 80115f4:	69fb      	ldr	r3, [r7, #28]
 80115f6:	4293      	cmp	r3, r2
 80115f8:	d103      	bne.n	8011602 <_read_complete+0xd2>
		for (int i = 0; i<INA3221_NUM_VALS; i++) {
 80115fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115fc:	3301      	adds	r3, #1
 80115fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8011600:	e037      	b.n	8011672 <_read_complete+0x142>
			presence[i] = p;
 8011602:	69fb      	ldr	r3, [r7, #28]
 8011604:	b259      	sxtb	r1, r3
 8011606:	4a22      	ldr	r2, [pc, #136]	; (8011690 <_read_complete+0x160>)
 8011608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801160a:	4413      	add	r3, r2
 801160c:	460a      	mov	r2, r1
 801160e:	701a      	strb	r2, [r3, #0]
			itm_debug3(DBG_INA3221|DBG_PRES, "PRSCH", i,p, vals[i]);
 8011610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011612:	005b      	lsls	r3, r3, #1
 8011614:	6a3a      	ldr	r2, [r7, #32]
 8011616:	4413      	add	r3, r2
 8011618:	f9b3 3000 	ldrsh.w	r3, [r3]
 801161c:	9300      	str	r3, [sp, #0]
 801161e:	69fb      	ldr	r3, [r7, #28]
 8011620:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011622:	491c      	ldr	r1, [pc, #112]	; (8011694 <_read_complete+0x164>)
 8011624:	2060      	movs	r0, #96	; 0x60
 8011626:	f7ff fd3d 	bl	80110a4 <itm_debug3>
			// notify change
			m.from = MA_CANTON(localBoardNum, 0);
 801162a:	4b17      	ldr	r3, [pc, #92]	; (8011688 <_read_complete+0x158>)
 801162c:	781b      	ldrb	r3, [r3, #0]
 801162e:	00db      	lsls	r3, r3, #3
 8011630:	b2db      	uxtb	r3, r3
 8011632:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011636:	b2db      	uxtb	r3, r3
 8011638:	747b      	strb	r3, [r7, #17]
			m.to = MA_CONTROL();
 801163a:	23d7      	movs	r3, #215	; 0xd7
 801163c:	743b      	strb	r3, [r7, #16]
			m.cmd = CMD_PRESENCE_CHANGE;
 801163e:	2312      	movs	r3, #18
 8011640:	74bb      	strb	r3, [r7, #18]
			m.sub = i;
 8011642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011644:	b2db      	uxtb	r3, r3
 8011646:	74fb      	strb	r3, [r7, #19]
			m.v1u = p;
 8011648:	69fb      	ldr	r3, [r7, #28]
 801164a:	b29b      	uxth	r3, r3
 801164c:	82bb      	strh	r3, [r7, #20]
			m.v2 = vals[i];
 801164e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011650:	005b      	lsls	r3, r3, #1
 8011652:	6a3a      	ldr	r2, [r7, #32]
 8011654:	4413      	add	r3, r2
 8011656:	f9b3 3000 	ldrsh.w	r3, [r3]
 801165a:	82fb      	strh	r3, [r7, #22]
			mqf_write_from_ina3221(&m);
 801165c:	f107 0310 	add.w	r3, r7, #16
 8011660:	4618      	mov	r0, r3
 8011662:	f7ff fd4b 	bl	80110fc <mqf_write_from_ina3221>


			static int cnt=0;
			cnt++;
 8011666:	4b0c      	ldr	r3, [pc, #48]	; (8011698 <_read_complete+0x168>)
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	3301      	adds	r3, #1
 801166c:	4a0a      	ldr	r2, [pc, #40]	; (8011698 <_read_complete+0x168>)
 801166e:	6013      	str	r3, [r2, #0]
				m.to = MA_UI(1);
				m.cmd = CMD_INA3221_REPORT;
				m.v32u = (uint32_t) v;
				mqf_write_from_ina3221(&m);
			}
			break;
 8011670:	e002      	b.n	8011678 <_read_complete+0x148>
		for (int i = 0; i<INA3221_NUM_VALS; i++) {
 8011672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011674:	2b0b      	cmp	r3, #11
 8011676:	dd9c      	ble.n	80115b2 <_read_complete+0x82>
		}
	}
}
 8011678:	bf00      	nop
 801167a:	3730      	adds	r7, #48	; 0x30
 801167c:	46bd      	mov	sp, r7
 801167e:	bd80      	pop	{r7, pc}
 8011680:	2000019c 	.word	0x2000019c
 8011684:	20005160 	.word	0x20005160
 8011688:	200053d5 	.word	0x200053d5
 801168c:	08019414 	.word	0x08019414
 8011690:	200051b0 	.word	0x200051b0
 8011694:	0801941c 	.word	0x0801941c
 8011698:	200051bc 	.word	0x200051bc

0801169c <HAL_I2C_MemTxCpltCallback>:


void HAL_I2C_MemTxCpltCallback(_UNUSED_ I2C_HandleTypeDef *hi2c)
{
 801169c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80116a0:	b08a      	sub	sp, #40	; 0x28
 80116a2:	af02      	add	r7, sp, #8
 80116a4:	6078      	str	r0, [r7, #4]
	BEGIN_ISR
 80116a6:	f004 fb2f 	bl	8015d08 <GetCycleCount64>
 80116aa:	4603      	mov	r3, r0
 80116ac:	460c      	mov	r4, r1
 80116ae:	e9c7 3404 	strd	r3, r4, [r7, #16]
	BaseType_t higher=0;
 80116b2:	2300      	movs	r3, #0
 80116b4:	60fb      	str	r3, [r7, #12]
	xTaskNotifyFromISR(ina3221_taskHandle, NOTIF_INA_WRCOMPL, eSetBits, &higher);
 80116b6:	4b1b      	ldr	r3, [pc, #108]	; (8011724 <HAL_I2C_MemTxCpltCallback+0x88>)
 80116b8:	6818      	ldr	r0, [r3, #0]
 80116ba:	f107 030c 	add.w	r3, r7, #12
 80116be:	9300      	str	r3, [sp, #0]
 80116c0:	2300      	movs	r3, #0
 80116c2:	2201      	movs	r2, #1
 80116c4:	2110      	movs	r1, #16
 80116c6:	f7fd fba9 	bl	800ee1c <xTaskGenericNotifyFromISR>
	portYIELD_FROM_ISR(higher);
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d007      	beq.n	80116e0 <HAL_I2C_MemTxCpltCallback+0x44>
 80116d0:	4b15      	ldr	r3, [pc, #84]	; (8011728 <HAL_I2C_MemTxCpltCallback+0x8c>)
 80116d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80116d6:	601a      	str	r2, [r3, #0]
 80116d8:	f3bf 8f4f 	dsb	sy
 80116dc:	f3bf 8f6f 	isb	sy
	END_ISR;
 80116e0:	f004 fb12 	bl	8015d08 <GetCycleCount64>
 80116e4:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80116e8:	e9d7 bc04 	ldrd	fp, ip, [r7, #16]
 80116ec:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80116f0:	460b      	mov	r3, r1
 80116f2:	4614      	mov	r4, r2
 80116f4:	ebb3 030b 	subs.w	r3, r3, fp
 80116f8:	eb64 040c 	sbc.w	r4, r4, ip
 80116fc:	f64b 3180 	movw	r1, #48000	; 0xbb80
 8011700:	f04f 0200 	mov.w	r2, #0
 8011704:	42a2      	cmp	r2, r4
 8011706:	bf08      	it	eq
 8011708:	4299      	cmpeq	r1, r3
 801170a:	d206      	bcs.n	801171a <HAL_I2C_MemTxCpltCallback+0x7e>
 801170c:	69ba      	ldr	r2, [r7, #24]
 801170e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8011712:	1ad3      	subs	r3, r2, r3
 8011714:	4618      	mov	r0, r3
 8011716:	f004 fae5 	bl	8015ce4 <long_isr>
}
 801171a:	bf00      	nop
 801171c:	3720      	adds	r7, #32
 801171e:	46bd      	mov	sp, r7
 8011720:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8011724:	20006d34 	.word	0x20006d34
 8011728:	e000ed04 	.word	0xe000ed04

0801172c <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(_UNUSED_ I2C_HandleTypeDef *hi2c)
{
 801172c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8011730:	b08a      	sub	sp, #40	; 0x28
 8011732:	af02      	add	r7, sp, #8
 8011734:	6078      	str	r0, [r7, #4]
	BEGIN_ISR
 8011736:	f004 fae7 	bl	8015d08 <GetCycleCount64>
 801173a:	4603      	mov	r3, r0
 801173c:	460c      	mov	r4, r1
 801173e:	e9c7 3404 	strd	r3, r4, [r7, #16]
	BaseType_t higher=0;
 8011742:	2300      	movs	r3, #0
 8011744:	60fb      	str	r3, [r7, #12]
	xTaskNotifyFromISR(ina3221_taskHandle, NOTIF_INA_RDCOMPL, eSetBits, &higher);
 8011746:	4b1b      	ldr	r3, [pc, #108]	; (80117b4 <HAL_I2C_MemRxCpltCallback+0x88>)
 8011748:	6818      	ldr	r0, [r3, #0]
 801174a:	f107 030c 	add.w	r3, r7, #12
 801174e:	9300      	str	r3, [sp, #0]
 8011750:	2300      	movs	r3, #0
 8011752:	2201      	movs	r2, #1
 8011754:	2120      	movs	r1, #32
 8011756:	f7fd fb61 	bl	800ee1c <xTaskGenericNotifyFromISR>
	portYIELD_FROM_ISR(higher);
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	2b00      	cmp	r3, #0
 801175e:	d007      	beq.n	8011770 <HAL_I2C_MemRxCpltCallback+0x44>
 8011760:	4b15      	ldr	r3, [pc, #84]	; (80117b8 <HAL_I2C_MemRxCpltCallback+0x8c>)
 8011762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011766:	601a      	str	r2, [r3, #0]
 8011768:	f3bf 8f4f 	dsb	sy
 801176c:	f3bf 8f6f 	isb	sy
	END_ISR;
 8011770:	f004 faca 	bl	8015d08 <GetCycleCount64>
 8011774:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8011778:	e9d7 bc04 	ldrd	fp, ip, [r7, #16]
 801177c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8011780:	460b      	mov	r3, r1
 8011782:	4614      	mov	r4, r2
 8011784:	ebb3 030b 	subs.w	r3, r3, fp
 8011788:	eb64 040c 	sbc.w	r4, r4, ip
 801178c:	f64b 3180 	movw	r1, #48000	; 0xbb80
 8011790:	f04f 0200 	mov.w	r2, #0
 8011794:	42a2      	cmp	r2, r4
 8011796:	bf08      	it	eq
 8011798:	4299      	cmpeq	r1, r3
 801179a:	d206      	bcs.n	80117aa <HAL_I2C_MemRxCpltCallback+0x7e>
 801179c:	69ba      	ldr	r2, [r7, #24]
 801179e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80117a2:	1ad3      	subs	r3, r2, r3
 80117a4:	4618      	mov	r0, r3
 80117a6:	f004 fa9d 	bl	8015ce4 <long_isr>
}
 80117aa:	bf00      	nop
 80117ac:	3720      	adds	r7, #32
 80117ae:	46bd      	mov	sp, r7
 80117b0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80117b4:	20006d34 	.word	0x20006d34
 80117b8:	e000ed04 	.word	0xe000ed04

080117bc <HAL_I2C_ErrorCallback>:



void HAL_I2C_ErrorCallback(_UNUSED_ I2C_HandleTypeDef *hi2c)
{
 80117bc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80117c0:	b08a      	sub	sp, #40	; 0x28
 80117c2:	af02      	add	r7, sp, #8
 80117c4:	6078      	str	r0, [r7, #4]
	BEGIN_ISR
 80117c6:	f004 fa9f 	bl	8015d08 <GetCycleCount64>
 80117ca:	4603      	mov	r3, r0
 80117cc:	460c      	mov	r4, r1
 80117ce:	e9c7 3404 	strd	r3, r4, [r7, #16]
	lastErr = hi2c->ErrorCode;
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80117d6:	461a      	mov	r2, r3
 80117d8:	4b1d      	ldr	r3, [pc, #116]	; (8011850 <HAL_I2C_ErrorCallback+0x94>)
 80117da:	601a      	str	r2, [r3, #0]
	BaseType_t higher=0;
 80117dc:	2300      	movs	r3, #0
 80117de:	60fb      	str	r3, [r7, #12]
	xTaskNotifyFromISR(ina3221_taskHandle, NOTIF_INA_ERR, eSetBits, &higher);
 80117e0:	4b1c      	ldr	r3, [pc, #112]	; (8011854 <HAL_I2C_ErrorCallback+0x98>)
 80117e2:	6818      	ldr	r0, [r3, #0]
 80117e4:	f107 030c 	add.w	r3, r7, #12
 80117e8:	9300      	str	r3, [sp, #0]
 80117ea:	2300      	movs	r3, #0
 80117ec:	2201      	movs	r2, #1
 80117ee:	2140      	movs	r1, #64	; 0x40
 80117f0:	f7fd fb14 	bl	800ee1c <xTaskGenericNotifyFromISR>
	portYIELD_FROM_ISR(higher);
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d007      	beq.n	801180a <HAL_I2C_ErrorCallback+0x4e>
 80117fa:	4b17      	ldr	r3, [pc, #92]	; (8011858 <HAL_I2C_ErrorCallback+0x9c>)
 80117fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011800:	601a      	str	r2, [r3, #0]
 8011802:	f3bf 8f4f 	dsb	sy
 8011806:	f3bf 8f6f 	isb	sy
	END_ISR;
 801180a:	f004 fa7d 	bl	8015d08 <GetCycleCount64>
 801180e:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8011812:	e9d7 bc04 	ldrd	fp, ip, [r7, #16]
 8011816:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801181a:	460b      	mov	r3, r1
 801181c:	4614      	mov	r4, r2
 801181e:	ebb3 030b 	subs.w	r3, r3, fp
 8011822:	eb64 040c 	sbc.w	r4, r4, ip
 8011826:	f64b 3180 	movw	r1, #48000	; 0xbb80
 801182a:	f04f 0200 	mov.w	r2, #0
 801182e:	42a2      	cmp	r2, r4
 8011830:	bf08      	it	eq
 8011832:	4299      	cmpeq	r1, r3
 8011834:	d206      	bcs.n	8011844 <HAL_I2C_ErrorCallback+0x88>
 8011836:	69ba      	ldr	r2, [r7, #24]
 8011838:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801183c:	1ad3      	subs	r3, r2, r3
 801183e:	4618      	mov	r0, r3
 8011840:	f004 fa50 	bl	8015ce4 <long_isr>
}
 8011844:	bf00      	nop
 8011846:	3720      	adds	r7, #32
 8011848:	46bd      	mov	sp, r7
 801184a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 801184e:	bf00      	nop
 8011850:	200051a4 	.word	0x200051a4
 8011854:	20006d34 	.word	0x20006d34
 8011858:	e000ed04 	.word	0xe000ed04

0801185c <ina3221_read16>:

// ----------------------------------------------------------------------------------


static uint16_t ina3221_read16(int a, int reg)
{
 801185c:	b580      	push	{r7, lr}
 801185e:	b088      	sub	sp, #32
 8011860:	af04      	add	r7, sp, #16
 8011862:	6078      	str	r0, [r7, #4]
 8011864:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;
	uint16_t w16;
    status = HAL_I2C_Mem_Read(&INA3221_I2C_PORT, a<<1, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&w16, 2, HAL_MAX_DELAY);
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	b29b      	uxth	r3, r3
 801186a:	005b      	lsls	r3, r3, #1
 801186c:	b299      	uxth	r1, r3
 801186e:	683b      	ldr	r3, [r7, #0]
 8011870:	b29a      	uxth	r2, r3
 8011872:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011876:	9302      	str	r3, [sp, #8]
 8011878:	2302      	movs	r3, #2
 801187a:	9301      	str	r3, [sp, #4]
 801187c:	f107 030c 	add.w	r3, r7, #12
 8011880:	9300      	str	r3, [sp, #0]
 8011882:	2301      	movs	r3, #1
 8011884:	4811      	ldr	r0, [pc, #68]	; (80118cc <ina3221_read16+0x70>)
 8011886:	f7f1 ff0d 	bl	80036a4 <HAL_I2C_Mem_Read>
 801188a:	4603      	mov	r3, r0
 801188c:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) {
 801188e:	7bfb      	ldrb	r3, [r7, #15]
 8011890:	2b00      	cmp	r3, #0
 8011892:	d013      	beq.n	80118bc <ina3221_read16+0x60>
    	itm_debug1(DBG_INA3221|DBG_ERR, "i2c r err", status);
 8011894:	7bfb      	ldrb	r3, [r7, #15]
 8011896:	461a      	mov	r2, r3
 8011898:	490d      	ldr	r1, [pc, #52]	; (80118d0 <ina3221_read16+0x74>)
 801189a:	480e      	ldr	r0, [pc, #56]	; (80118d4 <ina3221_read16+0x78>)
 801189c:	f7ff fbcc 	bl	8011038 <itm_debug1>
    	ina3221_errors++;
 80118a0:	4b0d      	ldr	r3, [pc, #52]	; (80118d8 <ina3221_read16+0x7c>)
 80118a2:	881b      	ldrh	r3, [r3, #0]
 80118a4:	3301      	adds	r3, #1
 80118a6:	b29a      	uxth	r2, r3
 80118a8:	4b0b      	ldr	r3, [pc, #44]	; (80118d8 <ina3221_read16+0x7c>)
 80118aa:	801a      	strh	r2, [r3, #0]
    	bkpoint(1, INA3221_I2C_PORT.ErrorCode);
 80118ac:	4b07      	ldr	r3, [pc, #28]	; (80118cc <ina3221_read16+0x70>)
 80118ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80118b0:	4619      	mov	r1, r3
 80118b2:	2001      	movs	r0, #1
 80118b4:	f7ff fc32 	bl	801111c <bkpoint>
    	return 0;
 80118b8:	2300      	movs	r3, #0
 80118ba:	e002      	b.n	80118c2 <ina3221_read16+0x66>
    } else {
    	return __builtin_bswap16(w16);
 80118bc:	89bb      	ldrh	r3, [r7, #12]
 80118be:	ba5b      	rev16	r3, r3
 80118c0:	b29b      	uxth	r3, r3
    }
}
 80118c2:	4618      	mov	r0, r3
 80118c4:	3710      	adds	r7, #16
 80118c6:	46bd      	mov	sp, r7
 80118c8:	bd80      	pop	{r7, pc}
 80118ca:	bf00      	nop
 80118cc:	20005624 	.word	0x20005624
 80118d0:	08019424 	.word	0x08019424
 80118d4:	80000020 	.word	0x80000020
 80118d8:	20005168 	.word	0x20005168

080118dc <ina3221_write16>:

static int ina3221_write16(int a, int reg, uint16_t v)
{
 80118dc:	b580      	push	{r7, lr}
 80118de:	b08a      	sub	sp, #40	; 0x28
 80118e0:	af04      	add	r7, sp, #16
 80118e2:	60f8      	str	r0, [r7, #12]
 80118e4:	60b9      	str	r1, [r7, #8]
 80118e6:	4613      	mov	r3, r2
 80118e8:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status;
	uint16_t w16;
	if ((1)) w16 = __builtin_bswap16(v);
 80118ea:	88fb      	ldrh	r3, [r7, #6]
 80118ec:	ba5b      	rev16	r3, r3
 80118ee:	b29b      	uxth	r3, r3
 80118f0:	82bb      	strh	r3, [r7, #20]
	else w16=v;
    status = HAL_I2C_Mem_Write(&INA3221_I2C_PORT, a<<1, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&w16, 2, HAL_MAX_DELAY);
 80118f2:	68fb      	ldr	r3, [r7, #12]
 80118f4:	b29b      	uxth	r3, r3
 80118f6:	005b      	lsls	r3, r3, #1
 80118f8:	b299      	uxth	r1, r3
 80118fa:	68bb      	ldr	r3, [r7, #8]
 80118fc:	b29a      	uxth	r2, r3
 80118fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011902:	9302      	str	r3, [sp, #8]
 8011904:	2302      	movs	r3, #2
 8011906:	9301      	str	r3, [sp, #4]
 8011908:	f107 0314 	add.w	r3, r7, #20
 801190c:	9300      	str	r3, [sp, #0]
 801190e:	2301      	movs	r3, #1
 8011910:	4810      	ldr	r0, [pc, #64]	; (8011954 <ina3221_write16+0x78>)
 8011912:	f7f1 fdcd 	bl	80034b0 <HAL_I2C_Mem_Write>
 8011916:	4603      	mov	r3, r0
 8011918:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) {
 801191a:	7dfb      	ldrb	r3, [r7, #23]
 801191c:	2b00      	cmp	r3, #0
 801191e:	d014      	beq.n	801194a <ina3221_write16+0x6e>
    	itm_debug1(DBG_INA3221|DBG_ERR, "i2c w err", status);
 8011920:	7dfb      	ldrb	r3, [r7, #23]
 8011922:	461a      	mov	r2, r3
 8011924:	490c      	ldr	r1, [pc, #48]	; (8011958 <ina3221_write16+0x7c>)
 8011926:	480d      	ldr	r0, [pc, #52]	; (801195c <ina3221_write16+0x80>)
 8011928:	f7ff fb86 	bl	8011038 <itm_debug1>
       	ina3221_errors++;
 801192c:	4b0c      	ldr	r3, [pc, #48]	; (8011960 <ina3221_write16+0x84>)
 801192e:	881b      	ldrh	r3, [r3, #0]
 8011930:	3301      	adds	r3, #1
 8011932:	b29a      	uxth	r2, r3
 8011934:	4b0a      	ldr	r3, [pc, #40]	; (8011960 <ina3221_write16+0x84>)
 8011936:	801a      	strh	r2, [r3, #0]
    	bkpoint(2, INA3221_I2C_PORT.ErrorCode);
 8011938:	4b06      	ldr	r3, [pc, #24]	; (8011954 <ina3221_write16+0x78>)
 801193a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801193c:	4619      	mov	r1, r3
 801193e:	2002      	movs	r0, #2
 8011940:	f7ff fbec 	bl	801111c <bkpoint>
    	return -1;
 8011944:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011948:	e000      	b.n	801194c <ina3221_write16+0x70>
    }
    return 0;
 801194a:	2300      	movs	r3, #0
}
 801194c:	4618      	mov	r0, r3
 801194e:	3718      	adds	r7, #24
 8011950:	46bd      	mov	sp, r7
 8011952:	bd80      	pop	{r7, pc}
 8011954:	20005624 	.word	0x20005624
 8011958:	08019430 	.word	0x08019430
 801195c:	80000020 	.word	0x80000020
 8011960:	20005168 	.word	0x20005168

08011964 <ina3221_write16it>:




_UNUSED_ static int ina3221_write16it(int a, int reg, uint16_t v)
{
 8011964:	b580      	push	{r7, lr}
 8011966:	b088      	sub	sp, #32
 8011968:	af02      	add	r7, sp, #8
 801196a:	60f8      	str	r0, [r7, #12]
 801196c:	60b9      	str	r1, [r7, #8]
 801196e:	4613      	mov	r3, r2
 8011970:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status;
	uint16_t w16;
	if ((1)) w16 = __builtin_bswap16(v);
 8011972:	88fb      	ldrh	r3, [r7, #6]
 8011974:	ba5b      	rev16	r3, r3
 8011976:	b29b      	uxth	r3, r3
 8011978:	82bb      	strh	r3, [r7, #20]
	else w16=v;

	if (HAL_I2C_GetState(&INA3221_I2C_PORT) != HAL_I2C_STATE_READY) {
 801197a:	4824      	ldr	r0, [pc, #144]	; (8011a0c <ina3221_write16it+0xa8>)
 801197c:	f7f2 fd02 	bl	8004384 <HAL_I2C_GetState>
 8011980:	4603      	mov	r3, r0
 8011982:	2b20      	cmp	r3, #32
 8011984:	d00a      	beq.n	801199c <ina3221_write16it+0x38>
    	bkpoint(3, INA3221_I2C_PORT.State);
 8011986:	4b21      	ldr	r3, [pc, #132]	; (8011a0c <ina3221_write16it+0xa8>)
 8011988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801198c:	b2db      	uxtb	r3, r3
 801198e:	4619      	mov	r1, r3
 8011990:	2003      	movs	r0, #3
 8011992:	f7ff fbc3 	bl	801111c <bkpoint>
    	return -1;
 8011996:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801199a:	e033      	b.n	8011a04 <ina3221_write16it+0xa0>
	}
#if 0
    status = HAL_I2C_Mem_Write_IT(&INA3221_I2C_PORT, a<<1, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&w16, 2);
#else
    status = HAL_I2C_Mem_Write_IT_NW(&INA3221_I2C_PORT, a<<1, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&w16, 2);
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	b29b      	uxth	r3, r3
 80119a0:	005b      	lsls	r3, r3, #1
 80119a2:	b299      	uxth	r1, r3
 80119a4:	68bb      	ldr	r3, [r7, #8]
 80119a6:	b29a      	uxth	r2, r3
 80119a8:	2302      	movs	r3, #2
 80119aa:	9301      	str	r3, [sp, #4]
 80119ac:	f107 0314 	add.w	r3, r7, #20
 80119b0:	9300      	str	r3, [sp, #0]
 80119b2:	2301      	movs	r3, #1
 80119b4:	4815      	ldr	r0, [pc, #84]	; (8011a0c <ina3221_write16it+0xa8>)
 80119b6:	f000 f835 	bl	8011a24 <HAL_I2C_Mem_Write_IT_NW>
 80119ba:	4603      	mov	r3, r0
 80119bc:	75fb      	strb	r3, [r7, #23]
#endif
    if (status != HAL_OK) {
 80119be:	7dfb      	ldrb	r3, [r7, #23]
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d01e      	beq.n	8011a02 <ina3221_write16it+0x9e>
    	itm_debug1(DBG_INA3221|DBG_ERR, "i2c w err", status);
 80119c4:	7dfb      	ldrb	r3, [r7, #23]
 80119c6:	461a      	mov	r2, r3
 80119c8:	4911      	ldr	r1, [pc, #68]	; (8011a10 <ina3221_write16it+0xac>)
 80119ca:	4812      	ldr	r0, [pc, #72]	; (8011a14 <ina3221_write16it+0xb0>)
 80119cc:	f7ff fb34 	bl	8011038 <itm_debug1>
       	ina3221_errors++;
 80119d0:	4b11      	ldr	r3, [pc, #68]	; (8011a18 <ina3221_write16it+0xb4>)
 80119d2:	881b      	ldrh	r3, [r3, #0]
 80119d4:	3301      	adds	r3, #1
 80119d6:	b29a      	uxth	r2, r3
 80119d8:	4b0f      	ldr	r3, [pc, #60]	; (8011a18 <ina3221_write16it+0xb4>)
 80119da:	801a      	strh	r2, [r3, #0]
    	bkpoint(3, INA3221_I2C_PORT.ErrorCode);
 80119dc:	4b0b      	ldr	r3, [pc, #44]	; (8011a0c <ina3221_write16it+0xa8>)
 80119de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80119e0:	4619      	mov	r1, r3
 80119e2:	2003      	movs	r0, #3
 80119e4:	f7ff fb9a 	bl	801111c <bkpoint>
    	itm_debug1(DBG_INA3221|DBG_ERR, "i2c rst", lastErr);
 80119e8:	4b0c      	ldr	r3, [pc, #48]	; (8011a1c <ina3221_write16it+0xb8>)
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	461a      	mov	r2, r3
 80119ee:	490c      	ldr	r1, [pc, #48]	; (8011a20 <ina3221_write16it+0xbc>)
 80119f0:	4808      	ldr	r0, [pc, #32]	; (8011a14 <ina3221_write16it+0xb0>)
 80119f2:	f7ff fb21 	bl	8011038 <itm_debug1>
    	HAL_I2C_Init(&INA3221_I2C_PORT);
 80119f6:	4805      	ldr	r0, [pc, #20]	; (8011a0c <ina3221_write16it+0xa8>)
 80119f8:	f7f1 fc22 	bl	8003240 <HAL_I2C_Init>
    	return -1;
 80119fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011a00:	e000      	b.n	8011a04 <ina3221_write16it+0xa0>
    }
    return 0;
 8011a02:	2300      	movs	r3, #0
}
 8011a04:	4618      	mov	r0, r3
 8011a06:	3718      	adds	r7, #24
 8011a08:	46bd      	mov	sp, r7
 8011a0a:	bd80      	pop	{r7, pc}
 8011a0c:	20005624 	.word	0x20005624
 8011a10:	08019430 	.word	0x08019430
 8011a14:	80000020 	.word	0x80000020
 8011a18:	20005168 	.word	0x20005168
 8011a1c:	200051a4 	.word	0x200051a4
 8011a20:	080193e4 	.word	0x080193e4

08011a24 <HAL_I2C_Mem_Write_IT_NW>:
#define I2C_TIMEOUT_BUSY_FLAG     25U         /*!< Timeout 25 ms             */
#define I2C_TIMEOUT_STOP_FLAG     5U          /*!< Timeout 5 ms              */
#define I2C_NO_OPTION_FRAME       0xFFFF0000U /*!< XferOptions default value */

HAL_StatusTypeDef HAL_I2C_Mem_Write_IT_NW(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8011a24:	b480      	push	{r7}
 8011a26:	b087      	sub	sp, #28
 8011a28:	af00      	add	r7, sp, #0
 8011a2a:	60f8      	str	r0, [r7, #12]
 8011a2c:	4608      	mov	r0, r1
 8011a2e:	4611      	mov	r1, r2
 8011a30:	461a      	mov	r2, r3
 8011a32:	4603      	mov	r3, r0
 8011a34:	817b      	strh	r3, [r7, #10]
 8011a36:	460b      	mov	r3, r1
 8011a38:	813b      	strh	r3, [r7, #8]
 8011a3a:	4613      	mov	r3, r2
 8011a3c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8011a3e:	2300      	movs	r3, #0
 8011a40:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8011a42:	68fb      	ldr	r3, [r7, #12]
 8011a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011a48:	b2db      	uxtb	r3, r3
 8011a4a:	2b20      	cmp	r3, #32
 8011a4c:	f040 8083 	bne.w	8011b56 <HAL_I2C_Mem_Write_IT_NW+0x132>
  {
    /* Wait until BUSY flag is reset */
    count = 2; //I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8011a50:	2302      	movs	r3, #2
 8011a52:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8011a54:	697b      	ldr	r3, [r7, #20]
 8011a56:	3b01      	subs	r3, #1
 8011a58:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8011a5a:	697b      	ldr	r3, [r7, #20]
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d116      	bne.n	8011a8e <HAL_I2C_Mem_Write_IT_NW+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8011a60:	68fb      	ldr	r3, [r7, #12]
 8011a62:	2200      	movs	r2, #0
 8011a64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	2220      	movs	r2, #32
 8011a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	2200      	movs	r2, #0
 8011a72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8011a76:	68fb      	ldr	r3, [r7, #12]
 8011a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a7a:	f043 0220 	orr.w	r2, r3, #32
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011a82:	68fb      	ldr	r3, [r7, #12]
 8011a84:	2200      	movs	r2, #0
 8011a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8011a8a:	2301      	movs	r3, #1
 8011a8c:	e064      	b.n	8011b58 <HAL_I2C_Mem_Write_IT_NW+0x134>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8011a8e:	68fb      	ldr	r3, [r7, #12]
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	699b      	ldr	r3, [r3, #24]
 8011a94:	f003 0302 	and.w	r3, r3, #2
 8011a98:	2b02      	cmp	r3, #2
 8011a9a:	d0db      	beq.n	8011a54 <HAL_I2C_Mem_Write_IT_NW+0x30>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011aa2:	2b01      	cmp	r3, #1
 8011aa4:	d101      	bne.n	8011aaa <HAL_I2C_Mem_Write_IT_NW+0x86>
 8011aa6:	2302      	movs	r3, #2
 8011aa8:	e056      	b.n	8011b58 <HAL_I2C_Mem_Write_IT_NW+0x134>
 8011aaa:	68fb      	ldr	r3, [r7, #12]
 8011aac:	2201      	movs	r2, #1
 8011aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8011ab2:	68fb      	ldr	r3, [r7, #12]
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	f003 0301 	and.w	r3, r3, #1
 8011abc:	2b01      	cmp	r3, #1
 8011abe:	d007      	beq.n	8011ad0 <HAL_I2C_Mem_Write_IT_NW+0xac>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	681b      	ldr	r3, [r3, #0]
 8011ac4:	681a      	ldr	r2, [r3, #0]
 8011ac6:	68fb      	ldr	r3, [r7, #12]
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	f042 0201 	orr.w	r2, r2, #1
 8011ace:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8011ad0:	68fb      	ldr	r3, [r7, #12]
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	681a      	ldr	r2, [r3, #0]
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011ade:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8011ae0:	68fb      	ldr	r3, [r7, #12]
 8011ae2:	2221      	movs	r2, #33	; 0x21
 8011ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8011ae8:	68fb      	ldr	r3, [r7, #12]
 8011aea:	2240      	movs	r2, #64	; 0x40
 8011aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	2200      	movs	r2, #0
 8011af4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8011af6:	68fb      	ldr	r3, [r7, #12]
 8011af8:	6a3a      	ldr	r2, [r7, #32]
 8011afa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8011afc:	68fb      	ldr	r3, [r7, #12]
 8011afe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011b00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8011b02:	68fb      	ldr	r3, [r7, #12]
 8011b04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011b06:	b29a      	uxth	r2, r3
 8011b08:	68fb      	ldr	r3, [r7, #12]
 8011b0a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8011b0c:	68fb      	ldr	r3, [r7, #12]
 8011b0e:	4a15      	ldr	r2, [pc, #84]	; (8011b64 <HAL_I2C_Mem_Write_IT_NW+0x140>)
 8011b10:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8011b12:	897a      	ldrh	r2, [r7, #10]
 8011b14:	68fb      	ldr	r3, [r7, #12]
 8011b16:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8011b18:	893a      	ldrh	r2, [r7, #8]
 8011b1a:	68fb      	ldr	r3, [r7, #12]
 8011b1c:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8011b1e:	88fa      	ldrh	r2, [r7, #6]
 8011b20:	68fb      	ldr	r3, [r7, #12]
 8011b22:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	2200      	movs	r2, #0
 8011b28:	651a      	str	r2, [r3, #80]	; 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	681a      	ldr	r2, [r3, #0]
 8011b30:	68fb      	ldr	r3, [r7, #12]
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011b38:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011b3a:	68fb      	ldr	r3, [r7, #12]
 8011b3c:	2200      	movs	r2, #0
 8011b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	681b      	ldr	r3, [r3, #0]
 8011b46:	685a      	ldr	r2, [r3, #4]
 8011b48:	68fb      	ldr	r3, [r7, #12]
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8011b50:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8011b52:	2300      	movs	r3, #0
 8011b54:	e000      	b.n	8011b58 <HAL_I2C_Mem_Write_IT_NW+0x134>
  }
  else
  {
    return HAL_BUSY;
 8011b56:	2302      	movs	r3, #2
  }
}
 8011b58:	4618      	mov	r0, r3
 8011b5a:	371c      	adds	r7, #28
 8011b5c:	46bd      	mov	sp, r7
 8011b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b62:	4770      	bx	lr
 8011b64:	ffff0000 	.word	0xffff0000

08011b68 <_ina3221_configure>:
    return HAL_BUSY;
  }
}

static void _ina3221_configure(int a, int continuous)
{
 8011b68:	b580      	push	{r7, lr}
 8011b6a:	b088      	sub	sp, #32
 8011b6c:	af00      	add	r7, sp, #0
 8011b6e:	6078      	str	r0, [r7, #4]
 8011b70:	6039      	str	r1, [r7, #0]
	//HAL_StatusTypeDef status;
	uint16_t w16;

    _UNUSED_ uint16_t mid = ina3221_read16(a, INA3221_REG_MANUFACTURER_ID);
 8011b72:	21fe      	movs	r1, #254	; 0xfe
 8011b74:	6878      	ldr	r0, [r7, #4]
 8011b76:	f7ff fe71 	bl	801185c <ina3221_read16>
 8011b7a:	4603      	mov	r3, r0
 8011b7c:	83bb      	strh	r3, [r7, #28]
     // 0x5449
    _UNUSED_ uint16_t did = ina3221_read16(a,  INA3221_REG_DIE_ID);
 8011b7e:	21ff      	movs	r1, #255	; 0xff
 8011b80:	6878      	ldr	r0, [r7, #4]
 8011b82:	f7ff fe6b 	bl	801185c <ina3221_read16>
 8011b86:	4603      	mov	r3, r0
 8011b88:	837b      	strh	r3, [r7, #26]
    // 0x3220

    _UNUSED_ uint16_t cnfbr = ina3221_read16(a,  INA3221_REG_CONFIG);
 8011b8a:	2100      	movs	r1, #0
 8011b8c:	6878      	ldr	r0, [r7, #4]
 8011b8e:	f7ff fe65 	bl	801185c <ina3221_read16>
 8011b92:	4603      	mov	r3, r0
 8011b94:	833b      	strh	r3, [r7, #24]

    if ((1)) {
    	w16 = INA3221_CONF_RESET;
 8011b96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011b9a:	83fb      	strh	r3, [r7, #30]
    	int rc = ina3221_write16(a, INA3221_REG_CONFIG, w16);
 8011b9c:	8bfb      	ldrh	r3, [r7, #30]
 8011b9e:	461a      	mov	r2, r3
 8011ba0:	2100      	movs	r1, #0
 8011ba2:	6878      	ldr	r0, [r7, #4]
 8011ba4:	f7ff fe9a 	bl	80118dc <ina3221_write16>
 8011ba8:	6178      	str	r0, [r7, #20]
    	if (rc) {
 8011baa:	697b      	ldr	r3, [r7, #20]
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d003      	beq.n	8011bb8 <_ina3221_configure+0x50>
    		bkpoint(100,rc);
 8011bb0:	6979      	ldr	r1, [r7, #20]
 8011bb2:	2064      	movs	r0, #100	; 0x64
 8011bb4:	f7ff fab2 	bl	801111c <bkpoint>
    	}
    	osDelay(1000);
 8011bb8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8011bbc:	f7fb f926 	bl	800ce0c <osDelay>
    	//if ((1)) return;
    }
    _UNUSED_ uint16_t cnfar = ina3221_read16(a,  INA3221_REG_CONFIG);
 8011bc0:	2100      	movs	r1, #0
 8011bc2:	6878      	ldr	r0, [r7, #4]
 8011bc4:	f7ff fe4a 	bl	801185c <ina3221_read16>
 8011bc8:	4603      	mov	r3, r0
 8011bca:	827b      	strh	r3, [r7, #18]

    w16 = INA3221_CONF_CH1_EN | INA3221_CONF_CH2_EN | INA3221_CONF_CH3_EN
 8011bcc:	f247 0301 	movw	r3, #28673	; 0x7001
 8011bd0:	83fb      	strh	r3, [r7, #30]
    		| INA3221_CONF_VS_CT_140u
			| INA3221_CONF_MODE_SHUNT;
    w16 |= (continuous ? INA3221_CONF_AVG256 : INA3221_CONF_AVG1);
 8011bd2:	683b      	ldr	r3, [r7, #0]
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d002      	beq.n	8011bde <_ina3221_configure+0x76>
 8011bd8:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8011bdc:	e000      	b.n	8011be0 <_ina3221_configure+0x78>
 8011bde:	2200      	movs	r2, #0
 8011be0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011be4:	4313      	orrs	r3, r2
 8011be6:	b21b      	sxth	r3, r3
 8011be8:	83fb      	strh	r3, [r7, #30]

    if (continuous) w16 |= INA3221_CONF_MODE_CONTINUOUS;
 8011bea:	683b      	ldr	r3, [r7, #0]
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d003      	beq.n	8011bf8 <_ina3221_configure+0x90>
 8011bf0:	8bfb      	ldrh	r3, [r7, #30]
 8011bf2:	f043 0304 	orr.w	r3, r3, #4
 8011bf6:	83fb      	strh	r3, [r7, #30]
	ina_conf_val = w16;
 8011bf8:	8bfb      	ldrh	r3, [r7, #30]
 8011bfa:	4a13      	ldr	r2, [pc, #76]	; (8011c48 <_ina3221_configure+0xe0>)
 8011bfc:	6013      	str	r3, [r2, #0]
	int rc = ina3221_write16(a, INA3221_REG_CONFIG, w16);
 8011bfe:	8bfb      	ldrh	r3, [r7, #30]
 8011c00:	461a      	mov	r2, r3
 8011c02:	2100      	movs	r1, #0
 8011c04:	6878      	ldr	r0, [r7, #4]
 8011c06:	f7ff fe69 	bl	80118dc <ina3221_write16>
 8011c0a:	60f8      	str	r0, [r7, #12]
    if ((0)) osDelay(100*1);
    if (rc) bkpoint(101, rc);
 8011c0c:	68fb      	ldr	r3, [r7, #12]
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d003      	beq.n	8011c1a <_ina3221_configure+0xb2>
 8011c12:	68f9      	ldr	r1, [r7, #12]
 8011c14:	2065      	movs	r0, #101	; 0x65
 8011c16:	f7ff fa81 	bl	801111c <bkpoint>
    rc = ina3221_write16(a, INA3221_REG_MASK_ENABLE, 0);
 8011c1a:	2200      	movs	r2, #0
 8011c1c:	210f      	movs	r1, #15
 8011c1e:	6878      	ldr	r0, [r7, #4]
 8011c20:	f7ff fe5c 	bl	80118dc <ina3221_write16>
 8011c24:	60f8      	str	r0, [r7, #12]
    if (rc) bkpoint(102, rc);
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d003      	beq.n	8011c34 <_ina3221_configure+0xcc>
 8011c2c:	68f9      	ldr	r1, [r7, #12]
 8011c2e:	2066      	movs	r0, #102	; 0x66
 8011c30:	f7ff fa74 	bl	801111c <bkpoint>

    _UNUSED_ uint16_t cnfac = ina3221_read16(a,  INA3221_REG_CONFIG);
 8011c34:	2100      	movs	r1, #0
 8011c36:	6878      	ldr	r0, [r7, #4]
 8011c38:	f7ff fe10 	bl	801185c <ina3221_read16>
 8011c3c:	4603      	mov	r3, r0
 8011c3e:	817b      	strh	r3, [r7, #10]
    //if ((0)) ina3221_start_read();

    return;
 8011c40:	bf00      	nop
}
 8011c42:	3720      	adds	r7, #32
 8011c44:	46bd      	mov	sp, r7
 8011c46:	bd80      	pop	{r7, pc}
 8011c48:	20005170 	.word	0x20005170

08011c4c <_ina3221_init>:

void _ina3221_init(int continuous)
{
 8011c4c:	b580      	push	{r7, lr}
 8011c4e:	b086      	sub	sp, #24
 8011c50:	af00      	add	r7, sp, #0
 8011c52:	6078      	str	r0, [r7, #4]
	if (disable_ina3221) return;
 8011c54:	4b1d      	ldr	r3, [pc, #116]	; (8011ccc <_ina3221_init+0x80>)
 8011c56:	781b      	ldrb	r3, [r3, #0]
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d132      	bne.n	8011cc2 <_ina3221_init+0x76>
	//I2C_Scan();
	for (int dev = 0; dev<4; dev++) {
 8011c5c:	2300      	movs	r3, #0
 8011c5e:	617b      	str	r3, [r7, #20]
 8011c60:	e028      	b.n	8011cb4 <_ina3221_init+0x68>
		int addr = 0x40 + dev;
 8011c62:	697b      	ldr	r3, [r7, #20]
 8011c64:	3340      	adds	r3, #64	; 0x40
 8011c66:	613b      	str	r3, [r7, #16]
	    HAL_StatusTypeDef res;
        res = HAL_I2C_IsDeviceReady(&INA3221_I2C_PORT, addr << 1, 1, 10);
 8011c68:	693b      	ldr	r3, [r7, #16]
 8011c6a:	b29b      	uxth	r3, r3
 8011c6c:	005b      	lsls	r3, r3, #1
 8011c6e:	b299      	uxth	r1, r3
 8011c70:	230a      	movs	r3, #10
 8011c72:	2201      	movs	r2, #1
 8011c74:	4816      	ldr	r0, [pc, #88]	; (8011cd0 <_ina3221_init+0x84>)
 8011c76:	f7f1 fff9 	bl	8003c6c <HAL_I2C_IsDeviceReady>
 8011c7a:	4603      	mov	r3, r0
 8011c7c:	73fb      	strb	r3, [r7, #15]
        if (res == HAL_OK) {
 8011c7e:	7bfb      	ldrb	r3, [r7, #15]
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d10f      	bne.n	8011ca4 <_ina3221_init+0x58>
        	_ina3221_configure(addr, continuous);
 8011c84:	6879      	ldr	r1, [r7, #4]
 8011c86:	6938      	ldr	r0, [r7, #16]
 8011c88:	f7ff ff6e 	bl	8011b68 <_ina3221_configure>
        	itm_debug2(DBG_PRES|DBG_INA3221, "INA@", dev, addr);
 8011c8c:	693b      	ldr	r3, [r7, #16]
 8011c8e:	697a      	ldr	r2, [r7, #20]
 8011c90:	4910      	ldr	r1, [pc, #64]	; (8011cd4 <_ina3221_init+0x88>)
 8011c92:	2060      	movs	r0, #96	; 0x60
 8011c94:	f7ff f9ea 	bl	801106c <itm_debug2>
        	ina3221_devices[dev]=1;
 8011c98:	4a0f      	ldr	r2, [pc, #60]	; (8011cd8 <_ina3221_init+0x8c>)
 8011c9a:	697b      	ldr	r3, [r7, #20]
 8011c9c:	4413      	add	r3, r2
 8011c9e:	2201      	movs	r2, #1
 8011ca0:	701a      	strb	r2, [r3, #0]
 8011ca2:	e004      	b.n	8011cae <_ina3221_init+0x62>
        } else {
        	ina3221_devices[dev]=0;
 8011ca4:	4a0c      	ldr	r2, [pc, #48]	; (8011cd8 <_ina3221_init+0x8c>)
 8011ca6:	697b      	ldr	r3, [r7, #20]
 8011ca8:	4413      	add	r3, r2
 8011caa:	2200      	movs	r2, #0
 8011cac:	701a      	strb	r2, [r3, #0]
	for (int dev = 0; dev<4; dev++) {
 8011cae:	697b      	ldr	r3, [r7, #20]
 8011cb0:	3301      	adds	r3, #1
 8011cb2:	617b      	str	r3, [r7, #20]
 8011cb4:	697b      	ldr	r3, [r7, #20]
 8011cb6:	2b03      	cmp	r3, #3
 8011cb8:	ddd3      	ble.n	8011c62 <_ina3221_init+0x16>
        }
	}
	ina3221_init_done = 1;
 8011cba:	4b08      	ldr	r3, [pc, #32]	; (8011cdc <_ina3221_init+0x90>)
 8011cbc:	2201      	movs	r2, #1
 8011cbe:	601a      	str	r2, [r3, #0]
 8011cc0:	e000      	b.n	8011cc4 <_ina3221_init+0x78>
	if (disable_ina3221) return;
 8011cc2:	bf00      	nop
}
 8011cc4:	3718      	adds	r7, #24
 8011cc6:	46bd      	mov	sp, r7
 8011cc8:	bd80      	pop	{r7, pc}
 8011cca:	bf00      	nop
 8011ccc:	2000516a 	.word	0x2000516a
 8011cd0:	20005624 	.word	0x20005624
 8011cd4:	0801943c 	.word	0x0801943c
 8011cd8:	20005164 	.word	0x20005164
 8011cdc:	2000516c 	.word	0x2000516c

08011ce0 <ina3221_init_and_configure>:

static void ina3221_init_and_configure(void)
{
 8011ce0:	b580      	push	{r7, lr}
 8011ce2:	af00      	add	r7, sp, #0
	_ina3221_init(INA3221_CONTIUNOUS);
 8011ce4:	2001      	movs	r0, #1
 8011ce6:	f7ff ffb1 	bl	8011c4c <_ina3221_init>
}
 8011cea:	bf00      	nop
 8011cec:	bd80      	pop	{r7, pc}

08011cee <ina3221_task_start>:

// ----------------------------------------------------------------------------------

void ina3221_task_start(_UNUSED_ void *argument)
{
 8011cee:	b580      	push	{r7, lr}
 8011cf0:	b082      	sub	sp, #8
 8011cf2:	af00      	add	r7, sp, #0
 8011cf4:	6078      	str	r0, [r7, #4]
	if (DISABLE_INA3221) {
		for(;;) {
			osDelay(1);
		}
	}
	run_ina_task();
 8011cf6:	f7ff fa25 	bl	8011144 <run_ina_task>
#else
	for(;;) {
		osDelay(1);
	}
#endif
}
 8011cfa:	bf00      	nop
 8011cfc:	3708      	adds	r7, #8
 8011cfe:	46bd      	mov	sp, r7
 8011d00:	bd80      	pop	{r7, pc}
	...

08011d04 <itm_debug1>:
{
 8011d04:	b580      	push	{r7, lr}
 8011d06:	b086      	sub	sp, #24
 8011d08:	af02      	add	r7, sp, #8
 8011d0a:	60f8      	str	r0, [r7, #12]
 8011d0c:	60b9      	str	r1, [r7, #8]
 8011d0e:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 8011d10:	4b08      	ldr	r3, [pc, #32]	; (8011d34 <itm_debug1+0x30>)
 8011d12:	681a      	ldr	r2, [r3, #0]
 8011d14:	68fb      	ldr	r3, [r7, #12]
 8011d16:	4013      	ands	r3, r2
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d007      	beq.n	8011d2c <itm_debug1+0x28>
 8011d1c:	2301      	movs	r3, #1
 8011d1e:	9300      	str	r3, [sp, #0]
 8011d20:	2300      	movs	r3, #0
 8011d22:	2200      	movs	r2, #0
 8011d24:	6879      	ldr	r1, [r7, #4]
 8011d26:	68b8      	ldr	r0, [r7, #8]
 8011d28:	f006 ffb4 	bl	8018c94 <_itm_debug3>
}
 8011d2c:	bf00      	nop
 8011d2e:	3710      	adds	r7, #16
 8011d30:	46bd      	mov	sp, r7
 8011d32:	bd80      	pop	{r7, pc}
 8011d34:	200005a4 	.word	0x200005a4

08011d38 <ihm_setlayout>:
		CODE_END
};


void ihm_setlayout(int numdisp, int numlayout)
{
 8011d38:	b580      	push	{r7, lr}
 8011d3a:	b084      	sub	sp, #16
 8011d3c:	af00      	add	r7, sp, #0
 8011d3e:	6078      	str	r0, [r7, #4]
 8011d40:	6039      	str	r1, [r7, #0]
	const uint8_t *p = NULL;
 8011d42:	2300      	movs	r3, #0
 8011d44:	60fb      	str	r3, [r7, #12]
	switch (numlayout) {
 8011d46:	683b      	ldr	r3, [r7, #0]
 8011d48:	2b03      	cmp	r3, #3
 8011d4a:	d017      	beq.n	8011d7c <ihm_setlayout+0x44>
 8011d4c:	2b03      	cmp	r3, #3
 8011d4e:	dc06      	bgt.n	8011d5e <ihm_setlayout+0x26>
 8011d50:	2b01      	cmp	r3, #1
 8011d52:	d00d      	beq.n	8011d70 <ihm_setlayout+0x38>
 8011d54:	2b01      	cmp	r3, #1
 8011d56:	dc0e      	bgt.n	8011d76 <ihm_setlayout+0x3e>
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d024      	beq.n	8011da6 <ihm_setlayout+0x6e>
 8011d5c:	e01d      	b.n	8011d9a <ihm_setlayout+0x62>
 8011d5e:	2b05      	cmp	r3, #5
 8011d60:	d018      	beq.n	8011d94 <ihm_setlayout+0x5c>
 8011d62:	2b05      	cmp	r3, #5
 8011d64:	db13      	blt.n	8011d8e <ihm_setlayout+0x56>
 8011d66:	2bc8      	cmp	r3, #200	; 0xc8
 8011d68:	d00b      	beq.n	8011d82 <ihm_setlayout+0x4a>
 8011d6a:	2bc9      	cmp	r3, #201	; 0xc9
 8011d6c:	d00c      	beq.n	8011d88 <ihm_setlayout+0x50>
 8011d6e:	e014      	b.n	8011d9a <ihm_setlayout+0x62>
	case LAYOUT_DEFAULT: // default
		break;
	case LAYOUT_INIT:
		p = layout_init;
 8011d70:	4b12      	ldr	r3, [pc, #72]	; (8011dbc <ihm_setlayout+0x84>)
 8011d72:	60fb      	str	r3, [r7, #12]
		break;
 8011d74:	e018      	b.n	8011da8 <ihm_setlayout+0x70>
	case LAYOUT_MANUAL: // speed mode
		p = layout_manual;
 8011d76:	4b12      	ldr	r3, [pc, #72]	; (8011dc0 <ihm_setlayout+0x88>)
 8011d78:	60fb      	str	r3, [r7, #12]
		break;
 8011d7a:	e015      	b.n	8011da8 <ihm_setlayout+0x70>
	case LAYOUT_AUTO:
		p = layout_auto;
 8011d7c:	4b11      	ldr	r3, [pc, #68]	; (8011dc4 <ihm_setlayout+0x8c>)
 8011d7e:	60fb      	str	r3, [r7, #12]
		break;
 8011d80:	e012      	b.n	8011da8 <ihm_setlayout+0x70>
	case LAYOUT_INA3221_DETECT: // ina3221 I2C detection
		p = layout_ina3221_i2c;
 8011d82:	4b11      	ldr	r3, [pc, #68]	; (8011dc8 <ihm_setlayout+0x90>)
 8011d84:	60fb      	str	r3, [r7, #12]
		break;
 8011d86:	e00f      	b.n	8011da8 <ihm_setlayout+0x70>
	case LAYOUT_INA3221_VAL:
		p = layout_ina3221_val;
 8011d88:	4b10      	ldr	r3, [pc, #64]	; (8011dcc <ihm_setlayout+0x94>)
 8011d8a:	60fb      	str	r3, [r7, #12]
		break;
 8011d8c:	e00c      	b.n	8011da8 <ihm_setlayout+0x70>
	case LAYOUT_OFF:
		p = layout_off;
 8011d8e:	4b10      	ldr	r3, [pc, #64]	; (8011dd0 <ihm_setlayout+0x98>)
 8011d90:	60fb      	str	r3, [r7, #12]
		break;
 8011d92:	e009      	b.n	8011da8 <ihm_setlayout+0x70>
	case LAYOUT_DETECT1:
		p = layout_detect1;
 8011d94:	4b0f      	ldr	r3, [pc, #60]	; (8011dd4 <ihm_setlayout+0x9c>)
 8011d96:	60fb      	str	r3, [r7, #12]
		break;
 8011d98:	e006      	b.n	8011da8 <ihm_setlayout+0x70>
	default:
		itm_debug1(DBG_ERR|DBG_UI, "bad layout", numlayout);
 8011d9a:	683a      	ldr	r2, [r7, #0]
 8011d9c:	490e      	ldr	r1, [pc, #56]	; (8011dd8 <ihm_setlayout+0xa0>)
 8011d9e:	480f      	ldr	r0, [pc, #60]	; (8011ddc <ihm_setlayout+0xa4>)
 8011da0:	f7ff ffb0 	bl	8011d04 <itm_debug1>
		break;
 8011da4:	e000      	b.n	8011da8 <ihm_setlayout+0x70>
		break;
 8011da6:	bf00      	nop
	}
	disp[numdisp] = p;
 8011da8:	490d      	ldr	r1, [pc, #52]	; (8011de0 <ihm_setlayout+0xa8>)
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	68fa      	ldr	r2, [r7, #12]
 8011dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8011db2:	bf00      	nop
 8011db4:	3710      	adds	r7, #16
 8011db6:	46bd      	mov	sp, r7
 8011db8:	bd80      	pop	{r7, pc}
 8011dba:	bf00      	nop
 8011dbc:	0801b7f4 	.word	0x0801b7f4
 8011dc0:	0801b7fc 	.word	0x0801b7fc
 8011dc4:	0801b810 	.word	0x0801b810
 8011dc8:	0801b824 	.word	0x0801b824
 8011dcc:	0801b83c 	.word	0x0801b83c
 8011dd0:	0801b7e4 	.word	0x0801b7e4
 8011dd4:	0801b854 	.word	0x0801b854
 8011dd8:	08019444 	.word	0x08019444
 8011ddc:	80000800 	.word	0x80000800
 8011de0:	200051c0 	.word	0x200051c0

08011de4 <ihm_setvar>:
// ----------------------------------------------------------------

static uint16_t regs[DISP_MAX_REGS][MAX_DISP];

void ihm_setvar(int numdisp, int varnum, uint16_t val)
{
 8011de4:	b480      	push	{r7}
 8011de6:	b085      	sub	sp, #20
 8011de8:	af00      	add	r7, sp, #0
 8011dea:	60f8      	str	r0, [r7, #12]
 8011dec:	60b9      	str	r1, [r7, #8]
 8011dee:	4613      	mov	r3, r2
 8011df0:	80fb      	strh	r3, [r7, #6]
	if (varnum>DISP_MAX_REGS) return;
 8011df2:	68bb      	ldr	r3, [r7, #8]
 8011df4:	2b10      	cmp	r3, #16
 8011df6:	dc0a      	bgt.n	8011e0e <ihm_setvar+0x2a>
	if (numdisp>MAX_DISP) return;
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	2b01      	cmp	r3, #1
 8011dfc:	dc09      	bgt.n	8011e12 <ihm_setvar+0x2e>
	regs[varnum][numdisp] = val;
 8011dfe:	4908      	ldr	r1, [pc, #32]	; (8011e20 <ihm_setvar+0x3c>)
 8011e00:	68ba      	ldr	r2, [r7, #8]
 8011e02:	68fb      	ldr	r3, [r7, #12]
 8011e04:	4413      	add	r3, r2
 8011e06:	88fa      	ldrh	r2, [r7, #6]
 8011e08:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8011e0c:	e002      	b.n	8011e14 <ihm_setvar+0x30>
	if (varnum>DISP_MAX_REGS) return;
 8011e0e:	bf00      	nop
 8011e10:	e000      	b.n	8011e14 <ihm_setvar+0x30>
	if (numdisp>MAX_DISP) return;
 8011e12:	bf00      	nop
}
 8011e14:	3714      	adds	r7, #20
 8011e16:	46bd      	mov	sp, r7
 8011e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e1c:	4770      	bx	lr
 8011e1e:	bf00      	nop
 8011e20:	200051c4 	.word	0x200051c4

08011e24 <ihm_getvar>:
uint16_t ihm_getvar(int numdisp, int varnum)
{
 8011e24:	b480      	push	{r7}
 8011e26:	b083      	sub	sp, #12
 8011e28:	af00      	add	r7, sp, #0
 8011e2a:	6078      	str	r0, [r7, #4]
 8011e2c:	6039      	str	r1, [r7, #0]
	if (varnum>DISP_MAX_REGS) return 0;
 8011e2e:	683b      	ldr	r3, [r7, #0]
 8011e30:	2b10      	cmp	r3, #16
 8011e32:	dd01      	ble.n	8011e38 <ihm_getvar+0x14>
 8011e34:	2300      	movs	r3, #0
 8011e36:	e00a      	b.n	8011e4e <ihm_getvar+0x2a>
	if (numdisp>MAX_DISP) return 0;
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	2b01      	cmp	r3, #1
 8011e3c:	dd01      	ble.n	8011e42 <ihm_getvar+0x1e>
 8011e3e:	2300      	movs	r3, #0
 8011e40:	e005      	b.n	8011e4e <ihm_getvar+0x2a>
	return regs[varnum][numdisp];
 8011e42:	4906      	ldr	r1, [pc, #24]	; (8011e5c <ihm_getvar+0x38>)
 8011e44:	683a      	ldr	r2, [r7, #0]
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	4413      	add	r3, r2
 8011e4a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
}
 8011e4e:	4618      	mov	r0, r3
 8011e50:	370c      	adds	r7, #12
 8011e52:	46bd      	mov	sp, r7
 8011e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e58:	4770      	bx	lr
 8011e5a:	bf00      	nop
 8011e5c:	200051c4 	.word	0x200051c4

08011e60 <disp_layout>:
static void write_snum100(int16_t v, FontDef *curfont);
static void write_bargraph(int16_t v, int16_t min, int16_t max);
static void write_sbargraph(int16_t v, int16_t min, int16_t max);

void disp_layout(int numdisp)
{
 8011e60:	b580      	push	{r7, lr}
 8011e62:	b08c      	sub	sp, #48	; 0x30
 8011e64:	af00      	add	r7, sp, #0
 8011e66:	6078      	str	r0, [r7, #4]
	uint32_t t0 = HAL_GetTick();
 8011e68:	f7ef ffb2 	bl	8001dd0 <HAL_GetTick>
 8011e6c:	61f8      	str	r0, [r7, #28]
	const uint8_t *d = disp[numdisp];
 8011e6e:	4ace      	ldr	r2, [pc, #824]	; (80121a8 <disp_layout+0x348>)
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011e76:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (!d) d = default_layout;
 8011e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d101      	bne.n	8011e82 <disp_layout+0x22>
 8011e7e:	4bcb      	ldr	r3, [pc, #812]	; (80121ac <disp_layout+0x34c>)
 8011e80:	62fb      	str	r3, [r7, #44]	; 0x2c
	ssd1306_Fill(Black);
 8011e82:	2000      	movs	r0, #0
 8011e84:	f7fe fdf0 	bl	8010a68 <ssd1306_Fill>
	ssd1306_SetCursor(0, 0);
 8011e88:	2100      	movs	r1, #0
 8011e8a:	2000      	movs	r0, #0
 8011e8c:	f7fe ffd0 	bl	8010e30 <ssd1306_SetCursor>
	FontDef *curfont = &Font_7x10;
 8011e90:	4bc7      	ldr	r3, [pc, #796]	; (80121b0 <disp_layout+0x350>)
 8011e92:	62bb      	str	r3, [r7, #40]	; 0x28
	int16_t v16s;
	//uint16_t *puval;
	static uint16_t last_dur1=0;
	static uint16_t last_dur2=0;

	for (int i=0; i<MAX_OPCODE_PER_DISPLAY; i++) {
 8011e94:	2300      	movs	r3, #0
 8011e96:	623b      	str	r3, [r7, #32]
 8011e98:	e2a4      	b.n	80123e4 <disp_layout+0x584>
		if (CODE_END == d[i]) break;
 8011e9a:	6a3b      	ldr	r3, [r7, #32]
 8011e9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011e9e:	4413      	add	r3, r2
 8011ea0:	781b      	ldrb	r3, [r3, #0]
 8011ea2:	2bfe      	cmp	r3, #254	; 0xfe
 8011ea4:	f000 82a3 	beq.w	80123ee <disp_layout+0x58e>
		if ((d[i] & 0x80)==0) { // CODE_STR
 8011ea8:	6a3b      	ldr	r3, [r7, #32]
 8011eaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011eac:	4413      	add	r3, r2
 8011eae:	781b      	ldrb	r3, [r3, #0]
 8011eb0:	b25b      	sxtb	r3, r3
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	db10      	blt.n	8011ed8 <disp_layout+0x78>
			const char * stri = ui_strings[d[i]&0x7F];
 8011eb6:	6a3b      	ldr	r3, [r7, #32]
 8011eb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011eba:	4413      	add	r3, r2
 8011ebc:	781b      	ldrb	r3, [r3, #0]
 8011ebe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011ec2:	4abc      	ldr	r2, [pc, #752]	; (80121b4 <disp_layout+0x354>)
 8011ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011ec8:	613b      	str	r3, [r7, #16]
			ssd1306_WriteString(stri, *curfont, White);
 8011eca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011ecc:	2301      	movs	r3, #1
 8011ece:	ca06      	ldmia	r2, {r1, r2}
 8011ed0:	6938      	ldr	r0, [r7, #16]
 8011ed2:	f7fe ff87 	bl	8010de4 <ssd1306_WriteString>
			continue;
 8011ed6:	e282      	b.n	80123de <disp_layout+0x57e>
		}
		switch (d[i]) {
 8011ed8:	6a3b      	ldr	r3, [r7, #32]
 8011eda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011edc:	4413      	add	r3, r2
 8011ede:	781b      	ldrb	r3, [r3, #0]
 8011ee0:	3b80      	subs	r3, #128	; 0x80
 8011ee2:	2b7f      	cmp	r3, #127	; 0x7f
 8011ee4:	f200 826d 	bhi.w	80123c2 <disp_layout+0x562>
 8011ee8:	a201      	add	r2, pc, #4	; (adr r2, 8011ef0 <disp_layout+0x90>)
 8011eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011eee:	bf00      	nop
 8011ef0:	080120f1 	.word	0x080120f1
 8011ef4:	080120ff 	.word	0x080120ff
 8011ef8:	0801210d 	.word	0x0801210d
 8011efc:	0801211b 	.word	0x0801211b
 8011f00:	08012129 	.word	0x08012129
 8011f04:	08012137 	.word	0x08012137
 8011f08:	08012145 	.word	0x08012145
 8011f0c:	08012153 	.word	0x08012153
 8011f10:	08012335 	.word	0x08012335
 8011f14:	080123c3 	.word	0x080123c3
 8011f18:	080123c3 	.word	0x080123c3
 8011f1c:	080123c3 	.word	0x080123c3
 8011f20:	080123c3 	.word	0x080123c3
 8011f24:	080123c3 	.word	0x080123c3
 8011f28:	080123c3 	.word	0x080123c3
 8011f2c:	08012349 	.word	0x08012349
 8011f30:	080123c3 	.word	0x080123c3
 8011f34:	080123c3 	.word	0x080123c3
 8011f38:	080123c3 	.word	0x080123c3
 8011f3c:	080123c3 	.word	0x080123c3
 8011f40:	080123c3 	.word	0x080123c3
 8011f44:	080123c3 	.word	0x080123c3
 8011f48:	080123c3 	.word	0x080123c3
 8011f4c:	080123c3 	.word	0x080123c3
 8011f50:	080123c3 	.word	0x080123c3
 8011f54:	080123c3 	.word	0x080123c3
 8011f58:	080123c3 	.word	0x080123c3
 8011f5c:	080123c3 	.word	0x080123c3
 8011f60:	080123c3 	.word	0x080123c3
 8011f64:	080123c3 	.word	0x080123c3
 8011f68:	080123c3 	.word	0x080123c3
 8011f6c:	080123c3 	.word	0x080123c3
 8011f70:	080123c3 	.word	0x080123c3
 8011f74:	080123c3 	.word	0x080123c3
 8011f78:	080123c3 	.word	0x080123c3
 8011f7c:	080123c3 	.word	0x080123c3
 8011f80:	080123c3 	.word	0x080123c3
 8011f84:	080123c3 	.word	0x080123c3
 8011f88:	080123c3 	.word	0x080123c3
 8011f8c:	080123c3 	.word	0x080123c3
 8011f90:	080123c3 	.word	0x080123c3
 8011f94:	080123c3 	.word	0x080123c3
 8011f98:	080123c3 	.word	0x080123c3
 8011f9c:	080123c3 	.word	0x080123c3
 8011fa0:	080123c3 	.word	0x080123c3
 8011fa4:	080123c3 	.word	0x080123c3
 8011fa8:	080123c3 	.word	0x080123c3
 8011fac:	080123c3 	.word	0x080123c3
 8011fb0:	080123c3 	.word	0x080123c3
 8011fb4:	080123c3 	.word	0x080123c3
 8011fb8:	080123c3 	.word	0x080123c3
 8011fbc:	080123c3 	.word	0x080123c3
 8011fc0:	080123c3 	.word	0x080123c3
 8011fc4:	080123c3 	.word	0x080123c3
 8011fc8:	080123c3 	.word	0x080123c3
 8011fcc:	080123c3 	.word	0x080123c3
 8011fd0:	080123c3 	.word	0x080123c3
 8011fd4:	080123c3 	.word	0x080123c3
 8011fd8:	080123c3 	.word	0x080123c3
 8011fdc:	080123c3 	.word	0x080123c3
 8011fe0:	080123c3 	.word	0x080123c3
 8011fe4:	080123c3 	.word	0x080123c3
 8011fe8:	080123c3 	.word	0x080123c3
 8011fec:	080123c3 	.word	0x080123c3
 8011ff0:	080121c1 	.word	0x080121c1
 8011ff4:	0801236f 	.word	0x0801236f
 8011ff8:	0801226d 	.word	0x0801226d
 8011ffc:	08012293 	.word	0x08012293
 8012000:	080122b9 	.word	0x080122b9
 8012004:	080121f5 	.word	0x080121f5
 8012008:	0801221d 	.word	0x0801221d
 801200c:	08012245 	.word	0x08012245
 8012010:	080122df 	.word	0x080122df
 8012014:	08012309 	.word	0x08012309
 8012018:	08012161 	.word	0x08012161
 801201c:	080123c3 	.word	0x080123c3
 8012020:	080123c3 	.word	0x080123c3
 8012024:	080123c3 	.word	0x080123c3
 8012028:	080123c3 	.word	0x080123c3
 801202c:	080123c3 	.word	0x080123c3
 8012030:	080123c3 	.word	0x080123c3
 8012034:	080123c3 	.word	0x080123c3
 8012038:	080123c3 	.word	0x080123c3
 801203c:	080123c3 	.word	0x080123c3
 8012040:	080123c3 	.word	0x080123c3
 8012044:	080123c3 	.word	0x080123c3
 8012048:	080123c3 	.word	0x080123c3
 801204c:	080123c3 	.word	0x080123c3
 8012050:	080123c3 	.word	0x080123c3
 8012054:	080123c3 	.word	0x080123c3
 8012058:	080123c3 	.word	0x080123c3
 801205c:	080123c3 	.word	0x080123c3
 8012060:	080123c3 	.word	0x080123c3
 8012064:	080123c3 	.word	0x080123c3
 8012068:	080123c3 	.word	0x080123c3
 801206c:	080123c3 	.word	0x080123c3
 8012070:	080123c3 	.word	0x080123c3
 8012074:	080123c3 	.word	0x080123c3
 8012078:	080123c3 	.word	0x080123c3
 801207c:	080123c3 	.word	0x080123c3
 8012080:	080123c3 	.word	0x080123c3
 8012084:	080123c3 	.word	0x080123c3
 8012088:	080123c3 	.word	0x080123c3
 801208c:	080123c3 	.word	0x080123c3
 8012090:	080123c3 	.word	0x080123c3
 8012094:	080123c3 	.word	0x080123c3
 8012098:	080123c3 	.word	0x080123c3
 801209c:	080123c3 	.word	0x080123c3
 80120a0:	080123c3 	.word	0x080123c3
 80120a4:	080123c3 	.word	0x080123c3
 80120a8:	080123c3 	.word	0x080123c3
 80120ac:	080123c3 	.word	0x080123c3
 80120b0:	080123c3 	.word	0x080123c3
 80120b4:	080123c3 	.word	0x080123c3
 80120b8:	080123c3 	.word	0x080123c3
 80120bc:	080123c3 	.word	0x080123c3
 80120c0:	080123c3 	.word	0x080123c3
 80120c4:	080123c3 	.word	0x080123c3
 80120c8:	080123c3 	.word	0x080123c3
 80120cc:	080123c3 	.word	0x080123c3
 80120d0:	080123c3 	.word	0x080123c3
 80120d4:	080123c3 	.word	0x080123c3
 80120d8:	080123c3 	.word	0x080123c3
 80120dc:	080123c3 	.word	0x080123c3
 80120e0:	080123c3 	.word	0x080123c3
 80120e4:	080123c3 	.word	0x080123c3
 80120e8:	080123c3 	.word	0x080123c3
 80120ec:	080123dd 	.word	0x080123dd
		case CODE_NOP: break;
		case CODE_ZONE_STATUS:
			ssd1306_SetCursor(0, 0);
 80120f0:	2100      	movs	r1, #0
 80120f2:	2000      	movs	r0, #0
 80120f4:	f7fe fe9c 	bl	8010e30 <ssd1306_SetCursor>
			curfont = &Font_7x10;
 80120f8:	4b2d      	ldr	r3, [pc, #180]	; (80121b0 <disp_layout+0x350>)
 80120fa:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 80120fc:	e16f      	b.n	80123de <disp_layout+0x57e>
		case CODE_ZONE_MODE:
			ssd1306_SetCursor(RIGHT_X, 0);
 80120fe:	2100      	movs	r1, #0
 8012100:	2040      	movs	r0, #64	; 0x40
 8012102:	f7fe fe95 	bl	8010e30 <ssd1306_SetCursor>
			curfont = &Font_7x10;
 8012106:	4b2a      	ldr	r3, [pc, #168]	; (80121b0 <disp_layout+0x350>)
 8012108:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 801210a:	e168      	b.n	80123de <disp_layout+0x57e>
		case CODE_ZONE_TEXT1:
			ssd1306_SetCursor(0, TEXT_Y);
 801210c:	210c      	movs	r1, #12
 801210e:	2000      	movs	r0, #0
 8012110:	f7fe fe8e 	bl	8010e30 <ssd1306_SetCursor>
			curfont = &Font_11x18;
 8012114:	4b28      	ldr	r3, [pc, #160]	; (80121b8 <disp_layout+0x358>)
 8012116:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 8012118:	e161      	b.n	80123de <disp_layout+0x57e>
		case CODE_ZONE_TEXT2:
			ssd1306_SetCursor(RIGHT_X, TEXT_Y);
 801211a:	210c      	movs	r1, #12
 801211c:	2040      	movs	r0, #64	; 0x40
 801211e:	f7fe fe87 	bl	8010e30 <ssd1306_SetCursor>
			curfont = &Font_11x18;
 8012122:	4b25      	ldr	r3, [pc, #148]	; (80121b8 <disp_layout+0x358>)
 8012124:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 8012126:	e15a      	b.n	80123de <disp_layout+0x57e>
		case CODE_ZONE_TEXT1s:
			ssd1306_SetCursor(0, TEXT_Y);
 8012128:	210c      	movs	r1, #12
 801212a:	2000      	movs	r0, #0
 801212c:	f7fe fe80 	bl	8010e30 <ssd1306_SetCursor>
			curfont = &Font_7x10;
 8012130:	4b1f      	ldr	r3, [pc, #124]	; (80121b0 <disp_layout+0x350>)
 8012132:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 8012134:	e153      	b.n	80123de <disp_layout+0x57e>
		case CODE_ZONE_TEXT2s:
			ssd1306_SetCursor(RIGHT_X, TEXT_Y);
 8012136:	210c      	movs	r1, #12
 8012138:	2040      	movs	r0, #64	; 0x40
 801213a:	f7fe fe79 	bl	8010e30 <ssd1306_SetCursor>
			curfont = &Font_7x10;
 801213e:	4b1c      	ldr	r3, [pc, #112]	; (80121b0 <disp_layout+0x350>)
 8012140:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 8012142:	e14c      	b.n	80123de <disp_layout+0x57e>
		case CODE_ZONE_TEXT3s:
#ifdef SSD1306_INCLUDE_FONT_6x8
			ssd1306_SetCursor(0, TEXT_Y+12);
 8012144:	2118      	movs	r1, #24
 8012146:	2000      	movs	r0, #0
 8012148:	f7fe fe72 	bl	8010e30 <ssd1306_SetCursor>
			curfont = &Font_6x8;
 801214c:	4b1b      	ldr	r3, [pc, #108]	; (80121bc <disp_layout+0x35c>)
 801214e:	62bb      	str	r3, [r7, #40]	; 0x28
#else
			ssd1306_SetCursor(0, TEXT_Y+10);
			curfont = &Font_7x10;
#endif
			break;
 8012150:	e145      	b.n	80123de <disp_layout+0x57e>
		case CODE_ZONE_TEXT4s:
#ifdef SSD1306_INCLUDE_FONT_6x8
			ssd1306_SetCursor(RIGHT_X, TEXT_Y+12);
 8012152:	2118      	movs	r1, #24
 8012154:	2040      	movs	r0, #64	; 0x40
 8012156:	f7fe fe6b 	bl	8010e30 <ssd1306_SetCursor>
			curfont = &Font_6x8;
 801215a:	4b18      	ldr	r3, [pc, #96]	; (80121bc <disp_layout+0x35c>)
 801215c:	62bb      	str	r3, [r7, #40]	; 0x28
#else
			ssd1306_SetCursor(RIGHT_X, TEXT_Y+10);
			curfont = &Font_7x10;
#endif
			break;
 801215e:	e13e      	b.n	80123de <disp_layout+0x57e>
			curfont = &Font_16x26;
			break;
#endif

		case CODE_SPTR:
			i++;
 8012160:	6a3b      	ldr	r3, [r7, #32]
 8012162:	3301      	adds	r3, #1
 8012164:	623b      	str	r3, [r7, #32]
			v16u = (int16_t) _GET_REG(numdisp, d[i]);
 8012166:	6a3b      	ldr	r3, [r7, #32]
 8012168:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801216a:	4413      	add	r3, r2
 801216c:	781b      	ldrb	r3, [r3, #0]
 801216e:	4619      	mov	r1, r3
 8012170:	6878      	ldr	r0, [r7, #4]
 8012172:	f7ff fe57 	bl	8011e24 <ihm_getvar>
 8012176:	4603      	mov	r3, r0
 8012178:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (v16u<10) v16u = 10;
 801217a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801217c:	2b09      	cmp	r3, #9
 801217e:	d801      	bhi.n	8012184 <disp_layout+0x324>
 8012180:	230a      	movs	r3, #10
 8012182:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (v16u>100) v16u = 100;
 8012184:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012186:	2b64      	cmp	r3, #100	; 0x64
 8012188:	d901      	bls.n	801218e <disp_layout+0x32e>
 801218a:	2364      	movs	r3, #100	; 0x64
 801218c:	84fb      	strh	r3, [r7, #38]	; 0x26
			const char * stri = ui_strings[v16u];
 801218e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012190:	4a08      	ldr	r2, [pc, #32]	; (80121b4 <disp_layout+0x354>)
 8012192:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012196:	61bb      	str	r3, [r7, #24]
			ssd1306_WriteString(stri, *curfont, White);
 8012198:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801219a:	2301      	movs	r3, #1
 801219c:	ca06      	ldmia	r2, {r1, r2}
 801219e:	69b8      	ldr	r0, [r7, #24]
 80121a0:	f7fe fe20 	bl	8010de4 <ssd1306_WriteString>
			break;
 80121a4:	e11b      	b.n	80123de <disp_layout+0x57e>
 80121a6:	bf00      	nop
 80121a8:	200051c0 	.word	0x200051c0
 80121ac:	0801b7ec 	.word	0x0801b7ec
 80121b0:	2000018c 	.word	0x2000018c
 80121b4:	200001a0 	.word	0x200001a0
 80121b8:	20000194 	.word	0x20000194
 80121bc:	20000184 	.word	0x20000184
		case CODE_DIGIT:
			i++;
 80121c0:	6a3b      	ldr	r3, [r7, #32]
 80121c2:	3301      	adds	r3, #1
 80121c4:	623b      	str	r3, [r7, #32]
			v16u = (int16_t) _GET_REG(numdisp, d[i]);
 80121c6:	6a3b      	ldr	r3, [r7, #32]
 80121c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80121ca:	4413      	add	r3, r2
 80121cc:	781b      	ldrb	r3, [r3, #0]
 80121ce:	4619      	mov	r1, r3
 80121d0:	6878      	ldr	r0, [r7, #4]
 80121d2:	f7ff fe27 	bl	8011e24 <ihm_getvar>
 80121d6:	4603      	mov	r3, r0
 80121d8:	84fb      	strh	r3, [r7, #38]	; 0x26
			ssd1306_WriteChar('0'+(v16u & 0xF) , *curfont, White);
 80121da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80121dc:	b2db      	uxtb	r3, r3
 80121de:	f003 030f 	and.w	r3, r3, #15
 80121e2:	b2db      	uxtb	r3, r3
 80121e4:	3330      	adds	r3, #48	; 0x30
 80121e6:	b2d8      	uxtb	r0, r3
 80121e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80121ea:	2301      	movs	r3, #1
 80121ec:	ca06      	ldmia	r2, {r1, r2}
 80121ee:	f7fe fd71 	bl	8010cd4 <ssd1306_WriteChar>
			break;
 80121f2:	e0f4      	b.n	80123de <disp_layout+0x57e>
		case CODE_SVAL:
			i++;
 80121f4:	6a3b      	ldr	r3, [r7, #32]
 80121f6:	3301      	adds	r3, #1
 80121f8:	623b      	str	r3, [r7, #32]
			v16s = (int16_t) _GET_REG(numdisp, d[i]);
 80121fa:	6a3b      	ldr	r3, [r7, #32]
 80121fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80121fe:	4413      	add	r3, r2
 8012200:	781b      	ldrb	r3, [r3, #0]
 8012202:	4619      	mov	r1, r3
 8012204:	6878      	ldr	r0, [r7, #4]
 8012206:	f7ff fe0d 	bl	8011e24 <ihm_getvar>
 801220a:	4603      	mov	r3, r0
 801220c:	82fb      	strh	r3, [r7, #22]
			write_snum(v16s, curfont);
 801220e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012212:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012214:	4618      	mov	r0, r3
 8012216:	f000 f9bb 	bl	8012590 <write_snum>
			break;
 801221a:	e0e0      	b.n	80123de <disp_layout+0x57e>
		case CODE_SVAL4:
			i++;
 801221c:	6a3b      	ldr	r3, [r7, #32]
 801221e:	3301      	adds	r3, #1
 8012220:	623b      	str	r3, [r7, #32]
			v16s = (int16_t) _GET_REG(numdisp, d[i]);
 8012222:	6a3b      	ldr	r3, [r7, #32]
 8012224:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012226:	4413      	add	r3, r2
 8012228:	781b      	ldrb	r3, [r3, #0]
 801222a:	4619      	mov	r1, r3
 801222c:	6878      	ldr	r0, [r7, #4]
 801222e:	f7ff fdf9 	bl	8011e24 <ihm_getvar>
 8012232:	4603      	mov	r3, r0
 8012234:	82fb      	strh	r3, [r7, #22]
			write_snum4(v16s, curfont);
 8012236:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801223a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801223c:	4618      	mov	r0, r3
 801223e:	f000 f9e5 	bl	801260c <write_snum4>
			break;
 8012242:	e0cc      	b.n	80123de <disp_layout+0x57e>
		case CODE_SVAL100:
			i++;
 8012244:	6a3b      	ldr	r3, [r7, #32]
 8012246:	3301      	adds	r3, #1
 8012248:	623b      	str	r3, [r7, #32]
			v16s = (int16_t) _GET_REG(numdisp, d[i]);
 801224a:	6a3b      	ldr	r3, [r7, #32]
 801224c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801224e:	4413      	add	r3, r2
 8012250:	781b      	ldrb	r3, [r3, #0]
 8012252:	4619      	mov	r1, r3
 8012254:	6878      	ldr	r0, [r7, #4]
 8012256:	f7ff fde5 	bl	8011e24 <ihm_getvar>
 801225a:	4603      	mov	r3, r0
 801225c:	82fb      	strh	r3, [r7, #22]
			write_snum100(v16s, curfont);
 801225e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012262:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012264:	4618      	mov	r0, r3
 8012266:	f000 fa0b 	bl	8012680 <write_snum100>
			break;
 801226a:	e0b8      	b.n	80123de <disp_layout+0x57e>
		case CODE_UVAL:
			i++;
 801226c:	6a3b      	ldr	r3, [r7, #32]
 801226e:	3301      	adds	r3, #1
 8012270:	623b      	str	r3, [r7, #32]
			v16u = _GET_REG(numdisp, d[i]);
 8012272:	6a3b      	ldr	r3, [r7, #32]
 8012274:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012276:	4413      	add	r3, r2
 8012278:	781b      	ldrb	r3, [r3, #0]
 801227a:	4619      	mov	r1, r3
 801227c:	6878      	ldr	r0, [r7, #4]
 801227e:	f7ff fdd1 	bl	8011e24 <ihm_getvar>
 8012282:	4603      	mov	r3, r0
 8012284:	84fb      	strh	r3, [r7, #38]	; 0x26
			write_unum(v16u, curfont);
 8012286:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012288:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801228a:	4618      	mov	r0, r3
 801228c:	f000 f940 	bl	8012510 <write_unum>
			break;
 8012290:	e0a5      	b.n	80123de <disp_layout+0x57e>
		case CODE_UVAL4:
			i++;
 8012292:	6a3b      	ldr	r3, [r7, #32]
 8012294:	3301      	adds	r3, #1
 8012296:	623b      	str	r3, [r7, #32]
			v16u = _GET_REG(numdisp, d[i]);
 8012298:	6a3b      	ldr	r3, [r7, #32]
 801229a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801229c:	4413      	add	r3, r2
 801229e:	781b      	ldrb	r3, [r3, #0]
 80122a0:	4619      	mov	r1, r3
 80122a2:	6878      	ldr	r0, [r7, #4]
 80122a4:	f7ff fdbe 	bl	8011e24 <ihm_getvar>
 80122a8:	4603      	mov	r3, r0
 80122aa:	84fb      	strh	r3, [r7, #38]	; 0x26
			write_unum4(v16u, curfont);
 80122ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80122ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80122b0:	4618      	mov	r0, r3
 80122b2:	f000 f93d 	bl	8012530 <write_unum4>
			break;
 80122b6:	e092      	b.n	80123de <disp_layout+0x57e>
		case CODE_UVAL100:
			i++;
 80122b8:	6a3b      	ldr	r3, [r7, #32]
 80122ba:	3301      	adds	r3, #1
 80122bc:	623b      	str	r3, [r7, #32]
			v16u = _GET_REG(numdisp, d[i]);
 80122be:	6a3b      	ldr	r3, [r7, #32]
 80122c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80122c2:	4413      	add	r3, r2
 80122c4:	781b      	ldrb	r3, [r3, #0]
 80122c6:	4619      	mov	r1, r3
 80122c8:	6878      	ldr	r0, [r7, #4]
 80122ca:	f7ff fdab 	bl	8011e24 <ihm_getvar>
 80122ce:	4603      	mov	r3, r0
 80122d0:	84fb      	strh	r3, [r7, #38]	; 0x26
			write_unum100(v16u, curfont);
 80122d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80122d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80122d6:	4618      	mov	r0, r3
 80122d8:	f000 f942 	bl	8012560 <write_unum100>
			break;
 80122dc:	e07f      	b.n	80123de <disp_layout+0x57e>
		case CODE_GRAPH_LEVEL:
			i++;
 80122de:	6a3b      	ldr	r3, [r7, #32]
 80122e0:	3301      	adds	r3, #1
 80122e2:	623b      	str	r3, [r7, #32]
			v16u = _GET_REG(numdisp, d[i]);
 80122e4:	6a3b      	ldr	r3, [r7, #32]
 80122e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80122e8:	4413      	add	r3, r2
 80122ea:	781b      	ldrb	r3, [r3, #0]
 80122ec:	4619      	mov	r1, r3
 80122ee:	6878      	ldr	r0, [r7, #4]
 80122f0:	f7ff fd98 	bl	8011e24 <ihm_getvar>
 80122f4:	4603      	mov	r3, r0
 80122f6:	84fb      	strh	r3, [r7, #38]	; 0x26
			write_bargraph(v16u, 0, 100);
 80122f8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80122fc:	2264      	movs	r2, #100	; 0x64
 80122fe:	2100      	movs	r1, #0
 8012300:	4618      	mov	r0, r3
 8012302:	f000 f9f3 	bl	80126ec <write_bargraph>
			break;
 8012306:	e06a      	b.n	80123de <disp_layout+0x57e>
		case CODE_GRAPH_SLEVEL:
			i++;
 8012308:	6a3b      	ldr	r3, [r7, #32]
 801230a:	3301      	adds	r3, #1
 801230c:	623b      	str	r3, [r7, #32]
			v16s = _GET_REG(numdisp, d[i]);
 801230e:	6a3b      	ldr	r3, [r7, #32]
 8012310:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012312:	4413      	add	r3, r2
 8012314:	781b      	ldrb	r3, [r3, #0]
 8012316:	4619      	mov	r1, r3
 8012318:	6878      	ldr	r0, [r7, #4]
 801231a:	f7ff fd83 	bl	8011e24 <ihm_getvar>
 801231e:	4603      	mov	r3, r0
 8012320:	82fb      	strh	r3, [r7, #22]
			write_sbargraph(v16s, -100, 100);
 8012322:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012326:	2264      	movs	r2, #100	; 0x64
 8012328:	f06f 0163 	mvn.w	r1, #99	; 0x63
 801232c:	4618      	mov	r0, r3
 801232e:	f000 fa49 	bl	80127c4 <write_sbargraph>
			break;
 8012332:	e054      	b.n	80123de <disp_layout+0x57e>
		case CODE_TIM4_CNT: {
			extern TIM_HandleTypeDef htim4;
			v16u = htim4.Instance->CNT;
 8012334:	4b3c      	ldr	r3, [pc, #240]	; (8012428 <disp_layout+0x5c8>)
 8012336:	681b      	ldr	r3, [r3, #0]
 8012338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801233a:	84fb      	strh	r3, [r7, #38]	; 0x26
			write_unum(v16u, curfont);
 801233c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801233e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012340:	4618      	mov	r0, r3
 8012342:	f000 f8e5 	bl	8012510 <write_unum>
			break;
 8012346:	e04a      	b.n	80123de <disp_layout+0x57e>
		}
		case CODE_PROFILE:
			write_unum((int16_t)last_dur1, curfont);
 8012348:	4b38      	ldr	r3, [pc, #224]	; (801242c <disp_layout+0x5cc>)
 801234a:	881b      	ldrh	r3, [r3, #0]
 801234c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801234e:	4618      	mov	r0, r3
 8012350:	f000 f8de 	bl	8012510 <write_unum>
			ssd1306_WriteChar('/', *curfont, White);
 8012354:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012356:	2301      	movs	r3, #1
 8012358:	ca06      	ldmia	r2, {r1, r2}
 801235a:	202f      	movs	r0, #47	; 0x2f
 801235c:	f7fe fcba 	bl	8010cd4 <ssd1306_WriteChar>
			write_unum((int16_t)last_dur2, curfont);
 8012360:	4b33      	ldr	r3, [pc, #204]	; (8012430 <disp_layout+0x5d0>)
 8012362:	881b      	ldrh	r3, [r3, #0]
 8012364:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012366:	4618      	mov	r0, r3
 8012368:	f000 f8d2 	bl	8012510 <write_unum>
			break;
 801236c:	e037      	b.n	80123de <disp_layout+0x57e>
		case CODE_DIR:
			i+=1;
 801236e:	6a3b      	ldr	r3, [r7, #32]
 8012370:	3301      	adds	r3, #1
 8012372:	623b      	str	r3, [r7, #32]
			v16s = _GET_REG(numdisp, d[i]);
 8012374:	6a3b      	ldr	r3, [r7, #32]
 8012376:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012378:	4413      	add	r3, r2
 801237a:	781b      	ldrb	r3, [r3, #0]
 801237c:	4619      	mov	r1, r3
 801237e:	6878      	ldr	r0, [r7, #4]
 8012380:	f7ff fd50 	bl	8011e24 <ihm_getvar>
 8012384:	4603      	mov	r3, r0
 8012386:	82fb      	strh	r3, [r7, #22]
			if (v16s > 0) ssd1306_WriteChar('>', *curfont, White);
 8012388:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801238c:	2b00      	cmp	r3, #0
 801238e:	dd06      	ble.n	801239e <disp_layout+0x53e>
 8012390:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012392:	2301      	movs	r3, #1
 8012394:	ca06      	ldmia	r2, {r1, r2}
 8012396:	203e      	movs	r0, #62	; 0x3e
 8012398:	f7fe fc9c 	bl	8010cd4 <ssd1306_WriteChar>
			else if (v16s < 0) ssd1306_WriteChar('<', *curfont, White);
			else ssd1306_WriteChar('|', *curfont, White);
			break;
 801239c:	e01f      	b.n	80123de <disp_layout+0x57e>
			else if (v16s < 0) ssd1306_WriteChar('<', *curfont, White);
 801239e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	da06      	bge.n	80123b4 <disp_layout+0x554>
 80123a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80123a8:	2301      	movs	r3, #1
 80123aa:	ca06      	ldmia	r2, {r1, r2}
 80123ac:	203c      	movs	r0, #60	; 0x3c
 80123ae:	f7fe fc91 	bl	8010cd4 <ssd1306_WriteChar>
			break;
 80123b2:	e014      	b.n	80123de <disp_layout+0x57e>
			else ssd1306_WriteChar('|', *curfont, White);
 80123b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80123b6:	2301      	movs	r3, #1
 80123b8:	ca06      	ldmia	r2, {r1, r2}
 80123ba:	207c      	movs	r0, #124	; 0x7c
 80123bc:	f7fe fc8a 	bl	8010cd4 <ssd1306_WriteChar>
			break;
 80123c0:	e00d      	b.n	80123de <disp_layout+0x57e>


		default:
			switch (d[i] & 0xC0) {
 80123c2:	6a3b      	ldr	r3, [r7, #32]
 80123c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80123c6:	4413      	add	r3, r2
 80123c8:	781b      	ldrb	r3, [r3, #0]
 80123ca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80123ce:	2bc0      	cmp	r3, #192	; 0xc0
 80123d0:	d000      	beq.n	80123d4 <disp_layout+0x574>
			default:
			case 0x80: break;
 80123d2:	e004      	b.n	80123de <disp_layout+0x57e>
			case 0xC0: i++; break;
 80123d4:	6a3b      	ldr	r3, [r7, #32]
 80123d6:	3301      	adds	r3, #1
 80123d8:	623b      	str	r3, [r7, #32]
 80123da:	e000      	b.n	80123de <disp_layout+0x57e>
		case CODE_NOP: break;
 80123dc:	bf00      	nop
	for (int i=0; i<MAX_OPCODE_PER_DISPLAY; i++) {
 80123de:	6a3b      	ldr	r3, [r7, #32]
 80123e0:	3301      	adds	r3, #1
 80123e2:	623b      	str	r3, [r7, #32]
 80123e4:	6a3b      	ldr	r3, [r7, #32]
 80123e6:	2b17      	cmp	r3, #23
 80123e8:	f77f ad57 	ble.w	8011e9a <disp_layout+0x3a>
 80123ec:	e000      	b.n	80123f0 <disp_layout+0x590>
		if (CODE_END == d[i]) break;
 80123ee:	bf00      	nop
			//case 0xB0: i+=2; break;
			//case 0xD0: i+=4; break;
			}
		}
	}
	uint32_t t1 = HAL_GetTick();
 80123f0:	f7ef fcee 	bl	8001dd0 <HAL_GetTick>
 80123f4:	60f8      	str	r0, [r7, #12]
	ssd1306_UpdateScreen();
 80123f6:	f7fe fbe7 	bl	8010bc8 <ssd1306_UpdateScreen>
	uint32_t t2 = HAL_GetTick();
 80123fa:	f7ef fce9 	bl	8001dd0 <HAL_GetTick>
 80123fe:	60b8      	str	r0, [r7, #8]
	last_dur1 = t2-t0;
 8012400:	68bb      	ldr	r3, [r7, #8]
 8012402:	b29a      	uxth	r2, r3
 8012404:	69fb      	ldr	r3, [r7, #28]
 8012406:	b29b      	uxth	r3, r3
 8012408:	1ad3      	subs	r3, r2, r3
 801240a:	b29a      	uxth	r2, r3
 801240c:	4b07      	ldr	r3, [pc, #28]	; (801242c <disp_layout+0x5cc>)
 801240e:	801a      	strh	r2, [r3, #0]
	last_dur2 = t2-t1;
 8012410:	68bb      	ldr	r3, [r7, #8]
 8012412:	b29a      	uxth	r2, r3
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	b29b      	uxth	r3, r3
 8012418:	1ad3      	subs	r3, r2, r3
 801241a:	b29a      	uxth	r2, r3
 801241c:	4b04      	ldr	r3, [pc, #16]	; (8012430 <disp_layout+0x5d0>)
 801241e:	801a      	strh	r2, [r3, #0]
}
 8012420:	bf00      	nop
 8012422:	3730      	adds	r7, #48	; 0x30
 8012424:	46bd      	mov	sp, r7
 8012426:	bd80      	pop	{r7, pc}
 8012428:	20005d4c 	.word	0x20005d4c
 801242c:	200051e4 	.word	0x200051e4
 8012430:	200051e6 	.word	0x200051e6

08012434 <_write_unum>:
	}
}
*/

static void _write_unum(uint16_t v, FontDef *curfont, uint8_t hzero, uint8_t fp100)
{
 8012434:	b580      	push	{r7, lr}
 8012436:	b086      	sub	sp, #24
 8012438:	af00      	add	r7, sp, #0
 801243a:	6039      	str	r1, [r7, #0]
 801243c:	4611      	mov	r1, r2
 801243e:	461a      	mov	r2, r3
 8012440:	4603      	mov	r3, r0
 8012442:	80fb      	strh	r3, [r7, #6]
 8012444:	460b      	mov	r3, r1
 8012446:	717b      	strb	r3, [r7, #5]
 8012448:	4613      	mov	r3, r2
 801244a:	713b      	strb	r3, [r7, #4]
	int f = 0;
 801244c:	2300      	movs	r3, #0
 801244e:	617b      	str	r3, [r7, #20]
	int ns = 1000;
 8012450:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012454:	613b      	str	r3, [r7, #16]
	if (fp100) {
 8012456:	793b      	ldrb	r3, [r7, #4]
 8012458:	2b00      	cmp	r3, #0
 801245a:	d003      	beq.n	8012464 <_write_unum+0x30>
		ns = 100;
 801245c:	2364      	movs	r3, #100	; 0x64
 801245e:	613b      	str	r3, [r7, #16]
		hzero = 1;
 8012460:	2301      	movs	r3, #1
 8012462:	717b      	strb	r3, [r7, #5]
	}
	for (int i=ns;i>0; i = i /10) {
 8012464:	693b      	ldr	r3, [r7, #16]
 8012466:	60fb      	str	r3, [r7, #12]
 8012468:	e048      	b.n	80124fc <_write_unum+0xc8>
		int n = v/i;
 801246a:	88fa      	ldrh	r2, [r7, #6]
 801246c:	68fb      	ldr	r3, [r7, #12]
 801246e:	fb92 f3f3 	sdiv	r3, r2, r3
 8012472:	60bb      	str	r3, [r7, #8]
		if (!n && !f && (i>1)) {
 8012474:	68bb      	ldr	r3, [r7, #8]
 8012476:	2b00      	cmp	r3, #0
 8012478:	d112      	bne.n	80124a0 <_write_unum+0x6c>
 801247a:	697b      	ldr	r3, [r7, #20]
 801247c:	2b00      	cmp	r3, #0
 801247e:	d10f      	bne.n	80124a0 <_write_unum+0x6c>
 8012480:	68fb      	ldr	r3, [r7, #12]
 8012482:	2b01      	cmp	r3, #1
 8012484:	dd0c      	ble.n	80124a0 <_write_unum+0x6c>
			if (!hzero) continue;
 8012486:	797b      	ldrb	r3, [r7, #5]
 8012488:	2b00      	cmp	r3, #0
 801248a:	d02e      	beq.n	80124ea <_write_unum+0xb6>
			if (hzero == ' ') {
 801248c:	797b      	ldrb	r3, [r7, #5]
 801248e:	2b20      	cmp	r3, #32
 8012490:	d106      	bne.n	80124a0 <_write_unum+0x6c>
				ssd1306_WriteChar(' ', *curfont, White);
 8012492:	683a      	ldr	r2, [r7, #0]
 8012494:	2301      	movs	r3, #1
 8012496:	ca06      	ldmia	r2, {r1, r2}
 8012498:	2020      	movs	r0, #32
 801249a:	f7fe fc1b 	bl	8010cd4 <ssd1306_WriteChar>
				continue;
 801249e:	e025      	b.n	80124ec <_write_unum+0xb8>
			}
		}
		ssd1306_WriteChar(n+'0', *curfont, White);
 80124a0:	68bb      	ldr	r3, [r7, #8]
 80124a2:	b2db      	uxtb	r3, r3
 80124a4:	3330      	adds	r3, #48	; 0x30
 80124a6:	b2d8      	uxtb	r0, r3
 80124a8:	683a      	ldr	r2, [r7, #0]
 80124aa:	2301      	movs	r3, #1
 80124ac:	ca06      	ldmia	r2, {r1, r2}
 80124ae:	f7fe fc11 	bl	8010cd4 <ssd1306_WriteChar>
		if ((f==0) && fp100) {
 80124b2:	697b      	ldr	r3, [r7, #20]
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d10a      	bne.n	80124ce <_write_unum+0x9a>
 80124b8:	793b      	ldrb	r3, [r7, #4]
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d007      	beq.n	80124ce <_write_unum+0x9a>
			ssd1306_WriteChar(',', *curfont, White);
 80124be:	683a      	ldr	r2, [r7, #0]
 80124c0:	2301      	movs	r3, #1
 80124c2:	ca06      	ldmia	r2, {r1, r2}
 80124c4:	202c      	movs	r0, #44	; 0x2c
 80124c6:	f7fe fc05 	bl	8010cd4 <ssd1306_WriteChar>
			hzero = 1;
 80124ca:	2301      	movs	r3, #1
 80124cc:	717b      	strb	r3, [r7, #5]
		}
		f++;
 80124ce:	697b      	ldr	r3, [r7, #20]
 80124d0:	3301      	adds	r3, #1
 80124d2:	617b      	str	r3, [r7, #20]
		v = v - i*n;
 80124d4:	68fb      	ldr	r3, [r7, #12]
 80124d6:	b29a      	uxth	r2, r3
 80124d8:	68bb      	ldr	r3, [r7, #8]
 80124da:	b29b      	uxth	r3, r3
 80124dc:	fb12 f303 	smulbb	r3, r2, r3
 80124e0:	b29b      	uxth	r3, r3
 80124e2:	88fa      	ldrh	r2, [r7, #6]
 80124e4:	1ad3      	subs	r3, r2, r3
 80124e6:	80fb      	strh	r3, [r7, #6]
 80124e8:	e000      	b.n	80124ec <_write_unum+0xb8>
			if (!hzero) continue;
 80124ea:	bf00      	nop
	for (int i=ns;i>0; i = i /10) {
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	4a07      	ldr	r2, [pc, #28]	; (801250c <_write_unum+0xd8>)
 80124f0:	fb82 1203 	smull	r1, r2, r2, r3
 80124f4:	1092      	asrs	r2, r2, #2
 80124f6:	17db      	asrs	r3, r3, #31
 80124f8:	1ad3      	subs	r3, r2, r3
 80124fa:	60fb      	str	r3, [r7, #12]
 80124fc:	68fb      	ldr	r3, [r7, #12]
 80124fe:	2b00      	cmp	r3, #0
 8012500:	dcb3      	bgt.n	801246a <_write_unum+0x36>
	}
}
 8012502:	bf00      	nop
 8012504:	3718      	adds	r7, #24
 8012506:	46bd      	mov	sp, r7
 8012508:	bd80      	pop	{r7, pc}
 801250a:	bf00      	nop
 801250c:	66666667 	.word	0x66666667

08012510 <write_unum>:
static void write_unum(uint16_t v, FontDef *curfont)
{
 8012510:	b580      	push	{r7, lr}
 8012512:	b082      	sub	sp, #8
 8012514:	af00      	add	r7, sp, #0
 8012516:	4603      	mov	r3, r0
 8012518:	6039      	str	r1, [r7, #0]
 801251a:	80fb      	strh	r3, [r7, #6]
	_write_unum(v, curfont, 0, 0);
 801251c:	88f8      	ldrh	r0, [r7, #6]
 801251e:	2300      	movs	r3, #0
 8012520:	2200      	movs	r2, #0
 8012522:	6839      	ldr	r1, [r7, #0]
 8012524:	f7ff ff86 	bl	8012434 <_write_unum>
}
 8012528:	bf00      	nop
 801252a:	3708      	adds	r7, #8
 801252c:	46bd      	mov	sp, r7
 801252e:	bd80      	pop	{r7, pc}

08012530 <write_unum4>:
static void write_unum4(uint16_t v, FontDef *curfont)
{
 8012530:	b580      	push	{r7, lr}
 8012532:	b082      	sub	sp, #8
 8012534:	af00      	add	r7, sp, #0
 8012536:	4603      	mov	r3, r0
 8012538:	6039      	str	r1, [r7, #0]
 801253a:	80fb      	strh	r3, [r7, #6]
	if (v>9999) v=9999;
 801253c:	88fb      	ldrh	r3, [r7, #6]
 801253e:	f242 720f 	movw	r2, #9999	; 0x270f
 8012542:	4293      	cmp	r3, r2
 8012544:	d902      	bls.n	801254c <write_unum4+0x1c>
 8012546:	f242 730f 	movw	r3, #9999	; 0x270f
 801254a:	80fb      	strh	r3, [r7, #6]
	_write_unum(v, curfont, 1, 0);
 801254c:	88f8      	ldrh	r0, [r7, #6]
 801254e:	2300      	movs	r3, #0
 8012550:	2201      	movs	r2, #1
 8012552:	6839      	ldr	r1, [r7, #0]
 8012554:	f7ff ff6e 	bl	8012434 <_write_unum>
}
 8012558:	bf00      	nop
 801255a:	3708      	adds	r7, #8
 801255c:	46bd      	mov	sp, r7
 801255e:	bd80      	pop	{r7, pc}

08012560 <write_unum100>:
static void write_unum100(uint16_t v, FontDef *curfont)
{
 8012560:	b580      	push	{r7, lr}
 8012562:	b082      	sub	sp, #8
 8012564:	af00      	add	r7, sp, #0
 8012566:	4603      	mov	r3, r0
 8012568:	6039      	str	r1, [r7, #0]
 801256a:	80fb      	strh	r3, [r7, #6]
	if (v>999) v=999;
 801256c:	88fb      	ldrh	r3, [r7, #6]
 801256e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012572:	d302      	bcc.n	801257a <write_unum100+0x1a>
 8012574:	f240 33e7 	movw	r3, #999	; 0x3e7
 8012578:	80fb      	strh	r3, [r7, #6]
	_write_unum(v, curfont, 1, 1);
 801257a:	88f8      	ldrh	r0, [r7, #6]
 801257c:	2301      	movs	r3, #1
 801257e:	2201      	movs	r2, #1
 8012580:	6839      	ldr	r1, [r7, #0]
 8012582:	f7ff ff57 	bl	8012434 <_write_unum>
}
 8012586:	bf00      	nop
 8012588:	3708      	adds	r7, #8
 801258a:	46bd      	mov	sp, r7
 801258c:	bd80      	pop	{r7, pc}
	...

08012590 <write_snum>:
static void write_snum(int16_t v, FontDef *curfont)
{
 8012590:	b580      	push	{r7, lr}
 8012592:	b082      	sub	sp, #8
 8012594:	af00      	add	r7, sp, #0
 8012596:	4603      	mov	r3, r0
 8012598:	6039      	str	r1, [r7, #0]
 801259a:	80fb      	strh	r3, [r7, #6]
	if ((v<-5000)||(v>5000)) {
 801259c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80125a0:	4a17      	ldr	r2, [pc, #92]	; (8012600 <write_snum+0x70>)
 80125a2:	4293      	cmp	r3, r2
 80125a4:	db05      	blt.n	80125b2 <write_snum+0x22>
 80125a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80125aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80125ae:	4293      	cmp	r3, r2
 80125b0:	dd06      	ble.n	80125c0 <write_snum+0x30>
		itm_debug1(DBG_UI|DBG_ERR, "strange here", v);
 80125b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80125b6:	461a      	mov	r2, r3
 80125b8:	4912      	ldr	r1, [pc, #72]	; (8012604 <write_snum+0x74>)
 80125ba:	4813      	ldr	r0, [pc, #76]	; (8012608 <write_snum+0x78>)
 80125bc:	f7ff fba2 	bl	8011d04 <itm_debug1>
	}
	if (v < 0) {
 80125c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	da06      	bge.n	80125d6 <write_snum+0x46>
		ssd1306_WriteChar('-', *curfont, White);
 80125c8:	683a      	ldr	r2, [r7, #0]
 80125ca:	2301      	movs	r3, #1
 80125cc:	ca06      	ldmia	r2, {r1, r2}
 80125ce:	202d      	movs	r0, #45	; 0x2d
 80125d0:	f7fe fb80 	bl	8010cd4 <ssd1306_WriteChar>
 80125d4:	e005      	b.n	80125e2 <write_snum+0x52>
	} else {
		ssd1306_WriteChar('+', *curfont, White);
 80125d6:	683a      	ldr	r2, [r7, #0]
 80125d8:	2301      	movs	r3, #1
 80125da:	ca06      	ldmia	r2, {r1, r2}
 80125dc:	202b      	movs	r0, #43	; 0x2b
 80125de:	f7fe fb79 	bl	8010cd4 <ssd1306_WriteChar>
	}
	write_unum(abs(v), curfont);
 80125e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	bfb8      	it	lt
 80125ea:	425b      	neglt	r3, r3
 80125ec:	b29b      	uxth	r3, r3
 80125ee:	6839      	ldr	r1, [r7, #0]
 80125f0:	4618      	mov	r0, r3
 80125f2:	f7ff ff8d 	bl	8012510 <write_unum>
}
 80125f6:	bf00      	nop
 80125f8:	3708      	adds	r7, #8
 80125fa:	46bd      	mov	sp, r7
 80125fc:	bd80      	pop	{r7, pc}
 80125fe:	bf00      	nop
 8012600:	ffffec78 	.word	0xffffec78
 8012604:	08019504 	.word	0x08019504
 8012608:	80000800 	.word	0x80000800

0801260c <write_snum4>:

static void write_snum4(int16_t v, FontDef *curfont)
{
 801260c:	b580      	push	{r7, lr}
 801260e:	b082      	sub	sp, #8
 8012610:	af00      	add	r7, sp, #0
 8012612:	4603      	mov	r3, r0
 8012614:	6039      	str	r1, [r7, #0]
 8012616:	80fb      	strh	r3, [r7, #6]
	if (v<-9999) v=-9999;
 8012618:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801261c:	4a17      	ldr	r2, [pc, #92]	; (801267c <write_snum4+0x70>)
 801261e:	4293      	cmp	r3, r2
 8012620:	da02      	bge.n	8012628 <write_snum4+0x1c>
 8012622:	f64d 03f1 	movw	r3, #55537	; 0xd8f1
 8012626:	80fb      	strh	r3, [r7, #6]
	if (v>9999) v=9999;
 8012628:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801262c:	f242 720f 	movw	r2, #9999	; 0x270f
 8012630:	4293      	cmp	r3, r2
 8012632:	dd02      	ble.n	801263a <write_snum4+0x2e>
 8012634:	f242 730f 	movw	r3, #9999	; 0x270f
 8012638:	80fb      	strh	r3, [r7, #6]
	if (v < 0) {
 801263a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801263e:	2b00      	cmp	r3, #0
 8012640:	da06      	bge.n	8012650 <write_snum4+0x44>
		ssd1306_WriteChar('-', *curfont, White);
 8012642:	683a      	ldr	r2, [r7, #0]
 8012644:	2301      	movs	r3, #1
 8012646:	ca06      	ldmia	r2, {r1, r2}
 8012648:	202d      	movs	r0, #45	; 0x2d
 801264a:	f7fe fb43 	bl	8010cd4 <ssd1306_WriteChar>
 801264e:	e005      	b.n	801265c <write_snum4+0x50>
	} else {
		ssd1306_WriteChar('+', *curfont, White);
 8012650:	683a      	ldr	r2, [r7, #0]
 8012652:	2301      	movs	r3, #1
 8012654:	ca06      	ldmia	r2, {r1, r2}
 8012656:	202b      	movs	r0, #43	; 0x2b
 8012658:	f7fe fb3c 	bl	8010cd4 <ssd1306_WriteChar>
	}
	_write_unum(abs(v), curfont, 1, 0);
 801265c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012660:	2b00      	cmp	r3, #0
 8012662:	bfb8      	it	lt
 8012664:	425b      	neglt	r3, r3
 8012666:	b298      	uxth	r0, r3
 8012668:	2300      	movs	r3, #0
 801266a:	2201      	movs	r2, #1
 801266c:	6839      	ldr	r1, [r7, #0]
 801266e:	f7ff fee1 	bl	8012434 <_write_unum>
}
 8012672:	bf00      	nop
 8012674:	3708      	adds	r7, #8
 8012676:	46bd      	mov	sp, r7
 8012678:	bd80      	pop	{r7, pc}
 801267a:	bf00      	nop
 801267c:	ffffd8f1 	.word	0xffffd8f1

08012680 <write_snum100>:

static void write_snum100(int16_t v, FontDef *curfont)
{
 8012680:	b580      	push	{r7, lr}
 8012682:	b082      	sub	sp, #8
 8012684:	af00      	add	r7, sp, #0
 8012686:	4603      	mov	r3, r0
 8012688:	6039      	str	r1, [r7, #0]
 801268a:	80fb      	strh	r3, [r7, #6]
	if (v<-999) v=-999;
 801268c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012690:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8012694:	dc02      	bgt.n	801269c <write_snum100+0x1c>
 8012696:	f64f 4319 	movw	r3, #64537	; 0xfc19
 801269a:	80fb      	strh	r3, [r7, #6]
	if (v>999) v=999;
 801269c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80126a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80126a4:	db02      	blt.n	80126ac <write_snum100+0x2c>
 80126a6:	f240 33e7 	movw	r3, #999	; 0x3e7
 80126aa:	80fb      	strh	r3, [r7, #6]
	if (v < 0) {
 80126ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	da06      	bge.n	80126c2 <write_snum100+0x42>
		ssd1306_WriteChar('-', *curfont, White);
 80126b4:	683a      	ldr	r2, [r7, #0]
 80126b6:	2301      	movs	r3, #1
 80126b8:	ca06      	ldmia	r2, {r1, r2}
 80126ba:	202d      	movs	r0, #45	; 0x2d
 80126bc:	f7fe fb0a 	bl	8010cd4 <ssd1306_WriteChar>
 80126c0:	e005      	b.n	80126ce <write_snum100+0x4e>
	} else {
		ssd1306_WriteChar('+', *curfont, White);
 80126c2:	683a      	ldr	r2, [r7, #0]
 80126c4:	2301      	movs	r3, #1
 80126c6:	ca06      	ldmia	r2, {r1, r2}
 80126c8:	202b      	movs	r0, #43	; 0x2b
 80126ca:	f7fe fb03 	bl	8010cd4 <ssd1306_WriteChar>
	}
	_write_unum(abs(v), curfont, 1, 1);
 80126ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	bfb8      	it	lt
 80126d6:	425b      	neglt	r3, r3
 80126d8:	b298      	uxth	r0, r3
 80126da:	2301      	movs	r3, #1
 80126dc:	2201      	movs	r2, #1
 80126de:	6839      	ldr	r1, [r7, #0]
 80126e0:	f7ff fea8 	bl	8012434 <_write_unum>
}
 80126e4:	bf00      	nop
 80126e6:	3708      	adds	r7, #8
 80126e8:	46bd      	mov	sp, r7
 80126ea:	bd80      	pop	{r7, pc}

080126ec <write_bargraph>:

static void write_bargraph(int16_t v, int16_t min, int16_t max)
{
 80126ec:	b590      	push	{r4, r7, lr}
 80126ee:	b087      	sub	sp, #28
 80126f0:	af02      	add	r7, sp, #8
 80126f2:	4603      	mov	r3, r0
 80126f4:	80fb      	strh	r3, [r7, #6]
 80126f6:	460b      	mov	r3, r1
 80126f8:	80bb      	strh	r3, [r7, #4]
 80126fa:	4613      	mov	r3, r2
 80126fc:	807b      	strh	r3, [r7, #2]
	uint8_t x0 = ssd1306_GetCursorX();
 80126fe:	f7fe fbaf 	bl	8010e60 <ssd1306_GetCursorX>
 8012702:	4603      	mov	r3, r0
 8012704:	73fb      	strb	r3, [r7, #15]
	uint8_t y0 = ssd1306_GetCursorY();
 8012706:	f7fe fbb7 	bl	8010e78 <ssd1306_GetCursorY>
 801270a:	4603      	mov	r3, r0
 801270c:	73bb      	strb	r3, [r7, #14]
	const uint8_t w = 50;
 801270e:	2332      	movs	r3, #50	; 0x32
 8012710:	737b      	strb	r3, [r7, #13]
	const uint8_t h = 11; //y0+=3;
 8012712:	230b      	movs	r3, #11
 8012714:	733b      	strb	r3, [r7, #12]
	ssd1306_DrawRectangle(x0, y0, x0+w, y0+h, White);
 8012716:	7bfa      	ldrb	r2, [r7, #15]
 8012718:	7b7b      	ldrb	r3, [r7, #13]
 801271a:	4413      	add	r3, r2
 801271c:	b2dc      	uxtb	r4, r3
 801271e:	7bba      	ldrb	r2, [r7, #14]
 8012720:	7b3b      	ldrb	r3, [r7, #12]
 8012722:	4413      	add	r3, r2
 8012724:	b2da      	uxtb	r2, r3
 8012726:	7bb9      	ldrb	r1, [r7, #14]
 8012728:	7bf8      	ldrb	r0, [r7, #15]
 801272a:	2301      	movs	r3, #1
 801272c:	9300      	str	r3, [sp, #0]
 801272e:	4613      	mov	r3, r2
 8012730:	4622      	mov	r2, r4
 8012732:	f7fe fc19 	bl	8010f68 <ssd1306_DrawRectangle>

	if (v>max) v=max;
 8012736:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801273a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801273e:	429a      	cmp	r2, r3
 8012740:	dd01      	ble.n	8012746 <write_bargraph+0x5a>
 8012742:	887b      	ldrh	r3, [r7, #2]
 8012744:	80fb      	strh	r3, [r7, #6]
	if (v<min) v=min;
 8012746:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801274a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801274e:	429a      	cmp	r2, r3
 8012750:	da01      	bge.n	8012756 <write_bargraph+0x6a>
 8012752:	88bb      	ldrh	r3, [r7, #4]
 8012754:	80fb      	strh	r3, [r7, #6]
	int l = ((int)w*(v-min))/(max-min);
 8012756:	7b7b      	ldrb	r3, [r7, #13]
 8012758:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 801275c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8012760:	1a8a      	subs	r2, r1, r2
 8012762:	fb02 f203 	mul.w	r2, r2, r3
 8012766:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 801276a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801276e:	1acb      	subs	r3, r1, r3
 8012770:	fb92 f3f3 	sdiv	r3, r2, r3
 8012774:	60bb      	str	r3, [r7, #8]
	if (l>0) ssd1306_FillZone(x0, y0, l, h, White);
 8012776:	68bb      	ldr	r3, [r7, #8]
 8012778:	2b00      	cmp	r3, #0
 801277a:	dd09      	ble.n	8012790 <write_bargraph+0xa4>
 801277c:	68bb      	ldr	r3, [r7, #8]
 801277e:	b2da      	uxtb	r2, r3
 8012780:	7b3c      	ldrb	r4, [r7, #12]
 8012782:	7bb9      	ldrb	r1, [r7, #14]
 8012784:	7bf8      	ldrb	r0, [r7, #15]
 8012786:	2301      	movs	r3, #1
 8012788:	9300      	str	r3, [sp, #0]
 801278a:	4623      	mov	r3, r4
 801278c:	f7fe f98e 	bl	8010aac <ssd1306_FillZone>
	if ((min<0) && (max>0)) {
 8012790:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012794:	2b00      	cmp	r3, #0
 8012796:	da11      	bge.n	80127bc <write_bargraph+0xd0>
 8012798:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801279c:	2b00      	cmp	r3, #0
 801279e:	dd0d      	ble.n	80127bc <write_bargraph+0xd0>
		l = ((int)w*(0-min))/(max-min);
 80127a0:	7b7b      	ldrb	r3, [r7, #13]
 80127a2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80127a6:	4252      	negs	r2, r2
 80127a8:	fb02 f203 	mul.w	r2, r2, r3
 80127ac:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80127b0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80127b4:	1acb      	subs	r3, r1, r3
 80127b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80127ba:	60bb      	str	r3, [r7, #8]
		/// TODO ?
	}
}
 80127bc:	bf00      	nop
 80127be:	3714      	adds	r7, #20
 80127c0:	46bd      	mov	sp, r7
 80127c2:	bd90      	pop	{r4, r7, pc}

080127c4 <write_sbargraph>:



static void write_sbargraph(int16_t v, int16_t min, int16_t max)
{
 80127c4:	b590      	push	{r4, r7, lr}
 80127c6:	b089      	sub	sp, #36	; 0x24
 80127c8:	af02      	add	r7, sp, #8
 80127ca:	4603      	mov	r3, r0
 80127cc:	80fb      	strh	r3, [r7, #6]
 80127ce:	460b      	mov	r3, r1
 80127d0:	80bb      	strh	r3, [r7, #4]
 80127d2:	4613      	mov	r3, r2
 80127d4:	807b      	strh	r3, [r7, #2]
	uint8_t x0 = ssd1306_GetCursorX();
 80127d6:	f7fe fb43 	bl	8010e60 <ssd1306_GetCursorX>
 80127da:	4603      	mov	r3, r0
 80127dc:	75fb      	strb	r3, [r7, #23]
	uint8_t y0 = ssd1306_GetCursorY();
 80127de:	f7fe fb4b 	bl	8010e78 <ssd1306_GetCursorY>
 80127e2:	4603      	mov	r3, r0
 80127e4:	75bb      	strb	r3, [r7, #22]
	const uint8_t w = 50;
 80127e6:	2332      	movs	r3, #50	; 0x32
 80127e8:	757b      	strb	r3, [r7, #21]
	const uint8_t h = 11; //y0+=3;
 80127ea:	230b      	movs	r3, #11
 80127ec:	753b      	strb	r3, [r7, #20]
	ssd1306_DrawRectangle(x0, y0, x0+w, y0+h, White);
 80127ee:	7dfa      	ldrb	r2, [r7, #23]
 80127f0:	7d7b      	ldrb	r3, [r7, #21]
 80127f2:	4413      	add	r3, r2
 80127f4:	b2dc      	uxtb	r4, r3
 80127f6:	7dba      	ldrb	r2, [r7, #22]
 80127f8:	7d3b      	ldrb	r3, [r7, #20]
 80127fa:	4413      	add	r3, r2
 80127fc:	b2da      	uxtb	r2, r3
 80127fe:	7db9      	ldrb	r1, [r7, #22]
 8012800:	7df8      	ldrb	r0, [r7, #23]
 8012802:	2301      	movs	r3, #1
 8012804:	9300      	str	r3, [sp, #0]
 8012806:	4613      	mov	r3, r2
 8012808:	4622      	mov	r2, r4
 801280a:	f7fe fbad 	bl	8010f68 <ssd1306_DrawRectangle>

	if (v>max) v=max;
 801280e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012812:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012816:	429a      	cmp	r2, r3
 8012818:	dd01      	ble.n	801281e <write_sbargraph+0x5a>
 801281a:	887b      	ldrh	r3, [r7, #2]
 801281c:	80fb      	strh	r3, [r7, #6]
	if (v<min) v=min;
 801281e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012822:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012826:	429a      	cmp	r2, r3
 8012828:	da01      	bge.n	801282e <write_sbargraph+0x6a>
 801282a:	88bb      	ldrh	r3, [r7, #4]
 801282c:	80fb      	strh	r3, [r7, #6]
	int m = ((int)w*(0-min))/(max-min);
 801282e:	7d7b      	ldrb	r3, [r7, #21]
 8012830:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8012834:	4252      	negs	r2, r2
 8012836:	fb02 f203 	mul.w	r2, r2, r3
 801283a:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 801283e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012842:	1acb      	subs	r3, r1, r3
 8012844:	fb92 f3f3 	sdiv	r3, r2, r3
 8012848:	613b      	str	r3, [r7, #16]
	int l = ((int)w*(v-min))/(max-min);
 801284a:	7d7b      	ldrb	r3, [r7, #21]
 801284c:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8012850:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8012854:	1a8a      	subs	r2, r1, r2
 8012856:	fb02 f203 	mul.w	r2, r2, r3
 801285a:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 801285e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012862:	1acb      	subs	r3, r1, r3
 8012864:	fb92 f3f3 	sdiv	r3, r2, r3
 8012868:	60fb      	str	r3, [r7, #12]
	if (l>m) ssd1306_FillZone(x0+m, y0, l-m, h, White);
 801286a:	68fa      	ldr	r2, [r7, #12]
 801286c:	693b      	ldr	r3, [r7, #16]
 801286e:	429a      	cmp	r2, r3
 8012870:	dd12      	ble.n	8012898 <write_sbargraph+0xd4>
 8012872:	693b      	ldr	r3, [r7, #16]
 8012874:	b2da      	uxtb	r2, r3
 8012876:	7dfb      	ldrb	r3, [r7, #23]
 8012878:	4413      	add	r3, r2
 801287a:	b2d8      	uxtb	r0, r3
 801287c:	68fb      	ldr	r3, [r7, #12]
 801287e:	b2da      	uxtb	r2, r3
 8012880:	693b      	ldr	r3, [r7, #16]
 8012882:	b2db      	uxtb	r3, r3
 8012884:	1ad3      	subs	r3, r2, r3
 8012886:	b2da      	uxtb	r2, r3
 8012888:	7d3c      	ldrb	r4, [r7, #20]
 801288a:	7db9      	ldrb	r1, [r7, #22]
 801288c:	2301      	movs	r3, #1
 801288e:	9300      	str	r3, [sp, #0]
 8012890:	4623      	mov	r3, r4
 8012892:	f7fe f90b 	bl	8010aac <ssd1306_FillZone>
 8012896:	e011      	b.n	80128bc <write_sbargraph+0xf8>
	else ssd1306_FillZone(x0+l, y0, m-l, h, White);
 8012898:	68fb      	ldr	r3, [r7, #12]
 801289a:	b2da      	uxtb	r2, r3
 801289c:	7dfb      	ldrb	r3, [r7, #23]
 801289e:	4413      	add	r3, r2
 80128a0:	b2d8      	uxtb	r0, r3
 80128a2:	693b      	ldr	r3, [r7, #16]
 80128a4:	b2da      	uxtb	r2, r3
 80128a6:	68fb      	ldr	r3, [r7, #12]
 80128a8:	b2db      	uxtb	r3, r3
 80128aa:	1ad3      	subs	r3, r2, r3
 80128ac:	b2da      	uxtb	r2, r3
 80128ae:	7d3c      	ldrb	r4, [r7, #20]
 80128b0:	7db9      	ldrb	r1, [r7, #22]
 80128b2:	2301      	movs	r3, #1
 80128b4:	9300      	str	r3, [sp, #0]
 80128b6:	4623      	mov	r3, r4
 80128b8:	f7fe f8f8 	bl	8010aac <ssd1306_FillZone>
	ssd1306_Line(x0+m, y0-1, x0+m, y0+h+2, White);
 80128bc:	693b      	ldr	r3, [r7, #16]
 80128be:	b2da      	uxtb	r2, r3
 80128c0:	7dfb      	ldrb	r3, [r7, #23]
 80128c2:	4413      	add	r3, r2
 80128c4:	b2d8      	uxtb	r0, r3
 80128c6:	7dbb      	ldrb	r3, [r7, #22]
 80128c8:	3b01      	subs	r3, #1
 80128ca:	b2d9      	uxtb	r1, r3
 80128cc:	693b      	ldr	r3, [r7, #16]
 80128ce:	b2da      	uxtb	r2, r3
 80128d0:	7dfb      	ldrb	r3, [r7, #23]
 80128d2:	4413      	add	r3, r2
 80128d4:	b2dc      	uxtb	r4, r3
 80128d6:	7dba      	ldrb	r2, [r7, #22]
 80128d8:	7d3b      	ldrb	r3, [r7, #20]
 80128da:	4413      	add	r3, r2
 80128dc:	b2db      	uxtb	r3, r3
 80128de:	3302      	adds	r3, #2
 80128e0:	b2da      	uxtb	r2, r3
 80128e2:	2301      	movs	r3, #1
 80128e4:	9300      	str	r3, [sp, #0]
 80128e6:	4613      	mov	r3, r2
 80128e8:	4622      	mov	r2, r4
 80128ea:	f7fe fad1 	bl	8010e90 <ssd1306_Line>
	if ((min<0) && (max>0)) {
 80128ee:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	da11      	bge.n	801291a <write_sbargraph+0x156>
 80128f6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	dd0d      	ble.n	801291a <write_sbargraph+0x156>
		l = ((int)w*(0-min))/(max-min);
 80128fe:	7d7b      	ldrb	r3, [r7, #21]
 8012900:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8012904:	4252      	negs	r2, r2
 8012906:	fb02 f203 	mul.w	r2, r2, r3
 801290a:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 801290e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012912:	1acb      	subs	r3, r1, r3
 8012914:	fb92 f3f3 	sdiv	r3, r2, r3
 8012918:	60fb      	str	r3, [r7, #12]
		/// TODO
	}
}
 801291a:	bf00      	nop
 801291c:	371c      	adds	r7, #28
 801291e:	46bd      	mov	sp, r7
 8012920:	bd90      	pop	{r4, r7, pc}
	...

08012924 <itm_debug1>:
{
 8012924:	b580      	push	{r7, lr}
 8012926:	b086      	sub	sp, #24
 8012928:	af02      	add	r7, sp, #8
 801292a:	60f8      	str	r0, [r7, #12]
 801292c:	60b9      	str	r1, [r7, #8]
 801292e:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 8012930:	4b08      	ldr	r3, [pc, #32]	; (8012954 <itm_debug1+0x30>)
 8012932:	681a      	ldr	r2, [r3, #0]
 8012934:	68fb      	ldr	r3, [r7, #12]
 8012936:	4013      	ands	r3, r2
 8012938:	2b00      	cmp	r3, #0
 801293a:	d007      	beq.n	801294c <itm_debug1+0x28>
 801293c:	2301      	movs	r3, #1
 801293e:	9300      	str	r3, [sp, #0]
 8012940:	2300      	movs	r3, #0
 8012942:	2200      	movs	r2, #0
 8012944:	6879      	ldr	r1, [r7, #4]
 8012946:	68b8      	ldr	r0, [r7, #8]
 8012948:	f006 f9a4 	bl	8018c94 <_itm_debug3>
}
 801294c:	bf00      	nop
 801294e:	3710      	adds	r7, #16
 8012950:	46bd      	mov	sp, r7
 8012952:	bd80      	pop	{r7, pc}
 8012954:	200005a4 	.word	0x200005a4

08012958 <itm_debug2>:
{
 8012958:	b580      	push	{r7, lr}
 801295a:	b086      	sub	sp, #24
 801295c:	af02      	add	r7, sp, #8
 801295e:	60f8      	str	r0, [r7, #12]
 8012960:	60b9      	str	r1, [r7, #8]
 8012962:	607a      	str	r2, [r7, #4]
 8012964:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, 0, 2);
 8012966:	4b09      	ldr	r3, [pc, #36]	; (801298c <itm_debug2+0x34>)
 8012968:	681a      	ldr	r2, [r3, #0]
 801296a:	68fb      	ldr	r3, [r7, #12]
 801296c:	4013      	ands	r3, r2
 801296e:	2b00      	cmp	r3, #0
 8012970:	d007      	beq.n	8012982 <itm_debug2+0x2a>
 8012972:	2302      	movs	r3, #2
 8012974:	9300      	str	r3, [sp, #0]
 8012976:	2300      	movs	r3, #0
 8012978:	683a      	ldr	r2, [r7, #0]
 801297a:	6879      	ldr	r1, [r7, #4]
 801297c:	68b8      	ldr	r0, [r7, #8]
 801297e:	f006 f989 	bl	8018c94 <_itm_debug3>
}
 8012982:	bf00      	nop
 8012984:	3710      	adds	r7, #16
 8012986:	46bd      	mov	sp, r7
 8012988:	bd80      	pop	{r7, pc}
 801298a:	bf00      	nop
 801298c:	200005a4 	.word	0x200005a4

08012990 <mqf_read_to_ui>:

LFMQUEUE_DEF_H(to_forward_usb, msg_64_t)
LFMQUEUE_DEF_H(from_forward_usb, msg_64_t)


LFMQUEUE_DEF_H(to_ui, msg_64_t)
 8012990:	b580      	push	{r7, lr}
 8012992:	b082      	sub	sp, #8
 8012994:	af00      	add	r7, sp, #0
 8012996:	6078      	str	r0, [r7, #4]
 8012998:	6879      	ldr	r1, [r7, #4]
 801299a:	4804      	ldr	r0, [pc, #16]	; (80129ac <mqf_read_to_ui+0x1c>)
 801299c:	f006 fafa 	bl	8018f94 <mqf_read>
 80129a0:	4603      	mov	r3, r0
 80129a2:	4618      	mov	r0, r3
 80129a4:	3708      	adds	r7, #8
 80129a6:	46bd      	mov	sp, r7
 80129a8:	bd80      	pop	{r7, pc}
 80129aa:	bf00      	nop
 80129ac:	20000560 	.word	0x20000560

080129b0 <mqf_write_from_ui>:
LFMQUEUE_DEF_H(from_ui, msg_64_t)
 80129b0:	b580      	push	{r7, lr}
 80129b2:	b082      	sub	sp, #8
 80129b4:	af00      	add	r7, sp, #0
 80129b6:	6078      	str	r0, [r7, #4]
 80129b8:	6879      	ldr	r1, [r7, #4]
 80129ba:	4804      	ldr	r0, [pc, #16]	; (80129cc <mqf_write_from_ui+0x1c>)
 80129bc:	f006 fa70 	bl	8018ea0 <mqf_write>
 80129c0:	4603      	mov	r3, r0
 80129c2:	4618      	mov	r0, r3
 80129c4:	3708      	adds	r7, #8
 80129c6:	46bd      	mov	sp, r7
 80129c8:	bd80      	pop	{r7, pc}
 80129ca:	bf00      	nop
 80129cc:	2000056c 	.word	0x2000056c

080129d0 <get_rotary>:
#define ENC_DIV2	 	0
#define ENC_MAX ((100<<ENC_DIV2)>>ENC_MUL2)
#define MIDDLE_ZERO 4

_UNUSED_ static uint16_t get_rotary(TIM_HandleTypeDef *ptdef)
{
 80129d0:	b480      	push	{r7}
 80129d2:	b085      	sub	sp, #20
 80129d4:	af00      	add	r7, sp, #0
 80129d6:	6078      	str	r0, [r7, #4]
	uint16_t p = __HAL_TIM_GET_COUNTER(ptdef);
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	681b      	ldr	r3, [r3, #0]
 80129dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129de:	81fb      	strh	r3, [r7, #14]
	if (p>0x7FFF) {
 80129e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	da06      	bge.n	80129f6 <get_rotary+0x26>
		p = 0;
 80129e8:	2300      	movs	r3, #0
 80129ea:	81fb      	strh	r3, [r7, #14]
		__HAL_TIM_SET_COUNTER(ptdef, p);
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	681b      	ldr	r3, [r3, #0]
 80129f0:	89fa      	ldrh	r2, [r7, #14]
 80129f2:	625a      	str	r2, [r3, #36]	; 0x24
 80129f4:	e008      	b.n	8012a08 <get_rotary+0x38>
	} else if (p>=ENC_MAX) {
 80129f6:	89fb      	ldrh	r3, [r7, #14]
 80129f8:	2b31      	cmp	r3, #49	; 0x31
 80129fa:	d905      	bls.n	8012a08 <get_rotary+0x38>
		p=ENC_MAX;
 80129fc:	2332      	movs	r3, #50	; 0x32
 80129fe:	81fb      	strh	r3, [r7, #14]
		__HAL_TIM_SET_COUNTER(ptdef, p);
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	681b      	ldr	r3, [r3, #0]
 8012a04:	89fa      	ldrh	r2, [r7, #14]
 8012a06:	625a      	str	r2, [r3, #36]	; 0x24
	}
	return ((p<<ENC_MUL2)>>ENC_DIV2);//>>1;
 8012a08:	89fb      	ldrh	r3, [r7, #14]
 8012a0a:	005b      	lsls	r3, r3, #1
 8012a0c:	b29b      	uxth	r3, r3
}
 8012a0e:	4618      	mov	r0, r3
 8012a10:	3714      	adds	r7, #20
 8012a12:	46bd      	mov	sp, r7
 8012a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a18:	4770      	bx	lr

08012a1a <get_srotary>:


static int16_t get_srotary(TIM_HandleTypeDef *ptdef)
{
 8012a1a:	b480      	push	{r7}
 8012a1c:	b085      	sub	sp, #20
 8012a1e:	af00      	add	r7, sp, #0
 8012a20:	6078      	str	r0, [r7, #4]
	int16_t p = __HAL_TIM_GET_COUNTER(ptdef);
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	681b      	ldr	r3, [r3, #0]
 8012a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a28:	81fb      	strh	r3, [r7, #14]
	if (p<-ENC_MAX-MIDDLE_ZERO) {
 8012a2a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012a2e:	f113 0f36 	cmn.w	r3, #54	; 0x36
 8012a32:	da08      	bge.n	8012a46 <get_srotary+0x2c>
		p = -ENC_MAX-MIDDLE_ZERO;
 8012a34:	f64f 73ca 	movw	r3, #65482	; 0xffca
 8012a38:	81fb      	strh	r3, [r7, #14]
		__HAL_TIM_SET_COUNTER(ptdef, p);
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	681b      	ldr	r3, [r3, #0]
 8012a3e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8012a42:	625a      	str	r2, [r3, #36]	; 0x24
 8012a44:	e00a      	b.n	8012a5c <get_srotary+0x42>
	} else if (p>=ENC_MAX+MIDDLE_ZERO) {
 8012a46:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012a4a:	2b35      	cmp	r3, #53	; 0x35
 8012a4c:	dd06      	ble.n	8012a5c <get_srotary+0x42>
		p=ENC_MAX+MIDDLE_ZERO;
 8012a4e:	2336      	movs	r3, #54	; 0x36
 8012a50:	81fb      	strh	r3, [r7, #14]
		__HAL_TIM_SET_COUNTER(ptdef, p);
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	681b      	ldr	r3, [r3, #0]
 8012a56:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8012a5a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	if (abs(p)<MIDDLE_ZERO) p=0;
 8012a5c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012a60:	f113 0f03 	cmn.w	r3, #3
 8012a64:	db06      	blt.n	8012a74 <get_srotary+0x5a>
 8012a66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012a6a:	2b03      	cmp	r3, #3
 8012a6c:	dc02      	bgt.n	8012a74 <get_srotary+0x5a>
 8012a6e:	2300      	movs	r3, #0
 8012a70:	81fb      	strh	r3, [r7, #14]
 8012a72:	e00c      	b.n	8012a8e <get_srotary+0x74>
	else if (p>0) p=p-MIDDLE_ZERO;
 8012a74:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	dd04      	ble.n	8012a86 <get_srotary+0x6c>
 8012a7c:	89fb      	ldrh	r3, [r7, #14]
 8012a7e:	3b04      	subs	r3, #4
 8012a80:	b29b      	uxth	r3, r3
 8012a82:	81fb      	strh	r3, [r7, #14]
 8012a84:	e003      	b.n	8012a8e <get_srotary+0x74>
	else p=p+MIDDLE_ZERO;
 8012a86:	89fb      	ldrh	r3, [r7, #14]
 8012a88:	3304      	adds	r3, #4
 8012a8a:	b29b      	uxth	r3, r3
 8012a8c:	81fb      	strh	r3, [r7, #14]
	return ((p<<ENC_MUL2)>>ENC_DIV2);//>>1;
 8012a8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012a92:	005b      	lsls	r3, r3, #1
 8012a94:	b21b      	sxth	r3, r3
}
 8012a96:	4618      	mov	r0, r3
 8012a98:	3714      	adds	r7, #20
 8012a9a:	46bd      	mov	sp, r7
 8012a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aa0:	4770      	bx	lr
	...

08012aa4 <ihm_runtick>:
static void ihm_runtick_testcanton(int);
static void ihm_runtick_detect(int);
static void ihm_runtick_detect1(int);

void ihm_runtick(void)
{
 8012aa4:	b580      	push	{r7, lr}
 8012aa6:	b082      	sub	sp, #8
 8012aa8:	af00      	add	r7, sp, #0
	static int performInit = 1;
	runmode_t orm = run_mode;
 8012aaa:	4b24      	ldr	r3, [pc, #144]	; (8012b3c <ihm_runtick+0x98>)
 8012aac:	781b      	ldrb	r3, [r3, #0]
 8012aae:	71fb      	strb	r3, [r7, #7]
	switch (run_mode) {
 8012ab0:	4b22      	ldr	r3, [pc, #136]	; (8012b3c <ihm_runtick+0x98>)
 8012ab2:	781b      	ldrb	r3, [r3, #0]
 8012ab4:	2b04      	cmp	r3, #4
 8012ab6:	d82b      	bhi.n	8012b10 <ihm_runtick+0x6c>
 8012ab8:	a201      	add	r2, pc, #4	; (adr r2, 8012ac0 <ihm_runtick+0x1c>)
 8012aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012abe:	bf00      	nop
 8012ac0:	08012ae1 	.word	0x08012ae1
 8012ac4:	08012ad5 	.word	0x08012ad5
 8012ac8:	08012aed 	.word	0x08012aed
 8012acc:	08012af9 	.word	0x08012af9
 8012ad0:	08012b05 	.word	0x08012b05
	case runmode_normal:	ihm_runtick_normal(performInit); 	break;
 8012ad4:	4b1a      	ldr	r3, [pc, #104]	; (8012b40 <ihm_runtick+0x9c>)
 8012ad6:	681b      	ldr	r3, [r3, #0]
 8012ad8:	4618      	mov	r0, r3
 8012ada:	f000 f8a3 	bl	8012c24 <ihm_runtick_normal>
 8012ade:	e01d      	b.n	8012b1c <ihm_runtick+0x78>
	case runmode_off:		ihm_runtick_off(performInit); 		break;
 8012ae0:	4b17      	ldr	r3, [pc, #92]	; (8012b40 <ihm_runtick+0x9c>)
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	4618      	mov	r0, r3
 8012ae6:	f000 fad7 	bl	8013098 <ihm_runtick_off>
 8012aea:	e017      	b.n	8012b1c <ihm_runtick+0x78>
	case runmode_testcanton:ihm_runtick_testcanton(performInit); break;
 8012aec:	4b14      	ldr	r3, [pc, #80]	; (8012b40 <ihm_runtick+0x9c>)
 8012aee:	681b      	ldr	r3, [r3, #0]
 8012af0:	4618      	mov	r0, r3
 8012af2:	f000 fb1b 	bl	801312c <ihm_runtick_testcanton>
 8012af6:	e011      	b.n	8012b1c <ihm_runtick+0x78>
	case runmode_detect1:	ihm_runtick_detect1(performInit);	break;
 8012af8:	4b11      	ldr	r3, [pc, #68]	; (8012b40 <ihm_runtick+0x9c>)
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	4618      	mov	r0, r3
 8012afe:	f000 fb21 	bl	8013144 <ihm_runtick_detect1>
 8012b02:	e00b      	b.n	8012b1c <ihm_runtick+0x78>
	case runmode_detect:	ihm_runtick_detect(performInit);	break;
 8012b04:	4b0e      	ldr	r3, [pc, #56]	; (8012b40 <ihm_runtick+0x9c>)
 8012b06:	681b      	ldr	r3, [r3, #0]
 8012b08:	4618      	mov	r0, r3
 8012b0a:	f000 fc19 	bl	8013340 <ihm_runtick_detect>
 8012b0e:	e005      	b.n	8012b1c <ihm_runtick+0x78>
	default:				ihm_runtick_off(performInit);		break;
 8012b10:	4b0b      	ldr	r3, [pc, #44]	; (8012b40 <ihm_runtick+0x9c>)
 8012b12:	681b      	ldr	r3, [r3, #0]
 8012b14:	4618      	mov	r0, r3
 8012b16:	f000 fabf 	bl	8013098 <ihm_runtick_off>
 8012b1a:	bf00      	nop
	}
	performInit = (run_mode == orm) ? 0 : 1;
 8012b1c:	4b07      	ldr	r3, [pc, #28]	; (8012b3c <ihm_runtick+0x98>)
 8012b1e:	781b      	ldrb	r3, [r3, #0]
 8012b20:	79fa      	ldrb	r2, [r7, #7]
 8012b22:	429a      	cmp	r2, r3
 8012b24:	bf14      	ite	ne
 8012b26:	2301      	movne	r3, #1
 8012b28:	2300      	moveq	r3, #0
 8012b2a:	b2db      	uxtb	r3, r3
 8012b2c:	461a      	mov	r2, r3
 8012b2e:	4b04      	ldr	r3, [pc, #16]	; (8012b40 <ihm_runtick+0x9c>)
 8012b30:	601a      	str	r2, [r3, #0]
}
 8012b32:	bf00      	nop
 8012b34:	3708      	adds	r7, #8
 8012b36:	46bd      	mov	sp, r7
 8012b38:	bd80      	pop	{r7, pc}
 8012b3a:	bf00      	nop
 8012b3c:	200051e9 	.word	0x200051e9
 8012b40:	20000228 	.word	0x20000228

08012b44 <set_displayout>:
// TODO : change this for per display struct
static ihm_mode_t ihm_dispmode = mode_init;
//static int ihm_train = 0;

static void set_displayout(void)
{
 8012b44:	b580      	push	{r7, lr}
 8012b46:	af00      	add	r7, sp, #0
	switch (ihm_dispmode) {
 8012b48:	4b18      	ldr	r3, [pc, #96]	; (8012bac <set_displayout+0x68>)
 8012b4a:	781b      	ldrb	r3, [r3, #0]
 8012b4c:	3b01      	subs	r3, #1
 8012b4e:	2b03      	cmp	r3, #3
 8012b50:	d80a      	bhi.n	8012b68 <set_displayout+0x24>
 8012b52:	a201      	add	r2, pc, #4	; (adr r2, 8012b58 <set_displayout+0x14>)
 8012b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b58:	08012b73 	.word	0x08012b73
 8012b5c:	08012b7d 	.word	0x08012b7d
 8012b60:	08012b87 	.word	0x08012b87
 8012b64:	08012b91 	.word	0x08012b91
	default:
	case mode_init: 	  	ihm_setlayout(0, LAYOUT_INIT); break;
 8012b68:	2101      	movs	r1, #1
 8012b6a:	2000      	movs	r0, #0
 8012b6c:	f7ff f8e4 	bl	8011d38 <ihm_setlayout>
 8012b70:	e013      	b.n	8012b9a <set_displayout+0x56>
	case mode_ina_detect:	ihm_setlayout(0, LAYOUT_INA3221_DETECT); break;
 8012b72:	21c8      	movs	r1, #200	; 0xc8
 8012b74:	2000      	movs	r0, #0
 8012b76:	f7ff f8df 	bl	8011d38 <ihm_setlayout>
 8012b7a:	e00e      	b.n	8012b9a <set_displayout+0x56>
	case mode_ina_val:		ihm_setlayout(0, LAYOUT_INA3221_VAL); break;
 8012b7c:	21c9      	movs	r1, #201	; 0xc9
 8012b7e:	2000      	movs	r0, #0
 8012b80:	f7ff f8da 	bl	8011d38 <ihm_setlayout>
 8012b84:	e009      	b.n	8012b9a <set_displayout+0x56>

	case mode_manual:		ihm_setlayout(0, LAYOUT_MANUAL); break;
 8012b86:	2102      	movs	r1, #2
 8012b88:	2000      	movs	r0, #0
 8012b8a:	f7ff f8d5 	bl	8011d38 <ihm_setlayout>
 8012b8e:	e004      	b.n	8012b9a <set_displayout+0x56>
	case mode_auto: 		ihm_setlayout(0, LAYOUT_AUTO); break;
 8012b90:	2103      	movs	r1, #3
 8012b92:	2000      	movs	r0, #0
 8012b94:	f7ff f8d0 	bl	8011d38 <ihm_setlayout>
 8012b98:	bf00      	nop
	}
	SET_NEEDSREFRESH(0);
 8012b9a:	4b05      	ldr	r3, [pc, #20]	; (8012bb0 <set_displayout+0x6c>)
 8012b9c:	781b      	ldrb	r3, [r3, #0]
 8012b9e:	f043 0301 	orr.w	r3, r3, #1
 8012ba2:	b2da      	uxtb	r2, r3
 8012ba4:	4b02      	ldr	r3, [pc, #8]	; (8012bb0 <set_displayout+0x6c>)
 8012ba6:	701a      	strb	r2, [r3, #0]
}
 8012ba8:	bf00      	nop
 8012baa:	bd80      	pop	{r7, pc}
 8012bac:	200051ea 	.word	0x200051ea
 8012bb0:	200051e8 	.word	0x200051e8

08012bb4 <is_special_dispmode>:

static int is_special_dispmode(void)
{
 8012bb4:	b480      	push	{r7}
 8012bb6:	af00      	add	r7, sp, #0
	switch (ihm_dispmode) {
 8012bb8:	4b0e      	ldr	r3, [pc, #56]	; (8012bf4 <is_special_dispmode+0x40>)
 8012bba:	781b      	ldrb	r3, [r3, #0]
 8012bbc:	3b01      	subs	r3, #1
 8012bbe:	2b03      	cmp	r3, #3
 8012bc0:	d80a      	bhi.n	8012bd8 <is_special_dispmode+0x24>
 8012bc2:	a201      	add	r2, pc, #4	; (adr r2, 8012bc8 <is_special_dispmode+0x14>)
 8012bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012bc8:	08012bdd 	.word	0x08012bdd
 8012bcc:	08012be1 	.word	0x08012be1
 8012bd0:	08012be5 	.word	0x08012be5
 8012bd4:	08012be9 	.word	0x08012be9
	default:
	case mode_init: 	  	return 0;
 8012bd8:	2300      	movs	r3, #0
 8012bda:	e006      	b.n	8012bea <is_special_dispmode+0x36>
	case mode_ina_detect:	return 1;
 8012bdc:	2301      	movs	r3, #1
 8012bde:	e004      	b.n	8012bea <is_special_dispmode+0x36>
	case mode_ina_val:		return 1;
 8012be0:	2301      	movs	r3, #1
 8012be2:	e002      	b.n	8012bea <is_special_dispmode+0x36>

	case mode_manual:		return 0;
 8012be4:	2300      	movs	r3, #0
 8012be6:	e000      	b.n	8012bea <is_special_dispmode+0x36>
	case mode_auto: 		return 0;
 8012be8:	2300      	movs	r3, #0
	}
}
 8012bea:	4618      	mov	r0, r3
 8012bec:	46bd      	mov	sp, r7
 8012bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bf2:	4770      	bx	lr
 8012bf4:	200051ea 	.word	0x200051ea

08012bf8 <set_dispmode>:

static void set_dispmode(ihm_mode_t m)
{
 8012bf8:	b580      	push	{r7, lr}
 8012bfa:	b082      	sub	sp, #8
 8012bfc:	af00      	add	r7, sp, #0
 8012bfe:	4603      	mov	r3, r0
 8012c00:	71fb      	strb	r3, [r7, #7]
	if (ihm_dispmode == m) return;
 8012c02:	4b07      	ldr	r3, [pc, #28]	; (8012c20 <set_dispmode+0x28>)
 8012c04:	781b      	ldrb	r3, [r3, #0]
 8012c06:	79fa      	ldrb	r2, [r7, #7]
 8012c08:	429a      	cmp	r2, r3
 8012c0a:	d005      	beq.n	8012c18 <set_dispmode+0x20>
	ihm_dispmode = m;
 8012c0c:	4a04      	ldr	r2, [pc, #16]	; (8012c20 <set_dispmode+0x28>)
 8012c0e:	79fb      	ldrb	r3, [r7, #7]
 8012c10:	7013      	strb	r3, [r2, #0]
	set_displayout();
 8012c12:	f7ff ff97 	bl	8012b44 <set_displayout>
 8012c16:	e000      	b.n	8012c1a <set_dispmode+0x22>
	if (ihm_dispmode == m) return;
 8012c18:	bf00      	nop
}
 8012c1a:	3708      	adds	r7, #8
 8012c1c:	46bd      	mov	sp, r7
 8012c1e:	bd80      	pop	{r7, pc}
 8012c20:	200051ea 	.word	0x200051ea

08012c24 <ihm_runtick_normal>:

void ihm_runtick_normal(int init)
{
 8012c24:	b580      	push	{r7, lr}
 8012c26:	b08a      	sub	sp, #40	; 0x28
 8012c28:	af00      	add	r7, sp, #0
 8012c2a:	6078      	str	r0, [r7, #4]
	//static int cnt=0;
	if (init) {
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d016      	beq.n	8012c60 <ihm_runtick_normal+0x3c>
		itm_debug1(DBG_UI, "UI init", 0);
 8012c32:	2200      	movs	r2, #0
 8012c34:	4963      	ldr	r1, [pc, #396]	; (8012dc4 <ihm_runtick_normal+0x1a0>)
 8012c36:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8012c3a:	f7ff fe73 	bl	8012924 <itm_debug1>
		set_dispmode(mode_init);
 8012c3e:	2000      	movs	r0, #0
 8012c40:	f7ff ffda 	bl	8012bf8 <set_dispmode>
		for (int i = 0; i<DISP_MAX_REGS; i++) {
 8012c44:	2300      	movs	r3, #0
 8012c46:	627b      	str	r3, [r7, #36]	; 0x24
 8012c48:	e007      	b.n	8012c5a <ihm_runtick_normal+0x36>
			ihm_setvar(0, i, 0);
 8012c4a:	2200      	movs	r2, #0
 8012c4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012c4e:	2000      	movs	r0, #0
 8012c50:	f7ff f8c8 	bl	8011de4 <ihm_setvar>
		for (int i = 0; i<DISP_MAX_REGS; i++) {
 8012c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c56:	3301      	adds	r3, #1
 8012c58:	627b      	str	r3, [r7, #36]	; 0x24
 8012c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c5c:	2b0f      	cmp	r3, #15
 8012c5e:	ddf4      	ble.n	8012c4a <ihm_runtick_normal+0x26>
		}
	}
	itm_debug1(DBG_UI, "UI tick", 0);
 8012c60:	2200      	movs	r2, #0
 8012c62:	4959      	ldr	r1, [pc, #356]	; (8012dc8 <ihm_runtick_normal+0x1a4>)
 8012c64:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8012c68:	f7ff fe5c 	bl	8012924 <itm_debug1>

	needsrefresh_mask = 0;
 8012c6c:	4b57      	ldr	r3, [pc, #348]	; (8012dcc <ihm_runtick_normal+0x1a8>)
 8012c6e:	2200      	movs	r2, #0
 8012c70:	701a      	strb	r2, [r3, #0]
	// scan rotary encoder -----------
	for (int i=0; i<MAX_ROTARY; i++) {
 8012c72:	2300      	movs	r3, #0
 8012c74:	623b      	str	r3, [r7, #32]
 8012c76:	e066      	b.n	8012d46 <ihm_runtick_normal+0x122>
				m.v1u = rot_position[i];
				mqf_write_from_ui(&m);
			}
		}
#else
		int16_t p = get_srotary(&htim4);
 8012c78:	4855      	ldr	r0, [pc, #340]	; (8012dd0 <ihm_runtick_normal+0x1ac>)
 8012c7a:	f7ff fece 	bl	8012a1a <get_srotary>
 8012c7e:	4603      	mov	r3, r0
 8012c80:	82fb      	strh	r3, [r7, #22]
		if (p != rot_position[i]) {
 8012c82:	4a54      	ldr	r2, [pc, #336]	; (8012dd4 <ihm_runtick_normal+0x1b0>)
 8012c84:	6a3b      	ldr	r3, [r7, #32]
 8012c86:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012c8a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012c8e:	429a      	cmp	r2, r3
 8012c90:	d056      	beq.n	8012d40 <ihm_runtick_normal+0x11c>
			// pos changed
			rot_position[i] = p;
 8012c92:	4950      	ldr	r1, [pc, #320]	; (8012dd4 <ihm_runtick_normal+0x1b0>)
 8012c94:	6a3b      	ldr	r3, [r7, #32]
 8012c96:	8afa      	ldrh	r2, [r7, #22]
 8012c98:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			if (ihm_dispmode==mode_manual) {
 8012c9c:	4b4e      	ldr	r3, [pc, #312]	; (8012dd8 <ihm_runtick_normal+0x1b4>)
 8012c9e:	781b      	ldrb	r3, [r3, #0]
 8012ca0:	2b03      	cmp	r3, #3
 8012ca2:	d10f      	bne.n	8012cc4 <ihm_runtick_normal+0xa0>
				ihm_setvar(0, 1, (uint16_t) rot_position[0]);
 8012ca4:	4b4b      	ldr	r3, [pc, #300]	; (8012dd4 <ihm_runtick_normal+0x1b0>)
 8012ca6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012caa:	b29b      	uxth	r3, r3
 8012cac:	461a      	mov	r2, r3
 8012cae:	2101      	movs	r1, #1
 8012cb0:	2000      	movs	r0, #0
 8012cb2:	f7ff f897 	bl	8011de4 <ihm_setvar>
				//ihm_setvar(0, 1, ((int)rot0_position - 50));
				SET_NEEDSREFRESH(0);
 8012cb6:	4b45      	ldr	r3, [pc, #276]	; (8012dcc <ihm_runtick_normal+0x1a8>)
 8012cb8:	781b      	ldrb	r3, [r3, #0]
 8012cba:	f043 0301 	orr.w	r3, r3, #1
 8012cbe:	b2da      	uxtb	r2, r3
 8012cc0:	4b42      	ldr	r3, [pc, #264]	; (8012dcc <ihm_runtick_normal+0x1a8>)
 8012cc2:	701a      	strb	r2, [r3, #0]
			}
			if (drive_mode[i]) {	// TODO refactor drive_mode
 8012cc4:	4a45      	ldr	r2, [pc, #276]	; (8012ddc <ihm_runtick_normal+0x1b8>)
 8012cc6:	6a3b      	ldr	r3, [r7, #32]
 8012cc8:	4413      	add	r3, r2
 8012cca:	781b      	ldrb	r3, [r3, #0]
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d037      	beq.n	8012d40 <ihm_runtick_normal+0x11c>
				msg_64_t m;
				m.from = MA_UI(i);
 8012cd0:	6a3b      	ldr	r3, [r7, #32]
 8012cd2:	b25b      	sxtb	r3, r3
 8012cd4:	f003 031f 	and.w	r3, r3, #31
 8012cd8:	b25b      	sxtb	r3, r3
 8012cda:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012cde:	b25b      	sxtb	r3, r3
 8012ce0:	b2db      	uxtb	r3, r3
 8012ce2:	727b      	strb	r3, [r7, #9]
				m.to = MA_CONTROL_T(i);
 8012ce4:	6a3b      	ldr	r3, [r7, #32]
 8012ce6:	b25b      	sxtb	r3, r3
 8012ce8:	f003 0307 	and.w	r3, r3, #7
 8012cec:	b25b      	sxtb	r3, r3
 8012cee:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8012cf2:	b25b      	sxtb	r3, r3
 8012cf4:	b2db      	uxtb	r3, r3
 8012cf6:	723b      	strb	r3, [r7, #8]
				m.cmd = CMD_MDRIVE_SPEED_DIR;
 8012cf8:	2317      	movs	r3, #23
 8012cfa:	72bb      	strb	r3, [r7, #10]
				m.v1u = abs(rot_position[i]);
 8012cfc:	4a35      	ldr	r2, [pc, #212]	; (8012dd4 <ihm_runtick_normal+0x1b0>)
 8012cfe:	6a3b      	ldr	r3, [r7, #32]
 8012d00:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	bfb8      	it	lt
 8012d08:	425b      	neglt	r3, r3
 8012d0a:	b29b      	uxth	r3, r3
 8012d0c:	81bb      	strh	r3, [r7, #12]
				m.v2 = SIGNOF0(rot_position[i]);
 8012d0e:	4a31      	ldr	r2, [pc, #196]	; (8012dd4 <ihm_runtick_normal+0x1b0>)
 8012d10:	6a3b      	ldr	r3, [r7, #32]
 8012d12:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	db0a      	blt.n	8012d30 <ihm_runtick_normal+0x10c>
 8012d1a:	4a2e      	ldr	r2, [pc, #184]	; (8012dd4 <ihm_runtick_normal+0x1b0>)
 8012d1c:	6a3b      	ldr	r3, [r7, #32]
 8012d1e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	bfcc      	ite	gt
 8012d26:	2301      	movgt	r3, #1
 8012d28:	2300      	movle	r3, #0
 8012d2a:	b2db      	uxtb	r3, r3
 8012d2c:	b21b      	sxth	r3, r3
 8012d2e:	e001      	b.n	8012d34 <ihm_runtick_normal+0x110>
 8012d30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012d34:	81fb      	strh	r3, [r7, #14]
				// TODO handle dir
				mqf_write_from_ui(&m);
 8012d36:	f107 0308 	add.w	r3, r7, #8
 8012d3a:	4618      	mov	r0, r3
 8012d3c:	f7ff fe38 	bl	80129b0 <mqf_write_from_ui>
	for (int i=0; i<MAX_ROTARY; i++) {
 8012d40:	6a3b      	ldr	r3, [r7, #32]
 8012d42:	3301      	adds	r3, #1
 8012d44:	623b      	str	r3, [r7, #32]
 8012d46:	6a3b      	ldr	r3, [r7, #32]
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	dd95      	ble.n	8012c78 <ihm_runtick_normal+0x54>
	}

	// scan buttons ------------------

	// mode test hook
	if (ihm_dispmode==mode_ina_detect) {
 8012d4c:	4b22      	ldr	r3, [pc, #136]	; (8012dd8 <ihm_runtick_normal+0x1b4>)
 8012d4e:	781b      	ldrb	r3, [r3, #0]
 8012d50:	2b01      	cmp	r3, #1
 8012d52:	d119      	bne.n	8012d88 <ihm_runtick_normal+0x164>
		// ina3221 detection
		for (int i=0; i<4; i++) {
 8012d54:	2300      	movs	r3, #0
 8012d56:	61fb      	str	r3, [r7, #28]
 8012d58:	e00c      	b.n	8012d74 <ihm_runtick_normal+0x150>
			ihm_setvar(0, i, ina3221_devices[i]);
 8012d5a:	4a21      	ldr	r2, [pc, #132]	; (8012de0 <ihm_runtick_normal+0x1bc>)
 8012d5c:	69fb      	ldr	r3, [r7, #28]
 8012d5e:	4413      	add	r3, r2
 8012d60:	781b      	ldrb	r3, [r3, #0]
 8012d62:	b29b      	uxth	r3, r3
 8012d64:	461a      	mov	r2, r3
 8012d66:	69f9      	ldr	r1, [r7, #28]
 8012d68:	2000      	movs	r0, #0
 8012d6a:	f7ff f83b 	bl	8011de4 <ihm_setvar>
		for (int i=0; i<4; i++) {
 8012d6e:	69fb      	ldr	r3, [r7, #28]
 8012d70:	3301      	adds	r3, #1
 8012d72:	61fb      	str	r3, [r7, #28]
 8012d74:	69fb      	ldr	r3, [r7, #28]
 8012d76:	2b03      	cmp	r3, #3
 8012d78:	ddef      	ble.n	8012d5a <ihm_runtick_normal+0x136>
		}
		SET_NEEDSREFRESH(0);
 8012d7a:	4b14      	ldr	r3, [pc, #80]	; (8012dcc <ihm_runtick_normal+0x1a8>)
 8012d7c:	781b      	ldrb	r3, [r3, #0]
 8012d7e:	f043 0301 	orr.w	r3, r3, #1
 8012d82:	b2da      	uxtb	r2, r3
 8012d84:	4b11      	ldr	r3, [pc, #68]	; (8012dcc <ihm_runtick_normal+0x1a8>)
 8012d86:	701a      	strb	r2, [r3, #0]
	}
	// process messages --------------
	ui_process_msg();
 8012d88:	f000 f82c 	bl	8012de4 <ui_process_msg>

	// update displays ---------------
	for (int i=0; i<MAX_DISP; i++) {
 8012d8c:	2300      	movs	r3, #0
 8012d8e:	61bb      	str	r3, [r7, #24]
 8012d90:	e010      	b.n	8012db4 <ihm_runtick_normal+0x190>
		if (NEEDSREFRESH(i)) {
 8012d92:	4b0e      	ldr	r3, [pc, #56]	; (8012dcc <ihm_runtick_normal+0x1a8>)
 8012d94:	781b      	ldrb	r3, [r3, #0]
 8012d96:	461a      	mov	r2, r3
 8012d98:	69bb      	ldr	r3, [r7, #24]
 8012d9a:	fa42 f303 	asr.w	r3, r2, r3
 8012d9e:	f003 0301 	and.w	r3, r3, #1
 8012da2:	b2db      	uxtb	r3, r3
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d002      	beq.n	8012dae <ihm_runtick_normal+0x18a>
			disp_layout(i);
 8012da8:	69b8      	ldr	r0, [r7, #24]
 8012daa:	f7ff f859 	bl	8011e60 <disp_layout>
	for (int i=0; i<MAX_DISP; i++) {
 8012dae:	69bb      	ldr	r3, [r7, #24]
 8012db0:	3301      	adds	r3, #1
 8012db2:	61bb      	str	r3, [r7, #24]
 8012db4:	69bb      	ldr	r3, [r7, #24]
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	ddeb      	ble.n	8012d92 <ihm_runtick_normal+0x16e>
		}
	}
}
 8012dba:	bf00      	nop
 8012dbc:	3728      	adds	r7, #40	; 0x28
 8012dbe:	46bd      	mov	sp, r7
 8012dc0:	bd80      	pop	{r7, pc}
 8012dc2:	bf00      	nop
 8012dc4:	08019514 	.word	0x08019514
 8012dc8:	0801951c 	.word	0x0801951c
 8012dcc:	200051e8 	.word	0x200051e8
 8012dd0:	20005d4c 	.word	0x20005d4c
 8012dd4:	20000220 	.word	0x20000220
 8012dd8:	200051ea 	.word	0x200051ea
 8012ddc:	20000224 	.word	0x20000224
 8012de0:	20005164 	.word	0x20005164

08012de4 <ui_process_msg>:


static void ui_process_msg(void)
{
 8012de4:	b580      	push	{r7, lr}
 8012de6:	b088      	sub	sp, #32
 8012de8:	af00      	add	r7, sp, #0
	for (;;) {
		msg_64_t m;
		int rc = mqf_read_to_ui(&m);
 8012dea:	463b      	mov	r3, r7
 8012dec:	4618      	mov	r0, r3
 8012dee:	f7ff fdcf 	bl	8012990 <mqf_read_to_ui>
 8012df2:	61b8      	str	r0, [r7, #24]
		if (rc) break;
 8012df4:	69bb      	ldr	r3, [r7, #24]
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	f040 810d 	bne.w	8013016 <ui_process_msg+0x232>

		if (m.cmd == CMD_TRTSPD_NOTIF) {
 8012dfc:	78bb      	ldrb	r3, [r7, #2]
 8012dfe:	2b24      	cmp	r3, #36	; 0x24
 8012e00:	d105      	bne.n	8012e0e <ui_process_msg+0x2a>
			itm_debug1(DBG_UI, "hop", 0);
 8012e02:	2200      	movs	r2, #0
 8012e04:	498d      	ldr	r1, [pc, #564]	; (801303c <ui_process_msg+0x258>)
 8012e06:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8012e0a:	f7ff fd8b 	bl	8012924 <itm_debug1>
		}

		switch(m.cmd) {
 8012e0e:	78bb      	ldrb	r3, [r7, #2]
 8012e10:	2b25      	cmp	r3, #37	; 0x25
 8012e12:	f000 8102 	beq.w	801301a <ui_process_msg+0x236>
 8012e16:	2bfc      	cmp	r3, #252	; 0xfc
 8012e18:	d00a      	beq.n	8012e30 <ui_process_msg+0x4c>
 8012e1a:	2b01      	cmp	r3, #1
 8012e1c:	f000 80ff 	beq.w	801301e <ui_process_msg+0x23a>
		default:
			break;
 8012e20:	bf00      	nop
        		SET_NEEDSREFRESH(0);
        	}
        	return;
        	break;
        }
		if (IS_CONTROL_T(m.from)) {
 8012e22:	787b      	ldrb	r3, [r7, #1]
 8012e24:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8012e28:	2bd0      	cmp	r3, #208	; 0xd0
 8012e2a:	f040 80a1 	bne.w	8012f70 <ui_process_msg+0x18c>
 8012e2e:	e004      	b.n	8012e3a <ui_process_msg+0x56>
            run_mode = m.v1u;
 8012e30:	88bb      	ldrh	r3, [r7, #4]
 8012e32:	b2da      	uxtb	r2, r3
 8012e34:	4b82      	ldr	r3, [pc, #520]	; (8013040 <ui_process_msg+0x25c>)
 8012e36:	701a      	strb	r2, [r3, #0]
            return;
 8012e38:	e0fc      	b.n	8013034 <ui_process_msg+0x250>
			int trnum = m.from & 0x07;
 8012e3a:	787b      	ldrb	r3, [r7, #1]
 8012e3c:	f003 0307 	and.w	r3, r3, #7
 8012e40:	617b      	str	r3, [r7, #20]
			if (trnum != 0) break; // TODO
 8012e42:	697b      	ldr	r3, [r7, #20]
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	f040 80ec 	bne.w	8013022 <ui_process_msg+0x23e>
			switch (m.cmd) {
 8012e4a:	78bb      	ldrb	r3, [r7, #2]
 8012e4c:	2b23      	cmp	r3, #35	; 0x23
 8012e4e:	d03f      	beq.n	8012ed0 <ui_process_msg+0xec>
 8012e50:	2b23      	cmp	r3, #35	; 0x23
 8012e52:	dc04      	bgt.n	8012e5e <ui_process_msg+0x7a>
 8012e54:	2b21      	cmp	r3, #33	; 0x21
 8012e56:	d051      	beq.n	8012efc <ui_process_msg+0x118>
 8012e58:	2b22      	cmp	r3, #34	; 0x22
 8012e5a:	d008      	beq.n	8012e6e <ui_process_msg+0x8a>
 8012e5c:	e07f      	b.n	8012f5e <ui_process_msg+0x17a>
 8012e5e:	2b26      	cmp	r3, #38	; 0x26
 8012e60:	d068      	beq.n	8012f34 <ui_process_msg+0x150>
 8012e62:	2ba1      	cmp	r3, #161	; 0xa1
 8012e64:	f000 8086 	beq.w	8012f74 <ui_process_msg+0x190>
 8012e68:	2b24      	cmp	r3, #36	; 0x24
 8012e6a:	d00d      	beq.n	8012e88 <ui_process_msg+0xa4>
 8012e6c:	e077      	b.n	8012f5e <ui_process_msg+0x17a>
			case CMD_TRSTATUS_NOTIF:
				// unused
				// TODO trnum -> display num
				if (ihm_dispmode == mode_auto) {
 8012e6e:	4b75      	ldr	r3, [pc, #468]	; (8013044 <ui_process_msg+0x260>)
 8012e70:	781b      	ldrb	r3, [r3, #0]
 8012e72:	2b04      	cmp	r3, #4
 8012e74:	f040 80d7 	bne.w	8013026 <ui_process_msg+0x242>
					//TODO
					//ihm_setvar(0, 2, m.v1u);
					SET_NEEDSREFRESH(0);
 8012e78:	4b73      	ldr	r3, [pc, #460]	; (8013048 <ui_process_msg+0x264>)
 8012e7a:	781b      	ldrb	r3, [r3, #0]
 8012e7c:	f043 0301 	orr.w	r3, r3, #1
 8012e80:	b2da      	uxtb	r2, r3
 8012e82:	4b71      	ldr	r3, [pc, #452]	; (8013048 <ui_process_msg+0x264>)
 8012e84:	701a      	strb	r2, [r3, #0]
				}
				return;
 8012e86:	e0ce      	b.n	8013026 <ui_process_msg+0x242>
				break;
			case CMD_TRTSPD_NOTIF:
				itm_debug2(DBG_UI|DBG_CTRL, "rx tspd notif", trnum, m.v1u);
 8012e88:	88bb      	ldrh	r3, [r7, #4]
 8012e8a:	697a      	ldr	r2, [r7, #20]
 8012e8c:	496f      	ldr	r1, [pc, #444]	; (801304c <ui_process_msg+0x268>)
 8012e8e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8012e92:	f7ff fd61 	bl	8012958 <itm_debug2>
				// TODO trnum -> display num
				if (!NOTIF_VOFF && ((ihm_dispmode == mode_manual) || (ihm_dispmode == mode_auto))) {
 8012e96:	4b6b      	ldr	r3, [pc, #428]	; (8013044 <ui_process_msg+0x260>)
 8012e98:	781b      	ldrb	r3, [r3, #0]
 8012e9a:	2b03      	cmp	r3, #3
 8012e9c:	d004      	beq.n	8012ea8 <ui_process_msg+0xc4>
 8012e9e:	4b69      	ldr	r3, [pc, #420]	; (8013044 <ui_process_msg+0x260>)
 8012ea0:	781b      	ldrb	r3, [r3, #0]
 8012ea2:	2b04      	cmp	r3, #4
 8012ea4:	f040 80c1 	bne.w	801302a <ui_process_msg+0x246>
					ihm_setvar(0, 2, m.v2 * m.v1u);
 8012ea8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012eac:	b29a      	uxth	r2, r3
 8012eae:	88bb      	ldrh	r3, [r7, #4]
 8012eb0:	fb12 f303 	smulbb	r3, r2, r3
 8012eb4:	b29b      	uxth	r3, r3
 8012eb6:	461a      	mov	r2, r3
 8012eb8:	2102      	movs	r1, #2
 8012eba:	2000      	movs	r0, #0
 8012ebc:	f7fe ff92 	bl	8011de4 <ihm_setvar>
					SET_NEEDSREFRESH(0);
 8012ec0:	4b61      	ldr	r3, [pc, #388]	; (8013048 <ui_process_msg+0x264>)
 8012ec2:	781b      	ldrb	r3, [r3, #0]
 8012ec4:	f043 0301 	orr.w	r3, r3, #1
 8012ec8:	b2da      	uxtb	r2, r3
 8012eca:	4b5f      	ldr	r3, [pc, #380]	; (8013048 <ui_process_msg+0x264>)
 8012ecc:	701a      	strb	r2, [r3, #0]
				}
				return;
 8012ece:	e0ac      	b.n	801302a <ui_process_msg+0x246>
				break;

			case CMD_TRDIR_NOTIF:
				if (!is_special_dispmode()) {
 8012ed0:	f7ff fe70 	bl	8012bb4 <is_special_dispmode>
 8012ed4:	4603      	mov	r3, r0
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	f040 80a9 	bne.w	801302e <ui_process_msg+0x24a>
					ihm_setvar(0, 4, m.v1);
 8012edc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012ee0:	b29b      	uxth	r3, r3
 8012ee2:	461a      	mov	r2, r3
 8012ee4:	2104      	movs	r1, #4
 8012ee6:	2000      	movs	r0, #0
 8012ee8:	f7fe ff7c 	bl	8011de4 <ihm_setvar>
					SET_NEEDSREFRESH(0);
 8012eec:	4b56      	ldr	r3, [pc, #344]	; (8013048 <ui_process_msg+0x264>)
 8012eee:	781b      	ldrb	r3, [r3, #0]
 8012ef0:	f043 0301 	orr.w	r3, r3, #1
 8012ef4:	b2da      	uxtb	r2, r3
 8012ef6:	4b54      	ldr	r3, [pc, #336]	; (8013048 <ui_process_msg+0x264>)
 8012ef8:	701a      	strb	r2, [r3, #0]
				}
				return;
 8012efa:	e098      	b.n	801302e <ui_process_msg+0x24a>
				break;
			case CMD_TRMODE_NOTIF:
				// TODO
				if (!is_special_dispmode()) {
 8012efc:	f7ff fe5a 	bl	8012bb4 <is_special_dispmode>
 8012f00:	4603      	mov	r3, r0
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d114      	bne.n	8012f30 <ui_process_msg+0x14c>
					train_mode_t cm = (train_mode_t) m.v1u;
 8012f06:	88bb      	ldrh	r3, [r7, #4]
 8012f08:	74fb      	strb	r3, [r7, #19]
					switch (cm) {
 8012f0a:	7cfb      	ldrb	r3, [r7, #19]
 8012f0c:	2b01      	cmp	r3, #1
 8012f0e:	db03      	blt.n	8012f18 <ui_process_msg+0x134>
 8012f10:	2b02      	cmp	r3, #2
 8012f12:	dd05      	ble.n	8012f20 <ui_process_msg+0x13c>
 8012f14:	2b03      	cmp	r3, #3
 8012f16:	d007      	beq.n	8012f28 <ui_process_msg+0x144>
					default:
					case train_notrunning:
						set_dispmode(mode_init);
 8012f18:	2000      	movs	r0, #0
 8012f1a:	f7ff fe6d 	bl	8012bf8 <set_dispmode>
						break;
 8012f1e:	e008      	b.n	8012f32 <ui_process_msg+0x14e>
					case train_manual:
					case train_fullmanual:
						set_dispmode(mode_manual);
 8012f20:	2003      	movs	r0, #3
 8012f22:	f7ff fe69 	bl	8012bf8 <set_dispmode>
						break;
 8012f26:	e004      	b.n	8012f32 <ui_process_msg+0x14e>
					case train_auto:
						set_dispmode(mode_auto);
 8012f28:	2004      	movs	r0, #4
 8012f2a:	f7ff fe65 	bl	8012bf8 <set_dispmode>
						break;
 8012f2e:	e000      	b.n	8012f32 <ui_process_msg+0x14e>
					}
				}
 8012f30:	bf00      	nop
				return;
 8012f32:	e07f      	b.n	8013034 <ui_process_msg+0x250>
				break;
			case CMD_TRSTATE_NOTIF:
				if (!is_special_dispmode()) {
 8012f34:	f7ff fe3e 	bl	8012bb4 <is_special_dispmode>
 8012f38:	4603      	mov	r3, r0
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d179      	bne.n	8013032 <ui_process_msg+0x24e>
					ihm_setvar(0, 3, 10+m.v1u);
 8012f3e:	88bb      	ldrh	r3, [r7, #4]
 8012f40:	330a      	adds	r3, #10
 8012f42:	b29b      	uxth	r3, r3
 8012f44:	461a      	mov	r2, r3
 8012f46:	2103      	movs	r1, #3
 8012f48:	2000      	movs	r0, #0
 8012f4a:	f7fe ff4b 	bl	8011de4 <ihm_setvar>
					SET_NEEDSREFRESH(0);
 8012f4e:	4b3e      	ldr	r3, [pc, #248]	; (8013048 <ui_process_msg+0x264>)
 8012f50:	781b      	ldrb	r3, [r3, #0]
 8012f52:	f043 0301 	orr.w	r3, r3, #1
 8012f56:	b2da      	uxtb	r2, r3
 8012f58:	4b3b      	ldr	r3, [pc, #236]	; (8013048 <ui_process_msg+0x264>)
 8012f5a:	701a      	strb	r2, [r3, #0]
				}
				return;
 8012f5c:	e069      	b.n	8013032 <ui_process_msg+0x24e>
				break;
			case CMD_UI_MSG:
				break; // see below
			default:
				itm_debug1(DBG_UI, "unk ctl", m.cmd);
 8012f5e:	78bb      	ldrb	r3, [r7, #2]
 8012f60:	461a      	mov	r2, r3
 8012f62:	493b      	ldr	r1, [pc, #236]	; (8013050 <ui_process_msg+0x26c>)
 8012f64:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8012f68:	f7ff fcdc 	bl	8012924 <itm_debug1>
				return;
 8012f6c:	bf00      	nop
 8012f6e:	e061      	b.n	8013034 <ui_process_msg+0x250>
				break;
			}
		}
 8012f70:	bf00      	nop
 8012f72:	e000      	b.n	8012f76 <ui_process_msg+0x192>
				break; // see below
 8012f74:	bf00      	nop
		if (IS_UI(m.to)) {
 8012f76:	783b      	ldrb	r3, [r7, #0]
 8012f78:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8012f7c:	2b80      	cmp	r3, #128	; 0x80
 8012f7e:	d13f      	bne.n	8013000 <ui_process_msg+0x21c>
			int dn = m.to & 0x1F;
 8012f80:	783b      	ldrb	r3, [r7, #0]
 8012f82:	f003 031f 	and.w	r3, r3, #31
 8012f86:	60fb      	str	r3, [r7, #12]
			if (dn != 1) {
 8012f88:	68fb      	ldr	r3, [r7, #12]
 8012f8a:	2b01      	cmp	r3, #1
 8012f8c:	d006      	beq.n	8012f9c <ui_process_msg+0x1b8>
				itm_debug1(DBG_UI, "?dn", dn);
 8012f8e:	68fa      	ldr	r2, [r7, #12]
 8012f90:	4930      	ldr	r1, [pc, #192]	; (8013054 <ui_process_msg+0x270>)
 8012f92:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8012f96:	f7ff fcc5 	bl	8012924 <itm_debug1>
 8012f9a:	e726      	b.n	8012dea <ui_process_msg+0x6>
				continue;
			}
			switch (m.cmd) {
 8012f9c:	78bb      	ldrb	r3, [r7, #2]
 8012f9e:	2b20      	cmp	r3, #32
 8012fa0:	d002      	beq.n	8012fa8 <ui_process_msg+0x1c4>
 8012fa2:	2ba1      	cmp	r3, #161	; 0xa1
 8012fa4:	d033      	beq.n	801300e <ui_process_msg+0x22a>
 8012fa6:	e022      	b.n	8012fee <ui_process_msg+0x20a>
			case CMD_UI_MSG:
				//ui_msg5(dn, (char *) m.rbytes+1);
				break;
			case CMD_INA3221_REPORT:
				if (ihm_dispmode == mode_ina_val) {
 8012fa8:	4b26      	ldr	r3, [pc, #152]	; (8013044 <ui_process_msg+0x260>)
 8012faa:	781b      	ldrb	r3, [r3, #0]
 8012fac:	2b02      	cmp	r3, #2
 8012fae:	d130      	bne.n	8013012 <ui_process_msg+0x22e>
					int16_t *values = (int16_t *) m.v32u;
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	60bb      	str	r3, [r7, #8]
					for (int i =0; i<12; i++) {
 8012fb4:	2300      	movs	r3, #0
 8012fb6:	61fb      	str	r3, [r7, #28]
 8012fb8:	e00e      	b.n	8012fd8 <ui_process_msg+0x1f4>
						ihm_setvar(0, i, values[i]);
 8012fba:	69fb      	ldr	r3, [r7, #28]
 8012fbc:	005b      	lsls	r3, r3, #1
 8012fbe:	68ba      	ldr	r2, [r7, #8]
 8012fc0:	4413      	add	r3, r2
 8012fc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012fc6:	b29b      	uxth	r3, r3
 8012fc8:	461a      	mov	r2, r3
 8012fca:	69f9      	ldr	r1, [r7, #28]
 8012fcc:	2000      	movs	r0, #0
 8012fce:	f7fe ff09 	bl	8011de4 <ihm_setvar>
					for (int i =0; i<12; i++) {
 8012fd2:	69fb      	ldr	r3, [r7, #28]
 8012fd4:	3301      	adds	r3, #1
 8012fd6:	61fb      	str	r3, [r7, #28]
 8012fd8:	69fb      	ldr	r3, [r7, #28]
 8012fda:	2b0b      	cmp	r3, #11
 8012fdc:	dded      	ble.n	8012fba <ui_process_msg+0x1d6>
					}
					SET_NEEDSREFRESH(0);
 8012fde:	4b1a      	ldr	r3, [pc, #104]	; (8013048 <ui_process_msg+0x264>)
 8012fe0:	781b      	ldrb	r3, [r3, #0]
 8012fe2:	f043 0301 	orr.w	r3, r3, #1
 8012fe6:	b2da      	uxtb	r2, r3
 8012fe8:	4b17      	ldr	r3, [pc, #92]	; (8013048 <ui_process_msg+0x264>)
 8012fea:	701a      	strb	r2, [r3, #0]
				}
				break;
 8012fec:	e011      	b.n	8013012 <ui_process_msg+0x22e>

			default:
				itm_debug1(DBG_UI, "cmd?", m.cmd);
 8012fee:	78bb      	ldrb	r3, [r7, #2]
 8012ff0:	461a      	mov	r2, r3
 8012ff2:	4919      	ldr	r1, [pc, #100]	; (8013058 <ui_process_msg+0x274>)
 8012ff4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8012ff8:	f7ff fc94 	bl	8012924 <itm_debug1>
				break;
 8012ffc:	bf00      	nop
 8012ffe:	e009      	b.n	8013014 <ui_process_msg+0x230>
			}
		} else {
			itm_debug1(DBG_UI, "non ui msg", 0);
 8013000:	2200      	movs	r2, #0
 8013002:	4916      	ldr	r1, [pc, #88]	; (801305c <ui_process_msg+0x278>)
 8013004:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8013008:	f7ff fc8c 	bl	8012924 <itm_debug1>
 801300c:	e6ed      	b.n	8012dea <ui_process_msg+0x6>
				break;
 801300e:	bf00      	nop
 8013010:	e6eb      	b.n	8012dea <ui_process_msg+0x6>
				break;
 8013012:	bf00      	nop
	for (;;) {
 8013014:	e6e9      	b.n	8012dea <ui_process_msg+0x6>
		if (rc) break;
 8013016:	bf00      	nop
 8013018:	e00c      	b.n	8013034 <ui_process_msg+0x250>
        	return;
 801301a:	bf00      	nop
 801301c:	e00a      	b.n	8013034 <ui_process_msg+0x250>
        	return;
 801301e:	bf00      	nop
 8013020:	e008      	b.n	8013034 <ui_process_msg+0x250>
			if (trnum != 0) break; // TODO
 8013022:	bf00      	nop
 8013024:	e006      	b.n	8013034 <ui_process_msg+0x250>
				return;
 8013026:	bf00      	nop
 8013028:	e004      	b.n	8013034 <ui_process_msg+0x250>
				return;
 801302a:	bf00      	nop
 801302c:	e002      	b.n	8013034 <ui_process_msg+0x250>
				return;
 801302e:	bf00      	nop
 8013030:	e000      	b.n	8013034 <ui_process_msg+0x250>
				return;
 8013032:	bf00      	nop
		}
	}
}
 8013034:	3720      	adds	r7, #32
 8013036:	46bd      	mov	sp, r7
 8013038:	bd80      	pop	{r7, pc}
 801303a:	bf00      	nop
 801303c:	08019524 	.word	0x08019524
 8013040:	200051e9 	.word	0x200051e9
 8013044:	200051ea 	.word	0x200051ea
 8013048:	200051e8 	.word	0x200051e8
 801304c:	08019528 	.word	0x08019528
 8013050:	08019538 	.word	0x08019538
 8013054:	08019540 	.word	0x08019540
 8013058:	08019544 	.word	0x08019544
 801305c:	0801954c 	.word	0x0801954c

08013060 <ui_process_msg_off>:
// ---------------------------------



static void ui_process_msg_off(void)
{
 8013060:	b580      	push	{r7, lr}
 8013062:	b084      	sub	sp, #16
 8013064:	af00      	add	r7, sp, #0
	for (;;) {
		msg_64_t m;
		int rc = mqf_read_to_ui(&m);
 8013066:	463b      	mov	r3, r7
 8013068:	4618      	mov	r0, r3
 801306a:	f7ff fc91 	bl	8012990 <mqf_read_to_ui>
 801306e:	60f8      	str	r0, [r7, #12]
		if (rc) break;
 8013070:	68fb      	ldr	r3, [r7, #12]
 8013072:	2b00      	cmp	r3, #0
 8013074:	d109      	bne.n	801308a <ui_process_msg_off+0x2a>

		switch(m.cmd) {
 8013076:	78bb      	ldrb	r3, [r7, #2]
 8013078:	2bfc      	cmp	r3, #252	; 0xfc
 801307a:	d000      	beq.n	801307e <ui_process_msg_off+0x1e>
		default:
			break;
 801307c:	e004      	b.n	8013088 <ui_process_msg_off+0x28>
        case CMD_SETRUN_MODE:
            run_mode = m.v1u;
 801307e:	88bb      	ldrh	r3, [r7, #4]
 8013080:	b2da      	uxtb	r2, r3
 8013082:	4b04      	ldr	r3, [pc, #16]	; (8013094 <ui_process_msg_off+0x34>)
 8013084:	701a      	strb	r2, [r3, #0]
 8013086:	e001      	b.n	801308c <ui_process_msg_off+0x2c>
	for (;;) {
 8013088:	e7ed      	b.n	8013066 <ui_process_msg_off+0x6>
		if (rc) break;
 801308a:	bf00      	nop
            return;
            break;
		}
	}
}
 801308c:	3710      	adds	r7, #16
 801308e:	46bd      	mov	sp, r7
 8013090:	bd80      	pop	{r7, pc}
 8013092:	bf00      	nop
 8013094:	200051e9 	.word	0x200051e9

08013098 <ihm_runtick_off>:

void ihm_runtick_off(int init)
{
 8013098:	b580      	push	{r7, lr}
 801309a:	b084      	sub	sp, #16
 801309c:	af00      	add	r7, sp, #0
 801309e:	6078      	str	r0, [r7, #4]
	needsrefresh_mask = 0;
 80130a0:	4b20      	ldr	r3, [pc, #128]	; (8013124 <ihm_runtick_off+0x8c>)
 80130a2:	2200      	movs	r2, #0
 80130a4:	701a      	strb	r2, [r3, #0]

	if (init) {
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d01e      	beq.n	80130ea <ihm_runtick_off+0x52>
		itm_debug1(DBG_UI, "UI init", 0);
 80130ac:	2200      	movs	r2, #0
 80130ae:	491e      	ldr	r1, [pc, #120]	; (8013128 <ihm_runtick_off+0x90>)
 80130b0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80130b4:	f7ff fc36 	bl	8012924 <itm_debug1>
		ihm_setlayout(0, LAYOUT_OFF);
 80130b8:	2104      	movs	r1, #4
 80130ba:	2000      	movs	r0, #0
 80130bc:	f7fe fe3c 	bl	8011d38 <ihm_setlayout>
		for (int i = 0; i<DISP_MAX_REGS; i++) {
 80130c0:	2300      	movs	r3, #0
 80130c2:	60fb      	str	r3, [r7, #12]
 80130c4:	e007      	b.n	80130d6 <ihm_runtick_off+0x3e>
			ihm_setvar(0, i, 0);
 80130c6:	2200      	movs	r2, #0
 80130c8:	68f9      	ldr	r1, [r7, #12]
 80130ca:	2000      	movs	r0, #0
 80130cc:	f7fe fe8a 	bl	8011de4 <ihm_setvar>
		for (int i = 0; i<DISP_MAX_REGS; i++) {
 80130d0:	68fb      	ldr	r3, [r7, #12]
 80130d2:	3301      	adds	r3, #1
 80130d4:	60fb      	str	r3, [r7, #12]
 80130d6:	68fb      	ldr	r3, [r7, #12]
 80130d8:	2b0f      	cmp	r3, #15
 80130da:	ddf4      	ble.n	80130c6 <ihm_runtick_off+0x2e>
		}
		SET_NEEDSREFRESH(0);
 80130dc:	4b11      	ldr	r3, [pc, #68]	; (8013124 <ihm_runtick_off+0x8c>)
 80130de:	781b      	ldrb	r3, [r3, #0]
 80130e0:	f043 0301 	orr.w	r3, r3, #1
 80130e4:	b2da      	uxtb	r2, r3
 80130e6:	4b0f      	ldr	r3, [pc, #60]	; (8013124 <ihm_runtick_off+0x8c>)
 80130e8:	701a      	strb	r2, [r3, #0]
	}
	// process messages --------------
	ui_process_msg_off();
 80130ea:	f7ff ffb9 	bl	8013060 <ui_process_msg_off>

	// update displays ---------------
	for (int i=0; i<MAX_DISP; i++) {
 80130ee:	2300      	movs	r3, #0
 80130f0:	60bb      	str	r3, [r7, #8]
 80130f2:	e010      	b.n	8013116 <ihm_runtick_off+0x7e>
		if (NEEDSREFRESH(i)) {
 80130f4:	4b0b      	ldr	r3, [pc, #44]	; (8013124 <ihm_runtick_off+0x8c>)
 80130f6:	781b      	ldrb	r3, [r3, #0]
 80130f8:	461a      	mov	r2, r3
 80130fa:	68bb      	ldr	r3, [r7, #8]
 80130fc:	fa42 f303 	asr.w	r3, r2, r3
 8013100:	f003 0301 	and.w	r3, r3, #1
 8013104:	b2db      	uxtb	r3, r3
 8013106:	2b00      	cmp	r3, #0
 8013108:	d002      	beq.n	8013110 <ihm_runtick_off+0x78>
			disp_layout(i);
 801310a:	68b8      	ldr	r0, [r7, #8]
 801310c:	f7fe fea8 	bl	8011e60 <disp_layout>
	for (int i=0; i<MAX_DISP; i++) {
 8013110:	68bb      	ldr	r3, [r7, #8]
 8013112:	3301      	adds	r3, #1
 8013114:	60bb      	str	r3, [r7, #8]
 8013116:	68bb      	ldr	r3, [r7, #8]
 8013118:	2b00      	cmp	r3, #0
 801311a:	ddeb      	ble.n	80130f4 <ihm_runtick_off+0x5c>
		}
	}
}
 801311c:	bf00      	nop
 801311e:	3710      	adds	r7, #16
 8013120:	46bd      	mov	sp, r7
 8013122:	bd80      	pop	{r7, pc}
 8013124:	200051e8 	.word	0x200051e8
 8013128:	08019514 	.word	0x08019514

0801312c <ihm_runtick_testcanton>:
// ---------------------------------
// run mode Cantontest
// ---------------------------------

static void ihm_runtick_testcanton(int f)
{
 801312c:	b580      	push	{r7, lr}
 801312e:	b082      	sub	sp, #8
 8013130:	af00      	add	r7, sp, #0
 8013132:	6078      	str	r0, [r7, #4]
	ihm_runtick_off(f);
 8013134:	6878      	ldr	r0, [r7, #4]
 8013136:	f7ff ffaf 	bl	8013098 <ihm_runtick_off>
}
 801313a:	bf00      	nop
 801313c:	3708      	adds	r7, #8
 801313e:	46bd      	mov	sp, r7
 8013140:	bd80      	pop	{r7, pc}
	...

08013144 <ihm_runtick_detect1>:
// ---------------------------------

static void ui_process_msg_d1(void);

static void ihm_runtick_detect1(int init)
{
 8013144:	b580      	push	{r7, lr}
 8013146:	b08a      	sub	sp, #40	; 0x28
 8013148:	af00      	add	r7, sp, #0
 801314a:	6078      	str	r0, [r7, #4]
	static int voltidx = 7;
	needsrefresh_mask = 0;
 801314c:	4b4d      	ldr	r3, [pc, #308]	; (8013284 <ihm_runtick_detect1+0x140>)
 801314e:	2200      	movs	r2, #0
 8013150:	701a      	strb	r2, [r3, #0]

	if (init) {
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	2b00      	cmp	r3, #0
 8013156:	d049      	beq.n	80131ec <ihm_runtick_detect1+0xa8>
		voltidx = 7;
 8013158:	4b4b      	ldr	r3, [pc, #300]	; (8013288 <ihm_runtick_detect1+0x144>)
 801315a:	2207      	movs	r2, #7
 801315c:	601a      	str	r2, [r3, #0]
		osDelay(500); // ugly : make sure other tasklet are ready. TODO : fix this
 801315e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8013162:	f7f9 fe53 	bl	800ce0c <osDelay>
		itm_debug1(DBG_UI, "UI init", 0);
 8013166:	2200      	movs	r2, #0
 8013168:	4948      	ldr	r1, [pc, #288]	; (801328c <ihm_runtick_detect1+0x148>)
 801316a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801316e:	f7ff fbd9 	bl	8012924 <itm_debug1>
		ihm_setlayout(0, LAYOUT_DETECT1);
 8013172:	2105      	movs	r1, #5
 8013174:	2000      	movs	r0, #0
 8013176:	f7fe fddf 	bl	8011d38 <ihm_setlayout>
		for (int i = 0; i<DISP_MAX_REGS; i++) {
 801317a:	2300      	movs	r3, #0
 801317c:	627b      	str	r3, [r7, #36]	; 0x24
 801317e:	e007      	b.n	8013190 <ihm_runtick_detect1+0x4c>
			ihm_setvar(0, i, 0);
 8013180:	2200      	movs	r2, #0
 8013182:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013184:	2000      	movs	r0, #0
 8013186:	f7fe fe2d 	bl	8011de4 <ihm_setvar>
		for (int i = 0; i<DISP_MAX_REGS; i++) {
 801318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801318c:	3301      	adds	r3, #1
 801318e:	627b      	str	r3, [r7, #36]	; 0x24
 8013190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013192:	2b0f      	cmp	r3, #15
 8013194:	ddf4      	ble.n	8013180 <ihm_runtick_detect1+0x3c>
		}
		ihm_setvar(0, 9, voltidx);
 8013196:	4b3c      	ldr	r3, [pc, #240]	; (8013288 <ihm_runtick_detect1+0x144>)
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	b29b      	uxth	r3, r3
 801319c:	461a      	mov	r2, r3
 801319e:	2109      	movs	r1, #9
 80131a0:	2000      	movs	r0, #0
 80131a2:	f7fe fe1f 	bl	8011de4 <ihm_setvar>
		SET_NEEDSREFRESH(0);
 80131a6:	4b37      	ldr	r3, [pc, #220]	; (8013284 <ihm_runtick_detect1+0x140>)
 80131a8:	781b      	ldrb	r3, [r3, #0]
 80131aa:	f043 0301 	orr.w	r3, r3, #1
 80131ae:	b2da      	uxtb	r2, r3
 80131b0:	4b34      	ldr	r3, [pc, #208]	; (8013284 <ihm_runtick_detect1+0x140>)
 80131b2:	701a      	strb	r2, [r3, #0]
		msg_64_t m;
		m.from = MA_UI(1);
 80131b4:	2381      	movs	r3, #129	; 0x81
 80131b6:	747b      	strb	r3, [r7, #17]
		m.to = MA_CANTON(0,1);
 80131b8:	2301      	movs	r3, #1
 80131ba:	743b      	strb	r3, [r7, #16]
		m.cmd = CMD_BEMF_ON;
 80131bc:	2340      	movs	r3, #64	; 0x40
 80131be:	74bb      	strb	r3, [r7, #18]
		mqf_write_from_ui(&m);
 80131c0:	f107 0310 	add.w	r3, r7, #16
 80131c4:	4618      	mov	r0, r3
 80131c6:	f7ff fbf3 	bl	80129b0 <mqf_write_from_ui>

		m.from = MA_UI(1);
 80131ca:	2381      	movs	r3, #129	; 0x81
 80131cc:	747b      	strb	r3, [r7, #17]
		m.to = MA_CANTON(0,1);
 80131ce:	2301      	movs	r3, #1
 80131d0:	743b      	strb	r3, [r7, #16]
		m.cmd = CMD_SETVPWM;
 80131d2:	2301      	movs	r3, #1
 80131d4:	74bb      	strb	r3, [r7, #18]
		m.v1u = voltidx;
 80131d6:	4b2c      	ldr	r3, [pc, #176]	; (8013288 <ihm_runtick_detect1+0x144>)
 80131d8:	681b      	ldr	r3, [r3, #0]
 80131da:	b29b      	uxth	r3, r3
 80131dc:	82bb      	strh	r3, [r7, #20]
		m.v2 = 0;
 80131de:	2300      	movs	r3, #0
 80131e0:	82fb      	strh	r3, [r7, #22]
		mqf_write_from_ui(&m);
 80131e2:	f107 0310 	add.w	r3, r7, #16
 80131e6:	4618      	mov	r0, r3
 80131e8:	f7ff fbe2 	bl	80129b0 <mqf_write_from_ui>
	}
	// rotary encoder
	static  uint16_t rotpos = 0xFFFF;
	uint16_t p = get_rotary(&htim4);
 80131ec:	4828      	ldr	r0, [pc, #160]	; (8013290 <ihm_runtick_detect1+0x14c>)
 80131ee:	f7ff fbef 	bl	80129d0 <get_rotary>
 80131f2:	4603      	mov	r3, r0
 80131f4:	83fb      	strh	r3, [r7, #30]
	if (p != rotpos) {
 80131f6:	4b27      	ldr	r3, [pc, #156]	; (8013294 <ihm_runtick_detect1+0x150>)
 80131f8:	881b      	ldrh	r3, [r3, #0]
 80131fa:	8bfa      	ldrh	r2, [r7, #30]
 80131fc:	429a      	cmp	r2, r3
 80131fe:	d023      	beq.n	8013248 <ihm_runtick_detect1+0x104>
		// pos changed
		rotpos = p;
 8013200:	4a24      	ldr	r2, [pc, #144]	; (8013294 <ihm_runtick_detect1+0x150>)
 8013202:	8bfb      	ldrh	r3, [r7, #30]
 8013204:	8013      	strh	r3, [r2, #0]
		ihm_setvar(0, 8, rotpos);
 8013206:	4b23      	ldr	r3, [pc, #140]	; (8013294 <ihm_runtick_detect1+0x150>)
 8013208:	881b      	ldrh	r3, [r3, #0]
 801320a:	461a      	mov	r2, r3
 801320c:	2108      	movs	r1, #8
 801320e:	2000      	movs	r0, #0
 8013210:	f7fe fde8 	bl	8011de4 <ihm_setvar>
		SET_NEEDSREFRESH(0);
 8013214:	4b1b      	ldr	r3, [pc, #108]	; (8013284 <ihm_runtick_detect1+0x140>)
 8013216:	781b      	ldrb	r3, [r3, #0]
 8013218:	f043 0301 	orr.w	r3, r3, #1
 801321c:	b2da      	uxtb	r2, r3
 801321e:	4b19      	ldr	r3, [pc, #100]	; (8013284 <ihm_runtick_detect1+0x140>)
 8013220:	701a      	strb	r2, [r3, #0]

		msg_64_t m;
		m.from = MA_UI(1);
 8013222:	2381      	movs	r3, #129	; 0x81
 8013224:	727b      	strb	r3, [r7, #9]
		m.to = MA_CANTON(0,1);
 8013226:	2301      	movs	r3, #1
 8013228:	723b      	strb	r3, [r7, #8]
		m.cmd = CMD_SETVPWM;
 801322a:	2301      	movs	r3, #1
 801322c:	72bb      	strb	r3, [r7, #10]
		m.v1u = voltidx;
 801322e:	4b16      	ldr	r3, [pc, #88]	; (8013288 <ihm_runtick_detect1+0x144>)
 8013230:	681b      	ldr	r3, [r3, #0]
 8013232:	b29b      	uxth	r3, r3
 8013234:	81bb      	strh	r3, [r7, #12]
		m.v2 = rotpos;
 8013236:	4b17      	ldr	r3, [pc, #92]	; (8013294 <ihm_runtick_detect1+0x150>)
 8013238:	881b      	ldrh	r3, [r3, #0]
 801323a:	b21b      	sxth	r3, r3
 801323c:	81fb      	strh	r3, [r7, #14]
		mqf_write_from_ui(&m);
 801323e:	f107 0308 	add.w	r3, r7, #8
 8013242:	4618      	mov	r0, r3
 8013244:	f7ff fbb4 	bl	80129b0 <mqf_write_from_ui>

	}
	// process messages --------------
	ui_process_msg_d1();
 8013248:	f000 f826 	bl	8013298 <ui_process_msg_d1>

	// update displays ---------------
	for (int i=0; i<MAX_DISP; i++) {
 801324c:	2300      	movs	r3, #0
 801324e:	623b      	str	r3, [r7, #32]
 8013250:	e010      	b.n	8013274 <ihm_runtick_detect1+0x130>
		if (NEEDSREFRESH(i)) {
 8013252:	4b0c      	ldr	r3, [pc, #48]	; (8013284 <ihm_runtick_detect1+0x140>)
 8013254:	781b      	ldrb	r3, [r3, #0]
 8013256:	461a      	mov	r2, r3
 8013258:	6a3b      	ldr	r3, [r7, #32]
 801325a:	fa42 f303 	asr.w	r3, r2, r3
 801325e:	f003 0301 	and.w	r3, r3, #1
 8013262:	b2db      	uxtb	r3, r3
 8013264:	2b00      	cmp	r3, #0
 8013266:	d002      	beq.n	801326e <ihm_runtick_detect1+0x12a>
			disp_layout(i);
 8013268:	6a38      	ldr	r0, [r7, #32]
 801326a:	f7fe fdf9 	bl	8011e60 <disp_layout>
	for (int i=0; i<MAX_DISP; i++) {
 801326e:	6a3b      	ldr	r3, [r7, #32]
 8013270:	3301      	adds	r3, #1
 8013272:	623b      	str	r3, [r7, #32]
 8013274:	6a3b      	ldr	r3, [r7, #32]
 8013276:	2b00      	cmp	r3, #0
 8013278:	ddeb      	ble.n	8013252 <ihm_runtick_detect1+0x10e>
		}
	}
}
 801327a:	bf00      	nop
 801327c:	3728      	adds	r7, #40	; 0x28
 801327e:	46bd      	mov	sp, r7
 8013280:	bd80      	pop	{r7, pc}
 8013282:	bf00      	nop
 8013284:	200051e8 	.word	0x200051e8
 8013288:	2000022c 	.word	0x2000022c
 801328c:	08019514 	.word	0x08019514
 8013290:	20005d4c 	.word	0x20005d4c
 8013294:	20000230 	.word	0x20000230

08013298 <ui_process_msg_d1>:



static void ui_process_msg_d1(void)
{
 8013298:	b580      	push	{r7, lr}
 801329a:	b084      	sub	sp, #16
 801329c:	af00      	add	r7, sp, #0
	for (;;) {
		msg_64_t m;
		int rc = mqf_read_to_ui(&m);
 801329e:	463b      	mov	r3, r7
 80132a0:	4618      	mov	r0, r3
 80132a2:	f7ff fb75 	bl	8012990 <mqf_read_to_ui>
 80132a6:	60f8      	str	r0, [r7, #12]
		if (rc) break;
 80132a8:	68fb      	ldr	r3, [r7, #12]
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d13c      	bne.n	8013328 <ui_process_msg_d1+0x90>

		switch(m.cmd) {
 80132ae:	78bb      	ldrb	r3, [r7, #2]
 80132b0:	2b27      	cmp	r3, #39	; 0x27
 80132b2:	d021      	beq.n	80132f8 <ui_process_msg_d1+0x60>
 80132b4:	2bfc      	cmp	r3, #252	; 0xfc
 80132b6:	d002      	beq.n	80132be <ui_process_msg_d1+0x26>
 80132b8:	2b03      	cmp	r3, #3
 80132ba:	d005      	beq.n	80132c8 <ui_process_msg_d1+0x30>
 80132bc:	e02c      	b.n	8013318 <ui_process_msg_d1+0x80>

        case CMD_SETRUN_MODE:
            run_mode = m.v1u;
 80132be:	88bb      	ldrh	r3, [r7, #4]
 80132c0:	b2da      	uxtb	r2, r3
 80132c2:	4b1b      	ldr	r3, [pc, #108]	; (8013330 <ui_process_msg_d1+0x98>)
 80132c4:	701a      	strb	r2, [r3, #0]
 80132c6:	e030      	b.n	801332a <ui_process_msg_d1+0x92>
            return;
            break;


        case CMD_BEMF_NOTIF:
    		ihm_setvar(0, 5, m.v2); //Von
 80132c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80132cc:	b29b      	uxth	r3, r3
 80132ce:	461a      	mov	r2, r3
 80132d0:	2105      	movs	r1, #5
 80132d2:	2000      	movs	r0, #0
 80132d4:	f7fe fd86 	bl	8011de4 <ihm_setvar>
    		ihm_setvar(0, 6, m.v1); //Voff
 80132d8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80132dc:	b29b      	uxth	r3, r3
 80132de:	461a      	mov	r2, r3
 80132e0:	2106      	movs	r1, #6
 80132e2:	2000      	movs	r0, #0
 80132e4:	f7fe fd7e 	bl	8011de4 <ihm_setvar>
    		SET_NEEDSREFRESH(0);
 80132e8:	4b12      	ldr	r3, [pc, #72]	; (8013334 <ui_process_msg_d1+0x9c>)
 80132ea:	781b      	ldrb	r3, [r3, #0]
 80132ec:	f043 0301 	orr.w	r3, r3, #1
 80132f0:	b2da      	uxtb	r2, r3
 80132f2:	4b10      	ldr	r3, [pc, #64]	; (8013334 <ui_process_msg_d1+0x9c>)
 80132f4:	701a      	strb	r2, [r3, #0]
    		break;
 80132f6:	e016      	b.n	8013326 <ui_process_msg_d1+0x8e>
        case CMD_INA3221_VAL1:
        	ihm_setvar(0, 7, m.v1);
 80132f8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80132fc:	b29b      	uxth	r3, r3
 80132fe:	461a      	mov	r2, r3
 8013300:	2107      	movs	r1, #7
 8013302:	2000      	movs	r0, #0
 8013304:	f7fe fd6e 	bl	8011de4 <ihm_setvar>
        	SET_NEEDSREFRESH(0);
 8013308:	4b0a      	ldr	r3, [pc, #40]	; (8013334 <ui_process_msg_d1+0x9c>)
 801330a:	781b      	ldrb	r3, [r3, #0]
 801330c:	f043 0301 	orr.w	r3, r3, #1
 8013310:	b2da      	uxtb	r2, r3
 8013312:	4b08      	ldr	r3, [pc, #32]	; (8013334 <ui_process_msg_d1+0x9c>)
 8013314:	701a      	strb	r2, [r3, #0]
        	break;
 8013316:	e006      	b.n	8013326 <ui_process_msg_d1+0x8e>

        default:
        	itm_debug1(DBG_ERR|DBG_UI, "unhndld msg", m.cmd);
 8013318:	78bb      	ldrb	r3, [r7, #2]
 801331a:	461a      	mov	r2, r3
 801331c:	4906      	ldr	r1, [pc, #24]	; (8013338 <ui_process_msg_d1+0xa0>)
 801331e:	4807      	ldr	r0, [pc, #28]	; (801333c <ui_process_msg_d1+0xa4>)
 8013320:	f7ff fb00 	bl	8012924 <itm_debug1>
        	break;
 8013324:	bf00      	nop
	for (;;) {
 8013326:	e7ba      	b.n	801329e <ui_process_msg_d1+0x6>
		if (rc) break;
 8013328:	bf00      	nop
		}
	}
}
 801332a:	3710      	adds	r7, #16
 801332c:	46bd      	mov	sp, r7
 801332e:	bd80      	pop	{r7, pc}
 8013330:	200051e9 	.word	0x200051e9
 8013334:	200051e8 	.word	0x200051e8
 8013338:	08019558 	.word	0x08019558
 801333c:	80000800 	.word	0x80000800

08013340 <ihm_runtick_detect>:
// ---------------------------------
// run mode detect
// ---------------------------------

static void ihm_runtick_detect(int f)
{
 8013340:	b580      	push	{r7, lr}
 8013342:	b082      	sub	sp, #8
 8013344:	af00      	add	r7, sp, #0
 8013346:	6078      	str	r0, [r7, #4]
	ihm_runtick_off(f);
 8013348:	6878      	ldr	r0, [r7, #4]
 801334a:	f7ff fea5 	bl	8013098 <ihm_runtick_off>
}
 801334e:	bf00      	nop
 8013350:	3708      	adds	r7, #8
 8013352:	46bd      	mov	sp, r7
 8013354:	bd80      	pop	{r7, pc}
	...

08013358 <itm_debug1>:
{
 8013358:	b580      	push	{r7, lr}
 801335a:	b086      	sub	sp, #24
 801335c:	af02      	add	r7, sp, #8
 801335e:	60f8      	str	r0, [r7, #12]
 8013360:	60b9      	str	r1, [r7, #8]
 8013362:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 8013364:	4b08      	ldr	r3, [pc, #32]	; (8013388 <itm_debug1+0x30>)
 8013366:	681a      	ldr	r2, [r3, #0]
 8013368:	68fb      	ldr	r3, [r7, #12]
 801336a:	4013      	ands	r3, r2
 801336c:	2b00      	cmp	r3, #0
 801336e:	d007      	beq.n	8013380 <itm_debug1+0x28>
 8013370:	2301      	movs	r3, #1
 8013372:	9300      	str	r3, [sp, #0]
 8013374:	2300      	movs	r3, #0
 8013376:	2200      	movs	r2, #0
 8013378:	6879      	ldr	r1, [r7, #4]
 801337a:	68b8      	ldr	r0, [r7, #8]
 801337c:	f005 fc8a 	bl	8018c94 <_itm_debug3>
}
 8013380:	bf00      	nop
 8013382:	3710      	adds	r7, #16
 8013384:	46bd      	mov	sp, r7
 8013386:	bd80      	pop	{r7, pc}
 8013388:	200005a4 	.word	0x200005a4

0801338c <itm_debug2>:
{
 801338c:	b580      	push	{r7, lr}
 801338e:	b086      	sub	sp, #24
 8013390:	af02      	add	r7, sp, #8
 8013392:	60f8      	str	r0, [r7, #12]
 8013394:	60b9      	str	r1, [r7, #8]
 8013396:	607a      	str	r2, [r7, #4]
 8013398:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, 0, 2);
 801339a:	4b09      	ldr	r3, [pc, #36]	; (80133c0 <itm_debug2+0x34>)
 801339c:	681a      	ldr	r2, [r3, #0]
 801339e:	68fb      	ldr	r3, [r7, #12]
 80133a0:	4013      	ands	r3, r2
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	d007      	beq.n	80133b6 <itm_debug2+0x2a>
 80133a6:	2302      	movs	r3, #2
 80133a8:	9300      	str	r3, [sp, #0]
 80133aa:	2300      	movs	r3, #0
 80133ac:	683a      	ldr	r2, [r7, #0]
 80133ae:	6879      	ldr	r1, [r7, #4]
 80133b0:	68b8      	ldr	r0, [r7, #8]
 80133b2:	f005 fc6f 	bl	8018c94 <_itm_debug3>
}
 80133b6:	bf00      	nop
 80133b8:	3710      	adds	r7, #16
 80133ba:	46bd      	mov	sp, r7
 80133bc:	bd80      	pop	{r7, pc}
 80133be:	bf00      	nop
 80133c0:	200005a4 	.word	0x200005a4

080133c4 <itm_debug3>:
{
 80133c4:	b580      	push	{r7, lr}
 80133c6:	b086      	sub	sp, #24
 80133c8:	af02      	add	r7, sp, #8
 80133ca:	60f8      	str	r0, [r7, #12]
 80133cc:	60b9      	str	r1, [r7, #8]
 80133ce:	607a      	str	r2, [r7, #4]
 80133d0:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, v3, 3);
 80133d2:	4b09      	ldr	r3, [pc, #36]	; (80133f8 <itm_debug3+0x34>)
 80133d4:	681a      	ldr	r2, [r3, #0]
 80133d6:	68fb      	ldr	r3, [r7, #12]
 80133d8:	4013      	ands	r3, r2
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d007      	beq.n	80133ee <itm_debug3+0x2a>
 80133de:	2303      	movs	r3, #3
 80133e0:	9300      	str	r3, [sp, #0]
 80133e2:	69bb      	ldr	r3, [r7, #24]
 80133e4:	683a      	ldr	r2, [r7, #0]
 80133e6:	6879      	ldr	r1, [r7, #4]
 80133e8:	68b8      	ldr	r0, [r7, #8]
 80133ea:	f005 fc53 	bl	8018c94 <_itm_debug3>
}
 80133ee:	bf00      	nop
 80133f0:	3710      	adds	r7, #16
 80133f2:	46bd      	mov	sp, r7
 80133f4:	bd80      	pop	{r7, pc}
 80133f6:	bf00      	nop
 80133f8:	200005a4 	.word	0x200005a4

080133fc <mqf_read_to_ctrl>:
/* from upper */
#define CMD_SET_TARGET_SPEED 0x10
#define CMD_SET_C1_C2		 0x11


LFMQUEUE_DEF_H(to_ctrl, msg_64_t)
 80133fc:	b580      	push	{r7, lr}
 80133fe:	b082      	sub	sp, #8
 8013400:	af00      	add	r7, sp, #0
 8013402:	6078      	str	r0, [r7, #4]
 8013404:	6879      	ldr	r1, [r7, #4]
 8013406:	4804      	ldr	r0, [pc, #16]	; (8013418 <mqf_read_to_ctrl+0x1c>)
 8013408:	f005 fdc4 	bl	8018f94 <mqf_read>
 801340c:	4603      	mov	r3, r0
 801340e:	4618      	mov	r0, r3
 8013410:	3708      	adds	r7, #8
 8013412:	46bd      	mov	sp, r7
 8013414:	bd80      	pop	{r7, pc}
 8013416:	bf00      	nop
 8013418:	20000548 	.word	0x20000548

0801341c <mqf_write_from_ctrl>:
LFMQUEUE_DEF_H(from_ctrl, msg_64_t)
 801341c:	b580      	push	{r7, lr}
 801341e:	b082      	sub	sp, #8
 8013420:	af00      	add	r7, sp, #0
 8013422:	6078      	str	r0, [r7, #4]
 8013424:	6879      	ldr	r1, [r7, #4]
 8013426:	4804      	ldr	r0, [pc, #16]	; (8013438 <mqf_write_from_ctrl+0x1c>)
 8013428:	f005 fd3a 	bl	8018ea0 <mqf_write>
 801342c:	4603      	mov	r3, r0
 801342e:	4618      	mov	r0, r3
 8013430:	3708      	adds	r7, #8
 8013432:	46bd      	mov	sp, r7
 8013434:	bd80      	pop	{r7, pc}
 8013436:	bf00      	nop
 8013438:	20000554 	.word	0x20000554

0801343c <_sub_addr_to_sub_num>:
 l2r : (sw t 2) (blk 5.1) (blk 5.2)
 */
#include "../msg/trainmsg.h"

static inline int _sub_addr_to_sub_num(uint8_t addr, uint8_t sub)
{
 801343c:	b480      	push	{r7}
 801343e:	b085      	sub	sp, #20
 8013440:	af00      	add	r7, sp, #0
 8013442:	4603      	mov	r3, r0
 8013444:	460a      	mov	r2, r1
 8013446:	71fb      	strb	r3, [r7, #7]
 8013448:	4613      	mov	r3, r2
 801344a:	71bb      	strb	r3, [r7, #6]
    int brd = MA_2_BOARD(addr);
 801344c:	79fb      	ldrb	r3, [r7, #7]
 801344e:	10db      	asrs	r3, r3, #3
 8013450:	f003 0307 	and.w	r3, r3, #7
 8013454:	60fb      	str	r3, [r7, #12]
    int n = brd * 12 + sub;
 8013456:	68fa      	ldr	r2, [r7, #12]
 8013458:	4613      	mov	r3, r2
 801345a:	005b      	lsls	r3, r3, #1
 801345c:	4413      	add	r3, r2
 801345e:	009b      	lsls	r3, r3, #2
 8013460:	461a      	mov	r2, r3
 8013462:	79bb      	ldrb	r3, [r7, #6]
 8013464:	4413      	add	r3, r2
 8013466:	60bb      	str	r3, [r7, #8]
    return n;
 8013468:	68bb      	ldr	r3, [r7, #8]
}
 801346a:	4618      	mov	r0, r3
 801346c:	3714      	adds	r7, #20
 801346e:	46bd      	mov	sp, r7
 8013470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013474:	4770      	bx	lr

08013476 <_blk_addr_to_blk_num>:

static inline int _blk_addr_to_blk_num(uint8_t addr)
{
 8013476:	b480      	push	{r7}
 8013478:	b085      	sub	sp, #20
 801347a:	af00      	add	r7, sp, #0
 801347c:	4603      	mov	r3, r0
 801347e:	71fb      	strb	r3, [r7, #7]
    int brd = MA_2_BOARD(addr);
 8013480:	79fb      	ldrb	r3, [r7, #7]
 8013482:	10db      	asrs	r3, r3, #3
 8013484:	f003 0307 	and.w	r3, r3, #7
 8013488:	60fb      	str	r3, [r7, #12]
    int nc = addr & 0x07;
 801348a:	79fb      	ldrb	r3, [r7, #7]
 801348c:	f003 0307 	and.w	r3, r3, #7
 8013490:	60bb      	str	r3, [r7, #8]
    return brd*6+nc;
 8013492:	68fa      	ldr	r2, [r7, #12]
 8013494:	4613      	mov	r3, r2
 8013496:	005b      	lsls	r3, r3, #1
 8013498:	4413      	add	r3, r2
 801349a:	005b      	lsls	r3, r3, #1
 801349c:	461a      	mov	r2, r3
 801349e:	68bb      	ldr	r3, [r7, #8]
 80134a0:	4413      	add	r3, r2
}
 80134a2:	4618      	mov	r0, r3
 80134a4:	3714      	adds	r7, #20
 80134a6:	46bd      	mov	sp, r7
 80134a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ac:	4770      	bx	lr
	...

080134b0 <_blk_num_to_blk_addr>:
    int brd = subnum/12;
    return MA_CANTON(brd, 0);
}

static uint8_t _blk_num_to_blk_addr(int blknum)
{
 80134b0:	b480      	push	{r7}
 80134b2:	b085      	sub	sp, #20
 80134b4:	af00      	add	r7, sp, #0
 80134b6:	6078      	str	r0, [r7, #4]
	if (blknum == -1) return 0xFF;
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80134be:	d101      	bne.n	80134c4 <_blk_num_to_blk_addr+0x14>
 80134c0:	23ff      	movs	r3, #255	; 0xff
 80134c2:	e020      	b.n	8013506 <_blk_num_to_blk_addr+0x56>
    int nc = blknum % 6;
 80134c4:	687a      	ldr	r2, [r7, #4]
 80134c6:	4b13      	ldr	r3, [pc, #76]	; (8013514 <_blk_num_to_blk_addr+0x64>)
 80134c8:	fb83 3102 	smull	r3, r1, r3, r2
 80134cc:	17d3      	asrs	r3, r2, #31
 80134ce:	1ac9      	subs	r1, r1, r3
 80134d0:	460b      	mov	r3, r1
 80134d2:	005b      	lsls	r3, r3, #1
 80134d4:	440b      	add	r3, r1
 80134d6:	005b      	lsls	r3, r3, #1
 80134d8:	1ad3      	subs	r3, r2, r3
 80134da:	60fb      	str	r3, [r7, #12]
    int brd = blknum/6;
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	4a0d      	ldr	r2, [pc, #52]	; (8013514 <_blk_num_to_blk_addr+0x64>)
 80134e0:	fb82 1203 	smull	r1, r2, r2, r3
 80134e4:	17db      	asrs	r3, r3, #31
 80134e6:	1ad3      	subs	r3, r2, r3
 80134e8:	60bb      	str	r3, [r7, #8]
    return MA_CANTON(brd, nc);
 80134ea:	68bb      	ldr	r3, [r7, #8]
 80134ec:	00db      	lsls	r3, r3, #3
 80134ee:	b25b      	sxtb	r3, r3
 80134f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80134f4:	b25a      	sxtb	r2, r3
 80134f6:	68fb      	ldr	r3, [r7, #12]
 80134f8:	b25b      	sxtb	r3, r3
 80134fa:	f003 0307 	and.w	r3, r3, #7
 80134fe:	b25b      	sxtb	r3, r3
 8013500:	4313      	orrs	r3, r2
 8013502:	b25b      	sxtb	r3, r3
 8013504:	b2db      	uxtb	r3, r3
}
 8013506:	4618      	mov	r0, r3
 8013508:	3714      	adds	r7, #20
 801350a:	46bd      	mov	sp, r7
 801350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013510:	4770      	bx	lr
 8013512:	bf00      	nop
 8013514:	2aaaaaab 	.word	0x2aaaaaab

08013518 <blk_addr_for_sub_addr>:
int _next_sub_num_for_sub_num(int subnum, uint8_t left);

// ---------------------------------------------------------------------

static inline uint8_t blk_addr_for_sub_addr(uint8_t addr, uint8_t sub)
{
 8013518:	b580      	push	{r7, lr}
 801351a:	b084      	sub	sp, #16
 801351c:	af00      	add	r7, sp, #0
 801351e:	4603      	mov	r3, r0
 8013520:	460a      	mov	r2, r1
 8013522:	71fb      	strb	r3, [r7, #7]
 8013524:	4613      	mov	r3, r2
 8013526:	71bb      	strb	r3, [r7, #6]
    int n = _sub_addr_to_sub_num(addr, sub);
 8013528:	79ba      	ldrb	r2, [r7, #6]
 801352a:	79fb      	ldrb	r3, [r7, #7]
 801352c:	4611      	mov	r1, r2
 801352e:	4618      	mov	r0, r3
 8013530:	f7ff ff84 	bl	801343c <_sub_addr_to_sub_num>
 8013534:	60f8      	str	r0, [r7, #12]
    n = _blk_num_for_sub_num(n);
 8013536:	68f8      	ldr	r0, [r7, #12]
 8013538:	f005 fa5a 	bl	80189f0 <_blk_num_for_sub_num>
 801353c:	60f8      	str	r0, [r7, #12]
    return _blk_num_to_blk_addr(n);
 801353e:	68f8      	ldr	r0, [r7, #12]
 8013540:	f7ff ffb6 	bl	80134b0 <_blk_num_to_blk_addr>
 8013544:	4603      	mov	r3, r0
}
 8013546:	4618      	mov	r0, r3
 8013548:	3710      	adds	r7, #16
 801354a:	46bd      	mov	sp, r7
 801354c:	bd80      	pop	{r7, pc}
	...

08013550 <fatal>:

static void ctrl_reset(void);


static void fatal(void)
{
 8013550:	b580      	push	{r7, lr}
 8013552:	af00      	add	r7, sp, #0
	itm_debug1(DBG_ERR, "fatal", 0);
 8013554:	2200      	movs	r2, #0
 8013556:	4905      	ldr	r1, [pc, #20]	; (801356c <fatal+0x1c>)
 8013558:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 801355c:	f7ff fefc 	bl	8013358 <itm_debug1>
#ifdef TRAIN_SIMU
    abort();
#else
    for (;;) osDelay(1000);
 8013560:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8013564:	f7f9 fc52 	bl	800ce0c <osDelay>
 8013568:	e7fa      	b.n	8013560 <fatal+0x10>
 801356a:	bf00      	nop
 801356c:	08019564 	.word	0x08019564

08013570 <ctrl_reset>:

static void check_behaviour(uint32_t tick);


static void ctrl_reset(void)
{
 8013570:	b480      	push	{r7}
 8013572:	af00      	add	r7, sp, #0
	//TODO
}
 8013574:	bf00      	nop
 8013576:	46bd      	mov	sp, r7
 8013578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801357c:	4770      	bx	lr
	...

08013580 <set_state>:
// ----------------------------------------------------------------------------


static inline void set_state(int tidx, train_ctrl_t *tvar, train_state_t ns)
{
 8013580:	b580      	push	{r7, lr}
 8013582:	b086      	sub	sp, #24
 8013584:	af00      	add	r7, sp, #0
 8013586:	60f8      	str	r0, [r7, #12]
 8013588:	60b9      	str	r1, [r7, #8]
 801358a:	4613      	mov	r3, r2
 801358c:	71fb      	strb	r3, [r7, #7]
	switch (ns) {
 801358e:	79fb      	ldrb	r3, [r7, #7]
 8013590:	2b05      	cmp	r3, #5
 8013592:	d839      	bhi.n	8013608 <set_state+0x88>
 8013594:	a201      	add	r2, pc, #4	; (adr r2, 801359c <set_state+0x1c>)
 8013596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801359a:	bf00      	nop
 801359c:	080135b5 	.word	0x080135b5
 80135a0:	080135c3 	.word	0x080135c3
 80135a4:	080135d1 	.word	0x080135d1
 80135a8:	080135df 	.word	0x080135df
 80135ac:	080135ed 	.word	0x080135ed
 80135b0:	080135fb 	.word	0x080135fb
	case train_off: 			itm_debug1(DBG_CTRL, "ST->OFF", tidx); break;
 80135b4:	68fa      	ldr	r2, [r7, #12]
 80135b6:	4927      	ldr	r1, [pc, #156]	; (8013654 <set_state+0xd4>)
 80135b8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80135bc:	f7ff fecc 	bl	8013358 <itm_debug1>
 80135c0:	e02a      	b.n	8013618 <set_state+0x98>
	case train_running_c1: 		itm_debug1(DBG_CTRL, "ST->RC1", tidx); break;
 80135c2:	68fa      	ldr	r2, [r7, #12]
 80135c4:	4924      	ldr	r1, [pc, #144]	; (8013658 <set_state+0xd8>)
 80135c6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80135ca:	f7ff fec5 	bl	8013358 <itm_debug1>
 80135ce:	e023      	b.n	8013618 <set_state+0x98>
	case train_running_c1c2: 	itm_debug1(DBG_CTRL, "ST->C1C2", tidx); break;
 80135d0:	68fa      	ldr	r2, [r7, #12]
 80135d2:	4922      	ldr	r1, [pc, #136]	; (801365c <set_state+0xdc>)
 80135d4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80135d8:	f7ff febe 	bl	8013358 <itm_debug1>
 80135dc:	e01c      	b.n	8013618 <set_state+0x98>
	case train_station:			itm_debug1(DBG_CTRL, "ST->STA", tidx); break;
 80135de:	68fa      	ldr	r2, [r7, #12]
 80135e0:	491f      	ldr	r1, [pc, #124]	; (8013660 <set_state+0xe0>)
 80135e2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80135e6:	f7ff feb7 	bl	8013358 <itm_debug1>
 80135ea:	e015      	b.n	8013618 <set_state+0x98>
	case train_blk_wait:	 	itm_debug1(DBG_CTRL, "ST->BLKW", tidx); break;
 80135ec:	68fa      	ldr	r2, [r7, #12]
 80135ee:	491d      	ldr	r1, [pc, #116]	; (8013664 <set_state+0xe4>)
 80135f0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80135f4:	f7ff feb0 	bl	8013358 <itm_debug1>
 80135f8:	e00e      	b.n	8013618 <set_state+0x98>
	case train_end_of_track:	itm_debug1(DBG_CTRL, "ST->EOT", tidx); break;
 80135fa:	68fa      	ldr	r2, [r7, #12]
 80135fc:	491a      	ldr	r1, [pc, #104]	; (8013668 <set_state+0xe8>)
 80135fe:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013602:	f7ff fea9 	bl	8013358 <itm_debug1>
 8013606:	e007      	b.n	8013618 <set_state+0x98>
	default: 					itm_debug2(DBG_CTRL, "ST->?", tidx, ns); break;
 8013608:	79fb      	ldrb	r3, [r7, #7]
 801360a:	68fa      	ldr	r2, [r7, #12]
 801360c:	4917      	ldr	r1, [pc, #92]	; (801366c <set_state+0xec>)
 801360e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013612:	f7ff febb 	bl	801338c <itm_debug2>
 8013616:	bf00      	nop
	}
	tvar->_state = ns;
 8013618:	68bb      	ldr	r3, [r7, #8]
 801361a:	79fa      	ldrb	r2, [r7, #7]
 801361c:	705a      	strb	r2, [r3, #1]
	// notif UI
	msg_64_t m;
	m.from = MA_CONTROL_T(tidx);
 801361e:	68fb      	ldr	r3, [r7, #12]
 8013620:	b25b      	sxtb	r3, r3
 8013622:	f003 0307 	and.w	r3, r3, #7
 8013626:	b25b      	sxtb	r3, r3
 8013628:	f063 032f 	orn	r3, r3, #47	; 0x2f
 801362c:	b25b      	sxtb	r3, r3
 801362e:	b2db      	uxtb	r3, r3
 8013630:	747b      	strb	r3, [r7, #17]
	m.to = MA_UI(1); // fix me
 8013632:	2381      	movs	r3, #129	; 0x81
 8013634:	743b      	strb	r3, [r7, #16]
	m.cmd = CMD_TRSTATE_NOTIF;
 8013636:	2326      	movs	r3, #38	; 0x26
 8013638:	74bb      	strb	r3, [r7, #18]
	m.v1u = ns;
 801363a:	79fb      	ldrb	r3, [r7, #7]
 801363c:	b29b      	uxth	r3, r3
 801363e:	82bb      	strh	r3, [r7, #20]
	mqf_write_from_ctrl(&m);
 8013640:	f107 0310 	add.w	r3, r7, #16
 8013644:	4618      	mov	r0, r3
 8013646:	f7ff fee9 	bl	801341c <mqf_write_from_ctrl>
}
 801364a:	bf00      	nop
 801364c:	3718      	adds	r7, #24
 801364e:	46bd      	mov	sp, r7
 8013650:	bd80      	pop	{r7, pc}
 8013652:	bf00      	nop
 8013654:	0801956c 	.word	0x0801956c
 8013658:	08019574 	.word	0x08019574
 801365c:	0801957c 	.word	0x0801957c
 8013660:	08019588 	.word	0x08019588
 8013664:	08019590 	.word	0x08019590
 8013668:	0801959c 	.word	0x0801959c
 801366c:	080195a4 	.word	0x080195a4

08013670 <ctrl_set_mode>:
static void ctrl_set_mode(int trnum, train_mode_t mode)
{
 8013670:	b580      	push	{r7, lr}
 8013672:	b084      	sub	sp, #16
 8013674:	af00      	add	r7, sp, #0
 8013676:	6078      	str	r0, [r7, #4]
 8013678:	460b      	mov	r3, r1
 801367a:	70fb      	strb	r3, [r7, #3]
	itm_debug2(DBG_CTRL, "set mode", trnum, mode);
 801367c:	78fb      	ldrb	r3, [r7, #3]
 801367e:	687a      	ldr	r2, [r7, #4]
 8013680:	4919      	ldr	r1, [pc, #100]	; (80136e8 <ctrl_set_mode+0x78>)
 8013682:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013686:	f7ff fe81 	bl	801338c <itm_debug2>
	if (trctl[trnum]._mode == mode) return;
 801368a:	4918      	ldr	r1, [pc, #96]	; (80136ec <ctrl_set_mode+0x7c>)
 801368c:	687a      	ldr	r2, [r7, #4]
 801368e:	4613      	mov	r3, r2
 8013690:	005b      	lsls	r3, r3, #1
 8013692:	4413      	add	r3, r2
 8013694:	00db      	lsls	r3, r3, #3
 8013696:	440b      	add	r3, r1
 8013698:	781b      	ldrb	r3, [r3, #0]
 801369a:	78fa      	ldrb	r2, [r7, #3]
 801369c:	429a      	cmp	r2, r3
 801369e:	d01f      	beq.n	80136e0 <ctrl_set_mode+0x70>
	trctl[trnum]._mode = mode;
 80136a0:	4912      	ldr	r1, [pc, #72]	; (80136ec <ctrl_set_mode+0x7c>)
 80136a2:	687a      	ldr	r2, [r7, #4]
 80136a4:	4613      	mov	r3, r2
 80136a6:	005b      	lsls	r3, r3, #1
 80136a8:	4413      	add	r3, r2
 80136aa:	00db      	lsls	r3, r3, #3
 80136ac:	440b      	add	r3, r1
 80136ae:	78fa      	ldrb	r2, [r7, #3]
 80136b0:	701a      	strb	r2, [r3, #0]
	// notif UI
	msg_64_t m;
	m.from = MA_CONTROL_T(trnum);
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	b25b      	sxtb	r3, r3
 80136b6:	f003 0307 	and.w	r3, r3, #7
 80136ba:	b25b      	sxtb	r3, r3
 80136bc:	f063 032f 	orn	r3, r3, #47	; 0x2f
 80136c0:	b25b      	sxtb	r3, r3
 80136c2:	b2db      	uxtb	r3, r3
 80136c4:	727b      	strb	r3, [r7, #9]
	m.to = MA_UI(1); // fix me
 80136c6:	2381      	movs	r3, #129	; 0x81
 80136c8:	723b      	strb	r3, [r7, #8]
	m.cmd = CMD_TRMODE_NOTIF;
 80136ca:	2321      	movs	r3, #33	; 0x21
 80136cc:	72bb      	strb	r3, [r7, #10]
	m.v1u = mode;
 80136ce:	78fb      	ldrb	r3, [r7, #3]
 80136d0:	b29b      	uxth	r3, r3
 80136d2:	81bb      	strh	r3, [r7, #12]
	mqf_write_from_ctrl(&m);
 80136d4:	f107 0308 	add.w	r3, r7, #8
 80136d8:	4618      	mov	r0, r3
 80136da:	f7ff fe9f 	bl	801341c <mqf_write_from_ctrl>
 80136de:	e000      	b.n	80136e2 <ctrl_set_mode+0x72>
	if (trctl[trnum]._mode == mode) return;
 80136e0:	bf00      	nop
}
 80136e2:	3710      	adds	r7, #16
 80136e4:	46bd      	mov	sp, r7
 80136e6:	bd80      	pop	{r7, pc}
 80136e8:	080195ac 	.word	0x080195ac
 80136ec:	200051ec 	.word	0x200051ec

080136f0 <ctrl_init>:
}
*/


static void ctrl_init(void)
{
 80136f0:	b580      	push	{r7, lr}
 80136f2:	af00      	add	r7, sp, #0
	memset(trctl, 0, sizeof(train_ctrl_t)*NUM_TRAINS);
 80136f4:	22c0      	movs	r2, #192	; 0xc0
 80136f6:	2100      	movs	r1, #0
 80136f8:	481f      	ldr	r0, [pc, #124]	; (8013778 <ctrl_init+0x88>)
 80136fa:	f005 fcec 	bl	80190d6 <memset>
	ctrl_set_mode(0, train_manual);
 80136fe:	2101      	movs	r1, #1
 8013700:	2000      	movs	r0, #0
 8013702:	f7ff ffb5 	bl	8013670 <ctrl_set_mode>
	ctrl_set_mode(1, train_auto);
 8013706:	2103      	movs	r1, #3
 8013708:	2001      	movs	r0, #1
 801370a:	f7ff ffb1 	bl	8013670 <ctrl_set_mode>
	set_turnout(0, 0);
 801370e:	2100      	movs	r1, #0
 8013710:	2000      	movs	r0, #0
 8013712:	f001 f949 	bl	80149a8 <set_turnout>
	if ((1)) {
		trctl[0].canton1_addr = MA_CANTON(0, 1);//MA_CANTON(0, 1); // initial blk
 8013716:	4b18      	ldr	r3, [pc, #96]	; (8013778 <ctrl_init+0x88>)
 8013718:	2201      	movs	r2, #1
 801371a:	715a      	strb	r2, [r3, #5]
		trctl[0].canton2_addr = 0xFF;
 801371c:	4b16      	ldr	r3, [pc, #88]	; (8013778 <ctrl_init+0x88>)
 801371e:	22ff      	movs	r2, #255	; 0xff
 8013720:	719a      	strb	r2, [r3, #6]
		trctl[0]._dir = 0;
 8013722:	4b15      	ldr	r3, [pc, #84]	; (8013778 <ctrl_init+0x88>)
 8013724:	2200      	movs	r2, #0
 8013726:	711a      	strb	r2, [r3, #4]
		trctl[0].desired_speed = 0;
 8013728:	4b13      	ldr	r3, [pc, #76]	; (8013778 <ctrl_init+0x88>)
 801372a:	2200      	movs	r2, #0
 801372c:	815a      	strh	r2, [r3, #10]
		trctl[0]._target_speed = 0;
 801372e:	4b12      	ldr	r3, [pc, #72]	; (8013778 <ctrl_init+0x88>)
 8013730:	2200      	movs	r2, #0
 8013732:	805a      	strh	r2, [r3, #2]
		set_state(0, &trctl[0], train_station);
 8013734:	2203      	movs	r2, #3
 8013736:	4910      	ldr	r1, [pc, #64]	; (8013778 <ctrl_init+0x88>)
 8013738:	2000      	movs	r0, #0
 801373a:	f7ff ff21 	bl	8013580 <set_state>
		set_block_addr_occupency(trctl[0].canton1_addr, BLK_OCC_STOP);
 801373e:	4b0e      	ldr	r3, [pc, #56]	; (8013778 <ctrl_init+0x88>)
 8013740:	795b      	ldrb	r3, [r3, #5]
 8013742:	2101      	movs	r1, #1
 8013744:	4618      	mov	r0, r3
 8013746:	f000 fa97 	bl	8013c78 <set_block_addr_occupency>

			if ((1)) {
				evt_cmd_set_setdirspeed(1, &trctl[1], 1, 30, 1);
			}
		} else {
			trctl[1].canton1_addr = 0xFF;
 801374a:	4b0b      	ldr	r3, [pc, #44]	; (8013778 <ctrl_init+0x88>)
 801374c:	22ff      	movs	r2, #255	; 0xff
 801374e:	775a      	strb	r2, [r3, #29]
			trctl[1].canton2_addr = 0xFF;
 8013750:	4b09      	ldr	r3, [pc, #36]	; (8013778 <ctrl_init+0x88>)
 8013752:	22ff      	movs	r2, #255	; 0xff
 8013754:	779a      	strb	r2, [r3, #30]
			ctrl_set_mode(1, train_notrunning);
 8013756:	2100      	movs	r1, #0
 8013758:	2001      	movs	r0, #1
 801375a:	f7ff ff89 	bl	8013670 <ctrl_set_mode>
			set_state(1, &trctl[1], train_off);
 801375e:	2200      	movs	r2, #0
 8013760:	4906      	ldr	r1, [pc, #24]	; (801377c <ctrl_init+0x8c>)
 8013762:	2001      	movs	r0, #1
 8013764:	f7ff ff0c 	bl	8013580 <set_state>
			//trctl[1].enabled = 0;
			update_c2_state_limits(0, &trctl[0], upd_init);
 8013768:	2200      	movs	r2, #0
 801376a:	4903      	ldr	r1, [pc, #12]	; (8013778 <ctrl_init+0x88>)
 801376c:	2000      	movs	r0, #0
 801376e:	f000 fd9b 	bl	80142a8 <update_c2_state_limits>

		}
	}
}
 8013772:	bf00      	nop
 8013774:	bd80      	pop	{r7, pc}
 8013776:	bf00      	nop
 8013778:	200051ec 	.word	0x200051ec
 801377c:	20005204 	.word	0x20005204

08013780 <reset_timer>:
// ----------------------------------------------------------------------------
// timers


static void reset_timer(int tidx, train_ctrl_t *tvar, int numtimer)
{
 8013780:	b580      	push	{r7, lr}
 8013782:	b084      	sub	sp, #16
 8013784:	af00      	add	r7, sp, #0
 8013786:	60f8      	str	r0, [r7, #12]
 8013788:	60b9      	str	r1, [r7, #8]
 801378a:	607a      	str	r2, [r7, #4]
	itm_debug2(DBG_CTRL, "reset_timer", tidx, numtimer);
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	68fa      	ldr	r2, [r7, #12]
 8013790:	490b      	ldr	r1, [pc, #44]	; (80137c0 <reset_timer+0x40>)
 8013792:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013796:	f7ff fdf9 	bl	801338c <itm_debug2>
	if (numtimer<0 || numtimer>=NUM_TIMERS) fatal();
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	2b00      	cmp	r3, #0
 801379e:	db02      	blt.n	80137a6 <reset_timer+0x26>
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	2b01      	cmp	r3, #1
 80137a4:	dd01      	ble.n	80137aa <reset_timer+0x2a>
 80137a6:	f7ff fed3 	bl	8013550 <fatal>
	tvar->timertick[numtimer] = 0;
 80137aa:	68bb      	ldr	r3, [r7, #8]
 80137ac:	687a      	ldr	r2, [r7, #4]
 80137ae:	3204      	adds	r2, #4
 80137b0:	2100      	movs	r1, #0
 80137b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80137b6:	bf00      	nop
 80137b8:	3710      	adds	r7, #16
 80137ba:	46bd      	mov	sp, r7
 80137bc:	bd80      	pop	{r7, pc}
 80137be:	bf00      	nop
 80137c0:	080195b8 	.word	0x080195b8

080137c4 <set_timer>:
static void set_timer(int tidx, train_ctrl_t *tvar, int numtimer, uint32_t tval)
{
 80137c4:	b580      	push	{r7, lr}
 80137c6:	b086      	sub	sp, #24
 80137c8:	af02      	add	r7, sp, #8
 80137ca:	60f8      	str	r0, [r7, #12]
 80137cc:	60b9      	str	r1, [r7, #8]
 80137ce:	607a      	str	r2, [r7, #4]
 80137d0:	603b      	str	r3, [r7, #0]
	itm_debug3(DBG_CTRL, "set_timer", tidx, numtimer, tval);
 80137d2:	683b      	ldr	r3, [r7, #0]
 80137d4:	9300      	str	r3, [sp, #0]
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	68fa      	ldr	r2, [r7, #12]
 80137da:	490d      	ldr	r1, [pc, #52]	; (8013810 <set_timer+0x4c>)
 80137dc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80137e0:	f7ff fdf0 	bl	80133c4 <itm_debug3>
	if (numtimer<0 || numtimer>=NUM_TIMERS) fatal();
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	db02      	blt.n	80137f0 <set_timer+0x2c>
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	2b01      	cmp	r3, #1
 80137ee:	dd01      	ble.n	80137f4 <set_timer+0x30>
 80137f0:	f7ff feae 	bl	8013550 <fatal>
	tvar->timertick[numtimer] = HAL_GetTick() + tval;
 80137f4:	f7ee faec 	bl	8001dd0 <HAL_GetTick>
 80137f8:	4602      	mov	r2, r0
 80137fa:	683b      	ldr	r3, [r7, #0]
 80137fc:	18d1      	adds	r1, r2, r3
 80137fe:	68bb      	ldr	r3, [r7, #8]
 8013800:	687a      	ldr	r2, [r7, #4]
 8013802:	3204      	adds	r2, #4
 8013804:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8013808:	bf00      	nop
 801380a:	3710      	adds	r7, #16
 801380c:	46bd      	mov	sp, r7
 801380e:	bd80      	pop	{r7, pc}
 8013810:	080195c4 	.word	0x080195c4

08013814 <check_timers>:

static void check_timers(uint32_t tick)
{
 8013814:	b580      	push	{r7, lr}
 8013816:	b088      	sub	sp, #32
 8013818:	af02      	add	r7, sp, #8
 801381a:	6078      	str	r0, [r7, #4]
	//uint32_t t = HAL_GetTick();
	for (int tidx = 0; tidx<NUM_TRAINS; tidx++) {
 801381c:	2300      	movs	r3, #0
 801381e:	617b      	str	r3, [r7, #20]
 8013820:	e036      	b.n	8013890 <check_timers+0x7c>
		train_ctrl_t *tvar = &trctl[tidx];
 8013822:	697a      	ldr	r2, [r7, #20]
 8013824:	4613      	mov	r3, r2
 8013826:	005b      	lsls	r3, r3, #1
 8013828:	4413      	add	r3, r2
 801382a:	00db      	lsls	r3, r3, #3
 801382c:	4a1c      	ldr	r2, [pc, #112]	; (80138a0 <check_timers+0x8c>)
 801382e:	4413      	add	r3, r2
 8013830:	60fb      	str	r3, [r7, #12]
		for (int j=0; j<NUM_TIMERS; j++) {
 8013832:	2300      	movs	r3, #0
 8013834:	613b      	str	r3, [r7, #16]
 8013836:	e025      	b.n	8013884 <check_timers+0x70>
			uint32_t tv = tvar->timertick[j];
 8013838:	68fb      	ldr	r3, [r7, #12]
 801383a:	693a      	ldr	r2, [r7, #16]
 801383c:	3204      	adds	r2, #4
 801383e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013842:	60bb      	str	r3, [r7, #8]
			if (!tv) continue;
 8013844:	68bb      	ldr	r3, [r7, #8]
 8013846:	2b00      	cmp	r3, #0
 8013848:	d018      	beq.n	801387c <check_timers+0x68>
			if (tv <= tick) {
 801384a:	68ba      	ldr	r2, [r7, #8]
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	429a      	cmp	r2, r3
 8013850:	d815      	bhi.n	801387e <check_timers+0x6a>
				itm_debug3(DBG_CTRL, "tim", tidx, j, tv);
 8013852:	68bb      	ldr	r3, [r7, #8]
 8013854:	9300      	str	r3, [sp, #0]
 8013856:	693b      	ldr	r3, [r7, #16]
 8013858:	697a      	ldr	r2, [r7, #20]
 801385a:	4912      	ldr	r1, [pc, #72]	; (80138a4 <check_timers+0x90>)
 801385c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013860:	f7ff fdb0 	bl	80133c4 <itm_debug3>
				tvar->timertick[j] = 0;
 8013864:	68fb      	ldr	r3, [r7, #12]
 8013866:	693a      	ldr	r2, [r7, #16]
 8013868:	3204      	adds	r2, #4
 801386a:	2100      	movs	r1, #0
 801386c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				evt_timer(tidx, tvar, j);
 8013870:	693a      	ldr	r2, [r7, #16]
 8013872:	68f9      	ldr	r1, [r7, #12]
 8013874:	6978      	ldr	r0, [r7, #20]
 8013876:	f000 fce3 	bl	8014240 <evt_timer>
 801387a:	e000      	b.n	801387e <check_timers+0x6a>
			if (!tv) continue;
 801387c:	bf00      	nop
		for (int j=0; j<NUM_TIMERS; j++) {
 801387e:	693b      	ldr	r3, [r7, #16]
 8013880:	3301      	adds	r3, #1
 8013882:	613b      	str	r3, [r7, #16]
 8013884:	693b      	ldr	r3, [r7, #16]
 8013886:	2b01      	cmp	r3, #1
 8013888:	ddd6      	ble.n	8013838 <check_timers+0x24>
	for (int tidx = 0; tidx<NUM_TRAINS; tidx++) {
 801388a:	697b      	ldr	r3, [r7, #20]
 801388c:	3301      	adds	r3, #1
 801388e:	617b      	str	r3, [r7, #20]
 8013890:	697b      	ldr	r3, [r7, #20]
 8013892:	2b07      	cmp	r3, #7
 8013894:	ddc5      	ble.n	8013822 <check_timers+0xe>
			}
		}
	}
}
 8013896:	bf00      	nop
 8013898:	3718      	adds	r7, #24
 801389a:	46bd      	mov	sp, r7
 801389c:	bd80      	pop	{r7, pc}
 801389e:	bf00      	nop
 80138a0:	200051ec 	.word	0x200051ec
 80138a4:	080195d0 	.word	0x080195d0

080138a8 <sub_presence_changed>:




static void sub_presence_changed(_UNUSED_ uint32_t tick, uint8_t from_addr, uint8_t lsegnum, uint16_t p, int16_t ival)
{
 80138a8:	b580      	push	{r7, lr}
 80138aa:	b08a      	sub	sp, #40	; 0x28
 80138ac:	af02      	add	r7, sp, #8
 80138ae:	6078      	str	r0, [r7, #4]
 80138b0:	4608      	mov	r0, r1
 80138b2:	4611      	mov	r1, r2
 80138b4:	461a      	mov	r2, r3
 80138b6:	4603      	mov	r3, r0
 80138b8:	70fb      	strb	r3, [r7, #3]
 80138ba:	460b      	mov	r3, r1
 80138bc:	70bb      	strb	r3, [r7, #2]
 80138be:	4613      	mov	r3, r2
 80138c0:	803b      	strh	r3, [r7, #0]
	int segnum = _sub_addr_to_sub_num(from_addr, lsegnum);
 80138c2:	78ba      	ldrb	r2, [r7, #2]
 80138c4:	78fb      	ldrb	r3, [r7, #3]
 80138c6:	4611      	mov	r1, r2
 80138c8:	4618      	mov	r0, r3
 80138ca:	f7ff fdb7 	bl	801343c <_sub_addr_to_sub_num>
 80138ce:	6178      	str	r0, [r7, #20]
	itm_debug3(DBG_PRES|DBG_CTRL, "PRC",  p, lsegnum, ival);
 80138d0:	883a      	ldrh	r2, [r7, #0]
 80138d2:	78b9      	ldrb	r1, [r7, #2]
 80138d4:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80138d8:	9300      	str	r3, [sp, #0]
 80138da:	460b      	mov	r3, r1
 80138dc:	4947      	ldr	r1, [pc, #284]	; (80139fc <sub_presence_changed+0x154>)
 80138de:	f44f 6088 	mov.w	r0, #1088	; 0x440
 80138e2:	f7ff fd6f 	bl	80133c4 <itm_debug3>
	if ((segnum<0) || (segnum>11)) return;
 80138e6:	697b      	ldr	r3, [r7, #20]
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	f2c0 8082 	blt.w	80139f2 <sub_presence_changed+0x14a>
 80138ee:	697b      	ldr	r3, [r7, #20]
 80138f0:	2b0b      	cmp	r3, #11
 80138f2:	dc7e      	bgt.n	80139f2 <sub_presence_changed+0x14a>

	uint8_t canton = blk_addr_for_sub_addr(from_addr, segnum);
 80138f4:	697b      	ldr	r3, [r7, #20]
 80138f6:	b2da      	uxtb	r2, r3
 80138f8:	78fb      	ldrb	r3, [r7, #3]
 80138fa:	4611      	mov	r1, r2
 80138fc:	4618      	mov	r0, r3
 80138fe:	f7ff fe0b 	bl	8013518 <blk_addr_for_sub_addr>
 8013902:	4603      	mov	r3, r0
 8013904:	74fb      	strb	r3, [r7, #19]
	if (0xFF == canton) {
 8013906:	7cfb      	ldrb	r3, [r7, #19]
 8013908:	2bff      	cmp	r3, #255	; 0xff
 801390a:	d106      	bne.n	801391a <sub_presence_changed+0x72>
		itm_debug2(DBG_ERR|DBG_CTRL, "blk??", from_addr, segnum);
 801390c:	78fa      	ldrb	r2, [r7, #3]
 801390e:	697b      	ldr	r3, [r7, #20]
 8013910:	493b      	ldr	r1, [pc, #236]	; (8013a00 <sub_presence_changed+0x158>)
 8013912:	483c      	ldr	r0, [pc, #240]	; (8013a04 <sub_presence_changed+0x15c>)
 8013914:	f7ff fd3a 	bl	801338c <itm_debug2>
		return;
 8013918:	e06c      	b.n	80139f4 <sub_presence_changed+0x14c>
	}
	itm_debug3(DBG_PRES|DBG_CTRL, "PRBLK", p, segnum, canton);
 801391a:	883a      	ldrh	r2, [r7, #0]
 801391c:	7cfb      	ldrb	r3, [r7, #19]
 801391e:	9300      	str	r3, [sp, #0]
 8013920:	697b      	ldr	r3, [r7, #20]
 8013922:	4939      	ldr	r1, [pc, #228]	; (8013a08 <sub_presence_changed+0x160>)
 8013924:	f44f 6088 	mov.w	r0, #1088	; 0x440
 8013928:	f7ff fd4c 	bl	80133c4 <itm_debug3>

	int f = 0;
 801392c:	2300      	movs	r3, #0
 801392e:	61fb      	str	r3, [r7, #28]

	for (int tn = 0; tn < NUM_TRAINS; tn++) {
 8013930:	2300      	movs	r3, #0
 8013932:	61bb      	str	r3, [r7, #24]
 8013934:	e050      	b.n	80139d8 <sub_presence_changed+0x130>
		train_ctrl_t *tvar = &trctl[tn];
 8013936:	69ba      	ldr	r2, [r7, #24]
 8013938:	4613      	mov	r3, r2
 801393a:	005b      	lsls	r3, r3, #1
 801393c:	4413      	add	r3, r2
 801393e:	00db      	lsls	r3, r3, #3
 8013940:	4a32      	ldr	r2, [pc, #200]	; (8013a0c <sub_presence_changed+0x164>)
 8013942:	4413      	add	r3, r2
 8013944:	60fb      	str	r3, [r7, #12]
		const train_config_t *tconf = get_train_cnf(tn);
 8013946:	69b8      	ldr	r0, [r7, #24]
 8013948:	f002 fb5c 	bl	8016004 <get_train_cnf>
 801394c:	60b8      	str	r0, [r7, #8]
		// check enabled
		if (!tconf->enabled) continue;
 801394e:	68bb      	ldr	r3, [r7, #8]
 8013950:	7c9b      	ldrb	r3, [r3, #18]
 8013952:	2b00      	cmp	r3, #0
 8013954:	d03c      	beq.n	80139d0 <sub_presence_changed+0x128>
		itm_debug3(DBG_PRES|DBG_CTRL, "prblk?", tn, tvar->canton1_addr, tvar->canton2_addr);
 8013956:	68fb      	ldr	r3, [r7, #12]
 8013958:	795b      	ldrb	r3, [r3, #5]
 801395a:	461a      	mov	r2, r3
 801395c:	68fb      	ldr	r3, [r7, #12]
 801395e:	799b      	ldrb	r3, [r3, #6]
 8013960:	9300      	str	r3, [sp, #0]
 8013962:	4613      	mov	r3, r2
 8013964:	69ba      	ldr	r2, [r7, #24]
 8013966:	492a      	ldr	r1, [pc, #168]	; (8013a10 <sub_presence_changed+0x168>)
 8013968:	f44f 6088 	mov.w	r0, #1088	; 0x440
 801396c:	f7ff fd2a 	bl	80133c4 <itm_debug3>
		if (tvar->canton1_addr == canton) {
 8013970:	68fb      	ldr	r3, [r7, #12]
 8013972:	795b      	ldrb	r3, [r3, #5]
 8013974:	7cfa      	ldrb	r2, [r7, #19]
 8013976:	429a      	cmp	r2, r3
 8013978:	d115      	bne.n	80139a6 <sub_presence_changed+0xfe>
			if (p) {
 801397a:	883b      	ldrh	r3, [r7, #0]
 801397c:	2b00      	cmp	r3, #0
 801397e:	d00b      	beq.n	8013998 <sub_presence_changed+0xf0>
				itm_debug2(DBG_PRES, "?enter c1", tn, segnum);
 8013980:	697b      	ldr	r3, [r7, #20]
 8013982:	69ba      	ldr	r2, [r7, #24]
 8013984:	4923      	ldr	r1, [pc, #140]	; (8013a14 <sub_presence_changed+0x16c>)
 8013986:	2040      	movs	r0, #64	; 0x40
 8013988:	f7ff fd00 	bl	801338c <itm_debug2>
				evt_entered_c1(tn, tvar, 0);
 801398c:	2200      	movs	r2, #0
 801398e:	68f9      	ldr	r1, [r7, #12]
 8013990:	69b8      	ldr	r0, [r7, #24]
 8013992:	f000 fa97 	bl	8013ec4 <evt_entered_c1>
 8013996:	e003      	b.n	80139a0 <sub_presence_changed+0xf8>
			} else {
				evt_leaved_c1(tn, tvar);
 8013998:	68f9      	ldr	r1, [r7, #12]
 801399a:	69b8      	ldr	r0, [r7, #24]
 801399c:	f000 fa4a 	bl	8013e34 <evt_leaved_c1>
			}
			f = 1;
 80139a0:	2301      	movs	r3, #1
 80139a2:	61fb      	str	r3, [r7, #28]
 80139a4:	e015      	b.n	80139d2 <sub_presence_changed+0x12a>
		} else if (tvar->canton2_addr == canton) {
 80139a6:	68fb      	ldr	r3, [r7, #12]
 80139a8:	799b      	ldrb	r3, [r3, #6]
 80139aa:	7cfa      	ldrb	r2, [r7, #19]
 80139ac:	429a      	cmp	r2, r3
 80139ae:	d110      	bne.n	80139d2 <sub_presence_changed+0x12a>
			if (p) {
 80139b0:	883b      	ldrh	r3, [r7, #0]
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d005      	beq.n	80139c2 <sub_presence_changed+0x11a>
				evt_entered_c2(tn, tvar, 0);
 80139b6:	2200      	movs	r2, #0
 80139b8:	68f9      	ldr	r1, [r7, #12]
 80139ba:	69b8      	ldr	r0, [r7, #24]
 80139bc:	f000 f9e6 	bl	8013d8c <evt_entered_c2>
 80139c0:	e003      	b.n	80139ca <sub_presence_changed+0x122>
			} else {
				evt_leaved_c2(tn, tvar);
 80139c2:	68f9      	ldr	r1, [r7, #12]
 80139c4:	69b8      	ldr	r0, [r7, #24]
 80139c6:	f000 fa93 	bl	8013ef0 <evt_leaved_c2>
			}
			f = 1;
 80139ca:	2301      	movs	r3, #1
 80139cc:	61fb      	str	r3, [r7, #28]
 80139ce:	e000      	b.n	80139d2 <sub_presence_changed+0x12a>
		if (!tconf->enabled) continue;
 80139d0:	bf00      	nop
	for (int tn = 0; tn < NUM_TRAINS; tn++) {
 80139d2:	69bb      	ldr	r3, [r7, #24]
 80139d4:	3301      	adds	r3, #1
 80139d6:	61bb      	str	r3, [r7, #24]
 80139d8:	69bb      	ldr	r3, [r7, #24]
 80139da:	2b07      	cmp	r3, #7
 80139dc:	ddab      	ble.n	8013936 <sub_presence_changed+0x8e>
		}
	}
	if (!f) {
 80139de:	69fb      	ldr	r3, [r7, #28]
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d107      	bne.n	80139f4 <sub_presence_changed+0x14c>
		// presence on unexpected canton
		itm_debug2(DBG_ERR|DBG_PRES, "?unexp", segnum, canton);
 80139e4:	7cfb      	ldrb	r3, [r7, #19]
 80139e6:	697a      	ldr	r2, [r7, #20]
 80139e8:	490b      	ldr	r1, [pc, #44]	; (8013a18 <sub_presence_changed+0x170>)
 80139ea:	480c      	ldr	r0, [pc, #48]	; (8013a1c <sub_presence_changed+0x174>)
 80139ec:	f7ff fcce 	bl	801338c <itm_debug2>
 80139f0:	e000      	b.n	80139f4 <sub_presence_changed+0x14c>
	if ((segnum<0) || (segnum>11)) return;
 80139f2:	bf00      	nop
	}
}
 80139f4:	3720      	adds	r7, #32
 80139f6:	46bd      	mov	sp, r7
 80139f8:	bd80      	pop	{r7, pc}
 80139fa:	bf00      	nop
 80139fc:	080195d4 	.word	0x080195d4
 8013a00:	080195d8 	.word	0x080195d8
 8013a04:	80000400 	.word	0x80000400
 8013a08:	080195e0 	.word	0x080195e0
 8013a0c:	200051ec 	.word	0x200051ec
 8013a10:	080195e8 	.word	0x080195e8
 8013a14:	080195f0 	.word	0x080195f0
 8013a18:	080195fc 	.word	0x080195fc
 8013a1c:	80000040 	.word	0x80000040

08013a20 <ctrl_run_tick>:

// ----------------------------------------------------------------------------


void ctrl_run_tick(_UNUSED_ uint32_t notif_flags, uint32_t tick, _UNUSED_ uint32_t dt)
{
 8013a20:	b580      	push	{r7, lr}
 8013a22:	b08c      	sub	sp, #48	; 0x30
 8013a24:	af02      	add	r7, sp, #8
 8013a26:	60f8      	str	r0, [r7, #12]
 8013a28:	60b9      	str	r1, [r7, #8]
 8013a2a:	607a      	str	r2, [r7, #4]
	static int first=1;
	if (first) {
 8013a2c:	4b62      	ldr	r3, [pc, #392]	; (8013bb8 <ctrl_run_tick+0x198>)
 8013a2e:	681b      	ldr	r3, [r3, #0]
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d006      	beq.n	8013a42 <ctrl_run_tick+0x22>
		first = 0;
 8013a34:	4b60      	ldr	r3, [pc, #384]	; (8013bb8 <ctrl_run_tick+0x198>)
 8013a36:	2200      	movs	r2, #0
 8013a38:	601a      	str	r2, [r3, #0]
		ctrl_init();
 8013a3a:	f7ff fe59 	bl	80136f0 <ctrl_init>
		ctrl_reset();
 8013a3e:	f7ff fd97 	bl	8013570 <ctrl_reset>
    }

	check_block_delayed(tick);
 8013a42:	68b8      	ldr	r0, [r7, #8]
 8013a44:	f000 f958 	bl	8013cf8 <check_block_delayed>

	/* process messages */
	for (;;) {
		msg_64_t m;
		int rc = mqf_read_to_ctrl(&m);
 8013a48:	f107 0310 	add.w	r3, r7, #16
 8013a4c:	4618      	mov	r0, r3
 8013a4e:	f7ff fcd5 	bl	80133fc <mqf_read_to_ctrl>
 8013a52:	6278      	str	r0, [r7, #36]	; 0x24
		if (rc) break;
 8013a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d009      	beq.n	8013a6e <ctrl_run_tick+0x4e>
			}
		} else {
			itm_debug1(DBG_MSG|DBG_CTRL, "bad msg", m.to);
		}
	}
	check_timers(tick);
 8013a5a:	68b8      	ldr	r0, [r7, #8]
 8013a5c:	f7ff feda 	bl	8013814 <check_timers>
	check_blk_tick(tick);
 8013a60:	68b8      	ldr	r0, [r7, #8]
 8013a62:	f000 ff59 	bl	8014918 <check_blk_tick>
	check_behaviour(tick);
 8013a66:	68b8      	ldr	r0, [r7, #8]
 8013a68:	f000 ffe0 	bl	8014a2c <check_behaviour>
	//hi_tick(notif_flags, tick, dt);
}
 8013a6c:	e0a0      	b.n	8013bb0 <ctrl_run_tick+0x190>
        switch (m.cmd) {
 8013a6e:	7cbb      	ldrb	r3, [r7, #18]
 8013a70:	2bfc      	cmp	r3, #252	; 0xfc
 8013a72:	d007      	beq.n	8013a84 <ctrl_run_tick+0x64>
 8013a74:	2bfc      	cmp	r3, #252	; 0xfc
 8013a76:	db17      	blt.n	8013aa8 <ctrl_run_tick+0x88>
 8013a78:	3bfe      	subs	r3, #254	; 0xfe
 8013a7a:	2b01      	cmp	r3, #1
 8013a7c:	d814      	bhi.n	8013aa8 <ctrl_run_tick+0x88>
                ctrl_reset(); // untested
 8013a7e:	f7ff fd77 	bl	8013570 <ctrl_reset>
                continue;
 8013a82:	e094      	b.n	8013bae <ctrl_run_tick+0x18e>
            	if (run_mode != m.v1u) {
 8013a84:	4b4d      	ldr	r3, [pc, #308]	; (8013bbc <ctrl_run_tick+0x19c>)
 8013a86:	781b      	ldrb	r3, [r3, #0]
 8013a88:	b29a      	uxth	r2, r3
 8013a8a:	8abb      	ldrh	r3, [r7, #20]
 8013a8c:	429a      	cmp	r2, r3
 8013a8e:	f000 8089 	beq.w	8013ba4 <ctrl_run_tick+0x184>
            		run_mode = m.v1u;
 8013a92:	8abb      	ldrh	r3, [r7, #20]
 8013a94:	b2da      	uxtb	r2, r3
 8013a96:	4b49      	ldr	r3, [pc, #292]	; (8013bbc <ctrl_run_tick+0x19c>)
 8013a98:	701a      	strb	r2, [r3, #0]
            		testerAddr = m.from;
 8013a9a:	7c7a      	ldrb	r2, [r7, #17]
 8013a9c:	4b48      	ldr	r3, [pc, #288]	; (8013bc0 <ctrl_run_tick+0x1a0>)
 8013a9e:	701a      	strb	r2, [r3, #0]
            		first = 1;
 8013aa0:	4b45      	ldr	r3, [pc, #276]	; (8013bb8 <ctrl_run_tick+0x198>)
 8013aa2:	2201      	movs	r2, #1
 8013aa4:	601a      	str	r2, [r3, #0]
                continue;
 8013aa6:	e07d      	b.n	8013ba4 <ctrl_run_tick+0x184>
            	break;
 8013aa8:	bf00      	nop
        if (run_mode != runmode_normal) continue;
 8013aaa:	4b44      	ldr	r3, [pc, #272]	; (8013bbc <ctrl_run_tick+0x19c>)
 8013aac:	781b      	ldrb	r3, [r3, #0]
 8013aae:	2b01      	cmp	r3, #1
 8013ab0:	d17a      	bne.n	8013ba8 <ctrl_run_tick+0x188>
		if (IS_CONTROL_T(m.to)) {
 8013ab2:	7c3b      	ldrb	r3, [r7, #16]
 8013ab4:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8013ab8:	2bd0      	cmp	r3, #208	; 0xd0
 8013aba:	d16b      	bne.n	8013b94 <ctrl_run_tick+0x174>
			int tidx = m.to & 0x7;
 8013abc:	7c3b      	ldrb	r3, [r7, #16]
 8013abe:	f003 0307 	and.w	r3, r3, #7
 8013ac2:	623b      	str	r3, [r7, #32]
			train_ctrl_t *tvar = &trctl[tidx];
 8013ac4:	6a3a      	ldr	r2, [r7, #32]
 8013ac6:	4613      	mov	r3, r2
 8013ac8:	005b      	lsls	r3, r3, #1
 8013aca:	4413      	add	r3, r2
 8013acc:	00db      	lsls	r3, r3, #3
 8013ace:	4a3d      	ldr	r2, [pc, #244]	; (8013bc4 <ctrl_run_tick+0x1a4>)
 8013ad0:	4413      	add	r3, r2
 8013ad2:	61fb      	str	r3, [r7, #28]
			switch (m.cmd) {
 8013ad4:	7cbb      	ldrb	r3, [r7, #18]
 8013ad6:	2b13      	cmp	r3, #19
 8013ad8:	d018      	beq.n	8013b0c <ctrl_run_tick+0xec>
 8013ada:	2b13      	cmp	r3, #19
 8013adc:	dc02      	bgt.n	8013ae4 <ctrl_run_tick+0xc4>
 8013ade:	2b12      	cmp	r3, #18
 8013ae0:	d005      	beq.n	8013aee <ctrl_run_tick+0xce>
				break;
 8013ae2:	e064      	b.n	8013bae <ctrl_run_tick+0x18e>
			switch (m.cmd) {
 8013ae4:	2b17      	cmp	r3, #23
 8013ae6:	d039      	beq.n	8013b5c <ctrl_run_tick+0x13c>
 8013ae8:	2b51      	cmp	r3, #81	; 0x51
 8013aea:	d043      	beq.n	8013b74 <ctrl_run_tick+0x154>
				break;
 8013aec:	e05f      	b.n	8013bae <ctrl_run_tick+0x18e>
				if (ignore_ina_presence) break;
 8013aee:	4b36      	ldr	r3, [pc, #216]	; (8013bc8 <ctrl_run_tick+0x1a8>)
 8013af0:	781b      	ldrb	r3, [r3, #0]
 8013af2:	2b00      	cmp	r3, #0
 8013af4:	d15a      	bne.n	8013bac <ctrl_run_tick+0x18c>
				sub_presence_changed(tick, m.from, m.sub, m.v1u, m.v2);
 8013af6:	7c79      	ldrb	r1, [r7, #17]
 8013af8:	7cfa      	ldrb	r2, [r7, #19]
 8013afa:	8ab8      	ldrh	r0, [r7, #20]
 8013afc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013b00:	9300      	str	r3, [sp, #0]
 8013b02:	4603      	mov	r3, r0
 8013b04:	68b8      	ldr	r0, [r7, #8]
 8013b06:	f7ff fecf 	bl	80138a8 <sub_presence_changed>
				break;
 8013b0a:	e050      	b.n	8013bae <ctrl_run_tick+0x18e>
				itm_debug2(DBG_CTRL,"BEMF/C2", tidx,  m.v1u);
 8013b0c:	8abb      	ldrh	r3, [r7, #20]
 8013b0e:	6a3a      	ldr	r2, [r7, #32]
 8013b10:	492e      	ldr	r1, [pc, #184]	; (8013bcc <ctrl_run_tick+0x1ac>)
 8013b12:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013b16:	f7ff fc39 	bl	801338c <itm_debug2>
				train_ctrl_t *tvar = &trctl[tidx];
 8013b1a:	6a3a      	ldr	r2, [r7, #32]
 8013b1c:	4613      	mov	r3, r2
 8013b1e:	005b      	lsls	r3, r3, #1
 8013b20:	4413      	add	r3, r2
 8013b22:	00db      	lsls	r3, r3, #3
 8013b24:	4a27      	ldr	r2, [pc, #156]	; (8013bc4 <ctrl_run_tick+0x1a4>)
 8013b26:	4413      	add	r3, r2
 8013b28:	61bb      	str	r3, [r7, #24]
				if (m.v1u != tvar->canton2_addr) {
 8013b2a:	8aba      	ldrh	r2, [r7, #20]
 8013b2c:	69bb      	ldr	r3, [r7, #24]
 8013b2e:	799b      	ldrb	r3, [r3, #6]
 8013b30:	b29b      	uxth	r3, r3
 8013b32:	429a      	cmp	r2, r3
 8013b34:	d00c      	beq.n	8013b50 <ctrl_run_tick+0x130>
					itm_debug3(DBG_CTRL, "not c2", tidx, m.v1u, tvar->canton2_addr);
 8013b36:	8abb      	ldrh	r3, [r7, #20]
 8013b38:	461a      	mov	r2, r3
 8013b3a:	69bb      	ldr	r3, [r7, #24]
 8013b3c:	799b      	ldrb	r3, [r3, #6]
 8013b3e:	9300      	str	r3, [sp, #0]
 8013b40:	4613      	mov	r3, r2
 8013b42:	6a3a      	ldr	r2, [r7, #32]
 8013b44:	4922      	ldr	r1, [pc, #136]	; (8013bd0 <ctrl_run_tick+0x1b0>)
 8013b46:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013b4a:	f7ff fc3b 	bl	80133c4 <itm_debug3>
					break;
 8013b4e:	e02e      	b.n	8013bae <ctrl_run_tick+0x18e>
				evt_entered_c2(tidx, tvar, 1);
 8013b50:	2201      	movs	r2, #1
 8013b52:	69b9      	ldr	r1, [r7, #24]
 8013b54:	6a38      	ldr	r0, [r7, #32]
 8013b56:	f000 f919 	bl	8013d8c <evt_entered_c2>
				break;
 8013b5a:	e028      	b.n	8013bae <ctrl_run_tick+0x18e>
				evt_cmd_set_setdirspeed(tidx, tvar, m.v2, m.v1u, 0);
 8013b5c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013b60:	b25a      	sxtb	r2, r3
 8013b62:	8ab9      	ldrh	r1, [r7, #20]
 8013b64:	2300      	movs	r3, #0
 8013b66:	9300      	str	r3, [sp, #0]
 8013b68:	460b      	mov	r3, r1
 8013b6a:	69f9      	ldr	r1, [r7, #28]
 8013b6c:	6a38      	ldr	r0, [r7, #32]
 8013b6e:	f000 fa0d 	bl	8013f8c <evt_cmd_set_setdirspeed>
				break;
 8013b72:	e01c      	b.n	8013bae <ctrl_run_tick+0x18e>
				itm_debug2(DBG_POSE, "Trig", m.v1u, m.v2u);
 8013b74:	8abb      	ldrh	r3, [r7, #20]
 8013b76:	461a      	mov	r2, r3
 8013b78:	8afb      	ldrh	r3, [r7, #22]
 8013b7a:	4916      	ldr	r1, [pc, #88]	; (8013bd4 <ctrl_run_tick+0x1b4>)
 8013b7c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8013b80:	f7ff fc04 	bl	801338c <itm_debug2>
				evt_pose_triggered(tidx, tvar, m.v1u);
 8013b84:	8abb      	ldrh	r3, [r7, #20]
 8013b86:	b2db      	uxtb	r3, r3
 8013b88:	461a      	mov	r2, r3
 8013b8a:	69f9      	ldr	r1, [r7, #28]
 8013b8c:	6a38      	ldr	r0, [r7, #32]
 8013b8e:	f000 fb09 	bl	80141a4 <evt_pose_triggered>
				break;
 8013b92:	e00c      	b.n	8013bae <ctrl_run_tick+0x18e>
			itm_debug1(DBG_MSG|DBG_CTRL, "bad msg", m.to);
 8013b94:	7c3b      	ldrb	r3, [r7, #16]
 8013b96:	461a      	mov	r2, r3
 8013b98:	490f      	ldr	r1, [pc, #60]	; (8013bd8 <ctrl_run_tick+0x1b8>)
 8013b9a:	f240 4002 	movw	r0, #1026	; 0x402
 8013b9e:	f7ff fbdb 	bl	8013358 <itm_debug1>
 8013ba2:	e751      	b.n	8013a48 <ctrl_run_tick+0x28>
                continue;
 8013ba4:	bf00      	nop
 8013ba6:	e74f      	b.n	8013a48 <ctrl_run_tick+0x28>
        if (run_mode != runmode_normal) continue;
 8013ba8:	bf00      	nop
 8013baa:	e74d      	b.n	8013a48 <ctrl_run_tick+0x28>
				if (ignore_ina_presence) break;
 8013bac:	bf00      	nop
	for (;;) {
 8013bae:	e74b      	b.n	8013a48 <ctrl_run_tick+0x28>
}
 8013bb0:	3728      	adds	r7, #40	; 0x28
 8013bb2:	46bd      	mov	sp, r7
 8013bb4:	bd80      	pop	{r7, pc}
 8013bb6:	bf00      	nop
 8013bb8:	20000234 	.word	0x20000234
 8013bbc:	200052ac 	.word	0x200052ac
 8013bc0:	200052ad 	.word	0x200052ad
 8013bc4:	200051ec 	.word	0x200051ec
 8013bc8:	20000232 	.word	0x20000232
 8013bcc:	08019604 	.word	0x08019604
 8013bd0:	0801960c 	.word	0x0801960c
 8013bd4:	08019614 	.word	0x08019614
 8013bd8:	0801961c 	.word	0x0801961c

08013bdc <set_block_num_occupency>:
static uint8_t blk_occup[NUM_CANTONS] = {0}; // TODO 32
static uint8_t occupency_changed = 0;


static void set_block_num_occupency(int blknum, uint8_t v)
{
 8013bdc:	b580      	push	{r7, lr}
 8013bde:	b084      	sub	sp, #16
 8013be0:	af02      	add	r7, sp, #8
 8013be2:	6078      	str	r0, [r7, #4]
 8013be4:	460b      	mov	r3, r1
 8013be6:	70fb      	strb	r3, [r7, #3]
	if (-1 == blknum) fatal();
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013bee:	d101      	bne.n	8013bf4 <set_block_num_occupency+0x18>
 8013bf0:	f7ff fcae 	bl	8013550 <fatal>
	if (blk_occup[blknum] != v) {
 8013bf4:	4a1c      	ldr	r2, [pc, #112]	; (8013c68 <set_block_num_occupency+0x8c>)
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	4413      	add	r3, r2
 8013bfa:	781b      	ldrb	r3, [r3, #0]
 8013bfc:	78fa      	ldrb	r2, [r7, #3]
 8013bfe:	429a      	cmp	r2, r3
 8013c00:	d01e      	beq.n	8013c40 <set_block_num_occupency+0x64>
		if (USE_BLOCK_DELAY_FREE && (v==BLK_OCC_FREE)) {
 8013c02:	78fb      	ldrb	r3, [r7, #3]
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	d113      	bne.n	8013c30 <set_block_num_occupency+0x54>
			if (blk_occup[blknum] >= BLK_OCC_DELAY1) fatal();
 8013c08:	4a17      	ldr	r2, [pc, #92]	; (8013c68 <set_block_num_occupency+0x8c>)
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	4413      	add	r3, r2
 8013c0e:	781b      	ldrb	r3, [r3, #0]
 8013c10:	2b0f      	cmp	r3, #15
 8013c12:	d901      	bls.n	8013c18 <set_block_num_occupency+0x3c>
 8013c14:	f7ff fc9c 	bl	8013550 <fatal>
			blk_occup[blknum] = BLK_OCC_DELAYM;
 8013c18:	4a13      	ldr	r2, [pc, #76]	; (8013c68 <set_block_num_occupency+0x8c>)
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	4413      	add	r3, r2
 8013c1e:	2216      	movs	r2, #22
 8013c20:	701a      	strb	r2, [r3, #0]
			itm_debug1(DBG_CTRL, "delay free", blknum);
 8013c22:	687a      	ldr	r2, [r7, #4]
 8013c24:	4911      	ldr	r1, [pc, #68]	; (8013c6c <set_block_num_occupency+0x90>)
 8013c26:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013c2a:	f7ff fb95 	bl	8013358 <itm_debug1>
 8013c2e:	e007      	b.n	8013c40 <set_block_num_occupency+0x64>
		} else {
			blk_occup[blknum] = v;
 8013c30:	4a0d      	ldr	r2, [pc, #52]	; (8013c68 <set_block_num_occupency+0x8c>)
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	4413      	add	r3, r2
 8013c36:	78fa      	ldrb	r2, [r7, #3]
 8013c38:	701a      	strb	r2, [r3, #0]
			occupency_changed = 1;
 8013c3a:	4b0d      	ldr	r3, [pc, #52]	; (8013c70 <set_block_num_occupency+0x94>)
 8013c3c:	2201      	movs	r2, #1
 8013c3e:	701a      	strb	r2, [r3, #0]
		}
	}
	if ((1)) {
		itm_debug3(DBG_CTRL, "BO123:", blk_occup[0], blk_occup[1], blk_occup[2]);
 8013c40:	4b09      	ldr	r3, [pc, #36]	; (8013c68 <set_block_num_occupency+0x8c>)
 8013c42:	781b      	ldrb	r3, [r3, #0]
 8013c44:	461a      	mov	r2, r3
 8013c46:	4b08      	ldr	r3, [pc, #32]	; (8013c68 <set_block_num_occupency+0x8c>)
 8013c48:	785b      	ldrb	r3, [r3, #1]
 8013c4a:	4619      	mov	r1, r3
 8013c4c:	4b06      	ldr	r3, [pc, #24]	; (8013c68 <set_block_num_occupency+0x8c>)
 8013c4e:	789b      	ldrb	r3, [r3, #2]
 8013c50:	9300      	str	r3, [sp, #0]
 8013c52:	460b      	mov	r3, r1
 8013c54:	4907      	ldr	r1, [pc, #28]	; (8013c74 <set_block_num_occupency+0x98>)
 8013c56:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013c5a:	f7ff fbb3 	bl	80133c4 <itm_debug3>
	}
}
 8013c5e:	bf00      	nop
 8013c60:	3708      	adds	r7, #8
 8013c62:	46bd      	mov	sp, r7
 8013c64:	bd80      	pop	{r7, pc}
 8013c66:	bf00      	nop
 8013c68:	200052b0 	.word	0x200052b0
 8013c6c:	08019624 	.word	0x08019624
 8013c70:	200052b8 	.word	0x200052b8
 8013c74:	08019630 	.word	0x08019630

08013c78 <set_block_addr_occupency>:
static void set_block_addr_occupency(uint8_t blkaddr, uint8_t v)
{
 8013c78:	b580      	push	{r7, lr}
 8013c7a:	b082      	sub	sp, #8
 8013c7c:	af00      	add	r7, sp, #0
 8013c7e:	4603      	mov	r3, r0
 8013c80:	460a      	mov	r2, r1
 8013c82:	71fb      	strb	r3, [r7, #7]
 8013c84:	4613      	mov	r3, r2
 8013c86:	71bb      	strb	r3, [r7, #6]
	set_block_num_occupency(_blk_addr_to_blk_num(blkaddr), v);
 8013c88:	79fb      	ldrb	r3, [r7, #7]
 8013c8a:	4618      	mov	r0, r3
 8013c8c:	f7ff fbf3 	bl	8013476 <_blk_addr_to_blk_num>
 8013c90:	4602      	mov	r2, r0
 8013c92:	79bb      	ldrb	r3, [r7, #6]
 8013c94:	4619      	mov	r1, r3
 8013c96:	4610      	mov	r0, r2
 8013c98:	f7ff ffa0 	bl	8013bdc <set_block_num_occupency>
}
 8013c9c:	bf00      	nop
 8013c9e:	3708      	adds	r7, #8
 8013ca0:	46bd      	mov	sp, r7
 8013ca2:	bd80      	pop	{r7, pc}

08013ca4 <get_block_num_occupency>:

static uint8_t get_block_num_occupency(int blknum)
{
 8013ca4:	b580      	push	{r7, lr}
 8013ca6:	b082      	sub	sp, #8
 8013ca8:	af00      	add	r7, sp, #0
 8013caa:	6078      	str	r0, [r7, #4]
	if (-1 == blknum) fatal();
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013cb2:	d101      	bne.n	8013cb8 <get_block_num_occupency+0x14>
 8013cb4:	f7ff fc4c 	bl	8013550 <fatal>
	return blk_occup[blknum];
 8013cb8:	4a03      	ldr	r2, [pc, #12]	; (8013cc8 <get_block_num_occupency+0x24>)
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	4413      	add	r3, r2
 8013cbe:	781b      	ldrb	r3, [r3, #0]
}
 8013cc0:	4618      	mov	r0, r3
 8013cc2:	3708      	adds	r7, #8
 8013cc4:	46bd      	mov	sp, r7
 8013cc6:	bd80      	pop	{r7, pc}
 8013cc8:	200052b0 	.word	0x200052b0

08013ccc <occupied>:
{
	return get_block_num_occupency(_blk_addr_to_blk_num(blkaddr));
}

static uint8_t occupied(int dir)
{
 8013ccc:	b480      	push	{r7}
 8013cce:	b083      	sub	sp, #12
 8013cd0:	af00      	add	r7, sp, #0
 8013cd2:	6078      	str	r0, [r7, #4]
	if (dir<0) return BLK_OCC_LEFT;
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	da01      	bge.n	8013cde <occupied+0x12>
 8013cda:	2302      	movs	r3, #2
 8013cdc:	e005      	b.n	8013cea <occupied+0x1e>
	if (dir>0) return BLK_OCC_RIGHT;
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	dd01      	ble.n	8013ce8 <occupied+0x1c>
 8013ce4:	2303      	movs	r3, #3
 8013ce6:	e000      	b.n	8013cea <occupied+0x1e>
	return BLK_OCC_STOP;
 8013ce8:	2301      	movs	r3, #1
}
 8013cea:	4618      	mov	r0, r3
 8013cec:	370c      	adds	r7, #12
 8013cee:	46bd      	mov	sp, r7
 8013cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cf4:	4770      	bx	lr
	...

08013cf8 <check_block_delayed>:

static void check_block_delayed(_UNUSED_ uint32_t tick)
{
 8013cf8:	b580      	push	{r7, lr}
 8013cfa:	b084      	sub	sp, #16
 8013cfc:	af00      	add	r7, sp, #0
 8013cfe:	6078      	str	r0, [r7, #4]
	static int cnt = 0;
	cnt++;
	if (cnt % 10) return;
#else
	static uint32_t lastcheck = 0;
	if (tick<lastcheck+100) return;
 8013d00:	4b1e      	ldr	r3, [pc, #120]	; (8013d7c <check_block_delayed+0x84>)
 8013d02:	681b      	ldr	r3, [r3, #0]
 8013d04:	3364      	adds	r3, #100	; 0x64
 8013d06:	687a      	ldr	r2, [r7, #4]
 8013d08:	429a      	cmp	r2, r3
 8013d0a:	d332      	bcc.n	8013d72 <check_block_delayed+0x7a>
	lastcheck = tick;
 8013d0c:	4a1b      	ldr	r2, [pc, #108]	; (8013d7c <check_block_delayed+0x84>)
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	6013      	str	r3, [r2, #0]
#endif
	for (int i=0; i<NUM_CANTONS; i++) {
 8013d12:	2300      	movs	r3, #0
 8013d14:	60fb      	str	r3, [r7, #12]
 8013d16:	e028      	b.n	8013d6a <check_block_delayed+0x72>
		if (blk_occup[i] == BLK_OCC_DELAY1) {
 8013d18:	4a19      	ldr	r2, [pc, #100]	; (8013d80 <check_block_delayed+0x88>)
 8013d1a:	68fb      	ldr	r3, [r7, #12]
 8013d1c:	4413      	add	r3, r2
 8013d1e:	781b      	ldrb	r3, [r3, #0]
 8013d20:	2b10      	cmp	r3, #16
 8013d22:	d10e      	bne.n	8013d42 <check_block_delayed+0x4a>
			itm_debug1(DBG_CTRL, "FREE(d)", i);
 8013d24:	68fa      	ldr	r2, [r7, #12]
 8013d26:	4917      	ldr	r1, [pc, #92]	; (8013d84 <check_block_delayed+0x8c>)
 8013d28:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013d2c:	f7ff fb14 	bl	8013358 <itm_debug1>
			blk_occup[i] = BLK_OCC_FREE;
 8013d30:	4a13      	ldr	r2, [pc, #76]	; (8013d80 <check_block_delayed+0x88>)
 8013d32:	68fb      	ldr	r3, [r7, #12]
 8013d34:	4413      	add	r3, r2
 8013d36:	2200      	movs	r2, #0
 8013d38:	701a      	strb	r2, [r3, #0]
			occupency_changed = 1;
 8013d3a:	4b13      	ldr	r3, [pc, #76]	; (8013d88 <check_block_delayed+0x90>)
 8013d3c:	2201      	movs	r2, #1
 8013d3e:	701a      	strb	r2, [r3, #0]
 8013d40:	e010      	b.n	8013d64 <check_block_delayed+0x6c>
		} else if (blk_occup[i] > BLK_OCC_DELAY1) {
 8013d42:	4a0f      	ldr	r2, [pc, #60]	; (8013d80 <check_block_delayed+0x88>)
 8013d44:	68fb      	ldr	r3, [r7, #12]
 8013d46:	4413      	add	r3, r2
 8013d48:	781b      	ldrb	r3, [r3, #0]
 8013d4a:	2b10      	cmp	r3, #16
 8013d4c:	d90a      	bls.n	8013d64 <check_block_delayed+0x6c>
			blk_occup[i]--;
 8013d4e:	4a0c      	ldr	r2, [pc, #48]	; (8013d80 <check_block_delayed+0x88>)
 8013d50:	68fb      	ldr	r3, [r7, #12]
 8013d52:	4413      	add	r3, r2
 8013d54:	781b      	ldrb	r3, [r3, #0]
 8013d56:	3b01      	subs	r3, #1
 8013d58:	b2d9      	uxtb	r1, r3
 8013d5a:	4a09      	ldr	r2, [pc, #36]	; (8013d80 <check_block_delayed+0x88>)
 8013d5c:	68fb      	ldr	r3, [r7, #12]
 8013d5e:	4413      	add	r3, r2
 8013d60:	460a      	mov	r2, r1
 8013d62:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<NUM_CANTONS; i++) {
 8013d64:	68fb      	ldr	r3, [r7, #12]
 8013d66:	3301      	adds	r3, #1
 8013d68:	60fb      	str	r3, [r7, #12]
 8013d6a:	68fb      	ldr	r3, [r7, #12]
 8013d6c:	2b07      	cmp	r3, #7
 8013d6e:	ddd3      	ble.n	8013d18 <check_block_delayed+0x20>
 8013d70:	e000      	b.n	8013d74 <check_block_delayed+0x7c>
	if (tick<lastcheck+100) return;
 8013d72:	bf00      	nop
		}
	}
}
 8013d74:	3710      	adds	r7, #16
 8013d76:	46bd      	mov	sp, r7
 8013d78:	bd80      	pop	{r7, pc}
 8013d7a:	bf00      	nop
 8013d7c:	200052bc 	.word	0x200052bc
 8013d80:	200052b0 	.word	0x200052b0
 8013d84:	08019638 	.word	0x08019638
 8013d88:	200052b8 	.word	0x200052b8

08013d8c <evt_entered_c2>:




static void evt_entered_c2(int tidx, train_ctrl_t *tvar, uint8_t from_bemf)
{
 8013d8c:	b590      	push	{r4, r7, lr}
 8013d8e:	b085      	sub	sp, #20
 8013d90:	af00      	add	r7, sp, #0
 8013d92:	60f8      	str	r0, [r7, #12]
 8013d94:	60b9      	str	r1, [r7, #8]
 8013d96:	4613      	mov	r3, r2
 8013d98:	71fb      	strb	r3, [r7, #7]
	if (from_bemf && ignore_bemf_presence) return;
 8013d9a:	79fb      	ldrb	r3, [r7, #7]
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	d003      	beq.n	8013da8 <evt_entered_c2+0x1c>
 8013da0:	4b20      	ldr	r3, [pc, #128]	; (8013e24 <evt_entered_c2+0x98>)
 8013da2:	781b      	ldrb	r3, [r3, #0]
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d136      	bne.n	8013e16 <evt_entered_c2+0x8a>
	switch (tvar->_state) {
 8013da8:	68bb      	ldr	r3, [r7, #8]
 8013daa:	785b      	ldrb	r3, [r3, #1]
 8013dac:	2b01      	cmp	r3, #1
 8013dae:	d002      	beq.n	8013db6 <evt_entered_c2+0x2a>
 8013db0:	2b02      	cmp	r3, #2
 8013db2:	d032      	beq.n	8013e1a <evt_entered_c2+0x8e>
 8013db4:	e026      	b.n	8013e04 <evt_entered_c2+0x78>
	case train_running_c1:
		if (from_bemf && ignore_ina_presence) {
 8013db6:	79fb      	ldrb	r3, [r7, #7]
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d00a      	beq.n	8013dd2 <evt_entered_c2+0x46>
 8013dbc:	4b1a      	ldr	r3, [pc, #104]	; (8013e28 <evt_entered_c2+0x9c>)
 8013dbe:	781b      	ldrb	r3, [r3, #0]
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d006      	beq.n	8013dd2 <evt_entered_c2+0x46>
			set_timer(tidx, tvar, TLEAVE_C1, TLEAVE_C1_VALUE);
 8013dc4:	2314      	movs	r3, #20
 8013dc6:	2200      	movs	r2, #0
 8013dc8:	68b9      	ldr	r1, [r7, #8]
 8013dca:	68f8      	ldr	r0, [r7, #12]
 8013dcc:	f7ff fcfa 	bl	80137c4 <set_timer>
 8013dd0:	e005      	b.n	8013dde <evt_entered_c2+0x52>
		} else {
			set_timer(tidx, tvar, TLEAVE_C1, TGUARD_C1_VALUE);
 8013dd2:	2364      	movs	r3, #100	; 0x64
 8013dd4:	2200      	movs	r2, #0
 8013dd6:	68b9      	ldr	r1, [r7, #8]
 8013dd8:	68f8      	ldr	r0, [r7, #12]
 8013dda:	f7ff fcf3 	bl	80137c4 <set_timer>
		}
		set_block_addr_occupency(tvar->canton2_addr, occupied(tvar->_dir));
 8013dde:	68bb      	ldr	r3, [r7, #8]
 8013de0:	799c      	ldrb	r4, [r3, #6]
 8013de2:	68bb      	ldr	r3, [r7, #8]
 8013de4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8013de8:	4618      	mov	r0, r3
 8013dea:	f7ff ff6f 	bl	8013ccc <occupied>
 8013dee:	4603      	mov	r3, r0
 8013df0:	4619      	mov	r1, r3
 8013df2:	4620      	mov	r0, r4
 8013df4:	f7ff ff40 	bl	8013c78 <set_block_addr_occupency>
		set_state(tidx, tvar, train_running_c1c2);
 8013df8:	2202      	movs	r2, #2
 8013dfa:	68b9      	ldr	r1, [r7, #8]
 8013dfc:	68f8      	ldr	r0, [r7, #12]
 8013dfe:	f7ff fbbf 	bl	8013580 <set_state>
		break;
 8013e02:	e00b      	b.n	8013e1c <evt_entered_c2+0x90>
	case train_running_c1c2:
		break;
	default:
		itm_debug2(DBG_ERR|DBG_CTRL, "bad st/1",tidx, tvar->_state);
 8013e04:	68bb      	ldr	r3, [r7, #8]
 8013e06:	785b      	ldrb	r3, [r3, #1]
 8013e08:	68fa      	ldr	r2, [r7, #12]
 8013e0a:	4908      	ldr	r1, [pc, #32]	; (8013e2c <evt_entered_c2+0xa0>)
 8013e0c:	4808      	ldr	r0, [pc, #32]	; (8013e30 <evt_entered_c2+0xa4>)
 8013e0e:	f7ff fabd 	bl	801338c <itm_debug2>
		break;
 8013e12:	bf00      	nop
 8013e14:	e002      	b.n	8013e1c <evt_entered_c2+0x90>
	if (from_bemf && ignore_bemf_presence) return;
 8013e16:	bf00      	nop
 8013e18:	e000      	b.n	8013e1c <evt_entered_c2+0x90>
		break;
 8013e1a:	bf00      	nop
	}
}
 8013e1c:	3714      	adds	r7, #20
 8013e1e:	46bd      	mov	sp, r7
 8013e20:	bd90      	pop	{r4, r7, pc}
 8013e22:	bf00      	nop
 8013e24:	200051eb 	.word	0x200051eb
 8013e28:	20000232 	.word	0x20000232
 8013e2c:	08019640 	.word	0x08019640
 8013e30:	80000400 	.word	0x80000400

08013e34 <evt_leaved_c1>:

static void evt_leaved_c1(int tidx, train_ctrl_t *tvars)
{
 8013e34:	b580      	push	{r7, lr}
 8013e36:	b082      	sub	sp, #8
 8013e38:	af00      	add	r7, sp, #0
 8013e3a:	6078      	str	r0, [r7, #4]
 8013e3c:	6039      	str	r1, [r7, #0]
	itm_debug2(DBG_CTRL, "evt_left_c1", tidx, tvars->_state);
 8013e3e:	683b      	ldr	r3, [r7, #0]
 8013e40:	785b      	ldrb	r3, [r3, #1]
 8013e42:	687a      	ldr	r2, [r7, #4]
 8013e44:	491c      	ldr	r1, [pc, #112]	; (8013eb8 <evt_leaved_c1+0x84>)
 8013e46:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013e4a:	f7ff fa9f 	bl	801338c <itm_debug2>
	switch (tvars->_state) {
 8013e4e:	683b      	ldr	r3, [r7, #0]
 8013e50:	785b      	ldrb	r3, [r3, #1]
 8013e52:	2b02      	cmp	r3, #2
 8013e54:	d123      	bne.n	8013e9e <evt_leaved_c1+0x6a>
	case train_running_c1c2:
		reset_timer(tidx, tvars, TLEAVE_C1);
 8013e56:	2200      	movs	r2, #0
 8013e58:	6839      	ldr	r1, [r7, #0]
 8013e5a:	6878      	ldr	r0, [r7, #4]
 8013e5c:	f7ff fc90 	bl	8013780 <reset_timer>
		set_block_addr_occupency(tvars->canton1_addr, BLK_OCC_FREE);
 8013e60:	683b      	ldr	r3, [r7, #0]
 8013e62:	795b      	ldrb	r3, [r3, #5]
 8013e64:	2100      	movs	r1, #0
 8013e66:	4618      	mov	r0, r3
 8013e68:	f7ff ff06 	bl	8013c78 <set_block_addr_occupency>
		tvars->canton1_addr = tvars->canton2_addr;
 8013e6c:	683b      	ldr	r3, [r7, #0]
 8013e6e:	799a      	ldrb	r2, [r3, #6]
 8013e70:	683b      	ldr	r3, [r7, #0]
 8013e72:	715a      	strb	r2, [r3, #5]
		tvars->canton2_addr = 0xFF;
 8013e74:	683b      	ldr	r3, [r7, #0]
 8013e76:	22ff      	movs	r2, #255	; 0xff
 8013e78:	719a      	strb	r2, [r3, #6]
		set_state(tidx, tvars, train_running_c1);
 8013e7a:	2201      	movs	r2, #1
 8013e7c:	6839      	ldr	r1, [r7, #0]
 8013e7e:	6878      	ldr	r0, [r7, #4]
 8013e80:	f7ff fb7e 	bl	8013580 <set_state>
		update_c2_state_limits(tidx, tvars, upd_c1c2);
 8013e84:	2202      	movs	r2, #2
 8013e86:	6839      	ldr	r1, [r7, #0]
 8013e88:	6878      	ldr	r0, [r7, #4]
 8013e8a:	f000 fa0d 	bl	80142a8 <update_c2_state_limits>
		tvars->behaviour_flags |= BEHAVE_CHBKLK;
 8013e8e:	683b      	ldr	r3, [r7, #0]
 8013e90:	899b      	ldrh	r3, [r3, #12]
 8013e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013e96:	b29a      	uxth	r2, r3
 8013e98:	683b      	ldr	r3, [r7, #0]
 8013e9a:	819a      	strh	r2, [r3, #12]
		break;
 8013e9c:	e007      	b.n	8013eae <evt_leaved_c1+0x7a>
	default:
		itm_debug2(DBG_ERR|DBG_CTRL, "bad st/2",tidx, tvars->_state);
 8013e9e:	683b      	ldr	r3, [r7, #0]
 8013ea0:	785b      	ldrb	r3, [r3, #1]
 8013ea2:	687a      	ldr	r2, [r7, #4]
 8013ea4:	4905      	ldr	r1, [pc, #20]	; (8013ebc <evt_leaved_c1+0x88>)
 8013ea6:	4806      	ldr	r0, [pc, #24]	; (8013ec0 <evt_leaved_c1+0x8c>)
 8013ea8:	f7ff fa70 	bl	801338c <itm_debug2>
		break;
 8013eac:	bf00      	nop
	}
}
 8013eae:	bf00      	nop
 8013eb0:	3708      	adds	r7, #8
 8013eb2:	46bd      	mov	sp, r7
 8013eb4:	bd80      	pop	{r7, pc}
 8013eb6:	bf00      	nop
 8013eb8:	0801964c 	.word	0x0801964c
 8013ebc:	08019658 	.word	0x08019658
 8013ec0:	80000400 	.word	0x80000400

08013ec4 <evt_entered_c1>:

static void evt_entered_c1(int tidx, train_ctrl_t *tvars, _UNUSED_ uint8_t from_bemf)
{
 8013ec4:	b580      	push	{r7, lr}
 8013ec6:	b084      	sub	sp, #16
 8013ec8:	af00      	add	r7, sp, #0
 8013eca:	60f8      	str	r0, [r7, #12]
 8013ecc:	60b9      	str	r1, [r7, #8]
 8013ece:	4613      	mov	r3, r2
 8013ed0:	71fb      	strb	r3, [r7, #7]
	itm_debug2(DBG_CTRL, "enter C1", tidx, tvars->_state);
 8013ed2:	68bb      	ldr	r3, [r7, #8]
 8013ed4:	785b      	ldrb	r3, [r3, #1]
 8013ed6:	68fa      	ldr	r2, [r7, #12]
 8013ed8:	4904      	ldr	r1, [pc, #16]	; (8013eec <evt_entered_c1+0x28>)
 8013eda:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013ede:	f7ff fa55 	bl	801338c <itm_debug2>
}
 8013ee2:	bf00      	nop
 8013ee4:	3710      	adds	r7, #16
 8013ee6:	46bd      	mov	sp, r7
 8013ee8:	bd80      	pop	{r7, pc}
 8013eea:	bf00      	nop
 8013eec:	08019664 	.word	0x08019664

08013ef0 <evt_leaved_c2>:
static void evt_leaved_c2(int tidx, train_ctrl_t *tvar)
{
 8013ef0:	b580      	push	{r7, lr}
 8013ef2:	b082      	sub	sp, #8
 8013ef4:	af00      	add	r7, sp, #0
 8013ef6:	6078      	str	r0, [r7, #4]
 8013ef8:	6039      	str	r1, [r7, #0]
	itm_debug2(DBG_CTRL, "leave C2", tidx, tvar->_state);
 8013efa:	683b      	ldr	r3, [r7, #0]
 8013efc:	785b      	ldrb	r3, [r3, #1]
 8013efe:	687a      	ldr	r2, [r7, #4]
 8013f00:	4904      	ldr	r1, [pc, #16]	; (8013f14 <evt_leaved_c2+0x24>)
 8013f02:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013f06:	f7ff fa41 	bl	801338c <itm_debug2>
}
 8013f0a:	bf00      	nop
 8013f0c:	3708      	adds	r7, #8
 8013f0e:	46bd      	mov	sp, r7
 8013f10:	bd80      	pop	{r7, pc}
 8013f12:	bf00      	nop
 8013f14:	08019670 	.word	0x08019670

08013f18 <evt_tleave>:

static void evt_tleave(int tidx, train_ctrl_t *tvars)
{
 8013f18:	b580      	push	{r7, lr}
 8013f1a:	b082      	sub	sp, #8
 8013f1c:	af00      	add	r7, sp, #0
 8013f1e:	6078      	str	r0, [r7, #4]
 8013f20:	6039      	str	r1, [r7, #0]
	if (ignore_ina_presence) {
 8013f22:	4b15      	ldr	r3, [pc, #84]	; (8013f78 <evt_tleave+0x60>)
 8013f24:	781b      	ldrb	r3, [r3, #0]
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	d00b      	beq.n	8013f42 <evt_tleave+0x2a>
		itm_debug2(DBG_ERR|DBG_CTRL, "TLeave", tidx, tvars->_state);
 8013f2a:	683b      	ldr	r3, [r7, #0]
 8013f2c:	785b      	ldrb	r3, [r3, #1]
 8013f2e:	687a      	ldr	r2, [r7, #4]
 8013f30:	4912      	ldr	r1, [pc, #72]	; (8013f7c <evt_tleave+0x64>)
 8013f32:	4813      	ldr	r0, [pc, #76]	; (8013f80 <evt_tleave+0x68>)
 8013f34:	f7ff fa2a 	bl	801338c <itm_debug2>
		evt_leaved_c1(tidx, tvars);
 8013f38:	6839      	ldr	r1, [r7, #0]
 8013f3a:	6878      	ldr	r0, [r7, #4]
 8013f3c:	f7ff ff7a 	bl	8013e34 <evt_leaved_c1>
		// for now we do the same, but more to do for long trains
		evt_leaved_c1(tidx, tvars);
	} else {
		itm_debug2(DBG_ERR|DBG_CTRL, "TGurd/bdst", tidx, tvars->_state);
	}
}
 8013f40:	e016      	b.n	8013f70 <evt_tleave+0x58>
	} else if (tvars->_state == train_running_c1c2){
 8013f42:	683b      	ldr	r3, [r7, #0]
 8013f44:	785b      	ldrb	r3, [r3, #1]
 8013f46:	2b02      	cmp	r3, #2
 8013f48:	d10b      	bne.n	8013f62 <evt_tleave+0x4a>
		itm_debug2(DBG_ERR|DBG_CTRL, "TGuard", tidx, tvars->_state);
 8013f4a:	683b      	ldr	r3, [r7, #0]
 8013f4c:	785b      	ldrb	r3, [r3, #1]
 8013f4e:	687a      	ldr	r2, [r7, #4]
 8013f50:	490c      	ldr	r1, [pc, #48]	; (8013f84 <evt_tleave+0x6c>)
 8013f52:	480b      	ldr	r0, [pc, #44]	; (8013f80 <evt_tleave+0x68>)
 8013f54:	f7ff fa1a 	bl	801338c <itm_debug2>
		evt_leaved_c1(tidx, tvars);
 8013f58:	6839      	ldr	r1, [r7, #0]
 8013f5a:	6878      	ldr	r0, [r7, #4]
 8013f5c:	f7ff ff6a 	bl	8013e34 <evt_leaved_c1>
}
 8013f60:	e006      	b.n	8013f70 <evt_tleave+0x58>
		itm_debug2(DBG_ERR|DBG_CTRL, "TGurd/bdst", tidx, tvars->_state);
 8013f62:	683b      	ldr	r3, [r7, #0]
 8013f64:	785b      	ldrb	r3, [r3, #1]
 8013f66:	687a      	ldr	r2, [r7, #4]
 8013f68:	4907      	ldr	r1, [pc, #28]	; (8013f88 <evt_tleave+0x70>)
 8013f6a:	4805      	ldr	r0, [pc, #20]	; (8013f80 <evt_tleave+0x68>)
 8013f6c:	f7ff fa0e 	bl	801338c <itm_debug2>
}
 8013f70:	bf00      	nop
 8013f72:	3708      	adds	r7, #8
 8013f74:	46bd      	mov	sp, r7
 8013f76:	bd80      	pop	{r7, pc}
 8013f78:	20000232 	.word	0x20000232
 8013f7c:	0801967c 	.word	0x0801967c
 8013f80:	80000400 	.word	0x80000400
 8013f84:	08019684 	.word	0x08019684
 8013f88:	0801968c 	.word	0x0801968c

08013f8c <evt_cmd_set_setdirspeed>:

static void evt_cmd_set_setdirspeed(int tidx, train_ctrl_t *tvars, int8_t dir, uint16_t tspd, _UNUSED_ uint8_t generated)
{
 8013f8c:	b580      	push	{r7, lr}
 8013f8e:	b088      	sub	sp, #32
 8013f90:	af02      	add	r7, sp, #8
 8013f92:	60f8      	str	r0, [r7, #12]
 8013f94:	60b9      	str	r1, [r7, #8]
 8013f96:	4611      	mov	r1, r2
 8013f98:	461a      	mov	r2, r3
 8013f9a:	460b      	mov	r3, r1
 8013f9c:	71fb      	strb	r3, [r7, #7]
 8013f9e:	4613      	mov	r3, r2
 8013fa0:	80bb      	strh	r3, [r7, #4]
	itm_debug3(DBG_CTRL, "dirspd", tidx, dir, tspd);
 8013fa2:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8013fa6:	88bb      	ldrh	r3, [r7, #4]
 8013fa8:	9300      	str	r3, [sp, #0]
 8013faa:	4613      	mov	r3, r2
 8013fac:	68fa      	ldr	r2, [r7, #12]
 8013fae:	4973      	ldr	r1, [pc, #460]	; (801417c <evt_cmd_set_setdirspeed+0x1f0>)
 8013fb0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013fb4:	f7ff fa06 	bl	80133c4 <itm_debug3>

	if (tvars->_state == train_off) {
 8013fb8:	68bb      	ldr	r3, [r7, #8]
 8013fba:	785b      	ldrb	r3, [r3, #1]
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d105      	bne.n	8013fcc <evt_cmd_set_setdirspeed+0x40>
		itm_debug1(DBG_ERR|DBG_CTRL, "dir ch off", tidx);
 8013fc0:	68fa      	ldr	r2, [r7, #12]
 8013fc2:	496f      	ldr	r1, [pc, #444]	; (8014180 <evt_cmd_set_setdirspeed+0x1f4>)
 8013fc4:	486f      	ldr	r0, [pc, #444]	; (8014184 <evt_cmd_set_setdirspeed+0x1f8>)
 8013fc6:	f7ff f9c7 	bl	8013358 <itm_debug1>
		return;
 8013fca:	e0d4      	b.n	8014176 <evt_cmd_set_setdirspeed+0x1ea>
	}
	int8_t odir = tvars->_dir;
 8013fcc:	68bb      	ldr	r3, [r7, #8]
 8013fce:	791b      	ldrb	r3, [r3, #4]
 8013fd0:	75fb      	strb	r3, [r7, #23]
	uint16_t otspd = tvars->_target_speed;
 8013fd2:	68bb      	ldr	r3, [r7, #8]
 8013fd4:	885b      	ldrh	r3, [r3, #2]
 8013fd6:	82bb      	strh	r3, [r7, #20]

	if (!dir && tspd) {
 8013fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d10a      	bne.n	8013ff6 <evt_cmd_set_setdirspeed+0x6a>
 8013fe0:	88bb      	ldrh	r3, [r7, #4]
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d007      	beq.n	8013ff6 <evt_cmd_set_setdirspeed+0x6a>
		itm_debug2(DBG_ERR|DBG_CTRL, "dir0spd", tidx, tspd);
 8013fe6:	88bb      	ldrh	r3, [r7, #4]
 8013fe8:	68fa      	ldr	r2, [r7, #12]
 8013fea:	4967      	ldr	r1, [pc, #412]	; (8014188 <evt_cmd_set_setdirspeed+0x1fc>)
 8013fec:	4865      	ldr	r0, [pc, #404]	; (8014184 <evt_cmd_set_setdirspeed+0x1f8>)
 8013fee:	f7ff f9cd 	bl	801338c <itm_debug2>
		tspd = 0;
 8013ff2:	2300      	movs	r3, #0
 8013ff4:	80bb      	strh	r3, [r7, #4]
	}
	if (!tspd && dir) {
 8013ff6:	88bb      	ldrh	r3, [r7, #4]
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d10c      	bne.n	8014016 <evt_cmd_set_setdirspeed+0x8a>
 8013ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014000:	2b00      	cmp	r3, #0
 8014002:	d008      	beq.n	8014016 <evt_cmd_set_setdirspeed+0x8a>
		itm_debug2(DBG_ERR|DBG_CTRL, "spd0dir", tidx, dir);
 8014004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014008:	68fa      	ldr	r2, [r7, #12]
 801400a:	4960      	ldr	r1, [pc, #384]	; (801418c <evt_cmd_set_setdirspeed+0x200>)
 801400c:	485d      	ldr	r0, [pc, #372]	; (8014184 <evt_cmd_set_setdirspeed+0x1f8>)
 801400e:	f7ff f9bd 	bl	801338c <itm_debug2>
		dir = 0;
 8014012:	2300      	movs	r3, #0
 8014014:	71fb      	strb	r3, [r7, #7]
	}
	tvars->desired_speed = tspd;
 8014016:	68bb      	ldr	r3, [r7, #8]
 8014018:	88ba      	ldrh	r2, [r7, #4]
 801401a:	815a      	strh	r2, [r3, #10]

	if ((tspd == otspd) && (dir == odir)) {
 801401c:	88ba      	ldrh	r2, [r7, #4]
 801401e:	8abb      	ldrh	r3, [r7, #20]
 8014020:	429a      	cmp	r2, r3
 8014022:	d111      	bne.n	8014048 <evt_cmd_set_setdirspeed+0xbc>
 8014024:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8014028:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801402c:	429a      	cmp	r2, r3
 801402e:	d10b      	bne.n	8014048 <evt_cmd_set_setdirspeed+0xbc>
		// no change
		itm_debug3(DBG_CTRL, "dirspd/=", tidx, dir, tspd);
 8014030:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8014034:	88bb      	ldrh	r3, [r7, #4]
 8014036:	9300      	str	r3, [sp, #0]
 8014038:	4613      	mov	r3, r2
 801403a:	68fa      	ldr	r2, [r7, #12]
 801403c:	4954      	ldr	r1, [pc, #336]	; (8014190 <evt_cmd_set_setdirspeed+0x204>)
 801403e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8014042:	f7ff f9bf 	bl	80133c4 <itm_debug3>
		return;
 8014046:	e096      	b.n	8014176 <evt_cmd_set_setdirspeed+0x1ea>
	}
	if ((tvars->_target_speed != 0) && (tvars->_dir != dir)) {
 8014048:	68bb      	ldr	r3, [r7, #8]
 801404a:	885b      	ldrh	r3, [r3, #2]
 801404c:	2b00      	cmp	r3, #0
 801404e:	d016      	beq.n	801407e <evt_cmd_set_setdirspeed+0xf2>
 8014050:	68bb      	ldr	r3, [r7, #8]
 8014052:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014056:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801405a:	429a      	cmp	r2, r3
 801405c:	d00f      	beq.n	801407e <evt_cmd_set_setdirspeed+0xf2>
		itm_debug3(DBG_ERR|DBG_CTRL, "dir ch mov", tidx, dir, tvars->_target_speed);
 801405e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8014062:	68bb      	ldr	r3, [r7, #8]
 8014064:	885b      	ldrh	r3, [r3, #2]
 8014066:	9300      	str	r3, [sp, #0]
 8014068:	4613      	mov	r3, r2
 801406a:	68fa      	ldr	r2, [r7, #12]
 801406c:	4949      	ldr	r1, [pc, #292]	; (8014194 <evt_cmd_set_setdirspeed+0x208>)
 801406e:	4845      	ldr	r0, [pc, #276]	; (8014184 <evt_cmd_set_setdirspeed+0x1f8>)
 8014070:	f7ff f9a8 	bl	80133c4 <itm_debug3>
		set_state(tidx, tvars, train_station); // say it did stopped
 8014074:	2203      	movs	r2, #3
 8014076:	68b9      	ldr	r1, [r7, #8]
 8014078:	68f8      	ldr	r0, [r7, #12]
 801407a:	f7ff fa81 	bl	8013580 <set_state>
		// change dir while not stopped... what do we do here ?
	}
	if ((tvars->_state == train_station) && dir && tspd) {
 801407e:	68bb      	ldr	r3, [r7, #8]
 8014080:	785b      	ldrb	r3, [r3, #1]
 8014082:	2b03      	cmp	r3, #3
 8014084:	d120      	bne.n	80140c8 <evt_cmd_set_setdirspeed+0x13c>
 8014086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801408a:	2b00      	cmp	r3, #0
 801408c:	d01c      	beq.n	80140c8 <evt_cmd_set_setdirspeed+0x13c>
 801408e:	88bb      	ldrh	r3, [r7, #4]
 8014090:	2b00      	cmp	r3, #0
 8014092:	d019      	beq.n	80140c8 <evt_cmd_set_setdirspeed+0x13c>
		itm_debug1(DBG_CTRL, "quit stop", tidx);
 8014094:	68fa      	ldr	r2, [r7, #12]
 8014096:	4940      	ldr	r1, [pc, #256]	; (8014198 <evt_cmd_set_setdirspeed+0x20c>)
 8014098:	f44f 6080 	mov.w	r0, #1024	; 0x400
 801409c:	f7ff f95c 	bl	8013358 <itm_debug1>
		odir = 0;
 80140a0:	2300      	movs	r3, #0
 80140a2:	75fb      	strb	r3, [r7, #23]
		set_state(tidx, tvars, train_running_c1);
 80140a4:	2201      	movs	r2, #1
 80140a6:	68b9      	ldr	r1, [r7, #8]
 80140a8:	68f8      	ldr	r0, [r7, #12]
 80140aa:	f7ff fa69 	bl	8013580 <set_state>
		set_block_addr_occupency(tvars->canton1_addr, (dir>0)? BLK_OCC_RIGHT:BLK_OCC_LEFT);
 80140ae:	68bb      	ldr	r3, [r7, #8]
 80140b0:	795a      	ldrb	r2, [r3, #5]
 80140b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	dd01      	ble.n	80140be <evt_cmd_set_setdirspeed+0x132>
 80140ba:	2303      	movs	r3, #3
 80140bc:	e000      	b.n	80140c0 <evt_cmd_set_setdirspeed+0x134>
 80140be:	2302      	movs	r3, #2
 80140c0:	4619      	mov	r1, r3
 80140c2:	4610      	mov	r0, r2
 80140c4:	f7ff fdd8 	bl	8013c78 <set_block_addr_occupency>
	}
	if (tvars->_state == train_running_c1c2 && (odir != dir) && dir) {
 80140c8:	68bb      	ldr	r3, [r7, #8]
 80140ca:	785b      	ldrb	r3, [r3, #1]
 80140cc:	2b02      	cmp	r3, #2
 80140ce:	d10e      	bne.n	80140ee <evt_cmd_set_setdirspeed+0x162>
 80140d0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80140d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80140d8:	429a      	cmp	r2, r3
 80140da:	d008      	beq.n	80140ee <evt_cmd_set_setdirspeed+0x162>
 80140dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80140e0:	2b00      	cmp	r3, #0
 80140e2:	d004      	beq.n	80140ee <evt_cmd_set_setdirspeed+0x162>
		// special care here TODO when reversing change while in c1 to c2 transition
		// TODO
		itm_debug1(DBG_ERR|DBG_CTRL, "c1c2 rev!", tidx);
 80140e4:	68fa      	ldr	r2, [r7, #12]
 80140e6:	492d      	ldr	r1, [pc, #180]	; (801419c <evt_cmd_set_setdirspeed+0x210>)
 80140e8:	4826      	ldr	r0, [pc, #152]	; (8014184 <evt_cmd_set_setdirspeed+0x1f8>)
 80140ea:	f7ff f935 	bl	8013358 <itm_debug1>
	}

	if (dir != odir) {
 80140ee:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80140f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80140f6:	429a      	cmp	r2, r3
 80140f8:	d025      	beq.n	8014146 <evt_cmd_set_setdirspeed+0x1ba>
		tvars->_dir = dir;
 80140fa:	68bb      	ldr	r3, [r7, #8]
 80140fc:	79fa      	ldrb	r2, [r7, #7]
 80140fe:	711a      	strb	r2, [r3, #4]
		if (!dir) {
 8014100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014104:	2b00      	cmp	r3, #0
 8014106:	d10c      	bne.n	8014122 <evt_cmd_set_setdirspeed+0x196>
			itm_debug1(DBG_CTRL, "stopping", tidx);
 8014108:	68fa      	ldr	r2, [r7, #12]
 801410a:	4925      	ldr	r1, [pc, #148]	; (80141a0 <evt_cmd_set_setdirspeed+0x214>)
 801410c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8014110:	f7ff f922 	bl	8013358 <itm_debug1>
			set_block_addr_occupency(tvars->canton1_addr, BLK_OCC_STOP);
 8014114:	68bb      	ldr	r3, [r7, #8]
 8014116:	795b      	ldrb	r3, [r3, #5]
 8014118:	2101      	movs	r1, #1
 801411a:	4618      	mov	r0, r3
 801411c:	f7ff fdac 	bl	8013c78 <set_block_addr_occupency>
 8014120:	e00c      	b.n	801413c <evt_cmd_set_setdirspeed+0x1b0>
		} else {
			set_block_addr_occupency(tvars->canton1_addr, (dir>0)? BLK_OCC_RIGHT:BLK_OCC_LEFT);
 8014122:	68bb      	ldr	r3, [r7, #8]
 8014124:	795a      	ldrb	r2, [r3, #5]
 8014126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801412a:	2b00      	cmp	r3, #0
 801412c:	dd01      	ble.n	8014132 <evt_cmd_set_setdirspeed+0x1a6>
 801412e:	2303      	movs	r3, #3
 8014130:	e000      	b.n	8014134 <evt_cmd_set_setdirspeed+0x1a8>
 8014132:	2302      	movs	r3, #2
 8014134:	4619      	mov	r1, r3
 8014136:	4610      	mov	r0, r2
 8014138:	f7ff fd9e 	bl	8013c78 <set_block_addr_occupency>
		}
		update_c2_state_limits(tidx, tvars, upd_change_dir);
 801413c:	2201      	movs	r2, #1
 801413e:	68b9      	ldr	r1, [r7, #8]
 8014140:	68f8      	ldr	r0, [r7, #12]
 8014142:	f000 f8b1 	bl	80142a8 <update_c2_state_limits>
	}

	ctrl_set_dir(tidx, tvars, dir, 0);
 8014146:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801414a:	2300      	movs	r3, #0
 801414c:	68b9      	ldr	r1, [r7, #8]
 801414e:	68f8      	ldr	r0, [r7, #12]
 8014150:	f000 fb42 	bl	80147d8 <ctrl_set_dir>

	if (tvars->_mode != train_fullmanual) {
 8014154:	68bb      	ldr	r3, [r7, #8]
 8014156:	781b      	ldrb	r3, [r3, #0]
 8014158:	2b02      	cmp	r3, #2
 801415a:	d006      	beq.n	801416a <evt_cmd_set_setdirspeed+0x1de>
		tspd = MIN(tvars->spd_limit, tspd);
 801415c:	68bb      	ldr	r3, [r7, #8]
 801415e:	891b      	ldrh	r3, [r3, #8]
 8014160:	88ba      	ldrh	r2, [r7, #4]
 8014162:	4293      	cmp	r3, r2
 8014164:	bf28      	it	cs
 8014166:	4613      	movcs	r3, r2
 8014168:	80bb      	strh	r3, [r7, #4]
	}
	//ctrl_set_status(tidx, tspd ? train_running : train_station);
	ctrl_set_tspeed(tidx, tvars, tspd);
 801416a:	88bb      	ldrh	r3, [r7, #4]
 801416c:	461a      	mov	r2, r3
 801416e:	68b9      	ldr	r1, [r7, #8]
 8014170:	68f8      	ldr	r0, [r7, #12]
 8014172:	f000 fadd 	bl	8014730 <ctrl_set_tspeed>
}
 8014176:	3718      	adds	r7, #24
 8014178:	46bd      	mov	sp, r7
 801417a:	bd80      	pop	{r7, pc}
 801417c:	08019698 	.word	0x08019698
 8014180:	080196a0 	.word	0x080196a0
 8014184:	80000400 	.word	0x80000400
 8014188:	080196ac 	.word	0x080196ac
 801418c:	080196b4 	.word	0x080196b4
 8014190:	080196bc 	.word	0x080196bc
 8014194:	080196c8 	.word	0x080196c8
 8014198:	080196d4 	.word	0x080196d4
 801419c:	080196e0 	.word	0x080196e0
 80141a0:	080196ec 	.word	0x080196ec

080141a4 <evt_pose_triggered>:


static void evt_pose_triggered(int tidx, train_ctrl_t *tvar, uint8_t c_addr)
{
 80141a4:	b580      	push	{r7, lr}
 80141a6:	b086      	sub	sp, #24
 80141a8:	af02      	add	r7, sp, #8
 80141aa:	60f8      	str	r0, [r7, #12]
 80141ac:	60b9      	str	r1, [r7, #8]
 80141ae:	4613      	mov	r3, r2
 80141b0:	71fb      	strb	r3, [r7, #7]
	itm_debug3(DBG_CTRL, "pose trgd", tidx, c_addr, tvar->_state);
 80141b2:	79fa      	ldrb	r2, [r7, #7]
 80141b4:	68bb      	ldr	r3, [r7, #8]
 80141b6:	785b      	ldrb	r3, [r3, #1]
 80141b8:	9300      	str	r3, [sp, #0]
 80141ba:	4613      	mov	r3, r2
 80141bc:	68fa      	ldr	r2, [r7, #12]
 80141be:	491a      	ldr	r1, [pc, #104]	; (8014228 <evt_pose_triggered+0x84>)
 80141c0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80141c4:	f7ff f8fe 	bl	80133c4 <itm_debug3>
	if (0==tidx) {
 80141c8:	68fb      	ldr	r3, [r7, #12]
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d107      	bne.n	80141de <evt_pose_triggered+0x3a>
		itm_debug2(DBG_CTRL, "----trg0", c_addr, tvar->_state);
 80141ce:	79fa      	ldrb	r2, [r7, #7]
 80141d0:	68bb      	ldr	r3, [r7, #8]
 80141d2:	785b      	ldrb	r3, [r3, #1]
 80141d4:	4915      	ldr	r1, [pc, #84]	; (801422c <evt_pose_triggered+0x88>)
 80141d6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80141da:	f7ff f8d7 	bl	801338c <itm_debug2>
	}
	switch (tvar->_state) {
 80141de:	68bb      	ldr	r3, [r7, #8]
 80141e0:	785b      	ldrb	r3, [r3, #1]
 80141e2:	2b01      	cmp	r3, #1
 80141e4:	d115      	bne.n	8014212 <evt_pose_triggered+0x6e>
	case train_running_c1:
		if (c_addr == tvar->canton1_addr) {
 80141e6:	68bb      	ldr	r3, [r7, #8]
 80141e8:	795b      	ldrb	r3, [r3, #5]
 80141ea:	79fa      	ldrb	r2, [r7, #7]
 80141ec:	429a      	cmp	r2, r3
 80141ee:	d105      	bne.n	80141fc <evt_pose_triggered+0x58>
			update_c2_state_limits(tidx, tvar, upd_pose_trig);
 80141f0:	2203      	movs	r2, #3
 80141f2:	68b9      	ldr	r1, [r7, #8]
 80141f4:	68f8      	ldr	r0, [r7, #12]
 80141f6:	f000 f857 	bl	80142a8 <update_c2_state_limits>
			//hi_pose_triggered(tidx, tvar, _blk_addr_to_blk_num(c_addr));
			// TODO
		} else {
			itm_debug3(DBG_ERR|DBG_POSE|DBG_CTRL, "ptrg bad", tidx, c_addr, tvar->canton1_addr);
		}
		break;
 80141fa:	e011      	b.n	8014220 <evt_pose_triggered+0x7c>
			itm_debug3(DBG_ERR|DBG_POSE|DBG_CTRL, "ptrg bad", tidx, c_addr, tvar->canton1_addr);
 80141fc:	79fa      	ldrb	r2, [r7, #7]
 80141fe:	68bb      	ldr	r3, [r7, #8]
 8014200:	795b      	ldrb	r3, [r3, #5]
 8014202:	9300      	str	r3, [sp, #0]
 8014204:	4613      	mov	r3, r2
 8014206:	68fa      	ldr	r2, [r7, #12]
 8014208:	4909      	ldr	r1, [pc, #36]	; (8014230 <evt_pose_triggered+0x8c>)
 801420a:	480a      	ldr	r0, [pc, #40]	; (8014234 <evt_pose_triggered+0x90>)
 801420c:	f7ff f8da 	bl	80133c4 <itm_debug3>
		break;
 8014210:	e006      	b.n	8014220 <evt_pose_triggered+0x7c>
	default:
		itm_debug2(DBG_ERR|DBG_CTRL, "bad st/3",tidx, tvar->_state);
 8014212:	68bb      	ldr	r3, [r7, #8]
 8014214:	785b      	ldrb	r3, [r3, #1]
 8014216:	68fa      	ldr	r2, [r7, #12]
 8014218:	4907      	ldr	r1, [pc, #28]	; (8014238 <evt_pose_triggered+0x94>)
 801421a:	4808      	ldr	r0, [pc, #32]	; (801423c <evt_pose_triggered+0x98>)
 801421c:	f7ff f8b6 	bl	801338c <itm_debug2>
	}
}
 8014220:	bf00      	nop
 8014222:	3710      	adds	r7, #16
 8014224:	46bd      	mov	sp, r7
 8014226:	bd80      	pop	{r7, pc}
 8014228:	080196f8 	.word	0x080196f8
 801422c:	08019704 	.word	0x08019704
 8014230:	08019710 	.word	0x08019710
 8014234:	80002400 	.word	0x80002400
 8014238:	0801971c 	.word	0x0801971c
 801423c:	80000400 	.word	0x80000400

08014240 <evt_timer>:




static void evt_timer(int tidx, train_ctrl_t *tvar, int tnum)
{
 8014240:	b580      	push	{r7, lr}
 8014242:	b084      	sub	sp, #16
 8014244:	af00      	add	r7, sp, #0
 8014246:	60f8      	str	r0, [r7, #12]
 8014248:	60b9      	str	r1, [r7, #8]
 801424a:	607a      	str	r2, [r7, #4]
	itm_debug2(DBG_CTRL, "timer evt", tidx, tnum);
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	68fa      	ldr	r2, [r7, #12]
 8014250:	4912      	ldr	r1, [pc, #72]	; (801429c <evt_timer+0x5c>)
 8014252:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8014256:	f7ff f899 	bl	801338c <itm_debug2>
	switch (tnum) {
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	2b00      	cmp	r3, #0
 801425e:	d002      	beq.n	8014266 <evt_timer+0x26>
 8014260:	2b01      	cmp	r3, #1
 8014262:	d005      	beq.n	8014270 <evt_timer+0x30>
 8014264:	e00c      	b.n	8014280 <evt_timer+0x40>
	case TLEAVE_C1:
		evt_tleave(tidx, tvar);
 8014266:	68b9      	ldr	r1, [r7, #8]
 8014268:	68f8      	ldr	r0, [r7, #12]
 801426a:	f7ff fe55 	bl	8013f18 <evt_tleave>
		break;
 801426e:	e010      	b.n	8014292 <evt_timer+0x52>
	case TBEHAVE:
		tvar->behaviour_flags |= BEHAVE_TBEHAVE;
 8014270:	68bb      	ldr	r3, [r7, #8]
 8014272:	899b      	ldrh	r3, [r3, #12]
 8014274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014278:	b29a      	uxth	r2, r3
 801427a:	68bb      	ldr	r3, [r7, #8]
 801427c:	819a      	strh	r2, [r3, #12]
		break;
 801427e:	e008      	b.n	8014292 <evt_timer+0x52>
	default:
		itm_debug2(DBG_ERR|DBG_CTRL, "?TIM", tidx, tnum);
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	68fa      	ldr	r2, [r7, #12]
 8014284:	4906      	ldr	r1, [pc, #24]	; (80142a0 <evt_timer+0x60>)
 8014286:	4807      	ldr	r0, [pc, #28]	; (80142a4 <evt_timer+0x64>)
 8014288:	f7ff f880 	bl	801338c <itm_debug2>
		fatal();
 801428c:	f7ff f960 	bl	8013550 <fatal>
		break;
 8014290:	bf00      	nop
	}
}
 8014292:	bf00      	nop
 8014294:	3710      	adds	r7, #16
 8014296:	46bd      	mov	sp, r7
 8014298:	bd80      	pop	{r7, pc}
 801429a:	bf00      	nop
 801429c:	08019728 	.word	0x08019728
 80142a0:	08019734 	.word	0x08019734
 80142a4:	80000400 	.word	0x80000400

080142a8 <update_c2_state_limits>:




static void update_c2_state_limits(int tidx, train_ctrl_t *tvars, update_reason_t updreason)
{
 80142a8:	b580      	push	{r7, lr}
 80142aa:	b092      	sub	sp, #72	; 0x48
 80142ac:	af02      	add	r7, sp, #8
 80142ae:	60f8      	str	r0, [r7, #12]
 80142b0:	60b9      	str	r1, [r7, #8]
 80142b2:	4613      	mov	r3, r2
 80142b4:	71fb      	strb	r3, [r7, #7]
	itm_debug3(DBG_CTRLHI, "UPDC2", tidx, tvars->canton1_addr, updreason);
 80142b6:	68bb      	ldr	r3, [r7, #8]
 80142b8:	795b      	ldrb	r3, [r3, #5]
 80142ba:	461a      	mov	r2, r3
 80142bc:	79fb      	ldrb	r3, [r7, #7]
 80142be:	9300      	str	r3, [sp, #0]
 80142c0:	4613      	mov	r3, r2
 80142c2:	68fa      	ldr	r2, [r7, #12]
 80142c4:	4998      	ldr	r1, [pc, #608]	; (8014528 <update_c2_state_limits+0x280>)
 80142c6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80142ca:	f7ff f87b 	bl	80133c4 <itm_debug3>
	uint8_t c2addr = 0xFF;
 80142ce:	23ff      	movs	r3, #255	; 0xff
 80142d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint16_t olim = tvars->spd_limit;
 80142d4:	68bb      	ldr	r3, [r7, #8]
 80142d6:	891b      	ldrh	r3, [r3, #8]
 80142d8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint32_t posetval = 0;
 80142da:	2300      	movs	r3, #0
 80142dc:	63bb      	str	r3, [r7, #56]	; 0x38

	if (updreason == upd_pose_trig) tvars->behaviour_flags |= BEHAVE_PTRIG;
 80142de:	79fb      	ldrb	r3, [r7, #7]
 80142e0:	2b03      	cmp	r3, #3
 80142e2:	d106      	bne.n	80142f2 <update_c2_state_limits+0x4a>
 80142e4:	68bb      	ldr	r3, [r7, #8]
 80142e6:	899b      	ldrh	r3, [r3, #12]
 80142e8:	f043 0320 	orr.w	r3, r3, #32
 80142ec:	b29a      	uxth	r2, r3
 80142ee:	68bb      	ldr	r3, [r7, #8]
 80142f0:	819a      	strh	r2, [r3, #12]

	if ((tidx==1) && (tvars->canton1_addr==0x02) && (tvars->canton2_addr==0x01)) {
 80142f2:	68fb      	ldr	r3, [r7, #12]
 80142f4:	2b01      	cmp	r3, #1
 80142f6:	d10d      	bne.n	8014314 <update_c2_state_limits+0x6c>
 80142f8:	68bb      	ldr	r3, [r7, #8]
 80142fa:	795b      	ldrb	r3, [r3, #5]
 80142fc:	2b02      	cmp	r3, #2
 80142fe:	d109      	bne.n	8014314 <update_c2_state_limits+0x6c>
 8014300:	68bb      	ldr	r3, [r7, #8]
 8014302:	799b      	ldrb	r3, [r3, #6]
 8014304:	2b01      	cmp	r3, #1
 8014306:	d105      	bne.n	8014314 <update_c2_state_limits+0x6c>
		itm_debug1(DBG_CTRL, "hop", tidx);
 8014308:	68fa      	ldr	r2, [r7, #12]
 801430a:	4988      	ldr	r1, [pc, #544]	; (801452c <update_c2_state_limits+0x284>)
 801430c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8014310:	f7ff f822 	bl	8013358 <itm_debug1>
	}
	switch (tvars->_state) {
 8014314:	68bb      	ldr	r3, [r7, #8]
 8014316:	785b      	ldrb	r3, [r3, #1]
 8014318:	2b00      	cmp	r3, #0
 801431a:	d007      	beq.n	801432c <update_c2_state_limits+0x84>
 801431c:	2b03      	cmp	r3, #3
 801431e:	d005      	beq.n	801432c <update_c2_state_limits+0x84>
		tvars->_target_speed = 0;
		if (tvars->canton2_addr != 0xFF) set_block_addr_occupency(tvars->canton2_addr, BLK_OCC_FREE);
		tvars->canton2_addr = 0xFF;
		goto sendlow;
	default:
		break;
 8014320:	bf00      	nop
	}
	if (tvars->canton1_addr == 0xFF) {
 8014322:	68bb      	ldr	r3, [r7, #8]
 8014324:	795b      	ldrb	r3, [r3, #5]
 8014326:	2bff      	cmp	r3, #255	; 0xff
 8014328:	d11a      	bne.n	8014360 <update_c2_state_limits+0xb8>
 801432a:	e013      	b.n	8014354 <update_c2_state_limits+0xac>
		tvars->_dir = 0;
 801432c:	68bb      	ldr	r3, [r7, #8]
 801432e:	2200      	movs	r2, #0
 8014330:	711a      	strb	r2, [r3, #4]
		tvars->_target_speed = 0;
 8014332:	68bb      	ldr	r3, [r7, #8]
 8014334:	2200      	movs	r2, #0
 8014336:	805a      	strh	r2, [r3, #2]
		if (tvars->canton2_addr != 0xFF) set_block_addr_occupency(tvars->canton2_addr, BLK_OCC_FREE);
 8014338:	68bb      	ldr	r3, [r7, #8]
 801433a:	799b      	ldrb	r3, [r3, #6]
 801433c:	2bff      	cmp	r3, #255	; 0xff
 801433e:	d005      	beq.n	801434c <update_c2_state_limits+0xa4>
 8014340:	68bb      	ldr	r3, [r7, #8]
 8014342:	799b      	ldrb	r3, [r3, #6]
 8014344:	2100      	movs	r1, #0
 8014346:	4618      	mov	r0, r3
 8014348:	f7ff fc96 	bl	8013c78 <set_block_addr_occupency>
		tvars->canton2_addr = 0xFF;
 801434c:	68bb      	ldr	r3, [r7, #8]
 801434e:	22ff      	movs	r2, #255	; 0xff
 8014350:	719a      	strb	r2, [r3, #6]
		goto sendlow;
 8014352:	e157      	b.n	8014604 <update_c2_state_limits+0x35c>
		itm_debug1(DBG_ERR|DBG_CTRL, "*** NO C1", tidx);
 8014354:	68fa      	ldr	r2, [r7, #12]
 8014356:	4976      	ldr	r1, [pc, #472]	; (8014530 <update_c2_state_limits+0x288>)
 8014358:	4876      	ldr	r0, [pc, #472]	; (8014534 <update_c2_state_limits+0x28c>)
 801435a:	f7fe fffd 	bl	8013358 <itm_debug1>
		return;
 801435e:	e1d9      	b.n	8014714 <update_c2_state_limits+0x46c>
	}
	if (!tvars->_dir) {
 8014360:	68bb      	ldr	r3, [r7, #8]
 8014362:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014366:	2b00      	cmp	r3, #0
 8014368:	d11c      	bne.n	80143a4 <update_c2_state_limits+0xfc>
		set_state(tidx, tvars, train_station);
 801436a:	2203      	movs	r2, #3
 801436c:	68b9      	ldr	r1, [r7, #8]
 801436e:	68f8      	ldr	r0, [r7, #12]
 8014370:	f7ff f906 	bl	8013580 <set_state>
		tvars->behaviour_flags |= BEHAVE_STOPPED;
 8014374:	68bb      	ldr	r3, [r7, #8]
 8014376:	899b      	ldrh	r3, [r3, #12]
 8014378:	f043 0302 	orr.w	r3, r3, #2
 801437c:	b29a      	uxth	r2, r3
 801437e:	68bb      	ldr	r3, [r7, #8]
 8014380:	819a      	strh	r2, [r3, #12]
		tvars->_target_speed = 0;
 8014382:	68bb      	ldr	r3, [r7, #8]
 8014384:	2200      	movs	r2, #0
 8014386:	805a      	strh	r2, [r3, #2]
		if (tvars->canton2_addr != 0xFF) set_block_addr_occupency(tvars->canton2_addr, BLK_OCC_FREE);
 8014388:	68bb      	ldr	r3, [r7, #8]
 801438a:	799b      	ldrb	r3, [r3, #6]
 801438c:	2bff      	cmp	r3, #255	; 0xff
 801438e:	d005      	beq.n	801439c <update_c2_state_limits+0xf4>
 8014390:	68bb      	ldr	r3, [r7, #8]
 8014392:	799b      	ldrb	r3, [r3, #6]
 8014394:	2100      	movs	r1, #0
 8014396:	4618      	mov	r0, r3
 8014398:	f7ff fc6e 	bl	8013c78 <set_block_addr_occupency>
		tvars->canton2_addr = 0xFF;
 801439c:	68bb      	ldr	r3, [r7, #8]
 801439e:	22ff      	movs	r2, #255	; 0xff
 80143a0:	719a      	strb	r2, [r3, #6]
		goto sendlow;
 80143a2:	e12f      	b.n	8014604 <update_c2_state_limits+0x35c>
	}
	int c1num = _blk_addr_to_blk_num(tvars->canton1_addr);
 80143a4:	68bb      	ldr	r3, [r7, #8]
 80143a6:	795b      	ldrb	r3, [r3, #5]
 80143a8:	4618      	mov	r0, r3
 80143aa:	f7ff f864 	bl	8013476 <_blk_addr_to_blk_num>
 80143ae:	62b8      	str	r0, [r7, #40]	; 0x28
	int c2num = _next_block_num(c1num, (tvars->_dir<0));
 80143b0:	68bb      	ldr	r3, [r7, #8]
 80143b2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80143b6:	b2db      	uxtb	r3, r3
 80143b8:	09db      	lsrs	r3, r3, #7
 80143ba:	b2db      	uxtb	r3, r3
 80143bc:	4619      	mov	r1, r3
 80143be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80143c0:	f004 fb31 	bl	8018a26 <_next_block_num>
 80143c4:	6378      	str	r0, [r7, #52]	; 0x34

	itm_debug3(DBG_CTRL, "prev c1c2", tidx, tvars->canton1_addr, tvars->canton2_addr);
 80143c6:	68bb      	ldr	r3, [r7, #8]
 80143c8:	795b      	ldrb	r3, [r3, #5]
 80143ca:	461a      	mov	r2, r3
 80143cc:	68bb      	ldr	r3, [r7, #8]
 80143ce:	799b      	ldrb	r3, [r3, #6]
 80143d0:	9300      	str	r3, [sp, #0]
 80143d2:	4613      	mov	r3, r2
 80143d4:	68fa      	ldr	r2, [r7, #12]
 80143d6:	4958      	ldr	r1, [pc, #352]	; (8014538 <update_c2_state_limits+0x290>)
 80143d8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80143dc:	f7fe fff2 	bl	80133c4 <itm_debug3>
	itm_debug3(DBG_CTRL, "c1c2num", tidx, c1num, c2num);
 80143e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80143e2:	9300      	str	r3, [sp, #0]
 80143e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143e6:	68fa      	ldr	r2, [r7, #12]
 80143e8:	4954      	ldr	r1, [pc, #336]	; (801453c <update_c2_state_limits+0x294>)
 80143ea:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80143ee:	f7fe ffe9 	bl	80133c4 <itm_debug3>

	if (c2num < 0) {
 80143f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	da3f      	bge.n	8014478 <update_c2_state_limits+0x1d0>
		// end of track
		if (updreason == upd_c1c2) {
 80143f8:	79fb      	ldrb	r3, [r7, #7]
 80143fa:	2b02      	cmp	r3, #2
 80143fc:	d122      	bne.n	8014444 <update_c2_state_limits+0x19c>
			itm_debug1(DBG_CTRL, "eot", tidx);
 80143fe:	68fa      	ldr	r2, [r7, #12]
 8014400:	494f      	ldr	r1, [pc, #316]	; (8014540 <update_c2_state_limits+0x298>)
 8014402:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8014406:	f7fe ffa7 	bl	8013358 <itm_debug1>
			tvars->spd_limit = EOT_SPD_LIMIT;//			set_speed_limit(tn, 20);
 801440a:	68bb      	ldr	r3, [r7, #8]
 801440c:	2232      	movs	r2, #50	; 0x32
 801440e:	811a      	strh	r2, [r3, #8]
			const train_config_t *tconf = get_train_cnf(tidx);
 8014410:	68f8      	ldr	r0, [r7, #12]
 8014412:	f001 fdf7 	bl	8016004 <get_train_cnf>
 8014416:	6238      	str	r0, [r7, #32]
			posetval = pose_middle(_blk_addr_to_blk_num(tvars->canton1_addr), tconf, tvars->_dir);
 8014418:	68bb      	ldr	r3, [r7, #8]
 801441a:	795b      	ldrb	r3, [r3, #5]
 801441c:	4618      	mov	r0, r3
 801441e:	f7ff f82a 	bl	8013476 <_blk_addr_to_blk_num>
 8014422:	68bb      	ldr	r3, [r7, #8]
 8014424:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014428:	461a      	mov	r2, r3
 801442a:	6a39      	ldr	r1, [r7, #32]
 801442c:	f000 fa54 	bl	80148d8 <pose_middle>
 8014430:	4603      	mov	r3, r0
 8014432:	63bb      	str	r3, [r7, #56]	; 0x38
			tvars->behaviour_flags |= BEHAVE_EOT1;
 8014434:	68bb      	ldr	r3, [r7, #8]
 8014436:	899b      	ldrh	r3, [r3, #12]
 8014438:	f043 0304 	orr.w	r3, r3, #4
 801443c:	b29a      	uxth	r2, r3
 801443e:	68bb      	ldr	r3, [r7, #8]
 8014440:	819a      	strh	r2, [r3, #12]
 8014442:	e0bf      	b.n	80145c4 <update_c2_state_limits+0x31c>
		} else if (updreason == upd_pose_trig) {
 8014444:	79fb      	ldrb	r3, [r7, #7]
 8014446:	2b03      	cmp	r3, #3
 8014448:	f040 80bc 	bne.w	80145c4 <update_c2_state_limits+0x31c>
			itm_debug1(DBG_CTRL, "eot2", tidx);
 801444c:	68fa      	ldr	r2, [r7, #12]
 801444e:	493d      	ldr	r1, [pc, #244]	; (8014544 <update_c2_state_limits+0x29c>)
 8014450:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8014454:	f7fe ff80 	bl	8013358 <itm_debug1>
			set_state(tidx, tvars, train_end_of_track);
 8014458:	2205      	movs	r2, #5
 801445a:	68b9      	ldr	r1, [r7, #8]
 801445c:	68f8      	ldr	r0, [r7, #12]
 801445e:	f7ff f88f 	bl	8013580 <set_state>
			tvars->spd_limit = 0;
 8014462:	68bb      	ldr	r3, [r7, #8]
 8014464:	2200      	movs	r2, #0
 8014466:	811a      	strh	r2, [r3, #8]
			tvars->behaviour_flags |= BEHAVE_EOT2;
 8014468:	68bb      	ldr	r3, [r7, #8]
 801446a:	899b      	ldrh	r3, [r3, #12]
 801446c:	f043 0308 	orr.w	r3, r3, #8
 8014470:	b29a      	uxth	r2, r3
 8014472:	68bb      	ldr	r3, [r7, #8]
 8014474:	819a      	strh	r2, [r3, #12]
 8014476:	e0a5      	b.n	80145c4 <update_c2_state_limits+0x31c>
		}
	} else {
		switch (blk_occup[c2num]) {
 8014478:	4a33      	ldr	r2, [pc, #204]	; (8014548 <update_c2_state_limits+0x2a0>)
 801447a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801447c:	4413      	add	r3, r2
 801447e:	781b      	ldrb	r3, [r3, #0]
 8014480:	2b00      	cmp	r3, #0
 8014482:	d002      	beq.n	801448a <update_c2_state_limits+0x1e2>
 8014484:	2b04      	cmp	r3, #4
 8014486:	d046      	beq.n	8014516 <update_c2_state_limits+0x26e>
 8014488:	e026      	b.n	80144d8 <update_c2_state_limits+0x230>
			case BLK_OCC_FREE:
				itm_debug2(DBG_CTRL, "free", tidx, c2num);
 801448a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801448c:	68fa      	ldr	r2, [r7, #12]
 801448e:	492f      	ldr	r1, [pc, #188]	; (801454c <update_c2_state_limits+0x2a4>)
 8014490:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8014494:	f7fe ff7a 	bl	801338c <itm_debug2>
				tvars->spd_limit = 100; //set_speed_limit(tidx, 100);
 8014498:	68bb      	ldr	r3, [r7, #8]
 801449a:	2264      	movs	r2, #100	; 0x64
 801449c:	811a      	strh	r2, [r3, #8]
				switch (tvars->_state) {
 801449e:	68bb      	ldr	r3, [r7, #8]
 80144a0:	785b      	ldrb	r3, [r3, #1]
 80144a2:	2b01      	cmp	r3, #1
 80144a4:	d016      	beq.n	80144d4 <update_c2_state_limits+0x22c>
 80144a6:	2b04      	cmp	r3, #4
 80144a8:	d10c      	bne.n	80144c4 <update_c2_state_limits+0x21c>
				case train_running_c1:
					break;
				case train_blk_wait:
					set_state(tidx, tvars, train_running_c1);
 80144aa:	2201      	movs	r2, #1
 80144ac:	68b9      	ldr	r1, [r7, #8]
 80144ae:	68f8      	ldr	r0, [r7, #12]
 80144b0:	f7ff f866 	bl	8013580 <set_state>
					tvars->behaviour_flags |= BEHAVE_RESTARTBLK;
 80144b4:	68bb      	ldr	r3, [r7, #8]
 80144b6:	899b      	ldrh	r3, [r3, #12]
 80144b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80144bc:	b29a      	uxth	r2, r3
 80144be:	68bb      	ldr	r3, [r7, #8]
 80144c0:	819a      	strh	r2, [r3, #12]
					break;
 80144c2:	e008      	b.n	80144d6 <update_c2_state_limits+0x22e>
				default:
					itm_debug2(DBG_ERR|DBG_CTRL, "bad st/4", tidx, tvars->_state);
 80144c4:	68bb      	ldr	r3, [r7, #8]
 80144c6:	785b      	ldrb	r3, [r3, #1]
 80144c8:	68fa      	ldr	r2, [r7, #12]
 80144ca:	4921      	ldr	r1, [pc, #132]	; (8014550 <update_c2_state_limits+0x2a8>)
 80144cc:	4819      	ldr	r0, [pc, #100]	; (8014534 <update_c2_state_limits+0x28c>)
 80144ce:	f7fe ff5d 	bl	801338c <itm_debug2>
					break;
 80144d2:	e000      	b.n	80144d6 <update_c2_state_limits+0x22e>
					break;
 80144d4:	bf00      	nop
				}
				break;
 80144d6:	e075      	b.n	80145c4 <update_c2_state_limits+0x31c>
			default:
			case BLK_OCC_RIGHT:
			case BLK_OCC_LEFT:
			case BLK_OCC_STOP:
				itm_debug3(DBG_CTRL, "occ", tidx, c2num, blk_occup[c2num]);
 80144d8:	4a1b      	ldr	r2, [pc, #108]	; (8014548 <update_c2_state_limits+0x2a0>)
 80144da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80144dc:	4413      	add	r3, r2
 80144de:	781b      	ldrb	r3, [r3, #0]
 80144e0:	9300      	str	r3, [sp, #0]
 80144e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80144e4:	68fa      	ldr	r2, [r7, #12]
 80144e6:	491b      	ldr	r1, [pc, #108]	; (8014554 <update_c2_state_limits+0x2ac>)
 80144e8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80144ec:	f7fe ff6a 	bl	80133c4 <itm_debug3>
				set_state(tidx, tvars, train_blk_wait);
 80144f0:	2204      	movs	r2, #4
 80144f2:	68b9      	ldr	r1, [r7, #8]
 80144f4:	68f8      	ldr	r0, [r7, #12]
 80144f6:	f7ff f843 	bl	8013580 <set_state>
				tvars->behaviour_flags |= BEHAVE_BLKW;
 80144fa:	68bb      	ldr	r3, [r7, #8]
 80144fc:	899b      	ldrh	r3, [r3, #12]
 80144fe:	f043 0310 	orr.w	r3, r3, #16
 8014502:	b29a      	uxth	r2, r3
 8014504:	68bb      	ldr	r3, [r7, #8]
 8014506:	819a      	strh	r2, [r3, #12]
				c2num = -1;
 8014508:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801450c:	637b      	str	r3, [r7, #52]	; 0x34
				tvars->spd_limit = 0;
 801450e:	68bb      	ldr	r3, [r7, #8]
 8014510:	2200      	movs	r2, #0
 8014512:	811a      	strh	r2, [r3, #8]
				break;
 8014514:	e056      	b.n	80145c4 <update_c2_state_limits+0x31c>
			case BLK_OCC_C2: {
			    uint8_t c2addr = (c2num>=0) ? _blk_num_to_blk_addr(c2num) : 0xFF;
 8014516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014518:	2b00      	cmp	r3, #0
 801451a:	db1d      	blt.n	8014558 <update_c2_state_limits+0x2b0>
 801451c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801451e:	f7fe ffc7 	bl	80134b0 <_blk_num_to_blk_addr>
 8014522:	4603      	mov	r3, r0
 8014524:	e019      	b.n	801455a <update_c2_state_limits+0x2b2>
 8014526:	bf00      	nop
 8014528:	0801973c 	.word	0x0801973c
 801452c:	08019744 	.word	0x08019744
 8014530:	08019748 	.word	0x08019748
 8014534:	80000400 	.word	0x80000400
 8014538:	08019754 	.word	0x08019754
 801453c:	08019760 	.word	0x08019760
 8014540:	08019768 	.word	0x08019768
 8014544:	0801976c 	.word	0x0801976c
 8014548:	200052b0 	.word	0x200052b0
 801454c:	08019774 	.word	0x08019774
 8014550:	0801977c 	.word	0x0801977c
 8014554:	08019788 	.word	0x08019788
 8014558:	23ff      	movs	r3, #255	; 0xff
 801455a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			    if (c2addr == tvars->canton2_addr) {
 801455e:	68bb      	ldr	r3, [r7, #8]
 8014560:	799b      	ldrb	r3, [r3, #6]
 8014562:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8014566:	429a      	cmp	r2, r3
 8014568:	d02b      	beq.n	80145c2 <update_c2_state_limits+0x31a>
			    	// normal case, same C2
			    	break;
			    } else if (tvars->canton2_addr != 0xFF) {
 801456a:	68bb      	ldr	r3, [r7, #8]
 801456c:	799b      	ldrb	r3, [r3, #6]
 801456e:	2bff      	cmp	r3, #255	; 0xff
 8014570:	d014      	beq.n	801459c <update_c2_state_limits+0x2f4>
			    	// change C2. Can this occur ? if turnout is changed
			    	// but turnout should not be changed if C2 already set
			    	itm_debug3(DBG_ERR|DBG_CTRL, "C2 change", tidx, tvars->canton2_addr, c2addr);
 8014572:	68bb      	ldr	r3, [r7, #8]
 8014574:	799b      	ldrb	r3, [r3, #6]
 8014576:	461a      	mov	r2, r3
 8014578:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801457c:	9300      	str	r3, [sp, #0]
 801457e:	4613      	mov	r3, r2
 8014580:	68fa      	ldr	r2, [r7, #12]
 8014582:	4966      	ldr	r1, [pc, #408]	; (801471c <update_c2_state_limits+0x474>)
 8014584:	4866      	ldr	r0, [pc, #408]	; (8014720 <update_c2_state_limits+0x478>)
 8014586:	f7fe ff1d 	bl	80133c4 <itm_debug3>
			    	set_block_addr_occupency(tvars->canton2_addr, BLK_OCC_FREE);
 801458a:	68bb      	ldr	r3, [r7, #8]
 801458c:	799b      	ldrb	r3, [r3, #6]
 801458e:	2100      	movs	r1, #0
 8014590:	4618      	mov	r0, r3
 8014592:	f7ff fb71 	bl	8013c78 <set_block_addr_occupency>
			    	tvars->canton2_addr = 0xFF;
 8014596:	68bb      	ldr	r3, [r7, #8]
 8014598:	22ff      	movs	r2, #255	; 0xff
 801459a:	719a      	strb	r2, [r3, #6]
			    }
			    // occupied
				itm_debug2(DBG_CTRL, "OCC C2", tidx, c2num);
 801459c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801459e:	68fa      	ldr	r2, [r7, #12]
 80145a0:	4960      	ldr	r1, [pc, #384]	; (8014724 <update_c2_state_limits+0x47c>)
 80145a2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80145a6:	f7fe fef1 	bl	801338c <itm_debug2>
				set_state(tidx, tvars, train_blk_wait);
 80145aa:	2204      	movs	r2, #4
 80145ac:	68b9      	ldr	r1, [r7, #8]
 80145ae:	68f8      	ldr	r0, [r7, #12]
 80145b0:	f7fe ffe6 	bl	8013580 <set_state>
				c2num = - 1;
 80145b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80145b8:	637b      	str	r3, [r7, #52]	; 0x34
				tvars->spd_limit = 0;
 80145ba:	68bb      	ldr	r3, [r7, #8]
 80145bc:	2200      	movs	r2, #0
 80145be:	811a      	strh	r2, [r3, #8]
				break;
 80145c0:	e000      	b.n	80145c4 <update_c2_state_limits+0x31c>
			    	break;
 80145c2:	bf00      	nop
			}
		}
	}
	if (c2num>=0) {
 80145c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80145c6:	2b00      	cmp	r3, #0
 80145c8:	db11      	blt.n	80145ee <update_c2_state_limits+0x346>
		// sanity check, can be removed (TODO)
		if ((get_block_num_occupency(c2num) != BLK_OCC_FREE)
 80145ca:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80145cc:	f7ff fb6a 	bl	8013ca4 <get_block_num_occupency>
 80145d0:	4603      	mov	r3, r0
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	d007      	beq.n	80145e6 <update_c2_state_limits+0x33e>
				&& (get_block_num_occupency(c2num) != BLK_OCC_C2))fatal();
 80145d6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80145d8:	f7ff fb64 	bl	8013ca4 <get_block_num_occupency>
 80145dc:	4603      	mov	r3, r0
 80145de:	2b04      	cmp	r3, #4
 80145e0:	d001      	beq.n	80145e6 <update_c2_state_limits+0x33e>
 80145e2:	f7fe ffb5 	bl	8013550 <fatal>
		set_block_num_occupency(c2num, BLK_OCC_C2);
 80145e6:	2104      	movs	r1, #4
 80145e8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80145ea:	f7ff faf7 	bl	8013bdc <set_block_num_occupency>
	}
    c2addr = (c2num>=0) ? _blk_num_to_blk_addr(c2num) : 0xFF;
 80145ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	db04      	blt.n	80145fe <update_c2_state_limits+0x356>
 80145f4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80145f6:	f7fe ff5b 	bl	80134b0 <_blk_num_to_blk_addr>
 80145fa:	4603      	mov	r3, r0
 80145fc:	e000      	b.n	8014600 <update_c2_state_limits+0x358>
 80145fe:	23ff      	movs	r3, #255	; 0xff
 8014600:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

sendlow:
	if ((c2addr != tvars->canton2_addr) || (updreason == upd_c1c2) || (updreason == upd_change_dir) ||(updreason==upd_init)) {
 8014604:	68bb      	ldr	r3, [r7, #8]
 8014606:	799b      	ldrb	r3, [r3, #6]
 8014608:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 801460c:	429a      	cmp	r2, r3
 801460e:	d108      	bne.n	8014622 <update_c2_state_limits+0x37a>
 8014610:	79fb      	ldrb	r3, [r7, #7]
 8014612:	2b02      	cmp	r3, #2
 8014614:	d005      	beq.n	8014622 <update_c2_state_limits+0x37a>
 8014616:	79fb      	ldrb	r3, [r7, #7]
 8014618:	2b01      	cmp	r3, #1
 801461a:	d002      	beq.n	8014622 <update_c2_state_limits+0x37a>
 801461c:	79fb      	ldrb	r3, [r7, #7]
 801461e:	2b00      	cmp	r3, #0
 8014620:	d146      	bne.n	80146b0 <update_c2_state_limits+0x408>
		itm_debug3(DBG_CTRL, "C1C2", tidx, tvars->canton1_addr, tvars->canton2_addr);
 8014622:	68bb      	ldr	r3, [r7, #8]
 8014624:	795b      	ldrb	r3, [r3, #5]
 8014626:	461a      	mov	r2, r3
 8014628:	68bb      	ldr	r3, [r7, #8]
 801462a:	799b      	ldrb	r3, [r3, #6]
 801462c:	9300      	str	r3, [sp, #0]
 801462e:	4613      	mov	r3, r2
 8014630:	68fa      	ldr	r2, [r7, #12]
 8014632:	493d      	ldr	r1, [pc, #244]	; (8014728 <update_c2_state_limits+0x480>)
 8014634:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8014638:	f7fe fec4 	bl	80133c4 <itm_debug3>
		tvars->canton2_addr = c2addr;
 801463c:	68bb      	ldr	r3, [r7, #8]
 801463e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8014642:	719a      	strb	r2, [r3, #6]

		int dir = tvars->_dir;
 8014644:	68bb      	ldr	r3, [r7, #8]
 8014646:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801464a:	633b      	str	r3, [r7, #48]	; 0x30
		const train_config_t *tconf = get_train_cnf(tidx);
 801464c:	68f8      	ldr	r0, [r7, #12]
 801464e:	f001 fcd9 	bl	8016004 <get_train_cnf>
 8014652:	61f8      	str	r0, [r7, #28]
		if (tconf->reversed) dir = -dir;
 8014654:	69fb      	ldr	r3, [r7, #28]
 8014656:	7edb      	ldrb	r3, [r3, #27]
 8014658:	2b00      	cmp	r3, #0
 801465a:	d002      	beq.n	8014662 <update_c2_state_limits+0x3ba>
 801465c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801465e:	425b      	negs	r3, r3
 8014660:	633b      	str	r3, [r7, #48]	; 0x30

		msg_64_t m;
		m.from = MA_CONTROL_T(tidx);
 8014662:	68fb      	ldr	r3, [r7, #12]
 8014664:	b25b      	sxtb	r3, r3
 8014666:	f003 0307 	and.w	r3, r3, #7
 801466a:	b25b      	sxtb	r3, r3
 801466c:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8014670:	b25b      	sxtb	r3, r3
 8014672:	b2db      	uxtb	r3, r3
 8014674:	747b      	strb	r3, [r7, #17]
		m.to =  MA_TRAIN_SC(tidx);
 8014676:	68fb      	ldr	r3, [r7, #12]
 8014678:	b25b      	sxtb	r3, r3
 801467a:	f003 0307 	and.w	r3, r3, #7
 801467e:	b25b      	sxtb	r3, r3
 8014680:	f063 0337 	orn	r3, r3, #55	; 0x37
 8014684:	b25b      	sxtb	r3, r3
 8014686:	b2db      	uxtb	r3, r3
 8014688:	743b      	strb	r3, [r7, #16]
		m.cmd = CMD_SET_C1_C2;
 801468a:	2311      	movs	r3, #17
 801468c:	74bb      	strb	r3, [r7, #18]
		m.vbytes[0] = tvars->canton1_addr;
 801468e:	68bb      	ldr	r3, [r7, #8]
 8014690:	795b      	ldrb	r3, [r3, #5]
 8014692:	753b      	strb	r3, [r7, #20]
		m.vbytes[1] = dir;
 8014694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014696:	b2db      	uxtb	r3, r3
 8014698:	757b      	strb	r3, [r7, #21]
		m.vbytes[2] = tvars->canton2_addr;
 801469a:	68bb      	ldr	r3, [r7, #8]
 801469c:	799b      	ldrb	r3, [r3, #6]
 801469e:	75bb      	strb	r3, [r7, #22]
		m.vbytes[3] = dir; // 0;
 80146a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146a2:	b2db      	uxtb	r3, r3
 80146a4:	75fb      	strb	r3, [r7, #23]
		mqf_write_from_ctrl(&m);
 80146a6:	f107 0310 	add.w	r3, r7, #16
 80146aa:	4618      	mov	r0, r3
 80146ac:	f7fe feb6 	bl	801341c <mqf_write_from_ctrl>
	}
	if ((tvars->_mode != train_fullmanual) && (olim != tvars->spd_limit)) {
 80146b0:	68bb      	ldr	r3, [r7, #8]
 80146b2:	781b      	ldrb	r3, [r3, #0]
 80146b4:	2b02      	cmp	r3, #2
 80146b6:	d020      	beq.n	80146fa <update_c2_state_limits+0x452>
 80146b8:	68bb      	ldr	r3, [r7, #8]
 80146ba:	891b      	ldrh	r3, [r3, #8]
 80146bc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80146be:	429a      	cmp	r2, r3
 80146c0:	d01b      	beq.n	80146fa <update_c2_state_limits+0x452>
		itm_debug2(DBG_CTRL, "lim upd", tidx, tvars->spd_limit);
 80146c2:	68bb      	ldr	r3, [r7, #8]
 80146c4:	891b      	ldrh	r3, [r3, #8]
 80146c6:	68fa      	ldr	r2, [r7, #12]
 80146c8:	4918      	ldr	r1, [pc, #96]	; (801472c <update_c2_state_limits+0x484>)
 80146ca:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80146ce:	f7fe fe5d 	bl	801338c <itm_debug2>
		uint16_t tspd = MIN(tvars->spd_limit, tvars->desired_speed);
 80146d2:	68bb      	ldr	r3, [r7, #8]
 80146d4:	895a      	ldrh	r2, [r3, #10]
 80146d6:	68bb      	ldr	r3, [r7, #8]
 80146d8:	891b      	ldrh	r3, [r3, #8]
 80146da:	4293      	cmp	r3, r2
 80146dc:	bf28      	it	cs
 80146de:	4613      	movcs	r3, r2
 80146e0:	837b      	strh	r3, [r7, #26]
		switch (updreason) {
 80146e2:	79fb      	ldrb	r3, [r7, #7]
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d00a      	beq.n	80146fe <update_c2_state_limits+0x456>
 80146e8:	2b01      	cmp	r3, #1
 80146ea:	d00a      	beq.n	8014702 <update_c2_state_limits+0x45a>
		case upd_change_dir: // do nothing, ctrl_set_tspeed will be updated
			break;
		case upd_init:
			break;
		default:
			ctrl_set_tspeed(tidx, tvars, tspd);
 80146ec:	8b7b      	ldrh	r3, [r7, #26]
 80146ee:	461a      	mov	r2, r3
 80146f0:	68b9      	ldr	r1, [r7, #8]
 80146f2:	68f8      	ldr	r0, [r7, #12]
 80146f4:	f000 f81c 	bl	8014730 <ctrl_set_tspeed>
			break;
 80146f8:	e004      	b.n	8014704 <update_c2_state_limits+0x45c>
		}
	}
 80146fa:	bf00      	nop
 80146fc:	e002      	b.n	8014704 <update_c2_state_limits+0x45c>
			break;
 80146fe:	bf00      	nop
 8014700:	e000      	b.n	8014704 <update_c2_state_limits+0x45c>
			break;
 8014702:	bf00      	nop
	if (posetval) {
 8014704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014706:	2b00      	cmp	r3, #0
 8014708:	d004      	beq.n	8014714 <update_c2_state_limits+0x46c>
		//itm_debug2(DBG_CTRL, "set pose", tidx, posetval);
		// POSE trigger must be sent *after* CMD_SET_C1_C2
		set_pose_trig(tidx, posetval);
 801470a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801470c:	4619      	mov	r1, r3
 801470e:	68f8      	ldr	r0, [r7, #12]
 8014710:	f000 f89c 	bl	801484c <set_pose_trig>
	}

}
 8014714:	3740      	adds	r7, #64	; 0x40
 8014716:	46bd      	mov	sp, r7
 8014718:	bd80      	pop	{r7, pc}
 801471a:	bf00      	nop
 801471c:	0801978c 	.word	0x0801978c
 8014720:	80000400 	.word	0x80000400
 8014724:	08019798 	.word	0x08019798
 8014728:	080197a0 	.word	0x080197a0
 801472c:	080197a8 	.word	0x080197a8

08014730 <ctrl_set_tspeed>:


// ---------------------------------------------------------------

static void ctrl_set_tspeed(int trnum, train_ctrl_t *tvars, uint16_t tspd)
{
 8014730:	b580      	push	{r7, lr}
 8014732:	b086      	sub	sp, #24
 8014734:	af00      	add	r7, sp, #0
 8014736:	60f8      	str	r0, [r7, #12]
 8014738:	60b9      	str	r1, [r7, #8]
 801473a:	4613      	mov	r3, r2
 801473c:	80fb      	strh	r3, [r7, #6]
	if (tvars->_target_speed == tspd) return;
 801473e:	68bb      	ldr	r3, [r7, #8]
 8014740:	885b      	ldrh	r3, [r3, #2]
 8014742:	88fa      	ldrh	r2, [r7, #6]
 8014744:	429a      	cmp	r2, r3
 8014746:	d03f      	beq.n	80147c8 <ctrl_set_tspeed+0x98>
	tvars->_target_speed = tspd;
 8014748:	68bb      	ldr	r3, [r7, #8]
 801474a:	88fa      	ldrh	r2, [r7, #6]
 801474c:	805a      	strh	r2, [r3, #2]

	// notif UI
	itm_debug2(DBG_UI|DBG_CTRL, "ctrl_set_tspeed", trnum, tspd);
 801474e:	88fb      	ldrh	r3, [r7, #6]
 8014750:	68fa      	ldr	r2, [r7, #12]
 8014752:	491f      	ldr	r1, [pc, #124]	; (80147d0 <ctrl_set_tspeed+0xa0>)
 8014754:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8014758:	f7fe fe18 	bl	801338c <itm_debug2>
	msg_64_t m;
	m.from = MA_CONTROL_T(trnum);
 801475c:	68fb      	ldr	r3, [r7, #12]
 801475e:	b25b      	sxtb	r3, r3
 8014760:	f003 0307 	and.w	r3, r3, #7
 8014764:	b25b      	sxtb	r3, r3
 8014766:	f063 032f 	orn	r3, r3, #47	; 0x2f
 801476a:	b25b      	sxtb	r3, r3
 801476c:	b2db      	uxtb	r3, r3
 801476e:	747b      	strb	r3, [r7, #17]
	m.to = MA_UI(1); // TODO : fix me
 8014770:	2381      	movs	r3, #129	; 0x81
 8014772:	743b      	strb	r3, [r7, #16]
	m.cmd = CMD_TRTSPD_NOTIF;
 8014774:	2324      	movs	r3, #36	; 0x24
 8014776:	74bb      	strb	r3, [r7, #18]
	m.v1u = tspd;
 8014778:	88fb      	ldrh	r3, [r7, #6]
 801477a:	82bb      	strh	r3, [r7, #20]
	m.v2 = trctl[trnum]._dir;
 801477c:	4915      	ldr	r1, [pc, #84]	; (80147d4 <ctrl_set_tspeed+0xa4>)
 801477e:	68fa      	ldr	r2, [r7, #12]
 8014780:	4613      	mov	r3, r2
 8014782:	005b      	lsls	r3, r3, #1
 8014784:	4413      	add	r3, r2
 8014786:	00db      	lsls	r3, r3, #3
 8014788:	440b      	add	r3, r1
 801478a:	3304      	adds	r3, #4
 801478c:	f993 3000 	ldrsb.w	r3, [r3]
 8014790:	b21b      	sxth	r3, r3
 8014792:	82fb      	strh	r3, [r7, #22]
	mqf_write_from_ctrl(&m);
 8014794:	f107 0310 	add.w	r3, r7, #16
 8014798:	4618      	mov	r0, r3
 801479a:	f7fe fe3f 	bl	801341c <mqf_write_from_ctrl>

	m.to = MA_TRAIN_SC(trnum);
 801479e:	68fb      	ldr	r3, [r7, #12]
 80147a0:	b25b      	sxtb	r3, r3
 80147a2:	f003 0307 	and.w	r3, r3, #7
 80147a6:	b25b      	sxtb	r3, r3
 80147a8:	f063 0337 	orn	r3, r3, #55	; 0x37
 80147ac:	b25b      	sxtb	r3, r3
 80147ae:	b2db      	uxtb	r3, r3
 80147b0:	743b      	strb	r3, [r7, #16]
	m.cmd = CMD_SET_TARGET_SPEED;
 80147b2:	2310      	movs	r3, #16
 80147b4:	74bb      	strb	r3, [r7, #18]
	// direction already given by SET_C1_C2
	//m.v1 = trctl[trnum]._dir*trctl[trnum]._target_speed;
	m.v1u = tvars->_target_speed;
 80147b6:	68bb      	ldr	r3, [r7, #8]
 80147b8:	885b      	ldrh	r3, [r3, #2]
 80147ba:	82bb      	strh	r3, [r7, #20]
	mqf_write_from_ctrl(&m);
 80147bc:	f107 0310 	add.w	r3, r7, #16
 80147c0:	4618      	mov	r0, r3
 80147c2:	f7fe fe2b 	bl	801341c <mqf_write_from_ctrl>
 80147c6:	e000      	b.n	80147ca <ctrl_set_tspeed+0x9a>
	if (tvars->_target_speed == tspd) return;
 80147c8:	bf00      	nop


}
 80147ca:	3718      	adds	r7, #24
 80147cc:	46bd      	mov	sp, r7
 80147ce:	bd80      	pop	{r7, pc}
 80147d0:	080197b0 	.word	0x080197b0
 80147d4:	200051ec 	.word	0x200051ec

080147d8 <ctrl_set_dir>:

static void ctrl_set_dir(int trnum,  train_ctrl_t *tvars, int  dir, int force)
{
 80147d8:	b580      	push	{r7, lr}
 80147da:	b086      	sub	sp, #24
 80147dc:	af00      	add	r7, sp, #0
 80147de:	60f8      	str	r0, [r7, #12]
 80147e0:	60b9      	str	r1, [r7, #8]
 80147e2:	607a      	str	r2, [r7, #4]
 80147e4:	603b      	str	r3, [r7, #0]
	if (!force && (tvars->_dir == dir)) return;
 80147e6:	683b      	ldr	r3, [r7, #0]
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	d106      	bne.n	80147fa <ctrl_set_dir+0x22>
 80147ec:	68bb      	ldr	r3, [r7, #8]
 80147ee:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80147f2:	461a      	mov	r2, r3
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	4293      	cmp	r3, r2
 80147f8:	d021      	beq.n	801483e <ctrl_set_dir+0x66>

	itm_debug2(DBG_CTRL, "setdir", trnum, dir);
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	68fa      	ldr	r2, [r7, #12]
 80147fe:	4912      	ldr	r1, [pc, #72]	; (8014848 <ctrl_set_dir+0x70>)
 8014800:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8014804:	f7fe fdc2 	bl	801338c <itm_debug2>


	msg_64_t m;
	m.from = MA_CONTROL_T(trnum);
 8014808:	68fb      	ldr	r3, [r7, #12]
 801480a:	b25b      	sxtb	r3, r3
 801480c:	f003 0307 	and.w	r3, r3, #7
 8014810:	b25b      	sxtb	r3, r3
 8014812:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8014816:	b25b      	sxtb	r3, r3
 8014818:	b2db      	uxtb	r3, r3
 801481a:	747b      	strb	r3, [r7, #17]
	tvars->_dir = dir;
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	b25a      	sxtb	r2, r3
 8014820:	68bb      	ldr	r3, [r7, #8]
 8014822:	711a      	strb	r2, [r3, #4]

	// notif UI
	m.to = MA_UI(1); // fix me
 8014824:	2381      	movs	r3, #129	; 0x81
 8014826:	743b      	strb	r3, [r7, #16]
	m.cmd = CMD_TRDIR_NOTIF;
 8014828:	2323      	movs	r3, #35	; 0x23
 801482a:	74bb      	strb	r3, [r7, #18]
	m.v1 = dir;
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	b21b      	sxth	r3, r3
 8014830:	82bb      	strh	r3, [r7, #20]
	mqf_write_from_ctrl(&m);
 8014832:	f107 0310 	add.w	r3, r7, #16
 8014836:	4618      	mov	r0, r3
 8014838:	f7fe fdf0 	bl	801341c <mqf_write_from_ctrl>
 801483c:	e000      	b.n	8014840 <ctrl_set_dir+0x68>
	if (!force && (tvars->_dir == dir)) return;
 801483e:	bf00      	nop
}
 8014840:	3718      	adds	r7, #24
 8014842:	46bd      	mov	sp, r7
 8014844:	bd80      	pop	{r7, pc}
 8014846:	bf00      	nop
 8014848:	080197c0 	.word	0x080197c0

0801484c <set_pose_trig>:

// ---------------------------------------------------------------


static void set_pose_trig(int numtrain, int32_t pose)
{
 801484c:	b580      	push	{r7, lr}
 801484e:	b086      	sub	sp, #24
 8014850:	af00      	add	r7, sp, #0
 8014852:	6078      	str	r0, [r7, #4]
 8014854:	6039      	str	r1, [r7, #0]
	itm_debug2(DBG_CTRL, "set posetr", numtrain, pose);
 8014856:	683b      	ldr	r3, [r7, #0]
 8014858:	687a      	ldr	r2, [r7, #4]
 801485a:	491e      	ldr	r1, [pc, #120]	; (80148d4 <set_pose_trig+0x88>)
 801485c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8014860:	f7fe fd94 	bl	801338c <itm_debug2>
	msg_64_t m;
	m.from = MA_CONTROL_T(numtrain);
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	b25b      	sxtb	r3, r3
 8014868:	f003 0307 	and.w	r3, r3, #7
 801486c:	b25b      	sxtb	r3, r3
 801486e:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8014872:	b25b      	sxtb	r3, r3
 8014874:	b2db      	uxtb	r3, r3
 8014876:	727b      	strb	r3, [r7, #9]
	m.from = MA_CONTROL_T(numtrain);
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	b25b      	sxtb	r3, r3
 801487c:	f003 0307 	and.w	r3, r3, #7
 8014880:	b25b      	sxtb	r3, r3
 8014882:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8014886:	b25b      	sxtb	r3, r3
 8014888:	b2db      	uxtb	r3, r3
 801488a:	727b      	strb	r3, [r7, #9]
	m.to =  MA_TRAIN_SC(numtrain);
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	b25b      	sxtb	r3, r3
 8014890:	f003 0307 	and.w	r3, r3, #7
 8014894:	b25b      	sxtb	r3, r3
 8014896:	f063 0337 	orn	r3, r3, #55	; 0x37
 801489a:	b25b      	sxtb	r3, r3
 801489c:	b2db      	uxtb	r3, r3
 801489e:	723b      	strb	r3, [r7, #8]
	m.cmd = CMD_POSE_SET_TRIG;
 80148a0:	2350      	movs	r3, #80	; 0x50
 80148a2:	72bb      	strb	r3, [r7, #10]
	const train_config_t *tconf = get_train_cnf(numtrain);
 80148a4:	6878      	ldr	r0, [r7, #4]
 80148a6:	f001 fbad 	bl	8016004 <get_train_cnf>
 80148aa:	6178      	str	r0, [r7, #20]
	if (tconf->reversed)  m.v32 = -pose;
 80148ac:	697b      	ldr	r3, [r7, #20]
 80148ae:	7edb      	ldrb	r3, [r3, #27]
 80148b0:	2b00      	cmp	r3, #0
 80148b2:	d003      	beq.n	80148bc <set_pose_trig+0x70>
 80148b4:	683b      	ldr	r3, [r7, #0]
 80148b6:	425b      	negs	r3, r3
 80148b8:	60fb      	str	r3, [r7, #12]
 80148ba:	e001      	b.n	80148c0 <set_pose_trig+0x74>
	else m.v32 = pose;
 80148bc:	683b      	ldr	r3, [r7, #0]
 80148be:	60fb      	str	r3, [r7, #12]
	mqf_write_from_ctrl(&m);
 80148c0:	f107 0308 	add.w	r3, r7, #8
 80148c4:	4618      	mov	r0, r3
 80148c6:	f7fe fda9 	bl	801341c <mqf_write_from_ctrl>
}
 80148ca:	bf00      	nop
 80148cc:	3718      	adds	r7, #24
 80148ce:	46bd      	mov	sp, r7
 80148d0:	bd80      	pop	{r7, pc}
 80148d2:	bf00      	nop
 80148d4:	080197c8 	.word	0x080197c8

080148d8 <pose_middle>:


static int32_t pose_middle(int blknum, const train_config_t *tconf, int dir)
{
 80148d8:	b580      	push	{r7, lr}
 80148da:	b088      	sub	sp, #32
 80148dc:	af00      	add	r7, sp, #0
 80148de:	60f8      	str	r0, [r7, #12]
 80148e0:	60b9      	str	r1, [r7, #8]
 80148e2:	607a      	str	r2, [r7, #4]
	int cm = get_blk_len(blknum);
 80148e4:	68f8      	ldr	r0, [r7, #12]
 80148e6:	f004 f8d1 	bl	8018a8c <get_blk_len>
 80148ea:	61b8      	str	r0, [r7, #24]
	uint32_t p = cm * tconf->pose_per_cm;
 80148ec:	68bb      	ldr	r3, [r7, #8]
 80148ee:	8b9b      	ldrh	r3, [r3, #28]
 80148f0:	461a      	mov	r2, r3
 80148f2:	69bb      	ldr	r3, [r7, #24]
 80148f4:	fb03 f302 	mul.w	r3, r3, r2
 80148f8:	617b      	str	r3, [r7, #20]
	uint32_t pm = p/2;
 80148fa:	697b      	ldr	r3, [r7, #20]
 80148fc:	085b      	lsrs	r3, r3, #1
 80148fe:	61fb      	str	r3, [r7, #28]
	if (dir<0) pm = -pm;
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	2b00      	cmp	r3, #0
 8014904:	da02      	bge.n	801490c <pose_middle+0x34>
 8014906:	69fb      	ldr	r3, [r7, #28]
 8014908:	425b      	negs	r3, r3
 801490a:	61fb      	str	r3, [r7, #28]
	return pm;
 801490c:	69fb      	ldr	r3, [r7, #28]
}
 801490e:	4618      	mov	r0, r3
 8014910:	3720      	adds	r7, #32
 8014912:	46bd      	mov	sp, r7
 8014914:	bd80      	pop	{r7, pc}
	...

08014918 <check_blk_tick>:

// ---------------------------------------------------------------


static void check_blk_tick(_UNUSED_ uint32_t tick)
{
 8014918:	b580      	push	{r7, lr}
 801491a:	b086      	sub	sp, #24
 801491c:	af00      	add	r7, sp, #0
 801491e:	6078      	str	r0, [r7, #4]
	if ((0)) return;
	if (occupency_changed) {
 8014920:	4b1e      	ldr	r3, [pc, #120]	; (801499c <check_blk_tick+0x84>)
 8014922:	781b      	ldrb	r3, [r3, #0]
 8014924:	2b00      	cmp	r3, #0
 8014926:	d036      	beq.n	8014996 <check_blk_tick+0x7e>
		occupency_changed = 0;
 8014928:	4b1c      	ldr	r3, [pc, #112]	; (801499c <check_blk_tick+0x84>)
 801492a:	2200      	movs	r2, #0
 801492c:	701a      	strb	r2, [r3, #0]
		for (int tidx=0; tidx<NUM_TRAINS; tidx++) {
 801492e:	2300      	movs	r3, #0
 8014930:	617b      	str	r3, [r7, #20]
 8014932:	e02d      	b.n	8014990 <check_blk_tick+0x78>
			train_ctrl_t *tvars = &trctl[tidx];
 8014934:	697a      	ldr	r2, [r7, #20]
 8014936:	4613      	mov	r3, r2
 8014938:	005b      	lsls	r3, r3, #1
 801493a:	4413      	add	r3, r2
 801493c:	00db      	lsls	r3, r3, #3
 801493e:	4a18      	ldr	r2, [pc, #96]	; (80149a0 <check_blk_tick+0x88>)
 8014940:	4413      	add	r3, r2
 8014942:	613b      	str	r3, [r7, #16]
			const train_config_t *tconf = get_train_cnf(tidx);
 8014944:	6978      	ldr	r0, [r7, #20]
 8014946:	f001 fb5d 	bl	8016004 <get_train_cnf>
 801494a:	60f8      	str	r0, [r7, #12]
			if (!tconf->enabled) continue;
 801494c:	68fb      	ldr	r3, [r7, #12]
 801494e:	7c9b      	ldrb	r3, [r3, #18]
 8014950:	2b00      	cmp	r3, #0
 8014952:	d017      	beq.n	8014984 <check_blk_tick+0x6c>
			if (tvars->_state == train_off) continue;
 8014954:	693b      	ldr	r3, [r7, #16]
 8014956:	785b      	ldrb	r3, [r3, #1]
 8014958:	2b00      	cmp	r3, #0
 801495a:	d015      	beq.n	8014988 <check_blk_tick+0x70>
			if ((tvars->_state == train_blk_wait) || (tvars->spd_limit <100)) {
 801495c:	693b      	ldr	r3, [r7, #16]
 801495e:	785b      	ldrb	r3, [r3, #1]
 8014960:	2b04      	cmp	r3, #4
 8014962:	d003      	beq.n	801496c <check_blk_tick+0x54>
 8014964:	693b      	ldr	r3, [r7, #16]
 8014966:	891b      	ldrh	r3, [r3, #8]
 8014968:	2b63      	cmp	r3, #99	; 0x63
 801496a:	d80e      	bhi.n	801498a <check_blk_tick+0x72>
				itm_debug1(DBG_CTRL, "chk", tidx);
 801496c:	697a      	ldr	r2, [r7, #20]
 801496e:	490d      	ldr	r1, [pc, #52]	; (80149a4 <check_blk_tick+0x8c>)
 8014970:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8014974:	f7fe fcf0 	bl	8013358 <itm_debug1>
				update_c2_state_limits(tidx, tvars, upd_check);
 8014978:	2204      	movs	r2, #4
 801497a:	6939      	ldr	r1, [r7, #16]
 801497c:	6978      	ldr	r0, [r7, #20]
 801497e:	f7ff fc93 	bl	80142a8 <update_c2_state_limits>
 8014982:	e002      	b.n	801498a <check_blk_tick+0x72>
			if (!tconf->enabled) continue;
 8014984:	bf00      	nop
 8014986:	e000      	b.n	801498a <check_blk_tick+0x72>
			if (tvars->_state == train_off) continue;
 8014988:	bf00      	nop
		for (int tidx=0; tidx<NUM_TRAINS; tidx++) {
 801498a:	697b      	ldr	r3, [r7, #20]
 801498c:	3301      	adds	r3, #1
 801498e:	617b      	str	r3, [r7, #20]
 8014990:	697b      	ldr	r3, [r7, #20]
 8014992:	2b07      	cmp	r3, #7
 8014994:	ddce      	ble.n	8014934 <check_blk_tick+0x1c>
			}
		}
	}
}
 8014996:	3718      	adds	r7, #24
 8014998:	46bd      	mov	sp, r7
 801499a:	bd80      	pop	{r7, pc}
 801499c:	200052b8 	.word	0x200052b8
 80149a0:	200051ec 	.word	0x200051ec
 80149a4:	080197d4 	.word	0x080197d4

080149a8 <set_turnout>:


// ---------------------------------------------------------------

static void set_turnout(int tn, int v)
{
 80149a8:	b580      	push	{r7, lr}
 80149aa:	b084      	sub	sp, #16
 80149ac:	af00      	add	r7, sp, #0
 80149ae:	6078      	str	r0, [r7, #4]
 80149b0:	6039      	str	r1, [r7, #0]
	itm_debug2(DBG_CTRL, "TURN", tn, v);
 80149b2:	683b      	ldr	r3, [r7, #0]
 80149b4:	687a      	ldr	r2, [r7, #4]
 80149b6:	491b      	ldr	r1, [pc, #108]	; (8014a24 <set_turnout+0x7c>)
 80149b8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80149bc:	f7fe fce6 	bl	801338c <itm_debug2>
	if (tn<0) fatal();
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	da01      	bge.n	80149ca <set_turnout+0x22>
 80149c6:	f7fe fdc3 	bl	8013550 <fatal>
	if (tn>=NUM_TURNOUTS) fatal();
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	2b07      	cmp	r3, #7
 80149ce:	dd01      	ble.n	80149d4 <set_turnout+0x2c>
 80149d0:	f7fe fdbe 	bl	8013550 <fatal>
	if (tn>=NUM_LOCAL_TURNOUTS) fatal(); // TODO
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	2b07      	cmp	r3, #7
 80149d8:	dd01      	ble.n	80149de <set_turnout+0x36>
 80149da:	f7fe fdb9 	bl	8013550 <fatal>
	msg_64_t m;
	m.from = MA_CONTROL();
 80149de:	23d7      	movs	r3, #215	; 0xd7
 80149e0:	727b      	strb	r3, [r7, #9]
	m.to = MA_TURNOUT(0, tn); // TODO board num
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	b25b      	sxtb	r3, r3
 80149e6:	f003 0307 	and.w	r3, r3, #7
 80149ea:	b25b      	sxtb	r3, r3
 80149ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80149f0:	b25b      	sxtb	r3, r3
 80149f2:	b2db      	uxtb	r3, r3
 80149f4:	723b      	strb	r3, [r7, #8]
	m.cmd = v ? CMD_TURNOUT_B : CMD_TURNOUT_A;
 80149f6:	683b      	ldr	r3, [r7, #0]
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	d001      	beq.n	8014a00 <set_turnout+0x58>
 80149fc:	2332      	movs	r3, #50	; 0x32
 80149fe:	e000      	b.n	8014a02 <set_turnout+0x5a>
 8014a00:	2331      	movs	r3, #49	; 0x31
 8014a02:	72bb      	strb	r3, [r7, #10]

	mqf_write_from_ctrl(&m);
 8014a04:	f107 0308 	add.w	r3, r7, #8
 8014a08:	4618      	mov	r0, r3
 8014a0a:	f7fe fd07 	bl	801341c <mqf_write_from_ctrl>
	topolgy_set_turnout(tn, v);
 8014a0e:	6839      	ldr	r1, [r7, #0]
 8014a10:	6878      	ldr	r0, [r7, #4]
 8014a12:	f004 f853 	bl	8018abc <topolgy_set_turnout>

	occupency_changed = 1;
 8014a16:	4b04      	ldr	r3, [pc, #16]	; (8014a28 <set_turnout+0x80>)
 8014a18:	2201      	movs	r2, #1
 8014a1a:	701a      	strb	r2, [r3, #0]
}
 8014a1c:	bf00      	nop
 8014a1e:	3710      	adds	r7, #16
 8014a20:	46bd      	mov	sp, r7
 8014a22:	bd80      	pop	{r7, pc}
 8014a24:	080197d8 	.word	0x080197d8
 8014a28:	200052b8 	.word	0x200052b8

08014a2c <check_behaviour>:

// ---------------------------------------------------------------

static void check_behaviour(_UNUSED_ uint32_t tick)
{
 8014a2c:	b580      	push	{r7, lr}
 8014a2e:	b084      	sub	sp, #16
 8014a30:	af00      	add	r7, sp, #0
 8014a32:	6078      	str	r0, [r7, #4]
	for (int tidx = 0; tidx<NUM_TRAINS; tidx++) {
 8014a34:	2300      	movs	r3, #0
 8014a36:	60fb      	str	r3, [r7, #12]
 8014a38:	e00a      	b.n	8014a50 <check_behaviour+0x24>
		const train_config_t *tconf = get_train_cnf(tidx);
 8014a3a:	68f8      	ldr	r0, [r7, #12]
 8014a3c:	f001 fae2 	bl	8016004 <get_train_cnf>
 8014a40:	60b8      	str	r0, [r7, #8]
		if (!tconf->enabled) continue;
 8014a42:	68bb      	ldr	r3, [r7, #8]
 8014a44:	7c9b      	ldrb	r3, [r3, #18]
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	d106      	bne.n	8014a58 <check_behaviour+0x2c>
	for (int tidx = 0; tidx<NUM_TRAINS; tidx++) {
 8014a4a:	68fb      	ldr	r3, [r7, #12]
 8014a4c:	3301      	adds	r3, #1
 8014a4e:	60fb      	str	r3, [r7, #12]
 8014a50:	68fb      	ldr	r3, [r7, #12]
 8014a52:	2b07      	cmp	r3, #7
 8014a54:	ddf1      	ble.n	8014a3a <check_behaviour+0xe>
 8014a56:	e000      	b.n	8014a5a <check_behaviour+0x2e>

		if (!SCEN_TWOTRAIN) return; // XXX
 8014a58:	bf00      	nop
				evt_cmd_set_setdirspeed(tidx, tvars, 0, 0, 1);
				continue;
			}
		}
	}
}
 8014a5a:	3710      	adds	r7, #16
 8014a5c:	46bd      	mov	sp, r7
 8014a5e:	bd80      	pop	{r7, pc}

08014a60 <itm_debug1>:
{
 8014a60:	b580      	push	{r7, lr}
 8014a62:	b086      	sub	sp, #24
 8014a64:	af02      	add	r7, sp, #8
 8014a66:	60f8      	str	r0, [r7, #12]
 8014a68:	60b9      	str	r1, [r7, #8]
 8014a6a:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 8014a6c:	4b08      	ldr	r3, [pc, #32]	; (8014a90 <itm_debug1+0x30>)
 8014a6e:	681a      	ldr	r2, [r3, #0]
 8014a70:	68fb      	ldr	r3, [r7, #12]
 8014a72:	4013      	ands	r3, r2
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	d007      	beq.n	8014a88 <itm_debug1+0x28>
 8014a78:	2301      	movs	r3, #1
 8014a7a:	9300      	str	r3, [sp, #0]
 8014a7c:	2300      	movs	r3, #0
 8014a7e:	2200      	movs	r2, #0
 8014a80:	6879      	ldr	r1, [r7, #4]
 8014a82:	68b8      	ldr	r0, [r7, #8]
 8014a84:	f004 f906 	bl	8018c94 <_itm_debug3>
}
 8014a88:	bf00      	nop
 8014a8a:	3710      	adds	r7, #16
 8014a8c:	46bd      	mov	sp, r7
 8014a8e:	bd80      	pop	{r7, pc}
 8014a90:	200005a4 	.word	0x200005a4

08014a94 <itm_debug3>:
{
 8014a94:	b580      	push	{r7, lr}
 8014a96:	b086      	sub	sp, #24
 8014a98:	af02      	add	r7, sp, #8
 8014a9a:	60f8      	str	r0, [r7, #12]
 8014a9c:	60b9      	str	r1, [r7, #8]
 8014a9e:	607a      	str	r2, [r7, #4]
 8014aa0:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, v3, 3);
 8014aa2:	4b09      	ldr	r3, [pc, #36]	; (8014ac8 <itm_debug3+0x34>)
 8014aa4:	681a      	ldr	r2, [r3, #0]
 8014aa6:	68fb      	ldr	r3, [r7, #12]
 8014aa8:	4013      	ands	r3, r2
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	d007      	beq.n	8014abe <itm_debug3+0x2a>
 8014aae:	2303      	movs	r3, #3
 8014ab0:	9300      	str	r3, [sp, #0]
 8014ab2:	69bb      	ldr	r3, [r7, #24]
 8014ab4:	683a      	ldr	r2, [r7, #0]
 8014ab6:	6879      	ldr	r1, [r7, #4]
 8014ab8:	68b8      	ldr	r0, [r7, #8]
 8014aba:	f004 f8eb 	bl	8018c94 <_itm_debug3>
}
 8014abe:	bf00      	nop
 8014ac0:	3710      	adds	r7, #16
 8014ac2:	46bd      	mov	sp, r7
 8014ac4:	bd80      	pop	{r7, pc}
 8014ac6:	bf00      	nop
 8014ac8:	200005a4 	.word	0x200005a4

08014acc <canton_error>:
#define ERR_STRANGE			-4242

int trainctl_error(char l, int code, const char *msg);

static inline int canton_error(int code, const char *msg)
{
 8014acc:	b580      	push	{r7, lr}
 8014ace:	b082      	sub	sp, #8
 8014ad0:	af00      	add	r7, sp, #0
 8014ad2:	6078      	str	r0, [r7, #4]
 8014ad4:	6039      	str	r1, [r7, #0]
	return trainctl_error('C', code, msg);
 8014ad6:	683a      	ldr	r2, [r7, #0]
 8014ad8:	6879      	ldr	r1, [r7, #4]
 8014ada:	2043      	movs	r0, #67	; 0x43
 8014adc:	f001 f8e2 	bl	8015ca4 <trainctl_error>
 8014ae0:	4603      	mov	r3, r0
}
 8014ae2:	4618      	mov	r0, r3
 8014ae4:	3708      	adds	r7, #8
 8014ae6:	46bd      	mov	sp, r7
 8014ae8:	bd80      	pop	{r7, pc}

08014aea <canton_error_rc>:
static inline int canton_error_rc(int rc, int code, const char *msg)
{
 8014aea:	b580      	push	{r7, lr}
 8014aec:	b084      	sub	sp, #16
 8014aee:	af00      	add	r7, sp, #0
 8014af0:	60f8      	str	r0, [r7, #12]
 8014af2:	60b9      	str	r1, [r7, #8]
 8014af4:	607a      	str	r2, [r7, #4]
	trainctl_error('C', code, msg);
 8014af6:	687a      	ldr	r2, [r7, #4]
 8014af8:	68b9      	ldr	r1, [r7, #8]
 8014afa:	2043      	movs	r0, #67	; 0x43
 8014afc:	f001 f8d2 	bl	8015ca4 <trainctl_error>
	return rc;
 8014b00:	68fb      	ldr	r3, [r7, #12]
}
 8014b02:	4618      	mov	r0, r3
 8014b04:	3710      	adds	r7, #16
 8014b06:	46bd      	mov	sp, r7
 8014b08:	bd80      	pop	{r7, pc}
	...

08014b0c <mqf_read_to_canton>:
/* turnout command */
#define CMD_TURNOUT_A		0x31
#define CMD_TURNOUT_B		0x32


LFMQUEUE_DEF_H(to_canton, msg_64_t)
 8014b0c:	b580      	push	{r7, lr}
 8014b0e:	b082      	sub	sp, #8
 8014b10:	af00      	add	r7, sp, #0
 8014b12:	6078      	str	r0, [r7, #4]
 8014b14:	6879      	ldr	r1, [r7, #4]
 8014b16:	4804      	ldr	r0, [pc, #16]	; (8014b28 <mqf_read_to_canton+0x1c>)
 8014b18:	f004 fa3c 	bl	8018f94 <mqf_read>
 8014b1c:	4603      	mov	r3, r0
 8014b1e:	4618      	mov	r0, r3
 8014b20:	3708      	adds	r7, #8
 8014b22:	46bd      	mov	sp, r7
 8014b24:	bd80      	pop	{r7, pc}
 8014b26:	bf00      	nop
 8014b28:	200004e8 	.word	0x200004e8

08014b2c <mqf_write_from_canton>:
LFMQUEUE_DEF_H(from_canton, msg_64_t)
 8014b2c:	b580      	push	{r7, lr}
 8014b2e:	b082      	sub	sp, #8
 8014b30:	af00      	add	r7, sp, #0
 8014b32:	6078      	str	r0, [r7, #4]
 8014b34:	6879      	ldr	r1, [r7, #4]
 8014b36:	4804      	ldr	r0, [pc, #16]	; (8014b48 <mqf_write_from_canton+0x1c>)
 8014b38:	f004 f9b2 	bl	8018ea0 <mqf_write>
 8014b3c:	4603      	mov	r3, r0
 8014b3e:	4618      	mov	r0, r3
 8014b40:	3708      	adds	r7, #8
 8014b42:	46bd      	mov	sp, r7
 8014b44:	bd80      	pop	{r7, pc}
 8014b46:	bf00      	nop
 8014b48:	200004f4 	.word	0x200004f4

08014b4c <canton_reset>:
//--------------------------------------------



static void canton_reset(void)
{
 8014b4c:	b580      	push	{r7, lr}
 8014b4e:	b086      	sub	sp, #24
 8014b50:	af02      	add	r7, sp, #8
	for (int i = 0; i<NUM_LOCAL_CANTONS_SW; i++) {
 8014b52:	2300      	movs	r3, #0
 8014b54:	60fb      	str	r3, [r7, #12]
 8014b56:	e01c      	b.n	8014b92 <canton_reset+0x46>
		USE_CANTON(i)
 8014b58:	68f8      	ldr	r0, [r7, #12]
 8014b5a:	f001 fa2b 	bl	8015fb4 <get_canton_cnf>
 8014b5e:	60b8      	str	r0, [r7, #8]
 8014b60:	68fb      	ldr	r3, [r7, #12]
 8014b62:	00db      	lsls	r3, r3, #3
 8014b64:	4a0e      	ldr	r2, [pc, #56]	; (8014ba0 <canton_reset+0x54>)
 8014b66:	4413      	add	r3, r2
 8014b68:	607b      	str	r3, [r7, #4]
		cvars->cur_dir = 99;
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	2263      	movs	r2, #99	; 0x63
 8014b6e:	701a      	strb	r2, [r3, #0]
		canton_set_pwm(i, cconf, cvars, 0, 0);
 8014b70:	2300      	movs	r3, #0
 8014b72:	9300      	str	r3, [sp, #0]
 8014b74:	2300      	movs	r3, #0
 8014b76:	687a      	ldr	r2, [r7, #4]
 8014b78:	68b9      	ldr	r1, [r7, #8]
 8014b7a:	68f8      	ldr	r0, [r7, #12]
 8014b7c:	f000 f98e 	bl	8014e9c <canton_set_pwm>
		canton_set_volt(i, cconf, cvars,  7);
 8014b80:	2307      	movs	r3, #7
 8014b82:	687a      	ldr	r2, [r7, #4]
 8014b84:	68b9      	ldr	r1, [r7, #8]
 8014b86:	68f8      	ldr	r0, [r7, #12]
 8014b88:	f000 fae4 	bl	8015154 <canton_set_volt>
	for (int i = 0; i<NUM_LOCAL_CANTONS_SW; i++) {
 8014b8c:	68fb      	ldr	r3, [r7, #12]
 8014b8e:	3301      	adds	r3, #1
 8014b90:	60fb      	str	r3, [r7, #12]
 8014b92:	68fb      	ldr	r3, [r7, #12]
 8014b94:	2b07      	cmp	r3, #7
 8014b96:	dddf      	ble.n	8014b58 <canton_reset+0xc>
	}
}
 8014b98:	bf00      	nop
 8014b9a:	3710      	adds	r7, #16
 8014b9c:	46bd      	mov	sp, r7
 8014b9e:	bd80      	pop	{r7, pc}
 8014ba0:	200052e0 	.word	0x200052e0

08014ba4 <handle_canton_cmd>:

static void handle_canton_cmd(int cidx, msg_64_t *m)
{
 8014ba4:	b580      	push	{r7, lr}
 8014ba6:	b086      	sub	sp, #24
 8014ba8:	af02      	add	r7, sp, #8
 8014baa:	6078      	str	r0, [r7, #4]
 8014bac:	6039      	str	r1, [r7, #0]
	if (m->cmd & 0x40) {
 8014bae:	683b      	ldr	r3, [r7, #0]
 8014bb0:	789b      	ldrb	r3, [r3, #2]
 8014bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d00b      	beq.n	8014bd2 <handle_canton_cmd+0x2e>
		itm_debug1(DBG_LOWCTRL, "msg-bemf", m->to);
 8014bba:	683b      	ldr	r3, [r7, #0]
 8014bbc:	781b      	ldrb	r3, [r3, #0]
 8014bbe:	461a      	mov	r2, r3
 8014bc0:	493a      	ldr	r1, [pc, #232]	; (8014cac <handle_canton_cmd+0x108>)
 8014bc2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8014bc6:	f7ff ff4b 	bl	8014a60 <itm_debug1>
		bemf_msg(m);
 8014bca:	6838      	ldr	r0, [r7, #0]
 8014bcc:	f000 fc52 	bl	8015474 <bemf_msg>
		return;
 8014bd0:	e069      	b.n	8014ca6 <handle_canton_cmd+0x102>
	}


	USE_CANTON(cidx)
 8014bd2:	6878      	ldr	r0, [r7, #4]
 8014bd4:	f001 f9ee 	bl	8015fb4 <get_canton_cnf>
 8014bd8:	60f8      	str	r0, [r7, #12]
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	00db      	lsls	r3, r3, #3
 8014bde:	4a34      	ldr	r2, [pc, #208]	; (8014cb0 <handle_canton_cmd+0x10c>)
 8014be0:	4413      	add	r3, r2
 8014be2:	60bb      	str	r3, [r7, #8]
	if (!cvars) {
 8014be4:	68bb      	ldr	r3, [r7, #8]
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	d105      	bne.n	8014bf6 <handle_canton_cmd+0x52>
		itm_debug1(DBG_LOWCTRL|DBG_ERR, "no cvars", cidx);
 8014bea:	687a      	ldr	r2, [r7, #4]
 8014bec:	4931      	ldr	r1, [pc, #196]	; (8014cb4 <handle_canton_cmd+0x110>)
 8014bee:	4832      	ldr	r0, [pc, #200]	; (8014cb8 <handle_canton_cmd+0x114>)
 8014bf0:	f7ff ff36 	bl	8014a60 <itm_debug1>
		return;
 8014bf4:	e057      	b.n	8014ca6 <handle_canton_cmd+0x102>
	}
	switch (m->cmd) {
 8014bf6:	683b      	ldr	r3, [r7, #0]
 8014bf8:	789b      	ldrb	r3, [r3, #2]
 8014bfa:	2b01      	cmp	r3, #1
 8014bfc:	d016      	beq.n	8014c2c <handle_canton_cmd+0x88>
 8014bfe:	2b02      	cmp	r3, #2
 8014c00:	d148      	bne.n	8014c94 <handle_canton_cmd+0xf0>
	case CMD_STOP:
		itm_debug1(DBG_LOWCTRL, "CMD STOP", 0);
 8014c02:	2200      	movs	r2, #0
 8014c04:	492d      	ldr	r1, [pc, #180]	; (8014cbc <handle_canton_cmd+0x118>)
 8014c06:	f44f 7080 	mov.w	r0, #256	; 0x100
 8014c0a:	f7ff ff29 	bl	8014a60 <itm_debug1>
		canton_set_pwm(cidx, cconf, cvars, 0, 0);
 8014c0e:	2300      	movs	r3, #0
 8014c10:	9300      	str	r3, [sp, #0]
 8014c12:	2300      	movs	r3, #0
 8014c14:	68ba      	ldr	r2, [r7, #8]
 8014c16:	68f9      	ldr	r1, [r7, #12]
 8014c18:	6878      	ldr	r0, [r7, #4]
 8014c1a:	f000 f93f 	bl	8014e9c <canton_set_pwm>
		canton_set_volt(cidx, cconf, cvars,  7);
 8014c1e:	2307      	movs	r3, #7
 8014c20:	68ba      	ldr	r2, [r7, #8]
 8014c22:	68f9      	ldr	r1, [r7, #12]
 8014c24:	6878      	ldr	r0, [r7, #4]
 8014c26:	f000 fa95 	bl	8015154 <canton_set_volt>
		break;
 8014c2a:	e03c      	b.n	8014ca6 <handle_canton_cmd+0x102>
	case CMD_SETVPWM:
		itm_debug3(DBG_LOWCTRL, "SETVPWM", cidx, m->v1u, m->v2);
 8014c2c:	683b      	ldr	r3, [r7, #0]
 8014c2e:	889b      	ldrh	r3, [r3, #4]
 8014c30:	461a      	mov	r2, r3
 8014c32:	683b      	ldr	r3, [r7, #0]
 8014c34:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8014c38:	9300      	str	r3, [sp, #0]
 8014c3a:	4613      	mov	r3, r2
 8014c3c:	687a      	ldr	r2, [r7, #4]
 8014c3e:	4920      	ldr	r1, [pc, #128]	; (8014cc0 <handle_canton_cmd+0x11c>)
 8014c40:	f44f 7080 	mov.w	r0, #256	; 0x100
 8014c44:	f7ff ff26 	bl	8014a94 <itm_debug3>
		canton_set_pwm(cidx, cconf, cvars, SIGNOF0(m->v2), abs(m->v2));
 8014c48:	683b      	ldr	r3, [r7, #0]
 8014c4a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	db09      	blt.n	8014c66 <handle_canton_cmd+0xc2>
 8014c52:	683b      	ldr	r3, [r7, #0]
 8014c54:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	bfcc      	ite	gt
 8014c5c:	2301      	movgt	r3, #1
 8014c5e:	2300      	movle	r3, #0
 8014c60:	b2db      	uxtb	r3, r3
 8014c62:	b25a      	sxtb	r2, r3
 8014c64:	e001      	b.n	8014c6a <handle_canton_cmd+0xc6>
 8014c66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014c6a:	683b      	ldr	r3, [r7, #0]
 8014c6c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8014c70:	2b00      	cmp	r3, #0
 8014c72:	bfb8      	it	lt
 8014c74:	425b      	neglt	r3, r3
 8014c76:	9300      	str	r3, [sp, #0]
 8014c78:	4613      	mov	r3, r2
 8014c7a:	68ba      	ldr	r2, [r7, #8]
 8014c7c:	68f9      	ldr	r1, [r7, #12]
 8014c7e:	6878      	ldr	r0, [r7, #4]
 8014c80:	f000 f90c 	bl	8014e9c <canton_set_pwm>
		canton_set_volt(cidx, cconf, cvars,  m->v1u);
 8014c84:	683b      	ldr	r3, [r7, #0]
 8014c86:	889b      	ldrh	r3, [r3, #4]
 8014c88:	68ba      	ldr	r2, [r7, #8]
 8014c8a:	68f9      	ldr	r1, [r7, #12]
 8014c8c:	6878      	ldr	r0, [r7, #4]
 8014c8e:	f000 fa61 	bl	8015154 <canton_set_volt>
		break;
 8014c92:	e008      	b.n	8014ca6 <handle_canton_cmd+0x102>
	default:
		itm_debug1(DBG_LOWCTRL, "not handled msg", m->cmd);
 8014c94:	683b      	ldr	r3, [r7, #0]
 8014c96:	789b      	ldrb	r3, [r3, #2]
 8014c98:	461a      	mov	r2, r3
 8014c9a:	490a      	ldr	r1, [pc, #40]	; (8014cc4 <handle_canton_cmd+0x120>)
 8014c9c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8014ca0:	f7ff fede 	bl	8014a60 <itm_debug1>
		break;
 8014ca4:	bf00      	nop
	}
}
 8014ca6:	3710      	adds	r7, #16
 8014ca8:	46bd      	mov	sp, r7
 8014caa:	bd80      	pop	{r7, pc}
 8014cac:	080197e0 	.word	0x080197e0
 8014cb0:	200052e0 	.word	0x200052e0
 8014cb4:	080197ec 	.word	0x080197ec
 8014cb8:	80000100 	.word	0x80000100
 8014cbc:	080197f8 	.word	0x080197f8
 8014cc0:	08019804 	.word	0x08019804
 8014cc4:	0801980c 	.word	0x0801980c

08014cc8 <canton_tick>:
static void handle_msg_normal(msg_64_t *m);
static void handle_msg_cantontest(msg_64_t *m);
static void handle_msg_detect1(msg_64_t *m);

void canton_tick(_UNUSED_ uint32_t notif_flags, _UNUSED_ uint32_t tick, _UNUSED_ uint32_t dt)
{
 8014cc8:	b580      	push	{r7, lr}
 8014cca:	b088      	sub	sp, #32
 8014ccc:	af00      	add	r7, sp, #0
 8014cce:	60f8      	str	r0, [r7, #12]
 8014cd0:	60b9      	str	r1, [r7, #8]
 8014cd2:	607a      	str	r2, [r7, #4]
	static int first=1;
	if (first) {
 8014cd4:	4b31      	ldr	r3, [pc, #196]	; (8014d9c <canton_tick+0xd4>)
 8014cd6:	681b      	ldr	r3, [r3, #0]
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	d006      	beq.n	8014cea <canton_tick+0x22>
		first = 0;
 8014cdc:	4b2f      	ldr	r3, [pc, #188]	; (8014d9c <canton_tick+0xd4>)
 8014cde:	2200      	movs	r2, #0
 8014ce0:	601a      	str	r2, [r3, #0]
		canton_reset();
 8014ce2:	f7ff ff33 	bl	8014b4c <canton_reset>
		bemf_reset();
 8014ce6:	f000 fbab 	bl	8015440 <bemf_reset>
	}
	for (;;) {
		msg_64_t m;
		int rc = mqf_read_to_canton(&m);
 8014cea:	f107 0310 	add.w	r3, r7, #16
 8014cee:	4618      	mov	r0, r3
 8014cf0:	f7ff ff0c 	bl	8014b0c <mqf_read_to_canton>
 8014cf4:	61f8      	str	r0, [r7, #28]
		if (rc) break;
 8014cf6:	69fb      	ldr	r3, [r7, #28]
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	d14b      	bne.n	8014d94 <canton_tick+0xcc>
        switch (m.cmd) {
 8014cfc:	7cbb      	ldrb	r3, [r7, #18]
 8014cfe:	2bfc      	cmp	r3, #252	; 0xfc
 8014d00:	d009      	beq.n	8014d16 <canton_tick+0x4e>
 8014d02:	2bfc      	cmp	r3, #252	; 0xfc
 8014d04:	db1e      	blt.n	8014d44 <canton_tick+0x7c>
 8014d06:	3bfe      	subs	r3, #254	; 0xfe
 8014d08:	2b01      	cmp	r3, #1
 8014d0a:	d81b      	bhi.n	8014d44 <canton_tick+0x7c>
        case CMD_RESET: // FALLTHRU
        case CMD_EMERGENCY_STOP:
            canton_reset();
 8014d0c:	f7ff ff1e 	bl	8014b4c <canton_reset>
            bemf_reset();
 8014d10:	f000 fb96 	bl	8015440 <bemf_reset>
            break;
 8014d14:	e019      	b.n	8014d4a <canton_tick+0x82>
        case CMD_SETRUN_MODE:
        	if (m.v1u != run_mode) {
 8014d16:	8aba      	ldrh	r2, [r7, #20]
 8014d18:	4b21      	ldr	r3, [pc, #132]	; (8014da0 <canton_tick+0xd8>)
 8014d1a:	781b      	ldrb	r3, [r3, #0]
 8014d1c:	b29b      	uxth	r3, r3
 8014d1e:	429a      	cmp	r2, r3
 8014d20:	d012      	beq.n	8014d48 <canton_tick+0x80>
        		run_mode = m.v1u;
 8014d22:	8abb      	ldrh	r3, [r7, #20]
 8014d24:	b2da      	uxtb	r2, r3
 8014d26:	4b1e      	ldr	r3, [pc, #120]	; (8014da0 <canton_tick+0xd8>)
 8014d28:	701a      	strb	r2, [r3, #0]
        		testerAddr = m.from;
 8014d2a:	7c7a      	ldrb	r2, [r7, #17]
 8014d2c:	4b1d      	ldr	r3, [pc, #116]	; (8014da4 <canton_tick+0xdc>)
 8014d2e:	701a      	strb	r2, [r3, #0]
        		bemf_run_mode = run_mode; //(m.to == MA_BROADCAST) ? 1 : 0;
 8014d30:	4b1b      	ldr	r3, [pc, #108]	; (8014da0 <canton_tick+0xd8>)
 8014d32:	781a      	ldrb	r2, [r3, #0]
 8014d34:	4b1c      	ldr	r3, [pc, #112]	; (8014da8 <canton_tick+0xe0>)
 8014d36:	701a      	strb	r2, [r3, #0]
        		bemf_reset();
 8014d38:	f000 fb82 	bl	8015440 <bemf_reset>
        		first = 1;
 8014d3c:	4b17      	ldr	r3, [pc, #92]	; (8014d9c <canton_tick+0xd4>)
 8014d3e:	2201      	movs	r2, #1
 8014d40:	601a      	str	r2, [r3, #0]
        	}
            break;
 8014d42:	e001      	b.n	8014d48 <canton_tick+0x80>
        default:
        	break;
 8014d44:	bf00      	nop
 8014d46:	e000      	b.n	8014d4a <canton_tick+0x82>
            break;
 8014d48:	bf00      	nop
        }
        switch (run_mode) {
 8014d4a:	4b15      	ldr	r3, [pc, #84]	; (8014da0 <canton_tick+0xd8>)
 8014d4c:	781b      	ldrb	r3, [r3, #0]
 8014d4e:	2b04      	cmp	r3, #4
 8014d50:	d81e      	bhi.n	8014d90 <canton_tick+0xc8>
 8014d52:	a201      	add	r2, pc, #4	; (adr r2, 8014d58 <canton_tick+0x90>)
 8014d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014d58:	08014d91 	.word	0x08014d91
 8014d5c:	08014d6d 	.word	0x08014d6d
 8014d60:	08014d85 	.word	0x08014d85
 8014d64:	08014d79 	.word	0x08014d79
 8014d68:	08014d91 	.word	0x08014d91
        case runmode_off:
        	break;
        case runmode_normal:
        	handle_msg_normal(&m);
 8014d6c:	f107 0310 	add.w	r3, r7, #16
 8014d70:	4618      	mov	r0, r3
 8014d72:	f000 f81b 	bl	8014dac <handle_msg_normal>
        	break;
 8014d76:	e00c      	b.n	8014d92 <canton_tick+0xca>
        case runmode_detect1:
        	handle_msg_detect1(&m);
 8014d78:	f107 0310 	add.w	r3, r7, #16
 8014d7c:	4618      	mov	r0, r3
 8014d7e:	f000 f830 	bl	8014de2 <handle_msg_detect1>
        	break;
 8014d82:	e006      	b.n	8014d92 <canton_tick+0xca>
        case runmode_detect:
        	break;
        case runmode_testcanton:
        	handle_msg_cantontest(&m);
 8014d84:	f107 0310 	add.w	r3, r7, #16
 8014d88:	4618      	mov	r0, r3
 8014d8a:	f000 f835 	bl	8014df8 <handle_msg_cantontest>
        	break;
 8014d8e:	e000      	b.n	8014d92 <canton_tick+0xca>
        default:
        	break;
 8014d90:	bf00      	nop
	for (;;) {
 8014d92:	e7aa      	b.n	8014cea <canton_tick+0x22>
        }
	}
}
 8014d94:	bf00      	nop
 8014d96:	3720      	adds	r7, #32
 8014d98:	46bd      	mov	sp, r7
 8014d9a:	bd80      	pop	{r7, pc}
 8014d9c:	20000238 	.word	0x20000238
 8014da0:	20005320 	.word	0x20005320
 8014da4:	20005321 	.word	0x20005321
 8014da8:	20005322 	.word	0x20005322

08014dac <handle_msg_normal>:


static void handle_msg_normal(msg_64_t *m)
{
 8014dac:	b580      	push	{r7, lr}
 8014dae:	b084      	sub	sp, #16
 8014db0:	af00      	add	r7, sp, #0
 8014db2:	6078      	str	r0, [r7, #4]
    int cidx = -1;
 8014db4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014db8:	60fb      	str	r3, [r7, #12]
    if (!IS_CANTON(m->to)) return;
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	781b      	ldrb	r3, [r3, #0]
 8014dbe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8014dc2:	2b00      	cmp	r3, #0
 8014dc4:	d109      	bne.n	8014dda <handle_msg_normal+0x2e>
    cidx = m->to & 0x07;
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	781b      	ldrb	r3, [r3, #0]
 8014dca:	f003 0307 	and.w	r3, r3, #7
 8014dce:	60fb      	str	r3, [r7, #12]
    handle_canton_cmd(cidx, m);
 8014dd0:	6879      	ldr	r1, [r7, #4]
 8014dd2:	68f8      	ldr	r0, [r7, #12]
 8014dd4:	f7ff fee6 	bl	8014ba4 <handle_canton_cmd>
 8014dd8:	e000      	b.n	8014ddc <handle_msg_normal+0x30>
    if (!IS_CANTON(m->to)) return;
 8014dda:	bf00      	nop
}
 8014ddc:	3710      	adds	r7, #16
 8014dde:	46bd      	mov	sp, r7
 8014de0:	bd80      	pop	{r7, pc}

08014de2 <handle_msg_detect1>:

static void handle_msg_detect1(msg_64_t *m)
{
 8014de2:	b580      	push	{r7, lr}
 8014de4:	b082      	sub	sp, #8
 8014de6:	af00      	add	r7, sp, #0
 8014de8:	6078      	str	r0, [r7, #4]
	handle_msg_normal(m);
 8014dea:	6878      	ldr	r0, [r7, #4]
 8014dec:	f7ff ffde 	bl	8014dac <handle_msg_normal>
}
 8014df0:	bf00      	nop
 8014df2:	3708      	adds	r7, #8
 8014df4:	46bd      	mov	sp, r7
 8014df6:	bd80      	pop	{r7, pc}

08014df8 <handle_msg_cantontest>:

static void handle_msg_cantontest(msg_64_t *m)
{
 8014df8:	b580      	push	{r7, lr}
 8014dfa:	b086      	sub	sp, #24
 8014dfc:	af00      	add	r7, sp, #0
 8014dfe:	6078      	str	r0, [r7, #4]
	int cidx = -1;
 8014e00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014e04:	617b      	str	r3, [r7, #20]
	if (IS_BROADCAST(m->to)) {
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	781b      	ldrb	r3, [r3, #0]
 8014e0a:	2bff      	cmp	r3, #255	; 0xff
 8014e0c:	d103      	bne.n	8014e16 <handle_msg_cantontest+0x1e>
		cidx = -1;
 8014e0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014e12:	617b      	str	r3, [r7, #20]
 8014e14:	e014      	b.n	8014e40 <handle_msg_cantontest+0x48>
	} else if (IS_CANTON(m->to)) {
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	781b      	ldrb	r3, [r3, #0]
 8014e1a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8014e1e:	2b00      	cmp	r3, #0
 8014e20:	d105      	bne.n	8014e2e <handle_msg_cantontest+0x36>
		cidx = m->to & 0x07;
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	781b      	ldrb	r3, [r3, #0]
 8014e26:	f003 0307 	and.w	r3, r3, #7
 8014e2a:	617b      	str	r3, [r7, #20]
 8014e2c:	e008      	b.n	8014e40 <handle_msg_cantontest+0x48>
	} else {
		itm_debug1(DBG_LOWCTRL, "not handled msg", m->cmd);
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	789b      	ldrb	r3, [r3, #2]
 8014e32:	461a      	mov	r2, r3
 8014e34:	4918      	ldr	r1, [pc, #96]	; (8014e98 <handle_msg_cantontest+0xa0>)
 8014e36:	f44f 7080 	mov.w	r0, #256	; 0x100
 8014e3a:	f7ff fe11 	bl	8014a60 <itm_debug1>
		return;
 8014e3e:	e028      	b.n	8014e92 <handle_msg_cantontest+0x9a>
	}
    if (CMD_SETVPWM == m->cmd) {
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	789b      	ldrb	r3, [r3, #2]
 8014e44:	2b01      	cmp	r3, #1
 8014e46:	d10f      	bne.n	8014e68 <handle_msg_cantontest+0x70>
    	// in test mode, forward CMD_SETVPWM to UI for display
    	msg_64_t m2 = *m;
 8014e48:	687a      	ldr	r2, [r7, #4]
 8014e4a:	f107 0308 	add.w	r3, r7, #8
 8014e4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014e52:	e883 0003 	stmia.w	r3, {r0, r1}
    	m2.from = m2.to;
 8014e56:	7a3b      	ldrb	r3, [r7, #8]
 8014e58:	727b      	strb	r3, [r7, #9]
    	m2.to = MA_UI(1);
 8014e5a:	2381      	movs	r3, #129	; 0x81
 8014e5c:	723b      	strb	r3, [r7, #8]
    	mqf_write_from_canton(&m2);
 8014e5e:	f107 0308 	add.w	r3, r7, #8
 8014e62:	4618      	mov	r0, r3
 8014e64:	f7ff fe62 	bl	8014b2c <mqf_write_from_canton>
    }
    if (cidx>=0) handle_canton_cmd(cidx, m);
 8014e68:	697b      	ldr	r3, [r7, #20]
 8014e6a:	2b00      	cmp	r3, #0
 8014e6c:	db04      	blt.n	8014e78 <handle_msg_cantontest+0x80>
 8014e6e:	6879      	ldr	r1, [r7, #4]
 8014e70:	6978      	ldr	r0, [r7, #20]
 8014e72:	f7ff fe97 	bl	8014ba4 <handle_canton_cmd>
 8014e76:	e00c      	b.n	8014e92 <handle_msg_cantontest+0x9a>
    else {
    	// broadcast
    	for (int i=0; i<NUM_LOCAL_CANTONS_HW; i++) {
 8014e78:	2300      	movs	r3, #0
 8014e7a:	613b      	str	r3, [r7, #16]
 8014e7c:	e006      	b.n	8014e8c <handle_msg_cantontest+0x94>
    		handle_canton_cmd(i, m);
 8014e7e:	6879      	ldr	r1, [r7, #4]
 8014e80:	6938      	ldr	r0, [r7, #16]
 8014e82:	f7ff fe8f 	bl	8014ba4 <handle_canton_cmd>
    	for (int i=0; i<NUM_LOCAL_CANTONS_HW; i++) {
 8014e86:	693b      	ldr	r3, [r7, #16]
 8014e88:	3301      	adds	r3, #1
 8014e8a:	613b      	str	r3, [r7, #16]
 8014e8c:	693b      	ldr	r3, [r7, #16]
 8014e8e:	2b04      	cmp	r3, #4
 8014e90:	ddf5      	ble.n	8014e7e <handle_msg_cantontest+0x86>
    	}
    }
}
 8014e92:	3718      	adds	r7, #24
 8014e94:	46bd      	mov	sp, r7
 8014e96:	bd80      	pop	{r7, pc}
 8014e98:	0801980c 	.word	0x0801980c

08014e9c <canton_set_pwm>:
#define USE_PWM_STOP 0
/*
 * it seems that output goes to high impedence when we stop pwm ????
 */
static void canton_set_pwm(int cidx, const canton_config_t *c, canton_vars_t *v,  int8_t dir, int duty)
{
 8014e9c:	b580      	push	{r7, lr}
 8014e9e:	b08a      	sub	sp, #40	; 0x28
 8014ea0:	af02      	add	r7, sp, #8
 8014ea2:	60f8      	str	r0, [r7, #12]
 8014ea4:	60b9      	str	r1, [r7, #8]
 8014ea6:	607a      	str	r2, [r7, #4]
 8014ea8:	70fb      	strb	r3, [r7, #3]
	itm_debug3(DBG_LOWCTRL, "c/set_pwm", cidx, dir, duty);
 8014eaa:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8014eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014eb0:	9300      	str	r3, [sp, #0]
 8014eb2:	4613      	mov	r3, r2
 8014eb4:	68fa      	ldr	r2, [r7, #12]
 8014eb6:	499c      	ldr	r1, [pc, #624]	; (8015128 <canton_set_pwm+0x28c>)
 8014eb8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8014ebc:	f7ff fdea 	bl	8014a94 <itm_debug3>
	int t = 2*duty; // with centered pwm (or normal)
 8014ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ec2:	005b      	lsls	r3, r3, #1
 8014ec4:	617b      	str	r3, [r7, #20]

	if ((v->cur_dir == dir) && (v->cur_pwm_duty==duty)) {
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	f993 3000 	ldrsb.w	r3, [r3]
 8014ecc:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8014ed0:	429a      	cmp	r2, r3
 8014ed2:	d10c      	bne.n	8014eee <canton_set_pwm+0x52>
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	885b      	ldrh	r3, [r3, #2]
 8014ed8:	461a      	mov	r2, r3
 8014eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014edc:	4293      	cmp	r3, r2
 8014ede:	d106      	bne.n	8014eee <canton_set_pwm+0x52>
		itm_debug1(DBG_LOWCTRL, "c/same", duty);
 8014ee0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014ee2:	4992      	ldr	r1, [pc, #584]	; (801512c <canton_set_pwm+0x290>)
 8014ee4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8014ee8:	f7ff fdba 	bl	8014a60 <itm_debug1>
		return;
 8014eec:	e118      	b.n	8015120 <canton_set_pwm+0x284>
	}

	TIM_HandleTypeDef *pwm_timer = CantonTimerHandles[c->pwm_timer_num];
 8014eee:	68bb      	ldr	r3, [r7, #8]
 8014ef0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8014ef4:	461a      	mov	r2, r3
 8014ef6:	4b8e      	ldr	r3, [pc, #568]	; (8015130 <canton_set_pwm+0x294>)
 8014ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014efc:	613b      	str	r3, [r7, #16]
	if (!pwm_timer) {
 8014efe:	693b      	ldr	r3, [r7, #16]
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	d108      	bne.n	8014f16 <canton_set_pwm+0x7a>
		itm_debug1(DBG_LOWCTRL|DBG_ERR, "c/notim", c->pwm_timer_num);
 8014f04:	68bb      	ldr	r3, [r7, #8]
 8014f06:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8014f0a:	461a      	mov	r2, r3
 8014f0c:	4989      	ldr	r1, [pc, #548]	; (8015134 <canton_set_pwm+0x298>)
 8014f0e:	488a      	ldr	r0, [pc, #552]	; (8015138 <canton_set_pwm+0x29c>)
 8014f10:	f7ff fda6 	bl	8014a60 <itm_debug1>
		return;
 8014f14:	e104      	b.n	8015120 <canton_set_pwm+0x284>
	}
	if (v->cur_dir != dir) {
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	f993 3000 	ldrsb.w	r3, [r3]
 8014f1c:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8014f20:	429a      	cmp	r2, r3
 8014f22:	d03e      	beq.n	8014fa2 <canton_set_pwm+0x106>
		v->cur_dir = dir;
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	78fa      	ldrb	r2, [r7, #3]
 8014f28:	701a      	strb	r2, [r3, #0]
		itm_debug3(DBG_LOWCTRL, "set dir", dir, c->ch0, c->ch1);
 8014f2a:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8014f2e:	68bb      	ldr	r3, [r7, #8]
 8014f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f32:	4619      	mov	r1, r3
 8014f34:	68bb      	ldr	r3, [r7, #8]
 8014f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014f38:	9300      	str	r3, [sp, #0]
 8014f3a:	460b      	mov	r3, r1
 8014f3c:	497f      	ldr	r1, [pc, #508]	; (801513c <canton_set_pwm+0x2a0>)
 8014f3e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8014f42:	f7ff fda7 	bl	8014a94 <itm_debug3>
		if (dir>0) {
 8014f46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	dd0c      	ble.n	8014f68 <canton_set_pwm+0xcc>
			if (USE_PWM_STOP) my_HAL_TIM_PWM_Stop(pwm_timer, c->ch1);
			else HAL_TIM_PWM_Start(pwm_timer, c->ch1);
 8014f4e:	68bb      	ldr	r3, [r7, #8]
 8014f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014f52:	4619      	mov	r1, r3
 8014f54:	6938      	ldr	r0, [r7, #16]
 8014f56:	f7f3 f83f 	bl	8007fd8 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(pwm_timer, c->ch0);
 8014f5a:	68bb      	ldr	r3, [r7, #8]
 8014f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f5e:	4619      	mov	r1, r3
 8014f60:	6938      	ldr	r0, [r7, #16]
 8014f62:	f7f3 f839 	bl	8007fd8 <HAL_TIM_PWM_Start>
 8014f66:	e01c      	b.n	8014fa2 <canton_set_pwm+0x106>
		} else if (dir<0) {
 8014f68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	da0c      	bge.n	8014f8a <canton_set_pwm+0xee>
			if (USE_PWM_STOP) my_HAL_TIM_PWM_Stop(pwm_timer, c->ch0);
			else HAL_TIM_PWM_Start(pwm_timer, c->ch0);
 8014f70:	68bb      	ldr	r3, [r7, #8]
 8014f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f74:	4619      	mov	r1, r3
 8014f76:	6938      	ldr	r0, [r7, #16]
 8014f78:	f7f3 f82e 	bl	8007fd8 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(pwm_timer, c->ch1);
 8014f7c:	68bb      	ldr	r3, [r7, #8]
 8014f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014f80:	4619      	mov	r1, r3
 8014f82:	6938      	ldr	r0, [r7, #16]
 8014f84:	f7f3 f828 	bl	8007fd8 <HAL_TIM_PWM_Start>
 8014f88:	e00b      	b.n	8014fa2 <canton_set_pwm+0x106>
		} else {
			if (USE_PWM_STOP) {
				my_HAL_TIM_PWM_Stop(pwm_timer, c->ch0);
				my_HAL_TIM_PWM_Stop(pwm_timer, c->ch1);
			} else {
				HAL_TIM_PWM_Start(pwm_timer, c->ch0);
 8014f8a:	68bb      	ldr	r3, [r7, #8]
 8014f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f8e:	4619      	mov	r1, r3
 8014f90:	6938      	ldr	r0, [r7, #16]
 8014f92:	f7f3 f821 	bl	8007fd8 <HAL_TIM_PWM_Start>
				HAL_TIM_PWM_Start(pwm_timer, c->ch1);
 8014f96:	68bb      	ldr	r3, [r7, #8]
 8014f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014f9a:	4619      	mov	r1, r3
 8014f9c:	6938      	ldr	r0, [r7, #16]
 8014f9e:	f7f3 f81b 	bl	8007fd8 <HAL_TIM_PWM_Start>
			}
		}
	}
	if (!dir) {
 8014fa2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	d101      	bne.n	8014fae <canton_set_pwm+0x112>
		duty = 0;
 8014faa:	2300      	movs	r3, #0
 8014fac:	62bb      	str	r3, [r7, #40]	; 0x28
		if (USE_PWM_STOP) {
			v->cur_pwm_duty = 0;
			return;
		}
	}
	v->cur_pwm_duty = duty;
 8014fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fb0:	b29a      	uxth	r2, r3
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	805a      	strh	r2, [r3, #2]
	uint32_t chon;
	uint32_t choff;
	if (dir>0) {
 8014fb6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	dd06      	ble.n	8014fcc <canton_set_pwm+0x130>
		chon = c->ch0;
 8014fbe:	68bb      	ldr	r3, [r7, #8]
 8014fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014fc2:	61bb      	str	r3, [r7, #24]
		choff = c->ch1;
 8014fc4:	68bb      	ldr	r3, [r7, #8]
 8014fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014fc8:	61fb      	str	r3, [r7, #28]
 8014fca:	e005      	b.n	8014fd8 <canton_set_pwm+0x13c>
	} else {
		chon = c->ch1;
 8014fcc:	68bb      	ldr	r3, [r7, #8]
 8014fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014fd0:	61bb      	str	r3, [r7, #24]
		choff = c->ch0;
 8014fd2:	68bb      	ldr	r3, [r7, #8]
 8014fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014fd6:	61fb      	str	r3, [r7, #28]
	}
	if (!USE_PWM_STOP) {
		switch (choff) {
 8014fd8:	69fb      	ldr	r3, [r7, #28]
 8014fda:	2b0c      	cmp	r3, #12
 8014fdc:	d848      	bhi.n	8015070 <canton_set_pwm+0x1d4>
 8014fde:	a201      	add	r2, pc, #4	; (adr r2, 8014fe4 <canton_set_pwm+0x148>)
 8014fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014fe4:	08015019 	.word	0x08015019
 8014fe8:	08015071 	.word	0x08015071
 8014fec:	08015071 	.word	0x08015071
 8014ff0:	08015071 	.word	0x08015071
 8014ff4:	0801502f 	.word	0x0801502f
 8014ff8:	08015071 	.word	0x08015071
 8014ffc:	08015071 	.word	0x08015071
 8015000:	08015071 	.word	0x08015071
 8015004:	08015045 	.word	0x08015045
 8015008:	08015071 	.word	0x08015071
 801500c:	08015071 	.word	0x08015071
 8015010:	08015071 	.word	0x08015071
 8015014:	0801505b 	.word	0x0801505b
		case TIM_CHANNEL_1:
			itm_debug1(DBG_LOWCTRL|DBG_TIM, "CH1/CCR1", 0);
 8015018:	2200      	movs	r2, #0
 801501a:	4949      	ldr	r1, [pc, #292]	; (8015140 <canton_set_pwm+0x2a4>)
 801501c:	f240 1001 	movw	r0, #257	; 0x101
 8015020:	f7ff fd1e 	bl	8014a60 <itm_debug1>
			pwm_timer->Instance->CCR1 = 0;
 8015024:	693b      	ldr	r3, [r7, #16]
 8015026:	681b      	ldr	r3, [r3, #0]
 8015028:	2200      	movs	r2, #0
 801502a:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 801502c:	e026      	b.n	801507c <canton_set_pwm+0x1e0>
		case TIM_CHANNEL_2:
			itm_debug1(DBG_LOWCTRL|DBG_TIM, "CH2/CCR1", 0);
 801502e:	2200      	movs	r2, #0
 8015030:	4944      	ldr	r1, [pc, #272]	; (8015144 <canton_set_pwm+0x2a8>)
 8015032:	f240 1001 	movw	r0, #257	; 0x101
 8015036:	f7ff fd13 	bl	8014a60 <itm_debug1>
			pwm_timer->Instance->CCR2 = 0;
 801503a:	693b      	ldr	r3, [r7, #16]
 801503c:	681b      	ldr	r3, [r3, #0]
 801503e:	2200      	movs	r2, #0
 8015040:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8015042:	e01b      	b.n	801507c <canton_set_pwm+0x1e0>
		case TIM_CHANNEL_3:
			itm_debug1(DBG_LOWCTRL|DBG_TIM, "CH3/CCR1", 0);
 8015044:	2200      	movs	r2, #0
 8015046:	4940      	ldr	r1, [pc, #256]	; (8015148 <canton_set_pwm+0x2ac>)
 8015048:	f240 1001 	movw	r0, #257	; 0x101
 801504c:	f7ff fd08 	bl	8014a60 <itm_debug1>
			pwm_timer->Instance->CCR3 = 0;
 8015050:	693b      	ldr	r3, [r7, #16]
 8015052:	681b      	ldr	r3, [r3, #0]
 8015054:	2200      	movs	r2, #0
 8015056:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8015058:	e010      	b.n	801507c <canton_set_pwm+0x1e0>
		case TIM_CHANNEL_4:
			itm_debug1(DBG_LOWCTRL|DBG_TIM, "CH4/CCR1", 0);
 801505a:	2200      	movs	r2, #0
 801505c:	493b      	ldr	r1, [pc, #236]	; (801514c <canton_set_pwm+0x2b0>)
 801505e:	f240 1001 	movw	r0, #257	; 0x101
 8015062:	f7ff fcfd 	bl	8014a60 <itm_debug1>
			pwm_timer->Instance->CCR4 = 0;
 8015066:	693b      	ldr	r3, [r7, #16]
 8015068:	681b      	ldr	r3, [r3, #0]
 801506a:	2200      	movs	r2, #0
 801506c:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 801506e:	e005      	b.n	801507c <canton_set_pwm+0x1e0>
		default:
			canton_error(ERR_BAD_PARAM_TIM, "bad timer channel");
 8015070:	4937      	ldr	r1, [pc, #220]	; (8015150 <canton_set_pwm+0x2b4>)
 8015072:	f06f 0002 	mvn.w	r0, #2
 8015076:	f7ff fd29 	bl	8014acc <canton_error>
			break;
 801507a:	bf00      	nop
		}
	}
	switch (chon) {
 801507c:	69bb      	ldr	r3, [r7, #24]
 801507e:	2b0c      	cmp	r3, #12
 8015080:	d848      	bhi.n	8015114 <canton_set_pwm+0x278>
 8015082:	a201      	add	r2, pc, #4	; (adr r2, 8015088 <canton_set_pwm+0x1ec>)
 8015084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015088:	080150bd 	.word	0x080150bd
 801508c:	08015115 	.word	0x08015115
 8015090:	08015115 	.word	0x08015115
 8015094:	08015115 	.word	0x08015115
 8015098:	080150d3 	.word	0x080150d3
 801509c:	08015115 	.word	0x08015115
 80150a0:	08015115 	.word	0x08015115
 80150a4:	08015115 	.word	0x08015115
 80150a8:	080150e9 	.word	0x080150e9
 80150ac:	08015115 	.word	0x08015115
 80150b0:	08015115 	.word	0x08015115
 80150b4:	08015115 	.word	0x08015115
 80150b8:	080150ff 	.word	0x080150ff
	case TIM_CHANNEL_1:
		itm_debug1(DBG_LOWCTRL|DBG_TIM, "CH1/CCR1", t);
 80150bc:	697a      	ldr	r2, [r7, #20]
 80150be:	4920      	ldr	r1, [pc, #128]	; (8015140 <canton_set_pwm+0x2a4>)
 80150c0:	f240 1001 	movw	r0, #257	; 0x101
 80150c4:	f7ff fccc 	bl	8014a60 <itm_debug1>
		pwm_timer->Instance->CCR1 = t;
 80150c8:	693b      	ldr	r3, [r7, #16]
 80150ca:	681b      	ldr	r3, [r3, #0]
 80150cc:	697a      	ldr	r2, [r7, #20]
 80150ce:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 80150d0:	e026      	b.n	8015120 <canton_set_pwm+0x284>
	case TIM_CHANNEL_2:
		itm_debug1(DBG_LOWCTRL|DBG_TIM, "CH2/CCR1", t);
 80150d2:	697a      	ldr	r2, [r7, #20]
 80150d4:	491b      	ldr	r1, [pc, #108]	; (8015144 <canton_set_pwm+0x2a8>)
 80150d6:	f240 1001 	movw	r0, #257	; 0x101
 80150da:	f7ff fcc1 	bl	8014a60 <itm_debug1>
		pwm_timer->Instance->CCR2 = t;
 80150de:	693b      	ldr	r3, [r7, #16]
 80150e0:	681b      	ldr	r3, [r3, #0]
 80150e2:	697a      	ldr	r2, [r7, #20]
 80150e4:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 80150e6:	e01b      	b.n	8015120 <canton_set_pwm+0x284>
	case TIM_CHANNEL_3:
		itm_debug1(DBG_LOWCTRL|DBG_TIM, "CH3/CCR1", t);
 80150e8:	697a      	ldr	r2, [r7, #20]
 80150ea:	4917      	ldr	r1, [pc, #92]	; (8015148 <canton_set_pwm+0x2ac>)
 80150ec:	f240 1001 	movw	r0, #257	; 0x101
 80150f0:	f7ff fcb6 	bl	8014a60 <itm_debug1>
		pwm_timer->Instance->CCR3 = t;
 80150f4:	693b      	ldr	r3, [r7, #16]
 80150f6:	681b      	ldr	r3, [r3, #0]
 80150f8:	697a      	ldr	r2, [r7, #20]
 80150fa:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 80150fc:	e010      	b.n	8015120 <canton_set_pwm+0x284>
	case TIM_CHANNEL_4:
		itm_debug1(DBG_LOWCTRL|DBG_TIM, "CH4/CCR1", t);
 80150fe:	697a      	ldr	r2, [r7, #20]
 8015100:	4912      	ldr	r1, [pc, #72]	; (801514c <canton_set_pwm+0x2b0>)
 8015102:	f240 1001 	movw	r0, #257	; 0x101
 8015106:	f7ff fcab 	bl	8014a60 <itm_debug1>
		pwm_timer->Instance->CCR4 = t;
 801510a:	693b      	ldr	r3, [r7, #16]
 801510c:	681b      	ldr	r3, [r3, #0]
 801510e:	697a      	ldr	r2, [r7, #20]
 8015110:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8015112:	e005      	b.n	8015120 <canton_set_pwm+0x284>
	default:
		canton_error(ERR_BAD_PARAM_TIM, "bad timer channel");
 8015114:	490e      	ldr	r1, [pc, #56]	; (8015150 <canton_set_pwm+0x2b4>)
 8015116:	f06f 0002 	mvn.w	r0, #2
 801511a:	f7ff fcd7 	bl	8014acc <canton_error>
		break;
 801511e:	bf00      	nop
	}

}
 8015120:	3720      	adds	r7, #32
 8015122:	46bd      	mov	sp, r7
 8015124:	bd80      	pop	{r7, pc}
 8015126:	bf00      	nop
 8015128:	0801981c 	.word	0x0801981c
 801512c:	08019828 	.word	0x08019828
 8015130:	200052c0 	.word	0x200052c0
 8015134:	08019830 	.word	0x08019830
 8015138:	80000100 	.word	0x80000100
 801513c:	08019838 	.word	0x08019838
 8015140:	08019840 	.word	0x08019840
 8015144:	0801984c 	.word	0x0801984c
 8015148:	08019858 	.word	0x08019858
 801514c:	08019864 	.word	0x08019864
 8015150:	08019870 	.word	0x08019870

08015154 <canton_set_volt>:
void canton_set_volt(int cidx, const canton_config_t *c, canton_vars_t *v, int voltidx)
{
 8015154:	b580      	push	{r7, lr}
 8015156:	b086      	sub	sp, #24
 8015158:	af02      	add	r7, sp, #8
 801515a:	60f8      	str	r0, [r7, #12]
 801515c:	60b9      	str	r1, [r7, #8]
 801515e:	607a      	str	r2, [r7, #4]
 8015160:	603b      	str	r3, [r7, #0]
	v->cur_voltidx = voltidx;
 8015162:	683b      	ldr	r3, [r7, #0]
 8015164:	b2da      	uxtb	r2, r3
 8015166:	687b      	ldr	r3, [r7, #4]
 8015168:	705a      	strb	r2, [r3, #1]
    v->selected_centivolt =  (c->volts_cv[v->cur_voltidx]);
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	785b      	ldrb	r3, [r3, #1]
 801516e:	461a      	mov	r2, r3
 8015170:	68bb      	ldr	r3, [r7, #8]
 8015172:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8015176:	461a      	mov	r2, r3
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	605a      	str	r2, [r3, #4]
	itm_debug3(DBG_LOWCTRL, "c/set_volt", cidx, voltidx, v->selected_centivolt);
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	685b      	ldr	r3, [r3, #4]
 8015180:	9300      	str	r3, [sp, #0]
 8015182:	683b      	ldr	r3, [r7, #0]
 8015184:	68fa      	ldr	r2, [r7, #12]
 8015186:	4917      	ldr	r1, [pc, #92]	; (80151e4 <canton_set_volt+0x90>)
 8015188:	f44f 7080 	mov.w	r0, #256	; 0x100
 801518c:	f7ff fc82 	bl	8014a94 <itm_debug3>
    if ((0)) debug_info('C', 0, "SET VLT ", voltidx,  v->selected_centivolt,0);
    if ((0)) debug_info('C', 0, "VLT BIT ", (voltidx & 0x03) ? 1 : 0,
    				(voltidx & 0x02) ? 1 : 0,
    				(voltidx & 0x01) ? 1 : 0);

	HAL_GPIO_WritePin(c->volt_port_b0, c->volt_b0, (voltidx & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8015190:	68bb      	ldr	r3, [r7, #8]
 8015192:	6918      	ldr	r0, [r3, #16]
 8015194:	68bb      	ldr	r3, [r7, #8]
 8015196:	8b99      	ldrh	r1, [r3, #28]
 8015198:	683b      	ldr	r3, [r7, #0]
 801519a:	b2db      	uxtb	r3, r3
 801519c:	f003 0301 	and.w	r3, r3, #1
 80151a0:	b2db      	uxtb	r3, r3
 80151a2:	461a      	mov	r2, r3
 80151a4:	f7ee f832 	bl	800320c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(c->volt_port_b1, c->volt_b1, (voltidx & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80151a8:	68bb      	ldr	r3, [r7, #8]
 80151aa:	6958      	ldr	r0, [r3, #20]
 80151ac:	68bb      	ldr	r3, [r7, #8]
 80151ae:	8bd9      	ldrh	r1, [r3, #30]
 80151b0:	683b      	ldr	r3, [r7, #0]
 80151b2:	105b      	asrs	r3, r3, #1
 80151b4:	b2db      	uxtb	r3, r3
 80151b6:	f003 0301 	and.w	r3, r3, #1
 80151ba:	b2db      	uxtb	r3, r3
 80151bc:	461a      	mov	r2, r3
 80151be:	f7ee f825 	bl	800320c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(c->volt_port_b2, c->volt_b2, (voltidx & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80151c2:	68bb      	ldr	r3, [r7, #8]
 80151c4:	6998      	ldr	r0, [r3, #24]
 80151c6:	68bb      	ldr	r3, [r7, #8]
 80151c8:	8c19      	ldrh	r1, [r3, #32]
 80151ca:	683b      	ldr	r3, [r7, #0]
 80151cc:	109b      	asrs	r3, r3, #2
 80151ce:	b2db      	uxtb	r3, r3
 80151d0:	f003 0301 	and.w	r3, r3, #1
 80151d4:	b2db      	uxtb	r3, r3
 80151d6:	461a      	mov	r2, r3
 80151d8:	f7ee f818 	bl	800320c <HAL_GPIO_WritePin>
	if (voltidx & 0x04) s |= VOLT_0_SEL2_Pin; else r |=  c->volt_b2;
	if (voltidx & 0x08) s |= VOLT_0_SEL3_Pin; else r |=  c->volt_b3;
	HAL_GPIO_WritePin(c->volt_port, s, GPIO_PIN_SET);
	HAL_GPIO_WritePin(c->volt_port, r, GPIO_PIN_RESET);
#endif
}
 80151dc:	bf00      	nop
 80151de:	3710      	adds	r7, #16
 80151e0:	46bd      	mov	sp, r7
 80151e2:	bd80      	pop	{r7, pc}
 80151e4:	08019884 	.word	0x08019884

080151e8 <volt_index>:
int volt_index(uint16_t mili_power,
		const canton_config_t *c1, //canton_vars_t *v1,
		_UNUSED_ const canton_config_t *c2, //canton_vars_t *v2,
		int *pvi1, int *pvi2,
		train_volt_policy_t pol)
{
 80151e8:	b580      	push	{r7, lr}
 80151ea:	b08a      	sub	sp, #40	; 0x28
 80151ec:	af00      	add	r7, sp, #0
 80151ee:	60b9      	str	r1, [r7, #8]
 80151f0:	607a      	str	r2, [r7, #4]
 80151f2:	603b      	str	r3, [r7, #0]
 80151f4:	4603      	mov	r3, r0
 80151f6:	81fb      	strh	r3, [r7, #14]
	int duty=0;
 80151f8:	2300      	movs	r3, #0
 80151fa:	627b      	str	r3, [r7, #36]	; 0x24
	*pvi1 = MAX_PVI;
 80151fc:	683b      	ldr	r3, [r7, #0]
 80151fe:	2207      	movs	r2, #7
 8015200:	601a      	str	r2, [r3, #0]
	*pvi2 = MAX_PVI;
 8015202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015204:	2207      	movs	r2, #7
 8015206:	601a      	str	r2, [r3, #0]

	//if (mili_power <0)    return canton_error_rc(0, ERR_BAD_PARAM_MPOW, "negative milipower");
	if (mili_power >1000) return canton_error_rc(0, ERR_BAD_PARAM_MPOW, "milipower should be 0-999");
 8015208:	89fb      	ldrh	r3, [r7, #14]
 801520a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801520e:	d907      	bls.n	8015220 <volt_index+0x38>
 8015210:	4a54      	ldr	r2, [pc, #336]	; (8015364 <volt_index+0x17c>)
 8015212:	f06f 0103 	mvn.w	r1, #3
 8015216:	2000      	movs	r0, #0
 8015218:	f7ff fc67 	bl	8014aea <canton_error_rc>
 801521c:	4603      	mov	r3, r0
 801521e:	e09d      	b.n	801535c <volt_index+0x174>
	switch (pol) {
 8015220:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8015224:	2b01      	cmp	r3, #1
 8015226:	d00d      	beq.n	8015244 <volt_index+0x5c>
 8015228:	2b02      	cmp	r3, #2
 801522a:	d052      	beq.n	80152d2 <volt_index+0xea>
 801522c:	2b00      	cmp	r3, #0
 801522e:	d017      	beq.n	8015260 <volt_index+0x78>
	default :
        duty = 0;
 8015230:	2300      	movs	r3, #0
 8015232:	627b      	str	r3, [r7, #36]	; 0x24
		return canton_error_rc(0, ERR_BAD_PARAM_VPOL, "bad volt policy");
 8015234:	4a4c      	ldr	r2, [pc, #304]	; (8015368 <volt_index+0x180>)
 8015236:	f06f 0104 	mvn.w	r1, #4
 801523a:	2000      	movs	r0, #0
 801523c:	f7ff fc55 	bl	8014aea <canton_error_rc>
 8015240:	4603      	mov	r3, r0
 8015242:	e08b      	b.n	801535c <volt_index+0x174>
		break;
	case vpolicy_pure_pwm:
		*pvi1 = 0;
 8015244:	683b      	ldr	r3, [r7, #0]
 8015246:	2200      	movs	r2, #0
 8015248:	601a      	str	r2, [r3, #0]
		*pvi2 = 0;
 801524a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801524c:	2200      	movs	r2, #0
 801524e:	601a      	str	r2, [r3, #0]
		duty = mili_power / 10;
 8015250:	89fb      	ldrh	r3, [r7, #14]
 8015252:	4a46      	ldr	r2, [pc, #280]	; (801536c <volt_index+0x184>)
 8015254:	fba2 2303 	umull	r2, r3, r2, r3
 8015258:	08db      	lsrs	r3, r3, #3
 801525a:	b29b      	uxth	r3, r3
 801525c:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 801525e:	e077      	b.n	8015350 <volt_index+0x168>
    case vpolicy_normal:
            // fall back to full volt +  pwm
            *pvi1 = *pvi2 = 0;
 8015260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015262:	2200      	movs	r2, #0
 8015264:	601a      	str	r2, [r3, #0]
 8015266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015268:	681a      	ldr	r2, [r3, #0]
 801526a:	683b      	ldr	r3, [r7, #0]
 801526c:	601a      	str	r2, [r3, #0]
            duty = mili_power / 10;
 801526e:	89fb      	ldrh	r3, [r7, #14]
 8015270:	4a3e      	ldr	r2, [pc, #248]	; (801536c <volt_index+0x184>)
 8015272:	fba2 2303 	umull	r2, r3, r2, r3
 8015276:	08db      	lsrs	r3, r3, #3
 8015278:	b29b      	uxth	r3, r3
 801527a:	627b      	str	r3, [r7, #36]	; 0x24
            for (int i=MAX_PVI; i>=0; i--) {
 801527c:	2307      	movs	r3, #7
 801527e:	623b      	str	r3, [r7, #32]
 8015280:	e023      	b.n	80152ca <volt_index+0xe2>
                if (!c1->volts_cv[i]) continue;
 8015282:	68bb      	ldr	r3, [r7, #8]
 8015284:	6a3a      	ldr	r2, [r7, #32]
 8015286:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801528a:	2b00      	cmp	r3, #0
 801528c:	d017      	beq.n	80152be <volt_index+0xd6>
                // c1->volts in 0.01V unit
                int d = 100*mili_power / c1->volts_cv[i];
 801528e:	89fb      	ldrh	r3, [r7, #14]
 8015290:	2264      	movs	r2, #100	; 0x64
 8015292:	fb02 f303 	mul.w	r3, r2, r3
 8015296:	68ba      	ldr	r2, [r7, #8]
 8015298:	6a39      	ldr	r1, [r7, #32]
 801529a:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 801529e:	fb93 f3f2 	sdiv	r3, r3, r2
 80152a2:	613b      	str	r3, [r7, #16]
                if (d>MAX_PWM) {
 80152a4:	693b      	ldr	r3, [r7, #16]
 80152a6:	2b5a      	cmp	r3, #90	; 0x5a
 80152a8:	dc0b      	bgt.n	80152c2 <volt_index+0xda>
                    continue;
                }
                // XXX for now we assume all canton have same board with same voltage level
                *pvi1 = *pvi2 = i;
 80152aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152ac:	6a3a      	ldr	r2, [r7, #32]
 80152ae:	601a      	str	r2, [r3, #0]
 80152b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152b2:	681a      	ldr	r2, [r3, #0]
 80152b4:	683b      	ldr	r3, [r7, #0]
 80152b6:	601a      	str	r2, [r3, #0]
                duty = d;
 80152b8:	693b      	ldr	r3, [r7, #16]
 80152ba:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 80152bc:	e008      	b.n	80152d0 <volt_index+0xe8>
                if (!c1->volts_cv[i]) continue;
 80152be:	bf00      	nop
 80152c0:	e000      	b.n	80152c4 <volt_index+0xdc>
                    continue;
 80152c2:	bf00      	nop
            for (int i=MAX_PVI; i>=0; i--) {
 80152c4:	6a3b      	ldr	r3, [r7, #32]
 80152c6:	3b01      	subs	r3, #1
 80152c8:	623b      	str	r3, [r7, #32]
 80152ca:	6a3b      	ldr	r3, [r7, #32]
 80152cc:	2b00      	cmp	r3, #0
 80152ce:	dad8      	bge.n	8015282 <volt_index+0x9a>
            }
		break;
 80152d0:	e03e      	b.n	8015350 <volt_index+0x168>
			break;
    	}
    	break;
#endif
	case vpolicy_pure_volt:
		duty = MAX_PWM;
 80152d2:	235a      	movs	r3, #90	; 0x5a
 80152d4:	627b      	str	r3, [r7, #36]	; 0x24
        int s = 0;
 80152d6:	2300      	movs	r3, #0
 80152d8:	61fb      	str	r3, [r7, #28]
		for (int i=MAX_PVI; i>=0; i--) {
 80152da:	2307      	movs	r3, #7
 80152dc:	61bb      	str	r3, [r7, #24]
 80152de:	e031      	b.n	8015344 <volt_index+0x15c>
			if (!c1->volts_cv[i]) continue;
 80152e0:	68bb      	ldr	r3, [r7, #8]
 80152e2:	69ba      	ldr	r2, [r7, #24]
 80152e4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80152e8:	2b00      	cmp	r3, #0
 80152ea:	d027      	beq.n	801533c <volt_index+0x154>
			// c1->volts in 0.01V unit. 10V = 1000
			int p = c1->volts_cv[i]*MAX_PWM/100;  // 0.01V * % , ex : 345*90
 80152ec:	68bb      	ldr	r3, [r7, #8]
 80152ee:	69ba      	ldr	r2, [r7, #24]
 80152f0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80152f4:	461a      	mov	r2, r3
 80152f6:	235a      	movs	r3, #90	; 0x5a
 80152f8:	fb03 f302 	mul.w	r3, r3, r2
 80152fc:	4a1c      	ldr	r2, [pc, #112]	; (8015370 <volt_index+0x188>)
 80152fe:	fb82 1203 	smull	r1, r2, r2, r3
 8015302:	1152      	asrs	r2, r2, #5
 8015304:	17db      	asrs	r3, r3, #31
 8015306:	1ad3      	subs	r3, r2, r3
 8015308:	617b      	str	r3, [r7, #20]
			if (p <= mili_power) {
 801530a:	89fb      	ldrh	r3, [r7, #14]
 801530c:	697a      	ldr	r2, [r7, #20]
 801530e:	429a      	cmp	r2, r3
 8015310:	dc08      	bgt.n	8015324 <volt_index+0x13c>
                s = 1;
 8015312:	2301      	movs	r3, #1
 8015314:	61fb      	str	r3, [r7, #28]
				*pvi1 = i;
 8015316:	683b      	ldr	r3, [r7, #0]
 8015318:	69ba      	ldr	r2, [r7, #24]
 801531a:	601a      	str	r2, [r3, #0]
				*pvi2 = i;
 801531c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801531e:	69ba      	ldr	r2, [r7, #24]
 8015320:	601a      	str	r2, [r3, #0]
 8015322:	e00c      	b.n	801533e <volt_index+0x156>
			} else {
                if (!s) {
 8015324:	69fb      	ldr	r3, [r7, #28]
 8015326:	2b00      	cmp	r3, #0
 8015328:	d110      	bne.n	801534c <volt_index+0x164>
                    // lower than minimal power
                    *pvi1 = i;
 801532a:	683b      	ldr	r3, [r7, #0]
 801532c:	69ba      	ldr	r2, [r7, #24]
 801532e:	601a      	str	r2, [r3, #0]
                    *pvi2 = i;
 8015330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015332:	69ba      	ldr	r2, [r7, #24]
 8015334:	601a      	str	r2, [r3, #0]
                    duty = 0;
 8015336:	2300      	movs	r3, #0
 8015338:	627b      	str	r3, [r7, #36]	; 0x24
                }
                // ok
				break;
 801533a:	e007      	b.n	801534c <volt_index+0x164>
			if (!c1->volts_cv[i]) continue;
 801533c:	bf00      	nop
		for (int i=MAX_PVI; i>=0; i--) {
 801533e:	69bb      	ldr	r3, [r7, #24]
 8015340:	3b01      	subs	r3, #1
 8015342:	61bb      	str	r3, [r7, #24]
 8015344:	69bb      	ldr	r3, [r7, #24]
 8015346:	2b00      	cmp	r3, #0
 8015348:	daca      	bge.n	80152e0 <volt_index+0xf8>
 801534a:	e000      	b.n	801534e <volt_index+0x166>
				break;
 801534c:	bf00      	nop
			}
		}
		break;
 801534e:	bf00      	nop
	}
    if (duty>MAX_PWM) {
 8015350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015352:	2b5a      	cmp	r3, #90	; 0x5a
 8015354:	dd01      	ble.n	801535a <volt_index+0x172>
        duty = MAX_PWM;
 8015356:	235a      	movs	r3, #90	; 0x5a
 8015358:	627b      	str	r3, [r7, #36]	; 0x24
        //canton_error(ERR_BAD_PARAM_MPOW, "test msg");
    }
	return duty;
 801535a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801535c:	4618      	mov	r0, r3
 801535e:	3728      	adds	r7, #40	; 0x28
 8015360:	46bd      	mov	sp, r7
 8015362:	bd80      	pop	{r7, pc}
 8015364:	08019890 	.word	0x08019890
 8015368:	080198ac 	.word	0x080198ac
 801536c:	cccccccd 	.word	0xcccccccd
 8015370:	51eb851f 	.word	0x51eb851f

08015374 <itm_debug1>:
{
 8015374:	b580      	push	{r7, lr}
 8015376:	b086      	sub	sp, #24
 8015378:	af02      	add	r7, sp, #8
 801537a:	60f8      	str	r0, [r7, #12]
 801537c:	60b9      	str	r1, [r7, #8]
 801537e:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 8015380:	4b08      	ldr	r3, [pc, #32]	; (80153a4 <itm_debug1+0x30>)
 8015382:	681a      	ldr	r2, [r3, #0]
 8015384:	68fb      	ldr	r3, [r7, #12]
 8015386:	4013      	ands	r3, r2
 8015388:	2b00      	cmp	r3, #0
 801538a:	d007      	beq.n	801539c <itm_debug1+0x28>
 801538c:	2301      	movs	r3, #1
 801538e:	9300      	str	r3, [sp, #0]
 8015390:	2300      	movs	r3, #0
 8015392:	2200      	movs	r2, #0
 8015394:	6879      	ldr	r1, [r7, #4]
 8015396:	68b8      	ldr	r0, [r7, #8]
 8015398:	f003 fc7c 	bl	8018c94 <_itm_debug3>
}
 801539c:	bf00      	nop
 801539e:	3710      	adds	r7, #16
 80153a0:	46bd      	mov	sp, r7
 80153a2:	bd80      	pop	{r7, pc}
 80153a4:	200005a4 	.word	0x200005a4

080153a8 <itm_debug2>:
{
 80153a8:	b580      	push	{r7, lr}
 80153aa:	b086      	sub	sp, #24
 80153ac:	af02      	add	r7, sp, #8
 80153ae:	60f8      	str	r0, [r7, #12]
 80153b0:	60b9      	str	r1, [r7, #8]
 80153b2:	607a      	str	r2, [r7, #4]
 80153b4:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, 0, 2);
 80153b6:	4b09      	ldr	r3, [pc, #36]	; (80153dc <itm_debug2+0x34>)
 80153b8:	681a      	ldr	r2, [r3, #0]
 80153ba:	68fb      	ldr	r3, [r7, #12]
 80153bc:	4013      	ands	r3, r2
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d007      	beq.n	80153d2 <itm_debug2+0x2a>
 80153c2:	2302      	movs	r3, #2
 80153c4:	9300      	str	r3, [sp, #0]
 80153c6:	2300      	movs	r3, #0
 80153c8:	683a      	ldr	r2, [r7, #0]
 80153ca:	6879      	ldr	r1, [r7, #4]
 80153cc:	68b8      	ldr	r0, [r7, #8]
 80153ce:	f003 fc61 	bl	8018c94 <_itm_debug3>
}
 80153d2:	bf00      	nop
 80153d4:	3710      	adds	r7, #16
 80153d6:	46bd      	mov	sp, r7
 80153d8:	bd80      	pop	{r7, pc}
 80153da:	bf00      	nop
 80153dc:	200005a4 	.word	0x200005a4

080153e0 <itm_debug3>:
{
 80153e0:	b580      	push	{r7, lr}
 80153e2:	b086      	sub	sp, #24
 80153e4:	af02      	add	r7, sp, #8
 80153e6:	60f8      	str	r0, [r7, #12]
 80153e8:	60b9      	str	r1, [r7, #8]
 80153ea:	607a      	str	r2, [r7, #4]
 80153ec:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, v3, 3);
 80153ee:	4b09      	ldr	r3, [pc, #36]	; (8015414 <itm_debug3+0x34>)
 80153f0:	681a      	ldr	r2, [r3, #0]
 80153f2:	68fb      	ldr	r3, [r7, #12]
 80153f4:	4013      	ands	r3, r2
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	d007      	beq.n	801540a <itm_debug3+0x2a>
 80153fa:	2303      	movs	r3, #3
 80153fc:	9300      	str	r3, [sp, #0]
 80153fe:	69bb      	ldr	r3, [r7, #24]
 8015400:	683a      	ldr	r2, [r7, #0]
 8015402:	6879      	ldr	r1, [r7, #4]
 8015404:	68b8      	ldr	r0, [r7, #8]
 8015406:	f003 fc45 	bl	8018c94 <_itm_debug3>
}
 801540a:	bf00      	nop
 801540c:	3710      	adds	r7, #16
 801540e:	46bd      	mov	sp, r7
 8015410:	bd80      	pop	{r7, pc}
 8015412:	bf00      	nop
 8015414:	200005a4 	.word	0x200005a4

08015418 <runtime_error>:
	trainctl_error('G', code, msg);
	return NULL;
}

static inline void *runtime_error(int code, const char *msg)
{
 8015418:	b580      	push	{r7, lr}
 801541a:	b082      	sub	sp, #8
 801541c:	af00      	add	r7, sp, #0
 801541e:	6078      	str	r0, [r7, #4]
 8015420:	6039      	str	r1, [r7, #0]
	itm_debug1(DBG_CONFIG, msg, code);
 8015422:	687a      	ldr	r2, [r7, #4]
 8015424:	6839      	ldr	r1, [r7, #0]
 8015426:	2080      	movs	r0, #128	; 0x80
 8015428:	f7ff ffa4 	bl	8015374 <itm_debug1>
	trainctl_error('G', code, msg);
 801542c:	683a      	ldr	r2, [r7, #0]
 801542e:	6879      	ldr	r1, [r7, #4]
 8015430:	2047      	movs	r0, #71	; 0x47
 8015432:	f000 fc37 	bl	8015ca4 <trainctl_error>
	return NULL;
 8015436:	2300      	movs	r3, #0
}
 8015438:	4618      	mov	r0, r3
 801543a:	3708      	adds	r7, #8
 801543c:	46bd      	mov	sp, r7
 801543e:	bd80      	pop	{r7, pc}

08015440 <bemf_reset>:
#define USE_CANTON(_idx) \
		const canton_config_t *cconf = get_canton_cnf(_idx); \
		//canton_vars_t         *cvars = &canton_vars[_idx];

void bemf_reset(void)
{
 8015440:	b480      	push	{r7}
 8015442:	b083      	sub	sp, #12
 8015444:	af00      	add	r7, sp, #0
	for (int i=0; i<NUM_LOCAL_CANTONS_SW; i++) {
 8015446:	2300      	movs	r3, #0
 8015448:	607b      	str	r3, [r7, #4]
 801544a:	e007      	b.n	801545c <bemf_reset+0x1c>
		bemf_to[i]=0xFF;
 801544c:	4a08      	ldr	r2, [pc, #32]	; (8015470 <bemf_reset+0x30>)
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	4413      	add	r3, r2
 8015452:	22ff      	movs	r2, #255	; 0xff
 8015454:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<NUM_LOCAL_CANTONS_SW; i++) {
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	3301      	adds	r3, #1
 801545a:	607b      	str	r3, [r7, #4]
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	2b07      	cmp	r3, #7
 8015460:	ddf4      	ble.n	801544c <bemf_reset+0xc>
	}
}
 8015462:	bf00      	nop
 8015464:	370c      	adds	r7, #12
 8015466:	46bd      	mov	sp, r7
 8015468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801546c:	4770      	bx	lr
 801546e:	bf00      	nop
 8015470:	2000023c 	.word	0x2000023c

08015474 <bemf_msg>:

void bemf_msg(msg_64_t *m)
{
 8015474:	b580      	push	{r7, lr}
 8015476:	b084      	sub	sp, #16
 8015478:	af00      	add	r7, sp, #0
 801547a:	6078      	str	r0, [r7, #4]
	if (!IS_CANTON(m->to)) {
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	781b      	ldrb	r3, [r3, #0]
 8015480:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8015484:	2b00      	cmp	r3, #0
 8015486:	d008      	beq.n	801549a <bemf_msg+0x26>
		// error
		itm_debug1(DBG_ERR, "bad bemf c", m->to);
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	781b      	ldrb	r3, [r3, #0]
 801548c:	461a      	mov	r2, r3
 801548e:	491c      	ldr	r1, [pc, #112]	; (8015500 <bemf_msg+0x8c>)
 8015490:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8015494:	f7ff ff6e 	bl	8015374 <itm_debug1>
		return;
 8015498:	e02f      	b.n	80154fa <bemf_msg+0x86>
	}
	int idx = m->to & 0x07;
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	781b      	ldrb	r3, [r3, #0]
 801549e:	f003 0307 	and.w	r3, r3, #7
 80154a2:	60fb      	str	r3, [r7, #12]
	switch(m->cmd) {
 80154a4:	687b      	ldr	r3, [r7, #4]
 80154a6:	789b      	ldrb	r3, [r3, #2]
 80154a8:	2b40      	cmp	r3, #64	; 0x40
 80154aa:	d00d      	beq.n	80154c8 <bemf_msg+0x54>
 80154ac:	2b41      	cmp	r3, #65	; 0x41
 80154ae:	d11b      	bne.n	80154e8 <bemf_msg+0x74>
	case CMD_BEMF_OFF:
		itm_debug1(DBG_SPDCTL|DBG_CTRL, "BEMF OFF", idx);
 80154b0:	68fa      	ldr	r2, [r7, #12]
 80154b2:	4914      	ldr	r1, [pc, #80]	; (8015504 <bemf_msg+0x90>)
 80154b4:	f44f 6082 	mov.w	r0, #1040	; 0x410
 80154b8:	f7ff ff5c 	bl	8015374 <itm_debug1>
		bemf_to[idx] = 0xFF;
 80154bc:	4a12      	ldr	r2, [pc, #72]	; (8015508 <bemf_msg+0x94>)
 80154be:	68fb      	ldr	r3, [r7, #12]
 80154c0:	4413      	add	r3, r2
 80154c2:	22ff      	movs	r2, #255	; 0xff
 80154c4:	701a      	strb	r2, [r3, #0]
		break;
 80154c6:	e018      	b.n	80154fa <bemf_msg+0x86>
	case CMD_BEMF_ON:
		itm_debug2(DBG_SPDCTL|DBG_CTRL, "BEMF ON", idx, m->from);
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	785b      	ldrb	r3, [r3, #1]
 80154cc:	68fa      	ldr	r2, [r7, #12]
 80154ce:	490f      	ldr	r1, [pc, #60]	; (801550c <bemf_msg+0x98>)
 80154d0:	f44f 6082 	mov.w	r0, #1040	; 0x410
 80154d4:	f7ff ff68 	bl	80153a8 <itm_debug2>
		bemf_to[idx] = m->from;
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	7859      	ldrb	r1, [r3, #1]
 80154dc:	4a0a      	ldr	r2, [pc, #40]	; (8015508 <bemf_msg+0x94>)
 80154de:	68fb      	ldr	r3, [r7, #12]
 80154e0:	4413      	add	r3, r2
 80154e2:	460a      	mov	r2, r1
 80154e4:	701a      	strb	r2, [r3, #0]
		break;
 80154e6:	e008      	b.n	80154fa <bemf_msg+0x86>
	default:
		itm_debug1(DBG_ERR, "bad bemf c", m->to);
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	781b      	ldrb	r3, [r3, #0]
 80154ec:	461a      	mov	r2, r3
 80154ee:	4904      	ldr	r1, [pc, #16]	; (8015500 <bemf_msg+0x8c>)
 80154f0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80154f4:	f7ff ff3e 	bl	8015374 <itm_debug1>
		break;
 80154f8:	bf00      	nop
	}
}
 80154fa:	3710      	adds	r7, #16
 80154fc:	46bd      	mov	sp, r7
 80154fe:	bd80      	pop	{r7, pc}
 8015500:	080198bc 	.word	0x080198bc
 8015504:	080198c8 	.word	0x080198c8
 8015508:	2000023c 	.word	0x2000023c
 801550c:	080198d4 	.word	0x080198d4

08015510 <bemf_tick>:

void bemf_tick(uint32_t notif_flags, _UNUSED_ uint32_t tick, _UNUSED_ uint32_t dt)
{
 8015510:	b580      	push	{r7, lr}
 8015512:	b084      	sub	sp, #16
 8015514:	af00      	add	r7, sp, #0
 8015516:	60f8      	str	r0, [r7, #12]
 8015518:	60b9      	str	r1, [r7, #8]
 801551a:	607a      	str	r2, [r7, #4]
	if (bemf_run_mode == runmode_off) return;
 801551c:	4b18      	ldr	r3, [pc, #96]	; (8015580 <bemf_tick+0x70>)
 801551e:	781b      	ldrb	r3, [r3, #0]
 8015520:	2b00      	cmp	r3, #0
 8015522:	d029      	beq.n	8015578 <bemf_tick+0x68>

	itm_debug1(DBG_ADC, "------- btk", (int) notif_flags);
 8015524:	68fb      	ldr	r3, [r7, #12]
 8015526:	461a      	mov	r2, r3
 8015528:	4916      	ldr	r1, [pc, #88]	; (8015584 <bemf_tick+0x74>)
 801552a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 801552e:	f7ff ff21 	bl	8015374 <itm_debug1>
	if (notif_flags & NOTIF_NEW_ADC_1) {
 8015532:	68fb      	ldr	r3, [r7, #12]
 8015534:	f003 0301 	and.w	r3, r3, #1
 8015538:	2b00      	cmp	r3, #0
 801553a:	d013      	beq.n	8015564 <bemf_tick+0x54>
		if (notif_flags & NOTIF_NEW_ADC_2) {
 801553c:	68fb      	ldr	r3, [r7, #12]
 801553e:	f003 0302 	and.w	r3, r3, #2
 8015542:	2b00      	cmp	r3, #0
 8015544:	d00a      	beq.n	801555c <bemf_tick+0x4c>
			itm_debug1(DBG_ERR|DBG_LOWCTRL|DBG_TIM, "both", (int) notif_flags);
 8015546:	68fb      	ldr	r3, [r7, #12]
 8015548:	461a      	mov	r2, r3
 801554a:	490f      	ldr	r1, [pc, #60]	; (8015588 <bemf_tick+0x78>)
 801554c:	480f      	ldr	r0, [pc, #60]	; (801558c <bemf_tick+0x7c>)
 801554e:	f7ff ff11 	bl	8015374 <itm_debug1>
			runtime_error(ERR_DMA, "both NEW_ADC1 and NEW_ADC2");
 8015552:	490f      	ldr	r1, [pc, #60]	; (8015590 <bemf_tick+0x80>)
 8015554:	f06f 000b 	mvn.w	r0, #11
 8015558:	f7ff ff5e 	bl	8015418 <runtime_error>
		}
		process_adc(&train_adc_buf[0], dt);
 801555c:	6879      	ldr	r1, [r7, #4]
 801555e:	480d      	ldr	r0, [pc, #52]	; (8015594 <bemf_tick+0x84>)
 8015560:	f000 f836 	bl	80155d0 <process_adc>
	}
	if (notif_flags & NOTIF_NEW_ADC_2) {
 8015564:	68fb      	ldr	r3, [r7, #12]
 8015566:	f003 0302 	and.w	r3, r3, #2
 801556a:	2b00      	cmp	r3, #0
 801556c:	d005      	beq.n	801557a <bemf_tick+0x6a>
		process_adc(&train_adc_buf[1], dt);
 801556e:	6879      	ldr	r1, [r7, #4]
 8015570:	4809      	ldr	r0, [pc, #36]	; (8015598 <bemf_tick+0x88>)
 8015572:	f000 f82d 	bl	80155d0 <process_adc>
 8015576:	e000      	b.n	801557a <bemf_tick+0x6a>
	if (bemf_run_mode == runmode_off) return;
 8015578:	bf00      	nop
	}
}
 801557a:	3710      	adds	r7, #16
 801557c:	46bd      	mov	sp, r7
 801557e:	bd80      	pop	{r7, pc}
 8015580:	20005322 	.word	0x20005322
 8015584:	080198dc 	.word	0x080198dc
 8015588:	080198e8 	.word	0x080198e8
 801558c:	80000101 	.word	0x80000101
 8015590:	080198f0 	.word	0x080198f0
 8015594:	200088d4 	.word	0x200088d4
 8015598:	200088fc 	.word	0x200088fc

0801559c <bemf_convert_to_centivolt>:
	return ((m * 4545 * 33) / (4096*100));
}


static inline int32_t bemf_convert_to_centivolt(_UNUSED_ const canton_config_t *c, int32_t m)
{
 801559c:	b480      	push	{r7}
 801559e:	b083      	sub	sp, #12
 80155a0:	af00      	add	r7, sp, #0
 80155a2:	6078      	str	r0, [r7, #4]
 80155a4:	6039      	str	r1, [r7, #0]
			m = 2200*m/2000;
		}
	}
#endif

	return ((m * 4545 * 33) / (4096*100));
 80155a6:	683b      	ldr	r3, [r7, #0]
 80155a8:	4a07      	ldr	r2, [pc, #28]	; (80155c8 <bemf_convert_to_centivolt+0x2c>)
 80155aa:	fb02 f303 	mul.w	r3, r2, r3
 80155ae:	4a07      	ldr	r2, [pc, #28]	; (80155cc <bemf_convert_to_centivolt+0x30>)
 80155b0:	fb82 1203 	smull	r1, r2, r2, r3
 80155b4:	1452      	asrs	r2, r2, #17
 80155b6:	17db      	asrs	r3, r3, #31
 80155b8:	1ad3      	subs	r3, r2, r3
}
 80155ba:	4618      	mov	r0, r3
 80155bc:	370c      	adds	r7, #12
 80155be:	46bd      	mov	sp, r7
 80155c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155c4:	4770      	bx	lr
 80155c6:	bf00      	nop
 80155c8:	000249e1 	.word	0x000249e1
 80155cc:	51eb851f 	.word	0x51eb851f

080155d0 <process_adc>:

/// ---------------------------------------------------------------------------------------

static void process_adc(volatile adc_buf_t *buf, _UNUSED_ uint32_t deltaticks)
{
 80155d0:	b580      	push	{r7, lr}
 80155d2:	b092      	sub	sp, #72	; 0x48
 80155d4:	af02      	add	r7, sp, #8
 80155d6:	6078      	str	r0, [r7, #4]
 80155d8:	6039      	str	r1, [r7, #0]
	for (int i=0; i<NUM_LOCAL_CANTONS_HW; i++) {
 80155da:	2300      	movs	r3, #0
 80155dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80155de:	e0ae      	b.n	801573e <process_adc+0x16e>
		USE_CANTON(i)
 80155e0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80155e2:	f000 fce7 	bl	8015fb4 <get_canton_cnf>
 80155e6:	6338      	str	r0, [r7, #48]	; 0x30
		// process BEMF
#ifndef USE_INA3221
	    canton_intensity(cconf, cvars, buf[i].intOff, buf[i].intOn);
#error ohla
#endif
		int skp = 0;
 80155e8:	2300      	movs	r3, #0
 80155ea:	63bb      	str	r3, [r7, #56]	; 0x38
		if ((bemf_run_mode == runmode_testcanton) && (i<3)) {
 80155ec:	4b58      	ldr	r3, [pc, #352]	; (8015750 <process_adc+0x180>)
 80155ee:	781b      	ldrb	r3, [r3, #0]
 80155f0:	2b02      	cmp	r3, #2
 80155f2:	d105      	bne.n	8015600 <process_adc+0x30>
 80155f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80155f6:	2b02      	cmp	r3, #2
 80155f8:	dc02      	bgt.n	8015600 <process_adc+0x30>
			skp = 1;
 80155fa:	2301      	movs	r3, #1
 80155fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80155fe:	e006      	b.n	801560e <process_adc+0x3e>
		} else if (0xFF == bemf_to[i]) {
 8015600:	4a54      	ldr	r2, [pc, #336]	; (8015754 <process_adc+0x184>)
 8015602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015604:	4413      	add	r3, r2
 8015606:	781b      	ldrb	r3, [r3, #0]
 8015608:	2bff      	cmp	r3, #255	; 0xff
 801560a:	f000 8092 	beq.w	8015732 <process_adc+0x162>
			continue;
		}

		const canton_config_t *c = get_canton_cnf(i);
 801560e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015610:	f000 fcd0 	bl	8015fb4 <get_canton_cnf>
 8015614:	62f8      	str	r0, [r7, #44]	; 0x2c
		int32_t voffa = bemf_convert_to_centivolt(c, buf[i].voffA);
		int32_t voffb = bemf_convert_to_centivolt(c, buf[i].voffB);
		int32_t vona = bemf_convert_to_centivolt(c, buf[i].vonA);
		int32_t vonb = bemf_convert_to_centivolt(c, buf[i].vonB);
		 */
		int32_t voffa = bemf_convert_to_centivolt(c, buf->off[i].vA);
 8015616:	687b      	ldr	r3, [r7, #4]
 8015618:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801561a:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 801561e:	b29b      	uxth	r3, r3
 8015620:	4619      	mov	r1, r3
 8015622:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015624:	f7ff ffba 	bl	801559c <bemf_convert_to_centivolt>
 8015628:	62b8      	str	r0, [r7, #40]	; 0x28
		int32_t voffb = bemf_convert_to_centivolt(c, buf->off[i].vB);
 801562a:	687a      	ldr	r2, [r7, #4]
 801562c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801562e:	009b      	lsls	r3, r3, #2
 8015630:	4413      	add	r3, r2
 8015632:	885b      	ldrh	r3, [r3, #2]
 8015634:	b29b      	uxth	r3, r3
 8015636:	4619      	mov	r1, r3
 8015638:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801563a:	f7ff ffaf 	bl	801559c <bemf_convert_to_centivolt>
 801563e:	6278      	str	r0, [r7, #36]	; 0x24
		int32_t vona =  bemf_convert_to_centivolt(c, buf->on[i].vA);
 8015640:	687a      	ldr	r2, [r7, #4]
 8015642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015644:	3304      	adds	r3, #4
 8015646:	009b      	lsls	r3, r3, #2
 8015648:	4413      	add	r3, r2
 801564a:	889b      	ldrh	r3, [r3, #4]
 801564c:	b29b      	uxth	r3, r3
 801564e:	4619      	mov	r1, r3
 8015650:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015652:	f7ff ffa3 	bl	801559c <bemf_convert_to_centivolt>
 8015656:	6238      	str	r0, [r7, #32]
		int32_t vonb =  bemf_convert_to_centivolt(c, buf->on[i].vB);
 8015658:	687a      	ldr	r2, [r7, #4]
 801565a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801565c:	3304      	adds	r3, #4
 801565e:	009b      	lsls	r3, r3, #2
 8015660:	4413      	add	r3, r2
 8015662:	88db      	ldrh	r3, [r3, #6]
 8015664:	b29b      	uxth	r3, r3
 8015666:	4619      	mov	r1, r3
 8015668:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801566a:	f7ff ff97 	bl	801559c <bemf_convert_to_centivolt>
 801566e:	61f8      	str	r0, [r7, #28]

		int16_t voff = (int16_t)(voffb-voffa);
 8015670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015672:	b29a      	uxth	r2, r3
 8015674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015676:	b29b      	uxth	r3, r3
 8015678:	1ad3      	subs	r3, r2, r3
 801567a:	b29b      	uxth	r3, r3
 801567c:	86fb      	strh	r3, [r7, #54]	; 0x36
		int16_t von  = (int16_t)(vonb-vona);
 801567e:	69fb      	ldr	r3, [r7, #28]
 8015680:	b29a      	uxth	r2, r3
 8015682:	6a3b      	ldr	r3, [r7, #32]
 8015684:	b29b      	uxth	r3, r3
 8015686:	1ad3      	subs	r3, r2, r3
 8015688:	b29b      	uxth	r3, r3
 801568a:	86bb      	strh	r3, [r7, #52]	; 0x34

		if (cconf->reverse_bemf) {
 801568c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801568e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015692:	f003 0302 	and.w	r3, r3, #2
 8015696:	b2db      	uxtb	r3, r3
 8015698:	2b00      	cmp	r3, #0
 801569a:	d007      	beq.n	80156ac <process_adc+0xdc>
			voff = -voff;
 801569c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801569e:	425b      	negs	r3, r3
 80156a0:	b29b      	uxth	r3, r3
 80156a2:	86fb      	strh	r3, [r7, #54]	; 0x36
			von = -von;
 80156a4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80156a6:	425b      	negs	r3, r3
 80156a8:	b29b      	uxth	r3, r3
 80156aa:	86bb      	strh	r3, [r7, #52]	; 0x34
		}
		if ((1)) {
			itm_debug3(DBG_ADC|DBG_LOWCTRL, "ADC/Voff", i, voffa, voffb);
 80156ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156ae:	9300      	str	r3, [sp, #0]
 80156b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80156b4:	4928      	ldr	r1, [pc, #160]	; (8015758 <process_adc+0x188>)
 80156b6:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 80156ba:	f7ff fe91 	bl	80153e0 <itm_debug3>
			itm_debug3(DBG_ADC|DBG_LOWCTRL, "ADC/Von",  i, vona, vonb);
 80156be:	69fb      	ldr	r3, [r7, #28]
 80156c0:	9300      	str	r3, [sp, #0]
 80156c2:	6a3b      	ldr	r3, [r7, #32]
 80156c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80156c6:	4925      	ldr	r1, [pc, #148]	; (801575c <process_adc+0x18c>)
 80156c8:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 80156cc:	f7ff fe88 	bl	80153e0 <itm_debug3>
			itm_debug3(DBG_ADC|DBG_LOWCTRL, "ADCoi", i,  voff, von);
 80156d0:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 80156d4:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80156d8:	9300      	str	r3, [sp, #0]
 80156da:	4613      	mov	r3, r2
 80156dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80156de:	4920      	ldr	r1, [pc, #128]	; (8015760 <process_adc+0x190>)
 80156e0:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 80156e4:	f7ff fe7c 	bl	80153e0 <itm_debug3>
		}
		if (skp) continue;
 80156e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156ea:	2b00      	cmp	r3, #0
 80156ec:	d123      	bne.n	8015736 <process_adc+0x166>
				m.v2 = von;
				mqf_write(&from_canton, &m);
			}
		}
		msg_64_t m;
		m.from = MA_CANTON(localBoardNum, i);
 80156ee:	4b1d      	ldr	r3, [pc, #116]	; (8015764 <process_adc+0x194>)
 80156f0:	781b      	ldrb	r3, [r3, #0]
 80156f2:	00db      	lsls	r3, r3, #3
 80156f4:	b25b      	sxtb	r3, r3
 80156f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80156fa:	b25a      	sxtb	r2, r3
 80156fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80156fe:	b25b      	sxtb	r3, r3
 8015700:	f003 0307 	and.w	r3, r3, #7
 8015704:	b25b      	sxtb	r3, r3
 8015706:	4313      	orrs	r3, r2
 8015708:	b25b      	sxtb	r3, r3
 801570a:	b2db      	uxtb	r3, r3
 801570c:	747b      	strb	r3, [r7, #17]
		m.to = bemf_to[i];
 801570e:	4a11      	ldr	r2, [pc, #68]	; (8015754 <process_adc+0x184>)
 8015710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015712:	4413      	add	r3, r2
 8015714:	781b      	ldrb	r3, [r3, #0]
 8015716:	743b      	strb	r3, [r7, #16]
		m.cmd = CMD_BEMF_NOTIF;
 8015718:	2303      	movs	r3, #3
 801571a:	74bb      	strb	r3, [r7, #18]
		m.v1 = voff;
 801571c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801571e:	82bb      	strh	r3, [r7, #20]
		m.v2 = von;
 8015720:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015722:	82fb      	strh	r3, [r7, #22]
		mqf_write(&from_canton, &m);
 8015724:	f107 0310 	add.w	r3, r7, #16
 8015728:	4619      	mov	r1, r3
 801572a:	480f      	ldr	r0, [pc, #60]	; (8015768 <process_adc+0x198>)
 801572c:	f003 fbb8 	bl	8018ea0 <mqf_write>
 8015730:	e002      	b.n	8015738 <process_adc+0x168>
			continue;
 8015732:	bf00      	nop
 8015734:	e000      	b.n	8015738 <process_adc+0x168>
		if (skp) continue;
 8015736:	bf00      	nop
	for (int i=0; i<NUM_LOCAL_CANTONS_HW; i++) {
 8015738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801573a:	3301      	adds	r3, #1
 801573c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801573e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015740:	2b04      	cmp	r3, #4
 8015742:	f77f af4d 	ble.w	80155e0 <process_adc+0x10>

	}
}
 8015746:	bf00      	nop
 8015748:	3740      	adds	r7, #64	; 0x40
 801574a:	46bd      	mov	sp, r7
 801574c:	bd80      	pop	{r7, pc}
 801574e:	bf00      	nop
 8015750:	20005322 	.word	0x20005322
 8015754:	2000023c 	.word	0x2000023c
 8015758:	0801990c 	.word	0x0801990c
 801575c:	08019918 	.word	0x08019918
 8015760:	08019920 	.word	0x08019920
 8015764:	200053d5 	.word	0x200053d5
 8015768:	200004f4 	.word	0x200004f4

0801576c <presdect_tick>:
#include "railconfig.h"


#if INA3221_TASK
void presdect_tick(_UNUSED_ uint32_t notif_flags, _UNUSED_ uint32_t tick, _UNUSED_ uint32_t dt)
{
 801576c:	b480      	push	{r7}
 801576e:	b085      	sub	sp, #20
 8015770:	af00      	add	r7, sp, #0
 8015772:	60f8      	str	r0, [r7, #12]
 8015774:	60b9      	str	r1, [r7, #8]
 8015776:	607a      	str	r2, [r7, #4]
}
 8015778:	bf00      	nop
 801577a:	3714      	adds	r7, #20
 801577c:	46bd      	mov	sp, r7
 801577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015782:	4770      	bx	lr

08015784 <itm_debug1>:
{
 8015784:	b580      	push	{r7, lr}
 8015786:	b086      	sub	sp, #24
 8015788:	af02      	add	r7, sp, #8
 801578a:	60f8      	str	r0, [r7, #12]
 801578c:	60b9      	str	r1, [r7, #8]
 801578e:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 8015790:	4b08      	ldr	r3, [pc, #32]	; (80157b4 <itm_debug1+0x30>)
 8015792:	681a      	ldr	r2, [r3, #0]
 8015794:	68fb      	ldr	r3, [r7, #12]
 8015796:	4013      	ands	r3, r2
 8015798:	2b00      	cmp	r3, #0
 801579a:	d007      	beq.n	80157ac <itm_debug1+0x28>
 801579c:	2301      	movs	r3, #1
 801579e:	9300      	str	r3, [sp, #0]
 80157a0:	2300      	movs	r3, #0
 80157a2:	2200      	movs	r2, #0
 80157a4:	6879      	ldr	r1, [r7, #4]
 80157a6:	68b8      	ldr	r0, [r7, #8]
 80157a8:	f003 fa74 	bl	8018c94 <_itm_debug3>
}
 80157ac:	bf00      	nop
 80157ae:	3710      	adds	r7, #16
 80157b0:	46bd      	mov	sp, r7
 80157b2:	bd80      	pop	{r7, pc}
 80157b4:	200005a4 	.word	0x200005a4

080157b8 <itm_debug2>:
{
 80157b8:	b580      	push	{r7, lr}
 80157ba:	b086      	sub	sp, #24
 80157bc:	af02      	add	r7, sp, #8
 80157be:	60f8      	str	r0, [r7, #12]
 80157c0:	60b9      	str	r1, [r7, #8]
 80157c2:	607a      	str	r2, [r7, #4]
 80157c4:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, 0, 2);
 80157c6:	4b09      	ldr	r3, [pc, #36]	; (80157ec <itm_debug2+0x34>)
 80157c8:	681a      	ldr	r2, [r3, #0]
 80157ca:	68fb      	ldr	r3, [r7, #12]
 80157cc:	4013      	ands	r3, r2
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	d007      	beq.n	80157e2 <itm_debug2+0x2a>
 80157d2:	2302      	movs	r3, #2
 80157d4:	9300      	str	r3, [sp, #0]
 80157d6:	2300      	movs	r3, #0
 80157d8:	683a      	ldr	r2, [r7, #0]
 80157da:	6879      	ldr	r1, [r7, #4]
 80157dc:	68b8      	ldr	r0, [r7, #8]
 80157de:	f003 fa59 	bl	8018c94 <_itm_debug3>
}
 80157e2:	bf00      	nop
 80157e4:	3710      	adds	r7, #16
 80157e6:	46bd      	mov	sp, r7
 80157e8:	bd80      	pop	{r7, pc}
 80157ea:	bf00      	nop
 80157ec:	200005a4 	.word	0x200005a4

080157f0 <turnout_error>:
{
 80157f0:	b580      	push	{r7, lr}
 80157f2:	b082      	sub	sp, #8
 80157f4:	af00      	add	r7, sp, #0
 80157f6:	6078      	str	r0, [r7, #4]
 80157f8:	6039      	str	r1, [r7, #0]
	return trainctl_error('A', code, msg);
 80157fa:	683a      	ldr	r2, [r7, #0]
 80157fc:	6879      	ldr	r1, [r7, #4]
 80157fe:	2041      	movs	r0, #65	; 0x41
 8015800:	f000 fa50 	bl	8015ca4 <trainctl_error>
 8015804:	4603      	mov	r3, r0
}
 8015806:	4618      	mov	r0, r3
 8015808:	3708      	adds	r7, #8
 801580a:	46bd      	mov	sp, r7
 801580c:	bd80      	pop	{r7, pc}

0801580e <debug_info>:
{
	trainctl_notif('T', train_idx, cmd, dta, dtalen);
}

static inline void debug_info(uint32_t sel, uint32_t num, char *msg, int v1, int v2, int v3)
{
 801580e:	b580      	push	{r7, lr}
 8015810:	b088      	sub	sp, #32
 8015812:	af04      	add	r7, sp, #16
 8015814:	60f8      	str	r0, [r7, #12]
 8015816:	60b9      	str	r1, [r7, #8]
 8015818:	607a      	str	r2, [r7, #4]
 801581a:	603b      	str	r3, [r7, #0]
	trainctl_notif2(sel, num, 'D', msg, v1, v2, v3);
 801581c:	68fb      	ldr	r3, [r7, #12]
 801581e:	b2d8      	uxtb	r0, r3
 8015820:	68bb      	ldr	r3, [r7, #8]
 8015822:	b2d9      	uxtb	r1, r3
 8015824:	69fb      	ldr	r3, [r7, #28]
 8015826:	9302      	str	r3, [sp, #8]
 8015828:	69bb      	ldr	r3, [r7, #24]
 801582a:	9301      	str	r3, [sp, #4]
 801582c:	683b      	ldr	r3, [r7, #0]
 801582e:	9300      	str	r3, [sp, #0]
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	2244      	movs	r2, #68	; 0x44
 8015834:	f001 f8f2 	bl	8016a1c <trainctl_notif2>
}
 8015838:	bf00      	nop
 801583a:	3710      	adds	r7, #16
 801583c:	46bd      	mov	sp, r7
 801583e:	bd80      	pop	{r7, pc}

08015840 <mqf_read_to_turnout>:
LFMQUEUE_DEF_H(to_turnout, msg_64_t)
 8015840:	b580      	push	{r7, lr}
 8015842:	b082      	sub	sp, #8
 8015844:	af00      	add	r7, sp, #0
 8015846:	6078      	str	r0, [r7, #4]
 8015848:	6879      	ldr	r1, [r7, #4]
 801584a:	4804      	ldr	r0, [pc, #16]	; (801585c <mqf_read_to_turnout+0x1c>)
 801584c:	f003 fba2 	bl	8018f94 <mqf_read>
 8015850:	4603      	mov	r3, r0
 8015852:	4618      	mov	r0, r3
 8015854:	3708      	adds	r7, #8
 8015856:	46bd      	mov	sp, r7
 8015858:	bd80      	pop	{r7, pc}
 801585a:	bf00      	nop
 801585c:	200004d0 	.word	0x200004d0

08015860 <turnout_tick>:
static void process_turnout_timers(uint32_t tick, uint32_t dt);
static void process_turnout_cmd(msg_64_t *m, uint32_t tick, uint32_t dt);


void turnout_tick(_UNUSED_ uint32_t notif_flags, uint32_t tick, uint32_t dt)
{
 8015860:	b580      	push	{r7, lr}
 8015862:	b088      	sub	sp, #32
 8015864:	af00      	add	r7, sp, #0
 8015866:	60f8      	str	r0, [r7, #12]
 8015868:	60b9      	str	r1, [r7, #8]
 801586a:	607a      	str	r2, [r7, #4]
	static int first=1;
	if (first) {
 801586c:	4b20      	ldr	r3, [pc, #128]	; (80158f0 <turnout_tick+0x90>)
 801586e:	681b      	ldr	r3, [r3, #0]
 8015870:	2b00      	cmp	r3, #0
 8015872:	d004      	beq.n	801587e <turnout_tick+0x1e>
		first = 0;
 8015874:	4b1e      	ldr	r3, [pc, #120]	; (80158f0 <turnout_tick+0x90>)
 8015876:	2200      	movs	r2, #0
 8015878:	601a      	str	r2, [r3, #0]
		turnout_reset();
 801587a:	f000 f8d3 	bl	8015a24 <turnout_reset>
	}
	static int cnt = 0;
	cnt ++;
 801587e:	4b1d      	ldr	r3, [pc, #116]	; (80158f4 <turnout_tick+0x94>)
 8015880:	681b      	ldr	r3, [r3, #0]
 8015882:	3301      	adds	r3, #1
 8015884:	4a1b      	ldr	r2, [pc, #108]	; (80158f4 <turnout_tick+0x94>)
 8015886:	6013      	str	r3, [r2, #0]
	if (cnt%4) return; // half freq
 8015888:	4b1a      	ldr	r3, [pc, #104]	; (80158f4 <turnout_tick+0x94>)
 801588a:	681b      	ldr	r3, [r3, #0]
 801588c:	f003 0303 	and.w	r3, r3, #3
 8015890:	2b00      	cmp	r3, #0
 8015892:	d126      	bne.n	80158e2 <turnout_tick+0x82>
	// TODO we need a fixed freq for turnout

	process_turnout_timers(tick, dt);
 8015894:	6879      	ldr	r1, [r7, #4]
 8015896:	68b8      	ldr	r0, [r7, #8]
 8015898:	f000 f920 	bl	8015adc <process_turnout_timers>
	for (;;) {
		msg_64_t m;
		int rc = mqf_read_to_turnout(&m);
 801589c:	f107 0310 	add.w	r3, r7, #16
 80158a0:	4618      	mov	r0, r3
 80158a2:	f7ff ffcd 	bl	8015840 <mqf_read_to_turnout>
 80158a6:	61f8      	str	r0, [r7, #28]
		if (rc) break;
 80158a8:	69fb      	ldr	r3, [r7, #28]
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	d11b      	bne.n	80158e6 <turnout_tick+0x86>
		if (IS_TURNOUT(m.to)) {
 80158ae:	7c3b      	ldrb	r3, [r7, #16]
 80158b0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80158b4:	2b40      	cmp	r3, #64	; 0x40
 80158b6:	d107      	bne.n	80158c8 <turnout_tick+0x68>
			process_turnout_cmd(&m, tick, dt);
 80158b8:	f107 0310 	add.w	r3, r7, #16
 80158bc:	687a      	ldr	r2, [r7, #4]
 80158be:	68b9      	ldr	r1, [r7, #8]
 80158c0:	4618      	mov	r0, r3
 80158c2:	f000 f819 	bl	80158f8 <process_turnout_cmd>
 80158c6:	e7e9      	b.n	801589c <turnout_tick+0x3c>
		} else if (IS_BROADCAST(m.to)) {
 80158c8:	7c3b      	ldrb	r3, [r7, #16]
 80158ca:	2bff      	cmp	r3, #255	; 0xff
 80158cc:	d1e6      	bne.n	801589c <turnout_tick+0x3c>
			switch (m.cmd) {
 80158ce:	7cbb      	ldrb	r3, [r7, #18]
 80158d0:	3bfe      	subs	r3, #254	; 0xfe
 80158d2:	2b01      	cmp	r3, #1
 80158d4:	d803      	bhi.n	80158de <turnout_tick+0x7e>
			default:
				break;
			case CMD_RESET: // FALLTHRU
			case CMD_EMERGENCY_STOP:
				turnout_reset();
 80158d6:	f000 f8a5 	bl	8015a24 <turnout_reset>
				break;
 80158da:	bf00      	nop
 80158dc:	e000      	b.n	80158e0 <turnout_tick+0x80>
				break;
 80158de:	bf00      	nop
	for (;;) {
 80158e0:	e7dc      	b.n	801589c <turnout_tick+0x3c>
	if (cnt%4) return; // half freq
 80158e2:	bf00      	nop
 80158e4:	e000      	b.n	80158e8 <turnout_tick+0x88>
		if (rc) break;
 80158e6:	bf00      	nop
			}
		} else {
			// error
		}
	}
}
 80158e8:	3720      	adds	r7, #32
 80158ea:	46bd      	mov	sp, r7
 80158ec:	bd80      	pop	{r7, pc}
 80158ee:	bf00      	nop
 80158f0:	20000244 	.word	0x20000244
 80158f4:	20005334 	.word	0x20005334

080158f8 <process_turnout_cmd>:
		const turnout_config_t *aconf = get_turnout_cnf(_idx); \
		turnout_vars_t         *avars = &tvars[_idx];


static void process_turnout_cmd(msg_64_t *m, _UNUSED_ uint32_t tick, _UNUSED_ uint32_t dt)
{
 80158f8:	b580      	push	{r7, lr}
 80158fa:	b08a      	sub	sp, #40	; 0x28
 80158fc:	af02      	add	r7, sp, #8
 80158fe:	60f8      	str	r0, [r7, #12]
 8015900:	60b9      	str	r1, [r7, #8]
 8015902:	607a      	str	r2, [r7, #4]
	uint8_t tidx = m->to & 0x07;
 8015904:	68fb      	ldr	r3, [r7, #12]
 8015906:	781b      	ldrb	r3, [r3, #0]
 8015908:	f003 0307 	and.w	r3, r3, #7
 801590c:	77fb      	strb	r3, [r7, #31]
	USE_TURNOUT(tidx)
 801590e:	7ffb      	ldrb	r3, [r7, #31]
 8015910:	4618      	mov	r0, r3
 8015912:	f000 fb9d 	bl	8016050 <get_turnout_cnf>
 8015916:	61b8      	str	r0, [r7, #24]
 8015918:	7ffb      	ldrb	r3, [r7, #31]
 801591a:	005b      	lsls	r3, r3, #1
 801591c:	4a3a      	ldr	r2, [pc, #232]	; (8015a08 <process_turnout_cmd+0x110>)
 801591e:	4413      	add	r3, r2
 8015920:	617b      	str	r3, [r7, #20]
	if (!aconf || !avars) {
 8015922:	69bb      	ldr	r3, [r7, #24]
 8015924:	2b00      	cmp	r3, #0
 8015926:	d002      	beq.n	801592e <process_turnout_cmd+0x36>
 8015928:	697b      	ldr	r3, [r7, #20]
 801592a:	2b00      	cmp	r3, #0
 801592c:	d105      	bne.n	801593a <process_turnout_cmd+0x42>
		turnout_error(ERR_BAD_PARAM, "bad idx");
 801592e:	4937      	ldr	r1, [pc, #220]	; (8015a0c <process_turnout_cmd+0x114>)
 8015930:	f06f 0001 	mvn.w	r0, #1
 8015934:	f7ff ff5c 	bl	80157f0 <turnout_error>
		return;
 8015938:	e063      	b.n	8015a02 <process_turnout_cmd+0x10a>
	}
	debug_info('A', 0, "CMD", tidx, m->cmd, avars->value);
 801593a:	7ffa      	ldrb	r2, [r7, #31]
 801593c:	68fb      	ldr	r3, [r7, #12]
 801593e:	789b      	ldrb	r3, [r3, #2]
 8015940:	4619      	mov	r1, r3
 8015942:	697b      	ldr	r3, [r7, #20]
 8015944:	f993 3000 	ldrsb.w	r3, [r3]
 8015948:	9301      	str	r3, [sp, #4]
 801594a:	9100      	str	r1, [sp, #0]
 801594c:	4613      	mov	r3, r2
 801594e:	4a30      	ldr	r2, [pc, #192]	; (8015a10 <process_turnout_cmd+0x118>)
 8015950:	2100      	movs	r1, #0
 8015952:	2041      	movs	r0, #65	; 0x41
 8015954:	f7ff ff5b 	bl	801580e <debug_info>
#ifndef TRAIN_SIMU
	if (!aconf->cmd_port) return;
 8015958:	69bb      	ldr	r3, [r7, #24]
 801595a:	681b      	ldr	r3, [r3, #0]
 801595c:	2b00      	cmp	r3, #0
 801595e:	d04f      	beq.n	8015a00 <process_turnout_cmd+0x108>
#endif
	switch (m->cmd) {
 8015960:	68fb      	ldr	r3, [r7, #12]
 8015962:	789b      	ldrb	r3, [r3, #2]
 8015964:	2b31      	cmp	r3, #49	; 0x31
 8015966:	d002      	beq.n	801596e <process_turnout_cmd+0x76>
 8015968:	2b32      	cmp	r3, #50	; 0x32
 801596a:	d020      	beq.n	80159ae <process_turnout_cmd+0xb6>
 801596c:	e03f      	b.n	80159ee <process_turnout_cmd+0xf6>
	case CMD_TURNOUT_A:
		itm_debug2(DBG_TURNOUT, "TA", tidx, avars->value);
 801596e:	7ffa      	ldrb	r2, [r7, #31]
 8015970:	697b      	ldr	r3, [r7, #20]
 8015972:	f993 3000 	ldrsb.w	r3, [r3]
 8015976:	4927      	ldr	r1, [pc, #156]	; (8015a14 <process_turnout_cmd+0x11c>)
 8015978:	f44f 7000 	mov.w	r0, #512	; 0x200
 801597c:	f7ff ff1c 	bl	80157b8 <itm_debug2>
		avars->value = -1;
 8015980:	697b      	ldr	r3, [r7, #20]
 8015982:	22ff      	movs	r2, #255	; 0xff
 8015984:	701a      	strb	r2, [r3, #0]
#ifndef TRAIN_SIMU
	    HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinA, GPIO_PIN_RESET);
 8015986:	69bb      	ldr	r3, [r7, #24]
 8015988:	6818      	ldr	r0, [r3, #0]
 801598a:	69bb      	ldr	r3, [r7, #24]
 801598c:	889b      	ldrh	r3, [r3, #4]
 801598e:	2200      	movs	r2, #0
 8015990:	4619      	mov	r1, r3
 8015992:	f7ed fc3b 	bl	800320c <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinB, GPIO_PIN_RESET);
 8015996:	69bb      	ldr	r3, [r7, #24]
 8015998:	6818      	ldr	r0, [r3, #0]
 801599a:	69bb      	ldr	r3, [r7, #24]
 801599c:	88db      	ldrh	r3, [r3, #6]
 801599e:	2200      	movs	r2, #0
 80159a0:	4619      	mov	r1, r3
 80159a2:	f7ed fc33 	bl	800320c <HAL_GPIO_WritePin>
#endif
		avars->st = ST_SETA;
 80159a6:	697b      	ldr	r3, [r7, #20]
 80159a8:	2201      	movs	r2, #1
 80159aa:	705a      	strb	r2, [r3, #1]
		break;
 80159ac:	e029      	b.n	8015a02 <process_turnout_cmd+0x10a>
	case CMD_TURNOUT_B:
		itm_debug2(DBG_TURNOUT, "TB", tidx, avars->value);
 80159ae:	7ffa      	ldrb	r2, [r7, #31]
 80159b0:	697b      	ldr	r3, [r7, #20]
 80159b2:	f993 3000 	ldrsb.w	r3, [r3]
 80159b6:	4918      	ldr	r1, [pc, #96]	; (8015a18 <process_turnout_cmd+0x120>)
 80159b8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80159bc:	f7ff fefc 	bl	80157b8 <itm_debug2>
		avars->value = -1;
 80159c0:	697b      	ldr	r3, [r7, #20]
 80159c2:	22ff      	movs	r2, #255	; 0xff
 80159c4:	701a      	strb	r2, [r3, #0]
#ifndef TRAIN_SIMU
	    HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinA, GPIO_PIN_RESET);
 80159c6:	69bb      	ldr	r3, [r7, #24]
 80159c8:	6818      	ldr	r0, [r3, #0]
 80159ca:	69bb      	ldr	r3, [r7, #24]
 80159cc:	889b      	ldrh	r3, [r3, #4]
 80159ce:	2200      	movs	r2, #0
 80159d0:	4619      	mov	r1, r3
 80159d2:	f7ed fc1b 	bl	800320c <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinB, GPIO_PIN_RESET);
 80159d6:	69bb      	ldr	r3, [r7, #24]
 80159d8:	6818      	ldr	r0, [r3, #0]
 80159da:	69bb      	ldr	r3, [r7, #24]
 80159dc:	88db      	ldrh	r3, [r3, #6]
 80159de:	2200      	movs	r2, #0
 80159e0:	4619      	mov	r1, r3
 80159e2:	f7ed fc13 	bl	800320c <HAL_GPIO_WritePin>
#endif
		avars->st = ST_SETB;
 80159e6:	697b      	ldr	r3, [r7, #20]
 80159e8:	2203      	movs	r2, #3
 80159ea:	705a      	strb	r2, [r3, #1]
		break;
 80159ec:	e009      	b.n	8015a02 <process_turnout_cmd+0x10a>
	default:
		itm_debug1(DBG_ERR|DBG_TURNOUT, "inv cmd", m->cmd);
 80159ee:	68fb      	ldr	r3, [r7, #12]
 80159f0:	789b      	ldrb	r3, [r3, #2]
 80159f2:	461a      	mov	r2, r3
 80159f4:	4909      	ldr	r1, [pc, #36]	; (8015a1c <process_turnout_cmd+0x124>)
 80159f6:	480a      	ldr	r0, [pc, #40]	; (8015a20 <process_turnout_cmd+0x128>)
 80159f8:	f7ff fec4 	bl	8015784 <itm_debug1>
		break;
 80159fc:	bf00      	nop
 80159fe:	e000      	b.n	8015a02 <process_turnout_cmd+0x10a>
	if (!aconf->cmd_port) return;
 8015a00:	bf00      	nop
	}
}
 8015a02:	3720      	adds	r7, #32
 8015a04:	46bd      	mov	sp, r7
 8015a06:	bd80      	pop	{r7, pc}
 8015a08:	20005324 	.word	0x20005324
 8015a0c:	08019928 	.word	0x08019928
 8015a10:	08019930 	.word	0x08019930
 8015a14:	08019934 	.word	0x08019934
 8015a18:	08019938 	.word	0x08019938
 8015a1c:	0801993c 	.word	0x0801993c
 8015a20:	80000200 	.word	0x80000200

08015a24 <turnout_reset>:


static void turnout_reset(void)
{
 8015a24:	b580      	push	{r7, lr}
 8015a26:	b086      	sub	sp, #24
 8015a28:	af02      	add	r7, sp, #8
	for (int tidx=0; tidx<NUM_LOCAL_TURNOUTS; tidx++) {
 8015a2a:	2300      	movs	r3, #0
 8015a2c:	60fb      	str	r3, [r7, #12]
 8015a2e:	e044      	b.n	8015aba <turnout_reset+0x96>
		USE_TURNOUT(tidx) 	// aconf avars
 8015a30:	68f8      	ldr	r0, [r7, #12]
 8015a32:	f000 fb0d 	bl	8016050 <get_turnout_cnf>
 8015a36:	60b8      	str	r0, [r7, #8]
 8015a38:	68fb      	ldr	r3, [r7, #12]
 8015a3a:	005b      	lsls	r3, r3, #1
 8015a3c:	4a23      	ldr	r2, [pc, #140]	; (8015acc <turnout_reset+0xa8>)
 8015a3e:	4413      	add	r3, r2
 8015a40:	607b      	str	r3, [r7, #4]
		memset(avars, 0, sizeof(*avars));
 8015a42:	2202      	movs	r2, #2
 8015a44:	2100      	movs	r1, #0
 8015a46:	6878      	ldr	r0, [r7, #4]
 8015a48:	f003 fb45 	bl	80190d6 <memset>
		avars->value = 0;
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	2200      	movs	r2, #0
 8015a50:	701a      	strb	r2, [r3, #0]
		avars->st = ST_IDLE;
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	2200      	movs	r2, #0
 8015a56:	705a      	strb	r2, [r3, #1]
		if (!aconf) {
 8015a58:	68bb      	ldr	r3, [r7, #8]
 8015a5a:	2b00      	cmp	r3, #0
 8015a5c:	d106      	bne.n	8015a6c <turnout_reset+0x48>
			itm_debug1(DBG_TURNOUT, "tn skip", tidx);
 8015a5e:	68fa      	ldr	r2, [r7, #12]
 8015a60:	491b      	ldr	r1, [pc, #108]	; (8015ad0 <turnout_reset+0xac>)
 8015a62:	f44f 7000 	mov.w	r0, #512	; 0x200
 8015a66:	f7ff fe8d 	bl	8015784 <itm_debug1>
			continue;
 8015a6a:	e023      	b.n	8015ab4 <turnout_reset+0x90>
		}
#ifndef TRAIN_SIMU
		if (!aconf->cmd_port) return;
 8015a6c:	68bb      	ldr	r3, [r7, #8]
 8015a6e:	681b      	ldr	r3, [r3, #0]
 8015a70:	2b00      	cmp	r3, #0
 8015a72:	d026      	beq.n	8015ac2 <turnout_reset+0x9e>

		HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinA, GPIO_PIN_RESET);
 8015a74:	68bb      	ldr	r3, [r7, #8]
 8015a76:	6818      	ldr	r0, [r3, #0]
 8015a78:	68bb      	ldr	r3, [r7, #8]
 8015a7a:	889b      	ldrh	r3, [r3, #4]
 8015a7c:	2200      	movs	r2, #0
 8015a7e:	4619      	mov	r1, r3
 8015a80:	f7ed fbc4 	bl	800320c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinB, GPIO_PIN_RESET);
 8015a84:	68bb      	ldr	r3, [r7, #8]
 8015a86:	6818      	ldr	r0, [r3, #0]
 8015a88:	68bb      	ldr	r3, [r7, #8]
 8015a8a:	88db      	ldrh	r3, [r3, #6]
 8015a8c:	2200      	movs	r2, #0
 8015a8e:	4619      	mov	r1, r3
 8015a90:	f7ed fbbc 	bl	800320c <HAL_GPIO_WritePin>
#endif
		itm_debug1(DBG_TURNOUT, "A/RESET", tidx);
 8015a94:	68fa      	ldr	r2, [r7, #12]
 8015a96:	490f      	ldr	r1, [pc, #60]	; (8015ad4 <turnout_reset+0xb0>)
 8015a98:	f44f 7000 	mov.w	r0, #512	; 0x200
 8015a9c:	f7ff fe72 	bl	8015784 <itm_debug1>
		debug_info('A', 0, "RESET", 0, 0,0);
 8015aa0:	2300      	movs	r3, #0
 8015aa2:	9301      	str	r3, [sp, #4]
 8015aa4:	2300      	movs	r3, #0
 8015aa6:	9300      	str	r3, [sp, #0]
 8015aa8:	2300      	movs	r3, #0
 8015aaa:	4a0b      	ldr	r2, [pc, #44]	; (8015ad8 <turnout_reset+0xb4>)
 8015aac:	2100      	movs	r1, #0
 8015aae:	2041      	movs	r0, #65	; 0x41
 8015ab0:	f7ff fead 	bl	801580e <debug_info>
	for (int tidx=0; tidx<NUM_LOCAL_TURNOUTS; tidx++) {
 8015ab4:	68fb      	ldr	r3, [r7, #12]
 8015ab6:	3301      	adds	r3, #1
 8015ab8:	60fb      	str	r3, [r7, #12]
 8015aba:	68fb      	ldr	r3, [r7, #12]
 8015abc:	2b07      	cmp	r3, #7
 8015abe:	ddb7      	ble.n	8015a30 <turnout_reset+0xc>
 8015ac0:	e000      	b.n	8015ac4 <turnout_reset+0xa0>
		if (!aconf->cmd_port) return;
 8015ac2:	bf00      	nop
		(void)aconf; // unused
	}
}
 8015ac4:	3710      	adds	r7, #16
 8015ac6:	46bd      	mov	sp, r7
 8015ac8:	bd80      	pop	{r7, pc}
 8015aca:	bf00      	nop
 8015acc:	20005324 	.word	0x20005324
 8015ad0:	08019944 	.word	0x08019944
 8015ad4:	0801994c 	.word	0x0801994c
 8015ad8:	08019954 	.word	0x08019954

08015adc <process_turnout_timers>:




static void process_turnout_timers(_UNUSED_ uint32_t tick, _UNUSED_ uint32_t dt)
{
 8015adc:	b580      	push	{r7, lr}
 8015ade:	b088      	sub	sp, #32
 8015ae0:	af02      	add	r7, sp, #8
 8015ae2:	6078      	str	r0, [r7, #4]
 8015ae4:	6039      	str	r1, [r7, #0]
	for (int i=0; i<NUM_LOCAL_TURNOUTS; i++) {
 8015ae6:	2300      	movs	r3, #0
 8015ae8:	617b      	str	r3, [r7, #20]
 8015aea:	e0a2      	b.n	8015c32 <process_turnout_timers+0x156>
		USE_TURNOUT(i)		// aconf , avars
 8015aec:	6978      	ldr	r0, [r7, #20]
 8015aee:	f000 faaf 	bl	8016050 <get_turnout_cnf>
 8015af2:	6138      	str	r0, [r7, #16]
 8015af4:	697b      	ldr	r3, [r7, #20]
 8015af6:	005b      	lsls	r3, r3, #1
 8015af8:	4a52      	ldr	r2, [pc, #328]	; (8015c44 <process_turnout_timers+0x168>)
 8015afa:	4413      	add	r3, r2
 8015afc:	60fb      	str	r3, [r7, #12]
#ifndef TRAIN_SIMU
        if (!aconf->cmd_port) continue;
 8015afe:	693b      	ldr	r3, [r7, #16]
 8015b00:	681b      	ldr	r3, [r3, #0]
 8015b02:	2b00      	cmp	r3, #0
 8015b04:	f000 808f 	beq.w	8015c26 <process_turnout_timers+0x14a>
#endif
		switch (avars->st) {
 8015b08:	68fb      	ldr	r3, [r7, #12]
 8015b0a:	785b      	ldrb	r3, [r3, #1]
 8015b0c:	2b04      	cmp	r3, #4
 8015b0e:	d87d      	bhi.n	8015c0c <process_turnout_timers+0x130>
 8015b10:	a201      	add	r2, pc, #4	; (adr r2, 8015b18 <process_turnout_timers+0x3c>)
 8015b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015b16:	bf00      	nop
 8015b18:	08015c2b 	.word	0x08015c2b
 8015b1c:	08015b2d 	.word	0x08015b2d
 8015b20:	08015b9d 	.word	0x08015b9d
 8015b24:	08015b65 	.word	0x08015b65
 8015b28:	08015bd5 	.word	0x08015bd5
		case ST_IDLE:
			break;
		case ST_SETA:
#ifndef TRAIN_SIMU
			HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinA, GPIO_PIN_SET);
 8015b2c:	693b      	ldr	r3, [r7, #16]
 8015b2e:	6818      	ldr	r0, [r3, #0]
 8015b30:	693b      	ldr	r3, [r7, #16]
 8015b32:	889b      	ldrh	r3, [r3, #4]
 8015b34:	2201      	movs	r2, #1
 8015b36:	4619      	mov	r1, r3
 8015b38:	f7ed fb68 	bl	800320c <HAL_GPIO_WritePin>
#else
			(void)aconf; // unused in SIMU
#endif
			avars->st = ST_RESETA;
 8015b3c:	68fb      	ldr	r3, [r7, #12]
 8015b3e:	2202      	movs	r2, #2
 8015b40:	705a      	strb	r2, [r3, #1]
			itm_debug1(DBG_TURNOUT, "A/SETA", i);
 8015b42:	697a      	ldr	r2, [r7, #20]
 8015b44:	4940      	ldr	r1, [pc, #256]	; (8015c48 <process_turnout_timers+0x16c>)
 8015b46:	f44f 7000 	mov.w	r0, #512	; 0x200
 8015b4a:	f7ff fe1b 	bl	8015784 <itm_debug1>
			debug_info('A', 0, "A0/SETA", 0, 0,0);
 8015b4e:	2300      	movs	r3, #0
 8015b50:	9301      	str	r3, [sp, #4]
 8015b52:	2300      	movs	r3, #0
 8015b54:	9300      	str	r3, [sp, #0]
 8015b56:	2300      	movs	r3, #0
 8015b58:	4a3c      	ldr	r2, [pc, #240]	; (8015c4c <process_turnout_timers+0x170>)
 8015b5a:	2100      	movs	r1, #0
 8015b5c:	2041      	movs	r0, #65	; 0x41
 8015b5e:	f7ff fe56 	bl	801580e <debug_info>
			break;
 8015b62:	e063      	b.n	8015c2c <process_turnout_timers+0x150>
		case ST_SETB:
#ifndef TRAIN_SIMU
			HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinB, GPIO_PIN_SET);
 8015b64:	693b      	ldr	r3, [r7, #16]
 8015b66:	6818      	ldr	r0, [r3, #0]
 8015b68:	693b      	ldr	r3, [r7, #16]
 8015b6a:	88db      	ldrh	r3, [r3, #6]
 8015b6c:	2201      	movs	r2, #1
 8015b6e:	4619      	mov	r1, r3
 8015b70:	f7ed fb4c 	bl	800320c <HAL_GPIO_WritePin>
#endif
			avars->st = ST_RESETB;
 8015b74:	68fb      	ldr	r3, [r7, #12]
 8015b76:	2204      	movs	r2, #4
 8015b78:	705a      	strb	r2, [r3, #1]
			itm_debug1(DBG_TURNOUT, "A/SETB", i);
 8015b7a:	697a      	ldr	r2, [r7, #20]
 8015b7c:	4934      	ldr	r1, [pc, #208]	; (8015c50 <process_turnout_timers+0x174>)
 8015b7e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8015b82:	f7ff fdff 	bl	8015784 <itm_debug1>
			debug_info('A', 0, "A0/SETB", 0, 0,0);
 8015b86:	2300      	movs	r3, #0
 8015b88:	9301      	str	r3, [sp, #4]
 8015b8a:	2300      	movs	r3, #0
 8015b8c:	9300      	str	r3, [sp, #0]
 8015b8e:	2300      	movs	r3, #0
 8015b90:	4a30      	ldr	r2, [pc, #192]	; (8015c54 <process_turnout_timers+0x178>)
 8015b92:	2100      	movs	r1, #0
 8015b94:	2041      	movs	r0, #65	; 0x41
 8015b96:	f7ff fe3a 	bl	801580e <debug_info>
			break;
 8015b9a:	e047      	b.n	8015c2c <process_turnout_timers+0x150>
		case ST_RESETA:
#ifndef TRAIN_SIMU
			HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinA, GPIO_PIN_RESET);
 8015b9c:	693b      	ldr	r3, [r7, #16]
 8015b9e:	6818      	ldr	r0, [r3, #0]
 8015ba0:	693b      	ldr	r3, [r7, #16]
 8015ba2:	889b      	ldrh	r3, [r3, #4]
 8015ba4:	2200      	movs	r2, #0
 8015ba6:	4619      	mov	r1, r3
 8015ba8:	f7ed fb30 	bl	800320c <HAL_GPIO_WritePin>
#endif
			avars->st = ST_IDLE;
 8015bac:	68fb      	ldr	r3, [r7, #12]
 8015bae:	2200      	movs	r2, #0
 8015bb0:	705a      	strb	r2, [r3, #1]
			itm_debug1(DBG_TURNOUT, "A/RESETA", i);
 8015bb2:	697a      	ldr	r2, [r7, #20]
 8015bb4:	4928      	ldr	r1, [pc, #160]	; (8015c58 <process_turnout_timers+0x17c>)
 8015bb6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8015bba:	f7ff fde3 	bl	8015784 <itm_debug1>
			debug_info('A', 0, "A0/RESETA", 0, 0,0);
 8015bbe:	2300      	movs	r3, #0
 8015bc0:	9301      	str	r3, [sp, #4]
 8015bc2:	2300      	movs	r3, #0
 8015bc4:	9300      	str	r3, [sp, #0]
 8015bc6:	2300      	movs	r3, #0
 8015bc8:	4a24      	ldr	r2, [pc, #144]	; (8015c5c <process_turnout_timers+0x180>)
 8015bca:	2100      	movs	r1, #0
 8015bcc:	2041      	movs	r0, #65	; 0x41
 8015bce:	f7ff fe1e 	bl	801580e <debug_info>
			break;
 8015bd2:	e02b      	b.n	8015c2c <process_turnout_timers+0x150>
		case ST_RESETB:
#ifndef TRAIN_SIMU
			HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinB, GPIO_PIN_RESET);
 8015bd4:	693b      	ldr	r3, [r7, #16]
 8015bd6:	6818      	ldr	r0, [r3, #0]
 8015bd8:	693b      	ldr	r3, [r7, #16]
 8015bda:	88db      	ldrh	r3, [r3, #6]
 8015bdc:	2200      	movs	r2, #0
 8015bde:	4619      	mov	r1, r3
 8015be0:	f7ed fb14 	bl	800320c <HAL_GPIO_WritePin>
#endif
			avars->st = ST_IDLE;
 8015be4:	68fb      	ldr	r3, [r7, #12]
 8015be6:	2200      	movs	r2, #0
 8015be8:	705a      	strb	r2, [r3, #1]
			itm_debug1(DBG_TURNOUT, "A/RESETB", i);
 8015bea:	697a      	ldr	r2, [r7, #20]
 8015bec:	491c      	ldr	r1, [pc, #112]	; (8015c60 <process_turnout_timers+0x184>)
 8015bee:	f44f 7000 	mov.w	r0, #512	; 0x200
 8015bf2:	f7ff fdc7 	bl	8015784 <itm_debug1>
			debug_info('A', 0, "A0/RESETB", 0, 0,0);
 8015bf6:	2300      	movs	r3, #0
 8015bf8:	9301      	str	r3, [sp, #4]
 8015bfa:	2300      	movs	r3, #0
 8015bfc:	9300      	str	r3, [sp, #0]
 8015bfe:	2300      	movs	r3, #0
 8015c00:	4a18      	ldr	r2, [pc, #96]	; (8015c64 <process_turnout_timers+0x188>)
 8015c02:	2100      	movs	r1, #0
 8015c04:	2041      	movs	r0, #65	; 0x41
 8015c06:	f7ff fe02 	bl	801580e <debug_info>
			break;
 8015c0a:	e00f      	b.n	8015c2c <process_turnout_timers+0x150>
			HAL_GPIO_TogglePin(aconf->cmd_port, aconf->pinB);
#endif
			break;
			 */
		default:
			itm_debug1(DBG_TURNOUT|DBG_ERR, "bad state", avars->st);
 8015c0c:	68fb      	ldr	r3, [r7, #12]
 8015c0e:	785b      	ldrb	r3, [r3, #1]
 8015c10:	461a      	mov	r2, r3
 8015c12:	4915      	ldr	r1, [pc, #84]	; (8015c68 <process_turnout_timers+0x18c>)
 8015c14:	4815      	ldr	r0, [pc, #84]	; (8015c6c <process_turnout_timers+0x190>)
 8015c16:	f7ff fdb5 	bl	8015784 <itm_debug1>
			turnout_error(ERR_BAD_STATE, "bad state");
 8015c1a:	4913      	ldr	r1, [pc, #76]	; (8015c68 <process_turnout_timers+0x18c>)
 8015c1c:	f06f 0008 	mvn.w	r0, #8
 8015c20:	f7ff fde6 	bl	80157f0 <turnout_error>
			break;
 8015c24:	e002      	b.n	8015c2c <process_turnout_timers+0x150>
        if (!aconf->cmd_port) continue;
 8015c26:	bf00      	nop
 8015c28:	e000      	b.n	8015c2c <process_turnout_timers+0x150>
			break;
 8015c2a:	bf00      	nop
	for (int i=0; i<NUM_LOCAL_TURNOUTS; i++) {
 8015c2c:	697b      	ldr	r3, [r7, #20]
 8015c2e:	3301      	adds	r3, #1
 8015c30:	617b      	str	r3, [r7, #20]
 8015c32:	697b      	ldr	r3, [r7, #20]
 8015c34:	2b07      	cmp	r3, #7
 8015c36:	f77f af59 	ble.w	8015aec <process_turnout_timers+0x10>
		}
	}
}
 8015c3a:	bf00      	nop
 8015c3c:	3718      	adds	r7, #24
 8015c3e:	46bd      	mov	sp, r7
 8015c40:	bd80      	pop	{r7, pc}
 8015c42:	bf00      	nop
 8015c44:	20005324 	.word	0x20005324
 8015c48:	0801995c 	.word	0x0801995c
 8015c4c:	08019964 	.word	0x08019964
 8015c50:	0801996c 	.word	0x0801996c
 8015c54:	08019974 	.word	0x08019974
 8015c58:	0801997c 	.word	0x0801997c
 8015c5c:	08019988 	.word	0x08019988
 8015c60:	08019994 	.word	0x08019994
 8015c64:	080199a0 	.word	0x080199a0
 8015c68:	080199ac 	.word	0x080199ac
 8015c6c:	80000200 	.word	0x80000200

08015c70 <itm_debug1>:
//void _itm_debug1(const char *msg, int v);
//void _itm_debug2(const char *msg, int v1, int v2);
void _itm_debug3(const char *msg, int v1, int v2, int v3, int n);

static inline void itm_debug1(uint32_t f, const char *msg, int v)
{
 8015c70:	b580      	push	{r7, lr}
 8015c72:	b086      	sub	sp, #24
 8015c74:	af02      	add	r7, sp, #8
 8015c76:	60f8      	str	r0, [r7, #12]
 8015c78:	60b9      	str	r1, [r7, #8]
 8015c7a:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 8015c7c:	4b08      	ldr	r3, [pc, #32]	; (8015ca0 <itm_debug1+0x30>)
 8015c7e:	681a      	ldr	r2, [r3, #0]
 8015c80:	68fb      	ldr	r3, [r7, #12]
 8015c82:	4013      	ands	r3, r2
 8015c84:	2b00      	cmp	r3, #0
 8015c86:	d007      	beq.n	8015c98 <itm_debug1+0x28>
 8015c88:	2301      	movs	r3, #1
 8015c8a:	9300      	str	r3, [sp, #0]
 8015c8c:	2300      	movs	r3, #0
 8015c8e:	2200      	movs	r2, #0
 8015c90:	6879      	ldr	r1, [r7, #4]
 8015c92:	68b8      	ldr	r0, [r7, #8]
 8015c94:	f002 fffe 	bl	8018c94 <_itm_debug3>
}
 8015c98:	bf00      	nop
 8015c9a:	3710      	adds	r7, #16
 8015c9c:	46bd      	mov	sp, r7
 8015c9e:	bd80      	pop	{r7, pc}
 8015ca0:	200005a4 	.word	0x200005a4

08015ca4 <trainctl_error>:




int trainctl_error(_UNUSED_ char l, int code, _UNUSED_ const char *msg)
{
 8015ca4:	b580      	push	{r7, lr}
 8015ca6:	b088      	sub	sp, #32
 8015ca8:	af02      	add	r7, sp, #8
 8015caa:	4603      	mov	r3, r0
 8015cac:	60b9      	str	r1, [r7, #8]
 8015cae:	607a      	str	r2, [r7, #4]
 8015cb0:	73fb      	strb	r3, [r7, #15]
	int16_t c = code;
 8015cb2:	68bb      	ldr	r3, [r7, #8]
 8015cb4:	b21b      	sxth	r3, r3
 8015cb6:	82fb      	strh	r3, [r7, #22]
	// add debug msg or notification here
	if (c >=0) c=-1;
 8015cb8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015cbc:	2b00      	cmp	r3, #0
 8015cbe:	db02      	blt.n	8015cc6 <trainctl_error+0x22>
 8015cc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015cc4:	82fb      	strh	r3, [r7, #22]
	trainctl_notif('G', 0, 'E', (void *)&c, sizeof(c));
 8015cc6:	f107 0216 	add.w	r2, r7, #22
 8015cca:	2302      	movs	r3, #2
 8015ccc:	9300      	str	r3, [sp, #0]
 8015cce:	4613      	mov	r3, r2
 8015cd0:	2245      	movs	r2, #69	; 0x45
 8015cd2:	2100      	movs	r1, #0
 8015cd4:	2047      	movs	r0, #71	; 0x47
 8015cd6:	f000 fe7d 	bl	80169d4 <trainctl_notif>
	return code;
 8015cda:	68bb      	ldr	r3, [r7, #8]
}
 8015cdc:	4618      	mov	r0, r3
 8015cde:	3718      	adds	r7, #24
 8015ce0:	46bd      	mov	sp, r7
 8015ce2:	bd80      	pop	{r7, pc}

08015ce4 <long_isr>:
}



void long_isr(uint32_t dur)
{
 8015ce4:	b580      	push	{r7, lr}
 8015ce6:	b082      	sub	sp, #8
 8015ce8:	af00      	add	r7, sp, #0
 8015cea:	6078      	str	r0, [r7, #4]
	itm_debug1(DBG_ERR, "long isr", dur);
 8015cec:	687b      	ldr	r3, [r7, #4]
 8015cee:	461a      	mov	r2, r3
 8015cf0:	4904      	ldr	r1, [pc, #16]	; (8015d04 <long_isr+0x20>)
 8015cf2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8015cf6:	f7ff ffbb 	bl	8015c70 <itm_debug1>
	//for (int i=0; i<100; i++) {
	//	itm_debug1(DBG_ERR, "micro", GetCurrentMicro());
	//}
}
 8015cfa:	bf00      	nop
 8015cfc:	3708      	adds	r7, #8
 8015cfe:	46bd      	mov	sp, r7
 8015d00:	bd80      	pop	{r7, pc}
 8015d02:	bf00      	nop
 8015d04:	080199b8 	.word	0x080199b8

08015d08 <GetCycleCount64>:
 */
volatile uint64_t last_cycle_count_64 = 0;

// Call at least every 2^32 cycles (every 59.6 seconds @ 72 MHz).
uint64_t GetCycleCount64(void)
{
 8015d08:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8015d0c:	b085      	sub	sp, #20
 8015d0e:	af00      	add	r7, sp, #0
#ifdef TRAIN_SIMU
    return 0;
#else
  uint32_t primask;
  asm volatile ("mrs %0, PRIMASK" : "=r"(primask));
 8015d10:	f3ef 8310 	mrs	r3, PRIMASK
 8015d14:	60fb      	str	r3, [r7, #12]
  asm volatile ("cpsid i");  // Disable interrupts.
 8015d16:	b672      	cpsid	i
  int64_t r = last_cycle_count_64;
 8015d18:	4b12      	ldr	r3, [pc, #72]	; (8015d64 <GetCycleCount64+0x5c>)
 8015d1a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8015d1e:	e9c7 3400 	strd	r3, r4, [r7]
  r += DWT->CYCCNT - (uint32_t)(r);
 8015d22:	4b11      	ldr	r3, [pc, #68]	; (8015d68 <GetCycleCount64+0x60>)
 8015d24:	685a      	ldr	r2, [r3, #4]
 8015d26:	683b      	ldr	r3, [r7, #0]
 8015d28:	1ad3      	subs	r3, r2, r3
 8015d2a:	469b      	mov	fp, r3
 8015d2c:	f04f 0c00 	mov.w	ip, #0
 8015d30:	e9d7 1200 	ldrd	r1, r2, [r7]
 8015d34:	eb1b 0301 	adds.w	r3, fp, r1
 8015d38:	eb4c 0402 	adc.w	r4, ip, r2
 8015d3c:	e9c7 3400 	strd	r3, r4, [r7]
  last_cycle_count_64 = r;
 8015d40:	e9d7 3400 	ldrd	r3, r4, [r7]
 8015d44:	4a07      	ldr	r2, [pc, #28]	; (8015d64 <GetCycleCount64+0x5c>)
 8015d46:	e9c2 3400 	strd	r3, r4, [r2]
  asm volatile ("msr PRIMASK, %0" : : "r"(primask));  // Restore interrupts.
 8015d4a:	68fb      	ldr	r3, [r7, #12]
 8015d4c:	f383 8810 	msr	PRIMASK, r3
  return r;
 8015d50:	e9d7 3400 	ldrd	r3, r4, [r7]
#endif
}
 8015d54:	4618      	mov	r0, r3
 8015d56:	4621      	mov	r1, r4
 8015d58:	3714      	adds	r7, #20
 8015d5a:	46bd      	mov	sp, r7
 8015d5c:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8015d60:	4770      	bx	lr
 8015d62:	bf00      	nop
 8015d64:	20005338 	.word	0x20005338
 8015d68:	e0001000 	.word	0xe0001000

08015d6c <startCycleCounter>:

void startCycleCounter(void)
{
 8015d6c:	b480      	push	{r7}
 8015d6e:	af00      	add	r7, sp, #0
#ifndef TRAIN_SIMU
	DWT->CYCCNT |= DWT_CTRL_CYCCNTENA_Msk;  // Set bit 0.
 8015d70:	4b05      	ldr	r3, [pc, #20]	; (8015d88 <startCycleCounter+0x1c>)
 8015d72:	685b      	ldr	r3, [r3, #4]
 8015d74:	4a04      	ldr	r2, [pc, #16]	; (8015d88 <startCycleCounter+0x1c>)
 8015d76:	f043 0301 	orr.w	r3, r3, #1
 8015d7a:	6053      	str	r3, [r2, #4]
#endif
}
 8015d7c:	bf00      	nop
 8015d7e:	46bd      	mov	sp, r7
 8015d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d84:	4770      	bx	lr
 8015d86:	bf00      	nop
 8015d88:	e0001000 	.word	0xe0001000

08015d8c <get_param_def>:
#include <stddef.h>
#include <string.h>
#include "param.h"

static param_t *get_param_def(const param_t *rgpar, const char *n)
{
 8015d8c:	b580      	push	{r7, lr}
 8015d8e:	b084      	sub	sp, #16
 8015d90:	af00      	add	r7, sp, #0
 8015d92:	6078      	str	r0, [r7, #4]
 8015d94:	6039      	str	r1, [r7, #0]
	for (param_t *p = (param_t*) rgpar; p->name; p++) {
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	60fb      	str	r3, [r7, #12]
 8015d9a:	e00d      	b.n	8015db8 <get_param_def+0x2c>
		if (!strcmp(p->name, n)) return p;
 8015d9c:	68fb      	ldr	r3, [r7, #12]
 8015d9e:	681b      	ldr	r3, [r3, #0]
 8015da0:	6839      	ldr	r1, [r7, #0]
 8015da2:	4618      	mov	r0, r3
 8015da4:	f7ea fa14 	bl	80001d0 <strcmp>
 8015da8:	4603      	mov	r3, r0
 8015daa:	2b00      	cmp	r3, #0
 8015dac:	d101      	bne.n	8015db2 <get_param_def+0x26>
 8015dae:	68fb      	ldr	r3, [r7, #12]
 8015db0:	e007      	b.n	8015dc2 <get_param_def+0x36>
	for (param_t *p = (param_t*) rgpar; p->name; p++) {
 8015db2:	68fb      	ldr	r3, [r7, #12]
 8015db4:	3324      	adds	r3, #36	; 0x24
 8015db6:	60fb      	str	r3, [r7, #12]
 8015db8:	68fb      	ldr	r3, [r7, #12]
 8015dba:	681b      	ldr	r3, [r3, #0]
 8015dbc:	2b00      	cmp	r3, #0
 8015dbe:	d1ed      	bne.n	8015d9c <get_param_def+0x10>
	}
	return NULL;
 8015dc0:	2300      	movs	r3, #0
}
 8015dc2:	4618      	mov	r0, r3
 8015dc4:	3710      	adds	r7, #16
 8015dc6:	46bd      	mov	sp, r7
 8015dc8:	bd80      	pop	{r7, pc}

08015dca <param_get_value>:

int param_get_value(const param_t *params, void *ptr, const char *name, int32_t *pvalue, int32_t *pdef, int32_t *pmin, int32_t *pmax)
{
 8015dca:	b580      	push	{r7, lr}
 8015dcc:	b088      	sub	sp, #32
 8015dce:	af00      	add	r7, sp, #0
 8015dd0:	60f8      	str	r0, [r7, #12]
 8015dd2:	60b9      	str	r1, [r7, #8]
 8015dd4:	607a      	str	r2, [r7, #4]
 8015dd6:	603b      	str	r3, [r7, #0]
	param_t *prm = get_param_def(params, name);
 8015dd8:	6879      	ldr	r1, [r7, #4]
 8015dda:	68f8      	ldr	r0, [r7, #12]
 8015ddc:	f7ff ffd6 	bl	8015d8c <get_param_def>
 8015de0:	6178      	str	r0, [r7, #20]
	if (!prm) {
 8015de2:	697b      	ldr	r3, [r7, #20]
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	d101      	bne.n	8015dec <param_get_value+0x22>
		return 10;
 8015de8:	230a      	movs	r3, #10
 8015dea:	e05c      	b.n	8015ea6 <param_get_value+0xdc>
	}
	if (pmin) *pmin = prm->min;
 8015dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	d003      	beq.n	8015dfa <param_get_value+0x30>
 8015df2:	697b      	ldr	r3, [r7, #20]
 8015df4:	699a      	ldr	r2, [r3, #24]
 8015df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015df8:	601a      	str	r2, [r3, #0]
	if (pmax) *pmax = prm->max;
 8015dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dfc:	2b00      	cmp	r3, #0
 8015dfe:	d003      	beq.n	8015e08 <param_get_value+0x3e>
 8015e00:	697b      	ldr	r3, [r7, #20]
 8015e02:	69da      	ldr	r2, [r3, #28]
 8015e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e06:	601a      	str	r2, [r3, #0]
	if (pdef) *pdef = prm->def;
 8015e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e0a:	2b00      	cmp	r3, #0
 8015e0c:	d003      	beq.n	8015e16 <param_get_value+0x4c>
 8015e0e:	697b      	ldr	r3, [r7, #20]
 8015e10:	6a1a      	ldr	r2, [r3, #32]
 8015e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e14:	601a      	str	r2, [r3, #0]
	if (pvalue) {
 8015e16:	683b      	ldr	r3, [r7, #0]
 8015e18:	2b00      	cmp	r3, #0
 8015e1a:	d043      	beq.n	8015ea4 <param_get_value+0xda>
		if (prm->getter) {
 8015e1c:	697b      	ldr	r3, [r7, #20]
 8015e1e:	68db      	ldr	r3, [r3, #12]
 8015e20:	2b00      	cmp	r3, #0
 8015e22:	d007      	beq.n	8015e34 <param_get_value+0x6a>
			*pvalue = prm->getter(prm);
 8015e24:	697b      	ldr	r3, [r7, #20]
 8015e26:	68db      	ldr	r3, [r3, #12]
 8015e28:	6978      	ldr	r0, [r7, #20]
 8015e2a:	4798      	blx	r3
 8015e2c:	4602      	mov	r2, r0
 8015e2e:	683b      	ldr	r3, [r7, #0]
 8015e30:	601a      	str	r2, [r3, #0]
 8015e32:	e037      	b.n	8015ea4 <param_get_value+0xda>
		} else {
			uint8_t *p = ptr;
 8015e34:	68bb      	ldr	r3, [r7, #8]
 8015e36:	61fb      	str	r3, [r7, #28]
			if (prm->ptr) p = prm->ptr;
 8015e38:	697b      	ldr	r3, [r7, #20]
 8015e3a:	685b      	ldr	r3, [r3, #4]
 8015e3c:	2b00      	cmp	r3, #0
 8015e3e:	d002      	beq.n	8015e46 <param_get_value+0x7c>
 8015e40:	697b      	ldr	r3, [r7, #20]
 8015e42:	685b      	ldr	r3, [r3, #4]
 8015e44:	61fb      	str	r3, [r7, #28]
			p += prm->offset;
 8015e46:	697b      	ldr	r3, [r7, #20]
 8015e48:	689b      	ldr	r3, [r3, #8]
 8015e4a:	461a      	mov	r2, r3
 8015e4c:	69fb      	ldr	r3, [r7, #28]
 8015e4e:	4413      	add	r3, r2
 8015e50:	61fb      	str	r3, [r7, #28]
			if (!p) return 11;
 8015e52:	69fb      	ldr	r3, [r7, #28]
 8015e54:	2b00      	cmp	r3, #0
 8015e56:	d101      	bne.n	8015e5c <param_get_value+0x92>
 8015e58:	230b      	movs	r3, #11
 8015e5a:	e024      	b.n	8015ea6 <param_get_value+0xdc>
			if ((int)p<0x100) return 12; // probably an error if low ptr
 8015e5c:	69fb      	ldr	r3, [r7, #28]
 8015e5e:	2bff      	cmp	r3, #255	; 0xff
 8015e60:	dc01      	bgt.n	8015e66 <param_get_value+0x9c>
 8015e62:	230c      	movs	r3, #12
 8015e64:	e01f      	b.n	8015ea6 <param_get_value+0xdc>

			int8_t v8; int16_t v16; int32_t v32;
			switch (prm->size) {
 8015e66:	697b      	ldr	r3, [r7, #20]
 8015e68:	695b      	ldr	r3, [r3, #20]
 8015e6a:	2b02      	cmp	r3, #2
 8015e6c:	d00a      	beq.n	8015e84 <param_get_value+0xba>
 8015e6e:	2b04      	cmp	r3, #4
 8015e70:	d00f      	beq.n	8015e92 <param_get_value+0xc8>
 8015e72:	2b01      	cmp	r3, #1
 8015e74:	d111      	bne.n	8015e9a <param_get_value+0xd0>
			case 1:
				v8 = *((int8_t *)p);
 8015e76:	69fb      	ldr	r3, [r7, #28]
 8015e78:	781b      	ldrb	r3, [r3, #0]
 8015e7a:	747b      	strb	r3, [r7, #17]
				v32 = (int32_t)v8;
 8015e7c:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8015e80:	61bb      	str	r3, [r7, #24]
				break;
 8015e82:	e00c      	b.n	8015e9e <param_get_value+0xd4>
			case 2:
				v16 = *((int16_t *)p);
 8015e84:	69fb      	ldr	r3, [r7, #28]
 8015e86:	881b      	ldrh	r3, [r3, #0]
 8015e88:	827b      	strh	r3, [r7, #18]
				v32 = (int32_t)v16;
 8015e8a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015e8e:	61bb      	str	r3, [r7, #24]
				break;
 8015e90:	e005      	b.n	8015e9e <param_get_value+0xd4>
			case 4:
				v32 = *((int32_t *)p);
 8015e92:	69fb      	ldr	r3, [r7, #28]
 8015e94:	681b      	ldr	r3, [r3, #0]
 8015e96:	61bb      	str	r3, [r7, #24]
				break;
 8015e98:	e001      	b.n	8015e9e <param_get_value+0xd4>
			default:
				return 12;
 8015e9a:	230c      	movs	r3, #12
 8015e9c:	e003      	b.n	8015ea6 <param_get_value+0xdc>
			}
			*pvalue = v32;
 8015e9e:	683b      	ldr	r3, [r7, #0]
 8015ea0:	69ba      	ldr	r2, [r7, #24]
 8015ea2:	601a      	str	r2, [r3, #0]
		}
	}
	return 0;
 8015ea4:	2300      	movs	r3, #0
}
 8015ea6:	4618      	mov	r0, r3
 8015ea8:	3720      	adds	r7, #32
 8015eaa:	46bd      	mov	sp, r7
 8015eac:	bd80      	pop	{r7, pc}

08015eae <param_set_value>:
int param_set_value(const param_t *params, void *ptr, const char *name, int32_t value)
{
 8015eae:	b580      	push	{r7, lr}
 8015eb0:	b088      	sub	sp, #32
 8015eb2:	af00      	add	r7, sp, #0
 8015eb4:	60f8      	str	r0, [r7, #12]
 8015eb6:	60b9      	str	r1, [r7, #8]
 8015eb8:	607a      	str	r2, [r7, #4]
 8015eba:	603b      	str	r3, [r7, #0]
	param_t *prm = get_param_def(params, name);
 8015ebc:	6879      	ldr	r1, [r7, #4]
 8015ebe:	68f8      	ldr	r0, [r7, #12]
 8015ec0:	f7ff ff64 	bl	8015d8c <get_param_def>
 8015ec4:	61b8      	str	r0, [r7, #24]
	if (!prm) {
 8015ec6:	69bb      	ldr	r3, [r7, #24]
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	d101      	bne.n	8015ed0 <param_set_value+0x22>
		return 10;
 8015ecc:	230a      	movs	r3, #10
 8015ece:	e03f      	b.n	8015f50 <param_set_value+0xa2>
	}
	if (prm->setter) {
 8015ed0:	69bb      	ldr	r3, [r7, #24]
 8015ed2:	691b      	ldr	r3, [r3, #16]
 8015ed4:	2b00      	cmp	r3, #0
 8015ed6:	d005      	beq.n	8015ee4 <param_set_value+0x36>
		//if ((1)) return 42;
		prm->setter(prm, value);
 8015ed8:	69bb      	ldr	r3, [r7, #24]
 8015eda:	691b      	ldr	r3, [r3, #16]
 8015edc:	6839      	ldr	r1, [r7, #0]
 8015ede:	69b8      	ldr	r0, [r7, #24]
 8015ee0:	4798      	blx	r3
 8015ee2:	e034      	b.n	8015f4e <param_set_value+0xa0>
	} else {
		uint8_t *p = ptr;
 8015ee4:	68bb      	ldr	r3, [r7, #8]
 8015ee6:	61fb      	str	r3, [r7, #28]
		if (prm->ptr) p = prm->ptr;
 8015ee8:	69bb      	ldr	r3, [r7, #24]
 8015eea:	685b      	ldr	r3, [r3, #4]
 8015eec:	2b00      	cmp	r3, #0
 8015eee:	d002      	beq.n	8015ef6 <param_set_value+0x48>
 8015ef0:	69bb      	ldr	r3, [r7, #24]
 8015ef2:	685b      	ldr	r3, [r3, #4]
 8015ef4:	61fb      	str	r3, [r7, #28]
		p += prm->offset;
 8015ef6:	69bb      	ldr	r3, [r7, #24]
 8015ef8:	689b      	ldr	r3, [r3, #8]
 8015efa:	461a      	mov	r2, r3
 8015efc:	69fb      	ldr	r3, [r7, #28]
 8015efe:	4413      	add	r3, r2
 8015f00:	61fb      	str	r3, [r7, #28]
		if (!p) return 11;
 8015f02:	69fb      	ldr	r3, [r7, #28]
 8015f04:	2b00      	cmp	r3, #0
 8015f06:	d101      	bne.n	8015f0c <param_set_value+0x5e>
 8015f08:	230b      	movs	r3, #11
 8015f0a:	e021      	b.n	8015f50 <param_set_value+0xa2>
		if ((int)p<0x100) return 12; // probably an error if low ptr
 8015f0c:	69fb      	ldr	r3, [r7, #28]
 8015f0e:	2bff      	cmp	r3, #255	; 0xff
 8015f10:	dc01      	bgt.n	8015f16 <param_set_value+0x68>
 8015f12:	230c      	movs	r3, #12
 8015f14:	e01c      	b.n	8015f50 <param_set_value+0xa2>

		int8_t v8; int16_t v16; int32_t v32;
		v32 = value;
 8015f16:	683b      	ldr	r3, [r7, #0]
 8015f18:	617b      	str	r3, [r7, #20]
		switch (prm->size) {
 8015f1a:	69bb      	ldr	r3, [r7, #24]
 8015f1c:	695b      	ldr	r3, [r3, #20]
 8015f1e:	2b02      	cmp	r3, #2
 8015f20:	d009      	beq.n	8015f36 <param_set_value+0x88>
 8015f22:	2b04      	cmp	r3, #4
 8015f24:	d00d      	beq.n	8015f42 <param_set_value+0x94>
 8015f26:	2b01      	cmp	r3, #1
 8015f28:	d10f      	bne.n	8015f4a <param_set_value+0x9c>
		case 1:
			v8 = (int8_t) v32;
 8015f2a:	697b      	ldr	r3, [r7, #20]
 8015f2c:	747b      	strb	r3, [r7, #17]
			*((int8_t *)p) = v8;
 8015f2e:	69fb      	ldr	r3, [r7, #28]
 8015f30:	7c7a      	ldrb	r2, [r7, #17]
 8015f32:	701a      	strb	r2, [r3, #0]
			break;
 8015f34:	e00b      	b.n	8015f4e <param_set_value+0xa0>
		case 2:
			v16 = (int16_t) v32;
 8015f36:	697b      	ldr	r3, [r7, #20]
 8015f38:	827b      	strh	r3, [r7, #18]
			*((int16_t *)p) = v16;
 8015f3a:	69fb      	ldr	r3, [r7, #28]
 8015f3c:	8a7a      	ldrh	r2, [r7, #18]
 8015f3e:	801a      	strh	r2, [r3, #0]
			break;
 8015f40:	e005      	b.n	8015f4e <param_set_value+0xa0>
		case 4:
			*((int32_t *)p) = v32;
 8015f42:	69fb      	ldr	r3, [r7, #28]
 8015f44:	697a      	ldr	r2, [r7, #20]
 8015f46:	601a      	str	r2, [r3, #0]
			break;
 8015f48:	e001      	b.n	8015f4e <param_set_value+0xa0>
		default:
			return 12;
 8015f4a:	230c      	movs	r3, #12
 8015f4c:	e000      	b.n	8015f50 <param_set_value+0xa2>
		}
	}
	return 0;
 8015f4e:	2300      	movs	r3, #0
}
 8015f50:	4618      	mov	r0, r3
 8015f52:	3720      	adds	r7, #32
 8015f54:	46bd      	mov	sp, r7
 8015f56:	bd80      	pop	{r7, pc}

08015f58 <itm_debug1>:
{
 8015f58:	b580      	push	{r7, lr}
 8015f5a:	b086      	sub	sp, #24
 8015f5c:	af02      	add	r7, sp, #8
 8015f5e:	60f8      	str	r0, [r7, #12]
 8015f60:	60b9      	str	r1, [r7, #8]
 8015f62:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 8015f64:	4b08      	ldr	r3, [pc, #32]	; (8015f88 <itm_debug1+0x30>)
 8015f66:	681a      	ldr	r2, [r3, #0]
 8015f68:	68fb      	ldr	r3, [r7, #12]
 8015f6a:	4013      	ands	r3, r2
 8015f6c:	2b00      	cmp	r3, #0
 8015f6e:	d007      	beq.n	8015f80 <itm_debug1+0x28>
 8015f70:	2301      	movs	r3, #1
 8015f72:	9300      	str	r3, [sp, #0]
 8015f74:	2300      	movs	r3, #0
 8015f76:	2200      	movs	r2, #0
 8015f78:	6879      	ldr	r1, [r7, #4]
 8015f7a:	68b8      	ldr	r0, [r7, #8]
 8015f7c:	f002 fe8a 	bl	8018c94 <_itm_debug3>
}
 8015f80:	bf00      	nop
 8015f82:	3710      	adds	r7, #16
 8015f84:	46bd      	mov	sp, r7
 8015f86:	bd80      	pop	{r7, pc}
 8015f88:	200005a4 	.word	0x200005a4

08015f8c <config_error>:
{
	return trainctl_error('A', code, msg);
}

static inline void *config_error(int code, const char *msg)
{
 8015f8c:	b580      	push	{r7, lr}
 8015f8e:	b082      	sub	sp, #8
 8015f90:	af00      	add	r7, sp, #0
 8015f92:	6078      	str	r0, [r7, #4]
 8015f94:	6039      	str	r1, [r7, #0]
	itm_debug1(DBG_CONFIG, msg, code);
 8015f96:	687a      	ldr	r2, [r7, #4]
 8015f98:	6839      	ldr	r1, [r7, #0]
 8015f9a:	2080      	movs	r0, #128	; 0x80
 8015f9c:	f7ff ffdc 	bl	8015f58 <itm_debug1>
	trainctl_error('G', code, msg);
 8015fa0:	683a      	ldr	r2, [r7, #0]
 8015fa2:	6879      	ldr	r1, [r7, #4]
 8015fa4:	2047      	movs	r0, #71	; 0x47
 8015fa6:	f7ff fe7d 	bl	8015ca4 <trainctl_error>
	return NULL;
 8015faa:	2300      	movs	r3, #0
}
 8015fac:	4618      	mov	r0, r3
 8015fae:	3708      	adds	r7, #8
 8015fb0:	46bd      	mov	sp, r7
 8015fb2:	bd80      	pop	{r7, pc}

08015fb4 <get_canton_cnf>:
        //static turnout_vars_t TurnoutVars[NUM_TURNOUTS];

static int setup_done = 1;

const canton_config_t *get_canton_cnf(int idx)
{
 8015fb4:	b580      	push	{r7, lr}
 8015fb6:	b082      	sub	sp, #8
 8015fb8:	af00      	add	r7, sp, #0
 8015fba:	6078      	str	r0, [r7, #4]
	if (!setup_done) return config_error(ERR_SETUP_KO, "railconfig_setup_default not called");
 8015fbc:	4b0e      	ldr	r3, [pc, #56]	; (8015ff8 <get_canton_cnf+0x44>)
 8015fbe:	681b      	ldr	r3, [r3, #0]
 8015fc0:	2b00      	cmp	r3, #0
 8015fc2:	d106      	bne.n	8015fd2 <get_canton_cnf+0x1e>
 8015fc4:	490d      	ldr	r1, [pc, #52]	; (8015ffc <get_canton_cnf+0x48>)
 8015fc6:	f06f 0009 	mvn.w	r0, #9
 8015fca:	f7ff ffdf 	bl	8015f8c <config_error>
 8015fce:	4603      	mov	r3, r0
 8015fd0:	e00e      	b.n	8015ff0 <get_canton_cnf+0x3c>
	if ((idx<0) || (idx>= NUM_CANTONS)) return NULL;
 8015fd2:	687b      	ldr	r3, [r7, #4]
 8015fd4:	2b00      	cmp	r3, #0
 8015fd6:	db02      	blt.n	8015fde <get_canton_cnf+0x2a>
 8015fd8:	687b      	ldr	r3, [r7, #4]
 8015fda:	2b07      	cmp	r3, #7
 8015fdc:	dd01      	ble.n	8015fe2 <get_canton_cnf+0x2e>
 8015fde:	2300      	movs	r3, #0
 8015fe0:	e006      	b.n	8015ff0 <get_canton_cnf+0x3c>
	return &Cantons[idx];
 8015fe2:	687a      	ldr	r2, [r7, #4]
 8015fe4:	4613      	mov	r3, r2
 8015fe6:	005b      	lsls	r3, r3, #1
 8015fe8:	4413      	add	r3, r2
 8015fea:	011b      	lsls	r3, r3, #4
 8015fec:	4a04      	ldr	r2, [pc, #16]	; (8016000 <get_canton_cnf+0x4c>)
 8015fee:	4413      	add	r3, r2
}
 8015ff0:	4618      	mov	r0, r3
 8015ff2:	3708      	adds	r7, #8
 8015ff4:	46bd      	mov	sp, r7
 8015ff6:	bd80      	pop	{r7, pc}
 8015ff8:	200004c8 	.word	0x200004c8
 8015ffc:	080199c4 	.word	0x080199c4
 8016000:	20000248 	.word	0x20000248

08016004 <get_train_cnf>:
	if ((idx<0) || (idx>= NUM_CANTONS)) return NULL;
	return &BlockCantonsVars[idx];
}
*/
const train_config_t *get_train_cnf(int idx)
{
 8016004:	b580      	push	{r7, lr}
 8016006:	b082      	sub	sp, #8
 8016008:	af00      	add	r7, sp, #0
 801600a:	6078      	str	r0, [r7, #4]
	if (!setup_done) return config_error(ERR_SETUP_KO, "railconfig_setup_default not called");
 801600c:	4b0d      	ldr	r3, [pc, #52]	; (8016044 <get_train_cnf+0x40>)
 801600e:	681b      	ldr	r3, [r3, #0]
 8016010:	2b00      	cmp	r3, #0
 8016012:	d106      	bne.n	8016022 <get_train_cnf+0x1e>
 8016014:	490c      	ldr	r1, [pc, #48]	; (8016048 <get_train_cnf+0x44>)
 8016016:	f06f 0009 	mvn.w	r0, #9
 801601a:	f7ff ffb7 	bl	8015f8c <config_error>
 801601e:	4603      	mov	r3, r0
 8016020:	e00b      	b.n	801603a <get_train_cnf+0x36>
	if ((idx<0) || (idx>= NUM_TRAINS)) return NULL;
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	2b00      	cmp	r3, #0
 8016026:	db02      	blt.n	801602e <get_train_cnf+0x2a>
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	2b07      	cmp	r3, #7
 801602c:	dd01      	ble.n	8016032 <get_train_cnf+0x2e>
 801602e:	2300      	movs	r3, #0
 8016030:	e003      	b.n	801603a <get_train_cnf+0x36>
	return &Trains[idx];
 8016032:	687b      	ldr	r3, [r7, #4]
 8016034:	015b      	lsls	r3, r3, #5
 8016036:	4a05      	ldr	r2, [pc, #20]	; (801604c <get_train_cnf+0x48>)
 8016038:	4413      	add	r3, r2
}
 801603a:	4618      	mov	r0, r3
 801603c:	3708      	adds	r7, #8
 801603e:	46bd      	mov	sp, r7
 8016040:	bd80      	pop	{r7, pc}
 8016042:	bf00      	nop
 8016044:	200004c8 	.word	0x200004c8
 8016048:	080199c4 	.word	0x080199c4
 801604c:	200003c8 	.word	0x200003c8

08016050 <get_turnout_cnf>:
	return &TrainsVars[idx];
}

*/
const turnout_config_t  *get_turnout_cnf(int idx)
{
 8016050:	b580      	push	{r7, lr}
 8016052:	b082      	sub	sp, #8
 8016054:	af00      	add	r7, sp, #0
 8016056:	6078      	str	r0, [r7, #4]
	if (!setup_done) return config_error(ERR_SETUP_KO, "railconfig_setup_default not called");
 8016058:	4b0d      	ldr	r3, [pc, #52]	; (8016090 <get_turnout_cnf+0x40>)
 801605a:	681b      	ldr	r3, [r3, #0]
 801605c:	2b00      	cmp	r3, #0
 801605e:	d106      	bne.n	801606e <get_turnout_cnf+0x1e>
 8016060:	490c      	ldr	r1, [pc, #48]	; (8016094 <get_turnout_cnf+0x44>)
 8016062:	f06f 0009 	mvn.w	r0, #9
 8016066:	f7ff ff91 	bl	8015f8c <config_error>
 801606a:	4603      	mov	r3, r0
 801606c:	e00b      	b.n	8016086 <get_turnout_cnf+0x36>
	if ((idx<0) || (idx>= NUM_TURNOUTS)) return NULL;
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	2b00      	cmp	r3, #0
 8016072:	db02      	blt.n	801607a <get_turnout_cnf+0x2a>
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	2b07      	cmp	r3, #7
 8016078:	dd01      	ble.n	801607e <get_turnout_cnf+0x2e>
 801607a:	2300      	movs	r3, #0
 801607c:	e003      	b.n	8016086 <get_turnout_cnf+0x36>
	return &Turnouts[idx];
 801607e:	687b      	ldr	r3, [r7, #4]
 8016080:	00db      	lsls	r3, r3, #3
 8016082:	4a05      	ldr	r2, [pc, #20]	; (8016098 <get_turnout_cnf+0x48>)
 8016084:	4413      	add	r3, r2
}
 8016086:	4618      	mov	r0, r3
 8016088:	3708      	adds	r7, #8
 801608a:	46bd      	mov	sp, r7
 801608c:	bd80      	pop	{r7, pc}
 801608e:	bf00      	nop
 8016090:	200004c8 	.word	0x200004c8
 8016094:	080199c4 	.word	0x080199c4
 8016098:	0801b86c 	.word	0x0801b86c

0801609c <stat_val_get>:
static const int numvalcanton = sizeof(statvalcanton)/sizeof(statvalcanton[0]);



int32_t stat_val_get(int step, int *pdone)
{
 801609c:	b480      	push	{r7}
 801609e:	b083      	sub	sp, #12
 80160a0:	af00      	add	r7, sp, #0
 80160a2:	6078      	str	r0, [r7, #4]
 80160a4:	6039      	str	r1, [r7, #0]
	*pdone = 1;
 80160a6:	683b      	ldr	r3, [r7, #0]
 80160a8:	2201      	movs	r2, #1
 80160aa:	601a      	str	r2, [r3, #0]
	return 0;
 80160ac:	2300      	movs	r3, #0
		train_vars_t *vars = get_train_vars(nt);
		const stat_val_t *sv = &statvaltrain[idx];
		return _getval(vars, sv->off, sv->l);
	}
#endif
}
 80160ae:	4618      	mov	r0, r3
 80160b0:	370c      	adds	r7, #12
 80160b2:	46bd      	mov	sp, r7
 80160b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160b8:	4770      	bx	lr

080160ba <txframe_send_notif>:
	txframe_send(m, 0);
}


static inline void txframe_send_notif(frame_msg_t *m, int len)
{
 80160ba:	b580      	push	{r7, lr}
 80160bc:	b082      	sub	sp, #8
 80160be:	af00      	add	r7, sp, #0
 80160c0:	6078      	str	r0, [r7, #4]
 80160c2:	6039      	str	r1, [r7, #0]
	m->t = TXFRAME_TYPE_NOTIF;
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	2202      	movs	r2, #2
 80160c8:	701a      	strb	r2, [r3, #0]
	if (len) m->len = len;
 80160ca:	683b      	ldr	r3, [r7, #0]
 80160cc:	2b00      	cmp	r3, #0
 80160ce:	d003      	beq.n	80160d8 <txframe_send_notif+0x1e>
 80160d0:	683b      	ldr	r3, [r7, #0]
 80160d2:	b2da      	uxtb	r2, r3
 80160d4:	687b      	ldr	r3, [r7, #4]
 80160d6:	705a      	strb	r2, [r3, #1]
	txframe_send(m, 1);
 80160d8:	2101      	movs	r1, #1
 80160da:	6878      	ldr	r0, [r7, #4]
 80160dc:	f002 fbae 	bl	801883c <txframe_send>
}
 80160e0:	bf00      	nop
 80160e2:	3708      	adds	r7, #8
 80160e4:	46bd      	mov	sp, r7
 80160e6:	bd80      	pop	{r7, pc}

080160e8 <mqf_read_to_forward_usb>:
#define CMD_POSE_TRIGGERED			0x51

LFMQUEUE_DEF_H(to_forward, msg_64_t)
LFMQUEUE_DEF_H(from_forward, msg_64_t)

LFMQUEUE_DEF_H(to_forward_usb, msg_64_t)
 80160e8:	b580      	push	{r7, lr}
 80160ea:	b082      	sub	sp, #8
 80160ec:	af00      	add	r7, sp, #0
 80160ee:	6078      	str	r0, [r7, #4]
 80160f0:	6879      	ldr	r1, [r7, #4]
 80160f2:	4804      	ldr	r0, [pc, #16]	; (8016104 <mqf_read_to_forward_usb+0x1c>)
 80160f4:	f002 ff4e 	bl	8018f94 <mqf_read>
 80160f8:	4603      	mov	r3, r0
 80160fa:	4618      	mov	r0, r3
 80160fc:	3708      	adds	r7, #8
 80160fe:	46bd      	mov	sp, r7
 8016100:	bd80      	pop	{r7, pc}
 8016102:	bf00      	nop
 8016104:	20000530 	.word	0x20000530

08016108 <mqf_write_from_forward_usb>:
LFMQUEUE_DEF_H(from_forward_usb, msg_64_t)
 8016108:	b580      	push	{r7, lr}
 801610a:	b082      	sub	sp, #8
 801610c:	af00      	add	r7, sp, #0
 801610e:	6078      	str	r0, [r7, #4]
 8016110:	6879      	ldr	r1, [r7, #4]
 8016112:	4804      	ldr	r0, [pc, #16]	; (8016124 <mqf_write_from_forward_usb+0x1c>)
 8016114:	f002 fec4 	bl	8018ea0 <mqf_write>
 8016118:	4603      	mov	r3, r0
 801611a:	4618      	mov	r0, r3
 801611c:	3708      	adds	r7, #8
 801611e:	46bd      	mov	sp, r7
 8016120:	bd80      	pop	{r7, pc}
 8016122:	bf00      	nop
 8016124:	2000053c 	.word	0x2000053c

08016128 <_frm_escape>:

#define FRAME_DELIM '|'
#define FRAME_ESC   '\\'

static int _frm_escape(uint8_t *buf, int len, int maxlen)
{
 8016128:	b480      	push	{r7}
 801612a:	b089      	sub	sp, #36	; 0x24
 801612c:	af00      	add	r7, sp, #0
 801612e:	60f8      	str	r0, [r7, #12]
 8016130:	60b9      	str	r1, [r7, #8]
 8016132:	607a      	str	r2, [r7, #4]
    int ne = 0;
 8016134:	2300      	movs	r3, #0
 8016136:	61fb      	str	r3, [r7, #28]
    for (int i=0; i<len; i++) {
 8016138:	2300      	movs	r3, #0
 801613a:	61bb      	str	r3, [r7, #24]
 801613c:	e011      	b.n	8016162 <_frm_escape+0x3a>
        if ((FRAME_ESC==buf[i]) || (FRAME_DELIM==buf[i])) {
 801613e:	69bb      	ldr	r3, [r7, #24]
 8016140:	68fa      	ldr	r2, [r7, #12]
 8016142:	4413      	add	r3, r2
 8016144:	781b      	ldrb	r3, [r3, #0]
 8016146:	2b5c      	cmp	r3, #92	; 0x5c
 8016148:	d005      	beq.n	8016156 <_frm_escape+0x2e>
 801614a:	69bb      	ldr	r3, [r7, #24]
 801614c:	68fa      	ldr	r2, [r7, #12]
 801614e:	4413      	add	r3, r2
 8016150:	781b      	ldrb	r3, [r3, #0]
 8016152:	2b7c      	cmp	r3, #124	; 0x7c
 8016154:	d102      	bne.n	801615c <_frm_escape+0x34>
            ne++;
 8016156:	69fb      	ldr	r3, [r7, #28]
 8016158:	3301      	adds	r3, #1
 801615a:	61fb      	str	r3, [r7, #28]
    for (int i=0; i<len; i++) {
 801615c:	69bb      	ldr	r3, [r7, #24]
 801615e:	3301      	adds	r3, #1
 8016160:	61bb      	str	r3, [r7, #24]
 8016162:	69ba      	ldr	r2, [r7, #24]
 8016164:	68bb      	ldr	r3, [r7, #8]
 8016166:	429a      	cmp	r2, r3
 8016168:	dbe9      	blt.n	801613e <_frm_escape+0x16>
        }
    }
    int nl = ne+len;
 801616a:	69fa      	ldr	r2, [r7, #28]
 801616c:	68bb      	ldr	r3, [r7, #8]
 801616e:	4413      	add	r3, r2
 8016170:	613b      	str	r3, [r7, #16]
    if (nl>maxlen) return -1;
 8016172:	693a      	ldr	r2, [r7, #16]
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	429a      	cmp	r2, r3
 8016178:	dd02      	ble.n	8016180 <_frm_escape+0x58>
 801617a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801617e:	e02f      	b.n	80161e0 <_frm_escape+0xb8>
    for (int i=len-1+ne; i>=0; i--) {
 8016180:	68bb      	ldr	r3, [r7, #8]
 8016182:	3b01      	subs	r3, #1
 8016184:	69fa      	ldr	r2, [r7, #28]
 8016186:	4413      	add	r3, r2
 8016188:	617b      	str	r3, [r7, #20]
 801618a:	e025      	b.n	80161d8 <_frm_escape+0xb0>
        buf[i] = buf[i-ne];
 801618c:	697a      	ldr	r2, [r7, #20]
 801618e:	69fb      	ldr	r3, [r7, #28]
 8016190:	1ad3      	subs	r3, r2, r3
 8016192:	461a      	mov	r2, r3
 8016194:	68fb      	ldr	r3, [r7, #12]
 8016196:	441a      	add	r2, r3
 8016198:	697b      	ldr	r3, [r7, #20]
 801619a:	68f9      	ldr	r1, [r7, #12]
 801619c:	440b      	add	r3, r1
 801619e:	7812      	ldrb	r2, [r2, #0]
 80161a0:	701a      	strb	r2, [r3, #0]
        if ((FRAME_ESC==buf[i]) || (FRAME_DELIM==buf[i])) {
 80161a2:	697b      	ldr	r3, [r7, #20]
 80161a4:	68fa      	ldr	r2, [r7, #12]
 80161a6:	4413      	add	r3, r2
 80161a8:	781b      	ldrb	r3, [r3, #0]
 80161aa:	2b5c      	cmp	r3, #92	; 0x5c
 80161ac:	d005      	beq.n	80161ba <_frm_escape+0x92>
 80161ae:	697b      	ldr	r3, [r7, #20]
 80161b0:	68fa      	ldr	r2, [r7, #12]
 80161b2:	4413      	add	r3, r2
 80161b4:	781b      	ldrb	r3, [r3, #0]
 80161b6:	2b7c      	cmp	r3, #124	; 0x7c
 80161b8:	d10b      	bne.n	80161d2 <_frm_escape+0xaa>
            buf[i-1]=FRAME_ESC;
 80161ba:	697b      	ldr	r3, [r7, #20]
 80161bc:	3b01      	subs	r3, #1
 80161be:	68fa      	ldr	r2, [r7, #12]
 80161c0:	4413      	add	r3, r2
 80161c2:	225c      	movs	r2, #92	; 0x5c
 80161c4:	701a      	strb	r2, [r3, #0]
            ne--;
 80161c6:	69fb      	ldr	r3, [r7, #28]
 80161c8:	3b01      	subs	r3, #1
 80161ca:	61fb      	str	r3, [r7, #28]
            i--;
 80161cc:	697b      	ldr	r3, [r7, #20]
 80161ce:	3b01      	subs	r3, #1
 80161d0:	617b      	str	r3, [r7, #20]
    for (int i=len-1+ne; i>=0; i--) {
 80161d2:	697b      	ldr	r3, [r7, #20]
 80161d4:	3b01      	subs	r3, #1
 80161d6:	617b      	str	r3, [r7, #20]
 80161d8:	697b      	ldr	r3, [r7, #20]
 80161da:	2b00      	cmp	r3, #0
 80161dc:	dad6      	bge.n	801618c <_frm_escape+0x64>
        }
    }
    return nl;
 80161de:	693b      	ldr	r3, [r7, #16]
}
 80161e0:	4618      	mov	r0, r3
 80161e2:	3724      	adds	r7, #36	; 0x24
 80161e4:	46bd      	mov	sp, r7
 80161e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161ea:	4770      	bx	lr

080161ec <_frm_escape2>:

static int _frm_escape2(uint8_t *buf,  uint8_t *org, int len, int maxlen)
{
 80161ec:	b480      	push	{r7}
 80161ee:	b087      	sub	sp, #28
 80161f0:	af00      	add	r7, sp, #0
 80161f2:	60f8      	str	r0, [r7, #12]
 80161f4:	60b9      	str	r1, [r7, #8]
 80161f6:	607a      	str	r2, [r7, #4]
 80161f8:	603b      	str	r3, [r7, #0]
    int ne = 0;
 80161fa:	2300      	movs	r3, #0
 80161fc:	617b      	str	r3, [r7, #20]
    for (int i=0; i<len; i++) {
 80161fe:	2300      	movs	r3, #0
 8016200:	613b      	str	r3, [r7, #16]
 8016202:	e02f      	b.n	8016264 <_frm_escape2+0x78>
    	if (ne>=maxlen) return -1;
 8016204:	697a      	ldr	r2, [r7, #20]
 8016206:	683b      	ldr	r3, [r7, #0]
 8016208:	429a      	cmp	r2, r3
 801620a:	db02      	blt.n	8016212 <_frm_escape2+0x26>
 801620c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016210:	e02d      	b.n	801626e <_frm_escape2+0x82>
        if ((FRAME_ESC==org[i]) || (FRAME_DELIM==org[i])) {
 8016212:	693b      	ldr	r3, [r7, #16]
 8016214:	68ba      	ldr	r2, [r7, #8]
 8016216:	4413      	add	r3, r2
 8016218:	781b      	ldrb	r3, [r3, #0]
 801621a:	2b5c      	cmp	r3, #92	; 0x5c
 801621c:	d005      	beq.n	801622a <_frm_escape2+0x3e>
 801621e:	693b      	ldr	r3, [r7, #16]
 8016220:	68ba      	ldr	r2, [r7, #8]
 8016222:	4413      	add	r3, r2
 8016224:	781b      	ldrb	r3, [r3, #0]
 8016226:	2b7c      	cmp	r3, #124	; 0x7c
 8016228:	d10e      	bne.n	8016248 <_frm_escape2+0x5c>
        	buf[ne++] = FRAME_ESC;
 801622a:	697b      	ldr	r3, [r7, #20]
 801622c:	1c5a      	adds	r2, r3, #1
 801622e:	617a      	str	r2, [r7, #20]
 8016230:	461a      	mov	r2, r3
 8016232:	68fb      	ldr	r3, [r7, #12]
 8016234:	4413      	add	r3, r2
 8016236:	225c      	movs	r2, #92	; 0x5c
 8016238:	701a      	strb	r2, [r3, #0]
        	if (ne>=maxlen) return -1;
 801623a:	697a      	ldr	r2, [r7, #20]
 801623c:	683b      	ldr	r3, [r7, #0]
 801623e:	429a      	cmp	r2, r3
 8016240:	db02      	blt.n	8016248 <_frm_escape2+0x5c>
 8016242:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016246:	e012      	b.n	801626e <_frm_escape2+0x82>
        }
        buf[ne++] = org[i];
 8016248:	693b      	ldr	r3, [r7, #16]
 801624a:	68ba      	ldr	r2, [r7, #8]
 801624c:	441a      	add	r2, r3
 801624e:	697b      	ldr	r3, [r7, #20]
 8016250:	1c59      	adds	r1, r3, #1
 8016252:	6179      	str	r1, [r7, #20]
 8016254:	4619      	mov	r1, r3
 8016256:	68fb      	ldr	r3, [r7, #12]
 8016258:	440b      	add	r3, r1
 801625a:	7812      	ldrb	r2, [r2, #0]
 801625c:	701a      	strb	r2, [r3, #0]
    for (int i=0; i<len; i++) {
 801625e:	693b      	ldr	r3, [r7, #16]
 8016260:	3301      	adds	r3, #1
 8016262:	613b      	str	r3, [r7, #16]
 8016264:	693a      	ldr	r2, [r7, #16]
 8016266:	687b      	ldr	r3, [r7, #4]
 8016268:	429a      	cmp	r2, r3
 801626a:	dbcb      	blt.n	8016204 <_frm_escape2+0x18>
    }
    return ne;
 801626c:	697b      	ldr	r3, [r7, #20]
}
 801626e:	4618      	mov	r0, r3
 8016270:	371c      	adds	r7, #28
 8016272:	46bd      	mov	sp, r7
 8016274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016278:	4770      	bx	lr

0801627a <frm_escape>:
static int frm_escape(uint8_t *buf, int len, int maxlen)
{
 801627a:	b580      	push	{r7, lr}
 801627c:	b086      	sub	sp, #24
 801627e:	af00      	add	r7, sp, #0
 8016280:	60f8      	str	r0, [r7, #12]
 8016282:	60b9      	str	r1, [r7, #8]
 8016284:	607a      	str	r2, [r7, #4]
	//configASSERT(buf[0]==FRAME_DELIM);
	//configASSERT(buf[len-1]==FRAME_DELIM);
    int l = _frm_escape(buf+1, len-2, maxlen-2);
 8016286:	68fb      	ldr	r3, [r7, #12]
 8016288:	1c58      	adds	r0, r3, #1
 801628a:	68bb      	ldr	r3, [r7, #8]
 801628c:	1e99      	subs	r1, r3, #2
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	3b02      	subs	r3, #2
 8016292:	461a      	mov	r2, r3
 8016294:	f7ff ff48 	bl	8016128 <_frm_escape>
 8016298:	6178      	str	r0, [r7, #20]
    if (l<0) return l;
 801629a:	697b      	ldr	r3, [r7, #20]
 801629c:	2b00      	cmp	r3, #0
 801629e:	da01      	bge.n	80162a4 <frm_escape+0x2a>
 80162a0:	697b      	ldr	r3, [r7, #20]
 80162a2:	e007      	b.n	80162b4 <frm_escape+0x3a>
    buf[l+1]=FRAME_DELIM;
 80162a4:	697b      	ldr	r3, [r7, #20]
 80162a6:	3301      	adds	r3, #1
 80162a8:	68fa      	ldr	r2, [r7, #12]
 80162aa:	4413      	add	r3, r2
 80162ac:	227c      	movs	r2, #124	; 0x7c
 80162ae:	701a      	strb	r2, [r3, #0]
    return l+2;
 80162b0:	697b      	ldr	r3, [r7, #20]
 80162b2:	3302      	adds	r3, #2
}
 80162b4:	4618      	mov	r0, r3
 80162b6:	3718      	adds	r7, #24
 80162b8:	46bd      	mov	sp, r7
 80162ba:	bd80      	pop	{r7, pc}

080162bc <usbPollQueues>:
		uint8_t *param, int plen, uint8_t *rbuf, int rbuflen, int *prlen);

static void txframe_send_msg64(msg_64_t *msg);

void usbPollQueues(void)
{
 80162bc:	b580      	push	{r7, lr}
 80162be:	b084      	sub	sp, #16
 80162c0:	af00      	add	r7, sp, #0
    for (;;) {
        msg_64_t m;
        int rc = mqf_read_to_forward_usb(&m);
 80162c2:	463b      	mov	r3, r7
 80162c4:	4618      	mov	r0, r3
 80162c6:	f7ff ff0f 	bl	80160e8 <mqf_read_to_forward_usb>
 80162ca:	60f8      	str	r0, [r7, #12]
        if (rc) break;
 80162cc:	68fb      	ldr	r3, [r7, #12]
 80162ce:	2b00      	cmp	r3, #0
 80162d0:	d104      	bne.n	80162dc <usbPollQueues+0x20>
        txframe_send_msg64(&m);
 80162d2:	463b      	mov	r3, r7
 80162d4:	4618      	mov	r0, r3
 80162d6:	f000 fc8d 	bl	8016bf4 <txframe_send_msg64>
    for (;;) {
 80162da:	e7f2      	b.n	80162c2 <usbPollQueues+0x6>
    }
}
 80162dc:	bf00      	nop
 80162de:	3710      	adds	r7, #16
 80162e0:	46bd      	mov	sp, r7
 80162e2:	bd80      	pop	{r7, pc}

080162e4 <txrx_process_char>:

void txrx_process_char(uint8_t c, uint8_t *respbuf, int *replen)
{
 80162e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80162e6:	b08f      	sub	sp, #60	; 0x3c
 80162e8:	af04      	add	r7, sp, #16
 80162ea:	4603      	mov	r3, r0
 80162ec:	60b9      	str	r1, [r7, #8]
 80162ee:	607a      	str	r2, [r7, #4]
 80162f0:	73fb      	strb	r3, [r7, #15]
	int buflen = *replen;
 80162f2:	687b      	ldr	r3, [r7, #4]
 80162f4:	681b      	ldr	r3, [r3, #0]
 80162f6:	623b      	str	r3, [r7, #32]
	*replen = 0;
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	2200      	movs	r2, #0
 80162fc:	601a      	str	r2, [r3, #0]
	if ((c == FRAME_DELIM) && !frm.escape) {
 80162fe:	7bfb      	ldrb	r3, [r7, #15]
 8016300:	2b7c      	cmp	r3, #124	; 0x7c
 8016302:	f040 8097 	bne.w	8016434 <txrx_process_char+0x150>
 8016306:	4b88      	ldr	r3, [pc, #544]	; (8016528 <txrx_process_char+0x244>)
 8016308:	781b      	ldrb	r3, [r3, #0]
 801630a:	f003 0301 	and.w	r3, r3, #1
 801630e:	b2db      	uxtb	r3, r3
 8016310:	2b00      	cmp	r3, #0
 8016312:	f040 808f 	bne.w	8016434 <txrx_process_char+0x150>
		if (0 == frm.state) {
 8016316:	4b84      	ldr	r3, [pc, #528]	; (8016528 <txrx_process_char+0x244>)
 8016318:	781b      	ldrb	r3, [r3, #0]
 801631a:	f023 0301 	bic.w	r3, r3, #1
 801631e:	b2db      	uxtb	r3, r3
 8016320:	2b00      	cmp	r3, #0
 8016322:	d10b      	bne.n	801633c <txrx_process_char+0x58>
			memset(&frm, 0, sizeof(frm));
 8016324:	2226      	movs	r2, #38	; 0x26
 8016326:	2100      	movs	r1, #0
 8016328:	487f      	ldr	r0, [pc, #508]	; (8016528 <txrx_process_char+0x244>)
 801632a:	f002 fed4 	bl	80190d6 <memset>
			frm.state = 1;
 801632e:	4a7e      	ldr	r2, [pc, #504]	; (8016528 <txrx_process_char+0x244>)
 8016330:	7813      	ldrb	r3, [r2, #0]
 8016332:	2101      	movs	r1, #1
 8016334:	f361 0347 	bfi	r3, r1, #1, #7
 8016338:	7013      	strb	r3, [r2, #0]
			return;
 801633a:	e0f1      	b.n	8016520 <txrx_process_char+0x23c>
		} else if (5 == frm.state) {
 801633c:	4b7a      	ldr	r3, [pc, #488]	; (8016528 <txrx_process_char+0x244>)
 801633e:	781b      	ldrb	r3, [r3, #0]
 8016340:	f023 0301 	bic.w	r3, r3, #1
 8016344:	b2db      	uxtb	r3, r3
 8016346:	2b0a      	cmp	r3, #10
 8016348:	d168      	bne.n	801641c <txrx_process_char+0x138>
			frm.state = 0;
 801634a:	4a77      	ldr	r2, [pc, #476]	; (8016528 <txrx_process_char+0x244>)
 801634c:	7813      	ldrb	r3, [r2, #0]
 801634e:	f36f 0347 	bfc	r3, #1, #7
 8016352:	7013      	strb	r3, [r2, #0]
			frm.escape = 0;
 8016354:	4a74      	ldr	r2, [pc, #464]	; (8016528 <txrx_process_char+0x244>)
 8016356:	7813      	ldrb	r3, [r2, #0]
 8016358:	f36f 0300 	bfc	r3, #0, #1
 801635c:	7013      	strb	r3, [r2, #0]
			// process frame
			int i = 0;
 801635e:	2300      	movs	r3, #0
 8016360:	61fb      	str	r3, [r7, #28]
			respbuf[i++] = FRAME_DELIM;
 8016362:	69fb      	ldr	r3, [r7, #28]
 8016364:	1c5a      	adds	r2, r3, #1
 8016366:	61fa      	str	r2, [r7, #28]
 8016368:	461a      	mov	r2, r3
 801636a:	68bb      	ldr	r3, [r7, #8]
 801636c:	4413      	add	r3, r2
 801636e:	227c      	movs	r2, #124	; 0x7c
 8016370:	701a      	strb	r2, [r3, #0]
			respbuf[i++] = frm.seqnum;
 8016372:	69fb      	ldr	r3, [r7, #28]
 8016374:	1c5a      	adds	r2, r3, #1
 8016376:	61fa      	str	r2, [r7, #28]
 8016378:	461a      	mov	r2, r3
 801637a:	68bb      	ldr	r3, [r7, #8]
 801637c:	4413      	add	r3, r2
 801637e:	4a6a      	ldr	r2, [pc, #424]	; (8016528 <txrx_process_char+0x244>)
 8016380:	7852      	ldrb	r2, [r2, #1]
 8016382:	701a      	strb	r2, [r3, #0]
			respbuf[i++] = 'R';
 8016384:	69fb      	ldr	r3, [r7, #28]
 8016386:	1c5a      	adds	r2, r3, #1
 8016388:	61fa      	str	r2, [r7, #28]
 801638a:	461a      	mov	r2, r3
 801638c:	68bb      	ldr	r3, [r7, #8]
 801638e:	4413      	add	r3, r2
 8016390:	2252      	movs	r2, #82	; 0x52
 8016392:	701a      	strb	r2, [r3, #0]
			int plen = 0;
 8016394:	2300      	movs	r3, #0
 8016396:	617b      	str	r3, [r7, #20]
			uint8_t rc = process_frame_cmd(frm.sel, frm.num, frm.cmd, frm.param, frm.pidx, respbuf+i+1, buflen-i-1, &plen);
 8016398:	4b63      	ldr	r3, [pc, #396]	; (8016528 <txrx_process_char+0x244>)
 801639a:	7898      	ldrb	r0, [r3, #2]
 801639c:	4b62      	ldr	r3, [pc, #392]	; (8016528 <txrx_process_char+0x244>)
 801639e:	78dc      	ldrb	r4, [r3, #3]
 80163a0:	4b61      	ldr	r3, [pc, #388]	; (8016528 <txrx_process_char+0x244>)
 80163a2:	791d      	ldrb	r5, [r3, #4]
 80163a4:	4b60      	ldr	r3, [pc, #384]	; (8016528 <txrx_process_char+0x244>)
 80163a6:	795b      	ldrb	r3, [r3, #5]
 80163a8:	461e      	mov	r6, r3
 80163aa:	69fb      	ldr	r3, [r7, #28]
 80163ac:	3301      	adds	r3, #1
 80163ae:	68ba      	ldr	r2, [r7, #8]
 80163b0:	4413      	add	r3, r2
 80163b2:	6a39      	ldr	r1, [r7, #32]
 80163b4:	69fa      	ldr	r2, [r7, #28]
 80163b6:	1a8a      	subs	r2, r1, r2
 80163b8:	3a01      	subs	r2, #1
 80163ba:	f107 0114 	add.w	r1, r7, #20
 80163be:	9103      	str	r1, [sp, #12]
 80163c0:	9202      	str	r2, [sp, #8]
 80163c2:	9301      	str	r3, [sp, #4]
 80163c4:	9600      	str	r6, [sp, #0]
 80163c6:	4b59      	ldr	r3, [pc, #356]	; (801652c <txrx_process_char+0x248>)
 80163c8:	462a      	mov	r2, r5
 80163ca:	4621      	mov	r1, r4
 80163cc:	f000 f8d2 	bl	8016574 <process_frame_cmd>
 80163d0:	4603      	mov	r3, r0
 80163d2:	76fb      	strb	r3, [r7, #27]
			respbuf[i++] = rc;
 80163d4:	69fb      	ldr	r3, [r7, #28]
 80163d6:	1c5a      	adds	r2, r3, #1
 80163d8:	61fa      	str	r2, [r7, #28]
 80163da:	461a      	mov	r2, r3
 80163dc:	68bb      	ldr	r3, [r7, #8]
 80163de:	4413      	add	r3, r2
 80163e0:	7efa      	ldrb	r2, [r7, #27]
 80163e2:	701a      	strb	r2, [r3, #0]
			respbuf[i+plen] = FRAME_DELIM;
 80163e4:	697a      	ldr	r2, [r7, #20]
 80163e6:	69fb      	ldr	r3, [r7, #28]
 80163e8:	4413      	add	r3, r2
 80163ea:	461a      	mov	r2, r3
 80163ec:	68bb      	ldr	r3, [r7, #8]
 80163ee:	4413      	add	r3, r2
 80163f0:	227c      	movs	r2, #124	; 0x7c
 80163f2:	701a      	strb	r2, [r3, #0]
			int l = frm_escape(respbuf, i+plen+1, buflen);
 80163f4:	697a      	ldr	r2, [r7, #20]
 80163f6:	69fb      	ldr	r3, [r7, #28]
 80163f8:	4413      	add	r3, r2
 80163fa:	3301      	adds	r3, #1
 80163fc:	6a3a      	ldr	r2, [r7, #32]
 80163fe:	4619      	mov	r1, r3
 8016400:	68b8      	ldr	r0, [r7, #8]
 8016402:	f7ff ff3a 	bl	801627a <frm_escape>
 8016406:	6278      	str	r0, [r7, #36]	; 0x24
			if (l<0) {
 8016408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801640a:	2b00      	cmp	r3, #0
 801640c:	da01      	bge.n	8016412 <txrx_process_char+0x12e>
				l = 0;
 801640e:	2300      	movs	r3, #0
 8016410:	627b      	str	r3, [r7, #36]	; 0x24
			}
			*replen = l;
 8016412:	687b      	ldr	r3, [r7, #4]
 8016414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016416:	601a      	str	r2, [r3, #0]
			/*if ((0)) {
				static frame_msg_t m;
				m.len = 1+ sprintf(m.frm, "frm resp %d\r\n", *replen);
				txframe_send_debug(&m, 0);
			}*/
			return;
 8016418:	bf00      	nop
 801641a:	e081      	b.n	8016520 <txrx_process_char+0x23c>
		} else {
			// short frame, ignore
			frm.state = 1;
 801641c:	4a42      	ldr	r2, [pc, #264]	; (8016528 <txrx_process_char+0x244>)
 801641e:	7813      	ldrb	r3, [r2, #0]
 8016420:	2101      	movs	r1, #1
 8016422:	f361 0347 	bfi	r3, r1, #1, #7
 8016426:	7013      	strb	r3, [r2, #0]
			frm.escape = 0;
 8016428:	4a3f      	ldr	r2, [pc, #252]	; (8016528 <txrx_process_char+0x244>)
 801642a:	7813      	ldrb	r3, [r2, #0]
 801642c:	f36f 0300 	bfc	r3, #0, #1
 8016430:	7013      	strb	r3, [r2, #0]
			return;
 8016432:	e075      	b.n	8016520 <txrx_process_char+0x23c>
		}
	}
	if (c==FRAME_ESC && !frm.escape) {
 8016434:	7bfb      	ldrb	r3, [r7, #15]
 8016436:	2b5c      	cmp	r3, #92	; 0x5c
 8016438:	d10c      	bne.n	8016454 <txrx_process_char+0x170>
 801643a:	4b3b      	ldr	r3, [pc, #236]	; (8016528 <txrx_process_char+0x244>)
 801643c:	781b      	ldrb	r3, [r3, #0]
 801643e:	f003 0301 	and.w	r3, r3, #1
 8016442:	b2db      	uxtb	r3, r3
 8016444:	2b00      	cmp	r3, #0
 8016446:	d105      	bne.n	8016454 <txrx_process_char+0x170>
		// state is >0 here
		frm.escape = 1;
 8016448:	4a37      	ldr	r2, [pc, #220]	; (8016528 <txrx_process_char+0x244>)
 801644a:	7813      	ldrb	r3, [r2, #0]
 801644c:	f043 0301 	orr.w	r3, r3, #1
 8016450:	7013      	strb	r3, [r2, #0]
		return;
 8016452:	e065      	b.n	8016520 <txrx_process_char+0x23c>
	}

	//  |sSNCvv...|
	switch (frm.state) {
 8016454:	4b34      	ldr	r3, [pc, #208]	; (8016528 <txrx_process_char+0x244>)
 8016456:	781b      	ldrb	r3, [r3, #0]
 8016458:	f3c3 0346 	ubfx	r3, r3, #1, #7
 801645c:	b2db      	uxtb	r3, r3
 801645e:	3b01      	subs	r3, #1
 8016460:	2b04      	cmp	r3, #4
 8016462:	d80d      	bhi.n	8016480 <txrx_process_char+0x19c>
 8016464:	a201      	add	r2, pc, #4	; (adr r2, 801646c <txrx_process_char+0x188>)
 8016466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801646a:	bf00      	nop
 801646c:	0801648d 	.word	0x0801648d
 8016470:	080164a1 	.word	0x080164a1
 8016474:	080164b5 	.word	0x080164b5
 8016478:	080164c9 	.word	0x080164c9
 801647c:	080164dd 	.word	0x080164dd
	default:
		frm.escape = 0;
 8016480:	4a29      	ldr	r2, [pc, #164]	; (8016528 <txrx_process_char+0x244>)
 8016482:	7813      	ldrb	r3, [r2, #0]
 8016484:	f36f 0300 	bfc	r3, #0, #1
 8016488:	7013      	strb	r3, [r2, #0]
		//configAssert(0);
		break;
 801648a:	e044      	b.n	8016516 <txrx_process_char+0x232>
	case 1:
		frm.seqnum = c;
 801648c:	4a26      	ldr	r2, [pc, #152]	; (8016528 <txrx_process_char+0x244>)
 801648e:	7bfb      	ldrb	r3, [r7, #15]
 8016490:	7053      	strb	r3, [r2, #1]
		frm.state = 2;
 8016492:	4a25      	ldr	r2, [pc, #148]	; (8016528 <txrx_process_char+0x244>)
 8016494:	7813      	ldrb	r3, [r2, #0]
 8016496:	2102      	movs	r1, #2
 8016498:	f361 0347 	bfi	r3, r1, #1, #7
 801649c:	7013      	strb	r3, [r2, #0]
		break;
 801649e:	e03a      	b.n	8016516 <txrx_process_char+0x232>
	case 2:
		frm.sel = c;
 80164a0:	4a21      	ldr	r2, [pc, #132]	; (8016528 <txrx_process_char+0x244>)
 80164a2:	7bfb      	ldrb	r3, [r7, #15]
 80164a4:	7093      	strb	r3, [r2, #2]
		frm.state = 3;
 80164a6:	4a20      	ldr	r2, [pc, #128]	; (8016528 <txrx_process_char+0x244>)
 80164a8:	7813      	ldrb	r3, [r2, #0]
 80164aa:	2103      	movs	r1, #3
 80164ac:	f361 0347 	bfi	r3, r1, #1, #7
 80164b0:	7013      	strb	r3, [r2, #0]
		break;
 80164b2:	e030      	b.n	8016516 <txrx_process_char+0x232>
	case 3:
		frm.num = c;
 80164b4:	4a1c      	ldr	r2, [pc, #112]	; (8016528 <txrx_process_char+0x244>)
 80164b6:	7bfb      	ldrb	r3, [r7, #15]
 80164b8:	70d3      	strb	r3, [r2, #3]
		frm.state = 4;
 80164ba:	4a1b      	ldr	r2, [pc, #108]	; (8016528 <txrx_process_char+0x244>)
 80164bc:	7813      	ldrb	r3, [r2, #0]
 80164be:	2104      	movs	r1, #4
 80164c0:	f361 0347 	bfi	r3, r1, #1, #7
 80164c4:	7013      	strb	r3, [r2, #0]
		break;
 80164c6:	e026      	b.n	8016516 <txrx_process_char+0x232>
	case 4:
		frm.cmd = c;
 80164c8:	4a17      	ldr	r2, [pc, #92]	; (8016528 <txrx_process_char+0x244>)
 80164ca:	7bfb      	ldrb	r3, [r7, #15]
 80164cc:	7113      	strb	r3, [r2, #4]
		frm.state = 5;
 80164ce:	4a16      	ldr	r2, [pc, #88]	; (8016528 <txrx_process_char+0x244>)
 80164d0:	7813      	ldrb	r3, [r2, #0]
 80164d2:	2105      	movs	r1, #5
 80164d4:	f361 0347 	bfi	r3, r1, #1, #7
 80164d8:	7013      	strb	r3, [r2, #0]
		break;
 80164da:	e01c      	b.n	8016516 <txrx_process_char+0x232>
	case 5:
		if (frm.pidx >= MAX_DATA_LEN) {
 80164dc:	4b12      	ldr	r3, [pc, #72]	; (8016528 <txrx_process_char+0x244>)
 80164de:	795b      	ldrb	r3, [r3, #5]
 80164e0:	2b1f      	cmp	r3, #31
 80164e2:	d90a      	bls.n	80164fa <txrx_process_char+0x216>
			frm.state = 0;
 80164e4:	4a10      	ldr	r2, [pc, #64]	; (8016528 <txrx_process_char+0x244>)
 80164e6:	7813      	ldrb	r3, [r2, #0]
 80164e8:	f36f 0347 	bfc	r3, #1, #7
 80164ec:	7013      	strb	r3, [r2, #0]
			frm.escape = 0;
 80164ee:	4a0e      	ldr	r2, [pc, #56]	; (8016528 <txrx_process_char+0x244>)
 80164f0:	7813      	ldrb	r3, [r2, #0]
 80164f2:	f36f 0300 	bfc	r3, #0, #1
 80164f6:	7013      	strb	r3, [r2, #0]
			break;
 80164f8:	e00d      	b.n	8016516 <txrx_process_char+0x232>
		}
		frm.param[frm.pidx] = c;
 80164fa:	4b0b      	ldr	r3, [pc, #44]	; (8016528 <txrx_process_char+0x244>)
 80164fc:	795b      	ldrb	r3, [r3, #5]
 80164fe:	461a      	mov	r2, r3
 8016500:	4b09      	ldr	r3, [pc, #36]	; (8016528 <txrx_process_char+0x244>)
 8016502:	4413      	add	r3, r2
 8016504:	7bfa      	ldrb	r2, [r7, #15]
 8016506:	719a      	strb	r2, [r3, #6]
		frm.pidx ++;
 8016508:	4b07      	ldr	r3, [pc, #28]	; (8016528 <txrx_process_char+0x244>)
 801650a:	795b      	ldrb	r3, [r3, #5]
 801650c:	3301      	adds	r3, #1
 801650e:	b2da      	uxtb	r2, r3
 8016510:	4b05      	ldr	r3, [pc, #20]	; (8016528 <txrx_process_char+0x244>)
 8016512:	715a      	strb	r2, [r3, #5]
		break;
 8016514:	bf00      	nop
	}
        frm.escape = 0;
 8016516:	4a04      	ldr	r2, [pc, #16]	; (8016528 <txrx_process_char+0x244>)
 8016518:	7813      	ldrb	r3, [r2, #0]
 801651a:	f36f 0300 	bfc	r3, #0, #1
 801651e:	7013      	strb	r3, [r2, #0]
}
 8016520:	372c      	adds	r7, #44	; 0x2c
 8016522:	46bd      	mov	sp, r7
 8016524:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016526:	bf00      	nop
 8016528:	20005340 	.word	0x20005340
 801652c:	20005346 	.word	0x20005346

08016530 <param_set_pwm>:



// ---------------------------------------------------------------------------------
static void param_set_pwm(struct param *p, int32_t v) // XXX to be moved away
{
 8016530:	b580      	push	{r7, lr}
 8016532:	b082      	sub	sp, #8
 8016534:	af00      	add	r7, sp, #0
 8016536:	6078      	str	r0, [r7, #4]
 8016538:	6039      	str	r1, [r7, #0]
        set_pwm_freq(v);
 801653a:	6838      	ldr	r0, [r7, #0]
 801653c:	f001 ff2c 	bl	8018398 <set_pwm_freq>
}
 8016540:	bf00      	nop
 8016542:	3708      	adds	r7, #8
 8016544:	46bd      	mov	sp, r7
 8016546:	bd80      	pop	{r7, pc}

08016548 <param_get_numtrains>:
int32_t (*getter)(struct param *);
	void (*setter)(struct param *, int32_t);
*/

static int32_t param_get_numtrains(param_t *p)
{
 8016548:	b480      	push	{r7}
 801654a:	b083      	sub	sp, #12
 801654c:	af00      	add	r7, sp, #0
 801654e:	6078      	str	r0, [r7, #4]
	return NUM_TRAINS;
 8016550:	2308      	movs	r3, #8
}
 8016552:	4618      	mov	r0, r3
 8016554:	370c      	adds	r7, #12
 8016556:	46bd      	mov	sp, r7
 8016558:	f85d 7b04 	ldr.w	r7, [sp], #4
 801655c:	4770      	bx	lr

0801655e <param_get_numcantons>:

static int32_t param_get_numcantons(param_t *p)
{
 801655e:	b480      	push	{r7}
 8016560:	b083      	sub	sp, #12
 8016562:	af00      	add	r7, sp, #0
 8016564:	6078      	str	r0, [r7, #4]
	return NUM_CANTONS;
 8016566:	2308      	movs	r3, #8
}
 8016568:	4618      	mov	r0, r3
 801656a:	370c      	adds	r7, #12
 801656c:	46bd      	mov	sp, r7
 801656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016572:	4770      	bx	lr

08016574 <process_frame_cmd>:




static uint8_t process_frame_cmd(uint8_t sel, uint8_t num,  uint8_t cmd, uint8_t *param, int plen, uint8_t *rbuf, int rbuflen, int *prlen)
{
 8016574:	b580      	push	{r7, lr}
 8016576:	b094      	sub	sp, #80	; 0x50
 8016578:	af04      	add	r7, sp, #16
 801657a:	603b      	str	r3, [r7, #0]
 801657c:	4603      	mov	r3, r0
 801657e:	71fb      	strb	r3, [r7, #7]
 8016580:	460b      	mov	r3, r1
 8016582:	71bb      	strb	r3, [r7, #6]
 8016584:	4613      	mov	r3, r2
 8016586:	717b      	strb	r3, [r7, #5]
    //HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
	int16_t s;
	*prlen = 0;
 8016588:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801658a:	2200      	movs	r2, #0
 801658c:	601a      	str	r2, [r3, #0]
	int32_t v,d,min,max;
	int rc=-1;
 801658e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016592:	63fb      	str	r3, [r7, #60]	; 0x3c

	switch(sel) {
 8016594:	79fb      	ldrb	r3, [r7, #7]
 8016596:	3b36      	subs	r3, #54	; 0x36
 8016598:	2b1e      	cmp	r3, #30
 801659a:	f200 81ff 	bhi.w	801699c <process_frame_cmd+0x428>
 801659e:	a201      	add	r2, pc, #4	; (adr r2, 80165a4 <process_frame_cmd+0x30>)
 80165a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80165a4:	08016621 	.word	0x08016621
 80165a8:	0801699d 	.word	0x0801699d
 80165ac:	0801699d 	.word	0x0801699d
 80165b0:	0801699d 	.word	0x0801699d
 80165b4:	0801699d 	.word	0x0801699d
 80165b8:	0801699d 	.word	0x0801699d
 80165bc:	0801699d 	.word	0x0801699d
 80165c0:	0801699d 	.word	0x0801699d
 80165c4:	0801699d 	.word	0x0801699d
 80165c8:	0801699d 	.word	0x0801699d
 80165cc:	0801699d 	.word	0x0801699d
 80165d0:	08016643 	.word	0x08016643
 80165d4:	0801699d 	.word	0x0801699d
 80165d8:	0801699d 	.word	0x0801699d
 80165dc:	0801699d 	.word	0x0801699d
 80165e0:	0801699d 	.word	0x0801699d
 80165e4:	0801699d 	.word	0x0801699d
 80165e8:	08016659 	.word	0x08016659
 80165ec:	0801699d 	.word	0x0801699d
 80165f0:	0801699d 	.word	0x0801699d
 80165f4:	0801699d 	.word	0x0801699d
 80165f8:	0801699d 	.word	0x0801699d
 80165fc:	0801699d 	.word	0x0801699d
 8016600:	0801699d 	.word	0x0801699d
 8016604:	0801699d 	.word	0x0801699d
 8016608:	0801699d 	.word	0x0801699d
 801660c:	0801699d 	.word	0x0801699d
 8016610:	0801699d 	.word	0x0801699d
 8016614:	0801699d 	.word	0x0801699d
 8016618:	0801699d 	.word	0x0801699d
 801661c:	080167bd 	.word	0x080167bd
    case '6': {
        msg_64_t m;
        m.to = num;
 8016620:	79bb      	ldrb	r3, [r7, #6]
 8016622:	743b      	strb	r3, [r7, #16]
        m.from = cmd;
 8016624:	797b      	ldrb	r3, [r7, #5]
 8016626:	747b      	strb	r3, [r7, #17]
        memcpy(m.rbytes, param, 6);
 8016628:	683a      	ldr	r2, [r7, #0]
 801662a:	f107 0312 	add.w	r3, r7, #18
 801662e:	6811      	ldr	r1, [r2, #0]
 8016630:	6019      	str	r1, [r3, #0]
 8016632:	8892      	ldrh	r2, [r2, #4]
 8016634:	809a      	strh	r2, [r3, #4]
        mqf_write_from_forward_usb(&m);
 8016636:	f107 0310 	add.w	r3, r7, #16
 801663a:	4618      	mov	r0, r3
 801663c:	f7ff fd64 	bl	8016108 <mqf_write_from_forward_usb>
        }
        break;
 8016640:	e1bc      	b.n	80169bc <process_frame_cmd+0x448>
	case 'A':
		switch (cmd) {
 8016642:	797b      	ldrb	r3, [r7, #5]
 8016644:	2b57      	cmp	r3, #87	; 0x57
 8016646:	d003      	beq.n	8016650 <process_frame_cmd+0xdc>
 8016648:	2b73      	cmp	r3, #115	; 0x73
 801664a:	d003      	beq.n	8016654 <process_frame_cmd+0xe0>
 801664c:	2b53      	cmp	r3, #83	; 0x53
		case 'S':
			//rc = turnout_cmd(num, 1);
			break;
 801664e:	e002      	b.n	8016656 <process_frame_cmd+0xe2>
		case 's':
			//rc = turnout_cmd(num, -1);
			break;
		case 'W':
			//rc = turnout_test(num);
			break;
 8016650:	bf00      	nop
 8016652:	e1b3      	b.n	80169bc <process_frame_cmd+0x448>
			break;
 8016654:	bf00      	nop
		}
		break;
 8016656:	e1b1      	b.n	80169bc <process_frame_cmd+0x448>
	case 'G':
		switch (cmd) {
 8016658:	797b      	ldrb	r3, [r7, #5]
 801665a:	3b43      	subs	r3, #67	; 0x43
 801665c:	2b2d      	cmp	r3, #45	; 0x2d
 801665e:	f200 80ab 	bhi.w	80167b8 <process_frame_cmd+0x244>
 8016662:	a201      	add	r2, pc, #4	; (adr r2, 8016668 <process_frame_cmd+0xf4>)
 8016664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016668:	08016721 	.word	0x08016721
 801666c:	080167b9 	.word	0x080167b9
 8016670:	080167b9 	.word	0x080167b9
 8016674:	080167b9 	.word	0x080167b9
 8016678:	080167b9 	.word	0x080167b9
 801667c:	080167b9 	.word	0x080167b9
 8016680:	080167b9 	.word	0x080167b9
 8016684:	080167b9 	.word	0x080167b9
 8016688:	0801672f 	.word	0x0801672f
 801668c:	080167b9 	.word	0x080167b9
 8016690:	080167b9 	.word	0x080167b9
 8016694:	080167b9 	.word	0x080167b9
 8016698:	080167b9 	.word	0x080167b9
 801669c:	08016793 	.word	0x08016793
 80166a0:	080167b9 	.word	0x080167b9
 80166a4:	080167b9 	.word	0x080167b9
 80166a8:	0801672b 	.word	0x0801672b
 80166ac:	080167b9 	.word	0x080167b9
 80166b0:	080167b9 	.word	0x080167b9
 80166b4:	080167b9 	.word	0x080167b9
 80166b8:	080167b9 	.word	0x080167b9
 80166bc:	080167b9 	.word	0x080167b9
 80166c0:	080167b9 	.word	0x080167b9
 80166c4:	080167b9 	.word	0x080167b9
 80166c8:	080167b9 	.word	0x080167b9
 80166cc:	080167b9 	.word	0x080167b9
 80166d0:	080167b9 	.word	0x080167b9
 80166d4:	080167b9 	.word	0x080167b9
 80166d8:	080167b9 	.word	0x080167b9
 80166dc:	080167b9 	.word	0x080167b9
 80166e0:	080167b9 	.word	0x080167b9
 80166e4:	080167b9 	.word	0x080167b9
 80166e8:	080167b9 	.word	0x080167b9
 80166ec:	080167b9 	.word	0x080167b9
 80166f0:	080167b9 	.word	0x080167b9
 80166f4:	080167b9 	.word	0x080167b9
 80166f8:	080167b9 	.word	0x080167b9
 80166fc:	080167b9 	.word	0x080167b9
 8016700:	080167b9 	.word	0x080167b9
 8016704:	080167b9 	.word	0x080167b9
 8016708:	080167b9 	.word	0x080167b9
 801670c:	080167b9 	.word	0x080167b9
 8016710:	080167b9 	.word	0x080167b9
 8016714:	080167b9 	.word	0x080167b9
 8016718:	080167b9 	.word	0x080167b9
 801671c:	08016733 	.word	0x08016733
		case 'C':
			cli_frame_mode = 0;
 8016720:	4ba9      	ldr	r3, [pc, #676]	; (80169c8 <process_frame_cmd+0x454>)
 8016722:	2200      	movs	r2, #0
 8016724:	701a      	strb	r2, [r3, #0]
			return 0;
 8016726:	2300      	movs	r3, #0
 8016728:	e149      	b.n	80169be <process_frame_cmd+0x44a>
			break;
		case 'S':
			// TODO train_stop_all();
			return 0;
 801672a:	2300      	movs	r3, #0
 801672c:	e147      	b.n	80169be <process_frame_cmd+0x44a>
			break;
		case 'K':
			// TODO calibrate_bemf();
			return 0;
 801672e:	2300      	movs	r3, #0
 8016730:	e145      	b.n	80169be <process_frame_cmd+0x44a>
			break;
		case 'p':
			rc = param_get_value(glob_params, NULL, (char *)param, &v, &d, &min, &max);
 8016732:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8016736:	f107 031c 	add.w	r3, r7, #28
 801673a:	9302      	str	r3, [sp, #8]
 801673c:	f107 0320 	add.w	r3, r7, #32
 8016740:	9301      	str	r3, [sp, #4]
 8016742:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016746:	9300      	str	r3, [sp, #0]
 8016748:	4613      	mov	r3, r2
 801674a:	683a      	ldr	r2, [r7, #0]
 801674c:	2100      	movs	r1, #0
 801674e:	489f      	ldr	r0, [pc, #636]	; (80169cc <process_frame_cmd+0x458>)
 8016750:	f7ff fb3b 	bl	8015dca <param_get_value>
 8016754:	63f8      	str	r0, [r7, #60]	; 0x3c
			memcpy(rbuf, &v,   sizeof(int32_t)); rbuf += sizeof(int32_t);
 8016756:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801675a:	601a      	str	r2, [r3, #0]
 801675c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801675e:	3304      	adds	r3, #4
 8016760:	64fb      	str	r3, [r7, #76]	; 0x4c
			memcpy(rbuf, &d,   sizeof(int32_t)); rbuf += sizeof(int32_t);
 8016762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016764:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016766:	601a      	str	r2, [r3, #0]
 8016768:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801676a:	3304      	adds	r3, #4
 801676c:	64fb      	str	r3, [r7, #76]	; 0x4c
			memcpy(rbuf, &min, sizeof(int32_t)); rbuf += sizeof(int32_t);
 801676e:	6a3a      	ldr	r2, [r7, #32]
 8016770:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016772:	601a      	str	r2, [r3, #0]
 8016774:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016776:	3304      	adds	r3, #4
 8016778:	64fb      	str	r3, [r7, #76]	; 0x4c
			memcpy(rbuf, &max, sizeof(int32_t)); rbuf += sizeof(int32_t);
 801677a:	69fa      	ldr	r2, [r7, #28]
 801677c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801677e:	601a      	str	r2, [r3, #0]
 8016780:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016782:	3304      	adds	r3, #4
 8016784:	64fb      	str	r3, [r7, #76]	; 0x4c
			*prlen = 4*sizeof(int32_t);
 8016786:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016788:	2210      	movs	r2, #16
 801678a:	601a      	str	r2, [r3, #0]
			return rc;
 801678c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801678e:	b2db      	uxtb	r3, r3
 8016790:	e115      	b.n	80169be <process_frame_cmd+0x44a>
		case 'P': {
			if (plen < 4+1) return 1;
 8016792:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016794:	2b04      	cmp	r3, #4
 8016796:	dc01      	bgt.n	801679c <process_frame_cmd+0x228>
 8016798:	2301      	movs	r3, #1
 801679a:	e110      	b.n	80169be <process_frame_cmd+0x44a>
			int32_t v;
			memcpy(&v, param, sizeof(int32_t));
 801679c:	683b      	ldr	r3, [r7, #0]
 801679e:	681b      	ldr	r3, [r3, #0]
 80167a0:	60fb      	str	r3, [r7, #12]
			int rc = param_set_value(glob_params, NULL, (char *)(param+sizeof(int32_t)), v);
 80167a2:	683b      	ldr	r3, [r7, #0]
 80167a4:	1d1a      	adds	r2, r3, #4
 80167a6:	68fb      	ldr	r3, [r7, #12]
 80167a8:	2100      	movs	r1, #0
 80167aa:	4888      	ldr	r0, [pc, #544]	; (80169cc <process_frame_cmd+0x458>)
 80167ac:	f7ff fb7f 	bl	8015eae <param_set_value>
 80167b0:	6338      	str	r0, [r7, #48]	; 0x30
			return rc;
 80167b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167b4:	b2db      	uxtb	r3, r3
 80167b6:	e102      	b.n	80169be <process_frame_cmd+0x44a>
		}
		default:
			return 3;
 80167b8:	2303      	movs	r3, #3
 80167ba:	e100      	b.n	80169be <process_frame_cmd+0x44a>
		}
		break;
	case 'T':
		//if (num == '0') num=0; // XXX hook for test
		//if (num != 0) return 4; // for now
		switch (cmd) {
 80167bc:	797b      	ldrb	r3, [r7, #5]
 80167be:	3b41      	subs	r3, #65	; 0x41
 80167c0:	2b39      	cmp	r3, #57	; 0x39
 80167c2:	f200 80e7 	bhi.w	8016994 <process_frame_cmd+0x420>
 80167c6:	a201      	add	r2, pc, #4	; (adr r2, 80167cc <process_frame_cmd+0x258>)
 80167c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80167cc:	08016999 	.word	0x08016999
 80167d0:	08016995 	.word	0x08016995
 80167d4:	08016995 	.word	0x08016995
 80167d8:	08016995 	.word	0x08016995
 80167dc:	08016995 	.word	0x08016995
 80167e0:	08016995 	.word	0x08016995
 80167e4:	08016995 	.word	0x08016995
 80167e8:	08016995 	.word	0x08016995
 80167ec:	08016995 	.word	0x08016995
 80167f0:	08016995 	.word	0x08016995
 80167f4:	08016995 	.word	0x08016995
 80167f8:	08016995 	.word	0x08016995
 80167fc:	08016995 	.word	0x08016995
 8016800:	08016995 	.word	0x08016995
 8016804:	08016995 	.word	0x08016995
 8016808:	08016959 	.word	0x08016959
 801680c:	08016995 	.word	0x08016995
 8016810:	08016995 	.word	0x08016995
 8016814:	08016995 	.word	0x08016995
 8016818:	08016995 	.word	0x08016995
 801681c:	08016995 	.word	0x08016995
 8016820:	080168b5 	.word	0x080168b5
 8016824:	08016995 	.word	0x08016995
 8016828:	08016995 	.word	0x08016995
 801682c:	08016995 	.word	0x08016995
 8016830:	08016995 	.word	0x08016995
 8016834:	08016995 	.word	0x08016995
 8016838:	08016995 	.word	0x08016995
 801683c:	08016995 	.word	0x08016995
 8016840:	08016995 	.word	0x08016995
 8016844:	08016995 	.word	0x08016995
 8016848:	08016995 	.word	0x08016995
 801684c:	08016999 	.word	0x08016999
 8016850:	08016995 	.word	0x08016995
 8016854:	08016995 	.word	0x08016995
 8016858:	08016995 	.word	0x08016995
 801685c:	08016995 	.word	0x08016995
 8016860:	08016995 	.word	0x08016995
 8016864:	08016995 	.word	0x08016995
 8016868:	08016995 	.word	0x08016995
 801686c:	08016995 	.word	0x08016995
 8016870:	08016995 	.word	0x08016995
 8016874:	08016995 	.word	0x08016995
 8016878:	08016995 	.word	0x08016995
 801687c:	08016995 	.word	0x08016995
 8016880:	08016995 	.word	0x08016995
 8016884:	08016995 	.word	0x08016995
 8016888:	080168e3 	.word	0x080168e3
 801688c:	08016995 	.word	0x08016995
 8016890:	08016995 	.word	0x08016995
 8016894:	08016995 	.word	0x08016995
 8016898:	08016995 	.word	0x08016995
 801689c:	08016995 	.word	0x08016995
 80168a0:	08016995 	.word	0x08016995
 80168a4:	08016995 	.word	0x08016995
 80168a8:	08016995 	.word	0x08016995
 80168ac:	08016995 	.word	0x08016995
 80168b0:	080168d9 	.word	0x080168d9
		case 'V':
			if (plen !=2) return 1;
 80168b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80168b6:	2b02      	cmp	r3, #2
 80168b8:	d001      	beq.n	80168be <process_frame_cmd+0x34a>
 80168ba:	2301      	movs	r3, #1
 80168bc:	e07f      	b.n	80169be <process_frame_cmd+0x44a>
			memcpy(&s, param, sizeof(s));
 80168be:	683b      	ldr	r3, [r7, #0]
 80168c0:	881b      	ldrh	r3, [r3, #0]
 80168c2:	b29b      	uxth	r3, r3
 80168c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		    train_set_target_speed(num, s);
 80168c6:	79bb      	ldrb	r3, [r7, #6]
 80168c8:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 80168cc:	4611      	mov	r1, r2
 80168ce:	4618      	mov	r0, r3
 80168d0:	f001 fc04 	bl	80180dc <train_set_target_speed>
			return 0;
 80168d4:	2300      	movs	r3, #0
 80168d6:	e072      	b.n	80169be <process_frame_cmd+0x44a>
			break;
		case 'a':
			//task_auto_stop_auto();
			break;
		case 'z':
			rc = 0; // TODO train_reset_pos_estimate(num);
 80168d8:	2300      	movs	r3, #0
 80168da:	63fb      	str	r3, [r7, #60]	; 0x3c
			return rc;
 80168dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80168de:	b2db      	uxtb	r3, r3
 80168e0:	e06d      	b.n	80169be <process_frame_cmd+0x44a>
			break;
		case 'p': {
			const train_config_t *tcnf = get_train_cnf(num);
 80168e2:	79bb      	ldrb	r3, [r7, #6]
 80168e4:	4618      	mov	r0, r3
 80168e6:	f7ff fb8d 	bl	8016004 <get_train_cnf>
 80168ea:	63b8      	str	r0, [r7, #56]	; 0x38
			if (tcnf) {
 80168ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80168ee:	2b00      	cmp	r3, #0
 80168f0:	d02d      	beq.n	801694e <process_frame_cmd+0x3da>
				rc = param_get_value(train_params, (void *)tcnf, (char *)param, &v, &d, &min, &max);
 80168f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80168f6:	f107 031c 	add.w	r3, r7, #28
 80168fa:	9302      	str	r3, [sp, #8]
 80168fc:	f107 0320 	add.w	r3, r7, #32
 8016900:	9301      	str	r3, [sp, #4]
 8016902:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016906:	9300      	str	r3, [sp, #0]
 8016908:	4613      	mov	r3, r2
 801690a:	683a      	ldr	r2, [r7, #0]
 801690c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801690e:	4830      	ldr	r0, [pc, #192]	; (80169d0 <process_frame_cmd+0x45c>)
 8016910:	f7ff fa5b 	bl	8015dca <param_get_value>
 8016914:	63f8      	str	r0, [r7, #60]	; 0x3c
				memcpy(rbuf, &v,   sizeof(int32_t)); rbuf += sizeof(int32_t);
 8016916:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016918:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801691a:	601a      	str	r2, [r3, #0]
 801691c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801691e:	3304      	adds	r3, #4
 8016920:	64fb      	str	r3, [r7, #76]	; 0x4c
				memcpy(rbuf, &d,   sizeof(int32_t)); rbuf += sizeof(int32_t);
 8016922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016924:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016926:	601a      	str	r2, [r3, #0]
 8016928:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801692a:	3304      	adds	r3, #4
 801692c:	64fb      	str	r3, [r7, #76]	; 0x4c
				memcpy(rbuf, &min, sizeof(int32_t)); rbuf += sizeof(int32_t);
 801692e:	6a3a      	ldr	r2, [r7, #32]
 8016930:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016932:	601a      	str	r2, [r3, #0]
 8016934:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016936:	3304      	adds	r3, #4
 8016938:	64fb      	str	r3, [r7, #76]	; 0x4c
				memcpy(rbuf, &max, sizeof(int32_t)); rbuf += sizeof(int32_t);
 801693a:	69fa      	ldr	r2, [r7, #28]
 801693c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801693e:	601a      	str	r2, [r3, #0]
 8016940:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016942:	3304      	adds	r3, #4
 8016944:	64fb      	str	r3, [r7, #76]	; 0x4c
				*prlen = 4*sizeof(int32_t);
 8016946:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016948:	2210      	movs	r2, #16
 801694a:	601a      	str	r2, [r3, #0]
 801694c:	e001      	b.n	8016952 <process_frame_cmd+0x3de>
			} else {
				rc = 3;
 801694e:	2303      	movs	r3, #3
 8016950:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
			return rc;
 8016952:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016954:	b2db      	uxtb	r3, r3
 8016956:	e032      	b.n	80169be <process_frame_cmd+0x44a>
		}

		case 'P': {
			if (plen < 4+1) return 1;
 8016958:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801695a:	2b04      	cmp	r3, #4
 801695c:	dc01      	bgt.n	8016962 <process_frame_cmd+0x3ee>
 801695e:	2301      	movs	r3, #1
 8016960:	e02d      	b.n	80169be <process_frame_cmd+0x44a>
			const train_config_t *tcnf = get_train_cnf(num);
 8016962:	79bb      	ldrb	r3, [r7, #6]
 8016964:	4618      	mov	r0, r3
 8016966:	f7ff fb4d 	bl	8016004 <get_train_cnf>
 801696a:	6378      	str	r0, [r7, #52]	; 0x34
			if (tcnf) {
 801696c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801696e:	2b00      	cmp	r3, #0
 8016970:	d00b      	beq.n	801698a <process_frame_cmd+0x416>
				int32_t v;
				memcpy(&v, param, sizeof(int32_t));
 8016972:	683b      	ldr	r3, [r7, #0]
 8016974:	681b      	ldr	r3, [r3, #0]
 8016976:	60bb      	str	r3, [r7, #8]
			    rc = param_set_value(train_params, (void *)tcnf, (char *)(param+sizeof(int32_t)), v);
 8016978:	683b      	ldr	r3, [r7, #0]
 801697a:	1d1a      	adds	r2, r3, #4
 801697c:	68bb      	ldr	r3, [r7, #8]
 801697e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016980:	4813      	ldr	r0, [pc, #76]	; (80169d0 <process_frame_cmd+0x45c>)
 8016982:	f7ff fa94 	bl	8015eae <param_set_value>
 8016986:	63f8      	str	r0, [r7, #60]	; 0x3c
 8016988:	e001      	b.n	801698e <process_frame_cmd+0x41a>
			} else {
				rc = 33;
 801698a:	2321      	movs	r3, #33	; 0x21
 801698c:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
			return rc;
 801698e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016990:	b2db      	uxtb	r3, r3
 8016992:	e014      	b.n	80169be <process_frame_cmd+0x44a>
		}

		default:
			return 33;
 8016994:	2321      	movs	r3, #33	; 0x21
 8016996:	e012      	b.n	80169be <process_frame_cmd+0x44a>
			break;
 8016998:	bf00      	nop
		}
		break;
 801699a:	e00f      	b.n	80169bc <process_frame_cmd+0x448>
	default:
		rbuf[0]=sel;
 801699c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801699e:	79fa      	ldrb	r2, [r7, #7]
 80169a0:	701a      	strb	r2, [r3, #0]
		rbuf[1]=num;
 80169a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80169a4:	3301      	adds	r3, #1
 80169a6:	79ba      	ldrb	r2, [r7, #6]
 80169a8:	701a      	strb	r2, [r3, #0]
		rbuf[2]=cmd;
 80169aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80169ac:	3302      	adds	r3, #2
 80169ae:	797a      	ldrb	r2, [r7, #5]
 80169b0:	701a      	strb	r2, [r3, #0]
		*prlen = 3;
 80169b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80169b4:	2203      	movs	r2, #3
 80169b6:	601a      	str	r2, [r3, #0]
		return 5;
 80169b8:	2305      	movs	r3, #5
 80169ba:	e000      	b.n	80169be <process_frame_cmd+0x44a>
		break;
	}
	return 0;
 80169bc:	2300      	movs	r3, #0
}
 80169be:	4618      	mov	r0, r3
 80169c0:	3740      	adds	r7, #64	; 0x40
 80169c2:	46bd      	mov	sp, r7
 80169c4:	bd80      	pop	{r7, pc}
 80169c6:	bf00      	nop
 80169c8:	200004cc 	.word	0x200004cc
 80169cc:	0801baec 	.word	0x0801baec
 80169d0:	0801b8ac 	.word	0x0801b8ac

080169d4 <trainctl_notif>:

static int num_trainctl_notif = 0;

void trainctl_notif(uint8_t sel, uint8_t num, uint8_t cmd, uint8_t *dta, int dtalen)
{
 80169d4:	b580      	push	{r7, lr}
 80169d6:	b084      	sub	sp, #16
 80169d8:	af02      	add	r7, sp, #8
 80169da:	603b      	str	r3, [r7, #0]
 80169dc:	4603      	mov	r3, r0
 80169de:	71fb      	strb	r3, [r7, #7]
 80169e0:	460b      	mov	r3, r1
 80169e2:	71bb      	strb	r3, [r7, #6]
 80169e4:	4613      	mov	r3, r2
 80169e6:	717b      	strb	r3, [r7, #5]
	num_trainctl_notif++;
 80169e8:	4b0a      	ldr	r3, [pc, #40]	; (8016a14 <trainctl_notif+0x40>)
 80169ea:	681b      	ldr	r3, [r3, #0]
 80169ec:	3301      	adds	r3, #1
 80169ee:	4a09      	ldr	r2, [pc, #36]	; (8016a14 <trainctl_notif+0x40>)
 80169f0:	6013      	str	r3, [r2, #0]
	if (cli_frame_mode) {
 80169f2:	4b09      	ldr	r3, [pc, #36]	; (8016a18 <trainctl_notif+0x44>)
 80169f4:	781b      	ldrb	r3, [r3, #0]
 80169f6:	2b00      	cmp	r3, #0
 80169f8:	d007      	beq.n	8016a0a <trainctl_notif+0x36>
		frame_send_notif(sel, num, cmd, dta, dtalen);
 80169fa:	797a      	ldrb	r2, [r7, #5]
 80169fc:	79b9      	ldrb	r1, [r7, #6]
 80169fe:	79f8      	ldrb	r0, [r7, #7]
 8016a00:	693b      	ldr	r3, [r7, #16]
 8016a02:	9300      	str	r3, [sp, #0]
 8016a04:	683b      	ldr	r3, [r7, #0]
 8016a06:	f000 f891 	bl	8016b2c <frame_send_notif>
	}
}
 8016a0a:	bf00      	nop
 8016a0c:	3708      	adds	r7, #8
 8016a0e:	46bd      	mov	sp, r7
 8016a10:	bd80      	pop	{r7, pc}
 8016a12:	bf00      	nop
 8016a14:	20005368 	.word	0x20005368
 8016a18:	200004cc 	.word	0x200004cc

08016a1c <trainctl_notif2>:

void trainctl_notif2(uint8_t sel, uint8_t num, uint8_t cmd, char *msg, int32_t v1, int32_t v2, int32_t v3)
{
 8016a1c:	b580      	push	{r7, lr}
 8016a1e:	b086      	sub	sp, #24
 8016a20:	af00      	add	r7, sp, #0
 8016a22:	603b      	str	r3, [r7, #0]
 8016a24:	4603      	mov	r3, r0
 8016a26:	71fb      	strb	r3, [r7, #7]
 8016a28:	460b      	mov	r3, r1
 8016a2a:	71bb      	strb	r3, [r7, #6]
 8016a2c:	4613      	mov	r3, r2
 8016a2e:	717b      	strb	r3, [r7, #5]
	static frame_msg_t m;
	char *p;
	int i=0;
 8016a30:	2300      	movs	r3, #0
 8016a32:	617b      	str	r3, [r7, #20]
	m.frm[i++] = '|';
 8016a34:	697b      	ldr	r3, [r7, #20]
 8016a36:	1c5a      	adds	r2, r3, #1
 8016a38:	617a      	str	r2, [r7, #20]
 8016a3a:	4a3a      	ldr	r2, [pc, #232]	; (8016b24 <trainctl_notif2+0x108>)
 8016a3c:	4413      	add	r3, r2
 8016a3e:	227c      	movs	r2, #124	; 0x7c
 8016a40:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = '_';
 8016a42:	697b      	ldr	r3, [r7, #20]
 8016a44:	1c5a      	adds	r2, r3, #1
 8016a46:	617a      	str	r2, [r7, #20]
 8016a48:	4a36      	ldr	r2, [pc, #216]	; (8016b24 <trainctl_notif2+0x108>)
 8016a4a:	4413      	add	r3, r2
 8016a4c:	225f      	movs	r2, #95	; 0x5f
 8016a4e:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = 'N';
 8016a50:	697b      	ldr	r3, [r7, #20]
 8016a52:	1c5a      	adds	r2, r3, #1
 8016a54:	617a      	str	r2, [r7, #20]
 8016a56:	4a33      	ldr	r2, [pc, #204]	; (8016b24 <trainctl_notif2+0x108>)
 8016a58:	4413      	add	r3, r2
 8016a5a:	224e      	movs	r2, #78	; 0x4e
 8016a5c:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = sel;
 8016a5e:	697b      	ldr	r3, [r7, #20]
 8016a60:	1c5a      	adds	r2, r3, #1
 8016a62:	617a      	str	r2, [r7, #20]
 8016a64:	4a2f      	ldr	r2, [pc, #188]	; (8016b24 <trainctl_notif2+0x108>)
 8016a66:	4413      	add	r3, r2
 8016a68:	79fa      	ldrb	r2, [r7, #7]
 8016a6a:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = num;
 8016a6c:	697b      	ldr	r3, [r7, #20]
 8016a6e:	1c5a      	adds	r2, r3, #1
 8016a70:	617a      	str	r2, [r7, #20]
 8016a72:	4a2c      	ldr	r2, [pc, #176]	; (8016b24 <trainctl_notif2+0x108>)
 8016a74:	4413      	add	r3, r2
 8016a76:	79ba      	ldrb	r2, [r7, #6]
 8016a78:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = cmd;
 8016a7a:	697b      	ldr	r3, [r7, #20]
 8016a7c:	1c5a      	adds	r2, r3, #1
 8016a7e:	617a      	str	r2, [r7, #20]
 8016a80:	4a28      	ldr	r2, [pc, #160]	; (8016b24 <trainctl_notif2+0x108>)
 8016a82:	4413      	add	r3, r2
 8016a84:	797a      	ldrb	r2, [r7, #5]
 8016a86:	709a      	strb	r2, [r3, #2]
	i += strlen(p);
	m.frm[i++]= '/';
	p = itoa(v2, (char *)m.frm+i, 10);
	i += strlen(p);
#else
	memcpy(m.frm+i, &v1, sizeof(int32_t));
 8016a88:	697b      	ldr	r3, [r7, #20]
 8016a8a:	4a27      	ldr	r2, [pc, #156]	; (8016b28 <trainctl_notif2+0x10c>)
 8016a8c:	4413      	add	r3, r2
 8016a8e:	6a3a      	ldr	r2, [r7, #32]
 8016a90:	601a      	str	r2, [r3, #0]
	i += sizeof(int32_t);
 8016a92:	697b      	ldr	r3, [r7, #20]
 8016a94:	3304      	adds	r3, #4
 8016a96:	617b      	str	r3, [r7, #20]
	memcpy(m.frm+i, &v2, sizeof(int32_t));
 8016a98:	697b      	ldr	r3, [r7, #20]
 8016a9a:	4a23      	ldr	r2, [pc, #140]	; (8016b28 <trainctl_notif2+0x10c>)
 8016a9c:	4413      	add	r3, r2
 8016a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016aa0:	601a      	str	r2, [r3, #0]
	i += sizeof(int32_t);
 8016aa2:	697b      	ldr	r3, [r7, #20]
 8016aa4:	3304      	adds	r3, #4
 8016aa6:	617b      	str	r3, [r7, #20]
	memcpy(m.frm+i, &v3, sizeof(int32_t));
 8016aa8:	697b      	ldr	r3, [r7, #20]
 8016aaa:	4a1f      	ldr	r2, [pc, #124]	; (8016b28 <trainctl_notif2+0x10c>)
 8016aac:	4413      	add	r3, r2
 8016aae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016ab0:	601a      	str	r2, [r3, #0]
	i += sizeof(int32_t);
 8016ab2:	697b      	ldr	r3, [r7, #20]
 8016ab4:	3304      	adds	r3, #4
 8016ab6:	617b      	str	r3, [r7, #20]
 	p = strncpy((char *)m.frm+i, msg, 10);
 8016ab8:	697b      	ldr	r3, [r7, #20]
 8016aba:	4a1b      	ldr	r2, [pc, #108]	; (8016b28 <trainctl_notif2+0x10c>)
 8016abc:	4413      	add	r3, r2
 8016abe:	220a      	movs	r2, #10
 8016ac0:	6839      	ldr	r1, [r7, #0]
 8016ac2:	4618      	mov	r0, r3
 8016ac4:	f002 fbc8 	bl	8019258 <strncpy>
 8016ac8:	6138      	str	r0, [r7, #16]
	m.frm[i+10]='\0';
 8016aca:	697b      	ldr	r3, [r7, #20]
 8016acc:	330a      	adds	r3, #10
 8016ace:	4a15      	ldr	r2, [pc, #84]	; (8016b24 <trainctl_notif2+0x108>)
 8016ad0:	4413      	add	r3, r2
 8016ad2:	2200      	movs	r2, #0
 8016ad4:	709a      	strb	r2, [r3, #2]
	i += strlen(p);
 8016ad6:	6938      	ldr	r0, [r7, #16]
 8016ad8:	f7e9 fb84 	bl	80001e4 <strlen>
 8016adc:	4602      	mov	r2, r0
 8016ade:	697b      	ldr	r3, [r7, #20]
 8016ae0:	4413      	add	r3, r2
 8016ae2:	617b      	str	r3, [r7, #20]
#endif
	m.frm[i++]= '\0';
 8016ae4:	697b      	ldr	r3, [r7, #20]
 8016ae6:	1c5a      	adds	r2, r3, #1
 8016ae8:	617a      	str	r2, [r7, #20]
 8016aea:	4a0e      	ldr	r2, [pc, #56]	; (8016b24 <trainctl_notif2+0x108>)
 8016aec:	4413      	add	r3, r2
 8016aee:	2200      	movs	r2, #0
 8016af0:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = '|';
 8016af2:	697b      	ldr	r3, [r7, #20]
 8016af4:	1c5a      	adds	r2, r3, #1
 8016af6:	617a      	str	r2, [r7, #20]
 8016af8:	4a0a      	ldr	r2, [pc, #40]	; (8016b24 <trainctl_notif2+0x108>)
 8016afa:	4413      	add	r3, r2
 8016afc:	227c      	movs	r2, #124	; 0x7c
 8016afe:	709a      	strb	r2, [r3, #2]
	int l = frm_escape(m.frm, i, FRM_MAX_LEN);
 8016b00:	221f      	movs	r2, #31
 8016b02:	6979      	ldr	r1, [r7, #20]
 8016b04:	4808      	ldr	r0, [pc, #32]	; (8016b28 <trainctl_notif2+0x10c>)
 8016b06:	f7ff fbb8 	bl	801627a <frm_escape>
 8016b0a:	60f8      	str	r0, [r7, #12]
	if (l>0) txframe_send_notif(&m, l);
 8016b0c:	68fb      	ldr	r3, [r7, #12]
 8016b0e:	2b00      	cmp	r3, #0
 8016b10:	dd03      	ble.n	8016b1a <trainctl_notif2+0xfe>
 8016b12:	68f9      	ldr	r1, [r7, #12]
 8016b14:	4803      	ldr	r0, [pc, #12]	; (8016b24 <trainctl_notif2+0x108>)
 8016b16:	f7ff fad0 	bl	80160ba <txframe_send_notif>
}
 8016b1a:	bf00      	nop
 8016b1c:	3718      	adds	r7, #24
 8016b1e:	46bd      	mov	sp, r7
 8016b20:	bd80      	pop	{r7, pc}
 8016b22:	bf00      	nop
 8016b24:	2000536c 	.word	0x2000536c
 8016b28:	2000536e 	.word	0x2000536e

08016b2c <frame_send_notif>:


void frame_send_notif(uint8_t sel, uint8_t num, uint8_t cmd, uint8_t *dta, int dtalen)
{
 8016b2c:	b580      	push	{r7, lr}
 8016b2e:	b084      	sub	sp, #16
 8016b30:	af00      	add	r7, sp, #0
 8016b32:	603b      	str	r3, [r7, #0]
 8016b34:	4603      	mov	r3, r0
 8016b36:	71fb      	strb	r3, [r7, #7]
 8016b38:	460b      	mov	r3, r1
 8016b3a:	71bb      	strb	r3, [r7, #6]
 8016b3c:	4613      	mov	r3, r2
 8016b3e:	717b      	strb	r3, [r7, #5]
	static frame_msg_t m;
	if (dtalen>FRM_MAX_LEN-8) dtalen=FRM_MAX_LEN-8;
 8016b40:	69bb      	ldr	r3, [r7, #24]
 8016b42:	2b17      	cmp	r3, #23
 8016b44:	dd01      	ble.n	8016b4a <frame_send_notif+0x1e>
 8016b46:	2317      	movs	r3, #23
 8016b48:	61bb      	str	r3, [r7, #24]
	int i=0;
 8016b4a:	2300      	movs	r3, #0
 8016b4c:	60fb      	str	r3, [r7, #12]
	m.frm[i++] = '|';
 8016b4e:	68fb      	ldr	r3, [r7, #12]
 8016b50:	1c5a      	adds	r2, r3, #1
 8016b52:	60fa      	str	r2, [r7, #12]
 8016b54:	4a25      	ldr	r2, [pc, #148]	; (8016bec <frame_send_notif+0xc0>)
 8016b56:	4413      	add	r3, r2
 8016b58:	227c      	movs	r2, #124	; 0x7c
 8016b5a:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = '_';
 8016b5c:	68fb      	ldr	r3, [r7, #12]
 8016b5e:	1c5a      	adds	r2, r3, #1
 8016b60:	60fa      	str	r2, [r7, #12]
 8016b62:	4a22      	ldr	r2, [pc, #136]	; (8016bec <frame_send_notif+0xc0>)
 8016b64:	4413      	add	r3, r2
 8016b66:	225f      	movs	r2, #95	; 0x5f
 8016b68:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = 'N';
 8016b6a:	68fb      	ldr	r3, [r7, #12]
 8016b6c:	1c5a      	adds	r2, r3, #1
 8016b6e:	60fa      	str	r2, [r7, #12]
 8016b70:	4a1e      	ldr	r2, [pc, #120]	; (8016bec <frame_send_notif+0xc0>)
 8016b72:	4413      	add	r3, r2
 8016b74:	224e      	movs	r2, #78	; 0x4e
 8016b76:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = sel;
 8016b78:	68fb      	ldr	r3, [r7, #12]
 8016b7a:	1c5a      	adds	r2, r3, #1
 8016b7c:	60fa      	str	r2, [r7, #12]
 8016b7e:	4a1b      	ldr	r2, [pc, #108]	; (8016bec <frame_send_notif+0xc0>)
 8016b80:	4413      	add	r3, r2
 8016b82:	79fa      	ldrb	r2, [r7, #7]
 8016b84:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = num;
 8016b86:	68fb      	ldr	r3, [r7, #12]
 8016b88:	1c5a      	adds	r2, r3, #1
 8016b8a:	60fa      	str	r2, [r7, #12]
 8016b8c:	4a17      	ldr	r2, [pc, #92]	; (8016bec <frame_send_notif+0xc0>)
 8016b8e:	4413      	add	r3, r2
 8016b90:	79ba      	ldrb	r2, [r7, #6]
 8016b92:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = cmd;
 8016b94:	68fb      	ldr	r3, [r7, #12]
 8016b96:	1c5a      	adds	r2, r3, #1
 8016b98:	60fa      	str	r2, [r7, #12]
 8016b9a:	4a14      	ldr	r2, [pc, #80]	; (8016bec <frame_send_notif+0xc0>)
 8016b9c:	4413      	add	r3, r2
 8016b9e:	797a      	ldrb	r2, [r7, #5]
 8016ba0:	709a      	strb	r2, [r3, #2]
	memcpy(m.frm+i, dta, dtalen);
 8016ba2:	68fb      	ldr	r3, [r7, #12]
 8016ba4:	4a12      	ldr	r2, [pc, #72]	; (8016bf0 <frame_send_notif+0xc4>)
 8016ba6:	4413      	add	r3, r2
 8016ba8:	69ba      	ldr	r2, [r7, #24]
 8016baa:	6839      	ldr	r1, [r7, #0]
 8016bac:	4618      	mov	r0, r3
 8016bae:	f002 fa87 	bl	80190c0 <memcpy>
	i += dtalen;
 8016bb2:	68fa      	ldr	r2, [r7, #12]
 8016bb4:	69bb      	ldr	r3, [r7, #24]
 8016bb6:	4413      	add	r3, r2
 8016bb8:	60fb      	str	r3, [r7, #12]
	m.frm[i++] = '|';
 8016bba:	68fb      	ldr	r3, [r7, #12]
 8016bbc:	1c5a      	adds	r2, r3, #1
 8016bbe:	60fa      	str	r2, [r7, #12]
 8016bc0:	4a0a      	ldr	r2, [pc, #40]	; (8016bec <frame_send_notif+0xc0>)
 8016bc2:	4413      	add	r3, r2
 8016bc4:	227c      	movs	r2, #124	; 0x7c
 8016bc6:	709a      	strb	r2, [r3, #2]
	int l = frm_escape(m.frm, i, FRM_MAX_LEN);
 8016bc8:	221f      	movs	r2, #31
 8016bca:	68f9      	ldr	r1, [r7, #12]
 8016bcc:	4808      	ldr	r0, [pc, #32]	; (8016bf0 <frame_send_notif+0xc4>)
 8016bce:	f7ff fb54 	bl	801627a <frm_escape>
 8016bd2:	60b8      	str	r0, [r7, #8]
	if (l>0) txframe_send_notif(&m, l);
 8016bd4:	68bb      	ldr	r3, [r7, #8]
 8016bd6:	2b00      	cmp	r3, #0
 8016bd8:	dd03      	ble.n	8016be2 <frame_send_notif+0xb6>
 8016bda:	68b9      	ldr	r1, [r7, #8]
 8016bdc:	4803      	ldr	r0, [pc, #12]	; (8016bec <frame_send_notif+0xc0>)
 8016bde:	f7ff fa6c 	bl	80160ba <txframe_send_notif>
}
 8016be2:	bf00      	nop
 8016be4:	3710      	adds	r7, #16
 8016be6:	46bd      	mov	sp, r7
 8016be8:	bd80      	pop	{r7, pc}
 8016bea:	bf00      	nop
 8016bec:	20005390 	.word	0x20005390
 8016bf0:	20005392 	.word	0x20005392

08016bf4 <txframe_send_msg64>:

static void txframe_send_msg64(msg_64_t *msg)
{
 8016bf4:	b580      	push	{r7, lr}
 8016bf6:	b084      	sub	sp, #16
 8016bf8:	af00      	add	r7, sp, #0
 8016bfa:	6078      	str	r0, [r7, #4]
    static frame_msg_t m;
    //int dtalen = 8;
    int i=0;
 8016bfc:	2300      	movs	r3, #0
 8016bfe:	60fb      	str	r3, [r7, #12]
    m.frm[i++] = '|';
 8016c00:	68fb      	ldr	r3, [r7, #12]
 8016c02:	1c5a      	adds	r2, r3, #1
 8016c04:	60fa      	str	r2, [r7, #12]
 8016c06:	4a39      	ldr	r2, [pc, #228]	; (8016cec <txframe_send_msg64+0xf8>)
 8016c08:	4413      	add	r3, r2
 8016c0a:	227c      	movs	r2, #124	; 0x7c
 8016c0c:	709a      	strb	r2, [r3, #2]
    m.frm[i++] = '_';
 8016c0e:	68fb      	ldr	r3, [r7, #12]
 8016c10:	1c5a      	adds	r2, r3, #1
 8016c12:	60fa      	str	r2, [r7, #12]
 8016c14:	4a35      	ldr	r2, [pc, #212]	; (8016cec <txframe_send_msg64+0xf8>)
 8016c16:	4413      	add	r3, r2
 8016c18:	225f      	movs	r2, #95	; 0x5f
 8016c1a:	709a      	strb	r2, [r3, #2]
    m.frm[i++] = '6';
 8016c1c:	68fb      	ldr	r3, [r7, #12]
 8016c1e:	1c5a      	adds	r2, r3, #1
 8016c20:	60fa      	str	r2, [r7, #12]
 8016c22:	4a32      	ldr	r2, [pc, #200]	; (8016cec <txframe_send_msg64+0xf8>)
 8016c24:	4413      	add	r3, r2
 8016c26:	2236      	movs	r2, #54	; 0x36
 8016c28:	709a      	strb	r2, [r3, #2]
    m.frm[i++] = msg->to;
 8016c2a:	68fb      	ldr	r3, [r7, #12]
 8016c2c:	1c5a      	adds	r2, r3, #1
 8016c2e:	60fa      	str	r2, [r7, #12]
 8016c30:	687a      	ldr	r2, [r7, #4]
 8016c32:	7811      	ldrb	r1, [r2, #0]
 8016c34:	4a2d      	ldr	r2, [pc, #180]	; (8016cec <txframe_send_msg64+0xf8>)
 8016c36:	4413      	add	r3, r2
 8016c38:	460a      	mov	r2, r1
 8016c3a:	709a      	strb	r2, [r3, #2]
    m.frm[i++] = msg->from;
 8016c3c:	68fb      	ldr	r3, [r7, #12]
 8016c3e:	1c5a      	adds	r2, r3, #1
 8016c40:	60fa      	str	r2, [r7, #12]
 8016c42:	687a      	ldr	r2, [r7, #4]
 8016c44:	7851      	ldrb	r1, [r2, #1]
 8016c46:	4a29      	ldr	r2, [pc, #164]	; (8016cec <txframe_send_msg64+0xf8>)
 8016c48:	4413      	add	r3, r2
 8016c4a:	460a      	mov	r2, r1
 8016c4c:	709a      	strb	r2, [r3, #2]
    m.frm[i++] = msg->rbytes[0];
 8016c4e:	68fb      	ldr	r3, [r7, #12]
 8016c50:	1c5a      	adds	r2, r3, #1
 8016c52:	60fa      	str	r2, [r7, #12]
 8016c54:	687a      	ldr	r2, [r7, #4]
 8016c56:	7891      	ldrb	r1, [r2, #2]
 8016c58:	4a24      	ldr	r2, [pc, #144]	; (8016cec <txframe_send_msg64+0xf8>)
 8016c5a:	4413      	add	r3, r2
 8016c5c:	460a      	mov	r2, r1
 8016c5e:	709a      	strb	r2, [r3, #2]
    m.frm[i++] = msg->rbytes[1];
 8016c60:	68fb      	ldr	r3, [r7, #12]
 8016c62:	1c5a      	adds	r2, r3, #1
 8016c64:	60fa      	str	r2, [r7, #12]
 8016c66:	687a      	ldr	r2, [r7, #4]
 8016c68:	78d1      	ldrb	r1, [r2, #3]
 8016c6a:	4a20      	ldr	r2, [pc, #128]	; (8016cec <txframe_send_msg64+0xf8>)
 8016c6c:	4413      	add	r3, r2
 8016c6e:	460a      	mov	r2, r1
 8016c70:	709a      	strb	r2, [r3, #2]
    m.frm[i++] = msg->rbytes[2];
 8016c72:	68fb      	ldr	r3, [r7, #12]
 8016c74:	1c5a      	adds	r2, r3, #1
 8016c76:	60fa      	str	r2, [r7, #12]
 8016c78:	687a      	ldr	r2, [r7, #4]
 8016c7a:	7911      	ldrb	r1, [r2, #4]
 8016c7c:	4a1b      	ldr	r2, [pc, #108]	; (8016cec <txframe_send_msg64+0xf8>)
 8016c7e:	4413      	add	r3, r2
 8016c80:	460a      	mov	r2, r1
 8016c82:	709a      	strb	r2, [r3, #2]
    m.frm[i++] = msg->rbytes[3];
 8016c84:	68fb      	ldr	r3, [r7, #12]
 8016c86:	1c5a      	adds	r2, r3, #1
 8016c88:	60fa      	str	r2, [r7, #12]
 8016c8a:	687a      	ldr	r2, [r7, #4]
 8016c8c:	7951      	ldrb	r1, [r2, #5]
 8016c8e:	4a17      	ldr	r2, [pc, #92]	; (8016cec <txframe_send_msg64+0xf8>)
 8016c90:	4413      	add	r3, r2
 8016c92:	460a      	mov	r2, r1
 8016c94:	709a      	strb	r2, [r3, #2]
    m.frm[i++] = msg->rbytes[4];
 8016c96:	68fb      	ldr	r3, [r7, #12]
 8016c98:	1c5a      	adds	r2, r3, #1
 8016c9a:	60fa      	str	r2, [r7, #12]
 8016c9c:	687a      	ldr	r2, [r7, #4]
 8016c9e:	7991      	ldrb	r1, [r2, #6]
 8016ca0:	4a12      	ldr	r2, [pc, #72]	; (8016cec <txframe_send_msg64+0xf8>)
 8016ca2:	4413      	add	r3, r2
 8016ca4:	460a      	mov	r2, r1
 8016ca6:	709a      	strb	r2, [r3, #2]
    m.frm[i++] = msg->rbytes[5];
 8016ca8:	68fb      	ldr	r3, [r7, #12]
 8016caa:	1c5a      	adds	r2, r3, #1
 8016cac:	60fa      	str	r2, [r7, #12]
 8016cae:	687a      	ldr	r2, [r7, #4]
 8016cb0:	79d1      	ldrb	r1, [r2, #7]
 8016cb2:	4a0e      	ldr	r2, [pc, #56]	; (8016cec <txframe_send_msg64+0xf8>)
 8016cb4:	4413      	add	r3, r2
 8016cb6:	460a      	mov	r2, r1
 8016cb8:	709a      	strb	r2, [r3, #2]
    //memcpy(m.frm+i, dta, dtalen);
    //i += dtalen;
    m.frm[i++] = '|';
 8016cba:	68fb      	ldr	r3, [r7, #12]
 8016cbc:	1c5a      	adds	r2, r3, #1
 8016cbe:	60fa      	str	r2, [r7, #12]
 8016cc0:	4a0a      	ldr	r2, [pc, #40]	; (8016cec <txframe_send_msg64+0xf8>)
 8016cc2:	4413      	add	r3, r2
 8016cc4:	227c      	movs	r2, #124	; 0x7c
 8016cc6:	709a      	strb	r2, [r3, #2]
    int l = frm_escape(m.frm, i, FRM_MAX_LEN);
 8016cc8:	221f      	movs	r2, #31
 8016cca:	68f9      	ldr	r1, [r7, #12]
 8016ccc:	4808      	ldr	r0, [pc, #32]	; (8016cf0 <txframe_send_msg64+0xfc>)
 8016cce:	f7ff fad4 	bl	801627a <frm_escape>
 8016cd2:	60b8      	str	r0, [r7, #8]
    if (l>0) txframe_send_notif(&m, l);
 8016cd4:	68bb      	ldr	r3, [r7, #8]
 8016cd6:	2b00      	cmp	r3, #0
 8016cd8:	dd03      	ble.n	8016ce2 <txframe_send_msg64+0xee>
 8016cda:	68b9      	ldr	r1, [r7, #8]
 8016cdc:	4803      	ldr	r0, [pc, #12]	; (8016cec <txframe_send_msg64+0xf8>)
 8016cde:	f7ff f9ec 	bl	80160ba <txframe_send_notif>
}
 8016ce2:	bf00      	nop
 8016ce4:	3710      	adds	r7, #16
 8016ce6:	46bd      	mov	sp, r7
 8016ce8:	bd80      	pop	{r7, pc}
 8016cea:	bf00      	nop
 8016cec:	200053b4 	.word	0x200053b4
 8016cf0:	200053b6 	.word	0x200053b6

08016cf4 <frame_gather_stat>:



// buf should be long enough to store a int32_t with escape, so 8 bytes
int frame_gather_stat(int step, uint8_t *buf)
{
 8016cf4:	b580      	push	{r7, lr}
 8016cf6:	b086      	sub	sp, #24
 8016cf8:	af00      	add	r7, sp, #0
 8016cfa:	6078      	str	r0, [r7, #4]
 8016cfc:	6039      	str	r1, [r7, #0]
	// int32_t stat_val_get(int step);
	int done;
	int32_t v = stat_val_get(step, &done);
 8016cfe:	f107 0310 	add.w	r3, r7, #16
 8016d02:	4619      	mov	r1, r3
 8016d04:	6878      	ldr	r0, [r7, #4]
 8016d06:	f7ff f9c9 	bl	801609c <stat_val_get>
 8016d0a:	4603      	mov	r3, r0
 8016d0c:	60fb      	str	r3, [r7, #12]
	if (done) return 0;
 8016d0e:	693b      	ldr	r3, [r7, #16]
 8016d10:	2b00      	cmp	r3, #0
 8016d12:	d001      	beq.n	8016d18 <frame_gather_stat+0x24>
 8016d14:	2300      	movs	r3, #0
 8016d16:	e00e      	b.n	8016d36 <frame_gather_stat+0x42>

	int l = _frm_escape2(buf, (void *) &v, 4, 8);
 8016d18:	f107 010c 	add.w	r1, r7, #12
 8016d1c:	2308      	movs	r3, #8
 8016d1e:	2204      	movs	r2, #4
 8016d20:	6838      	ldr	r0, [r7, #0]
 8016d22:	f7ff fa63 	bl	80161ec <_frm_escape2>
 8016d26:	6178      	str	r0, [r7, #20]
	if (l<0) {
 8016d28:	697b      	ldr	r3, [r7, #20]
 8016d2a:	2b00      	cmp	r3, #0
 8016d2c:	da02      	bge.n	8016d34 <frame_gather_stat+0x40>
		return -1;
 8016d2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016d32:	e000      	b.n	8016d36 <frame_gather_stat+0x42>
	}
	return l;
 8016d34:	697b      	ldr	r3, [r7, #20]
}
 8016d36:	4618      	mov	r0, r3
 8016d38:	3718      	adds	r7, #24
 8016d3a:	46bd      	mov	sp, r7
 8016d3c:	bd80      	pop	{r7, pc}

08016d3e <frame_send_stat>:

void frame_send_stat(void(*cb)(uint8_t *d, int l), uint32_t tick)
{
 8016d3e:	b580      	push	{r7, lr}
 8016d40:	b086      	sub	sp, #24
 8016d42:	af00      	add	r7, sp, #0
 8016d44:	6078      	str	r0, [r7, #4]
 8016d46:	6039      	str	r1, [r7, #0]
    uint8_t buf[8];
    //if ((1)) tick = 0xAA55AA55;
    int l = _frm_escape2(buf, (void *) &tick, 4, 8);
 8016d48:	4639      	mov	r1, r7
 8016d4a:	f107 0008 	add.w	r0, r7, #8
 8016d4e:	2308      	movs	r3, #8
 8016d50:	2204      	movs	r2, #4
 8016d52:	f7ff fa4b 	bl	80161ec <_frm_escape2>
 8016d56:	6138      	str	r0, [r7, #16]
    cb(buf, l);
 8016d58:	f107 0208 	add.w	r2, r7, #8
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	6939      	ldr	r1, [r7, #16]
 8016d60:	4610      	mov	r0, r2
 8016d62:	4798      	blx	r3

	int i;
	for (i=0; ; i++) {
 8016d64:	2300      	movs	r3, #0
 8016d66:	617b      	str	r3, [r7, #20]
		l = frame_gather_stat(i, buf);
 8016d68:	f107 0308 	add.w	r3, r7, #8
 8016d6c:	4619      	mov	r1, r3
 8016d6e:	6978      	ldr	r0, [r7, #20]
 8016d70:	f7ff ffc0 	bl	8016cf4 <frame_gather_stat>
 8016d74:	6138      	str	r0, [r7, #16]
		if (l<=0) {
 8016d76:	693b      	ldr	r3, [r7, #16]
 8016d78:	2b00      	cmp	r3, #0
 8016d7a:	dd09      	ble.n	8016d90 <frame_send_stat+0x52>
			return;
		}
		cb(buf, l);
 8016d7c:	f107 0208 	add.w	r2, r7, #8
 8016d80:	687b      	ldr	r3, [r7, #4]
 8016d82:	6939      	ldr	r1, [r7, #16]
 8016d84:	4610      	mov	r0, r2
 8016d86:	4798      	blx	r3
	for (i=0; ; i++) {
 8016d88:	697b      	ldr	r3, [r7, #20]
 8016d8a:	3301      	adds	r3, #1
 8016d8c:	617b      	str	r3, [r7, #20]
		l = frame_gather_stat(i, buf);
 8016d8e:	e7eb      	b.n	8016d68 <frame_send_stat+0x2a>
			return;
 8016d90:	bf00      	nop
	}
}
 8016d92:	3718      	adds	r7, #24
 8016d94:	46bd      	mov	sp, r7
 8016d96:	bd80      	pop	{r7, pc}

08016d98 <itm_debug1>:
//void _itm_debug1(const char *msg, int v);
//void _itm_debug2(const char *msg, int v1, int v2);
void _itm_debug3(const char *msg, int v1, int v2, int v3, int n);

static inline void itm_debug1(uint32_t f, const char *msg, int v)
{
 8016d98:	b580      	push	{r7, lr}
 8016d9a:	b086      	sub	sp, #24
 8016d9c:	af02      	add	r7, sp, #8
 8016d9e:	60f8      	str	r0, [r7, #12]
 8016da0:	60b9      	str	r1, [r7, #8]
 8016da2:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 8016da4:	4b08      	ldr	r3, [pc, #32]	; (8016dc8 <itm_debug1+0x30>)
 8016da6:	681a      	ldr	r2, [r3, #0]
 8016da8:	68fb      	ldr	r3, [r7, #12]
 8016daa:	4013      	ands	r3, r2
 8016dac:	2b00      	cmp	r3, #0
 8016dae:	d007      	beq.n	8016dc0 <itm_debug1+0x28>
 8016db0:	2301      	movs	r3, #1
 8016db2:	9300      	str	r3, [sp, #0]
 8016db4:	2300      	movs	r3, #0
 8016db6:	2200      	movs	r2, #0
 8016db8:	6879      	ldr	r1, [r7, #4]
 8016dba:	68b8      	ldr	r0, [r7, #8]
 8016dbc:	f001 ff6a 	bl	8018c94 <_itm_debug3>
}
 8016dc0:	bf00      	nop
 8016dc2:	3710      	adds	r7, #16
 8016dc4:	46bd      	mov	sp, r7
 8016dc6:	bd80      	pop	{r7, pc}
 8016dc8:	200005a4 	.word	0x200005a4

08016dcc <itm_debug2>:
static inline void itm_debug2(uint32_t f, const char *msg, int v1, int v2)
{
 8016dcc:	b580      	push	{r7, lr}
 8016dce:	b086      	sub	sp, #24
 8016dd0:	af02      	add	r7, sp, #8
 8016dd2:	60f8      	str	r0, [r7, #12]
 8016dd4:	60b9      	str	r1, [r7, #8]
 8016dd6:	607a      	str	r2, [r7, #4]
 8016dd8:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, 0, 2);
 8016dda:	4b09      	ldr	r3, [pc, #36]	; (8016e00 <itm_debug2+0x34>)
 8016ddc:	681a      	ldr	r2, [r3, #0]
 8016dde:	68fb      	ldr	r3, [r7, #12]
 8016de0:	4013      	ands	r3, r2
 8016de2:	2b00      	cmp	r3, #0
 8016de4:	d007      	beq.n	8016df6 <itm_debug2+0x2a>
 8016de6:	2302      	movs	r3, #2
 8016de8:	9300      	str	r3, [sp, #0]
 8016dea:	2300      	movs	r3, #0
 8016dec:	683a      	ldr	r2, [r7, #0]
 8016dee:	6879      	ldr	r1, [r7, #4]
 8016df0:	68b8      	ldr	r0, [r7, #8]
 8016df2:	f001 ff4f 	bl	8018c94 <_itm_debug3>
}
 8016df6:	bf00      	nop
 8016df8:	3710      	adds	r7, #16
 8016dfa:	46bd      	mov	sp, r7
 8016dfc:	bd80      	pop	{r7, pc}
 8016dfe:	bf00      	nop
 8016e00:	200005a4 	.word	0x200005a4

08016e04 <itm_debug3>:
static inline void itm_debug3(uint32_t f, const char *msg, int v1, int v2, int v3)
{
 8016e04:	b580      	push	{r7, lr}
 8016e06:	b086      	sub	sp, #24
 8016e08:	af02      	add	r7, sp, #8
 8016e0a:	60f8      	str	r0, [r7, #12]
 8016e0c:	60b9      	str	r1, [r7, #8]
 8016e0e:	607a      	str	r2, [r7, #4]
 8016e10:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, v3, 3);
 8016e12:	4b09      	ldr	r3, [pc, #36]	; (8016e38 <itm_debug3+0x34>)
 8016e14:	681a      	ldr	r2, [r3, #0]
 8016e16:	68fb      	ldr	r3, [r7, #12]
 8016e18:	4013      	ands	r3, r2
 8016e1a:	2b00      	cmp	r3, #0
 8016e1c:	d007      	beq.n	8016e2e <itm_debug3+0x2a>
 8016e1e:	2303      	movs	r3, #3
 8016e20:	9300      	str	r3, [sp, #0]
 8016e22:	69bb      	ldr	r3, [r7, #24]
 8016e24:	683a      	ldr	r2, [r7, #0]
 8016e26:	6879      	ldr	r1, [r7, #4]
 8016e28:	68b8      	ldr	r0, [r7, #8]
 8016e2a:	f001 ff33 	bl	8018c94 <_itm_debug3>
}
 8016e2e:	bf00      	nop
 8016e30:	3710      	adds	r7, #16
 8016e32:	46bd      	mov	sp, r7
 8016e34:	bd80      	pop	{r7, pc}
 8016e36:	bf00      	nop
 8016e38:	200005a4 	.word	0x200005a4

08016e3c <msg_error>:
		{MA_ADDR_MASK_5,						MA_ADDR_5_CTRL,			5}

};

static void msg_error(_UNUSED_ const char *msg)
{
 8016e3c:	b480      	push	{r7}
 8016e3e:	b083      	sub	sp, #12
 8016e40:	af00      	add	r7, sp, #0
 8016e42:	6078      	str	r0, [r7, #4]

}
 8016e44:	bf00      	nop
 8016e46:	370c      	adds	r7, #12
 8016e48:	46bd      	mov	sp, r7
 8016e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e4e:	4770      	bx	lr

08016e50 <dispatch_m64>:


static void dispatch_m64(msg_64_t *m, int f)
{
 8016e50:	b580      	push	{r7, lr}
 8016e52:	b086      	sub	sp, #24
 8016e54:	af00      	add	r7, sp, #0
 8016e56:	6078      	str	r0, [r7, #4]
 8016e58:	6039      	str	r1, [r7, #0]
    if (m->to == MA_BROADCAST) {
 8016e5a:	687b      	ldr	r3, [r7, #4]
 8016e5c:	781b      	ldrb	r3, [r3, #0]
 8016e5e:	2bff      	cmp	r3, #255	; 0xff
 8016e60:	d11d      	bne.n	8016e9e <dispatch_m64+0x4e>
        for (int i=0; i<NQDEF; i++) {
 8016e62:	2300      	movs	r3, #0
 8016e64:	617b      	str	r3, [r7, #20]
 8016e66:	e016      	b.n	8016e96 <dispatch_m64+0x46>
            if (i == f) {
 8016e68:	697a      	ldr	r2, [r7, #20]
 8016e6a:	683b      	ldr	r3, [r7, #0]
 8016e6c:	429a      	cmp	r2, r3
 8016e6e:	d00c      	beq.n	8016e8a <dispatch_m64+0x3a>
                continue;
            }
            mqf_t *q = qdef[i].to;
 8016e70:	4a32      	ldr	r2, [pc, #200]	; (8016f3c <dispatch_m64+0xec>)
 8016e72:	697b      	ldr	r3, [r7, #20]
 8016e74:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8016e78:	60bb      	str	r3, [r7, #8]
            if (!q) continue;
 8016e7a:	68bb      	ldr	r3, [r7, #8]
 8016e7c:	2b00      	cmp	r3, #0
 8016e7e:	d006      	beq.n	8016e8e <dispatch_m64+0x3e>
            mqf_write(q, m);
 8016e80:	6879      	ldr	r1, [r7, #4]
 8016e82:	68b8      	ldr	r0, [r7, #8]
 8016e84:	f002 f80c 	bl	8018ea0 <mqf_write>
 8016e88:	e002      	b.n	8016e90 <dispatch_m64+0x40>
                continue;
 8016e8a:	bf00      	nop
 8016e8c:	e000      	b.n	8016e90 <dispatch_m64+0x40>
            if (!q) continue;
 8016e8e:	bf00      	nop
        for (int i=0; i<NQDEF; i++) {
 8016e90:	697b      	ldr	r3, [r7, #20]
 8016e92:	3301      	adds	r3, #1
 8016e94:	617b      	str	r3, [r7, #20]
 8016e96:	697b      	ldr	r3, [r7, #20]
 8016e98:	2b08      	cmp	r3, #8
 8016e9a:	dde5      	ble.n	8016e68 <dispatch_m64+0x18>
        }
        return;
 8016e9c:	e04b      	b.n	8016f36 <dispatch_m64+0xe6>
    }
	for (int i=0; i<NROUTES; i++) {
 8016e9e:	2300      	movs	r3, #0
 8016ea0:	613b      	str	r3, [r7, #16]
 8016ea2:	e03b      	b.n	8016f1c <dispatch_m64+0xcc>
		if ((m->to & routes[i].mask) == routes[i].value) {
 8016ea4:	687b      	ldr	r3, [r7, #4]
 8016ea6:	7819      	ldrb	r1, [r3, #0]
 8016ea8:	4825      	ldr	r0, [pc, #148]	; (8016f40 <dispatch_m64+0xf0>)
 8016eaa:	693a      	ldr	r2, [r7, #16]
 8016eac:	4613      	mov	r3, r2
 8016eae:	005b      	lsls	r3, r3, #1
 8016eb0:	4413      	add	r3, r2
 8016eb2:	4403      	add	r3, r0
 8016eb4:	781b      	ldrb	r3, [r3, #0]
 8016eb6:	400b      	ands	r3, r1
 8016eb8:	b2d9      	uxtb	r1, r3
 8016eba:	4821      	ldr	r0, [pc, #132]	; (8016f40 <dispatch_m64+0xf0>)
 8016ebc:	693a      	ldr	r2, [r7, #16]
 8016ebe:	4613      	mov	r3, r2
 8016ec0:	005b      	lsls	r3, r3, #1
 8016ec2:	4413      	add	r3, r2
 8016ec4:	4403      	add	r3, r0
 8016ec6:	3301      	adds	r3, #1
 8016ec8:	781b      	ldrb	r3, [r3, #0]
 8016eca:	4299      	cmp	r1, r3
 8016ecc:	d123      	bne.n	8016f16 <dispatch_m64+0xc6>
			if (f==routes[i].destq) {
 8016ece:	491c      	ldr	r1, [pc, #112]	; (8016f40 <dispatch_m64+0xf0>)
 8016ed0:	693a      	ldr	r2, [r7, #16]
 8016ed2:	4613      	mov	r3, r2
 8016ed4:	005b      	lsls	r3, r3, #1
 8016ed6:	4413      	add	r3, r2
 8016ed8:	440b      	add	r3, r1
 8016eda:	3302      	adds	r3, #2
 8016edc:	781b      	ldrb	r3, [r3, #0]
 8016ede:	461a      	mov	r2, r3
 8016ee0:	683b      	ldr	r3, [r7, #0]
 8016ee2:	4293      	cmp	r3, r2
 8016ee4:	d105      	bne.n	8016ef2 <dispatch_m64+0xa2>
				// loop
				itm_debug1(DBG_ERR|DBG_MSG, "loop", f);
 8016ee6:	683a      	ldr	r2, [r7, #0]
 8016ee8:	4916      	ldr	r1, [pc, #88]	; (8016f44 <dispatch_m64+0xf4>)
 8016eea:	4817      	ldr	r0, [pc, #92]	; (8016f48 <dispatch_m64+0xf8>)
 8016eec:	f7ff ff54 	bl	8016d98 <itm_debug1>
				return;
 8016ef0:	e021      	b.n	8016f36 <dispatch_m64+0xe6>
			}
			mqf_t *q = qdef[routes[i].destq].to;
 8016ef2:	4913      	ldr	r1, [pc, #76]	; (8016f40 <dispatch_m64+0xf0>)
 8016ef4:	693a      	ldr	r2, [r7, #16]
 8016ef6:	4613      	mov	r3, r2
 8016ef8:	005b      	lsls	r3, r3, #1
 8016efa:	4413      	add	r3, r2
 8016efc:	440b      	add	r3, r1
 8016efe:	3302      	adds	r3, #2
 8016f00:	781b      	ldrb	r3, [r3, #0]
 8016f02:	461a      	mov	r2, r3
 8016f04:	4b0d      	ldr	r3, [pc, #52]	; (8016f3c <dispatch_m64+0xec>)
 8016f06:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8016f0a:	60fb      	str	r3, [r7, #12]
			mqf_write(q, m);
 8016f0c:	6879      	ldr	r1, [r7, #4]
 8016f0e:	68f8      	ldr	r0, [r7, #12]
 8016f10:	f001 ffc6 	bl	8018ea0 <mqf_write>
			return;
 8016f14:	e00f      	b.n	8016f36 <dispatch_m64+0xe6>
	for (int i=0; i<NROUTES; i++) {
 8016f16:	693b      	ldr	r3, [r7, #16]
 8016f18:	3301      	adds	r3, #1
 8016f1a:	613b      	str	r3, [r7, #16]
 8016f1c:	693b      	ldr	r3, [r7, #16]
 8016f1e:	2b07      	cmp	r3, #7
 8016f20:	ddc0      	ble.n	8016ea4 <dispatch_m64+0x54>
		}
	}
	itm_debug1(DBG_ERR|DBG_MSG, "no route", m->to);
 8016f22:	687b      	ldr	r3, [r7, #4]
 8016f24:	781b      	ldrb	r3, [r3, #0]
 8016f26:	461a      	mov	r2, r3
 8016f28:	4908      	ldr	r1, [pc, #32]	; (8016f4c <dispatch_m64+0xfc>)
 8016f2a:	4807      	ldr	r0, [pc, #28]	; (8016f48 <dispatch_m64+0xf8>)
 8016f2c:	f7ff ff34 	bl	8016d98 <itm_debug1>
	msg_error("no route");
 8016f30:	4806      	ldr	r0, [pc, #24]	; (8016f4c <dispatch_m64+0xfc>)
 8016f32:	f7ff ff83 	bl	8016e3c <msg_error>
}
 8016f36:	3718      	adds	r7, #24
 8016f38:	46bd      	mov	sp, r7
 8016f3a:	bd80      	pop	{r7, pc}
 8016f3c:	0801bb7c 	.word	0x0801bb7c
 8016f40:	0801bbc4 	.word	0x0801bbc4
 8016f44:	08019a88 	.word	0x08019a88
 8016f48:	80000002 	.word	0x80000002
 8016f4c:	08019a90 	.word	0x08019a90

08016f50 <msgsrv_tick>:
	itm_debug3(DBG_ERR, "qu", d*100+i, q->maxuse, mqf_len(q));
	q->maxuse = 0;
}

void msgsrv_tick(_UNUSED_ uint32_t notif_flags, _UNUSED_ uint32_t tick, _UNUSED_ uint32_t dt)
{
 8016f50:	b580      	push	{r7, lr}
 8016f52:	b08c      	sub	sp, #48	; 0x30
 8016f54:	af02      	add	r7, sp, #8
 8016f56:	60f8      	str	r0, [r7, #12]
 8016f58:	60b9      	str	r1, [r7, #8]
 8016f5a:	607a      	str	r2, [r7, #4]
        	itm_debug1(DBG_ERR|DBG_MSG, "bad size", sizeof(msg_64_t));
        	for (;;);
#endif
        }
    }
	for (int i=0; i<NQDEF; i++) {
 8016f5c:	2300      	movs	r3, #0
 8016f5e:	627b      	str	r3, [r7, #36]	; 0x24
 8016f60:	e051      	b.n	8017006 <msgsrv_tick+0xb6>
		mqf_t *q = qdef[i].from;
 8016f62:	4a2c      	ldr	r2, [pc, #176]	; (8017014 <msgsrv_tick+0xc4>)
 8016f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f66:	00db      	lsls	r3, r3, #3
 8016f68:	4413      	add	r3, r2
 8016f6a:	685b      	ldr	r3, [r3, #4]
 8016f6c:	623b      	str	r3, [r7, #32]

		itm_debug2(DBG_MSG, "mlen1",i, mqf_len(q));
 8016f6e:	6a38      	ldr	r0, [r7, #32]
 8016f70:	f001 ff3a 	bl	8018de8 <mqf_len>
 8016f74:	4603      	mov	r3, r0
 8016f76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016f78:	4927      	ldr	r1, [pc, #156]	; (8017018 <msgsrv_tick+0xc8>)
 8016f7a:	2002      	movs	r0, #2
 8016f7c:	f7ff ff26 	bl	8016dcc <itm_debug2>
		itm_debug3(DBG_MSG, "mth1 ", i, q->head, q->tail);
 8016f80:	6a3b      	ldr	r3, [r7, #32]
 8016f82:	881b      	ldrh	r3, [r3, #0]
 8016f84:	b29b      	uxth	r3, r3
 8016f86:	461a      	mov	r2, r3
 8016f88:	6a3b      	ldr	r3, [r7, #32]
 8016f8a:	885b      	ldrh	r3, [r3, #2]
 8016f8c:	b29b      	uxth	r3, r3
 8016f8e:	9300      	str	r3, [sp, #0]
 8016f90:	4613      	mov	r3, r2
 8016f92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016f94:	4921      	ldr	r1, [pc, #132]	; (801701c <msgsrv_tick+0xcc>)
 8016f96:	2002      	movs	r0, #2
 8016f98:	f7ff ff34 	bl	8016e04 <itm_debug3>
		for (;;) {
				msg_64_t m;
				int rc = mqf_read(q, &m);
 8016f9c:	f107 0310 	add.w	r3, r7, #16
 8016fa0:	4619      	mov	r1, r3
 8016fa2:	6a38      	ldr	r0, [r7, #32]
 8016fa4:	f001 fff6 	bl	8018f94 <mqf_read>
 8016fa8:	61f8      	str	r0, [r7, #28]
				if (rc) break;
 8016faa:	69fb      	ldr	r3, [r7, #28]
 8016fac:	2b00      	cmp	r3, #0
 8016fae:	d01a      	beq.n	8016fe6 <msgsrv_tick+0x96>
				if (i==5) {
					itm_debug1(DBG_MSG, "from ctrl", m.cmd);
				}
				dispatch_m64(&m, i);
			}
		itm_debug2(DBG_MSG, "mlen2",i, mqf_len(q));
 8016fb0:	6a38      	ldr	r0, [r7, #32]
 8016fb2:	f001 ff19 	bl	8018de8 <mqf_len>
 8016fb6:	4603      	mov	r3, r0
 8016fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016fba:	4919      	ldr	r1, [pc, #100]	; (8017020 <msgsrv_tick+0xd0>)
 8016fbc:	2002      	movs	r0, #2
 8016fbe:	f7ff ff05 	bl	8016dcc <itm_debug2>
		itm_debug3(DBG_MSG, "mth2 ", i, q->head, q->tail);
 8016fc2:	6a3b      	ldr	r3, [r7, #32]
 8016fc4:	881b      	ldrh	r3, [r3, #0]
 8016fc6:	b29b      	uxth	r3, r3
 8016fc8:	461a      	mov	r2, r3
 8016fca:	6a3b      	ldr	r3, [r7, #32]
 8016fcc:	885b      	ldrh	r3, [r3, #2]
 8016fce:	b29b      	uxth	r3, r3
 8016fd0:	9300      	str	r3, [sp, #0]
 8016fd2:	4613      	mov	r3, r2
 8016fd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016fd6:	4913      	ldr	r1, [pc, #76]	; (8017024 <msgsrv_tick+0xd4>)
 8016fd8:	2002      	movs	r0, #2
 8016fda:	f7ff ff13 	bl	8016e04 <itm_debug3>
	for (int i=0; i<NQDEF; i++) {
 8016fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fe0:	3301      	adds	r3, #1
 8016fe2:	627b      	str	r3, [r7, #36]	; 0x24
 8016fe4:	e00f      	b.n	8017006 <msgsrv_tick+0xb6>
				if (i==5) {
 8016fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fe8:	2b05      	cmp	r3, #5
 8016fea:	d105      	bne.n	8016ff8 <msgsrv_tick+0xa8>
					itm_debug1(DBG_MSG, "from ctrl", m.cmd);
 8016fec:	7cbb      	ldrb	r3, [r7, #18]
 8016fee:	461a      	mov	r2, r3
 8016ff0:	490d      	ldr	r1, [pc, #52]	; (8017028 <msgsrv_tick+0xd8>)
 8016ff2:	2002      	movs	r0, #2
 8016ff4:	f7ff fed0 	bl	8016d98 <itm_debug1>
				dispatch_m64(&m, i);
 8016ff8:	f107 0310 	add.w	r3, r7, #16
 8016ffc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016ffe:	4618      	mov	r0, r3
 8017000:	f7ff ff26 	bl	8016e50 <dispatch_m64>
		for (;;) {
 8017004:	e7ca      	b.n	8016f9c <msgsrv_tick+0x4c>
	for (int i=0; i<NQDEF; i++) {
 8017006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017008:	2b08      	cmp	r3, #8
 801700a:	ddaa      	ble.n	8016f62 <msgsrv_tick+0x12>
				dump_qusage(i, 1, qdef[i].to);
			}
			last = tick;
		}
	}
}
 801700c:	bf00      	nop
 801700e:	3728      	adds	r7, #40	; 0x28
 8017010:	46bd      	mov	sp, r7
 8017012:	bd80      	pop	{r7, pc}
 8017014:	0801bb7c 	.word	0x0801bb7c
 8017018:	08019aa0 	.word	0x08019aa0
 801701c:	08019aa8 	.word	0x08019aa8
 8017020:	08019ab0 	.word	0x08019ab0
 8017024:	08019ab8 	.word	0x08019ab8
 8017028:	08019ac0 	.word	0x08019ac0

0801702c <dump_msg>:


void dump_msg(mqf_t *mq, int n)
{
 801702c:	b580      	push	{r7, lr}
 801702e:	b086      	sub	sp, #24
 8017030:	af02      	add	r7, sp, #8
 8017032:	6078      	str	r0, [r7, #4]
 8017034:	6039      	str	r1, [r7, #0]
	int i = ( n + mq->tail ) % mq->num;
 8017036:	687b      	ldr	r3, [r7, #4]
 8017038:	885b      	ldrh	r3, [r3, #2]
 801703a:	b29b      	uxth	r3, r3
 801703c:	461a      	mov	r2, r3
 801703e:	683b      	ldr	r3, [r7, #0]
 8017040:	4413      	add	r3, r2
 8017042:	687a      	ldr	r2, [r7, #4]
 8017044:	7952      	ldrb	r2, [r2, #5]
 8017046:	fb93 f1f2 	sdiv	r1, r3, r2
 801704a:	fb02 f201 	mul.w	r2, r2, r1
 801704e:	1a9b      	subs	r3, r3, r2
 8017050:	60fb      	str	r3, [r7, #12]
	msg_64_t *msg = (msg_64_t *) &(mq->msgbuf[i*mq->msgsiz]);
 8017052:	687b      	ldr	r3, [r7, #4]
 8017054:	689b      	ldr	r3, [r3, #8]
 8017056:	687a      	ldr	r2, [r7, #4]
 8017058:	7912      	ldrb	r2, [r2, #4]
 801705a:	4611      	mov	r1, r2
 801705c:	68fa      	ldr	r2, [r7, #12]
 801705e:	fb02 f201 	mul.w	r2, r2, r1
 8017062:	4413      	add	r3, r2
 8017064:	60bb      	str	r3, [r7, #8]
	itm_debug3(DBG_ERR, "q", i, msg->cmd, msg->from);
 8017066:	68bb      	ldr	r3, [r7, #8]
 8017068:	789b      	ldrb	r3, [r3, #2]
 801706a:	461a      	mov	r2, r3
 801706c:	68bb      	ldr	r3, [r7, #8]
 801706e:	785b      	ldrb	r3, [r3, #1]
 8017070:	9300      	str	r3, [sp, #0]
 8017072:	4613      	mov	r3, r2
 8017074:	68fa      	ldr	r2, [r7, #12]
 8017076:	4904      	ldr	r1, [pc, #16]	; (8017088 <dump_msg+0x5c>)
 8017078:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 801707c:	f7ff fec2 	bl	8016e04 <itm_debug3>
}
 8017080:	bf00      	nop
 8017082:	3710      	adds	r7, #16
 8017084:	46bd      	mov	sp, r7
 8017086:	bd80      	pop	{r7, pc}
 8017088:	08019acc 	.word	0x08019acc

0801708c <inertia_value>:
{
	vars->target = v;
}

int16_t inertia_value(const inertia_config_t *config, inertia_vars_t *vars, uint16_t elapsed_ticks, int *pchanged)
{
 801708c:	b480      	push	{r7}
 801708e:	b08b      	sub	sp, #44	; 0x2c
 8017090:	af00      	add	r7, sp, #0
 8017092:	60f8      	str	r0, [r7, #12]
 8017094:	60b9      	str	r1, [r7, #8]
 8017096:	603b      	str	r3, [r7, #0]
 8017098:	4613      	mov	r3, r2
 801709a:	80fb      	strh	r3, [r7, #6]
	int st =  SIGNOF(vars->target);
 801709c:	68bb      	ldr	r3, [r7, #8]
 801709e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80170a2:	2b00      	cmp	r3, #0
 80170a4:	da02      	bge.n	80170ac <inertia_value+0x20>
 80170a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80170aa:	e000      	b.n	80170ae <inertia_value+0x22>
 80170ac:	2301      	movs	r3, #1
 80170ae:	623b      	str	r3, [r7, #32]
	int sc =  SIGNOF(vars->cur);
 80170b0:	68bb      	ldr	r3, [r7, #8]
 80170b2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80170b6:	2b00      	cmp	r3, #0
 80170b8:	da02      	bge.n	80170c0 <inertia_value+0x34>
 80170ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80170be:	e000      	b.n	80170c2 <inertia_value+0x36>
 80170c0:	2301      	movs	r3, #1
 80170c2:	61fb      	str	r3, [r7, #28]
	int inc;

    if (pchanged) *pchanged = 0;
 80170c4:	683b      	ldr	r3, [r7, #0]
 80170c6:	2b00      	cmp	r3, #0
 80170c8:	d002      	beq.n	80170d0 <inertia_value+0x44>
 80170ca:	683b      	ldr	r3, [r7, #0]
 80170cc:	2200      	movs	r2, #0
 80170ce:	601a      	str	r2, [r3, #0]
    if (vars->target == vars->cur/10) return vars->target;
 80170d0:	68bb      	ldr	r3, [r7, #8]
 80170d2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80170d6:	68bb      	ldr	r3, [r7, #8]
 80170d8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80170dc:	496f      	ldr	r1, [pc, #444]	; (801729c <inertia_value+0x210>)
 80170de:	fb81 0103 	smull	r0, r1, r1, r3
 80170e2:	1089      	asrs	r1, r1, #2
 80170e4:	17db      	asrs	r3, r3, #31
 80170e6:	1acb      	subs	r3, r1, r3
 80170e8:	b21b      	sxth	r3, r3
 80170ea:	429a      	cmp	r2, r3
 80170ec:	d103      	bne.n	80170f6 <inertia_value+0x6a>
 80170ee:	68bb      	ldr	r3, [r7, #8]
 80170f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80170f4:	e0cb      	b.n	801728e <inertia_value+0x202>
    //debug_info(0, "INER", vars->target, vars->cur);


	if (st*sc >= 0) {
 80170f6:	6a3b      	ldr	r3, [r7, #32]
 80170f8:	69fa      	ldr	r2, [r7, #28]
 80170fa:	fb02 f303 	mul.w	r3, r2, r3
 80170fe:	2b00      	cmp	r3, #0
 8017100:	db6c      	blt.n	80171dc <inertia_value+0x150>
		// same direction
		if (abs(vars->target*10)>abs(vars->cur)) {
 8017102:	68bb      	ldr	r3, [r7, #8]
 8017104:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017108:	461a      	mov	r2, r3
 801710a:	4613      	mov	r3, r2
 801710c:	009b      	lsls	r3, r3, #2
 801710e:	4413      	add	r3, r2
 8017110:	005b      	lsls	r3, r3, #1
 8017112:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8017116:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 801711a:	68bb      	ldr	r3, [r7, #8]
 801711c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017120:	2b00      	cmp	r3, #0
 8017122:	bfb8      	it	lt
 8017124:	425b      	neglt	r3, r3
 8017126:	429a      	cmp	r2, r3
 8017128:	dd2b      	ble.n	8017182 <inertia_value+0xf6>
			// acceleration
			inc = config->acc * elapsed_ticks / 1000;
 801712a:	68fb      	ldr	r3, [r7, #12]
 801712c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017130:	461a      	mov	r2, r3
 8017132:	88fb      	ldrh	r3, [r7, #6]
 8017134:	fb03 f302 	mul.w	r3, r3, r2
 8017138:	4a59      	ldr	r2, [pc, #356]	; (80172a0 <inertia_value+0x214>)
 801713a:	fb82 1203 	smull	r1, r2, r2, r3
 801713e:	1192      	asrs	r2, r2, #6
 8017140:	17db      	asrs	r3, r3, #31
 8017142:	1ad3      	subs	r3, r2, r3
 8017144:	627b      	str	r3, [r7, #36]	; 0x24
			inc = MIN(inc, abs(vars->target*10)-abs(vars->cur));
 8017146:	68bb      	ldr	r3, [r7, #8]
 8017148:	f9b3 3000 	ldrsh.w	r3, [r3]
 801714c:	461a      	mov	r2, r3
 801714e:	4613      	mov	r3, r2
 8017150:	009b      	lsls	r3, r3, #2
 8017152:	4413      	add	r3, r2
 8017154:	005b      	lsls	r3, r3, #1
 8017156:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 801715a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 801715e:	68bb      	ldr	r3, [r7, #8]
 8017160:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017164:	2b00      	cmp	r3, #0
 8017166:	bfb8      	it	lt
 8017168:	425b      	neglt	r3, r3
 801716a:	1ad3      	subs	r3, r2, r3
 801716c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801716e:	4293      	cmp	r3, r2
 8017170:	bfa8      	it	ge
 8017172:	4613      	movge	r3, r2
 8017174:	627b      	str	r3, [r7, #36]	; 0x24
			inc = sc * inc;
 8017176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017178:	69fa      	ldr	r2, [r7, #28]
 801717a:	fb02 f303 	mul.w	r3, r2, r3
 801717e:	627b      	str	r3, [r7, #36]	; 0x24
 8017180:	e055      	b.n	801722e <inertia_value+0x1a2>
		} else {
			// deceleration
			inc = config->dec * elapsed_ticks / 1000;
 8017182:	68fb      	ldr	r3, [r7, #12]
 8017184:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017188:	461a      	mov	r2, r3
 801718a:	88fb      	ldrh	r3, [r7, #6]
 801718c:	fb03 f302 	mul.w	r3, r3, r2
 8017190:	4a43      	ldr	r2, [pc, #268]	; (80172a0 <inertia_value+0x214>)
 8017192:	fb82 1203 	smull	r1, r2, r2, r3
 8017196:	1192      	asrs	r2, r2, #6
 8017198:	17db      	asrs	r3, r3, #31
 801719a:	1ad3      	subs	r3, r2, r3
 801719c:	627b      	str	r3, [r7, #36]	; 0x24
			inc = MIN(inc, -abs(vars->target*10)+abs(vars->cur));
 801719e:	68bb      	ldr	r3, [r7, #8]
 80171a0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80171a4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80171a8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80171ac:	68bb      	ldr	r3, [r7, #8]
 80171ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80171b2:	4619      	mov	r1, r3
 80171b4:	460b      	mov	r3, r1
 80171b6:	009b      	lsls	r3, r3, #2
 80171b8:	440b      	add	r3, r1
 80171ba:	005b      	lsls	r3, r3, #1
 80171bc:	2b00      	cmp	r3, #0
 80171be:	bfb8      	it	lt
 80171c0:	425b      	neglt	r3, r3
 80171c2:	1ad3      	subs	r3, r2, r3
 80171c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80171c6:	4293      	cmp	r3, r2
 80171c8:	bfa8      	it	ge
 80171ca:	4613      	movge	r3, r2
 80171cc:	627b      	str	r3, [r7, #36]	; 0x24
			inc = -sc * inc;
 80171ce:	69fb      	ldr	r3, [r7, #28]
 80171d0:	425a      	negs	r2, r3
 80171d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171d4:	fb02 f303 	mul.w	r3, r2, r3
 80171d8:	627b      	str	r3, [r7, #36]	; 0x24
 80171da:	e028      	b.n	801722e <inertia_value+0x1a2>
		}
	} else {
		// dir change
		inc = config->dec * elapsed_ticks / 1000;
 80171dc:	68fb      	ldr	r3, [r7, #12]
 80171de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80171e2:	461a      	mov	r2, r3
 80171e4:	88fb      	ldrh	r3, [r7, #6]
 80171e6:	fb03 f302 	mul.w	r3, r3, r2
 80171ea:	4a2d      	ldr	r2, [pc, #180]	; (80172a0 <inertia_value+0x214>)
 80171ec:	fb82 1203 	smull	r1, r2, r2, r3
 80171f0:	1192      	asrs	r2, r2, #6
 80171f2:	17db      	asrs	r3, r3, #31
 80171f4:	1ad3      	subs	r3, r2, r3
 80171f6:	627b      	str	r3, [r7, #36]	; 0x24
        inc = MIN(inc, abs(vars->target*10-vars->cur));
 80171f8:	68bb      	ldr	r3, [r7, #8]
 80171fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80171fe:	461a      	mov	r2, r3
 8017200:	4613      	mov	r3, r2
 8017202:	009b      	lsls	r3, r3, #2
 8017204:	4413      	add	r3, r2
 8017206:	005b      	lsls	r3, r3, #1
 8017208:	461a      	mov	r2, r3
 801720a:	68bb      	ldr	r3, [r7, #8]
 801720c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017210:	1ad3      	subs	r3, r2, r3
 8017212:	2b00      	cmp	r3, #0
 8017214:	bfb8      	it	lt
 8017216:	425b      	neglt	r3, r3
 8017218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801721a:	4293      	cmp	r3, r2
 801721c:	bfa8      	it	ge
 801721e:	4613      	movge	r3, r2
 8017220:	627b      	str	r3, [r7, #36]	; 0x24
        inc = -1 * sc * inc;
 8017222:	69fb      	ldr	r3, [r7, #28]
 8017224:	425a      	negs	r2, r3
 8017226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017228:	fb02 f303 	mul.w	r3, r2, r3
 801722c:	627b      	str	r3, [r7, #36]	; 0x24
	}
	int vold = vars->cur/10;
 801722e:	68bb      	ldr	r3, [r7, #8]
 8017230:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017234:	4a19      	ldr	r2, [pc, #100]	; (801729c <inertia_value+0x210>)
 8017236:	fb82 1203 	smull	r1, r2, r2, r3
 801723a:	1092      	asrs	r2, r2, #2
 801723c:	17db      	asrs	r3, r3, #31
 801723e:	1ad3      	subs	r3, r2, r3
 8017240:	b21b      	sxth	r3, r3
 8017242:	61bb      	str	r3, [r7, #24]
	vars->cur += inc;
 8017244:	68bb      	ldr	r3, [r7, #8]
 8017246:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801724a:	b29a      	uxth	r2, r3
 801724c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801724e:	b29b      	uxth	r3, r3
 8017250:	4413      	add	r3, r2
 8017252:	b29b      	uxth	r3, r3
 8017254:	b21a      	sxth	r2, r3
 8017256:	68bb      	ldr	r3, [r7, #8]
 8017258:	805a      	strh	r2, [r3, #2]
	int16_t vnew = vars->cur/10;
 801725a:	68bb      	ldr	r3, [r7, #8]
 801725c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017260:	4a0e      	ldr	r2, [pc, #56]	; (801729c <inertia_value+0x210>)
 8017262:	fb82 1203 	smull	r1, r2, r2, r3
 8017266:	1092      	asrs	r2, r2, #2
 8017268:	17db      	asrs	r3, r3, #31
 801726a:	1ad3      	subs	r3, r2, r3
 801726c:	82fb      	strh	r3, [r7, #22]
    if (pchanged) *pchanged = (vnew==vold) ? 0 : 1;
 801726e:	683b      	ldr	r3, [r7, #0]
 8017270:	2b00      	cmp	r3, #0
 8017272:	d00a      	beq.n	801728a <inertia_value+0x1fe>
 8017274:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8017278:	69ba      	ldr	r2, [r7, #24]
 801727a:	429a      	cmp	r2, r3
 801727c:	bf14      	ite	ne
 801727e:	2301      	movne	r3, #1
 8017280:	2300      	moveq	r3, #0
 8017282:	b2db      	uxtb	r3, r3
 8017284:	461a      	mov	r2, r3
 8017286:	683b      	ldr	r3, [r7, #0]
 8017288:	601a      	str	r2, [r3, #0]
    //debug_info(0, "INC/c", inc, vars->cur);
	return vnew;
 801728a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 801728e:	4618      	mov	r0, r3
 8017290:	372c      	adds	r7, #44	; 0x2c
 8017292:	46bd      	mov	sp, r7
 8017294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017298:	4770      	bx	lr
 801729a:	bf00      	nop
 801729c:	66666667 	.word	0x66666667
 80172a0:	10624dd3 	.word	0x10624dd3

080172a4 <itm_debug1>:
{
 80172a4:	b580      	push	{r7, lr}
 80172a6:	b086      	sub	sp, #24
 80172a8:	af02      	add	r7, sp, #8
 80172aa:	60f8      	str	r0, [r7, #12]
 80172ac:	60b9      	str	r1, [r7, #8]
 80172ae:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 80172b0:	4b08      	ldr	r3, [pc, #32]	; (80172d4 <itm_debug1+0x30>)
 80172b2:	681a      	ldr	r2, [r3, #0]
 80172b4:	68fb      	ldr	r3, [r7, #12]
 80172b6:	4013      	ands	r3, r2
 80172b8:	2b00      	cmp	r3, #0
 80172ba:	d007      	beq.n	80172cc <itm_debug1+0x28>
 80172bc:	2301      	movs	r3, #1
 80172be:	9300      	str	r3, [sp, #0]
 80172c0:	2300      	movs	r3, #0
 80172c2:	2200      	movs	r2, #0
 80172c4:	6879      	ldr	r1, [r7, #4]
 80172c6:	68b8      	ldr	r0, [r7, #8]
 80172c8:	f001 fce4 	bl	8018c94 <_itm_debug3>
}
 80172cc:	bf00      	nop
 80172ce:	3710      	adds	r7, #16
 80172d0:	46bd      	mov	sp, r7
 80172d2:	bd80      	pop	{r7, pc}
 80172d4:	200005a4 	.word	0x200005a4

080172d8 <itm_debug2>:
{
 80172d8:	b580      	push	{r7, lr}
 80172da:	b086      	sub	sp, #24
 80172dc:	af02      	add	r7, sp, #8
 80172de:	60f8      	str	r0, [r7, #12]
 80172e0:	60b9      	str	r1, [r7, #8]
 80172e2:	607a      	str	r2, [r7, #4]
 80172e4:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, 0, 2);
 80172e6:	4b09      	ldr	r3, [pc, #36]	; (801730c <itm_debug2+0x34>)
 80172e8:	681a      	ldr	r2, [r3, #0]
 80172ea:	68fb      	ldr	r3, [r7, #12]
 80172ec:	4013      	ands	r3, r2
 80172ee:	2b00      	cmp	r3, #0
 80172f0:	d007      	beq.n	8017302 <itm_debug2+0x2a>
 80172f2:	2302      	movs	r3, #2
 80172f4:	9300      	str	r3, [sp, #0]
 80172f6:	2300      	movs	r3, #0
 80172f8:	683a      	ldr	r2, [r7, #0]
 80172fa:	6879      	ldr	r1, [r7, #4]
 80172fc:	68b8      	ldr	r0, [r7, #8]
 80172fe:	f001 fcc9 	bl	8018c94 <_itm_debug3>
}
 8017302:	bf00      	nop
 8017304:	3710      	adds	r7, #16
 8017306:	46bd      	mov	sp, r7
 8017308:	bd80      	pop	{r7, pc}
 801730a:	bf00      	nop
 801730c:	200005a4 	.word	0x200005a4

08017310 <itm_debug3>:
{
 8017310:	b580      	push	{r7, lr}
 8017312:	b086      	sub	sp, #24
 8017314:	af02      	add	r7, sp, #8
 8017316:	60f8      	str	r0, [r7, #12]
 8017318:	60b9      	str	r1, [r7, #8]
 801731a:	607a      	str	r2, [r7, #4]
 801731c:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, v3, 3);
 801731e:	4b09      	ldr	r3, [pc, #36]	; (8017344 <itm_debug3+0x34>)
 8017320:	681a      	ldr	r2, [r3, #0]
 8017322:	68fb      	ldr	r3, [r7, #12]
 8017324:	4013      	ands	r3, r2
 8017326:	2b00      	cmp	r3, #0
 8017328:	d007      	beq.n	801733a <itm_debug3+0x2a>
 801732a:	2303      	movs	r3, #3
 801732c:	9300      	str	r3, [sp, #0]
 801732e:	69bb      	ldr	r3, [r7, #24]
 8017330:	683a      	ldr	r2, [r7, #0]
 8017332:	6879      	ldr	r1, [r7, #4]
 8017334:	68b8      	ldr	r0, [r7, #8]
 8017336:	f001 fcad 	bl	8018c94 <_itm_debug3>
}
 801733a:	bf00      	nop
 801733c:	3710      	adds	r7, #16
 801733e:	46bd      	mov	sp, r7
 8017340:	bd80      	pop	{r7, pc}
 8017342:	bf00      	nop
 8017344:	200005a4 	.word	0x200005a4

08017348 <pidctl_reset>:
#include <memory.h>
#include "pidctl.h"
#include "misc.h"

void pidctl_reset(_UNUSED_ const pidctl_config_t *c, pidctl_vars_t *v)
{
 8017348:	b480      	push	{r7}
 801734a:	b083      	sub	sp, #12
 801734c:	af00      	add	r7, sp, #0
 801734e:	6078      	str	r0, [r7, #4]
 8017350:	6039      	str	r1, [r7, #0]
    v->has_last = 0;
 8017352:	683a      	ldr	r2, [r7, #0]
 8017354:	7b13      	ldrb	r3, [r2, #12]
 8017356:	f36f 0300 	bfc	r3, #0, #1
 801735a:	7313      	strb	r3, [r2, #12]
	v->last_err = 0;
 801735c:	683b      	ldr	r3, [r7, #0]
 801735e:	2200      	movs	r2, #0
 8017360:	601a      	str	r2, [r3, #0]
	v->sume     = 0;
 8017362:	683b      	ldr	r3, [r7, #0]
 8017364:	2200      	movs	r2, #0
 8017366:	605a      	str	r2, [r3, #4]
	v->target_v = 0;
 8017368:	683b      	ldr	r3, [r7, #0]
 801736a:	2200      	movs	r2, #0
 801736c:	609a      	str	r2, [r3, #8]
	v->stopped = 1;
 801736e:	683a      	ldr	r2, [r7, #0]
 8017370:	7b13      	ldrb	r3, [r2, #12]
 8017372:	f043 0302 	orr.w	r3, r3, #2
 8017376:	7313      	strb	r3, [r2, #12]
	v->has_last = 0;
 8017378:	683a      	ldr	r2, [r7, #0]
 801737a:	7b13      	ldrb	r3, [r2, #12]
 801737c:	f36f 0300 	bfc	r3, #0, #1
 8017380:	7313      	strb	r3, [r2, #12]
}
 8017382:	bf00      	nop
 8017384:	370c      	adds	r7, #12
 8017386:	46bd      	mov	sp, r7
 8017388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801738c:	4770      	bx	lr
	...

08017390 <pidctl_set_target>:

void pidctl_set_target(_UNUSED_ const pidctl_config_t *c, pidctl_vars_t *v, int32_t val)
{
 8017390:	b580      	push	{r7, lr}
 8017392:	b084      	sub	sp, #16
 8017394:	af00      	add	r7, sp, #0
 8017396:	60f8      	str	r0, [r7, #12]
 8017398:	60b9      	str	r1, [r7, #8]
 801739a:	607a      	str	r2, [r7, #4]
	if ((0)) pidctl_reset(c,v);
    if ((0)) v->sume = val;
    itm_debug1(DBG_PID, "pid trg", val);
 801739c:	687a      	ldr	r2, [r7, #4]
 801739e:	4905      	ldr	r1, [pc, #20]	; (80173b4 <pidctl_set_target+0x24>)
 80173a0:	2004      	movs	r0, #4
 80173a2:	f7ff ff7f 	bl	80172a4 <itm_debug1>
	v->target_v = val;
 80173a6:	68bb      	ldr	r3, [r7, #8]
 80173a8:	687a      	ldr	r2, [r7, #4]
 80173aa:	609a      	str	r2, [r3, #8]
}
 80173ac:	bf00      	nop
 80173ae:	3710      	adds	r7, #16
 80173b0:	46bd      	mov	sp, r7
 80173b2:	bd80      	pop	{r7, pc}
 80173b4:	08019ad0 	.word	0x08019ad0

080173b8 <pidctl_value>:

#define MAX_I (25000)

int32_t pidctl_value(const pidctl_config_t *c, pidctl_vars_t *v, int32_t cur_v, uint32_t dt)
{
 80173b8:	b580      	push	{r7, lr}
 80173ba:	b08a      	sub	sp, #40	; 0x28
 80173bc:	af02      	add	r7, sp, #8
 80173be:	60f8      	str	r0, [r7, #12]
 80173c0:	60b9      	str	r1, [r7, #8]
 80173c2:	607a      	str	r2, [r7, #4]
 80173c4:	603b      	str	r3, [r7, #0]
	// cuv in native BEMF value
    if (!dt) dt = 1;
 80173c6:	683b      	ldr	r3, [r7, #0]
 80173c8:	2b00      	cmp	r3, #0
 80173ca:	d101      	bne.n	80173d0 <pidctl_value+0x18>
 80173cc:	2301      	movs	r3, #1
 80173ce:	603b      	str	r3, [r7, #0]
    if (dt>100) dt=100;
 80173d0:	683b      	ldr	r3, [r7, #0]
 80173d2:	2b64      	cmp	r3, #100	; 0x64
 80173d4:	d901      	bls.n	80173da <pidctl_value+0x22>
 80173d6:	2364      	movs	r3, #100	; 0x64
 80173d8:	603b      	str	r3, [r7, #0]
	int32_t err = v->target_v - cur_v;
 80173da:	68bb      	ldr	r3, [r7, #8]
 80173dc:	689a      	ldr	r2, [r3, #8]
 80173de:	687b      	ldr	r3, [r7, #4]
 80173e0:	1ad3      	subs	r3, r2, r3
 80173e2:	61fb      	str	r3, [r7, #28]
    if (err> 2*MAX_PID_VALUE) err =  2*MAX_PID_VALUE;
 80173e4:	69fb      	ldr	r3, [r7, #28]
 80173e6:	f5b3 7f0c 	cmp.w	r3, #560	; 0x230
 80173ea:	dd02      	ble.n	80173f2 <pidctl_value+0x3a>
 80173ec:	f44f 730c 	mov.w	r3, #560	; 0x230
 80173f0:	61fb      	str	r3, [r7, #28]
    if (err<-2*MAX_PID_VALUE) err = -2*MAX_PID_VALUE;
 80173f2:	69fb      	ldr	r3, [r7, #28]
 80173f4:	f513 7f0c 	cmn.w	r3, #560	; 0x230
 80173f8:	da01      	bge.n	80173fe <pidctl_value+0x46>
 80173fa:	4b3c      	ldr	r3, [pc, #240]	; (80174ec <pidctl_value+0x134>)
 80173fc:	61fb      	str	r3, [r7, #28]

    int32_t dv = (v->has_last) ? 1000*(err - v->last_err)/((int32_t)dt) : 0; //XXX
 80173fe:	68bb      	ldr	r3, [r7, #8]
 8017400:	7b1b      	ldrb	r3, [r3, #12]
 8017402:	f003 0301 	and.w	r3, r3, #1
 8017406:	b2db      	uxtb	r3, r3
 8017408:	2b00      	cmp	r3, #0
 801740a:	d00b      	beq.n	8017424 <pidctl_value+0x6c>
 801740c:	68bb      	ldr	r3, [r7, #8]
 801740e:	681b      	ldr	r3, [r3, #0]
 8017410:	69fa      	ldr	r2, [r7, #28]
 8017412:	1ad3      	subs	r3, r2, r3
 8017414:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8017418:	fb02 f203 	mul.w	r2, r2, r3
 801741c:	683b      	ldr	r3, [r7, #0]
 801741e:	fb92 f3f3 	sdiv	r3, r2, r3
 8017422:	e000      	b.n	8017426 <pidctl_value+0x6e>
 8017424:	2300      	movs	r3, #0
 8017426:	61bb      	str	r3, [r7, #24]
	v->last_err = err;
 8017428:	68bb      	ldr	r3, [r7, #8]
 801742a:	69fa      	ldr	r2, [r7, #28]
 801742c:	601a      	str	r2, [r3, #0]
    v->has_last = 1;
 801742e:	68ba      	ldr	r2, [r7, #8]
 8017430:	7b13      	ldrb	r3, [r2, #12]
 8017432:	f043 0301 	orr.w	r3, r3, #1
 8017436:	7313      	strb	r3, [r2, #12]
	if ((1)) v->sume += err*dt;
 8017438:	68bb      	ldr	r3, [r7, #8]
 801743a:	685b      	ldr	r3, [r3, #4]
 801743c:	4619      	mov	r1, r3
 801743e:	69fb      	ldr	r3, [r7, #28]
 8017440:	683a      	ldr	r2, [r7, #0]
 8017442:	fb02 f303 	mul.w	r3, r2, r3
 8017446:	440b      	add	r3, r1
 8017448:	461a      	mov	r2, r3
 801744a:	68bb      	ldr	r3, [r7, #8]
 801744c:	605a      	str	r2, [r3, #4]
    else     v->sume = v->sume*.99 + err*dt;
    if (v->sume>MAX_I) v->sume = MAX_I;
 801744e:	68bb      	ldr	r3, [r7, #8]
 8017450:	685b      	ldr	r3, [r3, #4]
 8017452:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8017456:	4293      	cmp	r3, r2
 8017458:	dd04      	ble.n	8017464 <pidctl_value+0xac>
 801745a:	68bb      	ldr	r3, [r7, #8]
 801745c:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8017460:	605a      	str	r2, [r3, #4]
 8017462:	e007      	b.n	8017474 <pidctl_value+0xbc>
    else if (v->sume<-MAX_I) v->sume = -MAX_I;
 8017464:	68bb      	ldr	r3, [r7, #8]
 8017466:	685b      	ldr	r3, [r3, #4]
 8017468:	4a21      	ldr	r2, [pc, #132]	; (80174f0 <pidctl_value+0x138>)
 801746a:	4293      	cmp	r3, r2
 801746c:	da02      	bge.n	8017474 <pidctl_value+0xbc>
 801746e:	68bb      	ldr	r3, [r7, #8]
 8017470:	4a1f      	ldr	r2, [pc, #124]	; (80174f0 <pidctl_value+0x138>)
 8017472:	605a      	str	r2, [r3, #4]
	int32_t iv = v->sume / 100;
 8017474:	68bb      	ldr	r3, [r7, #8]
 8017476:	685b      	ldr	r3, [r3, #4]
 8017478:	4a1e      	ldr	r2, [pc, #120]	; (80174f4 <pidctl_value+0x13c>)
 801747a:	fb82 1203 	smull	r1, r2, r2, r3
 801747e:	1152      	asrs	r2, r2, #5
 8017480:	17db      	asrs	r3, r3, #31
 8017482:	1ad3      	subs	r3, r2, r3
 8017484:	617b      	str	r3, [r7, #20]

	//debug_info('T', 0, "PID  ", err, iv, dv);
	itm_debug2(DBG_PID, "pid tc", v->target_v, cur_v);
 8017486:	68bb      	ldr	r3, [r7, #8]
 8017488:	689a      	ldr	r2, [r3, #8]
 801748a:	687b      	ldr	r3, [r7, #4]
 801748c:	491a      	ldr	r1, [pc, #104]	; (80174f8 <pidctl_value+0x140>)
 801748e:	2004      	movs	r0, #4
 8017490:	f7ff ff22 	bl	80172d8 <itm_debug2>
    itm_debug3(DBG_PID, "pid edi", err, dv, v->sume);
 8017494:	68bb      	ldr	r3, [r7, #8]
 8017496:	685b      	ldr	r3, [r3, #4]
 8017498:	9300      	str	r3, [sp, #0]
 801749a:	69bb      	ldr	r3, [r7, #24]
 801749c:	69fa      	ldr	r2, [r7, #28]
 801749e:	4917      	ldr	r1, [pc, #92]	; (80174fc <pidctl_value+0x144>)
 80174a0:	2004      	movs	r0, #4
 80174a2:	f7ff ff35 	bl	8017310 <itm_debug3>

	int32_t r = c->kP * err + (c->kD * dv)/1000 + c->kI * iv;
 80174a6:	68fb      	ldr	r3, [r7, #12]
 80174a8:	681b      	ldr	r3, [r3, #0]
 80174aa:	69fa      	ldr	r2, [r7, #28]
 80174ac:	fb02 f203 	mul.w	r2, r2, r3
 80174b0:	68fb      	ldr	r3, [r7, #12]
 80174b2:	689b      	ldr	r3, [r3, #8]
 80174b4:	69b9      	ldr	r1, [r7, #24]
 80174b6:	fb01 f303 	mul.w	r3, r1, r3
 80174ba:	4911      	ldr	r1, [pc, #68]	; (8017500 <pidctl_value+0x148>)
 80174bc:	fb81 0103 	smull	r0, r1, r1, r3
 80174c0:	1189      	asrs	r1, r1, #6
 80174c2:	17db      	asrs	r3, r3, #31
 80174c4:	1acb      	subs	r3, r1, r3
 80174c6:	441a      	add	r2, r3
 80174c8:	68fb      	ldr	r3, [r7, #12]
 80174ca:	685b      	ldr	r3, [r3, #4]
 80174cc:	6979      	ldr	r1, [r7, #20]
 80174ce:	fb01 f303 	mul.w	r3, r1, r3
 80174d2:	4413      	add	r3, r2
 80174d4:	613b      	str	r3, [r7, #16]
	//debug_info('T', 0, "PID*k",  c->kP * err, c->kI * iv, (c->kD * dv)/1000);

	return r/1000;
 80174d6:	693b      	ldr	r3, [r7, #16]
 80174d8:	4a09      	ldr	r2, [pc, #36]	; (8017500 <pidctl_value+0x148>)
 80174da:	fb82 1203 	smull	r1, r2, r2, r3
 80174de:	1192      	asrs	r2, r2, #6
 80174e0:	17db      	asrs	r3, r3, #31
 80174e2:	1ad3      	subs	r3, r2, r3
}
 80174e4:	4618      	mov	r0, r3
 80174e6:	3720      	adds	r7, #32
 80174e8:	46bd      	mov	sp, r7
 80174ea:	bd80      	pop	{r7, pc}
 80174ec:	fffffdd0 	.word	0xfffffdd0
 80174f0:	ffff9e58 	.word	0xffff9e58
 80174f4:	51eb851f 	.word	0x51eb851f
 80174f8:	08019ad8 	.word	0x08019ad8
 80174fc:	08019ae0 	.word	0x08019ae0
 8017500:	10624dd3 	.word	0x10624dd3

08017504 <itm_debug1>:
{
 8017504:	b580      	push	{r7, lr}
 8017506:	b086      	sub	sp, #24
 8017508:	af02      	add	r7, sp, #8
 801750a:	60f8      	str	r0, [r7, #12]
 801750c:	60b9      	str	r1, [r7, #8]
 801750e:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 8017510:	4b08      	ldr	r3, [pc, #32]	; (8017534 <itm_debug1+0x30>)
 8017512:	681a      	ldr	r2, [r3, #0]
 8017514:	68fb      	ldr	r3, [r7, #12]
 8017516:	4013      	ands	r3, r2
 8017518:	2b00      	cmp	r3, #0
 801751a:	d007      	beq.n	801752c <itm_debug1+0x28>
 801751c:	2301      	movs	r3, #1
 801751e:	9300      	str	r3, [sp, #0]
 8017520:	2300      	movs	r3, #0
 8017522:	2200      	movs	r2, #0
 8017524:	6879      	ldr	r1, [r7, #4]
 8017526:	68b8      	ldr	r0, [r7, #8]
 8017528:	f001 fbb4 	bl	8018c94 <_itm_debug3>
}
 801752c:	bf00      	nop
 801752e:	3710      	adds	r7, #16
 8017530:	46bd      	mov	sp, r7
 8017532:	bd80      	pop	{r7, pc}
 8017534:	200005a4 	.word	0x200005a4

08017538 <itm_debug2>:
{
 8017538:	b580      	push	{r7, lr}
 801753a:	b086      	sub	sp, #24
 801753c:	af02      	add	r7, sp, #8
 801753e:	60f8      	str	r0, [r7, #12]
 8017540:	60b9      	str	r1, [r7, #8]
 8017542:	607a      	str	r2, [r7, #4]
 8017544:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, 0, 2);
 8017546:	4b09      	ldr	r3, [pc, #36]	; (801756c <itm_debug2+0x34>)
 8017548:	681a      	ldr	r2, [r3, #0]
 801754a:	68fb      	ldr	r3, [r7, #12]
 801754c:	4013      	ands	r3, r2
 801754e:	2b00      	cmp	r3, #0
 8017550:	d007      	beq.n	8017562 <itm_debug2+0x2a>
 8017552:	2302      	movs	r3, #2
 8017554:	9300      	str	r3, [sp, #0]
 8017556:	2300      	movs	r3, #0
 8017558:	683a      	ldr	r2, [r7, #0]
 801755a:	6879      	ldr	r1, [r7, #4]
 801755c:	68b8      	ldr	r0, [r7, #8]
 801755e:	f001 fb99 	bl	8018c94 <_itm_debug3>
}
 8017562:	bf00      	nop
 8017564:	3710      	adds	r7, #16
 8017566:	46bd      	mov	sp, r7
 8017568:	bd80      	pop	{r7, pc}
 801756a:	bf00      	nop
 801756c:	200005a4 	.word	0x200005a4

08017570 <itm_debug3>:
{
 8017570:	b580      	push	{r7, lr}
 8017572:	b086      	sub	sp, #24
 8017574:	af02      	add	r7, sp, #8
 8017576:	60f8      	str	r0, [r7, #12]
 8017578:	60b9      	str	r1, [r7, #8]
 801757a:	607a      	str	r2, [r7, #4]
 801757c:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, v3, 3);
 801757e:	4b09      	ldr	r3, [pc, #36]	; (80175a4 <itm_debug3+0x34>)
 8017580:	681a      	ldr	r2, [r3, #0]
 8017582:	68fb      	ldr	r3, [r7, #12]
 8017584:	4013      	ands	r3, r2
 8017586:	2b00      	cmp	r3, #0
 8017588:	d007      	beq.n	801759a <itm_debug3+0x2a>
 801758a:	2303      	movs	r3, #3
 801758c:	9300      	str	r3, [sp, #0]
 801758e:	69bb      	ldr	r3, [r7, #24]
 8017590:	683a      	ldr	r2, [r7, #0]
 8017592:	6879      	ldr	r1, [r7, #4]
 8017594:	68b8      	ldr	r0, [r7, #8]
 8017596:	f001 fb7d 	bl	8018c94 <_itm_debug3>
}
 801759a:	bf00      	nop
 801759c:	3710      	adds	r7, #16
 801759e:	46bd      	mov	sp, r7
 80175a0:	bd80      	pop	{r7, pc}
 80175a2:	bf00      	nop
 80175a4:	200005a4 	.word	0x200005a4

080175a8 <train_error>:
{
 80175a8:	b580      	push	{r7, lr}
 80175aa:	b082      	sub	sp, #8
 80175ac:	af00      	add	r7, sp, #0
 80175ae:	6078      	str	r0, [r7, #4]
 80175b0:	6039      	str	r1, [r7, #0]
	return trainctl_error('T', code, msg);
 80175b2:	683a      	ldr	r2, [r7, #0]
 80175b4:	6879      	ldr	r1, [r7, #4]
 80175b6:	2054      	movs	r0, #84	; 0x54
 80175b8:	f7fe fb74 	bl	8015ca4 <trainctl_error>
 80175bc:	4603      	mov	r3, r0
}
 80175be:	4618      	mov	r0, r3
 80175c0:	3708      	adds	r7, #8
 80175c2:	46bd      	mov	sp, r7
 80175c4:	bd80      	pop	{r7, pc}

080175c6 <train_notif>:
{
 80175c6:	b580      	push	{r7, lr}
 80175c8:	b086      	sub	sp, #24
 80175ca:	af02      	add	r7, sp, #8
 80175cc:	60ba      	str	r2, [r7, #8]
 80175ce:	607b      	str	r3, [r7, #4]
 80175d0:	4603      	mov	r3, r0
 80175d2:	73fb      	strb	r3, [r7, #15]
 80175d4:	460b      	mov	r3, r1
 80175d6:	73bb      	strb	r3, [r7, #14]
	trainctl_notif('T', train_idx, cmd, dta, dtalen);
 80175d8:	7bba      	ldrb	r2, [r7, #14]
 80175da:	7bf9      	ldrb	r1, [r7, #15]
 80175dc:	687b      	ldr	r3, [r7, #4]
 80175de:	9300      	str	r3, [sp, #0]
 80175e0:	68bb      	ldr	r3, [r7, #8]
 80175e2:	2054      	movs	r0, #84	; 0x54
 80175e4:	f7ff f9f6 	bl	80169d4 <trainctl_notif>
}
 80175e8:	bf00      	nop
 80175ea:	3710      	adds	r7, #16
 80175ec:	46bd      	mov	sp, r7
 80175ee:	bd80      	pop	{r7, pc}

080175f0 <debug_info>:
{
 80175f0:	b580      	push	{r7, lr}
 80175f2:	b088      	sub	sp, #32
 80175f4:	af04      	add	r7, sp, #16
 80175f6:	60f8      	str	r0, [r7, #12]
 80175f8:	60b9      	str	r1, [r7, #8]
 80175fa:	607a      	str	r2, [r7, #4]
 80175fc:	603b      	str	r3, [r7, #0]
	trainctl_notif2(sel, num, 'D', msg, v1, v2, v3);
 80175fe:	68fb      	ldr	r3, [r7, #12]
 8017600:	b2d8      	uxtb	r0, r3
 8017602:	68bb      	ldr	r3, [r7, #8]
 8017604:	b2d9      	uxtb	r1, r3
 8017606:	69fb      	ldr	r3, [r7, #28]
 8017608:	9302      	str	r3, [sp, #8]
 801760a:	69bb      	ldr	r3, [r7, #24]
 801760c:	9301      	str	r3, [sp, #4]
 801760e:	683b      	ldr	r3, [r7, #0]
 8017610:	9300      	str	r3, [sp, #0]
 8017612:	687b      	ldr	r3, [r7, #4]
 8017614:	2244      	movs	r2, #68	; 0x44
 8017616:	f7ff fa01 	bl	8016a1c <trainctl_notif2>
}
 801761a:	bf00      	nop
 801761c:	3710      	adds	r7, #16
 801761e:	46bd      	mov	sp, r7
 8017620:	bd80      	pop	{r7, pc}
	...

08017624 <mqf_read_to_spdctl>:
#define CMD_BEMF_OFF		0x41

#define CMD_SETVPWM			0x01
#define CMD_STOP			0x02

LFMQUEUE_DEF_H(to_spdctl, msg_64_t)
 8017624:	b580      	push	{r7, lr}
 8017626:	b082      	sub	sp, #8
 8017628:	af00      	add	r7, sp, #0
 801762a:	6078      	str	r0, [r7, #4]
 801762c:	6879      	ldr	r1, [r7, #4]
 801762e:	4804      	ldr	r0, [pc, #16]	; (8017640 <mqf_read_to_spdctl+0x1c>)
 8017630:	f001 fcb0 	bl	8018f94 <mqf_read>
 8017634:	4603      	mov	r3, r0
 8017636:	4618      	mov	r0, r3
 8017638:	3708      	adds	r7, #8
 801763a:	46bd      	mov	sp, r7
 801763c:	bd80      	pop	{r7, pc}
 801763e:	bf00      	nop
 8017640:	20000500 	.word	0x20000500

08017644 <mqf_write_from_spdctl>:
LFMQUEUE_DEF_H(from_spdctl, msg_64_t)
 8017644:	b580      	push	{r7, lr}
 8017646:	b082      	sub	sp, #8
 8017648:	af00      	add	r7, sp, #0
 801764a:	6078      	str	r0, [r7, #4]
 801764c:	6879      	ldr	r1, [r7, #4]
 801764e:	4804      	ldr	r0, [pc, #16]	; (8017660 <mqf_write_from_spdctl+0x1c>)
 8017650:	f001 fc26 	bl	8018ea0 <mqf_write>
 8017654:	4603      	mov	r3, r0
 8017656:	4618      	mov	r0, r3
 8017658:	3708      	adds	r7, #8
 801765a:	46bd      	mov	sp, r7
 801765c:	bd80      	pop	{r7, pc}
 801765e:	bf00      	nop
 8017660:	2000050c 	.word	0x2000050c

08017664 <spdctl_reset>:

static void pose_check_trig(int numtrain, train_vars_t *tvars, int32_t lastincr);


static void spdctl_reset(void)
{
 8017664:	b580      	push	{r7, lr}
 8017666:	b082      	sub	sp, #8
 8017668:	af00      	add	r7, sp, #0
	memset(trspc_vars, 0, sizeof(trspc_vars));
 801766a:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 801766e:	2100      	movs	r1, #0
 8017670:	4811      	ldr	r0, [pc, #68]	; (80176b8 <spdctl_reset+0x54>)
 8017672:	f001 fd30 	bl	80190d6 <memset>
	for (int  i = 0; i<NUM_TRAINS; i++) {
 8017676:	2300      	movs	r3, #0
 8017678:	607b      	str	r3, [r7, #4]
 801767a:	e016      	b.n	80176aa <spdctl_reset+0x46>
		trspc_vars[i].C1 = 0xFF;
 801767c:	490e      	ldr	r1, [pc, #56]	; (80176b8 <spdctl_reset+0x54>)
 801767e:	687a      	ldr	r2, [r7, #4]
 8017680:	4613      	mov	r3, r2
 8017682:	00db      	lsls	r3, r3, #3
 8017684:	1a9b      	subs	r3, r3, r2
 8017686:	00db      	lsls	r3, r3, #3
 8017688:	440b      	add	r3, r1
 801768a:	331c      	adds	r3, #28
 801768c:	22ff      	movs	r2, #255	; 0xff
 801768e:	701a      	strb	r2, [r3, #0]
		trspc_vars[i].C2 = 0xFF;
 8017690:	4909      	ldr	r1, [pc, #36]	; (80176b8 <spdctl_reset+0x54>)
 8017692:	687a      	ldr	r2, [r7, #4]
 8017694:	4613      	mov	r3, r2
 8017696:	00db      	lsls	r3, r3, #3
 8017698:	1a9b      	subs	r3, r3, r2
 801769a:	00db      	lsls	r3, r3, #3
 801769c:	440b      	add	r3, r1
 801769e:	331d      	adds	r3, #29
 80176a0:	22ff      	movs	r2, #255	; 0xff
 80176a2:	701a      	strb	r2, [r3, #0]
	for (int  i = 0; i<NUM_TRAINS; i++) {
 80176a4:	687b      	ldr	r3, [r7, #4]
 80176a6:	3301      	adds	r3, #1
 80176a8:	607b      	str	r3, [r7, #4]
 80176aa:	687b      	ldr	r3, [r7, #4]
 80176ac:	2b07      	cmp	r3, #7
 80176ae:	dde5      	ble.n	801767c <spdctl_reset+0x18>
	}
}
 80176b0:	bf00      	nop
 80176b2:	3708      	adds	r7, #8
 80176b4:	46bd      	mov	sp, r7
 80176b6:	bd80      	pop	{r7, pc}
 80176b8:	200053e8 	.word	0x200053e8

080176bc <spdctl_run_tick>:


void spdctl_run_tick(_UNUSED_ uint32_t notif_flags, _UNUSED_ uint32_t tick, uint32_t dt)
{
 80176bc:	b580      	push	{r7, lr}
 80176be:	b090      	sub	sp, #64	; 0x40
 80176c0:	af02      	add	r7, sp, #8
 80176c2:	60f8      	str	r0, [r7, #12]
 80176c4:	60b9      	str	r1, [r7, #8]
 80176c6:	607a      	str	r2, [r7, #4]
	train_tick_last_dt = dt;
 80176c8:	4aa0      	ldr	r2, [pc, #640]	; (801794c <spdctl_run_tick+0x290>)
 80176ca:	687b      	ldr	r3, [r7, #4]
 80176cc:	6013      	str	r3, [r2, #0]
	train_ntick++;
 80176ce:	4ba0      	ldr	r3, [pc, #640]	; (8017950 <spdctl_run_tick+0x294>)
 80176d0:	681b      	ldr	r3, [r3, #0]
 80176d2:	3301      	adds	r3, #1
 80176d4:	4a9e      	ldr	r2, [pc, #632]	; (8017950 <spdctl_run_tick+0x294>)
 80176d6:	6013      	str	r3, [r2, #0]

	itm_debug1(DBG_SPDCTL ,"------- tk", (int) notif_flags);
 80176d8:	68fb      	ldr	r3, [r7, #12]
 80176da:	461a      	mov	r2, r3
 80176dc:	499d      	ldr	r1, [pc, #628]	; (8017954 <spdctl_run_tick+0x298>)
 80176de:	2010      	movs	r0, #16
 80176e0:	f7ff ff10 	bl	8017504 <itm_debug1>
	static int first=1;
	if (first) {
 80176e4:	4b9c      	ldr	r3, [pc, #624]	; (8017958 <spdctl_run_tick+0x29c>)
 80176e6:	681b      	ldr	r3, [r3, #0]
 80176e8:	2b00      	cmp	r3, #0
 80176ea:	d004      	beq.n	80176f6 <spdctl_run_tick+0x3a>
		first = 0;
 80176ec:	4b9a      	ldr	r3, [pc, #616]	; (8017958 <spdctl_run_tick+0x29c>)
 80176ee:	2200      	movs	r2, #0
 80176f0:	601a      	str	r2, [r3, #0]
		spdctl_reset();
 80176f2:	f7ff ffb7 	bl	8017664 <spdctl_reset>
       
	}
	/* process messages */
	for (;;) {
		msg_64_t m;
		int rc = mqf_read_to_spdctl(&m);
 80176f6:	f107 0318 	add.w	r3, r7, #24
 80176fa:	4618      	mov	r0, r3
 80176fc:	f7ff ff92 	bl	8017624 <mqf_read_to_spdctl>
 8017700:	6338      	str	r0, [r7, #48]	; 0x30
		if (rc) break;
 8017702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017704:	2b00      	cmp	r3, #0
 8017706:	d002      	beq.n	801770e <spdctl_run_tick+0x52>
                    break;
            }
        }
	}
	/* process trains */
	for (int i=0; i<NUM_TRAINS; i++) {
 8017708:	2300      	movs	r3, #0
 801770a:	637b      	str	r3, [r7, #52]	; 0x34
 801770c:	e117      	b.n	801793e <spdctl_run_tick+0x282>
        switch (m.cmd) {
 801770e:	7ebb      	ldrb	r3, [r7, #26]
 8017710:	2bfc      	cmp	r3, #252	; 0xfc
 8017712:	d007      	beq.n	8017724 <spdctl_run_tick+0x68>
 8017714:	2bfc      	cmp	r3, #252	; 0xfc
 8017716:	db16      	blt.n	8017746 <spdctl_run_tick+0x8a>
 8017718:	3bfe      	subs	r3, #254	; 0xfe
 801771a:	2b01      	cmp	r3, #1
 801771c:	d813      	bhi.n	8017746 <spdctl_run_tick+0x8a>
            spdctl_reset();
 801771e:	f7ff ffa1 	bl	8017664 <spdctl_reset>
            break;
 8017722:	e013      	b.n	801774c <spdctl_run_tick+0x90>
        	if (m.v1u != run_mode) {
 8017724:	8bba      	ldrh	r2, [r7, #28]
 8017726:	4b8d      	ldr	r3, [pc, #564]	; (801795c <spdctl_run_tick+0x2a0>)
 8017728:	781b      	ldrb	r3, [r3, #0]
 801772a:	b29b      	uxth	r3, r3
 801772c:	429a      	cmp	r2, r3
 801772e:	d00c      	beq.n	801774a <spdctl_run_tick+0x8e>
        		run_mode = (runmode_t) m.v1u;
 8017730:	8bbb      	ldrh	r3, [r7, #28]
 8017732:	b2da      	uxtb	r2, r3
 8017734:	4b89      	ldr	r3, [pc, #548]	; (801795c <spdctl_run_tick+0x2a0>)
 8017736:	701a      	strb	r2, [r3, #0]
        		testerAddr = m.from;
 8017738:	7e7a      	ldrb	r2, [r7, #25]
 801773a:	4b89      	ldr	r3, [pc, #548]	; (8017960 <spdctl_run_tick+0x2a4>)
 801773c:	701a      	strb	r2, [r3, #0]
        		first = 1;
 801773e:	4b86      	ldr	r3, [pc, #536]	; (8017958 <spdctl_run_tick+0x29c>)
 8017740:	2201      	movs	r2, #1
 8017742:	601a      	str	r2, [r3, #0]
            break;
 8017744:	e001      	b.n	801774a <spdctl_run_tick+0x8e>
        	break;
 8017746:	bf00      	nop
 8017748:	e000      	b.n	801774c <spdctl_run_tick+0x90>
            break;
 801774a:	bf00      	nop
        switch (run_mode) {
 801774c:	4b83      	ldr	r3, [pc, #524]	; (801795c <spdctl_run_tick+0x2a0>)
 801774e:	781b      	ldrb	r3, [r3, #0]
 8017750:	2b00      	cmp	r3, #0
 8017752:	f000 80e5 	beq.w	8017920 <spdctl_run_tick+0x264>
 8017756:	2b01      	cmp	r3, #1
 8017758:	d000      	beq.n	801775c <spdctl_run_tick+0xa0>
        	continue;
 801775a:	e0e8      	b.n	801792e <spdctl_run_tick+0x272>
        if (IS_TRAIN_SC(m.to)) {
 801775c:	7e3b      	ldrb	r3, [r7, #24]
 801775e:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8017762:	2bc8      	cmp	r3, #200	; 0xc8
 8017764:	f040 80de 	bne.w	8017924 <spdctl_run_tick+0x268>
            int tidx = m.to & 0x7;
 8017768:	7e3b      	ldrb	r3, [r7, #24]
 801776a:	f003 0307 	and.w	r3, r3, #7
 801776e:	62fb      	str	r3, [r7, #44]	; 0x2c
            USE_TRAIN(tidx)
 8017770:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017772:	f7fe fc47 	bl	8016004 <get_train_cnf>
 8017776:	62b8      	str	r0, [r7, #40]	; 0x28
 8017778:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801777a:	4613      	mov	r3, r2
 801777c:	00db      	lsls	r3, r3, #3
 801777e:	1a9b      	subs	r3, r3, r2
 8017780:	00db      	lsls	r3, r3, #3
 8017782:	4a78      	ldr	r2, [pc, #480]	; (8017964 <spdctl_run_tick+0x2a8>)
 8017784:	4413      	add	r3, r2
 8017786:	627b      	str	r3, [r7, #36]	; 0x24
            switch (m.cmd) {
 8017788:	7ebb      	ldrb	r3, [r7, #26]
 801778a:	2b10      	cmp	r3, #16
 801778c:	f000 8093 	beq.w	80178b6 <spdctl_run_tick+0x1fa>
 8017790:	2b10      	cmp	r3, #16
 8017792:	dc02      	bgt.n	801779a <spdctl_run_tick+0xde>
 8017794:	2b03      	cmp	r3, #3
 8017796:	d007      	beq.n	80177a8 <spdctl_run_tick+0xec>
                    break;
 8017798:	e0c9      	b.n	801792e <spdctl_run_tick+0x272>
            switch (m.cmd) {
 801779a:	2b11      	cmp	r3, #17
 801779c:	f000 8096 	beq.w	80178cc <spdctl_run_tick+0x210>
 80177a0:	2b50      	cmp	r3, #80	; 0x50
 80177a2:	f000 80ad 	beq.w	8017900 <spdctl_run_tick+0x244>
                    break;
 80177a6:	e0c2      	b.n	801792e <spdctl_run_tick+0x272>
                    if (m.from == tvars->C1) {
 80177a8:	7e7a      	ldrb	r2, [r7, #25]
 80177aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177ac:	7f1b      	ldrb	r3, [r3, #28]
 80177ae:	429a      	cmp	r2, r3
 80177b0:	d119      	bne.n	80177e6 <spdctl_run_tick+0x12a>
                        itm_debug3(DBG_PID, "st bemf", tidx, m.v1, m.from);
 80177b2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80177b6:	461a      	mov	r2, r3
 80177b8:	7e7b      	ldrb	r3, [r7, #25]
 80177ba:	9300      	str	r3, [sp, #0]
 80177bc:	4613      	mov	r3, r2
 80177be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80177c0:	4969      	ldr	r1, [pc, #420]	; (8017968 <spdctl_run_tick+0x2ac>)
 80177c2:	2004      	movs	r0, #4
 80177c4:	f7ff fed4 	bl	8017570 <itm_debug3>
                        if (!tvars->c2bemf) tvars->bemf_cv = m.v1;
 80177c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177ca:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80177ce:	f003 0301 	and.w	r3, r3, #1
 80177d2:	b2db      	uxtb	r3, r3
 80177d4:	2b00      	cmp	r3, #0
 80177d6:	f040 80a7 	bne.w	8017928 <spdctl_run_tick+0x26c>
 80177da:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80177de:	461a      	mov	r2, r3
 80177e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177e2:	605a      	str	r2, [r3, #4]
                        break;
 80177e4:	e0a0      	b.n	8017928 <spdctl_run_tick+0x26c>
                    } else if (m.from == tvars->C2) {
 80177e6:	7e7a      	ldrb	r2, [r7, #25]
 80177e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177ea:	7f5b      	ldrb	r3, [r3, #29]
 80177ec:	429a      	cmp	r2, r3
 80177ee:	d159      	bne.n	80178a4 <spdctl_run_tick+0x1e8>
                        itm_debug3(DBG_PID, "c2 bemf", tidx, m.v1, m.from);
 80177f0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80177f4:	461a      	mov	r2, r3
 80177f6:	7e7b      	ldrb	r3, [r7, #25]
 80177f8:	9300      	str	r3, [sp, #0]
 80177fa:	4613      	mov	r3, r2
 80177fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80177fe:	495b      	ldr	r1, [pc, #364]	; (801796c <spdctl_run_tick+0x2b0>)
 8017800:	2004      	movs	r0, #4
 8017802:	f7ff feb5 	bl	8017570 <itm_debug3>
                        if (tvars->c2bemf) tvars->bemf_cv = m.v1;
 8017806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017808:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 801780c:	f003 0301 	and.w	r3, r3, #1
 8017810:	b2db      	uxtb	r3, r3
 8017812:	2b00      	cmp	r3, #0
 8017814:	d005      	beq.n	8017822 <spdctl_run_tick+0x166>
 8017816:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801781a:	461a      	mov	r2, r3
 801781c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801781e:	605a      	str	r2, [r3, #4]
                    break;
 8017820:	e084      	b.n	801792c <spdctl_run_tick+0x270>
                        else if (abs(m.v1) > abs(tvars->bemf_cv)+50) {
 8017822:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8017826:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 801782a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 801782e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017830:	685b      	ldr	r3, [r3, #4]
 8017832:	2b00      	cmp	r3, #0
 8017834:	bfb8      	it	lt
 8017836:	425b      	neglt	r3, r3
 8017838:	3332      	adds	r3, #50	; 0x32
 801783a:	429a      	cmp	r2, r3
 801783c:	dd76      	ble.n	801792c <spdctl_run_tick+0x270>
                        	itm_debug3(DBG_SPDCTL|DBG_PRES, "c2_hi", tidx, m.v1, tvars->bemf_cv);
 801783e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8017842:	461a      	mov	r2, r3
 8017844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017846:	685b      	ldr	r3, [r3, #4]
 8017848:	9300      	str	r3, [sp, #0]
 801784a:	4613      	mov	r3, r2
 801784c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801784e:	4948      	ldr	r1, [pc, #288]	; (8017970 <spdctl_run_tick+0x2b4>)
 8017850:	2050      	movs	r0, #80	; 0x50
 8017852:	f7ff fe8d 	bl	8017570 <itm_debug3>
                        	m.from = MA_TRAIN_SC(tidx);
 8017856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017858:	b25b      	sxtb	r3, r3
 801785a:	f003 0307 	and.w	r3, r3, #7
 801785e:	b25b      	sxtb	r3, r3
 8017860:	f063 0337 	orn	r3, r3, #55	; 0x37
 8017864:	b25b      	sxtb	r3, r3
 8017866:	b2db      	uxtb	r3, r3
 8017868:	747b      	strb	r3, [r7, #17]
                        	m.to = MA_CONTROL_T(tidx);
 801786a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801786c:	b25b      	sxtb	r3, r3
 801786e:	f003 0307 	and.w	r3, r3, #7
 8017872:	b25b      	sxtb	r3, r3
 8017874:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8017878:	b25b      	sxtb	r3, r3
 801787a:	b2db      	uxtb	r3, r3
 801787c:	743b      	strb	r3, [r7, #16]
                        	m.cmd = CMD_BEMF_DETECT_ON_C2;
 801787e:	2313      	movs	r3, #19
 8017880:	74bb      	strb	r3, [r7, #18]
                        	m.v1u = tvars->C2;
 8017882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017884:	7f5b      	ldrb	r3, [r3, #29]
 8017886:	b29b      	uxth	r3, r3
 8017888:	82bb      	strh	r3, [r7, #20]
                            mqf_write_from_spdctl(&m);
 801788a:	f107 0310 	add.w	r3, r7, #16
 801788e:	4618      	mov	r0, r3
 8017890:	f7ff fed8 	bl	8017644 <mqf_write_from_spdctl>
                            tvars->c2bemf = 1;
 8017894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017896:	f892 3036 	ldrb.w	r3, [r2, #54]	; 0x36
 801789a:	f043 0301 	orr.w	r3, r3, #1
 801789e:	f882 3036 	strb.w	r3, [r2, #54]	; 0x36
                    break;
 80178a2:	e043      	b.n	801792c <spdctl_run_tick+0x270>
                        itm_debug2(DBG_ERR|DBG_PID, "unk bemf", m.v1, m.from);
 80178a4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80178a8:	461a      	mov	r2, r3
 80178aa:	7e7b      	ldrb	r3, [r7, #25]
 80178ac:	4931      	ldr	r1, [pc, #196]	; (8017974 <spdctl_run_tick+0x2b8>)
 80178ae:	4832      	ldr	r0, [pc, #200]	; (8017978 <spdctl_run_tick+0x2bc>)
 80178b0:	f7ff fe42 	bl	8017538 <itm_debug2>
                    break;
 80178b4:	e03a      	b.n	801792c <spdctl_run_tick+0x270>
                    itm_debug1(DBG_SPDCTL, "set_t_spd", m.v1u);
 80178b6:	8bbb      	ldrh	r3, [r7, #28]
 80178b8:	461a      	mov	r2, r3
 80178ba:	4930      	ldr	r1, [pc, #192]	; (801797c <spdctl_run_tick+0x2c0>)
 80178bc:	2010      	movs	r0, #16
 80178be:	f7ff fe21 	bl	8017504 <itm_debug1>
                    tvars->target_speed = (int16_t) m.v1u;
 80178c2:	8bbb      	ldrh	r3, [r7, #28]
 80178c4:	b21a      	sxth	r2, r3
 80178c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178c8:	801a      	strh	r2, [r3, #0]
                    break;
 80178ca:	e030      	b.n	801792e <spdctl_run_tick+0x272>
                    itm_debug3(DBG_SPDCTL|DBG_CTRL, "set_c1_c2", tidx, m.vbytes[0], m.vbytes[2]);
 80178cc:	7f3b      	ldrb	r3, [r7, #28]
 80178ce:	461a      	mov	r2, r3
 80178d0:	7fbb      	ldrb	r3, [r7, #30]
 80178d2:	9300      	str	r3, [sp, #0]
 80178d4:	4613      	mov	r3, r2
 80178d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80178d8:	4929      	ldr	r1, [pc, #164]	; (8017980 <spdctl_run_tick+0x2c4>)
 80178da:	f44f 6082 	mov.w	r0, #1040	; 0x410
 80178de:	f7ff fe47 	bl	8017570 <itm_debug3>
                    set_c1_c2(tidx, tvars, m.vbytes[0], m.vbytes[1], m.vbytes[2], m.vbytes[3]);
 80178e2:	7f39      	ldrb	r1, [r7, #28]
 80178e4:	7f7b      	ldrb	r3, [r7, #29]
 80178e6:	b258      	sxtb	r0, r3
 80178e8:	7fbb      	ldrb	r3, [r7, #30]
 80178ea:	7ffa      	ldrb	r2, [r7, #31]
 80178ec:	b252      	sxtb	r2, r2
 80178ee:	9201      	str	r2, [sp, #4]
 80178f0:	9300      	str	r3, [sp, #0]
 80178f2:	4603      	mov	r3, r0
 80178f4:	460a      	mov	r2, r1
 80178f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80178f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80178fa:	f000 fa75 	bl	8017de8 <set_c1_c2>
                    break;
 80178fe:	e016      	b.n	801792e <spdctl_run_tick+0x272>
                	itm_debug2(DBG_POSEC, "POSE set", tidx, m.v32);
 8017900:	69fb      	ldr	r3, [r7, #28]
 8017902:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017904:	491f      	ldr	r1, [pc, #124]	; (8017984 <spdctl_run_tick+0x2c8>)
 8017906:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 801790a:	f7ff fe15 	bl	8017538 <itm_debug2>
                	tvars->pose_trig = m.v32;
 801790e:	69fa      	ldr	r2, [r7, #28]
 8017910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017912:	62da      	str	r2, [r3, #44]	; 0x2c
                	pose_check_trig(tidx, tvars, 0);
 8017914:	2200      	movs	r2, #0
 8017916:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017918:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801791a:	f000 fc09 	bl	8018130 <pose_check_trig>
                	break;
 801791e:	e006      	b.n	801792e <spdctl_run_tick+0x272>
        	continue;
 8017920:	bf00      	nop
 8017922:	e6e8      	b.n	80176f6 <spdctl_run_tick+0x3a>
        }
 8017924:	bf00      	nop
 8017926:	e6e6      	b.n	80176f6 <spdctl_run_tick+0x3a>
                        break;
 8017928:	bf00      	nop
 801792a:	e6e4      	b.n	80176f6 <spdctl_run_tick+0x3a>
                    break;
 801792c:	bf00      	nop
	for (;;) {
 801792e:	e6e2      	b.n	80176f6 <spdctl_run_tick+0x3a>
		//itm_debug1(DBG_SPDCTL, "------ pc", i);
		train_periodic_control(i, dt);
 8017930:	6879      	ldr	r1, [r7, #4]
 8017932:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8017934:	f000 f828 	bl	8017988 <train_periodic_control>
	for (int i=0; i<NUM_TRAINS; i++) {
 8017938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801793a:	3301      	adds	r3, #1
 801793c:	637b      	str	r3, [r7, #52]	; 0x34
 801793e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017940:	2b07      	cmp	r3, #7
 8017942:	ddf5      	ble.n	8017930 <spdctl_run_tick+0x274>
	}
}
 8017944:	bf00      	nop
 8017946:	3738      	adds	r7, #56	; 0x38
 8017948:	46bd      	mov	sp, r7
 801794a:	bd80      	pop	{r7, pc}
 801794c:	200053e0 	.word	0x200053e0
 8017950:	200053e4 	.word	0x200053e4
 8017954:	08019ae8 	.word	0x08019ae8
 8017958:	2000059c 	.word	0x2000059c
 801795c:	200053d6 	.word	0x200053d6
 8017960:	200053d7 	.word	0x200053d7
 8017964:	200053e8 	.word	0x200053e8
 8017968:	08019af4 	.word	0x08019af4
 801796c:	08019afc 	.word	0x08019afc
 8017970:	08019b04 	.word	0x08019b04
 8017974:	08019b0c 	.word	0x08019b0c
 8017978:	80000004 	.word	0x80000004
 801797c:	08019b18 	.word	0x08019b18
 8017980:	08019b24 	.word	0x08019b24
 8017984:	08019b30 	.word	0x08019b30

08017988 <train_periodic_control>:
    


static void train_periodic_control(int numtrain, uint32_t dt)
{
 8017988:	b580      	push	{r7, lr}
 801798a:	b096      	sub	sp, #88	; 0x58
 801798c:	af02      	add	r7, sp, #8
 801798e:	6078      	str	r0, [r7, #4]
 8017990:	6039      	str	r1, [r7, #0]
	if (stop_all) return;
 8017992:	4bb0      	ldr	r3, [pc, #704]	; (8017c54 <train_periodic_control+0x2cc>)
 8017994:	681b      	ldr	r3, [r3, #0]
 8017996:	2b00      	cmp	r3, #0
 8017998:	f040 8218 	bne.w	8017dcc <train_periodic_control+0x444>

	//num_train_periodic_control++;

	USE_TRAIN(numtrain)	// tconf tvars
 801799c:	6878      	ldr	r0, [r7, #4]
 801799e:	f7fe fb31 	bl	8016004 <get_train_cnf>
 80179a2:	6438      	str	r0, [r7, #64]	; 0x40
 80179a4:	687a      	ldr	r2, [r7, #4]
 80179a6:	4613      	mov	r3, r2
 80179a8:	00db      	lsls	r3, r3, #3
 80179aa:	1a9b      	subs	r3, r3, r2
 80179ac:	00db      	lsls	r3, r3, #3
 80179ae:	4aaa      	ldr	r2, [pc, #680]	; (8017c58 <train_periodic_control+0x2d0>)
 80179b0:	4413      	add	r3, r2
 80179b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (!tconf) {
 80179b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80179b6:	2b00      	cmp	r3, #0
 80179b8:	f000 820a 	beq.w	8017dd0 <train_periodic_control+0x448>
        if ((0)) itm_debug1(DBG_SPDCTL, "unconf tr", numtrain);
        return;
    }
	if (!tconf->enabled) {
 80179bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80179be:	7c9b      	ldrb	r3, [r3, #18]
 80179c0:	2b00      	cmp	r3, #0
 80179c2:	f000 8207 	beq.w	8017dd4 <train_periodic_control+0x44c>
		//itm_debug1(DBG_SPDCTL, "disabled", numtrain);
		return;
	}
	int16_t v = tvars->target_speed;
 80179c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80179c8:	881b      	ldrh	r3, [r3, #0]
 80179ca:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	//int16_t v = tvars->target_speed * tvars->C1_dir;

	itm_debug2(DBG_SPDCTL, "target", numtrain, v);
 80179ce:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80179d2:	687a      	ldr	r2, [r7, #4]
 80179d4:	49a1      	ldr	r1, [pc, #644]	; (8017c5c <train_periodic_control+0x2d4>)
 80179d6:	2010      	movs	r0, #16
 80179d8:	f7ff fdae 	bl	8017538 <itm_debug2>
			lastspeed = v;
		}
        return;
	}*/
    // inertia before PID
	if (1==tconf->enable_inertia) {
 80179dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80179de:	7c5b      	ldrb	r3, [r3, #17]
 80179e0:	2b01      	cmp	r3, #1
 80179e2:	d120      	bne.n	8017a26 <train_periodic_control+0x9e>
		int changed;
		tvars->inertiavars.target = tvars->target_speed;
 80179e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80179e6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80179ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80179ec:	831a      	strh	r2, [r3, #24]
		v = inertia_value(&tconf->inertiacnf, &tvars->inertiavars, dt, &changed);
 80179ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80179f0:	f103 000c 	add.w	r0, r3, #12
 80179f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80179f6:	f103 0118 	add.w	r1, r3, #24
 80179fa:	683b      	ldr	r3, [r7, #0]
 80179fc:	b29a      	uxth	r2, r3
 80179fe:	f107 031c 	add.w	r3, r7, #28
 8017a02:	f7ff fb43 	bl	801708c <inertia_value>
 8017a06:	4603      	mov	r3, r0
 8017a08:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		itm_debug3(DBG_INERTIA, "inertia", numtrain, tvars->target_speed, v);
 8017a0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017a0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017a12:	461a      	mov	r2, r3
 8017a14:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8017a18:	9300      	str	r3, [sp, #0]
 8017a1a:	4613      	mov	r3, r2
 8017a1c:	687a      	ldr	r2, [r7, #4]
 8017a1e:	4990      	ldr	r1, [pc, #576]	; (8017c60 <train_periodic_control+0x2d8>)
 8017a20:	2008      	movs	r0, #8
 8017a22:	f7ff fda5 	bl	8017570 <itm_debug3>
	/*if ((0)) {
		static int16_t lastspeed = 9999;
		//if (v != lastspeed) debug_info('T', 0, "trg.v= ", v,0,0);
		lastspeed = v;
	}*/
    if (tconf->enable_pid) {
 8017a26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017a28:	7cdb      	ldrb	r3, [r3, #19]
 8017a2a:	2b00      	cmp	r3, #0
 8017a2c:	d01d      	beq.n	8017a6a <train_periodic_control+0xe2>
        // corresponding BEMF target
        // 100% = 1.5V
        int32_t tbemf = 150*v/10 * tvars->C1_dir;
 8017a2e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8017a32:	2296      	movs	r2, #150	; 0x96
 8017a34:	fb02 f303 	mul.w	r3, r2, r3
 8017a38:	4a8a      	ldr	r2, [pc, #552]	; (8017c64 <train_periodic_control+0x2dc>)
 8017a3a:	fb82 1203 	smull	r1, r2, r2, r3
 8017a3e:	1092      	asrs	r2, r2, #2
 8017a40:	17db      	asrs	r3, r3, #31
 8017a42:	1ad3      	subs	r3, r2, r3
 8017a44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8017a46:	f992 201e 	ldrsb.w	r2, [r2, #30]
 8017a4a:	fb02 f303 	mul.w	r3, r2, r3
 8017a4e:	63bb      	str	r3, [r7, #56]	; 0x38
        tbemf = tbemf / 4; //XXX why ?? new cables (more capacitance ?)
 8017a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a52:	2b00      	cmp	r3, #0
 8017a54:	da00      	bge.n	8017a58 <train_periodic_control+0xd0>
 8017a56:	3303      	adds	r3, #3
 8017a58:	109b      	asrs	r3, r3, #2
 8017a5a:	63bb      	str	r3, [r7, #56]	; 0x38
        // TODO make this divisor a parameter
        pidctl_set_target(&tconf->pidcnf, &tvars->pidvars, tbemf);
 8017a5c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8017a5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017a60:	3308      	adds	r3, #8
 8017a62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017a64:	4619      	mov	r1, r3
 8017a66:	f7ff fc93 	bl	8017390 <pidctl_set_target>
    }
    /*
    canton_vars_t *cv = get_canton_vars(tvars->current_canton);
    int32_t bemf = cv->bemf_centivolt;
    */
    int32_t bemf = tvars->bemf_cv;
 8017a6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017a6c:	685b      	ldr	r3, [r3, #4]
 8017a6e:	64bb      	str	r3, [r7, #72]	; 0x48
    if (tconf->bemfIIR) {
 8017a70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017a72:	7d9b      	ldrb	r3, [r3, #22]
 8017a74:	2b00      	cmp	r3, #0
 8017a76:	d017      	beq.n	8017aa8 <train_periodic_control+0x120>
    	tvars->bemfiir = (80*tvars->bemfiir + 20*bemf)/100;
 8017a78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017a7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017a7c:	4613      	mov	r3, r2
 8017a7e:	009b      	lsls	r3, r3, #2
 8017a80:	4413      	add	r3, r2
 8017a82:	011b      	lsls	r3, r3, #4
 8017a84:	4619      	mov	r1, r3
 8017a86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017a88:	4613      	mov	r3, r2
 8017a8a:	009b      	lsls	r3, r3, #2
 8017a8c:	4413      	add	r3, r2
 8017a8e:	009b      	lsls	r3, r3, #2
 8017a90:	440b      	add	r3, r1
 8017a92:	4a75      	ldr	r2, [pc, #468]	; (8017c68 <train_periodic_control+0x2e0>)
 8017a94:	fb82 1203 	smull	r1, r2, r2, r3
 8017a98:	1152      	asrs	r2, r2, #5
 8017a9a:	17db      	asrs	r3, r3, #31
 8017a9c:	1ad2      	subs	r2, r2, r3
 8017a9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017aa0:	631a      	str	r2, [r3, #48]	; 0x30
    	bemf = tvars->bemfiir;
 8017aa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017aa6:	64bb      	str	r3, [r7, #72]	; 0x48
    }
    if (tconf->enable_pid) {
 8017aa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017aaa:	7cdb      	ldrb	r3, [r3, #19]
 8017aac:	2b00      	cmp	r3, #0
 8017aae:	f000 808e 	beq.w	8017bce <train_periodic_control+0x246>
    	if (tvars->target_speed) {
 8017ab2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017ab4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017ab8:	2b00      	cmp	r3, #0
 8017aba:	d004      	beq.n	8017ac6 <train_periodic_control+0x13e>
    		tvars->pidvars.stopped = 0;
 8017abc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8017abe:	7d13      	ldrb	r3, [r2, #20]
 8017ac0:	f36f 0341 	bfc	r3, #1, #1
 8017ac4:	7513      	strb	r3, [r2, #20]
    	}
        if (!tvars->pidvars.stopped && (tvars->target_speed == 0) && (abs(tvars->bemf_cv)<10)) {
 8017ac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017ac8:	7d1b      	ldrb	r3, [r3, #20]
 8017aca:	f003 0302 	and.w	r3, r3, #2
 8017ace:	b2db      	uxtb	r3, r3
 8017ad0:	2b00      	cmp	r3, #0
 8017ad2:	d12c      	bne.n	8017b2e <train_periodic_control+0x1a6>
 8017ad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017ad6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017ada:	2b00      	cmp	r3, #0
 8017adc:	d127      	bne.n	8017b2e <train_periodic_control+0x1a6>
 8017ade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017ae0:	685b      	ldr	r3, [r3, #4]
 8017ae2:	f113 0f09 	cmn.w	r3, #9
 8017ae6:	db22      	blt.n	8017b2e <train_periodic_control+0x1a6>
 8017ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017aea:	685b      	ldr	r3, [r3, #4]
 8017aec:	2b09      	cmp	r3, #9
 8017aee:	dc1e      	bgt.n	8017b2e <train_periodic_control+0x1a6>
    		itm_debug1(DBG_PID, "stop", 0);
 8017af0:	2200      	movs	r2, #0
 8017af2:	495e      	ldr	r1, [pc, #376]	; (8017c6c <train_periodic_control+0x2e4>)
 8017af4:	2004      	movs	r0, #4
 8017af6:	f7ff fd05 	bl	8017504 <itm_debug1>
        	//debug_info('T', 0, "ZERO", cv->bemf_centivolt,0, 0);
			pidctl_reset(&tconf->pidcnf, &tvars->pidvars);
 8017afa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017afc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017afe:	3308      	adds	r3, #8
 8017b00:	4619      	mov	r1, r3
 8017b02:	4610      	mov	r0, r2
 8017b04:	f7ff fc20 	bl	8017348 <pidctl_reset>
			debug_info('T', numtrain, "STOP_PID", 0,0, 0);
 8017b08:	6879      	ldr	r1, [r7, #4]
 8017b0a:	2300      	movs	r3, #0
 8017b0c:	9301      	str	r3, [sp, #4]
 8017b0e:	2300      	movs	r3, #0
 8017b10:	9300      	str	r3, [sp, #0]
 8017b12:	2300      	movs	r3, #0
 8017b14:	4a56      	ldr	r2, [pc, #344]	; (8017c70 <train_periodic_control+0x2e8>)
 8017b16:	2054      	movs	r0, #84	; 0x54
 8017b18:	f7ff fd6a 	bl	80175f0 <debug_info>
			tvars->pidvars.stopped = 1;
 8017b1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8017b1e:	7d13      	ldrb	r3, [r2, #20]
 8017b20:	f043 0302 	orr.w	r3, r3, #2
 8017b24:	7513      	strb	r3, [r2, #20]
        	v = 0;
 8017b26:	2300      	movs	r3, #0
 8017b28:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8017b2c:	e04f      	b.n	8017bce <train_periodic_control+0x246>
        } else if (tvars->pidvars.stopped) {
 8017b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017b30:	7d1b      	ldrb	r3, [r3, #20]
 8017b32:	f003 0302 	and.w	r3, r3, #2
 8017b36:	b2db      	uxtb	r3, r3
 8017b38:	2b00      	cmp	r3, #0
 8017b3a:	d00a      	beq.n	8017b52 <train_periodic_control+0x1ca>
    		itm_debug2(DBG_PID, "stopped", numtrain, v);
 8017b3c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8017b40:	687a      	ldr	r2, [r7, #4]
 8017b42:	494c      	ldr	r1, [pc, #304]	; (8017c74 <train_periodic_control+0x2ec>)
 8017b44:	2004      	movs	r0, #4
 8017b46:	f7ff fcf7 	bl	8017538 <itm_debug2>
        	v = 0;
 8017b4a:	2300      	movs	r3, #0
 8017b4c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8017b50:	e03d      	b.n	8017bce <train_periodic_control+0x246>
        } else {
        	itm_debug3(DBG_PID, "pid", numtrain, bemf, v);
 8017b52:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8017b56:	9300      	str	r3, [sp, #0]
 8017b58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017b5a:	687a      	ldr	r2, [r7, #4]
 8017b5c:	4946      	ldr	r1, [pc, #280]	; (8017c78 <train_periodic_control+0x2f0>)
 8017b5e:	2004      	movs	r0, #4
 8017b60:	f7ff fd06 	bl	8017570 <itm_debug3>
        	//const canton_config_t *cc = get_canton_cnf(vars->current_canton);
        	if (bemf>MAX_PID_VALUE)  bemf=MAX_PID_VALUE; // XXX
 8017b64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017b66:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8017b6a:	dd02      	ble.n	8017b72 <train_periodic_control+0x1ea>
 8017b6c:	f44f 738c 	mov.w	r3, #280	; 0x118
 8017b70:	64bb      	str	r3, [r7, #72]	; 0x48
        	if (bemf<-MAX_PID_VALUE) bemf=-MAX_PID_VALUE;
 8017b72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017b74:	f513 7f8c 	cmn.w	r3, #280	; 0x118
 8017b78:	da01      	bge.n	8017b7e <train_periodic_control+0x1f6>
 8017b7a:	4b40      	ldr	r3, [pc, #256]	; (8017c7c <train_periodic_control+0x2f4>)
 8017b7c:	64bb      	str	r3, [r7, #72]	; 0x48

        	int32_t v2 = pidctl_value(&tconf->pidcnf, &tvars->pidvars, bemf, dt);
 8017b7e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8017b80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017b82:	f103 0108 	add.w	r1, r3, #8
 8017b86:	683b      	ldr	r3, [r7, #0]
 8017b88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017b8a:	f7ff fc15 	bl	80173b8 <pidctl_value>
 8017b8e:	6378      	str	r0, [r7, #52]	; 0x34
        	int32_t v3;
        	v3 = (v2>100) ? 100 : v2;
 8017b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017b92:	2b64      	cmp	r3, #100	; 0x64
 8017b94:	bfa8      	it	ge
 8017b96:	2364      	movge	r3, #100	; 0x64
 8017b98:	633b      	str	r3, [r7, #48]	; 0x30
        	v3 = (v3<-100) ? -100: v3;
 8017b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b9c:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8017ba0:	4293      	cmp	r3, r2
 8017ba2:	bfb8      	it	lt
 8017ba4:	4613      	movlt	r3, r2
 8017ba6:	633b      	str	r3, [r7, #48]	; 0x30
        	itm_debug3(DBG_PID, "pid/r", numtrain, v3, v2);
 8017ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017baa:	9300      	str	r3, [sp, #0]
 8017bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017bae:	687a      	ldr	r2, [r7, #4]
 8017bb0:	4933      	ldr	r1, [pc, #204]	; (8017c80 <train_periodic_control+0x2f8>)
 8017bb2:	2004      	movs	r0, #4
 8017bb4:	f7ff fcdc 	bl	8017570 <itm_debug3>
        	v = (int16_t)v3 * tvars->C1_dir; // because it will be multiplied again when setting pwm
 8017bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017bba:	b29a      	uxth	r2, r3
 8017bbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017bbe:	f993 301e 	ldrsb.w	r3, [r3, #30]
 8017bc2:	b29b      	uxth	r3, r3
 8017bc4:	fb12 f303 	smulbb	r3, r2, r3
 8017bc8:	b29b      	uxth	r3, r3
 8017bca:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        }
    }
    if (tconf->postIIR) {
 8017bce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017bd0:	7ddb      	ldrb	r3, [r3, #23]
 8017bd2:	2b00      	cmp	r3, #0
 8017bd4:	d01c      	beq.n	8017c10 <train_periodic_control+0x288>
        tvars->v_iir = (80*tvars->v_iir+20*v)/100;
 8017bd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017bd8:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8017bdc:	461a      	mov	r2, r3
 8017bde:	4613      	mov	r3, r2
 8017be0:	009b      	lsls	r3, r3, #2
 8017be2:	4413      	add	r3, r2
 8017be4:	011b      	lsls	r3, r3, #4
 8017be6:	4619      	mov	r1, r3
 8017be8:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8017bec:	4613      	mov	r3, r2
 8017bee:	009b      	lsls	r3, r3, #2
 8017bf0:	4413      	add	r3, r2
 8017bf2:	009b      	lsls	r3, r3, #2
 8017bf4:	440b      	add	r3, r1
 8017bf6:	4a1c      	ldr	r2, [pc, #112]	; (8017c68 <train_periodic_control+0x2e0>)
 8017bf8:	fb82 1203 	smull	r1, r2, r2, r3
 8017bfc:	1152      	asrs	r2, r2, #5
 8017bfe:	17db      	asrs	r3, r3, #31
 8017c00:	1ad3      	subs	r3, r2, r3
 8017c02:	b21a      	sxth	r2, r3
 8017c04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017c06:	869a      	strh	r2, [r3, #52]	; 0x34
        v = tvars->v_iir;
 8017c08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017c0a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8017c0c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    }
    // or inertia after PID
    if (2==tconf->enable_inertia) {
 8017c10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017c12:	7c5b      	ldrb	r3, [r3, #17]
 8017c14:	2b02      	cmp	r3, #2
 8017c16:	d111      	bne.n	8017c3c <train_periodic_control+0x2b4>
        tvars->inertiavars.target = v;
 8017c18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017c1a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8017c1e:	831a      	strh	r2, [r3, #24]
        v = inertia_value(&tconf->inertiacnf, &tvars->inertiavars, dt, NULL);
 8017c20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017c22:	f103 000c 	add.w	r0, r3, #12
 8017c26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017c28:	f103 0118 	add.w	r1, r3, #24
 8017c2c:	683b      	ldr	r3, [r7, #0]
 8017c2e:	b29a      	uxth	r2, r3
 8017c30:	2300      	movs	r3, #0
 8017c32:	f7ff fa2b 	bl	801708c <inertia_value>
 8017c36:	4603      	mov	r3, r0
 8017c38:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    }

    if (tconf->en_spd2pow) {
 8017c3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017c3e:	7e5b      	ldrb	r3, [r3, #25]
 8017c40:	2b00      	cmp	r3, #0
 8017c42:	d046      	beq.n	8017cd2 <train_periodic_control+0x34a>
    	// [0-100] -> [min_pwm .. MAX_PWM]
    	int s = SIGNOF(v);
 8017c44:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8017c48:	2b00      	cmp	r3, #0
 8017c4a:	da1b      	bge.n	8017c84 <train_periodic_control+0x2fc>
 8017c4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017c50:	e019      	b.n	8017c86 <train_periodic_control+0x2fe>
 8017c52:	bf00      	nop
 8017c54:	200053d8 	.word	0x200053d8
 8017c58:	200053e8 	.word	0x200053e8
 8017c5c:	08019b3c 	.word	0x08019b3c
 8017c60:	08019b44 	.word	0x08019b44
 8017c64:	66666667 	.word	0x66666667
 8017c68:	51eb851f 	.word	0x51eb851f
 8017c6c:	08019b4c 	.word	0x08019b4c
 8017c70:	08019b54 	.word	0x08019b54
 8017c74:	08019b60 	.word	0x08019b60
 8017c78:	08019b68 	.word	0x08019b68
 8017c7c:	fffffee8 	.word	0xfffffee8
 8017c80:	08019b6c 	.word	0x08019b6c
 8017c84:	2301      	movs	r3, #1
 8017c86:	62fb      	str	r3, [r7, #44]	; 0x2c
    	int a = abs(v);
 8017c88:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8017c8c:	2b00      	cmp	r3, #0
 8017c8e:	bfb8      	it	lt
 8017c90:	425b      	neglt	r3, r3
 8017c92:	62bb      	str	r3, [r7, #40]	; 0x28
    	int v2 = (a>1) ? a * (MAX_PWM-tconf->min_power)/100 + tconf->min_power : 0;
 8017c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c96:	2b01      	cmp	r3, #1
 8017c98:	dd10      	ble.n	8017cbc <train_periodic_control+0x334>
 8017c9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017c9c:	7e9b      	ldrb	r3, [r3, #26]
 8017c9e:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8017ca2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017ca4:	fb02 f303 	mul.w	r3, r2, r3
 8017ca8:	4a4c      	ldr	r2, [pc, #304]	; (8017ddc <train_periodic_control+0x454>)
 8017caa:	fb82 1203 	smull	r1, r2, r2, r3
 8017cae:	1152      	asrs	r2, r2, #5
 8017cb0:	17db      	asrs	r3, r3, #31
 8017cb2:	1ad3      	subs	r3, r2, r3
 8017cb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017cb6:	7e92      	ldrb	r2, [r2, #26]
 8017cb8:	4413      	add	r3, r2
 8017cba:	e000      	b.n	8017cbe <train_periodic_control+0x336>
 8017cbc:	2300      	movs	r3, #0
 8017cbe:	627b      	str	r3, [r7, #36]	; 0x24
    	v = s * v2;
 8017cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cc2:	b29a      	uxth	r2, r3
 8017cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cc6:	b29b      	uxth	r3, r3
 8017cc8:	fb12 f303 	smulbb	r3, r2, r3
 8017ccc:	b29b      	uxth	r3, r3
 8017cce:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    }

    int changed = (tvars->last_speed != v);
 8017cd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017cd4:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8017cd8:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8017cdc:	429a      	cmp	r2, r3
 8017cde:	bf14      	ite	ne
 8017ce0:	2301      	movne	r3, #1
 8017ce2:	2300      	moveq	r3, #0
 8017ce4:	b2db      	uxtb	r3, r3
 8017ce6:	623b      	str	r3, [r7, #32]
    tvars->last_speed = v;
 8017ce8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017cea:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8017cee:	841a      	strh	r2, [r3, #32]

    itm_debug3(DBG_PID|DBG_SPDCTL, "spd", numtrain, v, changed);
 8017cf0:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8017cf4:	6a3b      	ldr	r3, [r7, #32]
 8017cf6:	9300      	str	r3, [sp, #0]
 8017cf8:	4613      	mov	r3, r2
 8017cfa:	687a      	ldr	r2, [r7, #4]
 8017cfc:	4938      	ldr	r1, [pc, #224]	; (8017de0 <train_periodic_control+0x458>)
 8017cfe:	2014      	movs	r0, #20
 8017d00:	f7ff fc36 	bl	8017570 <itm_debug3>

    if (changed) {
 8017d04:	6a3b      	ldr	r3, [r7, #32]
 8017d06:	2b00      	cmp	r3, #0
 8017d08:	d01a      	beq.n	8017d40 <train_periodic_control+0x3b8>
    	_set_speed(numtrain, tconf, tvars);
 8017d0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8017d0c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8017d0e:	6878      	ldr	r0, [r7, #4]
 8017d10:	f000 f932 	bl	8017f78 <_set_speed>
        if ((1)) { // TODO remove
            msg_64_t m;
            m.from = MA_TRAIN_SC(numtrain);
 8017d14:	687b      	ldr	r3, [r7, #4]
 8017d16:	b25b      	sxtb	r3, r3
 8017d18:	f003 0307 	and.w	r3, r3, #7
 8017d1c:	b25b      	sxtb	r3, r3
 8017d1e:	f063 0337 	orn	r3, r3, #55	; 0x37
 8017d22:	b25b      	sxtb	r3, r3
 8017d24:	b2db      	uxtb	r3, r3
 8017d26:	747b      	strb	r3, [r7, #17]
            m.to = MA_UI(0);
 8017d28:	2380      	movs	r3, #128	; 0x80
 8017d2a:	743b      	strb	r3, [r7, #16]
            m.cmd = CMD_NOTIF_SPEED;
 8017d2c:	23a0      	movs	r3, #160	; 0xa0
 8017d2e:	74bb      	strb	r3, [r7, #18]
            m.v1 = v;
 8017d30:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8017d34:	82bb      	strh	r3, [r7, #20]
            mqf_write_from_spdctl(&m);
 8017d36:	f107 0310 	add.w	r3, r7, #16
 8017d3a:	4618      	mov	r0, r3
 8017d3c:	f7ff fc82 	bl	8017644 <mqf_write_from_spdctl>
        }
    }
    if (tconf->notify_speed) {
 8017d40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017d42:	7d1b      	ldrb	r3, [r3, #20]
 8017d44:	2b00      	cmp	r3, #0
 8017d46:	d011      	beq.n	8017d6c <train_periodic_control+0x3e4>
    	struct spd_notif n;
    	n.sv100 = v;
 8017d48:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8017d4c:	813b      	strh	r3, [r7, #8]
    	n.pid_target = tvars->pidvars.target_v;
 8017d4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017d50:	691b      	ldr	r3, [r3, #16]
 8017d52:	b21b      	sxth	r3, r3
 8017d54:	817b      	strh	r3, [r7, #10]
    	//canton_vars_t *cv1 = get_canton_vars(tvars->current_canton);
    	n.bemf_centivolt = tvars->bemf_cv; //cv1->bemf_centivolt;
 8017d56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017d58:	685b      	ldr	r3, [r3, #4]
 8017d5a:	60fb      	str	r3, [r7, #12]
    	train_notif(numtrain, 'V', (void *)&n, sizeof(n));
 8017d5c:	687b      	ldr	r3, [r7, #4]
 8017d5e:	b2d8      	uxtb	r0, r3
 8017d60:	f107 0208 	add.w	r2, r7, #8
 8017d64:	2308      	movs	r3, #8
 8017d66:	2156      	movs	r1, #86	; 0x56
 8017d68:	f7ff fc2d 	bl	80175c6 <train_notif>
    }

    /* estimate speed/position with bemf */
    if ((1)) {
    	//canton_vars_t *cv = get_canton_vars(tvars->current_canton);
        int32_t b = tvars->bemf_cv; //cv->bemf_centivolt;
 8017d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017d6e:	685b      	ldr	r3, [r3, #4]
 8017d70:	647b      	str	r3, [r7, #68]	; 0x44
        if (abs(b)<25) b = 0;
 8017d72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017d74:	f113 0f18 	cmn.w	r3, #24
 8017d78:	db04      	blt.n	8017d84 <train_periodic_control+0x3fc>
 8017d7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017d7c:	2b18      	cmp	r3, #24
 8017d7e:	dc01      	bgt.n	8017d84 <train_periodic_control+0x3fc>
 8017d80:	2300      	movs	r3, #0
 8017d82:	647b      	str	r3, [r7, #68]	; 0x44
        // TODO: BEMF to speed. currently part of it is done in convert_to_centivolt
        //       but we assume speed is really proportional to BEMF
        tvars->position_estimate += b;
 8017d84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017d86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017d88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017d8a:	441a      	add	r2, r3
 8017d8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017d8e:	629a      	str	r2, [r3, #40]	; 0x28
        itm_debug3(DBG_POSE, "pose", numtrain, tvars->position_estimate, b);
 8017d90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017d92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017d94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017d96:	9300      	str	r3, [sp, #0]
 8017d98:	4613      	mov	r3, r2
 8017d9a:	687a      	ldr	r2, [r7, #4]
 8017d9c:	4911      	ldr	r1, [pc, #68]	; (8017de4 <train_periodic_control+0x45c>)
 8017d9e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8017da2:	f7ff fbe5 	bl	8017570 <itm_debug3>
        pose_check_trig(numtrain, tvars, b);
 8017da6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017da8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8017daa:	6878      	ldr	r0, [r7, #4]
 8017dac:	f000 f9c0 	bl	8018130 <pose_check_trig>
        if (tconf->notify_pose) {
 8017db0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017db2:	7d5b      	ldrb	r3, [r3, #21]
 8017db4:	2b00      	cmp	r3, #0
 8017db6:	d00e      	beq.n	8017dd6 <train_periodic_control+0x44e>
    		train_notif(numtrain, 'i', (void *)&tvars->position_estimate, sizeof(int32_t));
 8017db8:	687b      	ldr	r3, [r7, #4]
 8017dba:	b2d8      	uxtb	r0, r3
 8017dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017dbe:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8017dc2:	2304      	movs	r3, #4
 8017dc4:	2169      	movs	r1, #105	; 0x69
 8017dc6:	f7ff fbfe 	bl	80175c6 <train_notif>
 8017dca:	e004      	b.n	8017dd6 <train_periodic_control+0x44e>
	if (stop_all) return;
 8017dcc:	bf00      	nop
 8017dce:	e002      	b.n	8017dd6 <train_periodic_control+0x44e>
        return;
 8017dd0:	bf00      	nop
 8017dd2:	e000      	b.n	8017dd6 <train_periodic_control+0x44e>
		return;
 8017dd4:	bf00      	nop
        }
    }
}
 8017dd6:	3750      	adds	r7, #80	; 0x50
 8017dd8:	46bd      	mov	sp, r7
 8017dda:	bd80      	pop	{r7, pc}
 8017ddc:	51eb851f 	.word	0x51eb851f
 8017de0:	08019b74 	.word	0x08019b74
 8017de4:	08019b78 	.word	0x08019b78

08017de8 <set_c1_c2>:


static void set_c1_c2(int tidx, train_vars_t *tvars, uint8_t c1, int8_t dir1, uint8_t c2, int8_t dir2)
{
 8017de8:	b580      	push	{r7, lr}
 8017dea:	b088      	sub	sp, #32
 8017dec:	af02      	add	r7, sp, #8
 8017dee:	60f8      	str	r0, [r7, #12]
 8017df0:	60b9      	str	r1, [r7, #8]
 8017df2:	4611      	mov	r1, r2
 8017df4:	461a      	mov	r2, r3
 8017df6:	460b      	mov	r3, r1
 8017df8:	71fb      	strb	r3, [r7, #7]
 8017dfa:	4613      	mov	r3, r2
 8017dfc:	71bb      	strb	r3, [r7, #6]
	msg_64_t m;
	m.from = MA_TRAIN_SC(tidx);
 8017dfe:	68fb      	ldr	r3, [r7, #12]
 8017e00:	b25b      	sxtb	r3, r3
 8017e02:	f003 0307 	and.w	r3, r3, #7
 8017e06:	b25b      	sxtb	r3, r3
 8017e08:	f063 0337 	orn	r3, r3, #55	; 0x37
 8017e0c:	b25b      	sxtb	r3, r3
 8017e0e:	b2db      	uxtb	r3, r3
 8017e10:	747b      	strb	r3, [r7, #17]

	itm_debug3(DBG_SPDCTL, "s-c1", tidx, c1, dir1);
 8017e12:	79fa      	ldrb	r2, [r7, #7]
 8017e14:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017e18:	9300      	str	r3, [sp, #0]
 8017e1a:	4613      	mov	r3, r2
 8017e1c:	68fa      	ldr	r2, [r7, #12]
 8017e1e:	4953      	ldr	r1, [pc, #332]	; (8017f6c <set_c1_c2+0x184>)
 8017e20:	2010      	movs	r0, #16
 8017e22:	f7ff fba5 	bl	8017570 <itm_debug3>
	itm_debug3(DBG_SPDCTL, "s-c2", tidx, c2, dir2);
 8017e26:	f897 2020 	ldrb.w	r2, [r7, #32]
 8017e2a:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8017e2e:	9300      	str	r3, [sp, #0]
 8017e30:	4613      	mov	r3, r2
 8017e32:	68fa      	ldr	r2, [r7, #12]
 8017e34:	494e      	ldr	r1, [pc, #312]	; (8017f70 <set_c1_c2+0x188>)
 8017e36:	2010      	movs	r0, #16
 8017e38:	f7ff fb9a 	bl	8017570 <itm_debug3>

	tvars->c2bemf = 0;
 8017e3c:	68ba      	ldr	r2, [r7, #8]
 8017e3e:	f892 3036 	ldrb.w	r3, [r2, #54]	; 0x36
 8017e42:	f36f 0300 	bfc	r3, #0, #1
 8017e46:	f882 3036 	strb.w	r3, [r2, #54]	; 0x36

	if ((tvars->C1 != 0xFF) && (tvars->C1 != c1)  && (tvars->C1 != c2)) {
 8017e4a:	68bb      	ldr	r3, [r7, #8]
 8017e4c:	7f1b      	ldrb	r3, [r3, #28]
 8017e4e:	2bff      	cmp	r3, #255	; 0xff
 8017e50:	d01b      	beq.n	8017e8a <set_c1_c2+0xa2>
 8017e52:	68bb      	ldr	r3, [r7, #8]
 8017e54:	7f1b      	ldrb	r3, [r3, #28]
 8017e56:	79fa      	ldrb	r2, [r7, #7]
 8017e58:	429a      	cmp	r2, r3
 8017e5a:	d016      	beq.n	8017e8a <set_c1_c2+0xa2>
 8017e5c:	68bb      	ldr	r3, [r7, #8]
 8017e5e:	7f1b      	ldrb	r3, [r3, #28]
 8017e60:	f897 2020 	ldrb.w	r2, [r7, #32]
 8017e64:	429a      	cmp	r2, r3
 8017e66:	d010      	beq.n	8017e8a <set_c1_c2+0xa2>
		m.to = tvars->C1;
 8017e68:	68bb      	ldr	r3, [r7, #8]
 8017e6a:	7f1b      	ldrb	r3, [r3, #28]
 8017e6c:	743b      	strb	r3, [r7, #16]
		m.cmd = CMD_STOP;
 8017e6e:	2302      	movs	r3, #2
 8017e70:	74bb      	strb	r3, [r7, #18]
		mqf_write_from_spdctl(&m);
 8017e72:	f107 0310 	add.w	r3, r7, #16
 8017e76:	4618      	mov	r0, r3
 8017e78:	f7ff fbe4 	bl	8017644 <mqf_write_from_spdctl>
		m.cmd = CMD_BEMF_OFF;
 8017e7c:	2341      	movs	r3, #65	; 0x41
 8017e7e:	74bb      	strb	r3, [r7, #18]
		mqf_write_from_spdctl(&m);
 8017e80:	f107 0310 	add.w	r3, r7, #16
 8017e84:	4618      	mov	r0, r3
 8017e86:	f7ff fbdd 	bl	8017644 <mqf_write_from_spdctl>
	}
	if ((tvars->C2 != 0xFF) && (tvars->C2 != c1)  && (tvars->C2 != c2)) {
 8017e8a:	68bb      	ldr	r3, [r7, #8]
 8017e8c:	7f5b      	ldrb	r3, [r3, #29]
 8017e8e:	2bff      	cmp	r3, #255	; 0xff
 8017e90:	d01b      	beq.n	8017eca <set_c1_c2+0xe2>
 8017e92:	68bb      	ldr	r3, [r7, #8]
 8017e94:	7f5b      	ldrb	r3, [r3, #29]
 8017e96:	79fa      	ldrb	r2, [r7, #7]
 8017e98:	429a      	cmp	r2, r3
 8017e9a:	d016      	beq.n	8017eca <set_c1_c2+0xe2>
 8017e9c:	68bb      	ldr	r3, [r7, #8]
 8017e9e:	7f5b      	ldrb	r3, [r3, #29]
 8017ea0:	f897 2020 	ldrb.w	r2, [r7, #32]
 8017ea4:	429a      	cmp	r2, r3
 8017ea6:	d010      	beq.n	8017eca <set_c1_c2+0xe2>
		m.to = tvars->C2;
 8017ea8:	68bb      	ldr	r3, [r7, #8]
 8017eaa:	7f5b      	ldrb	r3, [r3, #29]
 8017eac:	743b      	strb	r3, [r7, #16]
		m.cmd = CMD_STOP;
 8017eae:	2302      	movs	r3, #2
 8017eb0:	74bb      	strb	r3, [r7, #18]
		mqf_write_from_spdctl(&m);
 8017eb2:	f107 0310 	add.w	r3, r7, #16
 8017eb6:	4618      	mov	r0, r3
 8017eb8:	f7ff fbc4 	bl	8017644 <mqf_write_from_spdctl>
		m.cmd = CMD_BEMF_OFF;
 8017ebc:	2341      	movs	r3, #65	; 0x41
 8017ebe:	74bb      	strb	r3, [r7, #18]
		mqf_write_from_spdctl(&m);
 8017ec0:	f107 0310 	add.w	r3, r7, #16
 8017ec4:	4618      	mov	r0, r3
 8017ec6:	f7ff fbbd 	bl	8017644 <mqf_write_from_spdctl>
	}
	if ((c1 != 0xFF) && (c1 != tvars->C1) && (c1 != tvars->C2)) {
 8017eca:	79fb      	ldrb	r3, [r7, #7]
 8017ecc:	2bff      	cmp	r3, #255	; 0xff
 8017ece:	d012      	beq.n	8017ef6 <set_c1_c2+0x10e>
 8017ed0:	68bb      	ldr	r3, [r7, #8]
 8017ed2:	7f1b      	ldrb	r3, [r3, #28]
 8017ed4:	79fa      	ldrb	r2, [r7, #7]
 8017ed6:	429a      	cmp	r2, r3
 8017ed8:	d00d      	beq.n	8017ef6 <set_c1_c2+0x10e>
 8017eda:	68bb      	ldr	r3, [r7, #8]
 8017edc:	7f5b      	ldrb	r3, [r3, #29]
 8017ede:	79fa      	ldrb	r2, [r7, #7]
 8017ee0:	429a      	cmp	r2, r3
 8017ee2:	d008      	beq.n	8017ef6 <set_c1_c2+0x10e>
		m.to = c1;
 8017ee4:	79fb      	ldrb	r3, [r7, #7]
 8017ee6:	743b      	strb	r3, [r7, #16]
		m.cmd = CMD_BEMF_ON;
 8017ee8:	2340      	movs	r3, #64	; 0x40
 8017eea:	74bb      	strb	r3, [r7, #18]
		mqf_write_from_spdctl(&m);
 8017eec:	f107 0310 	add.w	r3, r7, #16
 8017ef0:	4618      	mov	r0, r3
 8017ef2:	f7ff fba7 	bl	8017644 <mqf_write_from_spdctl>
	}
	if ((c2 != 0xFF) && (c2 != tvars->C1) && (c2 != tvars->C2)) {
 8017ef6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017efa:	2bff      	cmp	r3, #255	; 0xff
 8017efc:	d015      	beq.n	8017f2a <set_c1_c2+0x142>
 8017efe:	68bb      	ldr	r3, [r7, #8]
 8017f00:	7f1b      	ldrb	r3, [r3, #28]
 8017f02:	f897 2020 	ldrb.w	r2, [r7, #32]
 8017f06:	429a      	cmp	r2, r3
 8017f08:	d00f      	beq.n	8017f2a <set_c1_c2+0x142>
 8017f0a:	68bb      	ldr	r3, [r7, #8]
 8017f0c:	7f5b      	ldrb	r3, [r3, #29]
 8017f0e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8017f12:	429a      	cmp	r2, r3
 8017f14:	d009      	beq.n	8017f2a <set_c1_c2+0x142>
		m.to = c2;
 8017f16:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017f1a:	743b      	strb	r3, [r7, #16]
		m.cmd = CMD_BEMF_ON;
 8017f1c:	2340      	movs	r3, #64	; 0x40
 8017f1e:	74bb      	strb	r3, [r7, #18]
		mqf_write_from_spdctl(&m);
 8017f20:	f107 0310 	add.w	r3, r7, #16
 8017f24:	4618      	mov	r0, r3
 8017f26:	f7ff fb8d 	bl	8017644 <mqf_write_from_spdctl>
	}
	tvars->C1 = c1;
 8017f2a:	68bb      	ldr	r3, [r7, #8]
 8017f2c:	79fa      	ldrb	r2, [r7, #7]
 8017f2e:	771a      	strb	r2, [r3, #28]
	tvars->C1_dir = dir1;
 8017f30:	68bb      	ldr	r3, [r7, #8]
 8017f32:	79ba      	ldrb	r2, [r7, #6]
 8017f34:	779a      	strb	r2, [r3, #30]
	tvars->C2 = c2;
 8017f36:	68bb      	ldr	r3, [r7, #8]
 8017f38:	f897 2020 	ldrb.w	r2, [r7, #32]
 8017f3c:	775a      	strb	r2, [r3, #29]
	tvars->C2_dir = dir2;
 8017f3e:	68bb      	ldr	r3, [r7, #8]
 8017f40:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8017f44:	77da      	strb	r2, [r3, #31]
	tvars->last_speed = 9000; // make sure cmd is sent
 8017f46:	68bb      	ldr	r3, [r7, #8]
 8017f48:	f242 3228 	movw	r2, #9000	; 0x2328
 8017f4c:	841a      	strh	r2, [r3, #32]
	itm_debug2(DBG_POSEC, "POS reset", tidx, tvars->position_estimate);
 8017f4e:	68bb      	ldr	r3, [r7, #8]
 8017f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017f52:	68fa      	ldr	r2, [r7, #12]
 8017f54:	4907      	ldr	r1, [pc, #28]	; (8017f74 <set_c1_c2+0x18c>)
 8017f56:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8017f5a:	f7ff faed 	bl	8017538 <itm_debug2>
	tvars->position_estimate = 0; // reset POSE
 8017f5e:	68bb      	ldr	r3, [r7, #8]
 8017f60:	2200      	movs	r2, #0
 8017f62:	629a      	str	r2, [r3, #40]	; 0x28
}
 8017f64:	bf00      	nop
 8017f66:	3718      	adds	r7, #24
 8017f68:	46bd      	mov	sp, r7
 8017f6a:	bd80      	pop	{r7, pc}
 8017f6c:	08019b80 	.word	0x08019b80
 8017f70:	08019b88 	.word	0x08019b88
 8017f74:	08019b90 	.word	0x08019b90

08017f78 <_set_speed>:



static void _set_speed(int tidx, const train_config_t *cnf, train_vars_t *vars)
{
 8017f78:	b580      	push	{r7, lr}
 8017f7a:	b092      	sub	sp, #72	; 0x48
 8017f7c:	af02      	add	r7, sp, #8
 8017f7e:	60f8      	str	r0, [r7, #12]
 8017f80:	60b9      	str	r1, [r7, #8]
 8017f82:	607a      	str	r2, [r7, #4]
    const canton_config_t *c1;
    const canton_config_t *c2;


	int16_t sv100 = vars->last_speed;
 8017f84:	687b      	ldr	r3, [r7, #4]
 8017f86:	8c1b      	ldrh	r3, [r3, #32]
 8017f88:	87fb      	strh	r3, [r7, #62]	; 0x3e

    //num_set_speed++;


    c1 =  get_canton_cnf(vars->C1);
 8017f8a:	687b      	ldr	r3, [r7, #4]
 8017f8c:	7f1b      	ldrb	r3, [r3, #28]
 8017f8e:	4618      	mov	r0, r3
 8017f90:	f7fe f810 	bl	8015fb4 <get_canton_cnf>
 8017f94:	63b8      	str	r0, [r7, #56]	; 0x38
    c2 =  get_canton_cnf(vars->C2);
 8017f96:	687b      	ldr	r3, [r7, #4]
 8017f98:	7f5b      	ldrb	r3, [r3, #29]
 8017f9a:	4618      	mov	r0, r3
 8017f9c:	f7fe f80a 	bl	8015fb4 <get_canton_cnf>
 8017fa0:	6378      	str	r0, [r7, #52]	; 0x34
    
    if (!c1) {
 8017fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017fa4:	2b00      	cmp	r3, #0
 8017fa6:	d10c      	bne.n	8017fc2 <_set_speed+0x4a>
    	itm_debug1(DBG_ERR|DBG_SPDCTL, "no canton", sv100);
 8017fa8:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8017fac:	461a      	mov	r2, r3
 8017fae:	4947      	ldr	r1, [pc, #284]	; (80180cc <_set_speed+0x154>)
 8017fb0:	4847      	ldr	r0, [pc, #284]	; (80180d0 <_set_speed+0x158>)
 8017fb2:	f7ff faa7 	bl	8017504 <itm_debug1>
        train_error(ERR_CANTON_NONE, "no canton");
 8017fb6:	4945      	ldr	r1, [pc, #276]	; (80180cc <_set_speed+0x154>)
 8017fb8:	f06f 0064 	mvn.w	r0, #100	; 0x64
 8017fbc:	f7ff faf4 	bl	80175a8 <train_error>
 8017fc0:	e080      	b.n	80180c4 <_set_speed+0x14c>
        return;
    }

    int pvi1, pvi2;
    int sig = SIGNOF(sv100);
 8017fc2:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8017fc6:	2b00      	cmp	r3, #0
 8017fc8:	da02      	bge.n	8017fd0 <_set_speed+0x58>
 8017fca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017fce:	e000      	b.n	8017fd2 <_set_speed+0x5a>
 8017fd0:	2301      	movs	r3, #1
 8017fd2:	633b      	str	r3, [r7, #48]	; 0x30
    uint16_t v = abs(sv100);
 8017fd4:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8017fd8:	2b00      	cmp	r3, #0
 8017fda:	bfb8      	it	lt
 8017fdc:	425b      	neglt	r3, r3
 8017fde:	85fb      	strh	r3, [r7, #46]	; 0x2e
    uint16_t pwm_duty = volt_index(v*10 /* mili*/,
 8017fe0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8017fe2:	461a      	mov	r2, r3
 8017fe4:	0092      	lsls	r2, r2, #2
 8017fe6:	4413      	add	r3, r2
 8017fe8:	005b      	lsls	r3, r3, #1
 8017fea:	b298      	uxth	r0, r3
 8017fec:	68bb      	ldr	r3, [r7, #8]
 8017fee:	7c1b      	ldrb	r3, [r3, #16]
 8017ff0:	f107 0220 	add.w	r2, r7, #32
 8017ff4:	9301      	str	r3, [sp, #4]
 8017ff6:	f107 031c 	add.w	r3, r7, #28
 8017ffa:	9300      	str	r3, [sp, #0]
 8017ffc:	4613      	mov	r3, r2
 8017ffe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018000:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8018002:	f7fd f8f1 	bl	80151e8 <volt_index>
 8018006:	4603      	mov	r3, r0
 8018008:	85bb      	strh	r3, [r7, #44]	; 0x2c
                                   c1, c2,
                                   &pvi1, &pvi2, cnf->volt_policy);

	int dir1 = sig * vars->C1_dir;
 801800a:	687b      	ldr	r3, [r7, #4]
 801800c:	f993 301e 	ldrsb.w	r3, [r3, #30]
 8018010:	461a      	mov	r2, r3
 8018012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018014:	fb02 f303 	mul.w	r3, r2, r3
 8018018:	62bb      	str	r3, [r7, #40]	; 0x28
	int dir2 = sig * vars->C2_dir;
 801801a:	687b      	ldr	r3, [r7, #4]
 801801c:	f993 301f 	ldrsb.w	r3, [r3, #31]
 8018020:	461a      	mov	r2, r3
 8018022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018024:	fb02 f303 	mul.w	r3, r2, r3
 8018028:	627b      	str	r3, [r7, #36]	; 0x24


    msg_64_t m;
    m.from = MA_TRAIN_SC(tidx);
 801802a:	68fb      	ldr	r3, [r7, #12]
 801802c:	b25b      	sxtb	r3, r3
 801802e:	f003 0307 	and.w	r3, r3, #7
 8018032:	b25b      	sxtb	r3, r3
 8018034:	f063 0337 	orn	r3, r3, #55	; 0x37
 8018038:	b25b      	sxtb	r3, r3
 801803a:	b2db      	uxtb	r3, r3
 801803c:	747b      	strb	r3, [r7, #17]
    m.cmd = CMD_SETVPWM;
 801803e:	2301      	movs	r3, #1
 8018040:	74bb      	strb	r3, [r7, #18]
    m.v1u = pvi1;
 8018042:	6a3b      	ldr	r3, [r7, #32]
 8018044:	b29b      	uxth	r3, r3
 8018046:	82bb      	strh	r3, [r7, #20]
    m.v2 = dir1*pwm_duty;
 8018048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801804a:	b29b      	uxth	r3, r3
 801804c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 801804e:	fb12 f303 	smulbb	r3, r2, r3
 8018052:	b29b      	uxth	r3, r3
 8018054:	b21b      	sxth	r3, r3
 8018056:	82fb      	strh	r3, [r7, #22]
    m.to = vars->C1;
 8018058:	687b      	ldr	r3, [r7, #4]
 801805a:	7f1b      	ldrb	r3, [r3, #28]
 801805c:	743b      	strb	r3, [r7, #16]
	itm_debug3(DBG_SPDCTL, "setvpwm", m.v1u, m.v2, m.to);
 801805e:	8abb      	ldrh	r3, [r7, #20]
 8018060:	461a      	mov	r2, r3
 8018062:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8018066:	4619      	mov	r1, r3
 8018068:	7c3b      	ldrb	r3, [r7, #16]
 801806a:	9300      	str	r3, [sp, #0]
 801806c:	460b      	mov	r3, r1
 801806e:	4919      	ldr	r1, [pc, #100]	; (80180d4 <_set_speed+0x15c>)
 8018070:	2010      	movs	r0, #16
 8018072:	f7ff fa7d 	bl	8017570 <itm_debug3>
    mqf_write_from_spdctl(&m);
 8018076:	f107 0310 	add.w	r3, r7, #16
 801807a:	4618      	mov	r0, r3
 801807c:	f7ff fae2 	bl	8017644 <mqf_write_from_spdctl>

    if (c2) {
 8018080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018082:	2b00      	cmp	r3, #0
 8018084:	d01e      	beq.n	80180c4 <_set_speed+0x14c>
    	itm_debug3(DBG_SPDCTL, "setvpwm/c2", m.v1u, m.v2, m.to);
 8018086:	8abb      	ldrh	r3, [r7, #20]
 8018088:	461a      	mov	r2, r3
 801808a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801808e:	4619      	mov	r1, r3
 8018090:	7c3b      	ldrb	r3, [r7, #16]
 8018092:	9300      	str	r3, [sp, #0]
 8018094:	460b      	mov	r3, r1
 8018096:	4910      	ldr	r1, [pc, #64]	; (80180d8 <_set_speed+0x160>)
 8018098:	2010      	movs	r0, #16
 801809a:	f7ff fa69 	bl	8017570 <itm_debug3>
    	m.v1u = pvi2;
 801809e:	69fb      	ldr	r3, [r7, #28]
 80180a0:	b29b      	uxth	r3, r3
 80180a2:	82bb      	strh	r3, [r7, #20]
    	m.v2 = dir2*pwm_duty;
 80180a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180a6:	b29b      	uxth	r3, r3
 80180a8:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80180aa:	fb12 f303 	smulbb	r3, r2, r3
 80180ae:	b29b      	uxth	r3, r3
 80180b0:	b21b      	sxth	r3, r3
 80180b2:	82fb      	strh	r3, [r7, #22]
    	m.to = vars->C2;
 80180b4:	687b      	ldr	r3, [r7, #4]
 80180b6:	7f5b      	ldrb	r3, [r3, #29]
 80180b8:	743b      	strb	r3, [r7, #16]
    	mqf_write_from_spdctl(&m);
 80180ba:	f107 0310 	add.w	r3, r7, #16
 80180be:	4618      	mov	r0, r3
 80180c0:	f7ff fac0 	bl	8017644 <mqf_write_from_spdctl>
    }
}
 80180c4:	3740      	adds	r7, #64	; 0x40
 80180c6:	46bd      	mov	sp, r7
 80180c8:	bd80      	pop	{r7, pc}
 80180ca:	bf00      	nop
 80180cc:	08019b9c 	.word	0x08019b9c
 80180d0:	80000010 	.word	0x80000010
 80180d4:	08019ba8 	.word	0x08019ba8
 80180d8:	08019bb0 	.word	0x08019bb0

080180dc <train_set_target_speed>:

/* =========================================================================== */


int train_set_target_speed(int numtrain, int16_t target)
{
 80180dc:	b580      	push	{r7, lr}
 80180de:	b084      	sub	sp, #16
 80180e0:	af00      	add	r7, sp, #0
 80180e2:	6078      	str	r0, [r7, #4]
 80180e4:	460b      	mov	r3, r1
 80180e6:	807b      	strh	r3, [r7, #2]
	if (calibrating) return 1;
 80180e8:	4b0f      	ldr	r3, [pc, #60]	; (8018128 <train_set_target_speed+0x4c>)
 80180ea:	681b      	ldr	r3, [r3, #0]
 80180ec:	2b00      	cmp	r3, #0
 80180ee:	d001      	beq.n	80180f4 <train_set_target_speed+0x18>
 80180f0:	2301      	movs	r3, #1
 80180f2:	e015      	b.n	8018120 <train_set_target_speed+0x44>
	USE_TRAIN(numtrain) // tconf tvars
 80180f4:	6878      	ldr	r0, [r7, #4]
 80180f6:	f7fd ff85 	bl	8016004 <get_train_cnf>
 80180fa:	60f8      	str	r0, [r7, #12]
 80180fc:	687a      	ldr	r2, [r7, #4]
 80180fe:	4613      	mov	r3, r2
 8018100:	00db      	lsls	r3, r3, #3
 8018102:	1a9b      	subs	r3, r3, r2
 8018104:	00db      	lsls	r3, r3, #3
 8018106:	4a09      	ldr	r2, [pc, #36]	; (801812c <train_set_target_speed+0x50>)
 8018108:	4413      	add	r3, r2
 801810a:	60bb      	str	r3, [r7, #8]
	(void)tconf; // unused
	if (!tvars) return -1;
 801810c:	68bb      	ldr	r3, [r7, #8]
 801810e:	2b00      	cmp	r3, #0
 8018110:	d102      	bne.n	8018118 <train_set_target_speed+0x3c>
 8018112:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018116:	e003      	b.n	8018120 <train_set_target_speed+0x44>
	tvars->target_speed = target;
 8018118:	68bb      	ldr	r3, [r7, #8]
 801811a:	887a      	ldrh	r2, [r7, #2]
 801811c:	801a      	strh	r2, [r3, #0]
		if (c->enable_pid) {
			pidctl_reset(&c->pidcnf, &vars->pidvars);
		}
	}*/

	return 0;
 801811e:	2300      	movs	r3, #0
}
 8018120:	4618      	mov	r0, r3
 8018122:	3710      	adds	r7, #16
 8018124:	46bd      	mov	sp, r7
 8018126:	bd80      	pop	{r7, pc}
 8018128:	200053dc 	.word	0x200053dc
 801812c:	200053e8 	.word	0x200053e8

08018130 <pose_check_trig>:


static void pose_check_trig(int numtrain, train_vars_t *tvars, int32_t lastincr)
{
 8018130:	b580      	push	{r7, lr}
 8018132:	b08a      	sub	sp, #40	; 0x28
 8018134:	af02      	add	r7, sp, #8
 8018136:	60f8      	str	r0, [r7, #12]
 8018138:	60b9      	str	r1, [r7, #8]
 801813a:	607a      	str	r2, [r7, #4]
	if (!tvars->pose_trig) return;
 801813c:	68bb      	ldr	r3, [r7, #8]
 801813e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018140:	2b00      	cmp	r3, #0
 8018142:	d064      	beq.n	801820e <pose_check_trig+0xde>
	int tr = 0;
 8018144:	2300      	movs	r3, #0
 8018146:	61fb      	str	r3, [r7, #28]
	if (tvars->pose_trig > 0) {
 8018148:	68bb      	ldr	r3, [r7, #8]
 801814a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801814c:	2b00      	cmp	r3, #0
 801814e:	dd14      	ble.n	801817a <pose_check_trig+0x4a>
		if (lastincr<0) itm_debug3(DBG_ERR|DBG_POSEC, "wrong incr", numtrain, lastincr, tvars->pose_trig);
 8018150:	687b      	ldr	r3, [r7, #4]
 8018152:	2b00      	cmp	r3, #0
 8018154:	da08      	bge.n	8018168 <pose_check_trig+0x38>
 8018156:	68bb      	ldr	r3, [r7, #8]
 8018158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801815a:	9300      	str	r3, [sp, #0]
 801815c:	687b      	ldr	r3, [r7, #4]
 801815e:	68fa      	ldr	r2, [r7, #12]
 8018160:	492e      	ldr	r1, [pc, #184]	; (801821c <pose_check_trig+0xec>)
 8018162:	482f      	ldr	r0, [pc, #188]	; (8018220 <pose_check_trig+0xf0>)
 8018164:	f7ff fa04 	bl	8017570 <itm_debug3>
		if (tvars->position_estimate >= tvars->pose_trig) {
 8018168:	68bb      	ldr	r3, [r7, #8]
 801816a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801816c:	68bb      	ldr	r3, [r7, #8]
 801816e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018170:	429a      	cmp	r2, r3
 8018172:	db16      	blt.n	80181a2 <pose_check_trig+0x72>
			tr = 1;
 8018174:	2301      	movs	r3, #1
 8018176:	61fb      	str	r3, [r7, #28]
 8018178:	e013      	b.n	80181a2 <pose_check_trig+0x72>
		}
	} else { // pose_trig < 0
		if (lastincr>0) itm_debug3(DBG_ERR|DBG_POSEC, "wrong incr", numtrain, lastincr, tvars->pose_trig);
 801817a:	687b      	ldr	r3, [r7, #4]
 801817c:	2b00      	cmp	r3, #0
 801817e:	dd08      	ble.n	8018192 <pose_check_trig+0x62>
 8018180:	68bb      	ldr	r3, [r7, #8]
 8018182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018184:	9300      	str	r3, [sp, #0]
 8018186:	687b      	ldr	r3, [r7, #4]
 8018188:	68fa      	ldr	r2, [r7, #12]
 801818a:	4924      	ldr	r1, [pc, #144]	; (801821c <pose_check_trig+0xec>)
 801818c:	4824      	ldr	r0, [pc, #144]	; (8018220 <pose_check_trig+0xf0>)
 801818e:	f7ff f9ef 	bl	8017570 <itm_debug3>
		if (tvars->position_estimate <= tvars->pose_trig) {
 8018192:	68bb      	ldr	r3, [r7, #8]
 8018194:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8018196:	68bb      	ldr	r3, [r7, #8]
 8018198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801819a:	429a      	cmp	r2, r3
 801819c:	dc01      	bgt.n	80181a2 <pose_check_trig+0x72>
			tr = 1;
 801819e:	2301      	movs	r3, #1
 80181a0:	61fb      	str	r3, [r7, #28]
		}
	}
	if (!tr) return;
 80181a2:	69fb      	ldr	r3, [r7, #28]
 80181a4:	2b00      	cmp	r3, #0
 80181a6:	d034      	beq.n	8018212 <pose_check_trig+0xe2>
	itm_debug3(DBG_POSEC, "POSE trig", numtrain, tvars->position_estimate, tvars->pose_trig);
 80181a8:	68bb      	ldr	r3, [r7, #8]
 80181aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80181ac:	68bb      	ldr	r3, [r7, #8]
 80181ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80181b0:	9300      	str	r3, [sp, #0]
 80181b2:	4613      	mov	r3, r2
 80181b4:	68fa      	ldr	r2, [r7, #12]
 80181b6:	491b      	ldr	r1, [pc, #108]	; (8018224 <pose_check_trig+0xf4>)
 80181b8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80181bc:	f7ff f9d8 	bl	8017570 <itm_debug3>
	msg_64_t m;
	m.from = MA_TRAIN_SC(numtrain);
 80181c0:	68fb      	ldr	r3, [r7, #12]
 80181c2:	b25b      	sxtb	r3, r3
 80181c4:	f003 0307 	and.w	r3, r3, #7
 80181c8:	b25b      	sxtb	r3, r3
 80181ca:	f063 0337 	orn	r3, r3, #55	; 0x37
 80181ce:	b25b      	sxtb	r3, r3
 80181d0:	b2db      	uxtb	r3, r3
 80181d2:	747b      	strb	r3, [r7, #17]
	m.to = MA_CONTROL_T(numtrain);
 80181d4:	68fb      	ldr	r3, [r7, #12]
 80181d6:	b25b      	sxtb	r3, r3
 80181d8:	f003 0307 	and.w	r3, r3, #7
 80181dc:	b25b      	sxtb	r3, r3
 80181de:	f063 032f 	orn	r3, r3, #47	; 0x2f
 80181e2:	b25b      	sxtb	r3, r3
 80181e4:	b2db      	uxtb	r3, r3
 80181e6:	743b      	strb	r3, [r7, #16]
	m.cmd = CMD_POSE_TRIGGERED;
 80181e8:	2351      	movs	r3, #81	; 0x51
 80181ea:	74bb      	strb	r3, [r7, #18]
	m.v1u = tvars->C1;
 80181ec:	68bb      	ldr	r3, [r7, #8]
 80181ee:	7f1b      	ldrb	r3, [r3, #28]
 80181f0:	b29b      	uxth	r3, r3
 80181f2:	82bb      	strh	r3, [r7, #20]
	m.v2 = (int16_t) tvars->position_estimate; // XXX TODO: problem here pose is > 16bits
 80181f4:	68bb      	ldr	r3, [r7, #8]
 80181f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80181f8:	b21b      	sxth	r3, r3
 80181fa:	82fb      	strh	r3, [r7, #22]
	mqf_write_from_spdctl(&m);
 80181fc:	f107 0310 	add.w	r3, r7, #16
 8018200:	4618      	mov	r0, r3
 8018202:	f7ff fa1f 	bl	8017644 <mqf_write_from_spdctl>

	// trig only once
	tvars->pose_trig = 0;
 8018206:	68bb      	ldr	r3, [r7, #8]
 8018208:	2200      	movs	r2, #0
 801820a:	62da      	str	r2, [r3, #44]	; 0x2c
 801820c:	e002      	b.n	8018214 <pose_check_trig+0xe4>
	if (!tvars->pose_trig) return;
 801820e:	bf00      	nop
 8018210:	e000      	b.n	8018214 <pose_check_trig+0xe4>
	if (!tr) return;
 8018212:	bf00      	nop
}
 8018214:	3720      	adds	r7, #32
 8018216:	46bd      	mov	sp, r7
 8018218:	bd80      	pop	{r7, pc}
 801821a:	bf00      	nop
 801821c:	08019bbc 	.word	0x08019bbc
 8018220:	80004000 	.word	0x80004000
 8018224:	08019bc8 	.word	0x08019bc8

08018228 <mqf_write_from_nowhere>:
void msgsrv_tick(uint32_t notif_flags, uint32_t tick, uint32_t dt);

// TODO
void purge_all_queue(void);

LFMQUEUE_DEF_H(from_nowhere, msg_64_t)
 8018228:	b580      	push	{r7, lr}
 801822a:	b082      	sub	sp, #8
 801822c:	af00      	add	r7, sp, #0
 801822e:	6078      	str	r0, [r7, #4]
 8018230:	6879      	ldr	r1, [r7, #4]
 8018232:	4804      	ldr	r0, [pc, #16]	; (8018244 <mqf_write_from_nowhere+0x1c>)
 8018234:	f000 fe34 	bl	8018ea0 <mqf_write>
 8018238:	4603      	mov	r3, r0
 801823a:	4618      	mov	r0, r3
 801823c:	3708      	adds	r7, #8
 801823e:	46bd      	mov	sp, r7
 8018240:	bd80      	pop	{r7, pc}
 8018242:	bf00      	nop
 8018244:	20000578 	.word	0x20000578

08018248 <itm_debug1>:
{
 8018248:	b580      	push	{r7, lr}
 801824a:	b086      	sub	sp, #24
 801824c:	af02      	add	r7, sp, #8
 801824e:	60f8      	str	r0, [r7, #12]
 8018250:	60b9      	str	r1, [r7, #8]
 8018252:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 8018254:	4b08      	ldr	r3, [pc, #32]	; (8018278 <itm_debug1+0x30>)
 8018256:	681a      	ldr	r2, [r3, #0]
 8018258:	68fb      	ldr	r3, [r7, #12]
 801825a:	4013      	ands	r3, r2
 801825c:	2b00      	cmp	r3, #0
 801825e:	d007      	beq.n	8018270 <itm_debug1+0x28>
 8018260:	2301      	movs	r3, #1
 8018262:	9300      	str	r3, [sp, #0]
 8018264:	2300      	movs	r3, #0
 8018266:	2200      	movs	r2, #0
 8018268:	6879      	ldr	r1, [r7, #4]
 801826a:	68b8      	ldr	r0, [r7, #8]
 801826c:	f000 fd12 	bl	8018c94 <_itm_debug3>
}
 8018270:	bf00      	nop
 8018272:	3710      	adds	r7, #16
 8018274:	46bd      	mov	sp, r7
 8018276:	bd80      	pop	{r7, pc}
 8018278:	200005a4 	.word	0x200005a4

0801827c <itm_debug2>:
{
 801827c:	b580      	push	{r7, lr}
 801827e:	b086      	sub	sp, #24
 8018280:	af02      	add	r7, sp, #8
 8018282:	60f8      	str	r0, [r7, #12]
 8018284:	60b9      	str	r1, [r7, #8]
 8018286:	607a      	str	r2, [r7, #4]
 8018288:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, 0, 2);
 801828a:	4b09      	ldr	r3, [pc, #36]	; (80182b0 <itm_debug2+0x34>)
 801828c:	681a      	ldr	r2, [r3, #0]
 801828e:	68fb      	ldr	r3, [r7, #12]
 8018290:	4013      	ands	r3, r2
 8018292:	2b00      	cmp	r3, #0
 8018294:	d007      	beq.n	80182a6 <itm_debug2+0x2a>
 8018296:	2302      	movs	r3, #2
 8018298:	9300      	str	r3, [sp, #0]
 801829a:	2300      	movs	r3, #0
 801829c:	683a      	ldr	r2, [r7, #0]
 801829e:	6879      	ldr	r1, [r7, #4]
 80182a0:	68b8      	ldr	r0, [r7, #8]
 80182a2:	f000 fcf7 	bl	8018c94 <_itm_debug3>
}
 80182a6:	bf00      	nop
 80182a8:	3710      	adds	r7, #16
 80182aa:	46bd      	mov	sp, r7
 80182ac:	bd80      	pop	{r7, pc}
 80182ae:	bf00      	nop
 80182b0:	200005a4 	.word	0x200005a4

080182b4 <StartCtrlTask>:
static void run_task_ctrl(void);
extern DMA_HandleTypeDef hdma_i2c3_rx;
extern DMA_HandleTypeDef hdma_i2c3_tx;

void StartCtrlTask(_UNUSED_ void *argument)
{
 80182b4:	b580      	push	{r7, lr}
 80182b6:	b084      	sub	sp, #16
 80182b8:	af00      	add	r7, sp, #0
 80182ba:	6078      	str	r0, [r7, #4]
	int nsmpl = sizeof(train_adc_buf)/sizeof(uint16_t);
 80182bc:	2328      	movs	r3, #40	; 0x28
 80182be:	60fb      	str	r3, [r7, #12]

	if (sizeof(train_adc_buf) != sizeof(uint16_t)*NUM_LOCAL_CANTONS_HW*8) Error_Handler();
	if (nsmpl != 5*2*4) Error_Handler();
 80182c0:	68fb      	ldr	r3, [r7, #12]
 80182c2:	2b28      	cmp	r3, #40	; 0x28
 80182c4:	d001      	beq.n	80182ca <StartCtrlTask+0x16>
 80182c6:	f7e9 f86f 	bl	80013a8 <Error_Handler>
	//__HAL_DMA_ENABLE_IT(&hdma_i2c3_tx, DMA_IT_TC);

	//if (NUM_VAL_PER_CANTON != 4) Error_Handler();
	//if (ADC_HALF_BUFFER != 10*2) Error_Handler();

	if ((1)) set_pwm_freq(100);
 80182ca:	2064      	movs	r0, #100	; 0x64
 80182cc:	f000 f864 	bl	8018398 <set_pwm_freq>
	CantonTimerHandles[1]=&htim1;
 80182d0:	4b2a      	ldr	r3, [pc, #168]	; (801837c <StartCtrlTask+0xc8>)
 80182d2:	4a2b      	ldr	r2, [pc, #172]	; (8018380 <StartCtrlTask+0xcc>)
 80182d4:	605a      	str	r2, [r3, #4]
	CantonTimerHandles[2]=&htim2;
 80182d6:	4b29      	ldr	r3, [pc, #164]	; (801837c <StartCtrlTask+0xc8>)
 80182d8:	4a2a      	ldr	r2, [pc, #168]	; (8018384 <StartCtrlTask+0xd0>)
 80182da:	609a      	str	r2, [r3, #8]
	CantonTimerHandles[3]=&htim3;
 80182dc:	4b27      	ldr	r3, [pc, #156]	; (801837c <StartCtrlTask+0xc8>)
 80182de:	4a2a      	ldr	r2, [pc, #168]	; (8018388 <StartCtrlTask+0xd4>)
 80182e0:	60da      	str	r2, [r3, #12]
	CantonTimerHandles[4]=&htim12;
 80182e2:	4b26      	ldr	r3, [pc, #152]	; (801837c <StartCtrlTask+0xc8>)
 80182e4:	4a29      	ldr	r2, [pc, #164]	; (801838c <StartCtrlTask+0xd8>)
 80182e6:	611a      	str	r2, [r3, #16]



	//HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
	//HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80182e8:	2100      	movs	r1, #0
 80182ea:	4825      	ldr	r0, [pc, #148]	; (8018380 <StartCtrlTask+0xcc>)
 80182ec:	f7ef feb2 	bl	8008054 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80182f0:	2104      	movs	r1, #4
 80182f2:	4823      	ldr	r0, [pc, #140]	; (8018380 <StartCtrlTask+0xcc>)
 80182f4:	f7ef feae 	bl	8008054 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 80182f8:	2108      	movs	r1, #8
 80182fa:	4821      	ldr	r0, [pc, #132]	; (8018380 <StartCtrlTask+0xcc>)
 80182fc:	f7ef feaa 	bl	8008054 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_4);
 8018300:	210c      	movs	r1, #12
 8018302:	481f      	ldr	r0, [pc, #124]	; (8018380 <StartCtrlTask+0xcc>)
 8018304:	f7ef fea6 	bl	8008054 <HAL_TIM_PWM_Stop>

	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8018308:	2108      	movs	r1, #8
 801830a:	481e      	ldr	r0, [pc, #120]	; (8018384 <StartCtrlTask+0xd0>)
 801830c:	f7ef fea2 	bl	8008054 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 8018310:	210c      	movs	r1, #12
 8018312:	481c      	ldr	r0, [pc, #112]	; (8018384 <StartCtrlTask+0xd0>)
 8018314:	f7ef fe9e 	bl	8008054 <HAL_TIM_PWM_Stop>

	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8018318:	2100      	movs	r1, #0
 801831a:	481b      	ldr	r0, [pc, #108]	; (8018388 <StartCtrlTask+0xd4>)
 801831c:	f7ef fe9a 	bl	8008054 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8018320:	2104      	movs	r1, #4
 8018322:	4819      	ldr	r0, [pc, #100]	; (8018388 <StartCtrlTask+0xd4>)
 8018324:	f7ef fe96 	bl	8008054 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8018328:	2108      	movs	r1, #8
 801832a:	4817      	ldr	r0, [pc, #92]	; (8018388 <StartCtrlTask+0xd4>)
 801832c:	f7ef fe92 	bl	8008054 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8018330:	210c      	movs	r1, #12
 8018332:	4815      	ldr	r0, [pc, #84]	; (8018388 <StartCtrlTask+0xd4>)
 8018334:	f7ef fe8e 	bl	8008054 <HAL_TIM_PWM_Stop>

	HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_1);
 8018338:	2100      	movs	r1, #0
 801833a:	4814      	ldr	r0, [pc, #80]	; (801838c <StartCtrlTask+0xd8>)
 801833c:	f7ef fe8a 	bl	8008054 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_2);
 8018340:	2104      	movs	r1, #4
 8018342:	4812      	ldr	r0, [pc, #72]	; (801838c <StartCtrlTask+0xd8>)
 8018344:	f7ef fe86 	bl	8008054 <HAL_TIM_PWM_Stop>

	//HAL_TIM_Base_Start_IT(&htim8);
	HAL_TIM_Base_Start_IT(&htim1);
 8018348:	480d      	ldr	r0, [pc, #52]	; (8018380 <StartCtrlTask+0xcc>)
 801834a:	f7ef fdeb 	bl	8007f24 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim2);
 801834e:	480d      	ldr	r0, [pc, #52]	; (8018384 <StartCtrlTask+0xd0>)
 8018350:	f7ef fdc4 	bl	8007edc <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim3);
 8018354:	480c      	ldr	r0, [pc, #48]	; (8018388 <StartCtrlTask+0xd4>)
 8018356:	f7ef fdc1 	bl	8007edc <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim12);
 801835a:	480c      	ldr	r0, [pc, #48]	; (801838c <StartCtrlTask+0xd8>)
 801835c:	f7ef fdbe 	bl	8007edc <HAL_TIM_Base_Start>

	HAL_ADC_Start_DMA(&hadc1,(uint32_t *)train_adc_buf, nsmpl);
 8018360:	68fb      	ldr	r3, [r7, #12]
 8018362:	461a      	mov	r2, r3
 8018364:	490a      	ldr	r1, [pc, #40]	; (8018390 <StartCtrlTask+0xdc>)
 8018366:	480b      	ldr	r0, [pc, #44]	; (8018394 <StartCtrlTask+0xe0>)
 8018368:	f7e9 fda4 	bl	8001eb4 <HAL_ADC_Start_DMA>
	//HAL_ADC_Start_DMA(&hadc1,(uint32_t *)train_adc_buffer, NUM_ADC_SAMPLES);

	startCycleCounter();
 801836c:	f7fd fcfe 	bl	8015d6c <startCycleCounter>
		p = t;
		//itm_debug1(DBG_ERR, "cycl", d);
	}
	itm_debug1(DBG_ERR, "tcycl", GetCycleCount64()-k);
	*/
	run_task_ctrl();
 8018370:	f000 f84c 	bl	801840c <run_task_ctrl>
}
 8018374:	bf00      	nop
 8018376:	3710      	adds	r7, #16
 8018378:	46bd      	mov	sp, r7
 801837a:	bd80      	pop	{r7, pc}
 801837c:	200052c0 	.word	0x200052c0
 8018380:	200067a8 	.word	0x200067a8
 8018384:	20006cf4 	.word	0x20006cf4
 8018388:	2000629c 	.word	0x2000629c
 801838c:	20006d38 	.word	0x20006d38
 8018390:	200088d4 	.word	0x200088d4
 8018394:	200062e0 	.word	0x200062e0

08018398 <set_pwm_freq>:
int cur_freqhz = 350;
extern TIM_HandleTypeDef htim1;

// #define __HAL_TIM_SET_PRESCALER(__HANDLE__, __PRESC__)       ((__HANDLE__)->Instance->PSC = (__PRESC__))
void set_pwm_freq(int freqhz)
{
 8018398:	b480      	push	{r7}
 801839a:	b085      	sub	sp, #20
 801839c:	af00      	add	r7, sp, #0
 801839e:	6078      	str	r0, [r7, #4]
	// 12MHz / 200 -> 60000
	// 50Hz = 1200
	int ps = (60000/freqhz)-1;
 80183a0:	f64e 2260 	movw	r2, #60000	; 0xea60
 80183a4:	687b      	ldr	r3, [r7, #4]
 80183a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80183aa:	3b01      	subs	r3, #1
 80183ac:	60fb      	str	r3, [r7, #12]
	if ((ps<1) || (ps>0xFFFF)) ps = 1200;
 80183ae:	68fb      	ldr	r3, [r7, #12]
 80183b0:	2b00      	cmp	r3, #0
 80183b2:	dd03      	ble.n	80183bc <set_pwm_freq+0x24>
 80183b4:	68fb      	ldr	r3, [r7, #12]
 80183b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80183ba:	db02      	blt.n	80183c2 <set_pwm_freq+0x2a>
 80183bc:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 80183c0:	60fb      	str	r3, [r7, #12]
	ps = ps-1;
 80183c2:	68fb      	ldr	r3, [r7, #12]
 80183c4:	3b01      	subs	r3, #1
 80183c6:	60fb      	str	r3, [r7, #12]
	cur_freqhz = 60000/(ps+1);
 80183c8:	68fb      	ldr	r3, [r7, #12]
 80183ca:	3301      	adds	r3, #1
 80183cc:	f64e 2260 	movw	r2, #60000	; 0xea60
 80183d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80183d4:	4a09      	ldr	r2, [pc, #36]	; (80183fc <set_pwm_freq+0x64>)
 80183d6:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_PRESCALER(&htim1, ps);
 80183d8:	4b09      	ldr	r3, [pc, #36]	; (8018400 <set_pwm_freq+0x68>)
 80183da:	681b      	ldr	r3, [r3, #0]
 80183dc:	68fa      	ldr	r2, [r7, #12]
 80183de:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_PRESCALER(&htim2, ps);
 80183e0:	4b08      	ldr	r3, [pc, #32]	; (8018404 <set_pwm_freq+0x6c>)
 80183e2:	681b      	ldr	r3, [r3, #0]
 80183e4:	68fa      	ldr	r2, [r7, #12]
 80183e6:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_PRESCALER(&htim8, ps);
 80183e8:	4b07      	ldr	r3, [pc, #28]	; (8018408 <set_pwm_freq+0x70>)
 80183ea:	681b      	ldr	r3, [r3, #0]
 80183ec:	68fa      	ldr	r2, [r7, #12]
 80183ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80183f0:	bf00      	nop
 80183f2:	3714      	adds	r7, #20
 80183f4:	46bd      	mov	sp, r7
 80183f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183fa:	4770      	bx	lr
 80183fc:	200005a0 	.word	0x200005a0
 8018400:	200067a8 	.word	0x200067a8
 8018404:	20006cf4 	.word	0x20006cf4
 8018408:	20005ca8 	.word	0x20005ca8

0801840c <run_task_ctrl>:

#define USE_NOTIF_TIM 0

volatile uint32_t t0ctrl;
static void run_task_ctrl(void)
{
 801840c:	b580      	push	{r7, lr}
 801840e:	b08a      	sub	sp, #40	; 0x28
 8018410:	af00      	add	r7, sp, #0
	int cnt = 0;
 8018412:	2300      	movs	r3, #0
 8018414:	627b      	str	r3, [r7, #36]	; 0x24
	//if ((0))   calibrate_bemf(); //XXX

	if ((1)) {
		msg_64_t m;
		m.from = MA_BROADCAST;
 8018416:	23ff      	movs	r3, #255	; 0xff
 8018418:	727b      	strb	r3, [r7, #9]
		m.to = MA_BROADCAST;
 801841a:	23ff      	movs	r3, #255	; 0xff
 801841c:	723b      	strb	r3, [r7, #8]
		m.cmd = CMD_SETRUN_MODE;
 801841e:	23fc      	movs	r3, #252	; 0xfc
 8018420:	72bb      	strb	r3, [r7, #10]
		//m.v1u = runmode_off;
		//m.v1u = runmode_normal;
		m.v1u = runmode_detect1;
 8018422:	2303      	movs	r3, #3
 8018424:	81bb      	strh	r3, [r7, #12]
		mqf_write_from_nowhere(&m); // XXX it wont be sent to ctl
 8018426:	f107 0308 	add.w	r3, r7, #8
 801842a:	4618      	mov	r0, r3
 801842c:	f7ff fefc 	bl	8018228 <mqf_write_from_nowhere>
	}

	for (;;) {
		uint32_t notif;
		xTaskNotifyWait(0, 0xFFFFFFFF, &notif, portMAX_DELAY);
 8018430:	1d3a      	adds	r2, r7, #4
 8018432:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018436:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801843a:	2000      	movs	r0, #0
 801843c:	f7f6 fc94 	bl	800ed68 <xTaskNotifyWait>
		if ((1)) {
			int n = 0;
 8018440:	2300      	movs	r3, #0
 8018442:	623b      	str	r3, [r7, #32]
			if (notif & NOTIF_NEW_ADC_1)  n = 1;
 8018444:	687b      	ldr	r3, [r7, #4]
 8018446:	f003 0301 	and.w	r3, r3, #1
 801844a:	2b00      	cmp	r3, #0
 801844c:	d001      	beq.n	8018452 <run_task_ctrl+0x46>
 801844e:	2301      	movs	r3, #1
 8018450:	623b      	str	r3, [r7, #32]
			if (notif & NOTIF_NEW_ADC_2)  n |= 2;
 8018452:	687b      	ldr	r3, [r7, #4]
 8018454:	f003 0302 	and.w	r3, r3, #2
 8018458:	2b00      	cmp	r3, #0
 801845a:	d003      	beq.n	8018464 <run_task_ctrl+0x58>
 801845c:	6a3b      	ldr	r3, [r7, #32]
 801845e:	f043 0302 	orr.w	r3, r3, #2
 8018462:	623b      	str	r3, [r7, #32]
			itm_debug2(DBG_LOWCTRL, "-----", 0 /*(notif & NOTIF_TIM8) ? 1 : 0*/, n);
 8018464:	6a3b      	ldr	r3, [r7, #32]
 8018466:	2200      	movs	r2, #0
 8018468:	494c      	ldr	r1, [pc, #304]	; (801859c <run_task_ctrl+0x190>)
 801846a:	f44f 7080 	mov.w	r0, #256	; 0x100
 801846e:	f7ff ff05 	bl	801827c <itm_debug2>
			if (n==3) {
 8018472:	6a3b      	ldr	r3, [r7, #32]
 8018474:	2b03      	cmp	r3, #3
 8018476:	d105      	bne.n	8018484 <run_task_ctrl+0x78>
				itm_debug1(DBG_LOWCTRL|DBG_ERR, "both", n);
 8018478:	6a3a      	ldr	r2, [r7, #32]
 801847a:	4949      	ldr	r1, [pc, #292]	; (80185a0 <run_task_ctrl+0x194>)
 801847c:	4849      	ldr	r0, [pc, #292]	; (80185a4 <run_task_ctrl+0x198>)
 801847e:	f7ff fee3 	bl	8018248 <itm_debug1>
 8018482:	e7d5      	b.n	8018430 <run_task_ctrl+0x24>
				if ((1)) continue; // skip this tick
			}
		}
		cnt++;
 8018484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018486:	3301      	adds	r3, #1
 8018488:	627b      	str	r3, [r7, #36]	; 0x24
		t0ctrl = HAL_GetTick();
 801848a:	f7e9 fca1 	bl	8001dd0 <HAL_GetTick>
 801848e:	4602      	mov	r2, r0
 8018490:	4b45      	ldr	r3, [pc, #276]	; (80185a8 <run_task_ctrl+0x19c>)
 8018492:	601a      	str	r2, [r3, #0]
		if (0==(notif & (NOTIF_NEW_ADC_1|NOTIF_NEW_ADC_2))) continue;
#endif
		//debug_info('G', 0, "HOP", 0, 0, 0);
		static uint32_t oldt = 0;
		static uint32_t t0 = 0;
		uint32_t t = HAL_GetTick();
 8018494:	f7e9 fc9c 	bl	8001dd0 <HAL_GetTick>
 8018498:	61f8      	str	r0, [r7, #28]
		// XXX we should have a global t0
		if (!t0) t0 = t;
 801849a:	4b44      	ldr	r3, [pc, #272]	; (80185ac <run_task_ctrl+0x1a0>)
 801849c:	681b      	ldr	r3, [r3, #0]
 801849e:	2b00      	cmp	r3, #0
 80184a0:	d102      	bne.n	80184a8 <run_task_ctrl+0x9c>
 80184a2:	4a42      	ldr	r2, [pc, #264]	; (80185ac <run_task_ctrl+0x1a0>)
 80184a4:	69fb      	ldr	r3, [r7, #28]
 80184a6:	6013      	str	r3, [r2, #0]
		int32_t dt = (oldt) ? (t-oldt) : 1;
 80184a8:	4b41      	ldr	r3, [pc, #260]	; (80185b0 <run_task_ctrl+0x1a4>)
 80184aa:	681b      	ldr	r3, [r3, #0]
 80184ac:	2b00      	cmp	r3, #0
 80184ae:	d004      	beq.n	80184ba <run_task_ctrl+0xae>
 80184b0:	4b3f      	ldr	r3, [pc, #252]	; (80185b0 <run_task_ctrl+0x1a4>)
 80184b2:	681b      	ldr	r3, [r3, #0]
 80184b4:	69fa      	ldr	r2, [r7, #28]
 80184b6:	1ad3      	subs	r3, r2, r3
 80184b8:	e000      	b.n	80184bc <run_task_ctrl+0xb0>
 80184ba:	2301      	movs	r3, #1
 80184bc:	61bb      	str	r3, [r7, #24]
		oldt = t;
 80184be:	4a3c      	ldr	r2, [pc, #240]	; (80185b0 <run_task_ctrl+0x1a4>)
 80184c0:	69fb      	ldr	r3, [r7, #28]
 80184c2:	6013      	str	r3, [r2, #0]
		ina3221
		void spdctl_run_tick(uint32_t notif_flags, uint32_t tick, uint32_t dt);
		void msgsrv_tick(uint32_t notif_flags, uint32_t tick, uint32_t dt);
		*/

		bemf_tick(notif, t, dt);
 80184c4:	687b      	ldr	r3, [r7, #4]
 80184c6:	69ba      	ldr	r2, [r7, #24]
 80184c8:	69f9      	ldr	r1, [r7, #28]
 80184ca:	4618      	mov	r0, r3
 80184cc:	f7fd f820 	bl	8015510 <bemf_tick>
		itm_debug1(DBG_LOWCTRL, "--msg", dt);
 80184d0:	69ba      	ldr	r2, [r7, #24]
 80184d2:	4938      	ldr	r1, [pc, #224]	; (80185b4 <run_task_ctrl+0x1a8>)
 80184d4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80184d8:	f7ff feb6 	bl	8018248 <itm_debug1>
		msgsrv_tick(notif, t, dt);
 80184dc:	687b      	ldr	r3, [r7, #4]
 80184de:	69ba      	ldr	r2, [r7, #24]
 80184e0:	69f9      	ldr	r1, [r7, #28]
 80184e2:	4618      	mov	r0, r3
 80184e4:	f7fe fd34 	bl	8016f50 <msgsrv_tick>
		itm_debug1(DBG_LOWCTRL, "--spdctl", dt);
 80184e8:	69ba      	ldr	r2, [r7, #24]
 80184ea:	4933      	ldr	r1, [pc, #204]	; (80185b8 <run_task_ctrl+0x1ac>)
 80184ec:	f44f 7080 	mov.w	r0, #256	; 0x100
 80184f0:	f7ff feaa 	bl	8018248 <itm_debug1>
		spdctl_run_tick(notif, t, dt);
 80184f4:	687b      	ldr	r3, [r7, #4]
 80184f6:	69ba      	ldr	r2, [r7, #24]
 80184f8:	69f9      	ldr	r1, [r7, #28]
 80184fa:	4618      	mov	r0, r3
 80184fc:	f7ff f8de 	bl	80176bc <spdctl_run_tick>
		itm_debug1(DBG_LOWCTRL, "--canton", dt);
 8018500:	69ba      	ldr	r2, [r7, #24]
 8018502:	492e      	ldr	r1, [pc, #184]	; (80185bc <run_task_ctrl+0x1b0>)
 8018504:	f44f 7080 	mov.w	r0, #256	; 0x100
 8018508:	f7ff fe9e 	bl	8018248 <itm_debug1>
		canton_tick(notif, t, dt);
 801850c:	687b      	ldr	r3, [r7, #4]
 801850e:	69ba      	ldr	r2, [r7, #24]
 8018510:	69f9      	ldr	r1, [r7, #28]
 8018512:	4618      	mov	r0, r3
 8018514:	f7fc fbd8 	bl	8014cc8 <canton_tick>
		itm_debug1(DBG_LOWCTRL, "--trnout", dt);
 8018518:	69ba      	ldr	r2, [r7, #24]
 801851a:	4929      	ldr	r1, [pc, #164]	; (80185c0 <run_task_ctrl+0x1b4>)
 801851c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8018520:	f7ff fe92 	bl	8018248 <itm_debug1>
		turnout_tick(notif, t, dt);
 8018524:	687b      	ldr	r3, [r7, #4]
 8018526:	69ba      	ldr	r2, [r7, #24]
 8018528:	69f9      	ldr	r1, [r7, #28]
 801852a:	4618      	mov	r0, r3
 801852c:	f7fd f998 	bl	8015860 <turnout_tick>
		itm_debug1(DBG_LOWCTRL, "--ctrl", dt);
 8018530:	69ba      	ldr	r2, [r7, #24]
 8018532:	4924      	ldr	r1, [pc, #144]	; (80185c4 <run_task_ctrl+0x1b8>)
 8018534:	f44f 7080 	mov.w	r0, #256	; 0x100
 8018538:	f7ff fe86 	bl	8018248 <itm_debug1>
		ctrl_run_tick(notif, t, dt);
 801853c:	687b      	ldr	r3, [r7, #4]
 801853e:	69ba      	ldr	r2, [r7, #24]
 8018540:	69f9      	ldr	r1, [r7, #28]
 8018542:	4618      	mov	r0, r3
 8018544:	f7fb fa6c 	bl	8013a20 <ctrl_run_tick>
		_UNUSED_ uint32_t e1 = HAL_GetTick() - t;
 8018548:	f7e9 fc42 	bl	8001dd0 <HAL_GetTick>
 801854c:	4602      	mov	r2, r0
 801854e:	69fb      	ldr	r3, [r7, #28]
 8018550:	1ad3      	subs	r3, r2, r3
 8018552:	617b      	str	r3, [r7, #20]
#if USE_NOTIF_TIM
#else
		//if (cnt>20) {
		itm_debug1(DBG_LOWCTRL, "--pres", dt);
 8018554:	69ba      	ldr	r2, [r7, #24]
 8018556:	491c      	ldr	r1, [pc, #112]	; (80185c8 <run_task_ctrl+0x1bc>)
 8018558:	f44f 7080 	mov.w	r0, #256	; 0x100
 801855c:	f7ff fe74 	bl	8018248 <itm_debug1>
		presdect_tick(notif, t, dt);
 8018560:	687b      	ldr	r3, [r7, #4]
 8018562:	69ba      	ldr	r2, [r7, #24]
 8018564:	69f9      	ldr	r1, [r7, #28]
 8018566:	4618      	mov	r0, r3
 8018568:	f7fd f900 	bl	801576c <presdect_tick>
		//}
#endif
		itm_debug1(DBG_LOWCTRL, "--done", dt);
 801856c:	69ba      	ldr	r2, [r7, #24]
 801856e:	4917      	ldr	r1, [pc, #92]	; (80185cc <run_task_ctrl+0x1c0>)
 8018570:	f44f 7080 	mov.w	r0, #256	; 0x100
 8018574:	f7ff fe68 	bl	8018248 <itm_debug1>
		uint32_t et = HAL_GetTick() - t;
 8018578:	f7e9 fc2a 	bl	8001dd0 <HAL_GetTick>
 801857c:	4602      	mov	r2, r0
 801857e:	69fb      	ldr	r3, [r7, #28]
 8018580:	1ad3      	subs	r3, r2, r3
 8018582:	613b      	str	r3, [r7, #16]
		if ((1)) {
			//itm_debug2(DBG_ERR, "ctrl tick", e1, et);
			if (et>9) {
 8018584:	693b      	ldr	r3, [r7, #16]
 8018586:	2b09      	cmp	r3, #9
 8018588:	f67f af52 	bls.w	8018430 <run_task_ctrl+0x24>
				itm_debug1(DBG_ERR, "long proc", et);
 801858c:	693b      	ldr	r3, [r7, #16]
 801858e:	461a      	mov	r2, r3
 8018590:	490f      	ldr	r1, [pc, #60]	; (80185d0 <run_task_ctrl+0x1c4>)
 8018592:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8018596:	f7ff fe57 	bl	8018248 <itm_debug1>
	for (;;) {
 801859a:	e749      	b.n	8018430 <run_task_ctrl+0x24>
 801859c:	08019bd4 	.word	0x08019bd4
 80185a0:	08019bdc 	.word	0x08019bdc
 80185a4:	80000100 	.word	0x80000100
 80185a8:	20009140 	.word	0x20009140
 80185ac:	200055b0 	.word	0x200055b0
 80185b0:	200055b4 	.word	0x200055b4
 80185b4:	08019be4 	.word	0x08019be4
 80185b8:	08019bec 	.word	0x08019bec
 80185bc:	08019bf8 	.word	0x08019bf8
 80185c0:	08019c04 	.word	0x08019c04
 80185c4:	08019c10 	.word	0x08019c10
 80185c8:	08019c18 	.word	0x08019c18
 80185cc:	08019c20 	.word	0x08019c20
 80185d0:	08019c28 	.word	0x08019c28

080185d4 <HAL_ADC_ConvCpltCallback>:
static int nhalf=0;
static int nfull=0;


void HAL_ADC_ConvCpltCallback(_UNUSED_ ADC_HandleTypeDef* AdcHandle)
{
 80185d4:	b580      	push	{r7, lr}
 80185d6:	b086      	sub	sp, #24
 80185d8:	af02      	add	r7, sp, #8
 80185da:	6078      	str	r0, [r7, #4]
	nfull++;
 80185dc:	4b0f      	ldr	r3, [pc, #60]	; (801861c <HAL_ADC_ConvCpltCallback+0x48>)
 80185de:	681b      	ldr	r3, [r3, #0]
 80185e0:	3301      	adds	r3, #1
 80185e2:	4a0e      	ldr	r2, [pc, #56]	; (801861c <HAL_ADC_ConvCpltCallback+0x48>)
 80185e4:	6013      	str	r3, [r2, #0]
	BaseType_t higher=0;
 80185e6:	2300      	movs	r3, #0
 80185e8:	60fb      	str	r3, [r7, #12]
	if ((0)) itm_debug1(DBG_TIM, "conv/f", HAL_GetTick());
	xTaskNotifyFromISR(ctrlTaskHandle, NOTIF_NEW_ADC_2, eSetBits, &higher);
 80185ea:	4b0d      	ldr	r3, [pc, #52]	; (8018620 <HAL_ADC_ConvCpltCallback+0x4c>)
 80185ec:	6818      	ldr	r0, [r3, #0]
 80185ee:	f107 030c 	add.w	r3, r7, #12
 80185f2:	9300      	str	r3, [sp, #0]
 80185f4:	2300      	movs	r3, #0
 80185f6:	2201      	movs	r2, #1
 80185f8:	2102      	movs	r1, #2
 80185fa:	f7f6 fc0f 	bl	800ee1c <xTaskGenericNotifyFromISR>
	portYIELD_FROM_ISR(higher);
 80185fe:	68fb      	ldr	r3, [r7, #12]
 8018600:	2b00      	cmp	r3, #0
 8018602:	d007      	beq.n	8018614 <HAL_ADC_ConvCpltCallback+0x40>
 8018604:	4b07      	ldr	r3, [pc, #28]	; (8018624 <HAL_ADC_ConvCpltCallback+0x50>)
 8018606:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801860a:	601a      	str	r2, [r3, #0]
 801860c:	f3bf 8f4f 	dsb	sy
 8018610:	f3bf 8f6f 	isb	sy
}
 8018614:	bf00      	nop
 8018616:	3710      	adds	r7, #16
 8018618:	46bd      	mov	sp, r7
 801861a:	bd80      	pop	{r7, pc}
 801861c:	200055ac 	.word	0x200055ac
 8018620:	200062dc 	.word	0x200062dc
 8018624:	e000ed04 	.word	0xe000ed04

08018628 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(_UNUSED_ ADC_HandleTypeDef* hadc)
{
 8018628:	b580      	push	{r7, lr}
 801862a:	b086      	sub	sp, #24
 801862c:	af02      	add	r7, sp, #8
 801862e:	6078      	str	r0, [r7, #4]
	nhalf++;
 8018630:	4b0f      	ldr	r3, [pc, #60]	; (8018670 <HAL_ADC_ConvHalfCpltCallback+0x48>)
 8018632:	681b      	ldr	r3, [r3, #0]
 8018634:	3301      	adds	r3, #1
 8018636:	4a0e      	ldr	r2, [pc, #56]	; (8018670 <HAL_ADC_ConvHalfCpltCallback+0x48>)
 8018638:	6013      	str	r3, [r2, #0]
	BaseType_t higher=0;
 801863a:	2300      	movs	r3, #0
 801863c:	60fb      	str	r3, [r7, #12]
	if ((0)) itm_debug1(DBG_TIM, "conv/h", HAL_GetTick());
	xTaskNotifyFromISR(ctrlTaskHandle, NOTIF_NEW_ADC_1, eSetBits, &higher);
 801863e:	4b0d      	ldr	r3, [pc, #52]	; (8018674 <HAL_ADC_ConvHalfCpltCallback+0x4c>)
 8018640:	6818      	ldr	r0, [r3, #0]
 8018642:	f107 030c 	add.w	r3, r7, #12
 8018646:	9300      	str	r3, [sp, #0]
 8018648:	2300      	movs	r3, #0
 801864a:	2201      	movs	r2, #1
 801864c:	2101      	movs	r1, #1
 801864e:	f7f6 fbe5 	bl	800ee1c <xTaskGenericNotifyFromISR>
	portYIELD_FROM_ISR(higher);
 8018652:	68fb      	ldr	r3, [r7, #12]
 8018654:	2b00      	cmp	r3, #0
 8018656:	d007      	beq.n	8018668 <HAL_ADC_ConvHalfCpltCallback+0x40>
 8018658:	4b07      	ldr	r3, [pc, #28]	; (8018678 <HAL_ADC_ConvHalfCpltCallback+0x50>)
 801865a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801865e:	601a      	str	r2, [r3, #0]
 8018660:	f3bf 8f4f 	dsb	sy
 8018664:	f3bf 8f6f 	isb	sy
}
 8018668:	bf00      	nop
 801866a:	3710      	adds	r7, #16
 801866c:	46bd      	mov	sp, r7
 801866e:	bd80      	pop	{r7, pc}
 8018670:	200055a8 	.word	0x200055a8
 8018674:	200062dc 	.word	0x200062dc
 8018678:	e000ed04 	.word	0xe000ed04

0801867c <HAL_ADC_ErrorCallback>:
void HAL_ADC_LevelOutOfWindowCallback(_UNUSED_ ADC_HandleTypeDef* hadc)
{
	itm_debug1(DBG_ERR|DBG_TIM, "ADC ERR", 1);
}
void  HAL_ADC_ErrorCallback(_UNUSED_ ADC_HandleTypeDef *hadc)
{
 801867c:	b580      	push	{r7, lr}
 801867e:	b082      	sub	sp, #8
 8018680:	af00      	add	r7, sp, #0
 8018682:	6078      	str	r0, [r7, #4]
	itm_debug1(DBG_ERR|DBG_TIM, "ADC ERR", 0);
 8018684:	2200      	movs	r2, #0
 8018686:	4904      	ldr	r1, [pc, #16]	; (8018698 <HAL_ADC_ErrorCallback+0x1c>)
 8018688:	4804      	ldr	r0, [pc, #16]	; (801869c <HAL_ADC_ErrorCallback+0x20>)
 801868a:	f7ff fddd 	bl	8018248 <itm_debug1>
}
 801868e:	bf00      	nop
 8018690:	3708      	adds	r7, #8
 8018692:	46bd      	mov	sp, r7
 8018694:	bd80      	pop	{r7, pc}
 8018696:	bf00      	nop
 8018698:	08019c34 	.word	0x08019c34
 801869c:	80000001 	.word	0x80000001

080186a0 <i2c_ready>:

#endif
/// ----------------------------------

static void i2c_ready(_UNUSED_ int a)
{
 80186a0:	b480      	push	{r7}
 80186a2:	b083      	sub	sp, #12
 80186a4:	af00      	add	r7, sp, #0
 80186a6:	6078      	str	r0, [r7, #4]

}
 80186a8:	bf00      	nop
 80186aa:	370c      	adds	r7, #12
 80186ac:	46bd      	mov	sp, r7
 80186ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186b2:	4770      	bx	lr

080186b4 <I2C_Scan>:
static void I2C_Scan(void)
{
 80186b4:	b580      	push	{r7, lr}
 80186b6:	b082      	sub	sp, #8
 80186b8:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef res;
    for(uint16_t i = 0; i < 128; i++) {
 80186ba:	2300      	movs	r3, #0
 80186bc:	80fb      	strh	r3, [r7, #6]
 80186be:	e013      	b.n	80186e8 <I2C_Scan+0x34>
        res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 80186c0:	88fb      	ldrh	r3, [r7, #6]
 80186c2:	005b      	lsls	r3, r3, #1
 80186c4:	b299      	uxth	r1, r3
 80186c6:	230a      	movs	r3, #10
 80186c8:	2201      	movs	r2, #1
 80186ca:	480b      	ldr	r0, [pc, #44]	; (80186f8 <I2C_Scan+0x44>)
 80186cc:	f7eb face 	bl	8003c6c <HAL_I2C_IsDeviceReady>
 80186d0:	4603      	mov	r3, r0
 80186d2:	717b      	strb	r3, [r7, #5]
        if(res == HAL_OK) {
 80186d4:	797b      	ldrb	r3, [r7, #5]
 80186d6:	2b00      	cmp	r3, #0
 80186d8:	d103      	bne.n	80186e2 <I2C_Scan+0x2e>
        	i2c_ready(i);
 80186da:	88fb      	ldrh	r3, [r7, #6]
 80186dc:	4618      	mov	r0, r3
 80186de:	f7ff ffdf 	bl	80186a0 <i2c_ready>
    for(uint16_t i = 0; i < 128; i++) {
 80186e2:	88fb      	ldrh	r3, [r7, #6]
 80186e4:	3301      	adds	r3, #1
 80186e6:	80fb      	strh	r3, [r7, #6]
 80186e8:	88fb      	ldrh	r3, [r7, #6]
 80186ea:	2b7f      	cmp	r3, #127	; 0x7f
 80186ec:	d9e8      	bls.n	80186c0 <I2C_Scan+0xc>
        } else {
        }
    }
}
 80186ee:	bf00      	nop
 80186f0:	3708      	adds	r7, #8
 80186f2:	46bd      	mov	sp, r7
 80186f4:	bd80      	pop	{r7, pc}
 80186f6:	bf00      	nop
 80186f8:	20005d90 	.word	0x20005d90

080186fc <StartUiTask>:
static int test_mode = 0;

*/

void StartUiTask(_UNUSED_ void *argument)
{
 80186fc:	b580      	push	{r7, lr}
 80186fe:	b084      	sub	sp, #16
 8018700:	af00      	add	r7, sp, #0
 8018702:	6078      	str	r0, [r7, #4]
	// init
	extern TIM_HandleTypeDef htim4;

	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8018704:	213c      	movs	r1, #60	; 0x3c
 8018706:	480b      	ldr	r0, [pc, #44]	; (8018734 <StartUiTask+0x38>)
 8018708:	f7ef fd8e 	bl	8008228 <HAL_TIM_Encoder_Start>

	//display_addr[0] = 0; //XXX
	//needsrefresh_mask = 0;
	for (int i=0; i<MAX_DISP; i++) {
 801870c:	2300      	movs	r3, #0
 801870e:	60fb      	str	r3, [r7, #12]
 8018710:	e006      	b.n	8018720 <StartUiTask+0x24>
		I2C_Scan();
 8018712:	f7ff ffcf 	bl	80186b4 <I2C_Scan>
		ssd1306_Init();
 8018716:	f7f8 f93d 	bl	8010994 <ssd1306_Init>
	for (int i=0; i<MAX_DISP; i++) {
 801871a:	68fb      	ldr	r3, [r7, #12]
 801871c:	3301      	adds	r3, #1
 801871e:	60fb      	str	r3, [r7, #12]
 8018720:	68fb      	ldr	r3, [r7, #12]
 8018722:	2b00      	cmp	r3, #0
 8018724:	ddf5      	ble.n	8018712 <StartUiTask+0x16>
			itm_debug1(DBG_ERR|DBG_UI, "notif?", notif);
		}
		if (!(notif & NOTIF_TICKUI)) continue;
#else
		static TickType_t lasttick = 0;
		vTaskDelayUntil(&lasttick, 100);
 8018726:	2164      	movs	r1, #100	; 0x64
 8018728:	4803      	ldr	r0, [pc, #12]	; (8018738 <StartUiTask+0x3c>)
 801872a:	f7f5 fd91 	bl	800e250 <vTaskDelayUntil>
		//lasttick = HAL_GetTick();

#endif
		ihm_runtick();
 801872e:	f7fa f9b9 	bl	8012aa4 <ihm_runtick>
	for (;;) {
 8018732:	e7f8      	b.n	8018726 <StartUiTask+0x2a>
 8018734:	20005d4c 	.word	0x20005d4c
 8018738:	200055b8 	.word	0x200055b8

0801873c <StartTxRxFrameTask>:

static void handleRxChars(frame_msg_t *m);
static void _send_bytes(uint8_t *b, int len);

void StartTxRxFrameTask(_UNUSED_ void *argument)
{
 801873c:	b580      	push	{r7, lr}
 801873e:	b090      	sub	sp, #64	; 0x40
 8018740:	af00      	add	r7, sp, #0
 8018742:	6078      	str	r0, [r7, #4]
	  MX_USB_DEVICE_Init();
 8018744:	f7f7 fbf2 	bl	800ff2c <MX_USB_DEVICE_Init>
		if ((0)) {
			osDelay(10000);
			continue;
		}
		uint8_t msg_prio;
		osStatus_t rc = osMessageQueueGet(frameQueueHandle, &m, &msg_prio, portMAX_DELAY);
 8018748:	4b27      	ldr	r3, [pc, #156]	; (80187e8 <StartTxRxFrameTask+0xac>)
 801874a:	6818      	ldr	r0, [r3, #0]
 801874c:	f107 0237 	add.w	r2, r7, #55	; 0x37
 8018750:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018754:	4925      	ldr	r1, [pc, #148]	; (80187ec <StartTxRxFrameTask+0xb0>)
 8018756:	f7f4 fc81 	bl	800d05c <osMessageQueueGet>
 801875a:	63f8      	str	r0, [r7, #60]	; 0x3c
		num_msg_get++;
 801875c:	4b24      	ldr	r3, [pc, #144]	; (80187f0 <StartTxRxFrameTask+0xb4>)
 801875e:	681b      	ldr	r3, [r3, #0]
 8018760:	3301      	adds	r3, #1
 8018762:	4a23      	ldr	r2, [pc, #140]	; (80187f0 <StartTxRxFrameTask+0xb4>)
 8018764:	6013      	str	r3, [r2, #0]
		if ((0)) flash_led();
        usbPollQueues();
 8018766:	f7fd fda9 	bl	80162bc <usbPollQueues>
        if (rc == osErrorTimeout) continue;
 801876a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801876c:	f113 0f02 	cmn.w	r3, #2
 8018770:	d038      	beq.n	80187e4 <StartTxRxFrameTask+0xa8>
		if (rc != osOK) {
 8018772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018774:	2b00      	cmp	r3, #0
 8018776:	d005      	beq.n	8018784 <StartTxRxFrameTask+0x48>
			num_msg_get_err++;
 8018778:	4b1e      	ldr	r3, [pc, #120]	; (80187f4 <StartTxRxFrameTask+0xb8>)
 801877a:	681b      	ldr	r3, [r3, #0]
 801877c:	3301      	adds	r3, #1
 801877e:	4a1d      	ldr	r2, [pc, #116]	; (80187f4 <StartTxRxFrameTask+0xb8>)
 8018780:	6013      	str	r3, [r2, #0]
			continue;
 8018782:	e030      	b.n	80187e6 <StartTxRxFrameTask+0xaa>
		}
		if (m.t == RXFRAME_CHARS) {
 8018784:	4b19      	ldr	r3, [pc, #100]	; (80187ec <StartTxRxFrameTask+0xb0>)
 8018786:	781b      	ldrb	r3, [r3, #0]
 8018788:	2bff      	cmp	r3, #255	; 0xff
 801878a:	d103      	bne.n	8018794 <StartTxRxFrameTask+0x58>
			//debug_info('G', 0, "RXFRM", m.len,0, 0);
			handleRxChars(&m);
 801878c:	4817      	ldr	r0, [pc, #92]	; (80187ec <StartTxRxFrameTask+0xb0>)
 801878e:	f000 f89f 	bl	80188d0 <handleRxChars>
			continue;
 8018792:	e028      	b.n	80187e6 <StartTxRxFrameTask+0xaa>
		}
		if (m.t == TXFRAME_TYPE_STAT) {
 8018794:	4b15      	ldr	r3, [pc, #84]	; (80187ec <StartTxRxFrameTask+0xb0>)
 8018796:	781b      	ldrb	r3, [r3, #0]
 8018798:	2b04      	cmp	r3, #4
 801879a:	d11c      	bne.n	80187d6 <StartTxRxFrameTask+0x9a>
			uint32_t t = HAL_GetTick();   // XXX t0
 801879c:	f7e9 fb18 	bl	8001dd0 <HAL_GetTick>
 80187a0:	63b8      	str	r0, [r7, #56]	; 0x38
			uint8_t b[]="|_NG\000X";
 80187a2:	4a15      	ldr	r2, [pc, #84]	; (80187f8 <StartTxRxFrameTask+0xbc>)
 80187a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80187a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80187ac:	6018      	str	r0, [r3, #0]
 80187ae:	3304      	adds	r3, #4
 80187b0:	8019      	strh	r1, [r3, #0]
 80187b2:	3302      	adds	r3, #2
 80187b4:	0c0a      	lsrs	r2, r1, #16
 80187b6:	701a      	strb	r2, [r3, #0]
			//memcpy(b+6, &t, 4);
			_send_bytes(b, 6);
 80187b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80187bc:	2106      	movs	r1, #6
 80187be:	4618      	mov	r0, r3
 80187c0:	f000 f822 	bl	8018808 <_send_bytes>
			frame_send_stat(_send_bytes, t);
 80187c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80187c6:	480d      	ldr	r0, [pc, #52]	; (80187fc <StartTxRxFrameTask+0xc0>)
 80187c8:	f7fe fab9 	bl	8016d3e <frame_send_stat>
			_send_bytes((uint8_t *)"|", 1);
 80187cc:	2101      	movs	r1, #1
 80187ce:	480c      	ldr	r0, [pc, #48]	; (8018800 <StartTxRxFrameTask+0xc4>)
 80187d0:	f000 f81a 	bl	8018808 <_send_bytes>
 80187d4:	e7b8      	b.n	8018748 <StartTxRxFrameTask+0xc>
			continue;
		}
		_send_bytes(m.frm, m.len);
 80187d6:	4b05      	ldr	r3, [pc, #20]	; (80187ec <StartTxRxFrameTask+0xb0>)
 80187d8:	785b      	ldrb	r3, [r3, #1]
 80187da:	4619      	mov	r1, r3
 80187dc:	4809      	ldr	r0, [pc, #36]	; (8018804 <StartTxRxFrameTask+0xc8>)
 80187de:	f000 f813 	bl	8018808 <_send_bytes>
 80187e2:	e7b1      	b.n	8018748 <StartTxRxFrameTask+0xc>
        if (rc == osErrorTimeout) continue;
 80187e4:	bf00      	nop
	for (;;) {
 80187e6:	e7af      	b.n	8018748 <StartTxRxFrameTask+0xc>
 80187e8:	20005d8c 	.word	0x20005d8c
 80187ec:	200055cc 	.word	0x200055cc
 80187f0:	200055bc 	.word	0x200055bc
 80187f4:	200055c4 	.word	0x200055c4
 80187f8:	08019c40 	.word	0x08019c40
 80187fc:	08018809 	.word	0x08018809
 8018800:	08019c3c 	.word	0x08019c3c
 8018804:	200055ce 	.word	0x200055ce

08018808 <_send_bytes>:
	}
}
//void frame_send_stat(void(*cb)(uint8_t *d, int l));

static void _send_bytes(uint8_t *b, int len)
{
 8018808:	b580      	push	{r7, lr}
 801880a:	b084      	sub	sp, #16
 801880c:	af00      	add	r7, sp, #0
 801880e:	6078      	str	r0, [r7, #4]
 8018810:	6039      	str	r1, [r7, #0]
	for (;;) {
		uint8_t rc = CDC_Transmit_FS(b, len);
 8018812:	683b      	ldr	r3, [r7, #0]
 8018814:	b29b      	uxth	r3, r3
 8018816:	4619      	mov	r1, r3
 8018818:	6878      	ldr	r0, [r7, #4]
 801881a:	f7f7 fc3f 	bl	801009c <CDC_Transmit_FS>
 801881e:	4603      	mov	r3, r0
 8018820:	73fb      	strb	r3, [r7, #15]
		if (rc != USBD_BUSY) break;
 8018822:	7bfb      	ldrb	r3, [r7, #15]
 8018824:	2b01      	cmp	r3, #1
 8018826:	d103      	bne.n	8018830 <_send_bytes+0x28>
		osDelay(1);
 8018828:	2001      	movs	r0, #1
 801882a:	f7f4 faef 	bl	800ce0c <osDelay>
	for (;;) {
 801882e:	e7f0      	b.n	8018812 <_send_bytes+0xa>
		if (rc != USBD_BUSY) break;
 8018830:	bf00      	nop
	}
}
 8018832:	bf00      	nop
 8018834:	3710      	adds	r7, #16
 8018836:	46bd      	mov	sp, r7
 8018838:	bd80      	pop	{r7, pc}
	...

0801883c <txframe_send>:

int txframe_queue_full = 0;

void txframe_send(frame_msg_t *m, int discardable)
{
 801883c:	b580      	push	{r7, lr}
 801883e:	b084      	sub	sp, #16
 8018840:	af00      	add	r7, sp, #0
 8018842:	6078      	str	r0, [r7, #4]
 8018844:	6039      	str	r1, [r7, #0]
	int s = osMessageQueueGetSpace(frameQueueHandle);
 8018846:	4b1f      	ldr	r3, [pc, #124]	; (80188c4 <txframe_send+0x88>)
 8018848:	681b      	ldr	r3, [r3, #0]
 801884a:	4618      	mov	r0, r3
 801884c:	f7f4 fc78 	bl	800d140 <osMessageQueueGetSpace>
 8018850:	4603      	mov	r3, r0
 8018852:	60fb      	str	r3, [r7, #12]
	if (s<=0) {
 8018854:	68fb      	ldr	r3, [r7, #12]
 8018856:	2b00      	cmp	r3, #0
 8018858:	dc07      	bgt.n	801886a <txframe_send+0x2e>
		txframe_queue_full++;
 801885a:	4b1b      	ldr	r3, [pc, #108]	; (80188c8 <txframe_send+0x8c>)
 801885c:	681b      	ldr	r3, [r3, #0]
 801885e:	3301      	adds	r3, #1
 8018860:	4a19      	ldr	r2, [pc, #100]	; (80188c8 <txframe_send+0x8c>)
 8018862:	6013      	str	r3, [r2, #0]
		if (discardable) return;
 8018864:	683b      	ldr	r3, [r7, #0]
 8018866:	2b00      	cmp	r3, #0
 8018868:	d127      	bne.n	80188ba <txframe_send+0x7e>
	}
	if ((s<=20) && discardable) {
 801886a:	68fb      	ldr	r3, [r7, #12]
 801886c:	2b14      	cmp	r3, #20
 801886e:	dc08      	bgt.n	8018882 <txframe_send+0x46>
 8018870:	683b      	ldr	r3, [r7, #0]
 8018872:	2b00      	cmp	r3, #0
 8018874:	d005      	beq.n	8018882 <txframe_send+0x46>
		// we use a single queue, and no priority available with freertos
		// so we just keep some space for non discardable frames
		txframe_queue_full++;
 8018876:	4b14      	ldr	r3, [pc, #80]	; (80188c8 <txframe_send+0x8c>)
 8018878:	681b      	ldr	r3, [r3, #0]
 801887a:	3301      	adds	r3, #1
 801887c:	4a12      	ldr	r2, [pc, #72]	; (80188c8 <txframe_send+0x8c>)
 801887e:	6013      	str	r3, [r2, #0]
		return;
 8018880:	e01c      	b.n	80188bc <txframe_send+0x80>
	}
	uint32_t t = discardable ? 0 : portMAX_DELAY;
 8018882:	683b      	ldr	r3, [r7, #0]
 8018884:	2b00      	cmp	r3, #0
 8018886:	d001      	beq.n	801888c <txframe_send+0x50>
 8018888:	2300      	movs	r3, #0
 801888a:	e001      	b.n	8018890 <txframe_send+0x54>
 801888c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018890:	60bb      	str	r3, [r7, #8]
	if (m->len>FRM_MAX_LEN) m->len=FRM_MAX_LEN;
 8018892:	687b      	ldr	r3, [r7, #4]
 8018894:	785b      	ldrb	r3, [r3, #1]
 8018896:	2b1f      	cmp	r3, #31
 8018898:	d902      	bls.n	80188a0 <txframe_send+0x64>
 801889a:	687b      	ldr	r3, [r7, #4]
 801889c:	221f      	movs	r2, #31
 801889e:	705a      	strb	r2, [r3, #1]
	num_msg_put++;
 80188a0:	4b0a      	ldr	r3, [pc, #40]	; (80188cc <txframe_send+0x90>)
 80188a2:	681b      	ldr	r3, [r3, #0]
 80188a4:	3301      	adds	r3, #1
 80188a6:	4a09      	ldr	r2, [pc, #36]	; (80188cc <txframe_send+0x90>)
 80188a8:	6013      	str	r3, [r2, #0]
	osMessageQueuePut(frameQueueHandle, m, 0, t);
 80188aa:	4b06      	ldr	r3, [pc, #24]	; (80188c4 <txframe_send+0x88>)
 80188ac:	6818      	ldr	r0, [r3, #0]
 80188ae:	68bb      	ldr	r3, [r7, #8]
 80188b0:	2200      	movs	r2, #0
 80188b2:	6879      	ldr	r1, [r7, #4]
 80188b4:	f7f4 fb5e 	bl	800cf74 <osMessageQueuePut>
 80188b8:	e000      	b.n	80188bc <txframe_send+0x80>
		if (discardable) return;
 80188ba:	bf00      	nop
}
 80188bc:	3710      	adds	r7, #16
 80188be:	46bd      	mov	sp, r7
 80188c0:	bd80      	pop	{r7, pc}
 80188c2:	bf00      	nop
 80188c4:	20005d8c 	.word	0x20005d8c
 80188c8:	200055c8 	.word	0x200055c8
 80188cc:	200055c0 	.word	0x200055c0

080188d0 <handleRxChars>:

/* ------ RX ----- */

static void handleRxChars(frame_msg_t *m)
{
 80188d0:	b580      	push	{r7, lr}
 80188d2:	b08e      	sub	sp, #56	; 0x38
 80188d4:	af00      	add	r7, sp, #0
 80188d6:	6078      	str	r0, [r7, #4]
    frame_msg_t frresp;
	frresp.t = TXFRAME_TYPE_RESP;
 80188d8:	2301      	movs	r3, #1
 80188da:	743b      	strb	r3, [r7, #16]
	/*
	 * int rlen = FRM_MAX_LEN;
	    	frame_process(cRxedChar,m.frm, &rlen);
	 */
	for (int i=0; i<m->len; i++) {
 80188dc:	2300      	movs	r3, #0
 80188de:	637b      	str	r3, [r7, #52]	; 0x34
 80188e0:	e01c      	b.n	801891c <handleRxChars+0x4c>
		int rlen = FRM_MAX_LEN;
 80188e2:	231f      	movs	r3, #31
 80188e4:	60fb      	str	r3, [r7, #12]
		txrx_process_char(m->frm[i], frresp.frm, &rlen);
 80188e6:	687a      	ldr	r2, [r7, #4]
 80188e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80188ea:	4413      	add	r3, r2
 80188ec:	3302      	adds	r3, #2
 80188ee:	7818      	ldrb	r0, [r3, #0]
 80188f0:	f107 020c 	add.w	r2, r7, #12
 80188f4:	f107 0310 	add.w	r3, r7, #16
 80188f8:	3302      	adds	r3, #2
 80188fa:	4619      	mov	r1, r3
 80188fc:	f7fd fcf2 	bl	80162e4 <txrx_process_char>
		if (rlen>0) {
 8018900:	68fb      	ldr	r3, [r7, #12]
 8018902:	2b00      	cmp	r3, #0
 8018904:	dd07      	ble.n	8018916 <handleRxChars+0x46>
			//debug_info('G', 0, "RESP", rlen,0, 0);
			// would deadlock if we send (non discardable) through the queue
			//txframe_send_response(&frresp, rlen);
			_send_bytes(frresp.frm, rlen);
 8018906:	68fa      	ldr	r2, [r7, #12]
 8018908:	f107 0310 	add.w	r3, r7, #16
 801890c:	3302      	adds	r3, #2
 801890e:	4611      	mov	r1, r2
 8018910:	4618      	mov	r0, r3
 8018912:	f7ff ff79 	bl	8018808 <_send_bytes>
	for (int i=0; i<m->len; i++) {
 8018916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018918:	3301      	adds	r3, #1
 801891a:	637b      	str	r3, [r7, #52]	; 0x34
 801891c:	687b      	ldr	r3, [r7, #4]
 801891e:	785b      	ldrb	r3, [r3, #1]
 8018920:	461a      	mov	r2, r3
 8018922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018924:	4293      	cmp	r3, r2
 8018926:	dbdc      	blt.n	80188e2 <handleRxChars+0x12>
			//frresp.len = rlen;
			//_send_frm(&frresp);
		}
	}
}
 8018928:	bf00      	nop
 801892a:	3738      	adds	r7, #56	; 0x38
 801892c:	46bd      	mov	sp, r7
 801892e:	bd80      	pop	{r7, pc}

08018930 <impl_CDC_Receive_FS>:

extern USBD_HandleTypeDef hUsbDeviceFS;


int8_t impl_CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8018930:	b580      	push	{r7, lr}
 8018932:	b086      	sub	sp, #24
 8018934:	af00      	add	r7, sp, #0
 8018936:	6078      	str	r0, [r7, #4]
 8018938:	6039      	str	r1, [r7, #0]
	if ((0)) {
		sprintf(str, "[B%d]\r\n", *Len);
		CDC_Transmit_FS(str, strlen(str));
	}
	*/
	uint8_t *p = Buf;
 801893a:	687b      	ldr	r3, [r7, #4]
 801893c:	617b      	str	r3, [r7, #20]
	int32_t rlen = *Len;
 801893e:	683b      	ldr	r3, [r7, #0]
 8018940:	681b      	ldr	r3, [r3, #0]
 8018942:	613b      	str	r3, [r7, #16]
	for (;;) {
		//BaseType_t xHigherPriorityTaskWoken = pdFALSE;
		frrx.t = RXFRAME_CHARS;
 8018944:	4b18      	ldr	r3, [pc, #96]	; (80189a8 <impl_CDC_Receive_FS+0x78>)
 8018946:	22ff      	movs	r2, #255	; 0xff
 8018948:	701a      	strb	r2, [r3, #0]
		int l = MIN(rlen, RXFRAME_CHARS);
 801894a:	693b      	ldr	r3, [r7, #16]
 801894c:	2bff      	cmp	r3, #255	; 0xff
 801894e:	bfa8      	it	ge
 8018950:	23ff      	movge	r3, #255	; 0xff
 8018952:	60fb      	str	r3, [r7, #12]
		memcpy(frrx.frm, p, l);
 8018954:	68fb      	ldr	r3, [r7, #12]
 8018956:	461a      	mov	r2, r3
 8018958:	6979      	ldr	r1, [r7, #20]
 801895a:	4814      	ldr	r0, [pc, #80]	; (80189ac <impl_CDC_Receive_FS+0x7c>)
 801895c:	f000 fbb0 	bl	80190c0 <memcpy>
		rlen -= l;
 8018960:	693a      	ldr	r2, [r7, #16]
 8018962:	68fb      	ldr	r3, [r7, #12]
 8018964:	1ad3      	subs	r3, r2, r3
 8018966:	613b      	str	r3, [r7, #16]
		p += l;
 8018968:	68fb      	ldr	r3, [r7, #12]
 801896a:	697a      	ldr	r2, [r7, #20]
 801896c:	4413      	add	r3, r2
 801896e:	617b      	str	r3, [r7, #20]
		frrx.len = l;
 8018970:	68fb      	ldr	r3, [r7, #12]
 8018972:	b2da      	uxtb	r2, r3
 8018974:	4b0c      	ldr	r3, [pc, #48]	; (80189a8 <impl_CDC_Receive_FS+0x78>)
 8018976:	705a      	strb	r2, [r3, #1]
		osMessageQueuePut(frameQueueHandle, &frrx, 0, 0);
 8018978:	4b0d      	ldr	r3, [pc, #52]	; (80189b0 <impl_CDC_Receive_FS+0x80>)
 801897a:	6818      	ldr	r0, [r3, #0]
 801897c:	2300      	movs	r3, #0
 801897e:	2200      	movs	r2, #0
 8018980:	4909      	ldr	r1, [pc, #36]	; (80189a8 <impl_CDC_Receive_FS+0x78>)
 8018982:	f7f4 faf7 	bl	800cf74 <osMessageQueuePut>
		if (rlen <= 0) break;
 8018986:	693b      	ldr	r3, [r7, #16]
 8018988:	2b00      	cmp	r3, #0
 801898a:	dd00      	ble.n	801898e <impl_CDC_Receive_FS+0x5e>
	for (;;) {
 801898c:	e7da      	b.n	8018944 <impl_CDC_Receive_FS+0x14>
		if (rlen <= 0) break;
 801898e:	bf00      	nop
	}

	//CDC_Transmit_FS(Buf, *Len); // ADD THIS LINE to echo back all incoming data

	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8018990:	6879      	ldr	r1, [r7, #4]
 8018992:	4808      	ldr	r0, [pc, #32]	; (80189b4 <impl_CDC_Receive_FS+0x84>)
 8018994:	f7f2 ffb0 	bl	800b8f8 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8018998:	4806      	ldr	r0, [pc, #24]	; (80189b4 <impl_CDC_Receive_FS+0x84>)
 801899a:	f7f2 fff1 	bl	800b980 <USBD_CDC_ReceivePacket>

	return (USBD_OK);
 801899e:	2300      	movs	r3, #0
}
 80189a0:	4618      	mov	r0, r3
 80189a2:	3718      	adds	r7, #24
 80189a4:	46bd      	mov	sp, r7
 80189a6:	bd80      	pop	{r7, pc}
 80189a8:	200055f0 	.word	0x200055f0
 80189ac:	200055f2 	.word	0x200055f2
 80189b0:	20005d8c 	.word	0x20005d8c
 80189b4:	20006ffc 	.word	0x20006ffc

080189b8 <itm_debug3>:
{
 80189b8:	b580      	push	{r7, lr}
 80189ba:	b086      	sub	sp, #24
 80189bc:	af02      	add	r7, sp, #8
 80189be:	60f8      	str	r0, [r7, #12]
 80189c0:	60b9      	str	r1, [r7, #8]
 80189c2:	607a      	str	r2, [r7, #4]
 80189c4:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, v3, 3);
 80189c6:	4b09      	ldr	r3, [pc, #36]	; (80189ec <itm_debug3+0x34>)
 80189c8:	681a      	ldr	r2, [r3, #0]
 80189ca:	68fb      	ldr	r3, [r7, #12]
 80189cc:	4013      	ands	r3, r2
 80189ce:	2b00      	cmp	r3, #0
 80189d0:	d007      	beq.n	80189e2 <itm_debug3+0x2a>
 80189d2:	2303      	movs	r3, #3
 80189d4:	9300      	str	r3, [sp, #0]
 80189d6:	69bb      	ldr	r3, [r7, #24]
 80189d8:	683a      	ldr	r2, [r7, #0]
 80189da:	6879      	ldr	r1, [r7, #4]
 80189dc:	68b8      	ldr	r0, [r7, #8]
 80189de:	f000 f959 	bl	8018c94 <_itm_debug3>
}
 80189e2:	bf00      	nop
 80189e4:	3710      	adds	r7, #16
 80189e6:	46bd      	mov	sp, r7
 80189e8:	bd80      	pop	{r7, pc}
 80189ea:	bf00      	nop
 80189ec:	200005a4 	.word	0x200005a4

080189f0 <_blk_num_for_sub_num>:
#include "railconfig.h"
#include "topology.h"


int _blk_num_for_sub_num(int subnum)
{
 80189f0:	b480      	push	{r7}
 80189f2:	b083      	sub	sp, #12
 80189f4:	af00      	add	r7, sp, #0
 80189f6:	6078      	str	r0, [r7, #4]
	if (subnum == 2) return 0;
 80189f8:	687b      	ldr	r3, [r7, #4]
 80189fa:	2b02      	cmp	r3, #2
 80189fc:	d101      	bne.n	8018a02 <_blk_num_for_sub_num+0x12>
 80189fe:	2300      	movs	r3, #0
 8018a00:	e00b      	b.n	8018a1a <_blk_num_for_sub_num+0x2a>
	if (subnum == 1) return 1;
 8018a02:	687b      	ldr	r3, [r7, #4]
 8018a04:	2b01      	cmp	r3, #1
 8018a06:	d101      	bne.n	8018a0c <_blk_num_for_sub_num+0x1c>
 8018a08:	2301      	movs	r3, #1
 8018a0a:	e006      	b.n	8018a1a <_blk_num_for_sub_num+0x2a>
	if (subnum == 0) return 2;
 8018a0c:	687b      	ldr	r3, [r7, #4]
 8018a0e:	2b00      	cmp	r3, #0
 8018a10:	d101      	bne.n	8018a16 <_blk_num_for_sub_num+0x26>
 8018a12:	2302      	movs	r3, #2
 8018a14:	e001      	b.n	8018a1a <_blk_num_for_sub_num+0x2a>
	return -1;
 8018a16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8018a1a:	4618      	mov	r0, r3
 8018a1c:	370c      	adds	r7, #12
 8018a1e:	46bd      	mov	sp, r7
 8018a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a24:	4770      	bx	lr

08018a26 <_next_block_num>:


int _next_block_num(int blknum, uint8_t left)
{
 8018a26:	b580      	push	{r7, lr}
 8018a28:	b082      	sub	sp, #8
 8018a2a:	af00      	add	r7, sp, #0
 8018a2c:	6078      	str	r0, [r7, #4]
 8018a2e:	460b      	mov	r3, r1
 8018a30:	70fb      	strb	r3, [r7, #3]
	if ((0)) return -1; // XXX
	switch (blknum) {
 8018a32:	687b      	ldr	r3, [r7, #4]
 8018a34:	2b01      	cmp	r3, #1
 8018a36:	d00b      	beq.n	8018a50 <_next_block_num+0x2a>
 8018a38:	2b02      	cmp	r3, #2
 8018a3a:	d019      	beq.n	8018a70 <_next_block_num+0x4a>
 8018a3c:	2b00      	cmp	r3, #0
 8018a3e:	d11f      	bne.n	8018a80 <_next_block_num+0x5a>
	case 0:
		return left ? 	-1 : 1;
 8018a40:	78fb      	ldrb	r3, [r7, #3]
 8018a42:	2b00      	cmp	r3, #0
 8018a44:	d002      	beq.n	8018a4c <_next_block_num+0x26>
 8018a46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018a4a:	e01b      	b.n	8018a84 <_next_block_num+0x5e>
 8018a4c:	2301      	movs	r3, #1
 8018a4e:	e019      	b.n	8018a84 <_next_block_num+0x5e>
	case 1:
		return left ?	(topology_get_turnout(0) ? 2 : 0)  : -1;
 8018a50:	78fb      	ldrb	r3, [r7, #3]
 8018a52:	2b00      	cmp	r3, #0
 8018a54:	d009      	beq.n	8018a6a <_next_block_num+0x44>
 8018a56:	2000      	movs	r0, #0
 8018a58:	f000 f880 	bl	8018b5c <topology_get_turnout>
 8018a5c:	4603      	mov	r3, r0
 8018a5e:	2b00      	cmp	r3, #0
 8018a60:	d001      	beq.n	8018a66 <_next_block_num+0x40>
 8018a62:	2302      	movs	r3, #2
 8018a64:	e00e      	b.n	8018a84 <_next_block_num+0x5e>
 8018a66:	2300      	movs	r3, #0
 8018a68:	e00c      	b.n	8018a84 <_next_block_num+0x5e>
 8018a6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018a6e:	e009      	b.n	8018a84 <_next_block_num+0x5e>
	case 2:
		return left ?   -1 : 1;
 8018a70:	78fb      	ldrb	r3, [r7, #3]
 8018a72:	2b00      	cmp	r3, #0
 8018a74:	d002      	beq.n	8018a7c <_next_block_num+0x56>
 8018a76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018a7a:	e003      	b.n	8018a84 <_next_block_num+0x5e>
 8018a7c:	2301      	movs	r3, #1
 8018a7e:	e001      	b.n	8018a84 <_next_block_num+0x5e>
	default:
		return -1;
 8018a80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 8018a84:	4618      	mov	r0, r3
 8018a86:	3708      	adds	r7, #8
 8018a88:	46bd      	mov	sp, r7
 8018a8a:	bd80      	pop	{r7, pc}

08018a8c <get_blk_len>:

int get_blk_len(int blknum)
{
 8018a8c:	b480      	push	{r7}
 8018a8e:	b083      	sub	sp, #12
 8018a90:	af00      	add	r7, sp, #0
 8018a92:	6078      	str	r0, [r7, #4]
	switch (blknum) {
 8018a94:	687b      	ldr	r3, [r7, #4]
 8018a96:	2b01      	cmp	r3, #1
 8018a98:	d005      	beq.n	8018aa6 <get_blk_len+0x1a>
 8018a9a:	2b02      	cmp	r3, #2
 8018a9c:	d005      	beq.n	8018aaa <get_blk_len+0x1e>
 8018a9e:	2b00      	cmp	r3, #0
 8018aa0:	d105      	bne.n	8018aae <get_blk_len+0x22>
	case 0:
		return 70;
 8018aa2:	2346      	movs	r3, #70	; 0x46
 8018aa4:	e004      	b.n	8018ab0 <get_blk_len+0x24>
	case 1:
		return 40;
 8018aa6:	2328      	movs	r3, #40	; 0x28
 8018aa8:	e002      	b.n	8018ab0 <get_blk_len+0x24>
	case 2:
		return 50;
 8018aaa:	2332      	movs	r3, #50	; 0x32
 8018aac:	e000      	b.n	8018ab0 <get_blk_len+0x24>
	default:
		return 10;
 8018aae:	230a      	movs	r3, #10
	}
}
 8018ab0:	4618      	mov	r0, r3
 8018ab2:	370c      	adds	r7, #12
 8018ab4:	46bd      	mov	sp, r7
 8018ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018aba:	4770      	bx	lr

08018abc <topolgy_set_turnout>:
// --------------------------------------------------------------------------------------

static volatile uint32_t turnoutvals = 0; // bit field

void topolgy_set_turnout(int tn, int v)
{
 8018abc:	b580      	push	{r7, lr}
 8018abe:	b084      	sub	sp, #16
 8018ac0:	af02      	add	r7, sp, #8
 8018ac2:	6078      	str	r0, [r7, #4]
 8018ac4:	6039      	str	r1, [r7, #0]
	if (tn >= NUM_TURNOUTS) return;
 8018ac6:	687b      	ldr	r3, [r7, #4]
 8018ac8:	2b07      	cmp	r3, #7
 8018aca:	dc3b      	bgt.n	8018b44 <topolgy_set_turnout+0x88>
	if (tn<0) return;
 8018acc:	687b      	ldr	r3, [r7, #4]
 8018ace:	2b00      	cmp	r3, #0
 8018ad0:	db3a      	blt.n	8018b48 <topolgy_set_turnout+0x8c>
	if (tn>31) return;
 8018ad2:	687b      	ldr	r3, [r7, #4]
 8018ad4:	2b1f      	cmp	r3, #31
 8018ad6:	dc39      	bgt.n	8018b4c <topolgy_set_turnout+0x90>

	if (v) {
 8018ad8:	683b      	ldr	r3, [r7, #0]
 8018ada:	2b00      	cmp	r3, #0
 8018adc:	d012      	beq.n	8018b04 <topolgy_set_turnout+0x48>
		__sync_fetch_and_or(&turnoutvals, (1<<tn));
 8018ade:	2201      	movs	r2, #1
 8018ae0:	687b      	ldr	r3, [r7, #4]
 8018ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8018ae6:	461a      	mov	r2, r3
 8018ae8:	4b1a      	ldr	r3, [pc, #104]	; (8018b54 <topolgy_set_turnout+0x98>)
 8018aea:	f3bf 8f5b 	dmb	ish
 8018aee:	e853 1f00 	ldrex	r1, [r3]
 8018af2:	ea41 0102 	orr.w	r1, r1, r2
 8018af6:	e843 1000 	strex	r0, r1, [r3]
 8018afa:	2800      	cmp	r0, #0
 8018afc:	d1f7      	bne.n	8018aee <topolgy_set_turnout+0x32>
 8018afe:	f3bf 8f5b 	dmb	ish
 8018b02:	e012      	b.n	8018b2a <topolgy_set_turnout+0x6e>
	} else {
		__sync_fetch_and_and(&turnoutvals, ~(1<<tn));
 8018b04:	2201      	movs	r2, #1
 8018b06:	687b      	ldr	r3, [r7, #4]
 8018b08:	fa02 f303 	lsl.w	r3, r2, r3
 8018b0c:	43db      	mvns	r3, r3
 8018b0e:	461a      	mov	r2, r3
 8018b10:	4b10      	ldr	r3, [pc, #64]	; (8018b54 <topolgy_set_turnout+0x98>)
 8018b12:	f3bf 8f5b 	dmb	ish
 8018b16:	e853 1f00 	ldrex	r1, [r3]
 8018b1a:	ea01 0102 	and.w	r1, r1, r2
 8018b1e:	e843 1000 	strex	r0, r1, [r3]
 8018b22:	2800      	cmp	r0, #0
 8018b24:	d1f7      	bne.n	8018b16 <topolgy_set_turnout+0x5a>
 8018b26:	f3bf 8f5b 	dmb	ish
	}
	itm_debug3(DBG_TURNOUT, "tt",tn,v, topology_get_turnout(tn));
 8018b2a:	6878      	ldr	r0, [r7, #4]
 8018b2c:	f000 f816 	bl	8018b5c <topology_get_turnout>
 8018b30:	4603      	mov	r3, r0
 8018b32:	9300      	str	r3, [sp, #0]
 8018b34:	683b      	ldr	r3, [r7, #0]
 8018b36:	687a      	ldr	r2, [r7, #4]
 8018b38:	4907      	ldr	r1, [pc, #28]	; (8018b58 <topolgy_set_turnout+0x9c>)
 8018b3a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8018b3e:	f7ff ff3b 	bl	80189b8 <itm_debug3>
 8018b42:	e004      	b.n	8018b4e <topolgy_set_turnout+0x92>
	if (tn >= NUM_TURNOUTS) return;
 8018b44:	bf00      	nop
 8018b46:	e002      	b.n	8018b4e <topolgy_set_turnout+0x92>
	if (tn<0) return;
 8018b48:	bf00      	nop
 8018b4a:	e000      	b.n	8018b4e <topolgy_set_turnout+0x92>
	if (tn>31) return;
 8018b4c:	bf00      	nop
}
 8018b4e:	3708      	adds	r7, #8
 8018b50:	46bd      	mov	sp, r7
 8018b52:	bd80      	pop	{r7, pc}
 8018b54:	20005614 	.word	0x20005614
 8018b58:	08019c48 	.word	0x08019c48

08018b5c <topology_get_turnout>:
int topology_get_turnout(int tn)
{
 8018b5c:	b480      	push	{r7}
 8018b5e:	b085      	sub	sp, #20
 8018b60:	af00      	add	r7, sp, #0
 8018b62:	6078      	str	r0, [r7, #4]
	if (tn >= NUM_TURNOUTS) return 0;
 8018b64:	687b      	ldr	r3, [r7, #4]
 8018b66:	2b07      	cmp	r3, #7
 8018b68:	dd01      	ble.n	8018b6e <topology_get_turnout+0x12>
 8018b6a:	2300      	movs	r3, #0
 8018b6c:	e018      	b.n	8018ba0 <topology_get_turnout+0x44>
	if (tn<0) return 0;
 8018b6e:	687b      	ldr	r3, [r7, #4]
 8018b70:	2b00      	cmp	r3, #0
 8018b72:	da01      	bge.n	8018b78 <topology_get_turnout+0x1c>
 8018b74:	2300      	movs	r3, #0
 8018b76:	e013      	b.n	8018ba0 <topology_get_turnout+0x44>
	if (tn>31) return 0;
 8018b78:	687b      	ldr	r3, [r7, #4]
 8018b7a:	2b1f      	cmp	r3, #31
 8018b7c:	dd01      	ble.n	8018b82 <topology_get_turnout+0x26>
 8018b7e:	2300      	movs	r3, #0
 8018b80:	e00e      	b.n	8018ba0 <topology_get_turnout+0x44>

	uint32_t b = turnoutvals;
 8018b82:	4b0a      	ldr	r3, [pc, #40]	; (8018bac <topology_get_turnout+0x50>)
 8018b84:	681b      	ldr	r3, [r3, #0]
 8018b86:	60fb      	str	r3, [r7, #12]
	return (b & (1<<tn)) ? 1 : 0;
 8018b88:	2201      	movs	r2, #1
 8018b8a:	687b      	ldr	r3, [r7, #4]
 8018b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8018b90:	461a      	mov	r2, r3
 8018b92:	68fb      	ldr	r3, [r7, #12]
 8018b94:	4013      	ands	r3, r2
 8018b96:	2b00      	cmp	r3, #0
 8018b98:	bf14      	ite	ne
 8018b9a:	2301      	movne	r3, #1
 8018b9c:	2300      	moveq	r3, #0
 8018b9e:	b2db      	uxtb	r3, r3
}
 8018ba0:	4618      	mov	r0, r3
 8018ba2:	3714      	adds	r7, #20
 8018ba4:	46bd      	mov	sp, r7
 8018ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018baa:	4770      	bx	lr
 8018bac:	20005614 	.word	0x20005614

08018bb0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8018bb0:	b480      	push	{r7}
 8018bb2:	b083      	sub	sp, #12
 8018bb4:	af00      	add	r7, sp, #0
 8018bb6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8018bb8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8018bbc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8018bc0:	f003 0301 	and.w	r3, r3, #1
 8018bc4:	2b00      	cmp	r3, #0
 8018bc6:	d013      	beq.n	8018bf0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8018bc8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8018bcc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8018bd0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8018bd4:	2b00      	cmp	r3, #0
 8018bd6:	d00b      	beq.n	8018bf0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8018bd8:	e000      	b.n	8018bdc <ITM_SendChar+0x2c>
    {
      __NOP();
 8018bda:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8018bdc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8018be0:	681b      	ldr	r3, [r3, #0]
 8018be2:	2b00      	cmp	r3, #0
 8018be4:	d0f9      	beq.n	8018bda <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8018be6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8018bea:	687a      	ldr	r2, [r7, #4]
 8018bec:	b2d2      	uxtb	r2, r2
 8018bee:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8018bf0:	687b      	ldr	r3, [r7, #4]
}
 8018bf2:	4618      	mov	r0, r3
 8018bf4:	370c      	adds	r7, #12
 8018bf6:	46bd      	mov	sp, r7
 8018bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bfc:	4770      	bx	lr
	...

08018c00 <write_num>:




static void write_num(uint8_t *buf, uint32_t v, int ndigit)
{
 8018c00:	b480      	push	{r7}
 8018c02:	b085      	sub	sp, #20
 8018c04:	af00      	add	r7, sp, #0
 8018c06:	60f8      	str	r0, [r7, #12]
 8018c08:	60b9      	str	r1, [r7, #8]
 8018c0a:	607a      	str	r2, [r7, #4]
	for (;ndigit>0; ndigit--) {
 8018c0c:	e01a      	b.n	8018c44 <write_num+0x44>
		buf[ndigit-1] = '0'+ (v % 10);
 8018c0e:	68b9      	ldr	r1, [r7, #8]
 8018c10:	4b11      	ldr	r3, [pc, #68]	; (8018c58 <write_num+0x58>)
 8018c12:	fba3 2301 	umull	r2, r3, r3, r1
 8018c16:	08da      	lsrs	r2, r3, #3
 8018c18:	4613      	mov	r3, r2
 8018c1a:	009b      	lsls	r3, r3, #2
 8018c1c:	4413      	add	r3, r2
 8018c1e:	005b      	lsls	r3, r3, #1
 8018c20:	1aca      	subs	r2, r1, r3
 8018c22:	b2d2      	uxtb	r2, r2
 8018c24:	687b      	ldr	r3, [r7, #4]
 8018c26:	3b01      	subs	r3, #1
 8018c28:	68f9      	ldr	r1, [r7, #12]
 8018c2a:	440b      	add	r3, r1
 8018c2c:	3230      	adds	r2, #48	; 0x30
 8018c2e:	b2d2      	uxtb	r2, r2
 8018c30:	701a      	strb	r2, [r3, #0]
		v = v/10;
 8018c32:	68bb      	ldr	r3, [r7, #8]
 8018c34:	4a08      	ldr	r2, [pc, #32]	; (8018c58 <write_num+0x58>)
 8018c36:	fba2 2303 	umull	r2, r3, r2, r3
 8018c3a:	08db      	lsrs	r3, r3, #3
 8018c3c:	60bb      	str	r3, [r7, #8]
	for (;ndigit>0; ndigit--) {
 8018c3e:	687b      	ldr	r3, [r7, #4]
 8018c40:	3b01      	subs	r3, #1
 8018c42:	607b      	str	r3, [r7, #4]
 8018c44:	687b      	ldr	r3, [r7, #4]
 8018c46:	2b00      	cmp	r3, #0
 8018c48:	dce1      	bgt.n	8018c0e <write_num+0xe>
	}
}
 8018c4a:	bf00      	nop
 8018c4c:	3714      	adds	r7, #20
 8018c4e:	46bd      	mov	sp, r7
 8018c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c54:	4770      	bx	lr
 8018c56:	bf00      	nop
 8018c58:	cccccccd 	.word	0xcccccccd

08018c5c <_write>:

#ifndef TRAIN_SIMU
int _write(_UNUSED_ int32_t file, uint8_t *ptr, int32_t len)
{
 8018c5c:	b580      	push	{r7, lr}
 8018c5e:	b086      	sub	sp, #24
 8018c60:	af00      	add	r7, sp, #0
 8018c62:	60f8      	str	r0, [r7, #12]
 8018c64:	60b9      	str	r1, [r7, #8]
 8018c66:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i++)
 8018c68:	2300      	movs	r3, #0
 8018c6a:	617b      	str	r3, [r7, #20]
 8018c6c:	e009      	b.n	8018c82 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8018c6e:	68bb      	ldr	r3, [r7, #8]
 8018c70:	1c5a      	adds	r2, r3, #1
 8018c72:	60ba      	str	r2, [r7, #8]
 8018c74:	781b      	ldrb	r3, [r3, #0]
 8018c76:	4618      	mov	r0, r3
 8018c78:	f7ff ff9a 	bl	8018bb0 <ITM_SendChar>
	for (int i = 0; i < len; i++)
 8018c7c:	697b      	ldr	r3, [r7, #20]
 8018c7e:	3301      	adds	r3, #1
 8018c80:	617b      	str	r3, [r7, #20]
 8018c82:	697a      	ldr	r2, [r7, #20]
 8018c84:	687b      	ldr	r3, [r7, #4]
 8018c86:	429a      	cmp	r2, r3
 8018c88:	dbf1      	blt.n	8018c6e <_write+0x12>
	}
	return len;
 8018c8a:	687b      	ldr	r3, [r7, #4]
}
 8018c8c:	4618      	mov	r0, r3
 8018c8e:	3718      	adds	r7, #24
 8018c90:	46bd      	mov	sp, r7
 8018c92:	bd80      	pop	{r7, pc}

08018c94 <_itm_debug3>:
#endif


void _itm_debug3(const char *msg, int v1, int v2, int v3, int n)
{
 8018c94:	b580      	push	{r7, lr}
 8018c96:	b096      	sub	sp, #88	; 0x58
 8018c98:	af00      	add	r7, sp, #0
 8018c9a:	60f8      	str	r0, [r7, #12]
 8018c9c:	60b9      	str	r1, [r7, #8]
 8018c9e:	607a      	str	r2, [r7, #4]
 8018ca0:	603b      	str	r3, [r7, #0]
	uint8_t buf[64];
	memset(buf, 0, sizeof(buf));
 8018ca2:	f107 0314 	add.w	r3, r7, #20
 8018ca6:	2240      	movs	r2, #64	; 0x40
 8018ca8:	2100      	movs	r1, #0
 8018caa:	4618      	mov	r0, r3
 8018cac:	f000 fa13 	bl	80190d6 <memset>
	write_num(buf, HAL_GetTick(), 7);
 8018cb0:	f7e9 f88e 	bl	8001dd0 <HAL_GetTick>
 8018cb4:	4601      	mov	r1, r0
 8018cb6:	f107 0314 	add.w	r3, r7, #20
 8018cba:	2207      	movs	r2, #7
 8018cbc:	4618      	mov	r0, r3
 8018cbe:	f7ff ff9f 	bl	8018c00 <write_num>
	buf[7]=':';
 8018cc2:	233a      	movs	r3, #58	; 0x3a
 8018cc4:	76fb      	strb	r3, [r7, #27]
	strncpy((char *)buf+8, msg, 12);
 8018cc6:	f107 0314 	add.w	r3, r7, #20
 8018cca:	3308      	adds	r3, #8
 8018ccc:	220c      	movs	r2, #12
 8018cce:	68f9      	ldr	r1, [r7, #12]
 8018cd0:	4618      	mov	r0, r3
 8018cd2:	f000 fac1 	bl	8019258 <strncpy>
	uint8_t *p = buf+strlen((char *)buf);
 8018cd6:	f107 0314 	add.w	r3, r7, #20
 8018cda:	4618      	mov	r0, r3
 8018cdc:	f7e7 fa82 	bl	80001e4 <strlen>
 8018ce0:	4602      	mov	r2, r0
 8018ce2:	f107 0314 	add.w	r3, r7, #20
 8018ce6:	4413      	add	r3, r2
 8018ce8:	657b      	str	r3, [r7, #84]	; 0x54
	if (!n--) goto done;
 8018cea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018cec:	1e5a      	subs	r2, r3, #1
 8018cee:	663a      	str	r2, [r7, #96]	; 0x60
 8018cf0:	2b00      	cmp	r3, #0
 8018cf2:	d03c      	beq.n	8018d6e <_itm_debug3+0xda>
	*p = '/';
 8018cf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018cf6:	222f      	movs	r2, #47	; 0x2f
 8018cf8:	701a      	strb	r2, [r3, #0]
	itoa(v1, (char *)p+1, 10);
 8018cfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018cfc:	3301      	adds	r3, #1
 8018cfe:	220a      	movs	r2, #10
 8018d00:	4619      	mov	r1, r3
 8018d02:	68b8      	ldr	r0, [r7, #8]
 8018d04:	f000 f9ca 	bl	801909c <itoa>
	p = buf+strlen((char *)buf);
 8018d08:	f107 0314 	add.w	r3, r7, #20
 8018d0c:	4618      	mov	r0, r3
 8018d0e:	f7e7 fa69 	bl	80001e4 <strlen>
 8018d12:	4602      	mov	r2, r0
 8018d14:	f107 0314 	add.w	r3, r7, #20
 8018d18:	4413      	add	r3, r2
 8018d1a:	657b      	str	r3, [r7, #84]	; 0x54
	if (!n--) goto done;
 8018d1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018d1e:	1e5a      	subs	r2, r3, #1
 8018d20:	663a      	str	r2, [r7, #96]	; 0x60
 8018d22:	2b00      	cmp	r3, #0
 8018d24:	d025      	beq.n	8018d72 <_itm_debug3+0xde>
	*p = '/';
 8018d26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018d28:	222f      	movs	r2, #47	; 0x2f
 8018d2a:	701a      	strb	r2, [r3, #0]
	itoa(v2, (char *)p+1, 10);
 8018d2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018d2e:	3301      	adds	r3, #1
 8018d30:	220a      	movs	r2, #10
 8018d32:	4619      	mov	r1, r3
 8018d34:	6878      	ldr	r0, [r7, #4]
 8018d36:	f000 f9b1 	bl	801909c <itoa>
	p = buf+strlen((char *)buf);
 8018d3a:	f107 0314 	add.w	r3, r7, #20
 8018d3e:	4618      	mov	r0, r3
 8018d40:	f7e7 fa50 	bl	80001e4 <strlen>
 8018d44:	4602      	mov	r2, r0
 8018d46:	f107 0314 	add.w	r3, r7, #20
 8018d4a:	4413      	add	r3, r2
 8018d4c:	657b      	str	r3, [r7, #84]	; 0x54
	if (!n--) goto done;
 8018d4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018d50:	1e5a      	subs	r2, r3, #1
 8018d52:	663a      	str	r2, [r7, #96]	; 0x60
 8018d54:	2b00      	cmp	r3, #0
 8018d56:	d00e      	beq.n	8018d76 <_itm_debug3+0xe2>
	*p = '/';
 8018d58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018d5a:	222f      	movs	r2, #47	; 0x2f
 8018d5c:	701a      	strb	r2, [r3, #0]
	itoa(v3, (char *)p+1, 10);
 8018d5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018d60:	3301      	adds	r3, #1
 8018d62:	220a      	movs	r2, #10
 8018d64:	4619      	mov	r1, r3
 8018d66:	6838      	ldr	r0, [r7, #0]
 8018d68:	f000 f998 	bl	801909c <itoa>
 8018d6c:	e004      	b.n	8018d78 <_itm_debug3+0xe4>
	if (!n--) goto done;
 8018d6e:	bf00      	nop
 8018d70:	e002      	b.n	8018d78 <_itm_debug3+0xe4>
	if (!n--) goto done;
 8018d72:	bf00      	nop
 8018d74:	e000      	b.n	8018d78 <_itm_debug3+0xe4>
	if (!n--) goto done;
 8018d76:	bf00      	nop
done:
	p = buf+strlen((char *)buf);
 8018d78:	f107 0314 	add.w	r3, r7, #20
 8018d7c:	4618      	mov	r0, r3
 8018d7e:	f7e7 fa31 	bl	80001e4 <strlen>
 8018d82:	4602      	mov	r2, r0
 8018d84:	f107 0314 	add.w	r3, r7, #20
 8018d88:	4413      	add	r3, r2
 8018d8a:	657b      	str	r3, [r7, #84]	; 0x54
	*p = '\n';
 8018d8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018d8e:	220a      	movs	r2, #10
 8018d90:	701a      	strb	r2, [r3, #0]
#ifndef TRAIN_SIMU
	_write(0, buf, strlen((char *)buf));
 8018d92:	f107 0314 	add.w	r3, r7, #20
 8018d96:	4618      	mov	r0, r3
 8018d98:	f7e7 fa24 	bl	80001e4 <strlen>
 8018d9c:	4603      	mov	r3, r0
 8018d9e:	461a      	mov	r2, r3
 8018da0:	f107 0314 	add.w	r3, r7, #20
 8018da4:	4619      	mov	r1, r3
 8018da6:	2000      	movs	r0, #0
 8018da8:	f7ff ff58 	bl	8018c5c <_write>
#else
    puts((char*)buf);
    //write(0, buf, strlen((char *)buf));
#endif
}
 8018dac:	bf00      	nop
 8018dae:	3758      	adds	r7, #88	; 0x58
 8018db0:	46bd      	mov	sp, r7
 8018db2:	bd80      	pop	{r7, pc}

08018db4 <itm_debug1>:
{
 8018db4:	b580      	push	{r7, lr}
 8018db6:	b086      	sub	sp, #24
 8018db8:	af02      	add	r7, sp, #8
 8018dba:	60f8      	str	r0, [r7, #12]
 8018dbc:	60b9      	str	r1, [r7, #8]
 8018dbe:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 8018dc0:	4b08      	ldr	r3, [pc, #32]	; (8018de4 <itm_debug1+0x30>)
 8018dc2:	681a      	ldr	r2, [r3, #0]
 8018dc4:	68fb      	ldr	r3, [r7, #12]
 8018dc6:	4013      	ands	r3, r2
 8018dc8:	2b00      	cmp	r3, #0
 8018dca:	d007      	beq.n	8018ddc <itm_debug1+0x28>
 8018dcc:	2301      	movs	r3, #1
 8018dce:	9300      	str	r3, [sp, #0]
 8018dd0:	2300      	movs	r3, #0
 8018dd2:	2200      	movs	r2, #0
 8018dd4:	6879      	ldr	r1, [r7, #4]
 8018dd6:	68b8      	ldr	r0, [r7, #8]
 8018dd8:	f7ff ff5c 	bl	8018c94 <_itm_debug3>
}
 8018ddc:	bf00      	nop
 8018dde:	3710      	adds	r7, #16
 8018de0:	46bd      	mov	sp, r7
 8018de2:	bd80      	pop	{r7, pc}
 8018de4:	200005a4 	.word	0x200005a4

08018de8 <mqf_len>:
	m->tail = 0;
	m->maxuse = 0;
}

int mqf_len(mqf_t *m)
{
 8018de8:	b580      	push	{r7, lr}
 8018dea:	b084      	sub	sp, #16
 8018dec:	af00      	add	r7, sp, #0
 8018dee:	6078      	str	r0, [r7, #4]
	int l;
	if (m->head >= m->tail) {
 8018df0:	687b      	ldr	r3, [r7, #4]
 8018df2:	881b      	ldrh	r3, [r3, #0]
 8018df4:	b29a      	uxth	r2, r3
 8018df6:	687b      	ldr	r3, [r7, #4]
 8018df8:	885b      	ldrh	r3, [r3, #2]
 8018dfa:	b29b      	uxth	r3, r3
 8018dfc:	429a      	cmp	r2, r3
 8018dfe:	d309      	bcc.n	8018e14 <mqf_len+0x2c>
		l = (m->head - m->tail);
 8018e00:	687b      	ldr	r3, [r7, #4]
 8018e02:	881b      	ldrh	r3, [r3, #0]
 8018e04:	b29b      	uxth	r3, r3
 8018e06:	461a      	mov	r2, r3
 8018e08:	687b      	ldr	r3, [r7, #4]
 8018e0a:	885b      	ldrh	r3, [r3, #2]
 8018e0c:	b29b      	uxth	r3, r3
 8018e0e:	1ad3      	subs	r3, r2, r3
 8018e10:	60fb      	str	r3, [r7, #12]
 8018e12:	e00b      	b.n	8018e2c <mqf_len+0x44>
	} else   {
		l = m->num + m->head - m->tail;
 8018e14:	687b      	ldr	r3, [r7, #4]
 8018e16:	795b      	ldrb	r3, [r3, #5]
 8018e18:	461a      	mov	r2, r3
 8018e1a:	687b      	ldr	r3, [r7, #4]
 8018e1c:	881b      	ldrh	r3, [r3, #0]
 8018e1e:	b29b      	uxth	r3, r3
 8018e20:	4413      	add	r3, r2
 8018e22:	687a      	ldr	r2, [r7, #4]
 8018e24:	8852      	ldrh	r2, [r2, #2]
 8018e26:	b292      	uxth	r2, r2
 8018e28:	1a9b      	subs	r3, r3, r2
 8018e2a:	60fb      	str	r3, [r7, #12]
	}
	if (l<0) {
 8018e2c:	68fb      	ldr	r3, [r7, #12]
 8018e2e:	2b00      	cmp	r3, #0
 8018e30:	da05      	bge.n	8018e3e <mqf_len+0x56>
		itm_debug1(DBG_MSG, "big pb", 1);
 8018e32:	2201      	movs	r2, #1
 8018e34:	4904      	ldr	r1, [pc, #16]	; (8018e48 <mqf_len+0x60>)
 8018e36:	2002      	movs	r0, #2
 8018e38:	f7ff ffbc 	bl	8018db4 <itm_debug1>
		for (;;);
 8018e3c:	e7fe      	b.n	8018e3c <mqf_len+0x54>
	}
	return l;
 8018e3e:	68fb      	ldr	r3, [r7, #12]
}
 8018e40:	4618      	mov	r0, r3
 8018e42:	3710      	adds	r7, #16
 8018e44:	46bd      	mov	sp, r7
 8018e46:	bd80      	pop	{r7, pc}
 8018e48:	08019c4c 	.word	0x08019c4c

08018e4c <mqf_qfull>:

void dump_msg(mqf_t *mq, int n);

void mqf_qfull(mqf_t *m, _UNUSED_ int t)
{
 8018e4c:	b580      	push	{r7, lr}
 8018e4e:	b084      	sub	sp, #16
 8018e50:	af00      	add	r7, sp, #0
 8018e52:	6078      	str	r0, [r7, #4]
 8018e54:	6039      	str	r1, [r7, #0]
	itm_debug1(DBG_ERR|DBG_MSG, "w/full", 0);
 8018e56:	2200      	movs	r2, #0
 8018e58:	490e      	ldr	r1, [pc, #56]	; (8018e94 <mqf_qfull+0x48>)
 8018e5a:	480f      	ldr	r0, [pc, #60]	; (8018e98 <mqf_qfull+0x4c>)
 8018e5c:	f7ff ffaa 	bl	8018db4 <itm_debug1>
	for (;;) {
		static uint8_t dmp = 0;
		if (dmp) {
 8018e60:	4b0e      	ldr	r3, [pc, #56]	; (8018e9c <mqf_qfull+0x50>)
 8018e62:	781b      	ldrb	r3, [r3, #0]
 8018e64:	2b00      	cmp	r3, #0
 8018e66:	d0fb      	beq.n	8018e60 <mqf_qfull+0x14>
			dmp = 0;
 8018e68:	4b0c      	ldr	r3, [pc, #48]	; (8018e9c <mqf_qfull+0x50>)
 8018e6a:	2200      	movs	r2, #0
 8018e6c:	701a      	strb	r2, [r3, #0]
			for (int i=0; i<mqf_len(m); i++) {
 8018e6e:	2300      	movs	r3, #0
 8018e70:	60fb      	str	r3, [r7, #12]
 8018e72:	e006      	b.n	8018e82 <mqf_qfull+0x36>
				dump_msg(m, i);
 8018e74:	68f9      	ldr	r1, [r7, #12]
 8018e76:	6878      	ldr	r0, [r7, #4]
 8018e78:	f7fe f8d8 	bl	801702c <dump_msg>
			for (int i=0; i<mqf_len(m); i++) {
 8018e7c:	68fb      	ldr	r3, [r7, #12]
 8018e7e:	3301      	adds	r3, #1
 8018e80:	60fb      	str	r3, [r7, #12]
 8018e82:	6878      	ldr	r0, [r7, #4]
 8018e84:	f7ff ffb0 	bl	8018de8 <mqf_len>
 8018e88:	4602      	mov	r2, r0
 8018e8a:	68fb      	ldr	r3, [r7, #12]
 8018e8c:	4293      	cmp	r3, r2
 8018e8e:	dbf1      	blt.n	8018e74 <mqf_qfull+0x28>
	for (;;) {
 8018e90:	e7e6      	b.n	8018e60 <mqf_qfull+0x14>
 8018e92:	bf00      	nop
 8018e94:	08019c54 	.word	0x08019c54
 8018e98:	80000002 	.word	0x80000002
 8018e9c:	20005618 	.word	0x20005618

08018ea0 <mqf_write>:
			}
		}
	}
}
int mqf_write(mqf_t *m, void *ptr)
{
 8018ea0:	b580      	push	{r7, lr}
 8018ea2:	b084      	sub	sp, #16
 8018ea4:	af00      	add	r7, sp, #0
 8018ea6:	6078      	str	r0, [r7, #4]
 8018ea8:	6039      	str	r1, [r7, #0]
	int l = mqf_len(m);
 8018eaa:	6878      	ldr	r0, [r7, #4]
 8018eac:	f7ff ff9c 	bl	8018de8 <mqf_len>
 8018eb0:	60f8      	str	r0, [r7, #12]
	void Error_Handler(void);
	if (l<0) Error_Handler();
 8018eb2:	68fb      	ldr	r3, [r7, #12]
 8018eb4:	2b00      	cmp	r3, #0
 8018eb6:	da01      	bge.n	8018ebc <mqf_write+0x1c>
 8018eb8:	f7e8 fa76 	bl	80013a8 <Error_Handler>
	if (l > m->maxuse) m->maxuse = (int8_t) l;
 8018ebc:	687b      	ldr	r3, [r7, #4]
 8018ebe:	799b      	ldrb	r3, [r3, #6]
 8018ec0:	461a      	mov	r2, r3
 8018ec2:	68fb      	ldr	r3, [r7, #12]
 8018ec4:	4293      	cmp	r3, r2
 8018ec6:	dd03      	ble.n	8018ed0 <mqf_write+0x30>
 8018ec8:	68fb      	ldr	r3, [r7, #12]
 8018eca:	b2da      	uxtb	r2, r3
 8018ecc:	687b      	ldr	r3, [r7, #4]
 8018ece:	719a      	strb	r2, [r3, #6]

    if (m->num == l) {
 8018ed0:	687b      	ldr	r3, [r7, #4]
 8018ed2:	795b      	ldrb	r3, [r3, #5]
 8018ed4:	461a      	mov	r2, r3
 8018ed6:	68fb      	ldr	r3, [r7, #12]
 8018ed8:	4293      	cmp	r3, r2
 8018eda:	d10b      	bne.n	8018ef4 <mqf_write+0x54>
		itm_debug1(DBG_ERR|DBG_MSG, "w/full", 0);
 8018edc:	2200      	movs	r2, #0
 8018ede:	492a      	ldr	r1, [pc, #168]	; (8018f88 <mqf_write+0xe8>)
 8018ee0:	482a      	ldr	r0, [pc, #168]	; (8018f8c <mqf_write+0xec>)
 8018ee2:	f7ff ff67 	bl	8018db4 <itm_debug1>
		mqf_qfull(m,0);
 8018ee6:	2100      	movs	r1, #0
 8018ee8:	6878      	ldr	r0, [r7, #4]
 8018eea:	f7ff ffaf 	bl	8018e4c <mqf_qfull>
        return -1;
 8018eee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018ef2:	e045      	b.n	8018f80 <mqf_write+0xe0>
    }
    if (m->num-1 == l) {
 8018ef4:	687b      	ldr	r3, [r7, #4]
 8018ef6:	795b      	ldrb	r3, [r3, #5]
 8018ef8:	3b01      	subs	r3, #1
 8018efa:	68fa      	ldr	r2, [r7, #12]
 8018efc:	429a      	cmp	r2, r3
 8018efe:	d111      	bne.n	8018f24 <mqf_write+0x84>
    	itm_debug1(DBG_MSG, "w/full1", m->silentdrop);
 8018f00:	687b      	ldr	r3, [r7, #4]
 8018f02:	79db      	ldrb	r3, [r3, #7]
 8018f04:	461a      	mov	r2, r3
 8018f06:	4922      	ldr	r1, [pc, #136]	; (8018f90 <mqf_write+0xf0>)
 8018f08:	2002      	movs	r0, #2
 8018f0a:	f7ff ff53 	bl	8018db4 <itm_debug1>
    	if (!m->silentdrop) mqf_qfull(m,1);
 8018f0e:	687b      	ldr	r3, [r7, #4]
 8018f10:	79db      	ldrb	r3, [r3, #7]
 8018f12:	2b00      	cmp	r3, #0
 8018f14:	d103      	bne.n	8018f1e <mqf_write+0x7e>
 8018f16:	2101      	movs	r1, #1
 8018f18:	6878      	ldr	r0, [r7, #4]
 8018f1a:	f7ff ff97 	bl	8018e4c <mqf_qfull>
        return -1;
 8018f1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018f22:	e02d      	b.n	8018f80 <mqf_write+0xe0>
    }
	void *p = &(m->msgbuf[m->head*m->msgsiz]);
 8018f24:	687b      	ldr	r3, [r7, #4]
 8018f26:	689b      	ldr	r3, [r3, #8]
 8018f28:	687a      	ldr	r2, [r7, #4]
 8018f2a:	8812      	ldrh	r2, [r2, #0]
 8018f2c:	b292      	uxth	r2, r2
 8018f2e:	4611      	mov	r1, r2
 8018f30:	687a      	ldr	r2, [r7, #4]
 8018f32:	7912      	ldrb	r2, [r2, #4]
 8018f34:	fb02 f201 	mul.w	r2, r2, r1
 8018f38:	4413      	add	r3, r2
 8018f3a:	60bb      	str	r3, [r7, #8]
	memcpy(p, ptr, m->msgsiz);
 8018f3c:	687b      	ldr	r3, [r7, #4]
 8018f3e:	791b      	ldrb	r3, [r3, #4]
 8018f40:	461a      	mov	r2, r3
 8018f42:	6839      	ldr	r1, [r7, #0]
 8018f44:	68b8      	ldr	r0, [r7, #8]
 8018f46:	f000 f8bb 	bl	80190c0 <memcpy>
	//__barrier();
    if (m->head == m->num-1) {
 8018f4a:	687b      	ldr	r3, [r7, #4]
 8018f4c:	881b      	ldrh	r3, [r3, #0]
 8018f4e:	b29b      	uxth	r3, r3
 8018f50:	461a      	mov	r2, r3
 8018f52:	687b      	ldr	r3, [r7, #4]
 8018f54:	795b      	ldrb	r3, [r3, #5]
 8018f56:	3b01      	subs	r3, #1
 8018f58:	429a      	cmp	r2, r3
 8018f5a:	d103      	bne.n	8018f64 <mqf_write+0xc4>
        m->head = 0;
 8018f5c:	687b      	ldr	r3, [r7, #4]
 8018f5e:	2200      	movs	r2, #0
 8018f60:	801a      	strh	r2, [r3, #0]
 8018f62:	e00c      	b.n	8018f7e <mqf_write+0xde>
    } else {
        __sync_fetch_and_add(&(m->head), 1);
 8018f64:	687b      	ldr	r3, [r7, #4]
 8018f66:	f3bf 8f5b 	dmb	ish
 8018f6a:	e8d3 2f5f 	ldrexh	r2, [r3]
 8018f6e:	f102 0201 	add.w	r2, r2, #1
 8018f72:	e8c3 2f51 	strexh	r1, r2, [r3]
 8018f76:	2900      	cmp	r1, #0
 8018f78:	d1f7      	bne.n	8018f6a <mqf_write+0xca>
 8018f7a:	f3bf 8f5b 	dmb	ish
    }
	//AtomicInc(p->head);
	return 0;
 8018f7e:	2300      	movs	r3, #0
}
 8018f80:	4618      	mov	r0, r3
 8018f82:	3710      	adds	r7, #16
 8018f84:	46bd      	mov	sp, r7
 8018f86:	bd80      	pop	{r7, pc}
 8018f88:	08019c54 	.word	0x08019c54
 8018f8c:	80000002 	.word	0x80000002
 8018f90:	08019c5c 	.word	0x08019c5c

08018f94 <mqf_read>:

int mqf_read(mqf_t *m, void *ptr)
{
 8018f94:	b580      	push	{r7, lr}
 8018f96:	b084      	sub	sp, #16
 8018f98:	af00      	add	r7, sp, #0
 8018f9a:	6078      	str	r0, [r7, #4]
 8018f9c:	6039      	str	r1, [r7, #0]
	if (!mqf_len(m)) return -1;
 8018f9e:	6878      	ldr	r0, [r7, #4]
 8018fa0:	f7ff ff22 	bl	8018de8 <mqf_len>
 8018fa4:	4603      	mov	r3, r0
 8018fa6:	2b00      	cmp	r3, #0
 8018fa8:	d102      	bne.n	8018fb0 <mqf_read+0x1c>
 8018faa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018fae:	e02e      	b.n	801900e <mqf_read+0x7a>
    void *p = &(m->msgbuf[m->tail*m->msgsiz]);
 8018fb0:	687b      	ldr	r3, [r7, #4]
 8018fb2:	689b      	ldr	r3, [r3, #8]
 8018fb4:	687a      	ldr	r2, [r7, #4]
 8018fb6:	8852      	ldrh	r2, [r2, #2]
 8018fb8:	b292      	uxth	r2, r2
 8018fba:	4611      	mov	r1, r2
 8018fbc:	687a      	ldr	r2, [r7, #4]
 8018fbe:	7912      	ldrb	r2, [r2, #4]
 8018fc0:	fb02 f201 	mul.w	r2, r2, r1
 8018fc4:	4413      	add	r3, r2
 8018fc6:	60fb      	str	r3, [r7, #12]
    memcpy(ptr, p, m->msgsiz);
 8018fc8:	687b      	ldr	r3, [r7, #4]
 8018fca:	791b      	ldrb	r3, [r3, #4]
 8018fcc:	461a      	mov	r2, r3
 8018fce:	68f9      	ldr	r1, [r7, #12]
 8018fd0:	6838      	ldr	r0, [r7, #0]
 8018fd2:	f000 f875 	bl	80190c0 <memcpy>
    //__barrier();
    if (m->tail == m->num-1) {
 8018fd6:	687b      	ldr	r3, [r7, #4]
 8018fd8:	885b      	ldrh	r3, [r3, #2]
 8018fda:	b29b      	uxth	r3, r3
 8018fdc:	461a      	mov	r2, r3
 8018fde:	687b      	ldr	r3, [r7, #4]
 8018fe0:	795b      	ldrb	r3, [r3, #5]
 8018fe2:	3b01      	subs	r3, #1
 8018fe4:	429a      	cmp	r2, r3
 8018fe6:	d103      	bne.n	8018ff0 <mqf_read+0x5c>
        m->tail = 0;
 8018fe8:	687b      	ldr	r3, [r7, #4]
 8018fea:	2200      	movs	r2, #0
 8018fec:	805a      	strh	r2, [r3, #2]
 8018fee:	e00d      	b.n	801900c <mqf_read+0x78>
    } else {
        __sync_fetch_and_add(&(m->tail), 1);
 8018ff0:	687b      	ldr	r3, [r7, #4]
 8018ff2:	3302      	adds	r3, #2
 8018ff4:	f3bf 8f5b 	dmb	ish
 8018ff8:	e8d3 2f5f 	ldrexh	r2, [r3]
 8018ffc:	f102 0201 	add.w	r2, r2, #1
 8019000:	e8c3 2f51 	strexh	r1, r2, [r3]
 8019004:	2900      	cmp	r1, #0
 8019006:	d1f7      	bne.n	8018ff8 <mqf_read+0x64>
 8019008:	f3bf 8f5b 	dmb	ish
    }
    return 0;
 801900c:	2300      	movs	r3, #0
}
 801900e:	4618      	mov	r0, r3
 8019010:	3710      	adds	r7, #16
 8019012:	46bd      	mov	sp, r7
 8019014:	bd80      	pop	{r7, pc}
	...

08019018 <__errno>:
 8019018:	4b01      	ldr	r3, [pc, #4]	; (8019020 <__errno+0x8>)
 801901a:	6818      	ldr	r0, [r3, #0]
 801901c:	4770      	bx	lr
 801901e:	bf00      	nop
 8019020:	200005a8 	.word	0x200005a8

08019024 <__libc_init_array>:
 8019024:	b570      	push	{r4, r5, r6, lr}
 8019026:	4e0d      	ldr	r6, [pc, #52]	; (801905c <__libc_init_array+0x38>)
 8019028:	4c0d      	ldr	r4, [pc, #52]	; (8019060 <__libc_init_array+0x3c>)
 801902a:	1ba4      	subs	r4, r4, r6
 801902c:	10a4      	asrs	r4, r4, #2
 801902e:	2500      	movs	r5, #0
 8019030:	42a5      	cmp	r5, r4
 8019032:	d109      	bne.n	8019048 <__libc_init_array+0x24>
 8019034:	4e0b      	ldr	r6, [pc, #44]	; (8019064 <__libc_init_array+0x40>)
 8019036:	4c0c      	ldr	r4, [pc, #48]	; (8019068 <__libc_init_array+0x44>)
 8019038:	f000 f964 	bl	8019304 <_init>
 801903c:	1ba4      	subs	r4, r4, r6
 801903e:	10a4      	asrs	r4, r4, #2
 8019040:	2500      	movs	r5, #0
 8019042:	42a5      	cmp	r5, r4
 8019044:	d105      	bne.n	8019052 <__libc_init_array+0x2e>
 8019046:	bd70      	pop	{r4, r5, r6, pc}
 8019048:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801904c:	4798      	blx	r3
 801904e:	3501      	adds	r5, #1
 8019050:	e7ee      	b.n	8019030 <__libc_init_array+0xc>
 8019052:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8019056:	4798      	blx	r3
 8019058:	3501      	adds	r5, #1
 801905a:	e7f2      	b.n	8019042 <__libc_init_array+0x1e>
 801905c:	0801bc0c 	.word	0x0801bc0c
 8019060:	0801bc0c 	.word	0x0801bc0c
 8019064:	0801bc0c 	.word	0x0801bc0c
 8019068:	0801bc10 	.word	0x0801bc10

0801906c <__itoa>:
 801906c:	1e93      	subs	r3, r2, #2
 801906e:	2b22      	cmp	r3, #34	; 0x22
 8019070:	b510      	push	{r4, lr}
 8019072:	460c      	mov	r4, r1
 8019074:	d904      	bls.n	8019080 <__itoa+0x14>
 8019076:	2300      	movs	r3, #0
 8019078:	700b      	strb	r3, [r1, #0]
 801907a:	461c      	mov	r4, r3
 801907c:	4620      	mov	r0, r4
 801907e:	bd10      	pop	{r4, pc}
 8019080:	2a0a      	cmp	r2, #10
 8019082:	d109      	bne.n	8019098 <__itoa+0x2c>
 8019084:	2800      	cmp	r0, #0
 8019086:	da07      	bge.n	8019098 <__itoa+0x2c>
 8019088:	232d      	movs	r3, #45	; 0x2d
 801908a:	700b      	strb	r3, [r1, #0]
 801908c:	4240      	negs	r0, r0
 801908e:	2101      	movs	r1, #1
 8019090:	4421      	add	r1, r4
 8019092:	f000 f8f7 	bl	8019284 <__utoa>
 8019096:	e7f1      	b.n	801907c <__itoa+0x10>
 8019098:	2100      	movs	r1, #0
 801909a:	e7f9      	b.n	8019090 <__itoa+0x24>

0801909c <itoa>:
 801909c:	f7ff bfe6 	b.w	801906c <__itoa>

080190a0 <malloc>:
 80190a0:	4b02      	ldr	r3, [pc, #8]	; (80190ac <malloc+0xc>)
 80190a2:	4601      	mov	r1, r0
 80190a4:	6818      	ldr	r0, [r3, #0]
 80190a6:	f000 b86d 	b.w	8019184 <_malloc_r>
 80190aa:	bf00      	nop
 80190ac:	200005a8 	.word	0x200005a8

080190b0 <free>:
 80190b0:	4b02      	ldr	r3, [pc, #8]	; (80190bc <free+0xc>)
 80190b2:	4601      	mov	r1, r0
 80190b4:	6818      	ldr	r0, [r3, #0]
 80190b6:	f000 b817 	b.w	80190e8 <_free_r>
 80190ba:	bf00      	nop
 80190bc:	200005a8 	.word	0x200005a8

080190c0 <memcpy>:
 80190c0:	b510      	push	{r4, lr}
 80190c2:	1e43      	subs	r3, r0, #1
 80190c4:	440a      	add	r2, r1
 80190c6:	4291      	cmp	r1, r2
 80190c8:	d100      	bne.n	80190cc <memcpy+0xc>
 80190ca:	bd10      	pop	{r4, pc}
 80190cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80190d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80190d4:	e7f7      	b.n	80190c6 <memcpy+0x6>

080190d6 <memset>:
 80190d6:	4402      	add	r2, r0
 80190d8:	4603      	mov	r3, r0
 80190da:	4293      	cmp	r3, r2
 80190dc:	d100      	bne.n	80190e0 <memset+0xa>
 80190de:	4770      	bx	lr
 80190e0:	f803 1b01 	strb.w	r1, [r3], #1
 80190e4:	e7f9      	b.n	80190da <memset+0x4>
	...

080190e8 <_free_r>:
 80190e8:	b538      	push	{r3, r4, r5, lr}
 80190ea:	4605      	mov	r5, r0
 80190ec:	2900      	cmp	r1, #0
 80190ee:	d045      	beq.n	801917c <_free_r+0x94>
 80190f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80190f4:	1f0c      	subs	r4, r1, #4
 80190f6:	2b00      	cmp	r3, #0
 80190f8:	bfb8      	it	lt
 80190fa:	18e4      	addlt	r4, r4, r3
 80190fc:	f000 f900 	bl	8019300 <__malloc_lock>
 8019100:	4a1f      	ldr	r2, [pc, #124]	; (8019180 <_free_r+0x98>)
 8019102:	6813      	ldr	r3, [r2, #0]
 8019104:	4610      	mov	r0, r2
 8019106:	b933      	cbnz	r3, 8019116 <_free_r+0x2e>
 8019108:	6063      	str	r3, [r4, #4]
 801910a:	6014      	str	r4, [r2, #0]
 801910c:	4628      	mov	r0, r5
 801910e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019112:	f000 b8f6 	b.w	8019302 <__malloc_unlock>
 8019116:	42a3      	cmp	r3, r4
 8019118:	d90c      	bls.n	8019134 <_free_r+0x4c>
 801911a:	6821      	ldr	r1, [r4, #0]
 801911c:	1862      	adds	r2, r4, r1
 801911e:	4293      	cmp	r3, r2
 8019120:	bf04      	itt	eq
 8019122:	681a      	ldreq	r2, [r3, #0]
 8019124:	685b      	ldreq	r3, [r3, #4]
 8019126:	6063      	str	r3, [r4, #4]
 8019128:	bf04      	itt	eq
 801912a:	1852      	addeq	r2, r2, r1
 801912c:	6022      	streq	r2, [r4, #0]
 801912e:	6004      	str	r4, [r0, #0]
 8019130:	e7ec      	b.n	801910c <_free_r+0x24>
 8019132:	4613      	mov	r3, r2
 8019134:	685a      	ldr	r2, [r3, #4]
 8019136:	b10a      	cbz	r2, 801913c <_free_r+0x54>
 8019138:	42a2      	cmp	r2, r4
 801913a:	d9fa      	bls.n	8019132 <_free_r+0x4a>
 801913c:	6819      	ldr	r1, [r3, #0]
 801913e:	1858      	adds	r0, r3, r1
 8019140:	42a0      	cmp	r0, r4
 8019142:	d10b      	bne.n	801915c <_free_r+0x74>
 8019144:	6820      	ldr	r0, [r4, #0]
 8019146:	4401      	add	r1, r0
 8019148:	1858      	adds	r0, r3, r1
 801914a:	4282      	cmp	r2, r0
 801914c:	6019      	str	r1, [r3, #0]
 801914e:	d1dd      	bne.n	801910c <_free_r+0x24>
 8019150:	6810      	ldr	r0, [r2, #0]
 8019152:	6852      	ldr	r2, [r2, #4]
 8019154:	605a      	str	r2, [r3, #4]
 8019156:	4401      	add	r1, r0
 8019158:	6019      	str	r1, [r3, #0]
 801915a:	e7d7      	b.n	801910c <_free_r+0x24>
 801915c:	d902      	bls.n	8019164 <_free_r+0x7c>
 801915e:	230c      	movs	r3, #12
 8019160:	602b      	str	r3, [r5, #0]
 8019162:	e7d3      	b.n	801910c <_free_r+0x24>
 8019164:	6820      	ldr	r0, [r4, #0]
 8019166:	1821      	adds	r1, r4, r0
 8019168:	428a      	cmp	r2, r1
 801916a:	bf04      	itt	eq
 801916c:	6811      	ldreq	r1, [r2, #0]
 801916e:	6852      	ldreq	r2, [r2, #4]
 8019170:	6062      	str	r2, [r4, #4]
 8019172:	bf04      	itt	eq
 8019174:	1809      	addeq	r1, r1, r0
 8019176:	6021      	streq	r1, [r4, #0]
 8019178:	605c      	str	r4, [r3, #4]
 801917a:	e7c7      	b.n	801910c <_free_r+0x24>
 801917c:	bd38      	pop	{r3, r4, r5, pc}
 801917e:	bf00      	nop
 8019180:	2000561c 	.word	0x2000561c

08019184 <_malloc_r>:
 8019184:	b570      	push	{r4, r5, r6, lr}
 8019186:	1ccd      	adds	r5, r1, #3
 8019188:	f025 0503 	bic.w	r5, r5, #3
 801918c:	3508      	adds	r5, #8
 801918e:	2d0c      	cmp	r5, #12
 8019190:	bf38      	it	cc
 8019192:	250c      	movcc	r5, #12
 8019194:	2d00      	cmp	r5, #0
 8019196:	4606      	mov	r6, r0
 8019198:	db01      	blt.n	801919e <_malloc_r+0x1a>
 801919a:	42a9      	cmp	r1, r5
 801919c:	d903      	bls.n	80191a6 <_malloc_r+0x22>
 801919e:	230c      	movs	r3, #12
 80191a0:	6033      	str	r3, [r6, #0]
 80191a2:	2000      	movs	r0, #0
 80191a4:	bd70      	pop	{r4, r5, r6, pc}
 80191a6:	f000 f8ab 	bl	8019300 <__malloc_lock>
 80191aa:	4a21      	ldr	r2, [pc, #132]	; (8019230 <_malloc_r+0xac>)
 80191ac:	6814      	ldr	r4, [r2, #0]
 80191ae:	4621      	mov	r1, r4
 80191b0:	b991      	cbnz	r1, 80191d8 <_malloc_r+0x54>
 80191b2:	4c20      	ldr	r4, [pc, #128]	; (8019234 <_malloc_r+0xb0>)
 80191b4:	6823      	ldr	r3, [r4, #0]
 80191b6:	b91b      	cbnz	r3, 80191c0 <_malloc_r+0x3c>
 80191b8:	4630      	mov	r0, r6
 80191ba:	f000 f83d 	bl	8019238 <_sbrk_r>
 80191be:	6020      	str	r0, [r4, #0]
 80191c0:	4629      	mov	r1, r5
 80191c2:	4630      	mov	r0, r6
 80191c4:	f000 f838 	bl	8019238 <_sbrk_r>
 80191c8:	1c43      	adds	r3, r0, #1
 80191ca:	d124      	bne.n	8019216 <_malloc_r+0x92>
 80191cc:	230c      	movs	r3, #12
 80191ce:	6033      	str	r3, [r6, #0]
 80191d0:	4630      	mov	r0, r6
 80191d2:	f000 f896 	bl	8019302 <__malloc_unlock>
 80191d6:	e7e4      	b.n	80191a2 <_malloc_r+0x1e>
 80191d8:	680b      	ldr	r3, [r1, #0]
 80191da:	1b5b      	subs	r3, r3, r5
 80191dc:	d418      	bmi.n	8019210 <_malloc_r+0x8c>
 80191de:	2b0b      	cmp	r3, #11
 80191e0:	d90f      	bls.n	8019202 <_malloc_r+0x7e>
 80191e2:	600b      	str	r3, [r1, #0]
 80191e4:	50cd      	str	r5, [r1, r3]
 80191e6:	18cc      	adds	r4, r1, r3
 80191e8:	4630      	mov	r0, r6
 80191ea:	f000 f88a 	bl	8019302 <__malloc_unlock>
 80191ee:	f104 000b 	add.w	r0, r4, #11
 80191f2:	1d23      	adds	r3, r4, #4
 80191f4:	f020 0007 	bic.w	r0, r0, #7
 80191f8:	1ac3      	subs	r3, r0, r3
 80191fa:	d0d3      	beq.n	80191a4 <_malloc_r+0x20>
 80191fc:	425a      	negs	r2, r3
 80191fe:	50e2      	str	r2, [r4, r3]
 8019200:	e7d0      	b.n	80191a4 <_malloc_r+0x20>
 8019202:	428c      	cmp	r4, r1
 8019204:	684b      	ldr	r3, [r1, #4]
 8019206:	bf16      	itet	ne
 8019208:	6063      	strne	r3, [r4, #4]
 801920a:	6013      	streq	r3, [r2, #0]
 801920c:	460c      	movne	r4, r1
 801920e:	e7eb      	b.n	80191e8 <_malloc_r+0x64>
 8019210:	460c      	mov	r4, r1
 8019212:	6849      	ldr	r1, [r1, #4]
 8019214:	e7cc      	b.n	80191b0 <_malloc_r+0x2c>
 8019216:	1cc4      	adds	r4, r0, #3
 8019218:	f024 0403 	bic.w	r4, r4, #3
 801921c:	42a0      	cmp	r0, r4
 801921e:	d005      	beq.n	801922c <_malloc_r+0xa8>
 8019220:	1a21      	subs	r1, r4, r0
 8019222:	4630      	mov	r0, r6
 8019224:	f000 f808 	bl	8019238 <_sbrk_r>
 8019228:	3001      	adds	r0, #1
 801922a:	d0cf      	beq.n	80191cc <_malloc_r+0x48>
 801922c:	6025      	str	r5, [r4, #0]
 801922e:	e7db      	b.n	80191e8 <_malloc_r+0x64>
 8019230:	2000561c 	.word	0x2000561c
 8019234:	20005620 	.word	0x20005620

08019238 <_sbrk_r>:
 8019238:	b538      	push	{r3, r4, r5, lr}
 801923a:	4c06      	ldr	r4, [pc, #24]	; (8019254 <_sbrk_r+0x1c>)
 801923c:	2300      	movs	r3, #0
 801923e:	4605      	mov	r5, r0
 8019240:	4608      	mov	r0, r1
 8019242:	6023      	str	r3, [r4, #0]
 8019244:	f7e8 fd18 	bl	8001c78 <_sbrk>
 8019248:	1c43      	adds	r3, r0, #1
 801924a:	d102      	bne.n	8019252 <_sbrk_r+0x1a>
 801924c:	6823      	ldr	r3, [r4, #0]
 801924e:	b103      	cbz	r3, 8019252 <_sbrk_r+0x1a>
 8019250:	602b      	str	r3, [r5, #0]
 8019252:	bd38      	pop	{r3, r4, r5, pc}
 8019254:	20009144 	.word	0x20009144

08019258 <strncpy>:
 8019258:	b570      	push	{r4, r5, r6, lr}
 801925a:	3901      	subs	r1, #1
 801925c:	4604      	mov	r4, r0
 801925e:	b902      	cbnz	r2, 8019262 <strncpy+0xa>
 8019260:	bd70      	pop	{r4, r5, r6, pc}
 8019262:	4623      	mov	r3, r4
 8019264:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8019268:	f803 5b01 	strb.w	r5, [r3], #1
 801926c:	1e56      	subs	r6, r2, #1
 801926e:	b92d      	cbnz	r5, 801927c <strncpy+0x24>
 8019270:	4414      	add	r4, r2
 8019272:	42a3      	cmp	r3, r4
 8019274:	d0f4      	beq.n	8019260 <strncpy+0x8>
 8019276:	f803 5b01 	strb.w	r5, [r3], #1
 801927a:	e7fa      	b.n	8019272 <strncpy+0x1a>
 801927c:	461c      	mov	r4, r3
 801927e:	4632      	mov	r2, r6
 8019280:	e7ed      	b.n	801925e <strncpy+0x6>
	...

08019284 <__utoa>:
 8019284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019286:	4b1d      	ldr	r3, [pc, #116]	; (80192fc <__utoa+0x78>)
 8019288:	b08b      	sub	sp, #44	; 0x2c
 801928a:	4605      	mov	r5, r0
 801928c:	460c      	mov	r4, r1
 801928e:	466e      	mov	r6, sp
 8019290:	f103 0c20 	add.w	ip, r3, #32
 8019294:	6818      	ldr	r0, [r3, #0]
 8019296:	6859      	ldr	r1, [r3, #4]
 8019298:	4637      	mov	r7, r6
 801929a:	c703      	stmia	r7!, {r0, r1}
 801929c:	3308      	adds	r3, #8
 801929e:	4563      	cmp	r3, ip
 80192a0:	463e      	mov	r6, r7
 80192a2:	d1f7      	bne.n	8019294 <__utoa+0x10>
 80192a4:	6818      	ldr	r0, [r3, #0]
 80192a6:	791b      	ldrb	r3, [r3, #4]
 80192a8:	713b      	strb	r3, [r7, #4]
 80192aa:	1e93      	subs	r3, r2, #2
 80192ac:	2b22      	cmp	r3, #34	; 0x22
 80192ae:	6038      	str	r0, [r7, #0]
 80192b0:	f04f 0300 	mov.w	r3, #0
 80192b4:	d904      	bls.n	80192c0 <__utoa+0x3c>
 80192b6:	7023      	strb	r3, [r4, #0]
 80192b8:	461c      	mov	r4, r3
 80192ba:	4620      	mov	r0, r4
 80192bc:	b00b      	add	sp, #44	; 0x2c
 80192be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80192c0:	1e66      	subs	r6, r4, #1
 80192c2:	fbb5 f0f2 	udiv	r0, r5, r2
 80192c6:	af0a      	add	r7, sp, #40	; 0x28
 80192c8:	fb02 5510 	mls	r5, r2, r0, r5
 80192cc:	443d      	add	r5, r7
 80192ce:	1c59      	adds	r1, r3, #1
 80192d0:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 80192d4:	f806 5f01 	strb.w	r5, [r6, #1]!
 80192d8:	4605      	mov	r5, r0
 80192da:	b968      	cbnz	r0, 80192f8 <__utoa+0x74>
 80192dc:	5460      	strb	r0, [r4, r1]
 80192de:	4423      	add	r3, r4
 80192e0:	4622      	mov	r2, r4
 80192e2:	1b19      	subs	r1, r3, r4
 80192e4:	1b10      	subs	r0, r2, r4
 80192e6:	4281      	cmp	r1, r0
 80192e8:	dde7      	ble.n	80192ba <__utoa+0x36>
 80192ea:	7811      	ldrb	r1, [r2, #0]
 80192ec:	7818      	ldrb	r0, [r3, #0]
 80192ee:	f802 0b01 	strb.w	r0, [r2], #1
 80192f2:	f803 1901 	strb.w	r1, [r3], #-1
 80192f6:	e7f4      	b.n	80192e2 <__utoa+0x5e>
 80192f8:	460b      	mov	r3, r1
 80192fa:	e7e2      	b.n	80192c2 <__utoa+0x3e>
 80192fc:	0801bbdc 	.word	0x0801bbdc

08019300 <__malloc_lock>:
 8019300:	4770      	bx	lr

08019302 <__malloc_unlock>:
 8019302:	4770      	bx	lr

08019304 <_init>:
 8019304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019306:	bf00      	nop
 8019308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801930a:	bc08      	pop	{r3}
 801930c:	469e      	mov	lr, r3
 801930e:	4770      	bx	lr

08019310 <_fini>:
 8019310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019312:	bf00      	nop
 8019314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019316:	bc08      	pop	{r3}
 8019318:	469e      	mov	lr, r3
 801931a:	4770      	bx	lr
