
stm32f407VETx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015ca4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e7c  08015e34  08015e34  00025e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017cb0  08017cb0  000305e4  2**0
                  CONTENTS
  4 .ARM          00000008  08017cb0  08017cb0  00027cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017cb8  08017cb8  000305e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017cb8  08017cb8  00027cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017cbc  08017cbc  00027cbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005e4  20000000  08017cc0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000085a0  200005e4  080182a4  000305e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008b84  080182a4  00038b84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000305e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00043ea5  00000000  00000000  00030614  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000084a9  00000000  00000000  000744b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002720  00000000  00000000  0007c968  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002530  00000000  00000000  0007f088  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002e208  00000000  00000000  000815b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002aa92  00000000  00000000  000af7c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e8c89  00000000  00000000  000da252  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001c2edb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a8b4  00000000  00000000  001c2f58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200005e4 	.word	0x200005e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08015e1c 	.word	0x08015e1c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200005e8 	.word	0x200005e8
 80001cc:	08015e1c 	.word	0x08015e1c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b972 	b.w	800059c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	4688      	mov	r8, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14b      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4615      	mov	r5, r2
 80002e2:	d967      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0720 	rsb	r7, r2, #32
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	fa20 f707 	lsr.w	r7, r0, r7
 80002f6:	4095      	lsls	r5, r2
 80002f8:	ea47 0803 	orr.w	r8, r7, r3
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbb8 f7fe 	udiv	r7, r8, lr
 8000308:	fa1f fc85 	uxth.w	ip, r5
 800030c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000310:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000314:	fb07 f10c 	mul.w	r1, r7, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000322:	f080 811b 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8118 	bls.w	800055c <__udivmoddi4+0x28c>
 800032c:	3f02      	subs	r7, #2
 800032e:	442b      	add	r3, r5
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0fe 	udiv	r0, r3, lr
 8000338:	fb0e 3310 	mls	r3, lr, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fc0c 	mul.w	ip, r0, ip
 8000344:	45a4      	cmp	ip, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034e:	f080 8107 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000352:	45a4      	cmp	ip, r4
 8000354:	f240 8104 	bls.w	8000560 <__udivmoddi4+0x290>
 8000358:	3802      	subs	r0, #2
 800035a:	442c      	add	r4, r5
 800035c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	2700      	movs	r7, #0
 8000366:	b11e      	cbz	r6, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c6 4300 	strd	r4, r3, [r6]
 8000370:	4639      	mov	r1, r7
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0xbe>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80eb 	beq.w	8000556 <__udivmoddi4+0x286>
 8000380:	2700      	movs	r7, #0
 8000382:	e9c6 0100 	strd	r0, r1, [r6]
 8000386:	4638      	mov	r0, r7
 8000388:	4639      	mov	r1, r7
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f783 	clz	r7, r3
 8000392:	2f00      	cmp	r7, #0
 8000394:	d147      	bne.n	8000426 <__udivmoddi4+0x156>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xd0>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80fa 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0303 	sbc.w	r3, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	4698      	mov	r8, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d0e0      	beq.n	8000370 <__udivmoddi4+0xa0>
 80003ae:	e9c6 4800 	strd	r4, r8, [r6]
 80003b2:	e7dd      	b.n	8000370 <__udivmoddi4+0xa0>
 80003b4:	b902      	cbnz	r2, 80003b8 <__udivmoddi4+0xe8>
 80003b6:	deff      	udf	#255	; 0xff
 80003b8:	fab2 f282 	clz	r2, r2
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f040 808f 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c2:	1b49      	subs	r1, r1, r5
 80003c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003c8:	fa1f f885 	uxth.w	r8, r5
 80003cc:	2701      	movs	r7, #1
 80003ce:	fbb1 fcfe 	udiv	ip, r1, lr
 80003d2:	0c23      	lsrs	r3, r4, #16
 80003d4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb08 f10c 	mul.w	r1, r8, ip
 80003e0:	4299      	cmp	r1, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e4:	18eb      	adds	r3, r5, r3
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	f200 80cd 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1a59      	subs	r1, r3, r1
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000400:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x14c>
 800040c:	192c      	adds	r4, r5, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x14a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80b6 	bhi.w	8000586 <__udivmoddi4+0x2b6>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e79f      	b.n	8000366 <__udivmoddi4+0x96>
 8000426:	f1c7 0c20 	rsb	ip, r7, #32
 800042a:	40bb      	lsls	r3, r7
 800042c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000430:	ea4e 0e03 	orr.w	lr, lr, r3
 8000434:	fa01 f407 	lsl.w	r4, r1, r7
 8000438:	fa20 f50c 	lsr.w	r5, r0, ip
 800043c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000440:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000444:	4325      	orrs	r5, r4
 8000446:	fbb3 f9f8 	udiv	r9, r3, r8
 800044a:	0c2c      	lsrs	r4, r5, #16
 800044c:	fb08 3319 	mls	r3, r8, r9, r3
 8000450:	fa1f fa8e 	uxth.w	sl, lr
 8000454:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000458:	fb09 f40a 	mul.w	r4, r9, sl
 800045c:	429c      	cmp	r4, r3
 800045e:	fa02 f207 	lsl.w	r2, r2, r7
 8000462:	fa00 f107 	lsl.w	r1, r0, r7
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1e 0303 	adds.w	r3, lr, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000470:	f080 8087 	bcs.w	8000582 <__udivmoddi4+0x2b2>
 8000474:	429c      	cmp	r4, r3
 8000476:	f240 8084 	bls.w	8000582 <__udivmoddi4+0x2b2>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4473      	add	r3, lr
 8000480:	1b1b      	subs	r3, r3, r4
 8000482:	b2ad      	uxth	r5, r5
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3310 	mls	r3, r8, r0, r3
 800048c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000490:	fb00 fa0a 	mul.w	sl, r0, sl
 8000494:	45a2      	cmp	sl, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1e 0404 	adds.w	r4, lr, r4
 800049c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004a0:	d26b      	bcs.n	800057a <__udivmoddi4+0x2aa>
 80004a2:	45a2      	cmp	sl, r4
 80004a4:	d969      	bls.n	800057a <__udivmoddi4+0x2aa>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4474      	add	r4, lr
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	eba4 040a 	sub.w	r4, r4, sl
 80004b6:	454c      	cmp	r4, r9
 80004b8:	46c2      	mov	sl, r8
 80004ba:	464b      	mov	r3, r9
 80004bc:	d354      	bcc.n	8000568 <__udivmoddi4+0x298>
 80004be:	d051      	beq.n	8000564 <__udivmoddi4+0x294>
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d069      	beq.n	8000598 <__udivmoddi4+0x2c8>
 80004c4:	ebb1 050a 	subs.w	r5, r1, sl
 80004c8:	eb64 0403 	sbc.w	r4, r4, r3
 80004cc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d0:	40fd      	lsrs	r5, r7
 80004d2:	40fc      	lsrs	r4, r7
 80004d4:	ea4c 0505 	orr.w	r5, ip, r5
 80004d8:	e9c6 5400 	strd	r5, r4, [r6]
 80004dc:	2700      	movs	r7, #0
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0xa0>
 80004e0:	f1c2 0320 	rsb	r3, r2, #32
 80004e4:	fa20 f703 	lsr.w	r7, r0, r3
 80004e8:	4095      	lsls	r5, r2
 80004ea:	fa01 f002 	lsl.w	r0, r1, r2
 80004ee:	fa21 f303 	lsr.w	r3, r1, r3
 80004f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004f6:	4338      	orrs	r0, r7
 80004f8:	0c01      	lsrs	r1, r0, #16
 80004fa:	fbb3 f7fe 	udiv	r7, r3, lr
 80004fe:	fa1f f885 	uxth.w	r8, r5
 8000502:	fb0e 3317 	mls	r3, lr, r7, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb07 f308 	mul.w	r3, r7, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	fa04 f402 	lsl.w	r4, r4, r2
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x256>
 8000516:	1869      	adds	r1, r5, r1
 8000518:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800051c:	d22f      	bcs.n	800057e <__udivmoddi4+0x2ae>
 800051e:	428b      	cmp	r3, r1
 8000520:	d92d      	bls.n	800057e <__udivmoddi4+0x2ae>
 8000522:	3f02      	subs	r7, #2
 8000524:	4429      	add	r1, r5
 8000526:	1acb      	subs	r3, r1, r3
 8000528:	b281      	uxth	r1, r0
 800052a:	fbb3 f0fe 	udiv	r0, r3, lr
 800052e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000532:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000536:	fb00 f308 	mul.w	r3, r0, r8
 800053a:	428b      	cmp	r3, r1
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x27e>
 800053e:	1869      	adds	r1, r5, r1
 8000540:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000544:	d217      	bcs.n	8000576 <__udivmoddi4+0x2a6>
 8000546:	428b      	cmp	r3, r1
 8000548:	d915      	bls.n	8000576 <__udivmoddi4+0x2a6>
 800054a:	3802      	subs	r0, #2
 800054c:	4429      	add	r1, r5
 800054e:	1ac9      	subs	r1, r1, r3
 8000550:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000554:	e73b      	b.n	80003ce <__udivmoddi4+0xfe>
 8000556:	4637      	mov	r7, r6
 8000558:	4630      	mov	r0, r6
 800055a:	e709      	b.n	8000370 <__udivmoddi4+0xa0>
 800055c:	4607      	mov	r7, r0
 800055e:	e6e7      	b.n	8000330 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fb      	b.n	800035c <__udivmoddi4+0x8c>
 8000564:	4541      	cmp	r1, r8
 8000566:	d2ab      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 8000568:	ebb8 0a02 	subs.w	sl, r8, r2
 800056c:	eb69 020e 	sbc.w	r2, r9, lr
 8000570:	3801      	subs	r0, #1
 8000572:	4613      	mov	r3, r2
 8000574:	e7a4      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000576:	4660      	mov	r0, ip
 8000578:	e7e9      	b.n	800054e <__udivmoddi4+0x27e>
 800057a:	4618      	mov	r0, r3
 800057c:	e795      	b.n	80004aa <__udivmoddi4+0x1da>
 800057e:	4667      	mov	r7, ip
 8000580:	e7d1      	b.n	8000526 <__udivmoddi4+0x256>
 8000582:	4681      	mov	r9, r0
 8000584:	e77c      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000586:	3802      	subs	r0, #2
 8000588:	442c      	add	r4, r5
 800058a:	e747      	b.n	800041c <__udivmoddi4+0x14c>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	442b      	add	r3, r5
 8000592:	e72f      	b.n	80003f4 <__udivmoddi4+0x124>
 8000594:	4638      	mov	r0, r7
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xda>
 8000598:	4637      	mov	r7, r6
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0xa0>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ac:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80005b0:	f003 0301 	and.w	r3, r3, #1
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d013      	beq.n	80005e0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005b8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005bc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005c0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d00b      	beq.n	80005e0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005c8:	e000      	b.n	80005cc <ITM_SendChar+0x2c>
    {
      __NOP();
 80005ca:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005cc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d0f9      	beq.n	80005ca <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005d6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005da:	687a      	ldr	r2, [r7, #4]
 80005dc:	b2d2      	uxtb	r2, r2
 80005de:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005e0:	687b      	ldr	r3, [r7, #4]
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr

080005ee <_write>:
#include <stdio.h>
#include "cmsis_os.h"
#include "bletask.h"

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 80005ee:	b580      	push	{r7, lr}
 80005f0:	b086      	sub	sp, #24
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	60f8      	str	r0, [r7, #12]
 80005f6:	60b9      	str	r1, [r7, #8]
 80005f8:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i++)
 80005fa:	2300      	movs	r3, #0
 80005fc:	617b      	str	r3, [r7, #20]
 80005fe:	e009      	b.n	8000614 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	1c5a      	adds	r2, r3, #1
 8000604:	60ba      	str	r2, [r7, #8]
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	4618      	mov	r0, r3
 800060a:	f7ff ffc9 	bl	80005a0 <ITM_SendChar>
	for (int i = 0; i < len; i++)
 800060e:	697b      	ldr	r3, [r7, #20]
 8000610:	3301      	adds	r3, #1
 8000612:	617b      	str	r3, [r7, #20]
 8000614:	697a      	ldr	r2, [r7, #20]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	429a      	cmp	r2, r3
 800061a:	dbf1      	blt.n	8000600 <_write+0x12>
	}
	return len;
 800061c:	687b      	ldr	r3, [r7, #4]
}
 800061e:	4618      	mov	r0, r3
 8000620:	3718      	adds	r7, #24
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
	...

08000628 <RunBleTask>:

static void process_lofi(uint8_t *msg, int len);


void RunBleTask(UART_HandleTypeDef *_uart, DMA_HandleTypeDef *_hdma_uart_rx, DMA_HandleTypeDef *_hdma_uart_tx, osMessageQueueId_t _bleRespQ)
{
 8000628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800062c:	b090      	sub	sp, #64	; 0x40
 800062e:	af00      	add	r7, sp, #0
 8000630:	60f8      	str	r0, [r7, #12]
 8000632:	60b9      	str	r1, [r7, #8]
 8000634:	607a      	str	r2, [r7, #4]
 8000636:	603b      	str	r3, [r7, #0]
	huart = _uart;
 8000638:	4abf      	ldr	r2, [pc, #764]	; (8000938 <RunBleTask+0x310>)
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	6013      	str	r3, [r2, #0]
	hdma_uart_rx = _hdma_uart_rx;
 800063e:	4abf      	ldr	r2, [pc, #764]	; (800093c <RunBleTask+0x314>)
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	6013      	str	r3, [r2, #0]
	hdma_uart_tx = _hdma_uart_tx;
 8000644:	4abe      	ldr	r2, [pc, #760]	; (8000940 <RunBleTask+0x318>)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	6013      	str	r3, [r2, #0]
	bleRespQ     = _bleRespQ;
 800064a:	4abe      	ldr	r2, [pc, #760]	; (8000944 <RunBleTask+0x31c>)
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	6013      	str	r3, [r2, #0]

	curbuf = 0;
 8000650:	4bbd      	ldr	r3, [pc, #756]	; (8000948 <RunBleTask+0x320>)
 8000652:	2200      	movs	r2, #0
 8000654:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_DMA(huart, buf0, sizeof(buf0));
 8000656:	4bb8      	ldr	r3, [pc, #736]	; (8000938 <RunBleTask+0x310>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	2220      	movs	r2, #32
 800065c:	49bb      	ldr	r1, [pc, #748]	; (800094c <RunBleTask+0x324>)
 800065e:	4618      	mov	r0, r3
 8000660:	f008 fda8 	bl	80091b4 <HAL_UART_Receive_DMA>
	__HAL_UART_ENABLE_IT(huart, UART_IT_IDLE );
 8000664:	4bb4      	ldr	r3, [pc, #720]	; (8000938 <RunBleTask+0x310>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	68da      	ldr	r2, [r3, #12]
 800066c:	4bb2      	ldr	r3, [pc, #712]	; (8000938 <RunBleTask+0x310>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	f042 0210 	orr.w	r2, r2, #16
 8000676:	60da      	str	r2, [r3, #12]
	__HAL_DMA_ENABLE_IT(hdma_uart_rx, DMA_IT_TC /*|DMA_IT_HT*/);
 8000678:	4bb0      	ldr	r3, [pc, #704]	; (800093c <RunBleTask+0x314>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	681a      	ldr	r2, [r3, #0]
 8000680:	4bae      	ldr	r3, [pc, #696]	; (800093c <RunBleTask+0x314>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	f042 0210 	orr.w	r2, r2, #16
 800068a:	601a      	str	r2, [r3, #0]
	//rx_on_progress = 1;

	printf("BLE start\n");
 800068c:	48b0      	ldr	r0, [pc, #704]	; (8000950 <RunBleTask+0x328>)
 800068e:	f014 fd4d 	bl	801512c <puts>
	if ((1)) {
		for (;;) {
			uint8_t msg_prio;
			at_msg_t m;
			osStatus_t rc = osMessageQueueGet(bleRespQ, &m, &msg_prio, 300);
 8000692:	4bac      	ldr	r3, [pc, #688]	; (8000944 <RunBleTask+0x31c>)
 8000694:	6818      	ldr	r0, [r3, #0]
 8000696:	f107 021b 	add.w	r2, r7, #27
 800069a:	f107 0118 	add.w	r1, r7, #24
 800069e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80006a2:	f00c fded 	bl	800d280 <osMessageQueueGet>
 80006a6:	63b8      	str	r0, [r7, #56]	; 0x38
			if (rc == osOK) {
 80006a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d100      	bne.n	80006b0 <RunBleTask+0x88>
		for (;;) {
 80006ae:	e7f0      	b.n	8000692 <RunBleTask+0x6a>
				continue;
			}
			break;
		}
	}
	int ncmd = 0;
 80006b0:	2300      	movs	r3, #0
 80006b2:	63fb      	str	r3, [r7, #60]	; 0x3c
	for (;;) {
		const at_command_t *pat = &cmds[ncmd];
 80006b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80006b6:	4613      	mov	r3, r2
 80006b8:	005b      	lsls	r3, r3, #1
 80006ba:	4413      	add	r3, r2
 80006bc:	009b      	lsls	r3, r3, #2
 80006be:	4aa5      	ldr	r2, [pc, #660]	; (8000954 <RunBleTask+0x32c>)
 80006c0:	4413      	add	r3, r2
 80006c2:	637b      	str	r3, [r7, #52]	; 0x34
		printf("BLE cmd %d\n", ncmd);
 80006c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80006c6:	48a4      	ldr	r0, [pc, #656]	; (8000958 <RunBleTask+0x330>)
 80006c8:	f014 fca8 	bl	801501c <iprintf>
		if (!pat->cmd) break;
 80006cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d10c      	bne.n	80006ee <RunBleTask+0xc6>
		}
		ncmd++;
		num_cmd++;
	}
	// init done
	bh();
 80006d4:	f000 f9b6 	bl	8000a44 <bh>
	osDelay(200);
 80006d8:	20c8      	movs	r0, #200	; 0xc8
 80006da:	f00c fca9 	bl	800d030 <osDelay>
#define MSG "0123456789\r\n"
	HAL_UART_Transmit_DMA(huart, (uint8_t *) MSG, strlen(MSG));
 80006de:	4b96      	ldr	r3, [pc, #600]	; (8000938 <RunBleTask+0x310>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	220c      	movs	r2, #12
 80006e4:	499d      	ldr	r1, [pc, #628]	; (800095c <RunBleTask+0x334>)
 80006e6:	4618      	mov	r0, r3
 80006e8:	f008 fcf8 	bl	80090dc <HAL_UART_Transmit_DMA>
 80006ec:	e148      	b.n	8000980 <RunBleTask+0x358>
		HAL_UART_Transmit_DMA(huart, (uint8_t *)pat->cmd, strlen(pat->cmd));
 80006ee:	4b92      	ldr	r3, [pc, #584]	; (8000938 <RunBleTask+0x310>)
 80006f0:	681c      	ldr	r4, [r3, #0]
 80006f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006f4:	681d      	ldr	r5, [r3, #0]
 80006f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff fd72 	bl	80001e4 <strlen>
 8000700:	4603      	mov	r3, r0
 8000702:	b29b      	uxth	r3, r3
 8000704:	461a      	mov	r2, r3
 8000706:	4629      	mov	r1, r5
 8000708:	4620      	mov	r0, r4
 800070a:	f008 fce7 	bl	80090dc <HAL_UART_Transmit_DMA>
		osStatus_t rc = osMessageQueueGet(bleRespQ, &m, &msg_prio, portMAX_DELAY);
 800070e:	4b8d      	ldr	r3, [pc, #564]	; (8000944 <RunBleTask+0x31c>)
 8000710:	6818      	ldr	r0, [r3, #0]
 8000712:	f107 0217 	add.w	r2, r7, #23
 8000716:	f107 0114 	add.w	r1, r7, #20
 800071a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800071e:	f00c fdaf 	bl	800d280 <osMessageQueueGet>
 8000722:	6338      	str	r0, [r7, #48]	; 0x30
		if (rc != osOK) {
 8000724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000726:	2b00      	cmp	r3, #0
 8000728:	d006      	beq.n	8000738 <RunBleTask+0x110>
			bh();
 800072a:	f000 f98b 	bl	8000a44 <bh>
			osDelay(500);
 800072e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000732:	f00c fc7d 	bl	800d030 <osDelay>
			continue;
 8000736:	e122      	b.n	800097e <RunBleTask+0x356>
		num_qget++;
 8000738:	4b89      	ldr	r3, [pc, #548]	; (8000960 <RunBleTask+0x338>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	3301      	adds	r3, #1
 800073e:	4a88      	ldr	r2, [pc, #544]	; (8000960 <RunBleTask+0x338>)
 8000740:	6013      	str	r3, [r2, #0]
		uint8_t *msg = m.numbuf ? buf1 : buf0;
 8000742:	7d3b      	ldrb	r3, [r7, #20]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <RunBleTask+0x124>
 8000748:	4b86      	ldr	r3, [pc, #536]	; (8000964 <RunBleTask+0x33c>)
 800074a:	e000      	b.n	800074e <RunBleTask+0x126>
 800074c:	4b7f      	ldr	r3, [pc, #508]	; (800094c <RunBleTask+0x324>)
 800074e:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (m.len<sizeof(buf0)) msg[m.len]='\0';
 8000750:	7d7b      	ldrb	r3, [r7, #21]
 8000752:	2b1f      	cmp	r3, #31
 8000754:	d805      	bhi.n	8000762 <RunBleTask+0x13a>
 8000756:	7d7b      	ldrb	r3, [r7, #21]
 8000758:	461a      	mov	r2, r3
 800075a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800075c:	4413      	add	r3, r2
 800075e:	2200      	movs	r2, #0
 8000760:	701a      	strb	r2, [r3, #0]
		int el = strlen(pat->resp);
 8000762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000764:	685b      	ldr	r3, [r3, #4]
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff fd3c 	bl	80001e4 <strlen>
 800076c:	4603      	mov	r3, r0
 800076e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (memcmp(msg, pat->resp, el)) {
 8000770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000772:	685b      	ldr	r3, [r3, #4]
 8000774:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000776:	4619      	mov	r1, r3
 8000778:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800077a:	f014 fb85 	bl	8014e88 <memcmp>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d006      	beq.n	8000792 <RunBleTask+0x16a>
			bh();
 8000784:	f000 f95e 	bl	8000a44 <bh>
			osDelay(500);
 8000788:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800078c:	f00c fc50 	bl	800d030 <osDelay>
			continue;
 8000790:	e0f5      	b.n	800097e <RunBleTask+0x356>
		switch (pat->flags) {
 8000792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000794:	7a1b      	ldrb	r3, [r3, #8]
 8000796:	2b02      	cmp	r3, #2
 8000798:	f000 80e8 	beq.w	800096c <RunBleTask+0x344>
 800079c:	2b03      	cmp	r3, #3
 800079e:	d002      	beq.n	80007a6 <RunBleTask+0x17e>
 80007a0:	2b01      	cmp	r3, #1
 80007a2:	d005      	beq.n	80007b0 <RunBleTask+0x188>
 80007a4:	e0e3      	b.n	800096e <RunBleTask+0x346>
			osDelay(1000);
 80007a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007aa:	f00c fc41 	bl	800d030 <osDelay>
			break;
 80007ae:	e0de      	b.n	800096e <RunBleTask+0x346>
			huart->Instance->CR1 &= ~(USART_CR1_UE);
 80007b0:	4b61      	ldr	r3, [pc, #388]	; (8000938 <RunBleTask+0x310>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	68da      	ldr	r2, [r3, #12]
 80007b8:	4b5f      	ldr	r3, [pc, #380]	; (8000938 <RunBleTask+0x310>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80007c2:	60da      	str	r2, [r3, #12]
			uint32_t pclk = HAL_RCC_GetPCLK1Freq();
 80007c4:	f007 f8ce 	bl	8007964 <HAL_RCC_GetPCLK1Freq>
 80007c8:	6278      	str	r0, [r7, #36]	; 0x24
			huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, 115200);
 80007ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007cc:	461d      	mov	r5, r3
 80007ce:	f04f 0600 	mov.w	r6, #0
 80007d2:	46a8      	mov	r8, r5
 80007d4:	46b1      	mov	r9, r6
 80007d6:	eb18 0308 	adds.w	r3, r8, r8
 80007da:	eb49 0409 	adc.w	r4, r9, r9
 80007de:	4698      	mov	r8, r3
 80007e0:	46a1      	mov	r9, r4
 80007e2:	eb18 0805 	adds.w	r8, r8, r5
 80007e6:	eb49 0906 	adc.w	r9, r9, r6
 80007ea:	f04f 0100 	mov.w	r1, #0
 80007ee:	f04f 0200 	mov.w	r2, #0
 80007f2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80007f6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80007fa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80007fe:	4688      	mov	r8, r1
 8000800:	4691      	mov	r9, r2
 8000802:	eb18 0005 	adds.w	r0, r8, r5
 8000806:	eb49 0106 	adc.w	r1, r9, r6
 800080a:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 800080e:	f04f 0300 	mov.w	r3, #0
 8000812:	f7ff fd45 	bl	80002a0 <__aeabi_uldivmod>
 8000816:	4603      	mov	r3, r0
 8000818:	460c      	mov	r4, r1
 800081a:	461a      	mov	r2, r3
 800081c:	4b52      	ldr	r3, [pc, #328]	; (8000968 <RunBleTask+0x340>)
 800081e:	fba3 2302 	umull	r2, r3, r3, r2
 8000822:	095b      	lsrs	r3, r3, #5
 8000824:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8000828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800082a:	461d      	mov	r5, r3
 800082c:	f04f 0600 	mov.w	r6, #0
 8000830:	46a9      	mov	r9, r5
 8000832:	46b2      	mov	sl, r6
 8000834:	eb19 0309 	adds.w	r3, r9, r9
 8000838:	eb4a 040a 	adc.w	r4, sl, sl
 800083c:	4699      	mov	r9, r3
 800083e:	46a2      	mov	sl, r4
 8000840:	eb19 0905 	adds.w	r9, r9, r5
 8000844:	eb4a 0a06 	adc.w	sl, sl, r6
 8000848:	f04f 0100 	mov.w	r1, #0
 800084c:	f04f 0200 	mov.w	r2, #0
 8000850:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000854:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8000858:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800085c:	4689      	mov	r9, r1
 800085e:	4692      	mov	sl, r2
 8000860:	eb19 0005 	adds.w	r0, r9, r5
 8000864:	eb4a 0106 	adc.w	r1, sl, r6
 8000868:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 800086c:	f04f 0300 	mov.w	r3, #0
 8000870:	f7ff fd16 	bl	80002a0 <__aeabi_uldivmod>
 8000874:	4603      	mov	r3, r0
 8000876:	460c      	mov	r4, r1
 8000878:	461a      	mov	r2, r3
 800087a:	4b3b      	ldr	r3, [pc, #236]	; (8000968 <RunBleTask+0x340>)
 800087c:	fba3 1302 	umull	r1, r3, r3, r2
 8000880:	095b      	lsrs	r3, r3, #5
 8000882:	2164      	movs	r1, #100	; 0x64
 8000884:	fb01 f303 	mul.w	r3, r1, r3
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	00db      	lsls	r3, r3, #3
 800088c:	3332      	adds	r3, #50	; 0x32
 800088e:	4a36      	ldr	r2, [pc, #216]	; (8000968 <RunBleTask+0x340>)
 8000890:	fba2 2303 	umull	r2, r3, r2, r3
 8000894:	095b      	lsrs	r3, r3, #5
 8000896:	005b      	lsls	r3, r3, #1
 8000898:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800089c:	4498      	add	r8, r3
 800089e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008a0:	461d      	mov	r5, r3
 80008a2:	f04f 0600 	mov.w	r6, #0
 80008a6:	46a9      	mov	r9, r5
 80008a8:	46b2      	mov	sl, r6
 80008aa:	eb19 0309 	adds.w	r3, r9, r9
 80008ae:	eb4a 040a 	adc.w	r4, sl, sl
 80008b2:	4699      	mov	r9, r3
 80008b4:	46a2      	mov	sl, r4
 80008b6:	eb19 0905 	adds.w	r9, r9, r5
 80008ba:	eb4a 0a06 	adc.w	sl, sl, r6
 80008be:	f04f 0100 	mov.w	r1, #0
 80008c2:	f04f 0200 	mov.w	r2, #0
 80008c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80008ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80008ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80008d2:	4689      	mov	r9, r1
 80008d4:	4692      	mov	sl, r2
 80008d6:	eb19 0005 	adds.w	r0, r9, r5
 80008da:	eb4a 0106 	adc.w	r1, sl, r6
 80008de:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80008e2:	f04f 0300 	mov.w	r3, #0
 80008e6:	f7ff fcdb 	bl	80002a0 <__aeabi_uldivmod>
 80008ea:	4603      	mov	r3, r0
 80008ec:	460c      	mov	r4, r1
 80008ee:	461a      	mov	r2, r3
 80008f0:	4b1d      	ldr	r3, [pc, #116]	; (8000968 <RunBleTask+0x340>)
 80008f2:	fba3 1302 	umull	r1, r3, r3, r2
 80008f6:	095b      	lsrs	r3, r3, #5
 80008f8:	2164      	movs	r1, #100	; 0x64
 80008fa:	fb01 f303 	mul.w	r3, r1, r3
 80008fe:	1ad3      	subs	r3, r2, r3
 8000900:	00db      	lsls	r3, r3, #3
 8000902:	3332      	adds	r3, #50	; 0x32
 8000904:	4a18      	ldr	r2, [pc, #96]	; (8000968 <RunBleTask+0x340>)
 8000906:	fba2 2303 	umull	r2, r3, r2, r3
 800090a:	095b      	lsrs	r3, r3, #5
 800090c:	f003 0207 	and.w	r2, r3, #7
 8000910:	4b09      	ldr	r3, [pc, #36]	; (8000938 <RunBleTask+0x310>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4442      	add	r2, r8
 8000918:	609a      	str	r2, [r3, #8]
			huart->Instance->CR1 |= USART_CR1_UE;
 800091a:	4b07      	ldr	r3, [pc, #28]	; (8000938 <RunBleTask+0x310>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	68da      	ldr	r2, [r3, #12]
 8000922:	4b05      	ldr	r3, [pc, #20]	; (8000938 <RunBleTask+0x310>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800092c:	60da      	str	r2, [r3, #12]
			osDelay(1000);
 800092e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000932:	f00c fb7d 	bl	800d030 <osDelay>
			break;
 8000936:	e01a      	b.n	800096e <RunBleTask+0x346>
 8000938:	20000600 	.word	0x20000600
 800093c:	20000604 	.word	0x20000604
 8000940:	20000608 	.word	0x20000608
 8000944:	2000060c 	.word	0x2000060c
 8000948:	20000658 	.word	0x20000658
 800094c:	20000618 	.word	0x20000618
 8000950:	08015e8c 	.word	0x08015e8c
 8000954:	080161f0 	.word	0x080161f0
 8000958:	08015e98 	.word	0x08015e98
 800095c:	08015ea4 	.word	0x08015ea4
 8000960:	20000660 	.word	0x20000660
 8000964:	20000638 	.word	0x20000638
 8000968:	51eb851f 	.word	0x51eb851f
			break;
 800096c:	bf00      	nop
		ncmd++;
 800096e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000970:	3301      	adds	r3, #1
 8000972:	63fb      	str	r3, [r7, #60]	; 0x3c
		num_cmd++;
 8000974:	4b2a      	ldr	r3, [pc, #168]	; (8000a20 <RunBleTask+0x3f8>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	3301      	adds	r3, #1
 800097a:	4a29      	ldr	r2, [pc, #164]	; (8000a20 <RunBleTask+0x3f8>)
 800097c:	6013      	str	r3, [r2, #0]
	for (;;) {
 800097e:	e699      	b.n	80006b4 <RunBleTask+0x8c>
	for (;;) {
		uint8_t msg_prio;
		at_msg_t m;
		osStatus_t rc = osMessageQueueGet(bleRespQ, &m, &msg_prio, portMAX_DELAY);
 8000980:	4b28      	ldr	r3, [pc, #160]	; (8000a24 <RunBleTask+0x3fc>)
 8000982:	6818      	ldr	r0, [r3, #0]
 8000984:	f107 0213 	add.w	r2, r7, #19
 8000988:	f107 0110 	add.w	r1, r7, #16
 800098c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000990:	f00c fc76 	bl	800d280 <osMessageQueueGet>
 8000994:	6238      	str	r0, [r7, #32]
		//bh();
		if (rc != osOK) {
 8000996:	6a3b      	ldr	r3, [r7, #32]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d004      	beq.n	80009a6 <RunBleTask+0x37e>
			//num_msg_get_err++;
			osDelay(500);
 800099c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009a0:	f00c fb46 	bl	800d030 <osDelay>
 80009a4:	e7ec      	b.n	8000980 <RunBleTask+0x358>
			continue;
		}
		uint8_t *msg = m.numbuf ? buf1 : buf0;
 80009a6:	7c3b      	ldrb	r3, [r7, #16]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <RunBleTask+0x388>
 80009ac:	4b1e      	ldr	r3, [pc, #120]	; (8000a28 <RunBleTask+0x400>)
 80009ae:	e000      	b.n	80009b2 <RunBleTask+0x38a>
 80009b0:	4b1e      	ldr	r3, [pc, #120]	; (8000a2c <RunBleTask+0x404>)
 80009b2:	61fb      	str	r3, [r7, #28]
		// process response
		if (mode_lofi) {
 80009b4:	4b1e      	ldr	r3, [pc, #120]	; (8000a30 <RunBleTask+0x408>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d005      	beq.n	80009c8 <RunBleTask+0x3a0>
			process_lofi(msg, m.len);
 80009bc:	7c7b      	ldrb	r3, [r7, #17]
 80009be:	4619      	mov	r1, r3
 80009c0:	69f8      	ldr	r0, [r7, #28]
 80009c2:	f000 f84d 	bl	8000a60 <process_lofi>
 80009c6:	e7db      	b.n	8000980 <RunBleTask+0x358>
		} else {
			if (m.len<sizeof(buf0)) msg[m.len]='\0';
 80009c8:	7c7b      	ldrb	r3, [r7, #17]
 80009ca:	2b1f      	cmp	r3, #31
 80009cc:	d805      	bhi.n	80009da <RunBleTask+0x3b2>
 80009ce:	7c7b      	ldrb	r3, [r7, #17]
 80009d0:	461a      	mov	r2, r3
 80009d2:	69fb      	ldr	r3, [r7, #28]
 80009d4:	4413      	add	r3, r2
 80009d6:	2200      	movs	r2, #0
 80009d8:	701a      	strb	r2, [r3, #0]
		                 //012345678
			static char str[]="resp x ok";
			static int cnt = 0;
			str[5] = '0'+(cnt++ % 10);
 80009da:	4b16      	ldr	r3, [pc, #88]	; (8000a34 <RunBleTask+0x40c>)
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	1c53      	adds	r3, r2, #1
 80009e0:	4914      	ldr	r1, [pc, #80]	; (8000a34 <RunBleTask+0x40c>)
 80009e2:	600b      	str	r3, [r1, #0]
 80009e4:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <RunBleTask+0x410>)
 80009e6:	fb83 1302 	smull	r1, r3, r3, r2
 80009ea:	1099      	asrs	r1, r3, #2
 80009ec:	17d3      	asrs	r3, r2, #31
 80009ee:	1ac9      	subs	r1, r1, r3
 80009f0:	460b      	mov	r3, r1
 80009f2:	009b      	lsls	r3, r3, #2
 80009f4:	440b      	add	r3, r1
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	1ad1      	subs	r1, r2, r3
 80009fa:	b2cb      	uxtb	r3, r1
 80009fc:	3330      	adds	r3, #48	; 0x30
 80009fe:	b2da      	uxtb	r2, r3
 8000a00:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <RunBleTask+0x414>)
 8000a02:	715a      	strb	r2, [r3, #5]
			HAL_UART_Transmit_DMA(huart, (uint8_t *)str, strlen(str));
 8000a04:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <RunBleTask+0x418>)
 8000a06:	681c      	ldr	r4, [r3, #0]
 8000a08:	480c      	ldr	r0, [pc, #48]	; (8000a3c <RunBleTask+0x414>)
 8000a0a:	f7ff fbeb 	bl	80001e4 <strlen>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	b29b      	uxth	r3, r3
 8000a12:	461a      	mov	r2, r3
 8000a14:	4909      	ldr	r1, [pc, #36]	; (8000a3c <RunBleTask+0x414>)
 8000a16:	4620      	mov	r0, r4
 8000a18:	f008 fb60 	bl	80090dc <HAL_UART_Transmit_DMA>
	for (;;) {
 8000a1c:	e7b0      	b.n	8000980 <RunBleTask+0x358>
 8000a1e:	bf00      	nop
 8000a20:	2000065c 	.word	0x2000065c
 8000a24:	2000060c 	.word	0x2000060c
 8000a28:	20000638 	.word	0x20000638
 8000a2c:	20000618 	.word	0x20000618
 8000a30:	20000000 	.word	0x20000000
 8000a34:	2000066c 	.word	0x2000066c
 8000a38:	66666667 	.word	0x66666667
 8000a3c:	20000004 	.word	0x20000004
 8000a40:	20000600 	.word	0x20000600

08000a44 <bh>:
	}

}

void bh(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0

}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr

08000a52 <bh2>:

static void bh2(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0

}
 8000a56:	bf00      	nop
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <process_lofi>:
volatile int8_t ble_spd2;

// https://github.com/generationmake/LOFI_on_Bluefruit_nRF52/blob/master/LOFI_on_Bluefruit_nRF52.ino

static void process_lofi(uint8_t *msg, int len)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	6039      	str	r1, [r7, #0]
	for (int i=0; i<len; i+=2) {
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	e048      	b.n	8000b02 <process_lofi+0xa2>
		int8_t v = (int8_t)(msg[i+1]);
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	3301      	adds	r3, #1
 8000a74:	687a      	ldr	r2, [r7, #4]
 8000a76:	4413      	add	r3, r2
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	72fb      	strb	r3, [r7, #11]
		printf("  %d=%d ", msg[i], v);
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	687a      	ldr	r2, [r7, #4]
 8000a80:	4413      	add	r3, r2
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	4619      	mov	r1, r3
 8000a86:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	4822      	ldr	r0, [pc, #136]	; (8000b18 <process_lofi+0xb8>)
 8000a8e:	f014 fac5 	bl	801501c <iprintf>
		if (v) bh();
 8000a92:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <process_lofi+0x3e>
 8000a9a:	f7ff ffd3 	bl	8000a44 <bh>
		switch (msg[i]) {
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	687a      	ldr	r2, [r7, #4]
 8000aa2:	4413      	add	r3, r2
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	3bc9      	subs	r3, #201	; 0xc9
 8000aa8:	2b0b      	cmp	r3, #11
 8000aaa:	d823      	bhi.n	8000af4 <process_lofi+0x94>
 8000aac:	a201      	add	r2, pc, #4	; (adr r2, 8000ab4 <process_lofi+0x54>)
 8000aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ab2:	bf00      	nop
 8000ab4:	08000afb 	.word	0x08000afb
 8000ab8:	08000ae5 	.word	0x08000ae5
 8000abc:	08000aed 	.word	0x08000aed
 8000ac0:	08000afb 	.word	0x08000afb
 8000ac4:	08000afb 	.word	0x08000afb
 8000ac8:	08000afb 	.word	0x08000afb
 8000acc:	08000afb 	.word	0x08000afb
 8000ad0:	08000afb 	.word	0x08000afb
 8000ad4:	08000afb 	.word	0x08000afb
 8000ad8:	08000afb 	.word	0x08000afb
 8000adc:	08000afb 	.word	0x08000afb
 8000ae0:	08000afb 	.word	0x08000afb
		case 202: // motor1 //
			ble_spd1 = v;
 8000ae4:	4a0d      	ldr	r2, [pc, #52]	; (8000b1c <process_lofi+0xbc>)
 8000ae6:	7afb      	ldrb	r3, [r7, #11]
 8000ae8:	7013      	strb	r3, [r2, #0]
			break;
 8000aea:	e007      	b.n	8000afc <process_lofi+0x9c>
		case 203: // motor2 // fwd
			ble_spd2 = v;
 8000aec:	4a0c      	ldr	r2, [pc, #48]	; (8000b20 <process_lofi+0xc0>)
 8000aee:	7afb      	ldrb	r3, [r7, #11]
 8000af0:	7013      	strb	r3, [r2, #0]
			break;
 8000af2:	e003      	b.n	8000afc <process_lofi+0x9c>
		case 212: // ? 99
			break;
		case 201:  // button A (val 1)
			break;
		default:
			bh2();
 8000af4:	f7ff ffad 	bl	8000a52 <bh2>
			break;
 8000af8:	e000      	b.n	8000afc <process_lofi+0x9c>
			break;
 8000afa:	bf00      	nop
	for (int i=0; i<len; i+=2) {
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	3302      	adds	r3, #2
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	68fa      	ldr	r2, [r7, #12]
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	429a      	cmp	r2, r3
 8000b08:	dbb2      	blt.n	8000a70 <process_lofi+0x10>
		}
	}
	printf("\n");
 8000b0a:	200a      	movs	r0, #10
 8000b0c:	f014 fa9e 	bl	801504c <putchar>
}
 8000b10:	bf00      	nop
 8000b12:	3710      	adds	r7, #16
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	08015eb4 	.word	0x08015eb4
 8000b1c:	20005374 	.word	0x20005374
 8000b20:	20005375 	.word	0x20005375

08000b24 <HAL_UART_TxCpltCallback>:
{
	bh();
}*/

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
	tx_on_progress=0;
 8000b2c:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <HAL_UART_TxCpltCallback+0x1c>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
	//bh();
}
 8000b32:	bf00      	nop
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	20000610 	.word	0x20000610

08000b44 <HAL_UART_TxHalfCpltCallback>:

void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
	//bh();
}
 8000b4c:	bf00      	nop
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <HAL_UART_RxCpltCallback>:

static int num_empty_rx = 0;
volatile int num_rx = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
	rx_on_progress=0;
 8000b60:	4b20      	ldr	r3, [pc, #128]	; (8000be4 <HAL_UART_RxCpltCallback+0x8c>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
	int l = sizeof(buf0) - __HAL_DMA_GET_COUNTER(hdma_uart_rx); // buf0 and buf1 same size
 8000b66:	4b20      	ldr	r3, [pc, #128]	; (8000be8 <HAL_UART_RxCpltCallback+0x90>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	f1c3 0320 	rsb	r3, r3, #32
 8000b72:	617b      	str	r3, [r7, #20]
	at_msg_t m;
	m.numbuf = curbuf;
 8000b74:	4b1d      	ldr	r3, [pc, #116]	; (8000bec <HAL_UART_RxCpltCallback+0x94>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	733b      	strb	r3, [r7, #12]
	m.len = l;
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	737b      	strb	r3, [r7, #13]
	num_rx++;
 8000b80:	4b1b      	ldr	r3, [pc, #108]	; (8000bf0 <HAL_UART_RxCpltCallback+0x98>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	3301      	adds	r3, #1
 8000b86:	4a1a      	ldr	r2, [pc, #104]	; (8000bf0 <HAL_UART_RxCpltCallback+0x98>)
 8000b88:	6013      	str	r3, [r2, #0]
	if (l) {
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d012      	beq.n	8000bb6 <HAL_UART_RxCpltCallback+0x5e>
		curbuf = curbuf ? 0 : 1;
 8000b90:	4b16      	ldr	r3, [pc, #88]	; (8000bec <HAL_UART_RxCpltCallback+0x94>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	bf0c      	ite	eq
 8000b98:	2301      	moveq	r3, #1
 8000b9a:	2300      	movne	r3, #0
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	4b12      	ldr	r3, [pc, #72]	; (8000bec <HAL_UART_RxCpltCallback+0x94>)
 8000ba2:	701a      	strb	r2, [r3, #0]
		osMessageQueuePut(bleRespQ, &m, 0, 0);
 8000ba4:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <HAL_UART_RxCpltCallback+0x9c>)
 8000ba6:	6818      	ldr	r0, [r3, #0]
 8000ba8:	f107 010c 	add.w	r1, r7, #12
 8000bac:	2300      	movs	r3, #0
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f00c faf2 	bl	800d198 <osMessageQueuePut>
 8000bb4:	e004      	b.n	8000bc0 <HAL_UART_RxCpltCallback+0x68>
	} else {
		num_empty_rx++;
 8000bb6:	4b10      	ldr	r3, [pc, #64]	; (8000bf8 <HAL_UART_RxCpltCallback+0xa0>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	4a0e      	ldr	r2, [pc, #56]	; (8000bf8 <HAL_UART_RxCpltCallback+0xa0>)
 8000bbe:	6013      	str	r3, [r2, #0]
	}
	uint8_t *newbuf = curbuf ? buf1 : buf0;
 8000bc0:	4b0a      	ldr	r3, [pc, #40]	; (8000bec <HAL_UART_RxCpltCallback+0x94>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <HAL_UART_RxCpltCallback+0x74>
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <HAL_UART_RxCpltCallback+0xa4>)
 8000bca:	e000      	b.n	8000bce <HAL_UART_RxCpltCallback+0x76>
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <HAL_UART_RxCpltCallback+0xa8>)
 8000bce:	613b      	str	r3, [r7, #16]

	HAL_UART_Receive_DMA(huart, newbuf, sizeof(buf0));
 8000bd0:	2220      	movs	r2, #32
 8000bd2:	6939      	ldr	r1, [r7, #16]
 8000bd4:	6878      	ldr	r0, [r7, #4]
 8000bd6:	f008 faed 	bl	80091b4 <HAL_UART_Receive_DMA>
	//__HAL_UART_ENABLE_IT(huart, UART_IT_IDLE );
	//__HAL_DMA_ENABLE_IT(hdma_uart_rx, DMA_IT_TC /*|DMA_IT_HT*/);
}
 8000bda:	bf00      	nop
 8000bdc:	3718      	adds	r7, #24
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20000614 	.word	0x20000614
 8000be8:	20000604 	.word	0x20000604
 8000bec:	20000658 	.word	0x20000658
 8000bf0:	20000668 	.word	0x20000668
 8000bf4:	2000060c 	.word	0x2000060c
 8000bf8:	20000664 	.word	0x20000664
 8000bfc:	20000638 	.word	0x20000638
 8000c00:	20000618 	.word	0x20000618

08000c04 <HAL_UART_RxHalfCpltCallback>:
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
	//bh();
}
 8000c0c:	bf00      	nop
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
	bh();
 8000c20:	f7ff ff10 	bl	8000a44 <bh>
}
 8000c24:	bf00      	nop
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c30:	f001 fc20 	bl	8002474 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c34:	f000 f87a 	bl	8000d2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c38:	f000 fdce 	bl	80017d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c3c:	f000 fd8e 	bl	800175c <MX_DMA_Init>
  MX_ADC1_Init();
 8000c40:	f000 f8f6 	bl	8000e30 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000c44:	f000 fa0e 	bl	8001064 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000c48:	f000 fa6a 	bl	8001120 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000c4c:	f000 fb2c 	bl	80012a8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000c50:	f000 fbc2 	bl	80013d8 <MX_TIM3_Init>
  MX_RTC_Init();
 8000c54:	f000 fa34 	bl	80010c0 <MX_RTC_Init>
  MX_UART4_Init();
 8000c58:	f000 fd56 	bl	8001708 <MX_UART4_Init>
  MX_TIM4_Init();
 8000c5c:	f000 fc54 	bl	8001508 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000c60:	f000 fcea 	bl	8001638 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c64:	f00c f8d4 	bl	800ce10 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of bleRespQueue */
  bleRespQueueHandle = osMessageQueueNew (16, sizeof(at_msg_t), &bleRespQueue_attributes);
 8000c68:	4a1d      	ldr	r2, [pc, #116]	; (8000ce0 <main+0xb4>)
 8000c6a:	2102      	movs	r1, #2
 8000c6c:	2010      	movs	r0, #16
 8000c6e:	f00c fa0d 	bl	800d08c <osMessageQueueNew>
 8000c72:	4602      	mov	r2, r0
 8000c74:	4b1b      	ldr	r3, [pc, #108]	; (8000ce4 <main+0xb8>)
 8000c76:	601a      	str	r2, [r3, #0]

  /* creation of frameQueue */
  frameQueueHandle = osMessageQueueNew (48, sizeof(frame_msg_t), &frameQueue_attributes);
 8000c78:	4a1b      	ldr	r2, [pc, #108]	; (8000ce8 <main+0xbc>)
 8000c7a:	2121      	movs	r1, #33	; 0x21
 8000c7c:	2030      	movs	r0, #48	; 0x30
 8000c7e:	f00c fa05 	bl	800d08c <osMessageQueueNew>
 8000c82:	4602      	mov	r2, r0
 8000c84:	4b19      	ldr	r3, [pc, #100]	; (8000cec <main+0xc0>)
 8000c86:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000c88:	4a19      	ldr	r2, [pc, #100]	; (8000cf0 <main+0xc4>)
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	4819      	ldr	r0, [pc, #100]	; (8000cf4 <main+0xc8>)
 8000c8e:	f00c f929 	bl	800cee4 <osThreadNew>
 8000c92:	4602      	mov	r2, r0
 8000c94:	4b18      	ldr	r3, [pc, #96]	; (8000cf8 <main+0xcc>)
 8000c96:	601a      	str	r2, [r3, #0]

  /* creation of taskBLE */
  taskBLEHandle = osThreadNew(StartTaskBLE, NULL, &taskBLE_attributes);
 8000c98:	4a18      	ldr	r2, [pc, #96]	; (8000cfc <main+0xd0>)
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	4818      	ldr	r0, [pc, #96]	; (8000d00 <main+0xd4>)
 8000c9e:	f00c f921 	bl	800cee4 <osThreadNew>
 8000ca2:	4602      	mov	r2, r0
 8000ca4:	4b17      	ldr	r3, [pc, #92]	; (8000d04 <main+0xd8>)
 8000ca6:	601a      	str	r2, [r3, #0]

  /* creation of ctrlTask */
  ctrlTaskHandle = osThreadNew(StartCtrlTask, NULL, &ctrlTask_attributes);
 8000ca8:	4a17      	ldr	r2, [pc, #92]	; (8000d08 <main+0xdc>)
 8000caa:	2100      	movs	r1, #0
 8000cac:	4817      	ldr	r0, [pc, #92]	; (8000d0c <main+0xe0>)
 8000cae:	f00c f919 	bl	800cee4 <osThreadNew>
 8000cb2:	4602      	mov	r2, r0
 8000cb4:	4b16      	ldr	r3, [pc, #88]	; (8000d10 <main+0xe4>)
 8000cb6:	601a      	str	r2, [r3, #0]

  /* creation of txrxFrameTask */
  txrxFrameTaskHandle = osThreadNew(StartTxRxFrameTask, NULL, &txrxFrameTask_attributes);
 8000cb8:	4a16      	ldr	r2, [pc, #88]	; (8000d14 <main+0xe8>)
 8000cba:	2100      	movs	r1, #0
 8000cbc:	4816      	ldr	r0, [pc, #88]	; (8000d18 <main+0xec>)
 8000cbe:	f00c f911 	bl	800cee4 <osThreadNew>
 8000cc2:	4602      	mov	r2, r0
 8000cc4:	4b15      	ldr	r3, [pc, #84]	; (8000d1c <main+0xf0>)
 8000cc6:	601a      	str	r2, [r3, #0]

  /* creation of taskAuto */
  taskAutoHandle = osThreadNew(StartTaskAuto, NULL, &taskAuto_attributes);
 8000cc8:	4a15      	ldr	r2, [pc, #84]	; (8000d20 <main+0xf4>)
 8000cca:	2100      	movs	r1, #0
 8000ccc:	4815      	ldr	r0, [pc, #84]	; (8000d24 <main+0xf8>)
 8000cce:	f00c f909 	bl	800cee4 <osThreadNew>
 8000cd2:	4602      	mov	r2, r0
 8000cd4:	4b14      	ldr	r3, [pc, #80]	; (8000d28 <main+0xfc>)
 8000cd6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000cd8:	f00c f8ce 	bl	800ce78 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <main+0xb0>
 8000cde:	bf00      	nop
 8000ce0:	080162ec 	.word	0x080162ec
 8000ce4:	20006840 	.word	0x20006840
 8000ce8:	08016304 	.word	0x08016304
 8000cec:	20005eec 	.word	0x20005eec
 8000cf0:	08016238 	.word	0x08016238
 8000cf4:	0800199d 	.word	0x0800199d
 8000cf8:	200057dc 	.word	0x200057dc
 8000cfc:	0801625c 	.word	0x0801625c
 8000d00:	080019b5 	.word	0x080019b5
 8000d04:	20005378 	.word	0x20005378
 8000d08:	08016280 	.word	0x08016280
 8000d0c:	080019e5 	.word	0x080019e5
 8000d10:	200063d4 	.word	0x200063d4
 8000d14:	080162a4 	.word	0x080162a4
 8000d18:	08014ba9 	.word	0x08014ba9
 8000d1c:	20006f64 	.word	0x20006f64
 8000d20:	080162c8 	.word	0x080162c8
 8000d24:	08014319 	.word	0x08014319
 8000d28:	20006900 	.word	0x20006900

08000d2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b098      	sub	sp, #96	; 0x60
 8000d30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d32:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d36:	2230      	movs	r2, #48	; 0x30
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f014 f8be 	bl	8014ebc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d40:	f107 031c 	add.w	r3, r7, #28
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d50:	f107 030c 	add.w	r3, r7, #12
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	4b31      	ldr	r3, [pc, #196]	; (8000e28 <SystemClock_Config+0xfc>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d66:	4a30      	ldr	r2, [pc, #192]	; (8000e28 <SystemClock_Config+0xfc>)
 8000d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d6e:	4b2e      	ldr	r3, [pc, #184]	; (8000e28 <SystemClock_Config+0xfc>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d76:	60bb      	str	r3, [r7, #8]
 8000d78:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	607b      	str	r3, [r7, #4]
 8000d7e:	4b2b      	ldr	r3, [pc, #172]	; (8000e2c <SystemClock_Config+0x100>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a2a      	ldr	r2, [pc, #168]	; (8000e2c <SystemClock_Config+0x100>)
 8000d84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d88:	6013      	str	r3, [r2, #0]
 8000d8a:	4b28      	ldr	r3, [pc, #160]	; (8000e2c <SystemClock_Config+0x100>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000d96:	2305      	movs	r3, #5
 8000d98:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d9e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000da0:	2301      	movs	r3, #1
 8000da2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000da4:	2302      	movs	r3, #2
 8000da6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000da8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dac:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000dae:	2304      	movs	r3, #4
 8000db0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000db2:	2360      	movs	r3, #96	; 0x60
 8000db4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000db6:	2302      	movs	r3, #2
 8000db8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000dba:	2304      	movs	r3, #4
 8000dbc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dbe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f006 f994 	bl	80070f0 <HAL_RCC_OscConfig>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000dce:	f000 fe55 	bl	8001a7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dd2:	230f      	movs	r3, #15
 8000dd4:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000dde:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000de2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 8000de4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000de8:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000dea:	f107 031c 	add.w	r3, r7, #28
 8000dee:	2103      	movs	r1, #3
 8000df0:	4618      	mov	r0, r3
 8000df2:	f006 fbed 	bl	80075d0 <HAL_RCC_ClockConfig>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000dfc:	f000 fe3e 	bl	8001a7c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000e00:	2302      	movs	r3, #2
 8000e02:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000e04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e08:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e0a:	f107 030c 	add.w	r3, r7, #12
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f006 fe02 	bl	8007a18 <HAL_RCCEx_PeriphCLKConfig>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000e1a:	f000 fe2f 	bl	8001a7c <Error_Handler>
  }
}
 8000e1e:	bf00      	nop
 8000e20:	3760      	adds	r7, #96	; 0x60
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	40007000 	.word	0x40007000

08000e30 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e36:	463b      	mov	r3, r7
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e42:	4b86      	ldr	r3, [pc, #536]	; (800105c <MX_ADC1_Init+0x22c>)
 8000e44:	4a86      	ldr	r2, [pc, #536]	; (8001060 <MX_ADC1_Init+0x230>)
 8000e46:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e48:	4b84      	ldr	r3, [pc, #528]	; (800105c <MX_ADC1_Init+0x22c>)
 8000e4a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e4e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e50:	4b82      	ldr	r3, [pc, #520]	; (800105c <MX_ADC1_Init+0x22c>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000e56:	4b81      	ldr	r3, [pc, #516]	; (800105c <MX_ADC1_Init+0x22c>)
 8000e58:	2201      	movs	r2, #1
 8000e5a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e5c:	4b7f      	ldr	r3, [pc, #508]	; (800105c <MX_ADC1_Init+0x22c>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e62:	4b7e      	ldr	r3, [pc, #504]	; (800105c <MX_ADC1_Init+0x22c>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000e6a:	4b7c      	ldr	r3, [pc, #496]	; (800105c <MX_ADC1_Init+0x22c>)
 8000e6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e70:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8000e72:	4b7a      	ldr	r3, [pc, #488]	; (800105c <MX_ADC1_Init+0x22c>)
 8000e74:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8000e78:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e7a:	4b78      	ldr	r3, [pc, #480]	; (800105c <MX_ADC1_Init+0x22c>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 15;
 8000e80:	4b76      	ldr	r3, [pc, #472]	; (800105c <MX_ADC1_Init+0x22c>)
 8000e82:	220f      	movs	r2, #15
 8000e84:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000e86:	4b75      	ldr	r3, [pc, #468]	; (800105c <MX_ADC1_Init+0x22c>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e8e:	4b73      	ldr	r3, [pc, #460]	; (800105c <MX_ADC1_Init+0x22c>)
 8000e90:	2201      	movs	r2, #1
 8000e92:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e94:	4871      	ldr	r0, [pc, #452]	; (800105c <MX_ADC1_Init+0x22c>)
 8000e96:	f001 fb51 	bl	800253c <HAL_ADC_Init>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000ea0:	f000 fdec 	bl	8001a7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000eac:	2302      	movs	r3, #2
 8000eae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eb0:	463b      	mov	r3, r7
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4869      	ldr	r0, [pc, #420]	; (800105c <MX_ADC1_Init+0x22c>)
 8000eb6:	f001 fc77 	bl	80027a8 <HAL_ADC_ConfigChannel>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000ec0:	f000 fddc 	bl	8001a7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ecc:	463b      	mov	r3, r7
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4862      	ldr	r0, [pc, #392]	; (800105c <MX_ADC1_Init+0x22c>)
 8000ed2:	f001 fc69 	bl	80027a8 <HAL_ADC_ConfigChannel>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000edc:	f000 fdce 	bl	8001a7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ee8:	463b      	mov	r3, r7
 8000eea:	4619      	mov	r1, r3
 8000eec:	485b      	ldr	r0, [pc, #364]	; (800105c <MX_ADC1_Init+0x22c>)
 8000eee:	f001 fc5b 	bl	80027a8 <HAL_ADC_ConfigChannel>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8000ef8:	f000 fdc0 	bl	8001a7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000efc:	2303      	movs	r3, #3
 8000efe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000f00:	2304      	movs	r3, #4
 8000f02:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f04:	2300      	movs	r3, #0
 8000f06:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f08:	463b      	mov	r3, r7
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4853      	ldr	r0, [pc, #332]	; (800105c <MX_ADC1_Init+0x22c>)
 8000f0e:	f001 fc4b 	bl	80027a8 <HAL_ADC_ConfigChannel>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8000f18:	f000 fdb0 	bl	8001a7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000f1c:	2304      	movs	r3, #4
 8000f1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000f20:	2305      	movs	r3, #5
 8000f22:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000f24:	2302      	movs	r3, #2
 8000f26:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f28:	463b      	mov	r3, r7
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	484b      	ldr	r0, [pc, #300]	; (800105c <MX_ADC1_Init+0x22c>)
 8000f2e:	f001 fc3b 	bl	80027a8 <HAL_ADC_ConfigChannel>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 8000f38:	f000 fda0 	bl	8001a7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000f3c:	2305      	movs	r3, #5
 8000f3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000f40:	2306      	movs	r3, #6
 8000f42:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f44:	463b      	mov	r3, r7
 8000f46:	4619      	mov	r1, r3
 8000f48:	4844      	ldr	r0, [pc, #272]	; (800105c <MX_ADC1_Init+0x22c>)
 8000f4a:	f001 fc2d 	bl	80027a8 <HAL_ADC_ConfigChannel>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_ADC1_Init+0x128>
  {
    Error_Handler();
 8000f54:	f000 fd92 	bl	8001a7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000f58:	2307      	movs	r3, #7
 8000f5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8000f5c:	2307      	movs	r3, #7
 8000f5e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f60:	463b      	mov	r3, r7
 8000f62:	4619      	mov	r1, r3
 8000f64:	483d      	ldr	r0, [pc, #244]	; (800105c <MX_ADC1_Init+0x22c>)
 8000f66:	f001 fc1f 	bl	80027a8 <HAL_ADC_ConfigChannel>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_ADC1_Init+0x144>
  {
    Error_Handler();
 8000f70:	f000 fd84 	bl	8001a7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000f74:	2308      	movs	r3, #8
 8000f76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8000f78:	2308      	movs	r3, #8
 8000f7a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f7c:	463b      	mov	r3, r7
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4836      	ldr	r0, [pc, #216]	; (800105c <MX_ADC1_Init+0x22c>)
 8000f82:	f001 fc11 	bl	80027a8 <HAL_ADC_ConfigChannel>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_ADC1_Init+0x160>
  {
    Error_Handler();
 8000f8c:	f000 fd76 	bl	8001a7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000f90:	2309      	movs	r3, #9
 8000f92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8000f94:	2309      	movs	r3, #9
 8000f96:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f98:	463b      	mov	r3, r7
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	482f      	ldr	r0, [pc, #188]	; (800105c <MX_ADC1_Init+0x22c>)
 8000f9e:	f001 fc03 	bl	80027a8 <HAL_ADC_ConfigChannel>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_ADC1_Init+0x17c>
  {
    Error_Handler();
 8000fa8:	f000 fd68 	bl	8001a7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000fac:	230a      	movs	r3, #10
 8000fae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8000fb0:	230a      	movs	r3, #10
 8000fb2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fb4:	463b      	mov	r3, r7
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4828      	ldr	r0, [pc, #160]	; (800105c <MX_ADC1_Init+0x22c>)
 8000fba:	f001 fbf5 	bl	80027a8 <HAL_ADC_ConfigChannel>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_ADC1_Init+0x198>
  {
    Error_Handler();
 8000fc4:	f000 fd5a 	bl	8001a7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000fc8:	230b      	movs	r3, #11
 8000fca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8000fcc:	230b      	movs	r3, #11
 8000fce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fd0:	463b      	mov	r3, r7
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4821      	ldr	r0, [pc, #132]	; (800105c <MX_ADC1_Init+0x22c>)
 8000fd6:	f001 fbe7 	bl	80027a8 <HAL_ADC_ConfigChannel>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_ADC1_Init+0x1b4>
  {
    Error_Handler();
 8000fe0:	f000 fd4c 	bl	8001a7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000fe4:	230c      	movs	r3, #12
 8000fe6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8000fe8:	230c      	movs	r3, #12
 8000fea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fec:	463b      	mov	r3, r7
 8000fee:	4619      	mov	r1, r3
 8000ff0:	481a      	ldr	r0, [pc, #104]	; (800105c <MX_ADC1_Init+0x22c>)
 8000ff2:	f001 fbd9 	bl	80027a8 <HAL_ADC_ConfigChannel>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_ADC1_Init+0x1d0>
  {
    Error_Handler();
 8000ffc:	f000 fd3e 	bl	8001a7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001000:	230d      	movs	r3, #13
 8001002:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8001004:	230d      	movs	r3, #13
 8001006:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001008:	463b      	mov	r3, r7
 800100a:	4619      	mov	r1, r3
 800100c:	4813      	ldr	r0, [pc, #76]	; (800105c <MX_ADC1_Init+0x22c>)
 800100e:	f001 fbcb 	bl	80027a8 <HAL_ADC_ConfigChannel>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_ADC1_Init+0x1ec>
  {
    Error_Handler();
 8001018:	f000 fd30 	bl	8001a7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800101c:	230e      	movs	r3, #14
 800101e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8001020:	230e      	movs	r3, #14
 8001022:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001024:	463b      	mov	r3, r7
 8001026:	4619      	mov	r1, r3
 8001028:	480c      	ldr	r0, [pc, #48]	; (800105c <MX_ADC1_Init+0x22c>)
 800102a:	f001 fbbd 	bl	80027a8 <HAL_ADC_ConfigChannel>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_ADC1_Init+0x208>
  {
    Error_Handler();
 8001034:	f000 fd22 	bl	8001a7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001038:	230f      	movs	r3, #15
 800103a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 15;
 800103c:	230f      	movs	r3, #15
 800103e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001040:	463b      	mov	r3, r7
 8001042:	4619      	mov	r1, r3
 8001044:	4805      	ldr	r0, [pc, #20]	; (800105c <MX_ADC1_Init+0x22c>)
 8001046:	f001 fbaf 	bl	80027a8 <HAL_ADC_ConfigChannel>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_ADC1_Init+0x224>
  {
    Error_Handler();
 8001050:	f000 fd14 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001054:	bf00      	nop
 8001056:	3710      	adds	r7, #16
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	200063f8 	.word	0x200063f8
 8001060:	40012000 	.word	0x40012000

08001064 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001068:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <MX_I2C1_Init+0x50>)
 800106a:	4a13      	ldr	r2, [pc, #76]	; (80010b8 <MX_I2C1_Init+0x54>)
 800106c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800106e:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <MX_I2C1_Init+0x50>)
 8001070:	4a12      	ldr	r2, [pc, #72]	; (80010bc <MX_I2C1_Init+0x58>)
 8001072:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001074:	4b0f      	ldr	r3, [pc, #60]	; (80010b4 <MX_I2C1_Init+0x50>)
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800107a:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <MX_I2C1_Init+0x50>)
 800107c:	2200      	movs	r2, #0
 800107e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001080:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <MX_I2C1_Init+0x50>)
 8001082:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001086:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001088:	4b0a      	ldr	r3, [pc, #40]	; (80010b4 <MX_I2C1_Init+0x50>)
 800108a:	2200      	movs	r2, #0
 800108c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800108e:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <MX_I2C1_Init+0x50>)
 8001090:	2200      	movs	r2, #0
 8001092:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001094:	4b07      	ldr	r3, [pc, #28]	; (80010b4 <MX_I2C1_Init+0x50>)
 8001096:	2200      	movs	r2, #0
 8001098:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800109a:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <MX_I2C1_Init+0x50>)
 800109c:	2200      	movs	r2, #0
 800109e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010a0:	4804      	ldr	r0, [pc, #16]	; (80010b4 <MX_I2C1_Init+0x50>)
 80010a2:	f002 fc6f 	bl	8003984 <HAL_I2C_Init>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010ac:	f000 fce6 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20005ef0 	.word	0x20005ef0
 80010b8:	40005400 	.word	0x40005400
 80010bc:	00061a80 	.word	0x00061a80

080010c0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80010d4:	2300      	movs	r3, #0
 80010d6:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80010d8:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <MX_RTC_Init+0x58>)
 80010da:	4a10      	ldr	r2, [pc, #64]	; (800111c <MX_RTC_Init+0x5c>)
 80010dc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80010de:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <MX_RTC_Init+0x58>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80010e4:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <MX_RTC_Init+0x58>)
 80010e6:	227f      	movs	r2, #127	; 0x7f
 80010e8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80010ea:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <MX_RTC_Init+0x58>)
 80010ec:	22ff      	movs	r2, #255	; 0xff
 80010ee:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80010f0:	4b09      	ldr	r3, [pc, #36]	; (8001118 <MX_RTC_Init+0x58>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80010f6:	4b08      	ldr	r3, [pc, #32]	; (8001118 <MX_RTC_Init+0x58>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <MX_RTC_Init+0x58>)
 80010fe:	2200      	movs	r2, #0
 8001100:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001102:	4805      	ldr	r0, [pc, #20]	; (8001118 <MX_RTC_Init+0x58>)
 8001104:	f006 fd6a 	bl	8007bdc <HAL_RTC_Init>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800110e:	f000 fcb5 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20006904 	.word	0x20006904
 800111c:	40002800 	.word	0x40002800

08001120 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b096      	sub	sp, #88	; 0x58
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001126:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]
 8001132:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001134:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800113e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	60da      	str	r2, [r3, #12]
 800114c:	611a      	str	r2, [r3, #16]
 800114e:	615a      	str	r2, [r3, #20]
 8001150:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	2220      	movs	r2, #32
 8001156:	2100      	movs	r1, #0
 8001158:	4618      	mov	r0, r3
 800115a:	f013 feaf 	bl	8014ebc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800115e:	4b50      	ldr	r3, [pc, #320]	; (80012a0 <MX_TIM1_Init+0x180>)
 8001160:	4a50      	ldr	r2, [pc, #320]	; (80012a4 <MX_TIM1_Init+0x184>)
 8001162:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1199;
 8001164:	4b4e      	ldr	r3, [pc, #312]	; (80012a0 <MX_TIM1_Init+0x180>)
 8001166:	f240 42af 	movw	r2, #1199	; 0x4af
 800116a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 800116c:	4b4c      	ldr	r3, [pc, #304]	; (80012a0 <MX_TIM1_Init+0x180>)
 800116e:	2260      	movs	r2, #96	; 0x60
 8001170:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 200;
 8001172:	4b4b      	ldr	r3, [pc, #300]	; (80012a0 <MX_TIM1_Init+0x180>)
 8001174:	22c8      	movs	r2, #200	; 0xc8
 8001176:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001178:	4b49      	ldr	r3, [pc, #292]	; (80012a0 <MX_TIM1_Init+0x180>)
 800117a:	2200      	movs	r2, #0
 800117c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800117e:	4b48      	ldr	r3, [pc, #288]	; (80012a0 <MX_TIM1_Init+0x180>)
 8001180:	2200      	movs	r2, #0
 8001182:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001184:	4b46      	ldr	r3, [pc, #280]	; (80012a0 <MX_TIM1_Init+0x180>)
 8001186:	2280      	movs	r2, #128	; 0x80
 8001188:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800118a:	4845      	ldr	r0, [pc, #276]	; (80012a0 <MX_TIM1_Init+0x180>)
 800118c:	f006 fed6 	bl	8007f3c <HAL_TIM_Base_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001196:	f000 fc71 	bl	8001a7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800119a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800119e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011a0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011a4:	4619      	mov	r1, r3
 80011a6:	483e      	ldr	r0, [pc, #248]	; (80012a0 <MX_TIM1_Init+0x180>)
 80011a8:	f007 f9b0 	bl	800850c <HAL_TIM_ConfigClockSource>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80011b2:	f000 fc63 	bl	8001a7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011b6:	483a      	ldr	r0, [pc, #232]	; (80012a0 <MX_TIM1_Init+0x180>)
 80011b8:	f006 ff0f 	bl	8007fda <HAL_TIM_PWM_Init>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80011c2:	f000 fc5b 	bl	8001a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80011c6:	2320      	movs	r3, #32
 80011c8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80011ca:	2380      	movs	r3, #128	; 0x80
 80011cc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011d2:	4619      	mov	r1, r3
 80011d4:	4832      	ldr	r0, [pc, #200]	; (80012a0 <MX_TIM1_Init+0x180>)
 80011d6:	f007 fe51 	bl	8008e7c <HAL_TIMEx_MasterConfigSynchronization>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80011e0:	f000 fc4c 	bl	8001a7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011e4:	2360      	movs	r3, #96	; 0x60
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011ec:	2300      	movs	r3, #0
 80011ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011f0:	2300      	movs	r3, #0
 80011f2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011f4:	2300      	movs	r3, #0
 80011f6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011f8:	2300      	movs	r3, #0
 80011fa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011fc:	2300      	movs	r3, #0
 80011fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001200:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001204:	2200      	movs	r2, #0
 8001206:	4619      	mov	r1, r3
 8001208:	4825      	ldr	r0, [pc, #148]	; (80012a0 <MX_TIM1_Init+0x180>)
 800120a:	f007 f8b9 	bl	8008380 <HAL_TIM_PWM_ConfigChannel>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001214:	f000 fc32 	bl	8001a7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001218:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800121c:	2204      	movs	r2, #4
 800121e:	4619      	mov	r1, r3
 8001220:	481f      	ldr	r0, [pc, #124]	; (80012a0 <MX_TIM1_Init+0x180>)
 8001222:	f007 f8ad 	bl	8008380 <HAL_TIM_PWM_ConfigChannel>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800122c:	f000 fc26 	bl	8001a7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001230:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001234:	2208      	movs	r2, #8
 8001236:	4619      	mov	r1, r3
 8001238:	4819      	ldr	r0, [pc, #100]	; (80012a0 <MX_TIM1_Init+0x180>)
 800123a:	f007 f8a1 	bl	8008380 <HAL_TIM_PWM_ConfigChannel>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001244:	f000 fc1a 	bl	8001a7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001248:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800124c:	220c      	movs	r2, #12
 800124e:	4619      	mov	r1, r3
 8001250:	4813      	ldr	r0, [pc, #76]	; (80012a0 <MX_TIM1_Init+0x180>)
 8001252:	f007 f895 	bl	8008380 <HAL_TIM_PWM_ConfigChannel>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 800125c:	f000 fc0e 	bl	8001a7c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001260:	2300      	movs	r3, #0
 8001262:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001264:	2300      	movs	r3, #0
 8001266:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001268:	2300      	movs	r3, #0
 800126a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001270:	2300      	movs	r3, #0
 8001272:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001274:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001278:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800127a:	2300      	movs	r3, #0
 800127c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800127e:	1d3b      	adds	r3, r7, #4
 8001280:	4619      	mov	r1, r3
 8001282:	4807      	ldr	r0, [pc, #28]	; (80012a0 <MX_TIM1_Init+0x180>)
 8001284:	f007 fe76 	bl	8008f74 <HAL_TIMEx_ConfigBreakDeadTime>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 800128e:	f000 fbf5 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001292:	4803      	ldr	r0, [pc, #12]	; (80012a0 <MX_TIM1_Init+0x180>)
 8001294:	f000 fdc6 	bl	8001e24 <HAL_TIM_MspPostInit>

}
 8001298:	bf00      	nop
 800129a:	3758      	adds	r7, #88	; 0x58
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20006d24 	.word	0x20006d24
 80012a4:	40010000 	.word	0x40010000

080012a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b092      	sub	sp, #72	; 0x48
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]
 80012ba:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80012bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012cc:	f107 031c 	add.w	r3, r7, #28
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012d6:	463b      	mov	r3, r7
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]
 80012e4:	615a      	str	r2, [r3, #20]
 80012e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012e8:	4b3a      	ldr	r3, [pc, #232]	; (80013d4 <MX_TIM2_Init+0x12c>)
 80012ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1199;
 80012f0:	4b38      	ldr	r3, [pc, #224]	; (80013d4 <MX_TIM2_Init+0x12c>)
 80012f2:	f240 42af 	movw	r2, #1199	; 0x4af
 80012f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 80012f8:	4b36      	ldr	r3, [pc, #216]	; (80013d4 <MX_TIM2_Init+0x12c>)
 80012fa:	2260      	movs	r2, #96	; 0x60
 80012fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200;
 80012fe:	4b35      	ldr	r3, [pc, #212]	; (80013d4 <MX_TIM2_Init+0x12c>)
 8001300:	22c8      	movs	r2, #200	; 0xc8
 8001302:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001304:	4b33      	ldr	r3, [pc, #204]	; (80013d4 <MX_TIM2_Init+0x12c>)
 8001306:	2200      	movs	r2, #0
 8001308:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800130a:	4b32      	ldr	r3, [pc, #200]	; (80013d4 <MX_TIM2_Init+0x12c>)
 800130c:	2280      	movs	r2, #128	; 0x80
 800130e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001310:	4830      	ldr	r0, [pc, #192]	; (80013d4 <MX_TIM2_Init+0x12c>)
 8001312:	f006 fe13 	bl	8007f3c <HAL_TIM_Base_Init>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800131c:	f000 fbae 	bl	8001a7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001320:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001324:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001326:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800132a:	4619      	mov	r1, r3
 800132c:	4829      	ldr	r0, [pc, #164]	; (80013d4 <MX_TIM2_Init+0x12c>)
 800132e:	f007 f8ed 	bl	800850c <HAL_TIM_ConfigClockSource>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001338:	f000 fba0 	bl	8001a7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800133c:	4825      	ldr	r0, [pc, #148]	; (80013d4 <MX_TIM2_Init+0x12c>)
 800133e:	f006 fe4c 	bl	8007fda <HAL_TIM_PWM_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8001348:	f000 fb98 	bl	8001a7c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800134c:	2304      	movs	r3, #4
 800134e:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001350:	2300      	movs	r3, #0
 8001352:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001354:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001358:	4619      	mov	r1, r3
 800135a:	481e      	ldr	r0, [pc, #120]	; (80013d4 <MX_TIM2_Init+0x12c>)
 800135c:	f007 f98d 	bl	800867a <HAL_TIM_SlaveConfigSynchro>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 8001366:	f000 fb89 	bl	8001a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800136a:	2300      	movs	r3, #0
 800136c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800136e:	2300      	movs	r3, #0
 8001370:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001372:	f107 031c 	add.w	r3, r7, #28
 8001376:	4619      	mov	r1, r3
 8001378:	4816      	ldr	r0, [pc, #88]	; (80013d4 <MX_TIM2_Init+0x12c>)
 800137a:	f007 fd7f 	bl	8008e7c <HAL_TIMEx_MasterConfigSynchronization>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8001384:	f000 fb7a 	bl	8001a7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001388:	2360      	movs	r3, #96	; 0x60
 800138a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800138c:	2300      	movs	r3, #0
 800138e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001390:	2300      	movs	r3, #0
 8001392:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001394:	2300      	movs	r3, #0
 8001396:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001398:	463b      	mov	r3, r7
 800139a:	2208      	movs	r2, #8
 800139c:	4619      	mov	r1, r3
 800139e:	480d      	ldr	r0, [pc, #52]	; (80013d4 <MX_TIM2_Init+0x12c>)
 80013a0:	f006 ffee 	bl	8008380 <HAL_TIM_PWM_ConfigChannel>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 80013aa:	f000 fb67 	bl	8001a7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013ae:	463b      	mov	r3, r7
 80013b0:	220c      	movs	r2, #12
 80013b2:	4619      	mov	r1, r3
 80013b4:	4807      	ldr	r0, [pc, #28]	; (80013d4 <MX_TIM2_Init+0x12c>)
 80013b6:	f006 ffe3 	bl	8008380 <HAL_TIM_PWM_ConfigChannel>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 80013c0:	f000 fb5c 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80013c4:	4803      	ldr	r0, [pc, #12]	; (80013d4 <MX_TIM2_Init+0x12c>)
 80013c6:	f000 fd2d 	bl	8001e24 <HAL_TIM_MspPostInit>

}
 80013ca:	bf00      	nop
 80013cc:	3748      	adds	r7, #72	; 0x48
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	200070bc 	.word	0x200070bc

080013d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b092      	sub	sp, #72	; 0x48
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]
 80013e8:	609a      	str	r2, [r3, #8]
 80013ea:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80013ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013fc:	f107 031c 	add.w	r3, r7, #28
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001406:	463b      	mov	r3, r7
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
 8001414:	615a      	str	r2, [r3, #20]
 8001416:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001418:	4b39      	ldr	r3, [pc, #228]	; (8001500 <MX_TIM3_Init+0x128>)
 800141a:	4a3a      	ldr	r2, [pc, #232]	; (8001504 <MX_TIM3_Init+0x12c>)
 800141c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800141e:	4b38      	ldr	r3, [pc, #224]	; (8001500 <MX_TIM3_Init+0x128>)
 8001420:	2200      	movs	r2, #0
 8001422:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001424:	4b36      	ldr	r3, [pc, #216]	; (8001500 <MX_TIM3_Init+0x128>)
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800142a:	4b35      	ldr	r3, [pc, #212]	; (8001500 <MX_TIM3_Init+0x128>)
 800142c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001430:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001432:	4b33      	ldr	r3, [pc, #204]	; (8001500 <MX_TIM3_Init+0x128>)
 8001434:	2200      	movs	r2, #0
 8001436:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001438:	4b31      	ldr	r3, [pc, #196]	; (8001500 <MX_TIM3_Init+0x128>)
 800143a:	2200      	movs	r2, #0
 800143c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800143e:	4830      	ldr	r0, [pc, #192]	; (8001500 <MX_TIM3_Init+0x128>)
 8001440:	f006 fd7c 	bl	8007f3c <HAL_TIM_Base_Init>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800144a:	f000 fb17 	bl	8001a7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800144e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001452:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001454:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001458:	4619      	mov	r1, r3
 800145a:	4829      	ldr	r0, [pc, #164]	; (8001500 <MX_TIM3_Init+0x128>)
 800145c:	f007 f856 	bl	800850c <HAL_TIM_ConfigClockSource>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001466:	f000 fb09 	bl	8001a7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800146a:	4825      	ldr	r0, [pc, #148]	; (8001500 <MX_TIM3_Init+0x128>)
 800146c:	f006 fdb5 	bl	8007fda <HAL_TIM_PWM_Init>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 8001476:	f000 fb01 	bl	8001a7c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800147a:	2304      	movs	r3, #4
 800147c:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800147e:	2300      	movs	r3, #0
 8001480:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001486:	4619      	mov	r1, r3
 8001488:	481d      	ldr	r0, [pc, #116]	; (8001500 <MX_TIM3_Init+0x128>)
 800148a:	f007 f8f6 	bl	800867a <HAL_TIM_SlaveConfigSynchro>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 8001494:	f000 faf2 	bl	8001a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001498:	2300      	movs	r3, #0
 800149a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800149c:	2300      	movs	r3, #0
 800149e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014a0:	f107 031c 	add.w	r3, r7, #28
 80014a4:	4619      	mov	r1, r3
 80014a6:	4816      	ldr	r0, [pc, #88]	; (8001500 <MX_TIM3_Init+0x128>)
 80014a8:	f007 fce8 	bl	8008e7c <HAL_TIMEx_MasterConfigSynchronization>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 80014b2:	f000 fae3 	bl	8001a7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014b6:	2360      	movs	r3, #96	; 0x60
 80014b8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014be:	2300      	movs	r3, #0
 80014c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014c2:	2300      	movs	r3, #0
 80014c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014c6:	463b      	mov	r3, r7
 80014c8:	2200      	movs	r2, #0
 80014ca:	4619      	mov	r1, r3
 80014cc:	480c      	ldr	r0, [pc, #48]	; (8001500 <MX_TIM3_Init+0x128>)
 80014ce:	f006 ff57 	bl	8008380 <HAL_TIM_PWM_ConfigChannel>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 80014d8:	f000 fad0 	bl	8001a7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014dc:	463b      	mov	r3, r7
 80014de:	2204      	movs	r2, #4
 80014e0:	4619      	mov	r1, r3
 80014e2:	4807      	ldr	r0, [pc, #28]	; (8001500 <MX_TIM3_Init+0x128>)
 80014e4:	f006 ff4c 	bl	8008380 <HAL_TIM_PWM_ConfigChannel>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 80014ee:	f000 fac5 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80014f2:	4803      	ldr	r0, [pc, #12]	; (8001500 <MX_TIM3_Init+0x128>)
 80014f4:	f000 fc96 	bl	8001e24 <HAL_TIM_MspPostInit>

}
 80014f8:	bf00      	nop
 80014fa:	3748      	adds	r7, #72	; 0x48
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	20006394 	.word	0x20006394
 8001504:	40000400 	.word	0x40000400

08001508 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b08e      	sub	sp, #56	; 0x38
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800150e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800151c:	f107 0320 	add.w	r3, r7, #32
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001526:	1d3b      	adds	r3, r7, #4
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]
 8001534:	615a      	str	r2, [r3, #20]
 8001536:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001538:	4b3d      	ldr	r3, [pc, #244]	; (8001630 <MX_TIM4_Init+0x128>)
 800153a:	4a3e      	ldr	r2, [pc, #248]	; (8001634 <MX_TIM4_Init+0x12c>)
 800153c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800153e:	4b3c      	ldr	r3, [pc, #240]	; (8001630 <MX_TIM4_Init+0x128>)
 8001540:	2200      	movs	r2, #0
 8001542:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001544:	4b3a      	ldr	r3, [pc, #232]	; (8001630 <MX_TIM4_Init+0x128>)
 8001546:	2200      	movs	r2, #0
 8001548:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800154a:	4b39      	ldr	r3, [pc, #228]	; (8001630 <MX_TIM4_Init+0x128>)
 800154c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001550:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001552:	4b37      	ldr	r3, [pc, #220]	; (8001630 <MX_TIM4_Init+0x128>)
 8001554:	2200      	movs	r2, #0
 8001556:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001558:	4b35      	ldr	r3, [pc, #212]	; (8001630 <MX_TIM4_Init+0x128>)
 800155a:	2200      	movs	r2, #0
 800155c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800155e:	4834      	ldr	r0, [pc, #208]	; (8001630 <MX_TIM4_Init+0x128>)
 8001560:	f006 fcec 	bl	8007f3c <HAL_TIM_Base_Init>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800156a:	f000 fa87 	bl	8001a7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800156e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001572:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001574:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001578:	4619      	mov	r1, r3
 800157a:	482d      	ldr	r0, [pc, #180]	; (8001630 <MX_TIM4_Init+0x128>)
 800157c:	f006 ffc6 	bl	800850c <HAL_TIM_ConfigClockSource>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001586:	f000 fa79 	bl	8001a7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800158a:	4829      	ldr	r0, [pc, #164]	; (8001630 <MX_TIM4_Init+0x128>)
 800158c:	f006 fd25 	bl	8007fda <HAL_TIM_PWM_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001596:	f000 fa71 	bl	8001a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800159a:	2300      	movs	r3, #0
 800159c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800159e:	2300      	movs	r3, #0
 80015a0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015a2:	f107 0320 	add.w	r3, r7, #32
 80015a6:	4619      	mov	r1, r3
 80015a8:	4821      	ldr	r0, [pc, #132]	; (8001630 <MX_TIM4_Init+0x128>)
 80015aa:	f007 fc67 	bl	8008e7c <HAL_TIMEx_MasterConfigSynchronization>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80015b4:	f000 fa62 	bl	8001a7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015b8:	2360      	movs	r3, #96	; 0x60
 80015ba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015c0:	2300      	movs	r3, #0
 80015c2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015c4:	2300      	movs	r3, #0
 80015c6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015c8:	1d3b      	adds	r3, r7, #4
 80015ca:	2200      	movs	r2, #0
 80015cc:	4619      	mov	r1, r3
 80015ce:	4818      	ldr	r0, [pc, #96]	; (8001630 <MX_TIM4_Init+0x128>)
 80015d0:	f006 fed6 	bl	8008380 <HAL_TIM_PWM_ConfigChannel>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80015da:	f000 fa4f 	bl	8001a7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	2204      	movs	r2, #4
 80015e2:	4619      	mov	r1, r3
 80015e4:	4812      	ldr	r0, [pc, #72]	; (8001630 <MX_TIM4_Init+0x128>)
 80015e6:	f006 fecb 	bl	8008380 <HAL_TIM_PWM_ConfigChannel>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 80015f0:	f000 fa44 	bl	8001a7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015f4:	1d3b      	adds	r3, r7, #4
 80015f6:	2208      	movs	r2, #8
 80015f8:	4619      	mov	r1, r3
 80015fa:	480d      	ldr	r0, [pc, #52]	; (8001630 <MX_TIM4_Init+0x128>)
 80015fc:	f006 fec0 	bl	8008380 <HAL_TIM_PWM_ConfigChannel>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8001606:	f000 fa39 	bl	8001a7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800160a:	1d3b      	adds	r3, r7, #4
 800160c:	220c      	movs	r2, #12
 800160e:	4619      	mov	r1, r3
 8001610:	4807      	ldr	r0, [pc, #28]	; (8001630 <MX_TIM4_Init+0x128>)
 8001612:	f006 feb5 	bl	8008380 <HAL_TIM_PWM_ConfigChannel>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 800161c:	f000 fa2e 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001620:	4803      	ldr	r0, [pc, #12]	; (8001630 <MX_TIM4_Init+0x128>)
 8001622:	f000 fbff 	bl	8001e24 <HAL_TIM_MspPostInit>

}
 8001626:	bf00      	nop
 8001628:	3738      	adds	r7, #56	; 0x38
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20005eac 	.word	0x20005eac
 8001634:	40000800 	.word	0x40000800

08001638 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08c      	sub	sp, #48	; 0x30
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800163e:	f107 0320 	add.w	r3, r7, #32
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	605a      	str	r2, [r3, #4]
 8001648:	609a      	str	r2, [r3, #8]
 800164a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800164c:	f107 030c 	add.w	r3, r7, #12
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	60da      	str	r2, [r3, #12]
 800165a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800165c:	1d3b      	adds	r3, r7, #4
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001664:	4b26      	ldr	r3, [pc, #152]	; (8001700 <MX_TIM8_Init+0xc8>)
 8001666:	4a27      	ldr	r2, [pc, #156]	; (8001704 <MX_TIM8_Init+0xcc>)
 8001668:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 1199;
 800166a:	4b25      	ldr	r3, [pc, #148]	; (8001700 <MX_TIM8_Init+0xc8>)
 800166c:	f240 42af 	movw	r2, #1199	; 0x4af
 8001670:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001672:	4b23      	ldr	r3, [pc, #140]	; (8001700 <MX_TIM8_Init+0xc8>)
 8001674:	2200      	movs	r2, #0
 8001676:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 210;
 8001678:	4b21      	ldr	r3, [pc, #132]	; (8001700 <MX_TIM8_Init+0xc8>)
 800167a:	22d2      	movs	r2, #210	; 0xd2
 800167c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800167e:	4b20      	ldr	r3, [pc, #128]	; (8001700 <MX_TIM8_Init+0xc8>)
 8001680:	2200      	movs	r2, #0
 8001682:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001684:	4b1e      	ldr	r3, [pc, #120]	; (8001700 <MX_TIM8_Init+0xc8>)
 8001686:	2200      	movs	r2, #0
 8001688:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800168a:	4b1d      	ldr	r3, [pc, #116]	; (8001700 <MX_TIM8_Init+0xc8>)
 800168c:	2280      	movs	r2, #128	; 0x80
 800168e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001690:	481b      	ldr	r0, [pc, #108]	; (8001700 <MX_TIM8_Init+0xc8>)
 8001692:	f006 fc53 	bl	8007f3c <HAL_TIM_Base_Init>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_TIM8_Init+0x68>
  {
    Error_Handler();
 800169c:	f000 f9ee 	bl	8001a7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016a4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80016a6:	f107 0320 	add.w	r3, r7, #32
 80016aa:	4619      	mov	r1, r3
 80016ac:	4814      	ldr	r0, [pc, #80]	; (8001700 <MX_TIM8_Init+0xc8>)
 80016ae:	f006 ff2d 	bl	800850c <HAL_TIM_ConfigClockSource>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 80016b8:	f000 f9e0 	bl	8001a7c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80016bc:	2304      	movs	r3, #4
 80016be:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80016c0:	2300      	movs	r3, #0
 80016c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 80016c4:	f107 030c 	add.w	r3, r7, #12
 80016c8:	4619      	mov	r1, r3
 80016ca:	480d      	ldr	r0, [pc, #52]	; (8001700 <MX_TIM8_Init+0xc8>)
 80016cc:	f006 ffd5 	bl	800867a <HAL_TIM_SlaveConfigSynchro>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_TIM8_Init+0xa2>
  {
    Error_Handler();
 80016d6:	f000 f9d1 	bl	8001a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80016da:	2320      	movs	r3, #32
 80016dc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80016de:	2380      	movs	r3, #128	; 0x80
 80016e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80016e2:	1d3b      	adds	r3, r7, #4
 80016e4:	4619      	mov	r1, r3
 80016e6:	4806      	ldr	r0, [pc, #24]	; (8001700 <MX_TIM8_Init+0xc8>)
 80016e8:	f007 fbc8 	bl	8008e7c <HAL_TIMEx_MasterConfigSynchronization>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 80016f2:	f000 f9c3 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80016f6:	bf00      	nop
 80016f8:	3730      	adds	r7, #48	; 0x30
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20005e10 	.word	0x20005e10
 8001704:	40010400 	.word	0x40010400

08001708 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800170c:	4b11      	ldr	r3, [pc, #68]	; (8001754 <MX_UART4_Init+0x4c>)
 800170e:	4a12      	ldr	r2, [pc, #72]	; (8001758 <MX_UART4_Init+0x50>)
 8001710:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001712:	4b10      	ldr	r3, [pc, #64]	; (8001754 <MX_UART4_Init+0x4c>)
 8001714:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001718:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800171a:	4b0e      	ldr	r3, [pc, #56]	; (8001754 <MX_UART4_Init+0x4c>)
 800171c:	2200      	movs	r2, #0
 800171e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001720:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <MX_UART4_Init+0x4c>)
 8001722:	2200      	movs	r2, #0
 8001724:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001726:	4b0b      	ldr	r3, [pc, #44]	; (8001754 <MX_UART4_Init+0x4c>)
 8001728:	2200      	movs	r2, #0
 800172a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800172c:	4b09      	ldr	r3, [pc, #36]	; (8001754 <MX_UART4_Init+0x4c>)
 800172e:	220c      	movs	r2, #12
 8001730:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001732:	4b08      	ldr	r3, [pc, #32]	; (8001754 <MX_UART4_Init+0x4c>)
 8001734:	2200      	movs	r2, #0
 8001736:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001738:	4b06      	ldr	r3, [pc, #24]	; (8001754 <MX_UART4_Init+0x4c>)
 800173a:	2200      	movs	r2, #0
 800173c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800173e:	4805      	ldr	r0, [pc, #20]	; (8001754 <MX_UART4_Init+0x4c>)
 8001740:	f007 fc7e 	bl	8009040 <HAL_UART_Init>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800174a:	f000 f997 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20006fc4 	.word	0x20006fc4
 8001758:	40004c00 	.word	0x40004c00

0800175c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	607b      	str	r3, [r7, #4]
 8001766:	4b1b      	ldr	r3, [pc, #108]	; (80017d4 <MX_DMA_Init+0x78>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	4a1a      	ldr	r2, [pc, #104]	; (80017d4 <MX_DMA_Init+0x78>)
 800176c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001770:	6313      	str	r3, [r2, #48]	; 0x30
 8001772:	4b18      	ldr	r3, [pc, #96]	; (80017d4 <MX_DMA_Init+0x78>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800177a:	607b      	str	r3, [r7, #4]
 800177c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	603b      	str	r3, [r7, #0]
 8001782:	4b14      	ldr	r3, [pc, #80]	; (80017d4 <MX_DMA_Init+0x78>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	4a13      	ldr	r2, [pc, #76]	; (80017d4 <MX_DMA_Init+0x78>)
 8001788:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800178c:	6313      	str	r3, [r2, #48]	; 0x30
 800178e:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <MX_DMA_Init+0x78>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001796:	603b      	str	r3, [r7, #0]
 8001798:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 6, 0);
 800179a:	2200      	movs	r2, #0
 800179c:	2106      	movs	r1, #6
 800179e:	200d      	movs	r0, #13
 80017a0:	f001 fb5a 	bl	8002e58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80017a4:	200d      	movs	r0, #13
 80017a6:	f001 fb73 	bl	8002e90 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 6, 0);
 80017aa:	2200      	movs	r2, #0
 80017ac:	2106      	movs	r1, #6
 80017ae:	200f      	movs	r0, #15
 80017b0:	f001 fb52 	bl	8002e58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80017b4:	200f      	movs	r0, #15
 80017b6:	f001 fb6b 	bl	8002e90 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 7, 0);
 80017ba:	2200      	movs	r2, #0
 80017bc:	2107      	movs	r1, #7
 80017be:	2038      	movs	r0, #56	; 0x38
 80017c0:	f001 fb4a 	bl	8002e58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80017c4:	2038      	movs	r0, #56	; 0x38
 80017c6:	f001 fb63 	bl	8002e90 <HAL_NVIC_EnableIRQ>

}
 80017ca:	bf00      	nop
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40023800 	.word	0x40023800

080017d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b08c      	sub	sp, #48	; 0x30
 80017dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017de:	f107 031c 	add.w	r3, r7, #28
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	605a      	str	r2, [r3, #4]
 80017e8:	609a      	str	r2, [r3, #8]
 80017ea:	60da      	str	r2, [r3, #12]
 80017ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	61bb      	str	r3, [r7, #24]
 80017f2:	4b64      	ldr	r3, [pc, #400]	; (8001984 <MX_GPIO_Init+0x1ac>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	4a63      	ldr	r2, [pc, #396]	; (8001984 <MX_GPIO_Init+0x1ac>)
 80017f8:	f043 0310 	orr.w	r3, r3, #16
 80017fc:	6313      	str	r3, [r2, #48]	; 0x30
 80017fe:	4b61      	ldr	r3, [pc, #388]	; (8001984 <MX_GPIO_Init+0x1ac>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	f003 0310 	and.w	r3, r3, #16
 8001806:	61bb      	str	r3, [r7, #24]
 8001808:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	617b      	str	r3, [r7, #20]
 800180e:	4b5d      	ldr	r3, [pc, #372]	; (8001984 <MX_GPIO_Init+0x1ac>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	4a5c      	ldr	r2, [pc, #368]	; (8001984 <MX_GPIO_Init+0x1ac>)
 8001814:	f043 0304 	orr.w	r3, r3, #4
 8001818:	6313      	str	r3, [r2, #48]	; 0x30
 800181a:	4b5a      	ldr	r3, [pc, #360]	; (8001984 <MX_GPIO_Init+0x1ac>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	f003 0304 	and.w	r3, r3, #4
 8001822:	617b      	str	r3, [r7, #20]
 8001824:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	613b      	str	r3, [r7, #16]
 800182a:	4b56      	ldr	r3, [pc, #344]	; (8001984 <MX_GPIO_Init+0x1ac>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	4a55      	ldr	r2, [pc, #340]	; (8001984 <MX_GPIO_Init+0x1ac>)
 8001830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001834:	6313      	str	r3, [r2, #48]	; 0x30
 8001836:	4b53      	ldr	r3, [pc, #332]	; (8001984 <MX_GPIO_Init+0x1ac>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800183e:	613b      	str	r3, [r7, #16]
 8001840:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	4b4f      	ldr	r3, [pc, #316]	; (8001984 <MX_GPIO_Init+0x1ac>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	4a4e      	ldr	r2, [pc, #312]	; (8001984 <MX_GPIO_Init+0x1ac>)
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	6313      	str	r3, [r2, #48]	; 0x30
 8001852:	4b4c      	ldr	r3, [pc, #304]	; (8001984 <MX_GPIO_Init+0x1ac>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	60bb      	str	r3, [r7, #8]
 8001862:	4b48      	ldr	r3, [pc, #288]	; (8001984 <MX_GPIO_Init+0x1ac>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	4a47      	ldr	r2, [pc, #284]	; (8001984 <MX_GPIO_Init+0x1ac>)
 8001868:	f043 0302 	orr.w	r3, r3, #2
 800186c:	6313      	str	r3, [r2, #48]	; 0x30
 800186e:	4b45      	ldr	r3, [pc, #276]	; (8001984 <MX_GPIO_Init+0x1ac>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	60bb      	str	r3, [r7, #8]
 8001878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	607b      	str	r3, [r7, #4]
 800187e:	4b41      	ldr	r3, [pc, #260]	; (8001984 <MX_GPIO_Init+0x1ac>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	4a40      	ldr	r2, [pc, #256]	; (8001984 <MX_GPIO_Init+0x1ac>)
 8001884:	f043 0308 	orr.w	r3, r3, #8
 8001888:	6313      	str	r3, [r2, #48]	; 0x30
 800188a:	4b3e      	ldr	r3, [pc, #248]	; (8001984 <MX_GPIO_Init+0x1ac>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	f003 0308 	and.w	r3, r3, #8
 8001892:	607b      	str	r3, [r7, #4]
 8001894:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, TURN4A_Pin|TURN4B_Pin|TURN5A_Pin|TURN5B_Pin
 8001896:	2200      	movs	r2, #0
 8001898:	216f      	movs	r1, #111	; 0x6f
 800189a:	483b      	ldr	r0, [pc, #236]	; (8001988 <MX_GPIO_Init+0x1b0>)
 800189c:	f002 f83e 	bl	800391c <HAL_GPIO_WritePin>
                          |TURN3A_Pin|TURN3B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|VOLT_4_SEL2_Pin|VOLT_4_SEL3_Pin|VOLT4_SEL0_Pin, GPIO_PIN_RESET);
 80018a0:	2200      	movs	r2, #0
 80018a2:	f44f 61e8 	mov.w	r1, #1856	; 0x740
 80018a6:	4839      	ldr	r0, [pc, #228]	; (800198c <MX_GPIO_Init+0x1b4>)
 80018a8:	f002 f838 	bl	800391c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, VOLT_3_SEL0_Pin|VOLT_3_SEL1_Pin|VOLT_3_SEL2_Pin|VOLT_3_SEL3_Pin
 80018ac:	2200      	movs	r2, #0
 80018ae:	f24f 3130 	movw	r1, #62256	; 0xf330
 80018b2:	4837      	ldr	r0, [pc, #220]	; (8001990 <MX_GPIO_Init+0x1b8>)
 80018b4:	f002 f832 	bl	800391c <HAL_GPIO_WritePin>
                          |TURN1B_Pin|TURN1A_Pin|TURN2A_Pin|TURN2B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, VOLT_2_SEL0_Pin|VOLT_2_SEL1_Pin|VOLT_2_SEL2_Pin|VOLT_2_SEL3_Pin
 80018b8:	2200      	movs	r2, #0
 80018ba:	f640 71ff 	movw	r1, #4095	; 0xfff
 80018be:	4835      	ldr	r0, [pc, #212]	; (8001994 <MX_GPIO_Init+0x1bc>)
 80018c0:	f002 f82c 	bl	800391c <HAL_GPIO_WritePin>
                          |VOLT_0_SEL0_Pin|VOLT_0_SEL1_Pin|VOLT_0_SEL2_Pin|VOLT_0_SEL3_Pin
                          |VOLT_1_SEL0_Pin|VOLT_1_SEL1_Pin|VOLT_1_SEL2_Pin|VOLT_1_SEL3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VOLT_4_SEL1_GPIO_Port, VOLT_4_SEL1_Pin, GPIO_PIN_RESET);
 80018c4:	2200      	movs	r2, #0
 80018c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018ca:	4833      	ldr	r0, [pc, #204]	; (8001998 <MX_GPIO_Init+0x1c0>)
 80018cc:	f002 f826 	bl	800391c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TURN4A_Pin TURN4B_Pin TURN5A_Pin TURN5B_Pin
                           TURN3A_Pin TURN3B_Pin */
  GPIO_InitStruct.Pin = TURN4A_Pin|TURN4B_Pin|TURN5A_Pin|TURN5B_Pin
 80018d0:	236f      	movs	r3, #111	; 0x6f
 80018d2:	61fb      	str	r3, [r7, #28]
                          |TURN3A_Pin|TURN3B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d4:	2301      	movs	r3, #1
 80018d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d8:	2300      	movs	r3, #0
 80018da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018dc:	2300      	movs	r3, #0
 80018de:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018e0:	f107 031c 	add.w	r3, r7, #28
 80018e4:	4619      	mov	r1, r3
 80018e6:	4828      	ldr	r0, [pc, #160]	; (8001988 <MX_GPIO_Init+0x1b0>)
 80018e8:	f001 fe7e 	bl	80035e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BTN_Pin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 80018ec:	2310      	movs	r3, #16
 80018ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018f0:	2300      	movs	r3, #0
 80018f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018f4:	2301      	movs	r3, #1
 80018f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 80018f8:	f107 031c 	add.w	r3, r7, #28
 80018fc:	4619      	mov	r1, r3
 80018fe:	4822      	ldr	r0, [pc, #136]	; (8001988 <MX_GPIO_Init+0x1b0>)
 8001900:	f001 fe72 	bl	80035e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin VOLT_4_SEL2_Pin VOLT_4_SEL3_Pin VOLT4_SEL0_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|VOLT_4_SEL2_Pin|VOLT_4_SEL3_Pin|VOLT4_SEL0_Pin;
 8001904:	f44f 63e8 	mov.w	r3, #1856	; 0x740
 8001908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800190a:	2301      	movs	r3, #1
 800190c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001912:	2300      	movs	r3, #0
 8001914:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001916:	f107 031c 	add.w	r3, r7, #28
 800191a:	4619      	mov	r1, r3
 800191c:	481b      	ldr	r0, [pc, #108]	; (800198c <MX_GPIO_Init+0x1b4>)
 800191e:	f001 fe63 	bl	80035e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VOLT_3_SEL0_Pin VOLT_3_SEL1_Pin VOLT_3_SEL2_Pin VOLT_3_SEL3_Pin
                           TURN1B_Pin TURN1A_Pin TURN2A_Pin TURN2B_Pin */
  GPIO_InitStruct.Pin = VOLT_3_SEL0_Pin|VOLT_3_SEL1_Pin|VOLT_3_SEL2_Pin|VOLT_3_SEL3_Pin
 8001922:	f24f 3330 	movw	r3, #62256	; 0xf330
 8001926:	61fb      	str	r3, [r7, #28]
                          |TURN1B_Pin|TURN1A_Pin|TURN2A_Pin|TURN2B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001928:	2301      	movs	r3, #1
 800192a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192c:	2300      	movs	r3, #0
 800192e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001930:	2300      	movs	r3, #0
 8001932:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001934:	f107 031c 	add.w	r3, r7, #28
 8001938:	4619      	mov	r1, r3
 800193a:	4815      	ldr	r0, [pc, #84]	; (8001990 <MX_GPIO_Init+0x1b8>)
 800193c:	f001 fe54 	bl	80035e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VOLT_2_SEL0_Pin VOLT_2_SEL1_Pin VOLT_2_SEL2_Pin VOLT_2_SEL3_Pin
                           VOLT_0_SEL0_Pin VOLT_0_SEL1_Pin VOLT_0_SEL2_Pin VOLT_0_SEL3_Pin
                           VOLT_1_SEL0_Pin VOLT_1_SEL1_Pin VOLT_1_SEL2_Pin VOLT_1_SEL3_Pin */
  GPIO_InitStruct.Pin = VOLT_2_SEL0_Pin|VOLT_2_SEL1_Pin|VOLT_2_SEL2_Pin|VOLT_2_SEL3_Pin
 8001940:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001944:	61fb      	str	r3, [r7, #28]
                          |VOLT_0_SEL0_Pin|VOLT_0_SEL1_Pin|VOLT_0_SEL2_Pin|VOLT_0_SEL3_Pin
                          |VOLT_1_SEL0_Pin|VOLT_1_SEL1_Pin|VOLT_1_SEL2_Pin|VOLT_1_SEL3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001946:	2301      	movs	r3, #1
 8001948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194e:	2300      	movs	r3, #0
 8001950:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001952:	f107 031c 	add.w	r3, r7, #28
 8001956:	4619      	mov	r1, r3
 8001958:	480e      	ldr	r0, [pc, #56]	; (8001994 <MX_GPIO_Init+0x1bc>)
 800195a:	f001 fe45 	bl	80035e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VOLT_4_SEL1_Pin */
  GPIO_InitStruct.Pin = VOLT_4_SEL1_Pin;
 800195e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001962:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001964:	2301      	movs	r3, #1
 8001966:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	2300      	movs	r3, #0
 800196a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196c:	2300      	movs	r3, #0
 800196e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(VOLT_4_SEL1_GPIO_Port, &GPIO_InitStruct);
 8001970:	f107 031c 	add.w	r3, r7, #28
 8001974:	4619      	mov	r1, r3
 8001976:	4808      	ldr	r0, [pc, #32]	; (8001998 <MX_GPIO_Init+0x1c0>)
 8001978:	f001 fe36 	bl	80035e8 <HAL_GPIO_Init>

}
 800197c:	bf00      	nop
 800197e:	3730      	adds	r7, #48	; 0x30
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40023800 	.word	0x40023800
 8001988:	40021000 	.word	0x40021000
 800198c:	40020000 	.word	0x40020000
 8001990:	40020400 	.word	0x40020400
 8001994:	40020c00 	.word	0x40020c00
 8001998:	40020800 	.word	0x40020800

0800199c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80019a4:	f00e fbea 	bl	801017c <MX_USB_DEVICE_Init>
		osDelay(3000);
	}
#endif

#if 1
	taskdisp();
 80019a8:	f012 fe50 	bl	801464c <taskdisp>
   	  ssd1306_TestAll();
      osDelay(1000);
  }
#endif
  /* USER CODE END 5 */
}
 80019ac:	bf00      	nop
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <StartTaskBLE>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskBLE */
void StartTaskBLE(void *argument)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskBLE */
  /* Infinite loop */
  RunBleTask(&huart4, &hdma_uart4_rx, &hdma_uart4_tx, bleRespQueueHandle);
 80019bc:	4b05      	ldr	r3, [pc, #20]	; (80019d4 <StartTaskBLE+0x20>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a05      	ldr	r2, [pc, #20]	; (80019d8 <StartTaskBLE+0x24>)
 80019c2:	4906      	ldr	r1, [pc, #24]	; (80019dc <StartTaskBLE+0x28>)
 80019c4:	4806      	ldr	r0, [pc, #24]	; (80019e0 <StartTaskBLE+0x2c>)
 80019c6:	f7fe fe2f 	bl	8000628 <RunBleTask>
  for(;;)
  {
    osDelay(1);
 80019ca:	2001      	movs	r0, #1
 80019cc:	f00b fb30 	bl	800d030 <osDelay>
 80019d0:	e7fb      	b.n	80019ca <StartTaskBLE+0x16>
 80019d2:	bf00      	nop
 80019d4:	20006840 	.word	0x20006840
 80019d8:	2000714c 	.word	0x2000714c
 80019dc:	2000577c 	.word	0x2000577c
 80019e0:	20006fc4 	.word	0x20006fc4

080019e4 <StartCtrlTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCtrlTask */
void StartCtrlTask(void *argument)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCtrlTask */
	  MX_USB_DEVICE_Init();
 80019ec:	f00e fbc6 	bl	801017c <MX_USB_DEVICE_Init>

	  CantonTimerHandles[1]=&htim1;
 80019f0:	4b12      	ldr	r3, [pc, #72]	; (8001a3c <StartCtrlTask+0x58>)
 80019f2:	4a13      	ldr	r2, [pc, #76]	; (8001a40 <StartCtrlTask+0x5c>)
 80019f4:	605a      	str	r2, [r3, #4]
	  CantonTimerHandles[2]=&htim2;
 80019f6:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <StartCtrlTask+0x58>)
 80019f8:	4a12      	ldr	r2, [pc, #72]	; (8001a44 <StartCtrlTask+0x60>)
 80019fa:	609a      	str	r2, [r3, #8]
	  CantonTimerHandles[3]=&htim3;
 80019fc:	4b0f      	ldr	r3, [pc, #60]	; (8001a3c <StartCtrlTask+0x58>)
 80019fe:	4a12      	ldr	r2, [pc, #72]	; (8001a48 <StartCtrlTask+0x64>)
 8001a00:	60da      	str	r2, [r3, #12]
	  //CantonTimerHandles[3]=&htim3;
	  railconfig_setup_default();
 8001a02:	f010 fe1f 	bl	8012644 <railconfig_setup_default>



	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001a06:	2100      	movs	r1, #0
 8001a08:	480d      	ldr	r0, [pc, #52]	; (8001a40 <StartCtrlTask+0x5c>)
 8001a0a:	f006 fb1b 	bl	8008044 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001a0e:	2104      	movs	r1, #4
 8001a10:	480b      	ldr	r0, [pc, #44]	; (8001a40 <StartCtrlTask+0x5c>)
 8001a12:	f006 fb17 	bl	8008044 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8001a16:	2104      	movs	r1, #4
 8001a18:	4809      	ldr	r0, [pc, #36]	; (8001a40 <StartCtrlTask+0x5c>)
 8001a1a:	f006 fb51 	bl	80080c0 <HAL_TIM_PWM_Stop>


	  HAL_TIM_Base_Start_IT(&htim8);
 8001a1e:	480b      	ldr	r0, [pc, #44]	; (8001a4c <StartCtrlTask+0x68>)
 8001a20:	f006 fab7 	bl	8007f92 <HAL_TIM_Base_Start_IT>


	  HAL_ADC_Start_DMA(&hadc1,(uint32_t *)train_adc_buffer, NUM_ADC_SAMPLES);
 8001a24:	223c      	movs	r2, #60	; 0x3c
 8001a26:	490a      	ldr	r1, [pc, #40]	; (8001a50 <StartCtrlTask+0x6c>)
 8001a28:	480a      	ldr	r0, [pc, #40]	; (8001a54 <StartCtrlTask+0x70>)
 8001a2a:	f000 fdcb 	bl	80025c4 <HAL_ADC_Start_DMA>

	  run_task_ctrl();
 8001a2e:	f012 fce7 	bl	8014400 <run_task_ctrl>

  /* USER CODE END StartCtrlTask */
}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20005188 	.word	0x20005188
 8001a40:	20006d24 	.word	0x20006d24
 8001a44:	200070bc 	.word	0x200070bc
 8001a48:	20006394 	.word	0x20006394
 8001a4c:	20005e10 	.word	0x20005e10
 8001a50:	20008b08 	.word	0x20008b08
 8001a54:	200063f8 	.word	0x200063f8

08001a58 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a04      	ldr	r2, [pc, #16]	; (8001a78 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d101      	bne.n	8001a6e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a6a:	f000 fd25 	bl	80024b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40001400 	.word	0x40001400

08001a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
	...

08001a8c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	607b      	str	r3, [r7, #4]
 8001a96:	4b10      	ldr	r3, [pc, #64]	; (8001ad8 <HAL_MspInit+0x4c>)
 8001a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9a:	4a0f      	ldr	r2, [pc, #60]	; (8001ad8 <HAL_MspInit+0x4c>)
 8001a9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aa0:	6453      	str	r3, [r2, #68]	; 0x44
 8001aa2:	4b0d      	ldr	r3, [pc, #52]	; (8001ad8 <HAL_MspInit+0x4c>)
 8001aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aaa:	607b      	str	r3, [r7, #4]
 8001aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	603b      	str	r3, [r7, #0]
 8001ab2:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <HAL_MspInit+0x4c>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	4a08      	ldr	r2, [pc, #32]	; (8001ad8 <HAL_MspInit+0x4c>)
 8001ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001abc:	6413      	str	r3, [r2, #64]	; 0x40
 8001abe:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <HAL_MspInit+0x4c>)
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac6:	603b      	str	r3, [r7, #0]
 8001ac8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	40023800 	.word	0x40023800

08001adc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b08c      	sub	sp, #48	; 0x30
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae4:	f107 031c 	add.w	r3, r7, #28
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	609a      	str	r2, [r3, #8]
 8001af0:	60da      	str	r2, [r3, #12]
 8001af2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a49      	ldr	r2, [pc, #292]	; (8001c20 <HAL_ADC_MspInit+0x144>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	f040 808c 	bne.w	8001c18 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b00:	2300      	movs	r3, #0
 8001b02:	61bb      	str	r3, [r7, #24]
 8001b04:	4b47      	ldr	r3, [pc, #284]	; (8001c24 <HAL_ADC_MspInit+0x148>)
 8001b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b08:	4a46      	ldr	r2, [pc, #280]	; (8001c24 <HAL_ADC_MspInit+0x148>)
 8001b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b0e:	6453      	str	r3, [r2, #68]	; 0x44
 8001b10:	4b44      	ldr	r3, [pc, #272]	; (8001c24 <HAL_ADC_MspInit+0x148>)
 8001b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b18:	61bb      	str	r3, [r7, #24]
 8001b1a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	617b      	str	r3, [r7, #20]
 8001b20:	4b40      	ldr	r3, [pc, #256]	; (8001c24 <HAL_ADC_MspInit+0x148>)
 8001b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b24:	4a3f      	ldr	r2, [pc, #252]	; (8001c24 <HAL_ADC_MspInit+0x148>)
 8001b26:	f043 0304 	orr.w	r3, r3, #4
 8001b2a:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2c:	4b3d      	ldr	r3, [pc, #244]	; (8001c24 <HAL_ADC_MspInit+0x148>)
 8001b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b30:	f003 0304 	and.w	r3, r3, #4
 8001b34:	617b      	str	r3, [r7, #20]
 8001b36:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b38:	2300      	movs	r3, #0
 8001b3a:	613b      	str	r3, [r7, #16]
 8001b3c:	4b39      	ldr	r3, [pc, #228]	; (8001c24 <HAL_ADC_MspInit+0x148>)
 8001b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b40:	4a38      	ldr	r2, [pc, #224]	; (8001c24 <HAL_ADC_MspInit+0x148>)
 8001b42:	f043 0301 	orr.w	r3, r3, #1
 8001b46:	6313      	str	r3, [r2, #48]	; 0x30
 8001b48:	4b36      	ldr	r3, [pc, #216]	; (8001c24 <HAL_ADC_MspInit+0x148>)
 8001b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4c:	f003 0301 	and.w	r3, r3, #1
 8001b50:	613b      	str	r3, [r7, #16]
 8001b52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b54:	2300      	movs	r3, #0
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	4b32      	ldr	r3, [pc, #200]	; (8001c24 <HAL_ADC_MspInit+0x148>)
 8001b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5c:	4a31      	ldr	r2, [pc, #196]	; (8001c24 <HAL_ADC_MspInit+0x148>)
 8001b5e:	f043 0302 	orr.w	r3, r3, #2
 8001b62:	6313      	str	r3, [r2, #48]	; 0x30
 8001b64:	4b2f      	ldr	r3, [pc, #188]	; (8001c24 <HAL_ADC_MspInit+0x148>)
 8001b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b68:	f003 0302 	and.w	r3, r3, #2
 8001b6c:	60fb      	str	r3, [r7, #12]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ADC_2_V1_Pin|ADC_3_I_Pin|ADC_3_V0_Pin|ADC_3_V1_Pin
 8001b70:	233f      	movs	r3, #63	; 0x3f
 8001b72:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b74:	2303      	movs	r3, #3
 8001b76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b7c:	f107 031c 	add.w	r3, r7, #28
 8001b80:	4619      	mov	r1, r3
 8001b82:	4829      	ldr	r0, [pc, #164]	; (8001c28 <HAL_ADC_MspInit+0x14c>)
 8001b84:	f001 fd30 	bl	80035e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_0_I_Pin|ADC_0_V0_Pin|ADC_0_V1_Pin|ADC_1_I_Pin
 8001b88:	23bf      	movs	r3, #191	; 0xbf
 8001b8a:	61fb      	str	r3, [r7, #28]
                          |ADC_1_V0_Pin|ADC_1_V1_Pin|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b94:	f107 031c 	add.w	r3, r7, #28
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4824      	ldr	r0, [pc, #144]	; (8001c2c <HAL_ADC_MspInit+0x150>)
 8001b9c:	f001 fd24 	bl	80035e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_2_I_Pin|ADC_2_V0_Pin;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bac:	f107 031c 	add.w	r3, r7, #28
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	481f      	ldr	r0, [pc, #124]	; (8001c30 <HAL_ADC_MspInit+0x154>)
 8001bb4:	f001 fd18 	bl	80035e8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001bb8:	4b1e      	ldr	r3, [pc, #120]	; (8001c34 <HAL_ADC_MspInit+0x158>)
 8001bba:	4a1f      	ldr	r2, [pc, #124]	; (8001c38 <HAL_ADC_MspInit+0x15c>)
 8001bbc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001bbe:	4b1d      	ldr	r3, [pc, #116]	; (8001c34 <HAL_ADC_MspInit+0x158>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bc4:	4b1b      	ldr	r3, [pc, #108]	; (8001c34 <HAL_ADC_MspInit+0x158>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bca:	4b1a      	ldr	r3, [pc, #104]	; (8001c34 <HAL_ADC_MspInit+0x158>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001bd0:	4b18      	ldr	r3, [pc, #96]	; (8001c34 <HAL_ADC_MspInit+0x158>)
 8001bd2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bd6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001bd8:	4b16      	ldr	r3, [pc, #88]	; (8001c34 <HAL_ADC_MspInit+0x158>)
 8001bda:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bde:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001be0:	4b14      	ldr	r3, [pc, #80]	; (8001c34 <HAL_ADC_MspInit+0x158>)
 8001be2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001be6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001be8:	4b12      	ldr	r3, [pc, #72]	; (8001c34 <HAL_ADC_MspInit+0x158>)
 8001bea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bee:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001bf0:	4b10      	ldr	r3, [pc, #64]	; (8001c34 <HAL_ADC_MspInit+0x158>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bf6:	4b0f      	ldr	r3, [pc, #60]	; (8001c34 <HAL_ADC_MspInit+0x158>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001bfc:	480d      	ldr	r0, [pc, #52]	; (8001c34 <HAL_ADC_MspInit+0x158>)
 8001bfe:	f001 f955 	bl	8002eac <HAL_DMA_Init>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8001c08:	f7ff ff38 	bl	8001a7c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4a09      	ldr	r2, [pc, #36]	; (8001c34 <HAL_ADC_MspInit+0x158>)
 8001c10:	639a      	str	r2, [r3, #56]	; 0x38
 8001c12:	4a08      	ldr	r2, [pc, #32]	; (8001c34 <HAL_ADC_MspInit+0x158>)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c18:	bf00      	nop
 8001c1a:	3730      	adds	r7, #48	; 0x30
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40012000 	.word	0x40012000
 8001c24:	40023800 	.word	0x40023800
 8001c28:	40020800 	.word	0x40020800
 8001c2c:	40020000 	.word	0x40020000
 8001c30:	40020400 	.word	0x40020400
 8001c34:	200068a0 	.word	0x200068a0
 8001c38:	40026410 	.word	0x40026410

08001c3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b08a      	sub	sp, #40	; 0x28
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c44:	f107 0314 	add.w	r3, r7, #20
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
 8001c50:	60da      	str	r2, [r3, #12]
 8001c52:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a21      	ldr	r2, [pc, #132]	; (8001ce0 <HAL_I2C_MspInit+0xa4>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d13b      	bne.n	8001cd6 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	613b      	str	r3, [r7, #16]
 8001c62:	4b20      	ldr	r3, [pc, #128]	; (8001ce4 <HAL_I2C_MspInit+0xa8>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	4a1f      	ldr	r2, [pc, #124]	; (8001ce4 <HAL_I2C_MspInit+0xa8>)
 8001c68:	f043 0302 	orr.w	r3, r3, #2
 8001c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ce4 <HAL_I2C_MspInit+0xa8>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	613b      	str	r3, [r7, #16]
 8001c78:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c7a:	23c0      	movs	r3, #192	; 0xc0
 8001c7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c7e:	2312      	movs	r3, #18
 8001c80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c82:	2301      	movs	r3, #1
 8001c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c86:	2303      	movs	r3, #3
 8001c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c8a:	2304      	movs	r3, #4
 8001c8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c8e:	f107 0314 	add.w	r3, r7, #20
 8001c92:	4619      	mov	r1, r3
 8001c94:	4814      	ldr	r0, [pc, #80]	; (8001ce8 <HAL_I2C_MspInit+0xac>)
 8001c96:	f001 fca7 	bl	80035e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60fb      	str	r3, [r7, #12]
 8001c9e:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <HAL_I2C_MspInit+0xa8>)
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca2:	4a10      	ldr	r2, [pc, #64]	; (8001ce4 <HAL_I2C_MspInit+0xa8>)
 8001ca4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8001caa:	4b0e      	ldr	r3, [pc, #56]	; (8001ce4 <HAL_I2C_MspInit+0xa8>)
 8001cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	2100      	movs	r1, #0
 8001cba:	201f      	movs	r0, #31
 8001cbc:	f001 f8cc 	bl	8002e58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001cc0:	201f      	movs	r0, #31
 8001cc2:	f001 f8e5 	bl	8002e90 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	2100      	movs	r1, #0
 8001cca:	2020      	movs	r0, #32
 8001ccc:	f001 f8c4 	bl	8002e58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001cd0:	2020      	movs	r0, #32
 8001cd2:	f001 f8dd 	bl	8002e90 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001cd6:	bf00      	nop
 8001cd8:	3728      	adds	r7, #40	; 0x28
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40005400 	.word	0x40005400
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	40020400 	.word	0x40020400

08001cec <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a05      	ldr	r2, [pc, #20]	; (8001d10 <HAL_RTC_MspInit+0x24>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d102      	bne.n	8001d04 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001cfe:	4b05      	ldr	r3, [pc, #20]	; (8001d14 <HAL_RTC_MspInit+0x28>)
 8001d00:	2201      	movs	r2, #1
 8001d02:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	40002800 	.word	0x40002800
 8001d14:	42470e3c 	.word	0x42470e3c

08001d18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b088      	sub	sp, #32
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a3a      	ldr	r2, [pc, #232]	; (8001e10 <HAL_TIM_Base_MspInit+0xf8>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d10e      	bne.n	8001d48 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	61fb      	str	r3, [r7, #28]
 8001d2e:	4b39      	ldr	r3, [pc, #228]	; (8001e14 <HAL_TIM_Base_MspInit+0xfc>)
 8001d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d32:	4a38      	ldr	r2, [pc, #224]	; (8001e14 <HAL_TIM_Base_MspInit+0xfc>)
 8001d34:	f043 0301 	orr.w	r3, r3, #1
 8001d38:	6453      	str	r3, [r2, #68]	; 0x44
 8001d3a:	4b36      	ldr	r3, [pc, #216]	; (8001e14 <HAL_TIM_Base_MspInit+0xfc>)
 8001d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	61fb      	str	r3, [r7, #28]
 8001d44:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001d46:	e05e      	b.n	8001e06 <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM2)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d50:	d10e      	bne.n	8001d70 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	61bb      	str	r3, [r7, #24]
 8001d56:	4b2f      	ldr	r3, [pc, #188]	; (8001e14 <HAL_TIM_Base_MspInit+0xfc>)
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	4a2e      	ldr	r2, [pc, #184]	; (8001e14 <HAL_TIM_Base_MspInit+0xfc>)
 8001d5c:	f043 0301 	orr.w	r3, r3, #1
 8001d60:	6413      	str	r3, [r2, #64]	; 0x40
 8001d62:	4b2c      	ldr	r3, [pc, #176]	; (8001e14 <HAL_TIM_Base_MspInit+0xfc>)
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	61bb      	str	r3, [r7, #24]
 8001d6c:	69bb      	ldr	r3, [r7, #24]
}
 8001d6e:	e04a      	b.n	8001e06 <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM3)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a28      	ldr	r2, [pc, #160]	; (8001e18 <HAL_TIM_Base_MspInit+0x100>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d10e      	bne.n	8001d98 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	617b      	str	r3, [r7, #20]
 8001d7e:	4b25      	ldr	r3, [pc, #148]	; (8001e14 <HAL_TIM_Base_MspInit+0xfc>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	4a24      	ldr	r2, [pc, #144]	; (8001e14 <HAL_TIM_Base_MspInit+0xfc>)
 8001d84:	f043 0302 	orr.w	r3, r3, #2
 8001d88:	6413      	str	r3, [r2, #64]	; 0x40
 8001d8a:	4b22      	ldr	r3, [pc, #136]	; (8001e14 <HAL_TIM_Base_MspInit+0xfc>)
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	617b      	str	r3, [r7, #20]
 8001d94:	697b      	ldr	r3, [r7, #20]
}
 8001d96:	e036      	b.n	8001e06 <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM4)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a1f      	ldr	r2, [pc, #124]	; (8001e1c <HAL_TIM_Base_MspInit+0x104>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d10e      	bne.n	8001dc0 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	613b      	str	r3, [r7, #16]
 8001da6:	4b1b      	ldr	r3, [pc, #108]	; (8001e14 <HAL_TIM_Base_MspInit+0xfc>)
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	4a1a      	ldr	r2, [pc, #104]	; (8001e14 <HAL_TIM_Base_MspInit+0xfc>)
 8001dac:	f043 0304 	orr.w	r3, r3, #4
 8001db0:	6413      	str	r3, [r2, #64]	; 0x40
 8001db2:	4b18      	ldr	r3, [pc, #96]	; (8001e14 <HAL_TIM_Base_MspInit+0xfc>)
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	f003 0304 	and.w	r3, r3, #4
 8001dba:	613b      	str	r3, [r7, #16]
 8001dbc:	693b      	ldr	r3, [r7, #16]
}
 8001dbe:	e022      	b.n	8001e06 <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM8)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a16      	ldr	r2, [pc, #88]	; (8001e20 <HAL_TIM_Base_MspInit+0x108>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d11d      	bne.n	8001e06 <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60fb      	str	r3, [r7, #12]
 8001dce:	4b11      	ldr	r3, [pc, #68]	; (8001e14 <HAL_TIM_Base_MspInit+0xfc>)
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd2:	4a10      	ldr	r2, [pc, #64]	; (8001e14 <HAL_TIM_Base_MspInit+0xfc>)
 8001dd4:	f043 0302 	orr.w	r3, r3, #2
 8001dd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dda:	4b0e      	ldr	r3, [pc, #56]	; (8001e14 <HAL_TIM_Base_MspInit+0xfc>)
 8001ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 8001de6:	2200      	movs	r2, #0
 8001de8:	2105      	movs	r1, #5
 8001dea:	202c      	movs	r0, #44	; 0x2c
 8001dec:	f001 f834 	bl	8002e58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001df0:	202c      	movs	r0, #44	; 0x2c
 8001df2:	f001 f84d 	bl	8002e90 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 8001df6:	2200      	movs	r2, #0
 8001df8:	2105      	movs	r1, #5
 8001dfa:	202d      	movs	r0, #45	; 0x2d
 8001dfc:	f001 f82c 	bl	8002e58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001e00:	202d      	movs	r0, #45	; 0x2d
 8001e02:	f001 f845 	bl	8002e90 <HAL_NVIC_EnableIRQ>
}
 8001e06:	bf00      	nop
 8001e08:	3720      	adds	r7, #32
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40010000 	.word	0x40010000
 8001e14:	40023800 	.word	0x40023800
 8001e18:	40000400 	.word	0x40000400
 8001e1c:	40000800 	.word	0x40000800
 8001e20:	40010400 	.word	0x40010400

08001e24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b08c      	sub	sp, #48	; 0x30
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e2c:	f107 031c 	add.w	r3, r7, #28
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	60da      	str	r2, [r3, #12]
 8001e3a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a49      	ldr	r2, [pc, #292]	; (8001f68 <HAL_TIM_MspPostInit+0x144>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d11f      	bne.n	8001e86 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	61bb      	str	r3, [r7, #24]
 8001e4a:	4b48      	ldr	r3, [pc, #288]	; (8001f6c <HAL_TIM_MspPostInit+0x148>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	4a47      	ldr	r2, [pc, #284]	; (8001f6c <HAL_TIM_MspPostInit+0x148>)
 8001e50:	f043 0310 	orr.w	r3, r3, #16
 8001e54:	6313      	str	r3, [r2, #48]	; 0x30
 8001e56:	4b45      	ldr	r3, [pc, #276]	; (8001f6c <HAL_TIM_MspPostInit+0x148>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	f003 0310 	and.w	r3, r3, #16
 8001e5e:	61bb      	str	r3, [r7, #24]
 8001e60:	69bb      	ldr	r3, [r7, #24]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = PWM_0_0_Pin|PWM_0_1_Pin|PWM_1_0_Pin|PWM_1_1_Pin;
 8001e62:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8001e66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e70:	2300      	movs	r3, #0
 8001e72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e74:	2301      	movs	r3, #1
 8001e76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e78:	f107 031c 	add.w	r3, r7, #28
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	483c      	ldr	r0, [pc, #240]	; (8001f70 <HAL_TIM_MspPostInit+0x14c>)
 8001e80:	f001 fbb2 	bl	80035e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001e84:	e06c      	b.n	8001f60 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM2)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e8e:	d11f      	bne.n	8001ed0 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e90:	2300      	movs	r3, #0
 8001e92:	617b      	str	r3, [r7, #20]
 8001e94:	4b35      	ldr	r3, [pc, #212]	; (8001f6c <HAL_TIM_MspPostInit+0x148>)
 8001e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e98:	4a34      	ldr	r2, [pc, #208]	; (8001f6c <HAL_TIM_MspPostInit+0x148>)
 8001e9a:	f043 0302 	orr.w	r3, r3, #2
 8001e9e:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea0:	4b32      	ldr	r3, [pc, #200]	; (8001f6c <HAL_TIM_MspPostInit+0x148>)
 8001ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	617b      	str	r3, [r7, #20]
 8001eaa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PWM_3_0_Pin|PWM_3_1_Pin;
 8001eac:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001eb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ec2:	f107 031c 	add.w	r3, r7, #28
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	482a      	ldr	r0, [pc, #168]	; (8001f74 <HAL_TIM_MspPostInit+0x150>)
 8001eca:	f001 fb8d 	bl	80035e8 <HAL_GPIO_Init>
}
 8001ece:	e047      	b.n	8001f60 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM3)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a28      	ldr	r2, [pc, #160]	; (8001f78 <HAL_TIM_MspPostInit+0x154>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d11e      	bne.n	8001f18 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	613b      	str	r3, [r7, #16]
 8001ede:	4b23      	ldr	r3, [pc, #140]	; (8001f6c <HAL_TIM_MspPostInit+0x148>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	4a22      	ldr	r2, [pc, #136]	; (8001f6c <HAL_TIM_MspPostInit+0x148>)
 8001ee4:	f043 0304 	orr.w	r3, r3, #4
 8001ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eea:	4b20      	ldr	r3, [pc, #128]	; (8001f6c <HAL_TIM_MspPostInit+0x148>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	f003 0304 	and.w	r3, r3, #4
 8001ef2:	613b      	str	r3, [r7, #16]
 8001ef4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PWM_4_0_Pin|PWM_4_1_Pin;
 8001ef6:	23c0      	movs	r3, #192	; 0xc0
 8001ef8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efa:	2302      	movs	r3, #2
 8001efc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efe:	2300      	movs	r3, #0
 8001f00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f02:	2300      	movs	r3, #0
 8001f04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f06:	2302      	movs	r3, #2
 8001f08:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f0a:	f107 031c 	add.w	r3, r7, #28
 8001f0e:	4619      	mov	r1, r3
 8001f10:	481a      	ldr	r0, [pc, #104]	; (8001f7c <HAL_TIM_MspPostInit+0x158>)
 8001f12:	f001 fb69 	bl	80035e8 <HAL_GPIO_Init>
}
 8001f16:	e023      	b.n	8001f60 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM4)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a18      	ldr	r2, [pc, #96]	; (8001f80 <HAL_TIM_MspPostInit+0x15c>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d11e      	bne.n	8001f60 <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	4b11      	ldr	r3, [pc, #68]	; (8001f6c <HAL_TIM_MspPostInit+0x148>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	4a10      	ldr	r2, [pc, #64]	; (8001f6c <HAL_TIM_MspPostInit+0x148>)
 8001f2c:	f043 0308 	orr.w	r3, r3, #8
 8001f30:	6313      	str	r3, [r2, #48]	; 0x30
 8001f32:	4b0e      	ldr	r3, [pc, #56]	; (8001f6c <HAL_TIM_MspPostInit+0x148>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	f003 0308 	and.w	r3, r3, #8
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001f3e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001f42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f44:	2302      	movs	r3, #2
 8001f46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001f50:	2302      	movs	r3, #2
 8001f52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f54:	f107 031c 	add.w	r3, r7, #28
 8001f58:	4619      	mov	r1, r3
 8001f5a:	480a      	ldr	r0, [pc, #40]	; (8001f84 <HAL_TIM_MspPostInit+0x160>)
 8001f5c:	f001 fb44 	bl	80035e8 <HAL_GPIO_Init>
}
 8001f60:	bf00      	nop
 8001f62:	3730      	adds	r7, #48	; 0x30
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40010000 	.word	0x40010000
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	40021000 	.word	0x40021000
 8001f74:	40020400 	.word	0x40020400
 8001f78:	40000400 	.word	0x40000400
 8001f7c:	40020800 	.word	0x40020800
 8001f80:	40000800 	.word	0x40000800
 8001f84:	40020c00 	.word	0x40020c00

08001f88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b08a      	sub	sp, #40	; 0x28
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f90:	f107 0314 	add.w	r3, r7, #20
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	605a      	str	r2, [r3, #4]
 8001f9a:	609a      	str	r2, [r3, #8]
 8001f9c:	60da      	str	r2, [r3, #12]
 8001f9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a4d      	ldr	r2, [pc, #308]	; (80020dc <HAL_UART_MspInit+0x154>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	f040 8093 	bne.w	80020d2 <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001fac:	2300      	movs	r3, #0
 8001fae:	613b      	str	r3, [r7, #16]
 8001fb0:	4b4b      	ldr	r3, [pc, #300]	; (80020e0 <HAL_UART_MspInit+0x158>)
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb4:	4a4a      	ldr	r2, [pc, #296]	; (80020e0 <HAL_UART_MspInit+0x158>)
 8001fb6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001fba:	6413      	str	r3, [r2, #64]	; 0x40
 8001fbc:	4b48      	ldr	r3, [pc, #288]	; (80020e0 <HAL_UART_MspInit+0x158>)
 8001fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fc4:	613b      	str	r3, [r7, #16]
 8001fc6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	4b44      	ldr	r3, [pc, #272]	; (80020e0 <HAL_UART_MspInit+0x158>)
 8001fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd0:	4a43      	ldr	r2, [pc, #268]	; (80020e0 <HAL_UART_MspInit+0x158>)
 8001fd2:	f043 0304 	orr.w	r3, r3, #4
 8001fd6:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd8:	4b41      	ldr	r3, [pc, #260]	; (80020e0 <HAL_UART_MspInit+0x158>)
 8001fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	60fb      	str	r3, [r7, #12]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001fe4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001fe8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fea:	2302      	movs	r3, #2
 8001fec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001ff6:	2308      	movs	r3, #8
 8001ff8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ffa:	f107 0314 	add.w	r3, r7, #20
 8001ffe:	4619      	mov	r1, r3
 8002000:	4838      	ldr	r0, [pc, #224]	; (80020e4 <HAL_UART_MspInit+0x15c>)
 8002002:	f001 faf1 	bl	80035e8 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8002006:	4b38      	ldr	r3, [pc, #224]	; (80020e8 <HAL_UART_MspInit+0x160>)
 8002008:	4a38      	ldr	r2, [pc, #224]	; (80020ec <HAL_UART_MspInit+0x164>)
 800200a:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 800200c:	4b36      	ldr	r3, [pc, #216]	; (80020e8 <HAL_UART_MspInit+0x160>)
 800200e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002012:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002014:	4b34      	ldr	r3, [pc, #208]	; (80020e8 <HAL_UART_MspInit+0x160>)
 8002016:	2200      	movs	r2, #0
 8002018:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800201a:	4b33      	ldr	r3, [pc, #204]	; (80020e8 <HAL_UART_MspInit+0x160>)
 800201c:	2200      	movs	r2, #0
 800201e:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002020:	4b31      	ldr	r3, [pc, #196]	; (80020e8 <HAL_UART_MspInit+0x160>)
 8002022:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002026:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002028:	4b2f      	ldr	r3, [pc, #188]	; (80020e8 <HAL_UART_MspInit+0x160>)
 800202a:	2200      	movs	r2, #0
 800202c:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800202e:	4b2e      	ldr	r3, [pc, #184]	; (80020e8 <HAL_UART_MspInit+0x160>)
 8002030:	2200      	movs	r2, #0
 8002032:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8002034:	4b2c      	ldr	r3, [pc, #176]	; (80020e8 <HAL_UART_MspInit+0x160>)
 8002036:	2200      	movs	r2, #0
 8002038:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800203a:	4b2b      	ldr	r3, [pc, #172]	; (80020e8 <HAL_UART_MspInit+0x160>)
 800203c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002040:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002042:	4b29      	ldr	r3, [pc, #164]	; (80020e8 <HAL_UART_MspInit+0x160>)
 8002044:	2200      	movs	r2, #0
 8002046:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8002048:	4827      	ldr	r0, [pc, #156]	; (80020e8 <HAL_UART_MspInit+0x160>)
 800204a:	f000 ff2f 	bl	8002eac <HAL_DMA_Init>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8002054:	f7ff fd12 	bl	8001a7c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a23      	ldr	r2, [pc, #140]	; (80020e8 <HAL_UART_MspInit+0x160>)
 800205c:	635a      	str	r2, [r3, #52]	; 0x34
 800205e:	4a22      	ldr	r2, [pc, #136]	; (80020e8 <HAL_UART_MspInit+0x160>)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8002064:	4b22      	ldr	r3, [pc, #136]	; (80020f0 <HAL_UART_MspInit+0x168>)
 8002066:	4a23      	ldr	r2, [pc, #140]	; (80020f4 <HAL_UART_MspInit+0x16c>)
 8002068:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 800206a:	4b21      	ldr	r3, [pc, #132]	; (80020f0 <HAL_UART_MspInit+0x168>)
 800206c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002070:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002072:	4b1f      	ldr	r3, [pc, #124]	; (80020f0 <HAL_UART_MspInit+0x168>)
 8002074:	2240      	movs	r2, #64	; 0x40
 8002076:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002078:	4b1d      	ldr	r3, [pc, #116]	; (80020f0 <HAL_UART_MspInit+0x168>)
 800207a:	2200      	movs	r2, #0
 800207c:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800207e:	4b1c      	ldr	r3, [pc, #112]	; (80020f0 <HAL_UART_MspInit+0x168>)
 8002080:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002084:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002086:	4b1a      	ldr	r3, [pc, #104]	; (80020f0 <HAL_UART_MspInit+0x168>)
 8002088:	2200      	movs	r2, #0
 800208a:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800208c:	4b18      	ldr	r3, [pc, #96]	; (80020f0 <HAL_UART_MspInit+0x168>)
 800208e:	2200      	movs	r2, #0
 8002090:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8002092:	4b17      	ldr	r3, [pc, #92]	; (80020f0 <HAL_UART_MspInit+0x168>)
 8002094:	2200      	movs	r2, #0
 8002096:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002098:	4b15      	ldr	r3, [pc, #84]	; (80020f0 <HAL_UART_MspInit+0x168>)
 800209a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800209e:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020a0:	4b13      	ldr	r3, [pc, #76]	; (80020f0 <HAL_UART_MspInit+0x168>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80020a6:	4812      	ldr	r0, [pc, #72]	; (80020f0 <HAL_UART_MspInit+0x168>)
 80020a8:	f000 ff00 	bl	8002eac <HAL_DMA_Init>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 80020b2:	f7ff fce3 	bl	8001a7c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a0d      	ldr	r2, [pc, #52]	; (80020f0 <HAL_UART_MspInit+0x168>)
 80020ba:	631a      	str	r2, [r3, #48]	; 0x30
 80020bc:	4a0c      	ldr	r2, [pc, #48]	; (80020f0 <HAL_UART_MspInit+0x168>)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80020c2:	2200      	movs	r2, #0
 80020c4:	2105      	movs	r1, #5
 80020c6:	2034      	movs	r0, #52	; 0x34
 80020c8:	f000 fec6 	bl	8002e58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80020cc:	2034      	movs	r0, #52	; 0x34
 80020ce:	f000 fedf 	bl	8002e90 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80020d2:	bf00      	nop
 80020d4:	3728      	adds	r7, #40	; 0x28
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40004c00 	.word	0x40004c00
 80020e0:	40023800 	.word	0x40023800
 80020e4:	40020800 	.word	0x40020800
 80020e8:	2000577c 	.word	0x2000577c
 80020ec:	40026040 	.word	0x40026040
 80020f0:	2000714c 	.word	0x2000714c
 80020f4:	40026070 	.word	0x40026070

080020f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b08c      	sub	sp, #48	; 0x30
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002100:	2300      	movs	r3, #0
 8002102:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002104:	2300      	movs	r3, #0
 8002106:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8002108:	2200      	movs	r2, #0
 800210a:	6879      	ldr	r1, [r7, #4]
 800210c:	2037      	movs	r0, #55	; 0x37
 800210e:	f000 fea3 	bl	8002e58 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002112:	2037      	movs	r0, #55	; 0x37
 8002114:	f000 febc 	bl	8002e90 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8002118:	2300      	movs	r3, #0
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	4b1f      	ldr	r3, [pc, #124]	; (800219c <HAL_InitTick+0xa4>)
 800211e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002120:	4a1e      	ldr	r2, [pc, #120]	; (800219c <HAL_InitTick+0xa4>)
 8002122:	f043 0320 	orr.w	r3, r3, #32
 8002126:	6413      	str	r3, [r2, #64]	; 0x40
 8002128:	4b1c      	ldr	r3, [pc, #112]	; (800219c <HAL_InitTick+0xa4>)
 800212a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212c:	f003 0320 	and.w	r3, r3, #32
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002134:	f107 0210 	add.w	r2, r7, #16
 8002138:	f107 0314 	add.w	r3, r7, #20
 800213c:	4611      	mov	r1, r2
 800213e:	4618      	mov	r0, r3
 8002140:	f005 fc38 	bl	80079b4 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002144:	f005 fc0e 	bl	8007964 <HAL_RCC_GetPCLK1Freq>
 8002148:	4603      	mov	r3, r0
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800214e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002150:	4a13      	ldr	r2, [pc, #76]	; (80021a0 <HAL_InitTick+0xa8>)
 8002152:	fba2 2303 	umull	r2, r3, r2, r3
 8002156:	0c9b      	lsrs	r3, r3, #18
 8002158:	3b01      	subs	r3, #1
 800215a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 800215c:	4b11      	ldr	r3, [pc, #68]	; (80021a4 <HAL_InitTick+0xac>)
 800215e:	4a12      	ldr	r2, [pc, #72]	; (80021a8 <HAL_InitTick+0xb0>)
 8002160:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 8002162:	4b10      	ldr	r3, [pc, #64]	; (80021a4 <HAL_InitTick+0xac>)
 8002164:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002168:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 800216a:	4a0e      	ldr	r2, [pc, #56]	; (80021a4 <HAL_InitTick+0xac>)
 800216c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800216e:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8002170:	4b0c      	ldr	r3, [pc, #48]	; (80021a4 <HAL_InitTick+0xac>)
 8002172:	2200      	movs	r2, #0
 8002174:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002176:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <HAL_InitTick+0xac>)
 8002178:	2200      	movs	r2, #0
 800217a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 800217c:	4809      	ldr	r0, [pc, #36]	; (80021a4 <HAL_InitTick+0xac>)
 800217e:	f005 fedd 	bl	8007f3c <HAL_TIM_Base_Init>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d104      	bne.n	8002192 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8002188:	4806      	ldr	r0, [pc, #24]	; (80021a4 <HAL_InitTick+0xac>)
 800218a:	f005 ff02 	bl	8007f92 <HAL_TIM_Base_Start_IT>
 800218e:	4603      	mov	r3, r0
 8002190:	e000      	b.n	8002194 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
}
 8002194:	4618      	mov	r0, r3
 8002196:	3730      	adds	r7, #48	; 0x30
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40023800 	.word	0x40023800
 80021a0:	431bde83 	.word	0x431bde83
 80021a4:	200071ac 	.word	0x200071ac
 80021a8:	40001400 	.word	0x40001400

080021ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80021b0:	bf00      	nop
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021ba:	b480      	push	{r7}
 80021bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021be:	e7fe      	b.n	80021be <HardFault_Handler+0x4>

080021c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021c4:	e7fe      	b.n	80021c4 <MemManage_Handler+0x4>

080021c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021c6:	b480      	push	{r7}
 80021c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021ca:	e7fe      	b.n	80021ca <BusFault_Handler+0x4>

080021cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021d0:	e7fe      	b.n	80021d0 <UsageFault_Handler+0x4>

080021d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021d2:	b480      	push	{r7}
 80021d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021d6:	bf00      	nop
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80021e4:	4802      	ldr	r0, [pc, #8]	; (80021f0 <DMA1_Stream2_IRQHandler+0x10>)
 80021e6:	f000 ff89 	bl	80030fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80021ea:	bf00      	nop
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	2000577c 	.word	0x2000577c

080021f4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80021f8:	4802      	ldr	r0, [pc, #8]	; (8002204 <DMA1_Stream4_IRQHandler+0x10>)
 80021fa:	f000 ff7f 	bl	80030fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80021fe:	bf00      	nop
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	2000714c 	.word	0x2000714c

08002208 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800220c:	4802      	ldr	r0, [pc, #8]	; (8002218 <I2C1_EV_IRQHandler+0x10>)
 800220e:	f001 ff19 	bl	8004044 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002212:	bf00      	nop
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	20005ef0 	.word	0x20005ef0

0800221c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002220:	4802      	ldr	r0, [pc, #8]	; (800222c <I2C1_ER_IRQHandler+0x10>)
 8002222:	f002 f87c 	bl	800431e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002226:	bf00      	nop
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	20005ef0 	.word	0x20005ef0

08002230 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002234:	4802      	ldr	r0, [pc, #8]	; (8002240 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8002236:	f005 ff9b 	bl	8008170 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800223a:	bf00      	nop
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	20005e10 	.word	0x20005e10

08002244 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002248:	4802      	ldr	r0, [pc, #8]	; (8002254 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800224a:	f005 ff91 	bl	8008170 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800224e:	bf00      	nop
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	20005e10 	.word	0x20005e10

08002258 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	if (huart4.Instance->SR & UART_FLAG_IDLE) {     /* if Idle flag is set */
 800225e:	4b10      	ldr	r3, [pc, #64]	; (80022a0 <UART4_IRQHandler+0x48>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0310 	and.w	r3, r3, #16
 8002268:	2b00      	cmp	r3, #0
 800226a:	d011      	beq.n	8002290 <UART4_IRQHandler+0x38>
		volatile uint32_t tmp;                  	/* volatile to prevent optimizations */
		tmp = huart4.Instance->SR;                  /* Read status register and data reg to clear RX flag*/
 800226c:	4b0c      	ldr	r3, [pc, #48]	; (80022a0 <UART4_IRQHandler+0x48>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	607b      	str	r3, [r7, #4]
		tmp = huart4.Instance->DR;
 8002274:	4b0a      	ldr	r3, [pc, #40]	; (80022a0 <UART4_IRQHandler+0x48>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	607b      	str	r3, [r7, #4]
		(void) tmp;									/* only to not have the compiler warning (variable not used) */
 800227c:	687b      	ldr	r3, [r7, #4]

		hdma_uart4_rx.Instance->CR &= ~DMA_SxCR_EN; /* Disabling DMA will force transfer complete interrupt if enabled */
 800227e:	4b09      	ldr	r3, [pc, #36]	; (80022a4 <UART4_IRQHandler+0x4c>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	4b07      	ldr	r3, [pc, #28]	; (80022a4 <UART4_IRQHandler+0x4c>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 0201 	bic.w	r2, r2, #1
 800228c:	601a      	str	r2, [r3, #0]
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
  /* USER CODE BEGIN UART4_IRQn 1 */
	}
  /* USER CODE END UART4_IRQn 1 */
}
 800228e:	e002      	b.n	8002296 <UART4_IRQHandler+0x3e>
  HAL_UART_IRQHandler(&huart4);
 8002290:	4803      	ldr	r0, [pc, #12]	; (80022a0 <UART4_IRQHandler+0x48>)
 8002292:	f007 f80f 	bl	80092b4 <HAL_UART_IRQHandler>
}
 8002296:	bf00      	nop
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	20006fc4 	.word	0x20006fc4
 80022a4:	2000577c 	.word	0x2000577c

080022a8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80022ac:	4802      	ldr	r0, [pc, #8]	; (80022b8 <TIM7_IRQHandler+0x10>)
 80022ae:	f005 ff5f 	bl	8008170 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80022b2:	bf00      	nop
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	200071ac 	.word	0x200071ac

080022bc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80022c0:	4802      	ldr	r0, [pc, #8]	; (80022cc <DMA2_Stream0_IRQHandler+0x10>)
 80022c2:	f000 ff1b 	bl	80030fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80022c6:	bf00      	nop
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	200068a0 	.word	0x200068a0

080022d0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80022d4:	4802      	ldr	r0, [pc, #8]	; (80022e0 <OTG_FS_IRQHandler+0x10>)
 80022d6:	f003 fed7 	bl	8006088 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80022da:	bf00      	nop
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	20008700 	.word	0x20008700

080022e4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022f0:	2300      	movs	r3, #0
 80022f2:	617b      	str	r3, [r7, #20]
 80022f4:	e00a      	b.n	800230c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022f6:	f3af 8000 	nop.w
 80022fa:	4601      	mov	r1, r0
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	1c5a      	adds	r2, r3, #1
 8002300:	60ba      	str	r2, [r7, #8]
 8002302:	b2ca      	uxtb	r2, r1
 8002304:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	3301      	adds	r3, #1
 800230a:	617b      	str	r3, [r7, #20]
 800230c:	697a      	ldr	r2, [r7, #20]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	429a      	cmp	r2, r3
 8002312:	dbf0      	blt.n	80022f6 <_read+0x12>
	}

return len;
 8002314:	687b      	ldr	r3, [r7, #4]
}
 8002316:	4618      	mov	r0, r3
 8002318:	3718      	adds	r7, #24
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <_close>:
	}
	return len;
}

int _close(int file)
{
 800231e:	b480      	push	{r7}
 8002320:	b083      	sub	sp, #12
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
	return -1;
 8002326:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800232a:	4618      	mov	r0, r3
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr

08002336 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002336:	b480      	push	{r7}
 8002338:	b083      	sub	sp, #12
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
 800233e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002346:	605a      	str	r2, [r3, #4]
	return 0;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <_isatty>:

int _isatty(int file)
{
 8002356:	b480      	push	{r7}
 8002358:	b083      	sub	sp, #12
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
	return 1;
 800235e:	2301      	movs	r3, #1
}
 8002360:	4618      	mov	r0, r3
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
	return 0;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3714      	adds	r7, #20
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
	...

08002388 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b086      	sub	sp, #24
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002390:	4a14      	ldr	r2, [pc, #80]	; (80023e4 <_sbrk+0x5c>)
 8002392:	4b15      	ldr	r3, [pc, #84]	; (80023e8 <_sbrk+0x60>)
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800239c:	4b13      	ldr	r3, [pc, #76]	; (80023ec <_sbrk+0x64>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d102      	bne.n	80023aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023a4:	4b11      	ldr	r3, [pc, #68]	; (80023ec <_sbrk+0x64>)
 80023a6:	4a12      	ldr	r2, [pc, #72]	; (80023f0 <_sbrk+0x68>)
 80023a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023aa:	4b10      	ldr	r3, [pc, #64]	; (80023ec <_sbrk+0x64>)
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4413      	add	r3, r2
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d207      	bcs.n	80023c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023b8:	f012 fd2c 	bl	8014e14 <__errno>
 80023bc:	4602      	mov	r2, r0
 80023be:	230c      	movs	r3, #12
 80023c0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80023c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023c6:	e009      	b.n	80023dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023c8:	4b08      	ldr	r3, [pc, #32]	; (80023ec <_sbrk+0x64>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023ce:	4b07      	ldr	r3, [pc, #28]	; (80023ec <_sbrk+0x64>)
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4413      	add	r3, r2
 80023d6:	4a05      	ldr	r2, [pc, #20]	; (80023ec <_sbrk+0x64>)
 80023d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023da:	68fb      	ldr	r3, [r7, #12]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3718      	adds	r7, #24
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	20020000 	.word	0x20020000
 80023e8:	00000400 	.word	0x00000400
 80023ec:	20000670 	.word	0x20000670
 80023f0:	20008b88 	.word	0x20008b88

080023f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023f8:	4b08      	ldr	r3, [pc, #32]	; (800241c <SystemInit+0x28>)
 80023fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023fe:	4a07      	ldr	r2, [pc, #28]	; (800241c <SystemInit+0x28>)
 8002400:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002404:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002408:	4b04      	ldr	r3, [pc, #16]	; (800241c <SystemInit+0x28>)
 800240a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800240e:	609a      	str	r2, [r3, #8]
#endif
}
 8002410:	bf00      	nop
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	e000ed00 	.word	0xe000ed00

08002420 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002420:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002458 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002424:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002426:	e003      	b.n	8002430 <LoopCopyDataInit>

08002428 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002428:	4b0c      	ldr	r3, [pc, #48]	; (800245c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800242a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800242c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800242e:	3104      	adds	r1, #4

08002430 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002430:	480b      	ldr	r0, [pc, #44]	; (8002460 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002432:	4b0c      	ldr	r3, [pc, #48]	; (8002464 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002434:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002436:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002438:	d3f6      	bcc.n	8002428 <CopyDataInit>
  ldr  r2, =_sbss
 800243a:	4a0b      	ldr	r2, [pc, #44]	; (8002468 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800243c:	e002      	b.n	8002444 <LoopFillZerobss>

0800243e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800243e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002440:	f842 3b04 	str.w	r3, [r2], #4

08002444 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002444:	4b09      	ldr	r3, [pc, #36]	; (800246c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002446:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002448:	d3f9      	bcc.n	800243e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800244a:	f7ff ffd3 	bl	80023f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800244e:	f012 fce7 	bl	8014e20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002452:	f7fe fbeb 	bl	8000c2c <main>
  bx  lr    
 8002456:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002458:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800245c:	08017cc0 	.word	0x08017cc0
  ldr  r0, =_sdata
 8002460:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002464:	200005e4 	.word	0x200005e4
  ldr  r2, =_sbss
 8002468:	200005e4 	.word	0x200005e4
  ldr  r3, = _ebss
 800246c:	20008b84 	.word	0x20008b84

08002470 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002470:	e7fe      	b.n	8002470 <ADC_IRQHandler>
	...

08002474 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002478:	4b0e      	ldr	r3, [pc, #56]	; (80024b4 <HAL_Init+0x40>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a0d      	ldr	r2, [pc, #52]	; (80024b4 <HAL_Init+0x40>)
 800247e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002482:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002484:	4b0b      	ldr	r3, [pc, #44]	; (80024b4 <HAL_Init+0x40>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a0a      	ldr	r2, [pc, #40]	; (80024b4 <HAL_Init+0x40>)
 800248a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800248e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002490:	4b08      	ldr	r3, [pc, #32]	; (80024b4 <HAL_Init+0x40>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a07      	ldr	r2, [pc, #28]	; (80024b4 <HAL_Init+0x40>)
 8002496:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800249a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800249c:	2003      	movs	r0, #3
 800249e:	f000 fcd0 	bl	8002e42 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024a2:	2000      	movs	r0, #0
 80024a4:	f7ff fe28 	bl	80020f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024a8:	f7ff faf0 	bl	8001a8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	40023c00 	.word	0x40023c00

080024b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024bc:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <HAL_IncTick+0x20>)
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	461a      	mov	r2, r3
 80024c2:	4b06      	ldr	r3, [pc, #24]	; (80024dc <HAL_IncTick+0x24>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4413      	add	r3, r2
 80024c8:	4a04      	ldr	r2, [pc, #16]	; (80024dc <HAL_IncTick+0x24>)
 80024ca:	6013      	str	r3, [r2, #0]
}
 80024cc:	bf00      	nop
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	20000018 	.word	0x20000018
 80024dc:	200071ec 	.word	0x200071ec

080024e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  return uwTick;
 80024e4:	4b03      	ldr	r3, [pc, #12]	; (80024f4 <HAL_GetTick+0x14>)
 80024e6:	681b      	ldr	r3, [r3, #0]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	200071ec 	.word	0x200071ec

080024f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002500:	f7ff ffee 	bl	80024e0 <HAL_GetTick>
 8002504:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002510:	d005      	beq.n	800251e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002512:	4b09      	ldr	r3, [pc, #36]	; (8002538 <HAL_Delay+0x40>)
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	461a      	mov	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	4413      	add	r3, r2
 800251c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800251e:	bf00      	nop
 8002520:	f7ff ffde 	bl	80024e0 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	429a      	cmp	r2, r3
 800252e:	d8f7      	bhi.n	8002520 <HAL_Delay+0x28>
  {
  }
}
 8002530:	bf00      	nop
 8002532:	3710      	adds	r7, #16
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	20000018 	.word	0x20000018

0800253c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002544:	2300      	movs	r3, #0
 8002546:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e033      	b.n	80025ba <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	2b00      	cmp	r3, #0
 8002558:	d109      	bne.n	800256e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f7ff fabe 	bl	8001adc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	f003 0310 	and.w	r3, r3, #16
 8002576:	2b00      	cmp	r3, #0
 8002578:	d118      	bne.n	80025ac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002582:	f023 0302 	bic.w	r3, r3, #2
 8002586:	f043 0202 	orr.w	r2, r3, #2
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 fa2c 	bl	80029ec <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259e:	f023 0303 	bic.w	r3, r3, #3
 80025a2:	f043 0201 	orr.w	r2, r3, #1
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	641a      	str	r2, [r3, #64]	; 0x40
 80025aa:	e001      	b.n	80025b0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80025b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
	...

080025c4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80025d0:	2300      	movs	r3, #0
 80025d2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d101      	bne.n	80025e2 <HAL_ADC_Start_DMA+0x1e>
 80025de:	2302      	movs	r3, #2
 80025e0:	e0cc      	b.n	800277c <HAL_ADC_Start_DMA+0x1b8>
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2201      	movs	r2, #1
 80025e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d018      	beq.n	800262a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	689a      	ldr	r2, [r3, #8]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f042 0201 	orr.w	r2, r2, #1
 8002606:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002608:	4b5e      	ldr	r3, [pc, #376]	; (8002784 <HAL_ADC_Start_DMA+0x1c0>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a5e      	ldr	r2, [pc, #376]	; (8002788 <HAL_ADC_Start_DMA+0x1c4>)
 800260e:	fba2 2303 	umull	r2, r3, r2, r3
 8002612:	0c9a      	lsrs	r2, r3, #18
 8002614:	4613      	mov	r3, r2
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	4413      	add	r3, r2
 800261a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800261c:	e002      	b.n	8002624 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	3b01      	subs	r3, #1
 8002622:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1f9      	bne.n	800261e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b01      	cmp	r3, #1
 8002636:	f040 80a0 	bne.w	800277a <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002642:	f023 0301 	bic.w	r3, r3, #1
 8002646:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002658:	2b00      	cmp	r3, #0
 800265a:	d007      	beq.n	800266c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002660:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002664:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002670:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002674:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002678:	d106      	bne.n	8002688 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267e:	f023 0206 	bic.w	r2, r3, #6
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	645a      	str	r2, [r3, #68]	; 0x44
 8002686:	e002      	b.n	800268e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2200      	movs	r2, #0
 800268c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002696:	4b3d      	ldr	r3, [pc, #244]	; (800278c <HAL_ADC_Start_DMA+0x1c8>)
 8002698:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800269e:	4a3c      	ldr	r2, [pc, #240]	; (8002790 <HAL_ADC_Start_DMA+0x1cc>)
 80026a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a6:	4a3b      	ldr	r2, [pc, #236]	; (8002794 <HAL_ADC_Start_DMA+0x1d0>)
 80026a8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ae:	4a3a      	ldr	r2, [pc, #232]	; (8002798 <HAL_ADC_Start_DMA+0x1d4>)
 80026b0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80026ba:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	685a      	ldr	r2, [r3, #4]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80026ca:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689a      	ldr	r2, [r3, #8]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026da:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	334c      	adds	r3, #76	; 0x4c
 80026e6:	4619      	mov	r1, r3
 80026e8:	68ba      	ldr	r2, [r7, #8]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f000 fc8c 	bl	8003008 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f003 031f 	and.w	r3, r3, #31
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d12a      	bne.n	8002752 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a26      	ldr	r2, [pc, #152]	; (800279c <HAL_ADC_Start_DMA+0x1d8>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d015      	beq.n	8002732 <HAL_ADC_Start_DMA+0x16e>
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a25      	ldr	r2, [pc, #148]	; (80027a0 <HAL_ADC_Start_DMA+0x1dc>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d105      	bne.n	800271c <HAL_ADC_Start_DMA+0x158>
 8002710:	4b1e      	ldr	r3, [pc, #120]	; (800278c <HAL_ADC_Start_DMA+0x1c8>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f003 031f 	and.w	r3, r3, #31
 8002718:	2b00      	cmp	r3, #0
 800271a:	d00a      	beq.n	8002732 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a20      	ldr	r2, [pc, #128]	; (80027a4 <HAL_ADC_Start_DMA+0x1e0>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d129      	bne.n	800277a <HAL_ADC_Start_DMA+0x1b6>
 8002726:	4b19      	ldr	r3, [pc, #100]	; (800278c <HAL_ADC_Start_DMA+0x1c8>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f003 031f 	and.w	r3, r3, #31
 800272e:	2b0f      	cmp	r3, #15
 8002730:	d823      	bhi.n	800277a <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d11c      	bne.n	800277a <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689a      	ldr	r2, [r3, #8]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800274e:	609a      	str	r2, [r3, #8]
 8002750:	e013      	b.n	800277a <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a11      	ldr	r2, [pc, #68]	; (800279c <HAL_ADC_Start_DMA+0x1d8>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d10e      	bne.n	800277a <HAL_ADC_Start_DMA+0x1b6>
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d107      	bne.n	800277a <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689a      	ldr	r2, [r3, #8]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002778:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3718      	adds	r7, #24
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	20000010 	.word	0x20000010
 8002788:	431bde83 	.word	0x431bde83
 800278c:	40012300 	.word	0x40012300
 8002790:	08002be5 	.word	0x08002be5
 8002794:	08002c9f 	.word	0x08002c9f
 8002798:	08002cbb 	.word	0x08002cbb
 800279c:	40012000 	.word	0x40012000
 80027a0:	40012100 	.word	0x40012100
 80027a4:	40012200 	.word	0x40012200

080027a8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80027b2:	2300      	movs	r3, #0
 80027b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d101      	bne.n	80027c4 <HAL_ADC_ConfigChannel+0x1c>
 80027c0:	2302      	movs	r3, #2
 80027c2:	e105      	b.n	80029d0 <HAL_ADC_ConfigChannel+0x228>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2b09      	cmp	r3, #9
 80027d2:	d925      	bls.n	8002820 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68d9      	ldr	r1, [r3, #12]
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	b29b      	uxth	r3, r3
 80027e0:	461a      	mov	r2, r3
 80027e2:	4613      	mov	r3, r2
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	4413      	add	r3, r2
 80027e8:	3b1e      	subs	r3, #30
 80027ea:	2207      	movs	r2, #7
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	43da      	mvns	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	400a      	ands	r2, r1
 80027f8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68d9      	ldr	r1, [r3, #12]
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	689a      	ldr	r2, [r3, #8]
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	b29b      	uxth	r3, r3
 800280a:	4618      	mov	r0, r3
 800280c:	4603      	mov	r3, r0
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	4403      	add	r3, r0
 8002812:	3b1e      	subs	r3, #30
 8002814:	409a      	lsls	r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	430a      	orrs	r2, r1
 800281c:	60da      	str	r2, [r3, #12]
 800281e:	e022      	b.n	8002866 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	6919      	ldr	r1, [r3, #16]
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	b29b      	uxth	r3, r3
 800282c:	461a      	mov	r2, r3
 800282e:	4613      	mov	r3, r2
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	4413      	add	r3, r2
 8002834:	2207      	movs	r2, #7
 8002836:	fa02 f303 	lsl.w	r3, r2, r3
 800283a:	43da      	mvns	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	400a      	ands	r2, r1
 8002842:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6919      	ldr	r1, [r3, #16]
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	689a      	ldr	r2, [r3, #8]
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	b29b      	uxth	r3, r3
 8002854:	4618      	mov	r0, r3
 8002856:	4603      	mov	r3, r0
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	4403      	add	r3, r0
 800285c:	409a      	lsls	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	430a      	orrs	r2, r1
 8002864:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	2b06      	cmp	r3, #6
 800286c:	d824      	bhi.n	80028b8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685a      	ldr	r2, [r3, #4]
 8002878:	4613      	mov	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4413      	add	r3, r2
 800287e:	3b05      	subs	r3, #5
 8002880:	221f      	movs	r2, #31
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	43da      	mvns	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	400a      	ands	r2, r1
 800288e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	b29b      	uxth	r3, r3
 800289c:	4618      	mov	r0, r3
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685a      	ldr	r2, [r3, #4]
 80028a2:	4613      	mov	r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4413      	add	r3, r2
 80028a8:	3b05      	subs	r3, #5
 80028aa:	fa00 f203 	lsl.w	r2, r0, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	430a      	orrs	r2, r1
 80028b4:	635a      	str	r2, [r3, #52]	; 0x34
 80028b6:	e04c      	b.n	8002952 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	2b0c      	cmp	r3, #12
 80028be:	d824      	bhi.n	800290a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	4613      	mov	r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4413      	add	r3, r2
 80028d0:	3b23      	subs	r3, #35	; 0x23
 80028d2:	221f      	movs	r2, #31
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	43da      	mvns	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	400a      	ands	r2, r1
 80028e0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	4618      	mov	r0, r3
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685a      	ldr	r2, [r3, #4]
 80028f4:	4613      	mov	r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	4413      	add	r3, r2
 80028fa:	3b23      	subs	r3, #35	; 0x23
 80028fc:	fa00 f203 	lsl.w	r2, r0, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	430a      	orrs	r2, r1
 8002906:	631a      	str	r2, [r3, #48]	; 0x30
 8002908:	e023      	b.n	8002952 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685a      	ldr	r2, [r3, #4]
 8002914:	4613      	mov	r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	4413      	add	r3, r2
 800291a:	3b41      	subs	r3, #65	; 0x41
 800291c:	221f      	movs	r2, #31
 800291e:	fa02 f303 	lsl.w	r3, r2, r3
 8002922:	43da      	mvns	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	400a      	ands	r2, r1
 800292a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	b29b      	uxth	r3, r3
 8002938:	4618      	mov	r0, r3
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685a      	ldr	r2, [r3, #4]
 800293e:	4613      	mov	r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	4413      	add	r3, r2
 8002944:	3b41      	subs	r3, #65	; 0x41
 8002946:	fa00 f203 	lsl.w	r2, r0, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	430a      	orrs	r2, r1
 8002950:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002952:	4b22      	ldr	r3, [pc, #136]	; (80029dc <HAL_ADC_ConfigChannel+0x234>)
 8002954:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a21      	ldr	r2, [pc, #132]	; (80029e0 <HAL_ADC_ConfigChannel+0x238>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d109      	bne.n	8002974 <HAL_ADC_ConfigChannel+0x1cc>
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2b12      	cmp	r3, #18
 8002966:	d105      	bne.n	8002974 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a19      	ldr	r2, [pc, #100]	; (80029e0 <HAL_ADC_ConfigChannel+0x238>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d123      	bne.n	80029c6 <HAL_ADC_ConfigChannel+0x21e>
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2b10      	cmp	r3, #16
 8002984:	d003      	beq.n	800298e <HAL_ADC_ConfigChannel+0x1e6>
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2b11      	cmp	r3, #17
 800298c:	d11b      	bne.n	80029c6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2b10      	cmp	r3, #16
 80029a0:	d111      	bne.n	80029c6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80029a2:	4b10      	ldr	r3, [pc, #64]	; (80029e4 <HAL_ADC_ConfigChannel+0x23c>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a10      	ldr	r2, [pc, #64]	; (80029e8 <HAL_ADC_ConfigChannel+0x240>)
 80029a8:	fba2 2303 	umull	r2, r3, r2, r3
 80029ac:	0c9a      	lsrs	r2, r3, #18
 80029ae:	4613      	mov	r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	4413      	add	r3, r2
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80029b8:	e002      	b.n	80029c0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	3b01      	subs	r3, #1
 80029be:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1f9      	bne.n	80029ba <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3714      	adds	r7, #20
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr
 80029dc:	40012300 	.word	0x40012300
 80029e0:	40012000 	.word	0x40012000
 80029e4:	20000010 	.word	0x20000010
 80029e8:	431bde83 	.word	0x431bde83

080029ec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029f4:	4b79      	ldr	r3, [pc, #484]	; (8002bdc <ADC_Init+0x1f0>)
 80029f6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	685a      	ldr	r2, [r3, #4]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	431a      	orrs	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	685a      	ldr	r2, [r3, #4]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	6859      	ldr	r1, [r3, #4]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	021a      	lsls	r2, r3, #8
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	430a      	orrs	r2, r1
 8002a34:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	685a      	ldr	r2, [r3, #4]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002a44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	6859      	ldr	r1, [r3, #4]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689a      	ldr	r2, [r3, #8]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	430a      	orrs	r2, r1
 8002a56:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	689a      	ldr	r2, [r3, #8]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6899      	ldr	r1, [r3, #8]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	68da      	ldr	r2, [r3, #12]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	430a      	orrs	r2, r1
 8002a78:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7e:	4a58      	ldr	r2, [pc, #352]	; (8002be0 <ADC_Init+0x1f4>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d022      	beq.n	8002aca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	689a      	ldr	r2, [r3, #8]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a92:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	6899      	ldr	r1, [r3, #8]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	689a      	ldr	r2, [r3, #8]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ab4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	6899      	ldr	r1, [r3, #8]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	609a      	str	r2, [r3, #8]
 8002ac8:	e00f      	b.n	8002aea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ad8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ae8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	689a      	ldr	r2, [r3, #8]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f022 0202 	bic.w	r2, r2, #2
 8002af8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	6899      	ldr	r1, [r3, #8]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	7e1b      	ldrb	r3, [r3, #24]
 8002b04:	005a      	lsls	r2, r3, #1
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d01b      	beq.n	8002b50 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	685a      	ldr	r2, [r3, #4]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b26:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	685a      	ldr	r2, [r3, #4]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002b36:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6859      	ldr	r1, [r3, #4]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b42:	3b01      	subs	r3, #1
 8002b44:	035a      	lsls	r2, r3, #13
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	605a      	str	r2, [r3, #4]
 8002b4e:	e007      	b.n	8002b60 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b5e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002b6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	69db      	ldr	r3, [r3, #28]
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	051a      	lsls	r2, r3, #20
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	430a      	orrs	r2, r1
 8002b84:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	689a      	ldr	r2, [r3, #8]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	6899      	ldr	r1, [r3, #8]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ba2:	025a      	lsls	r2, r3, #9
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	689a      	ldr	r2, [r3, #8]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	6899      	ldr	r1, [r3, #8]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	029a      	lsls	r2, r3, #10
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	609a      	str	r2, [r3, #8]
}
 8002bd0:	bf00      	nop
 8002bd2:	3714      	adds	r7, #20
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr
 8002bdc:	40012300 	.word	0x40012300
 8002be0:	0f000001 	.word	0x0f000001

08002be4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d13c      	bne.n	8002c78 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d12b      	bne.n	8002c70 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d127      	bne.n	8002c70 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c26:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d006      	beq.n	8002c3c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d119      	bne.n	8002c70 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	685a      	ldr	r2, [r3, #4]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f022 0220 	bic.w	r2, r2, #32
 8002c4a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c50:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d105      	bne.n	8002c70 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c68:	f043 0201 	orr.w	r2, r3, #1
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	f011 fbf5 	bl	8014460 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002c76:	e00e      	b.n	8002c96 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7c:	f003 0310 	and.w	r3, r3, #16
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d003      	beq.n	8002c8c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002c84:	68f8      	ldr	r0, [r7, #12]
 8002c86:	f011 fc3f 	bl	8014508 <HAL_ADC_ErrorCallback>
}
 8002c8a:	e004      	b.n	8002c96 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	4798      	blx	r3
}
 8002c96:	bf00      	nop
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b084      	sub	sp, #16
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002caa:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002cac:	68f8      	ldr	r0, [r7, #12]
 8002cae:	f011 fc01 	bl	80144b4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cb2:	bf00      	nop
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b084      	sub	sp, #16
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2240      	movs	r2, #64	; 0x40
 8002ccc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd2:	f043 0204 	orr.w	r2, r3, #4
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f011 fc14 	bl	8014508 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ce0:	bf00      	nop
 8002ce2:	3710      	adds	r7, #16
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <__NVIC_SetPriorityGrouping>:
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f003 0307 	and.w	r3, r3, #7
 8002cf6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cf8:	4b0c      	ldr	r3, [pc, #48]	; (8002d2c <__NVIC_SetPriorityGrouping+0x44>)
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cfe:	68ba      	ldr	r2, [r7, #8]
 8002d00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d04:	4013      	ands	r3, r2
 8002d06:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d1a:	4a04      	ldr	r2, [pc, #16]	; (8002d2c <__NVIC_SetPriorityGrouping+0x44>)
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	60d3      	str	r3, [r2, #12]
}
 8002d20:	bf00      	nop
 8002d22:	3714      	adds	r7, #20
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr
 8002d2c:	e000ed00 	.word	0xe000ed00

08002d30 <__NVIC_GetPriorityGrouping>:
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d34:	4b04      	ldr	r3, [pc, #16]	; (8002d48 <__NVIC_GetPriorityGrouping+0x18>)
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	0a1b      	lsrs	r3, r3, #8
 8002d3a:	f003 0307 	and.w	r3, r3, #7
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr
 8002d48:	e000ed00 	.word	0xe000ed00

08002d4c <__NVIC_EnableIRQ>:
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	4603      	mov	r3, r0
 8002d54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	db0b      	blt.n	8002d76 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d5e:	79fb      	ldrb	r3, [r7, #7]
 8002d60:	f003 021f 	and.w	r2, r3, #31
 8002d64:	4907      	ldr	r1, [pc, #28]	; (8002d84 <__NVIC_EnableIRQ+0x38>)
 8002d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6a:	095b      	lsrs	r3, r3, #5
 8002d6c:	2001      	movs	r0, #1
 8002d6e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002d76:	bf00      	nop
 8002d78:	370c      	adds	r7, #12
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	e000e100 	.word	0xe000e100

08002d88 <__NVIC_SetPriority>:
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	4603      	mov	r3, r0
 8002d90:	6039      	str	r1, [r7, #0]
 8002d92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	db0a      	blt.n	8002db2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	b2da      	uxtb	r2, r3
 8002da0:	490c      	ldr	r1, [pc, #48]	; (8002dd4 <__NVIC_SetPriority+0x4c>)
 8002da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da6:	0112      	lsls	r2, r2, #4
 8002da8:	b2d2      	uxtb	r2, r2
 8002daa:	440b      	add	r3, r1
 8002dac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002db0:	e00a      	b.n	8002dc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	b2da      	uxtb	r2, r3
 8002db6:	4908      	ldr	r1, [pc, #32]	; (8002dd8 <__NVIC_SetPriority+0x50>)
 8002db8:	79fb      	ldrb	r3, [r7, #7]
 8002dba:	f003 030f 	and.w	r3, r3, #15
 8002dbe:	3b04      	subs	r3, #4
 8002dc0:	0112      	lsls	r2, r2, #4
 8002dc2:	b2d2      	uxtb	r2, r2
 8002dc4:	440b      	add	r3, r1
 8002dc6:	761a      	strb	r2, [r3, #24]
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr
 8002dd4:	e000e100 	.word	0xe000e100
 8002dd8:	e000ed00 	.word	0xe000ed00

08002ddc <NVIC_EncodePriority>:
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b089      	sub	sp, #36	; 0x24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f003 0307 	and.w	r3, r3, #7
 8002dee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	f1c3 0307 	rsb	r3, r3, #7
 8002df6:	2b04      	cmp	r3, #4
 8002df8:	bf28      	it	cs
 8002dfa:	2304      	movcs	r3, #4
 8002dfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	3304      	adds	r3, #4
 8002e02:	2b06      	cmp	r3, #6
 8002e04:	d902      	bls.n	8002e0c <NVIC_EncodePriority+0x30>
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	3b03      	subs	r3, #3
 8002e0a:	e000      	b.n	8002e0e <NVIC_EncodePriority+0x32>
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1a:	43da      	mvns	r2, r3
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	401a      	ands	r2, r3
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e2e:	43d9      	mvns	r1, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e34:	4313      	orrs	r3, r2
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3724      	adds	r7, #36	; 0x24
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr

08002e42 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b082      	sub	sp, #8
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f7ff ff4c 	bl	8002ce8 <__NVIC_SetPriorityGrouping>
}
 8002e50:	bf00      	nop
 8002e52:	3708      	adds	r7, #8
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b086      	sub	sp, #24
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	4603      	mov	r3, r0
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
 8002e64:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e66:	2300      	movs	r3, #0
 8002e68:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e6a:	f7ff ff61 	bl	8002d30 <__NVIC_GetPriorityGrouping>
 8002e6e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	68b9      	ldr	r1, [r7, #8]
 8002e74:	6978      	ldr	r0, [r7, #20]
 8002e76:	f7ff ffb1 	bl	8002ddc <NVIC_EncodePriority>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e80:	4611      	mov	r1, r2
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7ff ff80 	bl	8002d88 <__NVIC_SetPriority>
}
 8002e88:	bf00      	nop
 8002e8a:	3718      	adds	r7, #24
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	4603      	mov	r3, r0
 8002e98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7ff ff54 	bl	8002d4c <__NVIC_EnableIRQ>
}
 8002ea4:	bf00      	nop
 8002ea6:	3708      	adds	r7, #8
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002eb8:	f7ff fb12 	bl	80024e0 <HAL_GetTick>
 8002ebc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d101      	bne.n	8002ec8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e099      	b.n	8002ffc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f022 0201 	bic.w	r2, r2, #1
 8002ee6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ee8:	e00f      	b.n	8002f0a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002eea:	f7ff faf9 	bl	80024e0 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b05      	cmp	r3, #5
 8002ef6:	d908      	bls.n	8002f0a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2220      	movs	r2, #32
 8002efc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2203      	movs	r2, #3
 8002f02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e078      	b.n	8002ffc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1e8      	bne.n	8002eea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f20:	697a      	ldr	r2, [r7, #20]
 8002f22:	4b38      	ldr	r3, [pc, #224]	; (8003004 <HAL_DMA_Init+0x158>)
 8002f24:	4013      	ands	r3, r2
 8002f26:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685a      	ldr	r2, [r3, #4]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f36:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a1b      	ldr	r3, [r3, #32]
 8002f54:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f60:	2b04      	cmp	r3, #4
 8002f62:	d107      	bne.n	8002f74 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	697a      	ldr	r2, [r7, #20]
 8002f7a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	f023 0307 	bic.w	r3, r3, #7
 8002f8a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f90:	697a      	ldr	r2, [r7, #20]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9a:	2b04      	cmp	r3, #4
 8002f9c:	d117      	bne.n	8002fce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00e      	beq.n	8002fce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f000 fa9f 	bl	80034f4 <DMA_CheckFifoParam>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d008      	beq.n	8002fce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2240      	movs	r2, #64	; 0x40
 8002fc0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e016      	b.n	8002ffc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 fa56 	bl	8003488 <DMA_CalcBaseAndBitshift>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe4:	223f      	movs	r2, #63	; 0x3f
 8002fe6:	409a      	lsls	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3718      	adds	r7, #24
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	f010803f 	.word	0xf010803f

08003008 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b086      	sub	sp, #24
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
 8003014:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003016:	2300      	movs	r3, #0
 8003018:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800301e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003026:	2b01      	cmp	r3, #1
 8003028:	d101      	bne.n	800302e <HAL_DMA_Start_IT+0x26>
 800302a:	2302      	movs	r3, #2
 800302c:	e040      	b.n	80030b0 <HAL_DMA_Start_IT+0xa8>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2201      	movs	r2, #1
 8003032:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b01      	cmp	r3, #1
 8003040:	d12f      	bne.n	80030a2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2202      	movs	r2, #2
 8003046:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2200      	movs	r2, #0
 800304e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	68b9      	ldr	r1, [r7, #8]
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f000 f9e8 	bl	800342c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003060:	223f      	movs	r2, #63	; 0x3f
 8003062:	409a      	lsls	r2, r3
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f042 0216 	orr.w	r2, r2, #22
 8003076:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307c:	2b00      	cmp	r3, #0
 800307e:	d007      	beq.n	8003090 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f042 0208 	orr.w	r2, r2, #8
 800308e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f042 0201 	orr.w	r2, r2, #1
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	e005      	b.n	80030ae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80030aa:	2302      	movs	r3, #2
 80030ac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80030ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3718      	adds	r7, #24
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d004      	beq.n	80030d6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2280      	movs	r2, #128	; 0x80
 80030d0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e00c      	b.n	80030f0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2205      	movs	r2, #5
 80030da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f022 0201 	bic.w	r2, r2, #1
 80030ec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b086      	sub	sp, #24
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003104:	2300      	movs	r3, #0
 8003106:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003108:	4b92      	ldr	r3, [pc, #584]	; (8003354 <HAL_DMA_IRQHandler+0x258>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a92      	ldr	r2, [pc, #584]	; (8003358 <HAL_DMA_IRQHandler+0x25c>)
 800310e:	fba2 2303 	umull	r2, r3, r2, r3
 8003112:	0a9b      	lsrs	r3, r3, #10
 8003114:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800311a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003126:	2208      	movs	r2, #8
 8003128:	409a      	lsls	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	4013      	ands	r3, r2
 800312e:	2b00      	cmp	r3, #0
 8003130:	d01a      	beq.n	8003168 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0304 	and.w	r3, r3, #4
 800313c:	2b00      	cmp	r3, #0
 800313e:	d013      	beq.n	8003168 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f022 0204 	bic.w	r2, r2, #4
 800314e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003154:	2208      	movs	r2, #8
 8003156:	409a      	lsls	r2, r3
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003160:	f043 0201 	orr.w	r2, r3, #1
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800316c:	2201      	movs	r2, #1
 800316e:	409a      	lsls	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	4013      	ands	r3, r2
 8003174:	2b00      	cmp	r3, #0
 8003176:	d012      	beq.n	800319e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00b      	beq.n	800319e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800318a:	2201      	movs	r2, #1
 800318c:	409a      	lsls	r2, r3
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003196:	f043 0202 	orr.w	r2, r3, #2
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a2:	2204      	movs	r2, #4
 80031a4:	409a      	lsls	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	4013      	ands	r3, r2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d012      	beq.n	80031d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0302 	and.w	r3, r3, #2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00b      	beq.n	80031d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031c0:	2204      	movs	r2, #4
 80031c2:	409a      	lsls	r2, r3
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031cc:	f043 0204 	orr.w	r2, r3, #4
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031d8:	2210      	movs	r2, #16
 80031da:	409a      	lsls	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	4013      	ands	r3, r2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d043      	beq.n	800326c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0308 	and.w	r3, r3, #8
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d03c      	beq.n	800326c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f6:	2210      	movs	r2, #16
 80031f8:	409a      	lsls	r2, r3
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d018      	beq.n	800323e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d108      	bne.n	800322c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321e:	2b00      	cmp	r3, #0
 8003220:	d024      	beq.n	800326c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	4798      	blx	r3
 800322a:	e01f      	b.n	800326c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003230:	2b00      	cmp	r3, #0
 8003232:	d01b      	beq.n	800326c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	4798      	blx	r3
 800323c:	e016      	b.n	800326c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003248:	2b00      	cmp	r3, #0
 800324a:	d107      	bne.n	800325c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f022 0208 	bic.w	r2, r2, #8
 800325a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003260:	2b00      	cmp	r3, #0
 8003262:	d003      	beq.n	800326c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003270:	2220      	movs	r2, #32
 8003272:	409a      	lsls	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	4013      	ands	r3, r2
 8003278:	2b00      	cmp	r3, #0
 800327a:	f000 808e 	beq.w	800339a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0310 	and.w	r3, r3, #16
 8003288:	2b00      	cmp	r3, #0
 800328a:	f000 8086 	beq.w	800339a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003292:	2220      	movs	r2, #32
 8003294:	409a      	lsls	r2, r3
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b05      	cmp	r3, #5
 80032a4:	d136      	bne.n	8003314 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 0216 	bic.w	r2, r2, #22
 80032b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	695a      	ldr	r2, [r3, #20]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d103      	bne.n	80032d6 <HAL_DMA_IRQHandler+0x1da>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d007      	beq.n	80032e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f022 0208 	bic.w	r2, r2, #8
 80032e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ea:	223f      	movs	r2, #63	; 0x3f
 80032ec:	409a      	lsls	r2, r3
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2201      	movs	r2, #1
 80032fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003306:	2b00      	cmp	r3, #0
 8003308:	d07d      	beq.n	8003406 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	4798      	blx	r3
        }
        return;
 8003312:	e078      	b.n	8003406 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d01c      	beq.n	800335c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d108      	bne.n	8003342 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003334:	2b00      	cmp	r3, #0
 8003336:	d030      	beq.n	800339a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	4798      	blx	r3
 8003340:	e02b      	b.n	800339a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003346:	2b00      	cmp	r3, #0
 8003348:	d027      	beq.n	800339a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	4798      	blx	r3
 8003352:	e022      	b.n	800339a <HAL_DMA_IRQHandler+0x29e>
 8003354:	20000010 	.word	0x20000010
 8003358:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003366:	2b00      	cmp	r3, #0
 8003368:	d10f      	bne.n	800338a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f022 0210 	bic.w	r2, r2, #16
 8003378:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2201      	movs	r2, #1
 8003386:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800338e:	2b00      	cmp	r3, #0
 8003390:	d003      	beq.n	800339a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d032      	beq.n	8003408 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d022      	beq.n	80033f4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2205      	movs	r2, #5
 80033b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f022 0201 	bic.w	r2, r2, #1
 80033c4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	3301      	adds	r3, #1
 80033ca:	60bb      	str	r3, [r7, #8]
 80033cc:	697a      	ldr	r2, [r7, #20]
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d307      	bcc.n	80033e2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0301 	and.w	r3, r3, #1
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1f2      	bne.n	80033c6 <HAL_DMA_IRQHandler+0x2ca>
 80033e0:	e000      	b.n	80033e4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80033e2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d005      	beq.n	8003408 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	4798      	blx	r3
 8003404:	e000      	b.n	8003408 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003406:	bf00      	nop
    }
  }
}
 8003408:	3718      	adds	r7, #24
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop

08003410 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800341e:	b2db      	uxtb	r3, r3
}
 8003420:	4618      	mov	r0, r3
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
 8003438:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003448:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	683a      	ldr	r2, [r7, #0]
 8003450:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	2b40      	cmp	r3, #64	; 0x40
 8003458:	d108      	bne.n	800346c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68ba      	ldr	r2, [r7, #8]
 8003468:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800346a:	e007      	b.n	800347c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68ba      	ldr	r2, [r7, #8]
 8003472:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	60da      	str	r2, [r3, #12]
}
 800347c:	bf00      	nop
 800347e:	3714      	adds	r7, #20
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	b2db      	uxtb	r3, r3
 8003496:	3b10      	subs	r3, #16
 8003498:	4a14      	ldr	r2, [pc, #80]	; (80034ec <DMA_CalcBaseAndBitshift+0x64>)
 800349a:	fba2 2303 	umull	r2, r3, r2, r3
 800349e:	091b      	lsrs	r3, r3, #4
 80034a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80034a2:	4a13      	ldr	r2, [pc, #76]	; (80034f0 <DMA_CalcBaseAndBitshift+0x68>)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	4413      	add	r3, r2
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	461a      	mov	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2b03      	cmp	r3, #3
 80034b4:	d909      	bls.n	80034ca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80034be:	f023 0303 	bic.w	r3, r3, #3
 80034c2:	1d1a      	adds	r2, r3, #4
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	659a      	str	r2, [r3, #88]	; 0x58
 80034c8:	e007      	b.n	80034da <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80034d2:	f023 0303 	bic.w	r3, r3, #3
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3714      	adds	r7, #20
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	aaaaaaab 	.word	0xaaaaaaab
 80034f0:	08016334 	.word	0x08016334

080034f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034fc:	2300      	movs	r3, #0
 80034fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003504:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d11f      	bne.n	800354e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	2b03      	cmp	r3, #3
 8003512:	d855      	bhi.n	80035c0 <DMA_CheckFifoParam+0xcc>
 8003514:	a201      	add	r2, pc, #4	; (adr r2, 800351c <DMA_CheckFifoParam+0x28>)
 8003516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800351a:	bf00      	nop
 800351c:	0800352d 	.word	0x0800352d
 8003520:	0800353f 	.word	0x0800353f
 8003524:	0800352d 	.word	0x0800352d
 8003528:	080035c1 	.word	0x080035c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003530:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d045      	beq.n	80035c4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800353c:	e042      	b.n	80035c4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003542:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003546:	d13f      	bne.n	80035c8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800354c:	e03c      	b.n	80035c8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003556:	d121      	bne.n	800359c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	2b03      	cmp	r3, #3
 800355c:	d836      	bhi.n	80035cc <DMA_CheckFifoParam+0xd8>
 800355e:	a201      	add	r2, pc, #4	; (adr r2, 8003564 <DMA_CheckFifoParam+0x70>)
 8003560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003564:	08003575 	.word	0x08003575
 8003568:	0800357b 	.word	0x0800357b
 800356c:	08003575 	.word	0x08003575
 8003570:	0800358d 	.word	0x0800358d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	73fb      	strb	r3, [r7, #15]
      break;
 8003578:	e02f      	b.n	80035da <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d024      	beq.n	80035d0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800358a:	e021      	b.n	80035d0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003590:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003594:	d11e      	bne.n	80035d4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800359a:	e01b      	b.n	80035d4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d902      	bls.n	80035a8 <DMA_CheckFifoParam+0xb4>
 80035a2:	2b03      	cmp	r3, #3
 80035a4:	d003      	beq.n	80035ae <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80035a6:	e018      	b.n	80035da <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	73fb      	strb	r3, [r7, #15]
      break;
 80035ac:	e015      	b.n	80035da <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00e      	beq.n	80035d8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	73fb      	strb	r3, [r7, #15]
      break;
 80035be:	e00b      	b.n	80035d8 <DMA_CheckFifoParam+0xe4>
      break;
 80035c0:	bf00      	nop
 80035c2:	e00a      	b.n	80035da <DMA_CheckFifoParam+0xe6>
      break;
 80035c4:	bf00      	nop
 80035c6:	e008      	b.n	80035da <DMA_CheckFifoParam+0xe6>
      break;
 80035c8:	bf00      	nop
 80035ca:	e006      	b.n	80035da <DMA_CheckFifoParam+0xe6>
      break;
 80035cc:	bf00      	nop
 80035ce:	e004      	b.n	80035da <DMA_CheckFifoParam+0xe6>
      break;
 80035d0:	bf00      	nop
 80035d2:	e002      	b.n	80035da <DMA_CheckFifoParam+0xe6>
      break;   
 80035d4:	bf00      	nop
 80035d6:	e000      	b.n	80035da <DMA_CheckFifoParam+0xe6>
      break;
 80035d8:	bf00      	nop
    }
  } 
  
  return status; 
 80035da:	7bfb      	ldrb	r3, [r7, #15]
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3714      	adds	r7, #20
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b089      	sub	sp, #36	; 0x24
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80035f2:	2300      	movs	r3, #0
 80035f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80035f6:	2300      	movs	r3, #0
 80035f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80035fa:	2300      	movs	r3, #0
 80035fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035fe:	2300      	movs	r3, #0
 8003600:	61fb      	str	r3, [r7, #28]
 8003602:	e16b      	b.n	80038dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003604:	2201      	movs	r2, #1
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	fa02 f303 	lsl.w	r3, r2, r3
 800360c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	4013      	ands	r3, r2
 8003616:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003618:	693a      	ldr	r2, [r7, #16]
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	429a      	cmp	r2, r3
 800361e:	f040 815a 	bne.w	80038d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d00b      	beq.n	8003642 <HAL_GPIO_Init+0x5a>
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	2b02      	cmp	r3, #2
 8003630:	d007      	beq.n	8003642 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003636:	2b11      	cmp	r3, #17
 8003638:	d003      	beq.n	8003642 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	2b12      	cmp	r3, #18
 8003640:	d130      	bne.n	80036a4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	005b      	lsls	r3, r3, #1
 800364c:	2203      	movs	r2, #3
 800364e:	fa02 f303 	lsl.w	r3, r2, r3
 8003652:	43db      	mvns	r3, r3
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	4013      	ands	r3, r2
 8003658:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	68da      	ldr	r2, [r3, #12]
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	fa02 f303 	lsl.w	r3, r2, r3
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	4313      	orrs	r3, r2
 800366a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003678:	2201      	movs	r2, #1
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	fa02 f303 	lsl.w	r3, r2, r3
 8003680:	43db      	mvns	r3, r3
 8003682:	69ba      	ldr	r2, [r7, #24]
 8003684:	4013      	ands	r3, r2
 8003686:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	091b      	lsrs	r3, r3, #4
 800368e:	f003 0201 	and.w	r2, r3, #1
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	fa02 f303 	lsl.w	r3, r2, r3
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	4313      	orrs	r3, r2
 800369c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	2203      	movs	r2, #3
 80036b0:	fa02 f303 	lsl.w	r3, r2, r3
 80036b4:	43db      	mvns	r3, r3
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	4013      	ands	r3, r2
 80036ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	689a      	ldr	r2, [r3, #8]
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	005b      	lsls	r3, r3, #1
 80036c4:	fa02 f303 	lsl.w	r3, r2, r3
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d003      	beq.n	80036e4 <HAL_GPIO_Init+0xfc>
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	2b12      	cmp	r3, #18
 80036e2:	d123      	bne.n	800372c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	08da      	lsrs	r2, r3, #3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	3208      	adds	r2, #8
 80036ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	f003 0307 	and.w	r3, r3, #7
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	220f      	movs	r2, #15
 80036fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003700:	43db      	mvns	r3, r3
 8003702:	69ba      	ldr	r2, [r7, #24]
 8003704:	4013      	ands	r3, r2
 8003706:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	691a      	ldr	r2, [r3, #16]
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	f003 0307 	and.w	r3, r3, #7
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	4313      	orrs	r3, r2
 800371c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	08da      	lsrs	r2, r3, #3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	3208      	adds	r2, #8
 8003726:	69b9      	ldr	r1, [r7, #24]
 8003728:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	2203      	movs	r2, #3
 8003738:	fa02 f303 	lsl.w	r3, r2, r3
 800373c:	43db      	mvns	r3, r3
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	4013      	ands	r3, r2
 8003742:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f003 0203 	and.w	r2, r3, #3
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	005b      	lsls	r3, r3, #1
 8003750:	fa02 f303 	lsl.w	r3, r2, r3
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	4313      	orrs	r3, r2
 8003758:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	69ba      	ldr	r2, [r7, #24]
 800375e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003768:	2b00      	cmp	r3, #0
 800376a:	f000 80b4 	beq.w	80038d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800376e:	2300      	movs	r3, #0
 8003770:	60fb      	str	r3, [r7, #12]
 8003772:	4b5f      	ldr	r3, [pc, #380]	; (80038f0 <HAL_GPIO_Init+0x308>)
 8003774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003776:	4a5e      	ldr	r2, [pc, #376]	; (80038f0 <HAL_GPIO_Init+0x308>)
 8003778:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800377c:	6453      	str	r3, [r2, #68]	; 0x44
 800377e:	4b5c      	ldr	r3, [pc, #368]	; (80038f0 <HAL_GPIO_Init+0x308>)
 8003780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003782:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003786:	60fb      	str	r3, [r7, #12]
 8003788:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800378a:	4a5a      	ldr	r2, [pc, #360]	; (80038f4 <HAL_GPIO_Init+0x30c>)
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	089b      	lsrs	r3, r3, #2
 8003790:	3302      	adds	r3, #2
 8003792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003796:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	f003 0303 	and.w	r3, r3, #3
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	220f      	movs	r2, #15
 80037a2:	fa02 f303 	lsl.w	r3, r2, r3
 80037a6:	43db      	mvns	r3, r3
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	4013      	ands	r3, r2
 80037ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a51      	ldr	r2, [pc, #324]	; (80038f8 <HAL_GPIO_Init+0x310>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d02b      	beq.n	800380e <HAL_GPIO_Init+0x226>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a50      	ldr	r2, [pc, #320]	; (80038fc <HAL_GPIO_Init+0x314>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d025      	beq.n	800380a <HAL_GPIO_Init+0x222>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a4f      	ldr	r2, [pc, #316]	; (8003900 <HAL_GPIO_Init+0x318>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d01f      	beq.n	8003806 <HAL_GPIO_Init+0x21e>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a4e      	ldr	r2, [pc, #312]	; (8003904 <HAL_GPIO_Init+0x31c>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d019      	beq.n	8003802 <HAL_GPIO_Init+0x21a>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a4d      	ldr	r2, [pc, #308]	; (8003908 <HAL_GPIO_Init+0x320>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d013      	beq.n	80037fe <HAL_GPIO_Init+0x216>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a4c      	ldr	r2, [pc, #304]	; (800390c <HAL_GPIO_Init+0x324>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d00d      	beq.n	80037fa <HAL_GPIO_Init+0x212>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a4b      	ldr	r2, [pc, #300]	; (8003910 <HAL_GPIO_Init+0x328>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d007      	beq.n	80037f6 <HAL_GPIO_Init+0x20e>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a4a      	ldr	r2, [pc, #296]	; (8003914 <HAL_GPIO_Init+0x32c>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d101      	bne.n	80037f2 <HAL_GPIO_Init+0x20a>
 80037ee:	2307      	movs	r3, #7
 80037f0:	e00e      	b.n	8003810 <HAL_GPIO_Init+0x228>
 80037f2:	2308      	movs	r3, #8
 80037f4:	e00c      	b.n	8003810 <HAL_GPIO_Init+0x228>
 80037f6:	2306      	movs	r3, #6
 80037f8:	e00a      	b.n	8003810 <HAL_GPIO_Init+0x228>
 80037fa:	2305      	movs	r3, #5
 80037fc:	e008      	b.n	8003810 <HAL_GPIO_Init+0x228>
 80037fe:	2304      	movs	r3, #4
 8003800:	e006      	b.n	8003810 <HAL_GPIO_Init+0x228>
 8003802:	2303      	movs	r3, #3
 8003804:	e004      	b.n	8003810 <HAL_GPIO_Init+0x228>
 8003806:	2302      	movs	r3, #2
 8003808:	e002      	b.n	8003810 <HAL_GPIO_Init+0x228>
 800380a:	2301      	movs	r3, #1
 800380c:	e000      	b.n	8003810 <HAL_GPIO_Init+0x228>
 800380e:	2300      	movs	r3, #0
 8003810:	69fa      	ldr	r2, [r7, #28]
 8003812:	f002 0203 	and.w	r2, r2, #3
 8003816:	0092      	lsls	r2, r2, #2
 8003818:	4093      	lsls	r3, r2
 800381a:	69ba      	ldr	r2, [r7, #24]
 800381c:	4313      	orrs	r3, r2
 800381e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003820:	4934      	ldr	r1, [pc, #208]	; (80038f4 <HAL_GPIO_Init+0x30c>)
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	089b      	lsrs	r3, r3, #2
 8003826:	3302      	adds	r3, #2
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800382e:	4b3a      	ldr	r3, [pc, #232]	; (8003918 <HAL_GPIO_Init+0x330>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	43db      	mvns	r3, r3
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	4013      	ands	r3, r2
 800383c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d003      	beq.n	8003852 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800384a:	69ba      	ldr	r2, [r7, #24]
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	4313      	orrs	r3, r2
 8003850:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003852:	4a31      	ldr	r2, [pc, #196]	; (8003918 <HAL_GPIO_Init+0x330>)
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003858:	4b2f      	ldr	r3, [pc, #188]	; (8003918 <HAL_GPIO_Init+0x330>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	43db      	mvns	r3, r3
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	4013      	ands	r3, r2
 8003866:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d003      	beq.n	800387c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	4313      	orrs	r3, r2
 800387a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800387c:	4a26      	ldr	r2, [pc, #152]	; (8003918 <HAL_GPIO_Init+0x330>)
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003882:	4b25      	ldr	r3, [pc, #148]	; (8003918 <HAL_GPIO_Init+0x330>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	43db      	mvns	r3, r3
 800388c:	69ba      	ldr	r2, [r7, #24]
 800388e:	4013      	ands	r3, r2
 8003890:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d003      	beq.n	80038a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038a6:	4a1c      	ldr	r2, [pc, #112]	; (8003918 <HAL_GPIO_Init+0x330>)
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038ac:	4b1a      	ldr	r3, [pc, #104]	; (8003918 <HAL_GPIO_Init+0x330>)
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	43db      	mvns	r3, r3
 80038b6:	69ba      	ldr	r2, [r7, #24]
 80038b8:	4013      	ands	r3, r2
 80038ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d003      	beq.n	80038d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80038c8:	69ba      	ldr	r2, [r7, #24]
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038d0:	4a11      	ldr	r2, [pc, #68]	; (8003918 <HAL_GPIO_Init+0x330>)
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	3301      	adds	r3, #1
 80038da:	61fb      	str	r3, [r7, #28]
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	2b0f      	cmp	r3, #15
 80038e0:	f67f ae90 	bls.w	8003604 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80038e4:	bf00      	nop
 80038e6:	3724      	adds	r7, #36	; 0x24
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr
 80038f0:	40023800 	.word	0x40023800
 80038f4:	40013800 	.word	0x40013800
 80038f8:	40020000 	.word	0x40020000
 80038fc:	40020400 	.word	0x40020400
 8003900:	40020800 	.word	0x40020800
 8003904:	40020c00 	.word	0x40020c00
 8003908:	40021000 	.word	0x40021000
 800390c:	40021400 	.word	0x40021400
 8003910:	40021800 	.word	0x40021800
 8003914:	40021c00 	.word	0x40021c00
 8003918:	40013c00 	.word	0x40013c00

0800391c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	460b      	mov	r3, r1
 8003926:	807b      	strh	r3, [r7, #2]
 8003928:	4613      	mov	r3, r2
 800392a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800392c:	787b      	ldrb	r3, [r7, #1]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d003      	beq.n	800393a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003932:	887a      	ldrh	r2, [r7, #2]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003938:	e003      	b.n	8003942 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800393a:	887b      	ldrh	r3, [r7, #2]
 800393c:	041a      	lsls	r2, r3, #16
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	619a      	str	r2, [r3, #24]
}
 8003942:	bf00      	nop
 8003944:	370c      	adds	r7, #12
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr

0800394e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800394e:	b480      	push	{r7}
 8003950:	b083      	sub	sp, #12
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
 8003956:	460b      	mov	r3, r1
 8003958:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	695a      	ldr	r2, [r3, #20]
 800395e:	887b      	ldrh	r3, [r7, #2]
 8003960:	401a      	ands	r2, r3
 8003962:	887b      	ldrh	r3, [r7, #2]
 8003964:	429a      	cmp	r2, r3
 8003966:	d104      	bne.n	8003972 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003968:	887b      	ldrh	r3, [r7, #2]
 800396a:	041a      	lsls	r2, r3, #16
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003970:	e002      	b.n	8003978 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003972:	887a      	ldrh	r2, [r7, #2]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	619a      	str	r2, [r3, #24]
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d101      	bne.n	8003996 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e11f      	b.n	8003bd6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d106      	bne.n	80039b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f7fe f946 	bl	8001c3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2224      	movs	r2, #36	; 0x24
 80039b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f022 0201 	bic.w	r2, r2, #1
 80039c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80039e8:	f003 ffbc 	bl	8007964 <HAL_RCC_GetPCLK1Freq>
 80039ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	4a7b      	ldr	r2, [pc, #492]	; (8003be0 <HAL_I2C_Init+0x25c>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d807      	bhi.n	8003a08 <HAL_I2C_Init+0x84>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	4a7a      	ldr	r2, [pc, #488]	; (8003be4 <HAL_I2C_Init+0x260>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	bf94      	ite	ls
 8003a00:	2301      	movls	r3, #1
 8003a02:	2300      	movhi	r3, #0
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	e006      	b.n	8003a16 <HAL_I2C_Init+0x92>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	4a77      	ldr	r2, [pc, #476]	; (8003be8 <HAL_I2C_Init+0x264>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	bf94      	ite	ls
 8003a10:	2301      	movls	r3, #1
 8003a12:	2300      	movhi	r3, #0
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e0db      	b.n	8003bd6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	4a72      	ldr	r2, [pc, #456]	; (8003bec <HAL_I2C_Init+0x268>)
 8003a22:	fba2 2303 	umull	r2, r3, r2, r3
 8003a26:	0c9b      	lsrs	r3, r3, #18
 8003a28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68ba      	ldr	r2, [r7, #8]
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	6a1b      	ldr	r3, [r3, #32]
 8003a44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	4a64      	ldr	r2, [pc, #400]	; (8003be0 <HAL_I2C_Init+0x25c>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d802      	bhi.n	8003a58 <HAL_I2C_Init+0xd4>
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	3301      	adds	r3, #1
 8003a56:	e009      	b.n	8003a6c <HAL_I2C_Init+0xe8>
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003a5e:	fb02 f303 	mul.w	r3, r2, r3
 8003a62:	4a63      	ldr	r2, [pc, #396]	; (8003bf0 <HAL_I2C_Init+0x26c>)
 8003a64:	fba2 2303 	umull	r2, r3, r2, r3
 8003a68:	099b      	lsrs	r3, r3, #6
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	6812      	ldr	r2, [r2, #0]
 8003a70:	430b      	orrs	r3, r1
 8003a72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	69db      	ldr	r3, [r3, #28]
 8003a7a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003a7e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	4956      	ldr	r1, [pc, #344]	; (8003be0 <HAL_I2C_Init+0x25c>)
 8003a88:	428b      	cmp	r3, r1
 8003a8a:	d80d      	bhi.n	8003aa8 <HAL_I2C_Init+0x124>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	1e59      	subs	r1, r3, #1
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	005b      	lsls	r3, r3, #1
 8003a96:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aa0:	2b04      	cmp	r3, #4
 8003aa2:	bf38      	it	cc
 8003aa4:	2304      	movcc	r3, #4
 8003aa6:	e04f      	b.n	8003b48 <HAL_I2C_Init+0x1c4>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d111      	bne.n	8003ad4 <HAL_I2C_Init+0x150>
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	1e58      	subs	r0, r3, #1
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6859      	ldr	r1, [r3, #4]
 8003ab8:	460b      	mov	r3, r1
 8003aba:	005b      	lsls	r3, r3, #1
 8003abc:	440b      	add	r3, r1
 8003abe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	bf0c      	ite	eq
 8003acc:	2301      	moveq	r3, #1
 8003ace:	2300      	movne	r3, #0
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	e012      	b.n	8003afa <HAL_I2C_Init+0x176>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	1e58      	subs	r0, r3, #1
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6859      	ldr	r1, [r3, #4]
 8003adc:	460b      	mov	r3, r1
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	440b      	add	r3, r1
 8003ae2:	0099      	lsls	r1, r3, #2
 8003ae4:	440b      	add	r3, r1
 8003ae6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aea:	3301      	adds	r3, #1
 8003aec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	bf0c      	ite	eq
 8003af4:	2301      	moveq	r3, #1
 8003af6:	2300      	movne	r3, #0
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <HAL_I2C_Init+0x17e>
 8003afe:	2301      	movs	r3, #1
 8003b00:	e022      	b.n	8003b48 <HAL_I2C_Init+0x1c4>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10e      	bne.n	8003b28 <HAL_I2C_Init+0x1a4>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	1e58      	subs	r0, r3, #1
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6859      	ldr	r1, [r3, #4]
 8003b12:	460b      	mov	r3, r1
 8003b14:	005b      	lsls	r3, r3, #1
 8003b16:	440b      	add	r3, r1
 8003b18:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b26:	e00f      	b.n	8003b48 <HAL_I2C_Init+0x1c4>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	1e58      	subs	r0, r3, #1
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6859      	ldr	r1, [r3, #4]
 8003b30:	460b      	mov	r3, r1
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	440b      	add	r3, r1
 8003b36:	0099      	lsls	r1, r3, #2
 8003b38:	440b      	add	r3, r1
 8003b3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b3e:	3301      	adds	r3, #1
 8003b40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b48:	6879      	ldr	r1, [r7, #4]
 8003b4a:	6809      	ldr	r1, [r1, #0]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	69da      	ldr	r2, [r3, #28]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	431a      	orrs	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b76:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	6911      	ldr	r1, [r2, #16]
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	68d2      	ldr	r2, [r2, #12]
 8003b82:	4311      	orrs	r1, r2
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	6812      	ldr	r2, [r2, #0]
 8003b88:	430b      	orrs	r3, r1
 8003b8a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	695a      	ldr	r2, [r3, #20]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f042 0201 	orr.w	r2, r2, #1
 8003bb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2220      	movs	r2, #32
 8003bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	000186a0 	.word	0x000186a0
 8003be4:	001e847f 	.word	0x001e847f
 8003be8:	003d08ff 	.word	0x003d08ff
 8003bec:	431bde83 	.word	0x431bde83
 8003bf0:	10624dd3 	.word	0x10624dd3

08003bf4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b088      	sub	sp, #32
 8003bf8:	af02      	add	r7, sp, #8
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	4608      	mov	r0, r1
 8003bfe:	4611      	mov	r1, r2
 8003c00:	461a      	mov	r2, r3
 8003c02:	4603      	mov	r3, r0
 8003c04:	817b      	strh	r3, [r7, #10]
 8003c06:	460b      	mov	r3, r1
 8003c08:	813b      	strh	r3, [r7, #8]
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c0e:	f7fe fc67 	bl	80024e0 <HAL_GetTick>
 8003c12:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	2b20      	cmp	r3, #32
 8003c1e:	f040 80d9 	bne.w	8003dd4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	9300      	str	r3, [sp, #0]
 8003c26:	2319      	movs	r3, #25
 8003c28:	2201      	movs	r2, #1
 8003c2a:	496d      	ldr	r1, [pc, #436]	; (8003de0 <HAL_I2C_Mem_Write+0x1ec>)
 8003c2c:	68f8      	ldr	r0, [r7, #12]
 8003c2e:	f001 ff07 	bl	8005a40 <I2C_WaitOnFlagUntilTimeout>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d001      	beq.n	8003c3c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003c38:	2302      	movs	r3, #2
 8003c3a:	e0cc      	b.n	8003dd6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d101      	bne.n	8003c4a <HAL_I2C_Mem_Write+0x56>
 8003c46:	2302      	movs	r3, #2
 8003c48:	e0c5      	b.n	8003dd6 <HAL_I2C_Mem_Write+0x1e2>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0301 	and.w	r3, r3, #1
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d007      	beq.n	8003c70 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f042 0201 	orr.w	r2, r2, #1
 8003c6e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c7e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2221      	movs	r2, #33	; 0x21
 8003c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2240      	movs	r2, #64	; 0x40
 8003c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6a3a      	ldr	r2, [r7, #32]
 8003c9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003ca0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	4a4d      	ldr	r2, [pc, #308]	; (8003de4 <HAL_I2C_Mem_Write+0x1f0>)
 8003cb0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003cb2:	88f8      	ldrh	r0, [r7, #6]
 8003cb4:	893a      	ldrh	r2, [r7, #8]
 8003cb6:	8979      	ldrh	r1, [r7, #10]
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	9301      	str	r3, [sp, #4]
 8003cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cbe:	9300      	str	r3, [sp, #0]
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	68f8      	ldr	r0, [r7, #12]
 8003cc4:	f001 fd7e 	bl	80057c4 <I2C_RequestMemoryWrite>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d052      	beq.n	8003d74 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e081      	b.n	8003dd6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cd6:	68f8      	ldr	r0, [r7, #12]
 8003cd8:	f001 ff88 	bl	8005bec <I2C_WaitOnTXEFlagUntilTimeout>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00d      	beq.n	8003cfe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce6:	2b04      	cmp	r3, #4
 8003ce8:	d107      	bne.n	8003cfa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cf8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e06b      	b.n	8003dd6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d02:	781a      	ldrb	r2, [r3, #0]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0e:	1c5a      	adds	r2, r3, #1
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	b29a      	uxth	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	3b01      	subs	r3, #1
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	695b      	ldr	r3, [r3, #20]
 8003d34:	f003 0304 	and.w	r3, r3, #4
 8003d38:	2b04      	cmp	r3, #4
 8003d3a:	d11b      	bne.n	8003d74 <HAL_I2C_Mem_Write+0x180>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d017      	beq.n	8003d74 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d48:	781a      	ldrb	r2, [r3, #0]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d54:	1c5a      	adds	r2, r3, #1
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	b29a      	uxth	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	b29a      	uxth	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1aa      	bne.n	8003cd2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f001 ff74 	bl	8005c6e <I2C_WaitOnBTFFlagUntilTimeout>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00d      	beq.n	8003da8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d90:	2b04      	cmp	r3, #4
 8003d92:	d107      	bne.n	8003da4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003da2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e016      	b.n	8003dd6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003db6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2220      	movs	r2, #32
 8003dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	e000      	b.n	8003dd6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003dd4:	2302      	movs	r3, #2
  }
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3718      	adds	r7, #24
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	00100002 	.word	0x00100002
 8003de4:	ffff0000 	.word	0xffff0000

08003de8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b08a      	sub	sp, #40	; 0x28
 8003dec:	af02      	add	r7, sp, #8
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	607a      	str	r2, [r7, #4]
 8003df2:	603b      	str	r3, [r7, #0]
 8003df4:	460b      	mov	r3, r1
 8003df6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003df8:	f7fe fb72 	bl	80024e0 <HAL_GetTick>
 8003dfc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	2b20      	cmp	r3, #32
 8003e0c:	f040 8111 	bne.w	8004032 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	9300      	str	r3, [sp, #0]
 8003e14:	2319      	movs	r3, #25
 8003e16:	2201      	movs	r2, #1
 8003e18:	4988      	ldr	r1, [pc, #544]	; (800403c <HAL_I2C_IsDeviceReady+0x254>)
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f001 fe10 	bl	8005a40 <I2C_WaitOnFlagUntilTimeout>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003e26:	2302      	movs	r3, #2
 8003e28:	e104      	b.n	8004034 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d101      	bne.n	8003e38 <HAL_I2C_IsDeviceReady+0x50>
 8003e34:	2302      	movs	r3, #2
 8003e36:	e0fd      	b.n	8004034 <HAL_I2C_IsDeviceReady+0x24c>
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d007      	beq.n	8003e5e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f042 0201 	orr.w	r2, r2, #1
 8003e5c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e6c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2224      	movs	r2, #36	; 0x24
 8003e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	4a70      	ldr	r2, [pc, #448]	; (8004040 <HAL_I2C_IsDeviceReady+0x258>)
 8003e80:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e90:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	9300      	str	r3, [sp, #0]
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f001 fdce 	bl	8005a40 <I2C_WaitOnFlagUntilTimeout>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00d      	beq.n	8003ec6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eb8:	d103      	bne.n	8003ec2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ec0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e0b6      	b.n	8004034 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ec6:	897b      	ldrh	r3, [r7, #10]
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	461a      	mov	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ed4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003ed6:	f7fe fb03 	bl	80024e0 <HAL_GetTick>
 8003eda:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	bf0c      	ite	eq
 8003eea:	2301      	moveq	r3, #1
 8003eec:	2300      	movne	r3, #0
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	695b      	ldr	r3, [r3, #20]
 8003ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003efc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f00:	bf0c      	ite	eq
 8003f02:	2301      	moveq	r3, #1
 8003f04:	2300      	movne	r3, #0
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003f0a:	e025      	b.n	8003f58 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003f0c:	f7fe fae8 	bl	80024e0 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	683a      	ldr	r2, [r7, #0]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d302      	bcc.n	8003f22 <HAL_I2C_IsDeviceReady+0x13a>
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d103      	bne.n	8003f2a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	22a0      	movs	r2, #160	; 0xa0
 8003f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	695b      	ldr	r3, [r3, #20]
 8003f30:	f003 0302 	and.w	r3, r3, #2
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	bf0c      	ite	eq
 8003f38:	2301      	moveq	r3, #1
 8003f3a:	2300      	movne	r3, #0
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f4e:	bf0c      	ite	eq
 8003f50:	2301      	moveq	r3, #1
 8003f52:	2300      	movne	r3, #0
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	2ba0      	cmp	r3, #160	; 0xa0
 8003f62:	d005      	beq.n	8003f70 <HAL_I2C_IsDeviceReady+0x188>
 8003f64:	7dfb      	ldrb	r3, [r7, #23]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d102      	bne.n	8003f70 <HAL_I2C_IsDeviceReady+0x188>
 8003f6a:	7dbb      	ldrb	r3, [r7, #22]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d0cd      	beq.n	8003f0c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2220      	movs	r2, #32
 8003f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d129      	bne.n	8003fda <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f94:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f96:	2300      	movs	r3, #0
 8003f98:	613b      	str	r3, [r7, #16]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	695b      	ldr	r3, [r3, #20]
 8003fa0:	613b      	str	r3, [r7, #16]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	613b      	str	r3, [r7, #16]
 8003faa:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	9300      	str	r3, [sp, #0]
 8003fb0:	2319      	movs	r3, #25
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	4921      	ldr	r1, [pc, #132]	; (800403c <HAL_I2C_IsDeviceReady+0x254>)
 8003fb6:	68f8      	ldr	r0, [r7, #12]
 8003fb8:	f001 fd42 	bl	8005a40 <I2C_WaitOnFlagUntilTimeout>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d001      	beq.n	8003fc6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e036      	b.n	8004034 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2220      	movs	r2, #32
 8003fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	e02c      	b.n	8004034 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fe8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ff2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	9300      	str	r3, [sp, #0]
 8003ff8:	2319      	movs	r3, #25
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	490f      	ldr	r1, [pc, #60]	; (800403c <HAL_I2C_IsDeviceReady+0x254>)
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	f001 fd1e 	bl	8005a40 <I2C_WaitOnFlagUntilTimeout>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d001      	beq.n	800400e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e012      	b.n	8004034 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	3301      	adds	r3, #1
 8004012:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004014:	69ba      	ldr	r2, [r7, #24]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	429a      	cmp	r2, r3
 800401a:	f4ff af32 	bcc.w	8003e82 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2220      	movs	r2, #32
 8004022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e000      	b.n	8004034 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004032:	2302      	movs	r3, #2
  }
}
 8004034:	4618      	mov	r0, r3
 8004036:	3720      	adds	r7, #32
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	00100002 	.word	0x00100002
 8004040:	ffff0000 	.word	0xffff0000

08004044 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b088      	sub	sp, #32
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800404c:	2300      	movs	r3, #0
 800404e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004064:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800406c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800406e:	7bfb      	ldrb	r3, [r7, #15]
 8004070:	2b10      	cmp	r3, #16
 8004072:	d003      	beq.n	800407c <HAL_I2C_EV_IRQHandler+0x38>
 8004074:	7bfb      	ldrb	r3, [r7, #15]
 8004076:	2b40      	cmp	r3, #64	; 0x40
 8004078:	f040 80bd 	bne.w	80041f6 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b00      	cmp	r3, #0
 8004094:	d10d      	bne.n	80040b2 <HAL_I2C_EV_IRQHandler+0x6e>
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800409c:	d003      	beq.n	80040a6 <HAL_I2C_EV_IRQHandler+0x62>
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80040a4:	d101      	bne.n	80040aa <HAL_I2C_EV_IRQHandler+0x66>
 80040a6:	2301      	movs	r3, #1
 80040a8:	e000      	b.n	80040ac <HAL_I2C_EV_IRQHandler+0x68>
 80040aa:	2300      	movs	r3, #0
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	f000 812e 	beq.w	800430e <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	f003 0301 	and.w	r3, r3, #1
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00c      	beq.n	80040d6 <HAL_I2C_EV_IRQHandler+0x92>
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	0a5b      	lsrs	r3, r3, #9
 80040c0:	f003 0301 	and.w	r3, r3, #1
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d006      	beq.n	80040d6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f001 fe72 	bl	8005db2 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 fd62 	bl	8004b98 <I2C_Master_SB>
 80040d4:	e08e      	b.n	80041f4 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	08db      	lsrs	r3, r3, #3
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d009      	beq.n	80040f6 <HAL_I2C_EV_IRQHandler+0xb2>
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	0a5b      	lsrs	r3, r3, #9
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d003      	beq.n	80040f6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 fdd8 	bl	8004ca4 <I2C_Master_ADD10>
 80040f4:	e07e      	b.n	80041f4 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	085b      	lsrs	r3, r3, #1
 80040fa:	f003 0301 	and.w	r3, r3, #1
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d009      	beq.n	8004116 <HAL_I2C_EV_IRQHandler+0xd2>
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	0a5b      	lsrs	r3, r3, #9
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	2b00      	cmp	r3, #0
 800410c:	d003      	beq.n	8004116 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 fdf2 	bl	8004cf8 <I2C_Master_ADDR>
 8004114:	e06e      	b.n	80041f4 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	089b      	lsrs	r3, r3, #2
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b00      	cmp	r3, #0
 8004120:	d037      	beq.n	8004192 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800412c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004130:	f000 80ef 	beq.w	8004312 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	09db      	lsrs	r3, r3, #7
 8004138:	f003 0301 	and.w	r3, r3, #1
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00f      	beq.n	8004160 <HAL_I2C_EV_IRQHandler+0x11c>
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	0a9b      	lsrs	r3, r3, #10
 8004144:	f003 0301 	and.w	r3, r3, #1
 8004148:	2b00      	cmp	r3, #0
 800414a:	d009      	beq.n	8004160 <HAL_I2C_EV_IRQHandler+0x11c>
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	089b      	lsrs	r3, r3, #2
 8004150:	f003 0301 	and.w	r3, r3, #1
 8004154:	2b00      	cmp	r3, #0
 8004156:	d103      	bne.n	8004160 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f000 f9ef 	bl	800453c <I2C_MasterTransmit_TXE>
 800415e:	e049      	b.n	80041f4 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	089b      	lsrs	r3, r3, #2
 8004164:	f003 0301 	and.w	r3, r3, #1
 8004168:	2b00      	cmp	r3, #0
 800416a:	f000 80d2 	beq.w	8004312 <HAL_I2C_EV_IRQHandler+0x2ce>
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	0a5b      	lsrs	r3, r3, #9
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	2b00      	cmp	r3, #0
 8004178:	f000 80cb 	beq.w	8004312 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 800417c:	7bfb      	ldrb	r3, [r7, #15]
 800417e:	2b10      	cmp	r3, #16
 8004180:	d103      	bne.n	800418a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 fa76 	bl	8004674 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004188:	e0c3      	b.n	8004312 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 fada 	bl	8004744 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004190:	e0bf      	b.n	8004312 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800419c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041a0:	f000 80b7 	beq.w	8004312 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	099b      	lsrs	r3, r3, #6
 80041a8:	f003 0301 	and.w	r3, r3, #1
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00f      	beq.n	80041d0 <HAL_I2C_EV_IRQHandler+0x18c>
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	0a9b      	lsrs	r3, r3, #10
 80041b4:	f003 0301 	and.w	r3, r3, #1
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d009      	beq.n	80041d0 <HAL_I2C_EV_IRQHandler+0x18c>
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	089b      	lsrs	r3, r3, #2
 80041c0:	f003 0301 	and.w	r3, r3, #1
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d103      	bne.n	80041d0 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 fb4a 	bl	8004862 <I2C_MasterReceive_RXNE>
 80041ce:	e011      	b.n	80041f4 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	089b      	lsrs	r3, r3, #2
 80041d4:	f003 0301 	and.w	r3, r3, #1
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f000 809a 	beq.w	8004312 <HAL_I2C_EV_IRQHandler+0x2ce>
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	0a5b      	lsrs	r3, r3, #9
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	f000 8093 	beq.w	8004312 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 fbe9 	bl	80049c4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041f2:	e08e      	b.n	8004312 <HAL_I2C_EV_IRQHandler+0x2ce>
 80041f4:	e08d      	b.n	8004312 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d004      	beq.n	8004208 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	61fb      	str	r3, [r7, #28]
 8004206:	e007      	b.n	8004218 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	085b      	lsrs	r3, r3, #1
 800421c:	f003 0301 	and.w	r3, r3, #1
 8004220:	2b00      	cmp	r3, #0
 8004222:	d012      	beq.n	800424a <HAL_I2C_EV_IRQHandler+0x206>
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	0a5b      	lsrs	r3, r3, #9
 8004228:	f003 0301 	and.w	r3, r3, #1
 800422c:	2b00      	cmp	r3, #0
 800422e:	d00c      	beq.n	800424a <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004234:	2b00      	cmp	r3, #0
 8004236:	d003      	beq.n	8004240 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004240:	69b9      	ldr	r1, [r7, #24]
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 ffa7 	bl	8005196 <I2C_Slave_ADDR>
 8004248:	e066      	b.n	8004318 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	091b      	lsrs	r3, r3, #4
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	2b00      	cmp	r3, #0
 8004254:	d009      	beq.n	800426a <HAL_I2C_EV_IRQHandler+0x226>
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	0a5b      	lsrs	r3, r3, #9
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	2b00      	cmp	r3, #0
 8004260:	d003      	beq.n	800426a <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 ffdc 	bl	8005220 <I2C_Slave_STOPF>
 8004268:	e056      	b.n	8004318 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800426a:	7bbb      	ldrb	r3, [r7, #14]
 800426c:	2b21      	cmp	r3, #33	; 0x21
 800426e:	d002      	beq.n	8004276 <HAL_I2C_EV_IRQHandler+0x232>
 8004270:	7bbb      	ldrb	r3, [r7, #14]
 8004272:	2b29      	cmp	r3, #41	; 0x29
 8004274:	d125      	bne.n	80042c2 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	09db      	lsrs	r3, r3, #7
 800427a:	f003 0301 	and.w	r3, r3, #1
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00f      	beq.n	80042a2 <HAL_I2C_EV_IRQHandler+0x25e>
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	0a9b      	lsrs	r3, r3, #10
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b00      	cmp	r3, #0
 800428c:	d009      	beq.n	80042a2 <HAL_I2C_EV_IRQHandler+0x25e>
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	089b      	lsrs	r3, r3, #2
 8004292:	f003 0301 	and.w	r3, r3, #1
 8004296:	2b00      	cmp	r3, #0
 8004298:	d103      	bne.n	80042a2 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 febd 	bl	800501a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80042a0:	e039      	b.n	8004316 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	089b      	lsrs	r3, r3, #2
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d033      	beq.n	8004316 <HAL_I2C_EV_IRQHandler+0x2d2>
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	0a5b      	lsrs	r3, r3, #9
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d02d      	beq.n	8004316 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 feea 	bl	8005094 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80042c0:	e029      	b.n	8004316 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	099b      	lsrs	r3, r3, #6
 80042c6:	f003 0301 	and.w	r3, r3, #1
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00f      	beq.n	80042ee <HAL_I2C_EV_IRQHandler+0x2aa>
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	0a9b      	lsrs	r3, r3, #10
 80042d2:	f003 0301 	and.w	r3, r3, #1
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d009      	beq.n	80042ee <HAL_I2C_EV_IRQHandler+0x2aa>
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	089b      	lsrs	r3, r3, #2
 80042de:	f003 0301 	and.w	r3, r3, #1
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d103      	bne.n	80042ee <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 fef5 	bl	80050d6 <I2C_SlaveReceive_RXNE>
 80042ec:	e014      	b.n	8004318 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	089b      	lsrs	r3, r3, #2
 80042f2:	f003 0301 	and.w	r3, r3, #1
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00e      	beq.n	8004318 <HAL_I2C_EV_IRQHandler+0x2d4>
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	0a5b      	lsrs	r3, r3, #9
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	2b00      	cmp	r3, #0
 8004304:	d008      	beq.n	8004318 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 ff23 	bl	8005152 <I2C_SlaveReceive_BTF>
 800430c:	e004      	b.n	8004318 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 800430e:	bf00      	nop
 8004310:	e002      	b.n	8004318 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004312:	bf00      	nop
 8004314:	e000      	b.n	8004318 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004316:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004318:	3720      	adds	r7, #32
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}

0800431e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800431e:	b580      	push	{r7, lr}
 8004320:	b08a      	sub	sp, #40	; 0x28
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	695b      	ldr	r3, [r3, #20]
 800432c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004336:	2300      	movs	r3, #0
 8004338:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004340:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004342:	6a3b      	ldr	r3, [r7, #32]
 8004344:	0a1b      	lsrs	r3, r3, #8
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00e      	beq.n	800436c <HAL_I2C_ER_IRQHandler+0x4e>
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	0a1b      	lsrs	r3, r3, #8
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	2b00      	cmp	r3, #0
 8004358:	d008      	beq.n	800436c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800435a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435c:	f043 0301 	orr.w	r3, r3, #1
 8004360:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800436a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800436c:	6a3b      	ldr	r3, [r7, #32]
 800436e:	0a5b      	lsrs	r3, r3, #9
 8004370:	f003 0301 	and.w	r3, r3, #1
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00e      	beq.n	8004396 <HAL_I2C_ER_IRQHandler+0x78>
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	0a1b      	lsrs	r3, r3, #8
 800437c:	f003 0301 	and.w	r3, r3, #1
 8004380:	2b00      	cmp	r3, #0
 8004382:	d008      	beq.n	8004396 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004386:	f043 0302 	orr.w	r3, r3, #2
 800438a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004394:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004396:	6a3b      	ldr	r3, [r7, #32]
 8004398:	0a9b      	lsrs	r3, r3, #10
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d03f      	beq.n	8004422 <HAL_I2C_ER_IRQHandler+0x104>
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	0a1b      	lsrs	r3, r3, #8
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d039      	beq.n	8004422 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80043ae:	7efb      	ldrb	r3, [r7, #27]
 80043b0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043c0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80043c8:	7ebb      	ldrb	r3, [r7, #26]
 80043ca:	2b20      	cmp	r3, #32
 80043cc:	d112      	bne.n	80043f4 <HAL_I2C_ER_IRQHandler+0xd6>
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10f      	bne.n	80043f4 <HAL_I2C_ER_IRQHandler+0xd6>
 80043d4:	7cfb      	ldrb	r3, [r7, #19]
 80043d6:	2b21      	cmp	r3, #33	; 0x21
 80043d8:	d008      	beq.n	80043ec <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80043da:	7cfb      	ldrb	r3, [r7, #19]
 80043dc:	2b29      	cmp	r3, #41	; 0x29
 80043de:	d005      	beq.n	80043ec <HAL_I2C_ER_IRQHandler+0xce>
 80043e0:	7cfb      	ldrb	r3, [r7, #19]
 80043e2:	2b28      	cmp	r3, #40	; 0x28
 80043e4:	d106      	bne.n	80043f4 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2b21      	cmp	r3, #33	; 0x21
 80043ea:	d103      	bne.n	80043f4 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f001 f847 	bl	8005480 <I2C_Slave_AF>
 80043f2:	e016      	b.n	8004422 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043fc:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80043fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004400:	f043 0304 	orr.w	r3, r3, #4
 8004404:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004406:	7efb      	ldrb	r3, [r7, #27]
 8004408:	2b10      	cmp	r3, #16
 800440a:	d002      	beq.n	8004412 <HAL_I2C_ER_IRQHandler+0xf4>
 800440c:	7efb      	ldrb	r3, [r7, #27]
 800440e:	2b40      	cmp	r3, #64	; 0x40
 8004410:	d107      	bne.n	8004422 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004420:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004422:	6a3b      	ldr	r3, [r7, #32]
 8004424:	0adb      	lsrs	r3, r3, #11
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00e      	beq.n	800444c <HAL_I2C_ER_IRQHandler+0x12e>
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	0a1b      	lsrs	r3, r3, #8
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	2b00      	cmp	r3, #0
 8004438:	d008      	beq.n	800444c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800443a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443c:	f043 0308 	orr.w	r3, r3, #8
 8004440:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800444a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800444c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444e:	2b00      	cmp	r3, #0
 8004450:	d008      	beq.n	8004464 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004458:	431a      	orrs	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f001 f87e 	bl	8005560 <I2C_ITError>
  }
}
 8004464:	bf00      	nop
 8004466:	3728      	adds	r7, #40	; 0x28
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004488:	bf00      	nop
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800449c:	bf00      	nop
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80044b0:	bf00      	nop
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	460b      	mov	r3, r1
 80044c6:	70fb      	strb	r3, [r7, #3]
 80044c8:	4613      	mov	r3, r2
 80044ca:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80044cc:	bf00      	nop
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80044e0:	bf00      	nop
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80044f4:	bf00      	nop
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004508:	bf00      	nop
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800451c:	bf00      	nop
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800454a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004552:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004558:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800455e:	2b00      	cmp	r3, #0
 8004560:	d150      	bne.n	8004604 <I2C_MasterTransmit_TXE+0xc8>
 8004562:	7bfb      	ldrb	r3, [r7, #15]
 8004564:	2b21      	cmp	r3, #33	; 0x21
 8004566:	d14d      	bne.n	8004604 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	2b08      	cmp	r3, #8
 800456c:	d01d      	beq.n	80045aa <I2C_MasterTransmit_TXE+0x6e>
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	2b20      	cmp	r3, #32
 8004572:	d01a      	beq.n	80045aa <I2C_MasterTransmit_TXE+0x6e>
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800457a:	d016      	beq.n	80045aa <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	685a      	ldr	r2, [r3, #4]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800458a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2211      	movs	r2, #17
 8004590:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2220      	movs	r2, #32
 800459e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f7ff ff62 	bl	800446c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80045a8:	e060      	b.n	800466c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	685a      	ldr	r2, [r3, #4]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80045b8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045c8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2220      	movs	r2, #32
 80045d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	2b40      	cmp	r3, #64	; 0x40
 80045e2:	d107      	bne.n	80045f4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f7ff ff7d 	bl	80044ec <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80045f2:	e03b      	b.n	800466c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f7ff ff35 	bl	800446c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004602:	e033      	b.n	800466c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004604:	7bfb      	ldrb	r3, [r7, #15]
 8004606:	2b21      	cmp	r3, #33	; 0x21
 8004608:	d005      	beq.n	8004616 <I2C_MasterTransmit_TXE+0xda>
 800460a:	7bbb      	ldrb	r3, [r7, #14]
 800460c:	2b40      	cmp	r3, #64	; 0x40
 800460e:	d12d      	bne.n	800466c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004610:	7bfb      	ldrb	r3, [r7, #15]
 8004612:	2b22      	cmp	r3, #34	; 0x22
 8004614:	d12a      	bne.n	800466c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800461a:	b29b      	uxth	r3, r3
 800461c:	2b00      	cmp	r3, #0
 800461e:	d108      	bne.n	8004632 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	685a      	ldr	r2, [r3, #4]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800462e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004630:	e01c      	b.n	800466c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004638:	b2db      	uxtb	r3, r3
 800463a:	2b40      	cmp	r3, #64	; 0x40
 800463c:	d103      	bne.n	8004646 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 f880 	bl	8004744 <I2C_MemoryTransmit_TXE_BTF>
}
 8004644:	e012      	b.n	800466c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464a:	781a      	ldrb	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004656:	1c5a      	adds	r2, r3, #1
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004660:	b29b      	uxth	r3, r3
 8004662:	3b01      	subs	r3, #1
 8004664:	b29a      	uxth	r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800466a:	e7ff      	b.n	800466c <I2C_MasterTransmit_TXE+0x130>
 800466c:	bf00      	nop
 800466e:	3710      	adds	r7, #16
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004680:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004688:	b2db      	uxtb	r3, r3
 800468a:	2b21      	cmp	r3, #33	; 0x21
 800468c:	d156      	bne.n	800473c <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004692:	b29b      	uxth	r3, r3
 8004694:	2b00      	cmp	r3, #0
 8004696:	d012      	beq.n	80046be <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469c:	781a      	ldrb	r2, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a8:	1c5a      	adds	r2, r3, #1
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	3b01      	subs	r3, #1
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80046bc:	e03e      	b.n	800473c <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2b08      	cmp	r3, #8
 80046c2:	d01d      	beq.n	8004700 <I2C_MasterTransmit_BTF+0x8c>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2b20      	cmp	r3, #32
 80046c8:	d01a      	beq.n	8004700 <I2C_MasterTransmit_BTF+0x8c>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80046d0:	d016      	beq.n	8004700 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	685a      	ldr	r2, [r3, #4]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80046e0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2211      	movs	r2, #17
 80046e6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2220      	movs	r2, #32
 80046f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f7ff feb7 	bl	800446c <HAL_I2C_MasterTxCpltCallback>
}
 80046fe:	e01d      	b.n	800473c <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	685a      	ldr	r2, [r3, #4]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800470e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800471e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2220      	movs	r2, #32
 800472a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f7ff fe98 	bl	800446c <HAL_I2C_MasterTxCpltCallback>
}
 800473c:	bf00      	nop
 800473e:	3710      	adds	r7, #16
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004752:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004758:	2b00      	cmp	r3, #0
 800475a:	d11d      	bne.n	8004798 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004760:	2b01      	cmp	r3, #1
 8004762:	d10b      	bne.n	800477c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004768:	b2da      	uxtb	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004774:	1c9a      	adds	r2, r3, #2
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800477a:	e06e      	b.n	800485a <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004780:	b29b      	uxth	r3, r3
 8004782:	121b      	asrs	r3, r3, #8
 8004784:	b2da      	uxtb	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004790:	1c5a      	adds	r2, r3, #1
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004796:	e060      	b.n	800485a <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800479c:	2b01      	cmp	r3, #1
 800479e:	d10b      	bne.n	80047b8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047a4:	b2da      	uxtb	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047b0:	1c5a      	adds	r2, r3, #1
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80047b6:	e050      	b.n	800485a <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d14c      	bne.n	800485a <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80047c0:	7bfb      	ldrb	r3, [r7, #15]
 80047c2:	2b22      	cmp	r3, #34	; 0x22
 80047c4:	d108      	bne.n	80047d8 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047d4:	601a      	str	r2, [r3, #0]
}
 80047d6:	e040      	b.n	800485a <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047dc:	b29b      	uxth	r3, r3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d015      	beq.n	800480e <I2C_MemoryTransmit_TXE_BTF+0xca>
 80047e2:	7bfb      	ldrb	r3, [r7, #15]
 80047e4:	2b21      	cmp	r3, #33	; 0x21
 80047e6:	d112      	bne.n	800480e <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ec:	781a      	ldrb	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f8:	1c5a      	adds	r2, r3, #1
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004802:	b29b      	uxth	r3, r3
 8004804:	3b01      	subs	r3, #1
 8004806:	b29a      	uxth	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800480c:	e025      	b.n	800485a <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004812:	b29b      	uxth	r3, r3
 8004814:	2b00      	cmp	r3, #0
 8004816:	d120      	bne.n	800485a <I2C_MemoryTransmit_TXE_BTF+0x116>
 8004818:	7bfb      	ldrb	r3, [r7, #15]
 800481a:	2b21      	cmp	r3, #33	; 0x21
 800481c:	d11d      	bne.n	800485a <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	685a      	ldr	r2, [r3, #4]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800482c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800483c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2220      	movs	r2, #32
 8004848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f7ff fe49 	bl	80044ec <HAL_I2C_MemTxCpltCallback>
}
 800485a:	bf00      	nop
 800485c:	3710      	adds	r7, #16
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004862:	b580      	push	{r7, lr}
 8004864:	b084      	sub	sp, #16
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004870:	b2db      	uxtb	r3, r3
 8004872:	2b22      	cmp	r3, #34	; 0x22
 8004874:	f040 80a2 	bne.w	80049bc <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800487c:	b29b      	uxth	r3, r3
 800487e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2b03      	cmp	r3, #3
 8004884:	d921      	bls.n	80048ca <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	691a      	ldr	r2, [r3, #16]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004890:	b2d2      	uxtb	r2, r2
 8004892:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004898:	1c5a      	adds	r2, r3, #1
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	3b01      	subs	r3, #1
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	2b03      	cmp	r3, #3
 80048b4:	f040 8082 	bne.w	80049bc <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	685a      	ldr	r2, [r3, #4]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048c6:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80048c8:	e078      	b.n	80049bc <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d074      	beq.n	80049bc <I2C_MasterReceive_RXNE+0x15a>
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d002      	beq.n	80048de <I2C_MasterReceive_RXNE+0x7c>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d16e      	bne.n	80049bc <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f001 fa06 	bl	8005cf0 <I2C_WaitOnSTOPRequestThroughIT>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d142      	bne.n	8004970 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048f8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	685a      	ldr	r2, [r3, #4]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004908:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	691a      	ldr	r2, [r3, #16]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004914:	b2d2      	uxtb	r2, r2
 8004916:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491c:	1c5a      	adds	r2, r3, #1
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004926:	b29b      	uxth	r3, r3
 8004928:	3b01      	subs	r3, #1
 800492a:	b29a      	uxth	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2220      	movs	r2, #32
 8004934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800493e:	b2db      	uxtb	r3, r3
 8004940:	2b40      	cmp	r3, #64	; 0x40
 8004942:	d10a      	bne.n	800495a <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f7ff fdd4 	bl	8004500 <HAL_I2C_MemRxCpltCallback>
}
 8004958:	e030      	b.n	80049bc <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2212      	movs	r2, #18
 8004966:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f7ff fd89 	bl	8004480 <HAL_I2C_MasterRxCpltCallback>
}
 800496e:	e025      	b.n	80049bc <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	685a      	ldr	r2, [r3, #4]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800497e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	691a      	ldr	r2, [r3, #16]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498a:	b2d2      	uxtb	r2, r2
 800498c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004992:	1c5a      	adds	r2, r3, #1
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800499c:	b29b      	uxth	r3, r3
 800499e:	3b01      	subs	r3, #1
 80049a0:	b29a      	uxth	r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2220      	movs	r2, #32
 80049aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f7ff fdac 	bl	8004514 <HAL_I2C_ErrorCallback>
}
 80049bc:	bf00      	nop
 80049be:	3710      	adds	r7, #16
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	2b04      	cmp	r3, #4
 80049da:	d11b      	bne.n	8004a14 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	685a      	ldr	r2, [r3, #4]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049ea:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	691a      	ldr	r2, [r3, #16]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f6:	b2d2      	uxtb	r2, r2
 80049f8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fe:	1c5a      	adds	r2, r3, #1
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	b29a      	uxth	r2, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004a12:	e0bd      	b.n	8004b90 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	2b03      	cmp	r3, #3
 8004a1c:	d129      	bne.n	8004a72 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	685a      	ldr	r2, [r3, #4]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a2c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2b04      	cmp	r3, #4
 8004a32:	d00a      	beq.n	8004a4a <I2C_MasterReceive_BTF+0x86>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d007      	beq.n	8004a4a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a48:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	691a      	ldr	r2, [r3, #16]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a54:	b2d2      	uxtb	r2, r2
 8004a56:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5c:	1c5a      	adds	r2, r3, #1
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	b29a      	uxth	r2, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004a70:	e08e      	b.n	8004b90 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d176      	bne.n	8004b6a <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d002      	beq.n	8004a88 <I2C_MasterReceive_BTF+0xc4>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2b10      	cmp	r3, #16
 8004a86:	d108      	bne.n	8004a9a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a96:	601a      	str	r2, [r3, #0]
 8004a98:	e019      	b.n	8004ace <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2b04      	cmp	r3, #4
 8004a9e:	d002      	beq.n	8004aa6 <I2C_MasterReceive_BTF+0xe2>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d108      	bne.n	8004ab8 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ab4:	601a      	str	r2, [r3, #0]
 8004ab6:	e00a      	b.n	8004ace <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2b10      	cmp	r3, #16
 8004abc:	d007      	beq.n	8004ace <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004acc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	691a      	ldr	r2, [r3, #16]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad8:	b2d2      	uxtb	r2, r2
 8004ada:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae0:	1c5a      	adds	r2, r3, #1
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	3b01      	subs	r3, #1
 8004aee:	b29a      	uxth	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	691a      	ldr	r2, [r3, #16]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afe:	b2d2      	uxtb	r2, r2
 8004b00:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b06:	1c5a      	adds	r2, r3, #1
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	3b01      	subs	r3, #1
 8004b14:	b29a      	uxth	r2, r3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	685a      	ldr	r2, [r3, #4]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004b28:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2220      	movs	r2, #32
 8004b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	2b40      	cmp	r3, #64	; 0x40
 8004b3c:	d10a      	bne.n	8004b54 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f7ff fcd7 	bl	8004500 <HAL_I2C_MemRxCpltCallback>
}
 8004b52:	e01d      	b.n	8004b90 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2212      	movs	r2, #18
 8004b60:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f7ff fc8c 	bl	8004480 <HAL_I2C_MasterRxCpltCallback>
}
 8004b68:	e012      	b.n	8004b90 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	691a      	ldr	r2, [r3, #16]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b74:	b2d2      	uxtb	r2, r2
 8004b76:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7c:	1c5a      	adds	r2, r3, #1
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	b29a      	uxth	r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004b90:	bf00      	nop
 8004b92:	3710      	adds	r7, #16
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	2b40      	cmp	r3, #64	; 0x40
 8004baa:	d117      	bne.n	8004bdc <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d109      	bne.n	8004bc8 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	461a      	mov	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004bc4:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004bc6:	e067      	b.n	8004c98 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	f043 0301 	orr.w	r3, r3, #1
 8004bd2:	b2da      	uxtb	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	611a      	str	r2, [r3, #16]
}
 8004bda:	e05d      	b.n	8004c98 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004be4:	d133      	bne.n	8004c4e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	2b21      	cmp	r3, #33	; 0x21
 8004bf0:	d109      	bne.n	8004c06 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c02:	611a      	str	r2, [r3, #16]
 8004c04:	e008      	b.n	8004c18 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	f043 0301 	orr.w	r3, r3, #1
 8004c10:	b2da      	uxtb	r2, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d004      	beq.n	8004c2a <I2C_Master_SB+0x92>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d108      	bne.n	8004c3c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d032      	beq.n	8004c98 <I2C_Master_SB+0x100>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d02d      	beq.n	8004c98 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	685a      	ldr	r2, [r3, #4]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c4a:	605a      	str	r2, [r3, #4]
}
 8004c4c:	e024      	b.n	8004c98 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d10e      	bne.n	8004c74 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	11db      	asrs	r3, r3, #7
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	f003 0306 	and.w	r3, r3, #6
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	f063 030f 	orn	r3, r3, #15
 8004c6a:	b2da      	uxtb	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	611a      	str	r2, [r3, #16]
}
 8004c72:	e011      	b.n	8004c98 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d10d      	bne.n	8004c98 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	11db      	asrs	r3, r3, #7
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	f003 0306 	and.w	r3, r3, #6
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	f063 030e 	orn	r3, r3, #14
 8004c90:	b2da      	uxtb	r2, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	611a      	str	r2, [r3, #16]
}
 8004c98:	bf00      	nop
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cb0:	b2da      	uxtb	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d103      	bne.n	8004cc8 <I2C_Master_ADD10+0x24>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d011      	beq.n	8004cec <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d104      	bne.n	8004cdc <I2C_Master_ADD10+0x38>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d007      	beq.n	8004cec <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	685a      	ldr	r2, [r3, #4]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cea:	605a      	str	r2, [r3, #4]
    }
  }
}
 8004cec:	bf00      	nop
 8004cee:	370c      	adds	r7, #12
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b091      	sub	sp, #68	; 0x44
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d06:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d0e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d14:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	2b22      	cmp	r3, #34	; 0x22
 8004d20:	f040 8169 	bne.w	8004ff6 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d10f      	bne.n	8004d4c <I2C_Master_ADDR+0x54>
 8004d2c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004d30:	2b40      	cmp	r3, #64	; 0x40
 8004d32:	d10b      	bne.n	8004d4c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d34:	2300      	movs	r3, #0
 8004d36:	633b      	str	r3, [r7, #48]	; 0x30
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	695b      	ldr	r3, [r3, #20]
 8004d3e:	633b      	str	r3, [r7, #48]	; 0x30
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	633b      	str	r3, [r7, #48]	; 0x30
 8004d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d4a:	e160      	b.n	800500e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d11d      	bne.n	8004d90 <I2C_Master_ADDR+0x98>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004d5c:	d118      	bne.n	8004d90 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d5e:	2300      	movs	r3, #0
 8004d60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	695b      	ldr	r3, [r3, #20]
 8004d68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	699b      	ldr	r3, [r3, #24]
 8004d70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d82:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d88:	1c5a      	adds	r2, r3, #1
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	651a      	str	r2, [r3, #80]	; 0x50
 8004d8e:	e13e      	b.n	800500e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d113      	bne.n	8004dc2 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	695b      	ldr	r3, [r3, #20]
 8004da4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	699b      	ldr	r3, [r3, #24]
 8004dac:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dae:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dbe:	601a      	str	r2, [r3, #0]
 8004dc0:	e115      	b.n	8004fee <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	f040 808a 	bne.w	8004ee2 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004dd4:	d137      	bne.n	8004e46 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004de4:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004df0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004df4:	d113      	bne.n	8004e1e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e04:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e06:	2300      	movs	r3, #0
 8004e08:	627b      	str	r3, [r7, #36]	; 0x24
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	695b      	ldr	r3, [r3, #20]
 8004e10:	627b      	str	r3, [r7, #36]	; 0x24
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	699b      	ldr	r3, [r3, #24]
 8004e18:	627b      	str	r3, [r7, #36]	; 0x24
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1c:	e0e7      	b.n	8004fee <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e1e:	2300      	movs	r3, #0
 8004e20:	623b      	str	r3, [r7, #32]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	695b      	ldr	r3, [r3, #20]
 8004e28:	623b      	str	r3, [r7, #32]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	699b      	ldr	r3, [r3, #24]
 8004e30:	623b      	str	r3, [r7, #32]
 8004e32:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e42:	601a      	str	r2, [r3, #0]
 8004e44:	e0d3      	b.n	8004fee <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e48:	2b08      	cmp	r3, #8
 8004e4a:	d02e      	beq.n	8004eaa <I2C_Master_ADDR+0x1b2>
 8004e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e4e:	2b20      	cmp	r3, #32
 8004e50:	d02b      	beq.n	8004eaa <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e54:	2b12      	cmp	r3, #18
 8004e56:	d102      	bne.n	8004e5e <I2C_Master_ADDR+0x166>
 8004e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d125      	bne.n	8004eaa <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e60:	2b04      	cmp	r3, #4
 8004e62:	d00e      	beq.n	8004e82 <I2C_Master_ADDR+0x18a>
 8004e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d00b      	beq.n	8004e82 <I2C_Master_ADDR+0x18a>
 8004e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e6c:	2b10      	cmp	r3, #16
 8004e6e:	d008      	beq.n	8004e82 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e7e:	601a      	str	r2, [r3, #0]
 8004e80:	e007      	b.n	8004e92 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e90:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e92:	2300      	movs	r3, #0
 8004e94:	61fb      	str	r3, [r7, #28]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	695b      	ldr	r3, [r3, #20]
 8004e9c:	61fb      	str	r3, [r7, #28]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	699b      	ldr	r3, [r3, #24]
 8004ea4:	61fb      	str	r3, [r7, #28]
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	e0a1      	b.n	8004fee <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004eb8:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eba:	2300      	movs	r3, #0
 8004ebc:	61bb      	str	r3, [r7, #24]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	695b      	ldr	r3, [r3, #20]
 8004ec4:	61bb      	str	r3, [r7, #24]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	699b      	ldr	r3, [r3, #24]
 8004ecc:	61bb      	str	r3, [r7, #24]
 8004ece:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ede:	601a      	str	r2, [r3, #0]
 8004ee0:	e085      	b.n	8004fee <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d14d      	bne.n	8004f88 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eee:	2b04      	cmp	r3, #4
 8004ef0:	d016      	beq.n	8004f20 <I2C_Master_ADDR+0x228>
 8004ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	d013      	beq.n	8004f20 <I2C_Master_ADDR+0x228>
 8004ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004efa:	2b10      	cmp	r3, #16
 8004efc:	d010      	beq.n	8004f20 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f0c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f1c:	601a      	str	r2, [r3, #0]
 8004f1e:	e007      	b.n	8004f30 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f2e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f3e:	d117      	bne.n	8004f70 <I2C_Master_ADDR+0x278>
 8004f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f42:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f46:	d00b      	beq.n	8004f60 <I2C_Master_ADDR+0x268>
 8004f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d008      	beq.n	8004f60 <I2C_Master_ADDR+0x268>
 8004f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f50:	2b08      	cmp	r3, #8
 8004f52:	d005      	beq.n	8004f60 <I2C_Master_ADDR+0x268>
 8004f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f56:	2b10      	cmp	r3, #16
 8004f58:	d002      	beq.n	8004f60 <I2C_Master_ADDR+0x268>
 8004f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f5c:	2b20      	cmp	r3, #32
 8004f5e:	d107      	bne.n	8004f70 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	685a      	ldr	r2, [r3, #4]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f6e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f70:	2300      	movs	r3, #0
 8004f72:	617b      	str	r3, [r7, #20]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	695b      	ldr	r3, [r3, #20]
 8004f7a:	617b      	str	r3, [r7, #20]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	699b      	ldr	r3, [r3, #24]
 8004f82:	617b      	str	r3, [r7, #20]
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	e032      	b.n	8004fee <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f96:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fa2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fa6:	d117      	bne.n	8004fd8 <I2C_Master_ADDR+0x2e0>
 8004fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004faa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004fae:	d00b      	beq.n	8004fc8 <I2C_Master_ADDR+0x2d0>
 8004fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d008      	beq.n	8004fc8 <I2C_Master_ADDR+0x2d0>
 8004fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb8:	2b08      	cmp	r3, #8
 8004fba:	d005      	beq.n	8004fc8 <I2C_Master_ADDR+0x2d0>
 8004fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fbe:	2b10      	cmp	r3, #16
 8004fc0:	d002      	beq.n	8004fc8 <I2C_Master_ADDR+0x2d0>
 8004fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc4:	2b20      	cmp	r3, #32
 8004fc6:	d107      	bne.n	8004fd8 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	685a      	ldr	r2, [r3, #4]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004fd6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fd8:	2300      	movs	r3, #0
 8004fda:	613b      	str	r3, [r7, #16]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	613b      	str	r3, [r7, #16]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	613b      	str	r3, [r7, #16]
 8004fec:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004ff4:	e00b      	b.n	800500e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	60fb      	str	r3, [r7, #12]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	695b      	ldr	r3, [r3, #20]
 8005000:	60fb      	str	r3, [r7, #12]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	60fb      	str	r3, [r7, #12]
 800500a:	68fb      	ldr	r3, [r7, #12]
}
 800500c:	e7ff      	b.n	800500e <I2C_Master_ADDR+0x316>
 800500e:	bf00      	nop
 8005010:	3744      	adds	r7, #68	; 0x44
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr

0800501a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800501a:	b580      	push	{r7, lr}
 800501c:	b084      	sub	sp, #16
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005028:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800502e:	b29b      	uxth	r3, r3
 8005030:	2b00      	cmp	r3, #0
 8005032:	d02b      	beq.n	800508c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005038:	781a      	ldrb	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005044:	1c5a      	adds	r2, r3, #1
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800504e:	b29b      	uxth	r3, r3
 8005050:	3b01      	subs	r3, #1
 8005052:	b29a      	uxth	r2, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800505c:	b29b      	uxth	r3, r3
 800505e:	2b00      	cmp	r3, #0
 8005060:	d114      	bne.n	800508c <I2C_SlaveTransmit_TXE+0x72>
 8005062:	7bfb      	ldrb	r3, [r7, #15]
 8005064:	2b29      	cmp	r3, #41	; 0x29
 8005066:	d111      	bne.n	800508c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	685a      	ldr	r2, [r3, #4]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005076:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2221      	movs	r2, #33	; 0x21
 800507c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2228      	movs	r2, #40	; 0x28
 8005082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f7ff fa04 	bl	8004494 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800508c:	bf00      	nop
 800508e:	3710      	adds	r7, #16
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d011      	beq.n	80050ca <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050aa:	781a      	ldrb	r2, [r3, #0]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b6:	1c5a      	adds	r2, r3, #1
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	3b01      	subs	r3, #1
 80050c4:	b29a      	uxth	r2, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80050ca:	bf00      	nop
 80050cc:	370c      	adds	r7, #12
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr

080050d6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80050d6:	b580      	push	{r7, lr}
 80050d8:	b084      	sub	sp, #16
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050e4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d02c      	beq.n	800514a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	691a      	ldr	r2, [r3, #16]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fa:	b2d2      	uxtb	r2, r2
 80050fc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005102:	1c5a      	adds	r2, r3, #1
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800510c:	b29b      	uxth	r3, r3
 800510e:	3b01      	subs	r3, #1
 8005110:	b29a      	uxth	r2, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800511a:	b29b      	uxth	r3, r3
 800511c:	2b00      	cmp	r3, #0
 800511e:	d114      	bne.n	800514a <I2C_SlaveReceive_RXNE+0x74>
 8005120:	7bfb      	ldrb	r3, [r7, #15]
 8005122:	2b2a      	cmp	r3, #42	; 0x2a
 8005124:	d111      	bne.n	800514a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	685a      	ldr	r2, [r3, #4]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005134:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2222      	movs	r2, #34	; 0x22
 800513a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2228      	movs	r2, #40	; 0x28
 8005140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f7ff f9af 	bl	80044a8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800514a:	bf00      	nop
 800514c:	3710      	adds	r7, #16
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}

08005152 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005152:	b480      	push	{r7}
 8005154:	b083      	sub	sp, #12
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800515e:	b29b      	uxth	r3, r3
 8005160:	2b00      	cmp	r3, #0
 8005162:	d012      	beq.n	800518a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	691a      	ldr	r2, [r3, #16]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516e:	b2d2      	uxtb	r2, r2
 8005170:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005176:	1c5a      	adds	r2, r3, #1
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005180:	b29b      	uxth	r3, r3
 8005182:	3b01      	subs	r3, #1
 8005184:	b29a      	uxth	r2, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800518a:	bf00      	nop
 800518c:	370c      	adds	r7, #12
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr

08005196 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005196:	b580      	push	{r7, lr}
 8005198:	b084      	sub	sp, #16
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
 800519e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80051a0:	2300      	movs	r3, #0
 80051a2:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80051b0:	2b28      	cmp	r3, #40	; 0x28
 80051b2:	d127      	bne.n	8005204 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	685a      	ldr	r2, [r3, #4]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051c2:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	089b      	lsrs	r3, r3, #2
 80051c8:	f003 0301 	and.w	r3, r3, #1
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d101      	bne.n	80051d4 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80051d0:	2301      	movs	r3, #1
 80051d2:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	09db      	lsrs	r3, r3, #7
 80051d8:	f003 0301 	and.w	r3, r3, #1
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d103      	bne.n	80051e8 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	81bb      	strh	r3, [r7, #12]
 80051e6:	e002      	b.n	80051ee <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	699b      	ldr	r3, [r3, #24]
 80051ec:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80051f6:	89ba      	ldrh	r2, [r7, #12]
 80051f8:	7bfb      	ldrb	r3, [r7, #15]
 80051fa:	4619      	mov	r1, r3
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f7ff f95d 	bl	80044bc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005202:	e008      	b.n	8005216 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f06f 0202 	mvn.w	r2, #2
 800520c:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005216:	bf00      	nop
 8005218:	3710      	adds	r7, #16
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
	...

08005220 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800522e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	685a      	ldr	r2, [r3, #4]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800523e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005240:	2300      	movs	r3, #0
 8005242:	60bb      	str	r3, [r7, #8]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	60bb      	str	r3, [r7, #8]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f042 0201 	orr.w	r2, r2, #1
 800525a:	601a      	str	r2, [r3, #0]
 800525c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800526c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005278:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800527c:	d172      	bne.n	8005364 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800527e:	7bfb      	ldrb	r3, [r7, #15]
 8005280:	2b22      	cmp	r3, #34	; 0x22
 8005282:	d002      	beq.n	800528a <I2C_Slave_STOPF+0x6a>
 8005284:	7bfb      	ldrb	r3, [r7, #15]
 8005286:	2b2a      	cmp	r3, #42	; 0x2a
 8005288:	d135      	bne.n	80052f6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	b29a      	uxth	r2, r3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800529c:	b29b      	uxth	r3, r3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d005      	beq.n	80052ae <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a6:	f043 0204 	orr.w	r2, r3, #4
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	685a      	ldr	r2, [r3, #4]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052bc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c2:	4618      	mov	r0, r3
 80052c4:	f7fe f8a4 	bl	8003410 <HAL_DMA_GetState>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d049      	beq.n	8005362 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d2:	4a69      	ldr	r2, [pc, #420]	; (8005478 <I2C_Slave_STOPF+0x258>)
 80052d4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052da:	4618      	mov	r0, r3
 80052dc:	f7fd feec 	bl	80030b8 <HAL_DMA_Abort_IT>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d03d      	beq.n	8005362 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80052f0:	4610      	mov	r0, r2
 80052f2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80052f4:	e035      	b.n	8005362 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	b29a      	uxth	r2, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005308:	b29b      	uxth	r3, r3
 800530a:	2b00      	cmp	r3, #0
 800530c:	d005      	beq.n	800531a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005312:	f043 0204 	orr.w	r2, r3, #4
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	685a      	ldr	r2, [r3, #4]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005328:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800532e:	4618      	mov	r0, r3
 8005330:	f7fe f86e 	bl	8003410 <HAL_DMA_GetState>
 8005334:	4603      	mov	r3, r0
 8005336:	2b01      	cmp	r3, #1
 8005338:	d014      	beq.n	8005364 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800533e:	4a4e      	ldr	r2, [pc, #312]	; (8005478 <I2C_Slave_STOPF+0x258>)
 8005340:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005346:	4618      	mov	r0, r3
 8005348:	f7fd feb6 	bl	80030b8 <HAL_DMA_Abort_IT>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d008      	beq.n	8005364 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800535c:	4610      	mov	r0, r2
 800535e:	4798      	blx	r3
 8005360:	e000      	b.n	8005364 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005362:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005368:	b29b      	uxth	r3, r3
 800536a:	2b00      	cmp	r3, #0
 800536c:	d03e      	beq.n	80053ec <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	695b      	ldr	r3, [r3, #20]
 8005374:	f003 0304 	and.w	r3, r3, #4
 8005378:	2b04      	cmp	r3, #4
 800537a:	d112      	bne.n	80053a2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	691a      	ldr	r2, [r3, #16]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005386:	b2d2      	uxtb	r2, r2
 8005388:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538e:	1c5a      	adds	r2, r3, #1
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005398:	b29b      	uxth	r3, r3
 800539a:	3b01      	subs	r3, #1
 800539c:	b29a      	uxth	r2, r3
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	695b      	ldr	r3, [r3, #20]
 80053a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ac:	2b40      	cmp	r3, #64	; 0x40
 80053ae:	d112      	bne.n	80053d6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	691a      	ldr	r2, [r3, #16]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ba:	b2d2      	uxtb	r2, r2
 80053bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c2:	1c5a      	adds	r2, r3, #1
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	3b01      	subs	r3, #1
 80053d0:	b29a      	uxth	r2, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053da:	b29b      	uxth	r3, r3
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d005      	beq.n	80053ec <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e4:	f043 0204 	orr.w	r2, r3, #4
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d003      	beq.n	80053fc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f000 f8b3 	bl	8005560 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80053fa:	e039      	b.n	8005470 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80053fc:	7bfb      	ldrb	r3, [r7, #15]
 80053fe:	2b2a      	cmp	r3, #42	; 0x2a
 8005400:	d109      	bne.n	8005416 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2228      	movs	r2, #40	; 0x28
 800540c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f7ff f849 	bl	80044a8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800541c:	b2db      	uxtb	r3, r3
 800541e:	2b28      	cmp	r3, #40	; 0x28
 8005420:	d111      	bne.n	8005446 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a15      	ldr	r2, [pc, #84]	; (800547c <I2C_Slave_STOPF+0x25c>)
 8005426:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2220      	movs	r2, #32
 8005432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f7ff f84a 	bl	80044d8 <HAL_I2C_ListenCpltCallback>
}
 8005444:	e014      	b.n	8005470 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800544a:	2b22      	cmp	r3, #34	; 0x22
 800544c:	d002      	beq.n	8005454 <I2C_Slave_STOPF+0x234>
 800544e:	7bfb      	ldrb	r3, [r7, #15]
 8005450:	2b22      	cmp	r3, #34	; 0x22
 8005452:	d10d      	bne.n	8005470 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2220      	movs	r2, #32
 800545e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f7ff f81c 	bl	80044a8 <HAL_I2C_SlaveRxCpltCallback>
}
 8005470:	bf00      	nop
 8005472:	3710      	adds	r7, #16
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}
 8005478:	080058f1 	.word	0x080058f1
 800547c:	ffff0000 	.word	0xffff0000

08005480 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800548e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005494:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	2b08      	cmp	r3, #8
 800549a:	d002      	beq.n	80054a2 <I2C_Slave_AF+0x22>
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	2b20      	cmp	r3, #32
 80054a0:	d129      	bne.n	80054f6 <I2C_Slave_AF+0x76>
 80054a2:	7bfb      	ldrb	r3, [r7, #15]
 80054a4:	2b28      	cmp	r3, #40	; 0x28
 80054a6:	d126      	bne.n	80054f6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a2c      	ldr	r2, [pc, #176]	; (800555c <I2C_Slave_AF+0xdc>)
 80054ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	685a      	ldr	r2, [r3, #4]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80054bc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054c6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054d6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2220      	movs	r2, #32
 80054e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f7fe fff2 	bl	80044d8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80054f4:	e02e      	b.n	8005554 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80054f6:	7bfb      	ldrb	r3, [r7, #15]
 80054f8:	2b21      	cmp	r3, #33	; 0x21
 80054fa:	d126      	bne.n	800554a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a17      	ldr	r2, [pc, #92]	; (800555c <I2C_Slave_AF+0xdc>)
 8005500:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2221      	movs	r2, #33	; 0x21
 8005506:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2220      	movs	r2, #32
 800550c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	685a      	ldr	r2, [r3, #4]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005526:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005530:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005540:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f7fe ffa6 	bl	8004494 <HAL_I2C_SlaveTxCpltCallback>
}
 8005548:	e004      	b.n	8005554 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005552:	615a      	str	r2, [r3, #20]
}
 8005554:	bf00      	nop
 8005556:	3710      	adds	r7, #16
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}
 800555c:	ffff0000 	.word	0xffff0000

08005560 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800556e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005576:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005578:	7bbb      	ldrb	r3, [r7, #14]
 800557a:	2b10      	cmp	r3, #16
 800557c:	d002      	beq.n	8005584 <I2C_ITError+0x24>
 800557e:	7bbb      	ldrb	r3, [r7, #14]
 8005580:	2b40      	cmp	r3, #64	; 0x40
 8005582:	d10a      	bne.n	800559a <I2C_ITError+0x3a>
 8005584:	7bfb      	ldrb	r3, [r7, #15]
 8005586:	2b22      	cmp	r3, #34	; 0x22
 8005588:	d107      	bne.n	800559a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005598:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800559a:	7bfb      	ldrb	r3, [r7, #15]
 800559c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80055a0:	2b28      	cmp	r3, #40	; 0x28
 80055a2:	d107      	bne.n	80055b4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2228      	movs	r2, #40	; 0x28
 80055ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80055b2:	e015      	b.n	80055e0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055c2:	d00a      	beq.n	80055da <I2C_ITError+0x7a>
 80055c4:	7bfb      	ldrb	r3, [r7, #15]
 80055c6:	2b60      	cmp	r3, #96	; 0x60
 80055c8:	d007      	beq.n	80055da <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2220      	movs	r2, #32
 80055ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055ee:	d162      	bne.n	80056b6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	685a      	ldr	r2, [r3, #4]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055fe:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005604:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005608:	b2db      	uxtb	r3, r3
 800560a:	2b01      	cmp	r3, #1
 800560c:	d020      	beq.n	8005650 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005612:	4a6a      	ldr	r2, [pc, #424]	; (80057bc <I2C_ITError+0x25c>)
 8005614:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800561a:	4618      	mov	r0, r3
 800561c:	f7fd fd4c 	bl	80030b8 <HAL_DMA_Abort_IT>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	f000 8089 	beq.w	800573a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f022 0201 	bic.w	r2, r2, #1
 8005636:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2220      	movs	r2, #32
 800563c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800564a:	4610      	mov	r0, r2
 800564c:	4798      	blx	r3
 800564e:	e074      	b.n	800573a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005654:	4a59      	ldr	r2, [pc, #356]	; (80057bc <I2C_ITError+0x25c>)
 8005656:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800565c:	4618      	mov	r0, r3
 800565e:	f7fd fd2b 	bl	80030b8 <HAL_DMA_Abort_IT>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d068      	beq.n	800573a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	695b      	ldr	r3, [r3, #20]
 800566e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005672:	2b40      	cmp	r3, #64	; 0x40
 8005674:	d10b      	bne.n	800568e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	691a      	ldr	r2, [r3, #16]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005680:	b2d2      	uxtb	r2, r2
 8005682:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005688:	1c5a      	adds	r2, r3, #1
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f022 0201 	bic.w	r2, r2, #1
 800569c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2220      	movs	r2, #32
 80056a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80056b0:	4610      	mov	r0, r2
 80056b2:	4798      	blx	r3
 80056b4:	e041      	b.n	800573a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	2b60      	cmp	r3, #96	; 0x60
 80056c0:	d125      	bne.n	800570e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2220      	movs	r2, #32
 80056c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	695b      	ldr	r3, [r3, #20]
 80056d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056da:	2b40      	cmp	r3, #64	; 0x40
 80056dc:	d10b      	bne.n	80056f6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	691a      	ldr	r2, [r3, #16]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e8:	b2d2      	uxtb	r2, r2
 80056ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f0:	1c5a      	adds	r2, r3, #1
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f022 0201 	bic.w	r2, r2, #1
 8005704:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f7fe ff0e 	bl	8004528 <HAL_I2C_AbortCpltCallback>
 800570c:	e015      	b.n	800573a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	695b      	ldr	r3, [r3, #20]
 8005714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005718:	2b40      	cmp	r3, #64	; 0x40
 800571a:	d10b      	bne.n	8005734 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	691a      	ldr	r2, [r3, #16]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005726:	b2d2      	uxtb	r2, r2
 8005728:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572e:	1c5a      	adds	r2, r3, #1
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f7fe feed 	bl	8004514 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	f003 0301 	and.w	r3, r3, #1
 8005746:	2b00      	cmp	r3, #0
 8005748:	d10e      	bne.n	8005768 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005750:	2b00      	cmp	r3, #0
 8005752:	d109      	bne.n	8005768 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800575a:	2b00      	cmp	r3, #0
 800575c:	d104      	bne.n	8005768 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005764:	2b00      	cmp	r3, #0
 8005766:	d007      	beq.n	8005778 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	685a      	ldr	r2, [r3, #4]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005776:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800577e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005784:	f003 0304 	and.w	r3, r3, #4
 8005788:	2b04      	cmp	r3, #4
 800578a:	d113      	bne.n	80057b4 <I2C_ITError+0x254>
 800578c:	7bfb      	ldrb	r3, [r7, #15]
 800578e:	2b28      	cmp	r3, #40	; 0x28
 8005790:	d110      	bne.n	80057b4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a0a      	ldr	r2, [pc, #40]	; (80057c0 <I2C_ITError+0x260>)
 8005796:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2220      	movs	r2, #32
 80057a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f7fe fe92 	bl	80044d8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80057b4:	bf00      	nop
 80057b6:	3710      	adds	r7, #16
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	080058f1 	.word	0x080058f1
 80057c0:	ffff0000 	.word	0xffff0000

080057c4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b088      	sub	sp, #32
 80057c8:	af02      	add	r7, sp, #8
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	4608      	mov	r0, r1
 80057ce:	4611      	mov	r1, r2
 80057d0:	461a      	mov	r2, r3
 80057d2:	4603      	mov	r3, r0
 80057d4:	817b      	strh	r3, [r7, #10]
 80057d6:	460b      	mov	r3, r1
 80057d8:	813b      	strh	r3, [r7, #8]
 80057da:	4613      	mov	r3, r2
 80057dc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80057ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f0:	9300      	str	r3, [sp, #0]
 80057f2:	6a3b      	ldr	r3, [r7, #32]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80057fa:	68f8      	ldr	r0, [r7, #12]
 80057fc:	f000 f920 	bl	8005a40 <I2C_WaitOnFlagUntilTimeout>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00d      	beq.n	8005822 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005810:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005814:	d103      	bne.n	800581e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f44f 7200 	mov.w	r2, #512	; 0x200
 800581c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800581e:	2303      	movs	r3, #3
 8005820:	e05f      	b.n	80058e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005822:	897b      	ldrh	r3, [r7, #10]
 8005824:	b2db      	uxtb	r3, r3
 8005826:	461a      	mov	r2, r3
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005830:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005834:	6a3a      	ldr	r2, [r7, #32]
 8005836:	492d      	ldr	r1, [pc, #180]	; (80058ec <I2C_RequestMemoryWrite+0x128>)
 8005838:	68f8      	ldr	r0, [r7, #12]
 800583a:	f000 f958 	bl	8005aee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800583e:	4603      	mov	r3, r0
 8005840:	2b00      	cmp	r3, #0
 8005842:	d001      	beq.n	8005848 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	e04c      	b.n	80058e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005848:	2300      	movs	r3, #0
 800584a:	617b      	str	r3, [r7, #20]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	695b      	ldr	r3, [r3, #20]
 8005852:	617b      	str	r3, [r7, #20]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	617b      	str	r3, [r7, #20]
 800585c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800585e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005860:	6a39      	ldr	r1, [r7, #32]
 8005862:	68f8      	ldr	r0, [r7, #12]
 8005864:	f000 f9c2 	bl	8005bec <I2C_WaitOnTXEFlagUntilTimeout>
 8005868:	4603      	mov	r3, r0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00d      	beq.n	800588a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005872:	2b04      	cmp	r3, #4
 8005874:	d107      	bne.n	8005886 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005884:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e02b      	b.n	80058e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800588a:	88fb      	ldrh	r3, [r7, #6]
 800588c:	2b01      	cmp	r3, #1
 800588e:	d105      	bne.n	800589c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005890:	893b      	ldrh	r3, [r7, #8]
 8005892:	b2da      	uxtb	r2, r3
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	611a      	str	r2, [r3, #16]
 800589a:	e021      	b.n	80058e0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800589c:	893b      	ldrh	r3, [r7, #8]
 800589e:	0a1b      	lsrs	r3, r3, #8
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	b2da      	uxtb	r2, r3
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058ac:	6a39      	ldr	r1, [r7, #32]
 80058ae:	68f8      	ldr	r0, [r7, #12]
 80058b0:	f000 f99c 	bl	8005bec <I2C_WaitOnTXEFlagUntilTimeout>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00d      	beq.n	80058d6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058be:	2b04      	cmp	r3, #4
 80058c0:	d107      	bne.n	80058d2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e005      	b.n	80058e2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80058d6:	893b      	ldrh	r3, [r7, #8]
 80058d8:	b2da      	uxtb	r2, r3
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3718      	adds	r7, #24
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	00010002 	.word	0x00010002

080058f0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b086      	sub	sp, #24
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80058f8:	2300      	movs	r3, #0
 80058fa:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005900:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005908:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800590a:	4b4b      	ldr	r3, [pc, #300]	; (8005a38 <I2C_DMAAbort+0x148>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	08db      	lsrs	r3, r3, #3
 8005910:	4a4a      	ldr	r2, [pc, #296]	; (8005a3c <I2C_DMAAbort+0x14c>)
 8005912:	fba2 2303 	umull	r2, r3, r2, r3
 8005916:	0a1a      	lsrs	r2, r3, #8
 8005918:	4613      	mov	r3, r2
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	4413      	add	r3, r2
 800591e:	00da      	lsls	r2, r3, #3
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d106      	bne.n	8005938 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592e:	f043 0220 	orr.w	r2, r3, #32
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005936:	e00a      	b.n	800594e <I2C_DMAAbort+0x5e>
    }
    count--;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	3b01      	subs	r3, #1
 800593c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005948:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800594c:	d0ea      	beq.n	8005924 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005952:	2b00      	cmp	r3, #0
 8005954:	d003      	beq.n	800595e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800595a:	2200      	movs	r2, #0
 800595c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005962:	2b00      	cmp	r3, #0
 8005964:	d003      	beq.n	800596e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800596a:	2200      	movs	r2, #0
 800596c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800597c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	2200      	movs	r2, #0
 8005982:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005988:	2b00      	cmp	r3, #0
 800598a:	d003      	beq.n	8005994 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005990:	2200      	movs	r2, #0
 8005992:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005998:	2b00      	cmp	r3, #0
 800599a:	d003      	beq.n	80059a4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a0:	2200      	movs	r2, #0
 80059a2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f022 0201 	bic.w	r2, r2, #1
 80059b2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	2b60      	cmp	r3, #96	; 0x60
 80059be:	d10e      	bne.n	80059de <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	2220      	movs	r2, #32
 80059c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	2200      	movs	r2, #0
 80059d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80059d6:	6978      	ldr	r0, [r7, #20]
 80059d8:	f7fe fda6 	bl	8004528 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80059dc:	e027      	b.n	8005a2e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80059de:	7cfb      	ldrb	r3, [r7, #19]
 80059e0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80059e4:	2b28      	cmp	r3, #40	; 0x28
 80059e6:	d117      	bne.n	8005a18 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f042 0201 	orr.w	r2, r2, #1
 80059f6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a06:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	2228      	movs	r2, #40	; 0x28
 8005a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005a16:	e007      	b.n	8005a28 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	2220      	movs	r2, #32
 8005a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005a28:	6978      	ldr	r0, [r7, #20]
 8005a2a:	f7fe fd73 	bl	8004514 <HAL_I2C_ErrorCallback>
}
 8005a2e:	bf00      	nop
 8005a30:	3718      	adds	r7, #24
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	20000010 	.word	0x20000010
 8005a3c:	14f8b589 	.word	0x14f8b589

08005a40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	603b      	str	r3, [r7, #0]
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a50:	e025      	b.n	8005a9e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a58:	d021      	beq.n	8005a9e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a5a:	f7fc fd41 	bl	80024e0 <HAL_GetTick>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	1ad3      	subs	r3, r2, r3
 8005a64:	683a      	ldr	r2, [r7, #0]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d302      	bcc.n	8005a70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d116      	bne.n	8005a9e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2220      	movs	r2, #32
 8005a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8a:	f043 0220 	orr.w	r2, r3, #32
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e023      	b.n	8005ae6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	0c1b      	lsrs	r3, r3, #16
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d10d      	bne.n	8005ac4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	695b      	ldr	r3, [r3, #20]
 8005aae:	43da      	mvns	r2, r3
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	bf0c      	ite	eq
 8005aba:	2301      	moveq	r3, #1
 8005abc:	2300      	movne	r3, #0
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	e00c      	b.n	8005ade <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	699b      	ldr	r3, [r3, #24]
 8005aca:	43da      	mvns	r2, r3
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	4013      	ands	r3, r2
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	bf0c      	ite	eq
 8005ad6:	2301      	moveq	r3, #1
 8005ad8:	2300      	movne	r3, #0
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	461a      	mov	r2, r3
 8005ade:	79fb      	ldrb	r3, [r7, #7]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d0b6      	beq.n	8005a52 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ae4:	2300      	movs	r3, #0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3710      	adds	r7, #16
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}

08005aee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005aee:	b580      	push	{r7, lr}
 8005af0:	b084      	sub	sp, #16
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	60f8      	str	r0, [r7, #12]
 8005af6:	60b9      	str	r1, [r7, #8]
 8005af8:	607a      	str	r2, [r7, #4]
 8005afa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005afc:	e051      	b.n	8005ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	695b      	ldr	r3, [r3, #20]
 8005b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b0c:	d123      	bne.n	8005b56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b1c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b26:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2220      	movs	r2, #32
 8005b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b42:	f043 0204 	orr.w	r2, r3, #4
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e046      	b.n	8005be4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b5c:	d021      	beq.n	8005ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b5e:	f7fc fcbf 	bl	80024e0 <HAL_GetTick>
 8005b62:	4602      	mov	r2, r0
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	1ad3      	subs	r3, r2, r3
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d302      	bcc.n	8005b74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d116      	bne.n	8005ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2200      	movs	r2, #0
 8005b78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2220      	movs	r2, #32
 8005b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8e:	f043 0220 	orr.w	r2, r3, #32
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e020      	b.n	8005be4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	0c1b      	lsrs	r3, r3, #16
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d10c      	bne.n	8005bc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	695b      	ldr	r3, [r3, #20]
 8005bb2:	43da      	mvns	r2, r3
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	bf14      	ite	ne
 8005bbe:	2301      	movne	r3, #1
 8005bc0:	2300      	moveq	r3, #0
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	e00b      	b.n	8005bde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	699b      	ldr	r3, [r3, #24]
 8005bcc:	43da      	mvns	r2, r3
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	bf14      	ite	ne
 8005bd8:	2301      	movne	r3, #1
 8005bda:	2300      	moveq	r3, #0
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d18d      	bne.n	8005afe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005be2:	2300      	movs	r3, #0
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3710      	adds	r7, #16
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005bf8:	e02d      	b.n	8005c56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005bfa:	68f8      	ldr	r0, [r7, #12]
 8005bfc:	f000 f8aa 	bl	8005d54 <I2C_IsAcknowledgeFailed>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d001      	beq.n	8005c0a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e02d      	b.n	8005c66 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c10:	d021      	beq.n	8005c56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c12:	f7fc fc65 	bl	80024e0 <HAL_GetTick>
 8005c16:	4602      	mov	r2, r0
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	68ba      	ldr	r2, [r7, #8]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d302      	bcc.n	8005c28 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d116      	bne.n	8005c56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2220      	movs	r2, #32
 8005c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c42:	f043 0220 	orr.w	r2, r3, #32
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e007      	b.n	8005c66 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	695b      	ldr	r3, [r3, #20]
 8005c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c60:	2b80      	cmp	r3, #128	; 0x80
 8005c62:	d1ca      	bne.n	8005bfa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3710      	adds	r7, #16
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}

08005c6e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c6e:	b580      	push	{r7, lr}
 8005c70:	b084      	sub	sp, #16
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	60f8      	str	r0, [r7, #12]
 8005c76:	60b9      	str	r1, [r7, #8]
 8005c78:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005c7a:	e02d      	b.n	8005cd8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005c7c:	68f8      	ldr	r0, [r7, #12]
 8005c7e:	f000 f869 	bl	8005d54 <I2C_IsAcknowledgeFailed>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d001      	beq.n	8005c8c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e02d      	b.n	8005ce8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c92:	d021      	beq.n	8005cd8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c94:	f7fc fc24 	bl	80024e0 <HAL_GetTick>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	68ba      	ldr	r2, [r7, #8]
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d302      	bcc.n	8005caa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d116      	bne.n	8005cd8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2200      	movs	r2, #0
 8005cae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2220      	movs	r2, #32
 8005cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc4:	f043 0220 	orr.w	r2, r3, #32
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e007      	b.n	8005ce8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	695b      	ldr	r3, [r3, #20]
 8005cde:	f003 0304 	and.w	r3, r3, #4
 8005ce2:	2b04      	cmp	r3, #4
 8005ce4:	d1ca      	bne.n	8005c7c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ce6:	2300      	movs	r3, #0
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3710      	adds	r7, #16
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b085      	sub	sp, #20
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005cfc:	4b13      	ldr	r3, [pc, #76]	; (8005d4c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	08db      	lsrs	r3, r3, #3
 8005d02:	4a13      	ldr	r2, [pc, #76]	; (8005d50 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005d04:	fba2 2303 	umull	r2, r3, r2, r3
 8005d08:	0a1a      	lsrs	r2, r3, #8
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	4413      	add	r3, r2
 8005d10:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	3b01      	subs	r3, #1
 8005d16:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d107      	bne.n	8005d2e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d22:	f043 0220 	orr.w	r2, r3, #32
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e008      	b.n	8005d40 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d3c:	d0e9      	beq.n	8005d12 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3714      	adds	r7, #20
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr
 8005d4c:	20000010 	.word	0x20000010
 8005d50:	14f8b589 	.word	0x14f8b589

08005d54 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	695b      	ldr	r3, [r3, #20]
 8005d62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d6a:	d11b      	bne.n	8005da4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005d74:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2220      	movs	r2, #32
 8005d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d90:	f043 0204 	orr.w	r2, r3, #4
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	e000      	b.n	8005da6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	370c      	adds	r7, #12
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr

08005db2 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005db2:	b480      	push	{r7}
 8005db4:	b083      	sub	sp, #12
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dbe:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005dc2:	d103      	bne.n	8005dcc <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005dca:	e007      	b.n	8005ddc <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005dd4:	d102      	bne.n	8005ddc <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2208      	movs	r2, #8
 8005dda:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005ddc:	bf00      	nop
 8005dde:	370c      	adds	r7, #12
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dea:	b08f      	sub	sp, #60	; 0x3c
 8005dec:	af0a      	add	r7, sp, #40	; 0x28
 8005dee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d101      	bne.n	8005dfa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e10f      	b.n	800601a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d106      	bne.n	8005e1a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f00a fbaf 	bl	8010578 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2203      	movs	r2, #3
 8005e1e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d102      	bne.n	8005e34 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f004 f9c6 	bl	800a1ca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	603b      	str	r3, [r7, #0]
 8005e44:	687e      	ldr	r6, [r7, #4]
 8005e46:	466d      	mov	r5, sp
 8005e48:	f106 0410 	add.w	r4, r6, #16
 8005e4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e54:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005e58:	e885 0003 	stmia.w	r5, {r0, r1}
 8005e5c:	1d33      	adds	r3, r6, #4
 8005e5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005e60:	6838      	ldr	r0, [r7, #0]
 8005e62:	f004 f89d 	bl	8009fa0 <USB_CoreInit>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d005      	beq.n	8005e78 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2202      	movs	r2, #2
 8005e70:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	e0d0      	b.n	800601a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2100      	movs	r1, #0
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f004 f9b4 	bl	800a1ec <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e84:	2300      	movs	r3, #0
 8005e86:	73fb      	strb	r3, [r7, #15]
 8005e88:	e04a      	b.n	8005f20 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005e8a:	7bfa      	ldrb	r2, [r7, #15]
 8005e8c:	6879      	ldr	r1, [r7, #4]
 8005e8e:	4613      	mov	r3, r2
 8005e90:	00db      	lsls	r3, r3, #3
 8005e92:	1a9b      	subs	r3, r3, r2
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	440b      	add	r3, r1
 8005e98:	333d      	adds	r3, #61	; 0x3d
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005e9e:	7bfa      	ldrb	r2, [r7, #15]
 8005ea0:	6879      	ldr	r1, [r7, #4]
 8005ea2:	4613      	mov	r3, r2
 8005ea4:	00db      	lsls	r3, r3, #3
 8005ea6:	1a9b      	subs	r3, r3, r2
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	440b      	add	r3, r1
 8005eac:	333c      	adds	r3, #60	; 0x3c
 8005eae:	7bfa      	ldrb	r2, [r7, #15]
 8005eb0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005eb2:	7bfa      	ldrb	r2, [r7, #15]
 8005eb4:	7bfb      	ldrb	r3, [r7, #15]
 8005eb6:	b298      	uxth	r0, r3
 8005eb8:	6879      	ldr	r1, [r7, #4]
 8005eba:	4613      	mov	r3, r2
 8005ebc:	00db      	lsls	r3, r3, #3
 8005ebe:	1a9b      	subs	r3, r3, r2
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	440b      	add	r3, r1
 8005ec4:	3342      	adds	r3, #66	; 0x42
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005eca:	7bfa      	ldrb	r2, [r7, #15]
 8005ecc:	6879      	ldr	r1, [r7, #4]
 8005ece:	4613      	mov	r3, r2
 8005ed0:	00db      	lsls	r3, r3, #3
 8005ed2:	1a9b      	subs	r3, r3, r2
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	440b      	add	r3, r1
 8005ed8:	333f      	adds	r3, #63	; 0x3f
 8005eda:	2200      	movs	r2, #0
 8005edc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005ede:	7bfa      	ldrb	r2, [r7, #15]
 8005ee0:	6879      	ldr	r1, [r7, #4]
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	00db      	lsls	r3, r3, #3
 8005ee6:	1a9b      	subs	r3, r3, r2
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	440b      	add	r3, r1
 8005eec:	3344      	adds	r3, #68	; 0x44
 8005eee:	2200      	movs	r2, #0
 8005ef0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005ef2:	7bfa      	ldrb	r2, [r7, #15]
 8005ef4:	6879      	ldr	r1, [r7, #4]
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	00db      	lsls	r3, r3, #3
 8005efa:	1a9b      	subs	r3, r3, r2
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	440b      	add	r3, r1
 8005f00:	3348      	adds	r3, #72	; 0x48
 8005f02:	2200      	movs	r2, #0
 8005f04:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005f06:	7bfa      	ldrb	r2, [r7, #15]
 8005f08:	6879      	ldr	r1, [r7, #4]
 8005f0a:	4613      	mov	r3, r2
 8005f0c:	00db      	lsls	r3, r3, #3
 8005f0e:	1a9b      	subs	r3, r3, r2
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	440b      	add	r3, r1
 8005f14:	3350      	adds	r3, #80	; 0x50
 8005f16:	2200      	movs	r2, #0
 8005f18:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f1a:	7bfb      	ldrb	r3, [r7, #15]
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	73fb      	strb	r3, [r7, #15]
 8005f20:	7bfa      	ldrb	r2, [r7, #15]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d3af      	bcc.n	8005e8a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	73fb      	strb	r3, [r7, #15]
 8005f2e:	e044      	b.n	8005fba <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005f30:	7bfa      	ldrb	r2, [r7, #15]
 8005f32:	6879      	ldr	r1, [r7, #4]
 8005f34:	4613      	mov	r3, r2
 8005f36:	00db      	lsls	r3, r3, #3
 8005f38:	1a9b      	subs	r3, r3, r2
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	440b      	add	r3, r1
 8005f3e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005f42:	2200      	movs	r2, #0
 8005f44:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005f46:	7bfa      	ldrb	r2, [r7, #15]
 8005f48:	6879      	ldr	r1, [r7, #4]
 8005f4a:	4613      	mov	r3, r2
 8005f4c:	00db      	lsls	r3, r3, #3
 8005f4e:	1a9b      	subs	r3, r3, r2
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	440b      	add	r3, r1
 8005f54:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005f58:	7bfa      	ldrb	r2, [r7, #15]
 8005f5a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005f5c:	7bfa      	ldrb	r2, [r7, #15]
 8005f5e:	6879      	ldr	r1, [r7, #4]
 8005f60:	4613      	mov	r3, r2
 8005f62:	00db      	lsls	r3, r3, #3
 8005f64:	1a9b      	subs	r3, r3, r2
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	440b      	add	r3, r1
 8005f6a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005f6e:	2200      	movs	r2, #0
 8005f70:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005f72:	7bfa      	ldrb	r2, [r7, #15]
 8005f74:	6879      	ldr	r1, [r7, #4]
 8005f76:	4613      	mov	r3, r2
 8005f78:	00db      	lsls	r3, r3, #3
 8005f7a:	1a9b      	subs	r3, r3, r2
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	440b      	add	r3, r1
 8005f80:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005f84:	2200      	movs	r2, #0
 8005f86:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005f88:	7bfa      	ldrb	r2, [r7, #15]
 8005f8a:	6879      	ldr	r1, [r7, #4]
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	00db      	lsls	r3, r3, #3
 8005f90:	1a9b      	subs	r3, r3, r2
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	440b      	add	r3, r1
 8005f96:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005f9e:	7bfa      	ldrb	r2, [r7, #15]
 8005fa0:	6879      	ldr	r1, [r7, #4]
 8005fa2:	4613      	mov	r3, r2
 8005fa4:	00db      	lsls	r3, r3, #3
 8005fa6:	1a9b      	subs	r3, r3, r2
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	440b      	add	r3, r1
 8005fac:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005fb4:	7bfb      	ldrb	r3, [r7, #15]
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	73fb      	strb	r3, [r7, #15]
 8005fba:	7bfa      	ldrb	r2, [r7, #15]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d3b5      	bcc.n	8005f30 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	603b      	str	r3, [r7, #0]
 8005fca:	687e      	ldr	r6, [r7, #4]
 8005fcc:	466d      	mov	r5, sp
 8005fce:	f106 0410 	add.w	r4, r6, #16
 8005fd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005fd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005fd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005fd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005fda:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005fde:	e885 0003 	stmia.w	r5, {r0, r1}
 8005fe2:	1d33      	adds	r3, r6, #4
 8005fe4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005fe6:	6838      	ldr	r0, [r7, #0]
 8005fe8:	f004 f92a 	bl	800a240 <USB_DevInit>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d005      	beq.n	8005ffe <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2202      	movs	r2, #2
 8005ff6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e00d      	b.n	800601a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2201      	movs	r2, #1
 800600a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4618      	mov	r0, r3
 8006014:	f005 f972 	bl	800b2fc <USB_DevDisconnect>

  return HAL_OK;
 8006018:	2300      	movs	r3, #0
}
 800601a:	4618      	mov	r0, r3
 800601c:	3714      	adds	r7, #20
 800601e:	46bd      	mov	sp, r7
 8006020:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006022 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006022:	b580      	push	{r7, lr}
 8006024:	b084      	sub	sp, #16
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006036:	2b01      	cmp	r3, #1
 8006038:	d101      	bne.n	800603e <HAL_PCD_Start+0x1c>
 800603a:	2302      	movs	r3, #2
 800603c:	e020      	b.n	8006080 <HAL_PCD_Start+0x5e>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2201      	movs	r2, #1
 8006042:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800604a:	2b01      	cmp	r3, #1
 800604c:	d109      	bne.n	8006062 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006052:	2b01      	cmp	r3, #1
 8006054:	d005      	beq.n	8006062 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4618      	mov	r0, r3
 8006068:	f004 f89e 	bl	800a1a8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4618      	mov	r0, r3
 8006072:	f005 f922 	bl	800b2ba <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800607e:	2300      	movs	r3, #0
}
 8006080:	4618      	mov	r0, r3
 8006082:	3710      	adds	r7, #16
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006088:	b590      	push	{r4, r7, lr}
 800608a:	b08d      	sub	sp, #52	; 0x34
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006096:	6a3b      	ldr	r3, [r7, #32]
 8006098:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4618      	mov	r0, r3
 80060a0:	f005 f9e0 	bl	800b464 <USB_GetMode>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	f040 839d 	bne.w	80067e6 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4618      	mov	r0, r3
 80060b2:	f005 f944 	bl	800b33e <USB_ReadInterrupts>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	f000 8393 	beq.w	80067e4 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4618      	mov	r0, r3
 80060c4:	f005 f93b 	bl	800b33e <USB_ReadInterrupts>
 80060c8:	4603      	mov	r3, r0
 80060ca:	f003 0302 	and.w	r3, r3, #2
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d107      	bne.n	80060e2 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	695a      	ldr	r2, [r3, #20]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f002 0202 	and.w	r2, r2, #2
 80060e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4618      	mov	r0, r3
 80060e8:	f005 f929 	bl	800b33e <USB_ReadInterrupts>
 80060ec:	4603      	mov	r3, r0
 80060ee:	f003 0310 	and.w	r3, r3, #16
 80060f2:	2b10      	cmp	r3, #16
 80060f4:	d161      	bne.n	80061ba <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	699a      	ldr	r2, [r3, #24]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f022 0210 	bic.w	r2, r2, #16
 8006104:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8006106:	6a3b      	ldr	r3, [r7, #32]
 8006108:	6a1b      	ldr	r3, [r3, #32]
 800610a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	f003 020f 	and.w	r2, r3, #15
 8006112:	4613      	mov	r3, r2
 8006114:	00db      	lsls	r3, r3, #3
 8006116:	1a9b      	subs	r3, r3, r2
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	4413      	add	r3, r2
 8006122:	3304      	adds	r3, #4
 8006124:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	0c5b      	lsrs	r3, r3, #17
 800612a:	f003 030f 	and.w	r3, r3, #15
 800612e:	2b02      	cmp	r3, #2
 8006130:	d124      	bne.n	800617c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006132:	69ba      	ldr	r2, [r7, #24]
 8006134:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006138:	4013      	ands	r3, r2
 800613a:	2b00      	cmp	r3, #0
 800613c:	d035      	beq.n	80061aa <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006142:	69bb      	ldr	r3, [r7, #24]
 8006144:	091b      	lsrs	r3, r3, #4
 8006146:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006148:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800614c:	b29b      	uxth	r3, r3
 800614e:	461a      	mov	r2, r3
 8006150:	6a38      	ldr	r0, [r7, #32]
 8006152:	f004 ff8f 	bl	800b074 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	68da      	ldr	r2, [r3, #12]
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	091b      	lsrs	r3, r3, #4
 800615e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006162:	441a      	add	r2, r3
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	699a      	ldr	r2, [r3, #24]
 800616c:	69bb      	ldr	r3, [r7, #24]
 800616e:	091b      	lsrs	r3, r3, #4
 8006170:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006174:	441a      	add	r2, r3
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	619a      	str	r2, [r3, #24]
 800617a:	e016      	b.n	80061aa <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800617c:	69bb      	ldr	r3, [r7, #24]
 800617e:	0c5b      	lsrs	r3, r3, #17
 8006180:	f003 030f 	and.w	r3, r3, #15
 8006184:	2b06      	cmp	r3, #6
 8006186:	d110      	bne.n	80061aa <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800618e:	2208      	movs	r2, #8
 8006190:	4619      	mov	r1, r3
 8006192:	6a38      	ldr	r0, [r7, #32]
 8006194:	f004 ff6e 	bl	800b074 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	699a      	ldr	r2, [r3, #24]
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	091b      	lsrs	r3, r3, #4
 80061a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80061a4:	441a      	add	r2, r3
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	699a      	ldr	r2, [r3, #24]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f042 0210 	orr.w	r2, r2, #16
 80061b8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4618      	mov	r0, r3
 80061c0:	f005 f8bd 	bl	800b33e <USB_ReadInterrupts>
 80061c4:	4603      	mov	r3, r0
 80061c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80061ca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80061ce:	d16e      	bne.n	80062ae <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80061d0:	2300      	movs	r3, #0
 80061d2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4618      	mov	r0, r3
 80061da:	f005 f8c3 	bl	800b364 <USB_ReadDevAllOutEpInterrupt>
 80061de:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80061e0:	e062      	b.n	80062a8 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80061e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e4:	f003 0301 	and.w	r3, r3, #1
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d057      	beq.n	800629c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061f2:	b2d2      	uxtb	r2, r2
 80061f4:	4611      	mov	r1, r2
 80061f6:	4618      	mov	r0, r3
 80061f8:	f005 f8e8 	bl	800b3cc <USB_ReadDevOutEPInterrupt>
 80061fc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	f003 0301 	and.w	r3, r3, #1
 8006204:	2b00      	cmp	r3, #0
 8006206:	d00c      	beq.n	8006222 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620a:	015a      	lsls	r2, r3, #5
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	4413      	add	r3, r2
 8006210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006214:	461a      	mov	r2, r3
 8006216:	2301      	movs	r3, #1
 8006218:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800621a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f000 fdb1 	bl	8006d84 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	f003 0308 	and.w	r3, r3, #8
 8006228:	2b00      	cmp	r3, #0
 800622a:	d00c      	beq.n	8006246 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800622c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622e:	015a      	lsls	r2, r3, #5
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	4413      	add	r3, r2
 8006234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006238:	461a      	mov	r2, r3
 800623a:	2308      	movs	r3, #8
 800623c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800623e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f000 feab 	bl	8006f9c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	f003 0310 	and.w	r3, r3, #16
 800624c:	2b00      	cmp	r3, #0
 800624e:	d008      	beq.n	8006262 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006252:	015a      	lsls	r2, r3, #5
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	4413      	add	r3, r2
 8006258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800625c:	461a      	mov	r2, r3
 800625e:	2310      	movs	r3, #16
 8006260:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	f003 0320 	and.w	r3, r3, #32
 8006268:	2b00      	cmp	r3, #0
 800626a:	d008      	beq.n	800627e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800626c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626e:	015a      	lsls	r2, r3, #5
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	4413      	add	r3, r2
 8006274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006278:	461a      	mov	r2, r3
 800627a:	2320      	movs	r3, #32
 800627c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006284:	2b00      	cmp	r3, #0
 8006286:	d009      	beq.n	800629c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628a:	015a      	lsls	r2, r3, #5
 800628c:	69fb      	ldr	r3, [r7, #28]
 800628e:	4413      	add	r3, r2
 8006290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006294:	461a      	mov	r2, r3
 8006296:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800629a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800629c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629e:	3301      	adds	r3, #1
 80062a0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80062a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a4:	085b      	lsrs	r3, r3, #1
 80062a6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80062a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d199      	bne.n	80061e2 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4618      	mov	r0, r3
 80062b4:	f005 f843 	bl	800b33e <USB_ReadInterrupts>
 80062b8:	4603      	mov	r3, r0
 80062ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80062c2:	f040 80c0 	bne.w	8006446 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4618      	mov	r0, r3
 80062cc:	f005 f864 	bl	800b398 <USB_ReadDevAllInEpInterrupt>
 80062d0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80062d2:	2300      	movs	r3, #0
 80062d4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80062d6:	e0b2      	b.n	800643e <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80062d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062da:	f003 0301 	and.w	r3, r3, #1
 80062de:	2b00      	cmp	r3, #0
 80062e0:	f000 80a7 	beq.w	8006432 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062ea:	b2d2      	uxtb	r2, r2
 80062ec:	4611      	mov	r1, r2
 80062ee:	4618      	mov	r0, r3
 80062f0:	f005 f88a 	bl	800b408 <USB_ReadDevInEPInterrupt>
 80062f4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	f003 0301 	and.w	r3, r3, #1
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d057      	beq.n	80063b0 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006302:	f003 030f 	and.w	r3, r3, #15
 8006306:	2201      	movs	r2, #1
 8006308:	fa02 f303 	lsl.w	r3, r2, r3
 800630c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006314:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	43db      	mvns	r3, r3
 800631a:	69f9      	ldr	r1, [r7, #28]
 800631c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006320:	4013      	ands	r3, r2
 8006322:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006326:	015a      	lsls	r2, r3, #5
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	4413      	add	r3, r2
 800632c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006330:	461a      	mov	r2, r3
 8006332:	2301      	movs	r3, #1
 8006334:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	2b01      	cmp	r3, #1
 800633c:	d132      	bne.n	80063a4 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800633e:	6879      	ldr	r1, [r7, #4]
 8006340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006342:	4613      	mov	r3, r2
 8006344:	00db      	lsls	r3, r3, #3
 8006346:	1a9b      	subs	r3, r3, r2
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	440b      	add	r3, r1
 800634c:	3348      	adds	r3, #72	; 0x48
 800634e:	6819      	ldr	r1, [r3, #0]
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006354:	4613      	mov	r3, r2
 8006356:	00db      	lsls	r3, r3, #3
 8006358:	1a9b      	subs	r3, r3, r2
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	4403      	add	r3, r0
 800635e:	3344      	adds	r3, #68	; 0x44
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4419      	add	r1, r3
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006368:	4613      	mov	r3, r2
 800636a:	00db      	lsls	r3, r3, #3
 800636c:	1a9b      	subs	r3, r3, r2
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	4403      	add	r3, r0
 8006372:	3348      	adds	r3, #72	; 0x48
 8006374:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006378:	2b00      	cmp	r3, #0
 800637a:	d113      	bne.n	80063a4 <HAL_PCD_IRQHandler+0x31c>
 800637c:	6879      	ldr	r1, [r7, #4]
 800637e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006380:	4613      	mov	r3, r2
 8006382:	00db      	lsls	r3, r3, #3
 8006384:	1a9b      	subs	r3, r3, r2
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	440b      	add	r3, r1
 800638a:	3350      	adds	r3, #80	; 0x50
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d108      	bne.n	80063a4 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6818      	ldr	r0, [r3, #0]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800639c:	461a      	mov	r2, r3
 800639e:	2101      	movs	r1, #1
 80063a0:	f005 f892 	bl	800b4c8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80063a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	4619      	mov	r1, r3
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f00a f965 	bl	801067a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	f003 0308 	and.w	r3, r3, #8
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d008      	beq.n	80063cc <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80063ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063bc:	015a      	lsls	r2, r3, #5
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	4413      	add	r3, r2
 80063c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063c6:	461a      	mov	r2, r3
 80063c8:	2308      	movs	r3, #8
 80063ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	f003 0310 	and.w	r3, r3, #16
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d008      	beq.n	80063e8 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80063d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d8:	015a      	lsls	r2, r3, #5
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	4413      	add	r3, r2
 80063de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063e2:	461a      	mov	r2, r3
 80063e4:	2310      	movs	r3, #16
 80063e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d008      	beq.n	8006404 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80063f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f4:	015a      	lsls	r2, r3, #5
 80063f6:	69fb      	ldr	r3, [r7, #28]
 80063f8:	4413      	add	r3, r2
 80063fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063fe:	461a      	mov	r2, r3
 8006400:	2340      	movs	r3, #64	; 0x40
 8006402:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	f003 0302 	and.w	r3, r3, #2
 800640a:	2b00      	cmp	r3, #0
 800640c:	d008      	beq.n	8006420 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800640e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006410:	015a      	lsls	r2, r3, #5
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	4413      	add	r3, r2
 8006416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800641a:	461a      	mov	r2, r3
 800641c:	2302      	movs	r3, #2
 800641e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006426:	2b00      	cmp	r3, #0
 8006428:	d003      	beq.n	8006432 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800642a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 fc1b 	bl	8006c68 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006434:	3301      	adds	r3, #1
 8006436:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800643a:	085b      	lsrs	r3, r3, #1
 800643c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800643e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006440:	2b00      	cmp	r3, #0
 8006442:	f47f af49 	bne.w	80062d8 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4618      	mov	r0, r3
 800644c:	f004 ff77 	bl	800b33e <USB_ReadInterrupts>
 8006450:	4603      	mov	r3, r0
 8006452:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006456:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800645a:	d122      	bne.n	80064a2 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800645c:	69fb      	ldr	r3, [r7, #28]
 800645e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	69fa      	ldr	r2, [r7, #28]
 8006466:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800646a:	f023 0301 	bic.w	r3, r3, #1
 800646e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006476:	2b01      	cmp	r3, #1
 8006478:	d108      	bne.n	800648c <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006482:	2100      	movs	r1, #0
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f000 fe27 	bl	80070d8 <HAL_PCDEx_LPM_Callback>
 800648a:	e002      	b.n	8006492 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f00a f96b 	bl	8010768 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	695a      	ldr	r2, [r3, #20]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80064a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4618      	mov	r0, r3
 80064a8:	f004 ff49 	bl	800b33e <USB_ReadInterrupts>
 80064ac:	4603      	mov	r3, r0
 80064ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064b6:	d112      	bne.n	80064de <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	f003 0301 	and.w	r3, r3, #1
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d102      	bne.n	80064ce <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f00a f927 	bl	801071c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	695a      	ldr	r2, [r3, #20]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80064dc:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4618      	mov	r0, r3
 80064e4:	f004 ff2b 	bl	800b33e <USB_ReadInterrupts>
 80064e8:	4603      	mov	r3, r0
 80064ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80064ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064f2:	f040 80c7 	bne.w	8006684 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80064f6:	69fb      	ldr	r3, [r7, #28]
 80064f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	69fa      	ldr	r2, [r7, #28]
 8006500:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006504:	f023 0301 	bic.w	r3, r3, #1
 8006508:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2110      	movs	r1, #16
 8006510:	4618      	mov	r0, r3
 8006512:	f003 fff9 	bl	800a508 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006516:	2300      	movs	r3, #0
 8006518:	62fb      	str	r3, [r7, #44]	; 0x2c
 800651a:	e056      	b.n	80065ca <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800651c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800651e:	015a      	lsls	r2, r3, #5
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	4413      	add	r3, r2
 8006524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006528:	461a      	mov	r2, r3
 800652a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800652e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006532:	015a      	lsls	r2, r3, #5
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	4413      	add	r3, r2
 8006538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006540:	0151      	lsls	r1, r2, #5
 8006542:	69fa      	ldr	r2, [r7, #28]
 8006544:	440a      	add	r2, r1
 8006546:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800654a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800654e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006552:	015a      	lsls	r2, r3, #5
 8006554:	69fb      	ldr	r3, [r7, #28]
 8006556:	4413      	add	r3, r2
 8006558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006560:	0151      	lsls	r1, r2, #5
 8006562:	69fa      	ldr	r2, [r7, #28]
 8006564:	440a      	add	r2, r1
 8006566:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800656a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800656e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006572:	015a      	lsls	r2, r3, #5
 8006574:	69fb      	ldr	r3, [r7, #28]
 8006576:	4413      	add	r3, r2
 8006578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800657c:	461a      	mov	r2, r3
 800657e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006582:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006586:	015a      	lsls	r2, r3, #5
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	4413      	add	r3, r2
 800658c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006594:	0151      	lsls	r1, r2, #5
 8006596:	69fa      	ldr	r2, [r7, #28]
 8006598:	440a      	add	r2, r1
 800659a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800659e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80065a2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80065a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a6:	015a      	lsls	r2, r3, #5
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	4413      	add	r3, r2
 80065ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065b4:	0151      	lsls	r1, r2, #5
 80065b6:	69fa      	ldr	r2, [r7, #28]
 80065b8:	440a      	add	r2, r1
 80065ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80065c2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80065c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c6:	3301      	adds	r3, #1
 80065c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d3a3      	bcc.n	800651c <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065da:	69db      	ldr	r3, [r3, #28]
 80065dc:	69fa      	ldr	r2, [r7, #28]
 80065de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065e2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80065e6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d016      	beq.n	800661e <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065fa:	69fa      	ldr	r2, [r7, #28]
 80065fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006600:	f043 030b 	orr.w	r3, r3, #11
 8006604:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800660e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006610:	69fa      	ldr	r2, [r7, #28]
 8006612:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006616:	f043 030b 	orr.w	r3, r3, #11
 800661a:	6453      	str	r3, [r2, #68]	; 0x44
 800661c:	e015      	b.n	800664a <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800661e:	69fb      	ldr	r3, [r7, #28]
 8006620:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006624:	695b      	ldr	r3, [r3, #20]
 8006626:	69fa      	ldr	r2, [r7, #28]
 8006628:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800662c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006630:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8006634:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006636:	69fb      	ldr	r3, [r7, #28]
 8006638:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800663c:	691b      	ldr	r3, [r3, #16]
 800663e:	69fa      	ldr	r2, [r7, #28]
 8006640:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006644:	f043 030b 	orr.w	r3, r3, #11
 8006648:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800664a:	69fb      	ldr	r3, [r7, #28]
 800664c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	69fa      	ldr	r2, [r7, #28]
 8006654:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006658:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800665c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6818      	ldr	r0, [r3, #0]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800666e:	461a      	mov	r2, r3
 8006670:	f004 ff2a 	bl	800b4c8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	695a      	ldr	r2, [r3, #20]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006682:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4618      	mov	r0, r3
 800668a:	f004 fe58 	bl	800b33e <USB_ReadInterrupts>
 800668e:	4603      	mov	r3, r0
 8006690:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006694:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006698:	d124      	bne.n	80066e4 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4618      	mov	r0, r3
 80066a0:	f004 feee 	bl	800b480 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4618      	mov	r0, r3
 80066aa:	f003 ff8e 	bl	800a5ca <USB_GetDevSpeed>
 80066ae:	4603      	mov	r3, r0
 80066b0:	461a      	mov	r2, r3
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681c      	ldr	r4, [r3, #0]
 80066ba:	f001 f947 	bl	800794c <HAL_RCC_GetHCLKFreq>
 80066be:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	461a      	mov	r2, r3
 80066c8:	4620      	mov	r0, r4
 80066ca:	f003 fccb 	bl	800a064 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f009 fffb 	bl	80106ca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	695a      	ldr	r2, [r3, #20]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80066e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4618      	mov	r0, r3
 80066ea:	f004 fe28 	bl	800b33e <USB_ReadInterrupts>
 80066ee:	4603      	mov	r3, r0
 80066f0:	f003 0308 	and.w	r3, r3, #8
 80066f4:	2b08      	cmp	r3, #8
 80066f6:	d10a      	bne.n	800670e <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f009 ffd8 	bl	80106ae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	695a      	ldr	r2, [r3, #20]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f002 0208 	and.w	r2, r2, #8
 800670c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4618      	mov	r0, r3
 8006714:	f004 fe13 	bl	800b33e <USB_ReadInterrupts>
 8006718:	4603      	mov	r3, r0
 800671a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800671e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006722:	d10f      	bne.n	8006744 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006724:	2300      	movs	r3, #0
 8006726:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672a:	b2db      	uxtb	r3, r3
 800672c:	4619      	mov	r1, r3
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f00a f83a 	bl	80107a8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	695a      	ldr	r2, [r3, #20]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006742:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4618      	mov	r0, r3
 800674a:	f004 fdf8 	bl	800b33e <USB_ReadInterrupts>
 800674e:	4603      	mov	r3, r0
 8006750:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006754:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006758:	d10f      	bne.n	800677a <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800675a:	2300      	movs	r3, #0
 800675c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800675e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006760:	b2db      	uxtb	r3, r3
 8006762:	4619      	mov	r1, r3
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f00a f80d 	bl	8010784 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	695a      	ldr	r2, [r3, #20]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006778:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4618      	mov	r0, r3
 8006780:	f004 fddd 	bl	800b33e <USB_ReadInterrupts>
 8006784:	4603      	mov	r3, r0
 8006786:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800678a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800678e:	d10a      	bne.n	80067a6 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f00a f81b 	bl	80107cc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	695a      	ldr	r2, [r3, #20]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80067a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4618      	mov	r0, r3
 80067ac:	f004 fdc7 	bl	800b33e <USB_ReadInterrupts>
 80067b0:	4603      	mov	r3, r0
 80067b2:	f003 0304 	and.w	r3, r3, #4
 80067b6:	2b04      	cmp	r3, #4
 80067b8:	d115      	bne.n	80067e6 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	f003 0304 	and.w	r3, r3, #4
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d002      	beq.n	80067d2 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f00a f80b 	bl	80107e8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	6859      	ldr	r1, [r3, #4]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	69ba      	ldr	r2, [r7, #24]
 80067de:	430a      	orrs	r2, r1
 80067e0:	605a      	str	r2, [r3, #4]
 80067e2:	e000      	b.n	80067e6 <HAL_PCD_IRQHandler+0x75e>
      return;
 80067e4:	bf00      	nop
    }
  }
}
 80067e6:	3734      	adds	r7, #52	; 0x34
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd90      	pop	{r4, r7, pc}

080067ec <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b082      	sub	sp, #8
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	460b      	mov	r3, r1
 80067f6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d101      	bne.n	8006806 <HAL_PCD_SetAddress+0x1a>
 8006802:	2302      	movs	r3, #2
 8006804:	e013      	b.n	800682e <HAL_PCD_SetAddress+0x42>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2201      	movs	r2, #1
 800680a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	78fa      	ldrb	r2, [r7, #3]
 8006812:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	78fa      	ldrb	r2, [r7, #3]
 800681c:	4611      	mov	r1, r2
 800681e:	4618      	mov	r0, r3
 8006820:	f004 fd25 	bl	800b26e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	3708      	adds	r7, #8
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006836:	b580      	push	{r7, lr}
 8006838:	b084      	sub	sp, #16
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
 800683e:	4608      	mov	r0, r1
 8006840:	4611      	mov	r1, r2
 8006842:	461a      	mov	r2, r3
 8006844:	4603      	mov	r3, r0
 8006846:	70fb      	strb	r3, [r7, #3]
 8006848:	460b      	mov	r3, r1
 800684a:	803b      	strh	r3, [r7, #0]
 800684c:	4613      	mov	r3, r2
 800684e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006850:	2300      	movs	r3, #0
 8006852:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006854:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006858:	2b00      	cmp	r3, #0
 800685a:	da0f      	bge.n	800687c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800685c:	78fb      	ldrb	r3, [r7, #3]
 800685e:	f003 020f 	and.w	r2, r3, #15
 8006862:	4613      	mov	r3, r2
 8006864:	00db      	lsls	r3, r3, #3
 8006866:	1a9b      	subs	r3, r3, r2
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	3338      	adds	r3, #56	; 0x38
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	4413      	add	r3, r2
 8006870:	3304      	adds	r3, #4
 8006872:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2201      	movs	r2, #1
 8006878:	705a      	strb	r2, [r3, #1]
 800687a:	e00f      	b.n	800689c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800687c:	78fb      	ldrb	r3, [r7, #3]
 800687e:	f003 020f 	and.w	r2, r3, #15
 8006882:	4613      	mov	r3, r2
 8006884:	00db      	lsls	r3, r3, #3
 8006886:	1a9b      	subs	r3, r3, r2
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	4413      	add	r3, r2
 8006892:	3304      	adds	r3, #4
 8006894:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2200      	movs	r2, #0
 800689a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800689c:	78fb      	ldrb	r3, [r7, #3]
 800689e:	f003 030f 	and.w	r3, r3, #15
 80068a2:	b2da      	uxtb	r2, r3
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80068a8:	883a      	ldrh	r2, [r7, #0]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	78ba      	ldrb	r2, [r7, #2]
 80068b2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	785b      	ldrb	r3, [r3, #1]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d004      	beq.n	80068c6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	b29a      	uxth	r2, r3
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80068c6:	78bb      	ldrb	r3, [r7, #2]
 80068c8:	2b02      	cmp	r3, #2
 80068ca:	d102      	bne.n	80068d2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2200      	movs	r2, #0
 80068d0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d101      	bne.n	80068e0 <HAL_PCD_EP_Open+0xaa>
 80068dc:	2302      	movs	r3, #2
 80068de:	e00e      	b.n	80068fe <HAL_PCD_EP_Open+0xc8>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	68f9      	ldr	r1, [r7, #12]
 80068ee:	4618      	mov	r0, r3
 80068f0:	f003 fe90 	bl	800a614 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80068fc:	7afb      	ldrb	r3, [r7, #11]
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3710      	adds	r7, #16
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006906:	b580      	push	{r7, lr}
 8006908:	b084      	sub	sp, #16
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
 800690e:	460b      	mov	r3, r1
 8006910:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006912:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006916:	2b00      	cmp	r3, #0
 8006918:	da0f      	bge.n	800693a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800691a:	78fb      	ldrb	r3, [r7, #3]
 800691c:	f003 020f 	and.w	r2, r3, #15
 8006920:	4613      	mov	r3, r2
 8006922:	00db      	lsls	r3, r3, #3
 8006924:	1a9b      	subs	r3, r3, r2
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	3338      	adds	r3, #56	; 0x38
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	4413      	add	r3, r2
 800692e:	3304      	adds	r3, #4
 8006930:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2201      	movs	r2, #1
 8006936:	705a      	strb	r2, [r3, #1]
 8006938:	e00f      	b.n	800695a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800693a:	78fb      	ldrb	r3, [r7, #3]
 800693c:	f003 020f 	and.w	r2, r3, #15
 8006940:	4613      	mov	r3, r2
 8006942:	00db      	lsls	r3, r3, #3
 8006944:	1a9b      	subs	r3, r3, r2
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	4413      	add	r3, r2
 8006950:	3304      	adds	r3, #4
 8006952:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2200      	movs	r2, #0
 8006958:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800695a:	78fb      	ldrb	r3, [r7, #3]
 800695c:	f003 030f 	and.w	r3, r3, #15
 8006960:	b2da      	uxtb	r2, r3
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800696c:	2b01      	cmp	r3, #1
 800696e:	d101      	bne.n	8006974 <HAL_PCD_EP_Close+0x6e>
 8006970:	2302      	movs	r3, #2
 8006972:	e00e      	b.n	8006992 <HAL_PCD_EP_Close+0x8c>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	68f9      	ldr	r1, [r7, #12]
 8006982:	4618      	mov	r0, r3
 8006984:	f003 fece 	bl	800a724 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006990:	2300      	movs	r3, #0
}
 8006992:	4618      	mov	r0, r3
 8006994:	3710      	adds	r7, #16
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}

0800699a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800699a:	b580      	push	{r7, lr}
 800699c:	b086      	sub	sp, #24
 800699e:	af00      	add	r7, sp, #0
 80069a0:	60f8      	str	r0, [r7, #12]
 80069a2:	607a      	str	r2, [r7, #4]
 80069a4:	603b      	str	r3, [r7, #0]
 80069a6:	460b      	mov	r3, r1
 80069a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80069aa:	7afb      	ldrb	r3, [r7, #11]
 80069ac:	f003 020f 	and.w	r2, r3, #15
 80069b0:	4613      	mov	r3, r2
 80069b2:	00db      	lsls	r3, r3, #3
 80069b4:	1a9b      	subs	r3, r3, r2
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80069bc:	68fa      	ldr	r2, [r7, #12]
 80069be:	4413      	add	r3, r2
 80069c0:	3304      	adds	r3, #4
 80069c2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	683a      	ldr	r2, [r7, #0]
 80069ce:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	2200      	movs	r2, #0
 80069d4:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	2200      	movs	r2, #0
 80069da:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80069dc:	7afb      	ldrb	r3, [r7, #11]
 80069de:	f003 030f 	and.w	r3, r3, #15
 80069e2:	b2da      	uxtb	r2, r3
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	691b      	ldr	r3, [r3, #16]
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d102      	bne.n	80069f6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80069f6:	7afb      	ldrb	r3, [r7, #11]
 80069f8:	f003 030f 	and.w	r3, r3, #15
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d109      	bne.n	8006a14 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6818      	ldr	r0, [r3, #0]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	691b      	ldr	r3, [r3, #16]
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	6979      	ldr	r1, [r7, #20]
 8006a0e:	f004 f9a9 	bl	800ad64 <USB_EP0StartXfer>
 8006a12:	e008      	b.n	8006a26 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	6818      	ldr	r0, [r3, #0]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	461a      	mov	r2, r3
 8006a20:	6979      	ldr	r1, [r7, #20]
 8006a22:	f003 ff5b 	bl	800a8dc <USB_EPStartXfer>
  }

  return HAL_OK;
 8006a26:	2300      	movs	r3, #0
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3718      	adds	r7, #24
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b083      	sub	sp, #12
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	460b      	mov	r3, r1
 8006a3a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006a3c:	78fb      	ldrb	r3, [r7, #3]
 8006a3e:	f003 020f 	and.w	r2, r3, #15
 8006a42:	6879      	ldr	r1, [r7, #4]
 8006a44:	4613      	mov	r3, r2
 8006a46:	00db      	lsls	r3, r3, #3
 8006a48:	1a9b      	subs	r3, r3, r2
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	440b      	add	r3, r1
 8006a4e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006a52:	681b      	ldr	r3, [r3, #0]
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	370c      	adds	r7, #12
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b086      	sub	sp, #24
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	607a      	str	r2, [r7, #4]
 8006a6a:	603b      	str	r3, [r7, #0]
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a70:	7afb      	ldrb	r3, [r7, #11]
 8006a72:	f003 020f 	and.w	r2, r3, #15
 8006a76:	4613      	mov	r3, r2
 8006a78:	00db      	lsls	r3, r3, #3
 8006a7a:	1a9b      	subs	r3, r3, r2
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	3338      	adds	r3, #56	; 0x38
 8006a80:	68fa      	ldr	r2, [r7, #12]
 8006a82:	4413      	add	r3, r2
 8006a84:	3304      	adds	r3, #4
 8006a86:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	683a      	ldr	r2, [r7, #0]
 8006a92:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	2200      	movs	r2, #0
 8006a98:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006aa0:	7afb      	ldrb	r3, [r7, #11]
 8006aa2:	f003 030f 	and.w	r3, r3, #15
 8006aa6:	b2da      	uxtb	r2, r3
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	691b      	ldr	r3, [r3, #16]
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d102      	bne.n	8006aba <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006aba:	7afb      	ldrb	r3, [r7, #11]
 8006abc:	f003 030f 	and.w	r3, r3, #15
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d109      	bne.n	8006ad8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6818      	ldr	r0, [r3, #0]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	691b      	ldr	r3, [r3, #16]
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	461a      	mov	r2, r3
 8006ad0:	6979      	ldr	r1, [r7, #20]
 8006ad2:	f004 f947 	bl	800ad64 <USB_EP0StartXfer>
 8006ad6:	e008      	b.n	8006aea <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	6818      	ldr	r0, [r3, #0]
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	691b      	ldr	r3, [r3, #16]
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	6979      	ldr	r1, [r7, #20]
 8006ae6:	f003 fef9 	bl	800a8dc <USB_EPStartXfer>
  }

  return HAL_OK;
 8006aea:	2300      	movs	r3, #0
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3718      	adds	r7, #24
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	460b      	mov	r3, r1
 8006afe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006b00:	78fb      	ldrb	r3, [r7, #3]
 8006b02:	f003 020f 	and.w	r2, r3, #15
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d901      	bls.n	8006b12 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e050      	b.n	8006bb4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006b12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	da0f      	bge.n	8006b3a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b1a:	78fb      	ldrb	r3, [r7, #3]
 8006b1c:	f003 020f 	and.w	r2, r3, #15
 8006b20:	4613      	mov	r3, r2
 8006b22:	00db      	lsls	r3, r3, #3
 8006b24:	1a9b      	subs	r3, r3, r2
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	3338      	adds	r3, #56	; 0x38
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	3304      	adds	r3, #4
 8006b30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2201      	movs	r2, #1
 8006b36:	705a      	strb	r2, [r3, #1]
 8006b38:	e00d      	b.n	8006b56 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006b3a:	78fa      	ldrb	r2, [r7, #3]
 8006b3c:	4613      	mov	r3, r2
 8006b3e:	00db      	lsls	r3, r3, #3
 8006b40:	1a9b      	subs	r3, r3, r2
 8006b42:	009b      	lsls	r3, r3, #2
 8006b44:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	4413      	add	r3, r2
 8006b4c:	3304      	adds	r3, #4
 8006b4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2200      	movs	r2, #0
 8006b54:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2201      	movs	r2, #1
 8006b5a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006b5c:	78fb      	ldrb	r3, [r7, #3]
 8006b5e:	f003 030f 	and.w	r3, r3, #15
 8006b62:	b2da      	uxtb	r2, r3
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d101      	bne.n	8006b76 <HAL_PCD_EP_SetStall+0x82>
 8006b72:	2302      	movs	r3, #2
 8006b74:	e01e      	b.n	8006bb4 <HAL_PCD_EP_SetStall+0xc0>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	68f9      	ldr	r1, [r7, #12]
 8006b84:	4618      	mov	r0, r3
 8006b86:	f004 fa9e 	bl	800b0c6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006b8a:	78fb      	ldrb	r3, [r7, #3]
 8006b8c:	f003 030f 	and.w	r3, r3, #15
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d10a      	bne.n	8006baa <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6818      	ldr	r0, [r3, #0]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	691b      	ldr	r3, [r3, #16]
 8006b9c:	b2d9      	uxtb	r1, r3
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	f004 fc8f 	bl	800b4c8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006bb2:	2300      	movs	r3, #0
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3710      	adds	r7, #16
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	460b      	mov	r3, r1
 8006bc6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006bc8:	78fb      	ldrb	r3, [r7, #3]
 8006bca:	f003 020f 	and.w	r2, r3, #15
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d901      	bls.n	8006bda <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	e042      	b.n	8006c60 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006bda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	da0f      	bge.n	8006c02 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006be2:	78fb      	ldrb	r3, [r7, #3]
 8006be4:	f003 020f 	and.w	r2, r3, #15
 8006be8:	4613      	mov	r3, r2
 8006bea:	00db      	lsls	r3, r3, #3
 8006bec:	1a9b      	subs	r3, r3, r2
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	3338      	adds	r3, #56	; 0x38
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	4413      	add	r3, r2
 8006bf6:	3304      	adds	r3, #4
 8006bf8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	705a      	strb	r2, [r3, #1]
 8006c00:	e00f      	b.n	8006c22 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006c02:	78fb      	ldrb	r3, [r7, #3]
 8006c04:	f003 020f 	and.w	r2, r3, #15
 8006c08:	4613      	mov	r3, r2
 8006c0a:	00db      	lsls	r3, r3, #3
 8006c0c:	1a9b      	subs	r3, r3, r2
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	4413      	add	r3, r2
 8006c18:	3304      	adds	r3, #4
 8006c1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2200      	movs	r2, #0
 8006c26:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006c28:	78fb      	ldrb	r3, [r7, #3]
 8006c2a:	f003 030f 	and.w	r3, r3, #15
 8006c2e:	b2da      	uxtb	r2, r3
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d101      	bne.n	8006c42 <HAL_PCD_EP_ClrStall+0x86>
 8006c3e:	2302      	movs	r3, #2
 8006c40:	e00e      	b.n	8006c60 <HAL_PCD_EP_ClrStall+0xa4>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2201      	movs	r2, #1
 8006c46:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	68f9      	ldr	r1, [r7, #12]
 8006c50:	4618      	mov	r0, r3
 8006c52:	f004 faa6 	bl	800b1a2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006c5e:	2300      	movs	r3, #0
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3710      	adds	r7, #16
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b08a      	sub	sp, #40	; 0x28
 8006c6c:	af02      	add	r7, sp, #8
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006c7c:	683a      	ldr	r2, [r7, #0]
 8006c7e:	4613      	mov	r3, r2
 8006c80:	00db      	lsls	r3, r3, #3
 8006c82:	1a9b      	subs	r3, r3, r2
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	3338      	adds	r3, #56	; 0x38
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	3304      	adds	r3, #4
 8006c8e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	699a      	ldr	r2, [r3, #24]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	695b      	ldr	r3, [r3, #20]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d901      	bls.n	8006ca0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e06c      	b.n	8006d7a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	695a      	ldr	r2, [r3, #20]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	699b      	ldr	r3, [r3, #24]
 8006ca8:	1ad3      	subs	r3, r2, r3
 8006caa:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	69fa      	ldr	r2, [r7, #28]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d902      	bls.n	8006cbc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006cbc:	69fb      	ldr	r3, [r7, #28]
 8006cbe:	3303      	adds	r3, #3
 8006cc0:	089b      	lsrs	r3, r3, #2
 8006cc2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006cc4:	e02b      	b.n	8006d1e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	695a      	ldr	r2, [r3, #20]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	699b      	ldr	r3, [r3, #24]
 8006cce:	1ad3      	subs	r3, r2, r3
 8006cd0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	69fa      	ldr	r2, [r7, #28]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d902      	bls.n	8006ce2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	3303      	adds	r3, #3
 8006ce6:	089b      	lsrs	r3, r3, #2
 8006ce8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	68d9      	ldr	r1, [r3, #12]
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	b2da      	uxtb	r2, r3
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	9300      	str	r3, [sp, #0]
 8006cfe:	4603      	mov	r3, r0
 8006d00:	6978      	ldr	r0, [r7, #20]
 8006d02:	f004 f982 	bl	800b00a <USB_WritePacket>

    ep->xfer_buff  += len;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	68da      	ldr	r2, [r3, #12]
 8006d0a:	69fb      	ldr	r3, [r7, #28]
 8006d0c:	441a      	add	r2, r3
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	699a      	ldr	r2, [r3, #24]
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	441a      	add	r2, r3
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	015a      	lsls	r2, r3, #5
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	4413      	add	r3, r2
 8006d26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d2a:	699b      	ldr	r3, [r3, #24]
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	69ba      	ldr	r2, [r7, #24]
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d809      	bhi.n	8006d48 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	699a      	ldr	r2, [r3, #24]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d203      	bcs.n	8006d48 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	695b      	ldr	r3, [r3, #20]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d1be      	bne.n	8006cc6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	695a      	ldr	r2, [r3, #20]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	699b      	ldr	r3, [r3, #24]
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d811      	bhi.n	8006d78 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	f003 030f 	and.w	r3, r3, #15
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d60:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	43db      	mvns	r3, r3
 8006d6e:	6939      	ldr	r1, [r7, #16]
 8006d70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d74:	4013      	ands	r3, r2
 8006d76:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3720      	adds	r7, #32
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
	...

08006d84 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b086      	sub	sp, #24
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	333c      	adds	r3, #60	; 0x3c
 8006d9c:	3304      	adds	r3, #4
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	015a      	lsls	r2, r3, #5
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	4413      	add	r3, r2
 8006daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	691b      	ldr	r3, [r3, #16]
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	f040 80a0 	bne.w	8006efc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	f003 0308 	and.w	r3, r3, #8
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d015      	beq.n	8006df2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	4a72      	ldr	r2, [pc, #456]	; (8006f94 <PCD_EP_OutXfrComplete_int+0x210>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	f240 80dd 	bls.w	8006f8a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	f000 80d7 	beq.w	8006f8a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	015a      	lsls	r2, r3, #5
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	4413      	add	r3, r2
 8006de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006de8:	461a      	mov	r2, r3
 8006dea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dee:	6093      	str	r3, [r2, #8]
 8006df0:	e0cb      	b.n	8006f8a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	f003 0320 	and.w	r3, r3, #32
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d009      	beq.n	8006e10 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	015a      	lsls	r2, r3, #5
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	4413      	add	r3, r2
 8006e04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e08:	461a      	mov	r2, r3
 8006e0a:	2320      	movs	r3, #32
 8006e0c:	6093      	str	r3, [r2, #8]
 8006e0e:	e0bc      	b.n	8006f8a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	f040 80b7 	bne.w	8006f8a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	4a5d      	ldr	r2, [pc, #372]	; (8006f94 <PCD_EP_OutXfrComplete_int+0x210>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d90f      	bls.n	8006e44 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d00a      	beq.n	8006e44 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	015a      	lsls	r2, r3, #5
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	4413      	add	r3, r2
 8006e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e40:	6093      	str	r3, [r2, #8]
 8006e42:	e0a2      	b.n	8006f8a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8006e44:	6879      	ldr	r1, [r7, #4]
 8006e46:	683a      	ldr	r2, [r7, #0]
 8006e48:	4613      	mov	r3, r2
 8006e4a:	00db      	lsls	r3, r3, #3
 8006e4c:	1a9b      	subs	r3, r3, r2
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	440b      	add	r3, r1
 8006e52:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006e56:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	0159      	lsls	r1, r3, #5
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	440b      	add	r3, r1
 8006e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e64:	691b      	ldr	r3, [r3, #16]
 8006e66:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8006e6a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	683a      	ldr	r2, [r7, #0]
 8006e70:	4613      	mov	r3, r2
 8006e72:	00db      	lsls	r3, r3, #3
 8006e74:	1a9b      	subs	r3, r3, r2
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	4403      	add	r3, r0
 8006e7a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006e7e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8006e80:	6879      	ldr	r1, [r7, #4]
 8006e82:	683a      	ldr	r2, [r7, #0]
 8006e84:	4613      	mov	r3, r2
 8006e86:	00db      	lsls	r3, r3, #3
 8006e88:	1a9b      	subs	r3, r3, r2
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	440b      	add	r3, r1
 8006e8e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006e92:	6819      	ldr	r1, [r3, #0]
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	683a      	ldr	r2, [r7, #0]
 8006e98:	4613      	mov	r3, r2
 8006e9a:	00db      	lsls	r3, r3, #3
 8006e9c:	1a9b      	subs	r3, r3, r2
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	4403      	add	r3, r0
 8006ea2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4419      	add	r1, r3
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	683a      	ldr	r2, [r7, #0]
 8006eae:	4613      	mov	r3, r2
 8006eb0:	00db      	lsls	r3, r3, #3
 8006eb2:	1a9b      	subs	r3, r3, r2
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	4403      	add	r3, r0
 8006eb8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006ebc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d114      	bne.n	8006eee <PCD_EP_OutXfrComplete_int+0x16a>
 8006ec4:	6879      	ldr	r1, [r7, #4]
 8006ec6:	683a      	ldr	r2, [r7, #0]
 8006ec8:	4613      	mov	r3, r2
 8006eca:	00db      	lsls	r3, r3, #3
 8006ecc:	1a9b      	subs	r3, r3, r2
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	440b      	add	r3, r1
 8006ed2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d108      	bne.n	8006eee <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6818      	ldr	r0, [r3, #0]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	2101      	movs	r1, #1
 8006eea:	f004 faed 	bl	800b4c8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	4619      	mov	r1, r3
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f009 fba5 	bl	8010644 <HAL_PCD_DataOutStageCallback>
 8006efa:	e046      	b.n	8006f8a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	4a26      	ldr	r2, [pc, #152]	; (8006f98 <PCD_EP_OutXfrComplete_int+0x214>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d124      	bne.n	8006f4e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d00a      	beq.n	8006f24 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	015a      	lsls	r2, r3, #5
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	4413      	add	r3, r2
 8006f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f20:	6093      	str	r3, [r2, #8]
 8006f22:	e032      	b.n	8006f8a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	f003 0320 	and.w	r3, r3, #32
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d008      	beq.n	8006f40 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	015a      	lsls	r2, r3, #5
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	4413      	add	r3, r2
 8006f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	2320      	movs	r3, #32
 8006f3e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	4619      	mov	r1, r3
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f009 fb7c 	bl	8010644 <HAL_PCD_DataOutStageCallback>
 8006f4c:	e01d      	b.n	8006f8a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d114      	bne.n	8006f7e <PCD_EP_OutXfrComplete_int+0x1fa>
 8006f54:	6879      	ldr	r1, [r7, #4]
 8006f56:	683a      	ldr	r2, [r7, #0]
 8006f58:	4613      	mov	r3, r2
 8006f5a:	00db      	lsls	r3, r3, #3
 8006f5c:	1a9b      	subs	r3, r3, r2
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	440b      	add	r3, r1
 8006f62:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d108      	bne.n	8006f7e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6818      	ldr	r0, [r3, #0]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006f76:	461a      	mov	r2, r3
 8006f78:	2100      	movs	r1, #0
 8006f7a:	f004 faa5 	bl	800b4c8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	4619      	mov	r1, r3
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f009 fb5d 	bl	8010644 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006f8a:	2300      	movs	r3, #0
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3718      	adds	r7, #24
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}
 8006f94:	4f54300a 	.word	0x4f54300a
 8006f98:	4f54310a 	.word	0x4f54310a

08006f9c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b086      	sub	sp, #24
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	333c      	adds	r3, #60	; 0x3c
 8006fb4:	3304      	adds	r3, #4
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	015a      	lsls	r2, r3, #5
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	4413      	add	r3, r2
 8006fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	4a15      	ldr	r2, [pc, #84]	; (8007024 <PCD_EP_OutSetupPacket_int+0x88>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d90e      	bls.n	8006ff0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d009      	beq.n	8006ff0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	015a      	lsls	r2, r3, #5
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	4413      	add	r3, r2
 8006fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fe8:	461a      	mov	r2, r3
 8006fea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fee:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f009 fb15 	bl	8010620 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	4a0a      	ldr	r2, [pc, #40]	; (8007024 <PCD_EP_OutSetupPacket_int+0x88>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d90c      	bls.n	8007018 <PCD_EP_OutSetupPacket_int+0x7c>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	2b01      	cmp	r3, #1
 8007004:	d108      	bne.n	8007018 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6818      	ldr	r0, [r3, #0]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007010:	461a      	mov	r2, r3
 8007012:	2101      	movs	r1, #1
 8007014:	f004 fa58 	bl	800b4c8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3718      	adds	r7, #24
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	4f54300a 	.word	0x4f54300a

08007028 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007028:	b480      	push	{r7}
 800702a:	b085      	sub	sp, #20
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	460b      	mov	r3, r1
 8007032:	70fb      	strb	r3, [r7, #3]
 8007034:	4613      	mov	r3, r2
 8007036:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800703e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007040:	78fb      	ldrb	r3, [r7, #3]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d107      	bne.n	8007056 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007046:	883b      	ldrh	r3, [r7, #0]
 8007048:	0419      	lsls	r1, r3, #16
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	68ba      	ldr	r2, [r7, #8]
 8007050:	430a      	orrs	r2, r1
 8007052:	629a      	str	r2, [r3, #40]	; 0x28
 8007054:	e028      	b.n	80070a8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800705c:	0c1b      	lsrs	r3, r3, #16
 800705e:	68ba      	ldr	r2, [r7, #8]
 8007060:	4413      	add	r3, r2
 8007062:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007064:	2300      	movs	r3, #0
 8007066:	73fb      	strb	r3, [r7, #15]
 8007068:	e00d      	b.n	8007086 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	7bfb      	ldrb	r3, [r7, #15]
 8007070:	3340      	adds	r3, #64	; 0x40
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	4413      	add	r3, r2
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	0c1b      	lsrs	r3, r3, #16
 800707a:	68ba      	ldr	r2, [r7, #8]
 800707c:	4413      	add	r3, r2
 800707e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007080:	7bfb      	ldrb	r3, [r7, #15]
 8007082:	3301      	adds	r3, #1
 8007084:	73fb      	strb	r3, [r7, #15]
 8007086:	7bfa      	ldrb	r2, [r7, #15]
 8007088:	78fb      	ldrb	r3, [r7, #3]
 800708a:	3b01      	subs	r3, #1
 800708c:	429a      	cmp	r2, r3
 800708e:	d3ec      	bcc.n	800706a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007090:	883b      	ldrh	r3, [r7, #0]
 8007092:	0418      	lsls	r0, r3, #16
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6819      	ldr	r1, [r3, #0]
 8007098:	78fb      	ldrb	r3, [r7, #3]
 800709a:	3b01      	subs	r3, #1
 800709c:	68ba      	ldr	r2, [r7, #8]
 800709e:	4302      	orrs	r2, r0
 80070a0:	3340      	adds	r3, #64	; 0x40
 80070a2:	009b      	lsls	r3, r3, #2
 80070a4:	440b      	add	r3, r1
 80070a6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80070a8:	2300      	movs	r3, #0
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3714      	adds	r7, #20
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr

080070b6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80070b6:	b480      	push	{r7}
 80070b8:	b083      	sub	sp, #12
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6078      	str	r0, [r7, #4]
 80070be:	460b      	mov	r3, r1
 80070c0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	887a      	ldrh	r2, [r7, #2]
 80070c8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80070ca:	2300      	movs	r3, #0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	370c      	adds	r7, #12
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr

080070d8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80070d8:	b480      	push	{r7}
 80070da:	b083      	sub	sp, #12
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	460b      	mov	r3, r1
 80070e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80070e4:	bf00      	nop
 80070e6:	370c      	adds	r7, #12
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr

080070f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b086      	sub	sp, #24
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d101      	bne.n	8007102 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	e25b      	b.n	80075ba <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f003 0301 	and.w	r3, r3, #1
 800710a:	2b00      	cmp	r3, #0
 800710c:	d075      	beq.n	80071fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800710e:	4ba3      	ldr	r3, [pc, #652]	; (800739c <HAL_RCC_OscConfig+0x2ac>)
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	f003 030c 	and.w	r3, r3, #12
 8007116:	2b04      	cmp	r3, #4
 8007118:	d00c      	beq.n	8007134 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800711a:	4ba0      	ldr	r3, [pc, #640]	; (800739c <HAL_RCC_OscConfig+0x2ac>)
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007122:	2b08      	cmp	r3, #8
 8007124:	d112      	bne.n	800714c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007126:	4b9d      	ldr	r3, [pc, #628]	; (800739c <HAL_RCC_OscConfig+0x2ac>)
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800712e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007132:	d10b      	bne.n	800714c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007134:	4b99      	ldr	r3, [pc, #612]	; (800739c <HAL_RCC_OscConfig+0x2ac>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800713c:	2b00      	cmp	r3, #0
 800713e:	d05b      	beq.n	80071f8 <HAL_RCC_OscConfig+0x108>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d157      	bne.n	80071f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	e236      	b.n	80075ba <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007154:	d106      	bne.n	8007164 <HAL_RCC_OscConfig+0x74>
 8007156:	4b91      	ldr	r3, [pc, #580]	; (800739c <HAL_RCC_OscConfig+0x2ac>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a90      	ldr	r2, [pc, #576]	; (800739c <HAL_RCC_OscConfig+0x2ac>)
 800715c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007160:	6013      	str	r3, [r2, #0]
 8007162:	e01d      	b.n	80071a0 <HAL_RCC_OscConfig+0xb0>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800716c:	d10c      	bne.n	8007188 <HAL_RCC_OscConfig+0x98>
 800716e:	4b8b      	ldr	r3, [pc, #556]	; (800739c <HAL_RCC_OscConfig+0x2ac>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a8a      	ldr	r2, [pc, #552]	; (800739c <HAL_RCC_OscConfig+0x2ac>)
 8007174:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007178:	6013      	str	r3, [r2, #0]
 800717a:	4b88      	ldr	r3, [pc, #544]	; (800739c <HAL_RCC_OscConfig+0x2ac>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a87      	ldr	r2, [pc, #540]	; (800739c <HAL_RCC_OscConfig+0x2ac>)
 8007180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007184:	6013      	str	r3, [r2, #0]
 8007186:	e00b      	b.n	80071a0 <HAL_RCC_OscConfig+0xb0>
 8007188:	4b84      	ldr	r3, [pc, #528]	; (800739c <HAL_RCC_OscConfig+0x2ac>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a83      	ldr	r2, [pc, #524]	; (800739c <HAL_RCC_OscConfig+0x2ac>)
 800718e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007192:	6013      	str	r3, [r2, #0]
 8007194:	4b81      	ldr	r3, [pc, #516]	; (800739c <HAL_RCC_OscConfig+0x2ac>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a80      	ldr	r2, [pc, #512]	; (800739c <HAL_RCC_OscConfig+0x2ac>)
 800719a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800719e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d013      	beq.n	80071d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071a8:	f7fb f99a 	bl	80024e0 <HAL_GetTick>
 80071ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071ae:	e008      	b.n	80071c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80071b0:	f7fb f996 	bl	80024e0 <HAL_GetTick>
 80071b4:	4602      	mov	r2, r0
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	1ad3      	subs	r3, r2, r3
 80071ba:	2b64      	cmp	r3, #100	; 0x64
 80071bc:	d901      	bls.n	80071c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80071be:	2303      	movs	r3, #3
 80071c0:	e1fb      	b.n	80075ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071c2:	4b76      	ldr	r3, [pc, #472]	; (800739c <HAL_RCC_OscConfig+0x2ac>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d0f0      	beq.n	80071b0 <HAL_RCC_OscConfig+0xc0>
 80071ce:	e014      	b.n	80071fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071d0:	f7fb f986 	bl	80024e0 <HAL_GetTick>
 80071d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80071d6:	e008      	b.n	80071ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80071d8:	f7fb f982 	bl	80024e0 <HAL_GetTick>
 80071dc:	4602      	mov	r2, r0
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	1ad3      	subs	r3, r2, r3
 80071e2:	2b64      	cmp	r3, #100	; 0x64
 80071e4:	d901      	bls.n	80071ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80071e6:	2303      	movs	r3, #3
 80071e8:	e1e7      	b.n	80075ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80071ea:	4b6c      	ldr	r3, [pc, #432]	; (800739c <HAL_RCC_OscConfig+0x2ac>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d1f0      	bne.n	80071d8 <HAL_RCC_OscConfig+0xe8>
 80071f6:	e000      	b.n	80071fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f003 0302 	and.w	r3, r3, #2
 8007202:	2b00      	cmp	r3, #0
 8007204:	d063      	beq.n	80072ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007206:	4b65      	ldr	r3, [pc, #404]	; (800739c <HAL_RCC_OscConfig+0x2ac>)
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	f003 030c 	and.w	r3, r3, #12
 800720e:	2b00      	cmp	r3, #0
 8007210:	d00b      	beq.n	800722a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007212:	4b62      	ldr	r3, [pc, #392]	; (800739c <HAL_RCC_OscConfig+0x2ac>)
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800721a:	2b08      	cmp	r3, #8
 800721c:	d11c      	bne.n	8007258 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800721e:	4b5f      	ldr	r3, [pc, #380]	; (800739c <HAL_RCC_OscConfig+0x2ac>)
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007226:	2b00      	cmp	r3, #0
 8007228:	d116      	bne.n	8007258 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800722a:	4b5c      	ldr	r3, [pc, #368]	; (800739c <HAL_RCC_OscConfig+0x2ac>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f003 0302 	and.w	r3, r3, #2
 8007232:	2b00      	cmp	r3, #0
 8007234:	d005      	beq.n	8007242 <HAL_RCC_OscConfig+0x152>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	68db      	ldr	r3, [r3, #12]
 800723a:	2b01      	cmp	r3, #1
 800723c:	d001      	beq.n	8007242 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800723e:	2301      	movs	r3, #1
 8007240:	e1bb      	b.n	80075ba <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007242:	4b56      	ldr	r3, [pc, #344]	; (800739c <HAL_RCC_OscConfig+0x2ac>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	691b      	ldr	r3, [r3, #16]
 800724e:	00db      	lsls	r3, r3, #3
 8007250:	4952      	ldr	r1, [pc, #328]	; (800739c <HAL_RCC_OscConfig+0x2ac>)
 8007252:	4313      	orrs	r3, r2
 8007254:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007256:	e03a      	b.n	80072ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	68db      	ldr	r3, [r3, #12]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d020      	beq.n	80072a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007260:	4b4f      	ldr	r3, [pc, #316]	; (80073a0 <HAL_RCC_OscConfig+0x2b0>)
 8007262:	2201      	movs	r2, #1
 8007264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007266:	f7fb f93b 	bl	80024e0 <HAL_GetTick>
 800726a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800726c:	e008      	b.n	8007280 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800726e:	f7fb f937 	bl	80024e0 <HAL_GetTick>
 8007272:	4602      	mov	r2, r0
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	1ad3      	subs	r3, r2, r3
 8007278:	2b02      	cmp	r3, #2
 800727a:	d901      	bls.n	8007280 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800727c:	2303      	movs	r3, #3
 800727e:	e19c      	b.n	80075ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007280:	4b46      	ldr	r3, [pc, #280]	; (800739c <HAL_RCC_OscConfig+0x2ac>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f003 0302 	and.w	r3, r3, #2
 8007288:	2b00      	cmp	r3, #0
 800728a:	d0f0      	beq.n	800726e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800728c:	4b43      	ldr	r3, [pc, #268]	; (800739c <HAL_RCC_OscConfig+0x2ac>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	691b      	ldr	r3, [r3, #16]
 8007298:	00db      	lsls	r3, r3, #3
 800729a:	4940      	ldr	r1, [pc, #256]	; (800739c <HAL_RCC_OscConfig+0x2ac>)
 800729c:	4313      	orrs	r3, r2
 800729e:	600b      	str	r3, [r1, #0]
 80072a0:	e015      	b.n	80072ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80072a2:	4b3f      	ldr	r3, [pc, #252]	; (80073a0 <HAL_RCC_OscConfig+0x2b0>)
 80072a4:	2200      	movs	r2, #0
 80072a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072a8:	f7fb f91a 	bl	80024e0 <HAL_GetTick>
 80072ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80072ae:	e008      	b.n	80072c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80072b0:	f7fb f916 	bl	80024e0 <HAL_GetTick>
 80072b4:	4602      	mov	r2, r0
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	1ad3      	subs	r3, r2, r3
 80072ba:	2b02      	cmp	r3, #2
 80072bc:	d901      	bls.n	80072c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80072be:	2303      	movs	r3, #3
 80072c0:	e17b      	b.n	80075ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80072c2:	4b36      	ldr	r3, [pc, #216]	; (800739c <HAL_RCC_OscConfig+0x2ac>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f003 0302 	and.w	r3, r3, #2
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d1f0      	bne.n	80072b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f003 0308 	and.w	r3, r3, #8
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d030      	beq.n	800733c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	695b      	ldr	r3, [r3, #20]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d016      	beq.n	8007310 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80072e2:	4b30      	ldr	r3, [pc, #192]	; (80073a4 <HAL_RCC_OscConfig+0x2b4>)
 80072e4:	2201      	movs	r2, #1
 80072e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072e8:	f7fb f8fa 	bl	80024e0 <HAL_GetTick>
 80072ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072ee:	e008      	b.n	8007302 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80072f0:	f7fb f8f6 	bl	80024e0 <HAL_GetTick>
 80072f4:	4602      	mov	r2, r0
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	1ad3      	subs	r3, r2, r3
 80072fa:	2b02      	cmp	r3, #2
 80072fc:	d901      	bls.n	8007302 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80072fe:	2303      	movs	r3, #3
 8007300:	e15b      	b.n	80075ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007302:	4b26      	ldr	r3, [pc, #152]	; (800739c <HAL_RCC_OscConfig+0x2ac>)
 8007304:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007306:	f003 0302 	and.w	r3, r3, #2
 800730a:	2b00      	cmp	r3, #0
 800730c:	d0f0      	beq.n	80072f0 <HAL_RCC_OscConfig+0x200>
 800730e:	e015      	b.n	800733c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007310:	4b24      	ldr	r3, [pc, #144]	; (80073a4 <HAL_RCC_OscConfig+0x2b4>)
 8007312:	2200      	movs	r2, #0
 8007314:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007316:	f7fb f8e3 	bl	80024e0 <HAL_GetTick>
 800731a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800731c:	e008      	b.n	8007330 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800731e:	f7fb f8df 	bl	80024e0 <HAL_GetTick>
 8007322:	4602      	mov	r2, r0
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	1ad3      	subs	r3, r2, r3
 8007328:	2b02      	cmp	r3, #2
 800732a:	d901      	bls.n	8007330 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800732c:	2303      	movs	r3, #3
 800732e:	e144      	b.n	80075ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007330:	4b1a      	ldr	r3, [pc, #104]	; (800739c <HAL_RCC_OscConfig+0x2ac>)
 8007332:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007334:	f003 0302 	and.w	r3, r3, #2
 8007338:	2b00      	cmp	r3, #0
 800733a:	d1f0      	bne.n	800731e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f003 0304 	and.w	r3, r3, #4
 8007344:	2b00      	cmp	r3, #0
 8007346:	f000 80a0 	beq.w	800748a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800734a:	2300      	movs	r3, #0
 800734c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800734e:	4b13      	ldr	r3, [pc, #76]	; (800739c <HAL_RCC_OscConfig+0x2ac>)
 8007350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007356:	2b00      	cmp	r3, #0
 8007358:	d10f      	bne.n	800737a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800735a:	2300      	movs	r3, #0
 800735c:	60bb      	str	r3, [r7, #8]
 800735e:	4b0f      	ldr	r3, [pc, #60]	; (800739c <HAL_RCC_OscConfig+0x2ac>)
 8007360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007362:	4a0e      	ldr	r2, [pc, #56]	; (800739c <HAL_RCC_OscConfig+0x2ac>)
 8007364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007368:	6413      	str	r3, [r2, #64]	; 0x40
 800736a:	4b0c      	ldr	r3, [pc, #48]	; (800739c <HAL_RCC_OscConfig+0x2ac>)
 800736c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007372:	60bb      	str	r3, [r7, #8]
 8007374:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007376:	2301      	movs	r3, #1
 8007378:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800737a:	4b0b      	ldr	r3, [pc, #44]	; (80073a8 <HAL_RCC_OscConfig+0x2b8>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007382:	2b00      	cmp	r3, #0
 8007384:	d121      	bne.n	80073ca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007386:	4b08      	ldr	r3, [pc, #32]	; (80073a8 <HAL_RCC_OscConfig+0x2b8>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a07      	ldr	r2, [pc, #28]	; (80073a8 <HAL_RCC_OscConfig+0x2b8>)
 800738c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007390:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007392:	f7fb f8a5 	bl	80024e0 <HAL_GetTick>
 8007396:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007398:	e011      	b.n	80073be <HAL_RCC_OscConfig+0x2ce>
 800739a:	bf00      	nop
 800739c:	40023800 	.word	0x40023800
 80073a0:	42470000 	.word	0x42470000
 80073a4:	42470e80 	.word	0x42470e80
 80073a8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073ac:	f7fb f898 	bl	80024e0 <HAL_GetTick>
 80073b0:	4602      	mov	r2, r0
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	1ad3      	subs	r3, r2, r3
 80073b6:	2b02      	cmp	r3, #2
 80073b8:	d901      	bls.n	80073be <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80073ba:	2303      	movs	r3, #3
 80073bc:	e0fd      	b.n	80075ba <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073be:	4b81      	ldr	r3, [pc, #516]	; (80075c4 <HAL_RCC_OscConfig+0x4d4>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d0f0      	beq.n	80073ac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d106      	bne.n	80073e0 <HAL_RCC_OscConfig+0x2f0>
 80073d2:	4b7d      	ldr	r3, [pc, #500]	; (80075c8 <HAL_RCC_OscConfig+0x4d8>)
 80073d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073d6:	4a7c      	ldr	r2, [pc, #496]	; (80075c8 <HAL_RCC_OscConfig+0x4d8>)
 80073d8:	f043 0301 	orr.w	r3, r3, #1
 80073dc:	6713      	str	r3, [r2, #112]	; 0x70
 80073de:	e01c      	b.n	800741a <HAL_RCC_OscConfig+0x32a>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	2b05      	cmp	r3, #5
 80073e6:	d10c      	bne.n	8007402 <HAL_RCC_OscConfig+0x312>
 80073e8:	4b77      	ldr	r3, [pc, #476]	; (80075c8 <HAL_RCC_OscConfig+0x4d8>)
 80073ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073ec:	4a76      	ldr	r2, [pc, #472]	; (80075c8 <HAL_RCC_OscConfig+0x4d8>)
 80073ee:	f043 0304 	orr.w	r3, r3, #4
 80073f2:	6713      	str	r3, [r2, #112]	; 0x70
 80073f4:	4b74      	ldr	r3, [pc, #464]	; (80075c8 <HAL_RCC_OscConfig+0x4d8>)
 80073f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073f8:	4a73      	ldr	r2, [pc, #460]	; (80075c8 <HAL_RCC_OscConfig+0x4d8>)
 80073fa:	f043 0301 	orr.w	r3, r3, #1
 80073fe:	6713      	str	r3, [r2, #112]	; 0x70
 8007400:	e00b      	b.n	800741a <HAL_RCC_OscConfig+0x32a>
 8007402:	4b71      	ldr	r3, [pc, #452]	; (80075c8 <HAL_RCC_OscConfig+0x4d8>)
 8007404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007406:	4a70      	ldr	r2, [pc, #448]	; (80075c8 <HAL_RCC_OscConfig+0x4d8>)
 8007408:	f023 0301 	bic.w	r3, r3, #1
 800740c:	6713      	str	r3, [r2, #112]	; 0x70
 800740e:	4b6e      	ldr	r3, [pc, #440]	; (80075c8 <HAL_RCC_OscConfig+0x4d8>)
 8007410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007412:	4a6d      	ldr	r2, [pc, #436]	; (80075c8 <HAL_RCC_OscConfig+0x4d8>)
 8007414:	f023 0304 	bic.w	r3, r3, #4
 8007418:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d015      	beq.n	800744e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007422:	f7fb f85d 	bl	80024e0 <HAL_GetTick>
 8007426:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007428:	e00a      	b.n	8007440 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800742a:	f7fb f859 	bl	80024e0 <HAL_GetTick>
 800742e:	4602      	mov	r2, r0
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	1ad3      	subs	r3, r2, r3
 8007434:	f241 3288 	movw	r2, #5000	; 0x1388
 8007438:	4293      	cmp	r3, r2
 800743a:	d901      	bls.n	8007440 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800743c:	2303      	movs	r3, #3
 800743e:	e0bc      	b.n	80075ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007440:	4b61      	ldr	r3, [pc, #388]	; (80075c8 <HAL_RCC_OscConfig+0x4d8>)
 8007442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007444:	f003 0302 	and.w	r3, r3, #2
 8007448:	2b00      	cmp	r3, #0
 800744a:	d0ee      	beq.n	800742a <HAL_RCC_OscConfig+0x33a>
 800744c:	e014      	b.n	8007478 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800744e:	f7fb f847 	bl	80024e0 <HAL_GetTick>
 8007452:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007454:	e00a      	b.n	800746c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007456:	f7fb f843 	bl	80024e0 <HAL_GetTick>
 800745a:	4602      	mov	r2, r0
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	1ad3      	subs	r3, r2, r3
 8007460:	f241 3288 	movw	r2, #5000	; 0x1388
 8007464:	4293      	cmp	r3, r2
 8007466:	d901      	bls.n	800746c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007468:	2303      	movs	r3, #3
 800746a:	e0a6      	b.n	80075ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800746c:	4b56      	ldr	r3, [pc, #344]	; (80075c8 <HAL_RCC_OscConfig+0x4d8>)
 800746e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007470:	f003 0302 	and.w	r3, r3, #2
 8007474:	2b00      	cmp	r3, #0
 8007476:	d1ee      	bne.n	8007456 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007478:	7dfb      	ldrb	r3, [r7, #23]
 800747a:	2b01      	cmp	r3, #1
 800747c:	d105      	bne.n	800748a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800747e:	4b52      	ldr	r3, [pc, #328]	; (80075c8 <HAL_RCC_OscConfig+0x4d8>)
 8007480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007482:	4a51      	ldr	r2, [pc, #324]	; (80075c8 <HAL_RCC_OscConfig+0x4d8>)
 8007484:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007488:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	699b      	ldr	r3, [r3, #24]
 800748e:	2b00      	cmp	r3, #0
 8007490:	f000 8092 	beq.w	80075b8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007494:	4b4c      	ldr	r3, [pc, #304]	; (80075c8 <HAL_RCC_OscConfig+0x4d8>)
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	f003 030c 	and.w	r3, r3, #12
 800749c:	2b08      	cmp	r3, #8
 800749e:	d05c      	beq.n	800755a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	699b      	ldr	r3, [r3, #24]
 80074a4:	2b02      	cmp	r3, #2
 80074a6:	d141      	bne.n	800752c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074a8:	4b48      	ldr	r3, [pc, #288]	; (80075cc <HAL_RCC_OscConfig+0x4dc>)
 80074aa:	2200      	movs	r2, #0
 80074ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074ae:	f7fb f817 	bl	80024e0 <HAL_GetTick>
 80074b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074b4:	e008      	b.n	80074c8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074b6:	f7fb f813 	bl	80024e0 <HAL_GetTick>
 80074ba:	4602      	mov	r2, r0
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	1ad3      	subs	r3, r2, r3
 80074c0:	2b02      	cmp	r3, #2
 80074c2:	d901      	bls.n	80074c8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80074c4:	2303      	movs	r3, #3
 80074c6:	e078      	b.n	80075ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074c8:	4b3f      	ldr	r3, [pc, #252]	; (80075c8 <HAL_RCC_OscConfig+0x4d8>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d1f0      	bne.n	80074b6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	69da      	ldr	r2, [r3, #28]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6a1b      	ldr	r3, [r3, #32]
 80074dc:	431a      	orrs	r2, r3
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e2:	019b      	lsls	r3, r3, #6
 80074e4:	431a      	orrs	r2, r3
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ea:	085b      	lsrs	r3, r3, #1
 80074ec:	3b01      	subs	r3, #1
 80074ee:	041b      	lsls	r3, r3, #16
 80074f0:	431a      	orrs	r2, r3
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f6:	061b      	lsls	r3, r3, #24
 80074f8:	4933      	ldr	r1, [pc, #204]	; (80075c8 <HAL_RCC_OscConfig+0x4d8>)
 80074fa:	4313      	orrs	r3, r2
 80074fc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80074fe:	4b33      	ldr	r3, [pc, #204]	; (80075cc <HAL_RCC_OscConfig+0x4dc>)
 8007500:	2201      	movs	r2, #1
 8007502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007504:	f7fa ffec 	bl	80024e0 <HAL_GetTick>
 8007508:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800750a:	e008      	b.n	800751e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800750c:	f7fa ffe8 	bl	80024e0 <HAL_GetTick>
 8007510:	4602      	mov	r2, r0
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	1ad3      	subs	r3, r2, r3
 8007516:	2b02      	cmp	r3, #2
 8007518:	d901      	bls.n	800751e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800751a:	2303      	movs	r3, #3
 800751c:	e04d      	b.n	80075ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800751e:	4b2a      	ldr	r3, [pc, #168]	; (80075c8 <HAL_RCC_OscConfig+0x4d8>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007526:	2b00      	cmp	r3, #0
 8007528:	d0f0      	beq.n	800750c <HAL_RCC_OscConfig+0x41c>
 800752a:	e045      	b.n	80075b8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800752c:	4b27      	ldr	r3, [pc, #156]	; (80075cc <HAL_RCC_OscConfig+0x4dc>)
 800752e:	2200      	movs	r2, #0
 8007530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007532:	f7fa ffd5 	bl	80024e0 <HAL_GetTick>
 8007536:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007538:	e008      	b.n	800754c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800753a:	f7fa ffd1 	bl	80024e0 <HAL_GetTick>
 800753e:	4602      	mov	r2, r0
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	1ad3      	subs	r3, r2, r3
 8007544:	2b02      	cmp	r3, #2
 8007546:	d901      	bls.n	800754c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007548:	2303      	movs	r3, #3
 800754a:	e036      	b.n	80075ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800754c:	4b1e      	ldr	r3, [pc, #120]	; (80075c8 <HAL_RCC_OscConfig+0x4d8>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007554:	2b00      	cmp	r3, #0
 8007556:	d1f0      	bne.n	800753a <HAL_RCC_OscConfig+0x44a>
 8007558:	e02e      	b.n	80075b8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	699b      	ldr	r3, [r3, #24]
 800755e:	2b01      	cmp	r3, #1
 8007560:	d101      	bne.n	8007566 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	e029      	b.n	80075ba <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007566:	4b18      	ldr	r3, [pc, #96]	; (80075c8 <HAL_RCC_OscConfig+0x4d8>)
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	69db      	ldr	r3, [r3, #28]
 8007576:	429a      	cmp	r2, r3
 8007578:	d11c      	bne.n	80075b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007584:	429a      	cmp	r2, r3
 8007586:	d115      	bne.n	80075b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007588:	68fa      	ldr	r2, [r7, #12]
 800758a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800758e:	4013      	ands	r3, r2
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007594:	4293      	cmp	r3, r2
 8007596:	d10d      	bne.n	80075b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d106      	bne.n	80075b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d001      	beq.n	80075b8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80075b4:	2301      	movs	r3, #1
 80075b6:	e000      	b.n	80075ba <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3718      	adds	r7, #24
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	bf00      	nop
 80075c4:	40007000 	.word	0x40007000
 80075c8:	40023800 	.word	0x40023800
 80075cc:	42470060 	.word	0x42470060

080075d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b084      	sub	sp, #16
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d101      	bne.n	80075e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80075e0:	2301      	movs	r3, #1
 80075e2:	e0cc      	b.n	800777e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80075e4:	4b68      	ldr	r3, [pc, #416]	; (8007788 <HAL_RCC_ClockConfig+0x1b8>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f003 030f 	and.w	r3, r3, #15
 80075ec:	683a      	ldr	r2, [r7, #0]
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d90c      	bls.n	800760c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075f2:	4b65      	ldr	r3, [pc, #404]	; (8007788 <HAL_RCC_ClockConfig+0x1b8>)
 80075f4:	683a      	ldr	r2, [r7, #0]
 80075f6:	b2d2      	uxtb	r2, r2
 80075f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80075fa:	4b63      	ldr	r3, [pc, #396]	; (8007788 <HAL_RCC_ClockConfig+0x1b8>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f003 030f 	and.w	r3, r3, #15
 8007602:	683a      	ldr	r2, [r7, #0]
 8007604:	429a      	cmp	r2, r3
 8007606:	d001      	beq.n	800760c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	e0b8      	b.n	800777e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f003 0302 	and.w	r3, r3, #2
 8007614:	2b00      	cmp	r3, #0
 8007616:	d020      	beq.n	800765a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f003 0304 	and.w	r3, r3, #4
 8007620:	2b00      	cmp	r3, #0
 8007622:	d005      	beq.n	8007630 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007624:	4b59      	ldr	r3, [pc, #356]	; (800778c <HAL_RCC_ClockConfig+0x1bc>)
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	4a58      	ldr	r2, [pc, #352]	; (800778c <HAL_RCC_ClockConfig+0x1bc>)
 800762a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800762e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f003 0308 	and.w	r3, r3, #8
 8007638:	2b00      	cmp	r3, #0
 800763a:	d005      	beq.n	8007648 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800763c:	4b53      	ldr	r3, [pc, #332]	; (800778c <HAL_RCC_ClockConfig+0x1bc>)
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	4a52      	ldr	r2, [pc, #328]	; (800778c <HAL_RCC_ClockConfig+0x1bc>)
 8007642:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007646:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007648:	4b50      	ldr	r3, [pc, #320]	; (800778c <HAL_RCC_ClockConfig+0x1bc>)
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	494d      	ldr	r1, [pc, #308]	; (800778c <HAL_RCC_ClockConfig+0x1bc>)
 8007656:	4313      	orrs	r3, r2
 8007658:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f003 0301 	and.w	r3, r3, #1
 8007662:	2b00      	cmp	r3, #0
 8007664:	d044      	beq.n	80076f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	2b01      	cmp	r3, #1
 800766c:	d107      	bne.n	800767e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800766e:	4b47      	ldr	r3, [pc, #284]	; (800778c <HAL_RCC_ClockConfig+0x1bc>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007676:	2b00      	cmp	r3, #0
 8007678:	d119      	bne.n	80076ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800767a:	2301      	movs	r3, #1
 800767c:	e07f      	b.n	800777e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	2b02      	cmp	r3, #2
 8007684:	d003      	beq.n	800768e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800768a:	2b03      	cmp	r3, #3
 800768c:	d107      	bne.n	800769e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800768e:	4b3f      	ldr	r3, [pc, #252]	; (800778c <HAL_RCC_ClockConfig+0x1bc>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007696:	2b00      	cmp	r3, #0
 8007698:	d109      	bne.n	80076ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800769a:	2301      	movs	r3, #1
 800769c:	e06f      	b.n	800777e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800769e:	4b3b      	ldr	r3, [pc, #236]	; (800778c <HAL_RCC_ClockConfig+0x1bc>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f003 0302 	and.w	r3, r3, #2
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d101      	bne.n	80076ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076aa:	2301      	movs	r3, #1
 80076ac:	e067      	b.n	800777e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80076ae:	4b37      	ldr	r3, [pc, #220]	; (800778c <HAL_RCC_ClockConfig+0x1bc>)
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	f023 0203 	bic.w	r2, r3, #3
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	4934      	ldr	r1, [pc, #208]	; (800778c <HAL_RCC_ClockConfig+0x1bc>)
 80076bc:	4313      	orrs	r3, r2
 80076be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80076c0:	f7fa ff0e 	bl	80024e0 <HAL_GetTick>
 80076c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076c6:	e00a      	b.n	80076de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076c8:	f7fa ff0a 	bl	80024e0 <HAL_GetTick>
 80076cc:	4602      	mov	r2, r0
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	1ad3      	subs	r3, r2, r3
 80076d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d901      	bls.n	80076de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80076da:	2303      	movs	r3, #3
 80076dc:	e04f      	b.n	800777e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076de:	4b2b      	ldr	r3, [pc, #172]	; (800778c <HAL_RCC_ClockConfig+0x1bc>)
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	f003 020c 	and.w	r2, r3, #12
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d1eb      	bne.n	80076c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80076f0:	4b25      	ldr	r3, [pc, #148]	; (8007788 <HAL_RCC_ClockConfig+0x1b8>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f003 030f 	and.w	r3, r3, #15
 80076f8:	683a      	ldr	r2, [r7, #0]
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d20c      	bcs.n	8007718 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076fe:	4b22      	ldr	r3, [pc, #136]	; (8007788 <HAL_RCC_ClockConfig+0x1b8>)
 8007700:	683a      	ldr	r2, [r7, #0]
 8007702:	b2d2      	uxtb	r2, r2
 8007704:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007706:	4b20      	ldr	r3, [pc, #128]	; (8007788 <HAL_RCC_ClockConfig+0x1b8>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f003 030f 	and.w	r3, r3, #15
 800770e:	683a      	ldr	r2, [r7, #0]
 8007710:	429a      	cmp	r2, r3
 8007712:	d001      	beq.n	8007718 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007714:	2301      	movs	r3, #1
 8007716:	e032      	b.n	800777e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f003 0304 	and.w	r3, r3, #4
 8007720:	2b00      	cmp	r3, #0
 8007722:	d008      	beq.n	8007736 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007724:	4b19      	ldr	r3, [pc, #100]	; (800778c <HAL_RCC_ClockConfig+0x1bc>)
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	4916      	ldr	r1, [pc, #88]	; (800778c <HAL_RCC_ClockConfig+0x1bc>)
 8007732:	4313      	orrs	r3, r2
 8007734:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f003 0308 	and.w	r3, r3, #8
 800773e:	2b00      	cmp	r3, #0
 8007740:	d009      	beq.n	8007756 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007742:	4b12      	ldr	r3, [pc, #72]	; (800778c <HAL_RCC_ClockConfig+0x1bc>)
 8007744:	689b      	ldr	r3, [r3, #8]
 8007746:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	691b      	ldr	r3, [r3, #16]
 800774e:	00db      	lsls	r3, r3, #3
 8007750:	490e      	ldr	r1, [pc, #56]	; (800778c <HAL_RCC_ClockConfig+0x1bc>)
 8007752:	4313      	orrs	r3, r2
 8007754:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007756:	f000 f821 	bl	800779c <HAL_RCC_GetSysClockFreq>
 800775a:	4601      	mov	r1, r0
 800775c:	4b0b      	ldr	r3, [pc, #44]	; (800778c <HAL_RCC_ClockConfig+0x1bc>)
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	091b      	lsrs	r3, r3, #4
 8007762:	f003 030f 	and.w	r3, r3, #15
 8007766:	4a0a      	ldr	r2, [pc, #40]	; (8007790 <HAL_RCC_ClockConfig+0x1c0>)
 8007768:	5cd3      	ldrb	r3, [r2, r3]
 800776a:	fa21 f303 	lsr.w	r3, r1, r3
 800776e:	4a09      	ldr	r2, [pc, #36]	; (8007794 <HAL_RCC_ClockConfig+0x1c4>)
 8007770:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007772:	4b09      	ldr	r3, [pc, #36]	; (8007798 <HAL_RCC_ClockConfig+0x1c8>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4618      	mov	r0, r3
 8007778:	f7fa fcbe 	bl	80020f8 <HAL_InitTick>

  return HAL_OK;
 800777c:	2300      	movs	r3, #0
}
 800777e:	4618      	mov	r0, r3
 8007780:	3710      	adds	r7, #16
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
 8007786:	bf00      	nop
 8007788:	40023c00 	.word	0x40023c00
 800778c:	40023800 	.word	0x40023800
 8007790:	0801631c 	.word	0x0801631c
 8007794:	20000010 	.word	0x20000010
 8007798:	20000014 	.word	0x20000014

0800779c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800779c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800779e:	b085      	sub	sp, #20
 80077a0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80077a2:	2300      	movs	r3, #0
 80077a4:	607b      	str	r3, [r7, #4]
 80077a6:	2300      	movs	r3, #0
 80077a8:	60fb      	str	r3, [r7, #12]
 80077aa:	2300      	movs	r3, #0
 80077ac:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80077ae:	2300      	movs	r3, #0
 80077b0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80077b2:	4b63      	ldr	r3, [pc, #396]	; (8007940 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	f003 030c 	and.w	r3, r3, #12
 80077ba:	2b04      	cmp	r3, #4
 80077bc:	d007      	beq.n	80077ce <HAL_RCC_GetSysClockFreq+0x32>
 80077be:	2b08      	cmp	r3, #8
 80077c0:	d008      	beq.n	80077d4 <HAL_RCC_GetSysClockFreq+0x38>
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	f040 80b4 	bne.w	8007930 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80077c8:	4b5e      	ldr	r3, [pc, #376]	; (8007944 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80077ca:	60bb      	str	r3, [r7, #8]
       break;
 80077cc:	e0b3      	b.n	8007936 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80077ce:	4b5e      	ldr	r3, [pc, #376]	; (8007948 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80077d0:	60bb      	str	r3, [r7, #8]
      break;
 80077d2:	e0b0      	b.n	8007936 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80077d4:	4b5a      	ldr	r3, [pc, #360]	; (8007940 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077dc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80077de:	4b58      	ldr	r3, [pc, #352]	; (8007940 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d04a      	beq.n	8007880 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80077ea:	4b55      	ldr	r3, [pc, #340]	; (8007940 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	099b      	lsrs	r3, r3, #6
 80077f0:	f04f 0400 	mov.w	r4, #0
 80077f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80077f8:	f04f 0200 	mov.w	r2, #0
 80077fc:	ea03 0501 	and.w	r5, r3, r1
 8007800:	ea04 0602 	and.w	r6, r4, r2
 8007804:	4629      	mov	r1, r5
 8007806:	4632      	mov	r2, r6
 8007808:	f04f 0300 	mov.w	r3, #0
 800780c:	f04f 0400 	mov.w	r4, #0
 8007810:	0154      	lsls	r4, r2, #5
 8007812:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007816:	014b      	lsls	r3, r1, #5
 8007818:	4619      	mov	r1, r3
 800781a:	4622      	mov	r2, r4
 800781c:	1b49      	subs	r1, r1, r5
 800781e:	eb62 0206 	sbc.w	r2, r2, r6
 8007822:	f04f 0300 	mov.w	r3, #0
 8007826:	f04f 0400 	mov.w	r4, #0
 800782a:	0194      	lsls	r4, r2, #6
 800782c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007830:	018b      	lsls	r3, r1, #6
 8007832:	1a5b      	subs	r3, r3, r1
 8007834:	eb64 0402 	sbc.w	r4, r4, r2
 8007838:	f04f 0100 	mov.w	r1, #0
 800783c:	f04f 0200 	mov.w	r2, #0
 8007840:	00e2      	lsls	r2, r4, #3
 8007842:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007846:	00d9      	lsls	r1, r3, #3
 8007848:	460b      	mov	r3, r1
 800784a:	4614      	mov	r4, r2
 800784c:	195b      	adds	r3, r3, r5
 800784e:	eb44 0406 	adc.w	r4, r4, r6
 8007852:	f04f 0100 	mov.w	r1, #0
 8007856:	f04f 0200 	mov.w	r2, #0
 800785a:	0262      	lsls	r2, r4, #9
 800785c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8007860:	0259      	lsls	r1, r3, #9
 8007862:	460b      	mov	r3, r1
 8007864:	4614      	mov	r4, r2
 8007866:	4618      	mov	r0, r3
 8007868:	4621      	mov	r1, r4
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f04f 0400 	mov.w	r4, #0
 8007870:	461a      	mov	r2, r3
 8007872:	4623      	mov	r3, r4
 8007874:	f7f8 fd14 	bl	80002a0 <__aeabi_uldivmod>
 8007878:	4603      	mov	r3, r0
 800787a:	460c      	mov	r4, r1
 800787c:	60fb      	str	r3, [r7, #12]
 800787e:	e049      	b.n	8007914 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007880:	4b2f      	ldr	r3, [pc, #188]	; (8007940 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	099b      	lsrs	r3, r3, #6
 8007886:	f04f 0400 	mov.w	r4, #0
 800788a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800788e:	f04f 0200 	mov.w	r2, #0
 8007892:	ea03 0501 	and.w	r5, r3, r1
 8007896:	ea04 0602 	and.w	r6, r4, r2
 800789a:	4629      	mov	r1, r5
 800789c:	4632      	mov	r2, r6
 800789e:	f04f 0300 	mov.w	r3, #0
 80078a2:	f04f 0400 	mov.w	r4, #0
 80078a6:	0154      	lsls	r4, r2, #5
 80078a8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80078ac:	014b      	lsls	r3, r1, #5
 80078ae:	4619      	mov	r1, r3
 80078b0:	4622      	mov	r2, r4
 80078b2:	1b49      	subs	r1, r1, r5
 80078b4:	eb62 0206 	sbc.w	r2, r2, r6
 80078b8:	f04f 0300 	mov.w	r3, #0
 80078bc:	f04f 0400 	mov.w	r4, #0
 80078c0:	0194      	lsls	r4, r2, #6
 80078c2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80078c6:	018b      	lsls	r3, r1, #6
 80078c8:	1a5b      	subs	r3, r3, r1
 80078ca:	eb64 0402 	sbc.w	r4, r4, r2
 80078ce:	f04f 0100 	mov.w	r1, #0
 80078d2:	f04f 0200 	mov.w	r2, #0
 80078d6:	00e2      	lsls	r2, r4, #3
 80078d8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80078dc:	00d9      	lsls	r1, r3, #3
 80078de:	460b      	mov	r3, r1
 80078e0:	4614      	mov	r4, r2
 80078e2:	195b      	adds	r3, r3, r5
 80078e4:	eb44 0406 	adc.w	r4, r4, r6
 80078e8:	f04f 0100 	mov.w	r1, #0
 80078ec:	f04f 0200 	mov.w	r2, #0
 80078f0:	02a2      	lsls	r2, r4, #10
 80078f2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80078f6:	0299      	lsls	r1, r3, #10
 80078f8:	460b      	mov	r3, r1
 80078fa:	4614      	mov	r4, r2
 80078fc:	4618      	mov	r0, r3
 80078fe:	4621      	mov	r1, r4
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f04f 0400 	mov.w	r4, #0
 8007906:	461a      	mov	r2, r3
 8007908:	4623      	mov	r3, r4
 800790a:	f7f8 fcc9 	bl	80002a0 <__aeabi_uldivmod>
 800790e:	4603      	mov	r3, r0
 8007910:	460c      	mov	r4, r1
 8007912:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007914:	4b0a      	ldr	r3, [pc, #40]	; (8007940 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	0c1b      	lsrs	r3, r3, #16
 800791a:	f003 0303 	and.w	r3, r3, #3
 800791e:	3301      	adds	r3, #1
 8007920:	005b      	lsls	r3, r3, #1
 8007922:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007924:	68fa      	ldr	r2, [r7, #12]
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	fbb2 f3f3 	udiv	r3, r2, r3
 800792c:	60bb      	str	r3, [r7, #8]
      break;
 800792e:	e002      	b.n	8007936 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007930:	4b04      	ldr	r3, [pc, #16]	; (8007944 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007932:	60bb      	str	r3, [r7, #8]
      break;
 8007934:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007936:	68bb      	ldr	r3, [r7, #8]
}
 8007938:	4618      	mov	r0, r3
 800793a:	3714      	adds	r7, #20
 800793c:	46bd      	mov	sp, r7
 800793e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007940:	40023800 	.word	0x40023800
 8007944:	00f42400 	.word	0x00f42400
 8007948:	007a1200 	.word	0x007a1200

0800794c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800794c:	b480      	push	{r7}
 800794e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007950:	4b03      	ldr	r3, [pc, #12]	; (8007960 <HAL_RCC_GetHCLKFreq+0x14>)
 8007952:	681b      	ldr	r3, [r3, #0]
}
 8007954:	4618      	mov	r0, r3
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr
 800795e:	bf00      	nop
 8007960:	20000010 	.word	0x20000010

08007964 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007968:	f7ff fff0 	bl	800794c <HAL_RCC_GetHCLKFreq>
 800796c:	4601      	mov	r1, r0
 800796e:	4b05      	ldr	r3, [pc, #20]	; (8007984 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007970:	689b      	ldr	r3, [r3, #8]
 8007972:	0a9b      	lsrs	r3, r3, #10
 8007974:	f003 0307 	and.w	r3, r3, #7
 8007978:	4a03      	ldr	r2, [pc, #12]	; (8007988 <HAL_RCC_GetPCLK1Freq+0x24>)
 800797a:	5cd3      	ldrb	r3, [r2, r3]
 800797c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007980:	4618      	mov	r0, r3
 8007982:	bd80      	pop	{r7, pc}
 8007984:	40023800 	.word	0x40023800
 8007988:	0801632c 	.word	0x0801632c

0800798c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007990:	f7ff ffdc 	bl	800794c <HAL_RCC_GetHCLKFreq>
 8007994:	4601      	mov	r1, r0
 8007996:	4b05      	ldr	r3, [pc, #20]	; (80079ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	0b5b      	lsrs	r3, r3, #13
 800799c:	f003 0307 	and.w	r3, r3, #7
 80079a0:	4a03      	ldr	r2, [pc, #12]	; (80079b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80079a2:	5cd3      	ldrb	r3, [r2, r3]
 80079a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	bd80      	pop	{r7, pc}
 80079ac:	40023800 	.word	0x40023800
 80079b0:	0801632c 	.word	0x0801632c

080079b4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b083      	sub	sp, #12
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	220f      	movs	r2, #15
 80079c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80079c4:	4b12      	ldr	r3, [pc, #72]	; (8007a10 <HAL_RCC_GetClockConfig+0x5c>)
 80079c6:	689b      	ldr	r3, [r3, #8]
 80079c8:	f003 0203 	and.w	r2, r3, #3
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80079d0:	4b0f      	ldr	r3, [pc, #60]	; (8007a10 <HAL_RCC_GetClockConfig+0x5c>)
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80079dc:	4b0c      	ldr	r3, [pc, #48]	; (8007a10 <HAL_RCC_GetClockConfig+0x5c>)
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80079e8:	4b09      	ldr	r3, [pc, #36]	; (8007a10 <HAL_RCC_GetClockConfig+0x5c>)
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	08db      	lsrs	r3, r3, #3
 80079ee:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80079f6:	4b07      	ldr	r3, [pc, #28]	; (8007a14 <HAL_RCC_GetClockConfig+0x60>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f003 020f 	and.w	r2, r3, #15
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	601a      	str	r2, [r3, #0]
}
 8007a02:	bf00      	nop
 8007a04:	370c      	adds	r7, #12
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr
 8007a0e:	bf00      	nop
 8007a10:	40023800 	.word	0x40023800
 8007a14:	40023c00 	.word	0x40023c00

08007a18 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b086      	sub	sp, #24
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007a20:	2300      	movs	r3, #0
 8007a22:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007a24:	2300      	movs	r3, #0
 8007a26:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f003 0301 	and.w	r3, r3, #1
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d105      	bne.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d035      	beq.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007a40:	4b62      	ldr	r3, [pc, #392]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007a42:	2200      	movs	r2, #0
 8007a44:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007a46:	f7fa fd4b 	bl	80024e0 <HAL_GetTick>
 8007a4a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007a4c:	e008      	b.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007a4e:	f7fa fd47 	bl	80024e0 <HAL_GetTick>
 8007a52:	4602      	mov	r2, r0
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	1ad3      	subs	r3, r2, r3
 8007a58:	2b02      	cmp	r3, #2
 8007a5a:	d901      	bls.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007a5c:	2303      	movs	r3, #3
 8007a5e:	e0b0      	b.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007a60:	4b5b      	ldr	r3, [pc, #364]	; (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d1f0      	bne.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	019a      	lsls	r2, r3, #6
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	071b      	lsls	r3, r3, #28
 8007a78:	4955      	ldr	r1, [pc, #340]	; (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007a80:	4b52      	ldr	r3, [pc, #328]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007a82:	2201      	movs	r2, #1
 8007a84:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007a86:	f7fa fd2b 	bl	80024e0 <HAL_GetTick>
 8007a8a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007a8c:	e008      	b.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007a8e:	f7fa fd27 	bl	80024e0 <HAL_GetTick>
 8007a92:	4602      	mov	r2, r0
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	1ad3      	subs	r3, r2, r3
 8007a98:	2b02      	cmp	r3, #2
 8007a9a:	d901      	bls.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007a9c:	2303      	movs	r3, #3
 8007a9e:	e090      	b.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007aa0:	4b4b      	ldr	r3, [pc, #300]	; (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d0f0      	beq.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f003 0302 	and.w	r3, r3, #2
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	f000 8083 	beq.w	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007aba:	2300      	movs	r3, #0
 8007abc:	60fb      	str	r3, [r7, #12]
 8007abe:	4b44      	ldr	r3, [pc, #272]	; (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac2:	4a43      	ldr	r2, [pc, #268]	; (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8007aca:	4b41      	ldr	r3, [pc, #260]	; (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ad2:	60fb      	str	r3, [r7, #12]
 8007ad4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007ad6:	4b3f      	ldr	r3, [pc, #252]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a3e      	ldr	r2, [pc, #248]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007adc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ae0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007ae2:	f7fa fcfd 	bl	80024e0 <HAL_GetTick>
 8007ae6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007ae8:	e008      	b.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007aea:	f7fa fcf9 	bl	80024e0 <HAL_GetTick>
 8007aee:	4602      	mov	r2, r0
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	1ad3      	subs	r3, r2, r3
 8007af4:	2b02      	cmp	r3, #2
 8007af6:	d901      	bls.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007af8:	2303      	movs	r3, #3
 8007afa:	e062      	b.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007afc:	4b35      	ldr	r3, [pc, #212]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d0f0      	beq.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007b08:	4b31      	ldr	r3, [pc, #196]	; (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b10:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d02f      	beq.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	68db      	ldr	r3, [r3, #12]
 8007b1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b20:	693a      	ldr	r2, [r7, #16]
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d028      	beq.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007b26:	4b2a      	ldr	r3, [pc, #168]	; (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b2e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007b30:	4b29      	ldr	r3, [pc, #164]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007b32:	2201      	movs	r2, #1
 8007b34:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007b36:	4b28      	ldr	r3, [pc, #160]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007b38:	2200      	movs	r2, #0
 8007b3a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007b3c:	4a24      	ldr	r2, [pc, #144]	; (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007b42:	4b23      	ldr	r3, [pc, #140]	; (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b46:	f003 0301 	and.w	r3, r3, #1
 8007b4a:	2b01      	cmp	r3, #1
 8007b4c:	d114      	bne.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007b4e:	f7fa fcc7 	bl	80024e0 <HAL_GetTick>
 8007b52:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b54:	e00a      	b.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b56:	f7fa fcc3 	bl	80024e0 <HAL_GetTick>
 8007b5a:	4602      	mov	r2, r0
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	1ad3      	subs	r3, r2, r3
 8007b60:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d901      	bls.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007b68:	2303      	movs	r3, #3
 8007b6a:	e02a      	b.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b6c:	4b18      	ldr	r3, [pc, #96]	; (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b70:	f003 0302 	and.w	r3, r3, #2
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d0ee      	beq.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	68db      	ldr	r3, [r3, #12]
 8007b7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b84:	d10d      	bne.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007b86:	4b12      	ldr	r3, [pc, #72]	; (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	68db      	ldr	r3, [r3, #12]
 8007b92:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b9a:	490d      	ldr	r1, [pc, #52]	; (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	608b      	str	r3, [r1, #8]
 8007ba0:	e005      	b.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007ba2:	4b0b      	ldr	r3, [pc, #44]	; (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ba4:	689b      	ldr	r3, [r3, #8]
 8007ba6:	4a0a      	ldr	r2, [pc, #40]	; (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ba8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007bac:	6093      	str	r3, [r2, #8]
 8007bae:	4b08      	ldr	r3, [pc, #32]	; (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007bb0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	68db      	ldr	r3, [r3, #12]
 8007bb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007bba:	4905      	ldr	r1, [pc, #20]	; (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007bc0:	2300      	movs	r3, #0
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3718      	adds	r7, #24
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}
 8007bca:	bf00      	nop
 8007bcc:	42470068 	.word	0x42470068
 8007bd0:	40023800 	.word	0x40023800
 8007bd4:	40007000 	.word	0x40007000
 8007bd8:	42470e40 	.word	0x42470e40

08007bdc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b082      	sub	sp, #8
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d101      	bne.n	8007bee <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8007bea:	2301      	movs	r3, #1
 8007bec:	e083      	b.n	8007cf6 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	7f5b      	ldrb	r3, [r3, #29]
 8007bf2:	b2db      	uxtb	r3, r3
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d105      	bne.n	8007c04 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f7fa f874 	bl	8001cec <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2202      	movs	r2, #2
 8007c08:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	22ca      	movs	r2, #202	; 0xca
 8007c10:	625a      	str	r2, [r3, #36]	; 0x24
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	2253      	movs	r2, #83	; 0x53
 8007c18:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 f944 	bl	8007ea8 <RTC_EnterInitMode>
 8007c20:	4603      	mov	r3, r0
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d008      	beq.n	8007c38 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	22ff      	movs	r2, #255	; 0xff
 8007c2c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2204      	movs	r2, #4
 8007c32:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8007c34:	2301      	movs	r3, #1
 8007c36:	e05e      	b.n	8007cf6 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	6812      	ldr	r2, [r2, #0]
 8007c42:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007c46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c4a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	6899      	ldr	r1, [r3, #8]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	685a      	ldr	r2, [r3, #4]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	691b      	ldr	r3, [r3, #16]
 8007c5a:	431a      	orrs	r2, r3
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	695b      	ldr	r3, [r3, #20]
 8007c60:	431a      	orrs	r2, r3
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	430a      	orrs	r2, r1
 8007c68:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	68d2      	ldr	r2, [r2, #12]
 8007c72:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	6919      	ldr	r1, [r3, #16]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	041a      	lsls	r2, r3, #16
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	430a      	orrs	r2, r1
 8007c86:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	68da      	ldr	r2, [r3, #12]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c96:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	f003 0320 	and.w	r3, r3, #32
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d10e      	bne.n	8007cc4 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 f8d6 	bl	8007e58 <HAL_RTC_WaitForSynchro>
 8007cac:	4603      	mov	r3, r0
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d008      	beq.n	8007cc4 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	22ff      	movs	r2, #255	; 0xff
 8007cb8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2204      	movs	r2, #4
 8007cbe:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	e018      	b.n	8007cf6 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007cd2:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	699a      	ldr	r2, [r3, #24]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	430a      	orrs	r2, r1
 8007ce4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	22ff      	movs	r2, #255	; 0xff
 8007cec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007cf4:	2300      	movs	r3, #0
  }
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3708      	adds	r7, #8
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}

08007cfe <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007cfe:	b580      	push	{r7, lr}
 8007d00:	b086      	sub	sp, #24
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	60f8      	str	r0, [r7, #12]
 8007d06:	60b9      	str	r1, [r7, #8]
 8007d08:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	691b      	ldr	r3, [r3, #16]
 8007d1e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007d30:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007d34:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	0c1b      	lsrs	r3, r3, #16
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d40:	b2da      	uxtb	r2, r3
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	0a1b      	lsrs	r3, r3, #8
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d50:	b2da      	uxtb	r2, r3
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	b2db      	uxtb	r3, r3
 8007d5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d5e:	b2da      	uxtb	r2, r3
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	0c1b      	lsrs	r3, r3, #16
 8007d68:	b2db      	uxtb	r3, r3
 8007d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d6e:	b2da      	uxtb	r2, r3
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d11a      	bne.n	8007db0 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f000 f8be 	bl	8007f00 <RTC_Bcd2ToByte>
 8007d84:	4603      	mov	r3, r0
 8007d86:	461a      	mov	r2, r3
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	785b      	ldrb	r3, [r3, #1]
 8007d90:	4618      	mov	r0, r3
 8007d92:	f000 f8b5 	bl	8007f00 <RTC_Bcd2ToByte>
 8007d96:	4603      	mov	r3, r0
 8007d98:	461a      	mov	r2, r3
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	789b      	ldrb	r3, [r3, #2]
 8007da2:	4618      	mov	r0, r3
 8007da4:	f000 f8ac 	bl	8007f00 <RTC_Bcd2ToByte>
 8007da8:	4603      	mov	r3, r0
 8007daa:	461a      	mov	r2, r3
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007db0:	2300      	movs	r3, #0
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3718      	adds	r7, #24
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}

08007dba <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007dba:	b580      	push	{r7, lr}
 8007dbc:	b086      	sub	sp, #24
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	60f8      	str	r0, [r7, #12]
 8007dc2:	60b9      	str	r1, [r7, #8]
 8007dc4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007dd4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007dd8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	0c1b      	lsrs	r3, r3, #16
 8007dde:	b2da      	uxtb	r2, r3
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	0a1b      	lsrs	r3, r3, #8
 8007de8:	b2db      	uxtb	r3, r3
 8007dea:	f003 031f 	and.w	r3, r3, #31
 8007dee:	b2da      	uxtb	r2, r3
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007dfc:	b2da      	uxtb	r2, r3
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	0b5b      	lsrs	r3, r3, #13
 8007e06:	b2db      	uxtb	r3, r3
 8007e08:	f003 0307 	and.w	r3, r3, #7
 8007e0c:	b2da      	uxtb	r2, r3
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d11a      	bne.n	8007e4e <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	78db      	ldrb	r3, [r3, #3]
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f000 f86f 	bl	8007f00 <RTC_Bcd2ToByte>
 8007e22:	4603      	mov	r3, r0
 8007e24:	461a      	mov	r2, r3
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	785b      	ldrb	r3, [r3, #1]
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f000 f866 	bl	8007f00 <RTC_Bcd2ToByte>
 8007e34:	4603      	mov	r3, r0
 8007e36:	461a      	mov	r2, r3
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	789b      	ldrb	r3, [r3, #2]
 8007e40:	4618      	mov	r0, r3
 8007e42:	f000 f85d 	bl	8007f00 <RTC_Bcd2ToByte>
 8007e46:	4603      	mov	r3, r0
 8007e48:	461a      	mov	r2, r3
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007e4e:	2300      	movs	r3, #0
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3718      	adds	r7, #24
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b084      	sub	sp, #16
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007e60:	2300      	movs	r3, #0
 8007e62:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	68da      	ldr	r2, [r3, #12]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007e72:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007e74:	f7fa fb34 	bl	80024e0 <HAL_GetTick>
 8007e78:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007e7a:	e009      	b.n	8007e90 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007e7c:	f7fa fb30 	bl	80024e0 <HAL_GetTick>
 8007e80:	4602      	mov	r2, r0
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	1ad3      	subs	r3, r2, r3
 8007e86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e8a:	d901      	bls.n	8007e90 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007e8c:	2303      	movs	r3, #3
 8007e8e:	e007      	b.n	8007ea0 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	68db      	ldr	r3, [r3, #12]
 8007e96:	f003 0320 	and.w	r3, r3, #32
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d0ee      	beq.n	8007e7c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007e9e:	2300      	movs	r3, #0
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3710      	adds	r7, #16
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b084      	sub	sp, #16
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	68db      	ldr	r3, [r3, #12]
 8007eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d119      	bne.n	8007ef6 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007eca:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007ecc:	f7fa fb08 	bl	80024e0 <HAL_GetTick>
 8007ed0:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007ed2:	e009      	b.n	8007ee8 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007ed4:	f7fa fb04 	bl	80024e0 <HAL_GetTick>
 8007ed8:	4602      	mov	r2, r0
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	1ad3      	subs	r3, r2, r3
 8007ede:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ee2:	d901      	bls.n	8007ee8 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8007ee4:	2303      	movs	r3, #3
 8007ee6:	e007      	b.n	8007ef8 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	68db      	ldr	r3, [r3, #12]
 8007eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d0ee      	beq.n	8007ed4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8007ef6:	2300      	movs	r3, #0
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3710      	adds	r7, #16
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}

08007f00 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b085      	sub	sp, #20
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	4603      	mov	r3, r0
 8007f08:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8007f0e:	79fb      	ldrb	r3, [r7, #7]
 8007f10:	091b      	lsrs	r3, r3, #4
 8007f12:	b2db      	uxtb	r3, r3
 8007f14:	461a      	mov	r2, r3
 8007f16:	4613      	mov	r3, r2
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	4413      	add	r3, r2
 8007f1c:	005b      	lsls	r3, r3, #1
 8007f1e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8007f20:	79fb      	ldrb	r3, [r7, #7]
 8007f22:	f003 030f 	and.w	r3, r3, #15
 8007f26:	b2da      	uxtb	r2, r3
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	b2db      	uxtb	r3, r3
 8007f2c:	4413      	add	r3, r2
 8007f2e:	b2db      	uxtb	r3, r3
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3714      	adds	r7, #20
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr

08007f3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b082      	sub	sp, #8
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d101      	bne.n	8007f4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	e01d      	b.n	8007f8a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d106      	bne.n	8007f68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f7f9 fed8 	bl	8001d18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2202      	movs	r2, #2
 8007f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681a      	ldr	r2, [r3, #0]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	3304      	adds	r3, #4
 8007f78:	4619      	mov	r1, r3
 8007f7a:	4610      	mov	r0, r2
 8007f7c:	f000 fbe8 	bl	8008750 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2201      	movs	r2, #1
 8007f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f88:	2300      	movs	r3, #0
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3708      	adds	r7, #8
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}

08007f92 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007f92:	b480      	push	{r7}
 8007f94:	b085      	sub	sp, #20
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	68da      	ldr	r2, [r3, #12]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f042 0201 	orr.w	r2, r2, #1
 8007fa8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	689b      	ldr	r3, [r3, #8]
 8007fb0:	f003 0307 	and.w	r3, r3, #7
 8007fb4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2b06      	cmp	r3, #6
 8007fba:	d007      	beq.n	8007fcc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	681a      	ldr	r2, [r3, #0]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f042 0201 	orr.w	r2, r2, #1
 8007fca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007fcc:	2300      	movs	r3, #0
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3714      	adds	r7, #20
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd8:	4770      	bx	lr

08007fda <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007fda:	b580      	push	{r7, lr}
 8007fdc:	b082      	sub	sp, #8
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d101      	bne.n	8007fec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	e01d      	b.n	8008028 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d106      	bne.n	8008006 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f000 f815 	bl	8008030 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2202      	movs	r2, #2
 800800a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	3304      	adds	r3, #4
 8008016:	4619      	mov	r1, r3
 8008018:	4610      	mov	r0, r2
 800801a:	f000 fb99 	bl	8008750 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2201      	movs	r2, #1
 8008022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008026:	2300      	movs	r3, #0
}
 8008028:	4618      	mov	r0, r3
 800802a:	3708      	adds	r7, #8
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}

08008030 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008038:	bf00      	nop
 800803a:	370c      	adds	r7, #12
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr

08008044 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b084      	sub	sp, #16
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	2201      	movs	r2, #1
 8008054:	6839      	ldr	r1, [r7, #0]
 8008056:	4618      	mov	r0, r3
 8008058:	f000 feea 	bl	8008e30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a15      	ldr	r2, [pc, #84]	; (80080b8 <HAL_TIM_PWM_Start+0x74>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d004      	beq.n	8008070 <HAL_TIM_PWM_Start+0x2c>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a14      	ldr	r2, [pc, #80]	; (80080bc <HAL_TIM_PWM_Start+0x78>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d101      	bne.n	8008074 <HAL_TIM_PWM_Start+0x30>
 8008070:	2301      	movs	r3, #1
 8008072:	e000      	b.n	8008076 <HAL_TIM_PWM_Start+0x32>
 8008074:	2300      	movs	r3, #0
 8008076:	2b00      	cmp	r3, #0
 8008078:	d007      	beq.n	800808a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008088:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	689b      	ldr	r3, [r3, #8]
 8008090:	f003 0307 	and.w	r3, r3, #7
 8008094:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2b06      	cmp	r3, #6
 800809a:	d007      	beq.n	80080ac <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	681a      	ldr	r2, [r3, #0]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f042 0201 	orr.w	r2, r2, #1
 80080aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80080ac:	2300      	movs	r3, #0
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3710      	adds	r7, #16
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}
 80080b6:	bf00      	nop
 80080b8:	40010000 	.word	0x40010000
 80080bc:	40010400 	.word	0x40010400

080080c0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b082      	sub	sp, #8
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	2200      	movs	r2, #0
 80080d0:	6839      	ldr	r1, [r7, #0]
 80080d2:	4618      	mov	r0, r3
 80080d4:	f000 feac 	bl	8008e30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a22      	ldr	r2, [pc, #136]	; (8008168 <HAL_TIM_PWM_Stop+0xa8>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d004      	beq.n	80080ec <HAL_TIM_PWM_Stop+0x2c>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a21      	ldr	r2, [pc, #132]	; (800816c <HAL_TIM_PWM_Stop+0xac>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d101      	bne.n	80080f0 <HAL_TIM_PWM_Stop+0x30>
 80080ec:	2301      	movs	r3, #1
 80080ee:	e000      	b.n	80080f2 <HAL_TIM_PWM_Stop+0x32>
 80080f0:	2300      	movs	r3, #0
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d017      	beq.n	8008126 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	6a1a      	ldr	r2, [r3, #32]
 80080fc:	f241 1311 	movw	r3, #4369	; 0x1111
 8008100:	4013      	ands	r3, r2
 8008102:	2b00      	cmp	r3, #0
 8008104:	d10f      	bne.n	8008126 <HAL_TIM_PWM_Stop+0x66>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	6a1a      	ldr	r2, [r3, #32]
 800810c:	f240 4344 	movw	r3, #1092	; 0x444
 8008110:	4013      	ands	r3, r2
 8008112:	2b00      	cmp	r3, #0
 8008114:	d107      	bne.n	8008126 <HAL_TIM_PWM_Stop+0x66>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008124:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	6a1a      	ldr	r2, [r3, #32]
 800812c:	f241 1311 	movw	r3, #4369	; 0x1111
 8008130:	4013      	ands	r3, r2
 8008132:	2b00      	cmp	r3, #0
 8008134:	d10f      	bne.n	8008156 <HAL_TIM_PWM_Stop+0x96>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	6a1a      	ldr	r2, [r3, #32]
 800813c:	f240 4344 	movw	r3, #1092	; 0x444
 8008140:	4013      	ands	r3, r2
 8008142:	2b00      	cmp	r3, #0
 8008144:	d107      	bne.n	8008156 <HAL_TIM_PWM_Stop+0x96>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	681a      	ldr	r2, [r3, #0]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f022 0201 	bic.w	r2, r2, #1
 8008154:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2201      	movs	r2, #1
 800815a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800815e:	2300      	movs	r3, #0
}
 8008160:	4618      	mov	r0, r3
 8008162:	3708      	adds	r7, #8
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}
 8008168:	40010000 	.word	0x40010000
 800816c:	40010400 	.word	0x40010400

08008170 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b082      	sub	sp, #8
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	691b      	ldr	r3, [r3, #16]
 800817e:	f003 0302 	and.w	r3, r3, #2
 8008182:	2b02      	cmp	r3, #2
 8008184:	d122      	bne.n	80081cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	68db      	ldr	r3, [r3, #12]
 800818c:	f003 0302 	and.w	r3, r3, #2
 8008190:	2b02      	cmp	r3, #2
 8008192:	d11b      	bne.n	80081cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f06f 0202 	mvn.w	r2, #2
 800819c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2201      	movs	r2, #1
 80081a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	699b      	ldr	r3, [r3, #24]
 80081aa:	f003 0303 	and.w	r3, r3, #3
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d003      	beq.n	80081ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 faad 	bl	8008712 <HAL_TIM_IC_CaptureCallback>
 80081b8:	e005      	b.n	80081c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 fa9f 	bl	80086fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 fab0 	bl	8008726 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2200      	movs	r2, #0
 80081ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	691b      	ldr	r3, [r3, #16]
 80081d2:	f003 0304 	and.w	r3, r3, #4
 80081d6:	2b04      	cmp	r3, #4
 80081d8:	d122      	bne.n	8008220 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	68db      	ldr	r3, [r3, #12]
 80081e0:	f003 0304 	and.w	r3, r3, #4
 80081e4:	2b04      	cmp	r3, #4
 80081e6:	d11b      	bne.n	8008220 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f06f 0204 	mvn.w	r2, #4
 80081f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2202      	movs	r2, #2
 80081f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	699b      	ldr	r3, [r3, #24]
 80081fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008202:	2b00      	cmp	r3, #0
 8008204:	d003      	beq.n	800820e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 fa83 	bl	8008712 <HAL_TIM_IC_CaptureCallback>
 800820c:	e005      	b.n	800821a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f000 fa75 	bl	80086fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f000 fa86 	bl	8008726 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2200      	movs	r2, #0
 800821e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	691b      	ldr	r3, [r3, #16]
 8008226:	f003 0308 	and.w	r3, r3, #8
 800822a:	2b08      	cmp	r3, #8
 800822c:	d122      	bne.n	8008274 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	68db      	ldr	r3, [r3, #12]
 8008234:	f003 0308 	and.w	r3, r3, #8
 8008238:	2b08      	cmp	r3, #8
 800823a:	d11b      	bne.n	8008274 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f06f 0208 	mvn.w	r2, #8
 8008244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2204      	movs	r2, #4
 800824a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	69db      	ldr	r3, [r3, #28]
 8008252:	f003 0303 	and.w	r3, r3, #3
 8008256:	2b00      	cmp	r3, #0
 8008258:	d003      	beq.n	8008262 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 fa59 	bl	8008712 <HAL_TIM_IC_CaptureCallback>
 8008260:	e005      	b.n	800826e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 fa4b 	bl	80086fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f000 fa5c 	bl	8008726 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2200      	movs	r2, #0
 8008272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	691b      	ldr	r3, [r3, #16]
 800827a:	f003 0310 	and.w	r3, r3, #16
 800827e:	2b10      	cmp	r3, #16
 8008280:	d122      	bne.n	80082c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	68db      	ldr	r3, [r3, #12]
 8008288:	f003 0310 	and.w	r3, r3, #16
 800828c:	2b10      	cmp	r3, #16
 800828e:	d11b      	bne.n	80082c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f06f 0210 	mvn.w	r2, #16
 8008298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2208      	movs	r2, #8
 800829e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	69db      	ldr	r3, [r3, #28]
 80082a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d003      	beq.n	80082b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 fa2f 	bl	8008712 <HAL_TIM_IC_CaptureCallback>
 80082b4:	e005      	b.n	80082c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 fa21 	bl	80086fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 fa32 	bl	8008726 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2200      	movs	r2, #0
 80082c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	691b      	ldr	r3, [r3, #16]
 80082ce:	f003 0301 	and.w	r3, r3, #1
 80082d2:	2b01      	cmp	r3, #1
 80082d4:	d10e      	bne.n	80082f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	68db      	ldr	r3, [r3, #12]
 80082dc:	f003 0301 	and.w	r3, r3, #1
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	d107      	bne.n	80082f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f06f 0201 	mvn.w	r2, #1
 80082ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f7f9 fbb2 	bl	8001a58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	691b      	ldr	r3, [r3, #16]
 80082fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082fe:	2b80      	cmp	r3, #128	; 0x80
 8008300:	d10e      	bne.n	8008320 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	68db      	ldr	r3, [r3, #12]
 8008308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800830c:	2b80      	cmp	r3, #128	; 0x80
 800830e:	d107      	bne.n	8008320 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 fe86 	bl	800902c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	691b      	ldr	r3, [r3, #16]
 8008326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800832a:	2b40      	cmp	r3, #64	; 0x40
 800832c:	d10e      	bne.n	800834c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	68db      	ldr	r3, [r3, #12]
 8008334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008338:	2b40      	cmp	r3, #64	; 0x40
 800833a:	d107      	bne.n	800834c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 f9f7 	bl	800873a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	691b      	ldr	r3, [r3, #16]
 8008352:	f003 0320 	and.w	r3, r3, #32
 8008356:	2b20      	cmp	r3, #32
 8008358:	d10e      	bne.n	8008378 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	68db      	ldr	r3, [r3, #12]
 8008360:	f003 0320 	and.w	r3, r3, #32
 8008364:	2b20      	cmp	r3, #32
 8008366:	d107      	bne.n	8008378 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f06f 0220 	mvn.w	r2, #32
 8008370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 fe50 	bl	8009018 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008378:	bf00      	nop
 800837a:	3708      	adds	r7, #8
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}

08008380 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b084      	sub	sp, #16
 8008384:	af00      	add	r7, sp, #0
 8008386:	60f8      	str	r0, [r7, #12]
 8008388:	60b9      	str	r1, [r7, #8]
 800838a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008392:	2b01      	cmp	r3, #1
 8008394:	d101      	bne.n	800839a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008396:	2302      	movs	r3, #2
 8008398:	e0b4      	b.n	8008504 <HAL_TIM_PWM_ConfigChannel+0x184>
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2201      	movs	r2, #1
 800839e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2202      	movs	r2, #2
 80083a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2b0c      	cmp	r3, #12
 80083ae:	f200 809f 	bhi.w	80084f0 <HAL_TIM_PWM_ConfigChannel+0x170>
 80083b2:	a201      	add	r2, pc, #4	; (adr r2, 80083b8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80083b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083b8:	080083ed 	.word	0x080083ed
 80083bc:	080084f1 	.word	0x080084f1
 80083c0:	080084f1 	.word	0x080084f1
 80083c4:	080084f1 	.word	0x080084f1
 80083c8:	0800842d 	.word	0x0800842d
 80083cc:	080084f1 	.word	0x080084f1
 80083d0:	080084f1 	.word	0x080084f1
 80083d4:	080084f1 	.word	0x080084f1
 80083d8:	0800846f 	.word	0x0800846f
 80083dc:	080084f1 	.word	0x080084f1
 80083e0:	080084f1 	.word	0x080084f1
 80083e4:	080084f1 	.word	0x080084f1
 80083e8:	080084af 	.word	0x080084af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	68b9      	ldr	r1, [r7, #8]
 80083f2:	4618      	mov	r0, r3
 80083f4:	f000 fa4c 	bl	8008890 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	699a      	ldr	r2, [r3, #24]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f042 0208 	orr.w	r2, r2, #8
 8008406:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	699a      	ldr	r2, [r3, #24]
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f022 0204 	bic.w	r2, r2, #4
 8008416:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	6999      	ldr	r1, [r3, #24]
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	691a      	ldr	r2, [r3, #16]
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	430a      	orrs	r2, r1
 8008428:	619a      	str	r2, [r3, #24]
      break;
 800842a:	e062      	b.n	80084f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	68b9      	ldr	r1, [r7, #8]
 8008432:	4618      	mov	r0, r3
 8008434:	f000 fa9c 	bl	8008970 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	699a      	ldr	r2, [r3, #24]
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008446:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	699a      	ldr	r2, [r3, #24]
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008456:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	6999      	ldr	r1, [r3, #24]
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	691b      	ldr	r3, [r3, #16]
 8008462:	021a      	lsls	r2, r3, #8
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	430a      	orrs	r2, r1
 800846a:	619a      	str	r2, [r3, #24]
      break;
 800846c:	e041      	b.n	80084f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	68b9      	ldr	r1, [r7, #8]
 8008474:	4618      	mov	r0, r3
 8008476:	f000 faf1 	bl	8008a5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	69da      	ldr	r2, [r3, #28]
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f042 0208 	orr.w	r2, r2, #8
 8008488:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	69da      	ldr	r2, [r3, #28]
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f022 0204 	bic.w	r2, r2, #4
 8008498:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	69d9      	ldr	r1, [r3, #28]
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	691a      	ldr	r2, [r3, #16]
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	430a      	orrs	r2, r1
 80084aa:	61da      	str	r2, [r3, #28]
      break;
 80084ac:	e021      	b.n	80084f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	68b9      	ldr	r1, [r7, #8]
 80084b4:	4618      	mov	r0, r3
 80084b6:	f000 fb45 	bl	8008b44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	69da      	ldr	r2, [r3, #28]
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	69da      	ldr	r2, [r3, #28]
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	69d9      	ldr	r1, [r3, #28]
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	691b      	ldr	r3, [r3, #16]
 80084e4:	021a      	lsls	r2, r3, #8
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	430a      	orrs	r2, r1
 80084ec:	61da      	str	r2, [r3, #28]
      break;
 80084ee:	e000      	b.n	80084f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80084f0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2201      	movs	r2, #1
 80084f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2200      	movs	r2, #0
 80084fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008502:	2300      	movs	r3, #0
}
 8008504:	4618      	mov	r0, r3
 8008506:	3710      	adds	r7, #16
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b084      	sub	sp, #16
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800851c:	2b01      	cmp	r3, #1
 800851e:	d101      	bne.n	8008524 <HAL_TIM_ConfigClockSource+0x18>
 8008520:	2302      	movs	r3, #2
 8008522:	e0a6      	b.n	8008672 <HAL_TIM_ConfigClockSource+0x166>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2201      	movs	r2, #1
 8008528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2202      	movs	r2, #2
 8008530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	689b      	ldr	r3, [r3, #8]
 800853a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008542:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800854a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	68fa      	ldr	r2, [r7, #12]
 8008552:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	2b40      	cmp	r3, #64	; 0x40
 800855a:	d067      	beq.n	800862c <HAL_TIM_ConfigClockSource+0x120>
 800855c:	2b40      	cmp	r3, #64	; 0x40
 800855e:	d80b      	bhi.n	8008578 <HAL_TIM_ConfigClockSource+0x6c>
 8008560:	2b10      	cmp	r3, #16
 8008562:	d073      	beq.n	800864c <HAL_TIM_ConfigClockSource+0x140>
 8008564:	2b10      	cmp	r3, #16
 8008566:	d802      	bhi.n	800856e <HAL_TIM_ConfigClockSource+0x62>
 8008568:	2b00      	cmp	r3, #0
 800856a:	d06f      	beq.n	800864c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800856c:	e078      	b.n	8008660 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800856e:	2b20      	cmp	r3, #32
 8008570:	d06c      	beq.n	800864c <HAL_TIM_ConfigClockSource+0x140>
 8008572:	2b30      	cmp	r3, #48	; 0x30
 8008574:	d06a      	beq.n	800864c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8008576:	e073      	b.n	8008660 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008578:	2b70      	cmp	r3, #112	; 0x70
 800857a:	d00d      	beq.n	8008598 <HAL_TIM_ConfigClockSource+0x8c>
 800857c:	2b70      	cmp	r3, #112	; 0x70
 800857e:	d804      	bhi.n	800858a <HAL_TIM_ConfigClockSource+0x7e>
 8008580:	2b50      	cmp	r3, #80	; 0x50
 8008582:	d033      	beq.n	80085ec <HAL_TIM_ConfigClockSource+0xe0>
 8008584:	2b60      	cmp	r3, #96	; 0x60
 8008586:	d041      	beq.n	800860c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8008588:	e06a      	b.n	8008660 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800858a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800858e:	d066      	beq.n	800865e <HAL_TIM_ConfigClockSource+0x152>
 8008590:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008594:	d017      	beq.n	80085c6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8008596:	e063      	b.n	8008660 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6818      	ldr	r0, [r3, #0]
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	6899      	ldr	r1, [r3, #8]
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	685a      	ldr	r2, [r3, #4]
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	68db      	ldr	r3, [r3, #12]
 80085a8:	f000 fc22 	bl	8008df0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	689b      	ldr	r3, [r3, #8]
 80085b2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80085ba:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	68fa      	ldr	r2, [r7, #12]
 80085c2:	609a      	str	r2, [r3, #8]
      break;
 80085c4:	e04c      	b.n	8008660 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6818      	ldr	r0, [r3, #0]
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	6899      	ldr	r1, [r3, #8]
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	685a      	ldr	r2, [r3, #4]
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	68db      	ldr	r3, [r3, #12]
 80085d6:	f000 fc0b 	bl	8008df0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	689a      	ldr	r2, [r3, #8]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80085e8:	609a      	str	r2, [r3, #8]
      break;
 80085ea:	e039      	b.n	8008660 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6818      	ldr	r0, [r3, #0]
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	6859      	ldr	r1, [r3, #4]
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	68db      	ldr	r3, [r3, #12]
 80085f8:	461a      	mov	r2, r3
 80085fa:	f000 fb7f 	bl	8008cfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	2150      	movs	r1, #80	; 0x50
 8008604:	4618      	mov	r0, r3
 8008606:	f000 fbd8 	bl	8008dba <TIM_ITRx_SetConfig>
      break;
 800860a:	e029      	b.n	8008660 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6818      	ldr	r0, [r3, #0]
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	6859      	ldr	r1, [r3, #4]
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	68db      	ldr	r3, [r3, #12]
 8008618:	461a      	mov	r2, r3
 800861a:	f000 fb9e 	bl	8008d5a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	2160      	movs	r1, #96	; 0x60
 8008624:	4618      	mov	r0, r3
 8008626:	f000 fbc8 	bl	8008dba <TIM_ITRx_SetConfig>
      break;
 800862a:	e019      	b.n	8008660 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6818      	ldr	r0, [r3, #0]
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	6859      	ldr	r1, [r3, #4]
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	68db      	ldr	r3, [r3, #12]
 8008638:	461a      	mov	r2, r3
 800863a:	f000 fb5f 	bl	8008cfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	2140      	movs	r1, #64	; 0x40
 8008644:	4618      	mov	r0, r3
 8008646:	f000 fbb8 	bl	8008dba <TIM_ITRx_SetConfig>
      break;
 800864a:	e009      	b.n	8008660 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681a      	ldr	r2, [r3, #0]
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4619      	mov	r1, r3
 8008656:	4610      	mov	r0, r2
 8008658:	f000 fbaf 	bl	8008dba <TIM_ITRx_SetConfig>
      break;
 800865c:	e000      	b.n	8008660 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800865e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2201      	movs	r2, #1
 8008664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2200      	movs	r2, #0
 800866c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008670:	2300      	movs	r3, #0
}
 8008672:	4618      	mov	r0, r3
 8008674:	3710      	adds	r7, #16
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}

0800867a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800867a:	b580      	push	{r7, lr}
 800867c:	b082      	sub	sp, #8
 800867e:	af00      	add	r7, sp, #0
 8008680:	6078      	str	r0, [r7, #4]
 8008682:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800868a:	2b01      	cmp	r3, #1
 800868c:	d101      	bne.n	8008692 <HAL_TIM_SlaveConfigSynchro+0x18>
 800868e:	2302      	movs	r3, #2
 8008690:	e031      	b.n	80086f6 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2201      	movs	r2, #1
 8008696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2202      	movs	r2, #2
 800869e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80086a2:	6839      	ldr	r1, [r7, #0]
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f000 faa3 	bl	8008bf0 <TIM_SlaveTimer_SetConfig>
 80086aa:	4603      	mov	r3, r0
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d009      	beq.n	80086c4 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2201      	movs	r2, #1
 80086b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2200      	movs	r2, #0
 80086bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80086c0:	2301      	movs	r3, #1
 80086c2:	e018      	b.n	80086f6 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	68da      	ldr	r2, [r3, #12]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80086d2:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	68da      	ldr	r2, [r3, #12]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80086e2:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2201      	movs	r2, #1
 80086e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2200      	movs	r2, #0
 80086f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80086f4:	2300      	movs	r3, #0
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3708      	adds	r7, #8
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}

080086fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80086fe:	b480      	push	{r7}
 8008700:	b083      	sub	sp, #12
 8008702:	af00      	add	r7, sp, #0
 8008704:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008706:	bf00      	nop
 8008708:	370c      	adds	r7, #12
 800870a:	46bd      	mov	sp, r7
 800870c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008710:	4770      	bx	lr

08008712 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008712:	b480      	push	{r7}
 8008714:	b083      	sub	sp, #12
 8008716:	af00      	add	r7, sp, #0
 8008718:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800871a:	bf00      	nop
 800871c:	370c      	adds	r7, #12
 800871e:	46bd      	mov	sp, r7
 8008720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008724:	4770      	bx	lr

08008726 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008726:	b480      	push	{r7}
 8008728:	b083      	sub	sp, #12
 800872a:	af00      	add	r7, sp, #0
 800872c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800872e:	bf00      	nop
 8008730:	370c      	adds	r7, #12
 8008732:	46bd      	mov	sp, r7
 8008734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008738:	4770      	bx	lr

0800873a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800873a:	b480      	push	{r7}
 800873c:	b083      	sub	sp, #12
 800873e:	af00      	add	r7, sp, #0
 8008740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008742:	bf00      	nop
 8008744:	370c      	adds	r7, #12
 8008746:	46bd      	mov	sp, r7
 8008748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874c:	4770      	bx	lr
	...

08008750 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008750:	b480      	push	{r7}
 8008752:	b085      	sub	sp, #20
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
 8008758:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	4a40      	ldr	r2, [pc, #256]	; (8008864 <TIM_Base_SetConfig+0x114>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d013      	beq.n	8008790 <TIM_Base_SetConfig+0x40>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800876e:	d00f      	beq.n	8008790 <TIM_Base_SetConfig+0x40>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	4a3d      	ldr	r2, [pc, #244]	; (8008868 <TIM_Base_SetConfig+0x118>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d00b      	beq.n	8008790 <TIM_Base_SetConfig+0x40>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	4a3c      	ldr	r2, [pc, #240]	; (800886c <TIM_Base_SetConfig+0x11c>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d007      	beq.n	8008790 <TIM_Base_SetConfig+0x40>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	4a3b      	ldr	r2, [pc, #236]	; (8008870 <TIM_Base_SetConfig+0x120>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d003      	beq.n	8008790 <TIM_Base_SetConfig+0x40>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	4a3a      	ldr	r2, [pc, #232]	; (8008874 <TIM_Base_SetConfig+0x124>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d108      	bne.n	80087a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008796:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	68fa      	ldr	r2, [r7, #12]
 800879e:	4313      	orrs	r3, r2
 80087a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	4a2f      	ldr	r2, [pc, #188]	; (8008864 <TIM_Base_SetConfig+0x114>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d02b      	beq.n	8008802 <TIM_Base_SetConfig+0xb2>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087b0:	d027      	beq.n	8008802 <TIM_Base_SetConfig+0xb2>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	4a2c      	ldr	r2, [pc, #176]	; (8008868 <TIM_Base_SetConfig+0x118>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d023      	beq.n	8008802 <TIM_Base_SetConfig+0xb2>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	4a2b      	ldr	r2, [pc, #172]	; (800886c <TIM_Base_SetConfig+0x11c>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d01f      	beq.n	8008802 <TIM_Base_SetConfig+0xb2>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	4a2a      	ldr	r2, [pc, #168]	; (8008870 <TIM_Base_SetConfig+0x120>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d01b      	beq.n	8008802 <TIM_Base_SetConfig+0xb2>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	4a29      	ldr	r2, [pc, #164]	; (8008874 <TIM_Base_SetConfig+0x124>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d017      	beq.n	8008802 <TIM_Base_SetConfig+0xb2>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	4a28      	ldr	r2, [pc, #160]	; (8008878 <TIM_Base_SetConfig+0x128>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d013      	beq.n	8008802 <TIM_Base_SetConfig+0xb2>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	4a27      	ldr	r2, [pc, #156]	; (800887c <TIM_Base_SetConfig+0x12c>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d00f      	beq.n	8008802 <TIM_Base_SetConfig+0xb2>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	4a26      	ldr	r2, [pc, #152]	; (8008880 <TIM_Base_SetConfig+0x130>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d00b      	beq.n	8008802 <TIM_Base_SetConfig+0xb2>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	4a25      	ldr	r2, [pc, #148]	; (8008884 <TIM_Base_SetConfig+0x134>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d007      	beq.n	8008802 <TIM_Base_SetConfig+0xb2>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	4a24      	ldr	r2, [pc, #144]	; (8008888 <TIM_Base_SetConfig+0x138>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d003      	beq.n	8008802 <TIM_Base_SetConfig+0xb2>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	4a23      	ldr	r2, [pc, #140]	; (800888c <TIM_Base_SetConfig+0x13c>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d108      	bne.n	8008814 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008808:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	68db      	ldr	r3, [r3, #12]
 800880e:	68fa      	ldr	r2, [r7, #12]
 8008810:	4313      	orrs	r3, r2
 8008812:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	695b      	ldr	r3, [r3, #20]
 800881e:	4313      	orrs	r3, r2
 8008820:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	68fa      	ldr	r2, [r7, #12]
 8008826:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	689a      	ldr	r2, [r3, #8]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	681a      	ldr	r2, [r3, #0]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	4a0a      	ldr	r2, [pc, #40]	; (8008864 <TIM_Base_SetConfig+0x114>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d003      	beq.n	8008848 <TIM_Base_SetConfig+0xf8>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	4a0c      	ldr	r2, [pc, #48]	; (8008874 <TIM_Base_SetConfig+0x124>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d103      	bne.n	8008850 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	691a      	ldr	r2, [r3, #16]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2201      	movs	r2, #1
 8008854:	615a      	str	r2, [r3, #20]
}
 8008856:	bf00      	nop
 8008858:	3714      	adds	r7, #20
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr
 8008862:	bf00      	nop
 8008864:	40010000 	.word	0x40010000
 8008868:	40000400 	.word	0x40000400
 800886c:	40000800 	.word	0x40000800
 8008870:	40000c00 	.word	0x40000c00
 8008874:	40010400 	.word	0x40010400
 8008878:	40014000 	.word	0x40014000
 800887c:	40014400 	.word	0x40014400
 8008880:	40014800 	.word	0x40014800
 8008884:	40001800 	.word	0x40001800
 8008888:	40001c00 	.word	0x40001c00
 800888c:	40002000 	.word	0x40002000

08008890 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008890:	b480      	push	{r7}
 8008892:	b087      	sub	sp, #28
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6a1b      	ldr	r3, [r3, #32]
 800889e:	f023 0201 	bic.w	r2, r3, #1
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6a1b      	ldr	r3, [r3, #32]
 80088aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	699b      	ldr	r3, [r3, #24]
 80088b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f023 0303 	bic.w	r3, r3, #3
 80088c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	68fa      	ldr	r2, [r7, #12]
 80088ce:	4313      	orrs	r3, r2
 80088d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	f023 0302 	bic.w	r3, r3, #2
 80088d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	689b      	ldr	r3, [r3, #8]
 80088de:	697a      	ldr	r2, [r7, #20]
 80088e0:	4313      	orrs	r3, r2
 80088e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	4a20      	ldr	r2, [pc, #128]	; (8008968 <TIM_OC1_SetConfig+0xd8>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d003      	beq.n	80088f4 <TIM_OC1_SetConfig+0x64>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	4a1f      	ldr	r2, [pc, #124]	; (800896c <TIM_OC1_SetConfig+0xdc>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d10c      	bne.n	800890e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	f023 0308 	bic.w	r3, r3, #8
 80088fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	68db      	ldr	r3, [r3, #12]
 8008900:	697a      	ldr	r2, [r7, #20]
 8008902:	4313      	orrs	r3, r2
 8008904:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	f023 0304 	bic.w	r3, r3, #4
 800890c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	4a15      	ldr	r2, [pc, #84]	; (8008968 <TIM_OC1_SetConfig+0xd8>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d003      	beq.n	800891e <TIM_OC1_SetConfig+0x8e>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	4a14      	ldr	r2, [pc, #80]	; (800896c <TIM_OC1_SetConfig+0xdc>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d111      	bne.n	8008942 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008924:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800892c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	695b      	ldr	r3, [r3, #20]
 8008932:	693a      	ldr	r2, [r7, #16]
 8008934:	4313      	orrs	r3, r2
 8008936:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	699b      	ldr	r3, [r3, #24]
 800893c:	693a      	ldr	r2, [r7, #16]
 800893e:	4313      	orrs	r3, r2
 8008940:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	693a      	ldr	r2, [r7, #16]
 8008946:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	68fa      	ldr	r2, [r7, #12]
 800894c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	685a      	ldr	r2, [r3, #4]
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	697a      	ldr	r2, [r7, #20]
 800895a:	621a      	str	r2, [r3, #32]
}
 800895c:	bf00      	nop
 800895e:	371c      	adds	r7, #28
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr
 8008968:	40010000 	.word	0x40010000
 800896c:	40010400 	.word	0x40010400

08008970 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008970:	b480      	push	{r7}
 8008972:	b087      	sub	sp, #28
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6a1b      	ldr	r3, [r3, #32]
 800897e:	f023 0210 	bic.w	r2, r3, #16
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6a1b      	ldr	r3, [r3, #32]
 800898a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	699b      	ldr	r3, [r3, #24]
 8008996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800899e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	021b      	lsls	r3, r3, #8
 80089ae:	68fa      	ldr	r2, [r7, #12]
 80089b0:	4313      	orrs	r3, r2
 80089b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	f023 0320 	bic.w	r3, r3, #32
 80089ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	689b      	ldr	r3, [r3, #8]
 80089c0:	011b      	lsls	r3, r3, #4
 80089c2:	697a      	ldr	r2, [r7, #20]
 80089c4:	4313      	orrs	r3, r2
 80089c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	4a22      	ldr	r2, [pc, #136]	; (8008a54 <TIM_OC2_SetConfig+0xe4>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d003      	beq.n	80089d8 <TIM_OC2_SetConfig+0x68>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	4a21      	ldr	r2, [pc, #132]	; (8008a58 <TIM_OC2_SetConfig+0xe8>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d10d      	bne.n	80089f4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	68db      	ldr	r3, [r3, #12]
 80089e4:	011b      	lsls	r3, r3, #4
 80089e6:	697a      	ldr	r2, [r7, #20]
 80089e8:	4313      	orrs	r3, r2
 80089ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	4a17      	ldr	r2, [pc, #92]	; (8008a54 <TIM_OC2_SetConfig+0xe4>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d003      	beq.n	8008a04 <TIM_OC2_SetConfig+0x94>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	4a16      	ldr	r2, [pc, #88]	; (8008a58 <TIM_OC2_SetConfig+0xe8>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d113      	bne.n	8008a2c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	695b      	ldr	r3, [r3, #20]
 8008a18:	009b      	lsls	r3, r3, #2
 8008a1a:	693a      	ldr	r2, [r7, #16]
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	699b      	ldr	r3, [r3, #24]
 8008a24:	009b      	lsls	r3, r3, #2
 8008a26:	693a      	ldr	r2, [r7, #16]
 8008a28:	4313      	orrs	r3, r2
 8008a2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	693a      	ldr	r2, [r7, #16]
 8008a30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	68fa      	ldr	r2, [r7, #12]
 8008a36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	685a      	ldr	r2, [r3, #4]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	697a      	ldr	r2, [r7, #20]
 8008a44:	621a      	str	r2, [r3, #32]
}
 8008a46:	bf00      	nop
 8008a48:	371c      	adds	r7, #28
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a50:	4770      	bx	lr
 8008a52:	bf00      	nop
 8008a54:	40010000 	.word	0x40010000
 8008a58:	40010400 	.word	0x40010400

08008a5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b087      	sub	sp, #28
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6a1b      	ldr	r3, [r3, #32]
 8008a6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6a1b      	ldr	r3, [r3, #32]
 8008a76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	69db      	ldr	r3, [r3, #28]
 8008a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	f023 0303 	bic.w	r3, r3, #3
 8008a92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	68fa      	ldr	r2, [r7, #12]
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008aa4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	689b      	ldr	r3, [r3, #8]
 8008aaa:	021b      	lsls	r3, r3, #8
 8008aac:	697a      	ldr	r2, [r7, #20]
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	4a21      	ldr	r2, [pc, #132]	; (8008b3c <TIM_OC3_SetConfig+0xe0>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d003      	beq.n	8008ac2 <TIM_OC3_SetConfig+0x66>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	4a20      	ldr	r2, [pc, #128]	; (8008b40 <TIM_OC3_SetConfig+0xe4>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d10d      	bne.n	8008ade <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008ac8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	68db      	ldr	r3, [r3, #12]
 8008ace:	021b      	lsls	r3, r3, #8
 8008ad0:	697a      	ldr	r2, [r7, #20]
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008adc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	4a16      	ldr	r2, [pc, #88]	; (8008b3c <TIM_OC3_SetConfig+0xe0>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d003      	beq.n	8008aee <TIM_OC3_SetConfig+0x92>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	4a15      	ldr	r2, [pc, #84]	; (8008b40 <TIM_OC3_SetConfig+0xe4>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d113      	bne.n	8008b16 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008af4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008afc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	695b      	ldr	r3, [r3, #20]
 8008b02:	011b      	lsls	r3, r3, #4
 8008b04:	693a      	ldr	r2, [r7, #16]
 8008b06:	4313      	orrs	r3, r2
 8008b08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	699b      	ldr	r3, [r3, #24]
 8008b0e:	011b      	lsls	r3, r3, #4
 8008b10:	693a      	ldr	r2, [r7, #16]
 8008b12:	4313      	orrs	r3, r2
 8008b14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	693a      	ldr	r2, [r7, #16]
 8008b1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	68fa      	ldr	r2, [r7, #12]
 8008b20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	685a      	ldr	r2, [r3, #4]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	697a      	ldr	r2, [r7, #20]
 8008b2e:	621a      	str	r2, [r3, #32]
}
 8008b30:	bf00      	nop
 8008b32:	371c      	adds	r7, #28
 8008b34:	46bd      	mov	sp, r7
 8008b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3a:	4770      	bx	lr
 8008b3c:	40010000 	.word	0x40010000
 8008b40:	40010400 	.word	0x40010400

08008b44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b087      	sub	sp, #28
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6a1b      	ldr	r3, [r3, #32]
 8008b52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6a1b      	ldr	r3, [r3, #32]
 8008b5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	69db      	ldr	r3, [r3, #28]
 8008b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	021b      	lsls	r3, r3, #8
 8008b82:	68fa      	ldr	r2, [r7, #12]
 8008b84:	4313      	orrs	r3, r2
 8008b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008b88:	693b      	ldr	r3, [r7, #16]
 8008b8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	689b      	ldr	r3, [r3, #8]
 8008b94:	031b      	lsls	r3, r3, #12
 8008b96:	693a      	ldr	r2, [r7, #16]
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	4a12      	ldr	r2, [pc, #72]	; (8008be8 <TIM_OC4_SetConfig+0xa4>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d003      	beq.n	8008bac <TIM_OC4_SetConfig+0x68>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	4a11      	ldr	r2, [pc, #68]	; (8008bec <TIM_OC4_SetConfig+0xa8>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d109      	bne.n	8008bc0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008bb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	695b      	ldr	r3, [r3, #20]
 8008bb8:	019b      	lsls	r3, r3, #6
 8008bba:	697a      	ldr	r2, [r7, #20]
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	697a      	ldr	r2, [r7, #20]
 8008bc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	68fa      	ldr	r2, [r7, #12]
 8008bca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	685a      	ldr	r2, [r3, #4]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	693a      	ldr	r2, [r7, #16]
 8008bd8:	621a      	str	r2, [r3, #32]
}
 8008bda:	bf00      	nop
 8008bdc:	371c      	adds	r7, #28
 8008bde:	46bd      	mov	sp, r7
 8008be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be4:	4770      	bx	lr
 8008be6:	bf00      	nop
 8008be8:	40010000 	.word	0x40010000
 8008bec:	40010400 	.word	0x40010400

08008bf0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b086      	sub	sp, #24
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	689b      	ldr	r3, [r3, #8]
 8008c00:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c08:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	685b      	ldr	r3, [r3, #4]
 8008c0e:	697a      	ldr	r2, [r7, #20]
 8008c10:	4313      	orrs	r3, r2
 8008c12:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	f023 0307 	bic.w	r3, r3, #7
 8008c1a:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	697a      	ldr	r2, [r7, #20]
 8008c22:	4313      	orrs	r3, r2
 8008c24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	697a      	ldr	r2, [r7, #20]
 8008c2c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	685b      	ldr	r3, [r3, #4]
 8008c32:	2b30      	cmp	r3, #48	; 0x30
 8008c34:	d05c      	beq.n	8008cf0 <TIM_SlaveTimer_SetConfig+0x100>
 8008c36:	2b30      	cmp	r3, #48	; 0x30
 8008c38:	d806      	bhi.n	8008c48 <TIM_SlaveTimer_SetConfig+0x58>
 8008c3a:	2b10      	cmp	r3, #16
 8008c3c:	d058      	beq.n	8008cf0 <TIM_SlaveTimer_SetConfig+0x100>
 8008c3e:	2b20      	cmp	r3, #32
 8008c40:	d056      	beq.n	8008cf0 <TIM_SlaveTimer_SetConfig+0x100>
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d054      	beq.n	8008cf0 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8008c46:	e054      	b.n	8008cf2 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8008c48:	2b50      	cmp	r3, #80	; 0x50
 8008c4a:	d03d      	beq.n	8008cc8 <TIM_SlaveTimer_SetConfig+0xd8>
 8008c4c:	2b50      	cmp	r3, #80	; 0x50
 8008c4e:	d802      	bhi.n	8008c56 <TIM_SlaveTimer_SetConfig+0x66>
 8008c50:	2b40      	cmp	r3, #64	; 0x40
 8008c52:	d010      	beq.n	8008c76 <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8008c54:	e04d      	b.n	8008cf2 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8008c56:	2b60      	cmp	r3, #96	; 0x60
 8008c58:	d040      	beq.n	8008cdc <TIM_SlaveTimer_SetConfig+0xec>
 8008c5a:	2b70      	cmp	r3, #112	; 0x70
 8008c5c:	d000      	beq.n	8008c60 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8008c5e:	e048      	b.n	8008cf2 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6818      	ldr	r0, [r3, #0]
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	68d9      	ldr	r1, [r3, #12]
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	689a      	ldr	r2, [r3, #8]
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	691b      	ldr	r3, [r3, #16]
 8008c70:	f000 f8be 	bl	8008df0 <TIM_ETR_SetConfig>
      break;
 8008c74:	e03d      	b.n	8008cf2 <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	2b05      	cmp	r3, #5
 8008c7c:	d101      	bne.n	8008c82 <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8008c7e:	2301      	movs	r3, #1
 8008c80:	e038      	b.n	8008cf4 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	6a1b      	ldr	r3, [r3, #32]
 8008c88:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	6a1a      	ldr	r2, [r3, #32]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f022 0201 	bic.w	r2, r2, #1
 8008c98:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	699b      	ldr	r3, [r3, #24]
 8008ca0:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008ca8:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	691b      	ldr	r3, [r3, #16]
 8008cae:	011b      	lsls	r3, r3, #4
 8008cb0:	68fa      	ldr	r2, [r7, #12]
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	68fa      	ldr	r2, [r7, #12]
 8008cbc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	693a      	ldr	r2, [r7, #16]
 8008cc4:	621a      	str	r2, [r3, #32]
      break;
 8008cc6:	e014      	b.n	8008cf2 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6818      	ldr	r0, [r3, #0]
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	6899      	ldr	r1, [r3, #8]
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	691b      	ldr	r3, [r3, #16]
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	f000 f811 	bl	8008cfc <TIM_TI1_ConfigInputStage>
      break;
 8008cda:	e00a      	b.n	8008cf2 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6818      	ldr	r0, [r3, #0]
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	6899      	ldr	r1, [r3, #8]
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	691b      	ldr	r3, [r3, #16]
 8008ce8:	461a      	mov	r2, r3
 8008cea:	f000 f836 	bl	8008d5a <TIM_TI2_ConfigInputStage>
      break;
 8008cee:	e000      	b.n	8008cf2 <TIM_SlaveTimer_SetConfig+0x102>
      break;
 8008cf0:	bf00      	nop
  }
  return HAL_OK;
 8008cf2:	2300      	movs	r3, #0
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3718      	adds	r7, #24
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b087      	sub	sp, #28
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	60f8      	str	r0, [r7, #12]
 8008d04:	60b9      	str	r1, [r7, #8]
 8008d06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	6a1b      	ldr	r3, [r3, #32]
 8008d0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	6a1b      	ldr	r3, [r3, #32]
 8008d12:	f023 0201 	bic.w	r2, r3, #1
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	699b      	ldr	r3, [r3, #24]
 8008d1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008d26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	011b      	lsls	r3, r3, #4
 8008d2c:	693a      	ldr	r2, [r7, #16]
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	f023 030a 	bic.w	r3, r3, #10
 8008d38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008d3a:	697a      	ldr	r2, [r7, #20]
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	4313      	orrs	r3, r2
 8008d40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	693a      	ldr	r2, [r7, #16]
 8008d46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	697a      	ldr	r2, [r7, #20]
 8008d4c:	621a      	str	r2, [r3, #32]
}
 8008d4e:	bf00      	nop
 8008d50:	371c      	adds	r7, #28
 8008d52:	46bd      	mov	sp, r7
 8008d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d58:	4770      	bx	lr

08008d5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d5a:	b480      	push	{r7}
 8008d5c:	b087      	sub	sp, #28
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	60f8      	str	r0, [r7, #12]
 8008d62:	60b9      	str	r1, [r7, #8]
 8008d64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	6a1b      	ldr	r3, [r3, #32]
 8008d6a:	f023 0210 	bic.w	r2, r3, #16
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	699b      	ldr	r3, [r3, #24]
 8008d76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	6a1b      	ldr	r3, [r3, #32]
 8008d7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008d84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	031b      	lsls	r3, r3, #12
 8008d8a:	697a      	ldr	r2, [r7, #20]
 8008d8c:	4313      	orrs	r3, r2
 8008d8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008d96:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	011b      	lsls	r3, r3, #4
 8008d9c:	693a      	ldr	r2, [r7, #16]
 8008d9e:	4313      	orrs	r3, r2
 8008da0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	697a      	ldr	r2, [r7, #20]
 8008da6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	693a      	ldr	r2, [r7, #16]
 8008dac:	621a      	str	r2, [r3, #32]
}
 8008dae:	bf00      	nop
 8008db0:	371c      	adds	r7, #28
 8008db2:	46bd      	mov	sp, r7
 8008db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db8:	4770      	bx	lr

08008dba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008dba:	b480      	push	{r7}
 8008dbc:	b085      	sub	sp, #20
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	6078      	str	r0, [r7, #4]
 8008dc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	689b      	ldr	r3, [r3, #8]
 8008dc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008dd2:	683a      	ldr	r2, [r7, #0]
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	f043 0307 	orr.w	r3, r3, #7
 8008ddc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	68fa      	ldr	r2, [r7, #12]
 8008de2:	609a      	str	r2, [r3, #8]
}
 8008de4:	bf00      	nop
 8008de6:	3714      	adds	r7, #20
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr

08008df0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b087      	sub	sp, #28
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	60f8      	str	r0, [r7, #12]
 8008df8:	60b9      	str	r1, [r7, #8]
 8008dfa:	607a      	str	r2, [r7, #4]
 8008dfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	689b      	ldr	r3, [r3, #8]
 8008e02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008e0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	021a      	lsls	r2, r3, #8
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	431a      	orrs	r2, r3
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	4313      	orrs	r3, r2
 8008e18:	697a      	ldr	r2, [r7, #20]
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	697a      	ldr	r2, [r7, #20]
 8008e22:	609a      	str	r2, [r3, #8]
}
 8008e24:	bf00      	nop
 8008e26:	371c      	adds	r7, #28
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr

08008e30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b087      	sub	sp, #28
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	60f8      	str	r0, [r7, #12]
 8008e38:	60b9      	str	r1, [r7, #8]
 8008e3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	f003 031f 	and.w	r3, r3, #31
 8008e42:	2201      	movs	r2, #1
 8008e44:	fa02 f303 	lsl.w	r3, r2, r3
 8008e48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	6a1a      	ldr	r2, [r3, #32]
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	43db      	mvns	r3, r3
 8008e52:	401a      	ands	r2, r3
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	6a1a      	ldr	r2, [r3, #32]
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	f003 031f 	and.w	r3, r3, #31
 8008e62:	6879      	ldr	r1, [r7, #4]
 8008e64:	fa01 f303 	lsl.w	r3, r1, r3
 8008e68:	431a      	orrs	r2, r3
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	621a      	str	r2, [r3, #32]
}
 8008e6e:	bf00      	nop
 8008e70:	371c      	adds	r7, #28
 8008e72:	46bd      	mov	sp, r7
 8008e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e78:	4770      	bx	lr
	...

08008e7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b085      	sub	sp, #20
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d101      	bne.n	8008e94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008e90:	2302      	movs	r3, #2
 8008e92:	e05a      	b.n	8008f4a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2201      	movs	r2, #1
 8008e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2202      	movs	r2, #2
 8008ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	689b      	ldr	r3, [r3, #8]
 8008eb2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008eba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	68fa      	ldr	r2, [r7, #12]
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	68fa      	ldr	r2, [r7, #12]
 8008ecc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	4a21      	ldr	r2, [pc, #132]	; (8008f58 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d022      	beq.n	8008f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ee0:	d01d      	beq.n	8008f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	4a1d      	ldr	r2, [pc, #116]	; (8008f5c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d018      	beq.n	8008f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4a1b      	ldr	r2, [pc, #108]	; (8008f60 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d013      	beq.n	8008f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	4a1a      	ldr	r2, [pc, #104]	; (8008f64 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d00e      	beq.n	8008f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	4a18      	ldr	r2, [pc, #96]	; (8008f68 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d009      	beq.n	8008f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	4a17      	ldr	r2, [pc, #92]	; (8008f6c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d004      	beq.n	8008f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	4a15      	ldr	r2, [pc, #84]	; (8008f70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d10c      	bne.n	8008f38 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	68ba      	ldr	r2, [r7, #8]
 8008f2c:	4313      	orrs	r3, r2
 8008f2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	68ba      	ldr	r2, [r7, #8]
 8008f36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2200      	movs	r2, #0
 8008f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f48:	2300      	movs	r3, #0
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3714      	adds	r7, #20
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f54:	4770      	bx	lr
 8008f56:	bf00      	nop
 8008f58:	40010000 	.word	0x40010000
 8008f5c:	40000400 	.word	0x40000400
 8008f60:	40000800 	.word	0x40000800
 8008f64:	40000c00 	.word	0x40000c00
 8008f68:	40010400 	.word	0x40010400
 8008f6c:	40014000 	.word	0x40014000
 8008f70:	40001800 	.word	0x40001800

08008f74 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008f74:	b480      	push	{r7}
 8008f76:	b085      	sub	sp, #20
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
 8008f7c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	d101      	bne.n	8008f90 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008f8c:	2302      	movs	r3, #2
 8008f8e:	e03d      	b.n	800900c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2201      	movs	r2, #1
 8008f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	68db      	ldr	r3, [r3, #12]
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	689b      	ldr	r3, [r3, #8]
 8008fb0:	4313      	orrs	r3, r2
 8008fb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	4313      	orrs	r3, r2
 8008fce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	691b      	ldr	r3, [r3, #16]
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	695b      	ldr	r3, [r3, #20]
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	69db      	ldr	r3, [r3, #28]
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	68fa      	ldr	r2, [r7, #12]
 8009000:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2200      	movs	r2, #0
 8009006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800900a:	2300      	movs	r3, #0
}
 800900c:	4618      	mov	r0, r3
 800900e:	3714      	adds	r7, #20
 8009010:	46bd      	mov	sp, r7
 8009012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009016:	4770      	bx	lr

08009018 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009018:	b480      	push	{r7}
 800901a:	b083      	sub	sp, #12
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009020:	bf00      	nop
 8009022:	370c      	adds	r7, #12
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr

0800902c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800902c:	b480      	push	{r7}
 800902e:	b083      	sub	sp, #12
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009034:	bf00      	nop
 8009036:	370c      	adds	r7, #12
 8009038:	46bd      	mov	sp, r7
 800903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903e:	4770      	bx	lr

08009040 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b082      	sub	sp, #8
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d101      	bne.n	8009052 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800904e:	2301      	movs	r3, #1
 8009050:	e03f      	b.n	80090d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009058:	b2db      	uxtb	r3, r3
 800905a:	2b00      	cmp	r3, #0
 800905c:	d106      	bne.n	800906c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2200      	movs	r2, #0
 8009062:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f7f8 ff8e 	bl	8001f88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2224      	movs	r2, #36	; 0x24
 8009070:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	68da      	ldr	r2, [r3, #12]
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009082:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f000 fc0f 	bl	80098a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	691a      	ldr	r2, [r3, #16]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009098:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	695a      	ldr	r2, [r3, #20]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80090a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	68da      	ldr	r2, [r3, #12]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80090b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2200      	movs	r2, #0
 80090be:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2220      	movs	r2, #32
 80090c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2220      	movs	r2, #32
 80090cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80090d0:	2300      	movs	r3, #0
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	3708      	adds	r7, #8
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}
	...

080090dc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b086      	sub	sp, #24
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	60f8      	str	r0, [r7, #12]
 80090e4:	60b9      	str	r1, [r7, #8]
 80090e6:	4613      	mov	r3, r2
 80090e8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80090f0:	b2db      	uxtb	r3, r3
 80090f2:	2b20      	cmp	r3, #32
 80090f4:	d153      	bne.n	800919e <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d002      	beq.n	8009102 <HAL_UART_Transmit_DMA+0x26>
 80090fc:	88fb      	ldrh	r3, [r7, #6]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d101      	bne.n	8009106 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8009102:	2301      	movs	r3, #1
 8009104:	e04c      	b.n	80091a0 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800910c:	2b01      	cmp	r3, #1
 800910e:	d101      	bne.n	8009114 <HAL_UART_Transmit_DMA+0x38>
 8009110:	2302      	movs	r3, #2
 8009112:	e045      	b.n	80091a0 <HAL_UART_Transmit_DMA+0xc4>
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	2201      	movs	r2, #1
 8009118:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800911c:	68ba      	ldr	r2, [r7, #8]
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	88fa      	ldrh	r2, [r7, #6]
 8009126:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	88fa      	ldrh	r2, [r7, #6]
 800912c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2200      	movs	r2, #0
 8009132:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	2221      	movs	r2, #33	; 0x21
 8009138:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009140:	4a19      	ldr	r2, [pc, #100]	; (80091a8 <HAL_UART_Transmit_DMA+0xcc>)
 8009142:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009148:	4a18      	ldr	r2, [pc, #96]	; (80091ac <HAL_UART_Transmit_DMA+0xd0>)
 800914a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009150:	4a17      	ldr	r2, [pc, #92]	; (80091b0 <HAL_UART_Transmit_DMA+0xd4>)
 8009152:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009158:	2200      	movs	r2, #0
 800915a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800915c:	f107 0308 	add.w	r3, r7, #8
 8009160:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	6819      	ldr	r1, [r3, #0]
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	3304      	adds	r3, #4
 8009170:	461a      	mov	r2, r3
 8009172:	88fb      	ldrh	r3, [r7, #6]
 8009174:	f7f9 ff48 	bl	8003008 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009180:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	2200      	movs	r2, #0
 8009186:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	695a      	ldr	r2, [r3, #20]
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009198:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800919a:	2300      	movs	r3, #0
 800919c:	e000      	b.n	80091a0 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800919e:	2302      	movs	r3, #2
  }
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	3718      	adds	r7, #24
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}
 80091a8:	080094b5 	.word	0x080094b5
 80091ac:	08009507 	.word	0x08009507
 80091b0:	080095a7 	.word	0x080095a7

080091b4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b086      	sub	sp, #24
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	60f8      	str	r0, [r7, #12]
 80091bc:	60b9      	str	r1, [r7, #8]
 80091be:	4613      	mov	r3, r2
 80091c0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80091c8:	b2db      	uxtb	r3, r3
 80091ca:	2b20      	cmp	r3, #32
 80091cc:	d166      	bne.n	800929c <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d002      	beq.n	80091da <HAL_UART_Receive_DMA+0x26>
 80091d4:	88fb      	ldrh	r3, [r7, #6]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d101      	bne.n	80091de <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80091da:	2301      	movs	r3, #1
 80091dc:	e05f      	b.n	800929e <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	d101      	bne.n	80091ec <HAL_UART_Receive_DMA+0x38>
 80091e8:	2302      	movs	r3, #2
 80091ea:	e058      	b.n	800929e <HAL_UART_Receive_DMA+0xea>
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	2201      	movs	r2, #1
 80091f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80091f4:	68ba      	ldr	r2, [r7, #8]
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	88fa      	ldrh	r2, [r7, #6]
 80091fe:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	2200      	movs	r2, #0
 8009204:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	2222      	movs	r2, #34	; 0x22
 800920a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009212:	4a25      	ldr	r2, [pc, #148]	; (80092a8 <HAL_UART_Receive_DMA+0xf4>)
 8009214:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800921a:	4a24      	ldr	r2, [pc, #144]	; (80092ac <HAL_UART_Receive_DMA+0xf8>)
 800921c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009222:	4a23      	ldr	r2, [pc, #140]	; (80092b0 <HAL_UART_Receive_DMA+0xfc>)
 8009224:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800922a:	2200      	movs	r2, #0
 800922c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800922e:	f107 0308 	add.w	r3, r7, #8
 8009232:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	3304      	adds	r3, #4
 800923e:	4619      	mov	r1, r3
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	681a      	ldr	r2, [r3, #0]
 8009244:	88fb      	ldrh	r3, [r7, #6]
 8009246:	f7f9 fedf 	bl	8003008 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800924a:	2300      	movs	r3, #0
 800924c:	613b      	str	r3, [r7, #16]
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	613b      	str	r3, [r7, #16]
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	685b      	ldr	r3, [r3, #4]
 800925c:	613b      	str	r3, [r7, #16]
 800925e:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	2200      	movs	r2, #0
 8009264:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	68da      	ldr	r2, [r3, #12]
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009276:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	695a      	ldr	r2, [r3, #20]
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f042 0201 	orr.w	r2, r2, #1
 8009286:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	695a      	ldr	r2, [r3, #20]
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009296:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8009298:	2300      	movs	r3, #0
 800929a:	e000      	b.n	800929e <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800929c:	2302      	movs	r3, #2
  }
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3718      	adds	r7, #24
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}
 80092a6:	bf00      	nop
 80092a8:	08009523 	.word	0x08009523
 80092ac:	0800958b 	.word	0x0800958b
 80092b0:	080095a7 	.word	0x080095a7

080092b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b088      	sub	sp, #32
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	68db      	ldr	r3, [r3, #12]
 80092ca:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	695b      	ldr	r3, [r3, #20]
 80092d2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80092d4:	2300      	movs	r3, #0
 80092d6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80092d8:	2300      	movs	r3, #0
 80092da:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80092dc:	69fb      	ldr	r3, [r7, #28]
 80092de:	f003 030f 	and.w	r3, r3, #15
 80092e2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80092e4:	693b      	ldr	r3, [r7, #16]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d10d      	bne.n	8009306 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80092ea:	69fb      	ldr	r3, [r7, #28]
 80092ec:	f003 0320 	and.w	r3, r3, #32
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d008      	beq.n	8009306 <HAL_UART_IRQHandler+0x52>
 80092f4:	69bb      	ldr	r3, [r7, #24]
 80092f6:	f003 0320 	and.w	r3, r3, #32
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d003      	beq.n	8009306 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f000 fa51 	bl	80097a6 <UART_Receive_IT>
      return;
 8009304:	e0d1      	b.n	80094aa <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	2b00      	cmp	r3, #0
 800930a:	f000 80b0 	beq.w	800946e <HAL_UART_IRQHandler+0x1ba>
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	f003 0301 	and.w	r3, r3, #1
 8009314:	2b00      	cmp	r3, #0
 8009316:	d105      	bne.n	8009324 <HAL_UART_IRQHandler+0x70>
 8009318:	69bb      	ldr	r3, [r7, #24]
 800931a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800931e:	2b00      	cmp	r3, #0
 8009320:	f000 80a5 	beq.w	800946e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009324:	69fb      	ldr	r3, [r7, #28]
 8009326:	f003 0301 	and.w	r3, r3, #1
 800932a:	2b00      	cmp	r3, #0
 800932c:	d00a      	beq.n	8009344 <HAL_UART_IRQHandler+0x90>
 800932e:	69bb      	ldr	r3, [r7, #24]
 8009330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009334:	2b00      	cmp	r3, #0
 8009336:	d005      	beq.n	8009344 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800933c:	f043 0201 	orr.w	r2, r3, #1
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009344:	69fb      	ldr	r3, [r7, #28]
 8009346:	f003 0304 	and.w	r3, r3, #4
 800934a:	2b00      	cmp	r3, #0
 800934c:	d00a      	beq.n	8009364 <HAL_UART_IRQHandler+0xb0>
 800934e:	697b      	ldr	r3, [r7, #20]
 8009350:	f003 0301 	and.w	r3, r3, #1
 8009354:	2b00      	cmp	r3, #0
 8009356:	d005      	beq.n	8009364 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800935c:	f043 0202 	orr.w	r2, r3, #2
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009364:	69fb      	ldr	r3, [r7, #28]
 8009366:	f003 0302 	and.w	r3, r3, #2
 800936a:	2b00      	cmp	r3, #0
 800936c:	d00a      	beq.n	8009384 <HAL_UART_IRQHandler+0xd0>
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	f003 0301 	and.w	r3, r3, #1
 8009374:	2b00      	cmp	r3, #0
 8009376:	d005      	beq.n	8009384 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800937c:	f043 0204 	orr.w	r2, r3, #4
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8009384:	69fb      	ldr	r3, [r7, #28]
 8009386:	f003 0308 	and.w	r3, r3, #8
 800938a:	2b00      	cmp	r3, #0
 800938c:	d00f      	beq.n	80093ae <HAL_UART_IRQHandler+0xfa>
 800938e:	69bb      	ldr	r3, [r7, #24]
 8009390:	f003 0320 	and.w	r3, r3, #32
 8009394:	2b00      	cmp	r3, #0
 8009396:	d104      	bne.n	80093a2 <HAL_UART_IRQHandler+0xee>
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	f003 0301 	and.w	r3, r3, #1
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d005      	beq.n	80093ae <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093a6:	f043 0208 	orr.w	r2, r3, #8
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d078      	beq.n	80094a8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80093b6:	69fb      	ldr	r3, [r7, #28]
 80093b8:	f003 0320 	and.w	r3, r3, #32
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d007      	beq.n	80093d0 <HAL_UART_IRQHandler+0x11c>
 80093c0:	69bb      	ldr	r3, [r7, #24]
 80093c2:	f003 0320 	and.w	r3, r3, #32
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d002      	beq.n	80093d0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f000 f9eb 	bl	80097a6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	695b      	ldr	r3, [r3, #20]
 80093d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093da:	2b40      	cmp	r3, #64	; 0x40
 80093dc:	bf0c      	ite	eq
 80093de:	2301      	moveq	r3, #1
 80093e0:	2300      	movne	r3, #0
 80093e2:	b2db      	uxtb	r3, r3
 80093e4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093ea:	f003 0308 	and.w	r3, r3, #8
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d102      	bne.n	80093f8 <HAL_UART_IRQHandler+0x144>
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d031      	beq.n	800945c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f000 f934 	bl	8009666 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	695b      	ldr	r3, [r3, #20]
 8009404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009408:	2b40      	cmp	r3, #64	; 0x40
 800940a:	d123      	bne.n	8009454 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	695a      	ldr	r2, [r3, #20]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800941a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009420:	2b00      	cmp	r3, #0
 8009422:	d013      	beq.n	800944c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009428:	4a21      	ldr	r2, [pc, #132]	; (80094b0 <HAL_UART_IRQHandler+0x1fc>)
 800942a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009430:	4618      	mov	r0, r3
 8009432:	f7f9 fe41 	bl	80030b8 <HAL_DMA_Abort_IT>
 8009436:	4603      	mov	r3, r0
 8009438:	2b00      	cmp	r3, #0
 800943a:	d016      	beq.n	800946a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009440:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009446:	4610      	mov	r0, r2
 8009448:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800944a:	e00e      	b.n	800946a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f7f7 fbe3 	bl	8000c18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009452:	e00a      	b.n	800946a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f7f7 fbdf 	bl	8000c18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800945a:	e006      	b.n	800946a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f7f7 fbdb 	bl	8000c18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2200      	movs	r2, #0
 8009466:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8009468:	e01e      	b.n	80094a8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800946a:	bf00      	nop
    return;
 800946c:	e01c      	b.n	80094a8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800946e:	69fb      	ldr	r3, [r7, #28]
 8009470:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009474:	2b00      	cmp	r3, #0
 8009476:	d008      	beq.n	800948a <HAL_UART_IRQHandler+0x1d6>
 8009478:	69bb      	ldr	r3, [r7, #24]
 800947a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800947e:	2b00      	cmp	r3, #0
 8009480:	d003      	beq.n	800948a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f000 f921 	bl	80096ca <UART_Transmit_IT>
    return;
 8009488:	e00f      	b.n	80094aa <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800948a:	69fb      	ldr	r3, [r7, #28]
 800948c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009490:	2b00      	cmp	r3, #0
 8009492:	d00a      	beq.n	80094aa <HAL_UART_IRQHandler+0x1f6>
 8009494:	69bb      	ldr	r3, [r7, #24]
 8009496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800949a:	2b00      	cmp	r3, #0
 800949c:	d005      	beq.n	80094aa <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f000 f969 	bl	8009776 <UART_EndTransmit_IT>
    return;
 80094a4:	bf00      	nop
 80094a6:	e000      	b.n	80094aa <HAL_UART_IRQHandler+0x1f6>
    return;
 80094a8:	bf00      	nop
  }
}
 80094aa:	3720      	adds	r7, #32
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}
 80094b0:	080096a3 	.word	0x080096a3

080094b4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b084      	sub	sp, #16
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094c0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d113      	bne.n	80094f8 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	2200      	movs	r2, #0
 80094d4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	695a      	ldr	r2, [r3, #20]
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80094e4:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	68da      	ldr	r2, [r3, #12]
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80094f4:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80094f6:	e002      	b.n	80094fe <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80094f8:	68f8      	ldr	r0, [r7, #12]
 80094fa:	f7f7 fb13 	bl	8000b24 <HAL_UART_TxCpltCallback>
}
 80094fe:	bf00      	nop
 8009500:	3710      	adds	r7, #16
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}

08009506 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009506:	b580      	push	{r7, lr}
 8009508:	b084      	sub	sp, #16
 800950a:	af00      	add	r7, sp, #0
 800950c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009512:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009514:	68f8      	ldr	r0, [r7, #12]
 8009516:	f7f7 fb15 	bl	8000b44 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800951a:	bf00      	nop
 800951c:	3710      	adds	r7, #16
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}

08009522 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009522:	b580      	push	{r7, lr}
 8009524:	b084      	sub	sp, #16
 8009526:	af00      	add	r7, sp, #0
 8009528:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800952e:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800953a:	2b00      	cmp	r3, #0
 800953c:	d11e      	bne.n	800957c <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	2200      	movs	r2, #0
 8009542:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	68da      	ldr	r2, [r3, #12]
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009552:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	695a      	ldr	r2, [r3, #20]
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f022 0201 	bic.w	r2, r2, #1
 8009562:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	695a      	ldr	r2, [r3, #20]
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009572:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	2220      	movs	r2, #32
 8009578:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800957c:	68f8      	ldr	r0, [r7, #12]
 800957e:	f7f7 faeb 	bl	8000b58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009582:	bf00      	nop
 8009584:	3710      	adds	r7, #16
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}

0800958a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800958a:	b580      	push	{r7, lr}
 800958c:	b084      	sub	sp, #16
 800958e:	af00      	add	r7, sp, #0
 8009590:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009596:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8009598:	68f8      	ldr	r0, [r7, #12]
 800959a:	f7f7 fb33 	bl	8000c04 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800959e:	bf00      	nop
 80095a0:	3710      	adds	r7, #16
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}

080095a6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80095a6:	b580      	push	{r7, lr}
 80095a8:	b084      	sub	sp, #16
 80095aa:	af00      	add	r7, sp, #0
 80095ac:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80095ae:	2300      	movs	r3, #0
 80095b0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095b6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	695b      	ldr	r3, [r3, #20]
 80095be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095c2:	2b80      	cmp	r3, #128	; 0x80
 80095c4:	bf0c      	ite	eq
 80095c6:	2301      	moveq	r3, #1
 80095c8:	2300      	movne	r3, #0
 80095ca:	b2db      	uxtb	r3, r3
 80095cc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80095d4:	b2db      	uxtb	r3, r3
 80095d6:	2b21      	cmp	r3, #33	; 0x21
 80095d8:	d108      	bne.n	80095ec <UART_DMAError+0x46>
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d005      	beq.n	80095ec <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	2200      	movs	r2, #0
 80095e4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80095e6:	68b8      	ldr	r0, [r7, #8]
 80095e8:	f000 f827 	bl	800963a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	695b      	ldr	r3, [r3, #20]
 80095f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095f6:	2b40      	cmp	r3, #64	; 0x40
 80095f8:	bf0c      	ite	eq
 80095fa:	2301      	moveq	r3, #1
 80095fc:	2300      	movne	r3, #0
 80095fe:	b2db      	uxtb	r3, r3
 8009600:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009608:	b2db      	uxtb	r3, r3
 800960a:	2b22      	cmp	r3, #34	; 0x22
 800960c:	d108      	bne.n	8009620 <UART_DMAError+0x7a>
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d005      	beq.n	8009620 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	2200      	movs	r2, #0
 8009618:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800961a:	68b8      	ldr	r0, [r7, #8]
 800961c:	f000 f823 	bl	8009666 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009624:	f043 0210 	orr.w	r2, r3, #16
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800962c:	68b8      	ldr	r0, [r7, #8]
 800962e:	f7f7 faf3 	bl	8000c18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009632:	bf00      	nop
 8009634:	3710      	adds	r7, #16
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}

0800963a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800963a:	b480      	push	{r7}
 800963c:	b083      	sub	sp, #12
 800963e:	af00      	add	r7, sp, #0
 8009640:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	68da      	ldr	r2, [r3, #12]
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8009650:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2220      	movs	r2, #32
 8009656:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800965a:	bf00      	nop
 800965c:	370c      	adds	r7, #12
 800965e:	46bd      	mov	sp, r7
 8009660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009664:	4770      	bx	lr

08009666 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009666:	b480      	push	{r7}
 8009668:	b083      	sub	sp, #12
 800966a:	af00      	add	r7, sp, #0
 800966c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	68da      	ldr	r2, [r3, #12]
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800967c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	695a      	ldr	r2, [r3, #20]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f022 0201 	bic.w	r2, r2, #1
 800968c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2220      	movs	r2, #32
 8009692:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8009696:	bf00      	nop
 8009698:	370c      	adds	r7, #12
 800969a:	46bd      	mov	sp, r7
 800969c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a0:	4770      	bx	lr

080096a2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80096a2:	b580      	push	{r7, lr}
 80096a4:	b084      	sub	sp, #16
 80096a6:	af00      	add	r7, sp, #0
 80096a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	2200      	movs	r2, #0
 80096b4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	2200      	movs	r2, #0
 80096ba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80096bc:	68f8      	ldr	r0, [r7, #12]
 80096be:	f7f7 faab 	bl	8000c18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80096c2:	bf00      	nop
 80096c4:	3710      	adds	r7, #16
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}

080096ca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80096ca:	b480      	push	{r7}
 80096cc:	b085      	sub	sp, #20
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80096d8:	b2db      	uxtb	r3, r3
 80096da:	2b21      	cmp	r3, #33	; 0x21
 80096dc:	d144      	bne.n	8009768 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	689b      	ldr	r3, [r3, #8]
 80096e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096e6:	d11a      	bne.n	800971e <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6a1b      	ldr	r3, [r3, #32]
 80096ec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	881b      	ldrh	r3, [r3, #0]
 80096f2:	461a      	mov	r2, r3
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80096fc:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	691b      	ldr	r3, [r3, #16]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d105      	bne.n	8009712 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6a1b      	ldr	r3, [r3, #32]
 800970a:	1c9a      	adds	r2, r3, #2
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	621a      	str	r2, [r3, #32]
 8009710:	e00e      	b.n	8009730 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6a1b      	ldr	r3, [r3, #32]
 8009716:	1c5a      	adds	r2, r3, #1
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	621a      	str	r2, [r3, #32]
 800971c:	e008      	b.n	8009730 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6a1b      	ldr	r3, [r3, #32]
 8009722:	1c59      	adds	r1, r3, #1
 8009724:	687a      	ldr	r2, [r7, #4]
 8009726:	6211      	str	r1, [r2, #32]
 8009728:	781a      	ldrb	r2, [r3, #0]
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009734:	b29b      	uxth	r3, r3
 8009736:	3b01      	subs	r3, #1
 8009738:	b29b      	uxth	r3, r3
 800973a:	687a      	ldr	r2, [r7, #4]
 800973c:	4619      	mov	r1, r3
 800973e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009740:	2b00      	cmp	r3, #0
 8009742:	d10f      	bne.n	8009764 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	68da      	ldr	r2, [r3, #12]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009752:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	68da      	ldr	r2, [r3, #12]
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009762:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009764:	2300      	movs	r3, #0
 8009766:	e000      	b.n	800976a <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8009768:	2302      	movs	r3, #2
  }
}
 800976a:	4618      	mov	r0, r3
 800976c:	3714      	adds	r7, #20
 800976e:	46bd      	mov	sp, r7
 8009770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009774:	4770      	bx	lr

08009776 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009776:	b580      	push	{r7, lr}
 8009778:	b082      	sub	sp, #8
 800977a:	af00      	add	r7, sp, #0
 800977c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	68da      	ldr	r2, [r3, #12]
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800978c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2220      	movs	r2, #32
 8009792:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f7f7 f9c4 	bl	8000b24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800979c:	2300      	movs	r3, #0
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3708      	adds	r7, #8
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}

080097a6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80097a6:	b580      	push	{r7, lr}
 80097a8:	b084      	sub	sp, #16
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80097b4:	b2db      	uxtb	r3, r3
 80097b6:	2b22      	cmp	r3, #34	; 0x22
 80097b8:	d171      	bne.n	800989e <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	689b      	ldr	r3, [r3, #8]
 80097be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097c2:	d123      	bne.n	800980c <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097c8:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	691b      	ldr	r3, [r3, #16]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d10e      	bne.n	80097f0 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	685b      	ldr	r3, [r3, #4]
 80097d8:	b29b      	uxth	r3, r3
 80097da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097de:	b29a      	uxth	r2, r3
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097e8:	1c9a      	adds	r2, r3, #2
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	629a      	str	r2, [r3, #40]	; 0x28
 80097ee:	e029      	b.n	8009844 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	685b      	ldr	r3, [r3, #4]
 80097f6:	b29b      	uxth	r3, r3
 80097f8:	b2db      	uxtb	r3, r3
 80097fa:	b29a      	uxth	r2, r3
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009804:	1c5a      	adds	r2, r3, #1
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	629a      	str	r2, [r3, #40]	; 0x28
 800980a:	e01b      	b.n	8009844 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	691b      	ldr	r3, [r3, #16]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d10a      	bne.n	800982a <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	6858      	ldr	r0, [r3, #4]
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800981e:	1c59      	adds	r1, r3, #1
 8009820:	687a      	ldr	r2, [r7, #4]
 8009822:	6291      	str	r1, [r2, #40]	; 0x28
 8009824:	b2c2      	uxtb	r2, r0
 8009826:	701a      	strb	r2, [r3, #0]
 8009828:	e00c      	b.n	8009844 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	b2da      	uxtb	r2, r3
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009836:	1c58      	adds	r0, r3, #1
 8009838:	6879      	ldr	r1, [r7, #4]
 800983a:	6288      	str	r0, [r1, #40]	; 0x28
 800983c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009840:	b2d2      	uxtb	r2, r2
 8009842:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009848:	b29b      	uxth	r3, r3
 800984a:	3b01      	subs	r3, #1
 800984c:	b29b      	uxth	r3, r3
 800984e:	687a      	ldr	r2, [r7, #4]
 8009850:	4619      	mov	r1, r3
 8009852:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009854:	2b00      	cmp	r3, #0
 8009856:	d120      	bne.n	800989a <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	68da      	ldr	r2, [r3, #12]
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f022 0220 	bic.w	r2, r2, #32
 8009866:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	68da      	ldr	r2, [r3, #12]
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009876:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	695a      	ldr	r2, [r3, #20]
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f022 0201 	bic.w	r2, r2, #1
 8009886:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2220      	movs	r2, #32
 800988c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f7f7 f961 	bl	8000b58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8009896:	2300      	movs	r3, #0
 8009898:	e002      	b.n	80098a0 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800989a:	2300      	movs	r3, #0
 800989c:	e000      	b.n	80098a0 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800989e:	2302      	movs	r3, #2
  }
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	3710      	adds	r7, #16
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}

080098a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80098a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098ac:	b085      	sub	sp, #20
 80098ae:	af00      	add	r7, sp, #0
 80098b0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	691b      	ldr	r3, [r3, #16]
 80098b8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	68da      	ldr	r2, [r3, #12]
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	430a      	orrs	r2, r1
 80098c6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	689a      	ldr	r2, [r3, #8]
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	691b      	ldr	r3, [r3, #16]
 80098d0:	431a      	orrs	r2, r3
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	695b      	ldr	r3, [r3, #20]
 80098d6:	431a      	orrs	r2, r3
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	69db      	ldr	r3, [r3, #28]
 80098dc:	4313      	orrs	r3, r2
 80098de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	68db      	ldr	r3, [r3, #12]
 80098e6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80098ea:	f023 030c 	bic.w	r3, r3, #12
 80098ee:	687a      	ldr	r2, [r7, #4]
 80098f0:	6812      	ldr	r2, [r2, #0]
 80098f2:	68f9      	ldr	r1, [r7, #12]
 80098f4:	430b      	orrs	r3, r1
 80098f6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	695b      	ldr	r3, [r3, #20]
 80098fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	699a      	ldr	r2, [r3, #24]
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	430a      	orrs	r2, r1
 800990c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	69db      	ldr	r3, [r3, #28]
 8009912:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009916:	f040 818b 	bne.w	8009c30 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	4ac1      	ldr	r2, [pc, #772]	; (8009c24 <UART_SetConfig+0x37c>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d005      	beq.n	8009930 <UART_SetConfig+0x88>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	4abf      	ldr	r2, [pc, #764]	; (8009c28 <UART_SetConfig+0x380>)
 800992a:	4293      	cmp	r3, r2
 800992c:	f040 80bd 	bne.w	8009aaa <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009930:	f7fe f82c 	bl	800798c <HAL_RCC_GetPCLK2Freq>
 8009934:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	461d      	mov	r5, r3
 800993a:	f04f 0600 	mov.w	r6, #0
 800993e:	46a8      	mov	r8, r5
 8009940:	46b1      	mov	r9, r6
 8009942:	eb18 0308 	adds.w	r3, r8, r8
 8009946:	eb49 0409 	adc.w	r4, r9, r9
 800994a:	4698      	mov	r8, r3
 800994c:	46a1      	mov	r9, r4
 800994e:	eb18 0805 	adds.w	r8, r8, r5
 8009952:	eb49 0906 	adc.w	r9, r9, r6
 8009956:	f04f 0100 	mov.w	r1, #0
 800995a:	f04f 0200 	mov.w	r2, #0
 800995e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009962:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009966:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800996a:	4688      	mov	r8, r1
 800996c:	4691      	mov	r9, r2
 800996e:	eb18 0005 	adds.w	r0, r8, r5
 8009972:	eb49 0106 	adc.w	r1, r9, r6
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	685b      	ldr	r3, [r3, #4]
 800997a:	461d      	mov	r5, r3
 800997c:	f04f 0600 	mov.w	r6, #0
 8009980:	196b      	adds	r3, r5, r5
 8009982:	eb46 0406 	adc.w	r4, r6, r6
 8009986:	461a      	mov	r2, r3
 8009988:	4623      	mov	r3, r4
 800998a:	f7f6 fc89 	bl	80002a0 <__aeabi_uldivmod>
 800998e:	4603      	mov	r3, r0
 8009990:	460c      	mov	r4, r1
 8009992:	461a      	mov	r2, r3
 8009994:	4ba5      	ldr	r3, [pc, #660]	; (8009c2c <UART_SetConfig+0x384>)
 8009996:	fba3 2302 	umull	r2, r3, r3, r2
 800999a:	095b      	lsrs	r3, r3, #5
 800999c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	461d      	mov	r5, r3
 80099a4:	f04f 0600 	mov.w	r6, #0
 80099a8:	46a9      	mov	r9, r5
 80099aa:	46b2      	mov	sl, r6
 80099ac:	eb19 0309 	adds.w	r3, r9, r9
 80099b0:	eb4a 040a 	adc.w	r4, sl, sl
 80099b4:	4699      	mov	r9, r3
 80099b6:	46a2      	mov	sl, r4
 80099b8:	eb19 0905 	adds.w	r9, r9, r5
 80099bc:	eb4a 0a06 	adc.w	sl, sl, r6
 80099c0:	f04f 0100 	mov.w	r1, #0
 80099c4:	f04f 0200 	mov.w	r2, #0
 80099c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80099cc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80099d0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80099d4:	4689      	mov	r9, r1
 80099d6:	4692      	mov	sl, r2
 80099d8:	eb19 0005 	adds.w	r0, r9, r5
 80099dc:	eb4a 0106 	adc.w	r1, sl, r6
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	685b      	ldr	r3, [r3, #4]
 80099e4:	461d      	mov	r5, r3
 80099e6:	f04f 0600 	mov.w	r6, #0
 80099ea:	196b      	adds	r3, r5, r5
 80099ec:	eb46 0406 	adc.w	r4, r6, r6
 80099f0:	461a      	mov	r2, r3
 80099f2:	4623      	mov	r3, r4
 80099f4:	f7f6 fc54 	bl	80002a0 <__aeabi_uldivmod>
 80099f8:	4603      	mov	r3, r0
 80099fa:	460c      	mov	r4, r1
 80099fc:	461a      	mov	r2, r3
 80099fe:	4b8b      	ldr	r3, [pc, #556]	; (8009c2c <UART_SetConfig+0x384>)
 8009a00:	fba3 1302 	umull	r1, r3, r3, r2
 8009a04:	095b      	lsrs	r3, r3, #5
 8009a06:	2164      	movs	r1, #100	; 0x64
 8009a08:	fb01 f303 	mul.w	r3, r1, r3
 8009a0c:	1ad3      	subs	r3, r2, r3
 8009a0e:	00db      	lsls	r3, r3, #3
 8009a10:	3332      	adds	r3, #50	; 0x32
 8009a12:	4a86      	ldr	r2, [pc, #536]	; (8009c2c <UART_SetConfig+0x384>)
 8009a14:	fba2 2303 	umull	r2, r3, r2, r3
 8009a18:	095b      	lsrs	r3, r3, #5
 8009a1a:	005b      	lsls	r3, r3, #1
 8009a1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009a20:	4498      	add	r8, r3
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	461d      	mov	r5, r3
 8009a26:	f04f 0600 	mov.w	r6, #0
 8009a2a:	46a9      	mov	r9, r5
 8009a2c:	46b2      	mov	sl, r6
 8009a2e:	eb19 0309 	adds.w	r3, r9, r9
 8009a32:	eb4a 040a 	adc.w	r4, sl, sl
 8009a36:	4699      	mov	r9, r3
 8009a38:	46a2      	mov	sl, r4
 8009a3a:	eb19 0905 	adds.w	r9, r9, r5
 8009a3e:	eb4a 0a06 	adc.w	sl, sl, r6
 8009a42:	f04f 0100 	mov.w	r1, #0
 8009a46:	f04f 0200 	mov.w	r2, #0
 8009a4a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009a4e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009a52:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009a56:	4689      	mov	r9, r1
 8009a58:	4692      	mov	sl, r2
 8009a5a:	eb19 0005 	adds.w	r0, r9, r5
 8009a5e:	eb4a 0106 	adc.w	r1, sl, r6
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	685b      	ldr	r3, [r3, #4]
 8009a66:	461d      	mov	r5, r3
 8009a68:	f04f 0600 	mov.w	r6, #0
 8009a6c:	196b      	adds	r3, r5, r5
 8009a6e:	eb46 0406 	adc.w	r4, r6, r6
 8009a72:	461a      	mov	r2, r3
 8009a74:	4623      	mov	r3, r4
 8009a76:	f7f6 fc13 	bl	80002a0 <__aeabi_uldivmod>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	460c      	mov	r4, r1
 8009a7e:	461a      	mov	r2, r3
 8009a80:	4b6a      	ldr	r3, [pc, #424]	; (8009c2c <UART_SetConfig+0x384>)
 8009a82:	fba3 1302 	umull	r1, r3, r3, r2
 8009a86:	095b      	lsrs	r3, r3, #5
 8009a88:	2164      	movs	r1, #100	; 0x64
 8009a8a:	fb01 f303 	mul.w	r3, r1, r3
 8009a8e:	1ad3      	subs	r3, r2, r3
 8009a90:	00db      	lsls	r3, r3, #3
 8009a92:	3332      	adds	r3, #50	; 0x32
 8009a94:	4a65      	ldr	r2, [pc, #404]	; (8009c2c <UART_SetConfig+0x384>)
 8009a96:	fba2 2303 	umull	r2, r3, r2, r3
 8009a9a:	095b      	lsrs	r3, r3, #5
 8009a9c:	f003 0207 	and.w	r2, r3, #7
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4442      	add	r2, r8
 8009aa6:	609a      	str	r2, [r3, #8]
 8009aa8:	e26f      	b.n	8009f8a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009aaa:	f7fd ff5b 	bl	8007964 <HAL_RCC_GetPCLK1Freq>
 8009aae:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	461d      	mov	r5, r3
 8009ab4:	f04f 0600 	mov.w	r6, #0
 8009ab8:	46a8      	mov	r8, r5
 8009aba:	46b1      	mov	r9, r6
 8009abc:	eb18 0308 	adds.w	r3, r8, r8
 8009ac0:	eb49 0409 	adc.w	r4, r9, r9
 8009ac4:	4698      	mov	r8, r3
 8009ac6:	46a1      	mov	r9, r4
 8009ac8:	eb18 0805 	adds.w	r8, r8, r5
 8009acc:	eb49 0906 	adc.w	r9, r9, r6
 8009ad0:	f04f 0100 	mov.w	r1, #0
 8009ad4:	f04f 0200 	mov.w	r2, #0
 8009ad8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009adc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009ae0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009ae4:	4688      	mov	r8, r1
 8009ae6:	4691      	mov	r9, r2
 8009ae8:	eb18 0005 	adds.w	r0, r8, r5
 8009aec:	eb49 0106 	adc.w	r1, r9, r6
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	685b      	ldr	r3, [r3, #4]
 8009af4:	461d      	mov	r5, r3
 8009af6:	f04f 0600 	mov.w	r6, #0
 8009afa:	196b      	adds	r3, r5, r5
 8009afc:	eb46 0406 	adc.w	r4, r6, r6
 8009b00:	461a      	mov	r2, r3
 8009b02:	4623      	mov	r3, r4
 8009b04:	f7f6 fbcc 	bl	80002a0 <__aeabi_uldivmod>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	460c      	mov	r4, r1
 8009b0c:	461a      	mov	r2, r3
 8009b0e:	4b47      	ldr	r3, [pc, #284]	; (8009c2c <UART_SetConfig+0x384>)
 8009b10:	fba3 2302 	umull	r2, r3, r3, r2
 8009b14:	095b      	lsrs	r3, r3, #5
 8009b16:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	461d      	mov	r5, r3
 8009b1e:	f04f 0600 	mov.w	r6, #0
 8009b22:	46a9      	mov	r9, r5
 8009b24:	46b2      	mov	sl, r6
 8009b26:	eb19 0309 	adds.w	r3, r9, r9
 8009b2a:	eb4a 040a 	adc.w	r4, sl, sl
 8009b2e:	4699      	mov	r9, r3
 8009b30:	46a2      	mov	sl, r4
 8009b32:	eb19 0905 	adds.w	r9, r9, r5
 8009b36:	eb4a 0a06 	adc.w	sl, sl, r6
 8009b3a:	f04f 0100 	mov.w	r1, #0
 8009b3e:	f04f 0200 	mov.w	r2, #0
 8009b42:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009b46:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009b4a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009b4e:	4689      	mov	r9, r1
 8009b50:	4692      	mov	sl, r2
 8009b52:	eb19 0005 	adds.w	r0, r9, r5
 8009b56:	eb4a 0106 	adc.w	r1, sl, r6
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	685b      	ldr	r3, [r3, #4]
 8009b5e:	461d      	mov	r5, r3
 8009b60:	f04f 0600 	mov.w	r6, #0
 8009b64:	196b      	adds	r3, r5, r5
 8009b66:	eb46 0406 	adc.w	r4, r6, r6
 8009b6a:	461a      	mov	r2, r3
 8009b6c:	4623      	mov	r3, r4
 8009b6e:	f7f6 fb97 	bl	80002a0 <__aeabi_uldivmod>
 8009b72:	4603      	mov	r3, r0
 8009b74:	460c      	mov	r4, r1
 8009b76:	461a      	mov	r2, r3
 8009b78:	4b2c      	ldr	r3, [pc, #176]	; (8009c2c <UART_SetConfig+0x384>)
 8009b7a:	fba3 1302 	umull	r1, r3, r3, r2
 8009b7e:	095b      	lsrs	r3, r3, #5
 8009b80:	2164      	movs	r1, #100	; 0x64
 8009b82:	fb01 f303 	mul.w	r3, r1, r3
 8009b86:	1ad3      	subs	r3, r2, r3
 8009b88:	00db      	lsls	r3, r3, #3
 8009b8a:	3332      	adds	r3, #50	; 0x32
 8009b8c:	4a27      	ldr	r2, [pc, #156]	; (8009c2c <UART_SetConfig+0x384>)
 8009b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8009b92:	095b      	lsrs	r3, r3, #5
 8009b94:	005b      	lsls	r3, r3, #1
 8009b96:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009b9a:	4498      	add	r8, r3
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	461d      	mov	r5, r3
 8009ba0:	f04f 0600 	mov.w	r6, #0
 8009ba4:	46a9      	mov	r9, r5
 8009ba6:	46b2      	mov	sl, r6
 8009ba8:	eb19 0309 	adds.w	r3, r9, r9
 8009bac:	eb4a 040a 	adc.w	r4, sl, sl
 8009bb0:	4699      	mov	r9, r3
 8009bb2:	46a2      	mov	sl, r4
 8009bb4:	eb19 0905 	adds.w	r9, r9, r5
 8009bb8:	eb4a 0a06 	adc.w	sl, sl, r6
 8009bbc:	f04f 0100 	mov.w	r1, #0
 8009bc0:	f04f 0200 	mov.w	r2, #0
 8009bc4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009bc8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009bcc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009bd0:	4689      	mov	r9, r1
 8009bd2:	4692      	mov	sl, r2
 8009bd4:	eb19 0005 	adds.w	r0, r9, r5
 8009bd8:	eb4a 0106 	adc.w	r1, sl, r6
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	685b      	ldr	r3, [r3, #4]
 8009be0:	461d      	mov	r5, r3
 8009be2:	f04f 0600 	mov.w	r6, #0
 8009be6:	196b      	adds	r3, r5, r5
 8009be8:	eb46 0406 	adc.w	r4, r6, r6
 8009bec:	461a      	mov	r2, r3
 8009bee:	4623      	mov	r3, r4
 8009bf0:	f7f6 fb56 	bl	80002a0 <__aeabi_uldivmod>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	460c      	mov	r4, r1
 8009bf8:	461a      	mov	r2, r3
 8009bfa:	4b0c      	ldr	r3, [pc, #48]	; (8009c2c <UART_SetConfig+0x384>)
 8009bfc:	fba3 1302 	umull	r1, r3, r3, r2
 8009c00:	095b      	lsrs	r3, r3, #5
 8009c02:	2164      	movs	r1, #100	; 0x64
 8009c04:	fb01 f303 	mul.w	r3, r1, r3
 8009c08:	1ad3      	subs	r3, r2, r3
 8009c0a:	00db      	lsls	r3, r3, #3
 8009c0c:	3332      	adds	r3, #50	; 0x32
 8009c0e:	4a07      	ldr	r2, [pc, #28]	; (8009c2c <UART_SetConfig+0x384>)
 8009c10:	fba2 2303 	umull	r2, r3, r2, r3
 8009c14:	095b      	lsrs	r3, r3, #5
 8009c16:	f003 0207 	and.w	r2, r3, #7
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	4442      	add	r2, r8
 8009c20:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8009c22:	e1b2      	b.n	8009f8a <UART_SetConfig+0x6e2>
 8009c24:	40011000 	.word	0x40011000
 8009c28:	40011400 	.word	0x40011400
 8009c2c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	4ad7      	ldr	r2, [pc, #860]	; (8009f94 <UART_SetConfig+0x6ec>)
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d005      	beq.n	8009c46 <UART_SetConfig+0x39e>
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	4ad6      	ldr	r2, [pc, #856]	; (8009f98 <UART_SetConfig+0x6f0>)
 8009c40:	4293      	cmp	r3, r2
 8009c42:	f040 80d1 	bne.w	8009de8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8009c46:	f7fd fea1 	bl	800798c <HAL_RCC_GetPCLK2Freq>
 8009c4a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	469a      	mov	sl, r3
 8009c50:	f04f 0b00 	mov.w	fp, #0
 8009c54:	46d0      	mov	r8, sl
 8009c56:	46d9      	mov	r9, fp
 8009c58:	eb18 0308 	adds.w	r3, r8, r8
 8009c5c:	eb49 0409 	adc.w	r4, r9, r9
 8009c60:	4698      	mov	r8, r3
 8009c62:	46a1      	mov	r9, r4
 8009c64:	eb18 080a 	adds.w	r8, r8, sl
 8009c68:	eb49 090b 	adc.w	r9, r9, fp
 8009c6c:	f04f 0100 	mov.w	r1, #0
 8009c70:	f04f 0200 	mov.w	r2, #0
 8009c74:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009c78:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009c7c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009c80:	4688      	mov	r8, r1
 8009c82:	4691      	mov	r9, r2
 8009c84:	eb1a 0508 	adds.w	r5, sl, r8
 8009c88:	eb4b 0609 	adc.w	r6, fp, r9
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	685b      	ldr	r3, [r3, #4]
 8009c90:	4619      	mov	r1, r3
 8009c92:	f04f 0200 	mov.w	r2, #0
 8009c96:	f04f 0300 	mov.w	r3, #0
 8009c9a:	f04f 0400 	mov.w	r4, #0
 8009c9e:	0094      	lsls	r4, r2, #2
 8009ca0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009ca4:	008b      	lsls	r3, r1, #2
 8009ca6:	461a      	mov	r2, r3
 8009ca8:	4623      	mov	r3, r4
 8009caa:	4628      	mov	r0, r5
 8009cac:	4631      	mov	r1, r6
 8009cae:	f7f6 faf7 	bl	80002a0 <__aeabi_uldivmod>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	460c      	mov	r4, r1
 8009cb6:	461a      	mov	r2, r3
 8009cb8:	4bb8      	ldr	r3, [pc, #736]	; (8009f9c <UART_SetConfig+0x6f4>)
 8009cba:	fba3 2302 	umull	r2, r3, r3, r2
 8009cbe:	095b      	lsrs	r3, r3, #5
 8009cc0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	469b      	mov	fp, r3
 8009cc8:	f04f 0c00 	mov.w	ip, #0
 8009ccc:	46d9      	mov	r9, fp
 8009cce:	46e2      	mov	sl, ip
 8009cd0:	eb19 0309 	adds.w	r3, r9, r9
 8009cd4:	eb4a 040a 	adc.w	r4, sl, sl
 8009cd8:	4699      	mov	r9, r3
 8009cda:	46a2      	mov	sl, r4
 8009cdc:	eb19 090b 	adds.w	r9, r9, fp
 8009ce0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009ce4:	f04f 0100 	mov.w	r1, #0
 8009ce8:	f04f 0200 	mov.w	r2, #0
 8009cec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009cf0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009cf4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009cf8:	4689      	mov	r9, r1
 8009cfa:	4692      	mov	sl, r2
 8009cfc:	eb1b 0509 	adds.w	r5, fp, r9
 8009d00:	eb4c 060a 	adc.w	r6, ip, sl
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	685b      	ldr	r3, [r3, #4]
 8009d08:	4619      	mov	r1, r3
 8009d0a:	f04f 0200 	mov.w	r2, #0
 8009d0e:	f04f 0300 	mov.w	r3, #0
 8009d12:	f04f 0400 	mov.w	r4, #0
 8009d16:	0094      	lsls	r4, r2, #2
 8009d18:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009d1c:	008b      	lsls	r3, r1, #2
 8009d1e:	461a      	mov	r2, r3
 8009d20:	4623      	mov	r3, r4
 8009d22:	4628      	mov	r0, r5
 8009d24:	4631      	mov	r1, r6
 8009d26:	f7f6 fabb 	bl	80002a0 <__aeabi_uldivmod>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	460c      	mov	r4, r1
 8009d2e:	461a      	mov	r2, r3
 8009d30:	4b9a      	ldr	r3, [pc, #616]	; (8009f9c <UART_SetConfig+0x6f4>)
 8009d32:	fba3 1302 	umull	r1, r3, r3, r2
 8009d36:	095b      	lsrs	r3, r3, #5
 8009d38:	2164      	movs	r1, #100	; 0x64
 8009d3a:	fb01 f303 	mul.w	r3, r1, r3
 8009d3e:	1ad3      	subs	r3, r2, r3
 8009d40:	011b      	lsls	r3, r3, #4
 8009d42:	3332      	adds	r3, #50	; 0x32
 8009d44:	4a95      	ldr	r2, [pc, #596]	; (8009f9c <UART_SetConfig+0x6f4>)
 8009d46:	fba2 2303 	umull	r2, r3, r2, r3
 8009d4a:	095b      	lsrs	r3, r3, #5
 8009d4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009d50:	4498      	add	r8, r3
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	469b      	mov	fp, r3
 8009d56:	f04f 0c00 	mov.w	ip, #0
 8009d5a:	46d9      	mov	r9, fp
 8009d5c:	46e2      	mov	sl, ip
 8009d5e:	eb19 0309 	adds.w	r3, r9, r9
 8009d62:	eb4a 040a 	adc.w	r4, sl, sl
 8009d66:	4699      	mov	r9, r3
 8009d68:	46a2      	mov	sl, r4
 8009d6a:	eb19 090b 	adds.w	r9, r9, fp
 8009d6e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009d72:	f04f 0100 	mov.w	r1, #0
 8009d76:	f04f 0200 	mov.w	r2, #0
 8009d7a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009d7e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009d82:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009d86:	4689      	mov	r9, r1
 8009d88:	4692      	mov	sl, r2
 8009d8a:	eb1b 0509 	adds.w	r5, fp, r9
 8009d8e:	eb4c 060a 	adc.w	r6, ip, sl
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	685b      	ldr	r3, [r3, #4]
 8009d96:	4619      	mov	r1, r3
 8009d98:	f04f 0200 	mov.w	r2, #0
 8009d9c:	f04f 0300 	mov.w	r3, #0
 8009da0:	f04f 0400 	mov.w	r4, #0
 8009da4:	0094      	lsls	r4, r2, #2
 8009da6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009daa:	008b      	lsls	r3, r1, #2
 8009dac:	461a      	mov	r2, r3
 8009dae:	4623      	mov	r3, r4
 8009db0:	4628      	mov	r0, r5
 8009db2:	4631      	mov	r1, r6
 8009db4:	f7f6 fa74 	bl	80002a0 <__aeabi_uldivmod>
 8009db8:	4603      	mov	r3, r0
 8009dba:	460c      	mov	r4, r1
 8009dbc:	461a      	mov	r2, r3
 8009dbe:	4b77      	ldr	r3, [pc, #476]	; (8009f9c <UART_SetConfig+0x6f4>)
 8009dc0:	fba3 1302 	umull	r1, r3, r3, r2
 8009dc4:	095b      	lsrs	r3, r3, #5
 8009dc6:	2164      	movs	r1, #100	; 0x64
 8009dc8:	fb01 f303 	mul.w	r3, r1, r3
 8009dcc:	1ad3      	subs	r3, r2, r3
 8009dce:	011b      	lsls	r3, r3, #4
 8009dd0:	3332      	adds	r3, #50	; 0x32
 8009dd2:	4a72      	ldr	r2, [pc, #456]	; (8009f9c <UART_SetConfig+0x6f4>)
 8009dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8009dd8:	095b      	lsrs	r3, r3, #5
 8009dda:	f003 020f 	and.w	r2, r3, #15
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	4442      	add	r2, r8
 8009de4:	609a      	str	r2, [r3, #8]
 8009de6:	e0d0      	b.n	8009f8a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8009de8:	f7fd fdbc 	bl	8007964 <HAL_RCC_GetPCLK1Freq>
 8009dec:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	469a      	mov	sl, r3
 8009df2:	f04f 0b00 	mov.w	fp, #0
 8009df6:	46d0      	mov	r8, sl
 8009df8:	46d9      	mov	r9, fp
 8009dfa:	eb18 0308 	adds.w	r3, r8, r8
 8009dfe:	eb49 0409 	adc.w	r4, r9, r9
 8009e02:	4698      	mov	r8, r3
 8009e04:	46a1      	mov	r9, r4
 8009e06:	eb18 080a 	adds.w	r8, r8, sl
 8009e0a:	eb49 090b 	adc.w	r9, r9, fp
 8009e0e:	f04f 0100 	mov.w	r1, #0
 8009e12:	f04f 0200 	mov.w	r2, #0
 8009e16:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009e1a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009e1e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009e22:	4688      	mov	r8, r1
 8009e24:	4691      	mov	r9, r2
 8009e26:	eb1a 0508 	adds.w	r5, sl, r8
 8009e2a:	eb4b 0609 	adc.w	r6, fp, r9
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	685b      	ldr	r3, [r3, #4]
 8009e32:	4619      	mov	r1, r3
 8009e34:	f04f 0200 	mov.w	r2, #0
 8009e38:	f04f 0300 	mov.w	r3, #0
 8009e3c:	f04f 0400 	mov.w	r4, #0
 8009e40:	0094      	lsls	r4, r2, #2
 8009e42:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009e46:	008b      	lsls	r3, r1, #2
 8009e48:	461a      	mov	r2, r3
 8009e4a:	4623      	mov	r3, r4
 8009e4c:	4628      	mov	r0, r5
 8009e4e:	4631      	mov	r1, r6
 8009e50:	f7f6 fa26 	bl	80002a0 <__aeabi_uldivmod>
 8009e54:	4603      	mov	r3, r0
 8009e56:	460c      	mov	r4, r1
 8009e58:	461a      	mov	r2, r3
 8009e5a:	4b50      	ldr	r3, [pc, #320]	; (8009f9c <UART_SetConfig+0x6f4>)
 8009e5c:	fba3 2302 	umull	r2, r3, r3, r2
 8009e60:	095b      	lsrs	r3, r3, #5
 8009e62:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	469b      	mov	fp, r3
 8009e6a:	f04f 0c00 	mov.w	ip, #0
 8009e6e:	46d9      	mov	r9, fp
 8009e70:	46e2      	mov	sl, ip
 8009e72:	eb19 0309 	adds.w	r3, r9, r9
 8009e76:	eb4a 040a 	adc.w	r4, sl, sl
 8009e7a:	4699      	mov	r9, r3
 8009e7c:	46a2      	mov	sl, r4
 8009e7e:	eb19 090b 	adds.w	r9, r9, fp
 8009e82:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009e86:	f04f 0100 	mov.w	r1, #0
 8009e8a:	f04f 0200 	mov.w	r2, #0
 8009e8e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009e92:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009e96:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009e9a:	4689      	mov	r9, r1
 8009e9c:	4692      	mov	sl, r2
 8009e9e:	eb1b 0509 	adds.w	r5, fp, r9
 8009ea2:	eb4c 060a 	adc.w	r6, ip, sl
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	685b      	ldr	r3, [r3, #4]
 8009eaa:	4619      	mov	r1, r3
 8009eac:	f04f 0200 	mov.w	r2, #0
 8009eb0:	f04f 0300 	mov.w	r3, #0
 8009eb4:	f04f 0400 	mov.w	r4, #0
 8009eb8:	0094      	lsls	r4, r2, #2
 8009eba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009ebe:	008b      	lsls	r3, r1, #2
 8009ec0:	461a      	mov	r2, r3
 8009ec2:	4623      	mov	r3, r4
 8009ec4:	4628      	mov	r0, r5
 8009ec6:	4631      	mov	r1, r6
 8009ec8:	f7f6 f9ea 	bl	80002a0 <__aeabi_uldivmod>
 8009ecc:	4603      	mov	r3, r0
 8009ece:	460c      	mov	r4, r1
 8009ed0:	461a      	mov	r2, r3
 8009ed2:	4b32      	ldr	r3, [pc, #200]	; (8009f9c <UART_SetConfig+0x6f4>)
 8009ed4:	fba3 1302 	umull	r1, r3, r3, r2
 8009ed8:	095b      	lsrs	r3, r3, #5
 8009eda:	2164      	movs	r1, #100	; 0x64
 8009edc:	fb01 f303 	mul.w	r3, r1, r3
 8009ee0:	1ad3      	subs	r3, r2, r3
 8009ee2:	011b      	lsls	r3, r3, #4
 8009ee4:	3332      	adds	r3, #50	; 0x32
 8009ee6:	4a2d      	ldr	r2, [pc, #180]	; (8009f9c <UART_SetConfig+0x6f4>)
 8009ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8009eec:	095b      	lsrs	r3, r3, #5
 8009eee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009ef2:	4498      	add	r8, r3
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	469b      	mov	fp, r3
 8009ef8:	f04f 0c00 	mov.w	ip, #0
 8009efc:	46d9      	mov	r9, fp
 8009efe:	46e2      	mov	sl, ip
 8009f00:	eb19 0309 	adds.w	r3, r9, r9
 8009f04:	eb4a 040a 	adc.w	r4, sl, sl
 8009f08:	4699      	mov	r9, r3
 8009f0a:	46a2      	mov	sl, r4
 8009f0c:	eb19 090b 	adds.w	r9, r9, fp
 8009f10:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009f14:	f04f 0100 	mov.w	r1, #0
 8009f18:	f04f 0200 	mov.w	r2, #0
 8009f1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009f20:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009f24:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009f28:	4689      	mov	r9, r1
 8009f2a:	4692      	mov	sl, r2
 8009f2c:	eb1b 0509 	adds.w	r5, fp, r9
 8009f30:	eb4c 060a 	adc.w	r6, ip, sl
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	685b      	ldr	r3, [r3, #4]
 8009f38:	4619      	mov	r1, r3
 8009f3a:	f04f 0200 	mov.w	r2, #0
 8009f3e:	f04f 0300 	mov.w	r3, #0
 8009f42:	f04f 0400 	mov.w	r4, #0
 8009f46:	0094      	lsls	r4, r2, #2
 8009f48:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009f4c:	008b      	lsls	r3, r1, #2
 8009f4e:	461a      	mov	r2, r3
 8009f50:	4623      	mov	r3, r4
 8009f52:	4628      	mov	r0, r5
 8009f54:	4631      	mov	r1, r6
 8009f56:	f7f6 f9a3 	bl	80002a0 <__aeabi_uldivmod>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	460c      	mov	r4, r1
 8009f5e:	461a      	mov	r2, r3
 8009f60:	4b0e      	ldr	r3, [pc, #56]	; (8009f9c <UART_SetConfig+0x6f4>)
 8009f62:	fba3 1302 	umull	r1, r3, r3, r2
 8009f66:	095b      	lsrs	r3, r3, #5
 8009f68:	2164      	movs	r1, #100	; 0x64
 8009f6a:	fb01 f303 	mul.w	r3, r1, r3
 8009f6e:	1ad3      	subs	r3, r2, r3
 8009f70:	011b      	lsls	r3, r3, #4
 8009f72:	3332      	adds	r3, #50	; 0x32
 8009f74:	4a09      	ldr	r2, [pc, #36]	; (8009f9c <UART_SetConfig+0x6f4>)
 8009f76:	fba2 2303 	umull	r2, r3, r2, r3
 8009f7a:	095b      	lsrs	r3, r3, #5
 8009f7c:	f003 020f 	and.w	r2, r3, #15
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	4442      	add	r2, r8
 8009f86:	609a      	str	r2, [r3, #8]
}
 8009f88:	e7ff      	b.n	8009f8a <UART_SetConfig+0x6e2>
 8009f8a:	bf00      	nop
 8009f8c:	3714      	adds	r7, #20
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f94:	40011000 	.word	0x40011000
 8009f98:	40011400 	.word	0x40011400
 8009f9c:	51eb851f 	.word	0x51eb851f

08009fa0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009fa0:	b084      	sub	sp, #16
 8009fa2:	b580      	push	{r7, lr}
 8009fa4:	b084      	sub	sp, #16
 8009fa6:	af00      	add	r7, sp, #0
 8009fa8:	6078      	str	r0, [r7, #4]
 8009faa:	f107 001c 	add.w	r0, r7, #28
 8009fae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fb4:	2b01      	cmp	r3, #1
 8009fb6:	d122      	bne.n	8009ffe <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fbc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	68db      	ldr	r3, [r3, #12]
 8009fc8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009fcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009fd0:	687a      	ldr	r2, [r7, #4]
 8009fd2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	68db      	ldr	r3, [r3, #12]
 8009fd8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009fe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fe2:	2b01      	cmp	r3, #1
 8009fe4:	d105      	bne.n	8009ff2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	68db      	ldr	r3, [r3, #12]
 8009fea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f001 fac6 	bl	800b584 <USB_CoreReset>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	73fb      	strb	r3, [r7, #15]
 8009ffc:	e01a      	b.n	800a034 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	68db      	ldr	r3, [r3, #12]
 800a002:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f001 faba 	bl	800b584 <USB_CoreReset>
 800a010:	4603      	mov	r3, r0
 800a012:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a014:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a016:	2b00      	cmp	r3, #0
 800a018:	d106      	bne.n	800a028 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a01e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	639a      	str	r2, [r3, #56]	; 0x38
 800a026:	e005      	b.n	800a034 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a02c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a036:	2b01      	cmp	r3, #1
 800a038:	d10b      	bne.n	800a052 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	689b      	ldr	r3, [r3, #8]
 800a03e:	f043 0206 	orr.w	r2, r3, #6
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	689b      	ldr	r3, [r3, #8]
 800a04a:	f043 0220 	orr.w	r2, r3, #32
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a052:	7bfb      	ldrb	r3, [r7, #15]
}
 800a054:	4618      	mov	r0, r3
 800a056:	3710      	adds	r7, #16
 800a058:	46bd      	mov	sp, r7
 800a05a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a05e:	b004      	add	sp, #16
 800a060:	4770      	bx	lr
	...

0800a064 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a064:	b480      	push	{r7}
 800a066:	b087      	sub	sp, #28
 800a068:	af00      	add	r7, sp, #0
 800a06a:	60f8      	str	r0, [r7, #12]
 800a06c:	60b9      	str	r1, [r7, #8]
 800a06e:	4613      	mov	r3, r2
 800a070:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a072:	79fb      	ldrb	r3, [r7, #7]
 800a074:	2b02      	cmp	r3, #2
 800a076:	d165      	bne.n	800a144 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	4a41      	ldr	r2, [pc, #260]	; (800a180 <USB_SetTurnaroundTime+0x11c>)
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d906      	bls.n	800a08e <USB_SetTurnaroundTime+0x2a>
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	4a40      	ldr	r2, [pc, #256]	; (800a184 <USB_SetTurnaroundTime+0x120>)
 800a084:	4293      	cmp	r3, r2
 800a086:	d802      	bhi.n	800a08e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a088:	230f      	movs	r3, #15
 800a08a:	617b      	str	r3, [r7, #20]
 800a08c:	e062      	b.n	800a154 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	4a3c      	ldr	r2, [pc, #240]	; (800a184 <USB_SetTurnaroundTime+0x120>)
 800a092:	4293      	cmp	r3, r2
 800a094:	d906      	bls.n	800a0a4 <USB_SetTurnaroundTime+0x40>
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	4a3b      	ldr	r2, [pc, #236]	; (800a188 <USB_SetTurnaroundTime+0x124>)
 800a09a:	4293      	cmp	r3, r2
 800a09c:	d802      	bhi.n	800a0a4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a09e:	230e      	movs	r3, #14
 800a0a0:	617b      	str	r3, [r7, #20]
 800a0a2:	e057      	b.n	800a154 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	4a38      	ldr	r2, [pc, #224]	; (800a188 <USB_SetTurnaroundTime+0x124>)
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	d906      	bls.n	800a0ba <USB_SetTurnaroundTime+0x56>
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	4a37      	ldr	r2, [pc, #220]	; (800a18c <USB_SetTurnaroundTime+0x128>)
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	d802      	bhi.n	800a0ba <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a0b4:	230d      	movs	r3, #13
 800a0b6:	617b      	str	r3, [r7, #20]
 800a0b8:	e04c      	b.n	800a154 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	4a33      	ldr	r2, [pc, #204]	; (800a18c <USB_SetTurnaroundTime+0x128>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d906      	bls.n	800a0d0 <USB_SetTurnaroundTime+0x6c>
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	4a32      	ldr	r2, [pc, #200]	; (800a190 <USB_SetTurnaroundTime+0x12c>)
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	d802      	bhi.n	800a0d0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a0ca:	230c      	movs	r3, #12
 800a0cc:	617b      	str	r3, [r7, #20]
 800a0ce:	e041      	b.n	800a154 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	4a2f      	ldr	r2, [pc, #188]	; (800a190 <USB_SetTurnaroundTime+0x12c>)
 800a0d4:	4293      	cmp	r3, r2
 800a0d6:	d906      	bls.n	800a0e6 <USB_SetTurnaroundTime+0x82>
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	4a2e      	ldr	r2, [pc, #184]	; (800a194 <USB_SetTurnaroundTime+0x130>)
 800a0dc:	4293      	cmp	r3, r2
 800a0de:	d802      	bhi.n	800a0e6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a0e0:	230b      	movs	r3, #11
 800a0e2:	617b      	str	r3, [r7, #20]
 800a0e4:	e036      	b.n	800a154 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	4a2a      	ldr	r2, [pc, #168]	; (800a194 <USB_SetTurnaroundTime+0x130>)
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	d906      	bls.n	800a0fc <USB_SetTurnaroundTime+0x98>
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	4a29      	ldr	r2, [pc, #164]	; (800a198 <USB_SetTurnaroundTime+0x134>)
 800a0f2:	4293      	cmp	r3, r2
 800a0f4:	d802      	bhi.n	800a0fc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a0f6:	230a      	movs	r3, #10
 800a0f8:	617b      	str	r3, [r7, #20]
 800a0fa:	e02b      	b.n	800a154 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	4a26      	ldr	r2, [pc, #152]	; (800a198 <USB_SetTurnaroundTime+0x134>)
 800a100:	4293      	cmp	r3, r2
 800a102:	d906      	bls.n	800a112 <USB_SetTurnaroundTime+0xae>
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	4a25      	ldr	r2, [pc, #148]	; (800a19c <USB_SetTurnaroundTime+0x138>)
 800a108:	4293      	cmp	r3, r2
 800a10a:	d802      	bhi.n	800a112 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a10c:	2309      	movs	r3, #9
 800a10e:	617b      	str	r3, [r7, #20]
 800a110:	e020      	b.n	800a154 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	4a21      	ldr	r2, [pc, #132]	; (800a19c <USB_SetTurnaroundTime+0x138>)
 800a116:	4293      	cmp	r3, r2
 800a118:	d906      	bls.n	800a128 <USB_SetTurnaroundTime+0xc4>
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	4a20      	ldr	r2, [pc, #128]	; (800a1a0 <USB_SetTurnaroundTime+0x13c>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d802      	bhi.n	800a128 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a122:	2308      	movs	r3, #8
 800a124:	617b      	str	r3, [r7, #20]
 800a126:	e015      	b.n	800a154 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	4a1d      	ldr	r2, [pc, #116]	; (800a1a0 <USB_SetTurnaroundTime+0x13c>)
 800a12c:	4293      	cmp	r3, r2
 800a12e:	d906      	bls.n	800a13e <USB_SetTurnaroundTime+0xda>
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	4a1c      	ldr	r2, [pc, #112]	; (800a1a4 <USB_SetTurnaroundTime+0x140>)
 800a134:	4293      	cmp	r3, r2
 800a136:	d802      	bhi.n	800a13e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a138:	2307      	movs	r3, #7
 800a13a:	617b      	str	r3, [r7, #20]
 800a13c:	e00a      	b.n	800a154 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a13e:	2306      	movs	r3, #6
 800a140:	617b      	str	r3, [r7, #20]
 800a142:	e007      	b.n	800a154 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a144:	79fb      	ldrb	r3, [r7, #7]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d102      	bne.n	800a150 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a14a:	2309      	movs	r3, #9
 800a14c:	617b      	str	r3, [r7, #20]
 800a14e:	e001      	b.n	800a154 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a150:	2309      	movs	r3, #9
 800a152:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	68db      	ldr	r3, [r3, #12]
 800a158:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	68da      	ldr	r2, [r3, #12]
 800a164:	697b      	ldr	r3, [r7, #20]
 800a166:	029b      	lsls	r3, r3, #10
 800a168:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a16c:	431a      	orrs	r2, r3
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a172:	2300      	movs	r3, #0
}
 800a174:	4618      	mov	r0, r3
 800a176:	371c      	adds	r7, #28
 800a178:	46bd      	mov	sp, r7
 800a17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17e:	4770      	bx	lr
 800a180:	00d8acbf 	.word	0x00d8acbf
 800a184:	00e4e1bf 	.word	0x00e4e1bf
 800a188:	00f423ff 	.word	0x00f423ff
 800a18c:	0106737f 	.word	0x0106737f
 800a190:	011a499f 	.word	0x011a499f
 800a194:	01312cff 	.word	0x01312cff
 800a198:	014ca43f 	.word	0x014ca43f
 800a19c:	016e35ff 	.word	0x016e35ff
 800a1a0:	01a6ab1f 	.word	0x01a6ab1f
 800a1a4:	01e847ff 	.word	0x01e847ff

0800a1a8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b083      	sub	sp, #12
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	689b      	ldr	r3, [r3, #8]
 800a1b4:	f043 0201 	orr.w	r2, r3, #1
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a1bc:	2300      	movs	r3, #0
}
 800a1be:	4618      	mov	r0, r3
 800a1c0:	370c      	adds	r7, #12
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c8:	4770      	bx	lr

0800a1ca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a1ca:	b480      	push	{r7}
 800a1cc:	b083      	sub	sp, #12
 800a1ce:	af00      	add	r7, sp, #0
 800a1d0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	689b      	ldr	r3, [r3, #8]
 800a1d6:	f023 0201 	bic.w	r2, r3, #1
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a1de:	2300      	movs	r3, #0
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	370c      	adds	r7, #12
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ea:	4770      	bx	lr

0800a1ec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b082      	sub	sp, #8
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
 800a1f4:	460b      	mov	r3, r1
 800a1f6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	68db      	ldr	r3, [r3, #12]
 800a1fc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a204:	78fb      	ldrb	r3, [r7, #3]
 800a206:	2b01      	cmp	r3, #1
 800a208:	d106      	bne.n	800a218 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	68db      	ldr	r3, [r3, #12]
 800a20e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	60da      	str	r2, [r3, #12]
 800a216:	e00b      	b.n	800a230 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800a218:	78fb      	ldrb	r3, [r7, #3]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d106      	bne.n	800a22c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	68db      	ldr	r3, [r3, #12]
 800a222:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	60da      	str	r2, [r3, #12]
 800a22a:	e001      	b.n	800a230 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800a22c:	2301      	movs	r3, #1
 800a22e:	e003      	b.n	800a238 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800a230:	2032      	movs	r0, #50	; 0x32
 800a232:	f7f8 f961 	bl	80024f8 <HAL_Delay>

  return HAL_OK;
 800a236:	2300      	movs	r3, #0
}
 800a238:	4618      	mov	r0, r3
 800a23a:	3708      	adds	r7, #8
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}

0800a240 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a240:	b084      	sub	sp, #16
 800a242:	b580      	push	{r7, lr}
 800a244:	b086      	sub	sp, #24
 800a246:	af00      	add	r7, sp, #0
 800a248:	6078      	str	r0, [r7, #4]
 800a24a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a24e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a252:	2300      	movs	r3, #0
 800a254:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a25a:	2300      	movs	r3, #0
 800a25c:	613b      	str	r3, [r7, #16]
 800a25e:	e009      	b.n	800a274 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a260:	687a      	ldr	r2, [r7, #4]
 800a262:	693b      	ldr	r3, [r7, #16]
 800a264:	3340      	adds	r3, #64	; 0x40
 800a266:	009b      	lsls	r3, r3, #2
 800a268:	4413      	add	r3, r2
 800a26a:	2200      	movs	r2, #0
 800a26c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a26e:	693b      	ldr	r3, [r7, #16]
 800a270:	3301      	adds	r3, #1
 800a272:	613b      	str	r3, [r7, #16]
 800a274:	693b      	ldr	r3, [r7, #16]
 800a276:	2b0e      	cmp	r3, #14
 800a278:	d9f2      	bls.n	800a260 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a27a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d11c      	bne.n	800a2ba <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a286:	685b      	ldr	r3, [r3, #4]
 800a288:	68fa      	ldr	r2, [r7, #12]
 800a28a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a28e:	f043 0302 	orr.w	r3, r3, #2
 800a292:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a298:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2a4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2b0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	639a      	str	r2, [r3, #56]	; 0x38
 800a2b8:	e00b      	b.n	800a2d2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2be:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2ca:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a2d8:	461a      	mov	r2, r3
 800a2da:	2300      	movs	r3, #0
 800a2dc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2e4:	4619      	mov	r1, r3
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2ec:	461a      	mov	r2, r3
 800a2ee:	680b      	ldr	r3, [r1, #0]
 800a2f0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a2f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2f4:	2b01      	cmp	r3, #1
 800a2f6:	d10c      	bne.n	800a312 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a2f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d104      	bne.n	800a308 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a2fe:	2100      	movs	r1, #0
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f000 f949 	bl	800a598 <USB_SetDevSpeed>
 800a306:	e008      	b.n	800a31a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a308:	2101      	movs	r1, #1
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f000 f944 	bl	800a598 <USB_SetDevSpeed>
 800a310:	e003      	b.n	800a31a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a312:	2103      	movs	r1, #3
 800a314:	6878      	ldr	r0, [r7, #4]
 800a316:	f000 f93f 	bl	800a598 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a31a:	2110      	movs	r1, #16
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	f000 f8f3 	bl	800a508 <USB_FlushTxFifo>
 800a322:	4603      	mov	r3, r0
 800a324:	2b00      	cmp	r3, #0
 800a326:	d001      	beq.n	800a32c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800a328:	2301      	movs	r3, #1
 800a32a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f000 f911 	bl	800a554 <USB_FlushRxFifo>
 800a332:	4603      	mov	r3, r0
 800a334:	2b00      	cmp	r3, #0
 800a336:	d001      	beq.n	800a33c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800a338:	2301      	movs	r3, #1
 800a33a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a342:	461a      	mov	r2, r3
 800a344:	2300      	movs	r3, #0
 800a346:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a34e:	461a      	mov	r2, r3
 800a350:	2300      	movs	r3, #0
 800a352:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a35a:	461a      	mov	r2, r3
 800a35c:	2300      	movs	r3, #0
 800a35e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a360:	2300      	movs	r3, #0
 800a362:	613b      	str	r3, [r7, #16]
 800a364:	e043      	b.n	800a3ee <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	015a      	lsls	r2, r3, #5
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	4413      	add	r3, r2
 800a36e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a378:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a37c:	d118      	bne.n	800a3b0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800a37e:	693b      	ldr	r3, [r7, #16]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d10a      	bne.n	800a39a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	015a      	lsls	r2, r3, #5
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	4413      	add	r3, r2
 800a38c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a390:	461a      	mov	r2, r3
 800a392:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a396:	6013      	str	r3, [r2, #0]
 800a398:	e013      	b.n	800a3c2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a39a:	693b      	ldr	r3, [r7, #16]
 800a39c:	015a      	lsls	r2, r3, #5
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	4413      	add	r3, r2
 800a3a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3a6:	461a      	mov	r2, r3
 800a3a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a3ac:	6013      	str	r3, [r2, #0]
 800a3ae:	e008      	b.n	800a3c2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a3b0:	693b      	ldr	r3, [r7, #16]
 800a3b2:	015a      	lsls	r2, r3, #5
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	4413      	add	r3, r2
 800a3b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3bc:	461a      	mov	r2, r3
 800a3be:	2300      	movs	r3, #0
 800a3c0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a3c2:	693b      	ldr	r3, [r7, #16]
 800a3c4:	015a      	lsls	r2, r3, #5
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	4413      	add	r3, r2
 800a3ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3ce:	461a      	mov	r2, r3
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a3d4:	693b      	ldr	r3, [r7, #16]
 800a3d6:	015a      	lsls	r2, r3, #5
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	4413      	add	r3, r2
 800a3dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3e0:	461a      	mov	r2, r3
 800a3e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a3e6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a3e8:	693b      	ldr	r3, [r7, #16]
 800a3ea:	3301      	adds	r3, #1
 800a3ec:	613b      	str	r3, [r7, #16]
 800a3ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f0:	693a      	ldr	r2, [r7, #16]
 800a3f2:	429a      	cmp	r2, r3
 800a3f4:	d3b7      	bcc.n	800a366 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	613b      	str	r3, [r7, #16]
 800a3fa:	e043      	b.n	800a484 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	015a      	lsls	r2, r3, #5
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	4413      	add	r3, r2
 800a404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a40e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a412:	d118      	bne.n	800a446 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800a414:	693b      	ldr	r3, [r7, #16]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d10a      	bne.n	800a430 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a41a:	693b      	ldr	r3, [r7, #16]
 800a41c:	015a      	lsls	r2, r3, #5
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	4413      	add	r3, r2
 800a422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a426:	461a      	mov	r2, r3
 800a428:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a42c:	6013      	str	r3, [r2, #0]
 800a42e:	e013      	b.n	800a458 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a430:	693b      	ldr	r3, [r7, #16]
 800a432:	015a      	lsls	r2, r3, #5
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	4413      	add	r3, r2
 800a438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a43c:	461a      	mov	r2, r3
 800a43e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a442:	6013      	str	r3, [r2, #0]
 800a444:	e008      	b.n	800a458 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a446:	693b      	ldr	r3, [r7, #16]
 800a448:	015a      	lsls	r2, r3, #5
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	4413      	add	r3, r2
 800a44e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a452:	461a      	mov	r2, r3
 800a454:	2300      	movs	r3, #0
 800a456:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a458:	693b      	ldr	r3, [r7, #16]
 800a45a:	015a      	lsls	r2, r3, #5
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	4413      	add	r3, r2
 800a460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a464:	461a      	mov	r2, r3
 800a466:	2300      	movs	r3, #0
 800a468:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a46a:	693b      	ldr	r3, [r7, #16]
 800a46c:	015a      	lsls	r2, r3, #5
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	4413      	add	r3, r2
 800a472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a476:	461a      	mov	r2, r3
 800a478:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a47c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a47e:	693b      	ldr	r3, [r7, #16]
 800a480:	3301      	adds	r3, #1
 800a482:	613b      	str	r3, [r7, #16]
 800a484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a486:	693a      	ldr	r2, [r7, #16]
 800a488:	429a      	cmp	r2, r3
 800a48a:	d3b7      	bcc.n	800a3fc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a492:	691b      	ldr	r3, [r3, #16]
 800a494:	68fa      	ldr	r2, [r7, #12]
 800a496:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a49a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a49e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a4ac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a4ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d105      	bne.n	800a4c0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	699b      	ldr	r3, [r3, #24]
 800a4b8:	f043 0210 	orr.w	r2, r3, #16
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	699a      	ldr	r2, [r3, #24]
 800a4c4:	4b0f      	ldr	r3, [pc, #60]	; (800a504 <USB_DevInit+0x2c4>)
 800a4c6:	4313      	orrs	r3, r2
 800a4c8:	687a      	ldr	r2, [r7, #4]
 800a4ca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a4cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d005      	beq.n	800a4de <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	699b      	ldr	r3, [r3, #24]
 800a4d6:	f043 0208 	orr.w	r2, r3, #8
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a4de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4e0:	2b01      	cmp	r3, #1
 800a4e2:	d107      	bne.n	800a4f4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	699b      	ldr	r3, [r3, #24]
 800a4e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a4ec:	f043 0304 	orr.w	r3, r3, #4
 800a4f0:	687a      	ldr	r2, [r7, #4]
 800a4f2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a4f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3718      	adds	r7, #24
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a500:	b004      	add	sp, #16
 800a502:	4770      	bx	lr
 800a504:	803c3800 	.word	0x803c3800

0800a508 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a508:	b480      	push	{r7}
 800a50a:	b085      	sub	sp, #20
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
 800a510:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800a512:	2300      	movs	r3, #0
 800a514:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	019b      	lsls	r3, r3, #6
 800a51a:	f043 0220 	orr.w	r2, r3, #32
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	3301      	adds	r3, #1
 800a526:	60fb      	str	r3, [r7, #12]
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	4a09      	ldr	r2, [pc, #36]	; (800a550 <USB_FlushTxFifo+0x48>)
 800a52c:	4293      	cmp	r3, r2
 800a52e:	d901      	bls.n	800a534 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a530:	2303      	movs	r3, #3
 800a532:	e006      	b.n	800a542 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	691b      	ldr	r3, [r3, #16]
 800a538:	f003 0320 	and.w	r3, r3, #32
 800a53c:	2b20      	cmp	r3, #32
 800a53e:	d0f0      	beq.n	800a522 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a540:	2300      	movs	r3, #0
}
 800a542:	4618      	mov	r0, r3
 800a544:	3714      	adds	r7, #20
 800a546:	46bd      	mov	sp, r7
 800a548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54c:	4770      	bx	lr
 800a54e:	bf00      	nop
 800a550:	00030d40 	.word	0x00030d40

0800a554 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a554:	b480      	push	{r7}
 800a556:	b085      	sub	sp, #20
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800a55c:	2300      	movs	r3, #0
 800a55e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2210      	movs	r2, #16
 800a564:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	3301      	adds	r3, #1
 800a56a:	60fb      	str	r3, [r7, #12]
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	4a09      	ldr	r2, [pc, #36]	; (800a594 <USB_FlushRxFifo+0x40>)
 800a570:	4293      	cmp	r3, r2
 800a572:	d901      	bls.n	800a578 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800a574:	2303      	movs	r3, #3
 800a576:	e006      	b.n	800a586 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	691b      	ldr	r3, [r3, #16]
 800a57c:	f003 0310 	and.w	r3, r3, #16
 800a580:	2b10      	cmp	r3, #16
 800a582:	d0f0      	beq.n	800a566 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a584:	2300      	movs	r3, #0
}
 800a586:	4618      	mov	r0, r3
 800a588:	3714      	adds	r7, #20
 800a58a:	46bd      	mov	sp, r7
 800a58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a590:	4770      	bx	lr
 800a592:	bf00      	nop
 800a594:	00030d40 	.word	0x00030d40

0800a598 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a598:	b480      	push	{r7}
 800a59a:	b085      	sub	sp, #20
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
 800a5a0:	460b      	mov	r3, r1
 800a5a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5ae:	681a      	ldr	r2, [r3, #0]
 800a5b0:	78fb      	ldrb	r3, [r7, #3]
 800a5b2:	68f9      	ldr	r1, [r7, #12]
 800a5b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a5b8:	4313      	orrs	r3, r2
 800a5ba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a5bc:	2300      	movs	r3, #0
}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	3714      	adds	r7, #20
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c8:	4770      	bx	lr

0800a5ca <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a5ca:	b480      	push	{r7}
 800a5cc:	b087      	sub	sp, #28
 800a5ce:	af00      	add	r7, sp, #0
 800a5d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a5d6:	693b      	ldr	r3, [r7, #16]
 800a5d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5dc:	689b      	ldr	r3, [r3, #8]
 800a5de:	f003 0306 	and.w	r3, r3, #6
 800a5e2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d102      	bne.n	800a5f0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	75fb      	strb	r3, [r7, #23]
 800a5ee:	e00a      	b.n	800a606 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	2b02      	cmp	r3, #2
 800a5f4:	d002      	beq.n	800a5fc <USB_GetDevSpeed+0x32>
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	2b06      	cmp	r3, #6
 800a5fa:	d102      	bne.n	800a602 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a5fc:	2302      	movs	r3, #2
 800a5fe:	75fb      	strb	r3, [r7, #23]
 800a600:	e001      	b.n	800a606 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a602:	230f      	movs	r3, #15
 800a604:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a606:	7dfb      	ldrb	r3, [r7, #23]
}
 800a608:	4618      	mov	r0, r3
 800a60a:	371c      	adds	r7, #28
 800a60c:	46bd      	mov	sp, r7
 800a60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a612:	4770      	bx	lr

0800a614 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a614:	b480      	push	{r7}
 800a616:	b085      	sub	sp, #20
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
 800a61c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	781b      	ldrb	r3, [r3, #0]
 800a626:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	785b      	ldrb	r3, [r3, #1]
 800a62c:	2b01      	cmp	r3, #1
 800a62e:	d13a      	bne.n	800a6a6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a636:	69da      	ldr	r2, [r3, #28]
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	781b      	ldrb	r3, [r3, #0]
 800a63c:	f003 030f 	and.w	r3, r3, #15
 800a640:	2101      	movs	r1, #1
 800a642:	fa01 f303 	lsl.w	r3, r1, r3
 800a646:	b29b      	uxth	r3, r3
 800a648:	68f9      	ldr	r1, [r7, #12]
 800a64a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a64e:	4313      	orrs	r3, r2
 800a650:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	015a      	lsls	r2, r3, #5
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	4413      	add	r3, r2
 800a65a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a664:	2b00      	cmp	r3, #0
 800a666:	d155      	bne.n	800a714 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a668:	68bb      	ldr	r3, [r7, #8]
 800a66a:	015a      	lsls	r2, r3, #5
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	4413      	add	r3, r2
 800a670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a674:	681a      	ldr	r2, [r3, #0]
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	689b      	ldr	r3, [r3, #8]
 800a67a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	78db      	ldrb	r3, [r3, #3]
 800a682:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a684:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a686:	68bb      	ldr	r3, [r7, #8]
 800a688:	059b      	lsls	r3, r3, #22
 800a68a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a68c:	4313      	orrs	r3, r2
 800a68e:	68ba      	ldr	r2, [r7, #8]
 800a690:	0151      	lsls	r1, r2, #5
 800a692:	68fa      	ldr	r2, [r7, #12]
 800a694:	440a      	add	r2, r1
 800a696:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a69a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a69e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a6a2:	6013      	str	r3, [r2, #0]
 800a6a4:	e036      	b.n	800a714 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6ac:	69da      	ldr	r2, [r3, #28]
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	781b      	ldrb	r3, [r3, #0]
 800a6b2:	f003 030f 	and.w	r3, r3, #15
 800a6b6:	2101      	movs	r1, #1
 800a6b8:	fa01 f303 	lsl.w	r3, r1, r3
 800a6bc:	041b      	lsls	r3, r3, #16
 800a6be:	68f9      	ldr	r1, [r7, #12]
 800a6c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a6c4:	4313      	orrs	r3, r2
 800a6c6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	015a      	lsls	r2, r3, #5
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	4413      	add	r3, r2
 800a6d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d11a      	bne.n	800a714 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	015a      	lsls	r2, r3, #5
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	4413      	add	r3, r2
 800a6e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6ea:	681a      	ldr	r2, [r3, #0]
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	689b      	ldr	r3, [r3, #8]
 800a6f0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	78db      	ldrb	r3, [r3, #3]
 800a6f8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a6fa:	430b      	orrs	r3, r1
 800a6fc:	4313      	orrs	r3, r2
 800a6fe:	68ba      	ldr	r2, [r7, #8]
 800a700:	0151      	lsls	r1, r2, #5
 800a702:	68fa      	ldr	r2, [r7, #12]
 800a704:	440a      	add	r2, r1
 800a706:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a70a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a70e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a712:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a714:	2300      	movs	r3, #0
}
 800a716:	4618      	mov	r0, r3
 800a718:	3714      	adds	r7, #20
 800a71a:	46bd      	mov	sp, r7
 800a71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a720:	4770      	bx	lr
	...

0800a724 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a724:	b480      	push	{r7}
 800a726:	b085      	sub	sp, #20
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	781b      	ldrb	r3, [r3, #0]
 800a736:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	785b      	ldrb	r3, [r3, #1]
 800a73c:	2b01      	cmp	r3, #1
 800a73e:	d161      	bne.n	800a804 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	015a      	lsls	r2, r3, #5
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	4413      	add	r3, r2
 800a748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a752:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a756:	d11f      	bne.n	800a798 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	015a      	lsls	r2, r3, #5
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	4413      	add	r3, r2
 800a760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	68ba      	ldr	r2, [r7, #8]
 800a768:	0151      	lsls	r1, r2, #5
 800a76a:	68fa      	ldr	r2, [r7, #12]
 800a76c:	440a      	add	r2, r1
 800a76e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a772:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a776:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	015a      	lsls	r2, r3, #5
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	4413      	add	r3, r2
 800a780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	68ba      	ldr	r2, [r7, #8]
 800a788:	0151      	lsls	r1, r2, #5
 800a78a:	68fa      	ldr	r2, [r7, #12]
 800a78c:	440a      	add	r2, r1
 800a78e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a792:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a796:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a79e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	781b      	ldrb	r3, [r3, #0]
 800a7a4:	f003 030f 	and.w	r3, r3, #15
 800a7a8:	2101      	movs	r1, #1
 800a7aa:	fa01 f303 	lsl.w	r3, r1, r3
 800a7ae:	b29b      	uxth	r3, r3
 800a7b0:	43db      	mvns	r3, r3
 800a7b2:	68f9      	ldr	r1, [r7, #12]
 800a7b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a7b8:	4013      	ands	r3, r2
 800a7ba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7c2:	69da      	ldr	r2, [r3, #28]
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	781b      	ldrb	r3, [r3, #0]
 800a7c8:	f003 030f 	and.w	r3, r3, #15
 800a7cc:	2101      	movs	r1, #1
 800a7ce:	fa01 f303 	lsl.w	r3, r1, r3
 800a7d2:	b29b      	uxth	r3, r3
 800a7d4:	43db      	mvns	r3, r3
 800a7d6:	68f9      	ldr	r1, [r7, #12]
 800a7d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a7dc:	4013      	ands	r3, r2
 800a7de:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a7e0:	68bb      	ldr	r3, [r7, #8]
 800a7e2:	015a      	lsls	r2, r3, #5
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	4413      	add	r3, r2
 800a7e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7ec:	681a      	ldr	r2, [r3, #0]
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	0159      	lsls	r1, r3, #5
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	440b      	add	r3, r1
 800a7f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7fa:	4619      	mov	r1, r3
 800a7fc:	4b35      	ldr	r3, [pc, #212]	; (800a8d4 <USB_DeactivateEndpoint+0x1b0>)
 800a7fe:	4013      	ands	r3, r2
 800a800:	600b      	str	r3, [r1, #0]
 800a802:	e060      	b.n	800a8c6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	015a      	lsls	r2, r3, #5
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	4413      	add	r3, r2
 800a80c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a816:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a81a:	d11f      	bne.n	800a85c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a81c:	68bb      	ldr	r3, [r7, #8]
 800a81e:	015a      	lsls	r2, r3, #5
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	4413      	add	r3, r2
 800a824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	68ba      	ldr	r2, [r7, #8]
 800a82c:	0151      	lsls	r1, r2, #5
 800a82e:	68fa      	ldr	r2, [r7, #12]
 800a830:	440a      	add	r2, r1
 800a832:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a836:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a83a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	015a      	lsls	r2, r3, #5
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	4413      	add	r3, r2
 800a844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	68ba      	ldr	r2, [r7, #8]
 800a84c:	0151      	lsls	r1, r2, #5
 800a84e:	68fa      	ldr	r2, [r7, #12]
 800a850:	440a      	add	r2, r1
 800a852:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a856:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a85a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a862:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	781b      	ldrb	r3, [r3, #0]
 800a868:	f003 030f 	and.w	r3, r3, #15
 800a86c:	2101      	movs	r1, #1
 800a86e:	fa01 f303 	lsl.w	r3, r1, r3
 800a872:	041b      	lsls	r3, r3, #16
 800a874:	43db      	mvns	r3, r3
 800a876:	68f9      	ldr	r1, [r7, #12]
 800a878:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a87c:	4013      	ands	r3, r2
 800a87e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a886:	69da      	ldr	r2, [r3, #28]
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	781b      	ldrb	r3, [r3, #0]
 800a88c:	f003 030f 	and.w	r3, r3, #15
 800a890:	2101      	movs	r1, #1
 800a892:	fa01 f303 	lsl.w	r3, r1, r3
 800a896:	041b      	lsls	r3, r3, #16
 800a898:	43db      	mvns	r3, r3
 800a89a:	68f9      	ldr	r1, [r7, #12]
 800a89c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a8a0:	4013      	ands	r3, r2
 800a8a2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	015a      	lsls	r2, r3, #5
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	4413      	add	r3, r2
 800a8ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8b0:	681a      	ldr	r2, [r3, #0]
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	0159      	lsls	r1, r3, #5
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	440b      	add	r3, r1
 800a8ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8be:	4619      	mov	r1, r3
 800a8c0:	4b05      	ldr	r3, [pc, #20]	; (800a8d8 <USB_DeactivateEndpoint+0x1b4>)
 800a8c2:	4013      	ands	r3, r2
 800a8c4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a8c6:	2300      	movs	r3, #0
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	3714      	adds	r7, #20
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d2:	4770      	bx	lr
 800a8d4:	ec337800 	.word	0xec337800
 800a8d8:	eff37800 	.word	0xeff37800

0800a8dc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b08a      	sub	sp, #40	; 0x28
 800a8e0:	af02      	add	r7, sp, #8
 800a8e2:	60f8      	str	r0, [r7, #12]
 800a8e4:	60b9      	str	r1, [r7, #8]
 800a8e6:	4613      	mov	r3, r2
 800a8e8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	781b      	ldrb	r3, [r3, #0]
 800a8f2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	785b      	ldrb	r3, [r3, #1]
 800a8f8:	2b01      	cmp	r3, #1
 800a8fa:	f040 815c 	bne.w	800abb6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a8fe:	68bb      	ldr	r3, [r7, #8]
 800a900:	695b      	ldr	r3, [r3, #20]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d132      	bne.n	800a96c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a906:	69bb      	ldr	r3, [r7, #24]
 800a908:	015a      	lsls	r2, r3, #5
 800a90a:	69fb      	ldr	r3, [r7, #28]
 800a90c:	4413      	add	r3, r2
 800a90e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a912:	691b      	ldr	r3, [r3, #16]
 800a914:	69ba      	ldr	r2, [r7, #24]
 800a916:	0151      	lsls	r1, r2, #5
 800a918:	69fa      	ldr	r2, [r7, #28]
 800a91a:	440a      	add	r2, r1
 800a91c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a920:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a924:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a928:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a92a:	69bb      	ldr	r3, [r7, #24]
 800a92c:	015a      	lsls	r2, r3, #5
 800a92e:	69fb      	ldr	r3, [r7, #28]
 800a930:	4413      	add	r3, r2
 800a932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a936:	691b      	ldr	r3, [r3, #16]
 800a938:	69ba      	ldr	r2, [r7, #24]
 800a93a:	0151      	lsls	r1, r2, #5
 800a93c:	69fa      	ldr	r2, [r7, #28]
 800a93e:	440a      	add	r2, r1
 800a940:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a944:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a948:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a94a:	69bb      	ldr	r3, [r7, #24]
 800a94c:	015a      	lsls	r2, r3, #5
 800a94e:	69fb      	ldr	r3, [r7, #28]
 800a950:	4413      	add	r3, r2
 800a952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a956:	691b      	ldr	r3, [r3, #16]
 800a958:	69ba      	ldr	r2, [r7, #24]
 800a95a:	0151      	lsls	r1, r2, #5
 800a95c:	69fa      	ldr	r2, [r7, #28]
 800a95e:	440a      	add	r2, r1
 800a960:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a964:	0cdb      	lsrs	r3, r3, #19
 800a966:	04db      	lsls	r3, r3, #19
 800a968:	6113      	str	r3, [r2, #16]
 800a96a:	e074      	b.n	800aa56 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a96c:	69bb      	ldr	r3, [r7, #24]
 800a96e:	015a      	lsls	r2, r3, #5
 800a970:	69fb      	ldr	r3, [r7, #28]
 800a972:	4413      	add	r3, r2
 800a974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a978:	691b      	ldr	r3, [r3, #16]
 800a97a:	69ba      	ldr	r2, [r7, #24]
 800a97c:	0151      	lsls	r1, r2, #5
 800a97e:	69fa      	ldr	r2, [r7, #28]
 800a980:	440a      	add	r2, r1
 800a982:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a986:	0cdb      	lsrs	r3, r3, #19
 800a988:	04db      	lsls	r3, r3, #19
 800a98a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a98c:	69bb      	ldr	r3, [r7, #24]
 800a98e:	015a      	lsls	r2, r3, #5
 800a990:	69fb      	ldr	r3, [r7, #28]
 800a992:	4413      	add	r3, r2
 800a994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a998:	691b      	ldr	r3, [r3, #16]
 800a99a:	69ba      	ldr	r2, [r7, #24]
 800a99c:	0151      	lsls	r1, r2, #5
 800a99e:	69fa      	ldr	r2, [r7, #28]
 800a9a0:	440a      	add	r2, r1
 800a9a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9a6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a9aa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a9ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a9b0:	69bb      	ldr	r3, [r7, #24]
 800a9b2:	015a      	lsls	r2, r3, #5
 800a9b4:	69fb      	ldr	r3, [r7, #28]
 800a9b6:	4413      	add	r3, r2
 800a9b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9bc:	691a      	ldr	r2, [r3, #16]
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	6959      	ldr	r1, [r3, #20]
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	689b      	ldr	r3, [r3, #8]
 800a9c6:	440b      	add	r3, r1
 800a9c8:	1e59      	subs	r1, r3, #1
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	689b      	ldr	r3, [r3, #8]
 800a9ce:	fbb1 f3f3 	udiv	r3, r1, r3
 800a9d2:	04d9      	lsls	r1, r3, #19
 800a9d4:	4b9d      	ldr	r3, [pc, #628]	; (800ac4c <USB_EPStartXfer+0x370>)
 800a9d6:	400b      	ands	r3, r1
 800a9d8:	69b9      	ldr	r1, [r7, #24]
 800a9da:	0148      	lsls	r0, r1, #5
 800a9dc:	69f9      	ldr	r1, [r7, #28]
 800a9de:	4401      	add	r1, r0
 800a9e0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a9e4:	4313      	orrs	r3, r2
 800a9e6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a9e8:	69bb      	ldr	r3, [r7, #24]
 800a9ea:	015a      	lsls	r2, r3, #5
 800a9ec:	69fb      	ldr	r3, [r7, #28]
 800a9ee:	4413      	add	r3, r2
 800a9f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9f4:	691a      	ldr	r2, [r3, #16]
 800a9f6:	68bb      	ldr	r3, [r7, #8]
 800a9f8:	695b      	ldr	r3, [r3, #20]
 800a9fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a9fe:	69b9      	ldr	r1, [r7, #24]
 800aa00:	0148      	lsls	r0, r1, #5
 800aa02:	69f9      	ldr	r1, [r7, #28]
 800aa04:	4401      	add	r1, r0
 800aa06:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800aa0a:	4313      	orrs	r3, r2
 800aa0c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	78db      	ldrb	r3, [r3, #3]
 800aa12:	2b01      	cmp	r3, #1
 800aa14:	d11f      	bne.n	800aa56 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800aa16:	69bb      	ldr	r3, [r7, #24]
 800aa18:	015a      	lsls	r2, r3, #5
 800aa1a:	69fb      	ldr	r3, [r7, #28]
 800aa1c:	4413      	add	r3, r2
 800aa1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa22:	691b      	ldr	r3, [r3, #16]
 800aa24:	69ba      	ldr	r2, [r7, #24]
 800aa26:	0151      	lsls	r1, r2, #5
 800aa28:	69fa      	ldr	r2, [r7, #28]
 800aa2a:	440a      	add	r2, r1
 800aa2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa30:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800aa34:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800aa36:	69bb      	ldr	r3, [r7, #24]
 800aa38:	015a      	lsls	r2, r3, #5
 800aa3a:	69fb      	ldr	r3, [r7, #28]
 800aa3c:	4413      	add	r3, r2
 800aa3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa42:	691b      	ldr	r3, [r3, #16]
 800aa44:	69ba      	ldr	r2, [r7, #24]
 800aa46:	0151      	lsls	r1, r2, #5
 800aa48:	69fa      	ldr	r2, [r7, #28]
 800aa4a:	440a      	add	r2, r1
 800aa4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa50:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800aa54:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800aa56:	79fb      	ldrb	r3, [r7, #7]
 800aa58:	2b01      	cmp	r3, #1
 800aa5a:	d14b      	bne.n	800aaf4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	691b      	ldr	r3, [r3, #16]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d009      	beq.n	800aa78 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800aa64:	69bb      	ldr	r3, [r7, #24]
 800aa66:	015a      	lsls	r2, r3, #5
 800aa68:	69fb      	ldr	r3, [r7, #28]
 800aa6a:	4413      	add	r3, r2
 800aa6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa70:	461a      	mov	r2, r3
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	691b      	ldr	r3, [r3, #16]
 800aa76:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800aa78:	68bb      	ldr	r3, [r7, #8]
 800aa7a:	78db      	ldrb	r3, [r3, #3]
 800aa7c:	2b01      	cmp	r3, #1
 800aa7e:	d128      	bne.n	800aad2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800aa80:	69fb      	ldr	r3, [r7, #28]
 800aa82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa86:	689b      	ldr	r3, [r3, #8]
 800aa88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d110      	bne.n	800aab2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800aa90:	69bb      	ldr	r3, [r7, #24]
 800aa92:	015a      	lsls	r2, r3, #5
 800aa94:	69fb      	ldr	r3, [r7, #28]
 800aa96:	4413      	add	r3, r2
 800aa98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	69ba      	ldr	r2, [r7, #24]
 800aaa0:	0151      	lsls	r1, r2, #5
 800aaa2:	69fa      	ldr	r2, [r7, #28]
 800aaa4:	440a      	add	r2, r1
 800aaa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aaaa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800aaae:	6013      	str	r3, [r2, #0]
 800aab0:	e00f      	b.n	800aad2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800aab2:	69bb      	ldr	r3, [r7, #24]
 800aab4:	015a      	lsls	r2, r3, #5
 800aab6:	69fb      	ldr	r3, [r7, #28]
 800aab8:	4413      	add	r3, r2
 800aaba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	69ba      	ldr	r2, [r7, #24]
 800aac2:	0151      	lsls	r1, r2, #5
 800aac4:	69fa      	ldr	r2, [r7, #28]
 800aac6:	440a      	add	r2, r1
 800aac8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aacc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aad0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800aad2:	69bb      	ldr	r3, [r7, #24]
 800aad4:	015a      	lsls	r2, r3, #5
 800aad6:	69fb      	ldr	r3, [r7, #28]
 800aad8:	4413      	add	r3, r2
 800aada:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	69ba      	ldr	r2, [r7, #24]
 800aae2:	0151      	lsls	r1, r2, #5
 800aae4:	69fa      	ldr	r2, [r7, #28]
 800aae6:	440a      	add	r2, r1
 800aae8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aaec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800aaf0:	6013      	str	r3, [r2, #0]
 800aaf2:	e12f      	b.n	800ad54 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800aaf4:	69bb      	ldr	r3, [r7, #24]
 800aaf6:	015a      	lsls	r2, r3, #5
 800aaf8:	69fb      	ldr	r3, [r7, #28]
 800aafa:	4413      	add	r3, r2
 800aafc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	69ba      	ldr	r2, [r7, #24]
 800ab04:	0151      	lsls	r1, r2, #5
 800ab06:	69fa      	ldr	r2, [r7, #28]
 800ab08:	440a      	add	r2, r1
 800ab0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab0e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ab12:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	78db      	ldrb	r3, [r3, #3]
 800ab18:	2b01      	cmp	r3, #1
 800ab1a:	d015      	beq.n	800ab48 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	695b      	ldr	r3, [r3, #20]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	f000 8117 	beq.w	800ad54 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ab26:	69fb      	ldr	r3, [r7, #28]
 800ab28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab2e:	68bb      	ldr	r3, [r7, #8]
 800ab30:	781b      	ldrb	r3, [r3, #0]
 800ab32:	f003 030f 	and.w	r3, r3, #15
 800ab36:	2101      	movs	r1, #1
 800ab38:	fa01 f303 	lsl.w	r3, r1, r3
 800ab3c:	69f9      	ldr	r1, [r7, #28]
 800ab3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ab42:	4313      	orrs	r3, r2
 800ab44:	634b      	str	r3, [r1, #52]	; 0x34
 800ab46:	e105      	b.n	800ad54 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ab48:	69fb      	ldr	r3, [r7, #28]
 800ab4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab4e:	689b      	ldr	r3, [r3, #8]
 800ab50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d110      	bne.n	800ab7a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ab58:	69bb      	ldr	r3, [r7, #24]
 800ab5a:	015a      	lsls	r2, r3, #5
 800ab5c:	69fb      	ldr	r3, [r7, #28]
 800ab5e:	4413      	add	r3, r2
 800ab60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	69ba      	ldr	r2, [r7, #24]
 800ab68:	0151      	lsls	r1, r2, #5
 800ab6a:	69fa      	ldr	r2, [r7, #28]
 800ab6c:	440a      	add	r2, r1
 800ab6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab72:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ab76:	6013      	str	r3, [r2, #0]
 800ab78:	e00f      	b.n	800ab9a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ab7a:	69bb      	ldr	r3, [r7, #24]
 800ab7c:	015a      	lsls	r2, r3, #5
 800ab7e:	69fb      	ldr	r3, [r7, #28]
 800ab80:	4413      	add	r3, r2
 800ab82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	69ba      	ldr	r2, [r7, #24]
 800ab8a:	0151      	lsls	r1, r2, #5
 800ab8c:	69fa      	ldr	r2, [r7, #28]
 800ab8e:	440a      	add	r2, r1
 800ab90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab98:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800ab9a:	68bb      	ldr	r3, [r7, #8]
 800ab9c:	68d9      	ldr	r1, [r3, #12]
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	781a      	ldrb	r2, [r3, #0]
 800aba2:	68bb      	ldr	r3, [r7, #8]
 800aba4:	695b      	ldr	r3, [r3, #20]
 800aba6:	b298      	uxth	r0, r3
 800aba8:	79fb      	ldrb	r3, [r7, #7]
 800abaa:	9300      	str	r3, [sp, #0]
 800abac:	4603      	mov	r3, r0
 800abae:	68f8      	ldr	r0, [r7, #12]
 800abb0:	f000 fa2b 	bl	800b00a <USB_WritePacket>
 800abb4:	e0ce      	b.n	800ad54 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800abb6:	69bb      	ldr	r3, [r7, #24]
 800abb8:	015a      	lsls	r2, r3, #5
 800abba:	69fb      	ldr	r3, [r7, #28]
 800abbc:	4413      	add	r3, r2
 800abbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abc2:	691b      	ldr	r3, [r3, #16]
 800abc4:	69ba      	ldr	r2, [r7, #24]
 800abc6:	0151      	lsls	r1, r2, #5
 800abc8:	69fa      	ldr	r2, [r7, #28]
 800abca:	440a      	add	r2, r1
 800abcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800abd0:	0cdb      	lsrs	r3, r3, #19
 800abd2:	04db      	lsls	r3, r3, #19
 800abd4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800abd6:	69bb      	ldr	r3, [r7, #24]
 800abd8:	015a      	lsls	r2, r3, #5
 800abda:	69fb      	ldr	r3, [r7, #28]
 800abdc:	4413      	add	r3, r2
 800abde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abe2:	691b      	ldr	r3, [r3, #16]
 800abe4:	69ba      	ldr	r2, [r7, #24]
 800abe6:	0151      	lsls	r1, r2, #5
 800abe8:	69fa      	ldr	r2, [r7, #28]
 800abea:	440a      	add	r2, r1
 800abec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800abf0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800abf4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800abf8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800abfa:	68bb      	ldr	r3, [r7, #8]
 800abfc:	695b      	ldr	r3, [r3, #20]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d126      	bne.n	800ac50 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ac02:	69bb      	ldr	r3, [r7, #24]
 800ac04:	015a      	lsls	r2, r3, #5
 800ac06:	69fb      	ldr	r3, [r7, #28]
 800ac08:	4413      	add	r3, r2
 800ac0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac0e:	691a      	ldr	r2, [r3, #16]
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	689b      	ldr	r3, [r3, #8]
 800ac14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ac18:	69b9      	ldr	r1, [r7, #24]
 800ac1a:	0148      	lsls	r0, r1, #5
 800ac1c:	69f9      	ldr	r1, [r7, #28]
 800ac1e:	4401      	add	r1, r0
 800ac20:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ac24:	4313      	orrs	r3, r2
 800ac26:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ac28:	69bb      	ldr	r3, [r7, #24]
 800ac2a:	015a      	lsls	r2, r3, #5
 800ac2c:	69fb      	ldr	r3, [r7, #28]
 800ac2e:	4413      	add	r3, r2
 800ac30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac34:	691b      	ldr	r3, [r3, #16]
 800ac36:	69ba      	ldr	r2, [r7, #24]
 800ac38:	0151      	lsls	r1, r2, #5
 800ac3a:	69fa      	ldr	r2, [r7, #28]
 800ac3c:	440a      	add	r2, r1
 800ac3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac42:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ac46:	6113      	str	r3, [r2, #16]
 800ac48:	e036      	b.n	800acb8 <USB_EPStartXfer+0x3dc>
 800ac4a:	bf00      	nop
 800ac4c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	695a      	ldr	r2, [r3, #20]
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	689b      	ldr	r3, [r3, #8]
 800ac58:	4413      	add	r3, r2
 800ac5a:	1e5a      	subs	r2, r3, #1
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	689b      	ldr	r3, [r3, #8]
 800ac60:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac64:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ac66:	69bb      	ldr	r3, [r7, #24]
 800ac68:	015a      	lsls	r2, r3, #5
 800ac6a:	69fb      	ldr	r3, [r7, #28]
 800ac6c:	4413      	add	r3, r2
 800ac6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac72:	691a      	ldr	r2, [r3, #16]
 800ac74:	8afb      	ldrh	r3, [r7, #22]
 800ac76:	04d9      	lsls	r1, r3, #19
 800ac78:	4b39      	ldr	r3, [pc, #228]	; (800ad60 <USB_EPStartXfer+0x484>)
 800ac7a:	400b      	ands	r3, r1
 800ac7c:	69b9      	ldr	r1, [r7, #24]
 800ac7e:	0148      	lsls	r0, r1, #5
 800ac80:	69f9      	ldr	r1, [r7, #28]
 800ac82:	4401      	add	r1, r0
 800ac84:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ac88:	4313      	orrs	r3, r2
 800ac8a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800ac8c:	69bb      	ldr	r3, [r7, #24]
 800ac8e:	015a      	lsls	r2, r3, #5
 800ac90:	69fb      	ldr	r3, [r7, #28]
 800ac92:	4413      	add	r3, r2
 800ac94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac98:	691a      	ldr	r2, [r3, #16]
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	689b      	ldr	r3, [r3, #8]
 800ac9e:	8af9      	ldrh	r1, [r7, #22]
 800aca0:	fb01 f303 	mul.w	r3, r1, r3
 800aca4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aca8:	69b9      	ldr	r1, [r7, #24]
 800acaa:	0148      	lsls	r0, r1, #5
 800acac:	69f9      	ldr	r1, [r7, #28]
 800acae:	4401      	add	r1, r0
 800acb0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800acb4:	4313      	orrs	r3, r2
 800acb6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800acb8:	79fb      	ldrb	r3, [r7, #7]
 800acba:	2b01      	cmp	r3, #1
 800acbc:	d10d      	bne.n	800acda <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800acbe:	68bb      	ldr	r3, [r7, #8]
 800acc0:	68db      	ldr	r3, [r3, #12]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d009      	beq.n	800acda <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	68d9      	ldr	r1, [r3, #12]
 800acca:	69bb      	ldr	r3, [r7, #24]
 800accc:	015a      	lsls	r2, r3, #5
 800acce:	69fb      	ldr	r3, [r7, #28]
 800acd0:	4413      	add	r3, r2
 800acd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acd6:	460a      	mov	r2, r1
 800acd8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	78db      	ldrb	r3, [r3, #3]
 800acde:	2b01      	cmp	r3, #1
 800ace0:	d128      	bne.n	800ad34 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ace2:	69fb      	ldr	r3, [r7, #28]
 800ace4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ace8:	689b      	ldr	r3, [r3, #8]
 800acea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d110      	bne.n	800ad14 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800acf2:	69bb      	ldr	r3, [r7, #24]
 800acf4:	015a      	lsls	r2, r3, #5
 800acf6:	69fb      	ldr	r3, [r7, #28]
 800acf8:	4413      	add	r3, r2
 800acfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	69ba      	ldr	r2, [r7, #24]
 800ad02:	0151      	lsls	r1, r2, #5
 800ad04:	69fa      	ldr	r2, [r7, #28]
 800ad06:	440a      	add	r2, r1
 800ad08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad0c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ad10:	6013      	str	r3, [r2, #0]
 800ad12:	e00f      	b.n	800ad34 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ad14:	69bb      	ldr	r3, [r7, #24]
 800ad16:	015a      	lsls	r2, r3, #5
 800ad18:	69fb      	ldr	r3, [r7, #28]
 800ad1a:	4413      	add	r3, r2
 800ad1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	69ba      	ldr	r2, [r7, #24]
 800ad24:	0151      	lsls	r1, r2, #5
 800ad26:	69fa      	ldr	r2, [r7, #28]
 800ad28:	440a      	add	r2, r1
 800ad2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad32:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ad34:	69bb      	ldr	r3, [r7, #24]
 800ad36:	015a      	lsls	r2, r3, #5
 800ad38:	69fb      	ldr	r3, [r7, #28]
 800ad3a:	4413      	add	r3, r2
 800ad3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	69ba      	ldr	r2, [r7, #24]
 800ad44:	0151      	lsls	r1, r2, #5
 800ad46:	69fa      	ldr	r2, [r7, #28]
 800ad48:	440a      	add	r2, r1
 800ad4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad4e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ad52:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ad54:	2300      	movs	r3, #0
}
 800ad56:	4618      	mov	r0, r3
 800ad58:	3720      	adds	r7, #32
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bd80      	pop	{r7, pc}
 800ad5e:	bf00      	nop
 800ad60:	1ff80000 	.word	0x1ff80000

0800ad64 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ad64:	b480      	push	{r7}
 800ad66:	b087      	sub	sp, #28
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	60f8      	str	r0, [r7, #12]
 800ad6c:	60b9      	str	r1, [r7, #8]
 800ad6e:	4613      	mov	r3, r2
 800ad70:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800ad76:	68bb      	ldr	r3, [r7, #8]
 800ad78:	781b      	ldrb	r3, [r3, #0]
 800ad7a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	785b      	ldrb	r3, [r3, #1]
 800ad80:	2b01      	cmp	r3, #1
 800ad82:	f040 80cd 	bne.w	800af20 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ad86:	68bb      	ldr	r3, [r7, #8]
 800ad88:	695b      	ldr	r3, [r3, #20]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d132      	bne.n	800adf4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ad8e:	693b      	ldr	r3, [r7, #16]
 800ad90:	015a      	lsls	r2, r3, #5
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	4413      	add	r3, r2
 800ad96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad9a:	691b      	ldr	r3, [r3, #16]
 800ad9c:	693a      	ldr	r2, [r7, #16]
 800ad9e:	0151      	lsls	r1, r2, #5
 800ada0:	697a      	ldr	r2, [r7, #20]
 800ada2:	440a      	add	r2, r1
 800ada4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ada8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800adac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800adb0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800adb2:	693b      	ldr	r3, [r7, #16]
 800adb4:	015a      	lsls	r2, r3, #5
 800adb6:	697b      	ldr	r3, [r7, #20]
 800adb8:	4413      	add	r3, r2
 800adba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adbe:	691b      	ldr	r3, [r3, #16]
 800adc0:	693a      	ldr	r2, [r7, #16]
 800adc2:	0151      	lsls	r1, r2, #5
 800adc4:	697a      	ldr	r2, [r7, #20]
 800adc6:	440a      	add	r2, r1
 800adc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800adcc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800add0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800add2:	693b      	ldr	r3, [r7, #16]
 800add4:	015a      	lsls	r2, r3, #5
 800add6:	697b      	ldr	r3, [r7, #20]
 800add8:	4413      	add	r3, r2
 800adda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adde:	691b      	ldr	r3, [r3, #16]
 800ade0:	693a      	ldr	r2, [r7, #16]
 800ade2:	0151      	lsls	r1, r2, #5
 800ade4:	697a      	ldr	r2, [r7, #20]
 800ade6:	440a      	add	r2, r1
 800ade8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800adec:	0cdb      	lsrs	r3, r3, #19
 800adee:	04db      	lsls	r3, r3, #19
 800adf0:	6113      	str	r3, [r2, #16]
 800adf2:	e04e      	b.n	800ae92 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800adf4:	693b      	ldr	r3, [r7, #16]
 800adf6:	015a      	lsls	r2, r3, #5
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	4413      	add	r3, r2
 800adfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae00:	691b      	ldr	r3, [r3, #16]
 800ae02:	693a      	ldr	r2, [r7, #16]
 800ae04:	0151      	lsls	r1, r2, #5
 800ae06:	697a      	ldr	r2, [r7, #20]
 800ae08:	440a      	add	r2, r1
 800ae0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae0e:	0cdb      	lsrs	r3, r3, #19
 800ae10:	04db      	lsls	r3, r3, #19
 800ae12:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ae14:	693b      	ldr	r3, [r7, #16]
 800ae16:	015a      	lsls	r2, r3, #5
 800ae18:	697b      	ldr	r3, [r7, #20]
 800ae1a:	4413      	add	r3, r2
 800ae1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae20:	691b      	ldr	r3, [r3, #16]
 800ae22:	693a      	ldr	r2, [r7, #16]
 800ae24:	0151      	lsls	r1, r2, #5
 800ae26:	697a      	ldr	r2, [r7, #20]
 800ae28:	440a      	add	r2, r1
 800ae2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae2e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ae32:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ae36:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	695a      	ldr	r2, [r3, #20]
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	689b      	ldr	r3, [r3, #8]
 800ae40:	429a      	cmp	r2, r3
 800ae42:	d903      	bls.n	800ae4c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	689a      	ldr	r2, [r3, #8]
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ae4c:	693b      	ldr	r3, [r7, #16]
 800ae4e:	015a      	lsls	r2, r3, #5
 800ae50:	697b      	ldr	r3, [r7, #20]
 800ae52:	4413      	add	r3, r2
 800ae54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae58:	691b      	ldr	r3, [r3, #16]
 800ae5a:	693a      	ldr	r2, [r7, #16]
 800ae5c:	0151      	lsls	r1, r2, #5
 800ae5e:	697a      	ldr	r2, [r7, #20]
 800ae60:	440a      	add	r2, r1
 800ae62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ae6a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ae6c:	693b      	ldr	r3, [r7, #16]
 800ae6e:	015a      	lsls	r2, r3, #5
 800ae70:	697b      	ldr	r3, [r7, #20]
 800ae72:	4413      	add	r3, r2
 800ae74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae78:	691a      	ldr	r2, [r3, #16]
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	695b      	ldr	r3, [r3, #20]
 800ae7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ae82:	6939      	ldr	r1, [r7, #16]
 800ae84:	0148      	lsls	r0, r1, #5
 800ae86:	6979      	ldr	r1, [r7, #20]
 800ae88:	4401      	add	r1, r0
 800ae8a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ae8e:	4313      	orrs	r3, r2
 800ae90:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ae92:	79fb      	ldrb	r3, [r7, #7]
 800ae94:	2b01      	cmp	r3, #1
 800ae96:	d11e      	bne.n	800aed6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	691b      	ldr	r3, [r3, #16]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d009      	beq.n	800aeb4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800aea0:	693b      	ldr	r3, [r7, #16]
 800aea2:	015a      	lsls	r2, r3, #5
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	4413      	add	r3, r2
 800aea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aeac:	461a      	mov	r2, r3
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	691b      	ldr	r3, [r3, #16]
 800aeb2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800aeb4:	693b      	ldr	r3, [r7, #16]
 800aeb6:	015a      	lsls	r2, r3, #5
 800aeb8:	697b      	ldr	r3, [r7, #20]
 800aeba:	4413      	add	r3, r2
 800aebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	693a      	ldr	r2, [r7, #16]
 800aec4:	0151      	lsls	r1, r2, #5
 800aec6:	697a      	ldr	r2, [r7, #20]
 800aec8:	440a      	add	r2, r1
 800aeca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aece:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800aed2:	6013      	str	r3, [r2, #0]
 800aed4:	e092      	b.n	800affc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800aed6:	693b      	ldr	r3, [r7, #16]
 800aed8:	015a      	lsls	r2, r3, #5
 800aeda:	697b      	ldr	r3, [r7, #20]
 800aedc:	4413      	add	r3, r2
 800aede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	693a      	ldr	r2, [r7, #16]
 800aee6:	0151      	lsls	r1, r2, #5
 800aee8:	697a      	ldr	r2, [r7, #20]
 800aeea:	440a      	add	r2, r1
 800aeec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aef0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800aef4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	695b      	ldr	r3, [r3, #20]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d07e      	beq.n	800affc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800aefe:	697b      	ldr	r3, [r7, #20]
 800af00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800af06:	68bb      	ldr	r3, [r7, #8]
 800af08:	781b      	ldrb	r3, [r3, #0]
 800af0a:	f003 030f 	and.w	r3, r3, #15
 800af0e:	2101      	movs	r1, #1
 800af10:	fa01 f303 	lsl.w	r3, r1, r3
 800af14:	6979      	ldr	r1, [r7, #20]
 800af16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800af1a:	4313      	orrs	r3, r2
 800af1c:	634b      	str	r3, [r1, #52]	; 0x34
 800af1e:	e06d      	b.n	800affc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800af20:	693b      	ldr	r3, [r7, #16]
 800af22:	015a      	lsls	r2, r3, #5
 800af24:	697b      	ldr	r3, [r7, #20]
 800af26:	4413      	add	r3, r2
 800af28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af2c:	691b      	ldr	r3, [r3, #16]
 800af2e:	693a      	ldr	r2, [r7, #16]
 800af30:	0151      	lsls	r1, r2, #5
 800af32:	697a      	ldr	r2, [r7, #20]
 800af34:	440a      	add	r2, r1
 800af36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af3a:	0cdb      	lsrs	r3, r3, #19
 800af3c:	04db      	lsls	r3, r3, #19
 800af3e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800af40:	693b      	ldr	r3, [r7, #16]
 800af42:	015a      	lsls	r2, r3, #5
 800af44:	697b      	ldr	r3, [r7, #20]
 800af46:	4413      	add	r3, r2
 800af48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af4c:	691b      	ldr	r3, [r3, #16]
 800af4e:	693a      	ldr	r2, [r7, #16]
 800af50:	0151      	lsls	r1, r2, #5
 800af52:	697a      	ldr	r2, [r7, #20]
 800af54:	440a      	add	r2, r1
 800af56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af5a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800af5e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800af62:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800af64:	68bb      	ldr	r3, [r7, #8]
 800af66:	695b      	ldr	r3, [r3, #20]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d003      	beq.n	800af74 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	689a      	ldr	r2, [r3, #8]
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800af74:	693b      	ldr	r3, [r7, #16]
 800af76:	015a      	lsls	r2, r3, #5
 800af78:	697b      	ldr	r3, [r7, #20]
 800af7a:	4413      	add	r3, r2
 800af7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af80:	691b      	ldr	r3, [r3, #16]
 800af82:	693a      	ldr	r2, [r7, #16]
 800af84:	0151      	lsls	r1, r2, #5
 800af86:	697a      	ldr	r2, [r7, #20]
 800af88:	440a      	add	r2, r1
 800af8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800af92:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800af94:	693b      	ldr	r3, [r7, #16]
 800af96:	015a      	lsls	r2, r3, #5
 800af98:	697b      	ldr	r3, [r7, #20]
 800af9a:	4413      	add	r3, r2
 800af9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afa0:	691a      	ldr	r2, [r3, #16]
 800afa2:	68bb      	ldr	r3, [r7, #8]
 800afa4:	689b      	ldr	r3, [r3, #8]
 800afa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800afaa:	6939      	ldr	r1, [r7, #16]
 800afac:	0148      	lsls	r0, r1, #5
 800afae:	6979      	ldr	r1, [r7, #20]
 800afb0:	4401      	add	r1, r0
 800afb2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800afb6:	4313      	orrs	r3, r2
 800afb8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800afba:	79fb      	ldrb	r3, [r7, #7]
 800afbc:	2b01      	cmp	r3, #1
 800afbe:	d10d      	bne.n	800afdc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	68db      	ldr	r3, [r3, #12]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d009      	beq.n	800afdc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	68d9      	ldr	r1, [r3, #12]
 800afcc:	693b      	ldr	r3, [r7, #16]
 800afce:	015a      	lsls	r2, r3, #5
 800afd0:	697b      	ldr	r3, [r7, #20]
 800afd2:	4413      	add	r3, r2
 800afd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afd8:	460a      	mov	r2, r1
 800afda:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800afdc:	693b      	ldr	r3, [r7, #16]
 800afde:	015a      	lsls	r2, r3, #5
 800afe0:	697b      	ldr	r3, [r7, #20]
 800afe2:	4413      	add	r3, r2
 800afe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	693a      	ldr	r2, [r7, #16]
 800afec:	0151      	lsls	r1, r2, #5
 800afee:	697a      	ldr	r2, [r7, #20]
 800aff0:	440a      	add	r2, r1
 800aff2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aff6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800affa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800affc:	2300      	movs	r3, #0
}
 800affe:	4618      	mov	r0, r3
 800b000:	371c      	adds	r7, #28
 800b002:	46bd      	mov	sp, r7
 800b004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b008:	4770      	bx	lr

0800b00a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b00a:	b480      	push	{r7}
 800b00c:	b089      	sub	sp, #36	; 0x24
 800b00e:	af00      	add	r7, sp, #0
 800b010:	60f8      	str	r0, [r7, #12]
 800b012:	60b9      	str	r1, [r7, #8]
 800b014:	4611      	mov	r1, r2
 800b016:	461a      	mov	r2, r3
 800b018:	460b      	mov	r3, r1
 800b01a:	71fb      	strb	r3, [r7, #7]
 800b01c:	4613      	mov	r3, r2
 800b01e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800b024:	68bb      	ldr	r3, [r7, #8]
 800b026:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800b028:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d11a      	bne.n	800b066 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b030:	88bb      	ldrh	r3, [r7, #4]
 800b032:	3303      	adds	r3, #3
 800b034:	089b      	lsrs	r3, r3, #2
 800b036:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b038:	2300      	movs	r3, #0
 800b03a:	61bb      	str	r3, [r7, #24]
 800b03c:	e00f      	b.n	800b05e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b03e:	79fb      	ldrb	r3, [r7, #7]
 800b040:	031a      	lsls	r2, r3, #12
 800b042:	697b      	ldr	r3, [r7, #20]
 800b044:	4413      	add	r3, r2
 800b046:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b04a:	461a      	mov	r2, r3
 800b04c:	69fb      	ldr	r3, [r7, #28]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b052:	69fb      	ldr	r3, [r7, #28]
 800b054:	3304      	adds	r3, #4
 800b056:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b058:	69bb      	ldr	r3, [r7, #24]
 800b05a:	3301      	adds	r3, #1
 800b05c:	61bb      	str	r3, [r7, #24]
 800b05e:	69ba      	ldr	r2, [r7, #24]
 800b060:	693b      	ldr	r3, [r7, #16]
 800b062:	429a      	cmp	r2, r3
 800b064:	d3eb      	bcc.n	800b03e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b066:	2300      	movs	r3, #0
}
 800b068:	4618      	mov	r0, r3
 800b06a:	3724      	adds	r7, #36	; 0x24
 800b06c:	46bd      	mov	sp, r7
 800b06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b072:	4770      	bx	lr

0800b074 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b074:	b480      	push	{r7}
 800b076:	b089      	sub	sp, #36	; 0x24
 800b078:	af00      	add	r7, sp, #0
 800b07a:	60f8      	str	r0, [r7, #12]
 800b07c:	60b9      	str	r1, [r7, #8]
 800b07e:	4613      	mov	r3, r2
 800b080:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800b08a:	88fb      	ldrh	r3, [r7, #6]
 800b08c:	3303      	adds	r3, #3
 800b08e:	089b      	lsrs	r3, r3, #2
 800b090:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800b092:	2300      	movs	r3, #0
 800b094:	61bb      	str	r3, [r7, #24]
 800b096:	e00b      	b.n	800b0b0 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b098:	697b      	ldr	r3, [r7, #20]
 800b09a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b09e:	681a      	ldr	r2, [r3, #0]
 800b0a0:	69fb      	ldr	r3, [r7, #28]
 800b0a2:	601a      	str	r2, [r3, #0]
    pDest++;
 800b0a4:	69fb      	ldr	r3, [r7, #28]
 800b0a6:	3304      	adds	r3, #4
 800b0a8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800b0aa:	69bb      	ldr	r3, [r7, #24]
 800b0ac:	3301      	adds	r3, #1
 800b0ae:	61bb      	str	r3, [r7, #24]
 800b0b0:	69ba      	ldr	r2, [r7, #24]
 800b0b2:	693b      	ldr	r3, [r7, #16]
 800b0b4:	429a      	cmp	r2, r3
 800b0b6:	d3ef      	bcc.n	800b098 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800b0b8:	69fb      	ldr	r3, [r7, #28]
}
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	3724      	adds	r7, #36	; 0x24
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c4:	4770      	bx	lr

0800b0c6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b0c6:	b480      	push	{r7}
 800b0c8:	b085      	sub	sp, #20
 800b0ca:	af00      	add	r7, sp, #0
 800b0cc:	6078      	str	r0, [r7, #4]
 800b0ce:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	781b      	ldrb	r3, [r3, #0]
 800b0d8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	785b      	ldrb	r3, [r3, #1]
 800b0de:	2b01      	cmp	r3, #1
 800b0e0:	d12c      	bne.n	800b13c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b0e2:	68bb      	ldr	r3, [r7, #8]
 800b0e4:	015a      	lsls	r2, r3, #5
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	4413      	add	r3, r2
 800b0ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	db12      	blt.n	800b11a <USB_EPSetStall+0x54>
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d00f      	beq.n	800b11a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b0fa:	68bb      	ldr	r3, [r7, #8]
 800b0fc:	015a      	lsls	r2, r3, #5
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	4413      	add	r3, r2
 800b102:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	68ba      	ldr	r2, [r7, #8]
 800b10a:	0151      	lsls	r1, r2, #5
 800b10c:	68fa      	ldr	r2, [r7, #12]
 800b10e:	440a      	add	r2, r1
 800b110:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b114:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b118:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b11a:	68bb      	ldr	r3, [r7, #8]
 800b11c:	015a      	lsls	r2, r3, #5
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	4413      	add	r3, r2
 800b122:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	68ba      	ldr	r2, [r7, #8]
 800b12a:	0151      	lsls	r1, r2, #5
 800b12c:	68fa      	ldr	r2, [r7, #12]
 800b12e:	440a      	add	r2, r1
 800b130:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b134:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b138:	6013      	str	r3, [r2, #0]
 800b13a:	e02b      	b.n	800b194 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	015a      	lsls	r2, r3, #5
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	4413      	add	r3, r2
 800b144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	db12      	blt.n	800b174 <USB_EPSetStall+0xae>
 800b14e:	68bb      	ldr	r3, [r7, #8]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d00f      	beq.n	800b174 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b154:	68bb      	ldr	r3, [r7, #8]
 800b156:	015a      	lsls	r2, r3, #5
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	4413      	add	r3, r2
 800b15c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	68ba      	ldr	r2, [r7, #8]
 800b164:	0151      	lsls	r1, r2, #5
 800b166:	68fa      	ldr	r2, [r7, #12]
 800b168:	440a      	add	r2, r1
 800b16a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b16e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b172:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	015a      	lsls	r2, r3, #5
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	4413      	add	r3, r2
 800b17c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	68ba      	ldr	r2, [r7, #8]
 800b184:	0151      	lsls	r1, r2, #5
 800b186:	68fa      	ldr	r2, [r7, #12]
 800b188:	440a      	add	r2, r1
 800b18a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b18e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b192:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b194:	2300      	movs	r3, #0
}
 800b196:	4618      	mov	r0, r3
 800b198:	3714      	adds	r7, #20
 800b19a:	46bd      	mov	sp, r7
 800b19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a0:	4770      	bx	lr

0800b1a2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b1a2:	b480      	push	{r7}
 800b1a4:	b085      	sub	sp, #20
 800b1a6:	af00      	add	r7, sp, #0
 800b1a8:	6078      	str	r0, [r7, #4]
 800b1aa:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	781b      	ldrb	r3, [r3, #0]
 800b1b4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	785b      	ldrb	r3, [r3, #1]
 800b1ba:	2b01      	cmp	r3, #1
 800b1bc:	d128      	bne.n	800b210 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b1be:	68bb      	ldr	r3, [r7, #8]
 800b1c0:	015a      	lsls	r2, r3, #5
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	4413      	add	r3, r2
 800b1c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	68ba      	ldr	r2, [r7, #8]
 800b1ce:	0151      	lsls	r1, r2, #5
 800b1d0:	68fa      	ldr	r2, [r7, #12]
 800b1d2:	440a      	add	r2, r1
 800b1d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b1dc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	78db      	ldrb	r3, [r3, #3]
 800b1e2:	2b03      	cmp	r3, #3
 800b1e4:	d003      	beq.n	800b1ee <USB_EPClearStall+0x4c>
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	78db      	ldrb	r3, [r3, #3]
 800b1ea:	2b02      	cmp	r3, #2
 800b1ec:	d138      	bne.n	800b260 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	015a      	lsls	r2, r3, #5
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	4413      	add	r3, r2
 800b1f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	68ba      	ldr	r2, [r7, #8]
 800b1fe:	0151      	lsls	r1, r2, #5
 800b200:	68fa      	ldr	r2, [r7, #12]
 800b202:	440a      	add	r2, r1
 800b204:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b20c:	6013      	str	r3, [r2, #0]
 800b20e:	e027      	b.n	800b260 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b210:	68bb      	ldr	r3, [r7, #8]
 800b212:	015a      	lsls	r2, r3, #5
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	4413      	add	r3, r2
 800b218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	68ba      	ldr	r2, [r7, #8]
 800b220:	0151      	lsls	r1, r2, #5
 800b222:	68fa      	ldr	r2, [r7, #12]
 800b224:	440a      	add	r2, r1
 800b226:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b22a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b22e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	78db      	ldrb	r3, [r3, #3]
 800b234:	2b03      	cmp	r3, #3
 800b236:	d003      	beq.n	800b240 <USB_EPClearStall+0x9e>
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	78db      	ldrb	r3, [r3, #3]
 800b23c:	2b02      	cmp	r3, #2
 800b23e:	d10f      	bne.n	800b260 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b240:	68bb      	ldr	r3, [r7, #8]
 800b242:	015a      	lsls	r2, r3, #5
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	4413      	add	r3, r2
 800b248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	68ba      	ldr	r2, [r7, #8]
 800b250:	0151      	lsls	r1, r2, #5
 800b252:	68fa      	ldr	r2, [r7, #12]
 800b254:	440a      	add	r2, r1
 800b256:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b25a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b25e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b260:	2300      	movs	r3, #0
}
 800b262:	4618      	mov	r0, r3
 800b264:	3714      	adds	r7, #20
 800b266:	46bd      	mov	sp, r7
 800b268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26c:	4770      	bx	lr

0800b26e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b26e:	b480      	push	{r7}
 800b270:	b085      	sub	sp, #20
 800b272:	af00      	add	r7, sp, #0
 800b274:	6078      	str	r0, [r7, #4]
 800b276:	460b      	mov	r3, r1
 800b278:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	68fa      	ldr	r2, [r7, #12]
 800b288:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b28c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b290:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b298:	681a      	ldr	r2, [r3, #0]
 800b29a:	78fb      	ldrb	r3, [r7, #3]
 800b29c:	011b      	lsls	r3, r3, #4
 800b29e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b2a2:	68f9      	ldr	r1, [r7, #12]
 800b2a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b2a8:	4313      	orrs	r3, r2
 800b2aa:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b2ac:	2300      	movs	r3, #0
}
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	3714      	adds	r7, #20
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b8:	4770      	bx	lr

0800b2ba <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b2ba:	b480      	push	{r7}
 800b2bc:	b085      	sub	sp, #20
 800b2be:	af00      	add	r7, sp, #0
 800b2c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	68fa      	ldr	r2, [r7, #12]
 800b2d0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b2d4:	f023 0303 	bic.w	r3, r3, #3
 800b2d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2e0:	685b      	ldr	r3, [r3, #4]
 800b2e2:	68fa      	ldr	r2, [r7, #12]
 800b2e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b2e8:	f023 0302 	bic.w	r3, r3, #2
 800b2ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b2ee:	2300      	movs	r3, #0
}
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	3714      	adds	r7, #20
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fa:	4770      	bx	lr

0800b2fc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b2fc:	b480      	push	{r7}
 800b2fe:	b085      	sub	sp, #20
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	68fa      	ldr	r2, [r7, #12]
 800b312:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b316:	f023 0303 	bic.w	r3, r3, #3
 800b31a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b322:	685b      	ldr	r3, [r3, #4]
 800b324:	68fa      	ldr	r2, [r7, #12]
 800b326:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b32a:	f043 0302 	orr.w	r3, r3, #2
 800b32e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b330:	2300      	movs	r3, #0
}
 800b332:	4618      	mov	r0, r3
 800b334:	3714      	adds	r7, #20
 800b336:	46bd      	mov	sp, r7
 800b338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33c:	4770      	bx	lr

0800b33e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b33e:	b480      	push	{r7}
 800b340:	b085      	sub	sp, #20
 800b342:	af00      	add	r7, sp, #0
 800b344:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	695b      	ldr	r3, [r3, #20]
 800b34a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	699b      	ldr	r3, [r3, #24]
 800b350:	68fa      	ldr	r2, [r7, #12]
 800b352:	4013      	ands	r3, r2
 800b354:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b356:	68fb      	ldr	r3, [r7, #12]
}
 800b358:	4618      	mov	r0, r3
 800b35a:	3714      	adds	r7, #20
 800b35c:	46bd      	mov	sp, r7
 800b35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b362:	4770      	bx	lr

0800b364 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b364:	b480      	push	{r7}
 800b366:	b085      	sub	sp, #20
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b376:	699b      	ldr	r3, [r3, #24]
 800b378:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b380:	69db      	ldr	r3, [r3, #28]
 800b382:	68ba      	ldr	r2, [r7, #8]
 800b384:	4013      	ands	r3, r2
 800b386:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	0c1b      	lsrs	r3, r3, #16
}
 800b38c:	4618      	mov	r0, r3
 800b38e:	3714      	adds	r7, #20
 800b390:	46bd      	mov	sp, r7
 800b392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b396:	4770      	bx	lr

0800b398 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b398:	b480      	push	{r7}
 800b39a:	b085      	sub	sp, #20
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3aa:	699b      	ldr	r3, [r3, #24]
 800b3ac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3b4:	69db      	ldr	r3, [r3, #28]
 800b3b6:	68ba      	ldr	r2, [r7, #8]
 800b3b8:	4013      	ands	r3, r2
 800b3ba:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b3bc:	68bb      	ldr	r3, [r7, #8]
 800b3be:	b29b      	uxth	r3, r3
}
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	3714      	adds	r7, #20
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ca:	4770      	bx	lr

0800b3cc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b3cc:	b480      	push	{r7}
 800b3ce:	b085      	sub	sp, #20
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
 800b3d4:	460b      	mov	r3, r1
 800b3d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b3dc:	78fb      	ldrb	r3, [r7, #3]
 800b3de:	015a      	lsls	r2, r3, #5
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	4413      	add	r3, r2
 800b3e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3e8:	689b      	ldr	r3, [r3, #8]
 800b3ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3f2:	695b      	ldr	r3, [r3, #20]
 800b3f4:	68ba      	ldr	r2, [r7, #8]
 800b3f6:	4013      	ands	r3, r2
 800b3f8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b3fa:	68bb      	ldr	r3, [r7, #8]
}
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	3714      	adds	r7, #20
 800b400:	46bd      	mov	sp, r7
 800b402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b406:	4770      	bx	lr

0800b408 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b408:	b480      	push	{r7}
 800b40a:	b087      	sub	sp, #28
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
 800b410:	460b      	mov	r3, r1
 800b412:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b418:	697b      	ldr	r3, [r7, #20]
 800b41a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b41e:	691b      	ldr	r3, [r3, #16]
 800b420:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b422:	697b      	ldr	r3, [r7, #20]
 800b424:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b42a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b42c:	78fb      	ldrb	r3, [r7, #3]
 800b42e:	f003 030f 	and.w	r3, r3, #15
 800b432:	68fa      	ldr	r2, [r7, #12]
 800b434:	fa22 f303 	lsr.w	r3, r2, r3
 800b438:	01db      	lsls	r3, r3, #7
 800b43a:	b2db      	uxtb	r3, r3
 800b43c:	693a      	ldr	r2, [r7, #16]
 800b43e:	4313      	orrs	r3, r2
 800b440:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b442:	78fb      	ldrb	r3, [r7, #3]
 800b444:	015a      	lsls	r2, r3, #5
 800b446:	697b      	ldr	r3, [r7, #20]
 800b448:	4413      	add	r3, r2
 800b44a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b44e:	689b      	ldr	r3, [r3, #8]
 800b450:	693a      	ldr	r2, [r7, #16]
 800b452:	4013      	ands	r3, r2
 800b454:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b456:	68bb      	ldr	r3, [r7, #8]
}
 800b458:	4618      	mov	r0, r3
 800b45a:	371c      	adds	r7, #28
 800b45c:	46bd      	mov	sp, r7
 800b45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b462:	4770      	bx	lr

0800b464 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b464:	b480      	push	{r7}
 800b466:	b083      	sub	sp, #12
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	695b      	ldr	r3, [r3, #20]
 800b470:	f003 0301 	and.w	r3, r3, #1
}
 800b474:	4618      	mov	r0, r3
 800b476:	370c      	adds	r7, #12
 800b478:	46bd      	mov	sp, r7
 800b47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47e:	4770      	bx	lr

0800b480 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b480:	b480      	push	{r7}
 800b482:	b085      	sub	sp, #20
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	68fa      	ldr	r2, [r7, #12]
 800b496:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b49a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b49e:	f023 0307 	bic.w	r3, r3, #7
 800b4a2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4aa:	685b      	ldr	r3, [r3, #4]
 800b4ac:	68fa      	ldr	r2, [r7, #12]
 800b4ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b4b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b4b6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b4b8:	2300      	movs	r3, #0
}
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	3714      	adds	r7, #20
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c4:	4770      	bx	lr
	...

0800b4c8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	b087      	sub	sp, #28
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	60f8      	str	r0, [r7, #12]
 800b4d0:	460b      	mov	r3, r1
 800b4d2:	607a      	str	r2, [r7, #4]
 800b4d4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	333c      	adds	r3, #60	; 0x3c
 800b4de:	3304      	adds	r3, #4
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b4e4:	693b      	ldr	r3, [r7, #16]
 800b4e6:	4a26      	ldr	r2, [pc, #152]	; (800b580 <USB_EP0_OutStart+0xb8>)
 800b4e8:	4293      	cmp	r3, r2
 800b4ea:	d90a      	bls.n	800b502 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b4ec:	697b      	ldr	r3, [r7, #20]
 800b4ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b4f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b4fc:	d101      	bne.n	800b502 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b4fe:	2300      	movs	r3, #0
 800b500:	e037      	b.n	800b572 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b502:	697b      	ldr	r3, [r7, #20]
 800b504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b508:	461a      	mov	r2, r3
 800b50a:	2300      	movs	r3, #0
 800b50c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b50e:	697b      	ldr	r3, [r7, #20]
 800b510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b514:	691b      	ldr	r3, [r3, #16]
 800b516:	697a      	ldr	r2, [r7, #20]
 800b518:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b51c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b520:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b522:	697b      	ldr	r3, [r7, #20]
 800b524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b528:	691b      	ldr	r3, [r3, #16]
 800b52a:	697a      	ldr	r2, [r7, #20]
 800b52c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b530:	f043 0318 	orr.w	r3, r3, #24
 800b534:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b536:	697b      	ldr	r3, [r7, #20]
 800b538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b53c:	691b      	ldr	r3, [r3, #16]
 800b53e:	697a      	ldr	r2, [r7, #20]
 800b540:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b544:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b548:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b54a:	7afb      	ldrb	r3, [r7, #11]
 800b54c:	2b01      	cmp	r3, #1
 800b54e:	d10f      	bne.n	800b570 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b550:	697b      	ldr	r3, [r7, #20]
 800b552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b556:	461a      	mov	r2, r3
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b55c:	697b      	ldr	r3, [r7, #20]
 800b55e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	697a      	ldr	r2, [r7, #20]
 800b566:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b56a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800b56e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b570:	2300      	movs	r3, #0
}
 800b572:	4618      	mov	r0, r3
 800b574:	371c      	adds	r7, #28
 800b576:	46bd      	mov	sp, r7
 800b578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57c:	4770      	bx	lr
 800b57e:	bf00      	nop
 800b580:	4f54300a 	.word	0x4f54300a

0800b584 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b584:	b480      	push	{r7}
 800b586:	b085      	sub	sp, #20
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b58c:	2300      	movs	r3, #0
 800b58e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	3301      	adds	r3, #1
 800b594:	60fb      	str	r3, [r7, #12]
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	4a13      	ldr	r2, [pc, #76]	; (800b5e8 <USB_CoreReset+0x64>)
 800b59a:	4293      	cmp	r3, r2
 800b59c:	d901      	bls.n	800b5a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b59e:	2303      	movs	r3, #3
 800b5a0:	e01b      	b.n	800b5da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	691b      	ldr	r3, [r3, #16]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	daf2      	bge.n	800b590 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	691b      	ldr	r3, [r3, #16]
 800b5b2:	f043 0201 	orr.w	r2, r3, #1
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	3301      	adds	r3, #1
 800b5be:	60fb      	str	r3, [r7, #12]
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	4a09      	ldr	r2, [pc, #36]	; (800b5e8 <USB_CoreReset+0x64>)
 800b5c4:	4293      	cmp	r3, r2
 800b5c6:	d901      	bls.n	800b5cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b5c8:	2303      	movs	r3, #3
 800b5ca:	e006      	b.n	800b5da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	691b      	ldr	r3, [r3, #16]
 800b5d0:	f003 0301 	and.w	r3, r3, #1
 800b5d4:	2b01      	cmp	r3, #1
 800b5d6:	d0f0      	beq.n	800b5ba <USB_CoreReset+0x36>

  return HAL_OK;
 800b5d8:	2300      	movs	r3, #0
}
 800b5da:	4618      	mov	r0, r3
 800b5dc:	3714      	adds	r7, #20
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e4:	4770      	bx	lr
 800b5e6:	bf00      	nop
 800b5e8:	00030d40 	.word	0x00030d40

0800b5ec <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b084      	sub	sp, #16
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
 800b5f4:	460b      	mov	r3, r1
 800b5f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b5f8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b5fc:	f009 fc34 	bl	8014e68 <malloc>
 800b600:	4603      	mov	r3, r0
 800b602:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d105      	bne.n	800b616 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	2200      	movs	r2, #0
 800b60e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800b612:	2302      	movs	r3, #2
 800b614:	e066      	b.n	800b6e4 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	68fa      	ldr	r2, [r7, #12]
 800b61a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	7c1b      	ldrb	r3, [r3, #16]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d119      	bne.n	800b65a <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b626:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b62a:	2202      	movs	r2, #2
 800b62c:	2181      	movs	r1, #129	; 0x81
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	f005 f94f 	bl	80108d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2201      	movs	r2, #1
 800b638:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b63a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b63e:	2202      	movs	r2, #2
 800b640:	2101      	movs	r1, #1
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f005 f945 	bl	80108d2 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2201      	movs	r2, #1
 800b64c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2210      	movs	r2, #16
 800b654:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800b658:	e016      	b.n	800b688 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b65a:	2340      	movs	r3, #64	; 0x40
 800b65c:	2202      	movs	r2, #2
 800b65e:	2181      	movs	r1, #129	; 0x81
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	f005 f936 	bl	80108d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	2201      	movs	r2, #1
 800b66a:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b66c:	2340      	movs	r3, #64	; 0x40
 800b66e:	2202      	movs	r2, #2
 800b670:	2101      	movs	r1, #1
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f005 f92d 	bl	80108d2 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2201      	movs	r2, #1
 800b67c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	2210      	movs	r2, #16
 800b684:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b688:	2308      	movs	r3, #8
 800b68a:	2203      	movs	r2, #3
 800b68c:	2182      	movs	r1, #130	; 0x82
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	f005 f91f 	bl	80108d2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2201      	movs	r2, #1
 800b698:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	7c1b      	ldrb	r3, [r3, #16]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d109      	bne.n	800b6d2 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b6c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b6c8:	2101      	movs	r1, #1
 800b6ca:	6878      	ldr	r0, [r7, #4]
 800b6cc:	f005 f9f0 	bl	8010ab0 <USBD_LL_PrepareReceive>
 800b6d0:	e007      	b.n	800b6e2 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b6d8:	2340      	movs	r3, #64	; 0x40
 800b6da:	2101      	movs	r1, #1
 800b6dc:	6878      	ldr	r0, [r7, #4]
 800b6de:	f005 f9e7 	bl	8010ab0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b6e2:	2300      	movs	r3, #0
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	3710      	adds	r7, #16
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}

0800b6ec <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b084      	sub	sp, #16
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
 800b6f4:	460b      	mov	r3, r1
 800b6f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b6fc:	2181      	movs	r1, #129	; 0x81
 800b6fe:	6878      	ldr	r0, [r7, #4]
 800b700:	f005 f90d 	bl	801091e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2200      	movs	r2, #0
 800b708:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b70a:	2101      	movs	r1, #1
 800b70c:	6878      	ldr	r0, [r7, #4]
 800b70e:	f005 f906 	bl	801091e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	2200      	movs	r2, #0
 800b716:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b71a:	2182      	movs	r1, #130	; 0x82
 800b71c:	6878      	ldr	r0, [r7, #4]
 800b71e:	f005 f8fe 	bl	801091e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2200      	movs	r2, #0
 800b726:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2200      	movs	r2, #0
 800b72e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d00e      	beq.n	800b75a <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b742:	685b      	ldr	r3, [r3, #4]
 800b744:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b74c:	4618      	mov	r0, r3
 800b74e:	f009 fb93 	bl	8014e78 <free>
    pdev->pClassData = NULL;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	2200      	movs	r2, #0
 800b756:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800b75a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b75c:	4618      	mov	r0, r3
 800b75e:	3710      	adds	r7, #16
 800b760:	46bd      	mov	sp, r7
 800b762:	bd80      	pop	{r7, pc}

0800b764 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b086      	sub	sp, #24
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
 800b76c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b774:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800b776:	2300      	movs	r3, #0
 800b778:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800b77a:	2300      	movs	r3, #0
 800b77c:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800b77e:	2300      	movs	r3, #0
 800b780:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	781b      	ldrb	r3, [r3, #0]
 800b786:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d03a      	beq.n	800b804 <USBD_CDC_Setup+0xa0>
 800b78e:	2b20      	cmp	r3, #32
 800b790:	f040 8097 	bne.w	800b8c2 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	88db      	ldrh	r3, [r3, #6]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d029      	beq.n	800b7f0 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	781b      	ldrb	r3, [r3, #0]
 800b7a0:	b25b      	sxtb	r3, r3
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	da11      	bge.n	800b7ca <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b7ac:	689b      	ldr	r3, [r3, #8]
 800b7ae:	683a      	ldr	r2, [r7, #0]
 800b7b0:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800b7b2:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b7b4:	683a      	ldr	r2, [r7, #0]
 800b7b6:	88d2      	ldrh	r2, [r2, #6]
 800b7b8:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b7ba:	6939      	ldr	r1, [r7, #16]
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	88db      	ldrh	r3, [r3, #6]
 800b7c0:	461a      	mov	r2, r3
 800b7c2:	6878      	ldr	r0, [r7, #4]
 800b7c4:	f001 fa9d 	bl	800cd02 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800b7c8:	e082      	b.n	800b8d0 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	785a      	ldrb	r2, [r3, #1]
 800b7ce:	693b      	ldr	r3, [r7, #16]
 800b7d0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	88db      	ldrh	r3, [r3, #6]
 800b7d8:	b2da      	uxtb	r2, r3
 800b7da:	693b      	ldr	r3, [r7, #16]
 800b7dc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b7e0:	6939      	ldr	r1, [r7, #16]
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	88db      	ldrh	r3, [r3, #6]
 800b7e6:	461a      	mov	r2, r3
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	f001 fab6 	bl	800cd5a <USBD_CtlPrepareRx>
    break;
 800b7ee:	e06f      	b.n	800b8d0 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b7f6:	689b      	ldr	r3, [r3, #8]
 800b7f8:	683a      	ldr	r2, [r7, #0]
 800b7fa:	7850      	ldrb	r0, [r2, #1]
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	6839      	ldr	r1, [r7, #0]
 800b800:	4798      	blx	r3
    break;
 800b802:	e065      	b.n	800b8d0 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	785b      	ldrb	r3, [r3, #1]
 800b808:	2b0b      	cmp	r3, #11
 800b80a:	d84f      	bhi.n	800b8ac <USBD_CDC_Setup+0x148>
 800b80c:	a201      	add	r2, pc, #4	; (adr r2, 800b814 <USBD_CDC_Setup+0xb0>)
 800b80e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b812:	bf00      	nop
 800b814:	0800b845 	.word	0x0800b845
 800b818:	0800b8bb 	.word	0x0800b8bb
 800b81c:	0800b8ad 	.word	0x0800b8ad
 800b820:	0800b8ad 	.word	0x0800b8ad
 800b824:	0800b8ad 	.word	0x0800b8ad
 800b828:	0800b8ad 	.word	0x0800b8ad
 800b82c:	0800b8ad 	.word	0x0800b8ad
 800b830:	0800b8ad 	.word	0x0800b8ad
 800b834:	0800b8ad 	.word	0x0800b8ad
 800b838:	0800b8ad 	.word	0x0800b8ad
 800b83c:	0800b86d 	.word	0x0800b86d
 800b840:	0800b895 	.word	0x0800b895
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b84a:	2b03      	cmp	r3, #3
 800b84c:	d107      	bne.n	800b85e <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b84e:	f107 030c 	add.w	r3, r7, #12
 800b852:	2202      	movs	r2, #2
 800b854:	4619      	mov	r1, r3
 800b856:	6878      	ldr	r0, [r7, #4]
 800b858:	f001 fa53 	bl	800cd02 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b85c:	e030      	b.n	800b8c0 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800b85e:	6839      	ldr	r1, [r7, #0]
 800b860:	6878      	ldr	r0, [r7, #4]
 800b862:	f001 f9dd 	bl	800cc20 <USBD_CtlError>
        ret = USBD_FAIL;
 800b866:	2303      	movs	r3, #3
 800b868:	75fb      	strb	r3, [r7, #23]
      break;
 800b86a:	e029      	b.n	800b8c0 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b872:	2b03      	cmp	r3, #3
 800b874:	d107      	bne.n	800b886 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b876:	f107 030f 	add.w	r3, r7, #15
 800b87a:	2201      	movs	r2, #1
 800b87c:	4619      	mov	r1, r3
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f001 fa3f 	bl	800cd02 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b884:	e01c      	b.n	800b8c0 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800b886:	6839      	ldr	r1, [r7, #0]
 800b888:	6878      	ldr	r0, [r7, #4]
 800b88a:	f001 f9c9 	bl	800cc20 <USBD_CtlError>
        ret = USBD_FAIL;
 800b88e:	2303      	movs	r3, #3
 800b890:	75fb      	strb	r3, [r7, #23]
      break;
 800b892:	e015      	b.n	800b8c0 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b89a:	2b03      	cmp	r3, #3
 800b89c:	d00f      	beq.n	800b8be <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800b89e:	6839      	ldr	r1, [r7, #0]
 800b8a0:	6878      	ldr	r0, [r7, #4]
 800b8a2:	f001 f9bd 	bl	800cc20 <USBD_CtlError>
        ret = USBD_FAIL;
 800b8a6:	2303      	movs	r3, #3
 800b8a8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800b8aa:	e008      	b.n	800b8be <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800b8ac:	6839      	ldr	r1, [r7, #0]
 800b8ae:	6878      	ldr	r0, [r7, #4]
 800b8b0:	f001 f9b6 	bl	800cc20 <USBD_CtlError>
      ret = USBD_FAIL;
 800b8b4:	2303      	movs	r3, #3
 800b8b6:	75fb      	strb	r3, [r7, #23]
      break;
 800b8b8:	e002      	b.n	800b8c0 <USBD_CDC_Setup+0x15c>
      break;
 800b8ba:	bf00      	nop
 800b8bc:	e008      	b.n	800b8d0 <USBD_CDC_Setup+0x16c>
      break;
 800b8be:	bf00      	nop
    }
    break;
 800b8c0:	e006      	b.n	800b8d0 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800b8c2:	6839      	ldr	r1, [r7, #0]
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f001 f9ab 	bl	800cc20 <USBD_CtlError>
    ret = USBD_FAIL;
 800b8ca:	2303      	movs	r3, #3
 800b8cc:	75fb      	strb	r3, [r7, #23]
    break;
 800b8ce:	bf00      	nop
  }

  return (uint8_t)ret;
 800b8d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	3718      	adds	r7, #24
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}
 800b8da:	bf00      	nop

0800b8dc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b084      	sub	sp, #16
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
 800b8e4:	460b      	mov	r3, r1
 800b8e6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b8ee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d101      	bne.n	800b8fe <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b8fa:	2303      	movs	r3, #3
 800b8fc:	e049      	b.n	800b992 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b904:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b906:	78fa      	ldrb	r2, [r7, #3]
 800b908:	6879      	ldr	r1, [r7, #4]
 800b90a:	4613      	mov	r3, r2
 800b90c:	009b      	lsls	r3, r3, #2
 800b90e:	4413      	add	r3, r2
 800b910:	009b      	lsls	r3, r3, #2
 800b912:	440b      	add	r3, r1
 800b914:	3318      	adds	r3, #24
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d029      	beq.n	800b970 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b91c:	78fa      	ldrb	r2, [r7, #3]
 800b91e:	6879      	ldr	r1, [r7, #4]
 800b920:	4613      	mov	r3, r2
 800b922:	009b      	lsls	r3, r3, #2
 800b924:	4413      	add	r3, r2
 800b926:	009b      	lsls	r3, r3, #2
 800b928:	440b      	add	r3, r1
 800b92a:	3318      	adds	r3, #24
 800b92c:	681a      	ldr	r2, [r3, #0]
 800b92e:	78f9      	ldrb	r1, [r7, #3]
 800b930:	68f8      	ldr	r0, [r7, #12]
 800b932:	460b      	mov	r3, r1
 800b934:	00db      	lsls	r3, r3, #3
 800b936:	1a5b      	subs	r3, r3, r1
 800b938:	009b      	lsls	r3, r3, #2
 800b93a:	4403      	add	r3, r0
 800b93c:	3344      	adds	r3, #68	; 0x44
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	fbb2 f1f3 	udiv	r1, r2, r3
 800b944:	fb03 f301 	mul.w	r3, r3, r1
 800b948:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d110      	bne.n	800b970 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800b94e:	78fa      	ldrb	r2, [r7, #3]
 800b950:	6879      	ldr	r1, [r7, #4]
 800b952:	4613      	mov	r3, r2
 800b954:	009b      	lsls	r3, r3, #2
 800b956:	4413      	add	r3, r2
 800b958:	009b      	lsls	r3, r3, #2
 800b95a:	440b      	add	r3, r1
 800b95c:	3318      	adds	r3, #24
 800b95e:	2200      	movs	r2, #0
 800b960:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b962:	78f9      	ldrb	r1, [r7, #3]
 800b964:	2300      	movs	r3, #0
 800b966:	2200      	movs	r2, #0
 800b968:	6878      	ldr	r0, [r7, #4]
 800b96a:	f005 f880 	bl	8010a6e <USBD_LL_Transmit>
 800b96e:	e00f      	b.n	800b990 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b970:	68bb      	ldr	r3, [r7, #8]
 800b972:	2200      	movs	r2, #0
 800b974:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b97e:	691b      	ldr	r3, [r3, #16]
 800b980:	68ba      	ldr	r2, [r7, #8]
 800b982:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b986:	68ba      	ldr	r2, [r7, #8]
 800b988:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b98c:	78fa      	ldrb	r2, [r7, #3]
 800b98e:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800b990:	2300      	movs	r3, #0
}
 800b992:	4618      	mov	r0, r3
 800b994:	3710      	adds	r7, #16
 800b996:	46bd      	mov	sp, r7
 800b998:	bd80      	pop	{r7, pc}

0800b99a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b99a:	b580      	push	{r7, lr}
 800b99c:	b084      	sub	sp, #16
 800b99e:	af00      	add	r7, sp, #0
 800b9a0:	6078      	str	r0, [r7, #4]
 800b9a2:	460b      	mov	r3, r1
 800b9a4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b9ac:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d101      	bne.n	800b9bc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b9b8:	2303      	movs	r3, #3
 800b9ba:	e015      	b.n	800b9e8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b9bc:	78fb      	ldrb	r3, [r7, #3]
 800b9be:	4619      	mov	r1, r3
 800b9c0:	6878      	ldr	r0, [r7, #4]
 800b9c2:	f005 f896 	bl	8010af2 <USBD_LL_GetRxDataSize>
 800b9c6:	4602      	mov	r2, r0
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b9d4:	68db      	ldr	r3, [r3, #12]
 800b9d6:	68fa      	ldr	r2, [r7, #12]
 800b9d8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b9dc:	68fa      	ldr	r2, [r7, #12]
 800b9de:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b9e2:	4611      	mov	r1, r2
 800b9e4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b9e6:	2300      	movs	r3, #0
}
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	3710      	adds	r7, #16
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bd80      	pop	{r7, pc}

0800b9f0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b084      	sub	sp, #16
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b9fe:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d015      	beq.n	800ba36 <USBD_CDC_EP0_RxReady+0x46>
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ba10:	2bff      	cmp	r3, #255	; 0xff
 800ba12:	d010      	beq.n	800ba36 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba1a:	689b      	ldr	r3, [r3, #8]
 800ba1c:	68fa      	ldr	r2, [r7, #12]
 800ba1e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800ba22:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800ba24:	68fa      	ldr	r2, [r7, #12]
 800ba26:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ba2a:	b292      	uxth	r2, r2
 800ba2c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	22ff      	movs	r2, #255	; 0xff
 800ba32:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800ba36:	2300      	movs	r3, #0
}
 800ba38:	4618      	mov	r0, r3
 800ba3a:	3710      	adds	r7, #16
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bd80      	pop	{r7, pc}

0800ba40 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ba40:	b480      	push	{r7}
 800ba42:	b083      	sub	sp, #12
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	2243      	movs	r2, #67	; 0x43
 800ba4c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800ba4e:	4b03      	ldr	r3, [pc, #12]	; (800ba5c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800ba50:	4618      	mov	r0, r3
 800ba52:	370c      	adds	r7, #12
 800ba54:	46bd      	mov	sp, r7
 800ba56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5a:	4770      	bx	lr
 800ba5c:	200000a4 	.word	0x200000a4

0800ba60 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ba60:	b480      	push	{r7}
 800ba62:	b083      	sub	sp, #12
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2243      	movs	r2, #67	; 0x43
 800ba6c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800ba6e:	4b03      	ldr	r3, [pc, #12]	; (800ba7c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800ba70:	4618      	mov	r0, r3
 800ba72:	370c      	adds	r7, #12
 800ba74:	46bd      	mov	sp, r7
 800ba76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7a:	4770      	bx	lr
 800ba7c:	20000060 	.word	0x20000060

0800ba80 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ba80:	b480      	push	{r7}
 800ba82:	b083      	sub	sp, #12
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2243      	movs	r2, #67	; 0x43
 800ba8c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800ba8e:	4b03      	ldr	r3, [pc, #12]	; (800ba9c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800ba90:	4618      	mov	r0, r3
 800ba92:	370c      	adds	r7, #12
 800ba94:	46bd      	mov	sp, r7
 800ba96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9a:	4770      	bx	lr
 800ba9c:	200000e8 	.word	0x200000e8

0800baa0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800baa0:	b480      	push	{r7}
 800baa2:	b083      	sub	sp, #12
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	220a      	movs	r2, #10
 800baac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800baae:	4b03      	ldr	r3, [pc, #12]	; (800babc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800bab0:	4618      	mov	r0, r3
 800bab2:	370c      	adds	r7, #12
 800bab4:	46bd      	mov	sp, r7
 800bab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baba:	4770      	bx	lr
 800babc:	2000001c 	.word	0x2000001c

0800bac0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800bac0:	b480      	push	{r7}
 800bac2:	b083      	sub	sp, #12
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
 800bac8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d101      	bne.n	800bad4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800bad0:	2303      	movs	r3, #3
 800bad2:	e004      	b.n	800bade <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	683a      	ldr	r2, [r7, #0]
 800bad8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800badc:	2300      	movs	r3, #0
}
 800bade:	4618      	mov	r0, r3
 800bae0:	370c      	adds	r7, #12
 800bae2:	46bd      	mov	sp, r7
 800bae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae8:	4770      	bx	lr

0800baea <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800baea:	b480      	push	{r7}
 800baec:	b087      	sub	sp, #28
 800baee:	af00      	add	r7, sp, #0
 800baf0:	60f8      	str	r0, [r7, #12]
 800baf2:	60b9      	str	r1, [r7, #8]
 800baf4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bafc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800bafe:	697b      	ldr	r3, [r7, #20]
 800bb00:	68ba      	ldr	r2, [r7, #8]
 800bb02:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800bb06:	697b      	ldr	r3, [r7, #20]
 800bb08:	687a      	ldr	r2, [r7, #4]
 800bb0a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800bb0e:	2300      	movs	r3, #0
}
 800bb10:	4618      	mov	r0, r3
 800bb12:	371c      	adds	r7, #28
 800bb14:	46bd      	mov	sp, r7
 800bb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1a:	4770      	bx	lr

0800bb1c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800bb1c:	b480      	push	{r7}
 800bb1e:	b085      	sub	sp, #20
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
 800bb24:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bb2c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	683a      	ldr	r2, [r7, #0]
 800bb32:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800bb36:	2300      	movs	r3, #0
}
 800bb38:	4618      	mov	r0, r3
 800bb3a:	3714      	adds	r7, #20
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb42:	4770      	bx	lr

0800bb44 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b084      	sub	sp, #16
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bb52:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800bb54:	2301      	movs	r3, #1
 800bb56:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d101      	bne.n	800bb66 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bb62:	2303      	movs	r3, #3
 800bb64:	e01a      	b.n	800bb9c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800bb66:	68bb      	ldr	r3, [r7, #8]
 800bb68:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d114      	bne.n	800bb9a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800bb70:	68bb      	ldr	r3, [r7, #8]
 800bb72:	2201      	movs	r2, #1
 800bb74:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800bb78:	68bb      	ldr	r3, [r7, #8]
 800bb7a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800bb82:	68bb      	ldr	r3, [r7, #8]
 800bb84:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800bb88:	68bb      	ldr	r3, [r7, #8]
 800bb8a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800bb8e:	2181      	movs	r1, #129	; 0x81
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f004 ff6c 	bl	8010a6e <USBD_LL_Transmit>

    ret = USBD_OK;
 800bb96:	2300      	movs	r3, #0
 800bb98:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800bb9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	3710      	adds	r7, #16
 800bba0:	46bd      	mov	sp, r7
 800bba2:	bd80      	pop	{r7, pc}

0800bba4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b084      	sub	sp, #16
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bbb2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d101      	bne.n	800bbc2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800bbbe:	2303      	movs	r3, #3
 800bbc0:	e016      	b.n	800bbf0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	7c1b      	ldrb	r3, [r3, #16]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d109      	bne.n	800bbde <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bbd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bbd4:	2101      	movs	r1, #1
 800bbd6:	6878      	ldr	r0, [r7, #4]
 800bbd8:	f004 ff6a 	bl	8010ab0 <USBD_LL_PrepareReceive>
 800bbdc:	e007      	b.n	800bbee <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bbe4:	2340      	movs	r3, #64	; 0x40
 800bbe6:	2101      	movs	r1, #1
 800bbe8:	6878      	ldr	r0, [r7, #4]
 800bbea:	f004 ff61 	bl	8010ab0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bbee:	2300      	movs	r3, #0
}
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	3710      	adds	r7, #16
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}

0800bbf8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b086      	sub	sp, #24
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	60f8      	str	r0, [r7, #12]
 800bc00:	60b9      	str	r1, [r7, #8]
 800bc02:	4613      	mov	r3, r2
 800bc04:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d101      	bne.n	800bc10 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800bc0c:	2303      	movs	r3, #3
 800bc0e:	e025      	b.n	800bc5c <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d003      	beq.n	800bc22 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d003      	beq.n	800bc34 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	2200      	movs	r2, #0
 800bc30:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bc34:	68bb      	ldr	r3, [r7, #8]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d003      	beq.n	800bc42 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	68ba      	ldr	r2, [r7, #8]
 800bc3e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	2201      	movs	r2, #1
 800bc46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	79fa      	ldrb	r2, [r7, #7]
 800bc4e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800bc50:	68f8      	ldr	r0, [r7, #12]
 800bc52:	f004 fdd7 	bl	8010804 <USBD_LL_Init>
 800bc56:	4603      	mov	r3, r0
 800bc58:	75fb      	strb	r3, [r7, #23]

  return ret;
 800bc5a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	3718      	adds	r7, #24
 800bc60:	46bd      	mov	sp, r7
 800bc62:	bd80      	pop	{r7, pc}

0800bc64 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b084      	sub	sp, #16
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
 800bc6c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bc6e:	2300      	movs	r3, #0
 800bc70:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d101      	bne.n	800bc7c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800bc78:	2303      	movs	r3, #3
 800bc7a:	e010      	b.n	800bc9e <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	683a      	ldr	r2, [r7, #0]
 800bc80:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc8c:	f107 020e 	add.w	r2, r7, #14
 800bc90:	4610      	mov	r0, r2
 800bc92:	4798      	blx	r3
 800bc94:	4602      	mov	r2, r0
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800bc9c:	2300      	movs	r3, #0
}
 800bc9e:	4618      	mov	r0, r3
 800bca0:	3710      	adds	r7, #16
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd80      	pop	{r7, pc}

0800bca6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bca6:	b580      	push	{r7, lr}
 800bca8:	b082      	sub	sp, #8
 800bcaa:	af00      	add	r7, sp, #0
 800bcac:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800bcae:	6878      	ldr	r0, [r7, #4]
 800bcb0:	f004 fdf4 	bl	801089c <USBD_LL_Start>
 800bcb4:	4603      	mov	r3, r0
}
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	3708      	adds	r7, #8
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd80      	pop	{r7, pc}

0800bcbe <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800bcbe:	b480      	push	{r7}
 800bcc0:	b083      	sub	sp, #12
 800bcc2:	af00      	add	r7, sp, #0
 800bcc4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bcc6:	2300      	movs	r3, #0
}
 800bcc8:	4618      	mov	r0, r3
 800bcca:	370c      	adds	r7, #12
 800bccc:	46bd      	mov	sp, r7
 800bcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd2:	4770      	bx	lr

0800bcd4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b084      	sub	sp, #16
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
 800bcdc:	460b      	mov	r3, r1
 800bcde:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800bce0:	2303      	movs	r3, #3
 800bce2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d009      	beq.n	800bd02 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	78fa      	ldrb	r2, [r7, #3]
 800bcf8:	4611      	mov	r1, r2
 800bcfa:	6878      	ldr	r0, [r7, #4]
 800bcfc:	4798      	blx	r3
 800bcfe:	4603      	mov	r3, r0
 800bd00:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800bd02:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd04:	4618      	mov	r0, r3
 800bd06:	3710      	adds	r7, #16
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	bd80      	pop	{r7, pc}

0800bd0c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b082      	sub	sp, #8
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
 800bd14:	460b      	mov	r3, r1
 800bd16:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d007      	beq.n	800bd32 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd28:	685b      	ldr	r3, [r3, #4]
 800bd2a:	78fa      	ldrb	r2, [r7, #3]
 800bd2c:	4611      	mov	r1, r2
 800bd2e:	6878      	ldr	r0, [r7, #4]
 800bd30:	4798      	blx	r3
  }

  return USBD_OK;
 800bd32:	2300      	movs	r3, #0
}
 800bd34:	4618      	mov	r0, r3
 800bd36:	3708      	adds	r7, #8
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bd80      	pop	{r7, pc}

0800bd3c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b084      	sub	sp, #16
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
 800bd44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bd4c:	6839      	ldr	r1, [r7, #0]
 800bd4e:	4618      	mov	r0, r3
 800bd50:	f000 ff2c 	bl	800cbac <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2201      	movs	r2, #1
 800bd58:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800bd62:	461a      	mov	r2, r3
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bd70:	f003 031f 	and.w	r3, r3, #31
 800bd74:	2b01      	cmp	r3, #1
 800bd76:	d00e      	beq.n	800bd96 <USBD_LL_SetupStage+0x5a>
 800bd78:	2b01      	cmp	r3, #1
 800bd7a:	d302      	bcc.n	800bd82 <USBD_LL_SetupStage+0x46>
 800bd7c:	2b02      	cmp	r3, #2
 800bd7e:	d014      	beq.n	800bdaa <USBD_LL_SetupStage+0x6e>
 800bd80:	e01d      	b.n	800bdbe <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bd88:	4619      	mov	r1, r3
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	f000 fa18 	bl	800c1c0 <USBD_StdDevReq>
 800bd90:	4603      	mov	r3, r0
 800bd92:	73fb      	strb	r3, [r7, #15]
      break;
 800bd94:	e020      	b.n	800bdd8 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bd9c:	4619      	mov	r1, r3
 800bd9e:	6878      	ldr	r0, [r7, #4]
 800bda0:	f000 fa7c 	bl	800c29c <USBD_StdItfReq>
 800bda4:	4603      	mov	r3, r0
 800bda6:	73fb      	strb	r3, [r7, #15]
      break;
 800bda8:	e016      	b.n	800bdd8 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bdb0:	4619      	mov	r1, r3
 800bdb2:	6878      	ldr	r0, [r7, #4]
 800bdb4:	f000 fab8 	bl	800c328 <USBD_StdEPReq>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	73fb      	strb	r3, [r7, #15]
      break;
 800bdbc:	e00c      	b.n	800bdd8 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bdc4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bdc8:	b2db      	uxtb	r3, r3
 800bdca:	4619      	mov	r1, r3
 800bdcc:	6878      	ldr	r0, [r7, #4]
 800bdce:	f004 fdc5 	bl	801095c <USBD_LL_StallEP>
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	73fb      	strb	r3, [r7, #15]
      break;
 800bdd6:	bf00      	nop
  }

  return ret;
 800bdd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdda:	4618      	mov	r0, r3
 800bddc:	3710      	adds	r7, #16
 800bdde:	46bd      	mov	sp, r7
 800bde0:	bd80      	pop	{r7, pc}

0800bde2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bde2:	b580      	push	{r7, lr}
 800bde4:	b086      	sub	sp, #24
 800bde6:	af00      	add	r7, sp, #0
 800bde8:	60f8      	str	r0, [r7, #12]
 800bdea:	460b      	mov	r3, r1
 800bdec:	607a      	str	r2, [r7, #4]
 800bdee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bdf0:	7afb      	ldrb	r3, [r7, #11]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d137      	bne.n	800be66 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800bdfc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800be04:	2b03      	cmp	r3, #3
 800be06:	d14a      	bne.n	800be9e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800be08:	693b      	ldr	r3, [r7, #16]
 800be0a:	689a      	ldr	r2, [r3, #8]
 800be0c:	693b      	ldr	r3, [r7, #16]
 800be0e:	68db      	ldr	r3, [r3, #12]
 800be10:	429a      	cmp	r2, r3
 800be12:	d913      	bls.n	800be3c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800be14:	693b      	ldr	r3, [r7, #16]
 800be16:	689a      	ldr	r2, [r3, #8]
 800be18:	693b      	ldr	r3, [r7, #16]
 800be1a:	68db      	ldr	r3, [r3, #12]
 800be1c:	1ad2      	subs	r2, r2, r3
 800be1e:	693b      	ldr	r3, [r7, #16]
 800be20:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800be22:	693b      	ldr	r3, [r7, #16]
 800be24:	68da      	ldr	r2, [r3, #12]
 800be26:	693b      	ldr	r3, [r7, #16]
 800be28:	689b      	ldr	r3, [r3, #8]
 800be2a:	4293      	cmp	r3, r2
 800be2c:	bf28      	it	cs
 800be2e:	4613      	movcs	r3, r2
 800be30:	461a      	mov	r2, r3
 800be32:	6879      	ldr	r1, [r7, #4]
 800be34:	68f8      	ldr	r0, [r7, #12]
 800be36:	f000 ffad 	bl	800cd94 <USBD_CtlContinueRx>
 800be3a:	e030      	b.n	800be9e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be42:	691b      	ldr	r3, [r3, #16]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d00a      	beq.n	800be5e <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800be4e:	2b03      	cmp	r3, #3
 800be50:	d105      	bne.n	800be5e <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be58:	691b      	ldr	r3, [r3, #16]
 800be5a:	68f8      	ldr	r0, [r7, #12]
 800be5c:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800be5e:	68f8      	ldr	r0, [r7, #12]
 800be60:	f000 ffa9 	bl	800cdb6 <USBD_CtlSendStatus>
 800be64:	e01b      	b.n	800be9e <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be6c:	699b      	ldr	r3, [r3, #24]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d013      	beq.n	800be9a <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800be78:	2b03      	cmp	r3, #3
 800be7a:	d10e      	bne.n	800be9a <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be82:	699b      	ldr	r3, [r3, #24]
 800be84:	7afa      	ldrb	r2, [r7, #11]
 800be86:	4611      	mov	r1, r2
 800be88:	68f8      	ldr	r0, [r7, #12]
 800be8a:	4798      	blx	r3
 800be8c:	4603      	mov	r3, r0
 800be8e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800be90:	7dfb      	ldrb	r3, [r7, #23]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d003      	beq.n	800be9e <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800be96:	7dfb      	ldrb	r3, [r7, #23]
 800be98:	e002      	b.n	800bea0 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800be9a:	2303      	movs	r3, #3
 800be9c:	e000      	b.n	800bea0 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800be9e:	2300      	movs	r3, #0
}
 800bea0:	4618      	mov	r0, r3
 800bea2:	3718      	adds	r7, #24
 800bea4:	46bd      	mov	sp, r7
 800bea6:	bd80      	pop	{r7, pc}

0800bea8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b086      	sub	sp, #24
 800beac:	af00      	add	r7, sp, #0
 800beae:	60f8      	str	r0, [r7, #12]
 800beb0:	460b      	mov	r3, r1
 800beb2:	607a      	str	r2, [r7, #4]
 800beb4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800beb6:	7afb      	ldrb	r3, [r7, #11]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d16a      	bne.n	800bf92 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	3314      	adds	r3, #20
 800bec0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bec8:	2b02      	cmp	r3, #2
 800beca:	d155      	bne.n	800bf78 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800becc:	693b      	ldr	r3, [r7, #16]
 800bece:	689a      	ldr	r2, [r3, #8]
 800bed0:	693b      	ldr	r3, [r7, #16]
 800bed2:	68db      	ldr	r3, [r3, #12]
 800bed4:	429a      	cmp	r2, r3
 800bed6:	d914      	bls.n	800bf02 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bed8:	693b      	ldr	r3, [r7, #16]
 800beda:	689a      	ldr	r2, [r3, #8]
 800bedc:	693b      	ldr	r3, [r7, #16]
 800bede:	68db      	ldr	r3, [r3, #12]
 800bee0:	1ad2      	subs	r2, r2, r3
 800bee2:	693b      	ldr	r3, [r7, #16]
 800bee4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bee6:	693b      	ldr	r3, [r7, #16]
 800bee8:	689b      	ldr	r3, [r3, #8]
 800beea:	461a      	mov	r2, r3
 800beec:	6879      	ldr	r1, [r7, #4]
 800beee:	68f8      	ldr	r0, [r7, #12]
 800bef0:	f000 ff22 	bl	800cd38 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bef4:	2300      	movs	r3, #0
 800bef6:	2200      	movs	r2, #0
 800bef8:	2100      	movs	r1, #0
 800befa:	68f8      	ldr	r0, [r7, #12]
 800befc:	f004 fdd8 	bl	8010ab0 <USBD_LL_PrepareReceive>
 800bf00:	e03a      	b.n	800bf78 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bf02:	693b      	ldr	r3, [r7, #16]
 800bf04:	68da      	ldr	r2, [r3, #12]
 800bf06:	693b      	ldr	r3, [r7, #16]
 800bf08:	689b      	ldr	r3, [r3, #8]
 800bf0a:	429a      	cmp	r2, r3
 800bf0c:	d11c      	bne.n	800bf48 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bf0e:	693b      	ldr	r3, [r7, #16]
 800bf10:	685a      	ldr	r2, [r3, #4]
 800bf12:	693b      	ldr	r3, [r7, #16]
 800bf14:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bf16:	429a      	cmp	r2, r3
 800bf18:	d316      	bcc.n	800bf48 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bf1a:	693b      	ldr	r3, [r7, #16]
 800bf1c:	685a      	ldr	r2, [r3, #4]
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bf24:	429a      	cmp	r2, r3
 800bf26:	d20f      	bcs.n	800bf48 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bf28:	2200      	movs	r2, #0
 800bf2a:	2100      	movs	r1, #0
 800bf2c:	68f8      	ldr	r0, [r7, #12]
 800bf2e:	f000 ff03 	bl	800cd38 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	2200      	movs	r2, #0
 800bf36:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	2100      	movs	r1, #0
 800bf40:	68f8      	ldr	r0, [r7, #12]
 800bf42:	f004 fdb5 	bl	8010ab0 <USBD_LL_PrepareReceive>
 800bf46:	e017      	b.n	800bf78 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf4e:	68db      	ldr	r3, [r3, #12]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d00a      	beq.n	800bf6a <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bf5a:	2b03      	cmp	r3, #3
 800bf5c:	d105      	bne.n	800bf6a <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf64:	68db      	ldr	r3, [r3, #12]
 800bf66:	68f8      	ldr	r0, [r7, #12]
 800bf68:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bf6a:	2180      	movs	r1, #128	; 0x80
 800bf6c:	68f8      	ldr	r0, [r7, #12]
 800bf6e:	f004 fcf5 	bl	801095c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bf72:	68f8      	ldr	r0, [r7, #12]
 800bf74:	f000 ff32 	bl	800cddc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800bf7e:	2b01      	cmp	r3, #1
 800bf80:	d123      	bne.n	800bfca <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800bf82:	68f8      	ldr	r0, [r7, #12]
 800bf84:	f7ff fe9b 	bl	800bcbe <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800bf90:	e01b      	b.n	800bfca <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf98:	695b      	ldr	r3, [r3, #20]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d013      	beq.n	800bfc6 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800bfa4:	2b03      	cmp	r3, #3
 800bfa6:	d10e      	bne.n	800bfc6 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfae:	695b      	ldr	r3, [r3, #20]
 800bfb0:	7afa      	ldrb	r2, [r7, #11]
 800bfb2:	4611      	mov	r1, r2
 800bfb4:	68f8      	ldr	r0, [r7, #12]
 800bfb6:	4798      	blx	r3
 800bfb8:	4603      	mov	r3, r0
 800bfba:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800bfbc:	7dfb      	ldrb	r3, [r7, #23]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d003      	beq.n	800bfca <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800bfc2:	7dfb      	ldrb	r3, [r7, #23]
 800bfc4:	e002      	b.n	800bfcc <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bfc6:	2303      	movs	r3, #3
 800bfc8:	e000      	b.n	800bfcc <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800bfca:	2300      	movs	r3, #0
}
 800bfcc:	4618      	mov	r0, r3
 800bfce:	3718      	adds	r7, #24
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	bd80      	pop	{r7, pc}

0800bfd4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b082      	sub	sp, #8
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2201      	movs	r2, #1
 800bfe0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2200      	movs	r2, #0
 800bff0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	2200      	movs	r2, #0
 800bff6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c000:	2b00      	cmp	r3, #0
 800c002:	d009      	beq.n	800c018 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c00a:	685b      	ldr	r3, [r3, #4]
 800c00c:	687a      	ldr	r2, [r7, #4]
 800c00e:	6852      	ldr	r2, [r2, #4]
 800c010:	b2d2      	uxtb	r2, r2
 800c012:	4611      	mov	r1, r2
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c018:	2340      	movs	r3, #64	; 0x40
 800c01a:	2200      	movs	r2, #0
 800c01c:	2100      	movs	r1, #0
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f004 fc57 	bl	80108d2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	2201      	movs	r2, #1
 800c028:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2240      	movs	r2, #64	; 0x40
 800c030:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c034:	2340      	movs	r3, #64	; 0x40
 800c036:	2200      	movs	r2, #0
 800c038:	2180      	movs	r1, #128	; 0x80
 800c03a:	6878      	ldr	r0, [r7, #4]
 800c03c:	f004 fc49 	bl	80108d2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	2201      	movs	r2, #1
 800c044:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	2240      	movs	r2, #64	; 0x40
 800c04a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c04c:	2300      	movs	r3, #0
}
 800c04e:	4618      	mov	r0, r3
 800c050:	3708      	adds	r7, #8
 800c052:	46bd      	mov	sp, r7
 800c054:	bd80      	pop	{r7, pc}

0800c056 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c056:	b480      	push	{r7}
 800c058:	b083      	sub	sp, #12
 800c05a:	af00      	add	r7, sp, #0
 800c05c:	6078      	str	r0, [r7, #4]
 800c05e:	460b      	mov	r3, r1
 800c060:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	78fa      	ldrb	r2, [r7, #3]
 800c066:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c068:	2300      	movs	r3, #0
}
 800c06a:	4618      	mov	r0, r3
 800c06c:	370c      	adds	r7, #12
 800c06e:	46bd      	mov	sp, r7
 800c070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c074:	4770      	bx	lr

0800c076 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c076:	b480      	push	{r7}
 800c078:	b083      	sub	sp, #12
 800c07a:	af00      	add	r7, sp, #0
 800c07c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2204      	movs	r2, #4
 800c08e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c092:	2300      	movs	r3, #0
}
 800c094:	4618      	mov	r0, r3
 800c096:	370c      	adds	r7, #12
 800c098:	46bd      	mov	sp, r7
 800c09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09e:	4770      	bx	lr

0800c0a0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c0a0:	b480      	push	{r7}
 800c0a2:	b083      	sub	sp, #12
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0ae:	2b04      	cmp	r3, #4
 800c0b0:	d105      	bne.n	800c0be <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c0be:	2300      	movs	r3, #0
}
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	370c      	adds	r7, #12
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ca:	4770      	bx	lr

0800c0cc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b082      	sub	sp, #8
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0da:	2b03      	cmp	r3, #3
 800c0dc:	d10b      	bne.n	800c0f6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0e4:	69db      	ldr	r3, [r3, #28]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d005      	beq.n	800c0f6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0f0:	69db      	ldr	r3, [r3, #28]
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c0f6:	2300      	movs	r3, #0
}
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	3708      	adds	r7, #8
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}

0800c100 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c100:	b480      	push	{r7}
 800c102:	b083      	sub	sp, #12
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
 800c108:	460b      	mov	r3, r1
 800c10a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800c10c:	2300      	movs	r3, #0
}
 800c10e:	4618      	mov	r0, r3
 800c110:	370c      	adds	r7, #12
 800c112:	46bd      	mov	sp, r7
 800c114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c118:	4770      	bx	lr

0800c11a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c11a:	b480      	push	{r7}
 800c11c:	b083      	sub	sp, #12
 800c11e:	af00      	add	r7, sp, #0
 800c120:	6078      	str	r0, [r7, #4]
 800c122:	460b      	mov	r3, r1
 800c124:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800c126:	2300      	movs	r3, #0
}
 800c128:	4618      	mov	r0, r3
 800c12a:	370c      	adds	r7, #12
 800c12c:	46bd      	mov	sp, r7
 800c12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c132:	4770      	bx	lr

0800c134 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c134:	b480      	push	{r7}
 800c136:	b083      	sub	sp, #12
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c13c:	2300      	movs	r3, #0
}
 800c13e:	4618      	mov	r0, r3
 800c140:	370c      	adds	r7, #12
 800c142:	46bd      	mov	sp, r7
 800c144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c148:	4770      	bx	lr

0800c14a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c14a:	b580      	push	{r7, lr}
 800c14c:	b082      	sub	sp, #8
 800c14e:	af00      	add	r7, sp, #0
 800c150:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	2201      	movs	r2, #1
 800c156:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c160:	2b00      	cmp	r3, #0
 800c162:	d009      	beq.n	800c178 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c16a:	685b      	ldr	r3, [r3, #4]
 800c16c:	687a      	ldr	r2, [r7, #4]
 800c16e:	6852      	ldr	r2, [r2, #4]
 800c170:	b2d2      	uxtb	r2, r2
 800c172:	4611      	mov	r1, r2
 800c174:	6878      	ldr	r0, [r7, #4]
 800c176:	4798      	blx	r3
  }

  return USBD_OK;
 800c178:	2300      	movs	r3, #0
}
 800c17a:	4618      	mov	r0, r3
 800c17c:	3708      	adds	r7, #8
 800c17e:	46bd      	mov	sp, r7
 800c180:	bd80      	pop	{r7, pc}

0800c182 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c182:	b480      	push	{r7}
 800c184:	b087      	sub	sp, #28
 800c186:	af00      	add	r7, sp, #0
 800c188:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c18e:	697b      	ldr	r3, [r7, #20]
 800c190:	781b      	ldrb	r3, [r3, #0]
 800c192:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c194:	697b      	ldr	r3, [r7, #20]
 800c196:	3301      	adds	r3, #1
 800c198:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c19a:	697b      	ldr	r3, [r7, #20]
 800c19c:	781b      	ldrb	r3, [r3, #0]
 800c19e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c1a0:	8a3b      	ldrh	r3, [r7, #16]
 800c1a2:	021b      	lsls	r3, r3, #8
 800c1a4:	b21a      	sxth	r2, r3
 800c1a6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c1aa:	4313      	orrs	r3, r2
 800c1ac:	b21b      	sxth	r3, r3
 800c1ae:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c1b0:	89fb      	ldrh	r3, [r7, #14]
}
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	371c      	adds	r7, #28
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1bc:	4770      	bx	lr
	...

0800c1c0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b084      	sub	sp, #16
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
 800c1c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c1ce:	683b      	ldr	r3, [r7, #0]
 800c1d0:	781b      	ldrb	r3, [r3, #0]
 800c1d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c1d6:	2b20      	cmp	r3, #32
 800c1d8:	d004      	beq.n	800c1e4 <USBD_StdDevReq+0x24>
 800c1da:	2b40      	cmp	r3, #64	; 0x40
 800c1dc:	d002      	beq.n	800c1e4 <USBD_StdDevReq+0x24>
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d00a      	beq.n	800c1f8 <USBD_StdDevReq+0x38>
 800c1e2:	e050      	b.n	800c286 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1ea:	689b      	ldr	r3, [r3, #8]
 800c1ec:	6839      	ldr	r1, [r7, #0]
 800c1ee:	6878      	ldr	r0, [r7, #4]
 800c1f0:	4798      	blx	r3
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	73fb      	strb	r3, [r7, #15]
    break;
 800c1f6:	e04b      	b.n	800c290 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	785b      	ldrb	r3, [r3, #1]
 800c1fc:	2b09      	cmp	r3, #9
 800c1fe:	d83c      	bhi.n	800c27a <USBD_StdDevReq+0xba>
 800c200:	a201      	add	r2, pc, #4	; (adr r2, 800c208 <USBD_StdDevReq+0x48>)
 800c202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c206:	bf00      	nop
 800c208:	0800c25d 	.word	0x0800c25d
 800c20c:	0800c271 	.word	0x0800c271
 800c210:	0800c27b 	.word	0x0800c27b
 800c214:	0800c267 	.word	0x0800c267
 800c218:	0800c27b 	.word	0x0800c27b
 800c21c:	0800c23b 	.word	0x0800c23b
 800c220:	0800c231 	.word	0x0800c231
 800c224:	0800c27b 	.word	0x0800c27b
 800c228:	0800c253 	.word	0x0800c253
 800c22c:	0800c245 	.word	0x0800c245
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800c230:	6839      	ldr	r1, [r7, #0]
 800c232:	6878      	ldr	r0, [r7, #4]
 800c234:	f000 f9ce 	bl	800c5d4 <USBD_GetDescriptor>
      break;
 800c238:	e024      	b.n	800c284 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800c23a:	6839      	ldr	r1, [r7, #0]
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f000 fb33 	bl	800c8a8 <USBD_SetAddress>
      break;
 800c242:	e01f      	b.n	800c284 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800c244:	6839      	ldr	r1, [r7, #0]
 800c246:	6878      	ldr	r0, [r7, #4]
 800c248:	f000 fb70 	bl	800c92c <USBD_SetConfig>
 800c24c:	4603      	mov	r3, r0
 800c24e:	73fb      	strb	r3, [r7, #15]
      break;
 800c250:	e018      	b.n	800c284 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800c252:	6839      	ldr	r1, [r7, #0]
 800c254:	6878      	ldr	r0, [r7, #4]
 800c256:	f000 fc0d 	bl	800ca74 <USBD_GetConfig>
      break;
 800c25a:	e013      	b.n	800c284 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800c25c:	6839      	ldr	r1, [r7, #0]
 800c25e:	6878      	ldr	r0, [r7, #4]
 800c260:	f000 fc3c 	bl	800cadc <USBD_GetStatus>
      break;
 800c264:	e00e      	b.n	800c284 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800c266:	6839      	ldr	r1, [r7, #0]
 800c268:	6878      	ldr	r0, [r7, #4]
 800c26a:	f000 fc6a 	bl	800cb42 <USBD_SetFeature>
      break;
 800c26e:	e009      	b.n	800c284 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800c270:	6839      	ldr	r1, [r7, #0]
 800c272:	6878      	ldr	r0, [r7, #4]
 800c274:	f000 fc79 	bl	800cb6a <USBD_ClrFeature>
      break;
 800c278:	e004      	b.n	800c284 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800c27a:	6839      	ldr	r1, [r7, #0]
 800c27c:	6878      	ldr	r0, [r7, #4]
 800c27e:	f000 fccf 	bl	800cc20 <USBD_CtlError>
      break;
 800c282:	bf00      	nop
    }
    break;
 800c284:	e004      	b.n	800c290 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800c286:	6839      	ldr	r1, [r7, #0]
 800c288:	6878      	ldr	r0, [r7, #4]
 800c28a:	f000 fcc9 	bl	800cc20 <USBD_CtlError>
    break;
 800c28e:	bf00      	nop
  }

  return ret;
 800c290:	7bfb      	ldrb	r3, [r7, #15]
}
 800c292:	4618      	mov	r0, r3
 800c294:	3710      	adds	r7, #16
 800c296:	46bd      	mov	sp, r7
 800c298:	bd80      	pop	{r7, pc}
 800c29a:	bf00      	nop

0800c29c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b084      	sub	sp, #16
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
 800c2a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	781b      	ldrb	r3, [r3, #0]
 800c2ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c2b2:	2b20      	cmp	r3, #32
 800c2b4:	d003      	beq.n	800c2be <USBD_StdItfReq+0x22>
 800c2b6:	2b40      	cmp	r3, #64	; 0x40
 800c2b8:	d001      	beq.n	800c2be <USBD_StdItfReq+0x22>
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d12a      	bne.n	800c314 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2c4:	3b01      	subs	r3, #1
 800c2c6:	2b02      	cmp	r3, #2
 800c2c8:	d81d      	bhi.n	800c306 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	889b      	ldrh	r3, [r3, #4]
 800c2ce:	b2db      	uxtb	r3, r3
 800c2d0:	2b01      	cmp	r3, #1
 800c2d2:	d813      	bhi.n	800c2fc <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2da:	689b      	ldr	r3, [r3, #8]
 800c2dc:	6839      	ldr	r1, [r7, #0]
 800c2de:	6878      	ldr	r0, [r7, #4]
 800c2e0:	4798      	blx	r3
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800c2e6:	683b      	ldr	r3, [r7, #0]
 800c2e8:	88db      	ldrh	r3, [r3, #6]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d110      	bne.n	800c310 <USBD_StdItfReq+0x74>
 800c2ee:	7bfb      	ldrb	r3, [r7, #15]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d10d      	bne.n	800c310 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800c2f4:	6878      	ldr	r0, [r7, #4]
 800c2f6:	f000 fd5e 	bl	800cdb6 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800c2fa:	e009      	b.n	800c310 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800c2fc:	6839      	ldr	r1, [r7, #0]
 800c2fe:	6878      	ldr	r0, [r7, #4]
 800c300:	f000 fc8e 	bl	800cc20 <USBD_CtlError>
      break;
 800c304:	e004      	b.n	800c310 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800c306:	6839      	ldr	r1, [r7, #0]
 800c308:	6878      	ldr	r0, [r7, #4]
 800c30a:	f000 fc89 	bl	800cc20 <USBD_CtlError>
      break;
 800c30e:	e000      	b.n	800c312 <USBD_StdItfReq+0x76>
      break;
 800c310:	bf00      	nop
    }
    break;
 800c312:	e004      	b.n	800c31e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800c314:	6839      	ldr	r1, [r7, #0]
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	f000 fc82 	bl	800cc20 <USBD_CtlError>
    break;
 800c31c:	bf00      	nop
  }

  return ret;
 800c31e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c320:	4618      	mov	r0, r3
 800c322:	3710      	adds	r7, #16
 800c324:	46bd      	mov	sp, r7
 800c326:	bd80      	pop	{r7, pc}

0800c328 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b084      	sub	sp, #16
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
 800c330:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c332:	2300      	movs	r3, #0
 800c334:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	889b      	ldrh	r3, [r3, #4]
 800c33a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	781b      	ldrb	r3, [r3, #0]
 800c340:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c344:	2b20      	cmp	r3, #32
 800c346:	d004      	beq.n	800c352 <USBD_StdEPReq+0x2a>
 800c348:	2b40      	cmp	r3, #64	; 0x40
 800c34a:	d002      	beq.n	800c352 <USBD_StdEPReq+0x2a>
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d00a      	beq.n	800c366 <USBD_StdEPReq+0x3e>
 800c350:	e135      	b.n	800c5be <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c358:	689b      	ldr	r3, [r3, #8]
 800c35a:	6839      	ldr	r1, [r7, #0]
 800c35c:	6878      	ldr	r0, [r7, #4]
 800c35e:	4798      	blx	r3
 800c360:	4603      	mov	r3, r0
 800c362:	73fb      	strb	r3, [r7, #15]
    break;
 800c364:	e130      	b.n	800c5c8 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	785b      	ldrb	r3, [r3, #1]
 800c36a:	2b01      	cmp	r3, #1
 800c36c:	d03e      	beq.n	800c3ec <USBD_StdEPReq+0xc4>
 800c36e:	2b03      	cmp	r3, #3
 800c370:	d002      	beq.n	800c378 <USBD_StdEPReq+0x50>
 800c372:	2b00      	cmp	r3, #0
 800c374:	d077      	beq.n	800c466 <USBD_StdEPReq+0x13e>
 800c376:	e11c      	b.n	800c5b2 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c37e:	2b02      	cmp	r3, #2
 800c380:	d002      	beq.n	800c388 <USBD_StdEPReq+0x60>
 800c382:	2b03      	cmp	r3, #3
 800c384:	d015      	beq.n	800c3b2 <USBD_StdEPReq+0x8a>
 800c386:	e02b      	b.n	800c3e0 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c388:	7bbb      	ldrb	r3, [r7, #14]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d00c      	beq.n	800c3a8 <USBD_StdEPReq+0x80>
 800c38e:	7bbb      	ldrb	r3, [r7, #14]
 800c390:	2b80      	cmp	r3, #128	; 0x80
 800c392:	d009      	beq.n	800c3a8 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800c394:	7bbb      	ldrb	r3, [r7, #14]
 800c396:	4619      	mov	r1, r3
 800c398:	6878      	ldr	r0, [r7, #4]
 800c39a:	f004 fadf 	bl	801095c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c39e:	2180      	movs	r1, #128	; 0x80
 800c3a0:	6878      	ldr	r0, [r7, #4]
 800c3a2:	f004 fadb 	bl	801095c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c3a6:	e020      	b.n	800c3ea <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800c3a8:	6839      	ldr	r1, [r7, #0]
 800c3aa:	6878      	ldr	r0, [r7, #4]
 800c3ac:	f000 fc38 	bl	800cc20 <USBD_CtlError>
        break;
 800c3b0:	e01b      	b.n	800c3ea <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c3b2:	683b      	ldr	r3, [r7, #0]
 800c3b4:	885b      	ldrh	r3, [r3, #2]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d10e      	bne.n	800c3d8 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c3ba:	7bbb      	ldrb	r3, [r7, #14]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d00b      	beq.n	800c3d8 <USBD_StdEPReq+0xb0>
 800c3c0:	7bbb      	ldrb	r3, [r7, #14]
 800c3c2:	2b80      	cmp	r3, #128	; 0x80
 800c3c4:	d008      	beq.n	800c3d8 <USBD_StdEPReq+0xb0>
 800c3c6:	683b      	ldr	r3, [r7, #0]
 800c3c8:	88db      	ldrh	r3, [r3, #6]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d104      	bne.n	800c3d8 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800c3ce:	7bbb      	ldrb	r3, [r7, #14]
 800c3d0:	4619      	mov	r1, r3
 800c3d2:	6878      	ldr	r0, [r7, #4]
 800c3d4:	f004 fac2 	bl	801095c <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800c3d8:	6878      	ldr	r0, [r7, #4]
 800c3da:	f000 fcec 	bl	800cdb6 <USBD_CtlSendStatus>

        break;
 800c3de:	e004      	b.n	800c3ea <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800c3e0:	6839      	ldr	r1, [r7, #0]
 800c3e2:	6878      	ldr	r0, [r7, #4]
 800c3e4:	f000 fc1c 	bl	800cc20 <USBD_CtlError>
        break;
 800c3e8:	bf00      	nop
      }
      break;
 800c3ea:	e0e7      	b.n	800c5bc <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3f2:	2b02      	cmp	r3, #2
 800c3f4:	d002      	beq.n	800c3fc <USBD_StdEPReq+0xd4>
 800c3f6:	2b03      	cmp	r3, #3
 800c3f8:	d015      	beq.n	800c426 <USBD_StdEPReq+0xfe>
 800c3fa:	e02d      	b.n	800c458 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c3fc:	7bbb      	ldrb	r3, [r7, #14]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d00c      	beq.n	800c41c <USBD_StdEPReq+0xf4>
 800c402:	7bbb      	ldrb	r3, [r7, #14]
 800c404:	2b80      	cmp	r3, #128	; 0x80
 800c406:	d009      	beq.n	800c41c <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800c408:	7bbb      	ldrb	r3, [r7, #14]
 800c40a:	4619      	mov	r1, r3
 800c40c:	6878      	ldr	r0, [r7, #4]
 800c40e:	f004 faa5 	bl	801095c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c412:	2180      	movs	r1, #128	; 0x80
 800c414:	6878      	ldr	r0, [r7, #4]
 800c416:	f004 faa1 	bl	801095c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c41a:	e023      	b.n	800c464 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800c41c:	6839      	ldr	r1, [r7, #0]
 800c41e:	6878      	ldr	r0, [r7, #4]
 800c420:	f000 fbfe 	bl	800cc20 <USBD_CtlError>
        break;
 800c424:	e01e      	b.n	800c464 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c426:	683b      	ldr	r3, [r7, #0]
 800c428:	885b      	ldrh	r3, [r3, #2]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d119      	bne.n	800c462 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800c42e:	7bbb      	ldrb	r3, [r7, #14]
 800c430:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c434:	2b00      	cmp	r3, #0
 800c436:	d004      	beq.n	800c442 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c438:	7bbb      	ldrb	r3, [r7, #14]
 800c43a:	4619      	mov	r1, r3
 800c43c:	6878      	ldr	r0, [r7, #4]
 800c43e:	f004 faac 	bl	801099a <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800c442:	6878      	ldr	r0, [r7, #4]
 800c444:	f000 fcb7 	bl	800cdb6 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c44e:	689b      	ldr	r3, [r3, #8]
 800c450:	6839      	ldr	r1, [r7, #0]
 800c452:	6878      	ldr	r0, [r7, #4]
 800c454:	4798      	blx	r3
        }
        break;
 800c456:	e004      	b.n	800c462 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800c458:	6839      	ldr	r1, [r7, #0]
 800c45a:	6878      	ldr	r0, [r7, #4]
 800c45c:	f000 fbe0 	bl	800cc20 <USBD_CtlError>
        break;
 800c460:	e000      	b.n	800c464 <USBD_StdEPReq+0x13c>
        break;
 800c462:	bf00      	nop
      }
      break;
 800c464:	e0aa      	b.n	800c5bc <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c46c:	2b02      	cmp	r3, #2
 800c46e:	d002      	beq.n	800c476 <USBD_StdEPReq+0x14e>
 800c470:	2b03      	cmp	r3, #3
 800c472:	d032      	beq.n	800c4da <USBD_StdEPReq+0x1b2>
 800c474:	e097      	b.n	800c5a6 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c476:	7bbb      	ldrb	r3, [r7, #14]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d007      	beq.n	800c48c <USBD_StdEPReq+0x164>
 800c47c:	7bbb      	ldrb	r3, [r7, #14]
 800c47e:	2b80      	cmp	r3, #128	; 0x80
 800c480:	d004      	beq.n	800c48c <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800c482:	6839      	ldr	r1, [r7, #0]
 800c484:	6878      	ldr	r0, [r7, #4]
 800c486:	f000 fbcb 	bl	800cc20 <USBD_CtlError>
          break;
 800c48a:	e091      	b.n	800c5b0 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c48c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c490:	2b00      	cmp	r3, #0
 800c492:	da0b      	bge.n	800c4ac <USBD_StdEPReq+0x184>
 800c494:	7bbb      	ldrb	r3, [r7, #14]
 800c496:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c49a:	4613      	mov	r3, r2
 800c49c:	009b      	lsls	r3, r3, #2
 800c49e:	4413      	add	r3, r2
 800c4a0:	009b      	lsls	r3, r3, #2
 800c4a2:	3310      	adds	r3, #16
 800c4a4:	687a      	ldr	r2, [r7, #4]
 800c4a6:	4413      	add	r3, r2
 800c4a8:	3304      	adds	r3, #4
 800c4aa:	e00b      	b.n	800c4c4 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800c4ac:	7bbb      	ldrb	r3, [r7, #14]
 800c4ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c4b2:	4613      	mov	r3, r2
 800c4b4:	009b      	lsls	r3, r3, #2
 800c4b6:	4413      	add	r3, r2
 800c4b8:	009b      	lsls	r3, r3, #2
 800c4ba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c4be:	687a      	ldr	r2, [r7, #4]
 800c4c0:	4413      	add	r3, r2
 800c4c2:	3304      	adds	r3, #4
 800c4c4:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800c4c6:	68bb      	ldr	r3, [r7, #8]
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	2202      	movs	r2, #2
 800c4d0:	4619      	mov	r1, r3
 800c4d2:	6878      	ldr	r0, [r7, #4]
 800c4d4:	f000 fc15 	bl	800cd02 <USBD_CtlSendData>
        break;
 800c4d8:	e06a      	b.n	800c5b0 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800c4da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	da11      	bge.n	800c506 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c4e2:	7bbb      	ldrb	r3, [r7, #14]
 800c4e4:	f003 020f 	and.w	r2, r3, #15
 800c4e8:	6879      	ldr	r1, [r7, #4]
 800c4ea:	4613      	mov	r3, r2
 800c4ec:	009b      	lsls	r3, r3, #2
 800c4ee:	4413      	add	r3, r2
 800c4f0:	009b      	lsls	r3, r3, #2
 800c4f2:	440b      	add	r3, r1
 800c4f4:	3324      	adds	r3, #36	; 0x24
 800c4f6:	881b      	ldrh	r3, [r3, #0]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d117      	bne.n	800c52c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800c4fc:	6839      	ldr	r1, [r7, #0]
 800c4fe:	6878      	ldr	r0, [r7, #4]
 800c500:	f000 fb8e 	bl	800cc20 <USBD_CtlError>
            break;
 800c504:	e054      	b.n	800c5b0 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c506:	7bbb      	ldrb	r3, [r7, #14]
 800c508:	f003 020f 	and.w	r2, r3, #15
 800c50c:	6879      	ldr	r1, [r7, #4]
 800c50e:	4613      	mov	r3, r2
 800c510:	009b      	lsls	r3, r3, #2
 800c512:	4413      	add	r3, r2
 800c514:	009b      	lsls	r3, r3, #2
 800c516:	440b      	add	r3, r1
 800c518:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c51c:	881b      	ldrh	r3, [r3, #0]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d104      	bne.n	800c52c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800c522:	6839      	ldr	r1, [r7, #0]
 800c524:	6878      	ldr	r0, [r7, #4]
 800c526:	f000 fb7b 	bl	800cc20 <USBD_CtlError>
            break;
 800c52a:	e041      	b.n	800c5b0 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c52c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c530:	2b00      	cmp	r3, #0
 800c532:	da0b      	bge.n	800c54c <USBD_StdEPReq+0x224>
 800c534:	7bbb      	ldrb	r3, [r7, #14]
 800c536:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c53a:	4613      	mov	r3, r2
 800c53c:	009b      	lsls	r3, r3, #2
 800c53e:	4413      	add	r3, r2
 800c540:	009b      	lsls	r3, r3, #2
 800c542:	3310      	adds	r3, #16
 800c544:	687a      	ldr	r2, [r7, #4]
 800c546:	4413      	add	r3, r2
 800c548:	3304      	adds	r3, #4
 800c54a:	e00b      	b.n	800c564 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800c54c:	7bbb      	ldrb	r3, [r7, #14]
 800c54e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c552:	4613      	mov	r3, r2
 800c554:	009b      	lsls	r3, r3, #2
 800c556:	4413      	add	r3, r2
 800c558:	009b      	lsls	r3, r3, #2
 800c55a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c55e:	687a      	ldr	r2, [r7, #4]
 800c560:	4413      	add	r3, r2
 800c562:	3304      	adds	r3, #4
 800c564:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c566:	7bbb      	ldrb	r3, [r7, #14]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d002      	beq.n	800c572 <USBD_StdEPReq+0x24a>
 800c56c:	7bbb      	ldrb	r3, [r7, #14]
 800c56e:	2b80      	cmp	r3, #128	; 0x80
 800c570:	d103      	bne.n	800c57a <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800c572:	68bb      	ldr	r3, [r7, #8]
 800c574:	2200      	movs	r2, #0
 800c576:	601a      	str	r2, [r3, #0]
 800c578:	e00e      	b.n	800c598 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c57a:	7bbb      	ldrb	r3, [r7, #14]
 800c57c:	4619      	mov	r1, r3
 800c57e:	6878      	ldr	r0, [r7, #4]
 800c580:	f004 fa2a 	bl	80109d8 <USBD_LL_IsStallEP>
 800c584:	4603      	mov	r3, r0
 800c586:	2b00      	cmp	r3, #0
 800c588:	d003      	beq.n	800c592 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800c58a:	68bb      	ldr	r3, [r7, #8]
 800c58c:	2201      	movs	r2, #1
 800c58e:	601a      	str	r2, [r3, #0]
 800c590:	e002      	b.n	800c598 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800c592:	68bb      	ldr	r3, [r7, #8]
 800c594:	2200      	movs	r2, #0
 800c596:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c598:	68bb      	ldr	r3, [r7, #8]
 800c59a:	2202      	movs	r2, #2
 800c59c:	4619      	mov	r1, r3
 800c59e:	6878      	ldr	r0, [r7, #4]
 800c5a0:	f000 fbaf 	bl	800cd02 <USBD_CtlSendData>
          break;
 800c5a4:	e004      	b.n	800c5b0 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800c5a6:	6839      	ldr	r1, [r7, #0]
 800c5a8:	6878      	ldr	r0, [r7, #4]
 800c5aa:	f000 fb39 	bl	800cc20 <USBD_CtlError>
        break;
 800c5ae:	bf00      	nop
      }
      break;
 800c5b0:	e004      	b.n	800c5bc <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800c5b2:	6839      	ldr	r1, [r7, #0]
 800c5b4:	6878      	ldr	r0, [r7, #4]
 800c5b6:	f000 fb33 	bl	800cc20 <USBD_CtlError>
      break;
 800c5ba:	bf00      	nop
    }
    break;
 800c5bc:	e004      	b.n	800c5c8 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800c5be:	6839      	ldr	r1, [r7, #0]
 800c5c0:	6878      	ldr	r0, [r7, #4]
 800c5c2:	f000 fb2d 	bl	800cc20 <USBD_CtlError>
    break;
 800c5c6:	bf00      	nop
  }

  return ret;
 800c5c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	3710      	adds	r7, #16
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	bd80      	pop	{r7, pc}
	...

0800c5d4 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b084      	sub	sp, #16
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
 800c5dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c5de:	2300      	movs	r3, #0
 800c5e0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	885b      	ldrh	r3, [r3, #2]
 800c5ee:	0a1b      	lsrs	r3, r3, #8
 800c5f0:	b29b      	uxth	r3, r3
 800c5f2:	3b01      	subs	r3, #1
 800c5f4:	2b06      	cmp	r3, #6
 800c5f6:	f200 8128 	bhi.w	800c84a <USBD_GetDescriptor+0x276>
 800c5fa:	a201      	add	r2, pc, #4	; (adr r2, 800c600 <USBD_GetDescriptor+0x2c>)
 800c5fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c600:	0800c61d 	.word	0x0800c61d
 800c604:	0800c635 	.word	0x0800c635
 800c608:	0800c675 	.word	0x0800c675
 800c60c:	0800c84b 	.word	0x0800c84b
 800c610:	0800c84b 	.word	0x0800c84b
 800c614:	0800c7eb 	.word	0x0800c7eb
 800c618:	0800c817 	.word	0x0800c817
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	687a      	ldr	r2, [r7, #4]
 800c626:	7c12      	ldrb	r2, [r2, #16]
 800c628:	f107 0108 	add.w	r1, r7, #8
 800c62c:	4610      	mov	r0, r2
 800c62e:	4798      	blx	r3
 800c630:	60f8      	str	r0, [r7, #12]
    break;
 800c632:	e112      	b.n	800c85a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	7c1b      	ldrb	r3, [r3, #16]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d10d      	bne.n	800c658 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c644:	f107 0208 	add.w	r2, r7, #8
 800c648:	4610      	mov	r0, r2
 800c64a:	4798      	blx	r3
 800c64c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	3301      	adds	r3, #1
 800c652:	2202      	movs	r2, #2
 800c654:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800c656:	e100      	b.n	800c85a <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c65e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c660:	f107 0208 	add.w	r2, r7, #8
 800c664:	4610      	mov	r0, r2
 800c666:	4798      	blx	r3
 800c668:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	3301      	adds	r3, #1
 800c66e:	2202      	movs	r2, #2
 800c670:	701a      	strb	r2, [r3, #0]
    break;
 800c672:	e0f2      	b.n	800c85a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	885b      	ldrh	r3, [r3, #2]
 800c678:	b2db      	uxtb	r3, r3
 800c67a:	2b05      	cmp	r3, #5
 800c67c:	f200 80ac 	bhi.w	800c7d8 <USBD_GetDescriptor+0x204>
 800c680:	a201      	add	r2, pc, #4	; (adr r2, 800c688 <USBD_GetDescriptor+0xb4>)
 800c682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c686:	bf00      	nop
 800c688:	0800c6a1 	.word	0x0800c6a1
 800c68c:	0800c6d5 	.word	0x0800c6d5
 800c690:	0800c709 	.word	0x0800c709
 800c694:	0800c73d 	.word	0x0800c73d
 800c698:	0800c771 	.word	0x0800c771
 800c69c:	0800c7a5 	.word	0x0800c7a5
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c6a6:	685b      	ldr	r3, [r3, #4]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d00b      	beq.n	800c6c4 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c6b2:	685b      	ldr	r3, [r3, #4]
 800c6b4:	687a      	ldr	r2, [r7, #4]
 800c6b6:	7c12      	ldrb	r2, [r2, #16]
 800c6b8:	f107 0108 	add.w	r1, r7, #8
 800c6bc:	4610      	mov	r0, r2
 800c6be:	4798      	blx	r3
 800c6c0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c6c2:	e091      	b.n	800c7e8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c6c4:	6839      	ldr	r1, [r7, #0]
 800c6c6:	6878      	ldr	r0, [r7, #4]
 800c6c8:	f000 faaa 	bl	800cc20 <USBD_CtlError>
        err++;
 800c6cc:	7afb      	ldrb	r3, [r7, #11]
 800c6ce:	3301      	adds	r3, #1
 800c6d0:	72fb      	strb	r3, [r7, #11]
      break;
 800c6d2:	e089      	b.n	800c7e8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c6da:	689b      	ldr	r3, [r3, #8]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d00b      	beq.n	800c6f8 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c6e6:	689b      	ldr	r3, [r3, #8]
 800c6e8:	687a      	ldr	r2, [r7, #4]
 800c6ea:	7c12      	ldrb	r2, [r2, #16]
 800c6ec:	f107 0108 	add.w	r1, r7, #8
 800c6f0:	4610      	mov	r0, r2
 800c6f2:	4798      	blx	r3
 800c6f4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c6f6:	e077      	b.n	800c7e8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c6f8:	6839      	ldr	r1, [r7, #0]
 800c6fa:	6878      	ldr	r0, [r7, #4]
 800c6fc:	f000 fa90 	bl	800cc20 <USBD_CtlError>
        err++;
 800c700:	7afb      	ldrb	r3, [r7, #11]
 800c702:	3301      	adds	r3, #1
 800c704:	72fb      	strb	r3, [r7, #11]
      break;
 800c706:	e06f      	b.n	800c7e8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c70e:	68db      	ldr	r3, [r3, #12]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d00b      	beq.n	800c72c <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c71a:	68db      	ldr	r3, [r3, #12]
 800c71c:	687a      	ldr	r2, [r7, #4]
 800c71e:	7c12      	ldrb	r2, [r2, #16]
 800c720:	f107 0108 	add.w	r1, r7, #8
 800c724:	4610      	mov	r0, r2
 800c726:	4798      	blx	r3
 800c728:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c72a:	e05d      	b.n	800c7e8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c72c:	6839      	ldr	r1, [r7, #0]
 800c72e:	6878      	ldr	r0, [r7, #4]
 800c730:	f000 fa76 	bl	800cc20 <USBD_CtlError>
        err++;
 800c734:	7afb      	ldrb	r3, [r7, #11]
 800c736:	3301      	adds	r3, #1
 800c738:	72fb      	strb	r3, [r7, #11]
      break;
 800c73a:	e055      	b.n	800c7e8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c742:	691b      	ldr	r3, [r3, #16]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d00b      	beq.n	800c760 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c74e:	691b      	ldr	r3, [r3, #16]
 800c750:	687a      	ldr	r2, [r7, #4]
 800c752:	7c12      	ldrb	r2, [r2, #16]
 800c754:	f107 0108 	add.w	r1, r7, #8
 800c758:	4610      	mov	r0, r2
 800c75a:	4798      	blx	r3
 800c75c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c75e:	e043      	b.n	800c7e8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c760:	6839      	ldr	r1, [r7, #0]
 800c762:	6878      	ldr	r0, [r7, #4]
 800c764:	f000 fa5c 	bl	800cc20 <USBD_CtlError>
        err++;
 800c768:	7afb      	ldrb	r3, [r7, #11]
 800c76a:	3301      	adds	r3, #1
 800c76c:	72fb      	strb	r3, [r7, #11]
      break;
 800c76e:	e03b      	b.n	800c7e8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c776:	695b      	ldr	r3, [r3, #20]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d00b      	beq.n	800c794 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c782:	695b      	ldr	r3, [r3, #20]
 800c784:	687a      	ldr	r2, [r7, #4]
 800c786:	7c12      	ldrb	r2, [r2, #16]
 800c788:	f107 0108 	add.w	r1, r7, #8
 800c78c:	4610      	mov	r0, r2
 800c78e:	4798      	blx	r3
 800c790:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c792:	e029      	b.n	800c7e8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c794:	6839      	ldr	r1, [r7, #0]
 800c796:	6878      	ldr	r0, [r7, #4]
 800c798:	f000 fa42 	bl	800cc20 <USBD_CtlError>
        err++;
 800c79c:	7afb      	ldrb	r3, [r7, #11]
 800c79e:	3301      	adds	r3, #1
 800c7a0:	72fb      	strb	r3, [r7, #11]
      break;
 800c7a2:	e021      	b.n	800c7e8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c7aa:	699b      	ldr	r3, [r3, #24]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d00b      	beq.n	800c7c8 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c7b6:	699b      	ldr	r3, [r3, #24]
 800c7b8:	687a      	ldr	r2, [r7, #4]
 800c7ba:	7c12      	ldrb	r2, [r2, #16]
 800c7bc:	f107 0108 	add.w	r1, r7, #8
 800c7c0:	4610      	mov	r0, r2
 800c7c2:	4798      	blx	r3
 800c7c4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c7c6:	e00f      	b.n	800c7e8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c7c8:	6839      	ldr	r1, [r7, #0]
 800c7ca:	6878      	ldr	r0, [r7, #4]
 800c7cc:	f000 fa28 	bl	800cc20 <USBD_CtlError>
        err++;
 800c7d0:	7afb      	ldrb	r3, [r7, #11]
 800c7d2:	3301      	adds	r3, #1
 800c7d4:	72fb      	strb	r3, [r7, #11]
      break;
 800c7d6:	e007      	b.n	800c7e8 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800c7d8:	6839      	ldr	r1, [r7, #0]
 800c7da:	6878      	ldr	r0, [r7, #4]
 800c7dc:	f000 fa20 	bl	800cc20 <USBD_CtlError>
      err++;
 800c7e0:	7afb      	ldrb	r3, [r7, #11]
 800c7e2:	3301      	adds	r3, #1
 800c7e4:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800c7e6:	bf00      	nop
    }
    break;
 800c7e8:	e037      	b.n	800c85a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	7c1b      	ldrb	r3, [r3, #16]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d109      	bne.n	800c806 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7fa:	f107 0208 	add.w	r2, r7, #8
 800c7fe:	4610      	mov	r0, r2
 800c800:	4798      	blx	r3
 800c802:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800c804:	e029      	b.n	800c85a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800c806:	6839      	ldr	r1, [r7, #0]
 800c808:	6878      	ldr	r0, [r7, #4]
 800c80a:	f000 fa09 	bl	800cc20 <USBD_CtlError>
      err++;
 800c80e:	7afb      	ldrb	r3, [r7, #11]
 800c810:	3301      	adds	r3, #1
 800c812:	72fb      	strb	r3, [r7, #11]
    break;
 800c814:	e021      	b.n	800c85a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	7c1b      	ldrb	r3, [r3, #16]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d10d      	bne.n	800c83a <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c826:	f107 0208 	add.w	r2, r7, #8
 800c82a:	4610      	mov	r0, r2
 800c82c:	4798      	blx	r3
 800c82e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	3301      	adds	r3, #1
 800c834:	2207      	movs	r2, #7
 800c836:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800c838:	e00f      	b.n	800c85a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800c83a:	6839      	ldr	r1, [r7, #0]
 800c83c:	6878      	ldr	r0, [r7, #4]
 800c83e:	f000 f9ef 	bl	800cc20 <USBD_CtlError>
      err++;
 800c842:	7afb      	ldrb	r3, [r7, #11]
 800c844:	3301      	adds	r3, #1
 800c846:	72fb      	strb	r3, [r7, #11]
    break;
 800c848:	e007      	b.n	800c85a <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800c84a:	6839      	ldr	r1, [r7, #0]
 800c84c:	6878      	ldr	r0, [r7, #4]
 800c84e:	f000 f9e7 	bl	800cc20 <USBD_CtlError>
    err++;
 800c852:	7afb      	ldrb	r3, [r7, #11]
 800c854:	3301      	adds	r3, #1
 800c856:	72fb      	strb	r3, [r7, #11]
    break;
 800c858:	bf00      	nop
  }

  if (err != 0U)
 800c85a:	7afb      	ldrb	r3, [r7, #11]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d11e      	bne.n	800c89e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800c860:	683b      	ldr	r3, [r7, #0]
 800c862:	88db      	ldrh	r3, [r3, #6]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d016      	beq.n	800c896 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800c868:	893b      	ldrh	r3, [r7, #8]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d00e      	beq.n	800c88c <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800c86e:	683b      	ldr	r3, [r7, #0]
 800c870:	88da      	ldrh	r2, [r3, #6]
 800c872:	893b      	ldrh	r3, [r7, #8]
 800c874:	4293      	cmp	r3, r2
 800c876:	bf28      	it	cs
 800c878:	4613      	movcs	r3, r2
 800c87a:	b29b      	uxth	r3, r3
 800c87c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800c87e:	893b      	ldrh	r3, [r7, #8]
 800c880:	461a      	mov	r2, r3
 800c882:	68f9      	ldr	r1, [r7, #12]
 800c884:	6878      	ldr	r0, [r7, #4]
 800c886:	f000 fa3c 	bl	800cd02 <USBD_CtlSendData>
 800c88a:	e009      	b.n	800c8a0 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800c88c:	6839      	ldr	r1, [r7, #0]
 800c88e:	6878      	ldr	r0, [r7, #4]
 800c890:	f000 f9c6 	bl	800cc20 <USBD_CtlError>
 800c894:	e004      	b.n	800c8a0 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800c896:	6878      	ldr	r0, [r7, #4]
 800c898:	f000 fa8d 	bl	800cdb6 <USBD_CtlSendStatus>
 800c89c:	e000      	b.n	800c8a0 <USBD_GetDescriptor+0x2cc>
    return;
 800c89e:	bf00      	nop
    }
  }
}
 800c8a0:	3710      	adds	r7, #16
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bd80      	pop	{r7, pc}
 800c8a6:	bf00      	nop

0800c8a8 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b084      	sub	sp, #16
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
 800c8b0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c8b2:	683b      	ldr	r3, [r7, #0]
 800c8b4:	889b      	ldrh	r3, [r3, #4]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d130      	bne.n	800c91c <USBD_SetAddress+0x74>
 800c8ba:	683b      	ldr	r3, [r7, #0]
 800c8bc:	88db      	ldrh	r3, [r3, #6]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d12c      	bne.n	800c91c <USBD_SetAddress+0x74>
 800c8c2:	683b      	ldr	r3, [r7, #0]
 800c8c4:	885b      	ldrh	r3, [r3, #2]
 800c8c6:	2b7f      	cmp	r3, #127	; 0x7f
 800c8c8:	d828      	bhi.n	800c91c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c8ca:	683b      	ldr	r3, [r7, #0]
 800c8cc:	885b      	ldrh	r3, [r3, #2]
 800c8ce:	b2db      	uxtb	r3, r3
 800c8d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8d4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8dc:	2b03      	cmp	r3, #3
 800c8de:	d104      	bne.n	800c8ea <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800c8e0:	6839      	ldr	r1, [r7, #0]
 800c8e2:	6878      	ldr	r0, [r7, #4]
 800c8e4:	f000 f99c 	bl	800cc20 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8e8:	e01c      	b.n	800c924 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	7bfa      	ldrb	r2, [r7, #15]
 800c8ee:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c8f2:	7bfb      	ldrb	r3, [r7, #15]
 800c8f4:	4619      	mov	r1, r3
 800c8f6:	6878      	ldr	r0, [r7, #4]
 800c8f8:	f004 f89a 	bl	8010a30 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c8fc:	6878      	ldr	r0, [r7, #4]
 800c8fe:	f000 fa5a 	bl	800cdb6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c902:	7bfb      	ldrb	r3, [r7, #15]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d004      	beq.n	800c912 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	2202      	movs	r2, #2
 800c90c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c910:	e008      	b.n	800c924 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	2201      	movs	r2, #1
 800c916:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c91a:	e003      	b.n	800c924 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c91c:	6839      	ldr	r1, [r7, #0]
 800c91e:	6878      	ldr	r0, [r7, #4]
 800c920:	f000 f97e 	bl	800cc20 <USBD_CtlError>
  }
}
 800c924:	bf00      	nop
 800c926:	3710      	adds	r7, #16
 800c928:	46bd      	mov	sp, r7
 800c92a:	bd80      	pop	{r7, pc}

0800c92c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b084      	sub	sp, #16
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
 800c934:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c936:	2300      	movs	r3, #0
 800c938:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	885b      	ldrh	r3, [r3, #2]
 800c93e:	b2da      	uxtb	r2, r3
 800c940:	4b4b      	ldr	r3, [pc, #300]	; (800ca70 <USBD_SetConfig+0x144>)
 800c942:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c944:	4b4a      	ldr	r3, [pc, #296]	; (800ca70 <USBD_SetConfig+0x144>)
 800c946:	781b      	ldrb	r3, [r3, #0]
 800c948:	2b01      	cmp	r3, #1
 800c94a:	d905      	bls.n	800c958 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c94c:	6839      	ldr	r1, [r7, #0]
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	f000 f966 	bl	800cc20 <USBD_CtlError>
    return USBD_FAIL;
 800c954:	2303      	movs	r3, #3
 800c956:	e087      	b.n	800ca68 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c95e:	2b02      	cmp	r3, #2
 800c960:	d002      	beq.n	800c968 <USBD_SetConfig+0x3c>
 800c962:	2b03      	cmp	r3, #3
 800c964:	d025      	beq.n	800c9b2 <USBD_SetConfig+0x86>
 800c966:	e071      	b.n	800ca4c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800c968:	4b41      	ldr	r3, [pc, #260]	; (800ca70 <USBD_SetConfig+0x144>)
 800c96a:	781b      	ldrb	r3, [r3, #0]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d01c      	beq.n	800c9aa <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800c970:	4b3f      	ldr	r3, [pc, #252]	; (800ca70 <USBD_SetConfig+0x144>)
 800c972:	781b      	ldrb	r3, [r3, #0]
 800c974:	461a      	mov	r2, r3
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800c97a:	4b3d      	ldr	r3, [pc, #244]	; (800ca70 <USBD_SetConfig+0x144>)
 800c97c:	781b      	ldrb	r3, [r3, #0]
 800c97e:	4619      	mov	r1, r3
 800c980:	6878      	ldr	r0, [r7, #4]
 800c982:	f7ff f9a7 	bl	800bcd4 <USBD_SetClassConfig>
 800c986:	4603      	mov	r3, r0
 800c988:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800c98a:	7bfb      	ldrb	r3, [r7, #15]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d004      	beq.n	800c99a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800c990:	6839      	ldr	r1, [r7, #0]
 800c992:	6878      	ldr	r0, [r7, #4]
 800c994:	f000 f944 	bl	800cc20 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800c998:	e065      	b.n	800ca66 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800c99a:	6878      	ldr	r0, [r7, #4]
 800c99c:	f000 fa0b 	bl	800cdb6 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	2203      	movs	r2, #3
 800c9a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800c9a8:	e05d      	b.n	800ca66 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800c9aa:	6878      	ldr	r0, [r7, #4]
 800c9ac:	f000 fa03 	bl	800cdb6 <USBD_CtlSendStatus>
    break;
 800c9b0:	e059      	b.n	800ca66 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800c9b2:	4b2f      	ldr	r3, [pc, #188]	; (800ca70 <USBD_SetConfig+0x144>)
 800c9b4:	781b      	ldrb	r3, [r3, #0]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d112      	bne.n	800c9e0 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	2202      	movs	r2, #2
 800c9be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800c9c2:	4b2b      	ldr	r3, [pc, #172]	; (800ca70 <USBD_SetConfig+0x144>)
 800c9c4:	781b      	ldrb	r3, [r3, #0]
 800c9c6:	461a      	mov	r2, r3
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c9cc:	4b28      	ldr	r3, [pc, #160]	; (800ca70 <USBD_SetConfig+0x144>)
 800c9ce:	781b      	ldrb	r3, [r3, #0]
 800c9d0:	4619      	mov	r1, r3
 800c9d2:	6878      	ldr	r0, [r7, #4]
 800c9d4:	f7ff f99a 	bl	800bd0c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800c9d8:	6878      	ldr	r0, [r7, #4]
 800c9da:	f000 f9ec 	bl	800cdb6 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800c9de:	e042      	b.n	800ca66 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800c9e0:	4b23      	ldr	r3, [pc, #140]	; (800ca70 <USBD_SetConfig+0x144>)
 800c9e2:	781b      	ldrb	r3, [r3, #0]
 800c9e4:	461a      	mov	r2, r3
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	685b      	ldr	r3, [r3, #4]
 800c9ea:	429a      	cmp	r2, r3
 800c9ec:	d02a      	beq.n	800ca44 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	685b      	ldr	r3, [r3, #4]
 800c9f2:	b2db      	uxtb	r3, r3
 800c9f4:	4619      	mov	r1, r3
 800c9f6:	6878      	ldr	r0, [r7, #4]
 800c9f8:	f7ff f988 	bl	800bd0c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800c9fc:	4b1c      	ldr	r3, [pc, #112]	; (800ca70 <USBD_SetConfig+0x144>)
 800c9fe:	781b      	ldrb	r3, [r3, #0]
 800ca00:	461a      	mov	r2, r3
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800ca06:	4b1a      	ldr	r3, [pc, #104]	; (800ca70 <USBD_SetConfig+0x144>)
 800ca08:	781b      	ldrb	r3, [r3, #0]
 800ca0a:	4619      	mov	r1, r3
 800ca0c:	6878      	ldr	r0, [r7, #4]
 800ca0e:	f7ff f961 	bl	800bcd4 <USBD_SetClassConfig>
 800ca12:	4603      	mov	r3, r0
 800ca14:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800ca16:	7bfb      	ldrb	r3, [r7, #15]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d00f      	beq.n	800ca3c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800ca1c:	6839      	ldr	r1, [r7, #0]
 800ca1e:	6878      	ldr	r0, [r7, #4]
 800ca20:	f000 f8fe 	bl	800cc20 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	685b      	ldr	r3, [r3, #4]
 800ca28:	b2db      	uxtb	r3, r3
 800ca2a:	4619      	mov	r1, r3
 800ca2c:	6878      	ldr	r0, [r7, #4]
 800ca2e:	f7ff f96d 	bl	800bd0c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	2202      	movs	r2, #2
 800ca36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800ca3a:	e014      	b.n	800ca66 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800ca3c:	6878      	ldr	r0, [r7, #4]
 800ca3e:	f000 f9ba 	bl	800cdb6 <USBD_CtlSendStatus>
    break;
 800ca42:	e010      	b.n	800ca66 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800ca44:	6878      	ldr	r0, [r7, #4]
 800ca46:	f000 f9b6 	bl	800cdb6 <USBD_CtlSendStatus>
    break;
 800ca4a:	e00c      	b.n	800ca66 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800ca4c:	6839      	ldr	r1, [r7, #0]
 800ca4e:	6878      	ldr	r0, [r7, #4]
 800ca50:	f000 f8e6 	bl	800cc20 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ca54:	4b06      	ldr	r3, [pc, #24]	; (800ca70 <USBD_SetConfig+0x144>)
 800ca56:	781b      	ldrb	r3, [r3, #0]
 800ca58:	4619      	mov	r1, r3
 800ca5a:	6878      	ldr	r0, [r7, #4]
 800ca5c:	f7ff f956 	bl	800bd0c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800ca60:	2303      	movs	r3, #3
 800ca62:	73fb      	strb	r3, [r7, #15]
    break;
 800ca64:	bf00      	nop
  }

  return ret;
 800ca66:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca68:	4618      	mov	r0, r3
 800ca6a:	3710      	adds	r7, #16
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	bd80      	pop	{r7, pc}
 800ca70:	20000674 	.word	0x20000674

0800ca74 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b082      	sub	sp, #8
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
 800ca7c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ca7e:	683b      	ldr	r3, [r7, #0]
 800ca80:	88db      	ldrh	r3, [r3, #6]
 800ca82:	2b01      	cmp	r3, #1
 800ca84:	d004      	beq.n	800ca90 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ca86:	6839      	ldr	r1, [r7, #0]
 800ca88:	6878      	ldr	r0, [r7, #4]
 800ca8a:	f000 f8c9 	bl	800cc20 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800ca8e:	e021      	b.n	800cad4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca96:	2b01      	cmp	r3, #1
 800ca98:	db17      	blt.n	800caca <USBD_GetConfig+0x56>
 800ca9a:	2b02      	cmp	r3, #2
 800ca9c:	dd02      	ble.n	800caa4 <USBD_GetConfig+0x30>
 800ca9e:	2b03      	cmp	r3, #3
 800caa0:	d00b      	beq.n	800caba <USBD_GetConfig+0x46>
 800caa2:	e012      	b.n	800caca <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2200      	movs	r2, #0
 800caa8:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	3308      	adds	r3, #8
 800caae:	2201      	movs	r2, #1
 800cab0:	4619      	mov	r1, r3
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	f000 f925 	bl	800cd02 <USBD_CtlSendData>
      break;
 800cab8:	e00c      	b.n	800cad4 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	3304      	adds	r3, #4
 800cabe:	2201      	movs	r2, #1
 800cac0:	4619      	mov	r1, r3
 800cac2:	6878      	ldr	r0, [r7, #4]
 800cac4:	f000 f91d 	bl	800cd02 <USBD_CtlSendData>
      break;
 800cac8:	e004      	b.n	800cad4 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800caca:	6839      	ldr	r1, [r7, #0]
 800cacc:	6878      	ldr	r0, [r7, #4]
 800cace:	f000 f8a7 	bl	800cc20 <USBD_CtlError>
      break;
 800cad2:	bf00      	nop
}
 800cad4:	bf00      	nop
 800cad6:	3708      	adds	r7, #8
 800cad8:	46bd      	mov	sp, r7
 800cada:	bd80      	pop	{r7, pc}

0800cadc <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b082      	sub	sp, #8
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]
 800cae4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800caec:	3b01      	subs	r3, #1
 800caee:	2b02      	cmp	r3, #2
 800caf0:	d81e      	bhi.n	800cb30 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	88db      	ldrh	r3, [r3, #6]
 800caf6:	2b02      	cmp	r3, #2
 800caf8:	d004      	beq.n	800cb04 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800cafa:	6839      	ldr	r1, [r7, #0]
 800cafc:	6878      	ldr	r0, [r7, #4]
 800cafe:	f000 f88f 	bl	800cc20 <USBD_CtlError>
      break;
 800cb02:	e01a      	b.n	800cb3a <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	2201      	movs	r2, #1
 800cb08:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d005      	beq.n	800cb20 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	68db      	ldr	r3, [r3, #12]
 800cb18:	f043 0202 	orr.w	r2, r3, #2
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	330c      	adds	r3, #12
 800cb24:	2202      	movs	r2, #2
 800cb26:	4619      	mov	r1, r3
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	f000 f8ea 	bl	800cd02 <USBD_CtlSendData>
    break;
 800cb2e:	e004      	b.n	800cb3a <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800cb30:	6839      	ldr	r1, [r7, #0]
 800cb32:	6878      	ldr	r0, [r7, #4]
 800cb34:	f000 f874 	bl	800cc20 <USBD_CtlError>
    break;
 800cb38:	bf00      	nop
  }
}
 800cb3a:	bf00      	nop
 800cb3c:	3708      	adds	r7, #8
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	bd80      	pop	{r7, pc}

0800cb42 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb42:	b580      	push	{r7, lr}
 800cb44:	b082      	sub	sp, #8
 800cb46:	af00      	add	r7, sp, #0
 800cb48:	6078      	str	r0, [r7, #4]
 800cb4a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cb4c:	683b      	ldr	r3, [r7, #0]
 800cb4e:	885b      	ldrh	r3, [r3, #2]
 800cb50:	2b01      	cmp	r3, #1
 800cb52:	d106      	bne.n	800cb62 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2201      	movs	r2, #1
 800cb58:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cb5c:	6878      	ldr	r0, [r7, #4]
 800cb5e:	f000 f92a 	bl	800cdb6 <USBD_CtlSendStatus>
  }
}
 800cb62:	bf00      	nop
 800cb64:	3708      	adds	r7, #8
 800cb66:	46bd      	mov	sp, r7
 800cb68:	bd80      	pop	{r7, pc}

0800cb6a <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb6a:	b580      	push	{r7, lr}
 800cb6c:	b082      	sub	sp, #8
 800cb6e:	af00      	add	r7, sp, #0
 800cb70:	6078      	str	r0, [r7, #4]
 800cb72:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb7a:	3b01      	subs	r3, #1
 800cb7c:	2b02      	cmp	r3, #2
 800cb7e:	d80b      	bhi.n	800cb98 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cb80:	683b      	ldr	r3, [r7, #0]
 800cb82:	885b      	ldrh	r3, [r3, #2]
 800cb84:	2b01      	cmp	r3, #1
 800cb86:	d10c      	bne.n	800cba2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cb90:	6878      	ldr	r0, [r7, #4]
 800cb92:	f000 f910 	bl	800cdb6 <USBD_CtlSendStatus>
      }
      break;
 800cb96:	e004      	b.n	800cba2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800cb98:	6839      	ldr	r1, [r7, #0]
 800cb9a:	6878      	ldr	r0, [r7, #4]
 800cb9c:	f000 f840 	bl	800cc20 <USBD_CtlError>
      break;
 800cba0:	e000      	b.n	800cba4 <USBD_ClrFeature+0x3a>
      break;
 800cba2:	bf00      	nop
  }
}
 800cba4:	bf00      	nop
 800cba6:	3708      	adds	r7, #8
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	bd80      	pop	{r7, pc}

0800cbac <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b084      	sub	sp, #16
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
 800cbb4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cbb6:	683b      	ldr	r3, [r7, #0]
 800cbb8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	781a      	ldrb	r2, [r3, #0]
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	3301      	adds	r3, #1
 800cbc6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	781a      	ldrb	r2, [r3, #0]
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	3301      	adds	r3, #1
 800cbd4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cbd6:	68f8      	ldr	r0, [r7, #12]
 800cbd8:	f7ff fad3 	bl	800c182 <SWAPBYTE>
 800cbdc:	4603      	mov	r3, r0
 800cbde:	461a      	mov	r2, r3
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	3301      	adds	r3, #1
 800cbe8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	3301      	adds	r3, #1
 800cbee:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cbf0:	68f8      	ldr	r0, [r7, #12]
 800cbf2:	f7ff fac6 	bl	800c182 <SWAPBYTE>
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	461a      	mov	r2, r3
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	3301      	adds	r3, #1
 800cc02:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	3301      	adds	r3, #1
 800cc08:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cc0a:	68f8      	ldr	r0, [r7, #12]
 800cc0c:	f7ff fab9 	bl	800c182 <SWAPBYTE>
 800cc10:	4603      	mov	r3, r0
 800cc12:	461a      	mov	r2, r3
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	80da      	strh	r2, [r3, #6]
}
 800cc18:	bf00      	nop
 800cc1a:	3710      	adds	r7, #16
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	bd80      	pop	{r7, pc}

0800cc20 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b082      	sub	sp, #8
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
 800cc28:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cc2a:	2180      	movs	r1, #128	; 0x80
 800cc2c:	6878      	ldr	r0, [r7, #4]
 800cc2e:	f003 fe95 	bl	801095c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cc32:	2100      	movs	r1, #0
 800cc34:	6878      	ldr	r0, [r7, #4]
 800cc36:	f003 fe91 	bl	801095c <USBD_LL_StallEP>
}
 800cc3a:	bf00      	nop
 800cc3c:	3708      	adds	r7, #8
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	bd80      	pop	{r7, pc}

0800cc42 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cc42:	b580      	push	{r7, lr}
 800cc44:	b086      	sub	sp, #24
 800cc46:	af00      	add	r7, sp, #0
 800cc48:	60f8      	str	r0, [r7, #12]
 800cc4a:	60b9      	str	r1, [r7, #8]
 800cc4c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cc4e:	2300      	movs	r3, #0
 800cc50:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d036      	beq.n	800ccc6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800cc5c:	6938      	ldr	r0, [r7, #16]
 800cc5e:	f000 f836 	bl	800ccce <USBD_GetLen>
 800cc62:	4603      	mov	r3, r0
 800cc64:	3301      	adds	r3, #1
 800cc66:	b29b      	uxth	r3, r3
 800cc68:	005b      	lsls	r3, r3, #1
 800cc6a:	b29a      	uxth	r2, r3
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800cc70:	7dfb      	ldrb	r3, [r7, #23]
 800cc72:	68ba      	ldr	r2, [r7, #8]
 800cc74:	4413      	add	r3, r2
 800cc76:	687a      	ldr	r2, [r7, #4]
 800cc78:	7812      	ldrb	r2, [r2, #0]
 800cc7a:	701a      	strb	r2, [r3, #0]
  idx++;
 800cc7c:	7dfb      	ldrb	r3, [r7, #23]
 800cc7e:	3301      	adds	r3, #1
 800cc80:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cc82:	7dfb      	ldrb	r3, [r7, #23]
 800cc84:	68ba      	ldr	r2, [r7, #8]
 800cc86:	4413      	add	r3, r2
 800cc88:	2203      	movs	r2, #3
 800cc8a:	701a      	strb	r2, [r3, #0]
  idx++;
 800cc8c:	7dfb      	ldrb	r3, [r7, #23]
 800cc8e:	3301      	adds	r3, #1
 800cc90:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cc92:	e013      	b.n	800ccbc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800cc94:	7dfb      	ldrb	r3, [r7, #23]
 800cc96:	68ba      	ldr	r2, [r7, #8]
 800cc98:	4413      	add	r3, r2
 800cc9a:	693a      	ldr	r2, [r7, #16]
 800cc9c:	7812      	ldrb	r2, [r2, #0]
 800cc9e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800cca0:	693b      	ldr	r3, [r7, #16]
 800cca2:	3301      	adds	r3, #1
 800cca4:	613b      	str	r3, [r7, #16]
    idx++;
 800cca6:	7dfb      	ldrb	r3, [r7, #23]
 800cca8:	3301      	adds	r3, #1
 800ccaa:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ccac:	7dfb      	ldrb	r3, [r7, #23]
 800ccae:	68ba      	ldr	r2, [r7, #8]
 800ccb0:	4413      	add	r3, r2
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	701a      	strb	r2, [r3, #0]
    idx++;
 800ccb6:	7dfb      	ldrb	r3, [r7, #23]
 800ccb8:	3301      	adds	r3, #1
 800ccba:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ccbc:	693b      	ldr	r3, [r7, #16]
 800ccbe:	781b      	ldrb	r3, [r3, #0]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d1e7      	bne.n	800cc94 <USBD_GetString+0x52>
 800ccc4:	e000      	b.n	800ccc8 <USBD_GetString+0x86>
    return;
 800ccc6:	bf00      	nop
  }
}
 800ccc8:	3718      	adds	r7, #24
 800ccca:	46bd      	mov	sp, r7
 800cccc:	bd80      	pop	{r7, pc}

0800ccce <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ccce:	b480      	push	{r7}
 800ccd0:	b085      	sub	sp, #20
 800ccd2:	af00      	add	r7, sp, #0
 800ccd4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ccde:	e005      	b.n	800ccec <USBD_GetLen+0x1e>
  {
    len++;
 800cce0:	7bfb      	ldrb	r3, [r7, #15]
 800cce2:	3301      	adds	r3, #1
 800cce4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cce6:	68bb      	ldr	r3, [r7, #8]
 800cce8:	3301      	adds	r3, #1
 800ccea:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ccec:	68bb      	ldr	r3, [r7, #8]
 800ccee:	781b      	ldrb	r3, [r3, #0]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d1f5      	bne.n	800cce0 <USBD_GetLen+0x12>
  }

  return len;
 800ccf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	3714      	adds	r7, #20
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd00:	4770      	bx	lr

0800cd02 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cd02:	b580      	push	{r7, lr}
 800cd04:	b084      	sub	sp, #16
 800cd06:	af00      	add	r7, sp, #0
 800cd08:	60f8      	str	r0, [r7, #12]
 800cd0a:	60b9      	str	r1, [r7, #8]
 800cd0c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	2202      	movs	r2, #2
 800cd12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	687a      	ldr	r2, [r7, #4]
 800cd1a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	687a      	ldr	r2, [r7, #4]
 800cd20:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	68ba      	ldr	r2, [r7, #8]
 800cd26:	2100      	movs	r1, #0
 800cd28:	68f8      	ldr	r0, [r7, #12]
 800cd2a:	f003 fea0 	bl	8010a6e <USBD_LL_Transmit>

  return USBD_OK;
 800cd2e:	2300      	movs	r3, #0
}
 800cd30:	4618      	mov	r0, r3
 800cd32:	3710      	adds	r7, #16
 800cd34:	46bd      	mov	sp, r7
 800cd36:	bd80      	pop	{r7, pc}

0800cd38 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b084      	sub	sp, #16
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	60f8      	str	r0, [r7, #12]
 800cd40:	60b9      	str	r1, [r7, #8]
 800cd42:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	68ba      	ldr	r2, [r7, #8]
 800cd48:	2100      	movs	r1, #0
 800cd4a:	68f8      	ldr	r0, [r7, #12]
 800cd4c:	f003 fe8f 	bl	8010a6e <USBD_LL_Transmit>

  return USBD_OK;
 800cd50:	2300      	movs	r3, #0
}
 800cd52:	4618      	mov	r0, r3
 800cd54:	3710      	adds	r7, #16
 800cd56:	46bd      	mov	sp, r7
 800cd58:	bd80      	pop	{r7, pc}

0800cd5a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cd5a:	b580      	push	{r7, lr}
 800cd5c:	b084      	sub	sp, #16
 800cd5e:	af00      	add	r7, sp, #0
 800cd60:	60f8      	str	r0, [r7, #12]
 800cd62:	60b9      	str	r1, [r7, #8]
 800cd64:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	2203      	movs	r2, #3
 800cd6a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	687a      	ldr	r2, [r7, #4]
 800cd72:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	687a      	ldr	r2, [r7, #4]
 800cd7a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	68ba      	ldr	r2, [r7, #8]
 800cd82:	2100      	movs	r1, #0
 800cd84:	68f8      	ldr	r0, [r7, #12]
 800cd86:	f003 fe93 	bl	8010ab0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cd8a:	2300      	movs	r3, #0
}
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	3710      	adds	r7, #16
 800cd90:	46bd      	mov	sp, r7
 800cd92:	bd80      	pop	{r7, pc}

0800cd94 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b084      	sub	sp, #16
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	60f8      	str	r0, [r7, #12]
 800cd9c:	60b9      	str	r1, [r7, #8]
 800cd9e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	68ba      	ldr	r2, [r7, #8]
 800cda4:	2100      	movs	r1, #0
 800cda6:	68f8      	ldr	r0, [r7, #12]
 800cda8:	f003 fe82 	bl	8010ab0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cdac:	2300      	movs	r3, #0
}
 800cdae:	4618      	mov	r0, r3
 800cdb0:	3710      	adds	r7, #16
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	bd80      	pop	{r7, pc}

0800cdb6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cdb6:	b580      	push	{r7, lr}
 800cdb8:	b082      	sub	sp, #8
 800cdba:	af00      	add	r7, sp, #0
 800cdbc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	2204      	movs	r2, #4
 800cdc2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	2200      	movs	r2, #0
 800cdca:	2100      	movs	r1, #0
 800cdcc:	6878      	ldr	r0, [r7, #4]
 800cdce:	f003 fe4e 	bl	8010a6e <USBD_LL_Transmit>

  return USBD_OK;
 800cdd2:	2300      	movs	r3, #0
}
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	3708      	adds	r7, #8
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	bd80      	pop	{r7, pc}

0800cddc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b082      	sub	sp, #8
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2205      	movs	r2, #5
 800cde8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cdec:	2300      	movs	r3, #0
 800cdee:	2200      	movs	r2, #0
 800cdf0:	2100      	movs	r1, #0
 800cdf2:	6878      	ldr	r0, [r7, #4]
 800cdf4:	f003 fe5c 	bl	8010ab0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cdf8:	2300      	movs	r3, #0
}
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	3708      	adds	r7, #8
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd80      	pop	{r7, pc}

0800ce02 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ce02:	b480      	push	{r7}
 800ce04:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800ce06:	bf00      	nop
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0e:	4770      	bx	lr

0800ce10 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ce10:	b480      	push	{r7}
 800ce12:	b085      	sub	sp, #20
 800ce14:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ce16:	f3ef 8305 	mrs	r3, IPSR
 800ce1a:	60bb      	str	r3, [r7, #8]
  return(result);
 800ce1c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d10f      	bne.n	800ce42 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce22:	f3ef 8310 	mrs	r3, PRIMASK
 800ce26:	607b      	str	r3, [r7, #4]
  return(result);
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d105      	bne.n	800ce3a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ce2e:	f3ef 8311 	mrs	r3, BASEPRI
 800ce32:	603b      	str	r3, [r7, #0]
  return(result);
 800ce34:	683b      	ldr	r3, [r7, #0]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d007      	beq.n	800ce4a <osKernelInitialize+0x3a>
 800ce3a:	4b0e      	ldr	r3, [pc, #56]	; (800ce74 <osKernelInitialize+0x64>)
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	2b02      	cmp	r3, #2
 800ce40:	d103      	bne.n	800ce4a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800ce42:	f06f 0305 	mvn.w	r3, #5
 800ce46:	60fb      	str	r3, [r7, #12]
 800ce48:	e00c      	b.n	800ce64 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ce4a:	4b0a      	ldr	r3, [pc, #40]	; (800ce74 <osKernelInitialize+0x64>)
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d105      	bne.n	800ce5e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ce52:	4b08      	ldr	r3, [pc, #32]	; (800ce74 <osKernelInitialize+0x64>)
 800ce54:	2201      	movs	r2, #1
 800ce56:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ce58:	2300      	movs	r3, #0
 800ce5a:	60fb      	str	r3, [r7, #12]
 800ce5c:	e002      	b.n	800ce64 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800ce5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ce62:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800ce64:	68fb      	ldr	r3, [r7, #12]
}
 800ce66:	4618      	mov	r0, r3
 800ce68:	3714      	adds	r7, #20
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce70:	4770      	bx	lr
 800ce72:	bf00      	nop
 800ce74:	20000678 	.word	0x20000678

0800ce78 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b084      	sub	sp, #16
 800ce7c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ce7e:	f3ef 8305 	mrs	r3, IPSR
 800ce82:	60bb      	str	r3, [r7, #8]
  return(result);
 800ce84:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d10f      	bne.n	800ceaa <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce8a:	f3ef 8310 	mrs	r3, PRIMASK
 800ce8e:	607b      	str	r3, [r7, #4]
  return(result);
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d105      	bne.n	800cea2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ce96:	f3ef 8311 	mrs	r3, BASEPRI
 800ce9a:	603b      	str	r3, [r7, #0]
  return(result);
 800ce9c:	683b      	ldr	r3, [r7, #0]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d007      	beq.n	800ceb2 <osKernelStart+0x3a>
 800cea2:	4b0f      	ldr	r3, [pc, #60]	; (800cee0 <osKernelStart+0x68>)
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	2b02      	cmp	r3, #2
 800cea8:	d103      	bne.n	800ceb2 <osKernelStart+0x3a>
    stat = osErrorISR;
 800ceaa:	f06f 0305 	mvn.w	r3, #5
 800ceae:	60fb      	str	r3, [r7, #12]
 800ceb0:	e010      	b.n	800ced4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ceb2:	4b0b      	ldr	r3, [pc, #44]	; (800cee0 <osKernelStart+0x68>)
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	2b01      	cmp	r3, #1
 800ceb8:	d109      	bne.n	800cece <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ceba:	f7ff ffa2 	bl	800ce02 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800cebe:	4b08      	ldr	r3, [pc, #32]	; (800cee0 <osKernelStart+0x68>)
 800cec0:	2202      	movs	r2, #2
 800cec2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800cec4:	f001 fb04 	bl	800e4d0 <vTaskStartScheduler>
      stat = osOK;
 800cec8:	2300      	movs	r3, #0
 800ceca:	60fb      	str	r3, [r7, #12]
 800cecc:	e002      	b.n	800ced4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800cece:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ced2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800ced4:	68fb      	ldr	r3, [r7, #12]
}
 800ced6:	4618      	mov	r0, r3
 800ced8:	3710      	adds	r7, #16
 800ceda:	46bd      	mov	sp, r7
 800cedc:	bd80      	pop	{r7, pc}
 800cede:	bf00      	nop
 800cee0:	20000678 	.word	0x20000678

0800cee4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b090      	sub	sp, #64	; 0x40
 800cee8:	af04      	add	r7, sp, #16
 800ceea:	60f8      	str	r0, [r7, #12]
 800ceec:	60b9      	str	r1, [r7, #8]
 800ceee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800cef0:	2300      	movs	r3, #0
 800cef2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cef4:	f3ef 8305 	mrs	r3, IPSR
 800cef8:	61fb      	str	r3, [r7, #28]
  return(result);
 800cefa:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	f040 808f 	bne.w	800d020 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf02:	f3ef 8310 	mrs	r3, PRIMASK
 800cf06:	61bb      	str	r3, [r7, #24]
  return(result);
 800cf08:	69bb      	ldr	r3, [r7, #24]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d105      	bne.n	800cf1a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cf0e:	f3ef 8311 	mrs	r3, BASEPRI
 800cf12:	617b      	str	r3, [r7, #20]
  return(result);
 800cf14:	697b      	ldr	r3, [r7, #20]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d003      	beq.n	800cf22 <osThreadNew+0x3e>
 800cf1a:	4b44      	ldr	r3, [pc, #272]	; (800d02c <osThreadNew+0x148>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	2b02      	cmp	r3, #2
 800cf20:	d07e      	beq.n	800d020 <osThreadNew+0x13c>
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d07b      	beq.n	800d020 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800cf28:	2380      	movs	r3, #128	; 0x80
 800cf2a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800cf2c:	2318      	movs	r3, #24
 800cf2e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800cf30:	2300      	movs	r3, #0
 800cf32:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800cf34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cf38:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d045      	beq.n	800cfcc <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d002      	beq.n	800cf4e <osThreadNew+0x6a>
        name = attr->name;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	699b      	ldr	r3, [r3, #24]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d002      	beq.n	800cf5c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	699b      	ldr	r3, [r3, #24]
 800cf5a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800cf5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d008      	beq.n	800cf74 <osThreadNew+0x90>
 800cf62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf64:	2b38      	cmp	r3, #56	; 0x38
 800cf66:	d805      	bhi.n	800cf74 <osThreadNew+0x90>
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	685b      	ldr	r3, [r3, #4]
 800cf6c:	f003 0301 	and.w	r3, r3, #1
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d001      	beq.n	800cf78 <osThreadNew+0x94>
        return (NULL);
 800cf74:	2300      	movs	r3, #0
 800cf76:	e054      	b.n	800d022 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	695b      	ldr	r3, [r3, #20]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d003      	beq.n	800cf88 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	695b      	ldr	r3, [r3, #20]
 800cf84:	089b      	lsrs	r3, r3, #2
 800cf86:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	689b      	ldr	r3, [r3, #8]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d00e      	beq.n	800cfae <osThreadNew+0xca>
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	68db      	ldr	r3, [r3, #12]
 800cf94:	2b5b      	cmp	r3, #91	; 0x5b
 800cf96:	d90a      	bls.n	800cfae <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d006      	beq.n	800cfae <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	695b      	ldr	r3, [r3, #20]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d002      	beq.n	800cfae <osThreadNew+0xca>
        mem = 1;
 800cfa8:	2301      	movs	r3, #1
 800cfaa:	623b      	str	r3, [r7, #32]
 800cfac:	e010      	b.n	800cfd0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	689b      	ldr	r3, [r3, #8]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d10c      	bne.n	800cfd0 <osThreadNew+0xec>
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	68db      	ldr	r3, [r3, #12]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d108      	bne.n	800cfd0 <osThreadNew+0xec>
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	691b      	ldr	r3, [r3, #16]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d104      	bne.n	800cfd0 <osThreadNew+0xec>
          mem = 0;
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	623b      	str	r3, [r7, #32]
 800cfca:	e001      	b.n	800cfd0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800cfcc:	2300      	movs	r3, #0
 800cfce:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800cfd0:	6a3b      	ldr	r3, [r7, #32]
 800cfd2:	2b01      	cmp	r3, #1
 800cfd4:	d110      	bne.n	800cff8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800cfda:	687a      	ldr	r2, [r7, #4]
 800cfdc:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cfde:	9202      	str	r2, [sp, #8]
 800cfe0:	9301      	str	r3, [sp, #4]
 800cfe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfe4:	9300      	str	r3, [sp, #0]
 800cfe6:	68bb      	ldr	r3, [r7, #8]
 800cfe8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cfea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cfec:	68f8      	ldr	r0, [r7, #12]
 800cfee:	f001 f89d 	bl	800e12c <xTaskCreateStatic>
 800cff2:	4603      	mov	r3, r0
 800cff4:	613b      	str	r3, [r7, #16]
 800cff6:	e013      	b.n	800d020 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800cff8:	6a3b      	ldr	r3, [r7, #32]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d110      	bne.n	800d020 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800cffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d000:	b29a      	uxth	r2, r3
 800d002:	f107 0310 	add.w	r3, r7, #16
 800d006:	9301      	str	r3, [sp, #4]
 800d008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d00a:	9300      	str	r3, [sp, #0]
 800d00c:	68bb      	ldr	r3, [r7, #8]
 800d00e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d010:	68f8      	ldr	r0, [r7, #12]
 800d012:	f001 f8e5 	bl	800e1e0 <xTaskCreate>
 800d016:	4603      	mov	r3, r0
 800d018:	2b01      	cmp	r3, #1
 800d01a:	d001      	beq.n	800d020 <osThreadNew+0x13c>
          hTask = NULL;
 800d01c:	2300      	movs	r3, #0
 800d01e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d020:	693b      	ldr	r3, [r7, #16]
}
 800d022:	4618      	mov	r0, r3
 800d024:	3730      	adds	r7, #48	; 0x30
 800d026:	46bd      	mov	sp, r7
 800d028:	bd80      	pop	{r7, pc}
 800d02a:	bf00      	nop
 800d02c:	20000678 	.word	0x20000678

0800d030 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800d030:	b580      	push	{r7, lr}
 800d032:	b086      	sub	sp, #24
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d038:	f3ef 8305 	mrs	r3, IPSR
 800d03c:	613b      	str	r3, [r7, #16]
  return(result);
 800d03e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d040:	2b00      	cmp	r3, #0
 800d042:	d10f      	bne.n	800d064 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d044:	f3ef 8310 	mrs	r3, PRIMASK
 800d048:	60fb      	str	r3, [r7, #12]
  return(result);
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d105      	bne.n	800d05c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d050:	f3ef 8311 	mrs	r3, BASEPRI
 800d054:	60bb      	str	r3, [r7, #8]
  return(result);
 800d056:	68bb      	ldr	r3, [r7, #8]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d007      	beq.n	800d06c <osDelay+0x3c>
 800d05c:	4b0a      	ldr	r3, [pc, #40]	; (800d088 <osDelay+0x58>)
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	2b02      	cmp	r3, #2
 800d062:	d103      	bne.n	800d06c <osDelay+0x3c>
    stat = osErrorISR;
 800d064:	f06f 0305 	mvn.w	r3, #5
 800d068:	617b      	str	r3, [r7, #20]
 800d06a:	e007      	b.n	800d07c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800d06c:	2300      	movs	r3, #0
 800d06e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d002      	beq.n	800d07c <osDelay+0x4c>
      vTaskDelay(ticks);
 800d076:	6878      	ldr	r0, [r7, #4]
 800d078:	f001 f9f6 	bl	800e468 <vTaskDelay>
    }
  }

  return (stat);
 800d07c:	697b      	ldr	r3, [r7, #20]
}
 800d07e:	4618      	mov	r0, r3
 800d080:	3718      	adds	r7, #24
 800d082:	46bd      	mov	sp, r7
 800d084:	bd80      	pop	{r7, pc}
 800d086:	bf00      	nop
 800d088:	20000678 	.word	0x20000678

0800d08c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b08c      	sub	sp, #48	; 0x30
 800d090:	af02      	add	r7, sp, #8
 800d092:	60f8      	str	r0, [r7, #12]
 800d094:	60b9      	str	r1, [r7, #8]
 800d096:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800d098:	2300      	movs	r3, #0
 800d09a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d09c:	f3ef 8305 	mrs	r3, IPSR
 800d0a0:	61bb      	str	r3, [r7, #24]
  return(result);
 800d0a2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d170      	bne.n	800d18a <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d0a8:	f3ef 8310 	mrs	r3, PRIMASK
 800d0ac:	617b      	str	r3, [r7, #20]
  return(result);
 800d0ae:	697b      	ldr	r3, [r7, #20]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d105      	bne.n	800d0c0 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d0b4:	f3ef 8311 	mrs	r3, BASEPRI
 800d0b8:	613b      	str	r3, [r7, #16]
  return(result);
 800d0ba:	693b      	ldr	r3, [r7, #16]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d003      	beq.n	800d0c8 <osMessageQueueNew+0x3c>
 800d0c0:	4b34      	ldr	r3, [pc, #208]	; (800d194 <osMessageQueueNew+0x108>)
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	2b02      	cmp	r3, #2
 800d0c6:	d060      	beq.n	800d18a <osMessageQueueNew+0xfe>
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d05d      	beq.n	800d18a <osMessageQueueNew+0xfe>
 800d0ce:	68bb      	ldr	r3, [r7, #8]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d05a      	beq.n	800d18a <osMessageQueueNew+0xfe>
    mem = -1;
 800d0d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d0d8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d029      	beq.n	800d134 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	689b      	ldr	r3, [r3, #8]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d012      	beq.n	800d10e <osMessageQueueNew+0x82>
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	68db      	ldr	r3, [r3, #12]
 800d0ec:	2b4f      	cmp	r3, #79	; 0x4f
 800d0ee:	d90e      	bls.n	800d10e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d00a      	beq.n	800d10e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	695a      	ldr	r2, [r3, #20]
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	68b9      	ldr	r1, [r7, #8]
 800d100:	fb01 f303 	mul.w	r3, r1, r3
 800d104:	429a      	cmp	r2, r3
 800d106:	d302      	bcc.n	800d10e <osMessageQueueNew+0x82>
        mem = 1;
 800d108:	2301      	movs	r3, #1
 800d10a:	623b      	str	r3, [r7, #32]
 800d10c:	e014      	b.n	800d138 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	689b      	ldr	r3, [r3, #8]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d110      	bne.n	800d138 <osMessageQueueNew+0xac>
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	68db      	ldr	r3, [r3, #12]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d10c      	bne.n	800d138 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d122:	2b00      	cmp	r3, #0
 800d124:	d108      	bne.n	800d138 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	695b      	ldr	r3, [r3, #20]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d104      	bne.n	800d138 <osMessageQueueNew+0xac>
          mem = 0;
 800d12e:	2300      	movs	r3, #0
 800d130:	623b      	str	r3, [r7, #32]
 800d132:	e001      	b.n	800d138 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800d134:	2300      	movs	r3, #0
 800d136:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800d138:	6a3b      	ldr	r3, [r7, #32]
 800d13a:	2b01      	cmp	r3, #1
 800d13c:	d10c      	bne.n	800d158 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	691a      	ldr	r2, [r3, #16]
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	6899      	ldr	r1, [r3, #8]
 800d146:	2300      	movs	r3, #0
 800d148:	9300      	str	r3, [sp, #0]
 800d14a:	460b      	mov	r3, r1
 800d14c:	68b9      	ldr	r1, [r7, #8]
 800d14e:	68f8      	ldr	r0, [r7, #12]
 800d150:	f000 faa0 	bl	800d694 <xQueueGenericCreateStatic>
 800d154:	6278      	str	r0, [r7, #36]	; 0x24
 800d156:	e008      	b.n	800d16a <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800d158:	6a3b      	ldr	r3, [r7, #32]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d105      	bne.n	800d16a <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800d15e:	2200      	movs	r2, #0
 800d160:	68b9      	ldr	r1, [r7, #8]
 800d162:	68f8      	ldr	r0, [r7, #12]
 800d164:	f000 fb09 	bl	800d77a <xQueueGenericCreate>
 800d168:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800d16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d00c      	beq.n	800d18a <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d003      	beq.n	800d17e <osMessageQueueNew+0xf2>
        name = attr->name;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	61fb      	str	r3, [r7, #28]
 800d17c:	e001      	b.n	800d182 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800d17e:	2300      	movs	r3, #0
 800d180:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800d182:	69f9      	ldr	r1, [r7, #28]
 800d184:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d186:	f000 ff75 	bl	800e074 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800d18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d18c:	4618      	mov	r0, r3
 800d18e:	3728      	adds	r7, #40	; 0x28
 800d190:	46bd      	mov	sp, r7
 800d192:	bd80      	pop	{r7, pc}
 800d194:	20000678 	.word	0x20000678

0800d198 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800d198:	b580      	push	{r7, lr}
 800d19a:	b08a      	sub	sp, #40	; 0x28
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	60f8      	str	r0, [r7, #12]
 800d1a0:	60b9      	str	r1, [r7, #8]
 800d1a2:	603b      	str	r3, [r7, #0]
 800d1a4:	4613      	mov	r3, r2
 800d1a6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d1b0:	f3ef 8305 	mrs	r3, IPSR
 800d1b4:	61fb      	str	r3, [r7, #28]
  return(result);
 800d1b6:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d10f      	bne.n	800d1dc <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d1bc:	f3ef 8310 	mrs	r3, PRIMASK
 800d1c0:	61bb      	str	r3, [r7, #24]
  return(result);
 800d1c2:	69bb      	ldr	r3, [r7, #24]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d105      	bne.n	800d1d4 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d1c8:	f3ef 8311 	mrs	r3, BASEPRI
 800d1cc:	617b      	str	r3, [r7, #20]
  return(result);
 800d1ce:	697b      	ldr	r3, [r7, #20]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d02c      	beq.n	800d22e <osMessageQueuePut+0x96>
 800d1d4:	4b28      	ldr	r3, [pc, #160]	; (800d278 <osMessageQueuePut+0xe0>)
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	2b02      	cmp	r3, #2
 800d1da:	d128      	bne.n	800d22e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d1dc:	6a3b      	ldr	r3, [r7, #32]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d005      	beq.n	800d1ee <osMessageQueuePut+0x56>
 800d1e2:	68bb      	ldr	r3, [r7, #8]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d002      	beq.n	800d1ee <osMessageQueuePut+0x56>
 800d1e8:	683b      	ldr	r3, [r7, #0]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d003      	beq.n	800d1f6 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800d1ee:	f06f 0303 	mvn.w	r3, #3
 800d1f2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d1f4:	e039      	b.n	800d26a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800d1fa:	f107 0210 	add.w	r2, r7, #16
 800d1fe:	2300      	movs	r3, #0
 800d200:	68b9      	ldr	r1, [r7, #8]
 800d202:	6a38      	ldr	r0, [r7, #32]
 800d204:	f000 fc16 	bl	800da34 <xQueueGenericSendFromISR>
 800d208:	4603      	mov	r3, r0
 800d20a:	2b01      	cmp	r3, #1
 800d20c:	d003      	beq.n	800d216 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800d20e:	f06f 0302 	mvn.w	r3, #2
 800d212:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d214:	e029      	b.n	800d26a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800d216:	693b      	ldr	r3, [r7, #16]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d026      	beq.n	800d26a <osMessageQueuePut+0xd2>
 800d21c:	4b17      	ldr	r3, [pc, #92]	; (800d27c <osMessageQueuePut+0xe4>)
 800d21e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d222:	601a      	str	r2, [r3, #0]
 800d224:	f3bf 8f4f 	dsb	sy
 800d228:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d22c:	e01d      	b.n	800d26a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d22e:	6a3b      	ldr	r3, [r7, #32]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d002      	beq.n	800d23a <osMessageQueuePut+0xa2>
 800d234:	68bb      	ldr	r3, [r7, #8]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d103      	bne.n	800d242 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800d23a:	f06f 0303 	mvn.w	r3, #3
 800d23e:	627b      	str	r3, [r7, #36]	; 0x24
 800d240:	e014      	b.n	800d26c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d242:	2300      	movs	r3, #0
 800d244:	683a      	ldr	r2, [r7, #0]
 800d246:	68b9      	ldr	r1, [r7, #8]
 800d248:	6a38      	ldr	r0, [r7, #32]
 800d24a:	f000 faf9 	bl	800d840 <xQueueGenericSend>
 800d24e:	4603      	mov	r3, r0
 800d250:	2b01      	cmp	r3, #1
 800d252:	d00b      	beq.n	800d26c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800d254:	683b      	ldr	r3, [r7, #0]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d003      	beq.n	800d262 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800d25a:	f06f 0301 	mvn.w	r3, #1
 800d25e:	627b      	str	r3, [r7, #36]	; 0x24
 800d260:	e004      	b.n	800d26c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800d262:	f06f 0302 	mvn.w	r3, #2
 800d266:	627b      	str	r3, [r7, #36]	; 0x24
 800d268:	e000      	b.n	800d26c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d26a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800d26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d26e:	4618      	mov	r0, r3
 800d270:	3728      	adds	r7, #40	; 0x28
 800d272:	46bd      	mov	sp, r7
 800d274:	bd80      	pop	{r7, pc}
 800d276:	bf00      	nop
 800d278:	20000678 	.word	0x20000678
 800d27c:	e000ed04 	.word	0xe000ed04

0800d280 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800d280:	b580      	push	{r7, lr}
 800d282:	b08a      	sub	sp, #40	; 0x28
 800d284:	af00      	add	r7, sp, #0
 800d286:	60f8      	str	r0, [r7, #12]
 800d288:	60b9      	str	r1, [r7, #8]
 800d28a:	607a      	str	r2, [r7, #4]
 800d28c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d292:	2300      	movs	r3, #0
 800d294:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d296:	f3ef 8305 	mrs	r3, IPSR
 800d29a:	61fb      	str	r3, [r7, #28]
  return(result);
 800d29c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d10f      	bne.n	800d2c2 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d2a2:	f3ef 8310 	mrs	r3, PRIMASK
 800d2a6:	61bb      	str	r3, [r7, #24]
  return(result);
 800d2a8:	69bb      	ldr	r3, [r7, #24]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d105      	bne.n	800d2ba <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d2ae:	f3ef 8311 	mrs	r3, BASEPRI
 800d2b2:	617b      	str	r3, [r7, #20]
  return(result);
 800d2b4:	697b      	ldr	r3, [r7, #20]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d02c      	beq.n	800d314 <osMessageQueueGet+0x94>
 800d2ba:	4b28      	ldr	r3, [pc, #160]	; (800d35c <osMessageQueueGet+0xdc>)
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	2b02      	cmp	r3, #2
 800d2c0:	d128      	bne.n	800d314 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d2c2:	6a3b      	ldr	r3, [r7, #32]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d005      	beq.n	800d2d4 <osMessageQueueGet+0x54>
 800d2c8:	68bb      	ldr	r3, [r7, #8]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d002      	beq.n	800d2d4 <osMessageQueueGet+0x54>
 800d2ce:	683b      	ldr	r3, [r7, #0]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d003      	beq.n	800d2dc <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800d2d4:	f06f 0303 	mvn.w	r3, #3
 800d2d8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d2da:	e038      	b.n	800d34e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800d2dc:	2300      	movs	r3, #0
 800d2de:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800d2e0:	f107 0310 	add.w	r3, r7, #16
 800d2e4:	461a      	mov	r2, r3
 800d2e6:	68b9      	ldr	r1, [r7, #8]
 800d2e8:	6a38      	ldr	r0, [r7, #32]
 800d2ea:	f000 fd13 	bl	800dd14 <xQueueReceiveFromISR>
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	2b01      	cmp	r3, #1
 800d2f2:	d003      	beq.n	800d2fc <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800d2f4:	f06f 0302 	mvn.w	r3, #2
 800d2f8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d2fa:	e028      	b.n	800d34e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800d2fc:	693b      	ldr	r3, [r7, #16]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d025      	beq.n	800d34e <osMessageQueueGet+0xce>
 800d302:	4b17      	ldr	r3, [pc, #92]	; (800d360 <osMessageQueueGet+0xe0>)
 800d304:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d308:	601a      	str	r2, [r3, #0]
 800d30a:	f3bf 8f4f 	dsb	sy
 800d30e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d312:	e01c      	b.n	800d34e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d314:	6a3b      	ldr	r3, [r7, #32]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d002      	beq.n	800d320 <osMessageQueueGet+0xa0>
 800d31a:	68bb      	ldr	r3, [r7, #8]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d103      	bne.n	800d328 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800d320:	f06f 0303 	mvn.w	r3, #3
 800d324:	627b      	str	r3, [r7, #36]	; 0x24
 800d326:	e013      	b.n	800d350 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d328:	683a      	ldr	r2, [r7, #0]
 800d32a:	68b9      	ldr	r1, [r7, #8]
 800d32c:	6a38      	ldr	r0, [r7, #32]
 800d32e:	f000 fc15 	bl	800db5c <xQueueReceive>
 800d332:	4603      	mov	r3, r0
 800d334:	2b01      	cmp	r3, #1
 800d336:	d00b      	beq.n	800d350 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800d338:	683b      	ldr	r3, [r7, #0]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d003      	beq.n	800d346 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800d33e:	f06f 0301 	mvn.w	r3, #1
 800d342:	627b      	str	r3, [r7, #36]	; 0x24
 800d344:	e004      	b.n	800d350 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800d346:	f06f 0302 	mvn.w	r3, #2
 800d34a:	627b      	str	r3, [r7, #36]	; 0x24
 800d34c:	e000      	b.n	800d350 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d34e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800d350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d352:	4618      	mov	r0, r3
 800d354:	3728      	adds	r7, #40	; 0x28
 800d356:	46bd      	mov	sp, r7
 800d358:	bd80      	pop	{r7, pc}
 800d35a:	bf00      	nop
 800d35c:	20000678 	.word	0x20000678
 800d360:	e000ed04 	.word	0xe000ed04

0800d364 <osMessageQueueGetSpace>:
  }

  return ((uint32_t)count);
}

uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
 800d364:	b580      	push	{r7, lr}
 800d366:	b08c      	sub	sp, #48	; 0x30
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t space;
  uint32_t isrm;

  if (mq == NULL) {
 800d370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d372:	2b00      	cmp	r3, #0
 800d374:	d102      	bne.n	800d37c <osMessageQueueGetSpace+0x18>
    space = 0U;
 800d376:	2300      	movs	r3, #0
 800d378:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d37a:	e033      	b.n	800d3e4 <osMessageQueueGetSpace+0x80>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d37c:	f3ef 8305 	mrs	r3, IPSR
 800d380:	623b      	str	r3, [r7, #32]
  return(result);
 800d382:	6a3b      	ldr	r3, [r7, #32]
  }
  else if (IS_IRQ()) {
 800d384:	2b00      	cmp	r3, #0
 800d386:	d10f      	bne.n	800d3a8 <osMessageQueueGetSpace+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d388:	f3ef 8310 	mrs	r3, PRIMASK
 800d38c:	61fb      	str	r3, [r7, #28]
  return(result);
 800d38e:	69fb      	ldr	r3, [r7, #28]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d105      	bne.n	800d3a0 <osMessageQueueGetSpace+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d394:	f3ef 8311 	mrs	r3, BASEPRI
 800d398:	61bb      	str	r3, [r7, #24]
  return(result);
 800d39a:	69bb      	ldr	r3, [r7, #24]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d01d      	beq.n	800d3dc <osMessageQueueGetSpace+0x78>
 800d3a0:	4b13      	ldr	r3, [pc, #76]	; (800d3f0 <osMessageQueueGetSpace+0x8c>)
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	2b02      	cmp	r3, #2
 800d3a6:	d119      	bne.n	800d3dc <osMessageQueueGetSpace+0x78>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d3a8:	f3ef 8211 	mrs	r2, BASEPRI
 800d3ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3b0:	f383 8811 	msr	BASEPRI, r3
 800d3b4:	f3bf 8f6f 	isb	sy
 800d3b8:	f3bf 8f4f 	dsb	sy
 800d3bc:	613a      	str	r2, [r7, #16]
 800d3be:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d3c0:	693b      	ldr	r3, [r7, #16]
    isrm = taskENTER_CRITICAL_FROM_ISR();
 800d3c2:	627b      	str	r3, [r7, #36]	; 0x24

    /* space = pxQueue->uxLength - pxQueue->uxMessagesWaiting; */
    space = mq->uxDummy4[1] - mq->uxDummy4[0];
 800d3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d3c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3cc:	1ad3      	subs	r3, r2, r3
 800d3ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3d2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d3d4:	697b      	ldr	r3, [r7, #20]
 800d3d6:	f383 8811 	msr	BASEPRI, r3

    taskEXIT_CRITICAL_FROM_ISR(isrm);
 800d3da:	e003      	b.n	800d3e4 <osMessageQueueGetSpace+0x80>
  }
  else {
    space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
 800d3dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d3de:	f000 fd16 	bl	800de0e <uxQueueSpacesAvailable>
 800d3e2:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return (space);
 800d3e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	3730      	adds	r7, #48	; 0x30
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	bd80      	pop	{r7, pc}
 800d3ee:	bf00      	nop
 800d3f0:	20000678 	.word	0x20000678

0800d3f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d3f4:	b480      	push	{r7}
 800d3f6:	b085      	sub	sp, #20
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	60f8      	str	r0, [r7, #12]
 800d3fc:	60b9      	str	r1, [r7, #8]
 800d3fe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	4a07      	ldr	r2, [pc, #28]	; (800d420 <vApplicationGetIdleTaskMemory+0x2c>)
 800d404:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d406:	68bb      	ldr	r3, [r7, #8]
 800d408:	4a06      	ldr	r2, [pc, #24]	; (800d424 <vApplicationGetIdleTaskMemory+0x30>)
 800d40a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	2280      	movs	r2, #128	; 0x80
 800d410:	601a      	str	r2, [r3, #0]
}
 800d412:	bf00      	nop
 800d414:	3714      	adds	r7, #20
 800d416:	46bd      	mov	sp, r7
 800d418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41c:	4770      	bx	lr
 800d41e:	bf00      	nop
 800d420:	2000067c 	.word	0x2000067c
 800d424:	200006d8 	.word	0x200006d8

0800d428 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d428:	b480      	push	{r7}
 800d42a:	b085      	sub	sp, #20
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	60f8      	str	r0, [r7, #12]
 800d430:	60b9      	str	r1, [r7, #8]
 800d432:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	4a07      	ldr	r2, [pc, #28]	; (800d454 <vApplicationGetTimerTaskMemory+0x2c>)
 800d438:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d43a:	68bb      	ldr	r3, [r7, #8]
 800d43c:	4a06      	ldr	r2, [pc, #24]	; (800d458 <vApplicationGetTimerTaskMemory+0x30>)
 800d43e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d446:	601a      	str	r2, [r3, #0]
}
 800d448:	bf00      	nop
 800d44a:	3714      	adds	r7, #20
 800d44c:	46bd      	mov	sp, r7
 800d44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d452:	4770      	bx	lr
 800d454:	200008d8 	.word	0x200008d8
 800d458:	20000934 	.word	0x20000934

0800d45c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d45c:	b480      	push	{r7}
 800d45e:	b083      	sub	sp, #12
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	f103 0208 	add.w	r2, r3, #8
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d474:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	f103 0208 	add.w	r2, r3, #8
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	f103 0208 	add.w	r2, r3, #8
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	2200      	movs	r2, #0
 800d48e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d490:	bf00      	nop
 800d492:	370c      	adds	r7, #12
 800d494:	46bd      	mov	sp, r7
 800d496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49a:	4770      	bx	lr

0800d49c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d49c:	b480      	push	{r7}
 800d49e:	b083      	sub	sp, #12
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	2200      	movs	r2, #0
 800d4a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d4aa:	bf00      	nop
 800d4ac:	370c      	adds	r7, #12
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b4:	4770      	bx	lr

0800d4b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d4b6:	b480      	push	{r7}
 800d4b8:	b085      	sub	sp, #20
 800d4ba:	af00      	add	r7, sp, #0
 800d4bc:	6078      	str	r0, [r7, #4]
 800d4be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	685b      	ldr	r3, [r3, #4]
 800d4c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d4c6:	683b      	ldr	r3, [r7, #0]
 800d4c8:	68fa      	ldr	r2, [r7, #12]
 800d4ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	689a      	ldr	r2, [r3, #8]
 800d4d0:	683b      	ldr	r3, [r7, #0]
 800d4d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	689b      	ldr	r3, [r3, #8]
 800d4d8:	683a      	ldr	r2, [r7, #0]
 800d4da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	683a      	ldr	r2, [r7, #0]
 800d4e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d4e2:	683b      	ldr	r3, [r7, #0]
 800d4e4:	687a      	ldr	r2, [r7, #4]
 800d4e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	1c5a      	adds	r2, r3, #1
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	601a      	str	r2, [r3, #0]
}
 800d4f2:	bf00      	nop
 800d4f4:	3714      	adds	r7, #20
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fc:	4770      	bx	lr

0800d4fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d4fe:	b480      	push	{r7}
 800d500:	b085      	sub	sp, #20
 800d502:	af00      	add	r7, sp, #0
 800d504:	6078      	str	r0, [r7, #4]
 800d506:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d508:	683b      	ldr	r3, [r7, #0]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d50e:	68bb      	ldr	r3, [r7, #8]
 800d510:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d514:	d103      	bne.n	800d51e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	691b      	ldr	r3, [r3, #16]
 800d51a:	60fb      	str	r3, [r7, #12]
 800d51c:	e00c      	b.n	800d538 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	3308      	adds	r3, #8
 800d522:	60fb      	str	r3, [r7, #12]
 800d524:	e002      	b.n	800d52c <vListInsert+0x2e>
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	685b      	ldr	r3, [r3, #4]
 800d52a:	60fb      	str	r3, [r7, #12]
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	685b      	ldr	r3, [r3, #4]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	68ba      	ldr	r2, [r7, #8]
 800d534:	429a      	cmp	r2, r3
 800d536:	d2f6      	bcs.n	800d526 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	685a      	ldr	r2, [r3, #4]
 800d53c:	683b      	ldr	r3, [r7, #0]
 800d53e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d540:	683b      	ldr	r3, [r7, #0]
 800d542:	685b      	ldr	r3, [r3, #4]
 800d544:	683a      	ldr	r2, [r7, #0]
 800d546:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d548:	683b      	ldr	r3, [r7, #0]
 800d54a:	68fa      	ldr	r2, [r7, #12]
 800d54c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	683a      	ldr	r2, [r7, #0]
 800d552:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d554:	683b      	ldr	r3, [r7, #0]
 800d556:	687a      	ldr	r2, [r7, #4]
 800d558:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	1c5a      	adds	r2, r3, #1
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	601a      	str	r2, [r3, #0]
}
 800d564:	bf00      	nop
 800d566:	3714      	adds	r7, #20
 800d568:	46bd      	mov	sp, r7
 800d56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56e:	4770      	bx	lr

0800d570 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d570:	b480      	push	{r7}
 800d572:	b085      	sub	sp, #20
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	691b      	ldr	r3, [r3, #16]
 800d57c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	685b      	ldr	r3, [r3, #4]
 800d582:	687a      	ldr	r2, [r7, #4]
 800d584:	6892      	ldr	r2, [r2, #8]
 800d586:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	689b      	ldr	r3, [r3, #8]
 800d58c:	687a      	ldr	r2, [r7, #4]
 800d58e:	6852      	ldr	r2, [r2, #4]
 800d590:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	685b      	ldr	r3, [r3, #4]
 800d596:	687a      	ldr	r2, [r7, #4]
 800d598:	429a      	cmp	r2, r3
 800d59a:	d103      	bne.n	800d5a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	689a      	ldr	r2, [r3, #8]
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	1e5a      	subs	r2, r3, #1
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	681b      	ldr	r3, [r3, #0]
}
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	3714      	adds	r7, #20
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c2:	4770      	bx	lr

0800d5c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b084      	sub	sp, #16
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
 800d5cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d109      	bne.n	800d5ec <xQueueGenericReset+0x28>
	__asm volatile
 800d5d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5dc:	f383 8811 	msr	BASEPRI, r3
 800d5e0:	f3bf 8f6f 	isb	sy
 800d5e4:	f3bf 8f4f 	dsb	sy
 800d5e8:	60bb      	str	r3, [r7, #8]
 800d5ea:	e7fe      	b.n	800d5ea <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800d5ec:	f002 fad6 	bl	800fb9c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	681a      	ldr	r2, [r3, #0]
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5f8:	68f9      	ldr	r1, [r7, #12]
 800d5fa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d5fc:	fb01 f303 	mul.w	r3, r1, r3
 800d600:	441a      	add	r2, r3
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	2200      	movs	r2, #0
 800d60a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	681a      	ldr	r2, [r3, #0]
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	681a      	ldr	r2, [r3, #0]
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d61c:	3b01      	subs	r3, #1
 800d61e:	68f9      	ldr	r1, [r7, #12]
 800d620:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d622:	fb01 f303 	mul.w	r3, r1, r3
 800d626:	441a      	add	r2, r3
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	22ff      	movs	r2, #255	; 0xff
 800d630:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	22ff      	movs	r2, #255	; 0xff
 800d638:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d63c:	683b      	ldr	r3, [r7, #0]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d114      	bne.n	800d66c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	691b      	ldr	r3, [r3, #16]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d01a      	beq.n	800d680 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	3310      	adds	r3, #16
 800d64e:	4618      	mov	r0, r3
 800d650:	f001 f9be 	bl	800e9d0 <xTaskRemoveFromEventList>
 800d654:	4603      	mov	r3, r0
 800d656:	2b00      	cmp	r3, #0
 800d658:	d012      	beq.n	800d680 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d65a:	4b0d      	ldr	r3, [pc, #52]	; (800d690 <xQueueGenericReset+0xcc>)
 800d65c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d660:	601a      	str	r2, [r3, #0]
 800d662:	f3bf 8f4f 	dsb	sy
 800d666:	f3bf 8f6f 	isb	sy
 800d66a:	e009      	b.n	800d680 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	3310      	adds	r3, #16
 800d670:	4618      	mov	r0, r3
 800d672:	f7ff fef3 	bl	800d45c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	3324      	adds	r3, #36	; 0x24
 800d67a:	4618      	mov	r0, r3
 800d67c:	f7ff feee 	bl	800d45c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d680:	f002 faba 	bl	800fbf8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d684:	2301      	movs	r3, #1
}
 800d686:	4618      	mov	r0, r3
 800d688:	3710      	adds	r7, #16
 800d68a:	46bd      	mov	sp, r7
 800d68c:	bd80      	pop	{r7, pc}
 800d68e:	bf00      	nop
 800d690:	e000ed04 	.word	0xe000ed04

0800d694 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d694:	b580      	push	{r7, lr}
 800d696:	b08e      	sub	sp, #56	; 0x38
 800d698:	af02      	add	r7, sp, #8
 800d69a:	60f8      	str	r0, [r7, #12]
 800d69c:	60b9      	str	r1, [r7, #8]
 800d69e:	607a      	str	r2, [r7, #4]
 800d6a0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d109      	bne.n	800d6bc <xQueueGenericCreateStatic+0x28>
 800d6a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6ac:	f383 8811 	msr	BASEPRI, r3
 800d6b0:	f3bf 8f6f 	isb	sy
 800d6b4:	f3bf 8f4f 	dsb	sy
 800d6b8:	62bb      	str	r3, [r7, #40]	; 0x28
 800d6ba:	e7fe      	b.n	800d6ba <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d6bc:	683b      	ldr	r3, [r7, #0]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d109      	bne.n	800d6d6 <xQueueGenericCreateStatic+0x42>
 800d6c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6c6:	f383 8811 	msr	BASEPRI, r3
 800d6ca:	f3bf 8f6f 	isb	sy
 800d6ce:	f3bf 8f4f 	dsb	sy
 800d6d2:	627b      	str	r3, [r7, #36]	; 0x24
 800d6d4:	e7fe      	b.n	800d6d4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d002      	beq.n	800d6e2 <xQueueGenericCreateStatic+0x4e>
 800d6dc:	68bb      	ldr	r3, [r7, #8]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d001      	beq.n	800d6e6 <xQueueGenericCreateStatic+0x52>
 800d6e2:	2301      	movs	r3, #1
 800d6e4:	e000      	b.n	800d6e8 <xQueueGenericCreateStatic+0x54>
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d109      	bne.n	800d700 <xQueueGenericCreateStatic+0x6c>
 800d6ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6f0:	f383 8811 	msr	BASEPRI, r3
 800d6f4:	f3bf 8f6f 	isb	sy
 800d6f8:	f3bf 8f4f 	dsb	sy
 800d6fc:	623b      	str	r3, [r7, #32]
 800d6fe:	e7fe      	b.n	800d6fe <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d102      	bne.n	800d70c <xQueueGenericCreateStatic+0x78>
 800d706:	68bb      	ldr	r3, [r7, #8]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d101      	bne.n	800d710 <xQueueGenericCreateStatic+0x7c>
 800d70c:	2301      	movs	r3, #1
 800d70e:	e000      	b.n	800d712 <xQueueGenericCreateStatic+0x7e>
 800d710:	2300      	movs	r3, #0
 800d712:	2b00      	cmp	r3, #0
 800d714:	d109      	bne.n	800d72a <xQueueGenericCreateStatic+0x96>
 800d716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d71a:	f383 8811 	msr	BASEPRI, r3
 800d71e:	f3bf 8f6f 	isb	sy
 800d722:	f3bf 8f4f 	dsb	sy
 800d726:	61fb      	str	r3, [r7, #28]
 800d728:	e7fe      	b.n	800d728 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d72a:	2350      	movs	r3, #80	; 0x50
 800d72c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d72e:	697b      	ldr	r3, [r7, #20]
 800d730:	2b50      	cmp	r3, #80	; 0x50
 800d732:	d009      	beq.n	800d748 <xQueueGenericCreateStatic+0xb4>
 800d734:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d738:	f383 8811 	msr	BASEPRI, r3
 800d73c:	f3bf 8f6f 	isb	sy
 800d740:	f3bf 8f4f 	dsb	sy
 800d744:	61bb      	str	r3, [r7, #24]
 800d746:	e7fe      	b.n	800d746 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d748:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d74a:	683b      	ldr	r3, [r7, #0]
 800d74c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d74e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d750:	2b00      	cmp	r3, #0
 800d752:	d00d      	beq.n	800d770 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d756:	2201      	movs	r2, #1
 800d758:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d75c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d762:	9300      	str	r3, [sp, #0]
 800d764:	4613      	mov	r3, r2
 800d766:	687a      	ldr	r2, [r7, #4]
 800d768:	68b9      	ldr	r1, [r7, #8]
 800d76a:	68f8      	ldr	r0, [r7, #12]
 800d76c:	f000 f844 	bl	800d7f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d772:	4618      	mov	r0, r3
 800d774:	3730      	adds	r7, #48	; 0x30
 800d776:	46bd      	mov	sp, r7
 800d778:	bd80      	pop	{r7, pc}

0800d77a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d77a:	b580      	push	{r7, lr}
 800d77c:	b08a      	sub	sp, #40	; 0x28
 800d77e:	af02      	add	r7, sp, #8
 800d780:	60f8      	str	r0, [r7, #12]
 800d782:	60b9      	str	r1, [r7, #8]
 800d784:	4613      	mov	r3, r2
 800d786:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d109      	bne.n	800d7a2 <xQueueGenericCreate+0x28>
 800d78e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d792:	f383 8811 	msr	BASEPRI, r3
 800d796:	f3bf 8f6f 	isb	sy
 800d79a:	f3bf 8f4f 	dsb	sy
 800d79e:	613b      	str	r3, [r7, #16]
 800d7a0:	e7fe      	b.n	800d7a0 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800d7a2:	68bb      	ldr	r3, [r7, #8]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d102      	bne.n	800d7ae <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	61fb      	str	r3, [r7, #28]
 800d7ac:	e004      	b.n	800d7b8 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	68ba      	ldr	r2, [r7, #8]
 800d7b2:	fb02 f303 	mul.w	r3, r2, r3
 800d7b6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d7b8:	69fb      	ldr	r3, [r7, #28]
 800d7ba:	3350      	adds	r3, #80	; 0x50
 800d7bc:	4618      	mov	r0, r3
 800d7be:	f002 fb07 	bl	800fdd0 <pvPortMalloc>
 800d7c2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d7c4:	69bb      	ldr	r3, [r7, #24]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d011      	beq.n	800d7ee <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d7ca:	69bb      	ldr	r3, [r7, #24]
 800d7cc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d7ce:	697b      	ldr	r3, [r7, #20]
 800d7d0:	3350      	adds	r3, #80	; 0x50
 800d7d2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d7d4:	69bb      	ldr	r3, [r7, #24]
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d7dc:	79fa      	ldrb	r2, [r7, #7]
 800d7de:	69bb      	ldr	r3, [r7, #24]
 800d7e0:	9300      	str	r3, [sp, #0]
 800d7e2:	4613      	mov	r3, r2
 800d7e4:	697a      	ldr	r2, [r7, #20]
 800d7e6:	68b9      	ldr	r1, [r7, #8]
 800d7e8:	68f8      	ldr	r0, [r7, #12]
 800d7ea:	f000 f805 	bl	800d7f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d7ee:	69bb      	ldr	r3, [r7, #24]
	}
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	3720      	adds	r7, #32
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	bd80      	pop	{r7, pc}

0800d7f8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b084      	sub	sp, #16
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	60f8      	str	r0, [r7, #12]
 800d800:	60b9      	str	r1, [r7, #8]
 800d802:	607a      	str	r2, [r7, #4]
 800d804:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d806:	68bb      	ldr	r3, [r7, #8]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d103      	bne.n	800d814 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d80c:	69bb      	ldr	r3, [r7, #24]
 800d80e:	69ba      	ldr	r2, [r7, #24]
 800d810:	601a      	str	r2, [r3, #0]
 800d812:	e002      	b.n	800d81a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d814:	69bb      	ldr	r3, [r7, #24]
 800d816:	687a      	ldr	r2, [r7, #4]
 800d818:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d81a:	69bb      	ldr	r3, [r7, #24]
 800d81c:	68fa      	ldr	r2, [r7, #12]
 800d81e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d820:	69bb      	ldr	r3, [r7, #24]
 800d822:	68ba      	ldr	r2, [r7, #8]
 800d824:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d826:	2101      	movs	r1, #1
 800d828:	69b8      	ldr	r0, [r7, #24]
 800d82a:	f7ff fecb 	bl	800d5c4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d82e:	69bb      	ldr	r3, [r7, #24]
 800d830:	78fa      	ldrb	r2, [r7, #3]
 800d832:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d836:	bf00      	nop
 800d838:	3710      	adds	r7, #16
 800d83a:	46bd      	mov	sp, r7
 800d83c:	bd80      	pop	{r7, pc}
	...

0800d840 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b08e      	sub	sp, #56	; 0x38
 800d844:	af00      	add	r7, sp, #0
 800d846:	60f8      	str	r0, [r7, #12]
 800d848:	60b9      	str	r1, [r7, #8]
 800d84a:	607a      	str	r2, [r7, #4]
 800d84c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d84e:	2300      	movs	r3, #0
 800d850:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d109      	bne.n	800d870 <xQueueGenericSend+0x30>
 800d85c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d860:	f383 8811 	msr	BASEPRI, r3
 800d864:	f3bf 8f6f 	isb	sy
 800d868:	f3bf 8f4f 	dsb	sy
 800d86c:	62bb      	str	r3, [r7, #40]	; 0x28
 800d86e:	e7fe      	b.n	800d86e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d870:	68bb      	ldr	r3, [r7, #8]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d103      	bne.n	800d87e <xQueueGenericSend+0x3e>
 800d876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d101      	bne.n	800d882 <xQueueGenericSend+0x42>
 800d87e:	2301      	movs	r3, #1
 800d880:	e000      	b.n	800d884 <xQueueGenericSend+0x44>
 800d882:	2300      	movs	r3, #0
 800d884:	2b00      	cmp	r3, #0
 800d886:	d109      	bne.n	800d89c <xQueueGenericSend+0x5c>
 800d888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d88c:	f383 8811 	msr	BASEPRI, r3
 800d890:	f3bf 8f6f 	isb	sy
 800d894:	f3bf 8f4f 	dsb	sy
 800d898:	627b      	str	r3, [r7, #36]	; 0x24
 800d89a:	e7fe      	b.n	800d89a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d89c:	683b      	ldr	r3, [r7, #0]
 800d89e:	2b02      	cmp	r3, #2
 800d8a0:	d103      	bne.n	800d8aa <xQueueGenericSend+0x6a>
 800d8a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8a6:	2b01      	cmp	r3, #1
 800d8a8:	d101      	bne.n	800d8ae <xQueueGenericSend+0x6e>
 800d8aa:	2301      	movs	r3, #1
 800d8ac:	e000      	b.n	800d8b0 <xQueueGenericSend+0x70>
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d109      	bne.n	800d8c8 <xQueueGenericSend+0x88>
 800d8b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8b8:	f383 8811 	msr	BASEPRI, r3
 800d8bc:	f3bf 8f6f 	isb	sy
 800d8c0:	f3bf 8f4f 	dsb	sy
 800d8c4:	623b      	str	r3, [r7, #32]
 800d8c6:	e7fe      	b.n	800d8c6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d8c8:	f001 fa38 	bl	800ed3c <xTaskGetSchedulerState>
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d102      	bne.n	800d8d8 <xQueueGenericSend+0x98>
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d101      	bne.n	800d8dc <xQueueGenericSend+0x9c>
 800d8d8:	2301      	movs	r3, #1
 800d8da:	e000      	b.n	800d8de <xQueueGenericSend+0x9e>
 800d8dc:	2300      	movs	r3, #0
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d109      	bne.n	800d8f6 <xQueueGenericSend+0xb6>
 800d8e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8e6:	f383 8811 	msr	BASEPRI, r3
 800d8ea:	f3bf 8f6f 	isb	sy
 800d8ee:	f3bf 8f4f 	dsb	sy
 800d8f2:	61fb      	str	r3, [r7, #28]
 800d8f4:	e7fe      	b.n	800d8f4 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d8f6:	f002 f951 	bl	800fb9c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d8fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d8fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d902:	429a      	cmp	r2, r3
 800d904:	d302      	bcc.n	800d90c <xQueueGenericSend+0xcc>
 800d906:	683b      	ldr	r3, [r7, #0]
 800d908:	2b02      	cmp	r3, #2
 800d90a:	d129      	bne.n	800d960 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d90c:	683a      	ldr	r2, [r7, #0]
 800d90e:	68b9      	ldr	r1, [r7, #8]
 800d910:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d912:	f000 fa9e 	bl	800de52 <prvCopyDataToQueue>
 800d916:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d91a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d010      	beq.n	800d942 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d922:	3324      	adds	r3, #36	; 0x24
 800d924:	4618      	mov	r0, r3
 800d926:	f001 f853 	bl	800e9d0 <xTaskRemoveFromEventList>
 800d92a:	4603      	mov	r3, r0
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d013      	beq.n	800d958 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d930:	4b3f      	ldr	r3, [pc, #252]	; (800da30 <xQueueGenericSend+0x1f0>)
 800d932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d936:	601a      	str	r2, [r3, #0]
 800d938:	f3bf 8f4f 	dsb	sy
 800d93c:	f3bf 8f6f 	isb	sy
 800d940:	e00a      	b.n	800d958 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d944:	2b00      	cmp	r3, #0
 800d946:	d007      	beq.n	800d958 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d948:	4b39      	ldr	r3, [pc, #228]	; (800da30 <xQueueGenericSend+0x1f0>)
 800d94a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d94e:	601a      	str	r2, [r3, #0]
 800d950:	f3bf 8f4f 	dsb	sy
 800d954:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d958:	f002 f94e 	bl	800fbf8 <vPortExitCritical>
				return pdPASS;
 800d95c:	2301      	movs	r3, #1
 800d95e:	e063      	b.n	800da28 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d103      	bne.n	800d96e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d966:	f002 f947 	bl	800fbf8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d96a:	2300      	movs	r3, #0
 800d96c:	e05c      	b.n	800da28 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d96e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d970:	2b00      	cmp	r3, #0
 800d972:	d106      	bne.n	800d982 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d974:	f107 0314 	add.w	r3, r7, #20
 800d978:	4618      	mov	r0, r3
 800d97a:	f001 f88b 	bl	800ea94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d97e:	2301      	movs	r3, #1
 800d980:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d982:	f002 f939 	bl	800fbf8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d986:	f000 fe07 	bl	800e598 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d98a:	f002 f907 	bl	800fb9c <vPortEnterCritical>
 800d98e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d990:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d994:	b25b      	sxtb	r3, r3
 800d996:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d99a:	d103      	bne.n	800d9a4 <xQueueGenericSend+0x164>
 800d99c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d99e:	2200      	movs	r2, #0
 800d9a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d9a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d9aa:	b25b      	sxtb	r3, r3
 800d9ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d9b0:	d103      	bne.n	800d9ba <xQueueGenericSend+0x17a>
 800d9b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d9ba:	f002 f91d 	bl	800fbf8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d9be:	1d3a      	adds	r2, r7, #4
 800d9c0:	f107 0314 	add.w	r3, r7, #20
 800d9c4:	4611      	mov	r1, r2
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	f001 f87a 	bl	800eac0 <xTaskCheckForTimeOut>
 800d9cc:	4603      	mov	r3, r0
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d124      	bne.n	800da1c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d9d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d9d4:	f000 fb35 	bl	800e042 <prvIsQueueFull>
 800d9d8:	4603      	mov	r3, r0
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d018      	beq.n	800da10 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d9de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9e0:	3310      	adds	r3, #16
 800d9e2:	687a      	ldr	r2, [r7, #4]
 800d9e4:	4611      	mov	r1, r2
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	f000 ffa4 	bl	800e934 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d9ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d9ee:	f000 fac0 	bl	800df72 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d9f2:	f000 fddf 	bl	800e5b4 <xTaskResumeAll>
 800d9f6:	4603      	mov	r3, r0
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	f47f af7c 	bne.w	800d8f6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800d9fe:	4b0c      	ldr	r3, [pc, #48]	; (800da30 <xQueueGenericSend+0x1f0>)
 800da00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da04:	601a      	str	r2, [r3, #0]
 800da06:	f3bf 8f4f 	dsb	sy
 800da0a:	f3bf 8f6f 	isb	sy
 800da0e:	e772      	b.n	800d8f6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800da10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da12:	f000 faae 	bl	800df72 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800da16:	f000 fdcd 	bl	800e5b4 <xTaskResumeAll>
 800da1a:	e76c      	b.n	800d8f6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800da1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da1e:	f000 faa8 	bl	800df72 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800da22:	f000 fdc7 	bl	800e5b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800da26:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800da28:	4618      	mov	r0, r3
 800da2a:	3738      	adds	r7, #56	; 0x38
 800da2c:	46bd      	mov	sp, r7
 800da2e:	bd80      	pop	{r7, pc}
 800da30:	e000ed04 	.word	0xe000ed04

0800da34 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800da34:	b580      	push	{r7, lr}
 800da36:	b08e      	sub	sp, #56	; 0x38
 800da38:	af00      	add	r7, sp, #0
 800da3a:	60f8      	str	r0, [r7, #12]
 800da3c:	60b9      	str	r1, [r7, #8]
 800da3e:	607a      	str	r2, [r7, #4]
 800da40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800da46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d109      	bne.n	800da60 <xQueueGenericSendFromISR+0x2c>
 800da4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da50:	f383 8811 	msr	BASEPRI, r3
 800da54:	f3bf 8f6f 	isb	sy
 800da58:	f3bf 8f4f 	dsb	sy
 800da5c:	627b      	str	r3, [r7, #36]	; 0x24
 800da5e:	e7fe      	b.n	800da5e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800da60:	68bb      	ldr	r3, [r7, #8]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d103      	bne.n	800da6e <xQueueGenericSendFromISR+0x3a>
 800da66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d101      	bne.n	800da72 <xQueueGenericSendFromISR+0x3e>
 800da6e:	2301      	movs	r3, #1
 800da70:	e000      	b.n	800da74 <xQueueGenericSendFromISR+0x40>
 800da72:	2300      	movs	r3, #0
 800da74:	2b00      	cmp	r3, #0
 800da76:	d109      	bne.n	800da8c <xQueueGenericSendFromISR+0x58>
 800da78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da7c:	f383 8811 	msr	BASEPRI, r3
 800da80:	f3bf 8f6f 	isb	sy
 800da84:	f3bf 8f4f 	dsb	sy
 800da88:	623b      	str	r3, [r7, #32]
 800da8a:	e7fe      	b.n	800da8a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800da8c:	683b      	ldr	r3, [r7, #0]
 800da8e:	2b02      	cmp	r3, #2
 800da90:	d103      	bne.n	800da9a <xQueueGenericSendFromISR+0x66>
 800da92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da96:	2b01      	cmp	r3, #1
 800da98:	d101      	bne.n	800da9e <xQueueGenericSendFromISR+0x6a>
 800da9a:	2301      	movs	r3, #1
 800da9c:	e000      	b.n	800daa0 <xQueueGenericSendFromISR+0x6c>
 800da9e:	2300      	movs	r3, #0
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d109      	bne.n	800dab8 <xQueueGenericSendFromISR+0x84>
 800daa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daa8:	f383 8811 	msr	BASEPRI, r3
 800daac:	f3bf 8f6f 	isb	sy
 800dab0:	f3bf 8f4f 	dsb	sy
 800dab4:	61fb      	str	r3, [r7, #28]
 800dab6:	e7fe      	b.n	800dab6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dab8:	f002 f94c 	bl	800fd54 <vPortValidateInterruptPriority>
	__asm volatile
 800dabc:	f3ef 8211 	mrs	r2, BASEPRI
 800dac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dac4:	f383 8811 	msr	BASEPRI, r3
 800dac8:	f3bf 8f6f 	isb	sy
 800dacc:	f3bf 8f4f 	dsb	sy
 800dad0:	61ba      	str	r2, [r7, #24]
 800dad2:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800dad4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dad6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dada:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dadc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dae0:	429a      	cmp	r2, r3
 800dae2:	d302      	bcc.n	800daea <xQueueGenericSendFromISR+0xb6>
 800dae4:	683b      	ldr	r3, [r7, #0]
 800dae6:	2b02      	cmp	r3, #2
 800dae8:	d12c      	bne.n	800db44 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800daea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800daf0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800daf4:	683a      	ldr	r2, [r7, #0]
 800daf6:	68b9      	ldr	r1, [r7, #8]
 800daf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dafa:	f000 f9aa 	bl	800de52 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800dafe:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800db02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800db06:	d112      	bne.n	800db2e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800db08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d016      	beq.n	800db3e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800db10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db12:	3324      	adds	r3, #36	; 0x24
 800db14:	4618      	mov	r0, r3
 800db16:	f000 ff5b 	bl	800e9d0 <xTaskRemoveFromEventList>
 800db1a:	4603      	mov	r3, r0
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d00e      	beq.n	800db3e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	2b00      	cmp	r3, #0
 800db24:	d00b      	beq.n	800db3e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	2201      	movs	r2, #1
 800db2a:	601a      	str	r2, [r3, #0]
 800db2c:	e007      	b.n	800db3e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800db2e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800db32:	3301      	adds	r3, #1
 800db34:	b2db      	uxtb	r3, r3
 800db36:	b25a      	sxtb	r2, r3
 800db38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800db3e:	2301      	movs	r3, #1
 800db40:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800db42:	e001      	b.n	800db48 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800db44:	2300      	movs	r3, #0
 800db46:	637b      	str	r3, [r7, #52]	; 0x34
 800db48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db4a:	613b      	str	r3, [r7, #16]
	__asm volatile
 800db4c:	693b      	ldr	r3, [r7, #16]
 800db4e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800db52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800db54:	4618      	mov	r0, r3
 800db56:	3738      	adds	r7, #56	; 0x38
 800db58:	46bd      	mov	sp, r7
 800db5a:	bd80      	pop	{r7, pc}

0800db5c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800db5c:	b580      	push	{r7, lr}
 800db5e:	b08c      	sub	sp, #48	; 0x30
 800db60:	af00      	add	r7, sp, #0
 800db62:	60f8      	str	r0, [r7, #12]
 800db64:	60b9      	str	r1, [r7, #8]
 800db66:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800db68:	2300      	movs	r3, #0
 800db6a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800db70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db72:	2b00      	cmp	r3, #0
 800db74:	d109      	bne.n	800db8a <xQueueReceive+0x2e>
	__asm volatile
 800db76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db7a:	f383 8811 	msr	BASEPRI, r3
 800db7e:	f3bf 8f6f 	isb	sy
 800db82:	f3bf 8f4f 	dsb	sy
 800db86:	623b      	str	r3, [r7, #32]
 800db88:	e7fe      	b.n	800db88 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800db8a:	68bb      	ldr	r3, [r7, #8]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d103      	bne.n	800db98 <xQueueReceive+0x3c>
 800db90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db94:	2b00      	cmp	r3, #0
 800db96:	d101      	bne.n	800db9c <xQueueReceive+0x40>
 800db98:	2301      	movs	r3, #1
 800db9a:	e000      	b.n	800db9e <xQueueReceive+0x42>
 800db9c:	2300      	movs	r3, #0
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d109      	bne.n	800dbb6 <xQueueReceive+0x5a>
 800dba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dba6:	f383 8811 	msr	BASEPRI, r3
 800dbaa:	f3bf 8f6f 	isb	sy
 800dbae:	f3bf 8f4f 	dsb	sy
 800dbb2:	61fb      	str	r3, [r7, #28]
 800dbb4:	e7fe      	b.n	800dbb4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dbb6:	f001 f8c1 	bl	800ed3c <xTaskGetSchedulerState>
 800dbba:	4603      	mov	r3, r0
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d102      	bne.n	800dbc6 <xQueueReceive+0x6a>
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d101      	bne.n	800dbca <xQueueReceive+0x6e>
 800dbc6:	2301      	movs	r3, #1
 800dbc8:	e000      	b.n	800dbcc <xQueueReceive+0x70>
 800dbca:	2300      	movs	r3, #0
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d109      	bne.n	800dbe4 <xQueueReceive+0x88>
 800dbd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbd4:	f383 8811 	msr	BASEPRI, r3
 800dbd8:	f3bf 8f6f 	isb	sy
 800dbdc:	f3bf 8f4f 	dsb	sy
 800dbe0:	61bb      	str	r3, [r7, #24]
 800dbe2:	e7fe      	b.n	800dbe2 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dbe4:	f001 ffda 	bl	800fb9c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dbe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbec:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dbee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d01f      	beq.n	800dc34 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dbf4:	68b9      	ldr	r1, [r7, #8]
 800dbf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dbf8:	f000 f995 	bl	800df26 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dbfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbfe:	1e5a      	subs	r2, r3, #1
 800dc00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc02:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dc04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc06:	691b      	ldr	r3, [r3, #16]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d00f      	beq.n	800dc2c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dc0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc0e:	3310      	adds	r3, #16
 800dc10:	4618      	mov	r0, r3
 800dc12:	f000 fedd 	bl	800e9d0 <xTaskRemoveFromEventList>
 800dc16:	4603      	mov	r3, r0
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d007      	beq.n	800dc2c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800dc1c:	4b3c      	ldr	r3, [pc, #240]	; (800dd10 <xQueueReceive+0x1b4>)
 800dc1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc22:	601a      	str	r2, [r3, #0]
 800dc24:	f3bf 8f4f 	dsb	sy
 800dc28:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dc2c:	f001 ffe4 	bl	800fbf8 <vPortExitCritical>
				return pdPASS;
 800dc30:	2301      	movs	r3, #1
 800dc32:	e069      	b.n	800dd08 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d103      	bne.n	800dc42 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800dc3a:	f001 ffdd 	bl	800fbf8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800dc3e:	2300      	movs	r3, #0
 800dc40:	e062      	b.n	800dd08 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dc42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d106      	bne.n	800dc56 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dc48:	f107 0310 	add.w	r3, r7, #16
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	f000 ff21 	bl	800ea94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dc52:	2301      	movs	r3, #1
 800dc54:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dc56:	f001 ffcf 	bl	800fbf8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dc5a:	f000 fc9d 	bl	800e598 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dc5e:	f001 ff9d 	bl	800fb9c <vPortEnterCritical>
 800dc62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dc68:	b25b      	sxtb	r3, r3
 800dc6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dc6e:	d103      	bne.n	800dc78 <xQueueReceive+0x11c>
 800dc70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc72:	2200      	movs	r2, #0
 800dc74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dc78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dc7e:	b25b      	sxtb	r3, r3
 800dc80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dc84:	d103      	bne.n	800dc8e <xQueueReceive+0x132>
 800dc86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc88:	2200      	movs	r2, #0
 800dc8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dc8e:	f001 ffb3 	bl	800fbf8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dc92:	1d3a      	adds	r2, r7, #4
 800dc94:	f107 0310 	add.w	r3, r7, #16
 800dc98:	4611      	mov	r1, r2
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	f000 ff10 	bl	800eac0 <xTaskCheckForTimeOut>
 800dca0:	4603      	mov	r3, r0
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d123      	bne.n	800dcee <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dca6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dca8:	f000 f9b5 	bl	800e016 <prvIsQueueEmpty>
 800dcac:	4603      	mov	r3, r0
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d017      	beq.n	800dce2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dcb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcb4:	3324      	adds	r3, #36	; 0x24
 800dcb6:	687a      	ldr	r2, [r7, #4]
 800dcb8:	4611      	mov	r1, r2
 800dcba:	4618      	mov	r0, r3
 800dcbc:	f000 fe3a 	bl	800e934 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dcc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dcc2:	f000 f956 	bl	800df72 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dcc6:	f000 fc75 	bl	800e5b4 <xTaskResumeAll>
 800dcca:	4603      	mov	r3, r0
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d189      	bne.n	800dbe4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800dcd0:	4b0f      	ldr	r3, [pc, #60]	; (800dd10 <xQueueReceive+0x1b4>)
 800dcd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcd6:	601a      	str	r2, [r3, #0]
 800dcd8:	f3bf 8f4f 	dsb	sy
 800dcdc:	f3bf 8f6f 	isb	sy
 800dce0:	e780      	b.n	800dbe4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800dce2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dce4:	f000 f945 	bl	800df72 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dce8:	f000 fc64 	bl	800e5b4 <xTaskResumeAll>
 800dcec:	e77a      	b.n	800dbe4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800dcee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dcf0:	f000 f93f 	bl	800df72 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dcf4:	f000 fc5e 	bl	800e5b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dcf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dcfa:	f000 f98c 	bl	800e016 <prvIsQueueEmpty>
 800dcfe:	4603      	mov	r3, r0
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	f43f af6f 	beq.w	800dbe4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dd06:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dd08:	4618      	mov	r0, r3
 800dd0a:	3730      	adds	r7, #48	; 0x30
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	bd80      	pop	{r7, pc}
 800dd10:	e000ed04 	.word	0xe000ed04

0800dd14 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b08e      	sub	sp, #56	; 0x38
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	60f8      	str	r0, [r7, #12]
 800dd1c:	60b9      	str	r1, [r7, #8]
 800dd1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800dd24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d109      	bne.n	800dd3e <xQueueReceiveFromISR+0x2a>
 800dd2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd2e:	f383 8811 	msr	BASEPRI, r3
 800dd32:	f3bf 8f6f 	isb	sy
 800dd36:	f3bf 8f4f 	dsb	sy
 800dd3a:	623b      	str	r3, [r7, #32]
 800dd3c:	e7fe      	b.n	800dd3c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dd3e:	68bb      	ldr	r3, [r7, #8]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d103      	bne.n	800dd4c <xQueueReceiveFromISR+0x38>
 800dd44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d101      	bne.n	800dd50 <xQueueReceiveFromISR+0x3c>
 800dd4c:	2301      	movs	r3, #1
 800dd4e:	e000      	b.n	800dd52 <xQueueReceiveFromISR+0x3e>
 800dd50:	2300      	movs	r3, #0
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d109      	bne.n	800dd6a <xQueueReceiveFromISR+0x56>
 800dd56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd5a:	f383 8811 	msr	BASEPRI, r3
 800dd5e:	f3bf 8f6f 	isb	sy
 800dd62:	f3bf 8f4f 	dsb	sy
 800dd66:	61fb      	str	r3, [r7, #28]
 800dd68:	e7fe      	b.n	800dd68 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dd6a:	f001 fff3 	bl	800fd54 <vPortValidateInterruptPriority>
	__asm volatile
 800dd6e:	f3ef 8211 	mrs	r2, BASEPRI
 800dd72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd76:	f383 8811 	msr	BASEPRI, r3
 800dd7a:	f3bf 8f6f 	isb	sy
 800dd7e:	f3bf 8f4f 	dsb	sy
 800dd82:	61ba      	str	r2, [r7, #24]
 800dd84:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800dd86:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dd88:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dd8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd8e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dd90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d02f      	beq.n	800ddf6 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800dd96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dd9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dda0:	68b9      	ldr	r1, [r7, #8]
 800dda2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dda4:	f000 f8bf 	bl	800df26 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dda8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddaa:	1e5a      	subs	r2, r3, #1
 800ddac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddae:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ddb0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ddb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ddb8:	d112      	bne.n	800dde0 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ddba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddbc:	691b      	ldr	r3, [r3, #16]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d016      	beq.n	800ddf0 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ddc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddc4:	3310      	adds	r3, #16
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	f000 fe02 	bl	800e9d0 <xTaskRemoveFromEventList>
 800ddcc:	4603      	mov	r3, r0
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d00e      	beq.n	800ddf0 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d00b      	beq.n	800ddf0 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	2201      	movs	r2, #1
 800dddc:	601a      	str	r2, [r3, #0]
 800ddde:	e007      	b.n	800ddf0 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800dde0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dde4:	3301      	adds	r3, #1
 800dde6:	b2db      	uxtb	r3, r3
 800dde8:	b25a      	sxtb	r2, r3
 800ddea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ddf0:	2301      	movs	r3, #1
 800ddf2:	637b      	str	r3, [r7, #52]	; 0x34
 800ddf4:	e001      	b.n	800ddfa <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	637b      	str	r3, [r7, #52]	; 0x34
 800ddfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddfc:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ddfe:	693b      	ldr	r3, [r7, #16]
 800de00:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800de04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800de06:	4618      	mov	r0, r3
 800de08:	3738      	adds	r7, #56	; 0x38
 800de0a:	46bd      	mov	sp, r7
 800de0c:	bd80      	pop	{r7, pc}

0800de0e <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 800de0e:	b580      	push	{r7, lr}
 800de10:	b086      	sub	sp, #24
 800de12:	af00      	add	r7, sp, #0
 800de14:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800de1a:	697b      	ldr	r3, [r7, #20]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d109      	bne.n	800de34 <uxQueueSpacesAvailable+0x26>
	__asm volatile
 800de20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de24:	f383 8811 	msr	BASEPRI, r3
 800de28:	f3bf 8f6f 	isb	sy
 800de2c:	f3bf 8f4f 	dsb	sy
 800de30:	60fb      	str	r3, [r7, #12]
 800de32:	e7fe      	b.n	800de32 <uxQueueSpacesAvailable+0x24>

	taskENTER_CRITICAL();
 800de34:	f001 feb2 	bl	800fb9c <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 800de38:	697b      	ldr	r3, [r7, #20]
 800de3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800de3c:	697b      	ldr	r3, [r7, #20]
 800de3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de40:	1ad3      	subs	r3, r2, r3
 800de42:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800de44:	f001 fed8 	bl	800fbf8 <vPortExitCritical>

	return uxReturn;
 800de48:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800de4a:	4618      	mov	r0, r3
 800de4c:	3718      	adds	r7, #24
 800de4e:	46bd      	mov	sp, r7
 800de50:	bd80      	pop	{r7, pc}

0800de52 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800de52:	b580      	push	{r7, lr}
 800de54:	b086      	sub	sp, #24
 800de56:	af00      	add	r7, sp, #0
 800de58:	60f8      	str	r0, [r7, #12]
 800de5a:	60b9      	str	r1, [r7, #8]
 800de5c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800de5e:	2300      	movs	r3, #0
 800de60:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de66:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d10d      	bne.n	800de8c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d14d      	bne.n	800df14 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	689b      	ldr	r3, [r3, #8]
 800de7c:	4618      	mov	r0, r3
 800de7e:	f000 ff7b 	bl	800ed78 <xTaskPriorityDisinherit>
 800de82:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	2200      	movs	r2, #0
 800de88:	609a      	str	r2, [r3, #8]
 800de8a:	e043      	b.n	800df14 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d119      	bne.n	800dec6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	6858      	ldr	r0, [r3, #4]
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de9a:	461a      	mov	r2, r3
 800de9c:	68b9      	ldr	r1, [r7, #8]
 800de9e:	f007 f802 	bl	8014ea6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	685a      	ldr	r2, [r3, #4]
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800deaa:	441a      	add	r2, r3
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	685a      	ldr	r2, [r3, #4]
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	689b      	ldr	r3, [r3, #8]
 800deb8:	429a      	cmp	r2, r3
 800deba:	d32b      	bcc.n	800df14 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	681a      	ldr	r2, [r3, #0]
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	605a      	str	r2, [r3, #4]
 800dec4:	e026      	b.n	800df14 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	68d8      	ldr	r0, [r3, #12]
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dece:	461a      	mov	r2, r3
 800ded0:	68b9      	ldr	r1, [r7, #8]
 800ded2:	f006 ffe8 	bl	8014ea6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	68da      	ldr	r2, [r3, #12]
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dede:	425b      	negs	r3, r3
 800dee0:	441a      	add	r2, r3
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	68da      	ldr	r2, [r3, #12]
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	429a      	cmp	r2, r3
 800def0:	d207      	bcs.n	800df02 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	689a      	ldr	r2, [r3, #8]
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800defa:	425b      	negs	r3, r3
 800defc:	441a      	add	r2, r3
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	2b02      	cmp	r3, #2
 800df06:	d105      	bne.n	800df14 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800df08:	693b      	ldr	r3, [r7, #16]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d002      	beq.n	800df14 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800df0e:	693b      	ldr	r3, [r7, #16]
 800df10:	3b01      	subs	r3, #1
 800df12:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800df14:	693b      	ldr	r3, [r7, #16]
 800df16:	1c5a      	adds	r2, r3, #1
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800df1c:	697b      	ldr	r3, [r7, #20]
}
 800df1e:	4618      	mov	r0, r3
 800df20:	3718      	adds	r7, #24
 800df22:	46bd      	mov	sp, r7
 800df24:	bd80      	pop	{r7, pc}

0800df26 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800df26:	b580      	push	{r7, lr}
 800df28:	b082      	sub	sp, #8
 800df2a:	af00      	add	r7, sp, #0
 800df2c:	6078      	str	r0, [r7, #4]
 800df2e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df34:	2b00      	cmp	r3, #0
 800df36:	d018      	beq.n	800df6a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	68da      	ldr	r2, [r3, #12]
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df40:	441a      	add	r2, r3
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	68da      	ldr	r2, [r3, #12]
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	689b      	ldr	r3, [r3, #8]
 800df4e:	429a      	cmp	r2, r3
 800df50:	d303      	bcc.n	800df5a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	681a      	ldr	r2, [r3, #0]
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	68d9      	ldr	r1, [r3, #12]
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df62:	461a      	mov	r2, r3
 800df64:	6838      	ldr	r0, [r7, #0]
 800df66:	f006 ff9e 	bl	8014ea6 <memcpy>
	}
}
 800df6a:	bf00      	nop
 800df6c:	3708      	adds	r7, #8
 800df6e:	46bd      	mov	sp, r7
 800df70:	bd80      	pop	{r7, pc}

0800df72 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800df72:	b580      	push	{r7, lr}
 800df74:	b084      	sub	sp, #16
 800df76:	af00      	add	r7, sp, #0
 800df78:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800df7a:	f001 fe0f 	bl	800fb9c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800df84:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800df86:	e011      	b.n	800dfac <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d012      	beq.n	800dfb6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	3324      	adds	r3, #36	; 0x24
 800df94:	4618      	mov	r0, r3
 800df96:	f000 fd1b 	bl	800e9d0 <xTaskRemoveFromEventList>
 800df9a:	4603      	mov	r3, r0
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d001      	beq.n	800dfa4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800dfa0:	f000 fdee 	bl	800eb80 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800dfa4:	7bfb      	ldrb	r3, [r7, #15]
 800dfa6:	3b01      	subs	r3, #1
 800dfa8:	b2db      	uxtb	r3, r3
 800dfaa:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dfac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	dce9      	bgt.n	800df88 <prvUnlockQueue+0x16>
 800dfb4:	e000      	b.n	800dfb8 <prvUnlockQueue+0x46>
					break;
 800dfb6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	22ff      	movs	r2, #255	; 0xff
 800dfbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800dfc0:	f001 fe1a 	bl	800fbf8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dfc4:	f001 fdea 	bl	800fb9c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dfce:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dfd0:	e011      	b.n	800dff6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	691b      	ldr	r3, [r3, #16]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d012      	beq.n	800e000 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	3310      	adds	r3, #16
 800dfde:	4618      	mov	r0, r3
 800dfe0:	f000 fcf6 	bl	800e9d0 <xTaskRemoveFromEventList>
 800dfe4:	4603      	mov	r3, r0
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d001      	beq.n	800dfee <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800dfea:	f000 fdc9 	bl	800eb80 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800dfee:	7bbb      	ldrb	r3, [r7, #14]
 800dff0:	3b01      	subs	r3, #1
 800dff2:	b2db      	uxtb	r3, r3
 800dff4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dff6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	dce9      	bgt.n	800dfd2 <prvUnlockQueue+0x60>
 800dffe:	e000      	b.n	800e002 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e000:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	22ff      	movs	r2, #255	; 0xff
 800e006:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e00a:	f001 fdf5 	bl	800fbf8 <vPortExitCritical>
}
 800e00e:	bf00      	nop
 800e010:	3710      	adds	r7, #16
 800e012:	46bd      	mov	sp, r7
 800e014:	bd80      	pop	{r7, pc}

0800e016 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e016:	b580      	push	{r7, lr}
 800e018:	b084      	sub	sp, #16
 800e01a:	af00      	add	r7, sp, #0
 800e01c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e01e:	f001 fdbd 	bl	800fb9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e026:	2b00      	cmp	r3, #0
 800e028:	d102      	bne.n	800e030 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e02a:	2301      	movs	r3, #1
 800e02c:	60fb      	str	r3, [r7, #12]
 800e02e:	e001      	b.n	800e034 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e030:	2300      	movs	r3, #0
 800e032:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e034:	f001 fde0 	bl	800fbf8 <vPortExitCritical>

	return xReturn;
 800e038:	68fb      	ldr	r3, [r7, #12]
}
 800e03a:	4618      	mov	r0, r3
 800e03c:	3710      	adds	r7, #16
 800e03e:	46bd      	mov	sp, r7
 800e040:	bd80      	pop	{r7, pc}

0800e042 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e042:	b580      	push	{r7, lr}
 800e044:	b084      	sub	sp, #16
 800e046:	af00      	add	r7, sp, #0
 800e048:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e04a:	f001 fda7 	bl	800fb9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e056:	429a      	cmp	r2, r3
 800e058:	d102      	bne.n	800e060 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e05a:	2301      	movs	r3, #1
 800e05c:	60fb      	str	r3, [r7, #12]
 800e05e:	e001      	b.n	800e064 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e060:	2300      	movs	r3, #0
 800e062:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e064:	f001 fdc8 	bl	800fbf8 <vPortExitCritical>

	return xReturn;
 800e068:	68fb      	ldr	r3, [r7, #12]
}
 800e06a:	4618      	mov	r0, r3
 800e06c:	3710      	adds	r7, #16
 800e06e:	46bd      	mov	sp, r7
 800e070:	bd80      	pop	{r7, pc}
	...

0800e074 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e074:	b480      	push	{r7}
 800e076:	b085      	sub	sp, #20
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
 800e07c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e07e:	2300      	movs	r3, #0
 800e080:	60fb      	str	r3, [r7, #12]
 800e082:	e014      	b.n	800e0ae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e084:	4a0e      	ldr	r2, [pc, #56]	; (800e0c0 <vQueueAddToRegistry+0x4c>)
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d10b      	bne.n	800e0a8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e090:	490b      	ldr	r1, [pc, #44]	; (800e0c0 <vQueueAddToRegistry+0x4c>)
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	683a      	ldr	r2, [r7, #0]
 800e096:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e09a:	4a09      	ldr	r2, [pc, #36]	; (800e0c0 <vQueueAddToRegistry+0x4c>)
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	00db      	lsls	r3, r3, #3
 800e0a0:	4413      	add	r3, r2
 800e0a2:	687a      	ldr	r2, [r7, #4]
 800e0a4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e0a6:	e005      	b.n	800e0b4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	3301      	adds	r3, #1
 800e0ac:	60fb      	str	r3, [r7, #12]
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	2b07      	cmp	r3, #7
 800e0b2:	d9e7      	bls.n	800e084 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e0b4:	bf00      	nop
 800e0b6:	3714      	adds	r7, #20
 800e0b8:	46bd      	mov	sp, r7
 800e0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0be:	4770      	bx	lr
 800e0c0:	200071f0 	.word	0x200071f0

0800e0c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e0c4:	b580      	push	{r7, lr}
 800e0c6:	b086      	sub	sp, #24
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	60f8      	str	r0, [r7, #12]
 800e0cc:	60b9      	str	r1, [r7, #8]
 800e0ce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e0d4:	f001 fd62 	bl	800fb9c <vPortEnterCritical>
 800e0d8:	697b      	ldr	r3, [r7, #20]
 800e0da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e0de:	b25b      	sxtb	r3, r3
 800e0e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e0e4:	d103      	bne.n	800e0ee <vQueueWaitForMessageRestricted+0x2a>
 800e0e6:	697b      	ldr	r3, [r7, #20]
 800e0e8:	2200      	movs	r2, #0
 800e0ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e0ee:	697b      	ldr	r3, [r7, #20]
 800e0f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e0f4:	b25b      	sxtb	r3, r3
 800e0f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e0fa:	d103      	bne.n	800e104 <vQueueWaitForMessageRestricted+0x40>
 800e0fc:	697b      	ldr	r3, [r7, #20]
 800e0fe:	2200      	movs	r2, #0
 800e100:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e104:	f001 fd78 	bl	800fbf8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e108:	697b      	ldr	r3, [r7, #20]
 800e10a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d106      	bne.n	800e11e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e110:	697b      	ldr	r3, [r7, #20]
 800e112:	3324      	adds	r3, #36	; 0x24
 800e114:	687a      	ldr	r2, [r7, #4]
 800e116:	68b9      	ldr	r1, [r7, #8]
 800e118:	4618      	mov	r0, r3
 800e11a:	f000 fc2f 	bl	800e97c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e11e:	6978      	ldr	r0, [r7, #20]
 800e120:	f7ff ff27 	bl	800df72 <prvUnlockQueue>
	}
 800e124:	bf00      	nop
 800e126:	3718      	adds	r7, #24
 800e128:	46bd      	mov	sp, r7
 800e12a:	bd80      	pop	{r7, pc}

0800e12c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e12c:	b580      	push	{r7, lr}
 800e12e:	b08e      	sub	sp, #56	; 0x38
 800e130:	af04      	add	r7, sp, #16
 800e132:	60f8      	str	r0, [r7, #12]
 800e134:	60b9      	str	r1, [r7, #8]
 800e136:	607a      	str	r2, [r7, #4]
 800e138:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e13a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d109      	bne.n	800e154 <xTaskCreateStatic+0x28>
 800e140:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e144:	f383 8811 	msr	BASEPRI, r3
 800e148:	f3bf 8f6f 	isb	sy
 800e14c:	f3bf 8f4f 	dsb	sy
 800e150:	623b      	str	r3, [r7, #32]
 800e152:	e7fe      	b.n	800e152 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800e154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e156:	2b00      	cmp	r3, #0
 800e158:	d109      	bne.n	800e16e <xTaskCreateStatic+0x42>
 800e15a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e15e:	f383 8811 	msr	BASEPRI, r3
 800e162:	f3bf 8f6f 	isb	sy
 800e166:	f3bf 8f4f 	dsb	sy
 800e16a:	61fb      	str	r3, [r7, #28]
 800e16c:	e7fe      	b.n	800e16c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e16e:	235c      	movs	r3, #92	; 0x5c
 800e170:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e172:	693b      	ldr	r3, [r7, #16]
 800e174:	2b5c      	cmp	r3, #92	; 0x5c
 800e176:	d009      	beq.n	800e18c <xTaskCreateStatic+0x60>
 800e178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e17c:	f383 8811 	msr	BASEPRI, r3
 800e180:	f3bf 8f6f 	isb	sy
 800e184:	f3bf 8f4f 	dsb	sy
 800e188:	61bb      	str	r3, [r7, #24]
 800e18a:	e7fe      	b.n	800e18a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e18c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e18e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e190:	2b00      	cmp	r3, #0
 800e192:	d01e      	beq.n	800e1d2 <xTaskCreateStatic+0xa6>
 800e194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e196:	2b00      	cmp	r3, #0
 800e198:	d01b      	beq.n	800e1d2 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e19a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e19c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e1a2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1a6:	2202      	movs	r2, #2
 800e1a8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	9303      	str	r3, [sp, #12]
 800e1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1b2:	9302      	str	r3, [sp, #8]
 800e1b4:	f107 0314 	add.w	r3, r7, #20
 800e1b8:	9301      	str	r3, [sp, #4]
 800e1ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1bc:	9300      	str	r3, [sp, #0]
 800e1be:	683b      	ldr	r3, [r7, #0]
 800e1c0:	687a      	ldr	r2, [r7, #4]
 800e1c2:	68b9      	ldr	r1, [r7, #8]
 800e1c4:	68f8      	ldr	r0, [r7, #12]
 800e1c6:	f000 f850 	bl	800e26a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e1ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e1cc:	f000 f8dc 	bl	800e388 <prvAddNewTaskToReadyList>
 800e1d0:	e001      	b.n	800e1d6 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e1d6:	697b      	ldr	r3, [r7, #20]
	}
 800e1d8:	4618      	mov	r0, r3
 800e1da:	3728      	adds	r7, #40	; 0x28
 800e1dc:	46bd      	mov	sp, r7
 800e1de:	bd80      	pop	{r7, pc}

0800e1e0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b08c      	sub	sp, #48	; 0x30
 800e1e4:	af04      	add	r7, sp, #16
 800e1e6:	60f8      	str	r0, [r7, #12]
 800e1e8:	60b9      	str	r1, [r7, #8]
 800e1ea:	603b      	str	r3, [r7, #0]
 800e1ec:	4613      	mov	r3, r2
 800e1ee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e1f0:	88fb      	ldrh	r3, [r7, #6]
 800e1f2:	009b      	lsls	r3, r3, #2
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	f001 fdeb 	bl	800fdd0 <pvPortMalloc>
 800e1fa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e1fc:	697b      	ldr	r3, [r7, #20]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d00e      	beq.n	800e220 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e202:	205c      	movs	r0, #92	; 0x5c
 800e204:	f001 fde4 	bl	800fdd0 <pvPortMalloc>
 800e208:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e20a:	69fb      	ldr	r3, [r7, #28]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d003      	beq.n	800e218 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e210:	69fb      	ldr	r3, [r7, #28]
 800e212:	697a      	ldr	r2, [r7, #20]
 800e214:	631a      	str	r2, [r3, #48]	; 0x30
 800e216:	e005      	b.n	800e224 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e218:	6978      	ldr	r0, [r7, #20]
 800e21a:	f001 fe9b 	bl	800ff54 <vPortFree>
 800e21e:	e001      	b.n	800e224 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e220:	2300      	movs	r3, #0
 800e222:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e224:	69fb      	ldr	r3, [r7, #28]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d017      	beq.n	800e25a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e22a:	69fb      	ldr	r3, [r7, #28]
 800e22c:	2200      	movs	r2, #0
 800e22e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e232:	88fa      	ldrh	r2, [r7, #6]
 800e234:	2300      	movs	r3, #0
 800e236:	9303      	str	r3, [sp, #12]
 800e238:	69fb      	ldr	r3, [r7, #28]
 800e23a:	9302      	str	r3, [sp, #8]
 800e23c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e23e:	9301      	str	r3, [sp, #4]
 800e240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e242:	9300      	str	r3, [sp, #0]
 800e244:	683b      	ldr	r3, [r7, #0]
 800e246:	68b9      	ldr	r1, [r7, #8]
 800e248:	68f8      	ldr	r0, [r7, #12]
 800e24a:	f000 f80e 	bl	800e26a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e24e:	69f8      	ldr	r0, [r7, #28]
 800e250:	f000 f89a 	bl	800e388 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e254:	2301      	movs	r3, #1
 800e256:	61bb      	str	r3, [r7, #24]
 800e258:	e002      	b.n	800e260 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e25a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e25e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e260:	69bb      	ldr	r3, [r7, #24]
	}
 800e262:	4618      	mov	r0, r3
 800e264:	3720      	adds	r7, #32
 800e266:	46bd      	mov	sp, r7
 800e268:	bd80      	pop	{r7, pc}

0800e26a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e26a:	b580      	push	{r7, lr}
 800e26c:	b088      	sub	sp, #32
 800e26e:	af00      	add	r7, sp, #0
 800e270:	60f8      	str	r0, [r7, #12]
 800e272:	60b9      	str	r1, [r7, #8]
 800e274:	607a      	str	r2, [r7, #4]
 800e276:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e27a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	009b      	lsls	r3, r3, #2
 800e280:	461a      	mov	r2, r3
 800e282:	21a5      	movs	r1, #165	; 0xa5
 800e284:	f006 fe1a 	bl	8014ebc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e28a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e292:	3b01      	subs	r3, #1
 800e294:	009b      	lsls	r3, r3, #2
 800e296:	4413      	add	r3, r2
 800e298:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e29a:	69bb      	ldr	r3, [r7, #24]
 800e29c:	f023 0307 	bic.w	r3, r3, #7
 800e2a0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e2a2:	69bb      	ldr	r3, [r7, #24]
 800e2a4:	f003 0307 	and.w	r3, r3, #7
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d009      	beq.n	800e2c0 <prvInitialiseNewTask+0x56>
 800e2ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2b0:	f383 8811 	msr	BASEPRI, r3
 800e2b4:	f3bf 8f6f 	isb	sy
 800e2b8:	f3bf 8f4f 	dsb	sy
 800e2bc:	617b      	str	r3, [r7, #20]
 800e2be:	e7fe      	b.n	800e2be <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e2c0:	68bb      	ldr	r3, [r7, #8]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d01f      	beq.n	800e306 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	61fb      	str	r3, [r7, #28]
 800e2ca:	e012      	b.n	800e2f2 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e2cc:	68ba      	ldr	r2, [r7, #8]
 800e2ce:	69fb      	ldr	r3, [r7, #28]
 800e2d0:	4413      	add	r3, r2
 800e2d2:	7819      	ldrb	r1, [r3, #0]
 800e2d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e2d6:	69fb      	ldr	r3, [r7, #28]
 800e2d8:	4413      	add	r3, r2
 800e2da:	3334      	adds	r3, #52	; 0x34
 800e2dc:	460a      	mov	r2, r1
 800e2de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e2e0:	68ba      	ldr	r2, [r7, #8]
 800e2e2:	69fb      	ldr	r3, [r7, #28]
 800e2e4:	4413      	add	r3, r2
 800e2e6:	781b      	ldrb	r3, [r3, #0]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d006      	beq.n	800e2fa <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e2ec:	69fb      	ldr	r3, [r7, #28]
 800e2ee:	3301      	adds	r3, #1
 800e2f0:	61fb      	str	r3, [r7, #28]
 800e2f2:	69fb      	ldr	r3, [r7, #28]
 800e2f4:	2b0f      	cmp	r3, #15
 800e2f6:	d9e9      	bls.n	800e2cc <prvInitialiseNewTask+0x62>
 800e2f8:	e000      	b.n	800e2fc <prvInitialiseNewTask+0x92>
			{
				break;
 800e2fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e2fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2fe:	2200      	movs	r2, #0
 800e300:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e304:	e003      	b.n	800e30e <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e308:	2200      	movs	r2, #0
 800e30a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e30e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e310:	2b37      	cmp	r3, #55	; 0x37
 800e312:	d901      	bls.n	800e318 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e314:	2337      	movs	r3, #55	; 0x37
 800e316:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e31a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e31c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e31e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e320:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e322:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e326:	2200      	movs	r2, #0
 800e328:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e32a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e32c:	3304      	adds	r3, #4
 800e32e:	4618      	mov	r0, r3
 800e330:	f7ff f8b4 	bl	800d49c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e336:	3318      	adds	r3, #24
 800e338:	4618      	mov	r0, r3
 800e33a:	f7ff f8af 	bl	800d49c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e33e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e342:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e346:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e34a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e34c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e350:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e352:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e356:	2200      	movs	r2, #0
 800e358:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e35a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e35c:	2200      	movs	r2, #0
 800e35e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e362:	683a      	ldr	r2, [r7, #0]
 800e364:	68f9      	ldr	r1, [r7, #12]
 800e366:	69b8      	ldr	r0, [r7, #24]
 800e368:	f001 faf2 	bl	800f950 <pxPortInitialiseStack>
 800e36c:	4602      	mov	r2, r0
 800e36e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e370:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e374:	2b00      	cmp	r3, #0
 800e376:	d002      	beq.n	800e37e <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e37a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e37c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e37e:	bf00      	nop
 800e380:	3720      	adds	r7, #32
 800e382:	46bd      	mov	sp, r7
 800e384:	bd80      	pop	{r7, pc}
	...

0800e388 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e388:	b580      	push	{r7, lr}
 800e38a:	b082      	sub	sp, #8
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e390:	f001 fc04 	bl	800fb9c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e394:	4b2d      	ldr	r3, [pc, #180]	; (800e44c <prvAddNewTaskToReadyList+0xc4>)
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	3301      	adds	r3, #1
 800e39a:	4a2c      	ldr	r2, [pc, #176]	; (800e44c <prvAddNewTaskToReadyList+0xc4>)
 800e39c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e39e:	4b2c      	ldr	r3, [pc, #176]	; (800e450 <prvAddNewTaskToReadyList+0xc8>)
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d109      	bne.n	800e3ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e3a6:	4a2a      	ldr	r2, [pc, #168]	; (800e450 <prvAddNewTaskToReadyList+0xc8>)
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e3ac:	4b27      	ldr	r3, [pc, #156]	; (800e44c <prvAddNewTaskToReadyList+0xc4>)
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	2b01      	cmp	r3, #1
 800e3b2:	d110      	bne.n	800e3d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e3b4:	f000 fc08 	bl	800ebc8 <prvInitialiseTaskLists>
 800e3b8:	e00d      	b.n	800e3d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e3ba:	4b26      	ldr	r3, [pc, #152]	; (800e454 <prvAddNewTaskToReadyList+0xcc>)
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d109      	bne.n	800e3d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e3c2:	4b23      	ldr	r3, [pc, #140]	; (800e450 <prvAddNewTaskToReadyList+0xc8>)
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3cc:	429a      	cmp	r2, r3
 800e3ce:	d802      	bhi.n	800e3d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e3d0:	4a1f      	ldr	r2, [pc, #124]	; (800e450 <prvAddNewTaskToReadyList+0xc8>)
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e3d6:	4b20      	ldr	r3, [pc, #128]	; (800e458 <prvAddNewTaskToReadyList+0xd0>)
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	3301      	adds	r3, #1
 800e3dc:	4a1e      	ldr	r2, [pc, #120]	; (800e458 <prvAddNewTaskToReadyList+0xd0>)
 800e3de:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e3e0:	4b1d      	ldr	r3, [pc, #116]	; (800e458 <prvAddNewTaskToReadyList+0xd0>)
 800e3e2:	681a      	ldr	r2, [r3, #0]
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3ec:	4b1b      	ldr	r3, [pc, #108]	; (800e45c <prvAddNewTaskToReadyList+0xd4>)
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	429a      	cmp	r2, r3
 800e3f2:	d903      	bls.n	800e3fc <prvAddNewTaskToReadyList+0x74>
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3f8:	4a18      	ldr	r2, [pc, #96]	; (800e45c <prvAddNewTaskToReadyList+0xd4>)
 800e3fa:	6013      	str	r3, [r2, #0]
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e400:	4613      	mov	r3, r2
 800e402:	009b      	lsls	r3, r3, #2
 800e404:	4413      	add	r3, r2
 800e406:	009b      	lsls	r3, r3, #2
 800e408:	4a15      	ldr	r2, [pc, #84]	; (800e460 <prvAddNewTaskToReadyList+0xd8>)
 800e40a:	441a      	add	r2, r3
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	3304      	adds	r3, #4
 800e410:	4619      	mov	r1, r3
 800e412:	4610      	mov	r0, r2
 800e414:	f7ff f84f 	bl	800d4b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e418:	f001 fbee 	bl	800fbf8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e41c:	4b0d      	ldr	r3, [pc, #52]	; (800e454 <prvAddNewTaskToReadyList+0xcc>)
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d00e      	beq.n	800e442 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e424:	4b0a      	ldr	r3, [pc, #40]	; (800e450 <prvAddNewTaskToReadyList+0xc8>)
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e42e:	429a      	cmp	r2, r3
 800e430:	d207      	bcs.n	800e442 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e432:	4b0c      	ldr	r3, [pc, #48]	; (800e464 <prvAddNewTaskToReadyList+0xdc>)
 800e434:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e438:	601a      	str	r2, [r3, #0]
 800e43a:	f3bf 8f4f 	dsb	sy
 800e43e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e442:	bf00      	nop
 800e444:	3708      	adds	r7, #8
 800e446:	46bd      	mov	sp, r7
 800e448:	bd80      	pop	{r7, pc}
 800e44a:	bf00      	nop
 800e44c:	20001208 	.word	0x20001208
 800e450:	20000d34 	.word	0x20000d34
 800e454:	20001214 	.word	0x20001214
 800e458:	20001224 	.word	0x20001224
 800e45c:	20001210 	.word	0x20001210
 800e460:	20000d38 	.word	0x20000d38
 800e464:	e000ed04 	.word	0xe000ed04

0800e468 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e468:	b580      	push	{r7, lr}
 800e46a:	b084      	sub	sp, #16
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e470:	2300      	movs	r3, #0
 800e472:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d016      	beq.n	800e4a8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e47a:	4b13      	ldr	r3, [pc, #76]	; (800e4c8 <vTaskDelay+0x60>)
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d009      	beq.n	800e496 <vTaskDelay+0x2e>
 800e482:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e486:	f383 8811 	msr	BASEPRI, r3
 800e48a:	f3bf 8f6f 	isb	sy
 800e48e:	f3bf 8f4f 	dsb	sy
 800e492:	60bb      	str	r3, [r7, #8]
 800e494:	e7fe      	b.n	800e494 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800e496:	f000 f87f 	bl	800e598 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e49a:	2100      	movs	r1, #0
 800e49c:	6878      	ldr	r0, [r7, #4]
 800e49e:	f000 febd 	bl	800f21c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e4a2:	f000 f887 	bl	800e5b4 <xTaskResumeAll>
 800e4a6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d107      	bne.n	800e4be <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800e4ae:	4b07      	ldr	r3, [pc, #28]	; (800e4cc <vTaskDelay+0x64>)
 800e4b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e4b4:	601a      	str	r2, [r3, #0]
 800e4b6:	f3bf 8f4f 	dsb	sy
 800e4ba:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e4be:	bf00      	nop
 800e4c0:	3710      	adds	r7, #16
 800e4c2:	46bd      	mov	sp, r7
 800e4c4:	bd80      	pop	{r7, pc}
 800e4c6:	bf00      	nop
 800e4c8:	20001230 	.word	0x20001230
 800e4cc:	e000ed04 	.word	0xe000ed04

0800e4d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e4d0:	b580      	push	{r7, lr}
 800e4d2:	b08a      	sub	sp, #40	; 0x28
 800e4d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e4da:	2300      	movs	r3, #0
 800e4dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e4de:	463a      	mov	r2, r7
 800e4e0:	1d39      	adds	r1, r7, #4
 800e4e2:	f107 0308 	add.w	r3, r7, #8
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	f7fe ff84 	bl	800d3f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e4ec:	6839      	ldr	r1, [r7, #0]
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	68ba      	ldr	r2, [r7, #8]
 800e4f2:	9202      	str	r2, [sp, #8]
 800e4f4:	9301      	str	r3, [sp, #4]
 800e4f6:	2300      	movs	r3, #0
 800e4f8:	9300      	str	r3, [sp, #0]
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	460a      	mov	r2, r1
 800e4fe:	4920      	ldr	r1, [pc, #128]	; (800e580 <vTaskStartScheduler+0xb0>)
 800e500:	4820      	ldr	r0, [pc, #128]	; (800e584 <vTaskStartScheduler+0xb4>)
 800e502:	f7ff fe13 	bl	800e12c <xTaskCreateStatic>
 800e506:	4602      	mov	r2, r0
 800e508:	4b1f      	ldr	r3, [pc, #124]	; (800e588 <vTaskStartScheduler+0xb8>)
 800e50a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e50c:	4b1e      	ldr	r3, [pc, #120]	; (800e588 <vTaskStartScheduler+0xb8>)
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d002      	beq.n	800e51a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e514:	2301      	movs	r3, #1
 800e516:	617b      	str	r3, [r7, #20]
 800e518:	e001      	b.n	800e51e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e51a:	2300      	movs	r3, #0
 800e51c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e51e:	697b      	ldr	r3, [r7, #20]
 800e520:	2b01      	cmp	r3, #1
 800e522:	d102      	bne.n	800e52a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e524:	f000 fece 	bl	800f2c4 <xTimerCreateTimerTask>
 800e528:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e52a:	697b      	ldr	r3, [r7, #20]
 800e52c:	2b01      	cmp	r3, #1
 800e52e:	d115      	bne.n	800e55c <vTaskStartScheduler+0x8c>
 800e530:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e534:	f383 8811 	msr	BASEPRI, r3
 800e538:	f3bf 8f6f 	isb	sy
 800e53c:	f3bf 8f4f 	dsb	sy
 800e540:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e542:	4b12      	ldr	r3, [pc, #72]	; (800e58c <vTaskStartScheduler+0xbc>)
 800e544:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e548:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e54a:	4b11      	ldr	r3, [pc, #68]	; (800e590 <vTaskStartScheduler+0xc0>)
 800e54c:	2201      	movs	r2, #1
 800e54e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e550:	4b10      	ldr	r3, [pc, #64]	; (800e594 <vTaskStartScheduler+0xc4>)
 800e552:	2200      	movs	r2, #0
 800e554:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e556:	f001 fa83 	bl	800fa60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e55a:	e00d      	b.n	800e578 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e55c:	697b      	ldr	r3, [r7, #20]
 800e55e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e562:	d109      	bne.n	800e578 <vTaskStartScheduler+0xa8>
 800e564:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e568:	f383 8811 	msr	BASEPRI, r3
 800e56c:	f3bf 8f6f 	isb	sy
 800e570:	f3bf 8f4f 	dsb	sy
 800e574:	60fb      	str	r3, [r7, #12]
 800e576:	e7fe      	b.n	800e576 <vTaskStartScheduler+0xa6>
}
 800e578:	bf00      	nop
 800e57a:	3718      	adds	r7, #24
 800e57c:	46bd      	mov	sp, r7
 800e57e:	bd80      	pop	{r7, pc}
 800e580:	08015f18 	.word	0x08015f18
 800e584:	0800eb99 	.word	0x0800eb99
 800e588:	2000122c 	.word	0x2000122c
 800e58c:	20001228 	.word	0x20001228
 800e590:	20001214 	.word	0x20001214
 800e594:	2000120c 	.word	0x2000120c

0800e598 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e598:	b480      	push	{r7}
 800e59a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800e59c:	4b04      	ldr	r3, [pc, #16]	; (800e5b0 <vTaskSuspendAll+0x18>)
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	3301      	adds	r3, #1
 800e5a2:	4a03      	ldr	r2, [pc, #12]	; (800e5b0 <vTaskSuspendAll+0x18>)
 800e5a4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800e5a6:	bf00      	nop
 800e5a8:	46bd      	mov	sp, r7
 800e5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ae:	4770      	bx	lr
 800e5b0:	20001230 	.word	0x20001230

0800e5b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b084      	sub	sp, #16
 800e5b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e5be:	2300      	movs	r3, #0
 800e5c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e5c2:	4b41      	ldr	r3, [pc, #260]	; (800e6c8 <xTaskResumeAll+0x114>)
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d109      	bne.n	800e5de <xTaskResumeAll+0x2a>
 800e5ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5ce:	f383 8811 	msr	BASEPRI, r3
 800e5d2:	f3bf 8f6f 	isb	sy
 800e5d6:	f3bf 8f4f 	dsb	sy
 800e5da:	603b      	str	r3, [r7, #0]
 800e5dc:	e7fe      	b.n	800e5dc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e5de:	f001 fadd 	bl	800fb9c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e5e2:	4b39      	ldr	r3, [pc, #228]	; (800e6c8 <xTaskResumeAll+0x114>)
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	3b01      	subs	r3, #1
 800e5e8:	4a37      	ldr	r2, [pc, #220]	; (800e6c8 <xTaskResumeAll+0x114>)
 800e5ea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e5ec:	4b36      	ldr	r3, [pc, #216]	; (800e6c8 <xTaskResumeAll+0x114>)
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d162      	bne.n	800e6ba <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e5f4:	4b35      	ldr	r3, [pc, #212]	; (800e6cc <xTaskResumeAll+0x118>)
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d05e      	beq.n	800e6ba <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e5fc:	e02f      	b.n	800e65e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e5fe:	4b34      	ldr	r3, [pc, #208]	; (800e6d0 <xTaskResumeAll+0x11c>)
 800e600:	68db      	ldr	r3, [r3, #12]
 800e602:	68db      	ldr	r3, [r3, #12]
 800e604:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	3318      	adds	r3, #24
 800e60a:	4618      	mov	r0, r3
 800e60c:	f7fe ffb0 	bl	800d570 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	3304      	adds	r3, #4
 800e614:	4618      	mov	r0, r3
 800e616:	f7fe ffab 	bl	800d570 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e61e:	4b2d      	ldr	r3, [pc, #180]	; (800e6d4 <xTaskResumeAll+0x120>)
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	429a      	cmp	r2, r3
 800e624:	d903      	bls.n	800e62e <xTaskResumeAll+0x7a>
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e62a:	4a2a      	ldr	r2, [pc, #168]	; (800e6d4 <xTaskResumeAll+0x120>)
 800e62c:	6013      	str	r3, [r2, #0]
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e632:	4613      	mov	r3, r2
 800e634:	009b      	lsls	r3, r3, #2
 800e636:	4413      	add	r3, r2
 800e638:	009b      	lsls	r3, r3, #2
 800e63a:	4a27      	ldr	r2, [pc, #156]	; (800e6d8 <xTaskResumeAll+0x124>)
 800e63c:	441a      	add	r2, r3
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	3304      	adds	r3, #4
 800e642:	4619      	mov	r1, r3
 800e644:	4610      	mov	r0, r2
 800e646:	f7fe ff36 	bl	800d4b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e64e:	4b23      	ldr	r3, [pc, #140]	; (800e6dc <xTaskResumeAll+0x128>)
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e654:	429a      	cmp	r2, r3
 800e656:	d302      	bcc.n	800e65e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800e658:	4b21      	ldr	r3, [pc, #132]	; (800e6e0 <xTaskResumeAll+0x12c>)
 800e65a:	2201      	movs	r2, #1
 800e65c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e65e:	4b1c      	ldr	r3, [pc, #112]	; (800e6d0 <xTaskResumeAll+0x11c>)
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d1cb      	bne.n	800e5fe <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d001      	beq.n	800e670 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e66c:	f000 fb46 	bl	800ecfc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800e670:	4b1c      	ldr	r3, [pc, #112]	; (800e6e4 <xTaskResumeAll+0x130>)
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d010      	beq.n	800e69e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e67c:	f000 f846 	bl	800e70c <xTaskIncrementTick>
 800e680:	4603      	mov	r3, r0
 800e682:	2b00      	cmp	r3, #0
 800e684:	d002      	beq.n	800e68c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800e686:	4b16      	ldr	r3, [pc, #88]	; (800e6e0 <xTaskResumeAll+0x12c>)
 800e688:	2201      	movs	r2, #1
 800e68a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	3b01      	subs	r3, #1
 800e690:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	2b00      	cmp	r3, #0
 800e696:	d1f1      	bne.n	800e67c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800e698:	4b12      	ldr	r3, [pc, #72]	; (800e6e4 <xTaskResumeAll+0x130>)
 800e69a:	2200      	movs	r2, #0
 800e69c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e69e:	4b10      	ldr	r3, [pc, #64]	; (800e6e0 <xTaskResumeAll+0x12c>)
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d009      	beq.n	800e6ba <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e6a6:	2301      	movs	r3, #1
 800e6a8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e6aa:	4b0f      	ldr	r3, [pc, #60]	; (800e6e8 <xTaskResumeAll+0x134>)
 800e6ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e6b0:	601a      	str	r2, [r3, #0]
 800e6b2:	f3bf 8f4f 	dsb	sy
 800e6b6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e6ba:	f001 fa9d 	bl	800fbf8 <vPortExitCritical>

	return xAlreadyYielded;
 800e6be:	68bb      	ldr	r3, [r7, #8]
}
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	3710      	adds	r7, #16
 800e6c4:	46bd      	mov	sp, r7
 800e6c6:	bd80      	pop	{r7, pc}
 800e6c8:	20001230 	.word	0x20001230
 800e6cc:	20001208 	.word	0x20001208
 800e6d0:	200011c8 	.word	0x200011c8
 800e6d4:	20001210 	.word	0x20001210
 800e6d8:	20000d38 	.word	0x20000d38
 800e6dc:	20000d34 	.word	0x20000d34
 800e6e0:	2000121c 	.word	0x2000121c
 800e6e4:	20001218 	.word	0x20001218
 800e6e8:	e000ed04 	.word	0xe000ed04

0800e6ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e6ec:	b480      	push	{r7}
 800e6ee:	b083      	sub	sp, #12
 800e6f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e6f2:	4b05      	ldr	r3, [pc, #20]	; (800e708 <xTaskGetTickCount+0x1c>)
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e6f8:	687b      	ldr	r3, [r7, #4]
}
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	370c      	adds	r7, #12
 800e6fe:	46bd      	mov	sp, r7
 800e700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e704:	4770      	bx	lr
 800e706:	bf00      	nop
 800e708:	2000120c 	.word	0x2000120c

0800e70c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e70c:	b580      	push	{r7, lr}
 800e70e:	b086      	sub	sp, #24
 800e710:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e712:	2300      	movs	r3, #0
 800e714:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e716:	4b4e      	ldr	r3, [pc, #312]	; (800e850 <xTaskIncrementTick+0x144>)
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	f040 8088 	bne.w	800e830 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e720:	4b4c      	ldr	r3, [pc, #304]	; (800e854 <xTaskIncrementTick+0x148>)
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	3301      	adds	r3, #1
 800e726:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e728:	4a4a      	ldr	r2, [pc, #296]	; (800e854 <xTaskIncrementTick+0x148>)
 800e72a:	693b      	ldr	r3, [r7, #16]
 800e72c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e72e:	693b      	ldr	r3, [r7, #16]
 800e730:	2b00      	cmp	r3, #0
 800e732:	d11f      	bne.n	800e774 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800e734:	4b48      	ldr	r3, [pc, #288]	; (800e858 <xTaskIncrementTick+0x14c>)
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d009      	beq.n	800e752 <xTaskIncrementTick+0x46>
 800e73e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e742:	f383 8811 	msr	BASEPRI, r3
 800e746:	f3bf 8f6f 	isb	sy
 800e74a:	f3bf 8f4f 	dsb	sy
 800e74e:	603b      	str	r3, [r7, #0]
 800e750:	e7fe      	b.n	800e750 <xTaskIncrementTick+0x44>
 800e752:	4b41      	ldr	r3, [pc, #260]	; (800e858 <xTaskIncrementTick+0x14c>)
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	60fb      	str	r3, [r7, #12]
 800e758:	4b40      	ldr	r3, [pc, #256]	; (800e85c <xTaskIncrementTick+0x150>)
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	4a3e      	ldr	r2, [pc, #248]	; (800e858 <xTaskIncrementTick+0x14c>)
 800e75e:	6013      	str	r3, [r2, #0]
 800e760:	4a3e      	ldr	r2, [pc, #248]	; (800e85c <xTaskIncrementTick+0x150>)
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	6013      	str	r3, [r2, #0]
 800e766:	4b3e      	ldr	r3, [pc, #248]	; (800e860 <xTaskIncrementTick+0x154>)
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	3301      	adds	r3, #1
 800e76c:	4a3c      	ldr	r2, [pc, #240]	; (800e860 <xTaskIncrementTick+0x154>)
 800e76e:	6013      	str	r3, [r2, #0]
 800e770:	f000 fac4 	bl	800ecfc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e774:	4b3b      	ldr	r3, [pc, #236]	; (800e864 <xTaskIncrementTick+0x158>)
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	693a      	ldr	r2, [r7, #16]
 800e77a:	429a      	cmp	r2, r3
 800e77c:	d349      	bcc.n	800e812 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e77e:	4b36      	ldr	r3, [pc, #216]	; (800e858 <xTaskIncrementTick+0x14c>)
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	2b00      	cmp	r3, #0
 800e786:	d104      	bne.n	800e792 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e788:	4b36      	ldr	r3, [pc, #216]	; (800e864 <xTaskIncrementTick+0x158>)
 800e78a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e78e:	601a      	str	r2, [r3, #0]
					break;
 800e790:	e03f      	b.n	800e812 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e792:	4b31      	ldr	r3, [pc, #196]	; (800e858 <xTaskIncrementTick+0x14c>)
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	68db      	ldr	r3, [r3, #12]
 800e798:	68db      	ldr	r3, [r3, #12]
 800e79a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e79c:	68bb      	ldr	r3, [r7, #8]
 800e79e:	685b      	ldr	r3, [r3, #4]
 800e7a0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e7a2:	693a      	ldr	r2, [r7, #16]
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	429a      	cmp	r2, r3
 800e7a8:	d203      	bcs.n	800e7b2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e7aa:	4a2e      	ldr	r2, [pc, #184]	; (800e864 <xTaskIncrementTick+0x158>)
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e7b0:	e02f      	b.n	800e812 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e7b2:	68bb      	ldr	r3, [r7, #8]
 800e7b4:	3304      	adds	r3, #4
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	f7fe feda 	bl	800d570 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e7bc:	68bb      	ldr	r3, [r7, #8]
 800e7be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d004      	beq.n	800e7ce <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e7c4:	68bb      	ldr	r3, [r7, #8]
 800e7c6:	3318      	adds	r3, #24
 800e7c8:	4618      	mov	r0, r3
 800e7ca:	f7fe fed1 	bl	800d570 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e7ce:	68bb      	ldr	r3, [r7, #8]
 800e7d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7d2:	4b25      	ldr	r3, [pc, #148]	; (800e868 <xTaskIncrementTick+0x15c>)
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	429a      	cmp	r2, r3
 800e7d8:	d903      	bls.n	800e7e2 <xTaskIncrementTick+0xd6>
 800e7da:	68bb      	ldr	r3, [r7, #8]
 800e7dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7de:	4a22      	ldr	r2, [pc, #136]	; (800e868 <xTaskIncrementTick+0x15c>)
 800e7e0:	6013      	str	r3, [r2, #0]
 800e7e2:	68bb      	ldr	r3, [r7, #8]
 800e7e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7e6:	4613      	mov	r3, r2
 800e7e8:	009b      	lsls	r3, r3, #2
 800e7ea:	4413      	add	r3, r2
 800e7ec:	009b      	lsls	r3, r3, #2
 800e7ee:	4a1f      	ldr	r2, [pc, #124]	; (800e86c <xTaskIncrementTick+0x160>)
 800e7f0:	441a      	add	r2, r3
 800e7f2:	68bb      	ldr	r3, [r7, #8]
 800e7f4:	3304      	adds	r3, #4
 800e7f6:	4619      	mov	r1, r3
 800e7f8:	4610      	mov	r0, r2
 800e7fa:	f7fe fe5c 	bl	800d4b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e7fe:	68bb      	ldr	r3, [r7, #8]
 800e800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e802:	4b1b      	ldr	r3, [pc, #108]	; (800e870 <xTaskIncrementTick+0x164>)
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e808:	429a      	cmp	r2, r3
 800e80a:	d3b8      	bcc.n	800e77e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800e80c:	2301      	movs	r3, #1
 800e80e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e810:	e7b5      	b.n	800e77e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e812:	4b17      	ldr	r3, [pc, #92]	; (800e870 <xTaskIncrementTick+0x164>)
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e818:	4914      	ldr	r1, [pc, #80]	; (800e86c <xTaskIncrementTick+0x160>)
 800e81a:	4613      	mov	r3, r2
 800e81c:	009b      	lsls	r3, r3, #2
 800e81e:	4413      	add	r3, r2
 800e820:	009b      	lsls	r3, r3, #2
 800e822:	440b      	add	r3, r1
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	2b01      	cmp	r3, #1
 800e828:	d907      	bls.n	800e83a <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800e82a:	2301      	movs	r3, #1
 800e82c:	617b      	str	r3, [r7, #20]
 800e82e:	e004      	b.n	800e83a <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800e830:	4b10      	ldr	r3, [pc, #64]	; (800e874 <xTaskIncrementTick+0x168>)
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	3301      	adds	r3, #1
 800e836:	4a0f      	ldr	r2, [pc, #60]	; (800e874 <xTaskIncrementTick+0x168>)
 800e838:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800e83a:	4b0f      	ldr	r3, [pc, #60]	; (800e878 <xTaskIncrementTick+0x16c>)
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d001      	beq.n	800e846 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800e842:	2301      	movs	r3, #1
 800e844:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800e846:	697b      	ldr	r3, [r7, #20]
}
 800e848:	4618      	mov	r0, r3
 800e84a:	3718      	adds	r7, #24
 800e84c:	46bd      	mov	sp, r7
 800e84e:	bd80      	pop	{r7, pc}
 800e850:	20001230 	.word	0x20001230
 800e854:	2000120c 	.word	0x2000120c
 800e858:	200011c0 	.word	0x200011c0
 800e85c:	200011c4 	.word	0x200011c4
 800e860:	20001220 	.word	0x20001220
 800e864:	20001228 	.word	0x20001228
 800e868:	20001210 	.word	0x20001210
 800e86c:	20000d38 	.word	0x20000d38
 800e870:	20000d34 	.word	0x20000d34
 800e874:	20001218 	.word	0x20001218
 800e878:	2000121c 	.word	0x2000121c

0800e87c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e87c:	b480      	push	{r7}
 800e87e:	b085      	sub	sp, #20
 800e880:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e882:	4b27      	ldr	r3, [pc, #156]	; (800e920 <vTaskSwitchContext+0xa4>)
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d003      	beq.n	800e892 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e88a:	4b26      	ldr	r3, [pc, #152]	; (800e924 <vTaskSwitchContext+0xa8>)
 800e88c:	2201      	movs	r2, #1
 800e88e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e890:	e040      	b.n	800e914 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800e892:	4b24      	ldr	r3, [pc, #144]	; (800e924 <vTaskSwitchContext+0xa8>)
 800e894:	2200      	movs	r2, #0
 800e896:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e898:	4b23      	ldr	r3, [pc, #140]	; (800e928 <vTaskSwitchContext+0xac>)
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	60fb      	str	r3, [r7, #12]
 800e89e:	e00f      	b.n	800e8c0 <vTaskSwitchContext+0x44>
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d109      	bne.n	800e8ba <vTaskSwitchContext+0x3e>
 800e8a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8aa:	f383 8811 	msr	BASEPRI, r3
 800e8ae:	f3bf 8f6f 	isb	sy
 800e8b2:	f3bf 8f4f 	dsb	sy
 800e8b6:	607b      	str	r3, [r7, #4]
 800e8b8:	e7fe      	b.n	800e8b8 <vTaskSwitchContext+0x3c>
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	3b01      	subs	r3, #1
 800e8be:	60fb      	str	r3, [r7, #12]
 800e8c0:	491a      	ldr	r1, [pc, #104]	; (800e92c <vTaskSwitchContext+0xb0>)
 800e8c2:	68fa      	ldr	r2, [r7, #12]
 800e8c4:	4613      	mov	r3, r2
 800e8c6:	009b      	lsls	r3, r3, #2
 800e8c8:	4413      	add	r3, r2
 800e8ca:	009b      	lsls	r3, r3, #2
 800e8cc:	440b      	add	r3, r1
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d0e5      	beq.n	800e8a0 <vTaskSwitchContext+0x24>
 800e8d4:	68fa      	ldr	r2, [r7, #12]
 800e8d6:	4613      	mov	r3, r2
 800e8d8:	009b      	lsls	r3, r3, #2
 800e8da:	4413      	add	r3, r2
 800e8dc:	009b      	lsls	r3, r3, #2
 800e8de:	4a13      	ldr	r2, [pc, #76]	; (800e92c <vTaskSwitchContext+0xb0>)
 800e8e0:	4413      	add	r3, r2
 800e8e2:	60bb      	str	r3, [r7, #8]
 800e8e4:	68bb      	ldr	r3, [r7, #8]
 800e8e6:	685b      	ldr	r3, [r3, #4]
 800e8e8:	685a      	ldr	r2, [r3, #4]
 800e8ea:	68bb      	ldr	r3, [r7, #8]
 800e8ec:	605a      	str	r2, [r3, #4]
 800e8ee:	68bb      	ldr	r3, [r7, #8]
 800e8f0:	685a      	ldr	r2, [r3, #4]
 800e8f2:	68bb      	ldr	r3, [r7, #8]
 800e8f4:	3308      	adds	r3, #8
 800e8f6:	429a      	cmp	r2, r3
 800e8f8:	d104      	bne.n	800e904 <vTaskSwitchContext+0x88>
 800e8fa:	68bb      	ldr	r3, [r7, #8]
 800e8fc:	685b      	ldr	r3, [r3, #4]
 800e8fe:	685a      	ldr	r2, [r3, #4]
 800e900:	68bb      	ldr	r3, [r7, #8]
 800e902:	605a      	str	r2, [r3, #4]
 800e904:	68bb      	ldr	r3, [r7, #8]
 800e906:	685b      	ldr	r3, [r3, #4]
 800e908:	68db      	ldr	r3, [r3, #12]
 800e90a:	4a09      	ldr	r2, [pc, #36]	; (800e930 <vTaskSwitchContext+0xb4>)
 800e90c:	6013      	str	r3, [r2, #0]
 800e90e:	4a06      	ldr	r2, [pc, #24]	; (800e928 <vTaskSwitchContext+0xac>)
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	6013      	str	r3, [r2, #0]
}
 800e914:	bf00      	nop
 800e916:	3714      	adds	r7, #20
 800e918:	46bd      	mov	sp, r7
 800e91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e91e:	4770      	bx	lr
 800e920:	20001230 	.word	0x20001230
 800e924:	2000121c 	.word	0x2000121c
 800e928:	20001210 	.word	0x20001210
 800e92c:	20000d38 	.word	0x20000d38
 800e930:	20000d34 	.word	0x20000d34

0800e934 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e934:	b580      	push	{r7, lr}
 800e936:	b084      	sub	sp, #16
 800e938:	af00      	add	r7, sp, #0
 800e93a:	6078      	str	r0, [r7, #4]
 800e93c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d109      	bne.n	800e958 <vTaskPlaceOnEventList+0x24>
 800e944:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e948:	f383 8811 	msr	BASEPRI, r3
 800e94c:	f3bf 8f6f 	isb	sy
 800e950:	f3bf 8f4f 	dsb	sy
 800e954:	60fb      	str	r3, [r7, #12]
 800e956:	e7fe      	b.n	800e956 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e958:	4b07      	ldr	r3, [pc, #28]	; (800e978 <vTaskPlaceOnEventList+0x44>)
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	3318      	adds	r3, #24
 800e95e:	4619      	mov	r1, r3
 800e960:	6878      	ldr	r0, [r7, #4]
 800e962:	f7fe fdcc 	bl	800d4fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e966:	2101      	movs	r1, #1
 800e968:	6838      	ldr	r0, [r7, #0]
 800e96a:	f000 fc57 	bl	800f21c <prvAddCurrentTaskToDelayedList>
}
 800e96e:	bf00      	nop
 800e970:	3710      	adds	r7, #16
 800e972:	46bd      	mov	sp, r7
 800e974:	bd80      	pop	{r7, pc}
 800e976:	bf00      	nop
 800e978:	20000d34 	.word	0x20000d34

0800e97c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b086      	sub	sp, #24
 800e980:	af00      	add	r7, sp, #0
 800e982:	60f8      	str	r0, [r7, #12]
 800e984:	60b9      	str	r1, [r7, #8]
 800e986:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d109      	bne.n	800e9a2 <vTaskPlaceOnEventListRestricted+0x26>
 800e98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e992:	f383 8811 	msr	BASEPRI, r3
 800e996:	f3bf 8f6f 	isb	sy
 800e99a:	f3bf 8f4f 	dsb	sy
 800e99e:	617b      	str	r3, [r7, #20]
 800e9a0:	e7fe      	b.n	800e9a0 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e9a2:	4b0a      	ldr	r3, [pc, #40]	; (800e9cc <vTaskPlaceOnEventListRestricted+0x50>)
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	3318      	adds	r3, #24
 800e9a8:	4619      	mov	r1, r3
 800e9aa:	68f8      	ldr	r0, [r7, #12]
 800e9ac:	f7fe fd83 	bl	800d4b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d002      	beq.n	800e9bc <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800e9b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e9ba:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e9bc:	6879      	ldr	r1, [r7, #4]
 800e9be:	68b8      	ldr	r0, [r7, #8]
 800e9c0:	f000 fc2c 	bl	800f21c <prvAddCurrentTaskToDelayedList>
	}
 800e9c4:	bf00      	nop
 800e9c6:	3718      	adds	r7, #24
 800e9c8:	46bd      	mov	sp, r7
 800e9ca:	bd80      	pop	{r7, pc}
 800e9cc:	20000d34 	.word	0x20000d34

0800e9d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e9d0:	b580      	push	{r7, lr}
 800e9d2:	b086      	sub	sp, #24
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	68db      	ldr	r3, [r3, #12]
 800e9dc:	68db      	ldr	r3, [r3, #12]
 800e9de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e9e0:	693b      	ldr	r3, [r7, #16]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d109      	bne.n	800e9fa <xTaskRemoveFromEventList+0x2a>
 800e9e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9ea:	f383 8811 	msr	BASEPRI, r3
 800e9ee:	f3bf 8f6f 	isb	sy
 800e9f2:	f3bf 8f4f 	dsb	sy
 800e9f6:	60fb      	str	r3, [r7, #12]
 800e9f8:	e7fe      	b.n	800e9f8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e9fa:	693b      	ldr	r3, [r7, #16]
 800e9fc:	3318      	adds	r3, #24
 800e9fe:	4618      	mov	r0, r3
 800ea00:	f7fe fdb6 	bl	800d570 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ea04:	4b1d      	ldr	r3, [pc, #116]	; (800ea7c <xTaskRemoveFromEventList+0xac>)
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d11d      	bne.n	800ea48 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ea0c:	693b      	ldr	r3, [r7, #16]
 800ea0e:	3304      	adds	r3, #4
 800ea10:	4618      	mov	r0, r3
 800ea12:	f7fe fdad 	bl	800d570 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ea16:	693b      	ldr	r3, [r7, #16]
 800ea18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea1a:	4b19      	ldr	r3, [pc, #100]	; (800ea80 <xTaskRemoveFromEventList+0xb0>)
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	429a      	cmp	r2, r3
 800ea20:	d903      	bls.n	800ea2a <xTaskRemoveFromEventList+0x5a>
 800ea22:	693b      	ldr	r3, [r7, #16]
 800ea24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea26:	4a16      	ldr	r2, [pc, #88]	; (800ea80 <xTaskRemoveFromEventList+0xb0>)
 800ea28:	6013      	str	r3, [r2, #0]
 800ea2a:	693b      	ldr	r3, [r7, #16]
 800ea2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea2e:	4613      	mov	r3, r2
 800ea30:	009b      	lsls	r3, r3, #2
 800ea32:	4413      	add	r3, r2
 800ea34:	009b      	lsls	r3, r3, #2
 800ea36:	4a13      	ldr	r2, [pc, #76]	; (800ea84 <xTaskRemoveFromEventList+0xb4>)
 800ea38:	441a      	add	r2, r3
 800ea3a:	693b      	ldr	r3, [r7, #16]
 800ea3c:	3304      	adds	r3, #4
 800ea3e:	4619      	mov	r1, r3
 800ea40:	4610      	mov	r0, r2
 800ea42:	f7fe fd38 	bl	800d4b6 <vListInsertEnd>
 800ea46:	e005      	b.n	800ea54 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ea48:	693b      	ldr	r3, [r7, #16]
 800ea4a:	3318      	adds	r3, #24
 800ea4c:	4619      	mov	r1, r3
 800ea4e:	480e      	ldr	r0, [pc, #56]	; (800ea88 <xTaskRemoveFromEventList+0xb8>)
 800ea50:	f7fe fd31 	bl	800d4b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ea54:	693b      	ldr	r3, [r7, #16]
 800ea56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea58:	4b0c      	ldr	r3, [pc, #48]	; (800ea8c <xTaskRemoveFromEventList+0xbc>)
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea5e:	429a      	cmp	r2, r3
 800ea60:	d905      	bls.n	800ea6e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ea62:	2301      	movs	r3, #1
 800ea64:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ea66:	4b0a      	ldr	r3, [pc, #40]	; (800ea90 <xTaskRemoveFromEventList+0xc0>)
 800ea68:	2201      	movs	r2, #1
 800ea6a:	601a      	str	r2, [r3, #0]
 800ea6c:	e001      	b.n	800ea72 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800ea6e:	2300      	movs	r3, #0
 800ea70:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ea72:	697b      	ldr	r3, [r7, #20]
}
 800ea74:	4618      	mov	r0, r3
 800ea76:	3718      	adds	r7, #24
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	bd80      	pop	{r7, pc}
 800ea7c:	20001230 	.word	0x20001230
 800ea80:	20001210 	.word	0x20001210
 800ea84:	20000d38 	.word	0x20000d38
 800ea88:	200011c8 	.word	0x200011c8
 800ea8c:	20000d34 	.word	0x20000d34
 800ea90:	2000121c 	.word	0x2000121c

0800ea94 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ea94:	b480      	push	{r7}
 800ea96:	b083      	sub	sp, #12
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ea9c:	4b06      	ldr	r3, [pc, #24]	; (800eab8 <vTaskInternalSetTimeOutState+0x24>)
 800ea9e:	681a      	ldr	r2, [r3, #0]
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800eaa4:	4b05      	ldr	r3, [pc, #20]	; (800eabc <vTaskInternalSetTimeOutState+0x28>)
 800eaa6:	681a      	ldr	r2, [r3, #0]
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	605a      	str	r2, [r3, #4]
}
 800eaac:	bf00      	nop
 800eaae:	370c      	adds	r7, #12
 800eab0:	46bd      	mov	sp, r7
 800eab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab6:	4770      	bx	lr
 800eab8:	20001220 	.word	0x20001220
 800eabc:	2000120c 	.word	0x2000120c

0800eac0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b088      	sub	sp, #32
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	6078      	str	r0, [r7, #4]
 800eac8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d109      	bne.n	800eae4 <xTaskCheckForTimeOut+0x24>
 800ead0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ead4:	f383 8811 	msr	BASEPRI, r3
 800ead8:	f3bf 8f6f 	isb	sy
 800eadc:	f3bf 8f4f 	dsb	sy
 800eae0:	613b      	str	r3, [r7, #16]
 800eae2:	e7fe      	b.n	800eae2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800eae4:	683b      	ldr	r3, [r7, #0]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d109      	bne.n	800eafe <xTaskCheckForTimeOut+0x3e>
 800eaea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaee:	f383 8811 	msr	BASEPRI, r3
 800eaf2:	f3bf 8f6f 	isb	sy
 800eaf6:	f3bf 8f4f 	dsb	sy
 800eafa:	60fb      	str	r3, [r7, #12]
 800eafc:	e7fe      	b.n	800eafc <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800eafe:	f001 f84d 	bl	800fb9c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800eb02:	4b1d      	ldr	r3, [pc, #116]	; (800eb78 <xTaskCheckForTimeOut+0xb8>)
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	685b      	ldr	r3, [r3, #4]
 800eb0c:	69ba      	ldr	r2, [r7, #24]
 800eb0e:	1ad3      	subs	r3, r2, r3
 800eb10:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800eb12:	683b      	ldr	r3, [r7, #0]
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eb1a:	d102      	bne.n	800eb22 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	61fb      	str	r3, [r7, #28]
 800eb20:	e023      	b.n	800eb6a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	681a      	ldr	r2, [r3, #0]
 800eb26:	4b15      	ldr	r3, [pc, #84]	; (800eb7c <xTaskCheckForTimeOut+0xbc>)
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	429a      	cmp	r2, r3
 800eb2c:	d007      	beq.n	800eb3e <xTaskCheckForTimeOut+0x7e>
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	685b      	ldr	r3, [r3, #4]
 800eb32:	69ba      	ldr	r2, [r7, #24]
 800eb34:	429a      	cmp	r2, r3
 800eb36:	d302      	bcc.n	800eb3e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800eb38:	2301      	movs	r3, #1
 800eb3a:	61fb      	str	r3, [r7, #28]
 800eb3c:	e015      	b.n	800eb6a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800eb3e:	683b      	ldr	r3, [r7, #0]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	697a      	ldr	r2, [r7, #20]
 800eb44:	429a      	cmp	r2, r3
 800eb46:	d20b      	bcs.n	800eb60 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800eb48:	683b      	ldr	r3, [r7, #0]
 800eb4a:	681a      	ldr	r2, [r3, #0]
 800eb4c:	697b      	ldr	r3, [r7, #20]
 800eb4e:	1ad2      	subs	r2, r2, r3
 800eb50:	683b      	ldr	r3, [r7, #0]
 800eb52:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800eb54:	6878      	ldr	r0, [r7, #4]
 800eb56:	f7ff ff9d 	bl	800ea94 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800eb5a:	2300      	movs	r3, #0
 800eb5c:	61fb      	str	r3, [r7, #28]
 800eb5e:	e004      	b.n	800eb6a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800eb60:	683b      	ldr	r3, [r7, #0]
 800eb62:	2200      	movs	r2, #0
 800eb64:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800eb66:	2301      	movs	r3, #1
 800eb68:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800eb6a:	f001 f845 	bl	800fbf8 <vPortExitCritical>

	return xReturn;
 800eb6e:	69fb      	ldr	r3, [r7, #28]
}
 800eb70:	4618      	mov	r0, r3
 800eb72:	3720      	adds	r7, #32
 800eb74:	46bd      	mov	sp, r7
 800eb76:	bd80      	pop	{r7, pc}
 800eb78:	2000120c 	.word	0x2000120c
 800eb7c:	20001220 	.word	0x20001220

0800eb80 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800eb80:	b480      	push	{r7}
 800eb82:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800eb84:	4b03      	ldr	r3, [pc, #12]	; (800eb94 <vTaskMissedYield+0x14>)
 800eb86:	2201      	movs	r2, #1
 800eb88:	601a      	str	r2, [r3, #0]
}
 800eb8a:	bf00      	nop
 800eb8c:	46bd      	mov	sp, r7
 800eb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb92:	4770      	bx	lr
 800eb94:	2000121c 	.word	0x2000121c

0800eb98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800eb98:	b580      	push	{r7, lr}
 800eb9a:	b082      	sub	sp, #8
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800eba0:	f000 f852 	bl	800ec48 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800eba4:	4b06      	ldr	r3, [pc, #24]	; (800ebc0 <prvIdleTask+0x28>)
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	2b01      	cmp	r3, #1
 800ebaa:	d9f9      	bls.n	800eba0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ebac:	4b05      	ldr	r3, [pc, #20]	; (800ebc4 <prvIdleTask+0x2c>)
 800ebae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ebb2:	601a      	str	r2, [r3, #0]
 800ebb4:	f3bf 8f4f 	dsb	sy
 800ebb8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ebbc:	e7f0      	b.n	800eba0 <prvIdleTask+0x8>
 800ebbe:	bf00      	nop
 800ebc0:	20000d38 	.word	0x20000d38
 800ebc4:	e000ed04 	.word	0xe000ed04

0800ebc8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	b082      	sub	sp, #8
 800ebcc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ebce:	2300      	movs	r3, #0
 800ebd0:	607b      	str	r3, [r7, #4]
 800ebd2:	e00c      	b.n	800ebee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ebd4:	687a      	ldr	r2, [r7, #4]
 800ebd6:	4613      	mov	r3, r2
 800ebd8:	009b      	lsls	r3, r3, #2
 800ebda:	4413      	add	r3, r2
 800ebdc:	009b      	lsls	r3, r3, #2
 800ebde:	4a12      	ldr	r2, [pc, #72]	; (800ec28 <prvInitialiseTaskLists+0x60>)
 800ebe0:	4413      	add	r3, r2
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	f7fe fc3a 	bl	800d45c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	3301      	adds	r3, #1
 800ebec:	607b      	str	r3, [r7, #4]
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	2b37      	cmp	r3, #55	; 0x37
 800ebf2:	d9ef      	bls.n	800ebd4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ebf4:	480d      	ldr	r0, [pc, #52]	; (800ec2c <prvInitialiseTaskLists+0x64>)
 800ebf6:	f7fe fc31 	bl	800d45c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ebfa:	480d      	ldr	r0, [pc, #52]	; (800ec30 <prvInitialiseTaskLists+0x68>)
 800ebfc:	f7fe fc2e 	bl	800d45c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ec00:	480c      	ldr	r0, [pc, #48]	; (800ec34 <prvInitialiseTaskLists+0x6c>)
 800ec02:	f7fe fc2b 	bl	800d45c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ec06:	480c      	ldr	r0, [pc, #48]	; (800ec38 <prvInitialiseTaskLists+0x70>)
 800ec08:	f7fe fc28 	bl	800d45c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ec0c:	480b      	ldr	r0, [pc, #44]	; (800ec3c <prvInitialiseTaskLists+0x74>)
 800ec0e:	f7fe fc25 	bl	800d45c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ec12:	4b0b      	ldr	r3, [pc, #44]	; (800ec40 <prvInitialiseTaskLists+0x78>)
 800ec14:	4a05      	ldr	r2, [pc, #20]	; (800ec2c <prvInitialiseTaskLists+0x64>)
 800ec16:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ec18:	4b0a      	ldr	r3, [pc, #40]	; (800ec44 <prvInitialiseTaskLists+0x7c>)
 800ec1a:	4a05      	ldr	r2, [pc, #20]	; (800ec30 <prvInitialiseTaskLists+0x68>)
 800ec1c:	601a      	str	r2, [r3, #0]
}
 800ec1e:	bf00      	nop
 800ec20:	3708      	adds	r7, #8
 800ec22:	46bd      	mov	sp, r7
 800ec24:	bd80      	pop	{r7, pc}
 800ec26:	bf00      	nop
 800ec28:	20000d38 	.word	0x20000d38
 800ec2c:	20001198 	.word	0x20001198
 800ec30:	200011ac 	.word	0x200011ac
 800ec34:	200011c8 	.word	0x200011c8
 800ec38:	200011dc 	.word	0x200011dc
 800ec3c:	200011f4 	.word	0x200011f4
 800ec40:	200011c0 	.word	0x200011c0
 800ec44:	200011c4 	.word	0x200011c4

0800ec48 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ec48:	b580      	push	{r7, lr}
 800ec4a:	b082      	sub	sp, #8
 800ec4c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ec4e:	e019      	b.n	800ec84 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ec50:	f000 ffa4 	bl	800fb9c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec54:	4b0f      	ldr	r3, [pc, #60]	; (800ec94 <prvCheckTasksWaitingTermination+0x4c>)
 800ec56:	68db      	ldr	r3, [r3, #12]
 800ec58:	68db      	ldr	r3, [r3, #12]
 800ec5a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	3304      	adds	r3, #4
 800ec60:	4618      	mov	r0, r3
 800ec62:	f7fe fc85 	bl	800d570 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ec66:	4b0c      	ldr	r3, [pc, #48]	; (800ec98 <prvCheckTasksWaitingTermination+0x50>)
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	3b01      	subs	r3, #1
 800ec6c:	4a0a      	ldr	r2, [pc, #40]	; (800ec98 <prvCheckTasksWaitingTermination+0x50>)
 800ec6e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ec70:	4b0a      	ldr	r3, [pc, #40]	; (800ec9c <prvCheckTasksWaitingTermination+0x54>)
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	3b01      	subs	r3, #1
 800ec76:	4a09      	ldr	r2, [pc, #36]	; (800ec9c <prvCheckTasksWaitingTermination+0x54>)
 800ec78:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ec7a:	f000 ffbd 	bl	800fbf8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ec7e:	6878      	ldr	r0, [r7, #4]
 800ec80:	f000 f80e 	bl	800eca0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ec84:	4b05      	ldr	r3, [pc, #20]	; (800ec9c <prvCheckTasksWaitingTermination+0x54>)
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d1e1      	bne.n	800ec50 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ec8c:	bf00      	nop
 800ec8e:	3708      	adds	r7, #8
 800ec90:	46bd      	mov	sp, r7
 800ec92:	bd80      	pop	{r7, pc}
 800ec94:	200011dc 	.word	0x200011dc
 800ec98:	20001208 	.word	0x20001208
 800ec9c:	200011f0 	.word	0x200011f0

0800eca0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800eca0:	b580      	push	{r7, lr}
 800eca2:	b084      	sub	sp, #16
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d108      	bne.n	800ecc4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	f001 f94c 	bl	800ff54 <vPortFree>
				vPortFree( pxTCB );
 800ecbc:	6878      	ldr	r0, [r7, #4]
 800ecbe:	f001 f949 	bl	800ff54 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ecc2:	e017      	b.n	800ecf4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ecca:	2b01      	cmp	r3, #1
 800eccc:	d103      	bne.n	800ecd6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ecce:	6878      	ldr	r0, [r7, #4]
 800ecd0:	f001 f940 	bl	800ff54 <vPortFree>
	}
 800ecd4:	e00e      	b.n	800ecf4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ecdc:	2b02      	cmp	r3, #2
 800ecde:	d009      	beq.n	800ecf4 <prvDeleteTCB+0x54>
 800ece0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ece4:	f383 8811 	msr	BASEPRI, r3
 800ece8:	f3bf 8f6f 	isb	sy
 800ecec:	f3bf 8f4f 	dsb	sy
 800ecf0:	60fb      	str	r3, [r7, #12]
 800ecf2:	e7fe      	b.n	800ecf2 <prvDeleteTCB+0x52>
	}
 800ecf4:	bf00      	nop
 800ecf6:	3710      	adds	r7, #16
 800ecf8:	46bd      	mov	sp, r7
 800ecfa:	bd80      	pop	{r7, pc}

0800ecfc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ecfc:	b480      	push	{r7}
 800ecfe:	b083      	sub	sp, #12
 800ed00:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ed02:	4b0c      	ldr	r3, [pc, #48]	; (800ed34 <prvResetNextTaskUnblockTime+0x38>)
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d104      	bne.n	800ed16 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ed0c:	4b0a      	ldr	r3, [pc, #40]	; (800ed38 <prvResetNextTaskUnblockTime+0x3c>)
 800ed0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ed12:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ed14:	e008      	b.n	800ed28 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ed16:	4b07      	ldr	r3, [pc, #28]	; (800ed34 <prvResetNextTaskUnblockTime+0x38>)
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	68db      	ldr	r3, [r3, #12]
 800ed1c:	68db      	ldr	r3, [r3, #12]
 800ed1e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	685b      	ldr	r3, [r3, #4]
 800ed24:	4a04      	ldr	r2, [pc, #16]	; (800ed38 <prvResetNextTaskUnblockTime+0x3c>)
 800ed26:	6013      	str	r3, [r2, #0]
}
 800ed28:	bf00      	nop
 800ed2a:	370c      	adds	r7, #12
 800ed2c:	46bd      	mov	sp, r7
 800ed2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed32:	4770      	bx	lr
 800ed34:	200011c0 	.word	0x200011c0
 800ed38:	20001228 	.word	0x20001228

0800ed3c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ed3c:	b480      	push	{r7}
 800ed3e:	b083      	sub	sp, #12
 800ed40:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ed42:	4b0b      	ldr	r3, [pc, #44]	; (800ed70 <xTaskGetSchedulerState+0x34>)
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d102      	bne.n	800ed50 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ed4a:	2301      	movs	r3, #1
 800ed4c:	607b      	str	r3, [r7, #4]
 800ed4e:	e008      	b.n	800ed62 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ed50:	4b08      	ldr	r3, [pc, #32]	; (800ed74 <xTaskGetSchedulerState+0x38>)
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d102      	bne.n	800ed5e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ed58:	2302      	movs	r3, #2
 800ed5a:	607b      	str	r3, [r7, #4]
 800ed5c:	e001      	b.n	800ed62 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ed5e:	2300      	movs	r3, #0
 800ed60:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ed62:	687b      	ldr	r3, [r7, #4]
	}
 800ed64:	4618      	mov	r0, r3
 800ed66:	370c      	adds	r7, #12
 800ed68:	46bd      	mov	sp, r7
 800ed6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed6e:	4770      	bx	lr
 800ed70:	20001214 	.word	0x20001214
 800ed74:	20001230 	.word	0x20001230

0800ed78 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ed78:	b580      	push	{r7, lr}
 800ed7a:	b086      	sub	sp, #24
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ed84:	2300      	movs	r3, #0
 800ed86:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d054      	beq.n	800ee38 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ed8e:	4b2d      	ldr	r3, [pc, #180]	; (800ee44 <xTaskPriorityDisinherit+0xcc>)
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	693a      	ldr	r2, [r7, #16]
 800ed94:	429a      	cmp	r2, r3
 800ed96:	d009      	beq.n	800edac <xTaskPriorityDisinherit+0x34>
 800ed98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed9c:	f383 8811 	msr	BASEPRI, r3
 800eda0:	f3bf 8f6f 	isb	sy
 800eda4:	f3bf 8f4f 	dsb	sy
 800eda8:	60fb      	str	r3, [r7, #12]
 800edaa:	e7fe      	b.n	800edaa <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800edac:	693b      	ldr	r3, [r7, #16]
 800edae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d109      	bne.n	800edc8 <xTaskPriorityDisinherit+0x50>
 800edb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edb8:	f383 8811 	msr	BASEPRI, r3
 800edbc:	f3bf 8f6f 	isb	sy
 800edc0:	f3bf 8f4f 	dsb	sy
 800edc4:	60bb      	str	r3, [r7, #8]
 800edc6:	e7fe      	b.n	800edc6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800edc8:	693b      	ldr	r3, [r7, #16]
 800edca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800edcc:	1e5a      	subs	r2, r3, #1
 800edce:	693b      	ldr	r3, [r7, #16]
 800edd0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800edd2:	693b      	ldr	r3, [r7, #16]
 800edd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800edd6:	693b      	ldr	r3, [r7, #16]
 800edd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800edda:	429a      	cmp	r2, r3
 800eddc:	d02c      	beq.n	800ee38 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800edde:	693b      	ldr	r3, [r7, #16]
 800ede0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d128      	bne.n	800ee38 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ede6:	693b      	ldr	r3, [r7, #16]
 800ede8:	3304      	adds	r3, #4
 800edea:	4618      	mov	r0, r3
 800edec:	f7fe fbc0 	bl	800d570 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800edf0:	693b      	ldr	r3, [r7, #16]
 800edf2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800edf4:	693b      	ldr	r3, [r7, #16]
 800edf6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800edf8:	693b      	ldr	r3, [r7, #16]
 800edfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edfc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ee00:	693b      	ldr	r3, [r7, #16]
 800ee02:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ee04:	693b      	ldr	r3, [r7, #16]
 800ee06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee08:	4b0f      	ldr	r3, [pc, #60]	; (800ee48 <xTaskPriorityDisinherit+0xd0>)
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	429a      	cmp	r2, r3
 800ee0e:	d903      	bls.n	800ee18 <xTaskPriorityDisinherit+0xa0>
 800ee10:	693b      	ldr	r3, [r7, #16]
 800ee12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee14:	4a0c      	ldr	r2, [pc, #48]	; (800ee48 <xTaskPriorityDisinherit+0xd0>)
 800ee16:	6013      	str	r3, [r2, #0]
 800ee18:	693b      	ldr	r3, [r7, #16]
 800ee1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee1c:	4613      	mov	r3, r2
 800ee1e:	009b      	lsls	r3, r3, #2
 800ee20:	4413      	add	r3, r2
 800ee22:	009b      	lsls	r3, r3, #2
 800ee24:	4a09      	ldr	r2, [pc, #36]	; (800ee4c <xTaskPriorityDisinherit+0xd4>)
 800ee26:	441a      	add	r2, r3
 800ee28:	693b      	ldr	r3, [r7, #16]
 800ee2a:	3304      	adds	r3, #4
 800ee2c:	4619      	mov	r1, r3
 800ee2e:	4610      	mov	r0, r2
 800ee30:	f7fe fb41 	bl	800d4b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ee34:	2301      	movs	r3, #1
 800ee36:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ee38:	697b      	ldr	r3, [r7, #20]
	}
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	3718      	adds	r7, #24
 800ee3e:	46bd      	mov	sp, r7
 800ee40:	bd80      	pop	{r7, pc}
 800ee42:	bf00      	nop
 800ee44:	20000d34 	.word	0x20000d34
 800ee48:	20001210 	.word	0x20001210
 800ee4c:	20000d38 	.word	0x20000d38

0800ee50 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800ee50:	b580      	push	{r7, lr}
 800ee52:	b086      	sub	sp, #24
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	60f8      	str	r0, [r7, #12]
 800ee58:	60b9      	str	r1, [r7, #8]
 800ee5a:	607a      	str	r2, [r7, #4]
 800ee5c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800ee5e:	f000 fe9d 	bl	800fb9c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800ee62:	4b26      	ldr	r3, [pc, #152]	; (800eefc <xTaskNotifyWait+0xac>)
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800ee6a:	b2db      	uxtb	r3, r3
 800ee6c:	2b02      	cmp	r3, #2
 800ee6e:	d01a      	beq.n	800eea6 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800ee70:	4b22      	ldr	r3, [pc, #136]	; (800eefc <xTaskNotifyWait+0xac>)
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ee76:	68fa      	ldr	r2, [r7, #12]
 800ee78:	43d2      	mvns	r2, r2
 800ee7a:	400a      	ands	r2, r1
 800ee7c:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800ee7e:	4b1f      	ldr	r3, [pc, #124]	; (800eefc <xTaskNotifyWait+0xac>)
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	2201      	movs	r2, #1
 800ee84:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800ee88:	683b      	ldr	r3, [r7, #0]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d00b      	beq.n	800eea6 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ee8e:	2101      	movs	r1, #1
 800ee90:	6838      	ldr	r0, [r7, #0]
 800ee92:	f000 f9c3 	bl	800f21c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800ee96:	4b1a      	ldr	r3, [pc, #104]	; (800ef00 <xTaskNotifyWait+0xb0>)
 800ee98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee9c:	601a      	str	r2, [r3, #0]
 800ee9e:	f3bf 8f4f 	dsb	sy
 800eea2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800eea6:	f000 fea7 	bl	800fbf8 <vPortExitCritical>

		taskENTER_CRITICAL();
 800eeaa:	f000 fe77 	bl	800fb9c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d004      	beq.n	800eebe <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800eeb4:	4b11      	ldr	r3, [pc, #68]	; (800eefc <xTaskNotifyWait+0xac>)
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800eebe:	4b0f      	ldr	r3, [pc, #60]	; (800eefc <xTaskNotifyWait+0xac>)
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800eec6:	b2db      	uxtb	r3, r3
 800eec8:	2b02      	cmp	r3, #2
 800eeca:	d002      	beq.n	800eed2 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800eecc:	2300      	movs	r3, #0
 800eece:	617b      	str	r3, [r7, #20]
 800eed0:	e008      	b.n	800eee4 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800eed2:	4b0a      	ldr	r3, [pc, #40]	; (800eefc <xTaskNotifyWait+0xac>)
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800eed8:	68ba      	ldr	r2, [r7, #8]
 800eeda:	43d2      	mvns	r2, r2
 800eedc:	400a      	ands	r2, r1
 800eede:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 800eee0:	2301      	movs	r3, #1
 800eee2:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800eee4:	4b05      	ldr	r3, [pc, #20]	; (800eefc <xTaskNotifyWait+0xac>)
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	2200      	movs	r2, #0
 800eeea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800eeee:	f000 fe83 	bl	800fbf8 <vPortExitCritical>

		return xReturn;
 800eef2:	697b      	ldr	r3, [r7, #20]
	}
 800eef4:	4618      	mov	r0, r3
 800eef6:	3718      	adds	r7, #24
 800eef8:	46bd      	mov	sp, r7
 800eefa:	bd80      	pop	{r7, pc}
 800eefc:	20000d34 	.word	0x20000d34
 800ef00:	e000ed04 	.word	0xe000ed04

0800ef04 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800ef04:	b580      	push	{r7, lr}
 800ef06:	b08a      	sub	sp, #40	; 0x28
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	60f8      	str	r0, [r7, #12]
 800ef0c:	60b9      	str	r1, [r7, #8]
 800ef0e:	603b      	str	r3, [r7, #0]
 800ef10:	4613      	mov	r3, r2
 800ef12:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800ef14:	2301      	movs	r3, #1
 800ef16:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d109      	bne.n	800ef32 <xTaskGenericNotify+0x2e>
 800ef1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef22:	f383 8811 	msr	BASEPRI, r3
 800ef26:	f3bf 8f6f 	isb	sy
 800ef2a:	f3bf 8f4f 	dsb	sy
 800ef2e:	61bb      	str	r3, [r7, #24]
 800ef30:	e7fe      	b.n	800ef30 <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800ef36:	f000 fe31 	bl	800fb9c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800ef3a:	683b      	ldr	r3, [r7, #0]
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d003      	beq.n	800ef48 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800ef40:	6a3b      	ldr	r3, [r7, #32]
 800ef42:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ef44:	683b      	ldr	r3, [r7, #0]
 800ef46:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800ef48:	6a3b      	ldr	r3, [r7, #32]
 800ef4a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800ef4e:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800ef50:	6a3b      	ldr	r3, [r7, #32]
 800ef52:	2202      	movs	r2, #2
 800ef54:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800ef58:	79fb      	ldrb	r3, [r7, #7]
 800ef5a:	2b04      	cmp	r3, #4
 800ef5c:	d827      	bhi.n	800efae <xTaskGenericNotify+0xaa>
 800ef5e:	a201      	add	r2, pc, #4	; (adr r2, 800ef64 <xTaskGenericNotify+0x60>)
 800ef60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef64:	0800efcd 	.word	0x0800efcd
 800ef68:	0800ef79 	.word	0x0800ef79
 800ef6c:	0800ef87 	.word	0x0800ef87
 800ef70:	0800ef93 	.word	0x0800ef93
 800ef74:	0800ef9b 	.word	0x0800ef9b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800ef78:	6a3b      	ldr	r3, [r7, #32]
 800ef7a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ef7c:	68bb      	ldr	r3, [r7, #8]
 800ef7e:	431a      	orrs	r2, r3
 800ef80:	6a3b      	ldr	r3, [r7, #32]
 800ef82:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800ef84:	e025      	b.n	800efd2 <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800ef86:	6a3b      	ldr	r3, [r7, #32]
 800ef88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef8a:	1c5a      	adds	r2, r3, #1
 800ef8c:	6a3b      	ldr	r3, [r7, #32]
 800ef8e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800ef90:	e01f      	b.n	800efd2 <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800ef92:	6a3b      	ldr	r3, [r7, #32]
 800ef94:	68ba      	ldr	r2, [r7, #8]
 800ef96:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800ef98:	e01b      	b.n	800efd2 <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800ef9a:	7ffb      	ldrb	r3, [r7, #31]
 800ef9c:	2b02      	cmp	r3, #2
 800ef9e:	d003      	beq.n	800efa8 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800efa0:	6a3b      	ldr	r3, [r7, #32]
 800efa2:	68ba      	ldr	r2, [r7, #8]
 800efa4:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800efa6:	e014      	b.n	800efd2 <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 800efa8:	2300      	movs	r3, #0
 800efaa:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800efac:	e011      	b.n	800efd2 <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800efae:	6a3b      	ldr	r3, [r7, #32]
 800efb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800efb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800efb6:	d00b      	beq.n	800efd0 <xTaskGenericNotify+0xcc>
 800efb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efbc:	f383 8811 	msr	BASEPRI, r3
 800efc0:	f3bf 8f6f 	isb	sy
 800efc4:	f3bf 8f4f 	dsb	sy
 800efc8:	617b      	str	r3, [r7, #20]
 800efca:	e7fe      	b.n	800efca <xTaskGenericNotify+0xc6>
					break;
 800efcc:	bf00      	nop
 800efce:	e000      	b.n	800efd2 <xTaskGenericNotify+0xce>

					break;
 800efd0:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800efd2:	7ffb      	ldrb	r3, [r7, #31]
 800efd4:	2b01      	cmp	r3, #1
 800efd6:	d139      	bne.n	800f04c <xTaskGenericNotify+0x148>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800efd8:	6a3b      	ldr	r3, [r7, #32]
 800efda:	3304      	adds	r3, #4
 800efdc:	4618      	mov	r0, r3
 800efde:	f7fe fac7 	bl	800d570 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800efe2:	6a3b      	ldr	r3, [r7, #32]
 800efe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800efe6:	4b1d      	ldr	r3, [pc, #116]	; (800f05c <xTaskGenericNotify+0x158>)
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	429a      	cmp	r2, r3
 800efec:	d903      	bls.n	800eff6 <xTaskGenericNotify+0xf2>
 800efee:	6a3b      	ldr	r3, [r7, #32]
 800eff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eff2:	4a1a      	ldr	r2, [pc, #104]	; (800f05c <xTaskGenericNotify+0x158>)
 800eff4:	6013      	str	r3, [r2, #0]
 800eff6:	6a3b      	ldr	r3, [r7, #32]
 800eff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800effa:	4613      	mov	r3, r2
 800effc:	009b      	lsls	r3, r3, #2
 800effe:	4413      	add	r3, r2
 800f000:	009b      	lsls	r3, r3, #2
 800f002:	4a17      	ldr	r2, [pc, #92]	; (800f060 <xTaskGenericNotify+0x15c>)
 800f004:	441a      	add	r2, r3
 800f006:	6a3b      	ldr	r3, [r7, #32]
 800f008:	3304      	adds	r3, #4
 800f00a:	4619      	mov	r1, r3
 800f00c:	4610      	mov	r0, r2
 800f00e:	f7fe fa52 	bl	800d4b6 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800f012:	6a3b      	ldr	r3, [r7, #32]
 800f014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f016:	2b00      	cmp	r3, #0
 800f018:	d009      	beq.n	800f02e <xTaskGenericNotify+0x12a>
 800f01a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f01e:	f383 8811 	msr	BASEPRI, r3
 800f022:	f3bf 8f6f 	isb	sy
 800f026:	f3bf 8f4f 	dsb	sy
 800f02a:	613b      	str	r3, [r7, #16]
 800f02c:	e7fe      	b.n	800f02c <xTaskGenericNotify+0x128>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f02e:	6a3b      	ldr	r3, [r7, #32]
 800f030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f032:	4b0c      	ldr	r3, [pc, #48]	; (800f064 <xTaskGenericNotify+0x160>)
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f038:	429a      	cmp	r2, r3
 800f03a:	d907      	bls.n	800f04c <xTaskGenericNotify+0x148>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800f03c:	4b0a      	ldr	r3, [pc, #40]	; (800f068 <xTaskGenericNotify+0x164>)
 800f03e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f042:	601a      	str	r2, [r3, #0]
 800f044:	f3bf 8f4f 	dsb	sy
 800f048:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f04c:	f000 fdd4 	bl	800fbf8 <vPortExitCritical>

		return xReturn;
 800f050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800f052:	4618      	mov	r0, r3
 800f054:	3728      	adds	r7, #40	; 0x28
 800f056:	46bd      	mov	sp, r7
 800f058:	bd80      	pop	{r7, pc}
 800f05a:	bf00      	nop
 800f05c:	20001210 	.word	0x20001210
 800f060:	20000d38 	.word	0x20000d38
 800f064:	20000d34 	.word	0x20000d34
 800f068:	e000ed04 	.word	0xe000ed04

0800f06c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800f06c:	b580      	push	{r7, lr}
 800f06e:	b08e      	sub	sp, #56	; 0x38
 800f070:	af00      	add	r7, sp, #0
 800f072:	60f8      	str	r0, [r7, #12]
 800f074:	60b9      	str	r1, [r7, #8]
 800f076:	603b      	str	r3, [r7, #0]
 800f078:	4613      	mov	r3, r2
 800f07a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800f07c:	2301      	movs	r3, #1
 800f07e:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	2b00      	cmp	r3, #0
 800f084:	d109      	bne.n	800f09a <xTaskGenericNotifyFromISR+0x2e>
 800f086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f08a:	f383 8811 	msr	BASEPRI, r3
 800f08e:	f3bf 8f6f 	isb	sy
 800f092:	f3bf 8f4f 	dsb	sy
 800f096:	627b      	str	r3, [r7, #36]	; 0x24
 800f098:	e7fe      	b.n	800f098 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f09a:	f000 fe5b 	bl	800fd54 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800f0a2:	f3ef 8211 	mrs	r2, BASEPRI
 800f0a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0aa:	f383 8811 	msr	BASEPRI, r3
 800f0ae:	f3bf 8f6f 	isb	sy
 800f0b2:	f3bf 8f4f 	dsb	sy
 800f0b6:	623a      	str	r2, [r7, #32]
 800f0b8:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800f0ba:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f0bc:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800f0be:	683b      	ldr	r3, [r7, #0]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d003      	beq.n	800f0cc <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800f0c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0c6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f0c8:	683b      	ldr	r3, [r7, #0]
 800f0ca:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800f0cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0ce:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800f0d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800f0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0d8:	2202      	movs	r2, #2
 800f0da:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800f0de:	79fb      	ldrb	r3, [r7, #7]
 800f0e0:	2b04      	cmp	r3, #4
 800f0e2:	d829      	bhi.n	800f138 <xTaskGenericNotifyFromISR+0xcc>
 800f0e4:	a201      	add	r2, pc, #4	; (adr r2, 800f0ec <xTaskGenericNotifyFromISR+0x80>)
 800f0e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0ea:	bf00      	nop
 800f0ec:	0800f157 	.word	0x0800f157
 800f0f0:	0800f101 	.word	0x0800f101
 800f0f4:	0800f10f 	.word	0x0800f10f
 800f0f8:	0800f11b 	.word	0x0800f11b
 800f0fc:	0800f123 	.word	0x0800f123
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800f100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f102:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f104:	68bb      	ldr	r3, [r7, #8]
 800f106:	431a      	orrs	r2, r3
 800f108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f10a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800f10c:	e026      	b.n	800f15c <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800f10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f112:	1c5a      	adds	r2, r3, #1
 800f114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f116:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800f118:	e020      	b.n	800f15c <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800f11a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f11c:	68ba      	ldr	r2, [r7, #8]
 800f11e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800f120:	e01c      	b.n	800f15c <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800f122:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f126:	2b02      	cmp	r3, #2
 800f128:	d003      	beq.n	800f132 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800f12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f12c:	68ba      	ldr	r2, [r7, #8]
 800f12e:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800f130:	e014      	b.n	800f15c <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 800f132:	2300      	movs	r3, #0
 800f134:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800f136:	e011      	b.n	800f15c <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800f138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f13a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f13c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f140:	d00b      	beq.n	800f15a <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 800f142:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f146:	f383 8811 	msr	BASEPRI, r3
 800f14a:	f3bf 8f6f 	isb	sy
 800f14e:	f3bf 8f4f 	dsb	sy
 800f152:	61bb      	str	r3, [r7, #24]
 800f154:	e7fe      	b.n	800f154 <xTaskGenericNotifyFromISR+0xe8>
					break;
 800f156:	bf00      	nop
 800f158:	e000      	b.n	800f15c <xTaskGenericNotifyFromISR+0xf0>
					break;
 800f15a:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800f15c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f160:	2b01      	cmp	r3, #1
 800f162:	d145      	bne.n	800f1f0 <xTaskGenericNotifyFromISR+0x184>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800f164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d009      	beq.n	800f180 <xTaskGenericNotifyFromISR+0x114>
 800f16c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f170:	f383 8811 	msr	BASEPRI, r3
 800f174:	f3bf 8f6f 	isb	sy
 800f178:	f3bf 8f4f 	dsb	sy
 800f17c:	617b      	str	r3, [r7, #20]
 800f17e:	e7fe      	b.n	800f17e <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f180:	4b20      	ldr	r3, [pc, #128]	; (800f204 <xTaskGenericNotifyFromISR+0x198>)
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	2b00      	cmp	r3, #0
 800f186:	d11d      	bne.n	800f1c4 <xTaskGenericNotifyFromISR+0x158>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f18a:	3304      	adds	r3, #4
 800f18c:	4618      	mov	r0, r3
 800f18e:	f7fe f9ef 	bl	800d570 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f196:	4b1c      	ldr	r3, [pc, #112]	; (800f208 <xTaskGenericNotifyFromISR+0x19c>)
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	429a      	cmp	r2, r3
 800f19c:	d903      	bls.n	800f1a6 <xTaskGenericNotifyFromISR+0x13a>
 800f19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1a2:	4a19      	ldr	r2, [pc, #100]	; (800f208 <xTaskGenericNotifyFromISR+0x19c>)
 800f1a4:	6013      	str	r3, [r2, #0]
 800f1a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f1aa:	4613      	mov	r3, r2
 800f1ac:	009b      	lsls	r3, r3, #2
 800f1ae:	4413      	add	r3, r2
 800f1b0:	009b      	lsls	r3, r3, #2
 800f1b2:	4a16      	ldr	r2, [pc, #88]	; (800f20c <xTaskGenericNotifyFromISR+0x1a0>)
 800f1b4:	441a      	add	r2, r3
 800f1b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1b8:	3304      	adds	r3, #4
 800f1ba:	4619      	mov	r1, r3
 800f1bc:	4610      	mov	r0, r2
 800f1be:	f7fe f97a 	bl	800d4b6 <vListInsertEnd>
 800f1c2:	e005      	b.n	800f1d0 <xTaskGenericNotifyFromISR+0x164>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800f1c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1c6:	3318      	adds	r3, #24
 800f1c8:	4619      	mov	r1, r3
 800f1ca:	4811      	ldr	r0, [pc, #68]	; (800f210 <xTaskGenericNotifyFromISR+0x1a4>)
 800f1cc:	f7fe f973 	bl	800d4b6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f1d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f1d4:	4b0f      	ldr	r3, [pc, #60]	; (800f214 <xTaskGenericNotifyFromISR+0x1a8>)
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1da:	429a      	cmp	r2, r3
 800f1dc:	d908      	bls.n	800f1f0 <xTaskGenericNotifyFromISR+0x184>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800f1de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d002      	beq.n	800f1ea <xTaskGenericNotifyFromISR+0x17e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800f1e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1e6:	2201      	movs	r2, #1
 800f1e8:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800f1ea:	4b0b      	ldr	r3, [pc, #44]	; (800f218 <xTaskGenericNotifyFromISR+0x1ac>)
 800f1ec:	2201      	movs	r2, #1
 800f1ee:	601a      	str	r2, [r3, #0]
 800f1f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1f2:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f1f4:	693b      	ldr	r3, [r7, #16]
 800f1f6:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800f1fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	3738      	adds	r7, #56	; 0x38
 800f200:	46bd      	mov	sp, r7
 800f202:	bd80      	pop	{r7, pc}
 800f204:	20001230 	.word	0x20001230
 800f208:	20001210 	.word	0x20001210
 800f20c:	20000d38 	.word	0x20000d38
 800f210:	200011c8 	.word	0x200011c8
 800f214:	20000d34 	.word	0x20000d34
 800f218:	2000121c 	.word	0x2000121c

0800f21c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f21c:	b580      	push	{r7, lr}
 800f21e:	b084      	sub	sp, #16
 800f220:	af00      	add	r7, sp, #0
 800f222:	6078      	str	r0, [r7, #4]
 800f224:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f226:	4b21      	ldr	r3, [pc, #132]	; (800f2ac <prvAddCurrentTaskToDelayedList+0x90>)
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f22c:	4b20      	ldr	r3, [pc, #128]	; (800f2b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	3304      	adds	r3, #4
 800f232:	4618      	mov	r0, r3
 800f234:	f7fe f99c 	bl	800d570 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f23e:	d10a      	bne.n	800f256 <prvAddCurrentTaskToDelayedList+0x3a>
 800f240:	683b      	ldr	r3, [r7, #0]
 800f242:	2b00      	cmp	r3, #0
 800f244:	d007      	beq.n	800f256 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f246:	4b1a      	ldr	r3, [pc, #104]	; (800f2b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	3304      	adds	r3, #4
 800f24c:	4619      	mov	r1, r3
 800f24e:	4819      	ldr	r0, [pc, #100]	; (800f2b4 <prvAddCurrentTaskToDelayedList+0x98>)
 800f250:	f7fe f931 	bl	800d4b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f254:	e026      	b.n	800f2a4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f256:	68fa      	ldr	r2, [r7, #12]
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	4413      	add	r3, r2
 800f25c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f25e:	4b14      	ldr	r3, [pc, #80]	; (800f2b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	68ba      	ldr	r2, [r7, #8]
 800f264:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f266:	68ba      	ldr	r2, [r7, #8]
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	429a      	cmp	r2, r3
 800f26c:	d209      	bcs.n	800f282 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f26e:	4b12      	ldr	r3, [pc, #72]	; (800f2b8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f270:	681a      	ldr	r2, [r3, #0]
 800f272:	4b0f      	ldr	r3, [pc, #60]	; (800f2b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	3304      	adds	r3, #4
 800f278:	4619      	mov	r1, r3
 800f27a:	4610      	mov	r0, r2
 800f27c:	f7fe f93f 	bl	800d4fe <vListInsert>
}
 800f280:	e010      	b.n	800f2a4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f282:	4b0e      	ldr	r3, [pc, #56]	; (800f2bc <prvAddCurrentTaskToDelayedList+0xa0>)
 800f284:	681a      	ldr	r2, [r3, #0]
 800f286:	4b0a      	ldr	r3, [pc, #40]	; (800f2b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	3304      	adds	r3, #4
 800f28c:	4619      	mov	r1, r3
 800f28e:	4610      	mov	r0, r2
 800f290:	f7fe f935 	bl	800d4fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f294:	4b0a      	ldr	r3, [pc, #40]	; (800f2c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	68ba      	ldr	r2, [r7, #8]
 800f29a:	429a      	cmp	r2, r3
 800f29c:	d202      	bcs.n	800f2a4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f29e:	4a08      	ldr	r2, [pc, #32]	; (800f2c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f2a0:	68bb      	ldr	r3, [r7, #8]
 800f2a2:	6013      	str	r3, [r2, #0]
}
 800f2a4:	bf00      	nop
 800f2a6:	3710      	adds	r7, #16
 800f2a8:	46bd      	mov	sp, r7
 800f2aa:	bd80      	pop	{r7, pc}
 800f2ac:	2000120c 	.word	0x2000120c
 800f2b0:	20000d34 	.word	0x20000d34
 800f2b4:	200011f4 	.word	0x200011f4
 800f2b8:	200011c4 	.word	0x200011c4
 800f2bc:	200011c0 	.word	0x200011c0
 800f2c0:	20001228 	.word	0x20001228

0800f2c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f2c4:	b580      	push	{r7, lr}
 800f2c6:	b08a      	sub	sp, #40	; 0x28
 800f2c8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f2ca:	2300      	movs	r3, #0
 800f2cc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f2ce:	f000 faff 	bl	800f8d0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f2d2:	4b1c      	ldr	r3, [pc, #112]	; (800f344 <xTimerCreateTimerTask+0x80>)
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d021      	beq.n	800f31e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f2da:	2300      	movs	r3, #0
 800f2dc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f2de:	2300      	movs	r3, #0
 800f2e0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f2e2:	1d3a      	adds	r2, r7, #4
 800f2e4:	f107 0108 	add.w	r1, r7, #8
 800f2e8:	f107 030c 	add.w	r3, r7, #12
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	f7fe f89b 	bl	800d428 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f2f2:	6879      	ldr	r1, [r7, #4]
 800f2f4:	68bb      	ldr	r3, [r7, #8]
 800f2f6:	68fa      	ldr	r2, [r7, #12]
 800f2f8:	9202      	str	r2, [sp, #8]
 800f2fa:	9301      	str	r3, [sp, #4]
 800f2fc:	2302      	movs	r3, #2
 800f2fe:	9300      	str	r3, [sp, #0]
 800f300:	2300      	movs	r3, #0
 800f302:	460a      	mov	r2, r1
 800f304:	4910      	ldr	r1, [pc, #64]	; (800f348 <xTimerCreateTimerTask+0x84>)
 800f306:	4811      	ldr	r0, [pc, #68]	; (800f34c <xTimerCreateTimerTask+0x88>)
 800f308:	f7fe ff10 	bl	800e12c <xTaskCreateStatic>
 800f30c:	4602      	mov	r2, r0
 800f30e:	4b10      	ldr	r3, [pc, #64]	; (800f350 <xTimerCreateTimerTask+0x8c>)
 800f310:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f312:	4b0f      	ldr	r3, [pc, #60]	; (800f350 <xTimerCreateTimerTask+0x8c>)
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	2b00      	cmp	r3, #0
 800f318:	d001      	beq.n	800f31e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f31a:	2301      	movs	r3, #1
 800f31c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f31e:	697b      	ldr	r3, [r7, #20]
 800f320:	2b00      	cmp	r3, #0
 800f322:	d109      	bne.n	800f338 <xTimerCreateTimerTask+0x74>
	__asm volatile
 800f324:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f328:	f383 8811 	msr	BASEPRI, r3
 800f32c:	f3bf 8f6f 	isb	sy
 800f330:	f3bf 8f4f 	dsb	sy
 800f334:	613b      	str	r3, [r7, #16]
 800f336:	e7fe      	b.n	800f336 <xTimerCreateTimerTask+0x72>
	return xReturn;
 800f338:	697b      	ldr	r3, [r7, #20]
}
 800f33a:	4618      	mov	r0, r3
 800f33c:	3718      	adds	r7, #24
 800f33e:	46bd      	mov	sp, r7
 800f340:	bd80      	pop	{r7, pc}
 800f342:	bf00      	nop
 800f344:	20001264 	.word	0x20001264
 800f348:	08015f20 	.word	0x08015f20
 800f34c:	0800f485 	.word	0x0800f485
 800f350:	20001268 	.word	0x20001268

0800f354 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f354:	b580      	push	{r7, lr}
 800f356:	b08a      	sub	sp, #40	; 0x28
 800f358:	af00      	add	r7, sp, #0
 800f35a:	60f8      	str	r0, [r7, #12]
 800f35c:	60b9      	str	r1, [r7, #8]
 800f35e:	607a      	str	r2, [r7, #4]
 800f360:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f362:	2300      	movs	r3, #0
 800f364:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d109      	bne.n	800f380 <xTimerGenericCommand+0x2c>
 800f36c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f370:	f383 8811 	msr	BASEPRI, r3
 800f374:	f3bf 8f6f 	isb	sy
 800f378:	f3bf 8f4f 	dsb	sy
 800f37c:	623b      	str	r3, [r7, #32]
 800f37e:	e7fe      	b.n	800f37e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f380:	4b19      	ldr	r3, [pc, #100]	; (800f3e8 <xTimerGenericCommand+0x94>)
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d02a      	beq.n	800f3de <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f388:	68bb      	ldr	r3, [r7, #8]
 800f38a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f394:	68bb      	ldr	r3, [r7, #8]
 800f396:	2b05      	cmp	r3, #5
 800f398:	dc18      	bgt.n	800f3cc <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f39a:	f7ff fccf 	bl	800ed3c <xTaskGetSchedulerState>
 800f39e:	4603      	mov	r3, r0
 800f3a0:	2b02      	cmp	r3, #2
 800f3a2:	d109      	bne.n	800f3b8 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f3a4:	4b10      	ldr	r3, [pc, #64]	; (800f3e8 <xTimerGenericCommand+0x94>)
 800f3a6:	6818      	ldr	r0, [r3, #0]
 800f3a8:	f107 0110 	add.w	r1, r7, #16
 800f3ac:	2300      	movs	r3, #0
 800f3ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f3b0:	f7fe fa46 	bl	800d840 <xQueueGenericSend>
 800f3b4:	6278      	str	r0, [r7, #36]	; 0x24
 800f3b6:	e012      	b.n	800f3de <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f3b8:	4b0b      	ldr	r3, [pc, #44]	; (800f3e8 <xTimerGenericCommand+0x94>)
 800f3ba:	6818      	ldr	r0, [r3, #0]
 800f3bc:	f107 0110 	add.w	r1, r7, #16
 800f3c0:	2300      	movs	r3, #0
 800f3c2:	2200      	movs	r2, #0
 800f3c4:	f7fe fa3c 	bl	800d840 <xQueueGenericSend>
 800f3c8:	6278      	str	r0, [r7, #36]	; 0x24
 800f3ca:	e008      	b.n	800f3de <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f3cc:	4b06      	ldr	r3, [pc, #24]	; (800f3e8 <xTimerGenericCommand+0x94>)
 800f3ce:	6818      	ldr	r0, [r3, #0]
 800f3d0:	f107 0110 	add.w	r1, r7, #16
 800f3d4:	2300      	movs	r3, #0
 800f3d6:	683a      	ldr	r2, [r7, #0]
 800f3d8:	f7fe fb2c 	bl	800da34 <xQueueGenericSendFromISR>
 800f3dc:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f3de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	3728      	adds	r7, #40	; 0x28
 800f3e4:	46bd      	mov	sp, r7
 800f3e6:	bd80      	pop	{r7, pc}
 800f3e8:	20001264 	.word	0x20001264

0800f3ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f3ec:	b580      	push	{r7, lr}
 800f3ee:	b088      	sub	sp, #32
 800f3f0:	af02      	add	r7, sp, #8
 800f3f2:	6078      	str	r0, [r7, #4]
 800f3f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f3f6:	4b22      	ldr	r3, [pc, #136]	; (800f480 <prvProcessExpiredTimer+0x94>)
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	68db      	ldr	r3, [r3, #12]
 800f3fc:	68db      	ldr	r3, [r3, #12]
 800f3fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f400:	697b      	ldr	r3, [r7, #20]
 800f402:	3304      	adds	r3, #4
 800f404:	4618      	mov	r0, r3
 800f406:	f7fe f8b3 	bl	800d570 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f40a:	697b      	ldr	r3, [r7, #20]
 800f40c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f410:	f003 0304 	and.w	r3, r3, #4
 800f414:	2b00      	cmp	r3, #0
 800f416:	d021      	beq.n	800f45c <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f418:	697b      	ldr	r3, [r7, #20]
 800f41a:	699a      	ldr	r2, [r3, #24]
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	18d1      	adds	r1, r2, r3
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	683a      	ldr	r2, [r7, #0]
 800f424:	6978      	ldr	r0, [r7, #20]
 800f426:	f000 f8d1 	bl	800f5cc <prvInsertTimerInActiveList>
 800f42a:	4603      	mov	r3, r0
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d01e      	beq.n	800f46e <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f430:	2300      	movs	r3, #0
 800f432:	9300      	str	r3, [sp, #0]
 800f434:	2300      	movs	r3, #0
 800f436:	687a      	ldr	r2, [r7, #4]
 800f438:	2100      	movs	r1, #0
 800f43a:	6978      	ldr	r0, [r7, #20]
 800f43c:	f7ff ff8a 	bl	800f354 <xTimerGenericCommand>
 800f440:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f442:	693b      	ldr	r3, [r7, #16]
 800f444:	2b00      	cmp	r3, #0
 800f446:	d112      	bne.n	800f46e <prvProcessExpiredTimer+0x82>
 800f448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f44c:	f383 8811 	msr	BASEPRI, r3
 800f450:	f3bf 8f6f 	isb	sy
 800f454:	f3bf 8f4f 	dsb	sy
 800f458:	60fb      	str	r3, [r7, #12]
 800f45a:	e7fe      	b.n	800f45a <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f45c:	697b      	ldr	r3, [r7, #20]
 800f45e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f462:	f023 0301 	bic.w	r3, r3, #1
 800f466:	b2da      	uxtb	r2, r3
 800f468:	697b      	ldr	r3, [r7, #20]
 800f46a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f46e:	697b      	ldr	r3, [r7, #20]
 800f470:	6a1b      	ldr	r3, [r3, #32]
 800f472:	6978      	ldr	r0, [r7, #20]
 800f474:	4798      	blx	r3
}
 800f476:	bf00      	nop
 800f478:	3718      	adds	r7, #24
 800f47a:	46bd      	mov	sp, r7
 800f47c:	bd80      	pop	{r7, pc}
 800f47e:	bf00      	nop
 800f480:	2000125c 	.word	0x2000125c

0800f484 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f484:	b580      	push	{r7, lr}
 800f486:	b084      	sub	sp, #16
 800f488:	af00      	add	r7, sp, #0
 800f48a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f48c:	f107 0308 	add.w	r3, r7, #8
 800f490:	4618      	mov	r0, r3
 800f492:	f000 f857 	bl	800f544 <prvGetNextExpireTime>
 800f496:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f498:	68bb      	ldr	r3, [r7, #8]
 800f49a:	4619      	mov	r1, r3
 800f49c:	68f8      	ldr	r0, [r7, #12]
 800f49e:	f000 f803 	bl	800f4a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f4a2:	f000 f8d5 	bl	800f650 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f4a6:	e7f1      	b.n	800f48c <prvTimerTask+0x8>

0800f4a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f4a8:	b580      	push	{r7, lr}
 800f4aa:	b084      	sub	sp, #16
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	6078      	str	r0, [r7, #4]
 800f4b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f4b2:	f7ff f871 	bl	800e598 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f4b6:	f107 0308 	add.w	r3, r7, #8
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	f000 f866 	bl	800f58c <prvSampleTimeNow>
 800f4c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f4c2:	68bb      	ldr	r3, [r7, #8]
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d130      	bne.n	800f52a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f4c8:	683b      	ldr	r3, [r7, #0]
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d10a      	bne.n	800f4e4 <prvProcessTimerOrBlockTask+0x3c>
 800f4ce:	687a      	ldr	r2, [r7, #4]
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	429a      	cmp	r2, r3
 800f4d4:	d806      	bhi.n	800f4e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f4d6:	f7ff f86d 	bl	800e5b4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f4da:	68f9      	ldr	r1, [r7, #12]
 800f4dc:	6878      	ldr	r0, [r7, #4]
 800f4de:	f7ff ff85 	bl	800f3ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f4e2:	e024      	b.n	800f52e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f4e4:	683b      	ldr	r3, [r7, #0]
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d008      	beq.n	800f4fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f4ea:	4b13      	ldr	r3, [pc, #76]	; (800f538 <prvProcessTimerOrBlockTask+0x90>)
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d101      	bne.n	800f4f8 <prvProcessTimerOrBlockTask+0x50>
 800f4f4:	2301      	movs	r3, #1
 800f4f6:	e000      	b.n	800f4fa <prvProcessTimerOrBlockTask+0x52>
 800f4f8:	2300      	movs	r3, #0
 800f4fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f4fc:	4b0f      	ldr	r3, [pc, #60]	; (800f53c <prvProcessTimerOrBlockTask+0x94>)
 800f4fe:	6818      	ldr	r0, [r3, #0]
 800f500:	687a      	ldr	r2, [r7, #4]
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	1ad3      	subs	r3, r2, r3
 800f506:	683a      	ldr	r2, [r7, #0]
 800f508:	4619      	mov	r1, r3
 800f50a:	f7fe fddb 	bl	800e0c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f50e:	f7ff f851 	bl	800e5b4 <xTaskResumeAll>
 800f512:	4603      	mov	r3, r0
 800f514:	2b00      	cmp	r3, #0
 800f516:	d10a      	bne.n	800f52e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f518:	4b09      	ldr	r3, [pc, #36]	; (800f540 <prvProcessTimerOrBlockTask+0x98>)
 800f51a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f51e:	601a      	str	r2, [r3, #0]
 800f520:	f3bf 8f4f 	dsb	sy
 800f524:	f3bf 8f6f 	isb	sy
}
 800f528:	e001      	b.n	800f52e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f52a:	f7ff f843 	bl	800e5b4 <xTaskResumeAll>
}
 800f52e:	bf00      	nop
 800f530:	3710      	adds	r7, #16
 800f532:	46bd      	mov	sp, r7
 800f534:	bd80      	pop	{r7, pc}
 800f536:	bf00      	nop
 800f538:	20001260 	.word	0x20001260
 800f53c:	20001264 	.word	0x20001264
 800f540:	e000ed04 	.word	0xe000ed04

0800f544 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f544:	b480      	push	{r7}
 800f546:	b085      	sub	sp, #20
 800f548:	af00      	add	r7, sp, #0
 800f54a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f54c:	4b0e      	ldr	r3, [pc, #56]	; (800f588 <prvGetNextExpireTime+0x44>)
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	2b00      	cmp	r3, #0
 800f554:	d101      	bne.n	800f55a <prvGetNextExpireTime+0x16>
 800f556:	2201      	movs	r2, #1
 800f558:	e000      	b.n	800f55c <prvGetNextExpireTime+0x18>
 800f55a:	2200      	movs	r2, #0
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	2b00      	cmp	r3, #0
 800f566:	d105      	bne.n	800f574 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f568:	4b07      	ldr	r3, [pc, #28]	; (800f588 <prvGetNextExpireTime+0x44>)
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	68db      	ldr	r3, [r3, #12]
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	60fb      	str	r3, [r7, #12]
 800f572:	e001      	b.n	800f578 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f574:	2300      	movs	r3, #0
 800f576:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f578:	68fb      	ldr	r3, [r7, #12]
}
 800f57a:	4618      	mov	r0, r3
 800f57c:	3714      	adds	r7, #20
 800f57e:	46bd      	mov	sp, r7
 800f580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f584:	4770      	bx	lr
 800f586:	bf00      	nop
 800f588:	2000125c 	.word	0x2000125c

0800f58c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f58c:	b580      	push	{r7, lr}
 800f58e:	b084      	sub	sp, #16
 800f590:	af00      	add	r7, sp, #0
 800f592:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f594:	f7ff f8aa 	bl	800e6ec <xTaskGetTickCount>
 800f598:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f59a:	4b0b      	ldr	r3, [pc, #44]	; (800f5c8 <prvSampleTimeNow+0x3c>)
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	68fa      	ldr	r2, [r7, #12]
 800f5a0:	429a      	cmp	r2, r3
 800f5a2:	d205      	bcs.n	800f5b0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f5a4:	f000 f930 	bl	800f808 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	2201      	movs	r2, #1
 800f5ac:	601a      	str	r2, [r3, #0]
 800f5ae:	e002      	b.n	800f5b6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	2200      	movs	r2, #0
 800f5b4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f5b6:	4a04      	ldr	r2, [pc, #16]	; (800f5c8 <prvSampleTimeNow+0x3c>)
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f5bc:	68fb      	ldr	r3, [r7, #12]
}
 800f5be:	4618      	mov	r0, r3
 800f5c0:	3710      	adds	r7, #16
 800f5c2:	46bd      	mov	sp, r7
 800f5c4:	bd80      	pop	{r7, pc}
 800f5c6:	bf00      	nop
 800f5c8:	2000126c 	.word	0x2000126c

0800f5cc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f5cc:	b580      	push	{r7, lr}
 800f5ce:	b086      	sub	sp, #24
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	60f8      	str	r0, [r7, #12]
 800f5d4:	60b9      	str	r1, [r7, #8]
 800f5d6:	607a      	str	r2, [r7, #4]
 800f5d8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f5da:	2300      	movs	r3, #0
 800f5dc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	68ba      	ldr	r2, [r7, #8]
 800f5e2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	68fa      	ldr	r2, [r7, #12]
 800f5e8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f5ea:	68ba      	ldr	r2, [r7, #8]
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	429a      	cmp	r2, r3
 800f5f0:	d812      	bhi.n	800f618 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f5f2:	687a      	ldr	r2, [r7, #4]
 800f5f4:	683b      	ldr	r3, [r7, #0]
 800f5f6:	1ad2      	subs	r2, r2, r3
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	699b      	ldr	r3, [r3, #24]
 800f5fc:	429a      	cmp	r2, r3
 800f5fe:	d302      	bcc.n	800f606 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f600:	2301      	movs	r3, #1
 800f602:	617b      	str	r3, [r7, #20]
 800f604:	e01b      	b.n	800f63e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f606:	4b10      	ldr	r3, [pc, #64]	; (800f648 <prvInsertTimerInActiveList+0x7c>)
 800f608:	681a      	ldr	r2, [r3, #0]
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	3304      	adds	r3, #4
 800f60e:	4619      	mov	r1, r3
 800f610:	4610      	mov	r0, r2
 800f612:	f7fd ff74 	bl	800d4fe <vListInsert>
 800f616:	e012      	b.n	800f63e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f618:	687a      	ldr	r2, [r7, #4]
 800f61a:	683b      	ldr	r3, [r7, #0]
 800f61c:	429a      	cmp	r2, r3
 800f61e:	d206      	bcs.n	800f62e <prvInsertTimerInActiveList+0x62>
 800f620:	68ba      	ldr	r2, [r7, #8]
 800f622:	683b      	ldr	r3, [r7, #0]
 800f624:	429a      	cmp	r2, r3
 800f626:	d302      	bcc.n	800f62e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f628:	2301      	movs	r3, #1
 800f62a:	617b      	str	r3, [r7, #20]
 800f62c:	e007      	b.n	800f63e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f62e:	4b07      	ldr	r3, [pc, #28]	; (800f64c <prvInsertTimerInActiveList+0x80>)
 800f630:	681a      	ldr	r2, [r3, #0]
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	3304      	adds	r3, #4
 800f636:	4619      	mov	r1, r3
 800f638:	4610      	mov	r0, r2
 800f63a:	f7fd ff60 	bl	800d4fe <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f63e:	697b      	ldr	r3, [r7, #20]
}
 800f640:	4618      	mov	r0, r3
 800f642:	3718      	adds	r7, #24
 800f644:	46bd      	mov	sp, r7
 800f646:	bd80      	pop	{r7, pc}
 800f648:	20001260 	.word	0x20001260
 800f64c:	2000125c 	.word	0x2000125c

0800f650 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f650:	b580      	push	{r7, lr}
 800f652:	b08e      	sub	sp, #56	; 0x38
 800f654:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f656:	e0c6      	b.n	800f7e6 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	da17      	bge.n	800f68e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f65e:	1d3b      	adds	r3, r7, #4
 800f660:	3304      	adds	r3, #4
 800f662:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f666:	2b00      	cmp	r3, #0
 800f668:	d109      	bne.n	800f67e <prvProcessReceivedCommands+0x2e>
 800f66a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f66e:	f383 8811 	msr	BASEPRI, r3
 800f672:	f3bf 8f6f 	isb	sy
 800f676:	f3bf 8f4f 	dsb	sy
 800f67a:	61fb      	str	r3, [r7, #28]
 800f67c:	e7fe      	b.n	800f67c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f67e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f684:	6850      	ldr	r0, [r2, #4]
 800f686:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f688:	6892      	ldr	r2, [r2, #8]
 800f68a:	4611      	mov	r1, r2
 800f68c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	2b00      	cmp	r3, #0
 800f692:	f2c0 80a7 	blt.w	800f7e4 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f69a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f69c:	695b      	ldr	r3, [r3, #20]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d004      	beq.n	800f6ac <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6a4:	3304      	adds	r3, #4
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	f7fd ff62 	bl	800d570 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f6ac:	463b      	mov	r3, r7
 800f6ae:	4618      	mov	r0, r3
 800f6b0:	f7ff ff6c 	bl	800f58c <prvSampleTimeNow>
 800f6b4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	2b09      	cmp	r3, #9
 800f6ba:	f200 8094 	bhi.w	800f7e6 <prvProcessReceivedCommands+0x196>
 800f6be:	a201      	add	r2, pc, #4	; (adr r2, 800f6c4 <prvProcessReceivedCommands+0x74>)
 800f6c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6c4:	0800f6ed 	.word	0x0800f6ed
 800f6c8:	0800f6ed 	.word	0x0800f6ed
 800f6cc:	0800f6ed 	.word	0x0800f6ed
 800f6d0:	0800f75f 	.word	0x0800f75f
 800f6d4:	0800f773 	.word	0x0800f773
 800f6d8:	0800f7bb 	.word	0x0800f7bb
 800f6dc:	0800f6ed 	.word	0x0800f6ed
 800f6e0:	0800f6ed 	.word	0x0800f6ed
 800f6e4:	0800f75f 	.word	0x0800f75f
 800f6e8:	0800f773 	.word	0x0800f773
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f6f2:	f043 0301 	orr.w	r3, r3, #1
 800f6f6:	b2da      	uxtb	r2, r3
 800f6f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f6fe:	68ba      	ldr	r2, [r7, #8]
 800f700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f702:	699b      	ldr	r3, [r3, #24]
 800f704:	18d1      	adds	r1, r2, r3
 800f706:	68bb      	ldr	r3, [r7, #8]
 800f708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f70a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f70c:	f7ff ff5e 	bl	800f5cc <prvInsertTimerInActiveList>
 800f710:	4603      	mov	r3, r0
 800f712:	2b00      	cmp	r3, #0
 800f714:	d067      	beq.n	800f7e6 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f718:	6a1b      	ldr	r3, [r3, #32]
 800f71a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f71c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f71e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f720:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f724:	f003 0304 	and.w	r3, r3, #4
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d05c      	beq.n	800f7e6 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f72c:	68ba      	ldr	r2, [r7, #8]
 800f72e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f730:	699b      	ldr	r3, [r3, #24]
 800f732:	441a      	add	r2, r3
 800f734:	2300      	movs	r3, #0
 800f736:	9300      	str	r3, [sp, #0]
 800f738:	2300      	movs	r3, #0
 800f73a:	2100      	movs	r1, #0
 800f73c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f73e:	f7ff fe09 	bl	800f354 <xTimerGenericCommand>
 800f742:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f744:	6a3b      	ldr	r3, [r7, #32]
 800f746:	2b00      	cmp	r3, #0
 800f748:	d14d      	bne.n	800f7e6 <prvProcessReceivedCommands+0x196>
 800f74a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f74e:	f383 8811 	msr	BASEPRI, r3
 800f752:	f3bf 8f6f 	isb	sy
 800f756:	f3bf 8f4f 	dsb	sy
 800f75a:	61bb      	str	r3, [r7, #24]
 800f75c:	e7fe      	b.n	800f75c <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f75e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f760:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f764:	f023 0301 	bic.w	r3, r3, #1
 800f768:	b2da      	uxtb	r2, r3
 800f76a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f76c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800f770:	e039      	b.n	800f7e6 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f774:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f778:	f043 0301 	orr.w	r3, r3, #1
 800f77c:	b2da      	uxtb	r2, r3
 800f77e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f780:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f784:	68ba      	ldr	r2, [r7, #8]
 800f786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f788:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f78a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f78c:	699b      	ldr	r3, [r3, #24]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d109      	bne.n	800f7a6 <prvProcessReceivedCommands+0x156>
 800f792:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f796:	f383 8811 	msr	BASEPRI, r3
 800f79a:	f3bf 8f6f 	isb	sy
 800f79e:	f3bf 8f4f 	dsb	sy
 800f7a2:	617b      	str	r3, [r7, #20]
 800f7a4:	e7fe      	b.n	800f7a4 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f7a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7a8:	699a      	ldr	r2, [r3, #24]
 800f7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7ac:	18d1      	adds	r1, r2, r3
 800f7ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f7b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f7b4:	f7ff ff0a 	bl	800f5cc <prvInsertTimerInActiveList>
					break;
 800f7b8:	e015      	b.n	800f7e6 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f7ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f7c0:	f003 0302 	and.w	r3, r3, #2
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d103      	bne.n	800f7d0 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800f7c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f7ca:	f000 fbc3 	bl	800ff54 <vPortFree>
 800f7ce:	e00a      	b.n	800f7e6 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f7d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f7d6:	f023 0301 	bic.w	r3, r3, #1
 800f7da:	b2da      	uxtb	r2, r3
 800f7dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f7e2:	e000      	b.n	800f7e6 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800f7e4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f7e6:	4b07      	ldr	r3, [pc, #28]	; (800f804 <prvProcessReceivedCommands+0x1b4>)
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	1d39      	adds	r1, r7, #4
 800f7ec:	2200      	movs	r2, #0
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	f7fe f9b4 	bl	800db5c <xQueueReceive>
 800f7f4:	4603      	mov	r3, r0
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	f47f af2e 	bne.w	800f658 <prvProcessReceivedCommands+0x8>
	}
}
 800f7fc:	bf00      	nop
 800f7fe:	3730      	adds	r7, #48	; 0x30
 800f800:	46bd      	mov	sp, r7
 800f802:	bd80      	pop	{r7, pc}
 800f804:	20001264 	.word	0x20001264

0800f808 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f808:	b580      	push	{r7, lr}
 800f80a:	b088      	sub	sp, #32
 800f80c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f80e:	e047      	b.n	800f8a0 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f810:	4b2d      	ldr	r3, [pc, #180]	; (800f8c8 <prvSwitchTimerLists+0xc0>)
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	68db      	ldr	r3, [r3, #12]
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f81a:	4b2b      	ldr	r3, [pc, #172]	; (800f8c8 <prvSwitchTimerLists+0xc0>)
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	68db      	ldr	r3, [r3, #12]
 800f820:	68db      	ldr	r3, [r3, #12]
 800f822:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	3304      	adds	r3, #4
 800f828:	4618      	mov	r0, r3
 800f82a:	f7fd fea1 	bl	800d570 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	6a1b      	ldr	r3, [r3, #32]
 800f832:	68f8      	ldr	r0, [r7, #12]
 800f834:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f83c:	f003 0304 	and.w	r3, r3, #4
 800f840:	2b00      	cmp	r3, #0
 800f842:	d02d      	beq.n	800f8a0 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	699b      	ldr	r3, [r3, #24]
 800f848:	693a      	ldr	r2, [r7, #16]
 800f84a:	4413      	add	r3, r2
 800f84c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f84e:	68ba      	ldr	r2, [r7, #8]
 800f850:	693b      	ldr	r3, [r7, #16]
 800f852:	429a      	cmp	r2, r3
 800f854:	d90e      	bls.n	800f874 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	68ba      	ldr	r2, [r7, #8]
 800f85a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	68fa      	ldr	r2, [r7, #12]
 800f860:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f862:	4b19      	ldr	r3, [pc, #100]	; (800f8c8 <prvSwitchTimerLists+0xc0>)
 800f864:	681a      	ldr	r2, [r3, #0]
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	3304      	adds	r3, #4
 800f86a:	4619      	mov	r1, r3
 800f86c:	4610      	mov	r0, r2
 800f86e:	f7fd fe46 	bl	800d4fe <vListInsert>
 800f872:	e015      	b.n	800f8a0 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f874:	2300      	movs	r3, #0
 800f876:	9300      	str	r3, [sp, #0]
 800f878:	2300      	movs	r3, #0
 800f87a:	693a      	ldr	r2, [r7, #16]
 800f87c:	2100      	movs	r1, #0
 800f87e:	68f8      	ldr	r0, [r7, #12]
 800f880:	f7ff fd68 	bl	800f354 <xTimerGenericCommand>
 800f884:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d109      	bne.n	800f8a0 <prvSwitchTimerLists+0x98>
 800f88c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f890:	f383 8811 	msr	BASEPRI, r3
 800f894:	f3bf 8f6f 	isb	sy
 800f898:	f3bf 8f4f 	dsb	sy
 800f89c:	603b      	str	r3, [r7, #0]
 800f89e:	e7fe      	b.n	800f89e <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f8a0:	4b09      	ldr	r3, [pc, #36]	; (800f8c8 <prvSwitchTimerLists+0xc0>)
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d1b2      	bne.n	800f810 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f8aa:	4b07      	ldr	r3, [pc, #28]	; (800f8c8 <prvSwitchTimerLists+0xc0>)
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f8b0:	4b06      	ldr	r3, [pc, #24]	; (800f8cc <prvSwitchTimerLists+0xc4>)
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	4a04      	ldr	r2, [pc, #16]	; (800f8c8 <prvSwitchTimerLists+0xc0>)
 800f8b6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f8b8:	4a04      	ldr	r2, [pc, #16]	; (800f8cc <prvSwitchTimerLists+0xc4>)
 800f8ba:	697b      	ldr	r3, [r7, #20]
 800f8bc:	6013      	str	r3, [r2, #0]
}
 800f8be:	bf00      	nop
 800f8c0:	3718      	adds	r7, #24
 800f8c2:	46bd      	mov	sp, r7
 800f8c4:	bd80      	pop	{r7, pc}
 800f8c6:	bf00      	nop
 800f8c8:	2000125c 	.word	0x2000125c
 800f8cc:	20001260 	.word	0x20001260

0800f8d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f8d0:	b580      	push	{r7, lr}
 800f8d2:	b082      	sub	sp, #8
 800f8d4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f8d6:	f000 f961 	bl	800fb9c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f8da:	4b15      	ldr	r3, [pc, #84]	; (800f930 <prvCheckForValidListAndQueue+0x60>)
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d120      	bne.n	800f924 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f8e2:	4814      	ldr	r0, [pc, #80]	; (800f934 <prvCheckForValidListAndQueue+0x64>)
 800f8e4:	f7fd fdba 	bl	800d45c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f8e8:	4813      	ldr	r0, [pc, #76]	; (800f938 <prvCheckForValidListAndQueue+0x68>)
 800f8ea:	f7fd fdb7 	bl	800d45c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f8ee:	4b13      	ldr	r3, [pc, #76]	; (800f93c <prvCheckForValidListAndQueue+0x6c>)
 800f8f0:	4a10      	ldr	r2, [pc, #64]	; (800f934 <prvCheckForValidListAndQueue+0x64>)
 800f8f2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f8f4:	4b12      	ldr	r3, [pc, #72]	; (800f940 <prvCheckForValidListAndQueue+0x70>)
 800f8f6:	4a10      	ldr	r2, [pc, #64]	; (800f938 <prvCheckForValidListAndQueue+0x68>)
 800f8f8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f8fa:	2300      	movs	r3, #0
 800f8fc:	9300      	str	r3, [sp, #0]
 800f8fe:	4b11      	ldr	r3, [pc, #68]	; (800f944 <prvCheckForValidListAndQueue+0x74>)
 800f900:	4a11      	ldr	r2, [pc, #68]	; (800f948 <prvCheckForValidListAndQueue+0x78>)
 800f902:	2110      	movs	r1, #16
 800f904:	200a      	movs	r0, #10
 800f906:	f7fd fec5 	bl	800d694 <xQueueGenericCreateStatic>
 800f90a:	4602      	mov	r2, r0
 800f90c:	4b08      	ldr	r3, [pc, #32]	; (800f930 <prvCheckForValidListAndQueue+0x60>)
 800f90e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f910:	4b07      	ldr	r3, [pc, #28]	; (800f930 <prvCheckForValidListAndQueue+0x60>)
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	2b00      	cmp	r3, #0
 800f916:	d005      	beq.n	800f924 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f918:	4b05      	ldr	r3, [pc, #20]	; (800f930 <prvCheckForValidListAndQueue+0x60>)
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	490b      	ldr	r1, [pc, #44]	; (800f94c <prvCheckForValidListAndQueue+0x7c>)
 800f91e:	4618      	mov	r0, r3
 800f920:	f7fe fba8 	bl	800e074 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f924:	f000 f968 	bl	800fbf8 <vPortExitCritical>
}
 800f928:	bf00      	nop
 800f92a:	46bd      	mov	sp, r7
 800f92c:	bd80      	pop	{r7, pc}
 800f92e:	bf00      	nop
 800f930:	20001264 	.word	0x20001264
 800f934:	20001234 	.word	0x20001234
 800f938:	20001248 	.word	0x20001248
 800f93c:	2000125c 	.word	0x2000125c
 800f940:	20001260 	.word	0x20001260
 800f944:	20001310 	.word	0x20001310
 800f948:	20001270 	.word	0x20001270
 800f94c:	08015f28 	.word	0x08015f28

0800f950 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f950:	b480      	push	{r7}
 800f952:	b085      	sub	sp, #20
 800f954:	af00      	add	r7, sp, #0
 800f956:	60f8      	str	r0, [r7, #12]
 800f958:	60b9      	str	r1, [r7, #8]
 800f95a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	3b04      	subs	r3, #4
 800f960:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f968:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	3b04      	subs	r3, #4
 800f96e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f970:	68bb      	ldr	r3, [r7, #8]
 800f972:	f023 0201 	bic.w	r2, r3, #1
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	3b04      	subs	r3, #4
 800f97e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f980:	4a0c      	ldr	r2, [pc, #48]	; (800f9b4 <pxPortInitialiseStack+0x64>)
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	3b14      	subs	r3, #20
 800f98a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f98c:	687a      	ldr	r2, [r7, #4]
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	3b04      	subs	r3, #4
 800f996:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	f06f 0202 	mvn.w	r2, #2
 800f99e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	3b20      	subs	r3, #32
 800f9a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f9a6:	68fb      	ldr	r3, [r7, #12]
}
 800f9a8:	4618      	mov	r0, r3
 800f9aa:	3714      	adds	r7, #20
 800f9ac:	46bd      	mov	sp, r7
 800f9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b2:	4770      	bx	lr
 800f9b4:	0800f9b9 	.word	0x0800f9b9

0800f9b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f9b8:	b480      	push	{r7}
 800f9ba:	b085      	sub	sp, #20
 800f9bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f9be:	2300      	movs	r3, #0
 800f9c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f9c2:	4b11      	ldr	r3, [pc, #68]	; (800fa08 <prvTaskExitError+0x50>)
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f9ca:	d009      	beq.n	800f9e0 <prvTaskExitError+0x28>
 800f9cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9d0:	f383 8811 	msr	BASEPRI, r3
 800f9d4:	f3bf 8f6f 	isb	sy
 800f9d8:	f3bf 8f4f 	dsb	sy
 800f9dc:	60fb      	str	r3, [r7, #12]
 800f9de:	e7fe      	b.n	800f9de <prvTaskExitError+0x26>
 800f9e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9e4:	f383 8811 	msr	BASEPRI, r3
 800f9e8:	f3bf 8f6f 	isb	sy
 800f9ec:	f3bf 8f4f 	dsb	sy
 800f9f0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f9f2:	bf00      	nop
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d0fc      	beq.n	800f9f4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f9fa:	bf00      	nop
 800f9fc:	3714      	adds	r7, #20
 800f9fe:	46bd      	mov	sp, r7
 800fa00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa04:	4770      	bx	lr
 800fa06:	bf00      	nop
 800fa08:	2000012c 	.word	0x2000012c
 800fa0c:	00000000 	.word	0x00000000

0800fa10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fa10:	4b07      	ldr	r3, [pc, #28]	; (800fa30 <pxCurrentTCBConst2>)
 800fa12:	6819      	ldr	r1, [r3, #0]
 800fa14:	6808      	ldr	r0, [r1, #0]
 800fa16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa1a:	f380 8809 	msr	PSP, r0
 800fa1e:	f3bf 8f6f 	isb	sy
 800fa22:	f04f 0000 	mov.w	r0, #0
 800fa26:	f380 8811 	msr	BASEPRI, r0
 800fa2a:	4770      	bx	lr
 800fa2c:	f3af 8000 	nop.w

0800fa30 <pxCurrentTCBConst2>:
 800fa30:	20000d34 	.word	0x20000d34
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fa34:	bf00      	nop
 800fa36:	bf00      	nop

0800fa38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fa38:	4808      	ldr	r0, [pc, #32]	; (800fa5c <prvPortStartFirstTask+0x24>)
 800fa3a:	6800      	ldr	r0, [r0, #0]
 800fa3c:	6800      	ldr	r0, [r0, #0]
 800fa3e:	f380 8808 	msr	MSP, r0
 800fa42:	f04f 0000 	mov.w	r0, #0
 800fa46:	f380 8814 	msr	CONTROL, r0
 800fa4a:	b662      	cpsie	i
 800fa4c:	b661      	cpsie	f
 800fa4e:	f3bf 8f4f 	dsb	sy
 800fa52:	f3bf 8f6f 	isb	sy
 800fa56:	df00      	svc	0
 800fa58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fa5a:	bf00      	nop
 800fa5c:	e000ed08 	.word	0xe000ed08

0800fa60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fa60:	b580      	push	{r7, lr}
 800fa62:	b086      	sub	sp, #24
 800fa64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fa66:	4b44      	ldr	r3, [pc, #272]	; (800fb78 <xPortStartScheduler+0x118>)
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	4a44      	ldr	r2, [pc, #272]	; (800fb7c <xPortStartScheduler+0x11c>)
 800fa6c:	4293      	cmp	r3, r2
 800fa6e:	d109      	bne.n	800fa84 <xPortStartScheduler+0x24>
 800fa70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa74:	f383 8811 	msr	BASEPRI, r3
 800fa78:	f3bf 8f6f 	isb	sy
 800fa7c:	f3bf 8f4f 	dsb	sy
 800fa80:	613b      	str	r3, [r7, #16]
 800fa82:	e7fe      	b.n	800fa82 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fa84:	4b3c      	ldr	r3, [pc, #240]	; (800fb78 <xPortStartScheduler+0x118>)
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	4a3d      	ldr	r2, [pc, #244]	; (800fb80 <xPortStartScheduler+0x120>)
 800fa8a:	4293      	cmp	r3, r2
 800fa8c:	d109      	bne.n	800faa2 <xPortStartScheduler+0x42>
 800fa8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa92:	f383 8811 	msr	BASEPRI, r3
 800fa96:	f3bf 8f6f 	isb	sy
 800fa9a:	f3bf 8f4f 	dsb	sy
 800fa9e:	60fb      	str	r3, [r7, #12]
 800faa0:	e7fe      	b.n	800faa0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800faa2:	4b38      	ldr	r3, [pc, #224]	; (800fb84 <xPortStartScheduler+0x124>)
 800faa4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800faa6:	697b      	ldr	r3, [r7, #20]
 800faa8:	781b      	ldrb	r3, [r3, #0]
 800faaa:	b2db      	uxtb	r3, r3
 800faac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800faae:	697b      	ldr	r3, [r7, #20]
 800fab0:	22ff      	movs	r2, #255	; 0xff
 800fab2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fab4:	697b      	ldr	r3, [r7, #20]
 800fab6:	781b      	ldrb	r3, [r3, #0]
 800fab8:	b2db      	uxtb	r3, r3
 800faba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fabc:	78fb      	ldrb	r3, [r7, #3]
 800fabe:	b2db      	uxtb	r3, r3
 800fac0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800fac4:	b2da      	uxtb	r2, r3
 800fac6:	4b30      	ldr	r3, [pc, #192]	; (800fb88 <xPortStartScheduler+0x128>)
 800fac8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800faca:	4b30      	ldr	r3, [pc, #192]	; (800fb8c <xPortStartScheduler+0x12c>)
 800facc:	2207      	movs	r2, #7
 800face:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fad0:	e009      	b.n	800fae6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800fad2:	4b2e      	ldr	r3, [pc, #184]	; (800fb8c <xPortStartScheduler+0x12c>)
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	3b01      	subs	r3, #1
 800fad8:	4a2c      	ldr	r2, [pc, #176]	; (800fb8c <xPortStartScheduler+0x12c>)
 800fada:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fadc:	78fb      	ldrb	r3, [r7, #3]
 800fade:	b2db      	uxtb	r3, r3
 800fae0:	005b      	lsls	r3, r3, #1
 800fae2:	b2db      	uxtb	r3, r3
 800fae4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fae6:	78fb      	ldrb	r3, [r7, #3]
 800fae8:	b2db      	uxtb	r3, r3
 800faea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800faee:	2b80      	cmp	r3, #128	; 0x80
 800faf0:	d0ef      	beq.n	800fad2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800faf2:	4b26      	ldr	r3, [pc, #152]	; (800fb8c <xPortStartScheduler+0x12c>)
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	f1c3 0307 	rsb	r3, r3, #7
 800fafa:	2b04      	cmp	r3, #4
 800fafc:	d009      	beq.n	800fb12 <xPortStartScheduler+0xb2>
 800fafe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb02:	f383 8811 	msr	BASEPRI, r3
 800fb06:	f3bf 8f6f 	isb	sy
 800fb0a:	f3bf 8f4f 	dsb	sy
 800fb0e:	60bb      	str	r3, [r7, #8]
 800fb10:	e7fe      	b.n	800fb10 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fb12:	4b1e      	ldr	r3, [pc, #120]	; (800fb8c <xPortStartScheduler+0x12c>)
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	021b      	lsls	r3, r3, #8
 800fb18:	4a1c      	ldr	r2, [pc, #112]	; (800fb8c <xPortStartScheduler+0x12c>)
 800fb1a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fb1c:	4b1b      	ldr	r3, [pc, #108]	; (800fb8c <xPortStartScheduler+0x12c>)
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fb24:	4a19      	ldr	r2, [pc, #100]	; (800fb8c <xPortStartScheduler+0x12c>)
 800fb26:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	b2da      	uxtb	r2, r3
 800fb2c:	697b      	ldr	r3, [r7, #20]
 800fb2e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fb30:	4b17      	ldr	r3, [pc, #92]	; (800fb90 <xPortStartScheduler+0x130>)
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	4a16      	ldr	r2, [pc, #88]	; (800fb90 <xPortStartScheduler+0x130>)
 800fb36:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800fb3a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fb3c:	4b14      	ldr	r3, [pc, #80]	; (800fb90 <xPortStartScheduler+0x130>)
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	4a13      	ldr	r2, [pc, #76]	; (800fb90 <xPortStartScheduler+0x130>)
 800fb42:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800fb46:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fb48:	f000 f8d6 	bl	800fcf8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fb4c:	4b11      	ldr	r3, [pc, #68]	; (800fb94 <xPortStartScheduler+0x134>)
 800fb4e:	2200      	movs	r2, #0
 800fb50:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fb52:	f000 f8f5 	bl	800fd40 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fb56:	4b10      	ldr	r3, [pc, #64]	; (800fb98 <xPortStartScheduler+0x138>)
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	4a0f      	ldr	r2, [pc, #60]	; (800fb98 <xPortStartScheduler+0x138>)
 800fb5c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800fb60:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fb62:	f7ff ff69 	bl	800fa38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fb66:	f7fe fe89 	bl	800e87c <vTaskSwitchContext>
	prvTaskExitError();
 800fb6a:	f7ff ff25 	bl	800f9b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fb6e:	2300      	movs	r3, #0
}
 800fb70:	4618      	mov	r0, r3
 800fb72:	3718      	adds	r7, #24
 800fb74:	46bd      	mov	sp, r7
 800fb76:	bd80      	pop	{r7, pc}
 800fb78:	e000ed00 	.word	0xe000ed00
 800fb7c:	410fc271 	.word	0x410fc271
 800fb80:	410fc270 	.word	0x410fc270
 800fb84:	e000e400 	.word	0xe000e400
 800fb88:	20001360 	.word	0x20001360
 800fb8c:	20001364 	.word	0x20001364
 800fb90:	e000ed20 	.word	0xe000ed20
 800fb94:	2000012c 	.word	0x2000012c
 800fb98:	e000ef34 	.word	0xe000ef34

0800fb9c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fb9c:	b480      	push	{r7}
 800fb9e:	b083      	sub	sp, #12
 800fba0:	af00      	add	r7, sp, #0
 800fba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fba6:	f383 8811 	msr	BASEPRI, r3
 800fbaa:	f3bf 8f6f 	isb	sy
 800fbae:	f3bf 8f4f 	dsb	sy
 800fbb2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fbb4:	4b0e      	ldr	r3, [pc, #56]	; (800fbf0 <vPortEnterCritical+0x54>)
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	3301      	adds	r3, #1
 800fbba:	4a0d      	ldr	r2, [pc, #52]	; (800fbf0 <vPortEnterCritical+0x54>)
 800fbbc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fbbe:	4b0c      	ldr	r3, [pc, #48]	; (800fbf0 <vPortEnterCritical+0x54>)
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	2b01      	cmp	r3, #1
 800fbc4:	d10e      	bne.n	800fbe4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fbc6:	4b0b      	ldr	r3, [pc, #44]	; (800fbf4 <vPortEnterCritical+0x58>)
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	b2db      	uxtb	r3, r3
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d009      	beq.n	800fbe4 <vPortEnterCritical+0x48>
 800fbd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbd4:	f383 8811 	msr	BASEPRI, r3
 800fbd8:	f3bf 8f6f 	isb	sy
 800fbdc:	f3bf 8f4f 	dsb	sy
 800fbe0:	603b      	str	r3, [r7, #0]
 800fbe2:	e7fe      	b.n	800fbe2 <vPortEnterCritical+0x46>
	}
}
 800fbe4:	bf00      	nop
 800fbe6:	370c      	adds	r7, #12
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbee:	4770      	bx	lr
 800fbf0:	2000012c 	.word	0x2000012c
 800fbf4:	e000ed04 	.word	0xe000ed04

0800fbf8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fbf8:	b480      	push	{r7}
 800fbfa:	b083      	sub	sp, #12
 800fbfc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fbfe:	4b11      	ldr	r3, [pc, #68]	; (800fc44 <vPortExitCritical+0x4c>)
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d109      	bne.n	800fc1a <vPortExitCritical+0x22>
 800fc06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc0a:	f383 8811 	msr	BASEPRI, r3
 800fc0e:	f3bf 8f6f 	isb	sy
 800fc12:	f3bf 8f4f 	dsb	sy
 800fc16:	607b      	str	r3, [r7, #4]
 800fc18:	e7fe      	b.n	800fc18 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800fc1a:	4b0a      	ldr	r3, [pc, #40]	; (800fc44 <vPortExitCritical+0x4c>)
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	3b01      	subs	r3, #1
 800fc20:	4a08      	ldr	r2, [pc, #32]	; (800fc44 <vPortExitCritical+0x4c>)
 800fc22:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fc24:	4b07      	ldr	r3, [pc, #28]	; (800fc44 <vPortExitCritical+0x4c>)
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d104      	bne.n	800fc36 <vPortExitCritical+0x3e>
 800fc2c:	2300      	movs	r3, #0
 800fc2e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fc30:	683b      	ldr	r3, [r7, #0]
 800fc32:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800fc36:	bf00      	nop
 800fc38:	370c      	adds	r7, #12
 800fc3a:	46bd      	mov	sp, r7
 800fc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc40:	4770      	bx	lr
 800fc42:	bf00      	nop
 800fc44:	2000012c 	.word	0x2000012c
	...

0800fc50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fc50:	f3ef 8009 	mrs	r0, PSP
 800fc54:	f3bf 8f6f 	isb	sy
 800fc58:	4b15      	ldr	r3, [pc, #84]	; (800fcb0 <pxCurrentTCBConst>)
 800fc5a:	681a      	ldr	r2, [r3, #0]
 800fc5c:	f01e 0f10 	tst.w	lr, #16
 800fc60:	bf08      	it	eq
 800fc62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fc66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc6a:	6010      	str	r0, [r2, #0]
 800fc6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fc70:	f04f 0050 	mov.w	r0, #80	; 0x50
 800fc74:	f380 8811 	msr	BASEPRI, r0
 800fc78:	f3bf 8f4f 	dsb	sy
 800fc7c:	f3bf 8f6f 	isb	sy
 800fc80:	f7fe fdfc 	bl	800e87c <vTaskSwitchContext>
 800fc84:	f04f 0000 	mov.w	r0, #0
 800fc88:	f380 8811 	msr	BASEPRI, r0
 800fc8c:	bc09      	pop	{r0, r3}
 800fc8e:	6819      	ldr	r1, [r3, #0]
 800fc90:	6808      	ldr	r0, [r1, #0]
 800fc92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc96:	f01e 0f10 	tst.w	lr, #16
 800fc9a:	bf08      	it	eq
 800fc9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fca0:	f380 8809 	msr	PSP, r0
 800fca4:	f3bf 8f6f 	isb	sy
 800fca8:	4770      	bx	lr
 800fcaa:	bf00      	nop
 800fcac:	f3af 8000 	nop.w

0800fcb0 <pxCurrentTCBConst>:
 800fcb0:	20000d34 	.word	0x20000d34
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fcb4:	bf00      	nop
 800fcb6:	bf00      	nop

0800fcb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fcb8:	b580      	push	{r7, lr}
 800fcba:	b082      	sub	sp, #8
 800fcbc:	af00      	add	r7, sp, #0
	__asm volatile
 800fcbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcc2:	f383 8811 	msr	BASEPRI, r3
 800fcc6:	f3bf 8f6f 	isb	sy
 800fcca:	f3bf 8f4f 	dsb	sy
 800fcce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fcd0:	f7fe fd1c 	bl	800e70c <xTaskIncrementTick>
 800fcd4:	4603      	mov	r3, r0
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d003      	beq.n	800fce2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fcda:	4b06      	ldr	r3, [pc, #24]	; (800fcf4 <SysTick_Handler+0x3c>)
 800fcdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fce0:	601a      	str	r2, [r3, #0]
 800fce2:	2300      	movs	r3, #0
 800fce4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fce6:	683b      	ldr	r3, [r7, #0]
 800fce8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800fcec:	bf00      	nop
 800fcee:	3708      	adds	r7, #8
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	bd80      	pop	{r7, pc}
 800fcf4:	e000ed04 	.word	0xe000ed04

0800fcf8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fcf8:	b480      	push	{r7}
 800fcfa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fcfc:	4b0b      	ldr	r3, [pc, #44]	; (800fd2c <vPortSetupTimerInterrupt+0x34>)
 800fcfe:	2200      	movs	r2, #0
 800fd00:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fd02:	4b0b      	ldr	r3, [pc, #44]	; (800fd30 <vPortSetupTimerInterrupt+0x38>)
 800fd04:	2200      	movs	r2, #0
 800fd06:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fd08:	4b0a      	ldr	r3, [pc, #40]	; (800fd34 <vPortSetupTimerInterrupt+0x3c>)
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	4a0a      	ldr	r2, [pc, #40]	; (800fd38 <vPortSetupTimerInterrupt+0x40>)
 800fd0e:	fba2 2303 	umull	r2, r3, r2, r3
 800fd12:	099b      	lsrs	r3, r3, #6
 800fd14:	4a09      	ldr	r2, [pc, #36]	; (800fd3c <vPortSetupTimerInterrupt+0x44>)
 800fd16:	3b01      	subs	r3, #1
 800fd18:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fd1a:	4b04      	ldr	r3, [pc, #16]	; (800fd2c <vPortSetupTimerInterrupt+0x34>)
 800fd1c:	2207      	movs	r2, #7
 800fd1e:	601a      	str	r2, [r3, #0]
}
 800fd20:	bf00      	nop
 800fd22:	46bd      	mov	sp, r7
 800fd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd28:	4770      	bx	lr
 800fd2a:	bf00      	nop
 800fd2c:	e000e010 	.word	0xe000e010
 800fd30:	e000e018 	.word	0xe000e018
 800fd34:	20000010 	.word	0x20000010
 800fd38:	10624dd3 	.word	0x10624dd3
 800fd3c:	e000e014 	.word	0xe000e014

0800fd40 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fd40:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800fd50 <vPortEnableVFP+0x10>
 800fd44:	6801      	ldr	r1, [r0, #0]
 800fd46:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800fd4a:	6001      	str	r1, [r0, #0]
 800fd4c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fd4e:	bf00      	nop
 800fd50:	e000ed88 	.word	0xe000ed88

0800fd54 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fd54:	b480      	push	{r7}
 800fd56:	b085      	sub	sp, #20
 800fd58:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fd5a:	f3ef 8305 	mrs	r3, IPSR
 800fd5e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	2b0f      	cmp	r3, #15
 800fd64:	d913      	bls.n	800fd8e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fd66:	4a16      	ldr	r2, [pc, #88]	; (800fdc0 <vPortValidateInterruptPriority+0x6c>)
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	4413      	add	r3, r2
 800fd6c:	781b      	ldrb	r3, [r3, #0]
 800fd6e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fd70:	4b14      	ldr	r3, [pc, #80]	; (800fdc4 <vPortValidateInterruptPriority+0x70>)
 800fd72:	781b      	ldrb	r3, [r3, #0]
 800fd74:	7afa      	ldrb	r2, [r7, #11]
 800fd76:	429a      	cmp	r2, r3
 800fd78:	d209      	bcs.n	800fd8e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800fd7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd7e:	f383 8811 	msr	BASEPRI, r3
 800fd82:	f3bf 8f6f 	isb	sy
 800fd86:	f3bf 8f4f 	dsb	sy
 800fd8a:	607b      	str	r3, [r7, #4]
 800fd8c:	e7fe      	b.n	800fd8c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fd8e:	4b0e      	ldr	r3, [pc, #56]	; (800fdc8 <vPortValidateInterruptPriority+0x74>)
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800fd96:	4b0d      	ldr	r3, [pc, #52]	; (800fdcc <vPortValidateInterruptPriority+0x78>)
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	429a      	cmp	r2, r3
 800fd9c:	d909      	bls.n	800fdb2 <vPortValidateInterruptPriority+0x5e>
 800fd9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fda2:	f383 8811 	msr	BASEPRI, r3
 800fda6:	f3bf 8f6f 	isb	sy
 800fdaa:	f3bf 8f4f 	dsb	sy
 800fdae:	603b      	str	r3, [r7, #0]
 800fdb0:	e7fe      	b.n	800fdb0 <vPortValidateInterruptPriority+0x5c>
	}
 800fdb2:	bf00      	nop
 800fdb4:	3714      	adds	r7, #20
 800fdb6:	46bd      	mov	sp, r7
 800fdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdbc:	4770      	bx	lr
 800fdbe:	bf00      	nop
 800fdc0:	e000e3f0 	.word	0xe000e3f0
 800fdc4:	20001360 	.word	0x20001360
 800fdc8:	e000ed0c 	.word	0xe000ed0c
 800fdcc:	20001364 	.word	0x20001364

0800fdd0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fdd0:	b580      	push	{r7, lr}
 800fdd2:	b08a      	sub	sp, #40	; 0x28
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fdd8:	2300      	movs	r3, #0
 800fdda:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fddc:	f7fe fbdc 	bl	800e598 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fde0:	4b57      	ldr	r3, [pc, #348]	; (800ff40 <pvPortMalloc+0x170>)
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d101      	bne.n	800fdec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fde8:	f000 f90c 	bl	8010004 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fdec:	4b55      	ldr	r3, [pc, #340]	; (800ff44 <pvPortMalloc+0x174>)
 800fdee:	681a      	ldr	r2, [r3, #0]
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	4013      	ands	r3, r2
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	f040 808c 	bne.w	800ff12 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d01c      	beq.n	800fe3a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800fe00:	2208      	movs	r2, #8
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	4413      	add	r3, r2
 800fe06:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	f003 0307 	and.w	r3, r3, #7
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d013      	beq.n	800fe3a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	f023 0307 	bic.w	r3, r3, #7
 800fe18:	3308      	adds	r3, #8
 800fe1a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	f003 0307 	and.w	r3, r3, #7
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d009      	beq.n	800fe3a <pvPortMalloc+0x6a>
 800fe26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe2a:	f383 8811 	msr	BASEPRI, r3
 800fe2e:	f3bf 8f6f 	isb	sy
 800fe32:	f3bf 8f4f 	dsb	sy
 800fe36:	617b      	str	r3, [r7, #20]
 800fe38:	e7fe      	b.n	800fe38 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d068      	beq.n	800ff12 <pvPortMalloc+0x142>
 800fe40:	4b41      	ldr	r3, [pc, #260]	; (800ff48 <pvPortMalloc+0x178>)
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	687a      	ldr	r2, [r7, #4]
 800fe46:	429a      	cmp	r2, r3
 800fe48:	d863      	bhi.n	800ff12 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fe4a:	4b40      	ldr	r3, [pc, #256]	; (800ff4c <pvPortMalloc+0x17c>)
 800fe4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fe4e:	4b3f      	ldr	r3, [pc, #252]	; (800ff4c <pvPortMalloc+0x17c>)
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fe54:	e004      	b.n	800fe60 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800fe56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fe5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fe60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe62:	685b      	ldr	r3, [r3, #4]
 800fe64:	687a      	ldr	r2, [r7, #4]
 800fe66:	429a      	cmp	r2, r3
 800fe68:	d903      	bls.n	800fe72 <pvPortMalloc+0xa2>
 800fe6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d1f1      	bne.n	800fe56 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fe72:	4b33      	ldr	r3, [pc, #204]	; (800ff40 <pvPortMalloc+0x170>)
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe78:	429a      	cmp	r2, r3
 800fe7a:	d04a      	beq.n	800ff12 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fe7c:	6a3b      	ldr	r3, [r7, #32]
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	2208      	movs	r2, #8
 800fe82:	4413      	add	r3, r2
 800fe84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fe86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe88:	681a      	ldr	r2, [r3, #0]
 800fe8a:	6a3b      	ldr	r3, [r7, #32]
 800fe8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fe8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe90:	685a      	ldr	r2, [r3, #4]
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	1ad2      	subs	r2, r2, r3
 800fe96:	2308      	movs	r3, #8
 800fe98:	005b      	lsls	r3, r3, #1
 800fe9a:	429a      	cmp	r2, r3
 800fe9c:	d91e      	bls.n	800fedc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fe9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	4413      	add	r3, r2
 800fea4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fea6:	69bb      	ldr	r3, [r7, #24]
 800fea8:	f003 0307 	and.w	r3, r3, #7
 800feac:	2b00      	cmp	r3, #0
 800feae:	d009      	beq.n	800fec4 <pvPortMalloc+0xf4>
 800feb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feb4:	f383 8811 	msr	BASEPRI, r3
 800feb8:	f3bf 8f6f 	isb	sy
 800febc:	f3bf 8f4f 	dsb	sy
 800fec0:	613b      	str	r3, [r7, #16]
 800fec2:	e7fe      	b.n	800fec2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fec6:	685a      	ldr	r2, [r3, #4]
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	1ad2      	subs	r2, r2, r3
 800fecc:	69bb      	ldr	r3, [r7, #24]
 800fece:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fed2:	687a      	ldr	r2, [r7, #4]
 800fed4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fed6:	69b8      	ldr	r0, [r7, #24]
 800fed8:	f000 f8f6 	bl	80100c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fedc:	4b1a      	ldr	r3, [pc, #104]	; (800ff48 <pvPortMalloc+0x178>)
 800fede:	681a      	ldr	r2, [r3, #0]
 800fee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fee2:	685b      	ldr	r3, [r3, #4]
 800fee4:	1ad3      	subs	r3, r2, r3
 800fee6:	4a18      	ldr	r2, [pc, #96]	; (800ff48 <pvPortMalloc+0x178>)
 800fee8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800feea:	4b17      	ldr	r3, [pc, #92]	; (800ff48 <pvPortMalloc+0x178>)
 800feec:	681a      	ldr	r2, [r3, #0]
 800feee:	4b18      	ldr	r3, [pc, #96]	; (800ff50 <pvPortMalloc+0x180>)
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	429a      	cmp	r2, r3
 800fef4:	d203      	bcs.n	800fefe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fef6:	4b14      	ldr	r3, [pc, #80]	; (800ff48 <pvPortMalloc+0x178>)
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	4a15      	ldr	r2, [pc, #84]	; (800ff50 <pvPortMalloc+0x180>)
 800fefc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fefe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff00:	685a      	ldr	r2, [r3, #4]
 800ff02:	4b10      	ldr	r3, [pc, #64]	; (800ff44 <pvPortMalloc+0x174>)
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	431a      	orrs	r2, r3
 800ff08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff0a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ff0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff0e:	2200      	movs	r2, #0
 800ff10:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ff12:	f7fe fb4f 	bl	800e5b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ff16:	69fb      	ldr	r3, [r7, #28]
 800ff18:	f003 0307 	and.w	r3, r3, #7
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d009      	beq.n	800ff34 <pvPortMalloc+0x164>
 800ff20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff24:	f383 8811 	msr	BASEPRI, r3
 800ff28:	f3bf 8f6f 	isb	sy
 800ff2c:	f3bf 8f4f 	dsb	sy
 800ff30:	60fb      	str	r3, [r7, #12]
 800ff32:	e7fe      	b.n	800ff32 <pvPortMalloc+0x162>
	return pvReturn;
 800ff34:	69fb      	ldr	r3, [r7, #28]
}
 800ff36:	4618      	mov	r0, r3
 800ff38:	3728      	adds	r7, #40	; 0x28
 800ff3a:	46bd      	mov	sp, r7
 800ff3c:	bd80      	pop	{r7, pc}
 800ff3e:	bf00      	nop
 800ff40:	20004f70 	.word	0x20004f70
 800ff44:	20004f7c 	.word	0x20004f7c
 800ff48:	20004f74 	.word	0x20004f74
 800ff4c:	20004f68 	.word	0x20004f68
 800ff50:	20004f78 	.word	0x20004f78

0800ff54 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ff54:	b580      	push	{r7, lr}
 800ff56:	b086      	sub	sp, #24
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d046      	beq.n	800fff4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ff66:	2308      	movs	r3, #8
 800ff68:	425b      	negs	r3, r3
 800ff6a:	697a      	ldr	r2, [r7, #20]
 800ff6c:	4413      	add	r3, r2
 800ff6e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ff70:	697b      	ldr	r3, [r7, #20]
 800ff72:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ff74:	693b      	ldr	r3, [r7, #16]
 800ff76:	685a      	ldr	r2, [r3, #4]
 800ff78:	4b20      	ldr	r3, [pc, #128]	; (800fffc <vPortFree+0xa8>)
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	4013      	ands	r3, r2
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d109      	bne.n	800ff96 <vPortFree+0x42>
 800ff82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff86:	f383 8811 	msr	BASEPRI, r3
 800ff8a:	f3bf 8f6f 	isb	sy
 800ff8e:	f3bf 8f4f 	dsb	sy
 800ff92:	60fb      	str	r3, [r7, #12]
 800ff94:	e7fe      	b.n	800ff94 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ff96:	693b      	ldr	r3, [r7, #16]
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d009      	beq.n	800ffb2 <vPortFree+0x5e>
 800ff9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffa2:	f383 8811 	msr	BASEPRI, r3
 800ffa6:	f3bf 8f6f 	isb	sy
 800ffaa:	f3bf 8f4f 	dsb	sy
 800ffae:	60bb      	str	r3, [r7, #8]
 800ffb0:	e7fe      	b.n	800ffb0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ffb2:	693b      	ldr	r3, [r7, #16]
 800ffb4:	685a      	ldr	r2, [r3, #4]
 800ffb6:	4b11      	ldr	r3, [pc, #68]	; (800fffc <vPortFree+0xa8>)
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	4013      	ands	r3, r2
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d019      	beq.n	800fff4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ffc0:	693b      	ldr	r3, [r7, #16]
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d115      	bne.n	800fff4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ffc8:	693b      	ldr	r3, [r7, #16]
 800ffca:	685a      	ldr	r2, [r3, #4]
 800ffcc:	4b0b      	ldr	r3, [pc, #44]	; (800fffc <vPortFree+0xa8>)
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	43db      	mvns	r3, r3
 800ffd2:	401a      	ands	r2, r3
 800ffd4:	693b      	ldr	r3, [r7, #16]
 800ffd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ffd8:	f7fe fade 	bl	800e598 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ffdc:	693b      	ldr	r3, [r7, #16]
 800ffde:	685a      	ldr	r2, [r3, #4]
 800ffe0:	4b07      	ldr	r3, [pc, #28]	; (8010000 <vPortFree+0xac>)
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	4413      	add	r3, r2
 800ffe6:	4a06      	ldr	r2, [pc, #24]	; (8010000 <vPortFree+0xac>)
 800ffe8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ffea:	6938      	ldr	r0, [r7, #16]
 800ffec:	f000 f86c 	bl	80100c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800fff0:	f7fe fae0 	bl	800e5b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fff4:	bf00      	nop
 800fff6:	3718      	adds	r7, #24
 800fff8:	46bd      	mov	sp, r7
 800fffa:	bd80      	pop	{r7, pc}
 800fffc:	20004f7c 	.word	0x20004f7c
 8010000:	20004f74 	.word	0x20004f74

08010004 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010004:	b480      	push	{r7}
 8010006:	b085      	sub	sp, #20
 8010008:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801000a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801000e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010010:	4b27      	ldr	r3, [pc, #156]	; (80100b0 <prvHeapInit+0xac>)
 8010012:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	f003 0307 	and.w	r3, r3, #7
 801001a:	2b00      	cmp	r3, #0
 801001c:	d00c      	beq.n	8010038 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	3307      	adds	r3, #7
 8010022:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	f023 0307 	bic.w	r3, r3, #7
 801002a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801002c:	68ba      	ldr	r2, [r7, #8]
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	1ad3      	subs	r3, r2, r3
 8010032:	4a1f      	ldr	r2, [pc, #124]	; (80100b0 <prvHeapInit+0xac>)
 8010034:	4413      	add	r3, r2
 8010036:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801003c:	4a1d      	ldr	r2, [pc, #116]	; (80100b4 <prvHeapInit+0xb0>)
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010042:	4b1c      	ldr	r3, [pc, #112]	; (80100b4 <prvHeapInit+0xb0>)
 8010044:	2200      	movs	r2, #0
 8010046:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	68ba      	ldr	r2, [r7, #8]
 801004c:	4413      	add	r3, r2
 801004e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010050:	2208      	movs	r2, #8
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	1a9b      	subs	r3, r3, r2
 8010056:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	f023 0307 	bic.w	r3, r3, #7
 801005e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	4a15      	ldr	r2, [pc, #84]	; (80100b8 <prvHeapInit+0xb4>)
 8010064:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010066:	4b14      	ldr	r3, [pc, #80]	; (80100b8 <prvHeapInit+0xb4>)
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	2200      	movs	r2, #0
 801006c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801006e:	4b12      	ldr	r3, [pc, #72]	; (80100b8 <prvHeapInit+0xb4>)
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	2200      	movs	r2, #0
 8010074:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801007a:	683b      	ldr	r3, [r7, #0]
 801007c:	68fa      	ldr	r2, [r7, #12]
 801007e:	1ad2      	subs	r2, r2, r3
 8010080:	683b      	ldr	r3, [r7, #0]
 8010082:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010084:	4b0c      	ldr	r3, [pc, #48]	; (80100b8 <prvHeapInit+0xb4>)
 8010086:	681a      	ldr	r2, [r3, #0]
 8010088:	683b      	ldr	r3, [r7, #0]
 801008a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801008c:	683b      	ldr	r3, [r7, #0]
 801008e:	685b      	ldr	r3, [r3, #4]
 8010090:	4a0a      	ldr	r2, [pc, #40]	; (80100bc <prvHeapInit+0xb8>)
 8010092:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010094:	683b      	ldr	r3, [r7, #0]
 8010096:	685b      	ldr	r3, [r3, #4]
 8010098:	4a09      	ldr	r2, [pc, #36]	; (80100c0 <prvHeapInit+0xbc>)
 801009a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801009c:	4b09      	ldr	r3, [pc, #36]	; (80100c4 <prvHeapInit+0xc0>)
 801009e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80100a2:	601a      	str	r2, [r3, #0]
}
 80100a4:	bf00      	nop
 80100a6:	3714      	adds	r7, #20
 80100a8:	46bd      	mov	sp, r7
 80100aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ae:	4770      	bx	lr
 80100b0:	20001368 	.word	0x20001368
 80100b4:	20004f68 	.word	0x20004f68
 80100b8:	20004f70 	.word	0x20004f70
 80100bc:	20004f78 	.word	0x20004f78
 80100c0:	20004f74 	.word	0x20004f74
 80100c4:	20004f7c 	.word	0x20004f7c

080100c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80100c8:	b480      	push	{r7}
 80100ca:	b085      	sub	sp, #20
 80100cc:	af00      	add	r7, sp, #0
 80100ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80100d0:	4b28      	ldr	r3, [pc, #160]	; (8010174 <prvInsertBlockIntoFreeList+0xac>)
 80100d2:	60fb      	str	r3, [r7, #12]
 80100d4:	e002      	b.n	80100dc <prvInsertBlockIntoFreeList+0x14>
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	60fb      	str	r3, [r7, #12]
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	687a      	ldr	r2, [r7, #4]
 80100e2:	429a      	cmp	r2, r3
 80100e4:	d8f7      	bhi.n	80100d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	685b      	ldr	r3, [r3, #4]
 80100ee:	68ba      	ldr	r2, [r7, #8]
 80100f0:	4413      	add	r3, r2
 80100f2:	687a      	ldr	r2, [r7, #4]
 80100f4:	429a      	cmp	r2, r3
 80100f6:	d108      	bne.n	801010a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	685a      	ldr	r2, [r3, #4]
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	685b      	ldr	r3, [r3, #4]
 8010100:	441a      	add	r2, r3
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	685b      	ldr	r3, [r3, #4]
 8010112:	68ba      	ldr	r2, [r7, #8]
 8010114:	441a      	add	r2, r3
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	429a      	cmp	r2, r3
 801011c:	d118      	bne.n	8010150 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	681a      	ldr	r2, [r3, #0]
 8010122:	4b15      	ldr	r3, [pc, #84]	; (8010178 <prvInsertBlockIntoFreeList+0xb0>)
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	429a      	cmp	r2, r3
 8010128:	d00d      	beq.n	8010146 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	685a      	ldr	r2, [r3, #4]
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	685b      	ldr	r3, [r3, #4]
 8010134:	441a      	add	r2, r3
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	681a      	ldr	r2, [r3, #0]
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	601a      	str	r2, [r3, #0]
 8010144:	e008      	b.n	8010158 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010146:	4b0c      	ldr	r3, [pc, #48]	; (8010178 <prvInsertBlockIntoFreeList+0xb0>)
 8010148:	681a      	ldr	r2, [r3, #0]
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	601a      	str	r2, [r3, #0]
 801014e:	e003      	b.n	8010158 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	681a      	ldr	r2, [r3, #0]
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010158:	68fa      	ldr	r2, [r7, #12]
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	429a      	cmp	r2, r3
 801015e:	d002      	beq.n	8010166 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	687a      	ldr	r2, [r7, #4]
 8010164:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010166:	bf00      	nop
 8010168:	3714      	adds	r7, #20
 801016a:	46bd      	mov	sp, r7
 801016c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010170:	4770      	bx	lr
 8010172:	bf00      	nop
 8010174:	20004f68 	.word	0x20004f68
 8010178:	20004f70 	.word	0x20004f70

0801017c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801017c:	b580      	push	{r7, lr}
 801017e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8010180:	2200      	movs	r2, #0
 8010182:	4912      	ldr	r1, [pc, #72]	; (80101cc <MX_USB_DEVICE_Init+0x50>)
 8010184:	4812      	ldr	r0, [pc, #72]	; (80101d0 <MX_USB_DEVICE_Init+0x54>)
 8010186:	f7fb fd37 	bl	800bbf8 <USBD_Init>
 801018a:	4603      	mov	r3, r0
 801018c:	2b00      	cmp	r3, #0
 801018e:	d001      	beq.n	8010194 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010190:	f7f1 fc74 	bl	8001a7c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8010194:	490f      	ldr	r1, [pc, #60]	; (80101d4 <MX_USB_DEVICE_Init+0x58>)
 8010196:	480e      	ldr	r0, [pc, #56]	; (80101d0 <MX_USB_DEVICE_Init+0x54>)
 8010198:	f7fb fd64 	bl	800bc64 <USBD_RegisterClass>
 801019c:	4603      	mov	r3, r0
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d001      	beq.n	80101a6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80101a2:	f7f1 fc6b 	bl	8001a7c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80101a6:	490c      	ldr	r1, [pc, #48]	; (80101d8 <MX_USB_DEVICE_Init+0x5c>)
 80101a8:	4809      	ldr	r0, [pc, #36]	; (80101d0 <MX_USB_DEVICE_Init+0x54>)
 80101aa:	f7fb fc89 	bl	800bac0 <USBD_CDC_RegisterInterface>
 80101ae:	4603      	mov	r3, r0
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d001      	beq.n	80101b8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80101b4:	f7f1 fc62 	bl	8001a7c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80101b8:	4805      	ldr	r0, [pc, #20]	; (80101d0 <MX_USB_DEVICE_Init+0x54>)
 80101ba:	f7fb fd74 	bl	800bca6 <USBD_Start>
 80101be:	4603      	mov	r3, r0
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d001      	beq.n	80101c8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80101c4:	f7f1 fc5a 	bl	8001a7c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80101c8:	bf00      	nop
 80101ca:	bd80      	pop	{r7, pc}
 80101cc:	20000144 	.word	0x20000144
 80101d0:	20007230 	.word	0x20007230
 80101d4:	20000028 	.word	0x20000028
 80101d8:	20000130 	.word	0x20000130

080101dc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80101dc:	b580      	push	{r7, lr}
 80101de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80101e0:	2200      	movs	r2, #0
 80101e2:	4905      	ldr	r1, [pc, #20]	; (80101f8 <CDC_Init_FS+0x1c>)
 80101e4:	4805      	ldr	r0, [pc, #20]	; (80101fc <CDC_Init_FS+0x20>)
 80101e6:	f7fb fc80 	bl	800baea <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80101ea:	4905      	ldr	r1, [pc, #20]	; (8010200 <CDC_Init_FS+0x24>)
 80101ec:	4803      	ldr	r0, [pc, #12]	; (80101fc <CDC_Init_FS+0x20>)
 80101ee:	f7fb fc95 	bl	800bb1c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80101f2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80101f4:	4618      	mov	r0, r3
 80101f6:	bd80      	pop	{r7, pc}
 80101f8:	20007d00 	.word	0x20007d00
 80101fc:	20007230 	.word	0x20007230
 8010200:	20007500 	.word	0x20007500

08010204 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010204:	b480      	push	{r7}
 8010206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010208:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801020a:	4618      	mov	r0, r3
 801020c:	46bd      	mov	sp, r7
 801020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010212:	4770      	bx	lr

08010214 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010214:	b480      	push	{r7}
 8010216:	b083      	sub	sp, #12
 8010218:	af00      	add	r7, sp, #0
 801021a:	4603      	mov	r3, r0
 801021c:	6039      	str	r1, [r7, #0]
 801021e:	71fb      	strb	r3, [r7, #7]
 8010220:	4613      	mov	r3, r2
 8010222:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010224:	79fb      	ldrb	r3, [r7, #7]
 8010226:	2b23      	cmp	r3, #35	; 0x23
 8010228:	d84a      	bhi.n	80102c0 <CDC_Control_FS+0xac>
 801022a:	a201      	add	r2, pc, #4	; (adr r2, 8010230 <CDC_Control_FS+0x1c>)
 801022c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010230:	080102c1 	.word	0x080102c1
 8010234:	080102c1 	.word	0x080102c1
 8010238:	080102c1 	.word	0x080102c1
 801023c:	080102c1 	.word	0x080102c1
 8010240:	080102c1 	.word	0x080102c1
 8010244:	080102c1 	.word	0x080102c1
 8010248:	080102c1 	.word	0x080102c1
 801024c:	080102c1 	.word	0x080102c1
 8010250:	080102c1 	.word	0x080102c1
 8010254:	080102c1 	.word	0x080102c1
 8010258:	080102c1 	.word	0x080102c1
 801025c:	080102c1 	.word	0x080102c1
 8010260:	080102c1 	.word	0x080102c1
 8010264:	080102c1 	.word	0x080102c1
 8010268:	080102c1 	.word	0x080102c1
 801026c:	080102c1 	.word	0x080102c1
 8010270:	080102c1 	.word	0x080102c1
 8010274:	080102c1 	.word	0x080102c1
 8010278:	080102c1 	.word	0x080102c1
 801027c:	080102c1 	.word	0x080102c1
 8010280:	080102c1 	.word	0x080102c1
 8010284:	080102c1 	.word	0x080102c1
 8010288:	080102c1 	.word	0x080102c1
 801028c:	080102c1 	.word	0x080102c1
 8010290:	080102c1 	.word	0x080102c1
 8010294:	080102c1 	.word	0x080102c1
 8010298:	080102c1 	.word	0x080102c1
 801029c:	080102c1 	.word	0x080102c1
 80102a0:	080102c1 	.word	0x080102c1
 80102a4:	080102c1 	.word	0x080102c1
 80102a8:	080102c1 	.word	0x080102c1
 80102ac:	080102c1 	.word	0x080102c1
 80102b0:	080102c1 	.word	0x080102c1
 80102b4:	080102c1 	.word	0x080102c1
 80102b8:	080102c1 	.word	0x080102c1
 80102bc:	080102c1 	.word	0x080102c1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80102c0:	bf00      	nop
  }

  return (USBD_OK);
 80102c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80102c4:	4618      	mov	r0, r3
 80102c6:	370c      	adds	r7, #12
 80102c8:	46bd      	mov	sp, r7
 80102ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ce:	4770      	bx	lr

080102d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80102d0:	b580      	push	{r7, lr}
 80102d2:	b082      	sub	sp, #8
 80102d4:	af00      	add	r7, sp, #0
 80102d6:	6078      	str	r0, [r7, #4]
 80102d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	return impl_CDC_Receive_FS(Buf, Len);
 80102da:	6839      	ldr	r1, [r7, #0]
 80102dc:	6878      	ldr	r0, [r7, #4]
 80102de:	f004 fd55 	bl	8014d8c <impl_CDC_Receive_FS>
 80102e2:	4603      	mov	r3, r0

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
  return (USBD_OK);
  /* USER CODE END 6 */
}
 80102e4:	4618      	mov	r0, r3
 80102e6:	3708      	adds	r7, #8
 80102e8:	46bd      	mov	sp, r7
 80102ea:	bd80      	pop	{r7, pc}

080102ec <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80102ec:	b580      	push	{r7, lr}
 80102ee:	b084      	sub	sp, #16
 80102f0:	af00      	add	r7, sp, #0
 80102f2:	6078      	str	r0, [r7, #4]
 80102f4:	460b      	mov	r3, r1
 80102f6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80102f8:	2300      	movs	r3, #0
 80102fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80102fc:	4b0d      	ldr	r3, [pc, #52]	; (8010334 <CDC_Transmit_FS+0x48>)
 80102fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010302:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8010304:	68bb      	ldr	r3, [r7, #8]
 8010306:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801030a:	2b00      	cmp	r3, #0
 801030c:	d001      	beq.n	8010312 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801030e:	2301      	movs	r3, #1
 8010310:	e00b      	b.n	801032a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8010312:	887b      	ldrh	r3, [r7, #2]
 8010314:	461a      	mov	r2, r3
 8010316:	6879      	ldr	r1, [r7, #4]
 8010318:	4806      	ldr	r0, [pc, #24]	; (8010334 <CDC_Transmit_FS+0x48>)
 801031a:	f7fb fbe6 	bl	800baea <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801031e:	4805      	ldr	r0, [pc, #20]	; (8010334 <CDC_Transmit_FS+0x48>)
 8010320:	f7fb fc10 	bl	800bb44 <USBD_CDC_TransmitPacket>
 8010324:	4603      	mov	r3, r0
 8010326:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8010328:	7bfb      	ldrb	r3, [r7, #15]
}
 801032a:	4618      	mov	r0, r3
 801032c:	3710      	adds	r7, #16
 801032e:	46bd      	mov	sp, r7
 8010330:	bd80      	pop	{r7, pc}
 8010332:	bf00      	nop
 8010334:	20007230 	.word	0x20007230

08010338 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010338:	b480      	push	{r7}
 801033a:	b087      	sub	sp, #28
 801033c:	af00      	add	r7, sp, #0
 801033e:	60f8      	str	r0, [r7, #12]
 8010340:	60b9      	str	r1, [r7, #8]
 8010342:	4613      	mov	r3, r2
 8010344:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010346:	2300      	movs	r3, #0
 8010348:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801034a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801034e:	4618      	mov	r0, r3
 8010350:	371c      	adds	r7, #28
 8010352:	46bd      	mov	sp, r7
 8010354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010358:	4770      	bx	lr
	...

0801035c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801035c:	b480      	push	{r7}
 801035e:	b083      	sub	sp, #12
 8010360:	af00      	add	r7, sp, #0
 8010362:	4603      	mov	r3, r0
 8010364:	6039      	str	r1, [r7, #0]
 8010366:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010368:	683b      	ldr	r3, [r7, #0]
 801036a:	2212      	movs	r2, #18
 801036c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801036e:	4b03      	ldr	r3, [pc, #12]	; (801037c <USBD_FS_DeviceDescriptor+0x20>)
}
 8010370:	4618      	mov	r0, r3
 8010372:	370c      	adds	r7, #12
 8010374:	46bd      	mov	sp, r7
 8010376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801037a:	4770      	bx	lr
 801037c:	20000160 	.word	0x20000160

08010380 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010380:	b480      	push	{r7}
 8010382:	b083      	sub	sp, #12
 8010384:	af00      	add	r7, sp, #0
 8010386:	4603      	mov	r3, r0
 8010388:	6039      	str	r1, [r7, #0]
 801038a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801038c:	683b      	ldr	r3, [r7, #0]
 801038e:	2204      	movs	r2, #4
 8010390:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010392:	4b03      	ldr	r3, [pc, #12]	; (80103a0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010394:	4618      	mov	r0, r3
 8010396:	370c      	adds	r7, #12
 8010398:	46bd      	mov	sp, r7
 801039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801039e:	4770      	bx	lr
 80103a0:	20000174 	.word	0x20000174

080103a4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80103a4:	b580      	push	{r7, lr}
 80103a6:	b082      	sub	sp, #8
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	4603      	mov	r3, r0
 80103ac:	6039      	str	r1, [r7, #0]
 80103ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80103b0:	79fb      	ldrb	r3, [r7, #7]
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d105      	bne.n	80103c2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80103b6:	683a      	ldr	r2, [r7, #0]
 80103b8:	4907      	ldr	r1, [pc, #28]	; (80103d8 <USBD_FS_ProductStrDescriptor+0x34>)
 80103ba:	4808      	ldr	r0, [pc, #32]	; (80103dc <USBD_FS_ProductStrDescriptor+0x38>)
 80103bc:	f7fc fc41 	bl	800cc42 <USBD_GetString>
 80103c0:	e004      	b.n	80103cc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80103c2:	683a      	ldr	r2, [r7, #0]
 80103c4:	4904      	ldr	r1, [pc, #16]	; (80103d8 <USBD_FS_ProductStrDescriptor+0x34>)
 80103c6:	4805      	ldr	r0, [pc, #20]	; (80103dc <USBD_FS_ProductStrDescriptor+0x38>)
 80103c8:	f7fc fc3b 	bl	800cc42 <USBD_GetString>
  }
  return USBD_StrDesc;
 80103cc:	4b02      	ldr	r3, [pc, #8]	; (80103d8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80103ce:	4618      	mov	r0, r3
 80103d0:	3708      	adds	r7, #8
 80103d2:	46bd      	mov	sp, r7
 80103d4:	bd80      	pop	{r7, pc}
 80103d6:	bf00      	nop
 80103d8:	20008500 	.word	0x20008500
 80103dc:	08015f30 	.word	0x08015f30

080103e0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80103e0:	b580      	push	{r7, lr}
 80103e2:	b082      	sub	sp, #8
 80103e4:	af00      	add	r7, sp, #0
 80103e6:	4603      	mov	r3, r0
 80103e8:	6039      	str	r1, [r7, #0]
 80103ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80103ec:	683a      	ldr	r2, [r7, #0]
 80103ee:	4904      	ldr	r1, [pc, #16]	; (8010400 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80103f0:	4804      	ldr	r0, [pc, #16]	; (8010404 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80103f2:	f7fc fc26 	bl	800cc42 <USBD_GetString>
  return USBD_StrDesc;
 80103f6:	4b02      	ldr	r3, [pc, #8]	; (8010400 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80103f8:	4618      	mov	r0, r3
 80103fa:	3708      	adds	r7, #8
 80103fc:	46bd      	mov	sp, r7
 80103fe:	bd80      	pop	{r7, pc}
 8010400:	20008500 	.word	0x20008500
 8010404:	08015f48 	.word	0x08015f48

08010408 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010408:	b580      	push	{r7, lr}
 801040a:	b082      	sub	sp, #8
 801040c:	af00      	add	r7, sp, #0
 801040e:	4603      	mov	r3, r0
 8010410:	6039      	str	r1, [r7, #0]
 8010412:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010414:	683b      	ldr	r3, [r7, #0]
 8010416:	221a      	movs	r2, #26
 8010418:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801041a:	f000 f843 	bl	80104a4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801041e:	4b02      	ldr	r3, [pc, #8]	; (8010428 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010420:	4618      	mov	r0, r3
 8010422:	3708      	adds	r7, #8
 8010424:	46bd      	mov	sp, r7
 8010426:	bd80      	pop	{r7, pc}
 8010428:	20000178 	.word	0x20000178

0801042c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801042c:	b580      	push	{r7, lr}
 801042e:	b082      	sub	sp, #8
 8010430:	af00      	add	r7, sp, #0
 8010432:	4603      	mov	r3, r0
 8010434:	6039      	str	r1, [r7, #0]
 8010436:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010438:	79fb      	ldrb	r3, [r7, #7]
 801043a:	2b00      	cmp	r3, #0
 801043c:	d105      	bne.n	801044a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801043e:	683a      	ldr	r2, [r7, #0]
 8010440:	4907      	ldr	r1, [pc, #28]	; (8010460 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010442:	4808      	ldr	r0, [pc, #32]	; (8010464 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010444:	f7fc fbfd 	bl	800cc42 <USBD_GetString>
 8010448:	e004      	b.n	8010454 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801044a:	683a      	ldr	r2, [r7, #0]
 801044c:	4904      	ldr	r1, [pc, #16]	; (8010460 <USBD_FS_ConfigStrDescriptor+0x34>)
 801044e:	4805      	ldr	r0, [pc, #20]	; (8010464 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010450:	f7fc fbf7 	bl	800cc42 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010454:	4b02      	ldr	r3, [pc, #8]	; (8010460 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010456:	4618      	mov	r0, r3
 8010458:	3708      	adds	r7, #8
 801045a:	46bd      	mov	sp, r7
 801045c:	bd80      	pop	{r7, pc}
 801045e:	bf00      	nop
 8010460:	20008500 	.word	0x20008500
 8010464:	08015f5c 	.word	0x08015f5c

08010468 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010468:	b580      	push	{r7, lr}
 801046a:	b082      	sub	sp, #8
 801046c:	af00      	add	r7, sp, #0
 801046e:	4603      	mov	r3, r0
 8010470:	6039      	str	r1, [r7, #0]
 8010472:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010474:	79fb      	ldrb	r3, [r7, #7]
 8010476:	2b00      	cmp	r3, #0
 8010478:	d105      	bne.n	8010486 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801047a:	683a      	ldr	r2, [r7, #0]
 801047c:	4907      	ldr	r1, [pc, #28]	; (801049c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801047e:	4808      	ldr	r0, [pc, #32]	; (80104a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010480:	f7fc fbdf 	bl	800cc42 <USBD_GetString>
 8010484:	e004      	b.n	8010490 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010486:	683a      	ldr	r2, [r7, #0]
 8010488:	4904      	ldr	r1, [pc, #16]	; (801049c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801048a:	4805      	ldr	r0, [pc, #20]	; (80104a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801048c:	f7fc fbd9 	bl	800cc42 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010490:	4b02      	ldr	r3, [pc, #8]	; (801049c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010492:	4618      	mov	r0, r3
 8010494:	3708      	adds	r7, #8
 8010496:	46bd      	mov	sp, r7
 8010498:	bd80      	pop	{r7, pc}
 801049a:	bf00      	nop
 801049c:	20008500 	.word	0x20008500
 80104a0:	08015f68 	.word	0x08015f68

080104a4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80104a4:	b580      	push	{r7, lr}
 80104a6:	b084      	sub	sp, #16
 80104a8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80104aa:	4b0f      	ldr	r3, [pc, #60]	; (80104e8 <Get_SerialNum+0x44>)
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80104b0:	4b0e      	ldr	r3, [pc, #56]	; (80104ec <Get_SerialNum+0x48>)
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80104b6:	4b0e      	ldr	r3, [pc, #56]	; (80104f0 <Get_SerialNum+0x4c>)
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80104bc:	68fa      	ldr	r2, [r7, #12]
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	4413      	add	r3, r2
 80104c2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d009      	beq.n	80104de <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80104ca:	2208      	movs	r2, #8
 80104cc:	4909      	ldr	r1, [pc, #36]	; (80104f4 <Get_SerialNum+0x50>)
 80104ce:	68f8      	ldr	r0, [r7, #12]
 80104d0:	f000 f814 	bl	80104fc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80104d4:	2204      	movs	r2, #4
 80104d6:	4908      	ldr	r1, [pc, #32]	; (80104f8 <Get_SerialNum+0x54>)
 80104d8:	68b8      	ldr	r0, [r7, #8]
 80104da:	f000 f80f 	bl	80104fc <IntToUnicode>
  }
}
 80104de:	bf00      	nop
 80104e0:	3710      	adds	r7, #16
 80104e2:	46bd      	mov	sp, r7
 80104e4:	bd80      	pop	{r7, pc}
 80104e6:	bf00      	nop
 80104e8:	1fff7a10 	.word	0x1fff7a10
 80104ec:	1fff7a14 	.word	0x1fff7a14
 80104f0:	1fff7a18 	.word	0x1fff7a18
 80104f4:	2000017a 	.word	0x2000017a
 80104f8:	2000018a 	.word	0x2000018a

080104fc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80104fc:	b480      	push	{r7}
 80104fe:	b087      	sub	sp, #28
 8010500:	af00      	add	r7, sp, #0
 8010502:	60f8      	str	r0, [r7, #12]
 8010504:	60b9      	str	r1, [r7, #8]
 8010506:	4613      	mov	r3, r2
 8010508:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801050a:	2300      	movs	r3, #0
 801050c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801050e:	2300      	movs	r3, #0
 8010510:	75fb      	strb	r3, [r7, #23]
 8010512:	e027      	b.n	8010564 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	0f1b      	lsrs	r3, r3, #28
 8010518:	2b09      	cmp	r3, #9
 801051a:	d80b      	bhi.n	8010534 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	0f1b      	lsrs	r3, r3, #28
 8010520:	b2da      	uxtb	r2, r3
 8010522:	7dfb      	ldrb	r3, [r7, #23]
 8010524:	005b      	lsls	r3, r3, #1
 8010526:	4619      	mov	r1, r3
 8010528:	68bb      	ldr	r3, [r7, #8]
 801052a:	440b      	add	r3, r1
 801052c:	3230      	adds	r2, #48	; 0x30
 801052e:	b2d2      	uxtb	r2, r2
 8010530:	701a      	strb	r2, [r3, #0]
 8010532:	e00a      	b.n	801054a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	0f1b      	lsrs	r3, r3, #28
 8010538:	b2da      	uxtb	r2, r3
 801053a:	7dfb      	ldrb	r3, [r7, #23]
 801053c:	005b      	lsls	r3, r3, #1
 801053e:	4619      	mov	r1, r3
 8010540:	68bb      	ldr	r3, [r7, #8]
 8010542:	440b      	add	r3, r1
 8010544:	3237      	adds	r2, #55	; 0x37
 8010546:	b2d2      	uxtb	r2, r2
 8010548:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	011b      	lsls	r3, r3, #4
 801054e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010550:	7dfb      	ldrb	r3, [r7, #23]
 8010552:	005b      	lsls	r3, r3, #1
 8010554:	3301      	adds	r3, #1
 8010556:	68ba      	ldr	r2, [r7, #8]
 8010558:	4413      	add	r3, r2
 801055a:	2200      	movs	r2, #0
 801055c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801055e:	7dfb      	ldrb	r3, [r7, #23]
 8010560:	3301      	adds	r3, #1
 8010562:	75fb      	strb	r3, [r7, #23]
 8010564:	7dfa      	ldrb	r2, [r7, #23]
 8010566:	79fb      	ldrb	r3, [r7, #7]
 8010568:	429a      	cmp	r2, r3
 801056a:	d3d3      	bcc.n	8010514 <IntToUnicode+0x18>
  }
}
 801056c:	bf00      	nop
 801056e:	371c      	adds	r7, #28
 8010570:	46bd      	mov	sp, r7
 8010572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010576:	4770      	bx	lr

08010578 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010578:	b580      	push	{r7, lr}
 801057a:	b08a      	sub	sp, #40	; 0x28
 801057c:	af00      	add	r7, sp, #0
 801057e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010580:	f107 0314 	add.w	r3, r7, #20
 8010584:	2200      	movs	r2, #0
 8010586:	601a      	str	r2, [r3, #0]
 8010588:	605a      	str	r2, [r3, #4]
 801058a:	609a      	str	r2, [r3, #8]
 801058c:	60da      	str	r2, [r3, #12]
 801058e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010598:	d13a      	bne.n	8010610 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801059a:	2300      	movs	r3, #0
 801059c:	613b      	str	r3, [r7, #16]
 801059e:	4b1e      	ldr	r3, [pc, #120]	; (8010618 <HAL_PCD_MspInit+0xa0>)
 80105a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105a2:	4a1d      	ldr	r2, [pc, #116]	; (8010618 <HAL_PCD_MspInit+0xa0>)
 80105a4:	f043 0301 	orr.w	r3, r3, #1
 80105a8:	6313      	str	r3, [r2, #48]	; 0x30
 80105aa:	4b1b      	ldr	r3, [pc, #108]	; (8010618 <HAL_PCD_MspInit+0xa0>)
 80105ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105ae:	f003 0301 	and.w	r3, r3, #1
 80105b2:	613b      	str	r3, [r7, #16]
 80105b4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80105b6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80105ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80105bc:	2302      	movs	r3, #2
 80105be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80105c0:	2300      	movs	r3, #0
 80105c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80105c4:	2303      	movs	r3, #3
 80105c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80105c8:	230a      	movs	r3, #10
 80105ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80105cc:	f107 0314 	add.w	r3, r7, #20
 80105d0:	4619      	mov	r1, r3
 80105d2:	4812      	ldr	r0, [pc, #72]	; (801061c <HAL_PCD_MspInit+0xa4>)
 80105d4:	f7f3 f808 	bl	80035e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80105d8:	4b0f      	ldr	r3, [pc, #60]	; (8010618 <HAL_PCD_MspInit+0xa0>)
 80105da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80105dc:	4a0e      	ldr	r2, [pc, #56]	; (8010618 <HAL_PCD_MspInit+0xa0>)
 80105de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80105e2:	6353      	str	r3, [r2, #52]	; 0x34
 80105e4:	2300      	movs	r3, #0
 80105e6:	60fb      	str	r3, [r7, #12]
 80105e8:	4b0b      	ldr	r3, [pc, #44]	; (8010618 <HAL_PCD_MspInit+0xa0>)
 80105ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80105ec:	4a0a      	ldr	r2, [pc, #40]	; (8010618 <HAL_PCD_MspInit+0xa0>)
 80105ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80105f2:	6453      	str	r3, [r2, #68]	; 0x44
 80105f4:	4b08      	ldr	r3, [pc, #32]	; (8010618 <HAL_PCD_MspInit+0xa0>)
 80105f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80105f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80105fc:	60fb      	str	r3, [r7, #12]
 80105fe:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8010600:	2200      	movs	r2, #0
 8010602:	2105      	movs	r1, #5
 8010604:	2043      	movs	r0, #67	; 0x43
 8010606:	f7f2 fc27 	bl	8002e58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801060a:	2043      	movs	r0, #67	; 0x43
 801060c:	f7f2 fc40 	bl	8002e90 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010610:	bf00      	nop
 8010612:	3728      	adds	r7, #40	; 0x28
 8010614:	46bd      	mov	sp, r7
 8010616:	bd80      	pop	{r7, pc}
 8010618:	40023800 	.word	0x40023800
 801061c:	40020000 	.word	0x40020000

08010620 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010620:	b580      	push	{r7, lr}
 8010622:	b082      	sub	sp, #8
 8010624:	af00      	add	r7, sp, #0
 8010626:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8010634:	4619      	mov	r1, r3
 8010636:	4610      	mov	r0, r2
 8010638:	f7fb fb80 	bl	800bd3c <USBD_LL_SetupStage>
}
 801063c:	bf00      	nop
 801063e:	3708      	adds	r7, #8
 8010640:	46bd      	mov	sp, r7
 8010642:	bd80      	pop	{r7, pc}

08010644 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010644:	b580      	push	{r7, lr}
 8010646:	b082      	sub	sp, #8
 8010648:	af00      	add	r7, sp, #0
 801064a:	6078      	str	r0, [r7, #4]
 801064c:	460b      	mov	r3, r1
 801064e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8010656:	78fa      	ldrb	r2, [r7, #3]
 8010658:	6879      	ldr	r1, [r7, #4]
 801065a:	4613      	mov	r3, r2
 801065c:	00db      	lsls	r3, r3, #3
 801065e:	1a9b      	subs	r3, r3, r2
 8010660:	009b      	lsls	r3, r3, #2
 8010662:	440b      	add	r3, r1
 8010664:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8010668:	681a      	ldr	r2, [r3, #0]
 801066a:	78fb      	ldrb	r3, [r7, #3]
 801066c:	4619      	mov	r1, r3
 801066e:	f7fb fbb8 	bl	800bde2 <USBD_LL_DataOutStage>
}
 8010672:	bf00      	nop
 8010674:	3708      	adds	r7, #8
 8010676:	46bd      	mov	sp, r7
 8010678:	bd80      	pop	{r7, pc}

0801067a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801067a:	b580      	push	{r7, lr}
 801067c:	b082      	sub	sp, #8
 801067e:	af00      	add	r7, sp, #0
 8010680:	6078      	str	r0, [r7, #4]
 8010682:	460b      	mov	r3, r1
 8010684:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801068c:	78fa      	ldrb	r2, [r7, #3]
 801068e:	6879      	ldr	r1, [r7, #4]
 8010690:	4613      	mov	r3, r2
 8010692:	00db      	lsls	r3, r3, #3
 8010694:	1a9b      	subs	r3, r3, r2
 8010696:	009b      	lsls	r3, r3, #2
 8010698:	440b      	add	r3, r1
 801069a:	3348      	adds	r3, #72	; 0x48
 801069c:	681a      	ldr	r2, [r3, #0]
 801069e:	78fb      	ldrb	r3, [r7, #3]
 80106a0:	4619      	mov	r1, r3
 80106a2:	f7fb fc01 	bl	800bea8 <USBD_LL_DataInStage>
}
 80106a6:	bf00      	nop
 80106a8:	3708      	adds	r7, #8
 80106aa:	46bd      	mov	sp, r7
 80106ac:	bd80      	pop	{r7, pc}

080106ae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80106ae:	b580      	push	{r7, lr}
 80106b0:	b082      	sub	sp, #8
 80106b2:	af00      	add	r7, sp, #0
 80106b4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80106bc:	4618      	mov	r0, r3
 80106be:	f7fb fd05 	bl	800c0cc <USBD_LL_SOF>
}
 80106c2:	bf00      	nop
 80106c4:	3708      	adds	r7, #8
 80106c6:	46bd      	mov	sp, r7
 80106c8:	bd80      	pop	{r7, pc}

080106ca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80106ca:	b580      	push	{r7, lr}
 80106cc:	b084      	sub	sp, #16
 80106ce:	af00      	add	r7, sp, #0
 80106d0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80106d2:	2301      	movs	r3, #1
 80106d4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	68db      	ldr	r3, [r3, #12]
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d102      	bne.n	80106e4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80106de:	2300      	movs	r3, #0
 80106e0:	73fb      	strb	r3, [r7, #15]
 80106e2:	e008      	b.n	80106f6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	68db      	ldr	r3, [r3, #12]
 80106e8:	2b02      	cmp	r3, #2
 80106ea:	d102      	bne.n	80106f2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80106ec:	2301      	movs	r3, #1
 80106ee:	73fb      	strb	r3, [r7, #15]
 80106f0:	e001      	b.n	80106f6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80106f2:	f7f1 f9c3 	bl	8001a7c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80106fc:	7bfa      	ldrb	r2, [r7, #15]
 80106fe:	4611      	mov	r1, r2
 8010700:	4618      	mov	r0, r3
 8010702:	f7fb fca8 	bl	800c056 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801070c:	4618      	mov	r0, r3
 801070e:	f7fb fc61 	bl	800bfd4 <USBD_LL_Reset>
}
 8010712:	bf00      	nop
 8010714:	3710      	adds	r7, #16
 8010716:	46bd      	mov	sp, r7
 8010718:	bd80      	pop	{r7, pc}
	...

0801071c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801071c:	b580      	push	{r7, lr}
 801071e:	b082      	sub	sp, #8
 8010720:	af00      	add	r7, sp, #0
 8010722:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801072a:	4618      	mov	r0, r3
 801072c:	f7fb fca3 	bl	800c076 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	687a      	ldr	r2, [r7, #4]
 801073c:	6812      	ldr	r2, [r2, #0]
 801073e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010742:	f043 0301 	orr.w	r3, r3, #1
 8010746:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	6a1b      	ldr	r3, [r3, #32]
 801074c:	2b00      	cmp	r3, #0
 801074e:	d005      	beq.n	801075c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010750:	4b04      	ldr	r3, [pc, #16]	; (8010764 <HAL_PCD_SuspendCallback+0x48>)
 8010752:	691b      	ldr	r3, [r3, #16]
 8010754:	4a03      	ldr	r2, [pc, #12]	; (8010764 <HAL_PCD_SuspendCallback+0x48>)
 8010756:	f043 0306 	orr.w	r3, r3, #6
 801075a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801075c:	bf00      	nop
 801075e:	3708      	adds	r7, #8
 8010760:	46bd      	mov	sp, r7
 8010762:	bd80      	pop	{r7, pc}
 8010764:	e000ed00 	.word	0xe000ed00

08010768 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010768:	b580      	push	{r7, lr}
 801076a:	b082      	sub	sp, #8
 801076c:	af00      	add	r7, sp, #0
 801076e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010776:	4618      	mov	r0, r3
 8010778:	f7fb fc92 	bl	800c0a0 <USBD_LL_Resume>
}
 801077c:	bf00      	nop
 801077e:	3708      	adds	r7, #8
 8010780:	46bd      	mov	sp, r7
 8010782:	bd80      	pop	{r7, pc}

08010784 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010784:	b580      	push	{r7, lr}
 8010786:	b082      	sub	sp, #8
 8010788:	af00      	add	r7, sp, #0
 801078a:	6078      	str	r0, [r7, #4]
 801078c:	460b      	mov	r3, r1
 801078e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010796:	78fa      	ldrb	r2, [r7, #3]
 8010798:	4611      	mov	r1, r2
 801079a:	4618      	mov	r0, r3
 801079c:	f7fb fcbd 	bl	800c11a <USBD_LL_IsoOUTIncomplete>
}
 80107a0:	bf00      	nop
 80107a2:	3708      	adds	r7, #8
 80107a4:	46bd      	mov	sp, r7
 80107a6:	bd80      	pop	{r7, pc}

080107a8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80107a8:	b580      	push	{r7, lr}
 80107aa:	b082      	sub	sp, #8
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	6078      	str	r0, [r7, #4]
 80107b0:	460b      	mov	r3, r1
 80107b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80107ba:	78fa      	ldrb	r2, [r7, #3]
 80107bc:	4611      	mov	r1, r2
 80107be:	4618      	mov	r0, r3
 80107c0:	f7fb fc9e 	bl	800c100 <USBD_LL_IsoINIncomplete>
}
 80107c4:	bf00      	nop
 80107c6:	3708      	adds	r7, #8
 80107c8:	46bd      	mov	sp, r7
 80107ca:	bd80      	pop	{r7, pc}

080107cc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80107cc:	b580      	push	{r7, lr}
 80107ce:	b082      	sub	sp, #8
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80107da:	4618      	mov	r0, r3
 80107dc:	f7fb fcaa 	bl	800c134 <USBD_LL_DevConnected>
}
 80107e0:	bf00      	nop
 80107e2:	3708      	adds	r7, #8
 80107e4:	46bd      	mov	sp, r7
 80107e6:	bd80      	pop	{r7, pc}

080107e8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80107e8:	b580      	push	{r7, lr}
 80107ea:	b082      	sub	sp, #8
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80107f6:	4618      	mov	r0, r3
 80107f8:	f7fb fca7 	bl	800c14a <USBD_LL_DevDisconnected>
}
 80107fc:	bf00      	nop
 80107fe:	3708      	adds	r7, #8
 8010800:	46bd      	mov	sp, r7
 8010802:	bd80      	pop	{r7, pc}

08010804 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010804:	b580      	push	{r7, lr}
 8010806:	b082      	sub	sp, #8
 8010808:	af00      	add	r7, sp, #0
 801080a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	781b      	ldrb	r3, [r3, #0]
 8010810:	2b00      	cmp	r3, #0
 8010812:	d13c      	bne.n	801088e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010814:	4a20      	ldr	r2, [pc, #128]	; (8010898 <USBD_LL_Init+0x94>)
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	4a1e      	ldr	r2, [pc, #120]	; (8010898 <USBD_LL_Init+0x94>)
 8010820:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010824:	4b1c      	ldr	r3, [pc, #112]	; (8010898 <USBD_LL_Init+0x94>)
 8010826:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801082a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801082c:	4b1a      	ldr	r3, [pc, #104]	; (8010898 <USBD_LL_Init+0x94>)
 801082e:	2204      	movs	r2, #4
 8010830:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010832:	4b19      	ldr	r3, [pc, #100]	; (8010898 <USBD_LL_Init+0x94>)
 8010834:	2202      	movs	r2, #2
 8010836:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010838:	4b17      	ldr	r3, [pc, #92]	; (8010898 <USBD_LL_Init+0x94>)
 801083a:	2200      	movs	r2, #0
 801083c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801083e:	4b16      	ldr	r3, [pc, #88]	; (8010898 <USBD_LL_Init+0x94>)
 8010840:	2202      	movs	r2, #2
 8010842:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010844:	4b14      	ldr	r3, [pc, #80]	; (8010898 <USBD_LL_Init+0x94>)
 8010846:	2200      	movs	r2, #0
 8010848:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801084a:	4b13      	ldr	r3, [pc, #76]	; (8010898 <USBD_LL_Init+0x94>)
 801084c:	2200      	movs	r2, #0
 801084e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010850:	4b11      	ldr	r3, [pc, #68]	; (8010898 <USBD_LL_Init+0x94>)
 8010852:	2200      	movs	r2, #0
 8010854:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8010856:	4b10      	ldr	r3, [pc, #64]	; (8010898 <USBD_LL_Init+0x94>)
 8010858:	2200      	movs	r2, #0
 801085a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801085c:	4b0e      	ldr	r3, [pc, #56]	; (8010898 <USBD_LL_Init+0x94>)
 801085e:	2200      	movs	r2, #0
 8010860:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010862:	480d      	ldr	r0, [pc, #52]	; (8010898 <USBD_LL_Init+0x94>)
 8010864:	f7f5 fac0 	bl	8005de8 <HAL_PCD_Init>
 8010868:	4603      	mov	r3, r0
 801086a:	2b00      	cmp	r3, #0
 801086c:	d001      	beq.n	8010872 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801086e:	f7f1 f905 	bl	8001a7c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8010872:	2180      	movs	r1, #128	; 0x80
 8010874:	4808      	ldr	r0, [pc, #32]	; (8010898 <USBD_LL_Init+0x94>)
 8010876:	f7f6 fc1e 	bl	80070b6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801087a:	2240      	movs	r2, #64	; 0x40
 801087c:	2100      	movs	r1, #0
 801087e:	4806      	ldr	r0, [pc, #24]	; (8010898 <USBD_LL_Init+0x94>)
 8010880:	f7f6 fbd2 	bl	8007028 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010884:	2280      	movs	r2, #128	; 0x80
 8010886:	2101      	movs	r1, #1
 8010888:	4803      	ldr	r0, [pc, #12]	; (8010898 <USBD_LL_Init+0x94>)
 801088a:	f7f6 fbcd 	bl	8007028 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801088e:	2300      	movs	r3, #0
}
 8010890:	4618      	mov	r0, r3
 8010892:	3708      	adds	r7, #8
 8010894:	46bd      	mov	sp, r7
 8010896:	bd80      	pop	{r7, pc}
 8010898:	20008700 	.word	0x20008700

0801089c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801089c:	b580      	push	{r7, lr}
 801089e:	b084      	sub	sp, #16
 80108a0:	af00      	add	r7, sp, #0
 80108a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80108a4:	2300      	movs	r3, #0
 80108a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80108a8:	2300      	movs	r3, #0
 80108aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80108b2:	4618      	mov	r0, r3
 80108b4:	f7f5 fbb5 	bl	8006022 <HAL_PCD_Start>
 80108b8:	4603      	mov	r3, r0
 80108ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80108bc:	7bfb      	ldrb	r3, [r7, #15]
 80108be:	4618      	mov	r0, r3
 80108c0:	f000 f92a 	bl	8010b18 <USBD_Get_USB_Status>
 80108c4:	4603      	mov	r3, r0
 80108c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80108c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80108ca:	4618      	mov	r0, r3
 80108cc:	3710      	adds	r7, #16
 80108ce:	46bd      	mov	sp, r7
 80108d0:	bd80      	pop	{r7, pc}

080108d2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80108d2:	b580      	push	{r7, lr}
 80108d4:	b084      	sub	sp, #16
 80108d6:	af00      	add	r7, sp, #0
 80108d8:	6078      	str	r0, [r7, #4]
 80108da:	4608      	mov	r0, r1
 80108dc:	4611      	mov	r1, r2
 80108de:	461a      	mov	r2, r3
 80108e0:	4603      	mov	r3, r0
 80108e2:	70fb      	strb	r3, [r7, #3]
 80108e4:	460b      	mov	r3, r1
 80108e6:	70bb      	strb	r3, [r7, #2]
 80108e8:	4613      	mov	r3, r2
 80108ea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80108ec:	2300      	movs	r3, #0
 80108ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80108f0:	2300      	movs	r3, #0
 80108f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80108fa:	78bb      	ldrb	r3, [r7, #2]
 80108fc:	883a      	ldrh	r2, [r7, #0]
 80108fe:	78f9      	ldrb	r1, [r7, #3]
 8010900:	f7f5 ff99 	bl	8006836 <HAL_PCD_EP_Open>
 8010904:	4603      	mov	r3, r0
 8010906:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010908:	7bfb      	ldrb	r3, [r7, #15]
 801090a:	4618      	mov	r0, r3
 801090c:	f000 f904 	bl	8010b18 <USBD_Get_USB_Status>
 8010910:	4603      	mov	r3, r0
 8010912:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010914:	7bbb      	ldrb	r3, [r7, #14]
}
 8010916:	4618      	mov	r0, r3
 8010918:	3710      	adds	r7, #16
 801091a:	46bd      	mov	sp, r7
 801091c:	bd80      	pop	{r7, pc}

0801091e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801091e:	b580      	push	{r7, lr}
 8010920:	b084      	sub	sp, #16
 8010922:	af00      	add	r7, sp, #0
 8010924:	6078      	str	r0, [r7, #4]
 8010926:	460b      	mov	r3, r1
 8010928:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801092a:	2300      	movs	r3, #0
 801092c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801092e:	2300      	movs	r3, #0
 8010930:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010938:	78fa      	ldrb	r2, [r7, #3]
 801093a:	4611      	mov	r1, r2
 801093c:	4618      	mov	r0, r3
 801093e:	f7f5 ffe2 	bl	8006906 <HAL_PCD_EP_Close>
 8010942:	4603      	mov	r3, r0
 8010944:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010946:	7bfb      	ldrb	r3, [r7, #15]
 8010948:	4618      	mov	r0, r3
 801094a:	f000 f8e5 	bl	8010b18 <USBD_Get_USB_Status>
 801094e:	4603      	mov	r3, r0
 8010950:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010952:	7bbb      	ldrb	r3, [r7, #14]
}
 8010954:	4618      	mov	r0, r3
 8010956:	3710      	adds	r7, #16
 8010958:	46bd      	mov	sp, r7
 801095a:	bd80      	pop	{r7, pc}

0801095c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801095c:	b580      	push	{r7, lr}
 801095e:	b084      	sub	sp, #16
 8010960:	af00      	add	r7, sp, #0
 8010962:	6078      	str	r0, [r7, #4]
 8010964:	460b      	mov	r3, r1
 8010966:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010968:	2300      	movs	r3, #0
 801096a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801096c:	2300      	movs	r3, #0
 801096e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010976:	78fa      	ldrb	r2, [r7, #3]
 8010978:	4611      	mov	r1, r2
 801097a:	4618      	mov	r0, r3
 801097c:	f7f6 f8ba 	bl	8006af4 <HAL_PCD_EP_SetStall>
 8010980:	4603      	mov	r3, r0
 8010982:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010984:	7bfb      	ldrb	r3, [r7, #15]
 8010986:	4618      	mov	r0, r3
 8010988:	f000 f8c6 	bl	8010b18 <USBD_Get_USB_Status>
 801098c:	4603      	mov	r3, r0
 801098e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010990:	7bbb      	ldrb	r3, [r7, #14]
}
 8010992:	4618      	mov	r0, r3
 8010994:	3710      	adds	r7, #16
 8010996:	46bd      	mov	sp, r7
 8010998:	bd80      	pop	{r7, pc}

0801099a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801099a:	b580      	push	{r7, lr}
 801099c:	b084      	sub	sp, #16
 801099e:	af00      	add	r7, sp, #0
 80109a0:	6078      	str	r0, [r7, #4]
 80109a2:	460b      	mov	r3, r1
 80109a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80109a6:	2300      	movs	r3, #0
 80109a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80109aa:	2300      	movs	r3, #0
 80109ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80109b4:	78fa      	ldrb	r2, [r7, #3]
 80109b6:	4611      	mov	r1, r2
 80109b8:	4618      	mov	r0, r3
 80109ba:	f7f6 f8ff 	bl	8006bbc <HAL_PCD_EP_ClrStall>
 80109be:	4603      	mov	r3, r0
 80109c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80109c2:	7bfb      	ldrb	r3, [r7, #15]
 80109c4:	4618      	mov	r0, r3
 80109c6:	f000 f8a7 	bl	8010b18 <USBD_Get_USB_Status>
 80109ca:	4603      	mov	r3, r0
 80109cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80109ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80109d0:	4618      	mov	r0, r3
 80109d2:	3710      	adds	r7, #16
 80109d4:	46bd      	mov	sp, r7
 80109d6:	bd80      	pop	{r7, pc}

080109d8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80109d8:	b480      	push	{r7}
 80109da:	b085      	sub	sp, #20
 80109dc:	af00      	add	r7, sp, #0
 80109de:	6078      	str	r0, [r7, #4]
 80109e0:	460b      	mov	r3, r1
 80109e2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80109ea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80109ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	da0b      	bge.n	8010a0c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80109f4:	78fb      	ldrb	r3, [r7, #3]
 80109f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80109fa:	68f9      	ldr	r1, [r7, #12]
 80109fc:	4613      	mov	r3, r2
 80109fe:	00db      	lsls	r3, r3, #3
 8010a00:	1a9b      	subs	r3, r3, r2
 8010a02:	009b      	lsls	r3, r3, #2
 8010a04:	440b      	add	r3, r1
 8010a06:	333e      	adds	r3, #62	; 0x3e
 8010a08:	781b      	ldrb	r3, [r3, #0]
 8010a0a:	e00b      	b.n	8010a24 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010a0c:	78fb      	ldrb	r3, [r7, #3]
 8010a0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010a12:	68f9      	ldr	r1, [r7, #12]
 8010a14:	4613      	mov	r3, r2
 8010a16:	00db      	lsls	r3, r3, #3
 8010a18:	1a9b      	subs	r3, r3, r2
 8010a1a:	009b      	lsls	r3, r3, #2
 8010a1c:	440b      	add	r3, r1
 8010a1e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010a22:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010a24:	4618      	mov	r0, r3
 8010a26:	3714      	adds	r7, #20
 8010a28:	46bd      	mov	sp, r7
 8010a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a2e:	4770      	bx	lr

08010a30 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010a30:	b580      	push	{r7, lr}
 8010a32:	b084      	sub	sp, #16
 8010a34:	af00      	add	r7, sp, #0
 8010a36:	6078      	str	r0, [r7, #4]
 8010a38:	460b      	mov	r3, r1
 8010a3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010a3c:	2300      	movs	r3, #0
 8010a3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010a40:	2300      	movs	r3, #0
 8010a42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010a4a:	78fa      	ldrb	r2, [r7, #3]
 8010a4c:	4611      	mov	r1, r2
 8010a4e:	4618      	mov	r0, r3
 8010a50:	f7f5 fecc 	bl	80067ec <HAL_PCD_SetAddress>
 8010a54:	4603      	mov	r3, r0
 8010a56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010a58:	7bfb      	ldrb	r3, [r7, #15]
 8010a5a:	4618      	mov	r0, r3
 8010a5c:	f000 f85c 	bl	8010b18 <USBD_Get_USB_Status>
 8010a60:	4603      	mov	r3, r0
 8010a62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010a64:	7bbb      	ldrb	r3, [r7, #14]
}
 8010a66:	4618      	mov	r0, r3
 8010a68:	3710      	adds	r7, #16
 8010a6a:	46bd      	mov	sp, r7
 8010a6c:	bd80      	pop	{r7, pc}

08010a6e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010a6e:	b580      	push	{r7, lr}
 8010a70:	b086      	sub	sp, #24
 8010a72:	af00      	add	r7, sp, #0
 8010a74:	60f8      	str	r0, [r7, #12]
 8010a76:	607a      	str	r2, [r7, #4]
 8010a78:	603b      	str	r3, [r7, #0]
 8010a7a:	460b      	mov	r3, r1
 8010a7c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010a7e:	2300      	movs	r3, #0
 8010a80:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010a82:	2300      	movs	r3, #0
 8010a84:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010a8c:	7af9      	ldrb	r1, [r7, #11]
 8010a8e:	683b      	ldr	r3, [r7, #0]
 8010a90:	687a      	ldr	r2, [r7, #4]
 8010a92:	f7f5 ffe5 	bl	8006a60 <HAL_PCD_EP_Transmit>
 8010a96:	4603      	mov	r3, r0
 8010a98:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010a9a:	7dfb      	ldrb	r3, [r7, #23]
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	f000 f83b 	bl	8010b18 <USBD_Get_USB_Status>
 8010aa2:	4603      	mov	r3, r0
 8010aa4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010aa6:	7dbb      	ldrb	r3, [r7, #22]
}
 8010aa8:	4618      	mov	r0, r3
 8010aaa:	3718      	adds	r7, #24
 8010aac:	46bd      	mov	sp, r7
 8010aae:	bd80      	pop	{r7, pc}

08010ab0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010ab0:	b580      	push	{r7, lr}
 8010ab2:	b086      	sub	sp, #24
 8010ab4:	af00      	add	r7, sp, #0
 8010ab6:	60f8      	str	r0, [r7, #12]
 8010ab8:	607a      	str	r2, [r7, #4]
 8010aba:	603b      	str	r3, [r7, #0]
 8010abc:	460b      	mov	r3, r1
 8010abe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010ac0:	2300      	movs	r3, #0
 8010ac2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010ac4:	2300      	movs	r3, #0
 8010ac6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010ace:	7af9      	ldrb	r1, [r7, #11]
 8010ad0:	683b      	ldr	r3, [r7, #0]
 8010ad2:	687a      	ldr	r2, [r7, #4]
 8010ad4:	f7f5 ff61 	bl	800699a <HAL_PCD_EP_Receive>
 8010ad8:	4603      	mov	r3, r0
 8010ada:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010adc:	7dfb      	ldrb	r3, [r7, #23]
 8010ade:	4618      	mov	r0, r3
 8010ae0:	f000 f81a 	bl	8010b18 <USBD_Get_USB_Status>
 8010ae4:	4603      	mov	r3, r0
 8010ae6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010ae8:	7dbb      	ldrb	r3, [r7, #22]
}
 8010aea:	4618      	mov	r0, r3
 8010aec:	3718      	adds	r7, #24
 8010aee:	46bd      	mov	sp, r7
 8010af0:	bd80      	pop	{r7, pc}

08010af2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010af2:	b580      	push	{r7, lr}
 8010af4:	b082      	sub	sp, #8
 8010af6:	af00      	add	r7, sp, #0
 8010af8:	6078      	str	r0, [r7, #4]
 8010afa:	460b      	mov	r3, r1
 8010afc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010b04:	78fa      	ldrb	r2, [r7, #3]
 8010b06:	4611      	mov	r1, r2
 8010b08:	4618      	mov	r0, r3
 8010b0a:	f7f5 ff91 	bl	8006a30 <HAL_PCD_EP_GetRxCount>
 8010b0e:	4603      	mov	r3, r0
}
 8010b10:	4618      	mov	r0, r3
 8010b12:	3708      	adds	r7, #8
 8010b14:	46bd      	mov	sp, r7
 8010b16:	bd80      	pop	{r7, pc}

08010b18 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010b18:	b480      	push	{r7}
 8010b1a:	b085      	sub	sp, #20
 8010b1c:	af00      	add	r7, sp, #0
 8010b1e:	4603      	mov	r3, r0
 8010b20:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010b22:	2300      	movs	r3, #0
 8010b24:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010b26:	79fb      	ldrb	r3, [r7, #7]
 8010b28:	2b03      	cmp	r3, #3
 8010b2a:	d817      	bhi.n	8010b5c <USBD_Get_USB_Status+0x44>
 8010b2c:	a201      	add	r2, pc, #4	; (adr r2, 8010b34 <USBD_Get_USB_Status+0x1c>)
 8010b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b32:	bf00      	nop
 8010b34:	08010b45 	.word	0x08010b45
 8010b38:	08010b4b 	.word	0x08010b4b
 8010b3c:	08010b51 	.word	0x08010b51
 8010b40:	08010b57 	.word	0x08010b57
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010b44:	2300      	movs	r3, #0
 8010b46:	73fb      	strb	r3, [r7, #15]
    break;
 8010b48:	e00b      	b.n	8010b62 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010b4a:	2303      	movs	r3, #3
 8010b4c:	73fb      	strb	r3, [r7, #15]
    break;
 8010b4e:	e008      	b.n	8010b62 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010b50:	2301      	movs	r3, #1
 8010b52:	73fb      	strb	r3, [r7, #15]
    break;
 8010b54:	e005      	b.n	8010b62 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010b56:	2303      	movs	r3, #3
 8010b58:	73fb      	strb	r3, [r7, #15]
    break;
 8010b5a:	e002      	b.n	8010b62 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010b5c:	2303      	movs	r3, #3
 8010b5e:	73fb      	strb	r3, [r7, #15]
    break;
 8010b60:	bf00      	nop
  }
  return usb_status;
 8010b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b64:	4618      	mov	r0, r3
 8010b66:	3714      	adds	r7, #20
 8010b68:	46bd      	mov	sp, r7
 8010b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b6e:	4770      	bx	lr

08010b70 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8010b70:	b480      	push	{r7}
 8010b72:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8010b74:	bf00      	nop
 8010b76:	46bd      	mov	sp, r7
 8010b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b7c:	4770      	bx	lr
	...

08010b80 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8010b80:	b580      	push	{r7, lr}
 8010b82:	b086      	sub	sp, #24
 8010b84:	af04      	add	r7, sp, #16
 8010b86:	4603      	mov	r3, r0
 8010b88:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8010b8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010b8e:	9302      	str	r3, [sp, #8]
 8010b90:	2301      	movs	r3, #1
 8010b92:	9301      	str	r3, [sp, #4]
 8010b94:	1dfb      	adds	r3, r7, #7
 8010b96:	9300      	str	r3, [sp, #0]
 8010b98:	2301      	movs	r3, #1
 8010b9a:	2200      	movs	r2, #0
 8010b9c:	2178      	movs	r1, #120	; 0x78
 8010b9e:	4803      	ldr	r0, [pc, #12]	; (8010bac <ssd1306_WriteCommand+0x2c>)
 8010ba0:	f7f3 f828 	bl	8003bf4 <HAL_I2C_Mem_Write>
}
 8010ba4:	bf00      	nop
 8010ba6:	3708      	adds	r7, #8
 8010ba8:	46bd      	mov	sp, r7
 8010baa:	bd80      	pop	{r7, pc}
 8010bac:	20005ef0 	.word	0x20005ef0

08010bb0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8010bb0:	b580      	push	{r7, lr}
 8010bb2:	b086      	sub	sp, #24
 8010bb4:	af04      	add	r7, sp, #16
 8010bb6:	6078      	str	r0, [r7, #4]
 8010bb8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8010bba:	683b      	ldr	r3, [r7, #0]
 8010bbc:	b29b      	uxth	r3, r3
 8010bbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010bc2:	9202      	str	r2, [sp, #8]
 8010bc4:	9301      	str	r3, [sp, #4]
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	9300      	str	r3, [sp, #0]
 8010bca:	2301      	movs	r3, #1
 8010bcc:	2240      	movs	r2, #64	; 0x40
 8010bce:	2178      	movs	r1, #120	; 0x78
 8010bd0:	4803      	ldr	r0, [pc, #12]	; (8010be0 <ssd1306_WriteData+0x30>)
 8010bd2:	f7f3 f80f 	bl	8003bf4 <HAL_I2C_Mem_Write>
}
 8010bd6:	bf00      	nop
 8010bd8:	3708      	adds	r7, #8
 8010bda:	46bd      	mov	sp, r7
 8010bdc:	bd80      	pop	{r7, pc}
 8010bde:	bf00      	nop
 8010be0:	20005ef0 	.word	0x20005ef0

08010be4 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8010be4:	b580      	push	{r7, lr}
 8010be6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8010be8:	f7ff ffc2 	bl	8010b70 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8010bec:	2064      	movs	r0, #100	; 0x64
 8010bee:	f7f1 fc83 	bl	80024f8 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8010bf2:	2000      	movs	r0, #0
 8010bf4:	f000 f9e2 	bl	8010fbc <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8010bf8:	2020      	movs	r0, #32
 8010bfa:	f7ff ffc1 	bl	8010b80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8010bfe:	2000      	movs	r0, #0
 8010c00:	f7ff ffbe 	bl	8010b80 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8010c04:	20b0      	movs	r0, #176	; 0xb0
 8010c06:	f7ff ffbb 	bl	8010b80 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8010c0a:	20c8      	movs	r0, #200	; 0xc8
 8010c0c:	f7ff ffb8 	bl	8010b80 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8010c10:	2000      	movs	r0, #0
 8010c12:	f7ff ffb5 	bl	8010b80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8010c16:	2010      	movs	r0, #16
 8010c18:	f7ff ffb2 	bl	8010b80 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8010c1c:	2040      	movs	r0, #64	; 0x40
 8010c1e:	f7ff ffaf 	bl	8010b80 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8010c22:	20ff      	movs	r0, #255	; 0xff
 8010c24:	f000 f9b6 	bl	8010f94 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8010c28:	20a1      	movs	r0, #161	; 0xa1
 8010c2a:	f7ff ffa9 	bl	8010b80 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8010c2e:	20a6      	movs	r0, #166	; 0xa6
 8010c30:	f7ff ffa6 	bl	8010b80 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8010c34:	20a8      	movs	r0, #168	; 0xa8
 8010c36:	f7ff ffa3 	bl	8010b80 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 8010c3a:	201f      	movs	r0, #31
 8010c3c:	f7ff ffa0 	bl	8010b80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8010c40:	20a4      	movs	r0, #164	; 0xa4
 8010c42:	f7ff ff9d 	bl	8010b80 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8010c46:	20d3      	movs	r0, #211	; 0xd3
 8010c48:	f7ff ff9a 	bl	8010b80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8010c4c:	2000      	movs	r0, #0
 8010c4e:	f7ff ff97 	bl	8010b80 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8010c52:	20d5      	movs	r0, #213	; 0xd5
 8010c54:	f7ff ff94 	bl	8010b80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8010c58:	20f0      	movs	r0, #240	; 0xf0
 8010c5a:	f7ff ff91 	bl	8010b80 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8010c5e:	20d9      	movs	r0, #217	; 0xd9
 8010c60:	f7ff ff8e 	bl	8010b80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8010c64:	2022      	movs	r0, #34	; 0x22
 8010c66:	f7ff ff8b 	bl	8010b80 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8010c6a:	20da      	movs	r0, #218	; 0xda
 8010c6c:	f7ff ff88 	bl	8010b80 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 8010c70:	2002      	movs	r0, #2
 8010c72:	f7ff ff85 	bl	8010b80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8010c76:	20db      	movs	r0, #219	; 0xdb
 8010c78:	f7ff ff82 	bl	8010b80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8010c7c:	2020      	movs	r0, #32
 8010c7e:	f7ff ff7f 	bl	8010b80 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8010c82:	208d      	movs	r0, #141	; 0x8d
 8010c84:	f7ff ff7c 	bl	8010b80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8010c88:	2014      	movs	r0, #20
 8010c8a:	f7ff ff79 	bl	8010b80 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8010c8e:	2001      	movs	r0, #1
 8010c90:	f000 f994 	bl	8010fbc <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8010c94:	2000      	movs	r0, #0
 8010c96:	f000 f80f 	bl	8010cb8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8010c9a:	f000 f82f 	bl	8010cfc <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8010c9e:	4b05      	ldr	r3, [pc, #20]	; (8010cb4 <ssd1306_Init+0xd0>)
 8010ca0:	2200      	movs	r2, #0
 8010ca2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8010ca4:	4b03      	ldr	r3, [pc, #12]	; (8010cb4 <ssd1306_Init+0xd0>)
 8010ca6:	2200      	movs	r2, #0
 8010ca8:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8010caa:	4b02      	ldr	r3, [pc, #8]	; (8010cb4 <ssd1306_Init+0xd0>)
 8010cac:	2201      	movs	r2, #1
 8010cae:	715a      	strb	r2, [r3, #5]
}
 8010cb0:	bf00      	nop
 8010cb2:	bd80      	pop	{r7, pc}
 8010cb4:	20005180 	.word	0x20005180

08010cb8 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8010cb8:	b480      	push	{r7}
 8010cba:	b085      	sub	sp, #20
 8010cbc:	af00      	add	r7, sp, #0
 8010cbe:	4603      	mov	r3, r0
 8010cc0:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8010cc2:	2300      	movs	r3, #0
 8010cc4:	60fb      	str	r3, [r7, #12]
 8010cc6:	e00d      	b.n	8010ce4 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8010cc8:	79fb      	ldrb	r3, [r7, #7]
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d101      	bne.n	8010cd2 <ssd1306_Fill+0x1a>
 8010cce:	2100      	movs	r1, #0
 8010cd0:	e000      	b.n	8010cd4 <ssd1306_Fill+0x1c>
 8010cd2:	21ff      	movs	r1, #255	; 0xff
 8010cd4:	4a08      	ldr	r2, [pc, #32]	; (8010cf8 <ssd1306_Fill+0x40>)
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	4413      	add	r3, r2
 8010cda:	460a      	mov	r2, r1
 8010cdc:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8010cde:	68fb      	ldr	r3, [r7, #12]
 8010ce0:	3301      	adds	r3, #1
 8010ce2:	60fb      	str	r3, [r7, #12]
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010cea:	d3ed      	bcc.n	8010cc8 <ssd1306_Fill+0x10>
    }
}
 8010cec:	bf00      	nop
 8010cee:	3714      	adds	r7, #20
 8010cf0:	46bd      	mov	sp, r7
 8010cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf6:	4770      	bx	lr
 8010cf8:	20004f80 	.word	0x20004f80

08010cfc <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8010cfc:	b580      	push	{r7, lr}
 8010cfe:	b082      	sub	sp, #8
 8010d00:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8010d02:	2300      	movs	r3, #0
 8010d04:	71fb      	strb	r3, [r7, #7]
 8010d06:	e016      	b.n	8010d36 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8010d08:	79fb      	ldrb	r3, [r7, #7]
 8010d0a:	3b50      	subs	r3, #80	; 0x50
 8010d0c:	b2db      	uxtb	r3, r3
 8010d0e:	4618      	mov	r0, r3
 8010d10:	f7ff ff36 	bl	8010b80 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8010d14:	2000      	movs	r0, #0
 8010d16:	f7ff ff33 	bl	8010b80 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8010d1a:	2010      	movs	r0, #16
 8010d1c:	f7ff ff30 	bl	8010b80 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8010d20:	79fb      	ldrb	r3, [r7, #7]
 8010d22:	01db      	lsls	r3, r3, #7
 8010d24:	4a07      	ldr	r2, [pc, #28]	; (8010d44 <ssd1306_UpdateScreen+0x48>)
 8010d26:	4413      	add	r3, r2
 8010d28:	2180      	movs	r1, #128	; 0x80
 8010d2a:	4618      	mov	r0, r3
 8010d2c:	f7ff ff40 	bl	8010bb0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8010d30:	79fb      	ldrb	r3, [r7, #7]
 8010d32:	3301      	adds	r3, #1
 8010d34:	71fb      	strb	r3, [r7, #7]
 8010d36:	79fb      	ldrb	r3, [r7, #7]
 8010d38:	2b03      	cmp	r3, #3
 8010d3a:	d9e5      	bls.n	8010d08 <ssd1306_UpdateScreen+0xc>
    }
}
 8010d3c:	bf00      	nop
 8010d3e:	3708      	adds	r7, #8
 8010d40:	46bd      	mov	sp, r7
 8010d42:	bd80      	pop	{r7, pc}
 8010d44:	20004f80 	.word	0x20004f80

08010d48 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8010d48:	b480      	push	{r7}
 8010d4a:	b083      	sub	sp, #12
 8010d4c:	af00      	add	r7, sp, #0
 8010d4e:	4603      	mov	r3, r0
 8010d50:	71fb      	strb	r3, [r7, #7]
 8010d52:	460b      	mov	r3, r1
 8010d54:	71bb      	strb	r3, [r7, #6]
 8010d56:	4613      	mov	r3, r2
 8010d58:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8010d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	db48      	blt.n	8010df4 <ssd1306_DrawPixel+0xac>
 8010d62:	79bb      	ldrb	r3, [r7, #6]
 8010d64:	2b1f      	cmp	r3, #31
 8010d66:	d845      	bhi.n	8010df4 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8010d68:	4b25      	ldr	r3, [pc, #148]	; (8010e00 <ssd1306_DrawPixel+0xb8>)
 8010d6a:	791b      	ldrb	r3, [r3, #4]
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d006      	beq.n	8010d7e <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 8010d70:	797b      	ldrb	r3, [r7, #5]
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	bf0c      	ite	eq
 8010d76:	2301      	moveq	r3, #1
 8010d78:	2300      	movne	r3, #0
 8010d7a:	b2db      	uxtb	r3, r3
 8010d7c:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 8010d7e:	797b      	ldrb	r3, [r7, #5]
 8010d80:	2b01      	cmp	r3, #1
 8010d82:	d11a      	bne.n	8010dba <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8010d84:	79fa      	ldrb	r2, [r7, #7]
 8010d86:	79bb      	ldrb	r3, [r7, #6]
 8010d88:	08db      	lsrs	r3, r3, #3
 8010d8a:	b2d8      	uxtb	r0, r3
 8010d8c:	4603      	mov	r3, r0
 8010d8e:	01db      	lsls	r3, r3, #7
 8010d90:	4413      	add	r3, r2
 8010d92:	4a1c      	ldr	r2, [pc, #112]	; (8010e04 <ssd1306_DrawPixel+0xbc>)
 8010d94:	5cd3      	ldrb	r3, [r2, r3]
 8010d96:	b25a      	sxtb	r2, r3
 8010d98:	79bb      	ldrb	r3, [r7, #6]
 8010d9a:	f003 0307 	and.w	r3, r3, #7
 8010d9e:	2101      	movs	r1, #1
 8010da0:	fa01 f303 	lsl.w	r3, r1, r3
 8010da4:	b25b      	sxtb	r3, r3
 8010da6:	4313      	orrs	r3, r2
 8010da8:	b259      	sxtb	r1, r3
 8010daa:	79fa      	ldrb	r2, [r7, #7]
 8010dac:	4603      	mov	r3, r0
 8010dae:	01db      	lsls	r3, r3, #7
 8010db0:	4413      	add	r3, r2
 8010db2:	b2c9      	uxtb	r1, r1
 8010db4:	4a13      	ldr	r2, [pc, #76]	; (8010e04 <ssd1306_DrawPixel+0xbc>)
 8010db6:	54d1      	strb	r1, [r2, r3]
 8010db8:	e01d      	b.n	8010df6 <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8010dba:	79fa      	ldrb	r2, [r7, #7]
 8010dbc:	79bb      	ldrb	r3, [r7, #6]
 8010dbe:	08db      	lsrs	r3, r3, #3
 8010dc0:	b2d8      	uxtb	r0, r3
 8010dc2:	4603      	mov	r3, r0
 8010dc4:	01db      	lsls	r3, r3, #7
 8010dc6:	4413      	add	r3, r2
 8010dc8:	4a0e      	ldr	r2, [pc, #56]	; (8010e04 <ssd1306_DrawPixel+0xbc>)
 8010dca:	5cd3      	ldrb	r3, [r2, r3]
 8010dcc:	b25a      	sxtb	r2, r3
 8010dce:	79bb      	ldrb	r3, [r7, #6]
 8010dd0:	f003 0307 	and.w	r3, r3, #7
 8010dd4:	2101      	movs	r1, #1
 8010dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8010dda:	b25b      	sxtb	r3, r3
 8010ddc:	43db      	mvns	r3, r3
 8010dde:	b25b      	sxtb	r3, r3
 8010de0:	4013      	ands	r3, r2
 8010de2:	b259      	sxtb	r1, r3
 8010de4:	79fa      	ldrb	r2, [r7, #7]
 8010de6:	4603      	mov	r3, r0
 8010de8:	01db      	lsls	r3, r3, #7
 8010dea:	4413      	add	r3, r2
 8010dec:	b2c9      	uxtb	r1, r1
 8010dee:	4a05      	ldr	r2, [pc, #20]	; (8010e04 <ssd1306_DrawPixel+0xbc>)
 8010df0:	54d1      	strb	r1, [r2, r3]
 8010df2:	e000      	b.n	8010df6 <ssd1306_DrawPixel+0xae>
        return;
 8010df4:	bf00      	nop
    }
}
 8010df6:	370c      	adds	r7, #12
 8010df8:	46bd      	mov	sp, r7
 8010dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dfe:	4770      	bx	lr
 8010e00:	20005180 	.word	0x20005180
 8010e04:	20004f80 	.word	0x20004f80

08010e08 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8010e08:	b590      	push	{r4, r7, lr}
 8010e0a:	b089      	sub	sp, #36	; 0x24
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	4604      	mov	r4, r0
 8010e10:	1d38      	adds	r0, r7, #4
 8010e12:	e880 0006 	stmia.w	r0, {r1, r2}
 8010e16:	461a      	mov	r2, r3
 8010e18:	4623      	mov	r3, r4
 8010e1a:	73fb      	strb	r3, [r7, #15]
 8010e1c:	4613      	mov	r3, r2
 8010e1e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8010e20:	7bfb      	ldrb	r3, [r7, #15]
 8010e22:	2b1f      	cmp	r3, #31
 8010e24:	d902      	bls.n	8010e2c <ssd1306_WriteChar+0x24>
 8010e26:	7bfb      	ldrb	r3, [r7, #15]
 8010e28:	2b7e      	cmp	r3, #126	; 0x7e
 8010e2a:	d901      	bls.n	8010e30 <ssd1306_WriteChar+0x28>
        return 0;
 8010e2c:	2300      	movs	r3, #0
 8010e2e:	e06d      	b.n	8010f0c <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8010e30:	4b38      	ldr	r3, [pc, #224]	; (8010f14 <ssd1306_WriteChar+0x10c>)
 8010e32:	881b      	ldrh	r3, [r3, #0]
 8010e34:	461a      	mov	r2, r3
 8010e36:	793b      	ldrb	r3, [r7, #4]
 8010e38:	4413      	add	r3, r2
 8010e3a:	2b80      	cmp	r3, #128	; 0x80
 8010e3c:	dc06      	bgt.n	8010e4c <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8010e3e:	4b35      	ldr	r3, [pc, #212]	; (8010f14 <ssd1306_WriteChar+0x10c>)
 8010e40:	885b      	ldrh	r3, [r3, #2]
 8010e42:	461a      	mov	r2, r3
 8010e44:	797b      	ldrb	r3, [r7, #5]
 8010e46:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8010e48:	2b20      	cmp	r3, #32
 8010e4a:	dd01      	ble.n	8010e50 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8010e4c:	2300      	movs	r3, #0
 8010e4e:	e05d      	b.n	8010f0c <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8010e50:	2300      	movs	r3, #0
 8010e52:	61fb      	str	r3, [r7, #28]
 8010e54:	e04c      	b.n	8010ef0 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8010e56:	68ba      	ldr	r2, [r7, #8]
 8010e58:	7bfb      	ldrb	r3, [r7, #15]
 8010e5a:	3b20      	subs	r3, #32
 8010e5c:	7979      	ldrb	r1, [r7, #5]
 8010e5e:	fb01 f303 	mul.w	r3, r1, r3
 8010e62:	4619      	mov	r1, r3
 8010e64:	69fb      	ldr	r3, [r7, #28]
 8010e66:	440b      	add	r3, r1
 8010e68:	005b      	lsls	r3, r3, #1
 8010e6a:	4413      	add	r3, r2
 8010e6c:	881b      	ldrh	r3, [r3, #0]
 8010e6e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8010e70:	2300      	movs	r3, #0
 8010e72:	61bb      	str	r3, [r7, #24]
 8010e74:	e034      	b.n	8010ee0 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8010e76:	697a      	ldr	r2, [r7, #20]
 8010e78:	69bb      	ldr	r3, [r7, #24]
 8010e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8010e7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d012      	beq.n	8010eac <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8010e86:	4b23      	ldr	r3, [pc, #140]	; (8010f14 <ssd1306_WriteChar+0x10c>)
 8010e88:	881b      	ldrh	r3, [r3, #0]
 8010e8a:	b2da      	uxtb	r2, r3
 8010e8c:	69bb      	ldr	r3, [r7, #24]
 8010e8e:	b2db      	uxtb	r3, r3
 8010e90:	4413      	add	r3, r2
 8010e92:	b2d8      	uxtb	r0, r3
 8010e94:	4b1f      	ldr	r3, [pc, #124]	; (8010f14 <ssd1306_WriteChar+0x10c>)
 8010e96:	885b      	ldrh	r3, [r3, #2]
 8010e98:	b2da      	uxtb	r2, r3
 8010e9a:	69fb      	ldr	r3, [r7, #28]
 8010e9c:	b2db      	uxtb	r3, r3
 8010e9e:	4413      	add	r3, r2
 8010ea0:	b2db      	uxtb	r3, r3
 8010ea2:	7bba      	ldrb	r2, [r7, #14]
 8010ea4:	4619      	mov	r1, r3
 8010ea6:	f7ff ff4f 	bl	8010d48 <ssd1306_DrawPixel>
 8010eaa:	e016      	b.n	8010eda <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8010eac:	4b19      	ldr	r3, [pc, #100]	; (8010f14 <ssd1306_WriteChar+0x10c>)
 8010eae:	881b      	ldrh	r3, [r3, #0]
 8010eb0:	b2da      	uxtb	r2, r3
 8010eb2:	69bb      	ldr	r3, [r7, #24]
 8010eb4:	b2db      	uxtb	r3, r3
 8010eb6:	4413      	add	r3, r2
 8010eb8:	b2d8      	uxtb	r0, r3
 8010eba:	4b16      	ldr	r3, [pc, #88]	; (8010f14 <ssd1306_WriteChar+0x10c>)
 8010ebc:	885b      	ldrh	r3, [r3, #2]
 8010ebe:	b2da      	uxtb	r2, r3
 8010ec0:	69fb      	ldr	r3, [r7, #28]
 8010ec2:	b2db      	uxtb	r3, r3
 8010ec4:	4413      	add	r3, r2
 8010ec6:	b2d9      	uxtb	r1, r3
 8010ec8:	7bbb      	ldrb	r3, [r7, #14]
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	bf0c      	ite	eq
 8010ece:	2301      	moveq	r3, #1
 8010ed0:	2300      	movne	r3, #0
 8010ed2:	b2db      	uxtb	r3, r3
 8010ed4:	461a      	mov	r2, r3
 8010ed6:	f7ff ff37 	bl	8010d48 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8010eda:	69bb      	ldr	r3, [r7, #24]
 8010edc:	3301      	adds	r3, #1
 8010ede:	61bb      	str	r3, [r7, #24]
 8010ee0:	793b      	ldrb	r3, [r7, #4]
 8010ee2:	461a      	mov	r2, r3
 8010ee4:	69bb      	ldr	r3, [r7, #24]
 8010ee6:	4293      	cmp	r3, r2
 8010ee8:	d3c5      	bcc.n	8010e76 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8010eea:	69fb      	ldr	r3, [r7, #28]
 8010eec:	3301      	adds	r3, #1
 8010eee:	61fb      	str	r3, [r7, #28]
 8010ef0:	797b      	ldrb	r3, [r7, #5]
 8010ef2:	461a      	mov	r2, r3
 8010ef4:	69fb      	ldr	r3, [r7, #28]
 8010ef6:	4293      	cmp	r3, r2
 8010ef8:	d3ad      	bcc.n	8010e56 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8010efa:	4b06      	ldr	r3, [pc, #24]	; (8010f14 <ssd1306_WriteChar+0x10c>)
 8010efc:	881a      	ldrh	r2, [r3, #0]
 8010efe:	793b      	ldrb	r3, [r7, #4]
 8010f00:	b29b      	uxth	r3, r3
 8010f02:	4413      	add	r3, r2
 8010f04:	b29a      	uxth	r2, r3
 8010f06:	4b03      	ldr	r3, [pc, #12]	; (8010f14 <ssd1306_WriteChar+0x10c>)
 8010f08:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8010f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f0c:	4618      	mov	r0, r3
 8010f0e:	3724      	adds	r7, #36	; 0x24
 8010f10:	46bd      	mov	sp, r7
 8010f12:	bd90      	pop	{r4, r7, pc}
 8010f14:	20005180 	.word	0x20005180

08010f18 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8010f18:	b580      	push	{r7, lr}
 8010f1a:	b084      	sub	sp, #16
 8010f1c:	af00      	add	r7, sp, #0
 8010f1e:	60f8      	str	r0, [r7, #12]
 8010f20:	1d38      	adds	r0, r7, #4
 8010f22:	e880 0006 	stmia.w	r0, {r1, r2}
 8010f26:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8010f28:	e012      	b.n	8010f50 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	7818      	ldrb	r0, [r3, #0]
 8010f2e:	78fb      	ldrb	r3, [r7, #3]
 8010f30:	1d3a      	adds	r2, r7, #4
 8010f32:	ca06      	ldmia	r2, {r1, r2}
 8010f34:	f7ff ff68 	bl	8010e08 <ssd1306_WriteChar>
 8010f38:	4603      	mov	r3, r0
 8010f3a:	461a      	mov	r2, r3
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	781b      	ldrb	r3, [r3, #0]
 8010f40:	429a      	cmp	r2, r3
 8010f42:	d002      	beq.n	8010f4a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8010f44:	68fb      	ldr	r3, [r7, #12]
 8010f46:	781b      	ldrb	r3, [r3, #0]
 8010f48:	e008      	b.n	8010f5c <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8010f4a:	68fb      	ldr	r3, [r7, #12]
 8010f4c:	3301      	adds	r3, #1
 8010f4e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	781b      	ldrb	r3, [r3, #0]
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d1e8      	bne.n	8010f2a <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	781b      	ldrb	r3, [r3, #0]
}
 8010f5c:	4618      	mov	r0, r3
 8010f5e:	3710      	adds	r7, #16
 8010f60:	46bd      	mov	sp, r7
 8010f62:	bd80      	pop	{r7, pc}

08010f64 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8010f64:	b480      	push	{r7}
 8010f66:	b083      	sub	sp, #12
 8010f68:	af00      	add	r7, sp, #0
 8010f6a:	4603      	mov	r3, r0
 8010f6c:	460a      	mov	r2, r1
 8010f6e:	71fb      	strb	r3, [r7, #7]
 8010f70:	4613      	mov	r3, r2
 8010f72:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8010f74:	79fb      	ldrb	r3, [r7, #7]
 8010f76:	b29a      	uxth	r2, r3
 8010f78:	4b05      	ldr	r3, [pc, #20]	; (8010f90 <ssd1306_SetCursor+0x2c>)
 8010f7a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8010f7c:	79bb      	ldrb	r3, [r7, #6]
 8010f7e:	b29a      	uxth	r2, r3
 8010f80:	4b03      	ldr	r3, [pc, #12]	; (8010f90 <ssd1306_SetCursor+0x2c>)
 8010f82:	805a      	strh	r2, [r3, #2]
}
 8010f84:	bf00      	nop
 8010f86:	370c      	adds	r7, #12
 8010f88:	46bd      	mov	sp, r7
 8010f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f8e:	4770      	bx	lr
 8010f90:	20005180 	.word	0x20005180

08010f94 <ssd1306_SetContrast>:
  ssd1306_Line(x1,y2,x1,y1,color);

  return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8010f94:	b580      	push	{r7, lr}
 8010f96:	b084      	sub	sp, #16
 8010f98:	af00      	add	r7, sp, #0
 8010f9a:	4603      	mov	r3, r0
 8010f9c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8010f9e:	2381      	movs	r3, #129	; 0x81
 8010fa0:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8010fa2:	7bfb      	ldrb	r3, [r7, #15]
 8010fa4:	4618      	mov	r0, r3
 8010fa6:	f7ff fdeb 	bl	8010b80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8010faa:	79fb      	ldrb	r3, [r7, #7]
 8010fac:	4618      	mov	r0, r3
 8010fae:	f7ff fde7 	bl	8010b80 <ssd1306_WriteCommand>
}
 8010fb2:	bf00      	nop
 8010fb4:	3710      	adds	r7, #16
 8010fb6:	46bd      	mov	sp, r7
 8010fb8:	bd80      	pop	{r7, pc}
	...

08010fbc <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8010fbc:	b580      	push	{r7, lr}
 8010fbe:	b084      	sub	sp, #16
 8010fc0:	af00      	add	r7, sp, #0
 8010fc2:	4603      	mov	r3, r0
 8010fc4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8010fc6:	79fb      	ldrb	r3, [r7, #7]
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d005      	beq.n	8010fd8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8010fcc:	23af      	movs	r3, #175	; 0xaf
 8010fce:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8010fd0:	4b08      	ldr	r3, [pc, #32]	; (8010ff4 <ssd1306_SetDisplayOn+0x38>)
 8010fd2:	2201      	movs	r2, #1
 8010fd4:	719a      	strb	r2, [r3, #6]
 8010fd6:	e004      	b.n	8010fe2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8010fd8:	23ae      	movs	r3, #174	; 0xae
 8010fda:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8010fdc:	4b05      	ldr	r3, [pc, #20]	; (8010ff4 <ssd1306_SetDisplayOn+0x38>)
 8010fde:	2200      	movs	r2, #0
 8010fe0:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 8010fe2:	7bfb      	ldrb	r3, [r7, #15]
 8010fe4:	4618      	mov	r0, r3
 8010fe6:	f7ff fdcb 	bl	8010b80 <ssd1306_WriteCommand>
}
 8010fea:	bf00      	nop
 8010fec:	3710      	adds	r7, #16
 8010fee:	46bd      	mov	sp, r7
 8010ff0:	bd80      	pop	{r7, pc}
 8010ff2:	bf00      	nop
 8010ff4:	20005180 	.word	0x20005180

08010ff8 <train_notif>:
{
	trainctl_notif('G', 0, cmd, dta, dtalen);
}

static inline void train_notif(uint8_t train_idx, uint8_t cmd, uint8_t *dta, int dtalen)
{
 8010ff8:	b580      	push	{r7, lr}
 8010ffa:	b086      	sub	sp, #24
 8010ffc:	af02      	add	r7, sp, #8
 8010ffe:	60ba      	str	r2, [r7, #8]
 8011000:	607b      	str	r3, [r7, #4]
 8011002:	4603      	mov	r3, r0
 8011004:	73fb      	strb	r3, [r7, #15]
 8011006:	460b      	mov	r3, r1
 8011008:	73bb      	strb	r3, [r7, #14]
	trainctl_notif('T', train_idx, cmd, dta, dtalen);
 801100a:	7bba      	ldrb	r2, [r7, #14]
 801100c:	7bf9      	ldrb	r1, [r7, #15]
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	9300      	str	r3, [sp, #0]
 8011012:	68bb      	ldr	r3, [r7, #8]
 8011014:	2054      	movs	r0, #84	; 0x54
 8011016:	f003 f81d 	bl	8014054 <trainctl_notif>
}
 801101a:	bf00      	nop
 801101c:	3710      	adds	r7, #16
 801101e:	46bd      	mov	sp, r7
 8011020:	bd80      	pop	{r7, pc}

08011022 <debug_info>:

static inline void debug_info(uint32_t sel, uint32_t num, char *msg, int v1, int v2, int v3)
{
 8011022:	b580      	push	{r7, lr}
 8011024:	b088      	sub	sp, #32
 8011026:	af04      	add	r7, sp, #16
 8011028:	60f8      	str	r0, [r7, #12]
 801102a:	60b9      	str	r1, [r7, #8]
 801102c:	607a      	str	r2, [r7, #4]
 801102e:	603b      	str	r3, [r7, #0]
	trainctl_notif2(sel, num, 'D', msg, v1, v2, v3);
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	b2d8      	uxtb	r0, r3
 8011034:	68bb      	ldr	r3, [r7, #8]
 8011036:	b2d9      	uxtb	r1, r3
 8011038:	69fb      	ldr	r3, [r7, #28]
 801103a:	9302      	str	r3, [sp, #8]
 801103c:	69bb      	ldr	r3, [r7, #24]
 801103e:	9301      	str	r3, [sp, #4]
 8011040:	683b      	ldr	r3, [r7, #0]
 8011042:	9300      	str	r3, [sp, #0]
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	2244      	movs	r2, #68	; 0x44
 8011048:	f003 f828 	bl	801409c <trainctl_notif2>
}
 801104c:	bf00      	nop
 801104e:	3710      	adds	r7, #16
 8011050:	46bd      	mov	sp, r7
 8011052:	bd80      	pop	{r7, pc}

08011054 <auto1_reset>:

static auto1_vars_t vars = {-1, 0, 0};


void auto1_reset(void)
{
 8011054:	b580      	push	{r7, lr}
 8011056:	b082      	sub	sp, #8
 8011058:	af02      	add	r7, sp, #8
	debug_info('T', 0, "A1/RST", 0,0,0);
 801105a:	2300      	movs	r3, #0
 801105c:	9301      	str	r3, [sp, #4]
 801105e:	2300      	movs	r3, #0
 8011060:	9300      	str	r3, [sp, #0]
 8011062:	2300      	movs	r3, #0
 8011064:	4a05      	ldr	r2, [pc, #20]	; (801107c <auto1_reset+0x28>)
 8011066:	2100      	movs	r1, #0
 8011068:	2054      	movs	r0, #84	; 0x54
 801106a:	f7ff ffda 	bl	8011022 <debug_info>
    vars.step = -1;
 801106e:	4b04      	ldr	r3, [pc, #16]	; (8011080 <auto1_reset+0x2c>)
 8011070:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011074:	601a      	str	r2, [r3, #0]
}
 8011076:	bf00      	nop
 8011078:	46bd      	mov	sp, r7
 801107a:	bd80      	pop	{r7, pc}
 801107c:	08015f78 	.word	0x08015f78
 8011080:	200001a4 	.word	0x200001a4

08011084 <bh>:


static void bh(void) {
 8011084:	b480      	push	{r7}
 8011086:	af00      	add	r7, sp, #0
    //printf("hop");
}
 8011088:	bf00      	nop
 801108a:	46bd      	mov	sp, r7
 801108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011090:	4770      	bx	lr
	...

08011094 <auto1_run>:
		GO_STEP(vars.step+1);			\
	} 									\
} while (0)

void auto1_run(uint32_t notif, uint32_t tick)
{
 8011094:	b580      	push	{r7, lr}
 8011096:	b08a      	sub	sp, #40	; 0x28
 8011098:	af02      	add	r7, sp, #8
 801109a:	6078      	str	r0, [r7, #4]
 801109c:	6039      	str	r1, [r7, #0]
	const train_config_t *t0cnf = get_train_cnf(0);
 801109e:	2000      	movs	r0, #0
 80110a0:	f001 fa1e 	bl	80124e0 <get_train_cnf>
 80110a4:	61f8      	str	r0, [r7, #28]
	train_vars_t *t0vars        = get_train_vars(0);
 80110a6:	2000      	movs	r0, #0
 80110a8:	f001 fa42 	bl	8012530 <get_train_vars>
 80110ac:	61b8      	str	r0, [r7, #24]
	const auto_step_t *stp;
	int32_t pose = t0vars->position_estimate - vars.pose_offset;
 80110ae:	69bb      	ldr	r3, [r7, #24]
 80110b0:	6a1b      	ldr	r3, [r3, #32]
 80110b2:	461a      	mov	r2, r3
 80110b4:	4bae      	ldr	r3, [pc, #696]	; (8011370 <auto1_run+0x2dc>)
 80110b6:	685b      	ldr	r3, [r3, #4]
 80110b8:	1ad3      	subs	r3, r2, r3
 80110ba:	617b      	str	r3, [r7, #20]

	if (-1 == vars.step) {
 80110bc:	4bac      	ldr	r3, [pc, #688]	; (8011370 <auto1_run+0x2dc>)
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80110c4:	d127      	bne.n	8011116 <auto1_run+0x82>
		if ((notif & AUTO1_NOTIF_CMD_START) && t0cnf && t0vars) {
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	f003 0302 	and.w	r3, r3, #2
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d022      	beq.n	8011116 <auto1_run+0x82>
 80110d0:	69fb      	ldr	r3, [r7, #28]
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d01f      	beq.n	8011116 <auto1_run+0x82>
 80110d6:	69bb      	ldr	r3, [r7, #24]
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d01c      	beq.n	8011116 <auto1_run+0x82>
			vars.pose_offset = t0vars->position_estimate;
 80110dc:	69bb      	ldr	r3, [r7, #24]
 80110de:	6a1b      	ldr	r3, [r3, #32]
 80110e0:	461a      	mov	r2, r3
 80110e2:	4ba3      	ldr	r3, [pc, #652]	; (8011370 <auto1_run+0x2dc>)
 80110e4:	605a      	str	r2, [r3, #4]
			debug_info('T', 0, "A1/START", vars.step,vars.pose_offset,0);
 80110e6:	4ba2      	ldr	r3, [pc, #648]	; (8011370 <auto1_run+0x2dc>)
 80110e8:	681a      	ldr	r2, [r3, #0]
 80110ea:	4ba1      	ldr	r3, [pc, #644]	; (8011370 <auto1_run+0x2dc>)
 80110ec:	685b      	ldr	r3, [r3, #4]
 80110ee:	4619      	mov	r1, r3
 80110f0:	2300      	movs	r3, #0
 80110f2:	9301      	str	r3, [sp, #4]
 80110f4:	9100      	str	r1, [sp, #0]
 80110f6:	4613      	mov	r3, r2
 80110f8:	4a9e      	ldr	r2, [pc, #632]	; (8011374 <auto1_run+0x2e0>)
 80110fa:	2100      	movs	r1, #0
 80110fc:	2054      	movs	r0, #84	; 0x54
 80110fe:	f7ff ff90 	bl	8011022 <debug_info>
			GO_STEP(0);
 8011102:	4b9b      	ldr	r3, [pc, #620]	; (8011370 <auto1_run+0x2dc>)
 8011104:	681b      	ldr	r3, [r3, #0]
 8011106:	2b0b      	cmp	r3, #11
 8011108:	d101      	bne.n	801110e <auto1_run+0x7a>
 801110a:	f7ff ffbb 	bl	8011084 <bh>
 801110e:	4b98      	ldr	r3, [pc, #608]	; (8011370 <auto1_run+0x2dc>)
 8011110:	2200      	movs	r2, #0
 8011112:	601a      	str	r2, [r3, #0]
 8011114:	e0e0      	b.n	80112d8 <auto1_run+0x244>
		}
	}
	if (notif & AUTO1_NOTIF_CMD_STOP) {
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	f003 0304 	and.w	r3, r3, #4
 801111c:	2b00      	cmp	r3, #0
 801111e:	d01a      	beq.n	8011156 <auto1_run+0xc2>
		debug_info('T', 0, "A1/STOP", vars.step,0,0);
 8011120:	4b93      	ldr	r3, [pc, #588]	; (8011370 <auto1_run+0x2dc>)
 8011122:	681a      	ldr	r2, [r3, #0]
 8011124:	2300      	movs	r3, #0
 8011126:	9301      	str	r3, [sp, #4]
 8011128:	2300      	movs	r3, #0
 801112a:	9300      	str	r3, [sp, #0]
 801112c:	4613      	mov	r3, r2
 801112e:	4a92      	ldr	r2, [pc, #584]	; (8011378 <auto1_run+0x2e4>)
 8011130:	2100      	movs	r1, #0
 8011132:	2054      	movs	r0, #84	; 0x54
 8011134:	f7ff ff75 	bl	8011022 <debug_info>
		if (-1 == vars.step) return;
 8011138:	4b8d      	ldr	r3, [pc, #564]	; (8011370 <auto1_run+0x2dc>)
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011140:	f000 8120 	beq.w	8011384 <auto1_run+0x2f0>
		train_set_target_speed(0, 0);
 8011144:	2100      	movs	r1, #0
 8011146:	2000      	movs	r0, #0
 8011148:	f002 f816 	bl	8013178 <train_set_target_speed>
		vars.step = -1;
 801114c:	4b88      	ldr	r3, [pc, #544]	; (8011370 <auto1_run+0x2dc>)
 801114e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011152:	601a      	str	r2, [r3, #0]
		return;
 8011154:	e11b      	b.n	801138e <auto1_run+0x2fa>
	}
	if (-1 == vars.step) return;
 8011156:	4b86      	ldr	r3, [pc, #536]	; (8011370 <auto1_run+0x2dc>)
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801115e:	f000 8113 	beq.w	8011388 <auto1_run+0x2f4>

	if (vars.tickstop>0) {
 8011162:	4b83      	ldr	r3, [pc, #524]	; (8011370 <auto1_run+0x2dc>)
 8011164:	689b      	ldr	r3, [r3, #8]
 8011166:	2b00      	cmp	r3, #0
 8011168:	d032      	beq.n	80111d0 <auto1_run+0x13c>
		if (tick >= vars.tickstop) NEXT_STEP();
 801116a:	4b81      	ldr	r3, [pc, #516]	; (8011370 <auto1_run+0x2dc>)
 801116c:	689b      	ldr	r3, [r3, #8]
 801116e:	683a      	ldr	r2, [r7, #0]
 8011170:	429a      	cmp	r2, r3
 8011172:	d32d      	bcc.n	80111d0 <auto1_run+0x13c>
 8011174:	4b7e      	ldr	r3, [pc, #504]	; (8011370 <auto1_run+0x2dc>)
 8011176:	681a      	ldr	r2, [r3, #0]
 8011178:	4980      	ldr	r1, [pc, #512]	; (801137c <auto1_run+0x2e8>)
 801117a:	4613      	mov	r3, r2
 801117c:	005b      	lsls	r3, r3, #1
 801117e:	4413      	add	r3, r2
 8011180:	009b      	lsls	r3, r3, #2
 8011182:	440b      	add	r3, r1
 8011184:	3309      	adds	r3, #9
 8011186:	f993 3000 	ldrsb.w	r3, [r3]
 801118a:	2b00      	cmp	r3, #0
 801118c:	db14      	blt.n	80111b8 <auto1_run+0x124>
 801118e:	4b78      	ldr	r3, [pc, #480]	; (8011370 <auto1_run+0x2dc>)
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	2b0b      	cmp	r3, #11
 8011194:	d101      	bne.n	801119a <auto1_run+0x106>
 8011196:	f7ff ff75 	bl	8011084 <bh>
 801119a:	4b75      	ldr	r3, [pc, #468]	; (8011370 <auto1_run+0x2dc>)
 801119c:	681a      	ldr	r2, [r3, #0]
 801119e:	4977      	ldr	r1, [pc, #476]	; (801137c <auto1_run+0x2e8>)
 80111a0:	4613      	mov	r3, r2
 80111a2:	005b      	lsls	r3, r3, #1
 80111a4:	4413      	add	r3, r2
 80111a6:	009b      	lsls	r3, r3, #2
 80111a8:	440b      	add	r3, r1
 80111aa:	3309      	adds	r3, #9
 80111ac:	f993 3000 	ldrsb.w	r3, [r3]
 80111b0:	461a      	mov	r2, r3
 80111b2:	4b6f      	ldr	r3, [pc, #444]	; (8011370 <auto1_run+0x2dc>)
 80111b4:	601a      	str	r2, [r3, #0]
 80111b6:	e08f      	b.n	80112d8 <auto1_run+0x244>
 80111b8:	4b6d      	ldr	r3, [pc, #436]	; (8011370 <auto1_run+0x2dc>)
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	2b0b      	cmp	r3, #11
 80111be:	d101      	bne.n	80111c4 <auto1_run+0x130>
 80111c0:	f7ff ff60 	bl	8011084 <bh>
 80111c4:	4b6a      	ldr	r3, [pc, #424]	; (8011370 <auto1_run+0x2dc>)
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	3301      	adds	r3, #1
 80111ca:	4a69      	ldr	r2, [pc, #420]	; (8011370 <auto1_run+0x2dc>)
 80111cc:	6013      	str	r3, [r2, #0]
 80111ce:	e083      	b.n	80112d8 <auto1_run+0x244>
	}
	if (steps[vars.step].speed > 0) {
 80111d0:	4b67      	ldr	r3, [pc, #412]	; (8011370 <auto1_run+0x2dc>)
 80111d2:	681a      	ldr	r2, [r3, #0]
 80111d4:	4969      	ldr	r1, [pc, #420]	; (801137c <auto1_run+0x2e8>)
 80111d6:	4613      	mov	r3, r2
 80111d8:	005b      	lsls	r3, r3, #1
 80111da:	4413      	add	r3, r2
 80111dc:	009b      	lsls	r3, r3, #2
 80111de:	440b      	add	r3, r1
 80111e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	dd3b      	ble.n	8011260 <auto1_run+0x1cc>
		if (pose  > steps[vars.step].poselim) NEXT_STEP();
 80111e8:	4b61      	ldr	r3, [pc, #388]	; (8011370 <auto1_run+0x2dc>)
 80111ea:	681a      	ldr	r2, [r3, #0]
 80111ec:	4963      	ldr	r1, [pc, #396]	; (801137c <auto1_run+0x2e8>)
 80111ee:	4613      	mov	r3, r2
 80111f0:	005b      	lsls	r3, r3, #1
 80111f2:	4413      	add	r3, r2
 80111f4:	009b      	lsls	r3, r3, #2
 80111f6:	440b      	add	r3, r1
 80111f8:	3304      	adds	r3, #4
 80111fa:	681b      	ldr	r3, [r3, #0]
 80111fc:	697a      	ldr	r2, [r7, #20]
 80111fe:	429a      	cmp	r2, r3
 8011200:	f340 80c4 	ble.w	801138c <auto1_run+0x2f8>
 8011204:	4b5a      	ldr	r3, [pc, #360]	; (8011370 <auto1_run+0x2dc>)
 8011206:	681a      	ldr	r2, [r3, #0]
 8011208:	495c      	ldr	r1, [pc, #368]	; (801137c <auto1_run+0x2e8>)
 801120a:	4613      	mov	r3, r2
 801120c:	005b      	lsls	r3, r3, #1
 801120e:	4413      	add	r3, r2
 8011210:	009b      	lsls	r3, r3, #2
 8011212:	440b      	add	r3, r1
 8011214:	3309      	adds	r3, #9
 8011216:	f993 3000 	ldrsb.w	r3, [r3]
 801121a:	2b00      	cmp	r3, #0
 801121c:	db14      	blt.n	8011248 <auto1_run+0x1b4>
 801121e:	4b54      	ldr	r3, [pc, #336]	; (8011370 <auto1_run+0x2dc>)
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	2b0b      	cmp	r3, #11
 8011224:	d101      	bne.n	801122a <auto1_run+0x196>
 8011226:	f7ff ff2d 	bl	8011084 <bh>
 801122a:	4b51      	ldr	r3, [pc, #324]	; (8011370 <auto1_run+0x2dc>)
 801122c:	681a      	ldr	r2, [r3, #0]
 801122e:	4953      	ldr	r1, [pc, #332]	; (801137c <auto1_run+0x2e8>)
 8011230:	4613      	mov	r3, r2
 8011232:	005b      	lsls	r3, r3, #1
 8011234:	4413      	add	r3, r2
 8011236:	009b      	lsls	r3, r3, #2
 8011238:	440b      	add	r3, r1
 801123a:	3309      	adds	r3, #9
 801123c:	f993 3000 	ldrsb.w	r3, [r3]
 8011240:	461a      	mov	r2, r3
 8011242:	4b4b      	ldr	r3, [pc, #300]	; (8011370 <auto1_run+0x2dc>)
 8011244:	601a      	str	r2, [r3, #0]
 8011246:	e047      	b.n	80112d8 <auto1_run+0x244>
 8011248:	4b49      	ldr	r3, [pc, #292]	; (8011370 <auto1_run+0x2dc>)
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	2b0b      	cmp	r3, #11
 801124e:	d101      	bne.n	8011254 <auto1_run+0x1c0>
 8011250:	f7ff ff18 	bl	8011084 <bh>
 8011254:	4b46      	ldr	r3, [pc, #280]	; (8011370 <auto1_run+0x2dc>)
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	3301      	adds	r3, #1
 801125a:	4a45      	ldr	r2, [pc, #276]	; (8011370 <auto1_run+0x2dc>)
 801125c:	6013      	str	r3, [r2, #0]
 801125e:	e03b      	b.n	80112d8 <auto1_run+0x244>
	} else {
		/*if (-15==steps[vars.step].speed) {
			debug_info('T', 0, "A1/10", vars.step, pose, steps[vars.step].poselim);
		}*/
		if (pose <= steps[vars.step].poselim) NEXT_STEP();
 8011260:	4b43      	ldr	r3, [pc, #268]	; (8011370 <auto1_run+0x2dc>)
 8011262:	681a      	ldr	r2, [r3, #0]
 8011264:	4945      	ldr	r1, [pc, #276]	; (801137c <auto1_run+0x2e8>)
 8011266:	4613      	mov	r3, r2
 8011268:	005b      	lsls	r3, r3, #1
 801126a:	4413      	add	r3, r2
 801126c:	009b      	lsls	r3, r3, #2
 801126e:	440b      	add	r3, r1
 8011270:	3304      	adds	r3, #4
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	697a      	ldr	r2, [r7, #20]
 8011276:	429a      	cmp	r2, r3
 8011278:	f300 8088 	bgt.w	801138c <auto1_run+0x2f8>
 801127c:	4b3c      	ldr	r3, [pc, #240]	; (8011370 <auto1_run+0x2dc>)
 801127e:	681a      	ldr	r2, [r3, #0]
 8011280:	493e      	ldr	r1, [pc, #248]	; (801137c <auto1_run+0x2e8>)
 8011282:	4613      	mov	r3, r2
 8011284:	005b      	lsls	r3, r3, #1
 8011286:	4413      	add	r3, r2
 8011288:	009b      	lsls	r3, r3, #2
 801128a:	440b      	add	r3, r1
 801128c:	3309      	adds	r3, #9
 801128e:	f993 3000 	ldrsb.w	r3, [r3]
 8011292:	2b00      	cmp	r3, #0
 8011294:	db14      	blt.n	80112c0 <auto1_run+0x22c>
 8011296:	4b36      	ldr	r3, [pc, #216]	; (8011370 <auto1_run+0x2dc>)
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	2b0b      	cmp	r3, #11
 801129c:	d101      	bne.n	80112a2 <auto1_run+0x20e>
 801129e:	f7ff fef1 	bl	8011084 <bh>
 80112a2:	4b33      	ldr	r3, [pc, #204]	; (8011370 <auto1_run+0x2dc>)
 80112a4:	681a      	ldr	r2, [r3, #0]
 80112a6:	4935      	ldr	r1, [pc, #212]	; (801137c <auto1_run+0x2e8>)
 80112a8:	4613      	mov	r3, r2
 80112aa:	005b      	lsls	r3, r3, #1
 80112ac:	4413      	add	r3, r2
 80112ae:	009b      	lsls	r3, r3, #2
 80112b0:	440b      	add	r3, r1
 80112b2:	3309      	adds	r3, #9
 80112b4:	f993 3000 	ldrsb.w	r3, [r3]
 80112b8:	461a      	mov	r2, r3
 80112ba:	4b2d      	ldr	r3, [pc, #180]	; (8011370 <auto1_run+0x2dc>)
 80112bc:	601a      	str	r2, [r3, #0]
 80112be:	e00b      	b.n	80112d8 <auto1_run+0x244>
 80112c0:	4b2b      	ldr	r3, [pc, #172]	; (8011370 <auto1_run+0x2dc>)
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	2b0b      	cmp	r3, #11
 80112c6:	d101      	bne.n	80112cc <auto1_run+0x238>
 80112c8:	f7ff fedc 	bl	8011084 <bh>
 80112cc:	4b28      	ldr	r3, [pc, #160]	; (8011370 <auto1_run+0x2dc>)
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	3301      	adds	r3, #1
 80112d2:	4a27      	ldr	r2, [pc, #156]	; (8011370 <auto1_run+0x2dc>)
 80112d4:	6013      	str	r3, [r2, #0]
 80112d6:	bf00      	nop
	}
	return;

new_step:
	stp = &steps[vars.step];
 80112d8:	4b25      	ldr	r3, [pc, #148]	; (8011370 <auto1_run+0x2dc>)
 80112da:	681a      	ldr	r2, [r3, #0]
 80112dc:	4613      	mov	r3, r2
 80112de:	005b      	lsls	r3, r3, #1
 80112e0:	4413      	add	r3, r2
 80112e2:	009b      	lsls	r3, r3, #2
 80112e4:	4a25      	ldr	r2, [pc, #148]	; (801137c <auto1_run+0x2e8>)
 80112e6:	4413      	add	r3, r2
 80112e8:	613b      	str	r3, [r7, #16]
	debug_info('T', 0, "A1/CHG", vars.step, stp->speed, pose);
 80112ea:	4b21      	ldr	r3, [pc, #132]	; (8011370 <auto1_run+0x2dc>)
 80112ec:	681a      	ldr	r2, [r3, #0]
 80112ee:	693b      	ldr	r3, [r7, #16]
 80112f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80112f4:	4619      	mov	r1, r3
 80112f6:	697b      	ldr	r3, [r7, #20]
 80112f8:	9301      	str	r3, [sp, #4]
 80112fa:	9100      	str	r1, [sp, #0]
 80112fc:	4613      	mov	r3, r2
 80112fe:	4a20      	ldr	r2, [pc, #128]	; (8011380 <auto1_run+0x2ec>)
 8011300:	2100      	movs	r1, #0
 8011302:	2054      	movs	r0, #84	; 0x54
 8011304:	f7ff fe8d 	bl	8011022 <debug_info>
	if (stp->wait) {
 8011308:	693b      	ldr	r3, [r7, #16]
 801130a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801130e:	2b00      	cmp	r3, #0
 8011310:	d008      	beq.n	8011324 <auto1_run+0x290>
		vars.tickstop = tick + stp->wait;
 8011312:	693b      	ldr	r3, [r7, #16]
 8011314:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011318:	461a      	mov	r2, r3
 801131a:	683b      	ldr	r3, [r7, #0]
 801131c:	4413      	add	r3, r2
 801131e:	4a14      	ldr	r2, [pc, #80]	; (8011370 <auto1_run+0x2dc>)
 8011320:	6093      	str	r3, [r2, #8]
 8011322:	e002      	b.n	801132a <auto1_run+0x296>
	} else {
		vars.tickstop = 0;
 8011324:	4b12      	ldr	r3, [pc, #72]	; (8011370 <auto1_run+0x2dc>)
 8011326:	2200      	movs	r2, #0
 8011328:	609a      	str	r2, [r3, #8]
	}
	if (stp->turnoutcmd) {
 801132a:	693b      	ldr	r3, [r7, #16]
 801132c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8011330:	2b00      	cmp	r3, #0
 8011332:	d006      	beq.n	8011342 <auto1_run+0x2ae>
		turnout_cmd(0, stp->turnoutcmd);
 8011334:	693b      	ldr	r3, [r7, #16]
 8011336:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801133a:	4619      	mov	r1, r3
 801133c:	2000      	movs	r0, #0
 801133e:	f002 f973 	bl	8013628 <turnout_cmd>
	}
	train_set_target_speed(0, stp->speed);
 8011342:	693b      	ldr	r3, [r7, #16]
 8011344:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011348:	4619      	mov	r1, r3
 801134a:	2000      	movs	r0, #0
 801134c:	f001 ff14 	bl	8013178 <train_set_target_speed>
	if ((1)) {
		int16_t v[2];
		v[0] = vars.step;
 8011350:	4b07      	ldr	r3, [pc, #28]	; (8011370 <auto1_run+0x2dc>)
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	b21b      	sxth	r3, r3
 8011356:	81bb      	strh	r3, [r7, #12]
		v[1] = stp->speed;
 8011358:	693b      	ldr	r3, [r7, #16]
 801135a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801135e:	81fb      	strh	r3, [r7, #14]
		train_notif(0, 'A', (void *)v, sizeof(int16_t)*2);
 8011360:	f107 020c 	add.w	r2, r7, #12
 8011364:	2304      	movs	r3, #4
 8011366:	2141      	movs	r1, #65	; 0x41
 8011368:	2000      	movs	r0, #0
 801136a:	f7ff fe45 	bl	8010ff8 <train_notif>
 801136e:	e00e      	b.n	801138e <auto1_run+0x2fa>
 8011370:	200001a4 	.word	0x200001a4
 8011374:	08015f80 	.word	0x08015f80
 8011378:	08015f8c 	.word	0x08015f8c
 801137c:	08017804 	.word	0x08017804
 8011380:	08015f94 	.word	0x08015f94
		if (-1 == vars.step) return;
 8011384:	bf00      	nop
 8011386:	e002      	b.n	801138e <auto1_run+0x2fa>
	if (-1 == vars.step) return;
 8011388:	bf00      	nop
 801138a:	e000      	b.n	801138e <auto1_run+0x2fa>
	return;
 801138c:	bf00      	nop
	}
}
 801138e:	3720      	adds	r7, #32
 8011390:	46bd      	mov	sp, r7
 8011392:	bd80      	pop	{r7, pc}

08011394 <block_canton_reset>:
#include <memory.h>
#include "block_canton.h"
#include "railconfig.h"

void block_canton_reset(const block_canton_config_t *c,  block_canton_vars_t *v)
{
 8011394:	b580      	push	{r7, lr}
 8011396:	b082      	sub	sp, #8
 8011398:	af00      	add	r7, sp, #0
 801139a:	6078      	str	r0, [r7, #4]
 801139c:	6039      	str	r1, [r7, #0]
	memset(v, 0, sizeof(*v));
 801139e:	2202      	movs	r2, #2
 80113a0:	2100      	movs	r1, #0
 80113a2:	6838      	ldr	r0, [r7, #0]
 80113a4:	f003 fd8a 	bl	8014ebc <memset>
	v->status = BLKCNT_STATUS_FREE;
 80113a8:	683b      	ldr	r3, [r7, #0]
 80113aa:	2200      	movs	r2, #0
 80113ac:	705a      	strb	r2, [r3, #1]
	v->trainidx = 0xFF;
 80113ae:	683b      	ldr	r3, [r7, #0]
 80113b0:	22ff      	movs	r2, #255	; 0xff
 80113b2:	701a      	strb	r2, [r3, #0]
}
 80113b4:	bf00      	nop
 80113b6:	3708      	adds	r7, #8
 80113b8:	46bd      	mov	sp, r7
 80113ba:	bd80      	pop	{r7, pc}

080113bc <blkcanton_problem>:


static void blkcanton_problem(void)
{
 80113bc:	b480      	push	{r7}
 80113be:	af00      	add	r7, sp, #0

}
 80113c0:	bf00      	nop
 80113c2:	46bd      	mov	sp, r7
 80113c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113c8:	4770      	bx	lr

080113ca <block_canton_exit>:

void block_canton_exit(uint8_t numtrain, uint8_t numcanton)
{
 80113ca:	b580      	push	{r7, lr}
 80113cc:	b084      	sub	sp, #16
 80113ce:	af00      	add	r7, sp, #0
 80113d0:	4603      	mov	r3, r0
 80113d2:	460a      	mov	r2, r1
 80113d4:	71fb      	strb	r3, [r7, #7]
 80113d6:	4613      	mov	r3, r2
 80113d8:	71bb      	strb	r3, [r7, #6]
	USE_BLOCK_CANTON(numcanton);
 80113da:	79bb      	ldrb	r3, [r7, #6]
 80113dc:	4618      	mov	r0, r3
 80113de:	f001 f831 	bl	8012444 <get_block_canton_cnf>
 80113e2:	60f8      	str	r0, [r7, #12]
 80113e4:	79bb      	ldrb	r3, [r7, #6]
 80113e6:	4618      	mov	r0, r3
 80113e8:	f001 f854 	bl	8012494 <get_block_canton_vars>
 80113ec:	60b8      	str	r0, [r7, #8]
    (void) bcconf; //unused
	if (bcvars->trainidx != numtrain) blkcanton_problem();
 80113ee:	68bb      	ldr	r3, [r7, #8]
 80113f0:	781b      	ldrb	r3, [r3, #0]
 80113f2:	79fa      	ldrb	r2, [r7, #7]
 80113f4:	429a      	cmp	r2, r3
 80113f6:	d001      	beq.n	80113fc <block_canton_exit+0x32>
 80113f8:	f7ff ffe0 	bl	80113bc <blkcanton_problem>
	bcvars->trainidx = 0xFF;
 80113fc:	68bb      	ldr	r3, [r7, #8]
 80113fe:	22ff      	movs	r2, #255	; 0xff
 8011400:	701a      	strb	r2, [r3, #0]
	bcvars->status = BLKCNT_STATUS_RELEASED;
 8011402:	68bb      	ldr	r3, [r7, #8]
 8011404:	2202      	movs	r2, #2
 8011406:	705a      	strb	r2, [r3, #1]
}
 8011408:	bf00      	nop
 801140a:	3710      	adds	r7, #16
 801140c:	46bd      	mov	sp, r7
 801140e:	bd80      	pop	{r7, pc}

08011410 <block_canton_enter>:
void block_canton_enter(uint8_t numtrain, uint8_t numcanton)
{
 8011410:	b580      	push	{r7, lr}
 8011412:	b084      	sub	sp, #16
 8011414:	af00      	add	r7, sp, #0
 8011416:	4603      	mov	r3, r0
 8011418:	460a      	mov	r2, r1
 801141a:	71fb      	strb	r3, [r7, #7]
 801141c:	4613      	mov	r3, r2
 801141e:	71bb      	strb	r3, [r7, #6]
	USE_BLOCK_CANTON(numcanton);
 8011420:	79bb      	ldrb	r3, [r7, #6]
 8011422:	4618      	mov	r0, r3
 8011424:	f001 f80e 	bl	8012444 <get_block_canton_cnf>
 8011428:	60f8      	str	r0, [r7, #12]
 801142a:	79bb      	ldrb	r3, [r7, #6]
 801142c:	4618      	mov	r0, r3
 801142e:	f001 f831 	bl	8012494 <get_block_canton_vars>
 8011432:	60b8      	str	r0, [r7, #8]
    (void) bcconf; //unused
	if (bcvars->trainidx != 0xFF) blkcanton_problem();
 8011434:	68bb      	ldr	r3, [r7, #8]
 8011436:	781b      	ldrb	r3, [r3, #0]
 8011438:	2bff      	cmp	r3, #255	; 0xff
 801143a:	d001      	beq.n	8011440 <block_canton_enter+0x30>
 801143c:	f7ff ffbe 	bl	80113bc <blkcanton_problem>
	bcvars->trainidx = numtrain;
 8011440:	68bb      	ldr	r3, [r7, #8]
 8011442:	79fa      	ldrb	r2, [r7, #7]
 8011444:	701a      	strb	r2, [r3, #0]
	bcvars->status = BLKCNT_STATUS_BUSY;
 8011446:	68bb      	ldr	r3, [r7, #8]
 8011448:	22ff      	movs	r2, #255	; 0xff
 801144a:	705a      	strb	r2, [r3, #1]
}
 801144c:	bf00      	nop
 801144e:	3710      	adds	r7, #16
 8011450:	46bd      	mov	sp, r7
 8011452:	bd80      	pop	{r7, pc}

08011454 <block_canton_get_next>:

void block_canton_get_next(uint8_t numcanton, int8_t dir, uint8_t *pnext, int8_t *pnextdir)
{
 8011454:	b580      	push	{r7, lr}
 8011456:	b08c      	sub	sp, #48	; 0x30
 8011458:	af00      	add	r7, sp, #0
 801145a:	60ba      	str	r2, [r7, #8]
 801145c:	607b      	str	r3, [r7, #4]
 801145e:	4603      	mov	r3, r0
 8011460:	73fb      	strb	r3, [r7, #15]
 8011462:	460b      	mov	r3, r1
 8011464:	73bb      	strb	r3, [r7, #14]
	const struct blk_side *side;
	int n = 0xFF;
 8011466:	23ff      	movs	r3, #255	; 0xff
 8011468:	62bb      	str	r3, [r7, #40]	; 0x28
	USE_BLOCK_CANTON(numcanton);
 801146a:	7bfb      	ldrb	r3, [r7, #15]
 801146c:	4618      	mov	r0, r3
 801146e:	f000 ffe9 	bl	8012444 <get_block_canton_cnf>
 8011472:	6278      	str	r0, [r7, #36]	; 0x24
 8011474:	7bfb      	ldrb	r3, [r7, #15]
 8011476:	4618      	mov	r0, r3
 8011478:	f001 f80c 	bl	8012494 <get_block_canton_vars>
 801147c:	6238      	str	r0, [r7, #32]
    (void) bcvars; //unused
	if (dir>0) {
 801147e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011482:	2b00      	cmp	r3, #0
 8011484:	dd03      	ble.n	801148e <block_canton_get_next+0x3a>
		side = &bcconf->right;
 8011486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011488:	3303      	adds	r3, #3
 801148a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801148c:	e001      	b.n	8011492 <block_canton_get_next+0x3e>
	} else {
		side = &bcconf->left;
 801148e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011490:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	if ((side->a != 0xFF) && (side->b != 0xFF)) {
 8011492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011494:	781b      	ldrb	r3, [r3, #0]
 8011496:	2bff      	cmp	r3, #255	; 0xff
 8011498:	d030      	beq.n	80114fc <block_canton_get_next+0xa8>
 801149a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801149c:	785b      	ldrb	r3, [r3, #1]
 801149e:	2bff      	cmp	r3, #255	; 0xff
 80114a0:	d02c      	beq.n	80114fc <block_canton_get_next+0xa8>
		if (side->turnout == 0xFF) {
 80114a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114a4:	789b      	ldrb	r3, [r3, #2]
 80114a6:	2bff      	cmp	r3, #255	; 0xff
 80114a8:	d105      	bne.n	80114b6 <block_canton_get_next+0x62>
			blkcanton_problem();
 80114aa:	f7ff ff87 	bl	80113bc <blkcanton_problem>
			n = side->a;
 80114ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114b0:	781b      	ldrb	r3, [r3, #0]
 80114b2:	62bb      	str	r3, [r7, #40]	; 0x28
		if (side->turnout == 0xFF) {
 80114b4:	e039      	b.n	801152a <block_canton_get_next+0xd6>
		} else {
			USE_TURNOUT(side->turnout);
 80114b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114b8:	789b      	ldrb	r3, [r3, #2]
 80114ba:	4618      	mov	r0, r3
 80114bc:	f001 f860 	bl	8012580 <get_turnout_cnf>
 80114c0:	61f8      	str	r0, [r7, #28]
 80114c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114c4:	789b      	ldrb	r3, [r3, #2]
 80114c6:	4618      	mov	r0, r3
 80114c8:	f001 f880 	bl	80125cc <get_turnout_vars>
 80114cc:	61b8      	str	r0, [r7, #24]
            (void) aconf; // unused
			switch (avars->value) {
 80114ce:	69bb      	ldr	r3, [r7, #24]
 80114d0:	f993 3000 	ldrsb.w	r3, [r3]
 80114d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80114d8:	d005      	beq.n	80114e6 <block_canton_get_next+0x92>
 80114da:	2b01      	cmp	r3, #1
 80114dc:	d107      	bne.n	80114ee <block_canton_get_next+0x9a>
			case 1: n = side->b; break;
 80114de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114e0:	785b      	ldrb	r3, [r3, #1]
 80114e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80114e4:	e009      	b.n	80114fa <block_canton_get_next+0xa6>
			case -1: n = side->a; break;
 80114e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114e8:	781b      	ldrb	r3, [r3, #0]
 80114ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80114ec:	e005      	b.n	80114fa <block_canton_get_next+0xa6>
			default: blkcanton_problem(); n = side->a;
 80114ee:	f7ff ff65 	bl	80113bc <blkcanton_problem>
 80114f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114f4:	781b      	ldrb	r3, [r3, #0]
 80114f6:	62bb      	str	r3, [r7, #40]	; 0x28
		if (side->turnout == 0xFF) {
 80114f8:	e017      	b.n	801152a <block_canton_get_next+0xd6>
 80114fa:	e016      	b.n	801152a <block_canton_get_next+0xd6>
			}
		}
	} else if (side->a) {
 80114fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114fe:	781b      	ldrb	r3, [r3, #0]
 8011500:	2b00      	cmp	r3, #0
 8011502:	d003      	beq.n	801150c <block_canton_get_next+0xb8>
		n = side->a;
 8011504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011506:	781b      	ldrb	r3, [r3, #0]
 8011508:	62bb      	str	r3, [r7, #40]	; 0x28
 801150a:	e00e      	b.n	801152a <block_canton_get_next+0xd6>
	} else if (side->b) {
 801150c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801150e:	785b      	ldrb	r3, [r3, #1]
 8011510:	2b00      	cmp	r3, #0
 8011512:	d003      	beq.n	801151c <block_canton_get_next+0xc8>
		n = side->b;
 8011514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011516:	785b      	ldrb	r3, [r3, #1]
 8011518:	62bb      	str	r3, [r7, #40]	; 0x28
 801151a:	e006      	b.n	801152a <block_canton_get_next+0xd6>
	} else {
		*pnext = 0xFF;
 801151c:	68bb      	ldr	r3, [r7, #8]
 801151e:	22ff      	movs	r2, #255	; 0xff
 8011520:	701a      	strb	r2, [r3, #0]
		*pnextdir = 0;
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	2200      	movs	r2, #0
 8011526:	701a      	strb	r2, [r3, #0]
		return;
 8011528:	e02f      	b.n	801158a <block_canton_get_next+0x136>
	}
	*pnext = n;
 801152a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801152c:	b2da      	uxtb	r2, r3
 801152e:	68bb      	ldr	r3, [r7, #8]
 8011530:	701a      	strb	r2, [r3, #0]
    if (n == 0xFF) {
 8011532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011534:	2bff      	cmp	r3, #255	; 0xff
 8011536:	d103      	bne.n	8011540 <block_canton_get_next+0xec>
        *pnextdir = 0;
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	2200      	movs	r2, #0
 801153c:	701a      	strb	r2, [r3, #0]
        return;
 801153e:	e024      	b.n	801158a <block_canton_get_next+0x136>
    }
	const block_canton_config_t *nconf = get_block_canton_cnf(n);
 8011540:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011542:	f000 ff7f 	bl	8012444 <get_block_canton_cnf>
 8011546:	6178      	str	r0, [r7, #20]
	if (nconf->left.a == numcanton || nconf->left.b == numcanton) {
 8011548:	697b      	ldr	r3, [r7, #20]
 801154a:	781b      	ldrb	r3, [r3, #0]
 801154c:	7bfa      	ldrb	r2, [r7, #15]
 801154e:	429a      	cmp	r2, r3
 8011550:	d004      	beq.n	801155c <block_canton_get_next+0x108>
 8011552:	697b      	ldr	r3, [r7, #20]
 8011554:	785b      	ldrb	r3, [r3, #1]
 8011556:	7bfa      	ldrb	r2, [r7, #15]
 8011558:	429a      	cmp	r2, r3
 801155a:	d103      	bne.n	8011564 <block_canton_get_next+0x110>
		*pnextdir = 1;
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	2201      	movs	r2, #1
 8011560:	701a      	strb	r2, [r3, #0]
 8011562:	e012      	b.n	801158a <block_canton_get_next+0x136>
	} else if (nconf->right.a == numcanton || nconf->right.b == numcanton) {
 8011564:	697b      	ldr	r3, [r7, #20]
 8011566:	78db      	ldrb	r3, [r3, #3]
 8011568:	7bfa      	ldrb	r2, [r7, #15]
 801156a:	429a      	cmp	r2, r3
 801156c:	d004      	beq.n	8011578 <block_canton_get_next+0x124>
 801156e:	697b      	ldr	r3, [r7, #20]
 8011570:	791b      	ldrb	r3, [r3, #4]
 8011572:	7bfa      	ldrb	r2, [r7, #15]
 8011574:	429a      	cmp	r2, r3
 8011576:	d103      	bne.n	8011580 <block_canton_get_next+0x12c>
		*pnextdir = -1;
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	22ff      	movs	r2, #255	; 0xff
 801157c:	701a      	strb	r2, [r3, #0]
 801157e:	e004      	b.n	801158a <block_canton_get_next+0x136>
	} else {
		blkcanton_problem();
 8011580:	f7ff ff1c 	bl	80113bc <blkcanton_problem>
		*pnextdir = 1;
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	2201      	movs	r2, #1
 8011588:	701a      	strb	r2, [r3, #0]
	}

}
 801158a:	3730      	adds	r7, #48	; 0x30
 801158c:	46bd      	mov	sp, r7
 801158e:	bd80      	pop	{r7, pc}

08011590 <canton_error>:
{
 8011590:	b580      	push	{r7, lr}
 8011592:	b082      	sub	sp, #8
 8011594:	af00      	add	r7, sp, #0
 8011596:	6078      	str	r0, [r7, #4]
 8011598:	6039      	str	r1, [r7, #0]
	return trainctl_error('C', code, msg);
 801159a:	683a      	ldr	r2, [r7, #0]
 801159c:	6879      	ldr	r1, [r7, #4]
 801159e:	2043      	movs	r0, #67	; 0x43
 80115a0:	f000 fd24 	bl	8011fec <trainctl_error>
 80115a4:	4603      	mov	r3, r0
}
 80115a6:	4618      	mov	r0, r3
 80115a8:	3708      	adds	r7, #8
 80115aa:	46bd      	mov	sp, r7
 80115ac:	bd80      	pop	{r7, pc}

080115ae <canton_error_rc>:
{
 80115ae:	b580      	push	{r7, lr}
 80115b0:	b084      	sub	sp, #16
 80115b2:	af00      	add	r7, sp, #0
 80115b4:	60f8      	str	r0, [r7, #12]
 80115b6:	60b9      	str	r1, [r7, #8]
 80115b8:	607a      	str	r2, [r7, #4]
	trainctl_error('C', code, msg);
 80115ba:	687a      	ldr	r2, [r7, #4]
 80115bc:	68b9      	ldr	r1, [r7, #8]
 80115be:	2043      	movs	r0, #67	; 0x43
 80115c0:	f000 fd14 	bl	8011fec <trainctl_error>
	return rc;
 80115c4:	68fb      	ldr	r3, [r7, #12]
}
 80115c6:	4618      	mov	r0, r3
 80115c8:	3710      	adds	r7, #16
 80115ca:	46bd      	mov	sp, r7
 80115cc:	bd80      	pop	{r7, pc}

080115ce <canton_notif>:
{
 80115ce:	b580      	push	{r7, lr}
 80115d0:	b086      	sub	sp, #24
 80115d2:	af02      	add	r7, sp, #8
 80115d4:	60ba      	str	r2, [r7, #8]
 80115d6:	607b      	str	r3, [r7, #4]
 80115d8:	4603      	mov	r3, r0
 80115da:	73fb      	strb	r3, [r7, #15]
 80115dc:	460b      	mov	r3, r1
 80115de:	73bb      	strb	r3, [r7, #14]
	trainctl_notif('C', canton_idx, cmd, dta, dtalen);
 80115e0:	7bba      	ldrb	r2, [r7, #14]
 80115e2:	7bf9      	ldrb	r1, [r7, #15]
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	9300      	str	r3, [sp, #0]
 80115e8:	68bb      	ldr	r3, [r7, #8]
 80115ea:	2043      	movs	r0, #67	; 0x43
 80115ec:	f002 fd32 	bl	8014054 <trainctl_notif>
}
 80115f0:	bf00      	nop
 80115f2:	3710      	adds	r7, #16
 80115f4:	46bd      	mov	sp, r7
 80115f6:	bd80      	pop	{r7, pc}

080115f8 <canton_reset>:
#ifndef TRAIN_SIMU
TIM_HandleTypeDef *CantonTimerHandles[8] = {NULL};
#endif

void canton_reset(const canton_config_t *c, canton_vars_t *v)
{
 80115f8:	b580      	push	{r7, lr}
 80115fa:	b082      	sub	sp, #8
 80115fc:	af00      	add	r7, sp, #0
 80115fe:	6078      	str	r0, [r7, #4]
 8011600:	6039      	str	r1, [r7, #0]
	memset(v, 0, sizeof(*v));
 8011602:	2214      	movs	r2, #20
 8011604:	2100      	movs	r1, #0
 8011606:	6838      	ldr	r0, [r7, #0]
 8011608:	f003 fc58 	bl	8014ebc <memset>
	v->curtrainidx = 0xFF;
 801160c:	683b      	ldr	r3, [r7, #0]
 801160e:	22ff      	movs	r2, #255	; 0xff
 8011610:	731a      	strb	r2, [r3, #12]
	//v->status = canton_free;
}
 8011612:	bf00      	nop
 8011614:	3708      	adds	r7, #8
 8011616:	46bd      	mov	sp, r7
 8011618:	bd80      	pop	{r7, pc}

0801161a <canton_set_train>:

void canton_set_train(int numcanton,   int trainidx)
{
 801161a:	b580      	push	{r7, lr}
 801161c:	b084      	sub	sp, #16
 801161e:	af00      	add	r7, sp, #0
 8011620:	6078      	str	r0, [r7, #4]
 8011622:	6039      	str	r1, [r7, #0]
	USE_CANTON(numcanton) // cconf cvars
 8011624:	6878      	ldr	r0, [r7, #4]
 8011626:	f000 febd 	bl	80123a4 <get_canton_cnf>
 801162a:	60f8      	str	r0, [r7, #12]
 801162c:	6878      	ldr	r0, [r7, #4]
 801162e:	f000 fee1 	bl	80123f4 <get_canton_vars>
 8011632:	60b8      	str	r0, [r7, #8]
	(void)cconf; // unused
	cvars->curtrainidx = trainidx;
 8011634:	683b      	ldr	r3, [r7, #0]
 8011636:	b2da      	uxtb	r2, r3
 8011638:	68bb      	ldr	r3, [r7, #8]
 801163a:	731a      	strb	r2, [r3, #12]
}
 801163c:	bf00      	nop
 801163e:	3710      	adds	r7, #16
 8011640:	46bd      	mov	sp, r7
 8011642:	bd80      	pop	{r7, pc}

08011644 <canton_set_pwm>:
// #pragma mark -

#ifndef TRAIN_SIMU

void canton_set_pwm(const canton_config_t *c, canton_vars_t *v,  int dir, int duty)
{
 8011644:	b580      	push	{r7, lr}
 8011646:	b088      	sub	sp, #32
 8011648:	af00      	add	r7, sp, #0
 801164a:	60f8      	str	r0, [r7, #12]
 801164c:	60b9      	str	r1, [r7, #8]
 801164e:	607a      	str	r2, [r7, #4]
 8011650:	603b      	str	r3, [r7, #0]
	if (c->canton_type == CANTON_TYPE_DUMMY) return;
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	781b      	ldrb	r3, [r3, #0]
 8011656:	2b00      	cmp	r3, #0
 8011658:	f000 8097 	beq.w	801178a <canton_set_pwm+0x146>

	if (c->canton_type == CANTON_TYPE_REMOTE ) {
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	781b      	ldrb	r3, [r3, #0]
 8011660:	2bff      	cmp	r3, #255	; 0xff
 8011662:	f000 8094 	beq.w	801178e <canton_set_pwm+0x14a>
		return;
	}
	int t = 2*duty; // with centered pwm (or normal)
 8011666:	683b      	ldr	r3, [r7, #0]
 8011668:	005b      	lsls	r3, r3, #1
 801166a:	61bb      	str	r3, [r7, #24]

	if ((v->cur_dir == dir) && (v->cur_pwm_duty==duty)) return;
 801166c:	68bb      	ldr	r3, [r7, #8]
 801166e:	f993 3000 	ldrsb.w	r3, [r3]
 8011672:	461a      	mov	r2, r3
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	4293      	cmp	r3, r2
 8011678:	d106      	bne.n	8011688 <canton_set_pwm+0x44>
 801167a:	68bb      	ldr	r3, [r7, #8]
 801167c:	885b      	ldrh	r3, [r3, #2]
 801167e:	461a      	mov	r2, r3
 8011680:	683b      	ldr	r3, [r7, #0]
 8011682:	4293      	cmp	r3, r2
 8011684:	f000 8085 	beq.w	8011792 <canton_set_pwm+0x14e>

	TIM_HandleTypeDef *pwm_timer = CantonTimerHandles[c->pwm_timer_num];
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 801168e:	461a      	mov	r2, r3
 8011690:	4b43      	ldr	r3, [pc, #268]	; (80117a0 <canton_set_pwm+0x15c>)
 8011692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011696:	617b      	str	r3, [r7, #20]
	if (!pwm_timer) return;
 8011698:	697b      	ldr	r3, [r7, #20]
 801169a:	2b00      	cmp	r3, #0
 801169c:	d07b      	beq.n	8011796 <canton_set_pwm+0x152>
	if (v->cur_dir != dir) {
 801169e:	68bb      	ldr	r3, [r7, #8]
 80116a0:	f993 3000 	ldrsb.w	r3, [r3]
 80116a4:	461a      	mov	r2, r3
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	4293      	cmp	r3, r2
 80116aa:	d023      	beq.n	80116f4 <canton_set_pwm+0xb0>
		v->cur_dir = dir;
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	b25a      	sxtb	r2, r3
 80116b0:	68bb      	ldr	r3, [r7, #8]
 80116b2:	701a      	strb	r2, [r3, #0]
		if (dir>0) {
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	dd0e      	ble.n	80116d8 <canton_set_pwm+0x94>
			HAL_TIM_PWM_Stop(pwm_timer, c->ch1);
 80116ba:	68fb      	ldr	r3, [r7, #12]
 80116bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80116c0:	4619      	mov	r1, r3
 80116c2:	6978      	ldr	r0, [r7, #20]
 80116c4:	f7f6 fcfc 	bl	80080c0 <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Start(pwm_timer, c->ch0);
 80116c8:	68fb      	ldr	r3, [r7, #12]
 80116ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80116ce:	4619      	mov	r1, r3
 80116d0:	6978      	ldr	r0, [r7, #20]
 80116d2:	f7f6 fcb7 	bl	8008044 <HAL_TIM_PWM_Start>
 80116d6:	e00d      	b.n	80116f4 <canton_set_pwm+0xb0>
		} else {
			HAL_TIM_PWM_Stop(pwm_timer, c->ch0);
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80116de:	4619      	mov	r1, r3
 80116e0:	6978      	ldr	r0, [r7, #20]
 80116e2:	f7f6 fced 	bl	80080c0 <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Start(pwm_timer, c->ch1);
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80116ec:	4619      	mov	r1, r3
 80116ee:	6978      	ldr	r0, [r7, #20]
 80116f0:	f7f6 fca8 	bl	8008044 <HAL_TIM_PWM_Start>
		}
	}
	v->cur_pwm_duty = duty;
 80116f4:	683b      	ldr	r3, [r7, #0]
 80116f6:	b29a      	uxth	r2, r3
 80116f8:	68bb      	ldr	r3, [r7, #8]
 80116fa:	805a      	strh	r2, [r3, #2]
	uint32_t ch;
	if (dir>0) {
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	2b00      	cmp	r3, #0
 8011700:	dd04      	ble.n	801170c <canton_set_pwm+0xc8>
		ch = c->ch0;
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011708:	61fb      	str	r3, [r7, #28]
 801170a:	e003      	b.n	8011714 <canton_set_pwm+0xd0>
		//TIM1->CCR1 = t;
	} else {
		ch = c->ch1;
 801170c:	68fb      	ldr	r3, [r7, #12]
 801170e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011712:	61fb      	str	r3, [r7, #28]
		//TIM1->CCR2 = t;
	}
	switch (ch) {
 8011714:	69fb      	ldr	r3, [r7, #28]
 8011716:	2b0c      	cmp	r3, #12
 8011718:	d830      	bhi.n	801177c <canton_set_pwm+0x138>
 801171a:	a201      	add	r2, pc, #4	; (adr r2, 8011720 <canton_set_pwm+0xdc>)
 801171c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011720:	08011755 	.word	0x08011755
 8011724:	0801177d 	.word	0x0801177d
 8011728:	0801177d 	.word	0x0801177d
 801172c:	0801177d 	.word	0x0801177d
 8011730:	0801175f 	.word	0x0801175f
 8011734:	0801177d 	.word	0x0801177d
 8011738:	0801177d 	.word	0x0801177d
 801173c:	0801177d 	.word	0x0801177d
 8011740:	08011769 	.word	0x08011769
 8011744:	0801177d 	.word	0x0801177d
 8011748:	0801177d 	.word	0x0801177d
 801174c:	0801177d 	.word	0x0801177d
 8011750:	08011773 	.word	0x08011773
	case TIM_CHANNEL_1:
		pwm_timer->Instance->CCR1 = t;
 8011754:	697b      	ldr	r3, [r7, #20]
 8011756:	681b      	ldr	r3, [r3, #0]
 8011758:	69ba      	ldr	r2, [r7, #24]
 801175a:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 801175c:	e01c      	b.n	8011798 <canton_set_pwm+0x154>
	case TIM_CHANNEL_2:
		pwm_timer->Instance->CCR2 = t;
 801175e:	697b      	ldr	r3, [r7, #20]
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	69ba      	ldr	r2, [r7, #24]
 8011764:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8011766:	e017      	b.n	8011798 <canton_set_pwm+0x154>
	case TIM_CHANNEL_3:
		pwm_timer->Instance->CCR3 = t;
 8011768:	697b      	ldr	r3, [r7, #20]
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	69ba      	ldr	r2, [r7, #24]
 801176e:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8011770:	e012      	b.n	8011798 <canton_set_pwm+0x154>
	case TIM_CHANNEL_4:
		pwm_timer->Instance->CCR4 = t;
 8011772:	697b      	ldr	r3, [r7, #20]
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	69ba      	ldr	r2, [r7, #24]
 8011778:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 801177a:	e00d      	b.n	8011798 <canton_set_pwm+0x154>
	default:
		canton_error(ERR_BAD_PARAM_TIM, "bad timer channel");
 801177c:	4909      	ldr	r1, [pc, #36]	; (80117a4 <canton_set_pwm+0x160>)
 801177e:	f06f 0002 	mvn.w	r0, #2
 8011782:	f7ff ff05 	bl	8011590 <canton_error>
		break;
 8011786:	bf00      	nop
 8011788:	e006      	b.n	8011798 <canton_set_pwm+0x154>
	if (c->canton_type == CANTON_TYPE_DUMMY) return;
 801178a:	bf00      	nop
 801178c:	e004      	b.n	8011798 <canton_set_pwm+0x154>
		return;
 801178e:	bf00      	nop
 8011790:	e002      	b.n	8011798 <canton_set_pwm+0x154>
	if ((v->cur_dir == dir) && (v->cur_pwm_duty==duty)) return;
 8011792:	bf00      	nop
 8011794:	e000      	b.n	8011798 <canton_set_pwm+0x154>
	if (!pwm_timer) return;
 8011796:	bf00      	nop
	}
}
 8011798:	3720      	adds	r7, #32
 801179a:	46bd      	mov	sp, r7
 801179c:	bd80      	pop	{r7, pc}
 801179e:	bf00      	nop
 80117a0:	20005188 	.word	0x20005188
 80117a4:	08015f9c 	.word	0x08015f9c

080117a8 <canton_set_volt>:
void canton_set_volt(const canton_config_t *c, canton_vars_t *v, int voltidx)
{
 80117a8:	b580      	push	{r7, lr}
 80117aa:	b084      	sub	sp, #16
 80117ac:	af00      	add	r7, sp, #0
 80117ae:	60f8      	str	r0, [r7, #12]
 80117b0:	60b9      	str	r1, [r7, #8]
 80117b2:	607a      	str	r2, [r7, #4]
	if (c->canton_type == CANTON_TYPE_DUMMY) return;
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	781b      	ldrb	r3, [r3, #0]
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d048      	beq.n	801184e <canton_set_volt+0xa6>

	if (c->canton_type == CANTON_TYPE_REMOTE ) {
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	781b      	ldrb	r3, [r3, #0]
 80117c0:	2bff      	cmp	r3, #255	; 0xff
 80117c2:	d046      	beq.n	8011852 <canton_set_volt+0xaa>
		return;
	}
	v->cur_voltidx = voltidx;
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	b2da      	uxtb	r2, r3
 80117c8:	68bb      	ldr	r3, [r7, #8]
 80117ca:	705a      	strb	r2, [r3, #1]
    v-> selected_centivolt =  (c->volts[v->cur_voltidx]);
 80117cc:	68bb      	ldr	r3, [r7, #8]
 80117ce:	785b      	ldrb	r3, [r3, #1]
 80117d0:	68fa      	ldr	r2, [r7, #12]
 80117d2:	005b      	lsls	r3, r3, #1
 80117d4:	4413      	add	r3, r2
 80117d6:	885b      	ldrh	r3, [r3, #2]
 80117d8:	b21a      	sxth	r2, r3
 80117da:	68bb      	ldr	r3, [r7, #8]
 80117dc:	811a      	strh	r2, [r3, #8]


	HAL_GPIO_WritePin(c->volt_port_b0, c->volt_b0, (voltidx & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	6e58      	ldr	r0, [r3, #100]	; 0x64
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	f8b3 1074 	ldrh.w	r1, [r3, #116]	; 0x74
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	b2db      	uxtb	r3, r3
 80117ec:	f003 0301 	and.w	r3, r3, #1
 80117f0:	b2db      	uxtb	r3, r3
 80117f2:	461a      	mov	r2, r3
 80117f4:	f7f2 f892 	bl	800391c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(c->volt_port_b1, c->volt_b1, (voltidx & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80117f8:	68fb      	ldr	r3, [r7, #12]
 80117fa:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80117fc:	68fb      	ldr	r3, [r7, #12]
 80117fe:	f8b3 1076 	ldrh.w	r1, [r3, #118]	; 0x76
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	105b      	asrs	r3, r3, #1
 8011806:	b2db      	uxtb	r3, r3
 8011808:	f003 0301 	and.w	r3, r3, #1
 801180c:	b2db      	uxtb	r3, r3
 801180e:	461a      	mov	r2, r3
 8011810:	f7f2 f884 	bl	800391c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(c->volt_port_b2, c->volt_b2, (voltidx & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8011814:	68fb      	ldr	r3, [r7, #12]
 8011816:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8011818:	68fb      	ldr	r3, [r7, #12]
 801181a:	f8b3 1078 	ldrh.w	r1, [r3, #120]	; 0x78
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	109b      	asrs	r3, r3, #2
 8011822:	b2db      	uxtb	r3, r3
 8011824:	f003 0301 	and.w	r3, r3, #1
 8011828:	b2db      	uxtb	r3, r3
 801182a:	461a      	mov	r2, r3
 801182c:	f7f2 f876 	bl	800391c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(c->volt_port_b3, c->volt_b3, (voltidx & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8011834:	68fb      	ldr	r3, [r7, #12]
 8011836:	f8b3 107a 	ldrh.w	r1, [r3, #122]	; 0x7a
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	10db      	asrs	r3, r3, #3
 801183e:	b2db      	uxtb	r3, r3
 8011840:	f003 0301 	and.w	r3, r3, #1
 8011844:	b2db      	uxtb	r3, r3
 8011846:	461a      	mov	r2, r3
 8011848:	f7f2 f868 	bl	800391c <HAL_GPIO_WritePin>
 801184c:	e002      	b.n	8011854 <canton_set_volt+0xac>
	if (c->canton_type == CANTON_TYPE_DUMMY) return;
 801184e:	bf00      	nop
 8011850:	e000      	b.n	8011854 <canton_set_volt+0xac>
		return;
 8011852:	bf00      	nop
	if (voltidx & 0x04) s |= VOLT_0_SEL2_Pin; else r |=  c->volt_b2;
	if (voltidx & 0x08) s |= VOLT_0_SEL3_Pin; else r |=  c->volt_b3;
	HAL_GPIO_WritePin(c->volt_port, s, GPIO_PIN_SET);
	HAL_GPIO_WritePin(c->volt_port, r, GPIO_PIN_RESET);
#endif
}
 8011854:	3710      	adds	r7, #16
 8011856:	46bd      	mov	sp, r7
 8011858:	bd80      	pop	{r7, pc}
	...

0801185c <volt_index>:
int volt_index(uint16_t mili_power,
		const canton_config_t *c1, canton_vars_t *v1,
		const canton_config_t *c2, canton_vars_t *v2,
		int *pvi1, int *pvi2,
		train_volt_policy_t pol)
{
 801185c:	b580      	push	{r7, lr}
 801185e:	b08e      	sub	sp, #56	; 0x38
 8011860:	af00      	add	r7, sp, #0
 8011862:	60b9      	str	r1, [r7, #8]
 8011864:	607a      	str	r2, [r7, #4]
 8011866:	603b      	str	r3, [r7, #0]
 8011868:	4603      	mov	r3, r0
 801186a:	81fb      	strh	r3, [r7, #14]
	int duty=0;
 801186c:	2300      	movs	r3, #0
 801186e:	637b      	str	r3, [r7, #52]	; 0x34
	*pvi1 = 15;
 8011870:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011872:	220f      	movs	r2, #15
 8011874:	601a      	str	r2, [r3, #0]
	*pvi2 = 15;
 8011876:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011878:	220f      	movs	r2, #15
 801187a:	601a      	str	r2, [r3, #0]

	if (mili_power <0)    return canton_error_rc(0, ERR_BAD_PARAM_MPOW, "negative milipower");
	if (mili_power >1000) return canton_error_rc(0, ERR_BAD_PARAM_MPOW, "milipower should be 0-999");
 801187c:	89fb      	ldrh	r3, [r7, #14]
 801187e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011882:	d907      	bls.n	8011894 <volt_index+0x38>
 8011884:	4a9a      	ldr	r2, [pc, #616]	; (8011af0 <volt_index+0x294>)
 8011886:	f06f 0103 	mvn.w	r1, #3
 801188a:	2000      	movs	r0, #0
 801188c:	f7ff fe8f 	bl	80115ae <canton_error_rc>
 8011890:	4603      	mov	r3, r0
 8011892:	e128      	b.n	8011ae6 <volt_index+0x28a>
	switch (pol) {
 8011894:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8011898:	2b04      	cmp	r3, #4
 801189a:	d80d      	bhi.n	80118b8 <volt_index+0x5c>
 801189c:	a201      	add	r2, pc, #4	; (adr r2, 80118a4 <volt_index+0x48>)
 801189e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118a2:	bf00      	nop
 80118a4:	080118e9 	.word	0x080118e9
 80118a8:	080118cd 	.word	0x080118cd
 80118ac:	08011a59 	.word	0x08011a59
 80118b0:	08011961 	.word	0x08011961
 80118b4:	080119dd 	.word	0x080119dd
	default :
        duty = 0;
 80118b8:	2300      	movs	r3, #0
 80118ba:	637b      	str	r3, [r7, #52]	; 0x34
		return canton_error_rc(0, ERR_BAD_PARAM_VPOL, "bad volt policy");
 80118bc:	4a8d      	ldr	r2, [pc, #564]	; (8011af4 <volt_index+0x298>)
 80118be:	f06f 0104 	mvn.w	r1, #4
 80118c2:	2000      	movs	r0, #0
 80118c4:	f7ff fe73 	bl	80115ae <canton_error_rc>
 80118c8:	4603      	mov	r3, r0
 80118ca:	e10c      	b.n	8011ae6 <volt_index+0x28a>
		break;
	case vpolicy_pure_pwm:
		*pvi1 = 0;
 80118cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80118ce:	2200      	movs	r2, #0
 80118d0:	601a      	str	r2, [r3, #0]
		*pvi2 = 0;
 80118d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80118d4:	2200      	movs	r2, #0
 80118d6:	601a      	str	r2, [r3, #0]
		duty = mili_power / 10;
 80118d8:	89fb      	ldrh	r3, [r7, #14]
 80118da:	4a87      	ldr	r2, [pc, #540]	; (8011af8 <volt_index+0x29c>)
 80118dc:	fba2 2303 	umull	r2, r3, r2, r3
 80118e0:	08db      	lsrs	r3, r3, #3
 80118e2:	b29b      	uxth	r3, r3
 80118e4:	637b      	str	r3, [r7, #52]	; 0x34
		break;
 80118e6:	e0f8      	b.n	8011ada <volt_index+0x27e>
    case vpolicy_normal:
            // fall back to full volt +  pwm
            *pvi1 = *pvi2 = 0;
 80118e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80118ea:	2200      	movs	r2, #0
 80118ec:	601a      	str	r2, [r3, #0]
 80118ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80118f0:	681a      	ldr	r2, [r3, #0]
 80118f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80118f4:	601a      	str	r2, [r3, #0]
            duty = mili_power / 10;
 80118f6:	89fb      	ldrh	r3, [r7, #14]
 80118f8:	4a7f      	ldr	r2, [pc, #508]	; (8011af8 <volt_index+0x29c>)
 80118fa:	fba2 2303 	umull	r2, r3, r2, r3
 80118fe:	08db      	lsrs	r3, r3, #3
 8011900:	b29b      	uxth	r3, r3
 8011902:	637b      	str	r3, [r7, #52]	; 0x34
            for (int i=15; i>=0; i--) {
 8011904:	230f      	movs	r3, #15
 8011906:	633b      	str	r3, [r7, #48]	; 0x30
 8011908:	e026      	b.n	8011958 <volt_index+0xfc>
                if (!c1->volts[i]) continue;
 801190a:	68ba      	ldr	r2, [r7, #8]
 801190c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801190e:	005b      	lsls	r3, r3, #1
 8011910:	4413      	add	r3, r2
 8011912:	885b      	ldrh	r3, [r3, #2]
 8011914:	2b00      	cmp	r3, #0
 8011916:	d019      	beq.n	801194c <volt_index+0xf0>
                // c1->volts in 0.01V unit
                int d = 100*mili_power / c1->volts[i];
 8011918:	89fb      	ldrh	r3, [r7, #14]
 801191a:	2264      	movs	r2, #100	; 0x64
 801191c:	fb02 f203 	mul.w	r2, r2, r3
 8011920:	68b9      	ldr	r1, [r7, #8]
 8011922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011924:	005b      	lsls	r3, r3, #1
 8011926:	440b      	add	r3, r1
 8011928:	885b      	ldrh	r3, [r3, #2]
 801192a:	fb92 f3f3 	sdiv	r3, r2, r3
 801192e:	613b      	str	r3, [r7, #16]
                if (d>MAX_PWM) {
 8011930:	693b      	ldr	r3, [r7, #16]
 8011932:	2b5a      	cmp	r3, #90	; 0x5a
 8011934:	dc0c      	bgt.n	8011950 <volt_index+0xf4>
                    continue;
                }
                // XXX for now we assume all canton have same board with same voltage level
                *pvi1 = *pvi2 = i;
 8011936:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011938:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801193a:	601a      	str	r2, [r3, #0]
 801193c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801193e:	681a      	ldr	r2, [r3, #0]
 8011940:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011942:	601a      	str	r2, [r3, #0]
                duty = d;
 8011944:	693b      	ldr	r3, [r7, #16]
 8011946:	637b      	str	r3, [r7, #52]	; 0x34
                break;
 8011948:	bf00      	nop
            }
		break;
 801194a:	e0c6      	b.n	8011ada <volt_index+0x27e>
                if (!c1->volts[i]) continue;
 801194c:	bf00      	nop
 801194e:	e000      	b.n	8011952 <volt_index+0xf6>
                    continue;
 8011950:	bf00      	nop
            for (int i=15; i>=0; i--) {
 8011952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011954:	3b01      	subs	r3, #1
 8011956:	633b      	str	r3, [r7, #48]	; 0x30
 8011958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801195a:	2b00      	cmp	r3, #0
 801195c:	dad5      	bge.n	801190a <volt_index+0xae>
		break;
 801195e:	e0bc      	b.n	8011ada <volt_index+0x27e>
    case vpolicy_v2:
    	*pvi1 = *pvi2 = 0;
 8011960:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011962:	2200      	movs	r2, #0
 8011964:	601a      	str	r2, [r3, #0]
 8011966:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011968:	681a      	ldr	r2, [r3, #0]
 801196a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801196c:	601a      	str	r2, [r3, #0]
    	duty = mili_power / 10;
 801196e:	89fb      	ldrh	r3, [r7, #14]
 8011970:	4a61      	ldr	r2, [pc, #388]	; (8011af8 <volt_index+0x29c>)
 8011972:	fba2 2303 	umull	r2, r3, r2, r3
 8011976:	08db      	lsrs	r3, r3, #3
 8011978:	b29b      	uxth	r3, r3
 801197a:	637b      	str	r3, [r7, #52]	; 0x34
    	for (int i=15; i>=0; i--) {
 801197c:	230f      	movs	r3, #15
 801197e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011980:	e028      	b.n	80119d4 <volt_index+0x178>
    		if (!c1->volts_v2[i]) continue;
 8011982:	68ba      	ldr	r2, [r7, #8]
 8011984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011986:	3310      	adds	r3, #16
 8011988:	005b      	lsls	r3, r3, #1
 801198a:	4413      	add	r3, r2
 801198c:	885b      	ldrh	r3, [r3, #2]
 801198e:	2b00      	cmp	r3, #0
 8011990:	d01a      	beq.n	80119c8 <volt_index+0x16c>
    		// c1->volts in 0.01V unit
			int d = 100*mili_power / c1->volts_v2[i];
 8011992:	89fb      	ldrh	r3, [r7, #14]
 8011994:	2264      	movs	r2, #100	; 0x64
 8011996:	fb02 f203 	mul.w	r2, r2, r3
 801199a:	68b9      	ldr	r1, [r7, #8]
 801199c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801199e:	3310      	adds	r3, #16
 80119a0:	005b      	lsls	r3, r3, #1
 80119a2:	440b      	add	r3, r1
 80119a4:	885b      	ldrh	r3, [r3, #2]
 80119a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80119aa:	61bb      	str	r3, [r7, #24]
			if (d>MAX_PWM) {
 80119ac:	69bb      	ldr	r3, [r7, #24]
 80119ae:	2b5a      	cmp	r3, #90	; 0x5a
 80119b0:	dc0c      	bgt.n	80119cc <volt_index+0x170>
				continue;
			}
			// XXX for now we assume all canton have same board with same voltage level
			*pvi1 = *pvi2 = i;
 80119b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80119b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80119b6:	601a      	str	r2, [r3, #0]
 80119b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80119ba:	681a      	ldr	r2, [r3, #0]
 80119bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80119be:	601a      	str	r2, [r3, #0]
			duty = d;
 80119c0:	69bb      	ldr	r3, [r7, #24]
 80119c2:	637b      	str	r3, [r7, #52]	; 0x34
			break;
 80119c4:	bf00      	nop
    	}
    	break;
 80119c6:	e088      	b.n	8011ada <volt_index+0x27e>
    		if (!c1->volts_v2[i]) continue;
 80119c8:	bf00      	nop
 80119ca:	e000      	b.n	80119ce <volt_index+0x172>
				continue;
 80119cc:	bf00      	nop
    	for (int i=15; i>=0; i--) {
 80119ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119d0:	3b01      	subs	r3, #1
 80119d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80119d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	dad3      	bge.n	8011982 <volt_index+0x126>
    	break;
 80119da:	e07e      	b.n	8011ada <volt_index+0x27e>
    case vpolicy_v4:
    	*pvi1 = *pvi2 = 0;
 80119dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80119de:	2200      	movs	r2, #0
 80119e0:	601a      	str	r2, [r3, #0]
 80119e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80119e4:	681a      	ldr	r2, [r3, #0]
 80119e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80119e8:	601a      	str	r2, [r3, #0]
    	duty = mili_power / 10;
 80119ea:	89fb      	ldrh	r3, [r7, #14]
 80119ec:	4a42      	ldr	r2, [pc, #264]	; (8011af8 <volt_index+0x29c>)
 80119ee:	fba2 2303 	umull	r2, r3, r2, r3
 80119f2:	08db      	lsrs	r3, r3, #3
 80119f4:	b29b      	uxth	r3, r3
 80119f6:	637b      	str	r3, [r7, #52]	; 0x34
    	for (int i=15; i>=0; i--) {
 80119f8:	230f      	movs	r3, #15
 80119fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80119fc:	e028      	b.n	8011a50 <volt_index+0x1f4>
    		if (!c1->volts_v4[i]) continue;
 80119fe:	68ba      	ldr	r2, [r7, #8]
 8011a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a02:	3320      	adds	r3, #32
 8011a04:	005b      	lsls	r3, r3, #1
 8011a06:	4413      	add	r3, r2
 8011a08:	885b      	ldrh	r3, [r3, #2]
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d01a      	beq.n	8011a44 <volt_index+0x1e8>
    		// c1->volts in 0.01V unit
			int d = 100*mili_power / c1->volts_v4[i];
 8011a0e:	89fb      	ldrh	r3, [r7, #14]
 8011a10:	2264      	movs	r2, #100	; 0x64
 8011a12:	fb02 f203 	mul.w	r2, r2, r3
 8011a16:	68b9      	ldr	r1, [r7, #8]
 8011a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a1a:	3320      	adds	r3, #32
 8011a1c:	005b      	lsls	r3, r3, #1
 8011a1e:	440b      	add	r3, r1
 8011a20:	885b      	ldrh	r3, [r3, #2]
 8011a22:	fb92 f3f3 	sdiv	r3, r2, r3
 8011a26:	61fb      	str	r3, [r7, #28]
			if (d>MAX_PWM) {
 8011a28:	69fb      	ldr	r3, [r7, #28]
 8011a2a:	2b5a      	cmp	r3, #90	; 0x5a
 8011a2c:	dc0c      	bgt.n	8011a48 <volt_index+0x1ec>
				continue;
			}
			// XXX for now we assume all canton have same board with same voltage level
			*pvi1 = *pvi2 = i;
 8011a2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011a30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011a32:	601a      	str	r2, [r3, #0]
 8011a34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011a36:	681a      	ldr	r2, [r3, #0]
 8011a38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011a3a:	601a      	str	r2, [r3, #0]
			duty = d;
 8011a3c:	69fb      	ldr	r3, [r7, #28]
 8011a3e:	637b      	str	r3, [r7, #52]	; 0x34
			break;
 8011a40:	bf00      	nop
    	}
    	break;
 8011a42:	e04a      	b.n	8011ada <volt_index+0x27e>
    		if (!c1->volts_v4[i]) continue;
 8011a44:	bf00      	nop
 8011a46:	e000      	b.n	8011a4a <volt_index+0x1ee>
				continue;
 8011a48:	bf00      	nop
    	for (int i=15; i>=0; i--) {
 8011a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a4c:	3b01      	subs	r3, #1
 8011a4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8011a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	dad3      	bge.n	80119fe <volt_index+0x1a2>
    	break;
 8011a56:	e040      	b.n	8011ada <volt_index+0x27e>
	case vpolicy_pure_volt:
		duty = MAX_PWM;
 8011a58:	235a      	movs	r3, #90	; 0x5a
 8011a5a:	637b      	str	r3, [r7, #52]	; 0x34
        int s = 0;
 8011a5c:	2300      	movs	r3, #0
 8011a5e:	627b      	str	r3, [r7, #36]	; 0x24
		for (int i=15; i>=0; i--) {
 8011a60:	230f      	movs	r3, #15
 8011a62:	623b      	str	r3, [r7, #32]
 8011a64:	e033      	b.n	8011ace <volt_index+0x272>
			if (!c1->volts[i]) continue;
 8011a66:	68ba      	ldr	r2, [r7, #8]
 8011a68:	6a3b      	ldr	r3, [r7, #32]
 8011a6a:	005b      	lsls	r3, r3, #1
 8011a6c:	4413      	add	r3, r2
 8011a6e:	885b      	ldrh	r3, [r3, #2]
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d028      	beq.n	8011ac6 <volt_index+0x26a>
			// c1->volts in 0.01V unit. 10V = 1000
			int p = c1->volts[i]*MAX_PWM/100;  // 0.01V * % , ex : 345*90
 8011a74:	68ba      	ldr	r2, [r7, #8]
 8011a76:	6a3b      	ldr	r3, [r7, #32]
 8011a78:	005b      	lsls	r3, r3, #1
 8011a7a:	4413      	add	r3, r2
 8011a7c:	885b      	ldrh	r3, [r3, #2]
 8011a7e:	461a      	mov	r2, r3
 8011a80:	235a      	movs	r3, #90	; 0x5a
 8011a82:	fb03 f302 	mul.w	r3, r3, r2
 8011a86:	4a1d      	ldr	r2, [pc, #116]	; (8011afc <volt_index+0x2a0>)
 8011a88:	fb82 1203 	smull	r1, r2, r2, r3
 8011a8c:	1152      	asrs	r2, r2, #5
 8011a8e:	17db      	asrs	r3, r3, #31
 8011a90:	1ad3      	subs	r3, r2, r3
 8011a92:	617b      	str	r3, [r7, #20]
			if (p <= mili_power) {
 8011a94:	89fb      	ldrh	r3, [r7, #14]
 8011a96:	697a      	ldr	r2, [r7, #20]
 8011a98:	429a      	cmp	r2, r3
 8011a9a:	dc08      	bgt.n	8011aae <volt_index+0x252>
                s = 1;
 8011a9c:	2301      	movs	r3, #1
 8011a9e:	627b      	str	r3, [r7, #36]	; 0x24
				*pvi1 = i;
 8011aa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011aa2:	6a3a      	ldr	r2, [r7, #32]
 8011aa4:	601a      	str	r2, [r3, #0]
				*pvi2 = i;
 8011aa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011aa8:	6a3a      	ldr	r2, [r7, #32]
 8011aaa:	601a      	str	r2, [r3, #0]
 8011aac:	e00c      	b.n	8011ac8 <volt_index+0x26c>
			} else {
                if (!s) {
 8011aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d110      	bne.n	8011ad6 <volt_index+0x27a>
                    // lower than minimal power
                    *pvi1 = i;
 8011ab4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011ab6:	6a3a      	ldr	r2, [r7, #32]
 8011ab8:	601a      	str	r2, [r3, #0]
                    *pvi2 = i;
 8011aba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011abc:	6a3a      	ldr	r2, [r7, #32]
 8011abe:	601a      	str	r2, [r3, #0]
                    duty = 0;
 8011ac0:	2300      	movs	r3, #0
 8011ac2:	637b      	str	r3, [r7, #52]	; 0x34
                }
                // ok
				break;
 8011ac4:	e007      	b.n	8011ad6 <volt_index+0x27a>
			if (!c1->volts[i]) continue;
 8011ac6:	bf00      	nop
		for (int i=15; i>=0; i--) {
 8011ac8:	6a3b      	ldr	r3, [r7, #32]
 8011aca:	3b01      	subs	r3, #1
 8011acc:	623b      	str	r3, [r7, #32]
 8011ace:	6a3b      	ldr	r3, [r7, #32]
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	dac8      	bge.n	8011a66 <volt_index+0x20a>
			}
		}
		break;
 8011ad4:	e000      	b.n	8011ad8 <volt_index+0x27c>
				break;
 8011ad6:	bf00      	nop
		break;
 8011ad8:	bf00      	nop
	}
    if (duty>MAX_PWM) {
 8011ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011adc:	2b5a      	cmp	r3, #90	; 0x5a
 8011ade:	dd01      	ble.n	8011ae4 <volt_index+0x288>
        duty = MAX_PWM;
 8011ae0:	235a      	movs	r3, #90	; 0x5a
 8011ae2:	637b      	str	r3, [r7, #52]	; 0x34
        //canton_error(ERR_BAD_PARAM_MPOW, "test msg");
    }
	return duty;
 8011ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011ae6:	4618      	mov	r0, r3
 8011ae8:	3738      	adds	r7, #56	; 0x38
 8011aea:	46bd      	mov	sp, r7
 8011aec:	bd80      	pop	{r7, pc}
 8011aee:	bf00      	nop
 8011af0:	08015fb0 	.word	0x08015fb0
 8011af4:	08015fcc 	.word	0x08015fcc
 8011af8:	cccccccd 	.word	0xcccccccd
 8011afc:	51eb851f 	.word	0x51eb851f

08011b00 <bemf_convert_to_centivolt_for_display>:
static const int32_t bemf_zero_values[MAX_PWM*2+1] = {-92, -72, -49, -41, -31, -24, -19, -15, -12, -9, -8, -80, -64, -47, -30, -23, -18, -14, -12, -7, -74, -60, -45, -35, -22, -18, -12, -71, -42, -32, -21, -18, -11, -11, -65, -40, -24, -18, -47, -37, -22, -13, -44, -28, -56, -34, -21, -14, -9, -49, -31, -47, -24, -35, -44, -20, -30, -31, -38, -30, -15, -8, -7, -4, -2, -1, -1, -1, 0, 0, -2, -1, -1, -1, -1, -2, -1, -1, -1, 0, -1, 0, -1, -1, -1, 0, 0, 0, -1, -2, 0, 0, 0, 0, 0, -3, -1, 0, 0, 0, 0, 0, 3, 0, 0, -1, -3, -2, 0, 0, 0, 4, 0, -1, 2, 3, 0, 1, 1, 4, 10, 22, 33, 25, 28, 17, 38, 29, 19, 43, 26, 44, 7, 9, 18, 31, 53, 25, 42, 13, 20, 35, 46, 17, 22, 37, 65, 9, 10, 15, 20, 29, 36, 70, 12, 14, 19, 33, 43, 55, 72, 9, 9, 16, 20, 25, 32, 51, 66, 87, 11, 11, 14, 17, 19, 27, 34, 43, 57, 72, 92};
#endif


static inline int32_t bemf_convert_to_centivolt_for_display(const canton_config_t *c, canton_vars_t *v, int32_t m) // unit 0.01v
{
 8011b00:	b480      	push	{r7}
 8011b02:	b085      	sub	sp, #20
 8011b04:	af00      	add	r7, sp, #0
 8011b06:	60f8      	str	r0, [r7, #12]
 8011b08:	60b9      	str	r1, [r7, #8]
 8011b0a:	607a      	str	r2, [r7, #4]
		if (idx<-MAX_PWM)     idx = -MAX_PWM;
		else if (idx>MAX_PWM) idx =  MAX_PWM;
		m -= bemf_zero_values[idx+MAX_PWM];
	}
#endif
	if (v->fix_bemf && (v->curtrainidx!=0xFF)) {
 8011b0c:	68bb      	ldr	r3, [r7, #8]
 8011b0e:	7b5b      	ldrb	r3, [r3, #13]
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d012      	beq.n	8011b3a <bemf_convert_to_centivolt_for_display+0x3a>
 8011b14:	68bb      	ldr	r3, [r7, #8]
 8011b16:	7b1b      	ldrb	r3, [r3, #12]
 8011b18:	2bff      	cmp	r3, #255	; 0xff
 8011b1a:	d00e      	beq.n	8011b3a <bemf_convert_to_centivolt_for_display+0x3a>
		// XXX calibration
		// negative value measured on Von are different for >0 than <0
		// (-2280 vs 2160) probably due to different resistors in division
		// bridge
		if (m<0) {
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	da0b      	bge.n	8011b3a <bemf_convert_to_centivolt_for_display+0x3a>
			m = 2200*m/2000;
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	f640 0298 	movw	r2, #2200	; 0x898
 8011b28:	fb02 f303 	mul.w	r3, r2, r3
 8011b2c:	4a0b      	ldr	r2, [pc, #44]	; (8011b5c <bemf_convert_to_centivolt_for_display+0x5c>)
 8011b2e:	fb82 1203 	smull	r1, r2, r2, r3
 8011b32:	11d2      	asrs	r2, r2, #7
 8011b34:	17db      	asrs	r3, r3, #31
 8011b36:	1ad3      	subs	r3, r2, r3
 8011b38:	607b      	str	r3, [r7, #4]
		}
	}
    if (BEMF_RAW) return m;
	return ((m * 4545 * 33) / (4096*100));
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	4a08      	ldr	r2, [pc, #32]	; (8011b60 <bemf_convert_to_centivolt_for_display+0x60>)
 8011b3e:	fb02 f303 	mul.w	r3, r2, r3
 8011b42:	4a08      	ldr	r2, [pc, #32]	; (8011b64 <bemf_convert_to_centivolt_for_display+0x64>)
 8011b44:	fb82 1203 	smull	r1, r2, r2, r3
 8011b48:	1452      	asrs	r2, r2, #17
 8011b4a:	17db      	asrs	r3, r3, #31
 8011b4c:	1ad3      	subs	r3, r2, r3
}
 8011b4e:	4618      	mov	r0, r3
 8011b50:	3714      	adds	r7, #20
 8011b52:	46bd      	mov	sp, r7
 8011b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b58:	4770      	bx	lr
 8011b5a:	bf00      	nop
 8011b5c:	10624dd3 	.word	0x10624dd3
 8011b60:	000249e1 	.word	0x000249e1
 8011b64:	51eb851f 	.word	0x51eb851f

08011b68 <bemf_convert_to_centivolt>:


static inline int32_t bemf_convert_to_centivolt(const canton_config_t *c, canton_vars_t *v, int32_t m)
{
 8011b68:	b480      	push	{r7}
 8011b6a:	b085      	sub	sp, #20
 8011b6c:	af00      	add	r7, sp, #0
 8011b6e:	60f8      	str	r0, [r7, #12]
 8011b70:	60b9      	str	r1, [r7, #8]
 8011b72:	607a      	str	r2, [r7, #4]
		if (idx<-MAX_PWM)     idx = -MAX_PWM;
		else if (idx>MAX_PWM) idx =  MAX_PWM;
		m -= bemf_zero_values[idx+MAX_PWM];
	}
#endif
	if (v->fix_bemf && (v->curtrainidx!=0xFF)) {
 8011b74:	68bb      	ldr	r3, [r7, #8]
 8011b76:	7b5b      	ldrb	r3, [r3, #13]
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d012      	beq.n	8011ba2 <bemf_convert_to_centivolt+0x3a>
 8011b7c:	68bb      	ldr	r3, [r7, #8]
 8011b7e:	7b1b      	ldrb	r3, [r3, #12]
 8011b80:	2bff      	cmp	r3, #255	; 0xff
 8011b82:	d00e      	beq.n	8011ba2 <bemf_convert_to_centivolt+0x3a>
		// XXX calibration

		if (m<0) {
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	da0b      	bge.n	8011ba2 <bemf_convert_to_centivolt+0x3a>
			m = 2200*m/2000;
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	f640 0298 	movw	r2, #2200	; 0x898
 8011b90:	fb02 f303 	mul.w	r3, r2, r3
 8011b94:	4a0b      	ldr	r2, [pc, #44]	; (8011bc4 <bemf_convert_to_centivolt+0x5c>)
 8011b96:	fb82 1203 	smull	r1, r2, r2, r3
 8011b9a:	11d2      	asrs	r2, r2, #7
 8011b9c:	17db      	asrs	r3, r3, #31
 8011b9e:	1ad3      	subs	r3, r2, r3
 8011ba0:	607b      	str	r3, [r7, #4]
		}
	}
	return ((m * 4545 * 33) / (4096*100));
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	4a08      	ldr	r2, [pc, #32]	; (8011bc8 <bemf_convert_to_centivolt+0x60>)
 8011ba6:	fb02 f303 	mul.w	r3, r2, r3
 8011baa:	4a08      	ldr	r2, [pc, #32]	; (8011bcc <bemf_convert_to_centivolt+0x64>)
 8011bac:	fb82 1203 	smull	r1, r2, r2, r3
 8011bb0:	1452      	asrs	r2, r2, #17
 8011bb2:	17db      	asrs	r3, r3, #31
 8011bb4:	1ad3      	subs	r3, r2, r3
}
 8011bb6:	4618      	mov	r0, r3
 8011bb8:	3714      	adds	r7, #20
 8011bba:	46bd      	mov	sp, r7
 8011bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bc0:	4770      	bx	lr
 8011bc2:	bf00      	nop
 8011bc4:	10624dd3 	.word	0x10624dd3
 8011bc8:	000249e1 	.word	0x000249e1
 8011bcc:	51eb851f 	.word	0x51eb851f

08011bd0 <canton_intensity>:


void canton_intensity(const canton_config_t *c, canton_vars_t *v, uint16_t ioff, uint16_t ion)
{
 8011bd0:	b480      	push	{r7}
 8011bd2:	b089      	sub	sp, #36	; 0x24
 8011bd4:	af00      	add	r7, sp, #0
 8011bd6:	60f8      	str	r0, [r7, #12]
 8011bd8:	60b9      	str	r1, [r7, #8]
 8011bda:	4611      	mov	r1, r2
 8011bdc:	461a      	mov	r2, r3
 8011bde:	460b      	mov	r3, r1
 8011be0:	80fb      	strh	r3, [r7, #6]
 8011be2:	4613      	mov	r3, r2
 8011be4:	80bb      	strh	r3, [r7, #4]
	v->i_off = ioff;
 8011be6:	68bb      	ldr	r3, [r7, #8]
 8011be8:	88fa      	ldrh	r2, [r7, #6]
 8011bea:	825a      	strh	r2, [r3, #18]
	v->i_on = ion;
 8011bec:	68bb      	ldr	r3, [r7, #8]
 8011bee:	88ba      	ldrh	r2, [r7, #4]
 8011bf0:	821a      	strh	r2, [r3, #16]
	 *  R=0.1, gain=60, Vout=60*(I*0.1) = 6*I
	 *  200mA -> 6*.2 -> 1,2V -> ADC=4096*1.2/3.3 = 1490
	 *  adc = 4096*6*i/3.3,  adc=7447*i
	 *  mA = 1000*adc/7447
	 */
	v->prev_occupency = v->occupency;
 8011bf2:	68bb      	ldr	r3, [r7, #8]
 8011bf4:	7b9a      	ldrb	r2, [r3, #14]
 8011bf6:	68bb      	ldr	r3, [r7, #8]
 8011bf8:	73da      	strb	r2, [r3, #15]
	if (v->cur_pwm_duty>0) {
 8011bfa:	68bb      	ldr	r3, [r7, #8]
 8011bfc:	885b      	ldrh	r3, [r3, #2]
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d043      	beq.n	8011c8a <canton_intensity+0xba>
		uint32_t mA = 1000*ion/7447;
 8011c02:	88bb      	ldrh	r3, [r7, #4]
 8011c04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011c08:	fb02 f303 	mul.w	r3, r2, r3
 8011c0c:	4a23      	ldr	r2, [pc, #140]	; (8011c9c <canton_intensity+0xcc>)
 8011c0e:	fb82 1203 	smull	r1, r2, r2, r3
 8011c12:	1292      	asrs	r2, r2, #10
 8011c14:	17db      	asrs	r3, r3, #31
 8011c16:	1ad3      	subs	r3, r2, r3
 8011c18:	61bb      	str	r3, [r7, #24]
		// evaluate R
		// R=U/I
		uint32_t Rohm = mA ? ((uint32_t)(c->volts[v->cur_voltidx]*10))/mA : 9999999;
 8011c1a:	69bb      	ldr	r3, [r7, #24]
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d00f      	beq.n	8011c40 <canton_intensity+0x70>
 8011c20:	68bb      	ldr	r3, [r7, #8]
 8011c22:	785b      	ldrb	r3, [r3, #1]
 8011c24:	68fa      	ldr	r2, [r7, #12]
 8011c26:	005b      	lsls	r3, r3, #1
 8011c28:	4413      	add	r3, r2
 8011c2a:	885b      	ldrh	r3, [r3, #2]
 8011c2c:	461a      	mov	r2, r3
 8011c2e:	4613      	mov	r3, r2
 8011c30:	009b      	lsls	r3, r3, #2
 8011c32:	4413      	add	r3, r2
 8011c34:	005b      	lsls	r3, r3, #1
 8011c36:	461a      	mov	r2, r3
 8011c38:	69bb      	ldr	r3, [r7, #24]
 8011c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8011c3e:	e000      	b.n	8011c42 <canton_intensity+0x72>
 8011c40:	4b17      	ldr	r3, [pc, #92]	; (8011ca0 <canton_intensity+0xd0>)
 8011c42:	617b      	str	r3, [r7, #20]
		if (Rohm>100000) {
 8011c44:	697b      	ldr	r3, [r7, #20]
 8011c46:	4a17      	ldr	r2, [pc, #92]	; (8011ca4 <canton_intensity+0xd4>)
 8011c48:	4293      	cmp	r3, r2
 8011c4a:	d903      	bls.n	8011c54 <canton_intensity+0x84>
			v->occupency = CANTON_OCCUPENCY_FREE;
 8011c4c:	68bb      	ldr	r3, [r7, #8]
 8011c4e:	2201      	movs	r2, #1
 8011c50:	739a      	strb	r2, [r3, #14]
			v->occupency = CANTON_OCCUPENCY_LOCO;
		}
	} else {
		v->occupency = CANTON_OCCUPENCY_UNKNOWN;
	}
}
 8011c52:	e01d      	b.n	8011c90 <canton_intensity+0xc0>
		} else if (Rohm>100) {
 8011c54:	697b      	ldr	r3, [r7, #20]
 8011c56:	2b64      	cmp	r3, #100	; 0x64
 8011c58:	d913      	bls.n	8011c82 <canton_intensity+0xb2>
			const int Rwagon = 10000;
 8011c5a:	f242 7310 	movw	r3, #10000	; 0x2710
 8011c5e:	613b      	str	r3, [r7, #16]
			int nwag = Rwagon / Rohm;
 8011c60:	693a      	ldr	r2, [r7, #16]
 8011c62:	697b      	ldr	r3, [r7, #20]
 8011c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8011c68:	61fb      	str	r3, [r7, #28]
			if (nwag>10) nwag = 10;
 8011c6a:	69fb      	ldr	r3, [r7, #28]
 8011c6c:	2b0a      	cmp	r3, #10
 8011c6e:	dd01      	ble.n	8011c74 <canton_intensity+0xa4>
 8011c70:	230a      	movs	r3, #10
 8011c72:	61fb      	str	r3, [r7, #28]
			v->occupency = CANTON_OCCUPENCY_WAGON+nwag;
 8011c74:	69fb      	ldr	r3, [r7, #28]
 8011c76:	b2db      	uxtb	r3, r3
 8011c78:	3302      	adds	r3, #2
 8011c7a:	b2da      	uxtb	r2, r3
 8011c7c:	68bb      	ldr	r3, [r7, #8]
 8011c7e:	739a      	strb	r2, [r3, #14]
}
 8011c80:	e006      	b.n	8011c90 <canton_intensity+0xc0>
			v->occupency = CANTON_OCCUPENCY_LOCO;
 8011c82:	68bb      	ldr	r3, [r7, #8]
 8011c84:	22ff      	movs	r2, #255	; 0xff
 8011c86:	739a      	strb	r2, [r3, #14]
}
 8011c88:	e002      	b.n	8011c90 <canton_intensity+0xc0>
		v->occupency = CANTON_OCCUPENCY_UNKNOWN;
 8011c8a:	68bb      	ldr	r3, [r7, #8]
 8011c8c:	2200      	movs	r2, #0
 8011c8e:	739a      	strb	r2, [r3, #14]
}
 8011c90:	bf00      	nop
 8011c92:	3724      	adds	r7, #36	; 0x24
 8011c94:	46bd      	mov	sp, r7
 8011c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c9a:	4770      	bx	lr
 8011c9c:	233387af 	.word	0x233387af
 8011ca0:	0098967f 	.word	0x0098967f
 8011ca4:	000186a0 	.word	0x000186a0

08011ca8 <canton_bemf>:


void canton_bemf(const canton_config_t *c, canton_vars_t *v, uint16_t adc1, uint16_t adc2, uint16_t von1, uint16_t von2)
{
 8011ca8:	b580      	push	{r7, lr}
 8011caa:	b08c      	sub	sp, #48	; 0x30
 8011cac:	af00      	add	r7, sp, #0
 8011cae:	60f8      	str	r0, [r7, #12]
 8011cb0:	60b9      	str	r1, [r7, #8]
 8011cb2:	4611      	mov	r1, r2
 8011cb4:	461a      	mov	r2, r3
 8011cb6:	460b      	mov	r3, r1
 8011cb8:	80fb      	strh	r3, [r7, #6]
 8011cba:	4613      	mov	r3, r2
 8011cbc:	80bb      	strh	r3, [r7, #4]
	num_canton_bemf++;
 8011cbe:	4b30      	ldr	r3, [pc, #192]	; (8011d80 <canton_bemf+0xd8>)
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	3301      	adds	r3, #1
 8011cc4:	4a2e      	ldr	r2, [pc, #184]	; (8011d80 <canton_bemf+0xd8>)
 8011cc6:	6013      	str	r3, [r2, #0]
	int32_t val[4];
	int32_t volt2= bemf_convert_to_centivolt(c,v, adc2-adc1); // unit 1/100 V
 8011cc8:	88ba      	ldrh	r2, [r7, #4]
 8011cca:	88fb      	ldrh	r3, [r7, #6]
 8011ccc:	1ad3      	subs	r3, r2, r3
 8011cce:	461a      	mov	r2, r3
 8011cd0:	68b9      	ldr	r1, [r7, #8]
 8011cd2:	68f8      	ldr	r0, [r7, #12]
 8011cd4:	f7ff ff48 	bl	8011b68 <bemf_convert_to_centivolt>
 8011cd8:	62f8      	str	r0, [r7, #44]	; 0x2c
    
    v->bemf_centivolt = volt2;
 8011cda:	68bb      	ldr	r3, [r7, #8]
 8011cdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011cde:	605a      	str	r2, [r3, #4]
    v->von_centivolt = bemf_convert_to_centivolt_for_display(c,v, von2-von1);
 8011ce0:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8011ce2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8011ce4:	1ad3      	subs	r3, r2, r3
 8011ce6:	461a      	mov	r2, r3
 8011ce8:	68b9      	ldr	r1, [r7, #8]
 8011cea:	68f8      	ldr	r0, [r7, #12]
 8011cec:	f7ff ff08 	bl	8011b00 <bemf_convert_to_centivolt_for_display>
 8011cf0:	4603      	mov	r3, r0
 8011cf2:	b21a      	sxth	r2, r3
 8011cf4:	68bb      	ldr	r3, [r7, #8]
 8011cf6:	815a      	strh	r2, [r3, #10]
    
	if (c->notif_bemf) {
 8011cf8:	68fb      	ldr	r3, [r7, #12]
 8011cfa:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8011cfe:	f003 0301 	and.w	r3, r3, #1
 8011d02:	b2db      	uxtb	r3, r3
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d02d      	beq.n	8011d64 <canton_bemf+0xbc>
		int32_t volt = bemf_convert_to_centivolt_for_display(c,v, adc2-adc1); // unit 1/100 V
 8011d08:	88ba      	ldrh	r2, [r7, #4]
 8011d0a:	88fb      	ldrh	r3, [r7, #6]
 8011d0c:	1ad3      	subs	r3, r2, r3
 8011d0e:	461a      	mov	r2, r3
 8011d10:	68b9      	ldr	r1, [r7, #8]
 8011d12:	68f8      	ldr	r0, [r7, #12]
 8011d14:	f7ff fef4 	bl	8011b00 <bemf_convert_to_centivolt_for_display>
 8011d18:	62b8      	str	r0, [r7, #40]	; 0x28
		val[0] = volt;
 8011d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d1c:	617b      	str	r3, [r7, #20]
		val[1] = bemf_convert_to_centivolt_for_display(c,v, von2-von1);
 8011d1e:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8011d20:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8011d22:	1ad3      	subs	r3, r2, r3
 8011d24:	461a      	mov	r2, r3
 8011d26:	68b9      	ldr	r1, [r7, #8]
 8011d28:	68f8      	ldr	r0, [r7, #12]
 8011d2a:	f7ff fee9 	bl	8011b00 <bemf_convert_to_centivolt_for_display>
 8011d2e:	4603      	mov	r3, r0
 8011d30:	61bb      	str	r3, [r7, #24]
		val[2] = (int32_t) (c->volts[v->cur_voltidx]);
 8011d32:	68bb      	ldr	r3, [r7, #8]
 8011d34:	785b      	ldrb	r3, [r3, #1]
 8011d36:	68fa      	ldr	r2, [r7, #12]
 8011d38:	005b      	lsls	r3, r3, #1
 8011d3a:	4413      	add	r3, r2
 8011d3c:	885b      	ldrh	r3, [r3, #2]
 8011d3e:	61fb      	str	r3, [r7, #28]
		val[3] = (int32_t) v->cur_pwm_duty;
 8011d40:	68bb      	ldr	r3, [r7, #8]
 8011d42:	885b      	ldrh	r3, [r3, #2]
 8011d44:	623b      	str	r3, [r7, #32]
        uint8_t cmd = 'B';
 8011d46:	2342      	movs	r3, #66	; 0x42
 8011d48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#ifdef TRAIN_SIMU
        cmd = 'b';
#endif
		canton_notif(canton_idx(v), cmd, (uint8_t*)val, sizeof(int32_t)*4);
 8011d4c:	68b8      	ldr	r0, [r7, #8]
 8011d4e:	f000 fc63 	bl	8012618 <canton_idx>
 8011d52:	4603      	mov	r3, r0
 8011d54:	b2d8      	uxtb	r0, r3
 8011d56:	f107 0214 	add.w	r2, r7, #20
 8011d5a:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8011d5e:	2310      	movs	r3, #16
 8011d60:	f7ff fc35 	bl	80115ce <canton_notif>
	}
	// TODO :
	// - fix high duty (90%) since measure is influenced by on state
	// - bemf to speed
	// send to train
	if (calibrating) {
 8011d64:	4b07      	ldr	r3, [pc, #28]	; (8011d84 <canton_bemf+0xdc>)
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d005      	beq.n	8011d78 <canton_bemf+0xd0>
		calib_store_bemf(adc2-adc1);
 8011d6c:	88ba      	ldrh	r2, [r7, #4]
 8011d6e:	88fb      	ldrh	r3, [r7, #6]
 8011d70:	1ad3      	subs	r3, r2, r3
 8011d72:	4618      	mov	r0, r3
 8011d74:	f000 f808 	bl	8011d88 <calib_store_bemf>
	}
}
 8011d78:	bf00      	nop
 8011d7a:	3730      	adds	r7, #48	; 0x30
 8011d7c:	46bd      	mov	sp, r7
 8011d7e:	bd80      	pop	{r7, pc}
 8011d80:	200051a8 	.word	0x200051a8
 8011d84:	200051ac 	.word	0x200051ac

08011d88 <calib_store_bemf>:
	calsum += vraw;
}

#else
static void calib_store_bemf(int32_t vraw)
{
 8011d88:	b480      	push	{r7}
 8011d8a:	b083      	sub	sp, #12
 8011d8c:	af00      	add	r7, sp, #0
 8011d8e:	6078      	str	r0, [r7, #4]

}
 8011d90:	bf00      	nop
 8011d92:	370c      	adds	r7, #12
 8011d94:	46bd      	mov	sp, r7
 8011d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d9a:	4770      	bx	lr

08011d9c <inertia_reset>:

#include "misc.h"
#include "inertia.h"

void    inertia_reset(const inertia_config_t *cnf, inertia_vars_t *vars)
{
 8011d9c:	b480      	push	{r7}
 8011d9e:	b083      	sub	sp, #12
 8011da0:	af00      	add	r7, sp, #0
 8011da2:	6078      	str	r0, [r7, #4]
 8011da4:	6039      	str	r1, [r7, #0]
	vars->target = 0;
 8011da6:	683b      	ldr	r3, [r7, #0]
 8011da8:	2200      	movs	r2, #0
 8011daa:	801a      	strh	r2, [r3, #0]
	vars->cur = 0;
 8011dac:	683b      	ldr	r3, [r7, #0]
 8011dae:	2200      	movs	r2, #0
 8011db0:	805a      	strh	r2, [r3, #2]

}
 8011db2:	bf00      	nop
 8011db4:	370c      	adds	r7, #12
 8011db6:	46bd      	mov	sp, r7
 8011db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dbc:	4770      	bx	lr
	...

08011dc0 <inertia_value>:
{
	vars->target = v;
}

int16_t inertia_value(const inertia_config_t *config, inertia_vars_t *vars, uint16_t elapsed_ticks, int *pchanged)
{
 8011dc0:	b480      	push	{r7}
 8011dc2:	b08b      	sub	sp, #44	; 0x2c
 8011dc4:	af00      	add	r7, sp, #0
 8011dc6:	60f8      	str	r0, [r7, #12]
 8011dc8:	60b9      	str	r1, [r7, #8]
 8011dca:	603b      	str	r3, [r7, #0]
 8011dcc:	4613      	mov	r3, r2
 8011dce:	80fb      	strh	r3, [r7, #6]
	int st =  SIGNOF(vars->target);
 8011dd0:	68bb      	ldr	r3, [r7, #8]
 8011dd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	da02      	bge.n	8011de0 <inertia_value+0x20>
 8011dda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011dde:	e000      	b.n	8011de2 <inertia_value+0x22>
 8011de0:	2301      	movs	r3, #1
 8011de2:	623b      	str	r3, [r7, #32]
	int sc =  SIGNOF(vars->cur);
 8011de4:	68bb      	ldr	r3, [r7, #8]
 8011de6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	da02      	bge.n	8011df4 <inertia_value+0x34>
 8011dee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011df2:	e000      	b.n	8011df6 <inertia_value+0x36>
 8011df4:	2301      	movs	r3, #1
 8011df6:	61fb      	str	r3, [r7, #28]
	int inc;

    if (pchanged) *pchanged = 0;
 8011df8:	683b      	ldr	r3, [r7, #0]
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d002      	beq.n	8011e04 <inertia_value+0x44>
 8011dfe:	683b      	ldr	r3, [r7, #0]
 8011e00:	2200      	movs	r2, #0
 8011e02:	601a      	str	r2, [r3, #0]
    if (vars->target == vars->cur/10) return vars->target;
 8011e04:	68bb      	ldr	r3, [r7, #8]
 8011e06:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011e0a:	68bb      	ldr	r3, [r7, #8]
 8011e0c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011e10:	496f      	ldr	r1, [pc, #444]	; (8011fd0 <inertia_value+0x210>)
 8011e12:	fb81 0103 	smull	r0, r1, r1, r3
 8011e16:	1089      	asrs	r1, r1, #2
 8011e18:	17db      	asrs	r3, r3, #31
 8011e1a:	1acb      	subs	r3, r1, r3
 8011e1c:	b21b      	sxth	r3, r3
 8011e1e:	429a      	cmp	r2, r3
 8011e20:	d103      	bne.n	8011e2a <inertia_value+0x6a>
 8011e22:	68bb      	ldr	r3, [r7, #8]
 8011e24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011e28:	e0cb      	b.n	8011fc2 <inertia_value+0x202>
    //debug_info(0, "INER", vars->target, vars->cur);


	if (st*sc >= 0) {
 8011e2a:	6a3b      	ldr	r3, [r7, #32]
 8011e2c:	69fa      	ldr	r2, [r7, #28]
 8011e2e:	fb02 f303 	mul.w	r3, r2, r3
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	db6c      	blt.n	8011f10 <inertia_value+0x150>
		// same direction
		if (abs(vars->target*10)>abs(vars->cur)) {
 8011e36:	68bb      	ldr	r3, [r7, #8]
 8011e38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011e3c:	461a      	mov	r2, r3
 8011e3e:	4613      	mov	r3, r2
 8011e40:	009b      	lsls	r3, r3, #2
 8011e42:	4413      	add	r3, r2
 8011e44:	005b      	lsls	r3, r3, #1
 8011e46:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8011e4a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8011e4e:	68bb      	ldr	r3, [r7, #8]
 8011e50:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	bfb8      	it	lt
 8011e58:	425b      	neglt	r3, r3
 8011e5a:	429a      	cmp	r2, r3
 8011e5c:	dd2b      	ble.n	8011eb6 <inertia_value+0xf6>
			// acceleration
			inc = config->acc * elapsed_ticks / 1000;
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011e64:	461a      	mov	r2, r3
 8011e66:	88fb      	ldrh	r3, [r7, #6]
 8011e68:	fb03 f302 	mul.w	r3, r3, r2
 8011e6c:	4a59      	ldr	r2, [pc, #356]	; (8011fd4 <inertia_value+0x214>)
 8011e6e:	fb82 1203 	smull	r1, r2, r2, r3
 8011e72:	1192      	asrs	r2, r2, #6
 8011e74:	17db      	asrs	r3, r3, #31
 8011e76:	1ad3      	subs	r3, r2, r3
 8011e78:	627b      	str	r3, [r7, #36]	; 0x24
			inc = MIN(inc, abs(vars->target*10)-abs(vars->cur));
 8011e7a:	68bb      	ldr	r3, [r7, #8]
 8011e7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011e80:	461a      	mov	r2, r3
 8011e82:	4613      	mov	r3, r2
 8011e84:	009b      	lsls	r3, r3, #2
 8011e86:	4413      	add	r3, r2
 8011e88:	005b      	lsls	r3, r3, #1
 8011e8a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8011e8e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8011e92:	68bb      	ldr	r3, [r7, #8]
 8011e94:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	bfb8      	it	lt
 8011e9c:	425b      	neglt	r3, r3
 8011e9e:	1ad3      	subs	r3, r2, r3
 8011ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ea2:	4293      	cmp	r3, r2
 8011ea4:	bfa8      	it	ge
 8011ea6:	4613      	movge	r3, r2
 8011ea8:	627b      	str	r3, [r7, #36]	; 0x24
			inc = sc * inc;
 8011eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eac:	69fa      	ldr	r2, [r7, #28]
 8011eae:	fb02 f303 	mul.w	r3, r2, r3
 8011eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8011eb4:	e055      	b.n	8011f62 <inertia_value+0x1a2>
		} else {
			// deceleration
			inc = config->dec * elapsed_ticks / 1000;
 8011eb6:	68fb      	ldr	r3, [r7, #12]
 8011eb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011ebc:	461a      	mov	r2, r3
 8011ebe:	88fb      	ldrh	r3, [r7, #6]
 8011ec0:	fb03 f302 	mul.w	r3, r3, r2
 8011ec4:	4a43      	ldr	r2, [pc, #268]	; (8011fd4 <inertia_value+0x214>)
 8011ec6:	fb82 1203 	smull	r1, r2, r2, r3
 8011eca:	1192      	asrs	r2, r2, #6
 8011ecc:	17db      	asrs	r3, r3, #31
 8011ece:	1ad3      	subs	r3, r2, r3
 8011ed0:	627b      	str	r3, [r7, #36]	; 0x24
			inc = MIN(inc, -abs(vars->target*10)+abs(vars->cur));
 8011ed2:	68bb      	ldr	r3, [r7, #8]
 8011ed4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011ed8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8011edc:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8011ee0:	68bb      	ldr	r3, [r7, #8]
 8011ee2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011ee6:	4619      	mov	r1, r3
 8011ee8:	460b      	mov	r3, r1
 8011eea:	009b      	lsls	r3, r3, #2
 8011eec:	440b      	add	r3, r1
 8011eee:	005b      	lsls	r3, r3, #1
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	bfb8      	it	lt
 8011ef4:	425b      	neglt	r3, r3
 8011ef6:	1ad3      	subs	r3, r2, r3
 8011ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011efa:	4293      	cmp	r3, r2
 8011efc:	bfa8      	it	ge
 8011efe:	4613      	movge	r3, r2
 8011f00:	627b      	str	r3, [r7, #36]	; 0x24
			inc = -sc * inc;
 8011f02:	69fb      	ldr	r3, [r7, #28]
 8011f04:	425a      	negs	r2, r3
 8011f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f08:	fb02 f303 	mul.w	r3, r2, r3
 8011f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8011f0e:	e028      	b.n	8011f62 <inertia_value+0x1a2>
		}
	} else {
		// dir change
		inc = config->dec * elapsed_ticks / 1000;
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011f16:	461a      	mov	r2, r3
 8011f18:	88fb      	ldrh	r3, [r7, #6]
 8011f1a:	fb03 f302 	mul.w	r3, r3, r2
 8011f1e:	4a2d      	ldr	r2, [pc, #180]	; (8011fd4 <inertia_value+0x214>)
 8011f20:	fb82 1203 	smull	r1, r2, r2, r3
 8011f24:	1192      	asrs	r2, r2, #6
 8011f26:	17db      	asrs	r3, r3, #31
 8011f28:	1ad3      	subs	r3, r2, r3
 8011f2a:	627b      	str	r3, [r7, #36]	; 0x24
        inc = MIN(inc, abs(vars->target*10-vars->cur));
 8011f2c:	68bb      	ldr	r3, [r7, #8]
 8011f2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011f32:	461a      	mov	r2, r3
 8011f34:	4613      	mov	r3, r2
 8011f36:	009b      	lsls	r3, r3, #2
 8011f38:	4413      	add	r3, r2
 8011f3a:	005b      	lsls	r3, r3, #1
 8011f3c:	461a      	mov	r2, r3
 8011f3e:	68bb      	ldr	r3, [r7, #8]
 8011f40:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011f44:	1ad3      	subs	r3, r2, r3
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	bfb8      	it	lt
 8011f4a:	425b      	neglt	r3, r3
 8011f4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011f4e:	4293      	cmp	r3, r2
 8011f50:	bfa8      	it	ge
 8011f52:	4613      	movge	r3, r2
 8011f54:	627b      	str	r3, [r7, #36]	; 0x24
        inc = -1 * sc * inc;
 8011f56:	69fb      	ldr	r3, [r7, #28]
 8011f58:	425a      	negs	r2, r3
 8011f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f5c:	fb02 f303 	mul.w	r3, r2, r3
 8011f60:	627b      	str	r3, [r7, #36]	; 0x24
	}
	int vold = vars->cur/10;
 8011f62:	68bb      	ldr	r3, [r7, #8]
 8011f64:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011f68:	4a19      	ldr	r2, [pc, #100]	; (8011fd0 <inertia_value+0x210>)
 8011f6a:	fb82 1203 	smull	r1, r2, r2, r3
 8011f6e:	1092      	asrs	r2, r2, #2
 8011f70:	17db      	asrs	r3, r3, #31
 8011f72:	1ad3      	subs	r3, r2, r3
 8011f74:	b21b      	sxth	r3, r3
 8011f76:	61bb      	str	r3, [r7, #24]
	vars->cur += inc;
 8011f78:	68bb      	ldr	r3, [r7, #8]
 8011f7a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011f7e:	b29a      	uxth	r2, r3
 8011f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f82:	b29b      	uxth	r3, r3
 8011f84:	4413      	add	r3, r2
 8011f86:	b29b      	uxth	r3, r3
 8011f88:	b21a      	sxth	r2, r3
 8011f8a:	68bb      	ldr	r3, [r7, #8]
 8011f8c:	805a      	strh	r2, [r3, #2]
	int vnew = vars->cur/10;
 8011f8e:	68bb      	ldr	r3, [r7, #8]
 8011f90:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011f94:	4a0e      	ldr	r2, [pc, #56]	; (8011fd0 <inertia_value+0x210>)
 8011f96:	fb82 1203 	smull	r1, r2, r2, r3
 8011f9a:	1092      	asrs	r2, r2, #2
 8011f9c:	17db      	asrs	r3, r3, #31
 8011f9e:	1ad3      	subs	r3, r2, r3
 8011fa0:	b21b      	sxth	r3, r3
 8011fa2:	617b      	str	r3, [r7, #20]
    if (pchanged) *pchanged = (vnew==vold) ? 0 : 1;
 8011fa4:	683b      	ldr	r3, [r7, #0]
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d009      	beq.n	8011fbe <inertia_value+0x1fe>
 8011faa:	697a      	ldr	r2, [r7, #20]
 8011fac:	69bb      	ldr	r3, [r7, #24]
 8011fae:	429a      	cmp	r2, r3
 8011fb0:	bf14      	ite	ne
 8011fb2:	2301      	movne	r3, #1
 8011fb4:	2300      	moveq	r3, #0
 8011fb6:	b2db      	uxtb	r3, r3
 8011fb8:	461a      	mov	r2, r3
 8011fba:	683b      	ldr	r3, [r7, #0]
 8011fbc:	601a      	str	r2, [r3, #0]
    //debug_info(0, "INC/c", inc, vars->cur);
	return vnew;
 8011fbe:	697b      	ldr	r3, [r7, #20]
 8011fc0:	b21b      	sxth	r3, r3
}
 8011fc2:	4618      	mov	r0, r3
 8011fc4:	372c      	adds	r7, #44	; 0x2c
 8011fc6:	46bd      	mov	sp, r7
 8011fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fcc:	4770      	bx	lr
 8011fce:	bf00      	nop
 8011fd0:	66666667 	.word	0x66666667
 8011fd4:	10624dd3 	.word	0x10624dd3

08011fd8 <flash_led>:
#endif



void flash_led(void)
{
 8011fd8:	b580      	push	{r7, lr}
 8011fda:	af00      	add	r7, sp, #0
#ifndef TRAIN_SIMU
	HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 8011fdc:	2140      	movs	r1, #64	; 0x40
 8011fde:	4802      	ldr	r0, [pc, #8]	; (8011fe8 <flash_led+0x10>)
 8011fe0:	f7f1 fcb5 	bl	800394e <HAL_GPIO_TogglePin>
	//HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
#endif
}
 8011fe4:	bf00      	nop
 8011fe6:	bd80      	pop	{r7, pc}
 8011fe8:	40020000 	.word	0x40020000

08011fec <trainctl_error>:




int trainctl_error(char l, int code, const char *msg)
{
 8011fec:	b580      	push	{r7, lr}
 8011fee:	b088      	sub	sp, #32
 8011ff0:	af02      	add	r7, sp, #8
 8011ff2:	4603      	mov	r3, r0
 8011ff4:	60b9      	str	r1, [r7, #8]
 8011ff6:	607a      	str	r2, [r7, #4]
 8011ff8:	73fb      	strb	r3, [r7, #15]
	int16_t c = code;
 8011ffa:	68bb      	ldr	r3, [r7, #8]
 8011ffc:	b21b      	sxth	r3, r3
 8011ffe:	82fb      	strh	r3, [r7, #22]
	// add debug msg or notification here
	if (c >=0) c=-1;
 8012000:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012004:	2b00      	cmp	r3, #0
 8012006:	db02      	blt.n	801200e <trainctl_error+0x22>
 8012008:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801200c:	82fb      	strh	r3, [r7, #22]
	trainctl_notif('G', 0, 'E', (void *)&c, sizeof(c));
 801200e:	f107 0216 	add.w	r2, r7, #22
 8012012:	2302      	movs	r3, #2
 8012014:	9300      	str	r3, [sp, #0]
 8012016:	4613      	mov	r3, r2
 8012018:	2245      	movs	r2, #69	; 0x45
 801201a:	2100      	movs	r1, #0
 801201c:	2047      	movs	r0, #71	; 0x47
 801201e:	f002 f819 	bl	8014054 <trainctl_notif>
	return code;
 8012022:	68bb      	ldr	r3, [r7, #8]
}
 8012024:	4618      	mov	r0, r3
 8012026:	3718      	adds	r7, #24
 8012028:	46bd      	mov	sp, r7
 801202a:	bd80      	pop	{r7, pc}

0801202c <get_param_def>:
#include <stddef.h>
#include <string.h>
#include "param.h"

static param_t *get_param_def(const param_t *rgpar, const char *n)
{
 801202c:	b580      	push	{r7, lr}
 801202e:	b084      	sub	sp, #16
 8012030:	af00      	add	r7, sp, #0
 8012032:	6078      	str	r0, [r7, #4]
 8012034:	6039      	str	r1, [r7, #0]
	for (param_t *p = (param_t*) rgpar; p->name; p++) {
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	60fb      	str	r3, [r7, #12]
 801203a:	e00d      	b.n	8012058 <get_param_def+0x2c>
		if (!strcmp(p->name, n)) return p;
 801203c:	68fb      	ldr	r3, [r7, #12]
 801203e:	681b      	ldr	r3, [r3, #0]
 8012040:	6839      	ldr	r1, [r7, #0]
 8012042:	4618      	mov	r0, r3
 8012044:	f7ee f8c4 	bl	80001d0 <strcmp>
 8012048:	4603      	mov	r3, r0
 801204a:	2b00      	cmp	r3, #0
 801204c:	d101      	bne.n	8012052 <get_param_def+0x26>
 801204e:	68fb      	ldr	r3, [r7, #12]
 8012050:	e007      	b.n	8012062 <get_param_def+0x36>
	for (param_t *p = (param_t*) rgpar; p->name; p++) {
 8012052:	68fb      	ldr	r3, [r7, #12]
 8012054:	3324      	adds	r3, #36	; 0x24
 8012056:	60fb      	str	r3, [r7, #12]
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	2b00      	cmp	r3, #0
 801205e:	d1ed      	bne.n	801203c <get_param_def+0x10>
	}
	return NULL;
 8012060:	2300      	movs	r3, #0
}
 8012062:	4618      	mov	r0, r3
 8012064:	3710      	adds	r7, #16
 8012066:	46bd      	mov	sp, r7
 8012068:	bd80      	pop	{r7, pc}

0801206a <param_get_value>:

int param_get_value(const param_t *params, void *ptr, const char *name, int32_t *pvalue, int32_t *pdef, int32_t *pmin, int32_t *pmax)
{
 801206a:	b580      	push	{r7, lr}
 801206c:	b088      	sub	sp, #32
 801206e:	af00      	add	r7, sp, #0
 8012070:	60f8      	str	r0, [r7, #12]
 8012072:	60b9      	str	r1, [r7, #8]
 8012074:	607a      	str	r2, [r7, #4]
 8012076:	603b      	str	r3, [r7, #0]
	param_t *prm = get_param_def(params, name);
 8012078:	6879      	ldr	r1, [r7, #4]
 801207a:	68f8      	ldr	r0, [r7, #12]
 801207c:	f7ff ffd6 	bl	801202c <get_param_def>
 8012080:	6178      	str	r0, [r7, #20]
	if (!prm) {
 8012082:	697b      	ldr	r3, [r7, #20]
 8012084:	2b00      	cmp	r3, #0
 8012086:	d101      	bne.n	801208c <param_get_value+0x22>
		return 10;
 8012088:	230a      	movs	r3, #10
 801208a:	e05c      	b.n	8012146 <param_get_value+0xdc>
	}
	if (pmin) *pmin = prm->min;
 801208c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801208e:	2b00      	cmp	r3, #0
 8012090:	d003      	beq.n	801209a <param_get_value+0x30>
 8012092:	697b      	ldr	r3, [r7, #20]
 8012094:	699a      	ldr	r2, [r3, #24]
 8012096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012098:	601a      	str	r2, [r3, #0]
	if (pmax) *pmax = prm->max;
 801209a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801209c:	2b00      	cmp	r3, #0
 801209e:	d003      	beq.n	80120a8 <param_get_value+0x3e>
 80120a0:	697b      	ldr	r3, [r7, #20]
 80120a2:	69da      	ldr	r2, [r3, #28]
 80120a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120a6:	601a      	str	r2, [r3, #0]
	if (pdef) *pdef = prm->def;
 80120a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d003      	beq.n	80120b6 <param_get_value+0x4c>
 80120ae:	697b      	ldr	r3, [r7, #20]
 80120b0:	6a1a      	ldr	r2, [r3, #32]
 80120b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120b4:	601a      	str	r2, [r3, #0]
	if (pvalue) {
 80120b6:	683b      	ldr	r3, [r7, #0]
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d043      	beq.n	8012144 <param_get_value+0xda>
		if (prm->getter) {
 80120bc:	697b      	ldr	r3, [r7, #20]
 80120be:	68db      	ldr	r3, [r3, #12]
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d007      	beq.n	80120d4 <param_get_value+0x6a>
			*pvalue = prm->getter(prm);
 80120c4:	697b      	ldr	r3, [r7, #20]
 80120c6:	68db      	ldr	r3, [r3, #12]
 80120c8:	6978      	ldr	r0, [r7, #20]
 80120ca:	4798      	blx	r3
 80120cc:	4602      	mov	r2, r0
 80120ce:	683b      	ldr	r3, [r7, #0]
 80120d0:	601a      	str	r2, [r3, #0]
 80120d2:	e037      	b.n	8012144 <param_get_value+0xda>
		} else {
			uint8_t *p = ptr;
 80120d4:	68bb      	ldr	r3, [r7, #8]
 80120d6:	61fb      	str	r3, [r7, #28]
			if (prm->ptr) p = prm->ptr;
 80120d8:	697b      	ldr	r3, [r7, #20]
 80120da:	685b      	ldr	r3, [r3, #4]
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d002      	beq.n	80120e6 <param_get_value+0x7c>
 80120e0:	697b      	ldr	r3, [r7, #20]
 80120e2:	685b      	ldr	r3, [r3, #4]
 80120e4:	61fb      	str	r3, [r7, #28]
			p += prm->offset;
 80120e6:	697b      	ldr	r3, [r7, #20]
 80120e8:	689b      	ldr	r3, [r3, #8]
 80120ea:	461a      	mov	r2, r3
 80120ec:	69fb      	ldr	r3, [r7, #28]
 80120ee:	4413      	add	r3, r2
 80120f0:	61fb      	str	r3, [r7, #28]
			if (!p) return 11;
 80120f2:	69fb      	ldr	r3, [r7, #28]
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d101      	bne.n	80120fc <param_get_value+0x92>
 80120f8:	230b      	movs	r3, #11
 80120fa:	e024      	b.n	8012146 <param_get_value+0xdc>
			if ((int)p<0x100) return 12; // probably an error if low ptr
 80120fc:	69fb      	ldr	r3, [r7, #28]
 80120fe:	2bff      	cmp	r3, #255	; 0xff
 8012100:	dc01      	bgt.n	8012106 <param_get_value+0x9c>
 8012102:	230c      	movs	r3, #12
 8012104:	e01f      	b.n	8012146 <param_get_value+0xdc>

			int8_t v8; int16_t v16; int32_t v32;
			switch (prm->size) {
 8012106:	697b      	ldr	r3, [r7, #20]
 8012108:	695b      	ldr	r3, [r3, #20]
 801210a:	2b02      	cmp	r3, #2
 801210c:	d00a      	beq.n	8012124 <param_get_value+0xba>
 801210e:	2b04      	cmp	r3, #4
 8012110:	d00f      	beq.n	8012132 <param_get_value+0xc8>
 8012112:	2b01      	cmp	r3, #1
 8012114:	d111      	bne.n	801213a <param_get_value+0xd0>
			case 1:
				v8 = *((int8_t *)p);
 8012116:	69fb      	ldr	r3, [r7, #28]
 8012118:	781b      	ldrb	r3, [r3, #0]
 801211a:	747b      	strb	r3, [r7, #17]
				v32 = (int32_t)v8;
 801211c:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8012120:	61bb      	str	r3, [r7, #24]
				break;
 8012122:	e00c      	b.n	801213e <param_get_value+0xd4>
			case 2:
				v16 = *((int16_t *)p);
 8012124:	69fb      	ldr	r3, [r7, #28]
 8012126:	881b      	ldrh	r3, [r3, #0]
 8012128:	827b      	strh	r3, [r7, #18]
				v32 = (int32_t)v16;
 801212a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801212e:	61bb      	str	r3, [r7, #24]
				break;
 8012130:	e005      	b.n	801213e <param_get_value+0xd4>
			case 4:
				v32 = *((int32_t *)p);
 8012132:	69fb      	ldr	r3, [r7, #28]
 8012134:	681b      	ldr	r3, [r3, #0]
 8012136:	61bb      	str	r3, [r7, #24]
				break;
 8012138:	e001      	b.n	801213e <param_get_value+0xd4>
			default:
				return 12;
 801213a:	230c      	movs	r3, #12
 801213c:	e003      	b.n	8012146 <param_get_value+0xdc>
			}
			*pvalue = v32;
 801213e:	683b      	ldr	r3, [r7, #0]
 8012140:	69ba      	ldr	r2, [r7, #24]
 8012142:	601a      	str	r2, [r3, #0]
		}
	}
	return 0;
 8012144:	2300      	movs	r3, #0
}
 8012146:	4618      	mov	r0, r3
 8012148:	3720      	adds	r7, #32
 801214a:	46bd      	mov	sp, r7
 801214c:	bd80      	pop	{r7, pc}

0801214e <param_set_value>:
int param_set_value(const param_t *params, void *ptr, const char *name, int32_t value)
{
 801214e:	b580      	push	{r7, lr}
 8012150:	b088      	sub	sp, #32
 8012152:	af00      	add	r7, sp, #0
 8012154:	60f8      	str	r0, [r7, #12]
 8012156:	60b9      	str	r1, [r7, #8]
 8012158:	607a      	str	r2, [r7, #4]
 801215a:	603b      	str	r3, [r7, #0]
	param_t *prm = get_param_def(params, name);
 801215c:	6879      	ldr	r1, [r7, #4]
 801215e:	68f8      	ldr	r0, [r7, #12]
 8012160:	f7ff ff64 	bl	801202c <get_param_def>
 8012164:	61b8      	str	r0, [r7, #24]
	if (!prm) {
 8012166:	69bb      	ldr	r3, [r7, #24]
 8012168:	2b00      	cmp	r3, #0
 801216a:	d101      	bne.n	8012170 <param_set_value+0x22>
		return 10;
 801216c:	230a      	movs	r3, #10
 801216e:	e03f      	b.n	80121f0 <param_set_value+0xa2>
	}
	if (prm->setter) {
 8012170:	69bb      	ldr	r3, [r7, #24]
 8012172:	691b      	ldr	r3, [r3, #16]
 8012174:	2b00      	cmp	r3, #0
 8012176:	d005      	beq.n	8012184 <param_set_value+0x36>
		//if ((1)) return 42;
		prm->setter(prm, value);
 8012178:	69bb      	ldr	r3, [r7, #24]
 801217a:	691b      	ldr	r3, [r3, #16]
 801217c:	6839      	ldr	r1, [r7, #0]
 801217e:	69b8      	ldr	r0, [r7, #24]
 8012180:	4798      	blx	r3
 8012182:	e034      	b.n	80121ee <param_set_value+0xa0>
	} else {
		uint8_t *p = ptr;
 8012184:	68bb      	ldr	r3, [r7, #8]
 8012186:	61fb      	str	r3, [r7, #28]
		if (prm->ptr) p = prm->ptr;
 8012188:	69bb      	ldr	r3, [r7, #24]
 801218a:	685b      	ldr	r3, [r3, #4]
 801218c:	2b00      	cmp	r3, #0
 801218e:	d002      	beq.n	8012196 <param_set_value+0x48>
 8012190:	69bb      	ldr	r3, [r7, #24]
 8012192:	685b      	ldr	r3, [r3, #4]
 8012194:	61fb      	str	r3, [r7, #28]
		p += prm->offset;
 8012196:	69bb      	ldr	r3, [r7, #24]
 8012198:	689b      	ldr	r3, [r3, #8]
 801219a:	461a      	mov	r2, r3
 801219c:	69fb      	ldr	r3, [r7, #28]
 801219e:	4413      	add	r3, r2
 80121a0:	61fb      	str	r3, [r7, #28]
		if (!p) return 11;
 80121a2:	69fb      	ldr	r3, [r7, #28]
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d101      	bne.n	80121ac <param_set_value+0x5e>
 80121a8:	230b      	movs	r3, #11
 80121aa:	e021      	b.n	80121f0 <param_set_value+0xa2>
		if ((int)p<0x100) return 12; // probably an error if low ptr
 80121ac:	69fb      	ldr	r3, [r7, #28]
 80121ae:	2bff      	cmp	r3, #255	; 0xff
 80121b0:	dc01      	bgt.n	80121b6 <param_set_value+0x68>
 80121b2:	230c      	movs	r3, #12
 80121b4:	e01c      	b.n	80121f0 <param_set_value+0xa2>

		int8_t v8; int16_t v16; int32_t v32;
		v32 = value;
 80121b6:	683b      	ldr	r3, [r7, #0]
 80121b8:	617b      	str	r3, [r7, #20]
		switch (prm->size) {
 80121ba:	69bb      	ldr	r3, [r7, #24]
 80121bc:	695b      	ldr	r3, [r3, #20]
 80121be:	2b02      	cmp	r3, #2
 80121c0:	d009      	beq.n	80121d6 <param_set_value+0x88>
 80121c2:	2b04      	cmp	r3, #4
 80121c4:	d00d      	beq.n	80121e2 <param_set_value+0x94>
 80121c6:	2b01      	cmp	r3, #1
 80121c8:	d10f      	bne.n	80121ea <param_set_value+0x9c>
		case 1:
			v8 = (int8_t) v32;
 80121ca:	697b      	ldr	r3, [r7, #20]
 80121cc:	747b      	strb	r3, [r7, #17]
			*((int8_t *)p) = v8;
 80121ce:	69fb      	ldr	r3, [r7, #28]
 80121d0:	7c7a      	ldrb	r2, [r7, #17]
 80121d2:	701a      	strb	r2, [r3, #0]
			break;
 80121d4:	e00b      	b.n	80121ee <param_set_value+0xa0>
		case 2:
			v16 = (int16_t) v32;
 80121d6:	697b      	ldr	r3, [r7, #20]
 80121d8:	827b      	strh	r3, [r7, #18]
			*((int16_t *)p) = v16;
 80121da:	69fb      	ldr	r3, [r7, #28]
 80121dc:	8a7a      	ldrh	r2, [r7, #18]
 80121de:	801a      	strh	r2, [r3, #0]
			break;
 80121e0:	e005      	b.n	80121ee <param_set_value+0xa0>
		case 4:
			*((int32_t *)p) = v32;
 80121e2:	69fb      	ldr	r3, [r7, #28]
 80121e4:	697a      	ldr	r2, [r7, #20]
 80121e6:	601a      	str	r2, [r3, #0]
			break;
 80121e8:	e001      	b.n	80121ee <param_set_value+0xa0>
		default:
			return 12;
 80121ea:	230c      	movs	r3, #12
 80121ec:	e000      	b.n	80121f0 <param_set_value+0xa2>
		}
	}
	return 0;
 80121ee:	2300      	movs	r3, #0
}
 80121f0:	4618      	mov	r0, r3
 80121f2:	3720      	adds	r7, #32
 80121f4:	46bd      	mov	sp, r7
 80121f6:	bd80      	pop	{r7, pc}

080121f8 <pidctl_reset>:
#include <memory.h>
#include "pidctl.h"
#include "misc.h"

void pidctl_reset(const pidctl_config_t *c, pidctl_vars_t *v)
{
 80121f8:	b480      	push	{r7}
 80121fa:	b083      	sub	sp, #12
 80121fc:	af00      	add	r7, sp, #0
 80121fe:	6078      	str	r0, [r7, #4]
 8012200:	6039      	str	r1, [r7, #0]
    v->has_last = 0;
 8012202:	683a      	ldr	r2, [r7, #0]
 8012204:	7b13      	ldrb	r3, [r2, #12]
 8012206:	f36f 0300 	bfc	r3, #0, #1
 801220a:	7313      	strb	r3, [r2, #12]
	v->last_err = 0;
 801220c:	683b      	ldr	r3, [r7, #0]
 801220e:	2200      	movs	r2, #0
 8012210:	601a      	str	r2, [r3, #0]
	v->sume     = 0;
 8012212:	683b      	ldr	r3, [r7, #0]
 8012214:	2200      	movs	r2, #0
 8012216:	605a      	str	r2, [r3, #4]
	v->target_v = 0;
 8012218:	683b      	ldr	r3, [r7, #0]
 801221a:	2200      	movs	r2, #0
 801221c:	609a      	str	r2, [r3, #8]
	v->stopped = 1;
 801221e:	683a      	ldr	r2, [r7, #0]
 8012220:	7b13      	ldrb	r3, [r2, #12]
 8012222:	f043 0302 	orr.w	r3, r3, #2
 8012226:	7313      	strb	r3, [r2, #12]
	v->has_last = 0;
 8012228:	683a      	ldr	r2, [r7, #0]
 801222a:	7b13      	ldrb	r3, [r2, #12]
 801222c:	f36f 0300 	bfc	r3, #0, #1
 8012230:	7313      	strb	r3, [r2, #12]
}
 8012232:	bf00      	nop
 8012234:	370c      	adds	r7, #12
 8012236:	46bd      	mov	sp, r7
 8012238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801223c:	4770      	bx	lr

0801223e <pidctl_set_target>:

void pidctl_set_target(const pidctl_config_t *c, pidctl_vars_t *v, int32_t val)
{
 801223e:	b480      	push	{r7}
 8012240:	b085      	sub	sp, #20
 8012242:	af00      	add	r7, sp, #0
 8012244:	60f8      	str	r0, [r7, #12]
 8012246:	60b9      	str	r1, [r7, #8]
 8012248:	607a      	str	r2, [r7, #4]
	if ((0)) pidctl_reset(c,v);
    if ((0)) v->sume = val;
	v->target_v = val;
 801224a:	68bb      	ldr	r3, [r7, #8]
 801224c:	687a      	ldr	r2, [r7, #4]
 801224e:	609a      	str	r2, [r3, #8]
}
 8012250:	bf00      	nop
 8012252:	3714      	adds	r7, #20
 8012254:	46bd      	mov	sp, r7
 8012256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801225a:	4770      	bx	lr

0801225c <pidctl_value>:

#define MAX_I (3000*100)

int32_t pidctl_value(const pidctl_config_t *c, pidctl_vars_t *v, int32_t cur_v, uint32_t dt)
{
 801225c:	b480      	push	{r7}
 801225e:	b089      	sub	sp, #36	; 0x24
 8012260:	af00      	add	r7, sp, #0
 8012262:	60f8      	str	r0, [r7, #12]
 8012264:	60b9      	str	r1, [r7, #8]
 8012266:	607a      	str	r2, [r7, #4]
 8012268:	603b      	str	r3, [r7, #0]
	// cuv in native BEMF value
    if (!dt) dt = 1;
 801226a:	683b      	ldr	r3, [r7, #0]
 801226c:	2b00      	cmp	r3, #0
 801226e:	d101      	bne.n	8012274 <pidctl_value+0x18>
 8012270:	2301      	movs	r3, #1
 8012272:	603b      	str	r3, [r7, #0]
    if (dt>100) dt=100;
 8012274:	683b      	ldr	r3, [r7, #0]
 8012276:	2b64      	cmp	r3, #100	; 0x64
 8012278:	d901      	bls.n	801227e <pidctl_value+0x22>
 801227a:	2364      	movs	r3, #100	; 0x64
 801227c:	603b      	str	r3, [r7, #0]
	int32_t err = v->target_v - cur_v;
 801227e:	68bb      	ldr	r3, [r7, #8]
 8012280:	689a      	ldr	r2, [r3, #8]
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	1ad3      	subs	r3, r2, r3
 8012286:	61fb      	str	r3, [r7, #28]
    if (err> 2*MAX_PID_VALUE) err =  2*MAX_PID_VALUE;
 8012288:	69fb      	ldr	r3, [r7, #28]
 801228a:	f5b3 7f0c 	cmp.w	r3, #560	; 0x230
 801228e:	dd02      	ble.n	8012296 <pidctl_value+0x3a>
 8012290:	f44f 730c 	mov.w	r3, #560	; 0x230
 8012294:	61fb      	str	r3, [r7, #28]
    if (err<-2*MAX_PID_VALUE) err = -2*MAX_PID_VALUE;
 8012296:	69fb      	ldr	r3, [r7, #28]
 8012298:	f513 7f0c 	cmn.w	r3, #560	; 0x230
 801229c:	da01      	bge.n	80122a2 <pidctl_value+0x46>
 801229e:	4b34      	ldr	r3, [pc, #208]	; (8012370 <pidctl_value+0x114>)
 80122a0:	61fb      	str	r3, [r7, #28]

    int32_t dv = (v->has_last) ? 1000*(err - v->last_err)/((int32_t)dt) : 0; //XXX
 80122a2:	68bb      	ldr	r3, [r7, #8]
 80122a4:	7b1b      	ldrb	r3, [r3, #12]
 80122a6:	f003 0301 	and.w	r3, r3, #1
 80122aa:	b2db      	uxtb	r3, r3
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d00b      	beq.n	80122c8 <pidctl_value+0x6c>
 80122b0:	68bb      	ldr	r3, [r7, #8]
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	69fa      	ldr	r2, [r7, #28]
 80122b6:	1ad3      	subs	r3, r2, r3
 80122b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80122bc:	fb02 f203 	mul.w	r2, r2, r3
 80122c0:	683b      	ldr	r3, [r7, #0]
 80122c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80122c6:	e000      	b.n	80122ca <pidctl_value+0x6e>
 80122c8:	2300      	movs	r3, #0
 80122ca:	61bb      	str	r3, [r7, #24]
	v->last_err = err;
 80122cc:	68bb      	ldr	r3, [r7, #8]
 80122ce:	69fa      	ldr	r2, [r7, #28]
 80122d0:	601a      	str	r2, [r3, #0]
    v->has_last = 1;
 80122d2:	68ba      	ldr	r2, [r7, #8]
 80122d4:	7b13      	ldrb	r3, [r2, #12]
 80122d6:	f043 0301 	orr.w	r3, r3, #1
 80122da:	7313      	strb	r3, [r2, #12]
	if ((1)) v->sume += err*dt;
 80122dc:	68bb      	ldr	r3, [r7, #8]
 80122de:	685b      	ldr	r3, [r3, #4]
 80122e0:	4619      	mov	r1, r3
 80122e2:	69fb      	ldr	r3, [r7, #28]
 80122e4:	683a      	ldr	r2, [r7, #0]
 80122e6:	fb02 f303 	mul.w	r3, r2, r3
 80122ea:	440b      	add	r3, r1
 80122ec:	461a      	mov	r2, r3
 80122ee:	68bb      	ldr	r3, [r7, #8]
 80122f0:	605a      	str	r2, [r3, #4]
    else     v->sume = v->sume*.99 + err*dt;
    if (v->sume>MAX_I) v->sume = MAX_I;
 80122f2:	68bb      	ldr	r3, [r7, #8]
 80122f4:	685b      	ldr	r3, [r3, #4]
 80122f6:	4a1f      	ldr	r2, [pc, #124]	; (8012374 <pidctl_value+0x118>)
 80122f8:	4293      	cmp	r3, r2
 80122fa:	dd03      	ble.n	8012304 <pidctl_value+0xa8>
 80122fc:	68bb      	ldr	r3, [r7, #8]
 80122fe:	4a1d      	ldr	r2, [pc, #116]	; (8012374 <pidctl_value+0x118>)
 8012300:	605a      	str	r2, [r3, #4]
 8012302:	e007      	b.n	8012314 <pidctl_value+0xb8>
    else if (v->sume<-MAX_I) v->sume = -MAX_I;
 8012304:	68bb      	ldr	r3, [r7, #8]
 8012306:	685b      	ldr	r3, [r3, #4]
 8012308:	4a1b      	ldr	r2, [pc, #108]	; (8012378 <pidctl_value+0x11c>)
 801230a:	4293      	cmp	r3, r2
 801230c:	da02      	bge.n	8012314 <pidctl_value+0xb8>
 801230e:	68bb      	ldr	r3, [r7, #8]
 8012310:	4a19      	ldr	r2, [pc, #100]	; (8012378 <pidctl_value+0x11c>)
 8012312:	605a      	str	r2, [r3, #4]
	int32_t iv = v->sume / 100;
 8012314:	68bb      	ldr	r3, [r7, #8]
 8012316:	685b      	ldr	r3, [r3, #4]
 8012318:	4a18      	ldr	r2, [pc, #96]	; (801237c <pidctl_value+0x120>)
 801231a:	fb82 1203 	smull	r1, r2, r2, r3
 801231e:	1152      	asrs	r2, r2, #5
 8012320:	17db      	asrs	r3, r3, #31
 8012322:	1ad3      	subs	r3, r2, r3
 8012324:	617b      	str	r3, [r7, #20]

	//debug_info('T', 0, "PID  ", err, iv, dv);

	int32_t r = c->kP * err + (c->kD * dv)/1000 + c->kI * iv;
 8012326:	68fb      	ldr	r3, [r7, #12]
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	69fa      	ldr	r2, [r7, #28]
 801232c:	fb02 f203 	mul.w	r2, r2, r3
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	689b      	ldr	r3, [r3, #8]
 8012334:	69b9      	ldr	r1, [r7, #24]
 8012336:	fb01 f303 	mul.w	r3, r1, r3
 801233a:	4911      	ldr	r1, [pc, #68]	; (8012380 <pidctl_value+0x124>)
 801233c:	fb81 0103 	smull	r0, r1, r1, r3
 8012340:	1189      	asrs	r1, r1, #6
 8012342:	17db      	asrs	r3, r3, #31
 8012344:	1acb      	subs	r3, r1, r3
 8012346:	441a      	add	r2, r3
 8012348:	68fb      	ldr	r3, [r7, #12]
 801234a:	685b      	ldr	r3, [r3, #4]
 801234c:	6979      	ldr	r1, [r7, #20]
 801234e:	fb01 f303 	mul.w	r3, r1, r3
 8012352:	4413      	add	r3, r2
 8012354:	613b      	str	r3, [r7, #16]
	//debug_info('T', 0, "PID*k",  c->kP * err, c->kI * iv, (c->kD * dv)/1000);

	return r/1000;
 8012356:	693b      	ldr	r3, [r7, #16]
 8012358:	4a09      	ldr	r2, [pc, #36]	; (8012380 <pidctl_value+0x124>)
 801235a:	fb82 1203 	smull	r1, r2, r2, r3
 801235e:	1192      	asrs	r2, r2, #6
 8012360:	17db      	asrs	r3, r3, #31
 8012362:	1ad3      	subs	r3, r2, r3
}
 8012364:	4618      	mov	r0, r3
 8012366:	3724      	adds	r7, #36	; 0x24
 8012368:	46bd      	mov	sp, r7
 801236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801236e:	4770      	bx	lr
 8012370:	fffffdd0 	.word	0xfffffdd0
 8012374:	000493e0 	.word	0x000493e0
 8012378:	fffb6c20 	.word	0xfffb6c20
 801237c:	51eb851f 	.word	0x51eb851f
 8012380:	10624dd3 	.word	0x10624dd3

08012384 <config_error>:
{
 8012384:	b580      	push	{r7, lr}
 8012386:	b082      	sub	sp, #8
 8012388:	af00      	add	r7, sp, #0
 801238a:	6078      	str	r0, [r7, #4]
 801238c:	6039      	str	r1, [r7, #0]
	trainctl_error('G', code, msg);
 801238e:	683a      	ldr	r2, [r7, #0]
 8012390:	6879      	ldr	r1, [r7, #4]
 8012392:	2047      	movs	r0, #71	; 0x47
 8012394:	f7ff fe2a 	bl	8011fec <trainctl_error>
	return NULL;
 8012398:	2300      	movs	r3, #0
}
 801239a:	4618      	mov	r0, r3
 801239c:	3708      	adds	r7, #8
 801239e:	46bd      	mov	sp, r7
 80123a0:	bd80      	pop	{r7, pc}
	...

080123a4 <get_canton_cnf>:
        static turnout_vars_t TurnoutVars[NUM_TURNOUTS];

static int setup_done = 0;

const canton_config_t *get_canton_cnf(int idx)
{
 80123a4:	b580      	push	{r7, lr}
 80123a6:	b082      	sub	sp, #8
 80123a8:	af00      	add	r7, sp, #0
 80123aa:	6078      	str	r0, [r7, #4]
	if (!setup_done) return config_error(ERR_SETUP_KO, "railconfig_setup_default not called");
 80123ac:	4b0e      	ldr	r3, [pc, #56]	; (80123e8 <get_canton_cnf+0x44>)
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d106      	bne.n	80123c2 <get_canton_cnf+0x1e>
 80123b4:	490d      	ldr	r1, [pc, #52]	; (80123ec <get_canton_cnf+0x48>)
 80123b6:	f06f 0009 	mvn.w	r0, #9
 80123ba:	f7ff ffe3 	bl	8012384 <config_error>
 80123be:	4603      	mov	r3, r0
 80123c0:	e00d      	b.n	80123de <get_canton_cnf+0x3a>
	if ((idx<0) || (idx>= NUM_CANTONS)) return NULL;
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	db02      	blt.n	80123ce <get_canton_cnf+0x2a>
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	2b05      	cmp	r3, #5
 80123cc:	dd01      	ble.n	80123d2 <get_canton_cnf+0x2e>
 80123ce:	2300      	movs	r3, #0
 80123d0:	e005      	b.n	80123de <get_canton_cnf+0x3a>
	return &Cantons[idx];
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	228c      	movs	r2, #140	; 0x8c
 80123d6:	fb02 f303 	mul.w	r3, r2, r3
 80123da:	4a05      	ldr	r2, [pc, #20]	; (80123f0 <get_canton_cnf+0x4c>)
 80123dc:	4413      	add	r3, r2
}
 80123de:	4618      	mov	r0, r3
 80123e0:	3708      	adds	r7, #8
 80123e2:	46bd      	mov	sp, r7
 80123e4:	bd80      	pop	{r7, pc}
 80123e6:	bf00      	nop
 80123e8:	20005264 	.word	0x20005264
 80123ec:	08015fdc 	.word	0x08015fdc
 80123f0:	200001b0 	.word	0x200001b0

080123f4 <get_canton_vars>:

canton_vars_t *get_canton_vars(int idx)
{
 80123f4:	b580      	push	{r7, lr}
 80123f6:	b082      	sub	sp, #8
 80123f8:	af00      	add	r7, sp, #0
 80123fa:	6078      	str	r0, [r7, #4]
	if (!setup_done) return config_error(ERR_SETUP_KO, "railconfig_setup_default not called");
 80123fc:	4b0e      	ldr	r3, [pc, #56]	; (8012438 <get_canton_vars+0x44>)
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	2b00      	cmp	r3, #0
 8012402:	d106      	bne.n	8012412 <get_canton_vars+0x1e>
 8012404:	490d      	ldr	r1, [pc, #52]	; (801243c <get_canton_vars+0x48>)
 8012406:	f06f 0009 	mvn.w	r0, #9
 801240a:	f7ff ffbb 	bl	8012384 <config_error>
 801240e:	4603      	mov	r3, r0
 8012410:	e00e      	b.n	8012430 <get_canton_vars+0x3c>
	if ((idx<0) || (idx>= NUM_CANTONS)) return NULL;
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	2b00      	cmp	r3, #0
 8012416:	db02      	blt.n	801241e <get_canton_vars+0x2a>
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	2b05      	cmp	r3, #5
 801241c:	dd01      	ble.n	8012422 <get_canton_vars+0x2e>
 801241e:	2300      	movs	r3, #0
 8012420:	e006      	b.n	8012430 <get_canton_vars+0x3c>
	return &CantonsVars[idx];
 8012422:	687a      	ldr	r2, [r7, #4]
 8012424:	4613      	mov	r3, r2
 8012426:	009b      	lsls	r3, r3, #2
 8012428:	4413      	add	r3, r2
 801242a:	009b      	lsls	r3, r3, #2
 801242c:	4a04      	ldr	r2, [pc, #16]	; (8012440 <get_canton_vars+0x4c>)
 801242e:	4413      	add	r3, r2
}
 8012430:	4618      	mov	r0, r3
 8012432:	3708      	adds	r7, #8
 8012434:	46bd      	mov	sp, r7
 8012436:	bd80      	pop	{r7, pc}
 8012438:	20005264 	.word	0x20005264
 801243c:	08015fdc 	.word	0x08015fdc
 8012440:	200051b0 	.word	0x200051b0

08012444 <get_block_canton_cnf>:

const block_canton_config_t *get_block_canton_cnf(int idx)
{
 8012444:	b580      	push	{r7, lr}
 8012446:	b082      	sub	sp, #8
 8012448:	af00      	add	r7, sp, #0
 801244a:	6078      	str	r0, [r7, #4]
	if (!setup_done) return config_error(ERR_SETUP_KO, "railconfig_setup_default not called");
 801244c:	4b0e      	ldr	r3, [pc, #56]	; (8012488 <get_block_canton_cnf+0x44>)
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	2b00      	cmp	r3, #0
 8012452:	d106      	bne.n	8012462 <get_block_canton_cnf+0x1e>
 8012454:	490d      	ldr	r1, [pc, #52]	; (801248c <get_block_canton_cnf+0x48>)
 8012456:	f06f 0009 	mvn.w	r0, #9
 801245a:	f7ff ff93 	bl	8012384 <config_error>
 801245e:	4603      	mov	r3, r0
 8012460:	e00d      	b.n	801247e <get_block_canton_cnf+0x3a>
	if ((idx<0) || (idx>= NUM_CANTONS)) return NULL;
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	2b00      	cmp	r3, #0
 8012466:	db02      	blt.n	801246e <get_block_canton_cnf+0x2a>
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	2b05      	cmp	r3, #5
 801246c:	dd01      	ble.n	8012472 <get_block_canton_cnf+0x2e>
 801246e:	2300      	movs	r3, #0
 8012470:	e005      	b.n	801247e <get_block_canton_cnf+0x3a>
	return &BlockCantons[idx];
 8012472:	687a      	ldr	r2, [r7, #4]
 8012474:	4613      	mov	r3, r2
 8012476:	00db      	lsls	r3, r3, #3
 8012478:	1a9b      	subs	r3, r3, r2
 801247a:	4a05      	ldr	r2, [pc, #20]	; (8012490 <get_block_canton_cnf+0x4c>)
 801247c:	4413      	add	r3, r2
}
 801247e:	4618      	mov	r0, r3
 8012480:	3708      	adds	r7, #8
 8012482:	46bd      	mov	sp, r7
 8012484:	bd80      	pop	{r7, pc}
 8012486:	bf00      	nop
 8012488:	20005264 	.word	0x20005264
 801248c:	08015fdc 	.word	0x08015fdc
 8012490:	200004f8 	.word	0x200004f8

08012494 <get_block_canton_vars>:

block_canton_vars_t *get_block_canton_vars(int idx)
{
 8012494:	b580      	push	{r7, lr}
 8012496:	b082      	sub	sp, #8
 8012498:	af00      	add	r7, sp, #0
 801249a:	6078      	str	r0, [r7, #4]
	if (!setup_done) return config_error(ERR_SETUP_KO, "railconfig_setup_default not called");
 801249c:	4b0d      	ldr	r3, [pc, #52]	; (80124d4 <get_block_canton_vars+0x40>)
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d106      	bne.n	80124b2 <get_block_canton_vars+0x1e>
 80124a4:	490c      	ldr	r1, [pc, #48]	; (80124d8 <get_block_canton_vars+0x44>)
 80124a6:	f06f 0009 	mvn.w	r0, #9
 80124aa:	f7ff ff6b 	bl	8012384 <config_error>
 80124ae:	4603      	mov	r3, r0
 80124b0:	e00b      	b.n	80124ca <get_block_canton_vars+0x36>
	if ((idx<0) || (idx>= NUM_CANTONS)) return NULL;
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	db02      	blt.n	80124be <get_block_canton_vars+0x2a>
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	2b05      	cmp	r3, #5
 80124bc:	dd01      	ble.n	80124c2 <get_block_canton_vars+0x2e>
 80124be:	2300      	movs	r3, #0
 80124c0:	e003      	b.n	80124ca <get_block_canton_vars+0x36>
	return &BlockCantonsVars[idx];
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	005b      	lsls	r3, r3, #1
 80124c6:	4a05      	ldr	r2, [pc, #20]	; (80124dc <get_block_canton_vars+0x48>)
 80124c8:	4413      	add	r3, r2
}
 80124ca:	4618      	mov	r0, r3
 80124cc:	3708      	adds	r7, #8
 80124ce:	46bd      	mov	sp, r7
 80124d0:	bd80      	pop	{r7, pc}
 80124d2:	bf00      	nop
 80124d4:	20005264 	.word	0x20005264
 80124d8:	08015fdc 	.word	0x08015fdc
 80124dc:	20005228 	.word	0x20005228

080124e0 <get_train_cnf>:
const train_config_t *get_train_cnf(int idx)
{
 80124e0:	b580      	push	{r7, lr}
 80124e2:	b082      	sub	sp, #8
 80124e4:	af00      	add	r7, sp, #0
 80124e6:	6078      	str	r0, [r7, #4]
	if (!setup_done) return config_error(ERR_SETUP_KO, "railconfig_setup_default not called");
 80124e8:	4b0e      	ldr	r3, [pc, #56]	; (8012524 <get_train_cnf+0x44>)
 80124ea:	681b      	ldr	r3, [r3, #0]
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d106      	bne.n	80124fe <get_train_cnf+0x1e>
 80124f0:	490d      	ldr	r1, [pc, #52]	; (8012528 <get_train_cnf+0x48>)
 80124f2:	f06f 0009 	mvn.w	r0, #9
 80124f6:	f7ff ff45 	bl	8012384 <config_error>
 80124fa:	4603      	mov	r3, r0
 80124fc:	e00e      	b.n	801251c <get_train_cnf+0x3c>
	if ((idx<0) || (idx>= NUM_TRAINS)) return NULL;
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	2b00      	cmp	r3, #0
 8012502:	db02      	blt.n	801250a <get_train_cnf+0x2a>
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	2b00      	cmp	r3, #0
 8012508:	dd01      	ble.n	801250e <get_train_cnf+0x2e>
 801250a:	2300      	movs	r3, #0
 801250c:	e006      	b.n	801251c <get_train_cnf+0x3c>
	return &Trains[idx];
 801250e:	687a      	ldr	r2, [r7, #4]
 8012510:	4613      	mov	r3, r2
 8012512:	00db      	lsls	r3, r3, #3
 8012514:	1a9b      	subs	r3, r3, r2
 8012516:	009b      	lsls	r3, r3, #2
 8012518:	4a04      	ldr	r2, [pc, #16]	; (801252c <get_train_cnf+0x4c>)
 801251a:	4413      	add	r3, r2
}
 801251c:	4618      	mov	r0, r3
 801251e:	3708      	adds	r7, #8
 8012520:	46bd      	mov	sp, r7
 8012522:	bd80      	pop	{r7, pc}
 8012524:	20005264 	.word	0x20005264
 8012528:	08015fdc 	.word	0x08015fdc
 801252c:	20000524 	.word	0x20000524

08012530 <get_train_vars>:

train_vars_t *get_train_vars(int idx)
{
 8012530:	b580      	push	{r7, lr}
 8012532:	b082      	sub	sp, #8
 8012534:	af00      	add	r7, sp, #0
 8012536:	6078      	str	r0, [r7, #4]
	if (!setup_done) return config_error(ERR_SETUP_KO, "railconfig_setup_default not called");
 8012538:	4b0e      	ldr	r3, [pc, #56]	; (8012574 <get_train_vars+0x44>)
 801253a:	681b      	ldr	r3, [r3, #0]
 801253c:	2b00      	cmp	r3, #0
 801253e:	d106      	bne.n	801254e <get_train_vars+0x1e>
 8012540:	490d      	ldr	r1, [pc, #52]	; (8012578 <get_train_vars+0x48>)
 8012542:	f06f 0009 	mvn.w	r0, #9
 8012546:	f7ff ff1d 	bl	8012384 <config_error>
 801254a:	4603      	mov	r3, r0
 801254c:	e00d      	b.n	801256a <get_train_vars+0x3a>
	if ((idx<0) || (idx>= NUM_TRAINS)) return NULL;
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	2b00      	cmp	r3, #0
 8012552:	db02      	blt.n	801255a <get_train_vars+0x2a>
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	2b00      	cmp	r3, #0
 8012558:	dd01      	ble.n	801255e <get_train_vars+0x2e>
 801255a:	2300      	movs	r3, #0
 801255c:	e005      	b.n	801256a <get_train_vars+0x3a>
	return &TrainsVars[idx];
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	222c      	movs	r2, #44	; 0x2c
 8012562:	fb02 f303 	mul.w	r3, r2, r3
 8012566:	4a05      	ldr	r2, [pc, #20]	; (801257c <get_train_vars+0x4c>)
 8012568:	4413      	add	r3, r2
}
 801256a:	4618      	mov	r0, r3
 801256c:	3708      	adds	r7, #8
 801256e:	46bd      	mov	sp, r7
 8012570:	bd80      	pop	{r7, pc}
 8012572:	bf00      	nop
 8012574:	20005264 	.word	0x20005264
 8012578:	08015fdc 	.word	0x08015fdc
 801257c:	20005234 	.word	0x20005234

08012580 <get_turnout_cnf>:


const turnout_config_t  *get_turnout_cnf(int idx)
{
 8012580:	b580      	push	{r7, lr}
 8012582:	b082      	sub	sp, #8
 8012584:	af00      	add	r7, sp, #0
 8012586:	6078      	str	r0, [r7, #4]
	if (!setup_done) return config_error(ERR_SETUP_KO, "railconfig_setup_default not called");
 8012588:	4b0d      	ldr	r3, [pc, #52]	; (80125c0 <get_turnout_cnf+0x40>)
 801258a:	681b      	ldr	r3, [r3, #0]
 801258c:	2b00      	cmp	r3, #0
 801258e:	d106      	bne.n	801259e <get_turnout_cnf+0x1e>
 8012590:	490c      	ldr	r1, [pc, #48]	; (80125c4 <get_turnout_cnf+0x44>)
 8012592:	f06f 0009 	mvn.w	r0, #9
 8012596:	f7ff fef5 	bl	8012384 <config_error>
 801259a:	4603      	mov	r3, r0
 801259c:	e00b      	b.n	80125b6 <get_turnout_cnf+0x36>
	if ((idx<0) || (idx>= NUM_TURNOUTS)) return NULL;
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	db02      	blt.n	80125aa <get_turnout_cnf+0x2a>
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	dd01      	ble.n	80125ae <get_turnout_cnf+0x2e>
 80125aa:	2300      	movs	r3, #0
 80125ac:	e003      	b.n	80125b6 <get_turnout_cnf+0x36>
	return &Turnouts[idx];
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	00db      	lsls	r3, r3, #3
 80125b2:	4a05      	ldr	r2, [pc, #20]	; (80125c8 <get_turnout_cnf+0x48>)
 80125b4:	4413      	add	r3, r2
}
 80125b6:	4618      	mov	r0, r3
 80125b8:	3708      	adds	r7, #8
 80125ba:	46bd      	mov	sp, r7
 80125bc:	bd80      	pop	{r7, pc}
 80125be:	bf00      	nop
 80125c0:	20005264 	.word	0x20005264
 80125c4:	08015fdc 	.word	0x08015fdc
 80125c8:	08017894 	.word	0x08017894

080125cc <get_turnout_vars>:
turnout_vars_t  *get_turnout_vars(int idx)
{
 80125cc:	b580      	push	{r7, lr}
 80125ce:	b082      	sub	sp, #8
 80125d0:	af00      	add	r7, sp, #0
 80125d2:	6078      	str	r0, [r7, #4]
	if (!setup_done) return config_error(ERR_SETUP_KO, "railconfig_setup_default not called");
 80125d4:	4b0d      	ldr	r3, [pc, #52]	; (801260c <get_turnout_vars+0x40>)
 80125d6:	681b      	ldr	r3, [r3, #0]
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d106      	bne.n	80125ea <get_turnout_vars+0x1e>
 80125dc:	490c      	ldr	r1, [pc, #48]	; (8012610 <get_turnout_vars+0x44>)
 80125de:	f06f 0009 	mvn.w	r0, #9
 80125e2:	f7ff fecf 	bl	8012384 <config_error>
 80125e6:	4603      	mov	r3, r0
 80125e8:	e00b      	b.n	8012602 <get_turnout_vars+0x36>
	if ((idx<0) || (idx>= NUM_TURNOUTS)) return NULL;
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	db02      	blt.n	80125f6 <get_turnout_vars+0x2a>
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	dd01      	ble.n	80125fa <get_turnout_vars+0x2e>
 80125f6:	2300      	movs	r3, #0
 80125f8:	e003      	b.n	8012602 <get_turnout_vars+0x36>
	return &TurnoutVars[idx];
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	005b      	lsls	r3, r3, #1
 80125fe:	4a05      	ldr	r2, [pc, #20]	; (8012614 <get_turnout_vars+0x48>)
 8012600:	4413      	add	r3, r2
}
 8012602:	4618      	mov	r0, r3
 8012604:	3708      	adds	r7, #8
 8012606:	46bd      	mov	sp, r7
 8012608:	bd80      	pop	{r7, pc}
 801260a:	bf00      	nop
 801260c:	20005264 	.word	0x20005264
 8012610:	08015fdc 	.word	0x08015fdc
 8012614:	20005260 	.word	0x20005260

08012618 <canton_idx>:


int canton_idx(canton_vars_t *v)
{
 8012618:	b480      	push	{r7}
 801261a:	b083      	sub	sp, #12
 801261c:	af00      	add	r7, sp, #0
 801261e:	6078      	str	r0, [r7, #4]
	return (int)(v-&CantonsVars[0]);
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	4a06      	ldr	r2, [pc, #24]	; (801263c <canton_idx+0x24>)
 8012624:	1a9b      	subs	r3, r3, r2
 8012626:	109b      	asrs	r3, r3, #2
 8012628:	4a05      	ldr	r2, [pc, #20]	; (8012640 <canton_idx+0x28>)
 801262a:	fb02 f303 	mul.w	r3, r2, r3
}
 801262e:	4618      	mov	r0, r3
 8012630:	370c      	adds	r7, #12
 8012632:	46bd      	mov	sp, r7
 8012634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012638:	4770      	bx	lr
 801263a:	bf00      	nop
 801263c:	200051b0 	.word	0x200051b0
 8012640:	cccccccd 	.word	0xcccccccd

08012644 <railconfig_setup_default>:
{
	return (int)(v-&TurnoutVars[0]);
}

void railconfig_setup_default(void)
{
 8012644:	b580      	push	{r7, lr}
 8012646:	b084      	sub	sp, #16
 8012648:	af00      	add	r7, sp, #0
    setup_done = 1;
 801264a:	4b33      	ldr	r3, [pc, #204]	; (8012718 <railconfig_setup_default+0xd4>)
 801264c:	2201      	movs	r2, #1
 801264e:	601a      	str	r2, [r3, #0]
	for (int i=0; i<NUM_CANTONS; i++) {
 8012650:	2300      	movs	r3, #0
 8012652:	60fb      	str	r3, [r7, #12]
 8012654:	e01f      	b.n	8012696 <railconfig_setup_default+0x52>
		canton_reset(&Cantons[i], &CantonsVars[i]);
 8012656:	68fb      	ldr	r3, [r7, #12]
 8012658:	228c      	movs	r2, #140	; 0x8c
 801265a:	fb02 f303 	mul.w	r3, r2, r3
 801265e:	4a2f      	ldr	r2, [pc, #188]	; (801271c <railconfig_setup_default+0xd8>)
 8012660:	1898      	adds	r0, r3, r2
 8012662:	68fa      	ldr	r2, [r7, #12]
 8012664:	4613      	mov	r3, r2
 8012666:	009b      	lsls	r3, r3, #2
 8012668:	4413      	add	r3, r2
 801266a:	009b      	lsls	r3, r3, #2
 801266c:	4a2c      	ldr	r2, [pc, #176]	; (8012720 <railconfig_setup_default+0xdc>)
 801266e:	4413      	add	r3, r2
 8012670:	4619      	mov	r1, r3
 8012672:	f7fe ffc1 	bl	80115f8 <canton_reset>
		block_canton_reset(&BlockCantons[i], &BlockCantonsVars[i]);
 8012676:	68fa      	ldr	r2, [r7, #12]
 8012678:	4613      	mov	r3, r2
 801267a:	00db      	lsls	r3, r3, #3
 801267c:	1a9b      	subs	r3, r3, r2
 801267e:	4a29      	ldr	r2, [pc, #164]	; (8012724 <railconfig_setup_default+0xe0>)
 8012680:	1898      	adds	r0, r3, r2
 8012682:	68fb      	ldr	r3, [r7, #12]
 8012684:	005b      	lsls	r3, r3, #1
 8012686:	4a28      	ldr	r2, [pc, #160]	; (8012728 <railconfig_setup_default+0xe4>)
 8012688:	4413      	add	r3, r2
 801268a:	4619      	mov	r1, r3
 801268c:	f7fe fe82 	bl	8011394 <block_canton_reset>
	for (int i=0; i<NUM_CANTONS; i++) {
 8012690:	68fb      	ldr	r3, [r7, #12]
 8012692:	3301      	adds	r3, #1
 8012694:	60fb      	str	r3, [r7, #12]
 8012696:	68fb      	ldr	r3, [r7, #12]
 8012698:	2b05      	cmp	r3, #5
 801269a:	dddc      	ble.n	8012656 <railconfig_setup_default+0x12>
	}
	for (int i=0; i<NUM_TRAINS; i++) {
 801269c:	2300      	movs	r3, #0
 801269e:	60bb      	str	r3, [r7, #8]
 80126a0:	e012      	b.n	80126c8 <railconfig_setup_default+0x84>
		train_reset(&Trains[i], &TrainsVars[i]);
 80126a2:	68ba      	ldr	r2, [r7, #8]
 80126a4:	4613      	mov	r3, r2
 80126a6:	00db      	lsls	r3, r3, #3
 80126a8:	1a9b      	subs	r3, r3, r2
 80126aa:	009b      	lsls	r3, r3, #2
 80126ac:	4a1f      	ldr	r2, [pc, #124]	; (801272c <railconfig_setup_default+0xe8>)
 80126ae:	1898      	adds	r0, r3, r2
 80126b0:	68bb      	ldr	r3, [r7, #8]
 80126b2:	222c      	movs	r2, #44	; 0x2c
 80126b4:	fb02 f303 	mul.w	r3, r2, r3
 80126b8:	4a1d      	ldr	r2, [pc, #116]	; (8012730 <railconfig_setup_default+0xec>)
 80126ba:	4413      	add	r3, r2
 80126bc:	4619      	mov	r1, r3
 80126be:	f000 f8da 	bl	8012876 <train_reset>
	for (int i=0; i<NUM_TRAINS; i++) {
 80126c2:	68bb      	ldr	r3, [r7, #8]
 80126c4:	3301      	adds	r3, #1
 80126c6:	60bb      	str	r3, [r7, #8]
 80126c8:	68bb      	ldr	r3, [r7, #8]
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	dde9      	ble.n	80126a2 <railconfig_setup_default+0x5e>
	}
    canton_set_train(0,  0);
 80126ce:	2100      	movs	r1, #0
 80126d0:	2000      	movs	r0, #0
 80126d2:	f7fe ffa2 	bl	801161a <canton_set_train>
    //canton_take(0, canton_occupied_loco,  0);
    TrainsVars[0].current_canton = 0;
 80126d6:	4b16      	ldr	r3, [pc, #88]	; (8012730 <railconfig_setup_default+0xec>)
 80126d8:	2200      	movs	r2, #0
 80126da:	751a      	strb	r2, [r3, #20]
    TrainsVars[0].current_canton_dir = 1;
 80126dc:	4b14      	ldr	r3, [pc, #80]	; (8012730 <railconfig_setup_default+0xec>)
 80126de:	2201      	movs	r2, #1
 80126e0:	759a      	strb	r2, [r3, #22]
    canton_set_train(2,  0);
 80126e2:	2100      	movs	r1, #0
 80126e4:	2002      	movs	r0, #2
 80126e6:	f7fe ff98 	bl	801161a <canton_set_train>
    //canton_take(1, canton_occupied_loco,  0);
    TrainsVars[0].next_canton = 2;
 80126ea:	4b11      	ldr	r3, [pc, #68]	; (8012730 <railconfig_setup_default+0xec>)
 80126ec:	2202      	movs	r2, #2
 80126ee:	755a      	strb	r2, [r3, #21]
    TrainsVars[0].next_canton_dir = 1;
 80126f0:	4b0f      	ldr	r3, [pc, #60]	; (8012730 <railconfig_setup_default+0xec>)
 80126f2:	2201      	movs	r2, #1
 80126f4:	75da      	strb	r2, [r3, #23]

    for (int i=0; i<NUM_TURNOUTS; i++) {
 80126f6:	2300      	movs	r3, #0
 80126f8:	607b      	str	r3, [r7, #4]
 80126fa:	e005      	b.n	8012708 <railconfig_setup_default+0xc4>
		turnout_reset(i);
 80126fc:	6878      	ldr	r0, [r7, #4]
 80126fe:	f000 ff5b 	bl	80135b8 <turnout_reset>
    for (int i=0; i<NUM_TURNOUTS; i++) {
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	3301      	adds	r3, #1
 8012706:	607b      	str	r3, [r7, #4]
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	2b00      	cmp	r3, #0
 801270c:	ddf6      	ble.n	80126fc <railconfig_setup_default+0xb8>
	}
}
 801270e:	bf00      	nop
 8012710:	3710      	adds	r7, #16
 8012712:	46bd      	mov	sp, r7
 8012714:	bd80      	pop	{r7, pc}
 8012716:	bf00      	nop
 8012718:	20005264 	.word	0x20005264
 801271c:	200001b0 	.word	0x200001b0
 8012720:	200051b0 	.word	0x200051b0
 8012724:	200004f8 	.word	0x200004f8
 8012728:	20005228 	.word	0x20005228
 801272c:	20000524 	.word	0x20000524
 8012730:	20005234 	.word	0x20005234

08012734 <_getval>:
        { offsetof(canton_vars_t, i_on) , 2   		    _P("canton_%d_ion")},
        { offsetof(canton_vars_t, i_off) , 2            _P("canton_%d_ioff")},
};

static int32_t _getval(void *ptr, off_t offset, int l)
{
 8012734:	b480      	push	{r7}
 8012736:	b089      	sub	sp, #36	; 0x24
 8012738:	af00      	add	r7, sp, #0
 801273a:	60f8      	str	r0, [r7, #12]
 801273c:	60b9      	str	r1, [r7, #8]
 801273e:	607a      	str	r2, [r7, #4]
	uint8_t *p8 = (uint8_t*)ptr;
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	61fb      	str	r3, [r7, #28]
	int32_t v32=0;
 8012744:	2300      	movs	r3, #0
 8012746:	617b      	str	r3, [r7, #20]
    int16_t v16; int8_t v8;
	switch(l) {
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	2b02      	cmp	r3, #2
 801274c:	d00c      	beq.n	8012768 <_getval+0x34>
 801274e:	2b04      	cmp	r3, #4
 8012750:	d014      	beq.n	801277c <_getval+0x48>
 8012752:	2b01      	cmp	r3, #1
 8012754:	d118      	bne.n	8012788 <_getval+0x54>
	case 1:
		v8 = p8[offset];
 8012756:	68bb      	ldr	r3, [r7, #8]
 8012758:	69fa      	ldr	r2, [r7, #28]
 801275a:	4413      	add	r3, r2
 801275c:	781b      	ldrb	r3, [r3, #0]
 801275e:	76fb      	strb	r3, [r7, #27]
		v32 = (int32_t) v8;
 8012760:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012764:	617b      	str	r3, [r7, #20]
		break;
 8012766:	e00f      	b.n	8012788 <_getval+0x54>
	case 2:
		memcpy(&v16, p8+offset, 2);
 8012768:	68bb      	ldr	r3, [r7, #8]
 801276a:	69fa      	ldr	r2, [r7, #28]
 801276c:	4413      	add	r3, r2
 801276e:	881b      	ldrh	r3, [r3, #0]
 8012770:	b29b      	uxth	r3, r3
 8012772:	827b      	strh	r3, [r7, #18]
		v32 = (int32_t) v16;
 8012774:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012778:	617b      	str	r3, [r7, #20]
		break;
 801277a:	e005      	b.n	8012788 <_getval+0x54>
	case 4:
		memcpy(&v32, p8+offset, 4);
 801277c:	68bb      	ldr	r3, [r7, #8]
 801277e:	69fa      	ldr	r2, [r7, #28]
 8012780:	4413      	add	r3, r2
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	617b      	str	r3, [r7, #20]
		break;
 8012786:	bf00      	nop
	}
	return v32;
 8012788:	697b      	ldr	r3, [r7, #20]
}
 801278a:	4618      	mov	r0, r3
 801278c:	3724      	adds	r7, #36	; 0x24
 801278e:	46bd      	mov	sp, r7
 8012790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012794:	4770      	bx	lr
	...

08012798 <stat_val_get>:
static const int numvalcanton = sizeof(statvalcanton)/sizeof(statvalcanton[0]);



int32_t stat_val_get(int step, int *pdone)
{
 8012798:	b580      	push	{r7, lr}
 801279a:	b08a      	sub	sp, #40	; 0x28
 801279c:	af00      	add	r7, sp, #0
 801279e:	6078      	str	r0, [r7, #4]
 80127a0:	6039      	str	r1, [r7, #0]
	
	*pdone = 0;
 80127a2:	683b      	ldr	r3, [r7, #0]
 80127a4:	2200      	movs	r2, #0
 80127a6:	601a      	str	r2, [r3, #0]
	int nt = step / numvaltrain;
 80127a8:	2209      	movs	r2, #9
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80127b0:	627b      	str	r3, [r7, #36]	; 0x24
	if (nt>=NUM_TRAINS) {
 80127b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	dd2c      	ble.n	8012812 <stat_val_get+0x7a>
		// canton
		step -= NUM_TRAINS*numvaltrain;
 80127b8:	2209      	movs	r2, #9
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	1a9b      	subs	r3, r3, r2
 80127be:	607b      	str	r3, [r7, #4]
		int nc = step / numvalcanton;
 80127c0:	2208      	movs	r2, #8
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80127c8:	617b      	str	r3, [r7, #20]
		if (nc >= NUM_CANTONS) {
 80127ca:	697b      	ldr	r3, [r7, #20]
 80127cc:	2b05      	cmp	r3, #5
 80127ce:	dd04      	ble.n	80127da <stat_val_get+0x42>
			// done
			*pdone = 1;
 80127d0:	683b      	ldr	r3, [r7, #0]
 80127d2:	2201      	movs	r2, #1
 80127d4:	601a      	str	r2, [r3, #0]
			return 0;
 80127d6:	2300      	movs	r3, #0
 80127d8:	e036      	b.n	8012848 <stat_val_get+0xb0>
		}
		int idx = step % numvalcanton;
 80127da:	2208      	movs	r2, #8
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	fb93 f1f2 	sdiv	r1, r3, r2
 80127e2:	fb02 f201 	mul.w	r2, r2, r1
 80127e6:	1a9b      	subs	r3, r3, r2
 80127e8:	613b      	str	r3, [r7, #16]
		canton_vars_t *vars = get_canton_vars(nc);
 80127ea:	6978      	ldr	r0, [r7, #20]
 80127ec:	f7ff fe02 	bl	80123f4 <get_canton_vars>
 80127f0:	60f8      	str	r0, [r7, #12]
		const stat_val_t *sv = &statvalcanton[idx];
 80127f2:	693b      	ldr	r3, [r7, #16]
 80127f4:	00db      	lsls	r3, r3, #3
 80127f6:	4a16      	ldr	r2, [pc, #88]	; (8012850 <stat_val_get+0xb8>)
 80127f8:	4413      	add	r3, r2
 80127fa:	60bb      	str	r3, [r7, #8]
		return _getval(vars, sv->off, sv->l);
 80127fc:	68bb      	ldr	r3, [r7, #8]
 80127fe:	6819      	ldr	r1, [r3, #0]
 8012800:	68bb      	ldr	r3, [r7, #8]
 8012802:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012806:	461a      	mov	r2, r3
 8012808:	68f8      	ldr	r0, [r7, #12]
 801280a:	f7ff ff93 	bl	8012734 <_getval>
 801280e:	4603      	mov	r3, r0
 8012810:	e01a      	b.n	8012848 <stat_val_get+0xb0>
	} else {
		int idx = step % numvaltrain;
 8012812:	2209      	movs	r2, #9
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	fb93 f1f2 	sdiv	r1, r3, r2
 801281a:	fb02 f201 	mul.w	r2, r2, r1
 801281e:	1a9b      	subs	r3, r3, r2
 8012820:	623b      	str	r3, [r7, #32]
		train_vars_t *vars = get_train_vars(nt);
 8012822:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012824:	f7ff fe84 	bl	8012530 <get_train_vars>
 8012828:	61f8      	str	r0, [r7, #28]
		const stat_val_t *sv = &statvaltrain[idx];
 801282a:	6a3b      	ldr	r3, [r7, #32]
 801282c:	00db      	lsls	r3, r3, #3
 801282e:	4a09      	ldr	r2, [pc, #36]	; (8012854 <stat_val_get+0xbc>)
 8012830:	4413      	add	r3, r2
 8012832:	61bb      	str	r3, [r7, #24]
		return _getval(vars, sv->off, sv->l);
 8012834:	69bb      	ldr	r3, [r7, #24]
 8012836:	6819      	ldr	r1, [r3, #0]
 8012838:	69bb      	ldr	r3, [r7, #24]
 801283a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801283e:	461a      	mov	r2, r3
 8012840:	69f8      	ldr	r0, [r7, #28]
 8012842:	f7ff ff77 	bl	8012734 <_getval>
 8012846:	4603      	mov	r3, r0
	}
}
 8012848:	4618      	mov	r0, r3
 801284a:	3728      	adds	r7, #40	; 0x28
 801284c:	46bd      	mov	sp, r7
 801284e:	bd80      	pop	{r7, pc}
 8012850:	080178e4 	.word	0x080178e4
 8012854:	0801789c 	.word	0x0801789c

08012858 <train_error>:
{
 8012858:	b580      	push	{r7, lr}
 801285a:	b082      	sub	sp, #8
 801285c:	af00      	add	r7, sp, #0
 801285e:	6078      	str	r0, [r7, #4]
 8012860:	6039      	str	r1, [r7, #0]
	return trainctl_error('T', code, msg);
 8012862:	683a      	ldr	r2, [r7, #0]
 8012864:	6879      	ldr	r1, [r7, #4]
 8012866:	2054      	movs	r0, #84	; 0x54
 8012868:	f7ff fbc0 	bl	8011fec <trainctl_error>
 801286c:	4603      	mov	r3, r0
}
 801286e:	4618      	mov	r0, r3
 8012870:	3708      	adds	r7, #8
 8012872:	46bd      	mov	sp, r7
 8012874:	bd80      	pop	{r7, pc}

08012876 <train_reset>:
#include "misc.h"
#include "train.h"
#include "railconfig.h"

void train_reset(const train_config_t *c, train_vars_t *v)
{
 8012876:	b580      	push	{r7, lr}
 8012878:	b082      	sub	sp, #8
 801287a:	af00      	add	r7, sp, #0
 801287c:	6078      	str	r0, [r7, #4]
 801287e:	6039      	str	r1, [r7, #0]
	uint16_t last_speed;
	uint16_t cur_c1_volt_idx;
	uint16_t cur_c2_volt_idx;
} train_vars_t;
	 */
	memset(v, 0, sizeof(*v));
 8012880:	222c      	movs	r2, #44	; 0x2c
 8012882:	2100      	movs	r1, #0
 8012884:	6838      	ldr	r0, [r7, #0]
 8012886:	f002 fb19 	bl	8014ebc <memset>
	pidctl_reset(&c->pidcnf, &v->pidvars);
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	683a      	ldr	r2, [r7, #0]
 801288e:	4611      	mov	r1, r2
 8012890:	4618      	mov	r0, r3
 8012892:	f7ff fcb1 	bl	80121f8 <pidctl_reset>
	inertia_reset(&c->inertiacnf, &v->inertiavars);
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	f103 020c 	add.w	r2, r3, #12
 801289c:	683b      	ldr	r3, [r7, #0]
 801289e:	3310      	adds	r3, #16
 80128a0:	4619      	mov	r1, r3
 80128a2:	4610      	mov	r0, r2
 80128a4:	f7ff fa7a 	bl	8011d9c <inertia_reset>
	//v->lasttick = 0;
	v->current_canton = 0; // XXX
 80128a8:	683b      	ldr	r3, [r7, #0]
 80128aa:	2200      	movs	r2, #0
 80128ac:	751a      	strb	r2, [r3, #20]
	v->next_canton = 0;	   // XXX
 80128ae:	683b      	ldr	r3, [r7, #0]
 80128b0:	2200      	movs	r2, #0
 80128b2:	755a      	strb	r2, [r3, #21]
	v->current_canton_dir = 1;
 80128b4:	683b      	ldr	r3, [r7, #0]
 80128b6:	2201      	movs	r2, #1
 80128b8:	759a      	strb	r2, [r3, #22]
	v->next_canton_dir = 1;
 80128ba:	683b      	ldr	r3, [r7, #0]
 80128bc:	2201      	movs	r2, #1
 80128be:	75da      	strb	r2, [r3, #23]
	v->target_speed = 0;
 80128c0:	683b      	ldr	r3, [r7, #0]
 80128c2:	2200      	movs	r2, #0
 80128c4:	831a      	strh	r2, [r3, #24]
	v->cur_c1_volt_idx = 0xFFFF;
 80128c6:	683b      	ldr	r3, [r7, #0]
 80128c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80128cc:	839a      	strh	r2, [r3, #28]
	v->cur_c2_volt_idx = 0xFFFF;
 80128ce:	683b      	ldr	r3, [r7, #0]
 80128d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80128d4:	83da      	strh	r2, [r3, #30]

	v->position_estimate = 0;
 80128d6:	683b      	ldr	r3, [r7, #0]
 80128d8:	2200      	movs	r2, #0
 80128da:	621a      	str	r2, [r3, #32]
}
 80128dc:	bf00      	nop
 80128de:	3708      	adds	r7, #8
 80128e0:	46bd      	mov	sp, r7
 80128e2:	bd80      	pop	{r7, pc}

080128e4 <train_reset_pos_estimate>:

int train_reset_pos_estimate(int tidx)
{
 80128e4:	b580      	push	{r7, lr}
 80128e6:	b084      	sub	sp, #16
 80128e8:	af00      	add	r7, sp, #0
 80128ea:	6078      	str	r0, [r7, #4]
	train_vars_t *v = get_train_vars(tidx);
 80128ec:	6878      	ldr	r0, [r7, #4]
 80128ee:	f7ff fe1f 	bl	8012530 <get_train_vars>
 80128f2:	60f8      	str	r0, [r7, #12]
	if (!v) return train_error(ERR_BAD_PARAM, "bad train num");
 80128f4:	68fb      	ldr	r3, [r7, #12]
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d106      	bne.n	8012908 <train_reset_pos_estimate+0x24>
 80128fa:	4907      	ldr	r1, [pc, #28]	; (8012918 <train_reset_pos_estimate+0x34>)
 80128fc:	f06f 0001 	mvn.w	r0, #1
 8012900:	f7ff ffaa 	bl	8012858 <train_error>
 8012904:	4603      	mov	r3, r0
 8012906:	e003      	b.n	8012910 <train_reset_pos_estimate+0x2c>
	v->position_estimate = 0;
 8012908:	68fb      	ldr	r3, [r7, #12]
 801290a:	2200      	movs	r2, #0
 801290c:	621a      	str	r2, [r3, #32]
	return 0;
 801290e:	2300      	movs	r3, #0
}
 8012910:	4618      	mov	r0, r3
 8012912:	3710      	adds	r7, #16
 8012914:	46bd      	mov	sp, r7
 8012916:	bd80      	pop	{r7, pc}
 8012918:	08016000 	.word	0x08016000

0801291c <train_error>:
{
 801291c:	b580      	push	{r7, lr}
 801291e:	b082      	sub	sp, #8
 8012920:	af00      	add	r7, sp, #0
 8012922:	6078      	str	r0, [r7, #4]
 8012924:	6039      	str	r1, [r7, #0]
	return trainctl_error('T', code, msg);
 8012926:	683a      	ldr	r2, [r7, #0]
 8012928:	6879      	ldr	r1, [r7, #4]
 801292a:	2054      	movs	r0, #84	; 0x54
 801292c:	f7ff fb5e 	bl	8011fec <trainctl_error>
 8012930:	4603      	mov	r3, r0
}
 8012932:	4618      	mov	r0, r3
 8012934:	3708      	adds	r7, #8
 8012936:	46bd      	mov	sp, r7
 8012938:	bd80      	pop	{r7, pc}

0801293a <runtime_error>:
{
 801293a:	b580      	push	{r7, lr}
 801293c:	b082      	sub	sp, #8
 801293e:	af00      	add	r7, sp, #0
 8012940:	6078      	str	r0, [r7, #4]
 8012942:	6039      	str	r1, [r7, #0]
	trainctl_error('G', code, msg);
 8012944:	683a      	ldr	r2, [r7, #0]
 8012946:	6879      	ldr	r1, [r7, #4]
 8012948:	2047      	movs	r0, #71	; 0x47
 801294a:	f7ff fb4f 	bl	8011fec <trainctl_error>
	return NULL;
 801294e:	2300      	movs	r3, #0
}
 8012950:	4618      	mov	r0, r3
 8012952:	3708      	adds	r7, #8
 8012954:	46bd      	mov	sp, r7
 8012956:	bd80      	pop	{r7, pc}

08012958 <train_notif>:
{
 8012958:	b580      	push	{r7, lr}
 801295a:	b086      	sub	sp, #24
 801295c:	af02      	add	r7, sp, #8
 801295e:	60ba      	str	r2, [r7, #8]
 8012960:	607b      	str	r3, [r7, #4]
 8012962:	4603      	mov	r3, r0
 8012964:	73fb      	strb	r3, [r7, #15]
 8012966:	460b      	mov	r3, r1
 8012968:	73bb      	strb	r3, [r7, #14]
	trainctl_notif('T', train_idx, cmd, dta, dtalen);
 801296a:	7bba      	ldrb	r2, [r7, #14]
 801296c:	7bf9      	ldrb	r1, [r7, #15]
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	9300      	str	r3, [sp, #0]
 8012972:	68bb      	ldr	r3, [r7, #8]
 8012974:	2054      	movs	r0, #84	; 0x54
 8012976:	f001 fb6d 	bl	8014054 <trainctl_notif>
}
 801297a:	bf00      	nop
 801297c:	3710      	adds	r7, #16
 801297e:	46bd      	mov	sp, r7
 8012980:	bd80      	pop	{r7, pc}

08012982 <debug_info>:
{
 8012982:	b580      	push	{r7, lr}
 8012984:	b088      	sub	sp, #32
 8012986:	af04      	add	r7, sp, #16
 8012988:	60f8      	str	r0, [r7, #12]
 801298a:	60b9      	str	r1, [r7, #8]
 801298c:	607a      	str	r2, [r7, #4]
 801298e:	603b      	str	r3, [r7, #0]
	trainctl_notif2(sel, num, 'D', msg, v1, v2, v3);
 8012990:	68fb      	ldr	r3, [r7, #12]
 8012992:	b2d8      	uxtb	r0, r3
 8012994:	68bb      	ldr	r3, [r7, #8]
 8012996:	b2d9      	uxtb	r1, r3
 8012998:	69fb      	ldr	r3, [r7, #28]
 801299a:	9302      	str	r3, [sp, #8]
 801299c:	69bb      	ldr	r3, [r7, #24]
 801299e:	9301      	str	r3, [sp, #4]
 80129a0:	683b      	ldr	r3, [r7, #0]
 80129a2:	9300      	str	r3, [sp, #0]
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	2244      	movs	r2, #68	; 0x44
 80129a8:	f001 fb78 	bl	801409c <trainctl_notif2>
}
 80129ac:	bf00      	nop
 80129ae:	3710      	adds	r7, #16
 80129b0:	46bd      	mov	sp, r7
 80129b2:	bd80      	pop	{r7, pc}

080129b4 <txframe_send_stat>:
	txframe_send(m, 1);
}


static inline void txframe_send_stat(void)
{
 80129b4:	b580      	push	{r7, lr}
 80129b6:	b08a      	sub	sp, #40	; 0x28
 80129b8:	af00      	add	r7, sp, #0
    frame_msg_t m;
    m.t = TXFRAME_TYPE_STAT;
 80129ba:	2304      	movs	r3, #4
 80129bc:	713b      	strb	r3, [r7, #4]
    txframe_send(&m, 1);
 80129be:	1d3b      	adds	r3, r7, #4
 80129c0:	2101      	movs	r1, #1
 80129c2:	4618      	mov	r0, r3
 80129c4:	f002 f968 	bl	8014c98 <txframe_send>
}
 80129c8:	bf00      	nop
 80129ca:	3728      	adds	r7, #40	; 0x28
 80129cc:	46bd      	mov	sp, r7
 80129ce:	bd80      	pop	{r7, pc}

080129d0 <train_run_tick>:

uint32_t train_tick_last_dt = 0;
uint32_t train_ntick = 0;

void train_run_tick( uint32_t notif_flags, uint32_t tick, uint32_t dt)
{
 80129d0:	b580      	push	{r7, lr}
 80129d2:	b086      	sub	sp, #24
 80129d4:	af00      	add	r7, sp, #0
 80129d6:	60f8      	str	r0, [r7, #12]
 80129d8:	60b9      	str	r1, [r7, #8]
 80129da:	607a      	str	r2, [r7, #4]
	train_tick_last_dt = dt;
 80129dc:	4a33      	ldr	r2, [pc, #204]	; (8012aac <train_run_tick+0xdc>)
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	6013      	str	r3, [r2, #0]
	train_ntick++;
 80129e2:	4b33      	ldr	r3, [pc, #204]	; (8012ab0 <train_run_tick+0xe0>)
 80129e4:	681b      	ldr	r3, [r3, #0]
 80129e6:	3301      	adds	r3, #1
 80129e8:	4a31      	ldr	r2, [pc, #196]	; (8012ab0 <train_run_tick+0xe0>)
 80129ea:	6013      	str	r3, [r2, #0]

	if (notif_flags & NOTIF_STARTUP) {
 80129ec:	68fb      	ldr	r3, [r7, #12]
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	da0c      	bge.n	8012a0c <train_run_tick+0x3c>
		static int n=0;
		if (n) {
 80129f2:	4b30      	ldr	r3, [pc, #192]	; (8012ab4 <train_run_tick+0xe4>)
 80129f4:	681b      	ldr	r3, [r3, #0]
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d003      	beq.n	8012a02 <train_run_tick+0x32>
			runtime_error(ERR_STRANGE, "notif startup twice");
 80129fa:	492f      	ldr	r1, [pc, #188]	; (8012ab8 <train_run_tick+0xe8>)
 80129fc:	482f      	ldr	r0, [pc, #188]	; (8012abc <train_run_tick+0xec>)
 80129fe:	f7ff ff9c 	bl	801293a <runtime_error>
		}
		n++;
 8012a02:	4b2c      	ldr	r3, [pc, #176]	; (8012ab4 <train_run_tick+0xe4>)
 8012a04:	681b      	ldr	r3, [r3, #0]
 8012a06:	3301      	adds	r3, #1
 8012a08:	4a2a      	ldr	r2, [pc, #168]	; (8012ab4 <train_run_tick+0xe4>)
 8012a0a:	6013      	str	r3, [r2, #0]
	}
	if (notif_flags & NOTIF_NEW_ADC_1) {
 8012a0c:	68fb      	ldr	r3, [r7, #12]
 8012a0e:	f003 0301 	and.w	r3, r3, #1
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d00e      	beq.n	8012a34 <train_run_tick+0x64>
		if (notif_flags & NOTIF_NEW_ADC_2) {
 8012a16:	68fb      	ldr	r3, [r7, #12]
 8012a18:	f003 0302 	and.w	r3, r3, #2
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d004      	beq.n	8012a2a <train_run_tick+0x5a>
			runtime_error(ERR_DMA, "both NEW_ADC1 and NEW_ADC2");
 8012a20:	4927      	ldr	r1, [pc, #156]	; (8012ac0 <train_run_tick+0xf0>)
 8012a22:	f06f 000b 	mvn.w	r0, #11
 8012a26:	f7ff ff88 	bl	801293a <runtime_error>
		}
		process_adc(train_adc_buffer, dt);
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	4619      	mov	r1, r3
 8012a2e:	4825      	ldr	r0, [pc, #148]	; (8012ac4 <train_run_tick+0xf4>)
 8012a30:	f000 f852 	bl	8012ad8 <process_adc>
	}
	if (notif_flags & NOTIF_NEW_ADC_2) {
 8012a34:	68fb      	ldr	r3, [r7, #12]
 8012a36:	f003 0302 	and.w	r3, r3, #2
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d005      	beq.n	8012a4a <train_run_tick+0x7a>
		process_adc(train_adc_buffer+NUM_LOCAL_CANTONS, dt);
 8012a3e:	4a22      	ldr	r2, [pc, #136]	; (8012ac8 <train_run_tick+0xf8>)
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	4619      	mov	r1, r3
 8012a44:	4610      	mov	r0, r2
 8012a46:	f000 f847 	bl	8012ad8 <process_adc>
	}

	turnout_tick();
 8012a4a:	f000 fe47 	bl	80136dc <turnout_tick>
	highlevel_tick();
 8012a4e:	f000 fc2d 	bl	80132ac <highlevel_tick>

	if (calibrating) {
 8012a52:	4b1e      	ldr	r3, [pc, #120]	; (8012acc <train_run_tick+0xfc>)
 8012a54:	681b      	ldr	r3, [r3, #0]
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d007      	beq.n	8012a6a <train_run_tick+0x9a>
		calibrate_periodic(tick, dt, notif_flags);
 8012a5a:	68fa      	ldr	r2, [r7, #12]
 8012a5c:	6879      	ldr	r1, [r7, #4]
 8012a5e:	68b8      	ldr	r0, [r7, #8]
 8012a60:	f000 fc18 	bl	8013294 <calibrate_periodic>
		txframe_send_stat();
 8012a64:	f7ff ffa6 	bl	80129b4 <txframe_send_stat>
		return;
 8012a68:	e01c      	b.n	8012aa4 <train_run_tick+0xd4>
	}


	/* per train proces */
    //debug_info(0, "TRAIN", tick, dt);
	for (int i=0; i<NUM_TRAINS; i++) {
 8012a6a:	2300      	movs	r3, #0
 8012a6c:	617b      	str	r3, [r7, #20]
 8012a6e:	e010      	b.n	8012a92 <train_run_tick+0xc2>
		if (stop_all) break;
 8012a70:	4b17      	ldr	r3, [pc, #92]	; (8012ad0 <train_run_tick+0x100>)
 8012a72:	681b      	ldr	r3, [r3, #0]
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d110      	bne.n	8012a9a <train_run_tick+0xca>
		train_periodic_control(i, dt);
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	4619      	mov	r1, r3
 8012a7c:	6978      	ldr	r0, [r7, #20]
 8012a7e:	f000 f8ad 	bl	8012bdc <train_periodic_control>
		if (trainctl_test_mode) break;
 8012a82:	4b14      	ldr	r3, [pc, #80]	; (8012ad4 <train_run_tick+0x104>)
 8012a84:	781b      	ldrb	r3, [r3, #0]
 8012a86:	b2db      	uxtb	r3, r3
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d108      	bne.n	8012a9e <train_run_tick+0xce>
	for (int i=0; i<NUM_TRAINS; i++) {
 8012a8c:	697b      	ldr	r3, [r7, #20]
 8012a8e:	3301      	adds	r3, #1
 8012a90:	617b      	str	r3, [r7, #20]
 8012a92:	697b      	ldr	r3, [r7, #20]
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	ddeb      	ble.n	8012a70 <train_run_tick+0xa0>
 8012a98:	e002      	b.n	8012aa0 <train_run_tick+0xd0>
		if (stop_all) break;
 8012a9a:	bf00      	nop
 8012a9c:	e000      	b.n	8012aa0 <train_run_tick+0xd0>
		if (trainctl_test_mode) break;
 8012a9e:	bf00      	nop
	}
	txframe_send_stat();
 8012aa0:	f7ff ff88 	bl	80129b4 <txframe_send_stat>
}
 8012aa4:	3718      	adds	r7, #24
 8012aa6:	46bd      	mov	sp, r7
 8012aa8:	bd80      	pop	{r7, pc}
 8012aaa:	bf00      	nop
 8012aac:	20005274 	.word	0x20005274
 8012ab0:	20005278 	.word	0x20005278
 8012ab4:	2000528c 	.word	0x2000528c
 8012ab8:	08016090 	.word	0x08016090
 8012abc:	ffffef6e 	.word	0xffffef6e
 8012ac0:	080160a4 	.word	0x080160a4
 8012ac4:	20008b08 	.word	0x20008b08
 8012ac8:	20008b44 	.word	0x20008b44
 8012acc:	20005270 	.word	0x20005270
 8012ad0:	2000526c 	.word	0x2000526c
 8012ad4:	20005268 	.word	0x20005268

08012ad8 <process_adc>:

static void process_adc(volatile adc_buffer_t *buf, int32_t ticks)
{
 8012ad8:	b590      	push	{r4, r7, lr}
 8012ada:	b089      	sub	sp, #36	; 0x24
 8012adc:	af02      	add	r7, sp, #8
 8012ade:	6078      	str	r0, [r7, #4]
 8012ae0:	6039      	str	r1, [r7, #0]
	for (int i=0; i<NUM_LOCAL_CANTONS; i++) {
 8012ae2:	2300      	movs	r3, #0
 8012ae4:	617b      	str	r3, [r7, #20]
 8012ae6:	e05f      	b.n	8012ba8 <process_adc+0xd0>
		if (stop_all) break;
 8012ae8:	4b34      	ldr	r3, [pc, #208]	; (8012bbc <process_adc+0xe4>)
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d15f      	bne.n	8012bb0 <process_adc+0xd8>
		// process intensity / presence
		// process BEMF
		USE_CANTON(i)  // cconf cvars
 8012af0:	6978      	ldr	r0, [r7, #20]
 8012af2:	f7ff fc57 	bl	80123a4 <get_canton_cnf>
 8012af6:	6138      	str	r0, [r7, #16]
 8012af8:	6978      	ldr	r0, [r7, #20]
 8012afa:	f7ff fc7b 	bl	80123f4 <get_canton_vars>
 8012afe:	60f8      	str	r0, [r7, #12]
	    canton_intensity(cconf, cvars, buf[i].intOff, buf[i].intOn);
 8012b00:	697a      	ldr	r2, [r7, #20]
 8012b02:	4613      	mov	r3, r2
 8012b04:	005b      	lsls	r3, r3, #1
 8012b06:	4413      	add	r3, r2
 8012b08:	009b      	lsls	r3, r3, #2
 8012b0a:	461a      	mov	r2, r3
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	4413      	add	r3, r2
 8012b10:	881b      	ldrh	r3, [r3, #0]
 8012b12:	b299      	uxth	r1, r3
 8012b14:	697a      	ldr	r2, [r7, #20]
 8012b16:	4613      	mov	r3, r2
 8012b18:	005b      	lsls	r3, r3, #1
 8012b1a:	4413      	add	r3, r2
 8012b1c:	009b      	lsls	r3, r3, #2
 8012b1e:	461a      	mov	r2, r3
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	4413      	add	r3, r2
 8012b24:	88db      	ldrh	r3, [r3, #6]
 8012b26:	b29b      	uxth	r3, r3
 8012b28:	460a      	mov	r2, r1
 8012b2a:	68f9      	ldr	r1, [r7, #12]
 8012b2c:	6938      	ldr	r0, [r7, #16]
 8012b2e:	f7ff f84f 	bl	8011bd0 <canton_intensity>
		if ((cvars->curtrainidx != 0xFF) || calibrating) {
 8012b32:	68fb      	ldr	r3, [r7, #12]
 8012b34:	7b1b      	ldrb	r3, [r3, #12]
 8012b36:	2bff      	cmp	r3, #255	; 0xff
 8012b38:	d103      	bne.n	8012b42 <process_adc+0x6a>
 8012b3a:	4b21      	ldr	r3, [pc, #132]	; (8012bc0 <process_adc+0xe8>)
 8012b3c:	681b      	ldr	r3, [r3, #0]
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d02f      	beq.n	8012ba2 <process_adc+0xca>
			canton_bemf(cconf, cvars, buf[i].voffB , buf[i].voffA, buf[i].vonB , buf[i].vonA);
 8012b42:	697a      	ldr	r2, [r7, #20]
 8012b44:	4613      	mov	r3, r2
 8012b46:	005b      	lsls	r3, r3, #1
 8012b48:	4413      	add	r3, r2
 8012b4a:	009b      	lsls	r3, r3, #2
 8012b4c:	461a      	mov	r2, r3
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	4413      	add	r3, r2
 8012b52:	889b      	ldrh	r3, [r3, #4]
 8012b54:	b298      	uxth	r0, r3
 8012b56:	697a      	ldr	r2, [r7, #20]
 8012b58:	4613      	mov	r3, r2
 8012b5a:	005b      	lsls	r3, r3, #1
 8012b5c:	4413      	add	r3, r2
 8012b5e:	009b      	lsls	r3, r3, #2
 8012b60:	461a      	mov	r2, r3
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	4413      	add	r3, r2
 8012b66:	885b      	ldrh	r3, [r3, #2]
 8012b68:	b29c      	uxth	r4, r3
 8012b6a:	697a      	ldr	r2, [r7, #20]
 8012b6c:	4613      	mov	r3, r2
 8012b6e:	005b      	lsls	r3, r3, #1
 8012b70:	4413      	add	r3, r2
 8012b72:	009b      	lsls	r3, r3, #2
 8012b74:	461a      	mov	r2, r3
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	4413      	add	r3, r2
 8012b7a:	895b      	ldrh	r3, [r3, #10]
 8012b7c:	b299      	uxth	r1, r3
 8012b7e:	697a      	ldr	r2, [r7, #20]
 8012b80:	4613      	mov	r3, r2
 8012b82:	005b      	lsls	r3, r3, #1
 8012b84:	4413      	add	r3, r2
 8012b86:	009b      	lsls	r3, r3, #2
 8012b88:	461a      	mov	r2, r3
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	4413      	add	r3, r2
 8012b8e:	891b      	ldrh	r3, [r3, #8]
 8012b90:	b29b      	uxth	r3, r3
 8012b92:	9301      	str	r3, [sp, #4]
 8012b94:	9100      	str	r1, [sp, #0]
 8012b96:	4623      	mov	r3, r4
 8012b98:	4602      	mov	r2, r0
 8012b9a:	68f9      	ldr	r1, [r7, #12]
 8012b9c:	6938      	ldr	r0, [r7, #16]
 8012b9e:	f7ff f883 	bl	8011ca8 <canton_bemf>
	for (int i=0; i<NUM_LOCAL_CANTONS; i++) {
 8012ba2:	697b      	ldr	r3, [r7, #20]
 8012ba4:	3301      	adds	r3, #1
 8012ba6:	617b      	str	r3, [r7, #20]
 8012ba8:	697b      	ldr	r3, [r7, #20]
 8012baa:	2b04      	cmp	r3, #4
 8012bac:	dd9c      	ble.n	8012ae8 <process_adc+0x10>
		}
	}
}
 8012bae:	e000      	b.n	8012bb2 <process_adc+0xda>
		if (stop_all) break;
 8012bb0:	bf00      	nop
}
 8012bb2:	bf00      	nop
 8012bb4:	371c      	adds	r7, #28
 8012bb6:	46bd      	mov	sp, r7
 8012bb8:	bd90      	pop	{r4, r7, pc}
 8012bba:	bf00      	nop
 8012bbc:	2000526c 	.word	0x2000526c
 8012bc0:	20005270 	.word	0x20005270

08012bc4 <notif_target_bemf>:

int num_train_periodic_control = 0;
static int num_set_speed = 0;
void __attribute__((weak))  notif_target_bemf(const train_config_t *cnf, train_vars_t *vars, int32_t val)
{
 8012bc4:	b480      	push	{r7}
 8012bc6:	b085      	sub	sp, #20
 8012bc8:	af00      	add	r7, sp, #0
 8012bca:	60f8      	str	r0, [r7, #12]
 8012bcc:	60b9      	str	r1, [r7, #8]
 8012bce:	607a      	str	r2, [r7, #4]
    
}
 8012bd0:	bf00      	nop
 8012bd2:	3714      	adds	r7, #20
 8012bd4:	46bd      	mov	sp, r7
 8012bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bda:	4770      	bx	lr

08012bdc <train_periodic_control>:

static void train_periodic_control(int numtrain, int32_t dt)
{
 8012bdc:	b580      	push	{r7, lr}
 8012bde:	b096      	sub	sp, #88	; 0x58
 8012be0:	af02      	add	r7, sp, #8
 8012be2:	6078      	str	r0, [r7, #4]
 8012be4:	6039      	str	r1, [r7, #0]
	if (stop_all) return;
 8012be6:	4baf      	ldr	r3, [pc, #700]	; (8012ea4 <train_periodic_control+0x2c8>)
 8012be8:	681b      	ldr	r3, [r3, #0]
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	f040 81bc 	bne.w	8012f68 <train_periodic_control+0x38c>

	num_train_periodic_control++;
 8012bf0:	4bad      	ldr	r3, [pc, #692]	; (8012ea8 <train_periodic_control+0x2cc>)
 8012bf2:	681b      	ldr	r3, [r3, #0]
 8012bf4:	3301      	adds	r3, #1
 8012bf6:	4aac      	ldr	r2, [pc, #688]	; (8012ea8 <train_periodic_control+0x2cc>)
 8012bf8:	6013      	str	r3, [r2, #0]

	USE_TRAIN(numtrain)	// tconf tvars
 8012bfa:	6878      	ldr	r0, [r7, #4]
 8012bfc:	f7ff fc70 	bl	80124e0 <get_train_cnf>
 8012c00:	6438      	str	r0, [r7, #64]	; 0x40
 8012c02:	6878      	ldr	r0, [r7, #4]
 8012c04:	f7ff fc94 	bl	8012530 <get_train_vars>
 8012c08:	63f8      	str	r0, [r7, #60]	; 0x3c

	int16_t v = tvars->target_speed;
 8012c0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c0c:	8b1b      	ldrh	r3, [r3, #24]
 8012c0e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

	if (trainctl_test_mode) {
 8012c12:	4ba6      	ldr	r3, [pc, #664]	; (8012eac <train_periodic_control+0x2d0>)
 8012c14:	781b      	ldrb	r3, [r3, #0]
 8012c16:	b2db      	uxtb	r3, r3
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d011      	beq.n	8012c40 <train_periodic_control+0x64>
		static int16_t lastspeed = 9999;
		if (lastspeed != v) {
 8012c1c:	4ba4      	ldr	r3, [pc, #656]	; (8012eb0 <train_periodic_control+0x2d4>)
 8012c1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012c22:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8012c26:	429a      	cmp	r2, r3
 8012c28:	f000 81a0 	beq.w	8012f6c <train_periodic_control+0x390>
			_set_speed_test_mode(v);
 8012c2c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8012c30:	4618      	mov	r0, r3
 8012c32:	f000 f99f 	bl	8012f74 <_set_speed_test_mode>
			lastspeed = v;
 8012c36:	4a9e      	ldr	r2, [pc, #632]	; (8012eb0 <train_periodic_control+0x2d4>)
 8012c38:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012c3c:	8013      	strh	r3, [r2, #0]
		}
        return;
 8012c3e:	e195      	b.n	8012f6c <train_periodic_control+0x390>
	}
    // inertia before PID
	if (1==tconf->enable_inertia) {
 8012c40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c42:	7c5b      	ldrb	r3, [r3, #17]
 8012c44:	2b01      	cmp	r3, #1
 8012c46:	d113      	bne.n	8012c70 <train_periodic_control+0x94>
		int changed;
		tvars->inertiavars.target = tvars->target_speed;
 8012c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c4a:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 8012c4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c50:	821a      	strh	r2, [r3, #16]
		v = inertia_value(&tconf->inertiacnf, &tvars->inertiavars, dt, &changed);
 8012c52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c54:	f103 000c 	add.w	r0, r3, #12
 8012c58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c5a:	f103 0110 	add.w	r1, r3, #16
 8012c5e:	683b      	ldr	r3, [r7, #0]
 8012c60:	b29a      	uxth	r2, r3
 8012c62:	f107 0314 	add.w	r3, r7, #20
 8012c66:	f7ff f8ab 	bl	8011dc0 <inertia_value>
 8012c6a:	4603      	mov	r3, r0
 8012c6c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	}
    
    if (tconf->enable_pid) {
 8012c70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c72:	7c9b      	ldrb	r3, [r3, #18]
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d016      	beq.n	8012ca6 <train_periodic_control+0xca>
        // corresponding BEMF target
        // 100% = 1.5V
        int32_t tbemf = 150*v/100;
 8012c78:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8012c7c:	2296      	movs	r2, #150	; 0x96
 8012c7e:	fb02 f303 	mul.w	r3, r2, r3
 8012c82:	4a8c      	ldr	r2, [pc, #560]	; (8012eb4 <train_periodic_control+0x2d8>)
 8012c84:	fb82 1203 	smull	r1, r2, r2, r3
 8012c88:	1152      	asrs	r2, r2, #5
 8012c8a:	17db      	asrs	r3, r3, #31
 8012c8c:	1ad3      	subs	r3, r2, r3
 8012c8e:	63bb      	str	r3, [r7, #56]	; 0x38
        pidctl_set_target(&tconf->pidcnf, &tvars->pidvars, tbemf);
 8012c90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c92:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012c94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012c96:	4618      	mov	r0, r3
 8012c98:	f7ff fad1 	bl	801223e <pidctl_set_target>
        notif_target_bemf(tconf, tvars, tbemf);
 8012c9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012c9e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012ca0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8012ca2:	f7ff ff8f 	bl	8012bc4 <notif_target_bemf>
    }
    canton_vars_t *cv = get_canton_vars(tvars->current_canton);
 8012ca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ca8:	7d1b      	ldrb	r3, [r3, #20]
 8012caa:	4618      	mov	r0, r3
 8012cac:	f7ff fba2 	bl	80123f4 <get_canton_vars>
 8012cb0:	6378      	str	r0, [r7, #52]	; 0x34
    int32_t bemf = cv->bemf_centivolt;
 8012cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012cb4:	685b      	ldr	r3, [r3, #4]
 8012cb6:	64bb      	str	r3, [r7, #72]	; 0x48
    if (tconf->bemfIIR) {
 8012cb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012cba:	7d5b      	ldrb	r3, [r3, #21]
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d017      	beq.n	8012cf0 <train_periodic_control+0x114>
    	tvars->bemfiir = (80*tvars->bemfiir + 20*bemf)/100;
 8012cc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012cc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012cc4:	4613      	mov	r3, r2
 8012cc6:	009b      	lsls	r3, r3, #2
 8012cc8:	4413      	add	r3, r2
 8012cca:	011b      	lsls	r3, r3, #4
 8012ccc:	4619      	mov	r1, r3
 8012cce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012cd0:	4613      	mov	r3, r2
 8012cd2:	009b      	lsls	r3, r3, #2
 8012cd4:	4413      	add	r3, r2
 8012cd6:	009b      	lsls	r3, r3, #2
 8012cd8:	440b      	add	r3, r1
 8012cda:	4a76      	ldr	r2, [pc, #472]	; (8012eb4 <train_periodic_control+0x2d8>)
 8012cdc:	fb82 1203 	smull	r1, r2, r2, r3
 8012ce0:	1152      	asrs	r2, r2, #5
 8012ce2:	17db      	asrs	r3, r3, #31
 8012ce4:	1ad2      	subs	r2, r2, r3
 8012ce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ce8:	625a      	str	r2, [r3, #36]	; 0x24
    	bemf = tvars->bemfiir;
 8012cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012cee:	64bb      	str	r3, [r7, #72]	; 0x48
    }
    if (tconf->enable_pid) {
 8012cf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012cf2:	7c9b      	ldrb	r3, [r3, #18]
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d065      	beq.n	8012dc4 <train_periodic_control+0x1e8>
    	if (tvars->target_speed) tvars->pidvars.stopped = 0;
 8012cf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012cfa:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d004      	beq.n	8012d0c <train_periodic_control+0x130>
 8012d02:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012d04:	7b13      	ldrb	r3, [r2, #12]
 8012d06:	f36f 0341 	bfc	r3, #1, #1
 8012d0a:	7313      	strb	r3, [r2, #12]
        if (!tvars->pidvars.stopped && (tvars->target_speed == 0) && (abs(cv->bemf_centivolt)<10)) {
 8012d0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d0e:	7b1b      	ldrb	r3, [r3, #12]
 8012d10:	f003 0302 	and.w	r3, r3, #2
 8012d14:	b2db      	uxtb	r3, r3
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	d126      	bne.n	8012d68 <train_periodic_control+0x18c>
 8012d1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d1c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d121      	bne.n	8012d68 <train_periodic_control+0x18c>
 8012d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d26:	685b      	ldr	r3, [r3, #4]
 8012d28:	f113 0f09 	cmn.w	r3, #9
 8012d2c:	db1c      	blt.n	8012d68 <train_periodic_control+0x18c>
 8012d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d30:	685b      	ldr	r3, [r3, #4]
 8012d32:	2b09      	cmp	r3, #9
 8012d34:	dc18      	bgt.n	8012d68 <train_periodic_control+0x18c>
        	//debug_info('T', 0, "ZERO", cv->bemf_centivolt,0, 0);
			pidctl_reset(&tconf->pidcnf, &tvars->pidvars);
 8012d36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012d38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012d3a:	4611      	mov	r1, r2
 8012d3c:	4618      	mov	r0, r3
 8012d3e:	f7ff fa5b 	bl	80121f8 <pidctl_reset>
			debug_info('T', numtrain, "STOP_PID", 0,0, 0);
 8012d42:	6879      	ldr	r1, [r7, #4]
 8012d44:	2300      	movs	r3, #0
 8012d46:	9301      	str	r3, [sp, #4]
 8012d48:	2300      	movs	r3, #0
 8012d4a:	9300      	str	r3, [sp, #0]
 8012d4c:	2300      	movs	r3, #0
 8012d4e:	4a5a      	ldr	r2, [pc, #360]	; (8012eb8 <train_periodic_control+0x2dc>)
 8012d50:	2054      	movs	r0, #84	; 0x54
 8012d52:	f7ff fe16 	bl	8012982 <debug_info>
			tvars->pidvars.stopped = 1;
 8012d56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012d58:	7b13      	ldrb	r3, [r2, #12]
 8012d5a:	f043 0302 	orr.w	r3, r3, #2
 8012d5e:	7313      	strb	r3, [r2, #12]
        	v = 0;
 8012d60:	2300      	movs	r3, #0
 8012d62:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8012d66:	e02d      	b.n	8012dc4 <train_periodic_control+0x1e8>
        } else if (tvars->pidvars.stopped) {
 8012d68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d6a:	7b1b      	ldrb	r3, [r3, #12]
 8012d6c:	f003 0302 	and.w	r3, r3, #2
 8012d70:	b2db      	uxtb	r3, r3
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d003      	beq.n	8012d7e <train_periodic_control+0x1a2>
        	v = 0;
 8012d76:	2300      	movs	r3, #0
 8012d78:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8012d7c:	e022      	b.n	8012dc4 <train_periodic_control+0x1e8>
        } else {
        	//const canton_config_t *cc = get_canton_cnf(vars->current_canton);


        	if (bemf>MAX_PID_VALUE)  bemf=MAX_PID_VALUE; // XXX
 8012d7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d80:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8012d84:	dd02      	ble.n	8012d8c <train_periodic_control+0x1b0>
 8012d86:	f44f 738c 	mov.w	r3, #280	; 0x118
 8012d8a:	64bb      	str	r3, [r7, #72]	; 0x48
        	if (bemf<-MAX_PID_VALUE) bemf=-MAX_PID_VALUE;
 8012d8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d8e:	f513 7f8c 	cmn.w	r3, #280	; 0x118
 8012d92:	da01      	bge.n	8012d98 <train_periodic_control+0x1bc>
 8012d94:	4b49      	ldr	r3, [pc, #292]	; (8012ebc <train_periodic_control+0x2e0>)
 8012d96:	64bb      	str	r3, [r7, #72]	; 0x48

        	int32_t v2 = pidctl_value(&tconf->pidcnf, &tvars->pidvars, bemf, dt);
 8012d98:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8012d9a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012d9c:	683b      	ldr	r3, [r7, #0]
 8012d9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012da0:	f7ff fa5c 	bl	801225c <pidctl_value>
 8012da4:	6338      	str	r0, [r7, #48]	; 0x30

        	v2 = (v2>100) ? 100 : v2;
 8012da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012da8:	2b64      	cmp	r3, #100	; 0x64
 8012daa:	bfa8      	it	ge
 8012dac:	2364      	movge	r3, #100	; 0x64
 8012dae:	633b      	str	r3, [r7, #48]	; 0x30
        	v2 = (v2<-100) ? -100: v2;
 8012db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012db2:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8012db6:	4293      	cmp	r3, r2
 8012db8:	bfb8      	it	lt
 8012dba:	4613      	movlt	r3, r2
 8012dbc:	633b      	str	r3, [r7, #48]	; 0x30
        	v = (int16_t)v2;
 8012dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dc0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        }
    }
    if (tconf->postIIR) {
 8012dc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012dc6:	7d9b      	ldrb	r3, [r3, #22]
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d01c      	beq.n	8012e06 <train_periodic_control+0x22a>
        tvars->v_iir = (80*tvars->v_iir+20*v)/100;
 8012dcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012dce:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8012dd2:	461a      	mov	r2, r3
 8012dd4:	4613      	mov	r3, r2
 8012dd6:	009b      	lsls	r3, r3, #2
 8012dd8:	4413      	add	r3, r2
 8012dda:	011b      	lsls	r3, r3, #4
 8012ddc:	4619      	mov	r1, r3
 8012dde:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8012de2:	4613      	mov	r3, r2
 8012de4:	009b      	lsls	r3, r3, #2
 8012de6:	4413      	add	r3, r2
 8012de8:	009b      	lsls	r3, r3, #2
 8012dea:	440b      	add	r3, r1
 8012dec:	4a31      	ldr	r2, [pc, #196]	; (8012eb4 <train_periodic_control+0x2d8>)
 8012dee:	fb82 1203 	smull	r1, r2, r2, r3
 8012df2:	1152      	asrs	r2, r2, #5
 8012df4:	17db      	asrs	r3, r3, #31
 8012df6:	1ad3      	subs	r3, r2, r3
 8012df8:	b21a      	sxth	r2, r3
 8012dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012dfc:	851a      	strh	r2, [r3, #40]	; 0x28
        v = tvars->v_iir;
 8012dfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012e02:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    }
    // or inertia after PID
    if (2==tconf->enable_inertia) {
 8012e06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e08:	7c5b      	ldrb	r3, [r3, #17]
 8012e0a:	2b02      	cmp	r3, #2
 8012e0c:	d111      	bne.n	8012e32 <train_periodic_control+0x256>
        tvars->inertiavars.target = v;
 8012e0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e10:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8012e14:	821a      	strh	r2, [r3, #16]
        v = inertia_value(&tconf->inertiacnf, &tvars->inertiavars, dt, NULL);
 8012e16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e18:	f103 000c 	add.w	r0, r3, #12
 8012e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e1e:	f103 0110 	add.w	r1, r3, #16
 8012e22:	683b      	ldr	r3, [r7, #0]
 8012e24:	b29a      	uxth	r2, r3
 8012e26:	2300      	movs	r3, #0
 8012e28:	f7fe ffca 	bl	8011dc0 <inertia_value>
 8012e2c:	4603      	mov	r3, r0
 8012e2e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    }
    int changed = (tvars->last_speed != v);
 8012e32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e34:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8012e38:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8012e3c:	429a      	cmp	r2, r3
 8012e3e:	bf14      	ite	ne
 8012e40:	2301      	movne	r3, #1
 8012e42:	2300      	moveq	r3, #0
 8012e44:	b2db      	uxtb	r3, r3
 8012e46:	62fb      	str	r3, [r7, #44]	; 0x2c
    tvars->last_speed = v;
 8012e48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e4a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8012e4e:	835a      	strh	r2, [r3, #26]

    if (changed) {
 8012e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d046      	beq.n	8012ee4 <train_periodic_control+0x308>
    	if (tconf->en_spd2pow) {
 8012e56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e58:	7e1b      	ldrb	r3, [r3, #24]
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d03b      	beq.n	8012ed6 <train_periodic_control+0x2fa>
    		// [0-100] -> [min_pwm .. MAX_PWM]
    		int s = SIGNOF(v);
 8012e5e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	da02      	bge.n	8012e6c <train_periodic_control+0x290>
 8012e66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012e6a:	e000      	b.n	8012e6e <train_periodic_control+0x292>
 8012e6c:	2301      	movs	r3, #1
 8012e6e:	62bb      	str	r3, [r7, #40]	; 0x28
    		int a = abs(v);
 8012e70:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	bfb8      	it	lt
 8012e78:	425b      	neglt	r3, r3
 8012e7a:	627b      	str	r3, [r7, #36]	; 0x24
    		int v2 = (a>1) ? a * (MAX_PWM-tconf->min_power)/100 + tconf->min_power : 0;
 8012e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e7e:	2b01      	cmp	r3, #1
 8012e80:	dd1e      	ble.n	8012ec0 <train_periodic_control+0x2e4>
 8012e82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e84:	7e5b      	ldrb	r3, [r3, #25]
 8012e86:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8012e8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012e8c:	fb02 f303 	mul.w	r3, r2, r3
 8012e90:	4a08      	ldr	r2, [pc, #32]	; (8012eb4 <train_periodic_control+0x2d8>)
 8012e92:	fb82 1203 	smull	r1, r2, r2, r3
 8012e96:	1152      	asrs	r2, r2, #5
 8012e98:	17db      	asrs	r3, r3, #31
 8012e9a:	1ad3      	subs	r3, r2, r3
 8012e9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012e9e:	7e52      	ldrb	r2, [r2, #25]
 8012ea0:	4413      	add	r3, r2
 8012ea2:	e00e      	b.n	8012ec2 <train_periodic_control+0x2e6>
 8012ea4:	2000526c 	.word	0x2000526c
 8012ea8:	2000527c 	.word	0x2000527c
 8012eac:	20005268 	.word	0x20005268
 8012eb0:	20000540 	.word	0x20000540
 8012eb4:	51eb851f 	.word	0x51eb851f
 8012eb8:	080160c0 	.word	0x080160c0
 8012ebc:	fffffee8 	.word	0xfffffee8
 8012ec0:	2300      	movs	r3, #0
 8012ec2:	623b      	str	r3, [r7, #32]
    		v = s * v2;
 8012ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ec6:	b29a      	uxth	r2, r3
 8012ec8:	6a3b      	ldr	r3, [r7, #32]
 8012eca:	b29b      	uxth	r3, r3
 8012ecc:	fb12 f303 	smulbb	r3, r2, r3
 8012ed0:	b29b      	uxth	r3, r3
 8012ed2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    	}
        _set_speed(tconf, tvars, v);
 8012ed6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8012eda:	461a      	mov	r2, r3
 8012edc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012ede:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8012ee0:	f000 f89e 	bl	8013020 <_set_speed>
    }
    if (tconf->notify_speed) {
 8012ee4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ee6:	7cdb      	ldrb	r3, [r3, #19]
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	d017      	beq.n	8012f1c <train_periodic_control+0x340>
    		struct spd_notif n;
    		n.sv100 = v;
 8012eec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012ef0:	81bb      	strh	r3, [r7, #12]
    		n.pid_target = tvars->pidvars.target_v;
 8012ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ef4:	689b      	ldr	r3, [r3, #8]
 8012ef6:	b21b      	sxth	r3, r3
 8012ef8:	81fb      	strh	r3, [r7, #14]
    		canton_vars_t *cv1 = get_canton_vars(tvars->current_canton);
 8012efa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012efc:	7d1b      	ldrb	r3, [r3, #20]
 8012efe:	4618      	mov	r0, r3
 8012f00:	f7ff fa78 	bl	80123f4 <get_canton_vars>
 8012f04:	61f8      	str	r0, [r7, #28]
    		n.bemf_centivolt = cv1->bemf_centivolt;
 8012f06:	69fb      	ldr	r3, [r7, #28]
 8012f08:	685b      	ldr	r3, [r3, #4]
 8012f0a:	613b      	str	r3, [r7, #16]
    		train_notif(numtrain, 'V', (void *)&n, sizeof(n));
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	b2d8      	uxtb	r0, r3
 8012f10:	f107 020c 	add.w	r2, r7, #12
 8012f14:	2308      	movs	r3, #8
 8012f16:	2156      	movs	r1, #86	; 0x56
 8012f18:	f7ff fd1e 	bl	8012958 <train_notif>
    	}

    /* estimate speed/position with bemf */
    if ((1)) {
    	canton_vars_t *cv = get_canton_vars(tvars->current_canton);
 8012f1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012f1e:	7d1b      	ldrb	r3, [r3, #20]
 8012f20:	4618      	mov	r0, r3
 8012f22:	f7ff fa67 	bl	80123f4 <get_canton_vars>
 8012f26:	61b8      	str	r0, [r7, #24]
        int32_t b = cv->bemf_centivolt;
 8012f28:	69bb      	ldr	r3, [r7, #24]
 8012f2a:	685b      	ldr	r3, [r3, #4]
 8012f2c:	647b      	str	r3, [r7, #68]	; 0x44
        if (abs(b)<25) b = 0;
 8012f2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012f30:	f113 0f18 	cmn.w	r3, #24
 8012f34:	db04      	blt.n	8012f40 <train_periodic_control+0x364>
 8012f36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012f38:	2b18      	cmp	r3, #24
 8012f3a:	dc01      	bgt.n	8012f40 <train_periodic_control+0x364>
 8012f3c:	2300      	movs	r3, #0
 8012f3e:	647b      	str	r3, [r7, #68]	; 0x44
        // TODO: BEMF to speed. currently part of it is done in convert_to_centivolt
        //       but we assume speed is really proportional to BEMF
        tvars->position_estimate += b;
 8012f40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012f42:	6a1a      	ldr	r2, [r3, #32]
 8012f44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012f46:	441a      	add	r2, r3
 8012f48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012f4a:	621a      	str	r2, [r3, #32]
        if (tconf->notify_pose) {
 8012f4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f4e:	7d1b      	ldrb	r3, [r3, #20]
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d00c      	beq.n	8012f6e <train_periodic_control+0x392>
    		train_notif(numtrain, 'i', (void *)&tvars->position_estimate, sizeof(int32_t));
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	b2d8      	uxtb	r0, r3
 8012f58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012f5a:	f103 0220 	add.w	r2, r3, #32
 8012f5e:	2304      	movs	r3, #4
 8012f60:	2169      	movs	r1, #105	; 0x69
 8012f62:	f7ff fcf9 	bl	8012958 <train_notif>
 8012f66:	e002      	b.n	8012f6e <train_periodic_control+0x392>
	if (stop_all) return;
 8012f68:	bf00      	nop
 8012f6a:	e000      	b.n	8012f6e <train_periodic_control+0x392>
        return;
 8012f6c:	bf00      	nop
        }
    }
}
 8012f6e:	3750      	adds	r7, #80	; 0x50
 8012f70:	46bd      	mov	sp, r7
 8012f72:	bd80      	pop	{r7, pc}

08012f74 <_set_speed_test_mode>:

static void _set_speed_test_mode(int16_t sv100)
{
 8012f74:	b580      	push	{r7, lr}
 8012f76:	b090      	sub	sp, #64	; 0x40
 8012f78:	af04      	add	r7, sp, #16
 8012f7a:	4603      	mov	r3, r0
 8012f7c:	80fb      	strh	r3, [r7, #6]
	USE_TRAIN(0)
 8012f7e:	2000      	movs	r0, #0
 8012f80:	f7ff faae 	bl	80124e0 <get_train_cnf>
 8012f84:	62b8      	str	r0, [r7, #40]	; 0x28
 8012f86:	2000      	movs	r0, #0
 8012f88:	f7ff fad2 	bl	8012530 <get_train_vars>
 8012f8c:	6278      	str	r0, [r7, #36]	; 0x24
	(void) tvars; // unused
	for (int i=0; i<NUM_LOCAL_CANTONS; i++) {
 8012f8e:	2300      	movs	r3, #0
 8012f90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012f92:	e03d      	b.n	8013010 <_set_speed_test_mode+0x9c>
		const canton_config_t *c1;
		canton_vars_t *cv1;
		c1 =  get_canton_cnf(i);
 8012f94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012f96:	f7ff fa05 	bl	80123a4 <get_canton_cnf>
 8012f9a:	6238      	str	r0, [r7, #32]
		cv1 = get_canton_vars(i);
 8012f9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012f9e:	f7ff fa29 	bl	80123f4 <get_canton_vars>
 8012fa2:	61f8      	str	r0, [r7, #28]
		int pvi1, pvi2;
		int sig = SIGNOF(sv100);
 8012fa4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	da02      	bge.n	8012fb2 <_set_speed_test_mode+0x3e>
 8012fac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012fb0:	e000      	b.n	8012fb4 <_set_speed_test_mode+0x40>
 8012fb2:	2301      	movs	r3, #1
 8012fb4:	61bb      	str	r3, [r7, #24]
		uint16_t v = abs(sv100);
 8012fb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	bfb8      	it	lt
 8012fbe:	425b      	neglt	r3, r3
 8012fc0:	82fb      	strh	r3, [r7, #22]
		uint16_t pwm_duty = volt_index(v*10 /* mili*/,
 8012fc2:	8afb      	ldrh	r3, [r7, #22]
 8012fc4:	461a      	mov	r2, r3
 8012fc6:	0092      	lsls	r2, r2, #2
 8012fc8:	4413      	add	r3, r2
 8012fca:	005b      	lsls	r3, r3, #1
 8012fcc:	b298      	uxth	r0, r3
 8012fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fd0:	7c1b      	ldrb	r3, [r3, #16]
 8012fd2:	9303      	str	r3, [sp, #12]
 8012fd4:	f107 030c 	add.w	r3, r7, #12
 8012fd8:	9302      	str	r3, [sp, #8]
 8012fda:	f107 0310 	add.w	r3, r7, #16
 8012fde:	9301      	str	r3, [sp, #4]
 8012fe0:	2300      	movs	r3, #0
 8012fe2:	9300      	str	r3, [sp, #0]
 8012fe4:	2300      	movs	r3, #0
 8012fe6:	69fa      	ldr	r2, [r7, #28]
 8012fe8:	6a39      	ldr	r1, [r7, #32]
 8012fea:	f7fe fc37 	bl	801185c <volt_index>
 8012fee:	4603      	mov	r3, r0
 8012ff0:	82bb      	strh	r3, [r7, #20]
				c1, cv1, NULL, NULL,
				&pvi1, &pvi2, tconf->volt_policy);
		canton_set_volt(c1, cv1, pvi1);
 8012ff2:	693b      	ldr	r3, [r7, #16]
 8012ff4:	461a      	mov	r2, r3
 8012ff6:	69f9      	ldr	r1, [r7, #28]
 8012ff8:	6a38      	ldr	r0, [r7, #32]
 8012ffa:	f7fe fbd5 	bl	80117a8 <canton_set_volt>
		canton_set_pwm(c1, cv1, sig, pwm_duty);
 8012ffe:	8abb      	ldrh	r3, [r7, #20]
 8013000:	69ba      	ldr	r2, [r7, #24]
 8013002:	69f9      	ldr	r1, [r7, #28]
 8013004:	6a38      	ldr	r0, [r7, #32]
 8013006:	f7fe fb1d 	bl	8011644 <canton_set_pwm>
	for (int i=0; i<NUM_LOCAL_CANTONS; i++) {
 801300a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801300c:	3301      	adds	r3, #1
 801300e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013012:	2b04      	cmp	r3, #4
 8013014:	ddbe      	ble.n	8012f94 <_set_speed_test_mode+0x20>
	}
}
 8013016:	bf00      	nop
 8013018:	3730      	adds	r7, #48	; 0x30
 801301a:	46bd      	mov	sp, r7
 801301c:	bd80      	pop	{r7, pc}
	...

08013020 <_set_speed>:



static void _set_speed(const train_config_t *cnf, train_vars_t *vars, int16_t sv100)
{
 8013020:	b580      	push	{r7, lr}
 8013022:	b092      	sub	sp, #72	; 0x48
 8013024:	af04      	add	r7, sp, #16
 8013026:	60f8      	str	r0, [r7, #12]
 8013028:	60b9      	str	r1, [r7, #8]
 801302a:	4613      	mov	r3, r2
 801302c:	80fb      	strh	r3, [r7, #6]
    const canton_config_t *c1;
    const canton_config_t *c2;
    canton_vars_t *cv1;
    canton_vars_t *cv2;
    
    num_set_speed++;
 801302e:	4b50      	ldr	r3, [pc, #320]	; (8013170 <_set_speed+0x150>)
 8013030:	681b      	ldr	r3, [r3, #0]
 8013032:	3301      	adds	r3, #1
 8013034:	4a4e      	ldr	r2, [pc, #312]	; (8013170 <_set_speed+0x150>)
 8013036:	6013      	str	r3, [r2, #0]
    c1 =  get_canton_cnf(vars->current_canton);
 8013038:	68bb      	ldr	r3, [r7, #8]
 801303a:	7d1b      	ldrb	r3, [r3, #20]
 801303c:	4618      	mov	r0, r3
 801303e:	f7ff f9b1 	bl	80123a4 <get_canton_cnf>
 8013042:	6378      	str	r0, [r7, #52]	; 0x34
    c2 =  get_canton_cnf(vars->next_canton);
 8013044:	68bb      	ldr	r3, [r7, #8]
 8013046:	7d5b      	ldrb	r3, [r3, #21]
 8013048:	4618      	mov	r0, r3
 801304a:	f7ff f9ab 	bl	80123a4 <get_canton_cnf>
 801304e:	6338      	str	r0, [r7, #48]	; 0x30
    cv1 = get_canton_vars(vars->current_canton);
 8013050:	68bb      	ldr	r3, [r7, #8]
 8013052:	7d1b      	ldrb	r3, [r3, #20]
 8013054:	4618      	mov	r0, r3
 8013056:	f7ff f9cd 	bl	80123f4 <get_canton_vars>
 801305a:	62f8      	str	r0, [r7, #44]	; 0x2c
    cv2 = get_canton_vars(vars->next_canton);
 801305c:	68bb      	ldr	r3, [r7, #8]
 801305e:	7d5b      	ldrb	r3, [r3, #21]
 8013060:	4618      	mov	r0, r3
 8013062:	f7ff f9c7 	bl	80123f4 <get_canton_vars>
 8013066:	62b8      	str	r0, [r7, #40]	; 0x28
    
    if (!c1 || !cv1) {
 8013068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801306a:	2b00      	cmp	r3, #0
 801306c:	d002      	beq.n	8013074 <_set_speed+0x54>
 801306e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013070:	2b00      	cmp	r3, #0
 8013072:	d105      	bne.n	8013080 <_set_speed+0x60>
        train_error(ERR_CANTON_NONE, "no canton");
 8013074:	493f      	ldr	r1, [pc, #252]	; (8013174 <_set_speed+0x154>)
 8013076:	f06f 0064 	mvn.w	r0, #100	; 0x64
 801307a:	f7ff fc4f 	bl	801291c <train_error>
 801307e:	e073      	b.n	8013168 <_set_speed+0x148>
        return;
    }
    int pvi1, pvi2;
    int sig = SIGNOF(sv100);
 8013080:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013084:	2b00      	cmp	r3, #0
 8013086:	da02      	bge.n	801308e <_set_speed+0x6e>
 8013088:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801308c:	e000      	b.n	8013090 <_set_speed+0x70>
 801308e:	2301      	movs	r3, #1
 8013090:	627b      	str	r3, [r7, #36]	; 0x24
    uint16_t v = abs(sv100);
 8013092:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013096:	2b00      	cmp	r3, #0
 8013098:	bfb8      	it	lt
 801309a:	425b      	neglt	r3, r3
 801309c:	847b      	strh	r3, [r7, #34]	; 0x22
    uint16_t pwm_duty = volt_index(v*10 /* mili*/,
 801309e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80130a0:	461a      	mov	r2, r3
 80130a2:	0092      	lsls	r2, r2, #2
 80130a4:	4413      	add	r3, r2
 80130a6:	005b      	lsls	r3, r3, #1
 80130a8:	b298      	uxth	r0, r3
 80130aa:	68fb      	ldr	r3, [r7, #12]
 80130ac:	7c1b      	ldrb	r3, [r3, #16]
 80130ae:	9303      	str	r3, [sp, #12]
 80130b0:	f107 0310 	add.w	r3, r7, #16
 80130b4:	9302      	str	r3, [sp, #8]
 80130b6:	f107 0314 	add.w	r3, r7, #20
 80130ba:	9301      	str	r3, [sp, #4]
 80130bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130be:	9300      	str	r3, [sp, #0]
 80130c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80130c4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80130c6:	f7fe fbc9 	bl	801185c <volt_index>
 80130ca:	4603      	mov	r3, r0
 80130cc:	843b      	strh	r3, [r7, #32]
                                   c1, cv1, c2, cv2,
                                   &pvi1, &pvi2, cnf->volt_policy);
    if (pvi1 != vars->cur_c1_volt_idx) {
 80130ce:	68bb      	ldr	r3, [r7, #8]
 80130d0:	8b9b      	ldrh	r3, [r3, #28]
 80130d2:	461a      	mov	r2, r3
 80130d4:	697b      	ldr	r3, [r7, #20]
 80130d6:	429a      	cmp	r2, r3
 80130d8:	d00d      	beq.n	80130f6 <_set_speed+0xd6>
        vars->cur_c1_volt_idx = pvi1;
 80130da:	697b      	ldr	r3, [r7, #20]
 80130dc:	b29a      	uxth	r2, r3
 80130de:	68bb      	ldr	r3, [r7, #8]
 80130e0:	839a      	strh	r2, [r3, #28]
        canton_set_volt(c1, cv1, pvi1);
 80130e2:	697b      	ldr	r3, [r7, #20]
 80130e4:	461a      	mov	r2, r3
 80130e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80130e8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80130ea:	f7fe fb5d 	bl	80117a8 <canton_set_volt>
        cv1->fix_bemf = cnf->fix_bemf;
 80130ee:	68fb      	ldr	r3, [r7, #12]
 80130f0:	7dda      	ldrb	r2, [r3, #23]
 80130f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130f4:	735a      	strb	r2, [r3, #13]
    }
    if (pvi2 != vars->cur_c2_volt_idx) {
 80130f6:	68bb      	ldr	r3, [r7, #8]
 80130f8:	8bdb      	ldrh	r3, [r3, #30]
 80130fa:	461a      	mov	r2, r3
 80130fc:	693b      	ldr	r3, [r7, #16]
 80130fe:	429a      	cmp	r2, r3
 8013100:	d013      	beq.n	801312a <_set_speed+0x10a>
		vars->cur_c2_volt_idx = pvi2;
 8013102:	693b      	ldr	r3, [r7, #16]
 8013104:	b29a      	uxth	r2, r3
 8013106:	68bb      	ldr	r3, [r7, #8]
 8013108:	83da      	strh	r2, [r3, #30]
		if (cv2) canton_set_volt(c2, cv2, pvi2);
 801310a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801310c:	2b00      	cmp	r3, #0
 801310e:	d005      	beq.n	801311c <_set_speed+0xfc>
 8013110:	693b      	ldr	r3, [r7, #16]
 8013112:	461a      	mov	r2, r3
 8013114:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013116:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013118:	f7fe fb46 	bl	80117a8 <canton_set_volt>
        if (cv2) cv2->fix_bemf = cnf->fix_bemf;
 801311c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801311e:	2b00      	cmp	r3, #0
 8013120:	d003      	beq.n	801312a <_set_speed+0x10a>
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	7dda      	ldrb	r2, [r3, #23]
 8013126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013128:	735a      	strb	r2, [r3, #13]
	}
	int dir1 = sig * vars->current_canton_dir;
 801312a:	68bb      	ldr	r3, [r7, #8]
 801312c:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8013130:	461a      	mov	r2, r3
 8013132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013134:	fb02 f303 	mul.w	r3, r2, r3
 8013138:	61fb      	str	r3, [r7, #28]
	int dir2 = sig * vars->next_canton_dir;
 801313a:	68bb      	ldr	r3, [r7, #8]
 801313c:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8013140:	461a      	mov	r2, r3
 8013142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013144:	fb02 f303 	mul.w	r3, r2, r3
 8013148:	61bb      	str	r3, [r7, #24]
	canton_set_pwm(c1, cv1, dir1, pwm_duty);
 801314a:	8c3b      	ldrh	r3, [r7, #32]
 801314c:	69fa      	ldr	r2, [r7, #28]
 801314e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013150:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013152:	f7fe fa77 	bl	8011644 <canton_set_pwm>
	if (cv2) canton_set_pwm(c2, cv2, dir2, pwm_duty);
 8013156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013158:	2b00      	cmp	r3, #0
 801315a:	d005      	beq.n	8013168 <_set_speed+0x148>
 801315c:	8c3b      	ldrh	r3, [r7, #32]
 801315e:	69ba      	ldr	r2, [r7, #24]
 8013160:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013162:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013164:	f7fe fa6e 	bl	8011644 <canton_set_pwm>


}
 8013168:	3738      	adds	r7, #56	; 0x38
 801316a:	46bd      	mov	sp, r7
 801316c:	bd80      	pop	{r7, pc}
 801316e:	bf00      	nop
 8013170:	20005280 	.word	0x20005280
 8013174:	080160cc 	.word	0x080160cc

08013178 <train_set_target_speed>:


/* =========================================================================== */

int train_set_target_speed(int numtrain, int16_t target)
{
 8013178:	b580      	push	{r7, lr}
 801317a:	b084      	sub	sp, #16
 801317c:	af00      	add	r7, sp, #0
 801317e:	6078      	str	r0, [r7, #4]
 8013180:	460b      	mov	r3, r1
 8013182:	807b      	strh	r3, [r7, #2]
	if (calibrating) return 1;
 8013184:	4b0d      	ldr	r3, [pc, #52]	; (80131bc <train_set_target_speed+0x44>)
 8013186:	681b      	ldr	r3, [r3, #0]
 8013188:	2b00      	cmp	r3, #0
 801318a:	d001      	beq.n	8013190 <train_set_target_speed+0x18>
 801318c:	2301      	movs	r3, #1
 801318e:	e011      	b.n	80131b4 <train_set_target_speed+0x3c>
	USE_TRAIN(numtrain) // tconf tvars
 8013190:	6878      	ldr	r0, [r7, #4]
 8013192:	f7ff f9a5 	bl	80124e0 <get_train_cnf>
 8013196:	60f8      	str	r0, [r7, #12]
 8013198:	6878      	ldr	r0, [r7, #4]
 801319a:	f7ff f9c9 	bl	8012530 <get_train_vars>
 801319e:	60b8      	str	r0, [r7, #8]
	(void)tconf; // unused
	if (!tvars) return -1;
 80131a0:	68bb      	ldr	r3, [r7, #8]
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d102      	bne.n	80131ac <train_set_target_speed+0x34>
 80131a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80131aa:	e003      	b.n	80131b4 <train_set_target_speed+0x3c>
	tvars->target_speed = target;
 80131ac:	68bb      	ldr	r3, [r7, #8]
 80131ae:	887a      	ldrh	r2, [r7, #2]
 80131b0:	831a      	strh	r2, [r3, #24]
		if (c->enable_pid) {
			pidctl_reset(&c->pidcnf, &vars->pidvars);
		}
	}*/

	return 0;
 80131b2:	2300      	movs	r3, #0
}
 80131b4:	4618      	mov	r0, r3
 80131b6:	3710      	adds	r7, #16
 80131b8:	46bd      	mov	sp, r7
 80131ba:	bd80      	pop	{r7, pc}
 80131bc:	20005270 	.word	0x20005270

080131c0 <train_stop_all>:

void train_stop_all(void)
{
 80131c0:	b580      	push	{r7, lr}
 80131c2:	b086      	sub	sp, #24
 80131c4:	af02      	add	r7, sp, #8
	stop_all = 1;
 80131c6:	4b1e      	ldr	r3, [pc, #120]	; (8013240 <train_stop_all+0x80>)
 80131c8:	2201      	movs	r2, #1
 80131ca:	601a      	str	r2, [r3, #0]
	auto1_reset();
 80131cc:	f7fd ff42 	bl	8011054 <auto1_reset>
	railconfig_setup_default();
 80131d0:	f7ff fa38 	bl	8012644 <railconfig_setup_default>
	for (int i=0; i<NUM_CANTONS; i++) {
 80131d4:	2300      	movs	r3, #0
 80131d6:	60fb      	str	r3, [r7, #12]
 80131d8:	e01b      	b.n	8013212 <train_stop_all+0x52>
		USE_CANTON(i) // cconf cvars
 80131da:	68f8      	ldr	r0, [r7, #12]
 80131dc:	f7ff f8e2 	bl	80123a4 <get_canton_cnf>
 80131e0:	60b8      	str	r0, [r7, #8]
 80131e2:	68f8      	ldr	r0, [r7, #12]
 80131e4:	f7ff f906 	bl	80123f4 <get_canton_vars>
 80131e8:	6078      	str	r0, [r7, #4]
		// setup default has put dir=0 + pwm=0 and a canton_set_pwm(0,0)
		// would be ignored.
		canton_set_pwm(cconf, cvars,  1, 0);
 80131ea:	2300      	movs	r3, #0
 80131ec:	2201      	movs	r2, #1
 80131ee:	6879      	ldr	r1, [r7, #4]
 80131f0:	68b8      	ldr	r0, [r7, #8]
 80131f2:	f7fe fa27 	bl	8011644 <canton_set_pwm>
		canton_set_pwm(cconf, cvars,  0, 0);
 80131f6:	2300      	movs	r3, #0
 80131f8:	2200      	movs	r2, #0
 80131fa:	6879      	ldr	r1, [r7, #4]
 80131fc:	68b8      	ldr	r0, [r7, #8]
 80131fe:	f7fe fa21 	bl	8011644 <canton_set_pwm>
		canton_set_volt(cconf, cvars, 15);
 8013202:	220f      	movs	r2, #15
 8013204:	6879      	ldr	r1, [r7, #4]
 8013206:	68b8      	ldr	r0, [r7, #8]
 8013208:	f7fe face 	bl	80117a8 <canton_set_volt>
	for (int i=0; i<NUM_CANTONS; i++) {
 801320c:	68fb      	ldr	r3, [r7, #12]
 801320e:	3301      	adds	r3, #1
 8013210:	60fb      	str	r3, [r7, #12]
 8013212:	68fb      	ldr	r3, [r7, #12]
 8013214:	2b05      	cmp	r3, #5
 8013216:	dde0      	ble.n	80131da <train_stop_all+0x1a>
	}
	railconfig_setup_default();
 8013218:	f7ff fa14 	bl	8012644 <railconfig_setup_default>
	debug_info('G', 0, "STOPALL", 0,0, 0);
 801321c:	2300      	movs	r3, #0
 801321e:	9301      	str	r3, [sp, #4]
 8013220:	2300      	movs	r3, #0
 8013222:	9300      	str	r3, [sp, #0]
 8013224:	2300      	movs	r3, #0
 8013226:	4a07      	ldr	r2, [pc, #28]	; (8013244 <train_stop_all+0x84>)
 8013228:	2100      	movs	r1, #0
 801322a:	2047      	movs	r0, #71	; 0x47
 801322c:	f7ff fba9 	bl	8012982 <debug_info>
	stop_all = 0;
 8013230:	4b03      	ldr	r3, [pc, #12]	; (8013240 <train_stop_all+0x80>)
 8013232:	2200      	movs	r2, #0
 8013234:	601a      	str	r2, [r3, #0]
}
 8013236:	bf00      	nop
 8013238:	3710      	adds	r7, #16
 801323a:	46bd      	mov	sp, r7
 801323c:	bd80      	pop	{r7, pc}
 801323e:	bf00      	nop
 8013240:	2000526c 	.word	0x2000526c
 8013244:	080160d8 	.word	0x080160d8

08013248 <calibrate_bemf>:
#define CALIB_NUM_VAL 50

static calib_t calib;

void calibrate_bemf(void)
{
 8013248:	b580      	push	{r7, lr}
 801324a:	b082      	sub	sp, #8
 801324c:	af02      	add	r7, sp, #8
	if (calibrating) return;
 801324e:	4b0e      	ldr	r3, [pc, #56]	; (8013288 <calibrate_bemf+0x40>)
 8013250:	681b      	ldr	r3, [r3, #0]
 8013252:	2b00      	cmp	r3, #0
 8013254:	d115      	bne.n	8013282 <calibrate_bemf+0x3a>
    debug_info('G', 0, "CAL/START", 0, 0, 0);
 8013256:	2300      	movs	r3, #0
 8013258:	9301      	str	r3, [sp, #4]
 801325a:	2300      	movs	r3, #0
 801325c:	9300      	str	r3, [sp, #0]
 801325e:	2300      	movs	r3, #0
 8013260:	4a0a      	ldr	r2, [pc, #40]	; (801328c <calibrate_bemf+0x44>)
 8013262:	2100      	movs	r1, #0
 8013264:	2047      	movs	r0, #71	; 0x47
 8013266:	f7ff fb8c 	bl	8012982 <debug_info>
	calibrating=1;
 801326a:	4b07      	ldr	r3, [pc, #28]	; (8013288 <calibrate_bemf+0x40>)
 801326c:	2201      	movs	r2, #1
 801326e:	601a      	str	r2, [r3, #0]
	calib.n = -1;
 8013270:	4b07      	ldr	r3, [pc, #28]	; (8013290 <calibrate_bemf+0x48>)
 8013272:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013276:	605a      	str	r2, [r3, #4]
	calib.spd = -MAX_PWM-1; // -91;
 8013278:	4b05      	ldr	r3, [pc, #20]	; (8013290 <calibrate_bemf+0x48>)
 801327a:	f64f 72a5 	movw	r2, #65445	; 0xffa5
 801327e:	801a      	strh	r2, [r3, #0]
 8013280:	e000      	b.n	8013284 <calibrate_bemf+0x3c>
	if (calibrating) return;
 8013282:	bf00      	nop
}
 8013284:	46bd      	mov	sp, r7
 8013286:	bd80      	pop	{r7, pc}
 8013288:	20005270 	.word	0x20005270
 801328c:	080160e0 	.word	0x080160e0
 8013290:	20005284 	.word	0x20005284

08013294 <calibrate_periodic>:
		canton_end_calib(c, v, calib.spd, CALIB_NUM_VAL);
	}
}
#else
void calibrate_periodic(uint32_t tick, uint32_t dt, uint32_t notif_Flags)
{
 8013294:	b480      	push	{r7}
 8013296:	b085      	sub	sp, #20
 8013298:	af00      	add	r7, sp, #0
 801329a:	60f8      	str	r0, [r7, #12]
 801329c:	60b9      	str	r1, [r7, #8]
 801329e:	607a      	str	r2, [r7, #4]

}
 80132a0:	bf00      	nop
 80132a2:	3714      	adds	r7, #20
 80132a4:	46bd      	mov	sp, r7
 80132a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132aa:	4770      	bx	lr

080132ac <highlevel_tick>:
static void lost_train(uint8_t numtrain);
static void train_switching_canton(uint8_t numtrain);
static void train_did_switch_canton(uint8_t numtrain);

static void highlevel_tick(void)
{
 80132ac:	b580      	push	{r7, lr}
 80132ae:	b08a      	sub	sp, #40	; 0x28
 80132b0:	af00      	add	r7, sp, #0
	// check unexpected presence
	for (int i=0; i<NUM_CANTONS; i++) {
 80132b2:	2300      	movs	r3, #0
 80132b4:	627b      	str	r3, [r7, #36]	; 0x24
 80132b6:	e021      	b.n	80132fc <highlevel_tick+0x50>
		USE_CANTON(i);
 80132b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80132ba:	f7ff f873 	bl	80123a4 <get_canton_cnf>
 80132be:	6078      	str	r0, [r7, #4]
 80132c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80132c2:	f7ff f897 	bl	80123f4 <get_canton_vars>
 80132c6:	6038      	str	r0, [r7, #0]
        (void) cconf; // unused;
		if (cvars->curtrainidx != 0xFF) continue;
 80132c8:	683b      	ldr	r3, [r7, #0]
 80132ca:	7b1b      	ldrb	r3, [r3, #12]
 80132cc:	2bff      	cmp	r3, #255	; 0xff
 80132ce:	d10d      	bne.n	80132ec <highlevel_tick+0x40>
		if (cvars->occupency == CANTON_OCCUPENCY_FREE) continue;
 80132d0:	683b      	ldr	r3, [r7, #0]
 80132d2:	7b9b      	ldrb	r3, [r3, #14]
 80132d4:	2b01      	cmp	r3, #1
 80132d6:	d00b      	beq.n	80132f0 <highlevel_tick+0x44>
		if (cvars->occupency == CANTON_OCCUPENCY_UNKNOWN) continue;
 80132d8:	683b      	ldr	r3, [r7, #0]
 80132da:	7b9b      	ldrb	r3, [r3, #14]
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d009      	beq.n	80132f4 <highlevel_tick+0x48>
		unexpected_canton_occupency(i);
 80132e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132e2:	b2db      	uxtb	r3, r3
 80132e4:	4618      	mov	r0, r3
 80132e6:	f000 f87c 	bl	80133e2 <unexpected_canton_occupency>
 80132ea:	e004      	b.n	80132f6 <highlevel_tick+0x4a>
		if (cvars->curtrainidx != 0xFF) continue;
 80132ec:	bf00      	nop
 80132ee:	e002      	b.n	80132f6 <highlevel_tick+0x4a>
		if (cvars->occupency == CANTON_OCCUPENCY_FREE) continue;
 80132f0:	bf00      	nop
 80132f2:	e000      	b.n	80132f6 <highlevel_tick+0x4a>
		if (cvars->occupency == CANTON_OCCUPENCY_UNKNOWN) continue;
 80132f4:	bf00      	nop
	for (int i=0; i<NUM_CANTONS; i++) {
 80132f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132f8:	3301      	adds	r3, #1
 80132fa:	627b      	str	r3, [r7, #36]	; 0x24
 80132fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132fe:	2b05      	cmp	r3, #5
 8013300:	ddda      	ble.n	80132b8 <highlevel_tick+0xc>
	}
	// check for next
	for (int i=0; i<NUM_TRAINS; i++) {
 8013302:	2300      	movs	r3, #0
 8013304:	623b      	str	r3, [r7, #32]
 8013306:	e05d      	b.n	80133c4 <highlevel_tick+0x118>
		USE_TRAIN(i);
 8013308:	6a38      	ldr	r0, [r7, #32]
 801330a:	f7ff f8e9 	bl	80124e0 <get_train_cnf>
 801330e:	61f8      	str	r0, [r7, #28]
 8013310:	6a38      	ldr	r0, [r7, #32]
 8013312:	f7ff f90d 	bl	8012530 <get_train_vars>
 8013316:	61b8      	str	r0, [r7, #24]
        (void) tconf; // unused
		int c1 = tvars->current_canton;
 8013318:	69bb      	ldr	r3, [r7, #24]
 801331a:	7d1b      	ldrb	r3, [r3, #20]
 801331c:	617b      	str	r3, [r7, #20]
		int c2 = tvars->next_canton;
 801331e:	69bb      	ldr	r3, [r7, #24]
 8013320:	7d5b      	ldrb	r3, [r3, #21]
 8013322:	613b      	str	r3, [r7, #16]
		//canton_config_t *cc1 =  get_canton_cnf(c1);
		//canton_config_t *cc2 =  get_canton_cnf(c2);
		canton_vars_t   *cv1 = get_canton_vars(c1);
 8013324:	6978      	ldr	r0, [r7, #20]
 8013326:	f7ff f865 	bl	80123f4 <get_canton_vars>
 801332a:	60f8      	str	r0, [r7, #12]
		canton_vars_t   *cv2 = get_canton_vars(c2);
 801332c:	6938      	ldr	r0, [r7, #16]
 801332e:	f7ff f861 	bl	80123f4 <get_canton_vars>
 8013332:	60b8      	str	r0, [r7, #8]

		if (cv1->occupency == CANTON_OCCUPENCY_UNKNOWN) unexpected_unknown_canton_occupency(i, c1, 0);
 8013334:	68fb      	ldr	r3, [r7, #12]
 8013336:	7b9b      	ldrb	r3, [r3, #14]
 8013338:	2b00      	cmp	r3, #0
 801333a:	d107      	bne.n	801334c <highlevel_tick+0xa0>
 801333c:	6a3b      	ldr	r3, [r7, #32]
 801333e:	b2db      	uxtb	r3, r3
 8013340:	697a      	ldr	r2, [r7, #20]
 8013342:	b2d1      	uxtb	r1, r2
 8013344:	2200      	movs	r2, #0
 8013346:	4618      	mov	r0, r3
 8013348:	f000 f856 	bl	80133f8 <unexpected_unknown_canton_occupency>
		if (!cv2) {
 801334c:	68bb      	ldr	r3, [r7, #8]
 801334e:	2b00      	cmp	r3, #0
 8013350:	d109      	bne.n	8013366 <highlevel_tick+0xba>
			if (cv1->occupency == CANTON_OCCUPENCY_FREE) {
 8013352:	68fb      	ldr	r3, [r7, #12]
 8013354:	7b9b      	ldrb	r3, [r3, #14]
 8013356:	2b01      	cmp	r3, #1
 8013358:	d138      	bne.n	80133cc <highlevel_tick+0x120>
				lost_train(i);
 801335a:	6a3b      	ldr	r3, [r7, #32]
 801335c:	b2db      	uxtb	r3, r3
 801335e:	4618      	mov	r0, r3
 8013360:	f000 f85a 	bl	8013418 <lost_train>
			}
			return;
 8013364:	e032      	b.n	80133cc <highlevel_tick+0x120>
		}
		if (cv2->occupency == CANTON_OCCUPENCY_UNKNOWN) unexpected_unknown_canton_occupency(i, c2, 1);
 8013366:	68bb      	ldr	r3, [r7, #8]
 8013368:	7b9b      	ldrb	r3, [r3, #14]
 801336a:	2b00      	cmp	r3, #0
 801336c:	d107      	bne.n	801337e <highlevel_tick+0xd2>
 801336e:	6a3b      	ldr	r3, [r7, #32]
 8013370:	b2db      	uxtb	r3, r3
 8013372:	693a      	ldr	r2, [r7, #16]
 8013374:	b2d1      	uxtb	r1, r2
 8013376:	2201      	movs	r2, #1
 8013378:	4618      	mov	r0, r3
 801337a:	f000 f83d 	bl	80133f8 <unexpected_unknown_canton_occupency>
		if ((cv1->occupency == CANTON_OCCUPENCY_FREE) && (cv2->occupency == CANTON_OCCUPENCY_FREE)) {
 801337e:	68fb      	ldr	r3, [r7, #12]
 8013380:	7b9b      	ldrb	r3, [r3, #14]
 8013382:	2b01      	cmp	r3, #1
 8013384:	d108      	bne.n	8013398 <highlevel_tick+0xec>
 8013386:	68bb      	ldr	r3, [r7, #8]
 8013388:	7b9b      	ldrb	r3, [r3, #14]
 801338a:	2b01      	cmp	r3, #1
 801338c:	d104      	bne.n	8013398 <highlevel_tick+0xec>
			lost_train(i);
 801338e:	6a3b      	ldr	r3, [r7, #32]
 8013390:	b2db      	uxtb	r3, r3
 8013392:	4618      	mov	r0, r3
 8013394:	f000 f840 	bl	8013418 <lost_train>
		}
		if (cv2->occupency > CANTON_OCCUPENCY_FREE) {
 8013398:	68bb      	ldr	r3, [r7, #8]
 801339a:	7b9b      	ldrb	r3, [r3, #14]
 801339c:	2b01      	cmp	r3, #1
 801339e:	d90e      	bls.n	80133be <highlevel_tick+0x112>
			if (cv1->occupency > CANTON_OCCUPENCY_FREE) train_switching_canton(i);
 80133a0:	68fb      	ldr	r3, [r7, #12]
 80133a2:	7b9b      	ldrb	r3, [r3, #14]
 80133a4:	2b01      	cmp	r3, #1
 80133a6:	d905      	bls.n	80133b4 <highlevel_tick+0x108>
 80133a8:	6a3b      	ldr	r3, [r7, #32]
 80133aa:	b2db      	uxtb	r3, r3
 80133ac:	4618      	mov	r0, r3
 80133ae:	f000 f849 	bl	8013444 <train_switching_canton>
 80133b2:	e004      	b.n	80133be <highlevel_tick+0x112>
			else train_did_switch_canton(i);
 80133b4:	6a3b      	ldr	r3, [r7, #32]
 80133b6:	b2db      	uxtb	r3, r3
 80133b8:	4618      	mov	r0, r3
 80133ba:	f000 f867 	bl	801348c <train_did_switch_canton>
	for (int i=0; i<NUM_TRAINS; i++) {
 80133be:	6a3b      	ldr	r3, [r7, #32]
 80133c0:	3301      	adds	r3, #1
 80133c2:	623b      	str	r3, [r7, #32]
 80133c4:	6a3b      	ldr	r3, [r7, #32]
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	dd9e      	ble.n	8013308 <highlevel_tick+0x5c>
 80133ca:	e000      	b.n	80133ce <highlevel_tick+0x122>
			return;
 80133cc:	bf00      	nop
		}
	}
}
 80133ce:	3728      	adds	r7, #40	; 0x28
 80133d0:	46bd      	mov	sp, r7
 80133d2:	bd80      	pop	{r7, pc}

080133d4 <unexpected>:


static void unexpected(void)
{
 80133d4:	b480      	push	{r7}
 80133d6:	af00      	add	r7, sp, #0
	// insert breakpoint
}
 80133d8:	bf00      	nop
 80133da:	46bd      	mov	sp, r7
 80133dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133e0:	4770      	bx	lr

080133e2 <unexpected_canton_occupency>:
static void unexpected_canton_occupency(uint8_t numcanton)
{
 80133e2:	b580      	push	{r7, lr}
 80133e4:	b082      	sub	sp, #8
 80133e6:	af00      	add	r7, sp, #0
 80133e8:	4603      	mov	r3, r0
 80133ea:	71fb      	strb	r3, [r7, #7]
	unexpected();
 80133ec:	f7ff fff2 	bl	80133d4 <unexpected>
}
 80133f0:	bf00      	nop
 80133f2:	3708      	adds	r7, #8
 80133f4:	46bd      	mov	sp, r7
 80133f6:	bd80      	pop	{r7, pc}

080133f8 <unexpected_unknown_canton_occupency>:
static void unexpected_unknown_canton_occupency(uint8_t numtrain, uint8_t numcanton, uint8_t cur)
{
 80133f8:	b580      	push	{r7, lr}
 80133fa:	b082      	sub	sp, #8
 80133fc:	af00      	add	r7, sp, #0
 80133fe:	4603      	mov	r3, r0
 8013400:	71fb      	strb	r3, [r7, #7]
 8013402:	460b      	mov	r3, r1
 8013404:	71bb      	strb	r3, [r7, #6]
 8013406:	4613      	mov	r3, r2
 8013408:	717b      	strb	r3, [r7, #5]
	unexpected();
 801340a:	f7ff ffe3 	bl	80133d4 <unexpected>
}
 801340e:	bf00      	nop
 8013410:	3708      	adds	r7, #8
 8013412:	46bd      	mov	sp, r7
 8013414:	bd80      	pop	{r7, pc}
	...

08013418 <lost_train>:
static void lost_train(uint8_t numtrain)
{
 8013418:	b580      	push	{r7, lr}
 801341a:	b084      	sub	sp, #16
 801341c:	af02      	add	r7, sp, #8
 801341e:	4603      	mov	r3, r0
 8013420:	71fb      	strb	r3, [r7, #7]
    debug_info('T', numtrain, "LOST", 0, 0,0);
 8013422:	79f9      	ldrb	r1, [r7, #7]
 8013424:	2300      	movs	r3, #0
 8013426:	9301      	str	r3, [sp, #4]
 8013428:	2300      	movs	r3, #0
 801342a:	9300      	str	r3, [sp, #0]
 801342c:	2300      	movs	r3, #0
 801342e:	4a04      	ldr	r2, [pc, #16]	; (8013440 <lost_train+0x28>)
 8013430:	2054      	movs	r0, #84	; 0x54
 8013432:	f7ff faa6 	bl	8012982 <debug_info>
}
 8013436:	bf00      	nop
 8013438:	3708      	adds	r7, #8
 801343a:	46bd      	mov	sp, r7
 801343c:	bd80      	pop	{r7, pc}
 801343e:	bf00      	nop
 8013440:	080160ec 	.word	0x080160ec

08013444 <train_switching_canton>:
static void train_switching_canton(uint8_t numtrain)
{
 8013444:	b580      	push	{r7, lr}
 8013446:	b086      	sub	sp, #24
 8013448:	af02      	add	r7, sp, #8
 801344a:	4603      	mov	r3, r0
 801344c:	71fb      	strb	r3, [r7, #7]
    USE_TRAIN(numtrain)
 801344e:	79fb      	ldrb	r3, [r7, #7]
 8013450:	4618      	mov	r0, r3
 8013452:	f7ff f845 	bl	80124e0 <get_train_cnf>
 8013456:	60f8      	str	r0, [r7, #12]
 8013458:	79fb      	ldrb	r3, [r7, #7]
 801345a:	4618      	mov	r0, r3
 801345c:	f7ff f868 	bl	8012530 <get_train_vars>
 8013460:	60b8      	str	r0, [r7, #8]
    (void) tconf; // unused
    debug_info('T', numtrain, "SWITCHING", tvars->current_canton, tvars->next_canton,0);
 8013462:	79f9      	ldrb	r1, [r7, #7]
 8013464:	68bb      	ldr	r3, [r7, #8]
 8013466:	7d1b      	ldrb	r3, [r3, #20]
 8013468:	4618      	mov	r0, r3
 801346a:	68bb      	ldr	r3, [r7, #8]
 801346c:	7d5b      	ldrb	r3, [r3, #21]
 801346e:	461a      	mov	r2, r3
 8013470:	2300      	movs	r3, #0
 8013472:	9301      	str	r3, [sp, #4]
 8013474:	9200      	str	r2, [sp, #0]
 8013476:	4603      	mov	r3, r0
 8013478:	4a03      	ldr	r2, [pc, #12]	; (8013488 <train_switching_canton+0x44>)
 801347a:	2054      	movs	r0, #84	; 0x54
 801347c:	f7ff fa81 	bl	8012982 <debug_info>
}
 8013480:	bf00      	nop
 8013482:	3710      	adds	r7, #16
 8013484:	46bd      	mov	sp, r7
 8013486:	bd80      	pop	{r7, pc}
 8013488:	080160f4 	.word	0x080160f4

0801348c <train_did_switch_canton>:

static void train_did_switch_canton(uint8_t numtrain)
{
 801348c:	b580      	push	{r7, lr}
 801348e:	b088      	sub	sp, #32
 8013490:	af02      	add	r7, sp, #8
 8013492:	4603      	mov	r3, r0
 8013494:	71fb      	strb	r3, [r7, #7]
	USE_TRAIN(numtrain);
 8013496:	79fb      	ldrb	r3, [r7, #7]
 8013498:	4618      	mov	r0, r3
 801349a:	f7ff f821 	bl	80124e0 <get_train_cnf>
 801349e:	6178      	str	r0, [r7, #20]
 80134a0:	79fb      	ldrb	r3, [r7, #7]
 80134a2:	4618      	mov	r0, r3
 80134a4:	f7ff f844 	bl	8012530 <get_train_vars>
 80134a8:	6138      	str	r0, [r7, #16]
    (void) tconf; // unused
    debug_info('T', numtrain, "SWT DONE", tvars->current_canton, tvars->next_canton, tvars->next_canton_dir);
 80134aa:	79f9      	ldrb	r1, [r7, #7]
 80134ac:	693b      	ldr	r3, [r7, #16]
 80134ae:	7d1b      	ldrb	r3, [r3, #20]
 80134b0:	4618      	mov	r0, r3
 80134b2:	693b      	ldr	r3, [r7, #16]
 80134b4:	7d5b      	ldrb	r3, [r3, #21]
 80134b6:	461a      	mov	r2, r3
 80134b8:	693b      	ldr	r3, [r7, #16]
 80134ba:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80134be:	9301      	str	r3, [sp, #4]
 80134c0:	9200      	str	r2, [sp, #0]
 80134c2:	4603      	mov	r3, r0
 80134c4:	4a26      	ldr	r2, [pc, #152]	; (8013560 <train_did_switch_canton+0xd4>)
 80134c6:	2054      	movs	r0, #84	; 0x54
 80134c8:	f7ff fa5b 	bl	8012982 <debug_info>
	const canton_config_t *c_old = get_canton_cnf(tvars->current_canton);
 80134cc:	693b      	ldr	r3, [r7, #16]
 80134ce:	7d1b      	ldrb	r3, [r3, #20]
 80134d0:	4618      	mov	r0, r3
 80134d2:	f7fe ff67 	bl	80123a4 <get_canton_cnf>
 80134d6:	60f8      	str	r0, [r7, #12]
	canton_vars_t *v_old = get_canton_vars(tvars->current_canton);
 80134d8:	693b      	ldr	r3, [r7, #16]
 80134da:	7d1b      	ldrb	r3, [r3, #20]
 80134dc:	4618      	mov	r0, r3
 80134de:	f7fe ff89 	bl	80123f4 <get_canton_vars>
 80134e2:	60b8      	str	r0, [r7, #8]
	canton_set_pwm(c_old, v_old, 0, 0);
 80134e4:	2300      	movs	r3, #0
 80134e6:	2200      	movs	r2, #0
 80134e8:	68b9      	ldr	r1, [r7, #8]
 80134ea:	68f8      	ldr	r0, [r7, #12]
 80134ec:	f7fe f8aa 	bl	8011644 <canton_set_pwm>

	block_canton_exit(numtrain, tvars->current_canton);
 80134f0:	693b      	ldr	r3, [r7, #16]
 80134f2:	7d1a      	ldrb	r2, [r3, #20]
 80134f4:	79fb      	ldrb	r3, [r7, #7]
 80134f6:	4611      	mov	r1, r2
 80134f8:	4618      	mov	r0, r3
 80134fa:	f7fd ff66 	bl	80113ca <block_canton_exit>

	tvars->current_canton = tvars->next_canton;
 80134fe:	693b      	ldr	r3, [r7, #16]
 8013500:	7d5a      	ldrb	r2, [r3, #21]
 8013502:	693b      	ldr	r3, [r7, #16]
 8013504:	751a      	strb	r2, [r3, #20]
	tvars->current_canton_dir = tvars->next_canton_dir;
 8013506:	693b      	ldr	r3, [r7, #16]
 8013508:	f993 2017 	ldrsb.w	r2, [r3, #23]
 801350c:	693b      	ldr	r3, [r7, #16]
 801350e:	759a      	strb	r2, [r3, #22]

	block_canton_enter(numtrain, tvars->current_canton);
 8013510:	693b      	ldr	r3, [r7, #16]
 8013512:	7d1a      	ldrb	r2, [r3, #20]
 8013514:	79fb      	ldrb	r3, [r7, #7]
 8013516:	4611      	mov	r1, r2
 8013518:	4618      	mov	r0, r3
 801351a:	f7fd ff79 	bl	8011410 <block_canton_enter>

	// find next canton and next canton dir
	block_canton_get_next(tvars->current_canton, tvars->current_canton_dir, &(tvars->next_canton), &(tvars->next_canton_dir));
 801351e:	693b      	ldr	r3, [r7, #16]
 8013520:	7d18      	ldrb	r0, [r3, #20]
 8013522:	693b      	ldr	r3, [r7, #16]
 8013524:	f993 1016 	ldrsb.w	r1, [r3, #22]
 8013528:	693b      	ldr	r3, [r7, #16]
 801352a:	f103 0215 	add.w	r2, r3, #21
 801352e:	693b      	ldr	r3, [r7, #16]
 8013530:	3317      	adds	r3, #23
 8013532:	f7fd ff8f 	bl	8011454 <block_canton_get_next>
    debug_info('T', numtrain, "NEXT", tvars->next_canton, tvars->next_canton_dir,0);
 8013536:	79f9      	ldrb	r1, [r7, #7]
 8013538:	693b      	ldr	r3, [r7, #16]
 801353a:	7d5b      	ldrb	r3, [r3, #21]
 801353c:	4618      	mov	r0, r3
 801353e:	693b      	ldr	r3, [r7, #16]
 8013540:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8013544:	461a      	mov	r2, r3
 8013546:	2300      	movs	r3, #0
 8013548:	9301      	str	r3, [sp, #4]
 801354a:	9200      	str	r2, [sp, #0]
 801354c:	4603      	mov	r3, r0
 801354e:	4a05      	ldr	r2, [pc, #20]	; (8013564 <train_did_switch_canton+0xd8>)
 8013550:	2054      	movs	r0, #84	; 0x54
 8013552:	f7ff fa16 	bl	8012982 <debug_info>

}
 8013556:	bf00      	nop
 8013558:	3718      	adds	r7, #24
 801355a:	46bd      	mov	sp, r7
 801355c:	bd80      	pop	{r7, pc}
 801355e:	bf00      	nop
 8013560:	08016100 	.word	0x08016100
 8013564:	0801610c 	.word	0x0801610c

08013568 <turnout_error>:
{
 8013568:	b580      	push	{r7, lr}
 801356a:	b082      	sub	sp, #8
 801356c:	af00      	add	r7, sp, #0
 801356e:	6078      	str	r0, [r7, #4]
 8013570:	6039      	str	r1, [r7, #0]
	return trainctl_error('A', code, msg);
 8013572:	683a      	ldr	r2, [r7, #0]
 8013574:	6879      	ldr	r1, [r7, #4]
 8013576:	2041      	movs	r0, #65	; 0x41
 8013578:	f7fe fd38 	bl	8011fec <trainctl_error>
 801357c:	4603      	mov	r3, r0
}
 801357e:	4618      	mov	r0, r3
 8013580:	3708      	adds	r7, #8
 8013582:	46bd      	mov	sp, r7
 8013584:	bd80      	pop	{r7, pc}

08013586 <debug_info>:
{
 8013586:	b580      	push	{r7, lr}
 8013588:	b088      	sub	sp, #32
 801358a:	af04      	add	r7, sp, #16
 801358c:	60f8      	str	r0, [r7, #12]
 801358e:	60b9      	str	r1, [r7, #8]
 8013590:	607a      	str	r2, [r7, #4]
 8013592:	603b      	str	r3, [r7, #0]
	trainctl_notif2(sel, num, 'D', msg, v1, v2, v3);
 8013594:	68fb      	ldr	r3, [r7, #12]
 8013596:	b2d8      	uxtb	r0, r3
 8013598:	68bb      	ldr	r3, [r7, #8]
 801359a:	b2d9      	uxtb	r1, r3
 801359c:	69fb      	ldr	r3, [r7, #28]
 801359e:	9302      	str	r3, [sp, #8]
 80135a0:	69bb      	ldr	r3, [r7, #24]
 80135a2:	9301      	str	r3, [sp, #4]
 80135a4:	683b      	ldr	r3, [r7, #0]
 80135a6:	9300      	str	r3, [sp, #0]
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	2244      	movs	r2, #68	; 0x44
 80135ac:	f000 fd76 	bl	801409c <trainctl_notif2>
}
 80135b0:	bf00      	nop
 80135b2:	3710      	adds	r7, #16
 80135b4:	46bd      	mov	sp, r7
 80135b6:	bd80      	pop	{r7, pc}

080135b8 <turnout_reset>:
#define ST_SETB 	3
#define ST_RESETB	4
// #define ST_TEST		10

void turnout_reset(int tidx)
{
 80135b8:	b580      	push	{r7, lr}
 80135ba:	b086      	sub	sp, #24
 80135bc:	af02      	add	r7, sp, #8
 80135be:	6078      	str	r0, [r7, #4]
	USE_TURNOUT(tidx) 	// aconf avars
 80135c0:	6878      	ldr	r0, [r7, #4]
 80135c2:	f7fe ffdd 	bl	8012580 <get_turnout_cnf>
 80135c6:	60f8      	str	r0, [r7, #12]
 80135c8:	6878      	ldr	r0, [r7, #4]
 80135ca:	f7fe ffff 	bl	80125cc <get_turnout_vars>
 80135ce:	60b8      	str	r0, [r7, #8]
	memset(avars, 0, sizeof(*avars));
 80135d0:	2202      	movs	r2, #2
 80135d2:	2100      	movs	r1, #0
 80135d4:	68b8      	ldr	r0, [r7, #8]
 80135d6:	f001 fc71 	bl	8014ebc <memset>
	avars->value = 0;
 80135da:	68bb      	ldr	r3, [r7, #8]
 80135dc:	2200      	movs	r2, #0
 80135de:	701a      	strb	r2, [r3, #0]
	avars->st = ST_IDLE;
 80135e0:	68bb      	ldr	r3, [r7, #8]
 80135e2:	2200      	movs	r2, #0
 80135e4:	705a      	strb	r2, [r3, #1]
#ifndef TRAIN_SIMU
	HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinA, GPIO_PIN_RESET);
 80135e6:	68fb      	ldr	r3, [r7, #12]
 80135e8:	6818      	ldr	r0, [r3, #0]
 80135ea:	68fb      	ldr	r3, [r7, #12]
 80135ec:	889b      	ldrh	r3, [r3, #4]
 80135ee:	2200      	movs	r2, #0
 80135f0:	4619      	mov	r1, r3
 80135f2:	f7f0 f993 	bl	800391c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinB, GPIO_PIN_RESET);
 80135f6:	68fb      	ldr	r3, [r7, #12]
 80135f8:	6818      	ldr	r0, [r3, #0]
 80135fa:	68fb      	ldr	r3, [r7, #12]
 80135fc:	88db      	ldrh	r3, [r3, #6]
 80135fe:	2200      	movs	r2, #0
 8013600:	4619      	mov	r1, r3
 8013602:	f7f0 f98b 	bl	800391c <HAL_GPIO_WritePin>
#endif
	debug_info('A', 0, "RESET", 0, 0,0);
 8013606:	2300      	movs	r3, #0
 8013608:	9301      	str	r3, [sp, #4]
 801360a:	2300      	movs	r3, #0
 801360c:	9300      	str	r3, [sp, #0]
 801360e:	2300      	movs	r3, #0
 8013610:	4a04      	ldr	r2, [pc, #16]	; (8013624 <turnout_reset+0x6c>)
 8013612:	2100      	movs	r1, #0
 8013614:	2041      	movs	r0, #65	; 0x41
 8013616:	f7ff ffb6 	bl	8013586 <debug_info>
    (void)aconf; // unused
}
 801361a:	bf00      	nop
 801361c:	3710      	adds	r7, #16
 801361e:	46bd      	mov	sp, r7
 8013620:	bd80      	pop	{r7, pc}
 8013622:	bf00      	nop
 8013624:	08016114 	.word	0x08016114

08013628 <turnout_cmd>:
	if (!v) return turnout_error(ERR_BAD_PARAM, "bad idx");
	if (v->st != ST_IDLE) return 0; // change on progress
	return v->value; // XXX
}
int turnout_cmd(int tidx, int vab)
{
 8013628:	b580      	push	{r7, lr}
 801362a:	b086      	sub	sp, #24
 801362c:	af02      	add	r7, sp, #8
 801362e:	6078      	str	r0, [r7, #4]
 8013630:	6039      	str	r1, [r7, #0]
	USE_TURNOUT(tidx) 	// aconf avars
 8013632:	6878      	ldr	r0, [r7, #4]
 8013634:	f7fe ffa4 	bl	8012580 <get_turnout_cnf>
 8013638:	60f8      	str	r0, [r7, #12]
 801363a:	6878      	ldr	r0, [r7, #4]
 801363c:	f7fe ffc6 	bl	80125cc <get_turnout_vars>
 8013640:	60b8      	str	r0, [r7, #8]

	if (!aconf || !avars) return turnout_error(ERR_BAD_PARAM, "bad idx");
 8013642:	68fb      	ldr	r3, [r7, #12]
 8013644:	2b00      	cmp	r3, #0
 8013646:	d002      	beq.n	801364e <turnout_cmd+0x26>
 8013648:	68bb      	ldr	r3, [r7, #8]
 801364a:	2b00      	cmp	r3, #0
 801364c:	d106      	bne.n	801365c <turnout_cmd+0x34>
 801364e:	491b      	ldr	r1, [pc, #108]	; (80136bc <turnout_cmd+0x94>)
 8013650:	f06f 0001 	mvn.w	r0, #1
 8013654:	f7ff ff88 	bl	8013568 <turnout_error>
 8013658:	4603      	mov	r3, r0
 801365a:	e02b      	b.n	80136b4 <turnout_cmd+0x8c>
	debug_info('A', 0, "CMD", tidx, vab, avars->value);
 801365c:	68bb      	ldr	r3, [r7, #8]
 801365e:	f993 3000 	ldrsb.w	r3, [r3]
 8013662:	9301      	str	r3, [sp, #4]
 8013664:	683b      	ldr	r3, [r7, #0]
 8013666:	9300      	str	r3, [sp, #0]
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	4a15      	ldr	r2, [pc, #84]	; (80136c0 <turnout_cmd+0x98>)
 801366c:	2100      	movs	r1, #0
 801366e:	2041      	movs	r0, #65	; 0x41
 8013670:	f7ff ff89 	bl	8013586 <debug_info>

	//if (vab == v->value) return 0;
	avars->value = vab;
 8013674:	683b      	ldr	r3, [r7, #0]
 8013676:	b25a      	sxtb	r2, r3
 8013678:	68bb      	ldr	r3, [r7, #8]
 801367a:	701a      	strb	r2, [r3, #0]
#ifndef TRAIN_SIMU
    HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinA, GPIO_PIN_RESET);
 801367c:	68fb      	ldr	r3, [r7, #12]
 801367e:	6818      	ldr	r0, [r3, #0]
 8013680:	68fb      	ldr	r3, [r7, #12]
 8013682:	889b      	ldrh	r3, [r3, #4]
 8013684:	2200      	movs	r2, #0
 8013686:	4619      	mov	r1, r3
 8013688:	f7f0 f948 	bl	800391c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinB, GPIO_PIN_RESET);
 801368c:	68fb      	ldr	r3, [r7, #12]
 801368e:	6818      	ldr	r0, [r3, #0]
 8013690:	68fb      	ldr	r3, [r7, #12]
 8013692:	88db      	ldrh	r3, [r3, #6]
 8013694:	2200      	movs	r2, #0
 8013696:	4619      	mov	r1, r3
 8013698:	f7f0 f940 	bl	800391c <HAL_GPIO_WritePin>
#endif
	if (-1==vab) {
 801369c:	683b      	ldr	r3, [r7, #0]
 801369e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80136a2:	d103      	bne.n	80136ac <turnout_cmd+0x84>
		avars->st = ST_SETA;
 80136a4:	68bb      	ldr	r3, [r7, #8]
 80136a6:	2201      	movs	r2, #1
 80136a8:	705a      	strb	r2, [r3, #1]
 80136aa:	e002      	b.n	80136b2 <turnout_cmd+0x8a>
	} else {
		avars->st = ST_SETB;
 80136ac:	68bb      	ldr	r3, [r7, #8]
 80136ae:	2203      	movs	r2, #3
 80136b0:	705a      	strb	r2, [r3, #1]
	}
	return 0;
 80136b2:	2300      	movs	r3, #0
}
 80136b4:	4618      	mov	r0, r3
 80136b6:	3710      	adds	r7, #16
 80136b8:	46bd      	mov	sp, r7
 80136ba:	bd80      	pop	{r7, pc}
 80136bc:	0801611c 	.word	0x0801611c
 80136c0:	08016124 	.word	0x08016124

080136c4 <turnout_test>:

int turnout_test(int tidx)
{
 80136c4:	b480      	push	{r7}
 80136c6:	b083      	sub	sp, #12
 80136c8:	af00      	add	r7, sp, #0
 80136ca:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(c->cmd_port, c->pinB, GPIO_PIN_RESET);
#endif
	v->st = ST_TEST;
	*/
#endif
    return 0;
 80136cc:	2300      	movs	r3, #0
}
 80136ce:	4618      	mov	r0, r3
 80136d0:	370c      	adds	r7, #12
 80136d2:	46bd      	mov	sp, r7
 80136d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136d8:	4770      	bx	lr
	...

080136dc <turnout_tick>:




void turnout_tick(void)
{
 80136dc:	b580      	push	{r7, lr}
 80136de:	b086      	sub	sp, #24
 80136e0:	af02      	add	r7, sp, #8
	for (int i=0; i<NUM_TURNOUTS; i++) {
 80136e2:	2300      	movs	r3, #0
 80136e4:	60fb      	str	r3, [r7, #12]
 80136e6:	e07b      	b.n	80137e0 <turnout_tick+0x104>
		USE_TURNOUT(i)		// aconf , avars
 80136e8:	68f8      	ldr	r0, [r7, #12]
 80136ea:	f7fe ff49 	bl	8012580 <get_turnout_cnf>
 80136ee:	60b8      	str	r0, [r7, #8]
 80136f0:	68f8      	ldr	r0, [r7, #12]
 80136f2:	f7fe ff6b 	bl	80125cc <get_turnout_vars>
 80136f6:	6078      	str	r0, [r7, #4]
		switch (avars->st) {
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	785b      	ldrb	r3, [r3, #1]
 80136fc:	2b04      	cmp	r3, #4
 80136fe:	d865      	bhi.n	80137cc <turnout_tick+0xf0>
 8013700:	a201      	add	r2, pc, #4	; (adr r2, 8013708 <turnout_tick+0x2c>)
 8013702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013706:	bf00      	nop
 8013708:	080137d9 	.word	0x080137d9
 801370c:	0801371d 	.word	0x0801371d
 8013710:	08013775 	.word	0x08013775
 8013714:	08013749 	.word	0x08013749
 8013718:	080137a1 	.word	0x080137a1
		case ST_IDLE:
			break;
		case ST_SETA:
#ifndef TRAIN_SIMU
			HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinA, GPIO_PIN_SET);
 801371c:	68bb      	ldr	r3, [r7, #8]
 801371e:	6818      	ldr	r0, [r3, #0]
 8013720:	68bb      	ldr	r3, [r7, #8]
 8013722:	889b      	ldrh	r3, [r3, #4]
 8013724:	2201      	movs	r2, #1
 8013726:	4619      	mov	r1, r3
 8013728:	f7f0 f8f8 	bl	800391c <HAL_GPIO_WritePin>
#else
                (void)aconf; // unused in SIMU
#endif
			avars->st = ST_RESETA;
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	2202      	movs	r2, #2
 8013730:	705a      	strb	r2, [r3, #1]
			debug_info('A', 0, "A0/SETA", 0, 0,0);
 8013732:	2300      	movs	r3, #0
 8013734:	9301      	str	r3, [sp, #4]
 8013736:	2300      	movs	r3, #0
 8013738:	9300      	str	r3, [sp, #0]
 801373a:	2300      	movs	r3, #0
 801373c:	4a2c      	ldr	r2, [pc, #176]	; (80137f0 <turnout_tick+0x114>)
 801373e:	2100      	movs	r1, #0
 8013740:	2041      	movs	r0, #65	; 0x41
 8013742:	f7ff ff20 	bl	8013586 <debug_info>
			break;
 8013746:	e048      	b.n	80137da <turnout_tick+0xfe>
		case ST_SETB:
#ifndef TRAIN_SIMU
			HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinB, GPIO_PIN_SET);
 8013748:	68bb      	ldr	r3, [r7, #8]
 801374a:	6818      	ldr	r0, [r3, #0]
 801374c:	68bb      	ldr	r3, [r7, #8]
 801374e:	88db      	ldrh	r3, [r3, #6]
 8013750:	2201      	movs	r2, #1
 8013752:	4619      	mov	r1, r3
 8013754:	f7f0 f8e2 	bl	800391c <HAL_GPIO_WritePin>
#endif
			avars->st = ST_RESETB;
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	2204      	movs	r2, #4
 801375c:	705a      	strb	r2, [r3, #1]
			debug_info('A', 0, "A0/SETB", 0, 0,0);
 801375e:	2300      	movs	r3, #0
 8013760:	9301      	str	r3, [sp, #4]
 8013762:	2300      	movs	r3, #0
 8013764:	9300      	str	r3, [sp, #0]
 8013766:	2300      	movs	r3, #0
 8013768:	4a22      	ldr	r2, [pc, #136]	; (80137f4 <turnout_tick+0x118>)
 801376a:	2100      	movs	r1, #0
 801376c:	2041      	movs	r0, #65	; 0x41
 801376e:	f7ff ff0a 	bl	8013586 <debug_info>
			break;
 8013772:	e032      	b.n	80137da <turnout_tick+0xfe>
		case ST_RESETA:
#ifndef TRAIN_SIMU
			HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinA, GPIO_PIN_RESET);
 8013774:	68bb      	ldr	r3, [r7, #8]
 8013776:	6818      	ldr	r0, [r3, #0]
 8013778:	68bb      	ldr	r3, [r7, #8]
 801377a:	889b      	ldrh	r3, [r3, #4]
 801377c:	2200      	movs	r2, #0
 801377e:	4619      	mov	r1, r3
 8013780:	f7f0 f8cc 	bl	800391c <HAL_GPIO_WritePin>
#endif
			avars->st = ST_IDLE;
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	2200      	movs	r2, #0
 8013788:	705a      	strb	r2, [r3, #1]
			debug_info('A', 0, "A0/RESETA", 0, 0,0);
 801378a:	2300      	movs	r3, #0
 801378c:	9301      	str	r3, [sp, #4]
 801378e:	2300      	movs	r3, #0
 8013790:	9300      	str	r3, [sp, #0]
 8013792:	2300      	movs	r3, #0
 8013794:	4a18      	ldr	r2, [pc, #96]	; (80137f8 <turnout_tick+0x11c>)
 8013796:	2100      	movs	r1, #0
 8013798:	2041      	movs	r0, #65	; 0x41
 801379a:	f7ff fef4 	bl	8013586 <debug_info>
			break;
 801379e:	e01c      	b.n	80137da <turnout_tick+0xfe>
		case ST_RESETB:
#ifndef TRAIN_SIMU
			HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinB, GPIO_PIN_RESET);
 80137a0:	68bb      	ldr	r3, [r7, #8]
 80137a2:	6818      	ldr	r0, [r3, #0]
 80137a4:	68bb      	ldr	r3, [r7, #8]
 80137a6:	88db      	ldrh	r3, [r3, #6]
 80137a8:	2200      	movs	r2, #0
 80137aa:	4619      	mov	r1, r3
 80137ac:	f7f0 f8b6 	bl	800391c <HAL_GPIO_WritePin>
#endif
			avars->st = ST_IDLE;
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	2200      	movs	r2, #0
 80137b4:	705a      	strb	r2, [r3, #1]
			debug_info('A', 0, "A0/RESETB", 0, 0,0);
 80137b6:	2300      	movs	r3, #0
 80137b8:	9301      	str	r3, [sp, #4]
 80137ba:	2300      	movs	r3, #0
 80137bc:	9300      	str	r3, [sp, #0]
 80137be:	2300      	movs	r3, #0
 80137c0:	4a0e      	ldr	r2, [pc, #56]	; (80137fc <turnout_tick+0x120>)
 80137c2:	2100      	movs	r1, #0
 80137c4:	2041      	movs	r0, #65	; 0x41
 80137c6:	f7ff fede 	bl	8013586 <debug_info>
			break;
 80137ca:	e006      	b.n	80137da <turnout_tick+0xfe>
			HAL_GPIO_TogglePin(aconf->cmd_port, aconf->pinB);
#endif
			break;
			*/
		default:
			turnout_error(ERR_BAD_STATE, "bad state");
 80137cc:	490c      	ldr	r1, [pc, #48]	; (8013800 <turnout_tick+0x124>)
 80137ce:	f06f 0008 	mvn.w	r0, #8
 80137d2:	f7ff fec9 	bl	8013568 <turnout_error>
			break;
 80137d6:	e000      	b.n	80137da <turnout_tick+0xfe>
			break;
 80137d8:	bf00      	nop
	for (int i=0; i<NUM_TURNOUTS; i++) {
 80137da:	68fb      	ldr	r3, [r7, #12]
 80137dc:	3301      	adds	r3, #1
 80137de:	60fb      	str	r3, [r7, #12]
 80137e0:	68fb      	ldr	r3, [r7, #12]
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	dd80      	ble.n	80136e8 <turnout_tick+0xc>
		}
	}
}
 80137e6:	bf00      	nop
 80137e8:	3710      	adds	r7, #16
 80137ea:	46bd      	mov	sp, r7
 80137ec:	bd80      	pop	{r7, pc}
 80137ee:	bf00      	nop
 80137f0:	08016128 	.word	0x08016128
 80137f4:	08016130 	.word	0x08016130
 80137f8:	08016138 	.word	0x08016138
 80137fc:	08016144 	.word	0x08016144
 8013800:	08016150 	.word	0x08016150

08013804 <txframe_send_notif>:
{
 8013804:	b580      	push	{r7, lr}
 8013806:	b082      	sub	sp, #8
 8013808:	af00      	add	r7, sp, #0
 801380a:	6078      	str	r0, [r7, #4]
 801380c:	6039      	str	r1, [r7, #0]
	m->t = TXFRAME_TYPE_NOTIF;
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	2202      	movs	r2, #2
 8013812:	701a      	strb	r2, [r3, #0]
	if (len) m->len = len;
 8013814:	683b      	ldr	r3, [r7, #0]
 8013816:	2b00      	cmp	r3, #0
 8013818:	d003      	beq.n	8013822 <txframe_send_notif+0x1e>
 801381a:	683b      	ldr	r3, [r7, #0]
 801381c:	b2da      	uxtb	r2, r3
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	705a      	strb	r2, [r3, #1]
	txframe_send(m, 1);
 8013822:	2101      	movs	r1, #1
 8013824:	6878      	ldr	r0, [r7, #4]
 8013826:	f001 fa37 	bl	8014c98 <txframe_send>
}
 801382a:	bf00      	nop
 801382c:	3708      	adds	r7, #8
 801382e:	46bd      	mov	sp, r7
 8013830:	bd80      	pop	{r7, pc}

08013832 <_frm_escape>:

#define FRAME_DELIM '|'
#define FRAME_ESC   '\\'

static int _frm_escape(uint8_t *buf, int len, int maxlen)
{
 8013832:	b480      	push	{r7}
 8013834:	b089      	sub	sp, #36	; 0x24
 8013836:	af00      	add	r7, sp, #0
 8013838:	60f8      	str	r0, [r7, #12]
 801383a:	60b9      	str	r1, [r7, #8]
 801383c:	607a      	str	r2, [r7, #4]
    int ne = 0;
 801383e:	2300      	movs	r3, #0
 8013840:	61fb      	str	r3, [r7, #28]
    for (int i=0; i<len; i++) {
 8013842:	2300      	movs	r3, #0
 8013844:	61bb      	str	r3, [r7, #24]
 8013846:	e011      	b.n	801386c <_frm_escape+0x3a>
        if ((FRAME_ESC==buf[i]) || (FRAME_DELIM==buf[i])) {
 8013848:	69bb      	ldr	r3, [r7, #24]
 801384a:	68fa      	ldr	r2, [r7, #12]
 801384c:	4413      	add	r3, r2
 801384e:	781b      	ldrb	r3, [r3, #0]
 8013850:	2b5c      	cmp	r3, #92	; 0x5c
 8013852:	d005      	beq.n	8013860 <_frm_escape+0x2e>
 8013854:	69bb      	ldr	r3, [r7, #24]
 8013856:	68fa      	ldr	r2, [r7, #12]
 8013858:	4413      	add	r3, r2
 801385a:	781b      	ldrb	r3, [r3, #0]
 801385c:	2b7c      	cmp	r3, #124	; 0x7c
 801385e:	d102      	bne.n	8013866 <_frm_escape+0x34>
            ne++;
 8013860:	69fb      	ldr	r3, [r7, #28]
 8013862:	3301      	adds	r3, #1
 8013864:	61fb      	str	r3, [r7, #28]
    for (int i=0; i<len; i++) {
 8013866:	69bb      	ldr	r3, [r7, #24]
 8013868:	3301      	adds	r3, #1
 801386a:	61bb      	str	r3, [r7, #24]
 801386c:	69ba      	ldr	r2, [r7, #24]
 801386e:	68bb      	ldr	r3, [r7, #8]
 8013870:	429a      	cmp	r2, r3
 8013872:	dbe9      	blt.n	8013848 <_frm_escape+0x16>
        }
    }
    int nl = ne+len;
 8013874:	69fa      	ldr	r2, [r7, #28]
 8013876:	68bb      	ldr	r3, [r7, #8]
 8013878:	4413      	add	r3, r2
 801387a:	613b      	str	r3, [r7, #16]
    if (nl>maxlen) return -1;
 801387c:	693a      	ldr	r2, [r7, #16]
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	429a      	cmp	r2, r3
 8013882:	dd02      	ble.n	801388a <_frm_escape+0x58>
 8013884:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013888:	e02f      	b.n	80138ea <_frm_escape+0xb8>
    for (int i=len-1+ne; i>=0; i--) {
 801388a:	68bb      	ldr	r3, [r7, #8]
 801388c:	3b01      	subs	r3, #1
 801388e:	69fa      	ldr	r2, [r7, #28]
 8013890:	4413      	add	r3, r2
 8013892:	617b      	str	r3, [r7, #20]
 8013894:	e025      	b.n	80138e2 <_frm_escape+0xb0>
        buf[i] = buf[i-ne];
 8013896:	697a      	ldr	r2, [r7, #20]
 8013898:	69fb      	ldr	r3, [r7, #28]
 801389a:	1ad3      	subs	r3, r2, r3
 801389c:	461a      	mov	r2, r3
 801389e:	68fb      	ldr	r3, [r7, #12]
 80138a0:	441a      	add	r2, r3
 80138a2:	697b      	ldr	r3, [r7, #20]
 80138a4:	68f9      	ldr	r1, [r7, #12]
 80138a6:	440b      	add	r3, r1
 80138a8:	7812      	ldrb	r2, [r2, #0]
 80138aa:	701a      	strb	r2, [r3, #0]
        if ((FRAME_ESC==buf[i]) || (FRAME_DELIM==buf[i])) {
 80138ac:	697b      	ldr	r3, [r7, #20]
 80138ae:	68fa      	ldr	r2, [r7, #12]
 80138b0:	4413      	add	r3, r2
 80138b2:	781b      	ldrb	r3, [r3, #0]
 80138b4:	2b5c      	cmp	r3, #92	; 0x5c
 80138b6:	d005      	beq.n	80138c4 <_frm_escape+0x92>
 80138b8:	697b      	ldr	r3, [r7, #20]
 80138ba:	68fa      	ldr	r2, [r7, #12]
 80138bc:	4413      	add	r3, r2
 80138be:	781b      	ldrb	r3, [r3, #0]
 80138c0:	2b7c      	cmp	r3, #124	; 0x7c
 80138c2:	d10b      	bne.n	80138dc <_frm_escape+0xaa>
            buf[i-1]=FRAME_ESC;
 80138c4:	697b      	ldr	r3, [r7, #20]
 80138c6:	3b01      	subs	r3, #1
 80138c8:	68fa      	ldr	r2, [r7, #12]
 80138ca:	4413      	add	r3, r2
 80138cc:	225c      	movs	r2, #92	; 0x5c
 80138ce:	701a      	strb	r2, [r3, #0]
            ne--;
 80138d0:	69fb      	ldr	r3, [r7, #28]
 80138d2:	3b01      	subs	r3, #1
 80138d4:	61fb      	str	r3, [r7, #28]
            i--;
 80138d6:	697b      	ldr	r3, [r7, #20]
 80138d8:	3b01      	subs	r3, #1
 80138da:	617b      	str	r3, [r7, #20]
    for (int i=len-1+ne; i>=0; i--) {
 80138dc:	697b      	ldr	r3, [r7, #20]
 80138de:	3b01      	subs	r3, #1
 80138e0:	617b      	str	r3, [r7, #20]
 80138e2:	697b      	ldr	r3, [r7, #20]
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	dad6      	bge.n	8013896 <_frm_escape+0x64>
        }
    }
    return nl;
 80138e8:	693b      	ldr	r3, [r7, #16]
}
 80138ea:	4618      	mov	r0, r3
 80138ec:	3724      	adds	r7, #36	; 0x24
 80138ee:	46bd      	mov	sp, r7
 80138f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138f4:	4770      	bx	lr

080138f6 <_frm_escape2>:

static int _frm_escape2(uint8_t *buf,  uint8_t *org, int len, int maxlen)
{
 80138f6:	b480      	push	{r7}
 80138f8:	b087      	sub	sp, #28
 80138fa:	af00      	add	r7, sp, #0
 80138fc:	60f8      	str	r0, [r7, #12]
 80138fe:	60b9      	str	r1, [r7, #8]
 8013900:	607a      	str	r2, [r7, #4]
 8013902:	603b      	str	r3, [r7, #0]
    int ne = 0;
 8013904:	2300      	movs	r3, #0
 8013906:	617b      	str	r3, [r7, #20]
    for (int i=0; i<len; i++) {
 8013908:	2300      	movs	r3, #0
 801390a:	613b      	str	r3, [r7, #16]
 801390c:	e02f      	b.n	801396e <_frm_escape2+0x78>
    	if (ne>=maxlen) return -1;
 801390e:	697a      	ldr	r2, [r7, #20]
 8013910:	683b      	ldr	r3, [r7, #0]
 8013912:	429a      	cmp	r2, r3
 8013914:	db02      	blt.n	801391c <_frm_escape2+0x26>
 8013916:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801391a:	e02d      	b.n	8013978 <_frm_escape2+0x82>
        if ((FRAME_ESC==org[i]) || (FRAME_DELIM==org[i])) {
 801391c:	693b      	ldr	r3, [r7, #16]
 801391e:	68ba      	ldr	r2, [r7, #8]
 8013920:	4413      	add	r3, r2
 8013922:	781b      	ldrb	r3, [r3, #0]
 8013924:	2b5c      	cmp	r3, #92	; 0x5c
 8013926:	d005      	beq.n	8013934 <_frm_escape2+0x3e>
 8013928:	693b      	ldr	r3, [r7, #16]
 801392a:	68ba      	ldr	r2, [r7, #8]
 801392c:	4413      	add	r3, r2
 801392e:	781b      	ldrb	r3, [r3, #0]
 8013930:	2b7c      	cmp	r3, #124	; 0x7c
 8013932:	d10e      	bne.n	8013952 <_frm_escape2+0x5c>
        	buf[ne++] = FRAME_ESC;
 8013934:	697b      	ldr	r3, [r7, #20]
 8013936:	1c5a      	adds	r2, r3, #1
 8013938:	617a      	str	r2, [r7, #20]
 801393a:	461a      	mov	r2, r3
 801393c:	68fb      	ldr	r3, [r7, #12]
 801393e:	4413      	add	r3, r2
 8013940:	225c      	movs	r2, #92	; 0x5c
 8013942:	701a      	strb	r2, [r3, #0]
        	if (ne>=maxlen) return -1;
 8013944:	697a      	ldr	r2, [r7, #20]
 8013946:	683b      	ldr	r3, [r7, #0]
 8013948:	429a      	cmp	r2, r3
 801394a:	db02      	blt.n	8013952 <_frm_escape2+0x5c>
 801394c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013950:	e012      	b.n	8013978 <_frm_escape2+0x82>
        }
        buf[ne++] = org[i];
 8013952:	693b      	ldr	r3, [r7, #16]
 8013954:	68ba      	ldr	r2, [r7, #8]
 8013956:	441a      	add	r2, r3
 8013958:	697b      	ldr	r3, [r7, #20]
 801395a:	1c59      	adds	r1, r3, #1
 801395c:	6179      	str	r1, [r7, #20]
 801395e:	4619      	mov	r1, r3
 8013960:	68fb      	ldr	r3, [r7, #12]
 8013962:	440b      	add	r3, r1
 8013964:	7812      	ldrb	r2, [r2, #0]
 8013966:	701a      	strb	r2, [r3, #0]
    for (int i=0; i<len; i++) {
 8013968:	693b      	ldr	r3, [r7, #16]
 801396a:	3301      	adds	r3, #1
 801396c:	613b      	str	r3, [r7, #16]
 801396e:	693a      	ldr	r2, [r7, #16]
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	429a      	cmp	r2, r3
 8013974:	dbcb      	blt.n	801390e <_frm_escape2+0x18>
    }
    return ne;
 8013976:	697b      	ldr	r3, [r7, #20]
}
 8013978:	4618      	mov	r0, r3
 801397a:	371c      	adds	r7, #28
 801397c:	46bd      	mov	sp, r7
 801397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013982:	4770      	bx	lr

08013984 <frm_escape>:
static int frm_escape(uint8_t *buf, int len, int maxlen)
{
 8013984:	b580      	push	{r7, lr}
 8013986:	b086      	sub	sp, #24
 8013988:	af00      	add	r7, sp, #0
 801398a:	60f8      	str	r0, [r7, #12]
 801398c:	60b9      	str	r1, [r7, #8]
 801398e:	607a      	str	r2, [r7, #4]
	//configASSERT(buf[0]==FRAME_DELIM);
	//configASSERT(buf[len-1]==FRAME_DELIM);
    int l = _frm_escape(buf+1, len-2, maxlen-2);
 8013990:	68fb      	ldr	r3, [r7, #12]
 8013992:	1c58      	adds	r0, r3, #1
 8013994:	68bb      	ldr	r3, [r7, #8]
 8013996:	1e99      	subs	r1, r3, #2
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	3b02      	subs	r3, #2
 801399c:	461a      	mov	r2, r3
 801399e:	f7ff ff48 	bl	8013832 <_frm_escape>
 80139a2:	6178      	str	r0, [r7, #20]
    if (l<0) return l;
 80139a4:	697b      	ldr	r3, [r7, #20]
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	da01      	bge.n	80139ae <frm_escape+0x2a>
 80139aa:	697b      	ldr	r3, [r7, #20]
 80139ac:	e007      	b.n	80139be <frm_escape+0x3a>
    buf[l+1]=FRAME_DELIM;
 80139ae:	697b      	ldr	r3, [r7, #20]
 80139b0:	3301      	adds	r3, #1
 80139b2:	68fa      	ldr	r2, [r7, #12]
 80139b4:	4413      	add	r3, r2
 80139b6:	227c      	movs	r2, #124	; 0x7c
 80139b8:	701a      	strb	r2, [r3, #0]
    return l+2;
 80139ba:	697b      	ldr	r3, [r7, #20]
 80139bc:	3302      	adds	r3, #2
}
 80139be:	4618      	mov	r0, r3
 80139c0:	3718      	adds	r7, #24
 80139c2:	46bd      	mov	sp, r7
 80139c4:	bd80      	pop	{r7, pc}
	...

080139c8 <txrx_process_char>:
static  uint8_t process_frame_cmd(uint8_t sel, uint8_t num,  uint8_t cmd,
		uint8_t *param, int plen, uint8_t *rbuf, int rbuflen, int *prlen);


void txrx_process_char(uint8_t c, uint8_t *respbuf, int *replen)
{
 80139c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80139ca:	b08f      	sub	sp, #60	; 0x3c
 80139cc:	af04      	add	r7, sp, #16
 80139ce:	4603      	mov	r3, r0
 80139d0:	60b9      	str	r1, [r7, #8]
 80139d2:	607a      	str	r2, [r7, #4]
 80139d4:	73fb      	strb	r3, [r7, #15]
	int buflen = *replen;
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	681b      	ldr	r3, [r3, #0]
 80139da:	623b      	str	r3, [r7, #32]
	*replen = 0;
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	2200      	movs	r2, #0
 80139e0:	601a      	str	r2, [r3, #0]
	if ((c == FRAME_DELIM) && !frm.escape) {
 80139e2:	7bfb      	ldrb	r3, [r7, #15]
 80139e4:	2b7c      	cmp	r3, #124	; 0x7c
 80139e6:	f040 8097 	bne.w	8013b18 <txrx_process_char+0x150>
 80139ea:	4b88      	ldr	r3, [pc, #544]	; (8013c0c <txrx_process_char+0x244>)
 80139ec:	781b      	ldrb	r3, [r3, #0]
 80139ee:	f003 0301 	and.w	r3, r3, #1
 80139f2:	b2db      	uxtb	r3, r3
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	f040 808f 	bne.w	8013b18 <txrx_process_char+0x150>
		if (0 == frm.state) {
 80139fa:	4b84      	ldr	r3, [pc, #528]	; (8013c0c <txrx_process_char+0x244>)
 80139fc:	781b      	ldrb	r3, [r3, #0]
 80139fe:	f023 0301 	bic.w	r3, r3, #1
 8013a02:	b2db      	uxtb	r3, r3
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d10b      	bne.n	8013a20 <txrx_process_char+0x58>
			memset(&frm, 0, sizeof(frm));
 8013a08:	2226      	movs	r2, #38	; 0x26
 8013a0a:	2100      	movs	r1, #0
 8013a0c:	487f      	ldr	r0, [pc, #508]	; (8013c0c <txrx_process_char+0x244>)
 8013a0e:	f001 fa55 	bl	8014ebc <memset>
			frm.state = 1;
 8013a12:	4a7e      	ldr	r2, [pc, #504]	; (8013c0c <txrx_process_char+0x244>)
 8013a14:	7813      	ldrb	r3, [r2, #0]
 8013a16:	2101      	movs	r1, #1
 8013a18:	f361 0347 	bfi	r3, r1, #1, #7
 8013a1c:	7013      	strb	r3, [r2, #0]
			return;
 8013a1e:	e0f1      	b.n	8013c04 <txrx_process_char+0x23c>
		} else if (5 == frm.state) {
 8013a20:	4b7a      	ldr	r3, [pc, #488]	; (8013c0c <txrx_process_char+0x244>)
 8013a22:	781b      	ldrb	r3, [r3, #0]
 8013a24:	f023 0301 	bic.w	r3, r3, #1
 8013a28:	b2db      	uxtb	r3, r3
 8013a2a:	2b0a      	cmp	r3, #10
 8013a2c:	d168      	bne.n	8013b00 <txrx_process_char+0x138>
			frm.state = 0;
 8013a2e:	4a77      	ldr	r2, [pc, #476]	; (8013c0c <txrx_process_char+0x244>)
 8013a30:	7813      	ldrb	r3, [r2, #0]
 8013a32:	f36f 0347 	bfc	r3, #1, #7
 8013a36:	7013      	strb	r3, [r2, #0]
			frm.escape = 0;
 8013a38:	4a74      	ldr	r2, [pc, #464]	; (8013c0c <txrx_process_char+0x244>)
 8013a3a:	7813      	ldrb	r3, [r2, #0]
 8013a3c:	f36f 0300 	bfc	r3, #0, #1
 8013a40:	7013      	strb	r3, [r2, #0]
			// process frame
			int i = 0;
 8013a42:	2300      	movs	r3, #0
 8013a44:	61fb      	str	r3, [r7, #28]
			respbuf[i++] = FRAME_DELIM;
 8013a46:	69fb      	ldr	r3, [r7, #28]
 8013a48:	1c5a      	adds	r2, r3, #1
 8013a4a:	61fa      	str	r2, [r7, #28]
 8013a4c:	461a      	mov	r2, r3
 8013a4e:	68bb      	ldr	r3, [r7, #8]
 8013a50:	4413      	add	r3, r2
 8013a52:	227c      	movs	r2, #124	; 0x7c
 8013a54:	701a      	strb	r2, [r3, #0]
			respbuf[i++] = frm.seqnum;
 8013a56:	69fb      	ldr	r3, [r7, #28]
 8013a58:	1c5a      	adds	r2, r3, #1
 8013a5a:	61fa      	str	r2, [r7, #28]
 8013a5c:	461a      	mov	r2, r3
 8013a5e:	68bb      	ldr	r3, [r7, #8]
 8013a60:	4413      	add	r3, r2
 8013a62:	4a6a      	ldr	r2, [pc, #424]	; (8013c0c <txrx_process_char+0x244>)
 8013a64:	7852      	ldrb	r2, [r2, #1]
 8013a66:	701a      	strb	r2, [r3, #0]
			respbuf[i++] = 'R';
 8013a68:	69fb      	ldr	r3, [r7, #28]
 8013a6a:	1c5a      	adds	r2, r3, #1
 8013a6c:	61fa      	str	r2, [r7, #28]
 8013a6e:	461a      	mov	r2, r3
 8013a70:	68bb      	ldr	r3, [r7, #8]
 8013a72:	4413      	add	r3, r2
 8013a74:	2252      	movs	r2, #82	; 0x52
 8013a76:	701a      	strb	r2, [r3, #0]
			int plen = 0;
 8013a78:	2300      	movs	r3, #0
 8013a7a:	617b      	str	r3, [r7, #20]
			uint8_t rc = process_frame_cmd(frm.sel, frm.num, frm.cmd, frm.param, frm.pidx, respbuf+i+1, buflen-i-1, &plen);
 8013a7c:	4b63      	ldr	r3, [pc, #396]	; (8013c0c <txrx_process_char+0x244>)
 8013a7e:	7898      	ldrb	r0, [r3, #2]
 8013a80:	4b62      	ldr	r3, [pc, #392]	; (8013c0c <txrx_process_char+0x244>)
 8013a82:	78dc      	ldrb	r4, [r3, #3]
 8013a84:	4b61      	ldr	r3, [pc, #388]	; (8013c0c <txrx_process_char+0x244>)
 8013a86:	791d      	ldrb	r5, [r3, #4]
 8013a88:	4b60      	ldr	r3, [pc, #384]	; (8013c0c <txrx_process_char+0x244>)
 8013a8a:	795b      	ldrb	r3, [r3, #5]
 8013a8c:	461e      	mov	r6, r3
 8013a8e:	69fb      	ldr	r3, [r7, #28]
 8013a90:	3301      	adds	r3, #1
 8013a92:	68ba      	ldr	r2, [r7, #8]
 8013a94:	4413      	add	r3, r2
 8013a96:	6a39      	ldr	r1, [r7, #32]
 8013a98:	69fa      	ldr	r2, [r7, #28]
 8013a9a:	1a8a      	subs	r2, r1, r2
 8013a9c:	3a01      	subs	r2, #1
 8013a9e:	f107 0114 	add.w	r1, r7, #20
 8013aa2:	9103      	str	r1, [sp, #12]
 8013aa4:	9202      	str	r2, [sp, #8]
 8013aa6:	9301      	str	r3, [sp, #4]
 8013aa8:	9600      	str	r6, [sp, #0]
 8013aaa:	4b59      	ldr	r3, [pc, #356]	; (8013c10 <txrx_process_char+0x248>)
 8013aac:	462a      	mov	r2, r5
 8013aae:	4621      	mov	r1, r4
 8013ab0:	f000 f8d2 	bl	8013c58 <process_frame_cmd>
 8013ab4:	4603      	mov	r3, r0
 8013ab6:	76fb      	strb	r3, [r7, #27]
			respbuf[i++] = rc;
 8013ab8:	69fb      	ldr	r3, [r7, #28]
 8013aba:	1c5a      	adds	r2, r3, #1
 8013abc:	61fa      	str	r2, [r7, #28]
 8013abe:	461a      	mov	r2, r3
 8013ac0:	68bb      	ldr	r3, [r7, #8]
 8013ac2:	4413      	add	r3, r2
 8013ac4:	7efa      	ldrb	r2, [r7, #27]
 8013ac6:	701a      	strb	r2, [r3, #0]
			respbuf[i+plen] = FRAME_DELIM;
 8013ac8:	697a      	ldr	r2, [r7, #20]
 8013aca:	69fb      	ldr	r3, [r7, #28]
 8013acc:	4413      	add	r3, r2
 8013ace:	461a      	mov	r2, r3
 8013ad0:	68bb      	ldr	r3, [r7, #8]
 8013ad2:	4413      	add	r3, r2
 8013ad4:	227c      	movs	r2, #124	; 0x7c
 8013ad6:	701a      	strb	r2, [r3, #0]
			int l = frm_escape(respbuf, i+plen+1, buflen);
 8013ad8:	697a      	ldr	r2, [r7, #20]
 8013ada:	69fb      	ldr	r3, [r7, #28]
 8013adc:	4413      	add	r3, r2
 8013ade:	3301      	adds	r3, #1
 8013ae0:	6a3a      	ldr	r2, [r7, #32]
 8013ae2:	4619      	mov	r1, r3
 8013ae4:	68b8      	ldr	r0, [r7, #8]
 8013ae6:	f7ff ff4d 	bl	8013984 <frm_escape>
 8013aea:	6278      	str	r0, [r7, #36]	; 0x24
			if (l<0) {
 8013aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	da01      	bge.n	8013af6 <txrx_process_char+0x12e>
				l = 0;
 8013af2:	2300      	movs	r3, #0
 8013af4:	627b      	str	r3, [r7, #36]	; 0x24
			}
			*replen = l;
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013afa:	601a      	str	r2, [r3, #0]
			/*if ((0)) {
				static frame_msg_t m;
				m.len = 1+ sprintf(m.frm, "frm resp %d\r\n", *replen);
				txframe_send_debug(&m, 0);
			}*/
			return;
 8013afc:	bf00      	nop
 8013afe:	e081      	b.n	8013c04 <txrx_process_char+0x23c>
		} else {
			// short frame, ignore
			frm.state = 1;
 8013b00:	4a42      	ldr	r2, [pc, #264]	; (8013c0c <txrx_process_char+0x244>)
 8013b02:	7813      	ldrb	r3, [r2, #0]
 8013b04:	2101      	movs	r1, #1
 8013b06:	f361 0347 	bfi	r3, r1, #1, #7
 8013b0a:	7013      	strb	r3, [r2, #0]
			frm.escape = 0;
 8013b0c:	4a3f      	ldr	r2, [pc, #252]	; (8013c0c <txrx_process_char+0x244>)
 8013b0e:	7813      	ldrb	r3, [r2, #0]
 8013b10:	f36f 0300 	bfc	r3, #0, #1
 8013b14:	7013      	strb	r3, [r2, #0]
			return;
 8013b16:	e075      	b.n	8013c04 <txrx_process_char+0x23c>
		}
	}
	if (c==FRAME_ESC && !frm.escape) {
 8013b18:	7bfb      	ldrb	r3, [r7, #15]
 8013b1a:	2b5c      	cmp	r3, #92	; 0x5c
 8013b1c:	d10c      	bne.n	8013b38 <txrx_process_char+0x170>
 8013b1e:	4b3b      	ldr	r3, [pc, #236]	; (8013c0c <txrx_process_char+0x244>)
 8013b20:	781b      	ldrb	r3, [r3, #0]
 8013b22:	f003 0301 	and.w	r3, r3, #1
 8013b26:	b2db      	uxtb	r3, r3
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d105      	bne.n	8013b38 <txrx_process_char+0x170>
		// state is >0 here
		frm.escape = 1;
 8013b2c:	4a37      	ldr	r2, [pc, #220]	; (8013c0c <txrx_process_char+0x244>)
 8013b2e:	7813      	ldrb	r3, [r2, #0]
 8013b30:	f043 0301 	orr.w	r3, r3, #1
 8013b34:	7013      	strb	r3, [r2, #0]
		return;
 8013b36:	e065      	b.n	8013c04 <txrx_process_char+0x23c>
	}

	//  |sSNCvv...|
	switch (frm.state) {
 8013b38:	4b34      	ldr	r3, [pc, #208]	; (8013c0c <txrx_process_char+0x244>)
 8013b3a:	781b      	ldrb	r3, [r3, #0]
 8013b3c:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8013b40:	b2db      	uxtb	r3, r3
 8013b42:	3b01      	subs	r3, #1
 8013b44:	2b04      	cmp	r3, #4
 8013b46:	d80d      	bhi.n	8013b64 <txrx_process_char+0x19c>
 8013b48:	a201      	add	r2, pc, #4	; (adr r2, 8013b50 <txrx_process_char+0x188>)
 8013b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b4e:	bf00      	nop
 8013b50:	08013b71 	.word	0x08013b71
 8013b54:	08013b85 	.word	0x08013b85
 8013b58:	08013b99 	.word	0x08013b99
 8013b5c:	08013bad 	.word	0x08013bad
 8013b60:	08013bc1 	.word	0x08013bc1
	default:
		frm.escape = 0;
 8013b64:	4a29      	ldr	r2, [pc, #164]	; (8013c0c <txrx_process_char+0x244>)
 8013b66:	7813      	ldrb	r3, [r2, #0]
 8013b68:	f36f 0300 	bfc	r3, #0, #1
 8013b6c:	7013      	strb	r3, [r2, #0]
		//configAssert(0);
		break;
 8013b6e:	e044      	b.n	8013bfa <txrx_process_char+0x232>
	case 1:
		frm.seqnum = c;
 8013b70:	4a26      	ldr	r2, [pc, #152]	; (8013c0c <txrx_process_char+0x244>)
 8013b72:	7bfb      	ldrb	r3, [r7, #15]
 8013b74:	7053      	strb	r3, [r2, #1]
		frm.state = 2;
 8013b76:	4a25      	ldr	r2, [pc, #148]	; (8013c0c <txrx_process_char+0x244>)
 8013b78:	7813      	ldrb	r3, [r2, #0]
 8013b7a:	2102      	movs	r1, #2
 8013b7c:	f361 0347 	bfi	r3, r1, #1, #7
 8013b80:	7013      	strb	r3, [r2, #0]
		break;
 8013b82:	e03a      	b.n	8013bfa <txrx_process_char+0x232>
	case 2:
		frm.sel = c;
 8013b84:	4a21      	ldr	r2, [pc, #132]	; (8013c0c <txrx_process_char+0x244>)
 8013b86:	7bfb      	ldrb	r3, [r7, #15]
 8013b88:	7093      	strb	r3, [r2, #2]
		frm.state = 3;
 8013b8a:	4a20      	ldr	r2, [pc, #128]	; (8013c0c <txrx_process_char+0x244>)
 8013b8c:	7813      	ldrb	r3, [r2, #0]
 8013b8e:	2103      	movs	r1, #3
 8013b90:	f361 0347 	bfi	r3, r1, #1, #7
 8013b94:	7013      	strb	r3, [r2, #0]
		break;
 8013b96:	e030      	b.n	8013bfa <txrx_process_char+0x232>
	case 3:
		frm.num = c;
 8013b98:	4a1c      	ldr	r2, [pc, #112]	; (8013c0c <txrx_process_char+0x244>)
 8013b9a:	7bfb      	ldrb	r3, [r7, #15]
 8013b9c:	70d3      	strb	r3, [r2, #3]
		frm.state = 4;
 8013b9e:	4a1b      	ldr	r2, [pc, #108]	; (8013c0c <txrx_process_char+0x244>)
 8013ba0:	7813      	ldrb	r3, [r2, #0]
 8013ba2:	2104      	movs	r1, #4
 8013ba4:	f361 0347 	bfi	r3, r1, #1, #7
 8013ba8:	7013      	strb	r3, [r2, #0]
		break;
 8013baa:	e026      	b.n	8013bfa <txrx_process_char+0x232>
	case 4:
		frm.cmd = c;
 8013bac:	4a17      	ldr	r2, [pc, #92]	; (8013c0c <txrx_process_char+0x244>)
 8013bae:	7bfb      	ldrb	r3, [r7, #15]
 8013bb0:	7113      	strb	r3, [r2, #4]
		frm.state = 5;
 8013bb2:	4a16      	ldr	r2, [pc, #88]	; (8013c0c <txrx_process_char+0x244>)
 8013bb4:	7813      	ldrb	r3, [r2, #0]
 8013bb6:	2105      	movs	r1, #5
 8013bb8:	f361 0347 	bfi	r3, r1, #1, #7
 8013bbc:	7013      	strb	r3, [r2, #0]
		break;
 8013bbe:	e01c      	b.n	8013bfa <txrx_process_char+0x232>
	case 5:
		if (frm.pidx >= MAX_DATA_LEN) {
 8013bc0:	4b12      	ldr	r3, [pc, #72]	; (8013c0c <txrx_process_char+0x244>)
 8013bc2:	795b      	ldrb	r3, [r3, #5]
 8013bc4:	2b1f      	cmp	r3, #31
 8013bc6:	d90a      	bls.n	8013bde <txrx_process_char+0x216>
			frm.state = 0;
 8013bc8:	4a10      	ldr	r2, [pc, #64]	; (8013c0c <txrx_process_char+0x244>)
 8013bca:	7813      	ldrb	r3, [r2, #0]
 8013bcc:	f36f 0347 	bfc	r3, #1, #7
 8013bd0:	7013      	strb	r3, [r2, #0]
			frm.escape = 0;
 8013bd2:	4a0e      	ldr	r2, [pc, #56]	; (8013c0c <txrx_process_char+0x244>)
 8013bd4:	7813      	ldrb	r3, [r2, #0]
 8013bd6:	f36f 0300 	bfc	r3, #0, #1
 8013bda:	7013      	strb	r3, [r2, #0]
			break;
 8013bdc:	e00d      	b.n	8013bfa <txrx_process_char+0x232>
		}
		frm.param[frm.pidx] = c;
 8013bde:	4b0b      	ldr	r3, [pc, #44]	; (8013c0c <txrx_process_char+0x244>)
 8013be0:	795b      	ldrb	r3, [r3, #5]
 8013be2:	461a      	mov	r2, r3
 8013be4:	4b09      	ldr	r3, [pc, #36]	; (8013c0c <txrx_process_char+0x244>)
 8013be6:	4413      	add	r3, r2
 8013be8:	7bfa      	ldrb	r2, [r7, #15]
 8013bea:	719a      	strb	r2, [r3, #6]
		frm.pidx ++;
 8013bec:	4b07      	ldr	r3, [pc, #28]	; (8013c0c <txrx_process_char+0x244>)
 8013bee:	795b      	ldrb	r3, [r3, #5]
 8013bf0:	3301      	adds	r3, #1
 8013bf2:	b2da      	uxtb	r2, r3
 8013bf4:	4b05      	ldr	r3, [pc, #20]	; (8013c0c <txrx_process_char+0x244>)
 8013bf6:	715a      	strb	r2, [r3, #5]
		break;
 8013bf8:	bf00      	nop
	}
        frm.escape = 0;
 8013bfa:	4a04      	ldr	r2, [pc, #16]	; (8013c0c <txrx_process_char+0x244>)
 8013bfc:	7813      	ldrb	r3, [r2, #0]
 8013bfe:	f36f 0300 	bfc	r3, #0, #1
 8013c02:	7013      	strb	r3, [r2, #0]
}
 8013c04:	372c      	adds	r7, #44	; 0x2c
 8013c06:	46bd      	mov	sp, r7
 8013c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013c0a:	bf00      	nop
 8013c0c:	20005290 	.word	0x20005290
 8013c10:	20005296 	.word	0x20005296

08013c14 <param_set_pwm>:



// ---------------------------------------------------------------------------------
static void param_set_pwm(struct param *p, int32_t v) // XXX to be moved away
{
 8013c14:	b580      	push	{r7, lr}
 8013c16:	b082      	sub	sp, #8
 8013c18:	af00      	add	r7, sp, #0
 8013c1a:	6078      	str	r0, [r7, #4]
 8013c1c:	6039      	str	r1, [r7, #0]
        set_pwm_freq(v);
 8013c1e:	6838      	ldr	r0, [r7, #0]
 8013c20:	f000 fbc0 	bl	80143a4 <set_pwm_freq>
}
 8013c24:	bf00      	nop
 8013c26:	3708      	adds	r7, #8
 8013c28:	46bd      	mov	sp, r7
 8013c2a:	bd80      	pop	{r7, pc}

08013c2c <param_get_numtrains>:
int32_t (*getter)(struct param *);
	void (*setter)(struct param *, int32_t);
*/

static int32_t param_get_numtrains(param_t *p)
{
 8013c2c:	b480      	push	{r7}
 8013c2e:	b083      	sub	sp, #12
 8013c30:	af00      	add	r7, sp, #0
 8013c32:	6078      	str	r0, [r7, #4]
	return NUM_TRAINS;
 8013c34:	2301      	movs	r3, #1
}
 8013c36:	4618      	mov	r0, r3
 8013c38:	370c      	adds	r7, #12
 8013c3a:	46bd      	mov	sp, r7
 8013c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c40:	4770      	bx	lr

08013c42 <param_get_numcantons>:

static int32_t param_get_numcantons(param_t *p)
{
 8013c42:	b480      	push	{r7}
 8013c44:	b083      	sub	sp, #12
 8013c46:	af00      	add	r7, sp, #0
 8013c48:	6078      	str	r0, [r7, #4]
	return NUM_CANTONS;
 8013c4a:	2306      	movs	r3, #6
}
 8013c4c:	4618      	mov	r0, r3
 8013c4e:	370c      	adds	r7, #12
 8013c50:	46bd      	mov	sp, r7
 8013c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c56:	4770      	bx	lr

08013c58 <process_frame_cmd>:




static uint8_t process_frame_cmd(uint8_t sel, uint8_t num,  uint8_t cmd, uint8_t *param, int plen, uint8_t *rbuf, int rbuflen, int *prlen)
{
 8013c58:	b580      	push	{r7, lr}
 8013c5a:	b092      	sub	sp, #72	; 0x48
 8013c5c:	af04      	add	r7, sp, #16
 8013c5e:	603b      	str	r3, [r7, #0]
 8013c60:	4603      	mov	r3, r0
 8013c62:	71fb      	strb	r3, [r7, #7]
 8013c64:	460b      	mov	r3, r1
 8013c66:	71bb      	strb	r3, [r7, #6]
 8013c68:	4613      	mov	r3, r2
 8013c6a:	717b      	strb	r3, [r7, #5]
    //HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
	int16_t s;
	*prlen = 0;
 8013c6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013c6e:	2200      	movs	r2, #0
 8013c70:	601a      	str	r2, [r3, #0]
	int32_t v,d,min,max;
	int rc;

	switch(sel) {
 8013c72:	79fb      	ldrb	r3, [r7, #7]
 8013c74:	2b47      	cmp	r3, #71	; 0x47
 8013c76:	d023      	beq.n	8013cc0 <process_frame_cmd+0x68>
 8013c78:	2b54      	cmp	r3, #84	; 0x54
 8013c7a:	f000 80d7 	beq.w	8013e2c <process_frame_cmd+0x1d4>
 8013c7e:	2b41      	cmp	r3, #65	; 0x41
 8013c80:	f040 81cc 	bne.w	801401c <process_frame_cmd+0x3c4>
	case 'A':
		switch (cmd) {
 8013c84:	797b      	ldrb	r3, [r7, #5]
 8013c86:	2b57      	cmp	r3, #87	; 0x57
 8013c88:	d013      	beq.n	8013cb2 <process_frame_cmd+0x5a>
 8013c8a:	2b73      	cmp	r3, #115	; 0x73
 8013c8c:	d009      	beq.n	8013ca2 <process_frame_cmd+0x4a>
 8013c8e:	2b53      	cmp	r3, #83	; 0x53
 8013c90:	d000      	beq.n	8013c94 <process_frame_cmd+0x3c>
			break;
		case 'W':
			rc = turnout_test(num);
			break;
		}
		break;
 8013c92:	e1d3      	b.n	801403c <process_frame_cmd+0x3e4>
			rc = turnout_cmd(num, 1);
 8013c94:	79bb      	ldrb	r3, [r7, #6]
 8013c96:	2101      	movs	r1, #1
 8013c98:	4618      	mov	r0, r3
 8013c9a:	f7ff fcc5 	bl	8013628 <turnout_cmd>
 8013c9e:	6378      	str	r0, [r7, #52]	; 0x34
			break;
 8013ca0:	e00d      	b.n	8013cbe <process_frame_cmd+0x66>
			rc = turnout_cmd(num, -1);
 8013ca2:	79bb      	ldrb	r3, [r7, #6]
 8013ca4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8013ca8:	4618      	mov	r0, r3
 8013caa:	f7ff fcbd 	bl	8013628 <turnout_cmd>
 8013cae:	6378      	str	r0, [r7, #52]	; 0x34
			break;
 8013cb0:	e005      	b.n	8013cbe <process_frame_cmd+0x66>
			rc = turnout_test(num);
 8013cb2:	79bb      	ldrb	r3, [r7, #6]
 8013cb4:	4618      	mov	r0, r3
 8013cb6:	f7ff fd05 	bl	80136c4 <turnout_test>
 8013cba:	6378      	str	r0, [r7, #52]	; 0x34
			break;
 8013cbc:	bf00      	nop
		break;
 8013cbe:	e1bd      	b.n	801403c <process_frame_cmd+0x3e4>
	case 'G':
		switch (cmd) {
 8013cc0:	797b      	ldrb	r3, [r7, #5]
 8013cc2:	3b43      	subs	r3, #67	; 0x43
 8013cc4:	2b2d      	cmp	r3, #45	; 0x2d
 8013cc6:	f200 80af 	bhi.w	8013e28 <process_frame_cmd+0x1d0>
 8013cca:	a201      	add	r2, pc, #4	; (adr r2, 8013cd0 <process_frame_cmd+0x78>)
 8013ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013cd0:	08013d89 	.word	0x08013d89
 8013cd4:	08013e29 	.word	0x08013e29
 8013cd8:	08013e29 	.word	0x08013e29
 8013cdc:	08013e29 	.word	0x08013e29
 8013ce0:	08013e29 	.word	0x08013e29
 8013ce4:	08013e29 	.word	0x08013e29
 8013ce8:	08013e29 	.word	0x08013e29
 8013cec:	08013e29 	.word	0x08013e29
 8013cf0:	08013d9b 	.word	0x08013d9b
 8013cf4:	08013e29 	.word	0x08013e29
 8013cf8:	08013e29 	.word	0x08013e29
 8013cfc:	08013e29 	.word	0x08013e29
 8013d00:	08013e29 	.word	0x08013e29
 8013d04:	08013e03 	.word	0x08013e03
 8013d08:	08013e29 	.word	0x08013e29
 8013d0c:	08013e29 	.word	0x08013e29
 8013d10:	08013d93 	.word	0x08013d93
 8013d14:	08013e29 	.word	0x08013e29
 8013d18:	08013e29 	.word	0x08013e29
 8013d1c:	08013e29 	.word	0x08013e29
 8013d20:	08013e29 	.word	0x08013e29
 8013d24:	08013e29 	.word	0x08013e29
 8013d28:	08013e29 	.word	0x08013e29
 8013d2c:	08013e29 	.word	0x08013e29
 8013d30:	08013e29 	.word	0x08013e29
 8013d34:	08013e29 	.word	0x08013e29
 8013d38:	08013e29 	.word	0x08013e29
 8013d3c:	08013e29 	.word	0x08013e29
 8013d40:	08013e29 	.word	0x08013e29
 8013d44:	08013e29 	.word	0x08013e29
 8013d48:	08013e29 	.word	0x08013e29
 8013d4c:	08013e29 	.word	0x08013e29
 8013d50:	08013e29 	.word	0x08013e29
 8013d54:	08013e29 	.word	0x08013e29
 8013d58:	08013e29 	.word	0x08013e29
 8013d5c:	08013e29 	.word	0x08013e29
 8013d60:	08013e29 	.word	0x08013e29
 8013d64:	08013e29 	.word	0x08013e29
 8013d68:	08013e29 	.word	0x08013e29
 8013d6c:	08013e29 	.word	0x08013e29
 8013d70:	08013e29 	.word	0x08013e29
 8013d74:	08013e29 	.word	0x08013e29
 8013d78:	08013e29 	.word	0x08013e29
 8013d7c:	08013e29 	.word	0x08013e29
 8013d80:	08013e29 	.word	0x08013e29
 8013d84:	08013da3 	.word	0x08013da3
		case 'C':
			cli_frame_mode = 0;
 8013d88:	4baf      	ldr	r3, [pc, #700]	; (8014048 <process_frame_cmd+0x3f0>)
 8013d8a:	2200      	movs	r2, #0
 8013d8c:	701a      	strb	r2, [r3, #0]
			return 0;
 8013d8e:	2300      	movs	r3, #0
 8013d90:	e155      	b.n	801403e <process_frame_cmd+0x3e6>
			break;
		case 'S':
			train_stop_all();
 8013d92:	f7ff fa15 	bl	80131c0 <train_stop_all>
			return 0;
 8013d96:	2300      	movs	r3, #0
 8013d98:	e151      	b.n	801403e <process_frame_cmd+0x3e6>
			break;
		case 'K':
			calibrate_bemf();
 8013d9a:	f7ff fa55 	bl	8013248 <calibrate_bemf>
			return 0;
 8013d9e:	2300      	movs	r3, #0
 8013da0:	e14d      	b.n	801403e <process_frame_cmd+0x3e6>
			break;
		case 'p':
			rc = param_get_value(glob_params, NULL, (char *)param, &v, &d, &min, &max);
 8013da2:	f107 0220 	add.w	r2, r7, #32
 8013da6:	f107 0314 	add.w	r3, r7, #20
 8013daa:	9302      	str	r3, [sp, #8]
 8013dac:	f107 0318 	add.w	r3, r7, #24
 8013db0:	9301      	str	r3, [sp, #4]
 8013db2:	f107 031c 	add.w	r3, r7, #28
 8013db6:	9300      	str	r3, [sp, #0]
 8013db8:	4613      	mov	r3, r2
 8013dba:	683a      	ldr	r2, [r7, #0]
 8013dbc:	2100      	movs	r1, #0
 8013dbe:	48a3      	ldr	r0, [pc, #652]	; (801404c <process_frame_cmd+0x3f4>)
 8013dc0:	f7fe f953 	bl	801206a <param_get_value>
 8013dc4:	6378      	str	r0, [r7, #52]	; 0x34
			memcpy(rbuf, &v,   sizeof(int32_t)); rbuf += sizeof(int32_t);
 8013dc6:	6a3a      	ldr	r2, [r7, #32]
 8013dc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013dca:	601a      	str	r2, [r3, #0]
 8013dcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013dce:	3304      	adds	r3, #4
 8013dd0:	647b      	str	r3, [r7, #68]	; 0x44
			memcpy(rbuf, &d,   sizeof(int32_t)); rbuf += sizeof(int32_t);
 8013dd2:	69fa      	ldr	r2, [r7, #28]
 8013dd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013dd6:	601a      	str	r2, [r3, #0]
 8013dd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013dda:	3304      	adds	r3, #4
 8013ddc:	647b      	str	r3, [r7, #68]	; 0x44
			memcpy(rbuf, &min, sizeof(int32_t)); rbuf += sizeof(int32_t);
 8013dde:	69ba      	ldr	r2, [r7, #24]
 8013de0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013de2:	601a      	str	r2, [r3, #0]
 8013de4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013de6:	3304      	adds	r3, #4
 8013de8:	647b      	str	r3, [r7, #68]	; 0x44
			memcpy(rbuf, &max, sizeof(int32_t)); rbuf += sizeof(int32_t);
 8013dea:	697a      	ldr	r2, [r7, #20]
 8013dec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013dee:	601a      	str	r2, [r3, #0]
 8013df0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013df2:	3304      	adds	r3, #4
 8013df4:	647b      	str	r3, [r7, #68]	; 0x44
			*prlen = 4*sizeof(int32_t);
 8013df6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013df8:	2210      	movs	r2, #16
 8013dfa:	601a      	str	r2, [r3, #0]
			return rc;
 8013dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013dfe:	b2db      	uxtb	r3, r3
 8013e00:	e11d      	b.n	801403e <process_frame_cmd+0x3e6>
		case 'P': {
			if (plen < 4+1) return 1;
 8013e02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013e04:	2b04      	cmp	r3, #4
 8013e06:	dc01      	bgt.n	8013e0c <process_frame_cmd+0x1b4>
 8013e08:	2301      	movs	r3, #1
 8013e0a:	e118      	b.n	801403e <process_frame_cmd+0x3e6>
			int32_t v;
			memcpy(&v, param, sizeof(int32_t));
 8013e0c:	683b      	ldr	r3, [r7, #0]
 8013e0e:	681b      	ldr	r3, [r3, #0]
 8013e10:	613b      	str	r3, [r7, #16]
			int rc = param_set_value(glob_params, NULL, (char *)(param+sizeof(int32_t)), v);
 8013e12:	683b      	ldr	r3, [r7, #0]
 8013e14:	1d1a      	adds	r2, r3, #4
 8013e16:	693b      	ldr	r3, [r7, #16]
 8013e18:	2100      	movs	r1, #0
 8013e1a:	488c      	ldr	r0, [pc, #560]	; (801404c <process_frame_cmd+0x3f4>)
 8013e1c:	f7fe f997 	bl	801214e <param_set_value>
 8013e20:	62b8      	str	r0, [r7, #40]	; 0x28
			return rc;
 8013e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e24:	b2db      	uxtb	r3, r3
 8013e26:	e10a      	b.n	801403e <process_frame_cmd+0x3e6>
		}
		default:
			return 3;
 8013e28:	2303      	movs	r3, #3
 8013e2a:	e108      	b.n	801403e <process_frame_cmd+0x3e6>
		}
		break;
	case 'T':
		//if (num == '0') num=0; // XXX hook for test
		//if (num != 0) return 4; // for now
		switch (cmd) {
 8013e2c:	797b      	ldrb	r3, [r7, #5]
 8013e2e:	3b41      	subs	r3, #65	; 0x41
 8013e30:	2b39      	cmp	r3, #57	; 0x39
 8013e32:	f200 80f0 	bhi.w	8014016 <process_frame_cmd+0x3be>
 8013e36:	a201      	add	r2, pc, #4	; (adr r2, 8013e3c <process_frame_cmd+0x1e4>)
 8013e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e3c:	08013f49 	.word	0x08013f49
 8013e40:	08014017 	.word	0x08014017
 8013e44:	08014017 	.word	0x08014017
 8013e48:	08014017 	.word	0x08014017
 8013e4c:	08014017 	.word	0x08014017
 8013e50:	08014017 	.word	0x08014017
 8013e54:	08014017 	.word	0x08014017
 8013e58:	08014017 	.word	0x08014017
 8013e5c:	08014017 	.word	0x08014017
 8013e60:	08014017 	.word	0x08014017
 8013e64:	08014017 	.word	0x08014017
 8013e68:	08014017 	.word	0x08014017
 8013e6c:	08014017 	.word	0x08014017
 8013e70:	08014017 	.word	0x08014017
 8013e74:	08014017 	.word	0x08014017
 8013e78:	08013fdb 	.word	0x08013fdb
 8013e7c:	08014017 	.word	0x08014017
 8013e80:	08014017 	.word	0x08014017
 8013e84:	08014017 	.word	0x08014017
 8013e88:	08014017 	.word	0x08014017
 8013e8c:	08014017 	.word	0x08014017
 8013e90:	08013f25 	.word	0x08013f25
 8013e94:	08014017 	.word	0x08014017
 8013e98:	08014017 	.word	0x08014017
 8013e9c:	08014017 	.word	0x08014017
 8013ea0:	08014017 	.word	0x08014017
 8013ea4:	08014017 	.word	0x08014017
 8013ea8:	08014017 	.word	0x08014017
 8013eac:	08014017 	.word	0x08014017
 8013eb0:	08014017 	.word	0x08014017
 8013eb4:	08014017 	.word	0x08014017
 8013eb8:	08014017 	.word	0x08014017
 8013ebc:	08013f4f 	.word	0x08013f4f
 8013ec0:	08014017 	.word	0x08014017
 8013ec4:	08014017 	.word	0x08014017
 8013ec8:	08014017 	.word	0x08014017
 8013ecc:	08014017 	.word	0x08014017
 8013ed0:	08014017 	.word	0x08014017
 8013ed4:	08014017 	.word	0x08014017
 8013ed8:	08014017 	.word	0x08014017
 8013edc:	08014017 	.word	0x08014017
 8013ee0:	08014017 	.word	0x08014017
 8013ee4:	08014017 	.word	0x08014017
 8013ee8:	08014017 	.word	0x08014017
 8013eec:	08014017 	.word	0x08014017
 8013ef0:	08014017 	.word	0x08014017
 8013ef4:	08014017 	.word	0x08014017
 8013ef8:	08013f65 	.word	0x08013f65
 8013efc:	08014017 	.word	0x08014017
 8013f00:	08014017 	.word	0x08014017
 8013f04:	08014017 	.word	0x08014017
 8013f08:	08014017 	.word	0x08014017
 8013f0c:	08014017 	.word	0x08014017
 8013f10:	08014017 	.word	0x08014017
 8013f14:	08014017 	.word	0x08014017
 8013f18:	08014017 	.word	0x08014017
 8013f1c:	08014017 	.word	0x08014017
 8013f20:	08013f55 	.word	0x08013f55
		case 'V':
			if (plen !=2) return 1;
 8013f24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013f26:	2b02      	cmp	r3, #2
 8013f28:	d001      	beq.n	8013f2e <process_frame_cmd+0x2d6>
 8013f2a:	2301      	movs	r3, #1
 8013f2c:	e087      	b.n	801403e <process_frame_cmd+0x3e6>
			memcpy(&s, param, sizeof(s));
 8013f2e:	683b      	ldr	r3, [r7, #0]
 8013f30:	881b      	ldrh	r3, [r3, #0]
 8013f32:	b29b      	uxth	r3, r3
 8013f34:	84fb      	strh	r3, [r7, #38]	; 0x26
		    train_set_target_speed(num, s);
 8013f36:	79bb      	ldrb	r3, [r7, #6]
 8013f38:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8013f3c:	4611      	mov	r1, r2
 8013f3e:	4618      	mov	r0, r3
 8013f40:	f7ff f91a 	bl	8013178 <train_set_target_speed>
			return 0;
 8013f44:	2300      	movs	r3, #0
 8013f46:	e07a      	b.n	801403e <process_frame_cmd+0x3e6>
		case 'A':
			task_auto_start_auto();
 8013f48:	f000 fa10 	bl	801436c <task_auto_start_auto>
			break;
 8013f4c:	e065      	b.n	801401a <process_frame_cmd+0x3c2>
		case 'a':
			task_auto_stop_auto();
 8013f4e:	f000 fa1b 	bl	8014388 <task_auto_stop_auto>
			break;
 8013f52:	e062      	b.n	801401a <process_frame_cmd+0x3c2>
		case 'z':
			rc = train_reset_pos_estimate(num);
 8013f54:	79bb      	ldrb	r3, [r7, #6]
 8013f56:	4618      	mov	r0, r3
 8013f58:	f7fe fcc4 	bl	80128e4 <train_reset_pos_estimate>
 8013f5c:	6378      	str	r0, [r7, #52]	; 0x34
			return rc;
 8013f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f60:	b2db      	uxtb	r3, r3
 8013f62:	e06c      	b.n	801403e <process_frame_cmd+0x3e6>
			break;
		case 'p': {
			const train_config_t *tcnf = get_train_cnf(num);
 8013f64:	79bb      	ldrb	r3, [r7, #6]
 8013f66:	4618      	mov	r0, r3
 8013f68:	f7fe faba 	bl	80124e0 <get_train_cnf>
 8013f6c:	6338      	str	r0, [r7, #48]	; 0x30
			if (tcnf) {
 8013f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d02d      	beq.n	8013fd0 <process_frame_cmd+0x378>
				rc = param_get_value(train_params, (void *)tcnf, (char *)param, &v, &d, &min, &max);
 8013f74:	f107 0220 	add.w	r2, r7, #32
 8013f78:	f107 0314 	add.w	r3, r7, #20
 8013f7c:	9302      	str	r3, [sp, #8]
 8013f7e:	f107 0318 	add.w	r3, r7, #24
 8013f82:	9301      	str	r3, [sp, #4]
 8013f84:	f107 031c 	add.w	r3, r7, #28
 8013f88:	9300      	str	r3, [sp, #0]
 8013f8a:	4613      	mov	r3, r2
 8013f8c:	683a      	ldr	r2, [r7, #0]
 8013f8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013f90:	482f      	ldr	r0, [pc, #188]	; (8014050 <process_frame_cmd+0x3f8>)
 8013f92:	f7fe f86a 	bl	801206a <param_get_value>
 8013f96:	6378      	str	r0, [r7, #52]	; 0x34
				memcpy(rbuf, &v,   sizeof(int32_t)); rbuf += sizeof(int32_t);
 8013f98:	6a3a      	ldr	r2, [r7, #32]
 8013f9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013f9c:	601a      	str	r2, [r3, #0]
 8013f9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013fa0:	3304      	adds	r3, #4
 8013fa2:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(rbuf, &d,   sizeof(int32_t)); rbuf += sizeof(int32_t);
 8013fa4:	69fa      	ldr	r2, [r7, #28]
 8013fa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013fa8:	601a      	str	r2, [r3, #0]
 8013faa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013fac:	3304      	adds	r3, #4
 8013fae:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(rbuf, &min, sizeof(int32_t)); rbuf += sizeof(int32_t);
 8013fb0:	69ba      	ldr	r2, [r7, #24]
 8013fb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013fb4:	601a      	str	r2, [r3, #0]
 8013fb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013fb8:	3304      	adds	r3, #4
 8013fba:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(rbuf, &max, sizeof(int32_t)); rbuf += sizeof(int32_t);
 8013fbc:	697a      	ldr	r2, [r7, #20]
 8013fbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013fc0:	601a      	str	r2, [r3, #0]
 8013fc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013fc4:	3304      	adds	r3, #4
 8013fc6:	647b      	str	r3, [r7, #68]	; 0x44
				*prlen = 4*sizeof(int32_t);
 8013fc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013fca:	2210      	movs	r2, #16
 8013fcc:	601a      	str	r2, [r3, #0]
 8013fce:	e001      	b.n	8013fd4 <process_frame_cmd+0x37c>
			} else {
				rc = 3;
 8013fd0:	2303      	movs	r3, #3
 8013fd2:	637b      	str	r3, [r7, #52]	; 0x34
			}
			return rc;
 8013fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013fd6:	b2db      	uxtb	r3, r3
 8013fd8:	e031      	b.n	801403e <process_frame_cmd+0x3e6>
		}

		case 'P': {
			if (plen < 4+1) return 1;
 8013fda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013fdc:	2b04      	cmp	r3, #4
 8013fde:	dc01      	bgt.n	8013fe4 <process_frame_cmd+0x38c>
 8013fe0:	2301      	movs	r3, #1
 8013fe2:	e02c      	b.n	801403e <process_frame_cmd+0x3e6>
			const train_config_t *tcnf = get_train_cnf(num);
 8013fe4:	79bb      	ldrb	r3, [r7, #6]
 8013fe6:	4618      	mov	r0, r3
 8013fe8:	f7fe fa7a 	bl	80124e0 <get_train_cnf>
 8013fec:	62f8      	str	r0, [r7, #44]	; 0x2c
			if (tcnf) {
 8013fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	d00b      	beq.n	801400c <process_frame_cmd+0x3b4>
				int32_t v;
				memcpy(&v, param, sizeof(int32_t));
 8013ff4:	683b      	ldr	r3, [r7, #0]
 8013ff6:	681b      	ldr	r3, [r3, #0]
 8013ff8:	60fb      	str	r3, [r7, #12]
			    rc = param_set_value(train_params, (void *)tcnf, (char *)(param+sizeof(int32_t)), v);
 8013ffa:	683b      	ldr	r3, [r7, #0]
 8013ffc:	1d1a      	adds	r2, r3, #4
 8013ffe:	68fb      	ldr	r3, [r7, #12]
 8014000:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014002:	4813      	ldr	r0, [pc, #76]	; (8014050 <process_frame_cmd+0x3f8>)
 8014004:	f7fe f8a3 	bl	801214e <param_set_value>
 8014008:	6378      	str	r0, [r7, #52]	; 0x34
 801400a:	e001      	b.n	8014010 <process_frame_cmd+0x3b8>
			} else {
				rc = 33;
 801400c:	2321      	movs	r3, #33	; 0x21
 801400e:	637b      	str	r3, [r7, #52]	; 0x34
			}
			return rc;
 8014010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014012:	b2db      	uxtb	r3, r3
 8014014:	e013      	b.n	801403e <process_frame_cmd+0x3e6>
		}

		default:
			return 33;
 8014016:	2321      	movs	r3, #33	; 0x21
 8014018:	e011      	b.n	801403e <process_frame_cmd+0x3e6>
		}
		break;
 801401a:	e00f      	b.n	801403c <process_frame_cmd+0x3e4>
	default:
		rbuf[0]=sel;
 801401c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801401e:	79fa      	ldrb	r2, [r7, #7]
 8014020:	701a      	strb	r2, [r3, #0]
		rbuf[1]=num;
 8014022:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014024:	3301      	adds	r3, #1
 8014026:	79ba      	ldrb	r2, [r7, #6]
 8014028:	701a      	strb	r2, [r3, #0]
		rbuf[2]=cmd;
 801402a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801402c:	3302      	adds	r3, #2
 801402e:	797a      	ldrb	r2, [r7, #5]
 8014030:	701a      	strb	r2, [r3, #0]
		*prlen = 3;
 8014032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014034:	2203      	movs	r2, #3
 8014036:	601a      	str	r2, [r3, #0]
		return 5;
 8014038:	2305      	movs	r3, #5
 801403a:	e000      	b.n	801403e <process_frame_cmd+0x3e6>
		break;
	}
	return 0;
 801403c:	2300      	movs	r3, #0
}
 801403e:	4618      	mov	r0, r3
 8014040:	3738      	adds	r7, #56	; 0x38
 8014042:	46bd      	mov	sp, r7
 8014044:	bd80      	pop	{r7, pc}
 8014046:	bf00      	nop
 8014048:	20000542 	.word	0x20000542
 801404c:	08017b64 	.word	0x08017b64
 8014050:	08017924 	.word	0x08017924

08014054 <trainctl_notif>:

static int num_trainctl_notif = 0;

void trainctl_notif(uint8_t sel, uint8_t num, uint8_t cmd, uint8_t *dta, int dtalen)
{
 8014054:	b580      	push	{r7, lr}
 8014056:	b084      	sub	sp, #16
 8014058:	af02      	add	r7, sp, #8
 801405a:	603b      	str	r3, [r7, #0]
 801405c:	4603      	mov	r3, r0
 801405e:	71fb      	strb	r3, [r7, #7]
 8014060:	460b      	mov	r3, r1
 8014062:	71bb      	strb	r3, [r7, #6]
 8014064:	4613      	mov	r3, r2
 8014066:	717b      	strb	r3, [r7, #5]
	num_trainctl_notif++;
 8014068:	4b0a      	ldr	r3, [pc, #40]	; (8014094 <trainctl_notif+0x40>)
 801406a:	681b      	ldr	r3, [r3, #0]
 801406c:	3301      	adds	r3, #1
 801406e:	4a09      	ldr	r2, [pc, #36]	; (8014094 <trainctl_notif+0x40>)
 8014070:	6013      	str	r3, [r2, #0]
	if (cli_frame_mode) {
 8014072:	4b09      	ldr	r3, [pc, #36]	; (8014098 <trainctl_notif+0x44>)
 8014074:	781b      	ldrb	r3, [r3, #0]
 8014076:	2b00      	cmp	r3, #0
 8014078:	d007      	beq.n	801408a <trainctl_notif+0x36>
		frame_send_notif(sel, num, cmd, dta, dtalen);
 801407a:	797a      	ldrb	r2, [r7, #5]
 801407c:	79b9      	ldrb	r1, [r7, #6]
 801407e:	79f8      	ldrb	r0, [r7, #7]
 8014080:	693b      	ldr	r3, [r7, #16]
 8014082:	9300      	str	r3, [sp, #0]
 8014084:	683b      	ldr	r3, [r7, #0]
 8014086:	f000 f891 	bl	80141ac <frame_send_notif>
	}
}
 801408a:	bf00      	nop
 801408c:	3708      	adds	r7, #8
 801408e:	46bd      	mov	sp, r7
 8014090:	bd80      	pop	{r7, pc}
 8014092:	bf00      	nop
 8014094:	200052b8 	.word	0x200052b8
 8014098:	20000542 	.word	0x20000542

0801409c <trainctl_notif2>:

void trainctl_notif2(uint8_t sel, uint8_t num, uint8_t cmd, char *msg, int32_t v1, int32_t v2, int32_t v3)
{
 801409c:	b580      	push	{r7, lr}
 801409e:	b086      	sub	sp, #24
 80140a0:	af00      	add	r7, sp, #0
 80140a2:	603b      	str	r3, [r7, #0]
 80140a4:	4603      	mov	r3, r0
 80140a6:	71fb      	strb	r3, [r7, #7]
 80140a8:	460b      	mov	r3, r1
 80140aa:	71bb      	strb	r3, [r7, #6]
 80140ac:	4613      	mov	r3, r2
 80140ae:	717b      	strb	r3, [r7, #5]
	static frame_msg_t m;
	char *p;
	int i=0;
 80140b0:	2300      	movs	r3, #0
 80140b2:	617b      	str	r3, [r7, #20]
	m.frm[i++] = '|';
 80140b4:	697b      	ldr	r3, [r7, #20]
 80140b6:	1c5a      	adds	r2, r3, #1
 80140b8:	617a      	str	r2, [r7, #20]
 80140ba:	4a3a      	ldr	r2, [pc, #232]	; (80141a4 <trainctl_notif2+0x108>)
 80140bc:	4413      	add	r3, r2
 80140be:	227c      	movs	r2, #124	; 0x7c
 80140c0:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = '_';
 80140c2:	697b      	ldr	r3, [r7, #20]
 80140c4:	1c5a      	adds	r2, r3, #1
 80140c6:	617a      	str	r2, [r7, #20]
 80140c8:	4a36      	ldr	r2, [pc, #216]	; (80141a4 <trainctl_notif2+0x108>)
 80140ca:	4413      	add	r3, r2
 80140cc:	225f      	movs	r2, #95	; 0x5f
 80140ce:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = 'N';
 80140d0:	697b      	ldr	r3, [r7, #20]
 80140d2:	1c5a      	adds	r2, r3, #1
 80140d4:	617a      	str	r2, [r7, #20]
 80140d6:	4a33      	ldr	r2, [pc, #204]	; (80141a4 <trainctl_notif2+0x108>)
 80140d8:	4413      	add	r3, r2
 80140da:	224e      	movs	r2, #78	; 0x4e
 80140dc:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = sel;
 80140de:	697b      	ldr	r3, [r7, #20]
 80140e0:	1c5a      	adds	r2, r3, #1
 80140e2:	617a      	str	r2, [r7, #20]
 80140e4:	4a2f      	ldr	r2, [pc, #188]	; (80141a4 <trainctl_notif2+0x108>)
 80140e6:	4413      	add	r3, r2
 80140e8:	79fa      	ldrb	r2, [r7, #7]
 80140ea:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = num;
 80140ec:	697b      	ldr	r3, [r7, #20]
 80140ee:	1c5a      	adds	r2, r3, #1
 80140f0:	617a      	str	r2, [r7, #20]
 80140f2:	4a2c      	ldr	r2, [pc, #176]	; (80141a4 <trainctl_notif2+0x108>)
 80140f4:	4413      	add	r3, r2
 80140f6:	79ba      	ldrb	r2, [r7, #6]
 80140f8:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = cmd;
 80140fa:	697b      	ldr	r3, [r7, #20]
 80140fc:	1c5a      	adds	r2, r3, #1
 80140fe:	617a      	str	r2, [r7, #20]
 8014100:	4a28      	ldr	r2, [pc, #160]	; (80141a4 <trainctl_notif2+0x108>)
 8014102:	4413      	add	r3, r2
 8014104:	797a      	ldrb	r2, [r7, #5]
 8014106:	709a      	strb	r2, [r3, #2]
	i += strlen(p);
	m.frm[i++]= '/';
	p = itoa(v2, (char *)m.frm+i, 10);
	i += strlen(p);
#else
	memcpy(m.frm+i, &v1, sizeof(int32_t));
 8014108:	697b      	ldr	r3, [r7, #20]
 801410a:	4a27      	ldr	r2, [pc, #156]	; (80141a8 <trainctl_notif2+0x10c>)
 801410c:	4413      	add	r3, r2
 801410e:	6a3a      	ldr	r2, [r7, #32]
 8014110:	601a      	str	r2, [r3, #0]
	i += sizeof(int32_t);
 8014112:	697b      	ldr	r3, [r7, #20]
 8014114:	3304      	adds	r3, #4
 8014116:	617b      	str	r3, [r7, #20]
	memcpy(m.frm+i, &v2, sizeof(int32_t));
 8014118:	697b      	ldr	r3, [r7, #20]
 801411a:	4a23      	ldr	r2, [pc, #140]	; (80141a8 <trainctl_notif2+0x10c>)
 801411c:	4413      	add	r3, r2
 801411e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014120:	601a      	str	r2, [r3, #0]
	i += sizeof(int32_t);
 8014122:	697b      	ldr	r3, [r7, #20]
 8014124:	3304      	adds	r3, #4
 8014126:	617b      	str	r3, [r7, #20]
	memcpy(m.frm+i, &v3, sizeof(int32_t));
 8014128:	697b      	ldr	r3, [r7, #20]
 801412a:	4a1f      	ldr	r2, [pc, #124]	; (80141a8 <trainctl_notif2+0x10c>)
 801412c:	4413      	add	r3, r2
 801412e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014130:	601a      	str	r2, [r3, #0]
	i += sizeof(int32_t);
 8014132:	697b      	ldr	r3, [r7, #20]
 8014134:	3304      	adds	r3, #4
 8014136:	617b      	str	r3, [r7, #20]
 	p = strncpy((char *)m.frm+i, msg, 10);
 8014138:	697b      	ldr	r3, [r7, #20]
 801413a:	4a1b      	ldr	r2, [pc, #108]	; (80141a8 <trainctl_notif2+0x10c>)
 801413c:	4413      	add	r3, r2
 801413e:	220a      	movs	r2, #10
 8014140:	6839      	ldr	r1, [r7, #0]
 8014142:	4618      	mov	r0, r3
 8014144:	f001 f80a 	bl	801515c <strncpy>
 8014148:	6138      	str	r0, [r7, #16]
	m.frm[i+10]='\0';
 801414a:	697b      	ldr	r3, [r7, #20]
 801414c:	330a      	adds	r3, #10
 801414e:	4a15      	ldr	r2, [pc, #84]	; (80141a4 <trainctl_notif2+0x108>)
 8014150:	4413      	add	r3, r2
 8014152:	2200      	movs	r2, #0
 8014154:	709a      	strb	r2, [r3, #2]
	i += strlen(p);
 8014156:	6938      	ldr	r0, [r7, #16]
 8014158:	f7ec f844 	bl	80001e4 <strlen>
 801415c:	4602      	mov	r2, r0
 801415e:	697b      	ldr	r3, [r7, #20]
 8014160:	4413      	add	r3, r2
 8014162:	617b      	str	r3, [r7, #20]
#endif
	m.frm[i++]= '\0';
 8014164:	697b      	ldr	r3, [r7, #20]
 8014166:	1c5a      	adds	r2, r3, #1
 8014168:	617a      	str	r2, [r7, #20]
 801416a:	4a0e      	ldr	r2, [pc, #56]	; (80141a4 <trainctl_notif2+0x108>)
 801416c:	4413      	add	r3, r2
 801416e:	2200      	movs	r2, #0
 8014170:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = '|';
 8014172:	697b      	ldr	r3, [r7, #20]
 8014174:	1c5a      	adds	r2, r3, #1
 8014176:	617a      	str	r2, [r7, #20]
 8014178:	4a0a      	ldr	r2, [pc, #40]	; (80141a4 <trainctl_notif2+0x108>)
 801417a:	4413      	add	r3, r2
 801417c:	227c      	movs	r2, #124	; 0x7c
 801417e:	709a      	strb	r2, [r3, #2]
	int l = frm_escape(m.frm, i, FRM_MAX_LEN);
 8014180:	221f      	movs	r2, #31
 8014182:	6979      	ldr	r1, [r7, #20]
 8014184:	4808      	ldr	r0, [pc, #32]	; (80141a8 <trainctl_notif2+0x10c>)
 8014186:	f7ff fbfd 	bl	8013984 <frm_escape>
 801418a:	60f8      	str	r0, [r7, #12]
	if (l>0) txframe_send_notif(&m, l);
 801418c:	68fb      	ldr	r3, [r7, #12]
 801418e:	2b00      	cmp	r3, #0
 8014190:	dd03      	ble.n	801419a <trainctl_notif2+0xfe>
 8014192:	68f9      	ldr	r1, [r7, #12]
 8014194:	4803      	ldr	r0, [pc, #12]	; (80141a4 <trainctl_notif2+0x108>)
 8014196:	f7ff fb35 	bl	8013804 <txframe_send_notif>
}
 801419a:	bf00      	nop
 801419c:	3718      	adds	r7, #24
 801419e:	46bd      	mov	sp, r7
 80141a0:	bd80      	pop	{r7, pc}
 80141a2:	bf00      	nop
 80141a4:	200052bc 	.word	0x200052bc
 80141a8:	200052be 	.word	0x200052be

080141ac <frame_send_notif>:


void frame_send_notif(uint8_t sel, uint8_t num, uint8_t cmd, uint8_t *dta, int dtalen)
{
 80141ac:	b580      	push	{r7, lr}
 80141ae:	b084      	sub	sp, #16
 80141b0:	af00      	add	r7, sp, #0
 80141b2:	603b      	str	r3, [r7, #0]
 80141b4:	4603      	mov	r3, r0
 80141b6:	71fb      	strb	r3, [r7, #7]
 80141b8:	460b      	mov	r3, r1
 80141ba:	71bb      	strb	r3, [r7, #6]
 80141bc:	4613      	mov	r3, r2
 80141be:	717b      	strb	r3, [r7, #5]
	static frame_msg_t m;
	if (dtalen>FRM_MAX_LEN-8) dtalen=FRM_MAX_LEN-8;
 80141c0:	69bb      	ldr	r3, [r7, #24]
 80141c2:	2b17      	cmp	r3, #23
 80141c4:	dd01      	ble.n	80141ca <frame_send_notif+0x1e>
 80141c6:	2317      	movs	r3, #23
 80141c8:	61bb      	str	r3, [r7, #24]
	int i=0;
 80141ca:	2300      	movs	r3, #0
 80141cc:	60fb      	str	r3, [r7, #12]
	m.frm[i++] = '|';
 80141ce:	68fb      	ldr	r3, [r7, #12]
 80141d0:	1c5a      	adds	r2, r3, #1
 80141d2:	60fa      	str	r2, [r7, #12]
 80141d4:	4a25      	ldr	r2, [pc, #148]	; (801426c <frame_send_notif+0xc0>)
 80141d6:	4413      	add	r3, r2
 80141d8:	227c      	movs	r2, #124	; 0x7c
 80141da:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = '_';
 80141dc:	68fb      	ldr	r3, [r7, #12]
 80141de:	1c5a      	adds	r2, r3, #1
 80141e0:	60fa      	str	r2, [r7, #12]
 80141e2:	4a22      	ldr	r2, [pc, #136]	; (801426c <frame_send_notif+0xc0>)
 80141e4:	4413      	add	r3, r2
 80141e6:	225f      	movs	r2, #95	; 0x5f
 80141e8:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = 'N';
 80141ea:	68fb      	ldr	r3, [r7, #12]
 80141ec:	1c5a      	adds	r2, r3, #1
 80141ee:	60fa      	str	r2, [r7, #12]
 80141f0:	4a1e      	ldr	r2, [pc, #120]	; (801426c <frame_send_notif+0xc0>)
 80141f2:	4413      	add	r3, r2
 80141f4:	224e      	movs	r2, #78	; 0x4e
 80141f6:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = sel;
 80141f8:	68fb      	ldr	r3, [r7, #12]
 80141fa:	1c5a      	adds	r2, r3, #1
 80141fc:	60fa      	str	r2, [r7, #12]
 80141fe:	4a1b      	ldr	r2, [pc, #108]	; (801426c <frame_send_notif+0xc0>)
 8014200:	4413      	add	r3, r2
 8014202:	79fa      	ldrb	r2, [r7, #7]
 8014204:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = num;
 8014206:	68fb      	ldr	r3, [r7, #12]
 8014208:	1c5a      	adds	r2, r3, #1
 801420a:	60fa      	str	r2, [r7, #12]
 801420c:	4a17      	ldr	r2, [pc, #92]	; (801426c <frame_send_notif+0xc0>)
 801420e:	4413      	add	r3, r2
 8014210:	79ba      	ldrb	r2, [r7, #6]
 8014212:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = cmd;
 8014214:	68fb      	ldr	r3, [r7, #12]
 8014216:	1c5a      	adds	r2, r3, #1
 8014218:	60fa      	str	r2, [r7, #12]
 801421a:	4a14      	ldr	r2, [pc, #80]	; (801426c <frame_send_notif+0xc0>)
 801421c:	4413      	add	r3, r2
 801421e:	797a      	ldrb	r2, [r7, #5]
 8014220:	709a      	strb	r2, [r3, #2]
	memcpy(m.frm+i, dta, dtalen);
 8014222:	68fb      	ldr	r3, [r7, #12]
 8014224:	4a12      	ldr	r2, [pc, #72]	; (8014270 <frame_send_notif+0xc4>)
 8014226:	4413      	add	r3, r2
 8014228:	69ba      	ldr	r2, [r7, #24]
 801422a:	6839      	ldr	r1, [r7, #0]
 801422c:	4618      	mov	r0, r3
 801422e:	f000 fe3a 	bl	8014ea6 <memcpy>
	i += dtalen;
 8014232:	68fa      	ldr	r2, [r7, #12]
 8014234:	69bb      	ldr	r3, [r7, #24]
 8014236:	4413      	add	r3, r2
 8014238:	60fb      	str	r3, [r7, #12]
	m.frm[i++] = '|';
 801423a:	68fb      	ldr	r3, [r7, #12]
 801423c:	1c5a      	adds	r2, r3, #1
 801423e:	60fa      	str	r2, [r7, #12]
 8014240:	4a0a      	ldr	r2, [pc, #40]	; (801426c <frame_send_notif+0xc0>)
 8014242:	4413      	add	r3, r2
 8014244:	227c      	movs	r2, #124	; 0x7c
 8014246:	709a      	strb	r2, [r3, #2]
	int l = frm_escape(m.frm, i, FRM_MAX_LEN);
 8014248:	221f      	movs	r2, #31
 801424a:	68f9      	ldr	r1, [r7, #12]
 801424c:	4808      	ldr	r0, [pc, #32]	; (8014270 <frame_send_notif+0xc4>)
 801424e:	f7ff fb99 	bl	8013984 <frm_escape>
 8014252:	60b8      	str	r0, [r7, #8]
	if (l>0) txframe_send_notif(&m, l);
 8014254:	68bb      	ldr	r3, [r7, #8]
 8014256:	2b00      	cmp	r3, #0
 8014258:	dd03      	ble.n	8014262 <frame_send_notif+0xb6>
 801425a:	68b9      	ldr	r1, [r7, #8]
 801425c:	4803      	ldr	r0, [pc, #12]	; (801426c <frame_send_notif+0xc0>)
 801425e:	f7ff fad1 	bl	8013804 <txframe_send_notif>
}
 8014262:	bf00      	nop
 8014264:	3710      	adds	r7, #16
 8014266:	46bd      	mov	sp, r7
 8014268:	bd80      	pop	{r7, pc}
 801426a:	bf00      	nop
 801426c:	200052e0 	.word	0x200052e0
 8014270:	200052e2 	.word	0x200052e2

08014274 <frame_gather_stat>:


// buf should be long enough to store a int32_t with escape, so 8 bytes
int frame_gather_stat(int step, uint8_t *buf)
{
 8014274:	b580      	push	{r7, lr}
 8014276:	b086      	sub	sp, #24
 8014278:	af00      	add	r7, sp, #0
 801427a:	6078      	str	r0, [r7, #4]
 801427c:	6039      	str	r1, [r7, #0]
	// int32_t stat_val_get(int step);
	int done;
	int32_t v = stat_val_get(step, &done);
 801427e:	f107 0310 	add.w	r3, r7, #16
 8014282:	4619      	mov	r1, r3
 8014284:	6878      	ldr	r0, [r7, #4]
 8014286:	f7fe fa87 	bl	8012798 <stat_val_get>
 801428a:	4603      	mov	r3, r0
 801428c:	60fb      	str	r3, [r7, #12]
	if (done) return 0;
 801428e:	693b      	ldr	r3, [r7, #16]
 8014290:	2b00      	cmp	r3, #0
 8014292:	d001      	beq.n	8014298 <frame_gather_stat+0x24>
 8014294:	2300      	movs	r3, #0
 8014296:	e00e      	b.n	80142b6 <frame_gather_stat+0x42>

	int l = _frm_escape2(buf, (void *) &v, 4, 8);
 8014298:	f107 010c 	add.w	r1, r7, #12
 801429c:	2308      	movs	r3, #8
 801429e:	2204      	movs	r2, #4
 80142a0:	6838      	ldr	r0, [r7, #0]
 80142a2:	f7ff fb28 	bl	80138f6 <_frm_escape2>
 80142a6:	6178      	str	r0, [r7, #20]
	if (l<0) {
 80142a8:	697b      	ldr	r3, [r7, #20]
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	da02      	bge.n	80142b4 <frame_gather_stat+0x40>
		return -1;
 80142ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80142b2:	e000      	b.n	80142b6 <frame_gather_stat+0x42>
	}
	return l;
 80142b4:	697b      	ldr	r3, [r7, #20]
}
 80142b6:	4618      	mov	r0, r3
 80142b8:	3718      	adds	r7, #24
 80142ba:	46bd      	mov	sp, r7
 80142bc:	bd80      	pop	{r7, pc}

080142be <frame_send_stat>:

void frame_send_stat(void(*cb)(uint8_t *d, int l), uint32_t tick)
{
 80142be:	b580      	push	{r7, lr}
 80142c0:	b086      	sub	sp, #24
 80142c2:	af00      	add	r7, sp, #0
 80142c4:	6078      	str	r0, [r7, #4]
 80142c6:	6039      	str	r1, [r7, #0]
    uint8_t buf[8];
    //if ((1)) tick = 0xAA55AA55;
    int l = _frm_escape2(buf, (void *) &tick, 4, 8);
 80142c8:	4639      	mov	r1, r7
 80142ca:	f107 0008 	add.w	r0, r7, #8
 80142ce:	2308      	movs	r3, #8
 80142d0:	2204      	movs	r2, #4
 80142d2:	f7ff fb10 	bl	80138f6 <_frm_escape2>
 80142d6:	6138      	str	r0, [r7, #16]
    cb(buf, l);
 80142d8:	f107 0208 	add.w	r2, r7, #8
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	6939      	ldr	r1, [r7, #16]
 80142e0:	4610      	mov	r0, r2
 80142e2:	4798      	blx	r3

	int i;
	for (i=0; ; i++) {
 80142e4:	2300      	movs	r3, #0
 80142e6:	617b      	str	r3, [r7, #20]
		l = frame_gather_stat(i, buf);
 80142e8:	f107 0308 	add.w	r3, r7, #8
 80142ec:	4619      	mov	r1, r3
 80142ee:	6978      	ldr	r0, [r7, #20]
 80142f0:	f7ff ffc0 	bl	8014274 <frame_gather_stat>
 80142f4:	6138      	str	r0, [r7, #16]
		if (l<=0) {
 80142f6:	693b      	ldr	r3, [r7, #16]
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	dd09      	ble.n	8014310 <frame_send_stat+0x52>
			return;
		}
		cb(buf, l);
 80142fc:	f107 0208 	add.w	r2, r7, #8
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	6939      	ldr	r1, [r7, #16]
 8014304:	4610      	mov	r0, r2
 8014306:	4798      	blx	r3
	for (i=0; ; i++) {
 8014308:	697b      	ldr	r3, [r7, #20]
 801430a:	3301      	adds	r3, #1
 801430c:	617b      	str	r3, [r7, #20]
		l = frame_gather_stat(i, buf);
 801430e:	e7eb      	b.n	80142e8 <frame_send_stat+0x2a>
			return;
 8014310:	bf00      	nop
	}
}
 8014312:	3718      	adds	r7, #24
 8014314:	46bd      	mov	sp, r7
 8014316:	bd80      	pop	{r7, pc}

08014318 <StartTaskAuto>:
#include "../misc.h"
#include "taskauto.h"
#include "../auto1.h"

extern void StartTaskAuto(void *argument)
{
 8014318:	b580      	push	{r7, lr}
 801431a:	b086      	sub	sp, #24
 801431c:	af00      	add	r7, sp, #0
 801431e:	6078      	str	r0, [r7, #4]
	uint32_t t0;
	t0 = HAL_GetTick();
 8014320:	f7ee f8de 	bl	80024e0 <HAL_GetTick>
 8014324:	6178      	str	r0, [r7, #20]
	 for (;;) {
		  uint32_t notif;
		  xTaskNotifyWait(0, 0xFFFFFFFF, &notif, portMAX_DELAY);
 8014326:	f107 020c 	add.w	r2, r7, #12
 801432a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801432e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8014332:	2000      	movs	r0, #0
 8014334:	f7fa fd8c 	bl	800ee50 <xTaskNotifyWait>
		  uint32_t t = HAL_GetTick() - t0;
 8014338:	f7ee f8d2 	bl	80024e0 <HAL_GetTick>
 801433c:	4602      	mov	r2, r0
 801433e:	697b      	ldr	r3, [r7, #20]
 8014340:	1ad3      	subs	r3, r2, r3
 8014342:	613b      	str	r3, [r7, #16]
		  auto1_run(notif, t);
 8014344:	68fb      	ldr	r3, [r7, #12]
 8014346:	6939      	ldr	r1, [r7, #16]
 8014348:	4618      	mov	r0, r3
 801434a:	f7fc fea3 	bl	8011094 <auto1_run>
	 for (;;) {
 801434e:	e7ea      	b.n	8014326 <StartTaskAuto+0xe>

08014350 <task_auto_tick>:
    portYIELD_FROM_ISR(higher);
}


void task_auto_tick(void)
{
 8014350:	b580      	push	{r7, lr}
 8014352:	af00      	add	r7, sp, #0
	xTaskNotify(taskAutoHandle, AUTO1_NOTIF_TICK, eSetBits);
 8014354:	4b04      	ldr	r3, [pc, #16]	; (8014368 <task_auto_tick+0x18>)
 8014356:	6818      	ldr	r0, [r3, #0]
 8014358:	2300      	movs	r3, #0
 801435a:	2201      	movs	r2, #1
 801435c:	2101      	movs	r1, #1
 801435e:	f7fa fdd1 	bl	800ef04 <xTaskGenericNotify>
}
 8014362:	bf00      	nop
 8014364:	bd80      	pop	{r7, pc}
 8014366:	bf00      	nop
 8014368:	20006900 	.word	0x20006900

0801436c <task_auto_start_auto>:

void task_auto_start_auto(void)
{
 801436c:	b580      	push	{r7, lr}
 801436e:	af00      	add	r7, sp, #0
	xTaskNotify(taskAutoHandle, AUTO1_NOTIF_CMD_START, eSetBits);
 8014370:	4b04      	ldr	r3, [pc, #16]	; (8014384 <task_auto_start_auto+0x18>)
 8014372:	6818      	ldr	r0, [r3, #0]
 8014374:	2300      	movs	r3, #0
 8014376:	2201      	movs	r2, #1
 8014378:	2102      	movs	r1, #2
 801437a:	f7fa fdc3 	bl	800ef04 <xTaskGenericNotify>
}
 801437e:	bf00      	nop
 8014380:	bd80      	pop	{r7, pc}
 8014382:	bf00      	nop
 8014384:	20006900 	.word	0x20006900

08014388 <task_auto_stop_auto>:

void task_auto_stop_auto(void)
{
 8014388:	b580      	push	{r7, lr}
 801438a:	af00      	add	r7, sp, #0
	xTaskNotify(taskAutoHandle, AUTO1_NOTIF_CMD_STOP, eSetBits);
 801438c:	4b04      	ldr	r3, [pc, #16]	; (80143a0 <task_auto_stop_auto+0x18>)
 801438e:	6818      	ldr	r0, [r3, #0]
 8014390:	2300      	movs	r3, #0
 8014392:	2201      	movs	r2, #1
 8014394:	2104      	movs	r1, #4
 8014396:	f7fa fdb5 	bl	800ef04 <xTaskGenericNotify>
}
 801439a:	bf00      	nop
 801439c:	bd80      	pop	{r7, pc}
 801439e:	bf00      	nop
 80143a0:	20006900 	.word	0x20006900

080143a4 <set_pwm_freq>:
int cur_freqhz = 50;
extern TIM_HandleTypeDef htim1;

// #define __HAL_TIM_SET_PRESCALER(__HANDLE__, __PRESC__)       ((__HANDLE__)->Instance->PSC = (__PRESC__))
void set_pwm_freq(int freqhz)
{
 80143a4:	b480      	push	{r7}
 80143a6:	b085      	sub	sp, #20
 80143a8:	af00      	add	r7, sp, #0
 80143aa:	6078      	str	r0, [r7, #4]
	// 12MHz / 200 -> 60000
	// 50Hz = 1200
	int ps = (60000/freqhz)-1;
 80143ac:	f64e 2260 	movw	r2, #60000	; 0xea60
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80143b6:	3b01      	subs	r3, #1
 80143b8:	60fb      	str	r3, [r7, #12]
	if ((ps<1) || (ps>0xFFFF)) ps = 1200;
 80143ba:	68fb      	ldr	r3, [r7, #12]
 80143bc:	2b00      	cmp	r3, #0
 80143be:	dd03      	ble.n	80143c8 <set_pwm_freq+0x24>
 80143c0:	68fb      	ldr	r3, [r7, #12]
 80143c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80143c6:	db02      	blt.n	80143ce <set_pwm_freq+0x2a>
 80143c8:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 80143cc:	60fb      	str	r3, [r7, #12]
	ps = ps-1;
 80143ce:	68fb      	ldr	r3, [r7, #12]
 80143d0:	3b01      	subs	r3, #1
 80143d2:	60fb      	str	r3, [r7, #12]
	cur_freqhz = 60000/(ps+1);
 80143d4:	68fb      	ldr	r3, [r7, #12]
 80143d6:	3301      	adds	r3, #1
 80143d8:	f64e 2260 	movw	r2, #60000	; 0xea60
 80143dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80143e0:	4a05      	ldr	r2, [pc, #20]	; (80143f8 <set_pwm_freq+0x54>)
 80143e2:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_PRESCALER(&htim1, ps);
 80143e4:	4b05      	ldr	r3, [pc, #20]	; (80143fc <set_pwm_freq+0x58>)
 80143e6:	681b      	ldr	r3, [r3, #0]
 80143e8:	68fa      	ldr	r2, [r7, #12]
 80143ea:	629a      	str	r2, [r3, #40]	; 0x28

}
 80143ec:	bf00      	nop
 80143ee:	3714      	adds	r7, #20
 80143f0:	46bd      	mov	sp, r7
 80143f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143f6:	4770      	bx	lr
 80143f8:	20000544 	.word	0x20000544
 80143fc:	20006d24 	.word	0x20006d24

08014400 <run_task_ctrl>:




void run_task_ctrl(void)
{
 8014400:	b580      	push	{r7, lr}
 8014402:	b084      	sub	sp, #16
 8014404:	af00      	add	r7, sp, #0
	if ((0))   calibrate_bemf(); //XXXX
	for (;;) {
		uint32_t notif;
		xTaskNotifyWait(0, 0xFFFFFFFF, &notif, portMAX_DELAY);
 8014406:	1d3a      	adds	r2, r7, #4
 8014408:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801440c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8014410:	2000      	movs	r0, #0
 8014412:	f7fa fd1d 	bl	800ee50 <xTaskNotifyWait>
		//debug_info('G', 0, "HOP", 0, 0, 0);
		static uint32_t oldt = 0;
		static uint32_t t0 = 0;
		uint32_t t = HAL_GetTick();
 8014416:	f7ee f863 	bl	80024e0 <HAL_GetTick>
 801441a:	60f8      	str	r0, [r7, #12]
		// XXX we should have a global t0
		if (!t0) t0 = t;
 801441c:	4b0e      	ldr	r3, [pc, #56]	; (8014458 <run_task_ctrl+0x58>)
 801441e:	681b      	ldr	r3, [r3, #0]
 8014420:	2b00      	cmp	r3, #0
 8014422:	d102      	bne.n	801442a <run_task_ctrl+0x2a>
 8014424:	4a0c      	ldr	r2, [pc, #48]	; (8014458 <run_task_ctrl+0x58>)
 8014426:	68fb      	ldr	r3, [r7, #12]
 8014428:	6013      	str	r3, [r2, #0]
		int32_t dt = (oldt) ? (t-oldt) : 1;
 801442a:	4b0c      	ldr	r3, [pc, #48]	; (801445c <run_task_ctrl+0x5c>)
 801442c:	681b      	ldr	r3, [r3, #0]
 801442e:	2b00      	cmp	r3, #0
 8014430:	d004      	beq.n	801443c <run_task_ctrl+0x3c>
 8014432:	4b0a      	ldr	r3, [pc, #40]	; (801445c <run_task_ctrl+0x5c>)
 8014434:	681b      	ldr	r3, [r3, #0]
 8014436:	68fa      	ldr	r2, [r7, #12]
 8014438:	1ad3      	subs	r3, r2, r3
 801443a:	e000      	b.n	801443e <run_task_ctrl+0x3e>
 801443c:	2301      	movs	r3, #1
 801443e:	60bb      	str	r3, [r7, #8]
		oldt = t;
 8014440:	4a06      	ldr	r2, [pc, #24]	; (801445c <run_task_ctrl+0x5c>)
 8014442:	68fb      	ldr	r3, [r7, #12]
 8014444:	6013      	str	r3, [r2, #0]

		train_run_tick(notif, t, dt);
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	68ba      	ldr	r2, [r7, #8]
 801444a:	68f9      	ldr	r1, [r7, #12]
 801444c:	4618      	mov	r0, r3
 801444e:	f7fe fabf 	bl	80129d0 <train_run_tick>
			if (!s && (t-t0>5000)) {
				train_set_target_speed(0, 50);
				s = 1;
			}
		}
		task_auto_tick();
 8014452:	f7ff ff7d 	bl	8014350 <task_auto_tick>
	for (;;) {
 8014456:	e7d6      	b.n	8014406 <run_task_ctrl+0x6>
 8014458:	2000530c 	.word	0x2000530c
 801445c:	20005310 	.word	0x20005310

08014460 <HAL_ADC_ConvCpltCallback>:
static int nhalf=0;
static int nfull=0;


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* AdcHandle)
{
 8014460:	b580      	push	{r7, lr}
 8014462:	b086      	sub	sp, #24
 8014464:	af02      	add	r7, sp, #8
 8014466:	6078      	str	r0, [r7, #4]
	nfull++;
 8014468:	4b0f      	ldr	r3, [pc, #60]	; (80144a8 <HAL_ADC_ConvCpltCallback+0x48>)
 801446a:	681b      	ldr	r3, [r3, #0]
 801446c:	3301      	adds	r3, #1
 801446e:	4a0e      	ldr	r2, [pc, #56]	; (80144a8 <HAL_ADC_ConvCpltCallback+0x48>)
 8014470:	6013      	str	r3, [r2, #0]
	BaseType_t higher=0;
 8014472:	2300      	movs	r3, #0
 8014474:	60fb      	str	r3, [r7, #12]
	xTaskNotifyFromISR(ctrlTaskHandle, NOTIF_NEW_ADC_2, eSetBits, &higher);
 8014476:	4b0d      	ldr	r3, [pc, #52]	; (80144ac <HAL_ADC_ConvCpltCallback+0x4c>)
 8014478:	6818      	ldr	r0, [r3, #0]
 801447a:	f107 030c 	add.w	r3, r7, #12
 801447e:	9300      	str	r3, [sp, #0]
 8014480:	2300      	movs	r3, #0
 8014482:	2201      	movs	r2, #1
 8014484:	2102      	movs	r1, #2
 8014486:	f7fa fdf1 	bl	800f06c <xTaskGenericNotifyFromISR>
	portYIELD_FROM_ISR(higher);
 801448a:	68fb      	ldr	r3, [r7, #12]
 801448c:	2b00      	cmp	r3, #0
 801448e:	d007      	beq.n	80144a0 <HAL_ADC_ConvCpltCallback+0x40>
 8014490:	4b07      	ldr	r3, [pc, #28]	; (80144b0 <HAL_ADC_ConvCpltCallback+0x50>)
 8014492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014496:	601a      	str	r2, [r3, #0]
 8014498:	f3bf 8f4f 	dsb	sy
 801449c:	f3bf 8f6f 	isb	sy
}
 80144a0:	bf00      	nop
 80144a2:	3710      	adds	r7, #16
 80144a4:	46bd      	mov	sp, r7
 80144a6:	bd80      	pop	{r7, pc}
 80144a8:	20005308 	.word	0x20005308
 80144ac:	200063d4 	.word	0x200063d4
 80144b0:	e000ed04 	.word	0xe000ed04

080144b4 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80144b4:	b580      	push	{r7, lr}
 80144b6:	b086      	sub	sp, #24
 80144b8:	af02      	add	r7, sp, #8
 80144ba:	6078      	str	r0, [r7, #4]
	nhalf++;
 80144bc:	4b0f      	ldr	r3, [pc, #60]	; (80144fc <HAL_ADC_ConvHalfCpltCallback+0x48>)
 80144be:	681b      	ldr	r3, [r3, #0]
 80144c0:	3301      	adds	r3, #1
 80144c2:	4a0e      	ldr	r2, [pc, #56]	; (80144fc <HAL_ADC_ConvHalfCpltCallback+0x48>)
 80144c4:	6013      	str	r3, [r2, #0]
	BaseType_t higher=0;
 80144c6:	2300      	movs	r3, #0
 80144c8:	60fb      	str	r3, [r7, #12]
	xTaskNotifyFromISR(ctrlTaskHandle, NOTIF_NEW_ADC_1, eSetBits, &higher);
 80144ca:	4b0d      	ldr	r3, [pc, #52]	; (8014500 <HAL_ADC_ConvHalfCpltCallback+0x4c>)
 80144cc:	6818      	ldr	r0, [r3, #0]
 80144ce:	f107 030c 	add.w	r3, r7, #12
 80144d2:	9300      	str	r3, [sp, #0]
 80144d4:	2300      	movs	r3, #0
 80144d6:	2201      	movs	r2, #1
 80144d8:	2101      	movs	r1, #1
 80144da:	f7fa fdc7 	bl	800f06c <xTaskGenericNotifyFromISR>
	portYIELD_FROM_ISR(higher);
 80144de:	68fb      	ldr	r3, [r7, #12]
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d007      	beq.n	80144f4 <HAL_ADC_ConvHalfCpltCallback+0x40>
 80144e4:	4b07      	ldr	r3, [pc, #28]	; (8014504 <HAL_ADC_ConvHalfCpltCallback+0x50>)
 80144e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80144ea:	601a      	str	r2, [r3, #0]
 80144ec:	f3bf 8f4f 	dsb	sy
 80144f0:	f3bf 8f6f 	isb	sy
}
 80144f4:	bf00      	nop
 80144f6:	3710      	adds	r7, #16
 80144f8:	46bd      	mov	sp, r7
 80144fa:	bd80      	pop	{r7, pc}
 80144fc:	20005304 	.word	0x20005304
 8014500:	200063d4 	.word	0x200063d4
 8014504:	e000ed04 	.word	0xe000ed04

08014508 <HAL_ADC_ErrorCallback>:
void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{

}
void  HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8014508:	b480      	push	{r7}
 801450a:	b083      	sub	sp, #12
 801450c:	af00      	add	r7, sp, #0
 801450e:	6078      	str	r0, [r7, #4]

}
 8014510:	bf00      	nop
 8014512:	370c      	adds	r7, #12
 8014514:	46bd      	mov	sp, r7
 8014516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801451a:	4770      	bx	lr

0801451c <i2c_ready>:
#include "../BLE/bletask.h"

extern int num_train_periodic_control;

static void i2c_ready(int a)
{
 801451c:	b480      	push	{r7}
 801451e:	b083      	sub	sp, #12
 8014520:	af00      	add	r7, sp, #0
 8014522:	6078      	str	r0, [r7, #4]

}
 8014524:	bf00      	nop
 8014526:	370c      	adds	r7, #12
 8014528:	46bd      	mov	sp, r7
 801452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801452e:	4770      	bx	lr

08014530 <I2C_Scan>:
static void I2C_Scan(void)
{
 8014530:	b580      	push	{r7, lr}
 8014532:	b082      	sub	sp, #8
 8014534:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef res;
    for(uint16_t i = 0; i < 128; i++) {
 8014536:	2300      	movs	r3, #0
 8014538:	80fb      	strh	r3, [r7, #6]
 801453a:	e013      	b.n	8014564 <I2C_Scan+0x34>
        res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 801453c:	88fb      	ldrh	r3, [r7, #6]
 801453e:	005b      	lsls	r3, r3, #1
 8014540:	b299      	uxth	r1, r3
 8014542:	230a      	movs	r3, #10
 8014544:	2201      	movs	r2, #1
 8014546:	480b      	ldr	r0, [pc, #44]	; (8014574 <I2C_Scan+0x44>)
 8014548:	f7ef fc4e 	bl	8003de8 <HAL_I2C_IsDeviceReady>
 801454c:	4603      	mov	r3, r0
 801454e:	717b      	strb	r3, [r7, #5]
        if(res == HAL_OK) {
 8014550:	797b      	ldrb	r3, [r7, #5]
 8014552:	2b00      	cmp	r3, #0
 8014554:	d103      	bne.n	801455e <I2C_Scan+0x2e>
        	i2c_ready(i);
 8014556:	88fb      	ldrh	r3, [r7, #6]
 8014558:	4618      	mov	r0, r3
 801455a:	f7ff ffdf 	bl	801451c <i2c_ready>
    for(uint16_t i = 0; i < 128; i++) {
 801455e:	88fb      	ldrh	r3, [r7, #6]
 8014560:	3301      	adds	r3, #1
 8014562:	80fb      	strh	r3, [r7, #6]
 8014564:	88fb      	ldrh	r3, [r7, #6]
 8014566:	2b7f      	cmp	r3, #127	; 0x7f
 8014568:	d9e8      	bls.n	801453c <I2C_Scan+0xc>
        } else {
        }
    }
}
 801456a:	bf00      	nop
 801456c:	3708      	adds	r7, #8
 801456e:	46bd      	mov	sp, r7
 8014570:	bd80      	pop	{r7, pc}
 8014572:	bf00      	nop
 8014574:	20005ef0 	.word	0x20005ef0

08014578 <bcd_2_char>:


static void bcd_2_char(char *buf, int v, int nch)
{
 8014578:	b480      	push	{r7}
 801457a:	b085      	sub	sp, #20
 801457c:	af00      	add	r7, sp, #0
 801457e:	60f8      	str	r0, [r7, #12]
 8014580:	60b9      	str	r1, [r7, #8]
 8014582:	607a      	str	r2, [r7, #4]
	while (nch>0) {
 8014584:	e010      	b.n	80145a8 <bcd_2_char+0x30>
		nch--;
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	3b01      	subs	r3, #1
 801458a:	607b      	str	r3, [r7, #4]
		buf[nch] = '0' + (v & 0x0F);
 801458c:	68bb      	ldr	r3, [r7, #8]
 801458e:	b2db      	uxtb	r3, r3
 8014590:	f003 030f 	and.w	r3, r3, #15
 8014594:	b2da      	uxtb	r2, r3
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	68f9      	ldr	r1, [r7, #12]
 801459a:	440b      	add	r3, r1
 801459c:	3230      	adds	r2, #48	; 0x30
 801459e:	b2d2      	uxtb	r2, r2
 80145a0:	701a      	strb	r2, [r3, #0]
		v = v >> 4;
 80145a2:	68bb      	ldr	r3, [r7, #8]
 80145a4:	111b      	asrs	r3, r3, #4
 80145a6:	60bb      	str	r3, [r7, #8]
	while (nch>0) {
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	dceb      	bgt.n	8014586 <bcd_2_char+0xe>
	}
}
 80145ae:	bf00      	nop
 80145b0:	3714      	adds	r7, #20
 80145b2:	46bd      	mov	sp, r7
 80145b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145b8:	4770      	bx	lr

080145ba <hexchr>:

static char hexchr(int v)
{
 80145ba:	b480      	push	{r7}
 80145bc:	b083      	sub	sp, #12
 80145be:	af00      	add	r7, sp, #0
 80145c0:	6078      	str	r0, [r7, #4]
	v = v & 0xF;
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	f003 030f 	and.w	r3, r3, #15
 80145c8:	607b      	str	r3, [r7, #4]
	if (v>9) {
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	2b09      	cmp	r3, #9
 80145ce:	dd04      	ble.n	80145da <hexchr+0x20>
		return 'A'+(v-10);
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	b2db      	uxtb	r3, r3
 80145d4:	3337      	adds	r3, #55	; 0x37
 80145d6:	b2db      	uxtb	r3, r3
 80145d8:	e003      	b.n	80145e2 <hexchr+0x28>
	}
	return '0'+v;
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	b2db      	uxtb	r3, r3
 80145de:	3330      	adds	r3, #48	; 0x30
 80145e0:	b2db      	uxtb	r3, r3
}
 80145e2:	4618      	mov	r0, r3
 80145e4:	370c      	adds	r7, #12
 80145e6:	46bd      	mov	sp, r7
 80145e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145ec:	4770      	bx	lr
	...

080145f0 <write_num>:

static void write_num(char *buf, uint32_t v, int ndigit)
{
 80145f0:	b480      	push	{r7}
 80145f2:	b085      	sub	sp, #20
 80145f4:	af00      	add	r7, sp, #0
 80145f6:	60f8      	str	r0, [r7, #12]
 80145f8:	60b9      	str	r1, [r7, #8]
 80145fa:	607a      	str	r2, [r7, #4]
	for (;ndigit>0; ndigit--) {
 80145fc:	e01a      	b.n	8014634 <write_num+0x44>
		buf[ndigit-1] = '0'+ (v % 10);
 80145fe:	68b9      	ldr	r1, [r7, #8]
 8014600:	4b11      	ldr	r3, [pc, #68]	; (8014648 <write_num+0x58>)
 8014602:	fba3 2301 	umull	r2, r3, r3, r1
 8014606:	08da      	lsrs	r2, r3, #3
 8014608:	4613      	mov	r3, r2
 801460a:	009b      	lsls	r3, r3, #2
 801460c:	4413      	add	r3, r2
 801460e:	005b      	lsls	r3, r3, #1
 8014610:	1aca      	subs	r2, r1, r3
 8014612:	b2d2      	uxtb	r2, r2
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	3b01      	subs	r3, #1
 8014618:	68f9      	ldr	r1, [r7, #12]
 801461a:	440b      	add	r3, r1
 801461c:	3230      	adds	r2, #48	; 0x30
 801461e:	b2d2      	uxtb	r2, r2
 8014620:	701a      	strb	r2, [r3, #0]
		v = v/10;
 8014622:	68bb      	ldr	r3, [r7, #8]
 8014624:	4a08      	ldr	r2, [pc, #32]	; (8014648 <write_num+0x58>)
 8014626:	fba2 2303 	umull	r2, r3, r2, r3
 801462a:	08db      	lsrs	r3, r3, #3
 801462c:	60bb      	str	r3, [r7, #8]
	for (;ndigit>0; ndigit--) {
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	3b01      	subs	r3, #1
 8014632:	607b      	str	r3, [r7, #4]
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	2b00      	cmp	r3, #0
 8014638:	dce1      	bgt.n	80145fe <write_num+0xe>
	}
}
 801463a:	bf00      	nop
 801463c:	3714      	adds	r7, #20
 801463e:	46bd      	mov	sp, r7
 8014640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014644:	4770      	bx	lr
 8014646:	bf00      	nop
 8014648:	cccccccd 	.word	0xcccccccd

0801464c <taskdisp>:
static void disp_ble2(void);
static void disp_ticks(void);
static void disp_c0(void);

void taskdisp(void)
{
 801464c:	b580      	push	{r7, lr}
 801464e:	b082      	sub	sp, #8
 8014650:	af00      	add	r7, sp, #0
	int numdisp=0;
 8014652:	2300      	movs	r3, #0
 8014654:	607b      	str	r3, [r7, #4]
	I2C_Scan();
 8014656:	f7ff ff6b 	bl	8014530 <I2C_Scan>
	ssd1306_Init();
 801465a:	f7fc fac3 	bl	8010be4 <ssd1306_Init>
	for (;;) {
		ssd1306_Fill(Black);
 801465e:	2000      	movs	r0, #0
 8014660:	f7fc fb2a 	bl	8010cb8 <ssd1306_Fill>
		ssd1306_SetCursor(0,0);
 8014664:	2100      	movs	r1, #0
 8014666:	2000      	movs	r0, #0
 8014668:	f7fc fc7c 	bl	8010f64 <ssd1306_SetCursor>
		if (numdisp>4) numdisp=0;
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	2b04      	cmp	r3, #4
 8014670:	dd01      	ble.n	8014676 <taskdisp+0x2a>
 8014672:	2300      	movs	r3, #0
 8014674:	607b      	str	r3, [r7, #4]
		switch (numdisp) {
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	2b05      	cmp	r3, #5
 801467a:	d821      	bhi.n	80146c0 <taskdisp+0x74>
 801467c:	a201      	add	r2, pc, #4	; (adr r2, 8014684 <taskdisp+0x38>)
 801467e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014682:	bf00      	nop
 8014684:	0801469d 	.word	0x0801469d
 8014688:	080146a3 	.word	0x080146a3
 801468c:	080146a9 	.word	0x080146a9
 8014690:	080146af 	.word	0x080146af
 8014694:	080146b5 	.word	0x080146b5
 8014698:	080146bb 	.word	0x080146bb
		case 0:
			disp_hop();
 801469c:	f000 f8f4 	bl	8014888 <disp_hop>
			break;
 80146a0:	e00e      	b.n	80146c0 <taskdisp+0x74>
		case 1: // clock
			disp_clock();
 80146a2:	f000 f90d 	bl	80148c0 <disp_clock>
			break;
 80146a6:	e00b      	b.n	80146c0 <taskdisp+0x74>
		case 2: // BLE
			disp_ble1();
 80146a8:	f000 f846 	bl	8014738 <disp_ble1>
			break;
 80146ac:	e008      	b.n	80146c0 <taskdisp+0x74>
		case 3: //BLE2
			disp_ble2();
 80146ae:	f000 f889 	bl	80147c4 <disp_ble2>
			break;
 80146b2:	e005      	b.n	80146c0 <taskdisp+0x74>
		case 4: // ticks
			disp_ticks();
 80146b4:	f000 f81c 	bl	80146f0 <disp_ticks>
			break;
 80146b8:	e002      	b.n	80146c0 <taskdisp+0x74>
		case 5: // canton 0
			disp_c0();
 80146ba:	f000 f80b 	bl	80146d4 <disp_c0>
			break;
 80146be:	bf00      	nop
		}
		ssd1306_UpdateScreen();
 80146c0:	f7fc fb1c 	bl	8010cfc <ssd1306_UpdateScreen>
		osDelay(1000);
 80146c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80146c8:	f7f8 fcb2 	bl	800d030 <osDelay>
		numdisp++;
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	3301      	adds	r3, #1
 80146d0:	607b      	str	r3, [r7, #4]
		ssd1306_Fill(Black);
 80146d2:	e7c4      	b.n	801465e <taskdisp+0x12>

080146d4 <disp_c0>:
	}
}

static void disp_c0(void)
{
 80146d4:	b580      	push	{r7, lr}
 80146d6:	af00      	add	r7, sp, #0
	static char str[] = "C0 V xxx p yyy";
	ssd1306_WriteString(str, Font_7x10, White);
 80146d8:	4a03      	ldr	r2, [pc, #12]	; (80146e8 <disp_c0+0x14>)
 80146da:	2301      	movs	r3, #1
 80146dc:	ca06      	ldmia	r2, {r1, r2}
 80146de:	4803      	ldr	r0, [pc, #12]	; (80146ec <disp_c0+0x18>)
 80146e0:	f7fc fc1a 	bl	8010f18 <ssd1306_WriteString>
}
 80146e4:	bf00      	nop
 80146e6:	bd80      	pop	{r7, pc}
 80146e8:	20000194 	.word	0x20000194
 80146ec:	20000548 	.word	0x20000548

080146f0 <disp_ticks>:

static void disp_ticks(void)
{
 80146f0:	b580      	push	{r7, lr}
 80146f2:	af00      	add	r7, sp, #0
					   //012345678990
	static char str[] = "T xxx N yyyy";
	write_num(str+2,train_tick_last_dt ,3);
 80146f4:	480a      	ldr	r0, [pc, #40]	; (8014720 <disp_ticks+0x30>)
 80146f6:	4b0b      	ldr	r3, [pc, #44]	; (8014724 <disp_ticks+0x34>)
 80146f8:	681b      	ldr	r3, [r3, #0]
 80146fa:	2203      	movs	r2, #3
 80146fc:	4619      	mov	r1, r3
 80146fe:	f7ff ff77 	bl	80145f0 <write_num>
	write_num(str+8, train_ntick, 4);
 8014702:	4809      	ldr	r0, [pc, #36]	; (8014728 <disp_ticks+0x38>)
 8014704:	4b09      	ldr	r3, [pc, #36]	; (801472c <disp_ticks+0x3c>)
 8014706:	681b      	ldr	r3, [r3, #0]
 8014708:	2204      	movs	r2, #4
 801470a:	4619      	mov	r1, r3
 801470c:	f7ff ff70 	bl	80145f0 <write_num>

	ssd1306_WriteString(str, Font_7x10, White);
 8014710:	4a07      	ldr	r2, [pc, #28]	; (8014730 <disp_ticks+0x40>)
 8014712:	2301      	movs	r3, #1
 8014714:	ca06      	ldmia	r2, {r1, r2}
 8014716:	4807      	ldr	r0, [pc, #28]	; (8014734 <disp_ticks+0x44>)
 8014718:	f7fc fbfe 	bl	8010f18 <ssd1306_WriteString>
}
 801471c:	bf00      	nop
 801471e:	bd80      	pop	{r7, pc}
 8014720:	2000055a 	.word	0x2000055a
 8014724:	20005274 	.word	0x20005274
 8014728:	20000560 	.word	0x20000560
 801472c:	20005278 	.word	0x20005278
 8014730:	20000194 	.word	0x20000194
 8014734:	20000558 	.word	0x20000558

08014738 <disp_ble1>:

static void disp_ble1(void)
{
 8014738:	b580      	push	{r7, lr}
 801473a:	af00      	add	r7, sp, #0
	//ssd1306_WriteString("BLE ", Font_11x18, White);
	//   0123456789
	static char str[] = "cmd x r yy";
	str[4] =  '0' + num_cmd;
 801473c:	4b1c      	ldr	r3, [pc, #112]	; (80147b0 <disp_ble1+0x78>)
 801473e:	681b      	ldr	r3, [r3, #0]
 8014740:	b2db      	uxtb	r3, r3
 8014742:	3330      	adds	r3, #48	; 0x30
 8014744:	b2da      	uxtb	r2, r3
 8014746:	4b1b      	ldr	r3, [pc, #108]	; (80147b4 <disp_ble1+0x7c>)
 8014748:	711a      	strb	r2, [r3, #4]
	str[8] =  '0' + (num_rx/10)%10;
 801474a:	4b1b      	ldr	r3, [pc, #108]	; (80147b8 <disp_ble1+0x80>)
 801474c:	681b      	ldr	r3, [r3, #0]
 801474e:	4a1b      	ldr	r2, [pc, #108]	; (80147bc <disp_ble1+0x84>)
 8014750:	fb82 1203 	smull	r1, r2, r2, r3
 8014754:	1092      	asrs	r2, r2, #2
 8014756:	17db      	asrs	r3, r3, #31
 8014758:	1ad2      	subs	r2, r2, r3
 801475a:	4b18      	ldr	r3, [pc, #96]	; (80147bc <disp_ble1+0x84>)
 801475c:	fb83 1302 	smull	r1, r3, r3, r2
 8014760:	1099      	asrs	r1, r3, #2
 8014762:	17d3      	asrs	r3, r2, #31
 8014764:	1ac9      	subs	r1, r1, r3
 8014766:	460b      	mov	r3, r1
 8014768:	009b      	lsls	r3, r3, #2
 801476a:	440b      	add	r3, r1
 801476c:	005b      	lsls	r3, r3, #1
 801476e:	1ad1      	subs	r1, r2, r3
 8014770:	b2cb      	uxtb	r3, r1
 8014772:	3330      	adds	r3, #48	; 0x30
 8014774:	b2da      	uxtb	r2, r3
 8014776:	4b0f      	ldr	r3, [pc, #60]	; (80147b4 <disp_ble1+0x7c>)
 8014778:	721a      	strb	r2, [r3, #8]
	str[9] =  '0' + num_rx%10;
 801477a:	4b0f      	ldr	r3, [pc, #60]	; (80147b8 <disp_ble1+0x80>)
 801477c:	681a      	ldr	r2, [r3, #0]
 801477e:	4b0f      	ldr	r3, [pc, #60]	; (80147bc <disp_ble1+0x84>)
 8014780:	fb83 1302 	smull	r1, r3, r3, r2
 8014784:	1099      	asrs	r1, r3, #2
 8014786:	17d3      	asrs	r3, r2, #31
 8014788:	1ac9      	subs	r1, r1, r3
 801478a:	460b      	mov	r3, r1
 801478c:	009b      	lsls	r3, r3, #2
 801478e:	440b      	add	r3, r1
 8014790:	005b      	lsls	r3, r3, #1
 8014792:	1ad1      	subs	r1, r2, r3
 8014794:	b2cb      	uxtb	r3, r1
 8014796:	3330      	adds	r3, #48	; 0x30
 8014798:	b2da      	uxtb	r2, r3
 801479a:	4b06      	ldr	r3, [pc, #24]	; (80147b4 <disp_ble1+0x7c>)
 801479c:	725a      	strb	r2, [r3, #9]
	ssd1306_WriteString(str, Font_11x18, White);
 801479e:	4a08      	ldr	r2, [pc, #32]	; (80147c0 <disp_ble1+0x88>)
 80147a0:	2301      	movs	r3, #1
 80147a2:	ca06      	ldmia	r2, {r1, r2}
 80147a4:	4803      	ldr	r0, [pc, #12]	; (80147b4 <disp_ble1+0x7c>)
 80147a6:	f7fc fbb7 	bl	8010f18 <ssd1306_WriteString>
}
 80147aa:	bf00      	nop
 80147ac:	bd80      	pop	{r7, pc}
 80147ae:	bf00      	nop
 80147b0:	2000065c 	.word	0x2000065c
 80147b4:	20000568 	.word	0x20000568
 80147b8:	20000668 	.word	0x20000668
 80147bc:	66666667 	.word	0x66666667
 80147c0:	2000019c 	.word	0x2000019c

080147c4 <disp_ble2>:

static void disp_ble2(void)
{
 80147c4:	b580      	push	{r7, lr}
 80147c6:	b082      	sub	sp, #8
 80147c8:	af00      	add	r7, sp, #0
	// 012345678
	static char spd[] = "s sxx sxx";
	spd[2] = (ble_spd1>=0) ? ' ' : '-';
 80147ca:	4b2b      	ldr	r3, [pc, #172]	; (8014878 <disp_ble2+0xb4>)
 80147cc:	781b      	ldrb	r3, [r3, #0]
 80147ce:	b25b      	sxtb	r3, r3
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	db01      	blt.n	80147d8 <disp_ble2+0x14>
 80147d4:	2220      	movs	r2, #32
 80147d6:	e000      	b.n	80147da <disp_ble2+0x16>
 80147d8:	222d      	movs	r2, #45	; 0x2d
 80147da:	4b28      	ldr	r3, [pc, #160]	; (801487c <disp_ble2+0xb8>)
 80147dc:	709a      	strb	r2, [r3, #2]
	int as = abs(ble_spd1);
 80147de:	4b26      	ldr	r3, [pc, #152]	; (8014878 <disp_ble2+0xb4>)
 80147e0:	781b      	ldrb	r3, [r3, #0]
 80147e2:	b25b      	sxtb	r3, r3
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	bfb8      	it	lt
 80147e8:	425b      	neglt	r3, r3
 80147ea:	607b      	str	r3, [r7, #4]
	spd[3] = hexchr((as >> 4) & 0xF);
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	111b      	asrs	r3, r3, #4
 80147f0:	f003 030f 	and.w	r3, r3, #15
 80147f4:	4618      	mov	r0, r3
 80147f6:	f7ff fee0 	bl	80145ba <hexchr>
 80147fa:	4603      	mov	r3, r0
 80147fc:	461a      	mov	r2, r3
 80147fe:	4b1f      	ldr	r3, [pc, #124]	; (801487c <disp_ble2+0xb8>)
 8014800:	70da      	strb	r2, [r3, #3]
	spd[4] = hexchr(as & 0xF);
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	f003 030f 	and.w	r3, r3, #15
 8014808:	4618      	mov	r0, r3
 801480a:	f7ff fed6 	bl	80145ba <hexchr>
 801480e:	4603      	mov	r3, r0
 8014810:	461a      	mov	r2, r3
 8014812:	4b1a      	ldr	r3, [pc, #104]	; (801487c <disp_ble2+0xb8>)
 8014814:	711a      	strb	r2, [r3, #4]
	spd[6] = (ble_spd2>=0) ? ' ' : '-';
 8014816:	4b1a      	ldr	r3, [pc, #104]	; (8014880 <disp_ble2+0xbc>)
 8014818:	781b      	ldrb	r3, [r3, #0]
 801481a:	b25b      	sxtb	r3, r3
 801481c:	2b00      	cmp	r3, #0
 801481e:	db01      	blt.n	8014824 <disp_ble2+0x60>
 8014820:	2220      	movs	r2, #32
 8014822:	e000      	b.n	8014826 <disp_ble2+0x62>
 8014824:	222d      	movs	r2, #45	; 0x2d
 8014826:	4b15      	ldr	r3, [pc, #84]	; (801487c <disp_ble2+0xb8>)
 8014828:	719a      	strb	r2, [r3, #6]
	as = abs(ble_spd2);
 801482a:	4b15      	ldr	r3, [pc, #84]	; (8014880 <disp_ble2+0xbc>)
 801482c:	781b      	ldrb	r3, [r3, #0]
 801482e:	b25b      	sxtb	r3, r3
 8014830:	2b00      	cmp	r3, #0
 8014832:	bfb8      	it	lt
 8014834:	425b      	neglt	r3, r3
 8014836:	607b      	str	r3, [r7, #4]
	spd[7] = hexchr((as >> 4) & 0xF);
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	111b      	asrs	r3, r3, #4
 801483c:	f003 030f 	and.w	r3, r3, #15
 8014840:	4618      	mov	r0, r3
 8014842:	f7ff feba 	bl	80145ba <hexchr>
 8014846:	4603      	mov	r3, r0
 8014848:	461a      	mov	r2, r3
 801484a:	4b0c      	ldr	r3, [pc, #48]	; (801487c <disp_ble2+0xb8>)
 801484c:	71da      	strb	r2, [r3, #7]
	spd[8] = hexchr(as & 0xF);
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	f003 030f 	and.w	r3, r3, #15
 8014854:	4618      	mov	r0, r3
 8014856:	f7ff feb0 	bl	80145ba <hexchr>
 801485a:	4603      	mov	r3, r0
 801485c:	461a      	mov	r2, r3
 801485e:	4b07      	ldr	r3, [pc, #28]	; (801487c <disp_ble2+0xb8>)
 8014860:	721a      	strb	r2, [r3, #8]
	ssd1306_WriteString(spd, Font_11x18, White);
 8014862:	4a08      	ldr	r2, [pc, #32]	; (8014884 <disp_ble2+0xc0>)
 8014864:	2301      	movs	r3, #1
 8014866:	ca06      	ldmia	r2, {r1, r2}
 8014868:	4804      	ldr	r0, [pc, #16]	; (801487c <disp_ble2+0xb8>)
 801486a:	f7fc fb55 	bl	8010f18 <ssd1306_WriteString>
}
 801486e:	bf00      	nop
 8014870:	3708      	adds	r7, #8
 8014872:	46bd      	mov	sp, r7
 8014874:	bd80      	pop	{r7, pc}
 8014876:	bf00      	nop
 8014878:	20005374 	.word	0x20005374
 801487c:	20000574 	.word	0x20000574
 8014880:	20005375 	.word	0x20005375
 8014884:	2000019c 	.word	0x2000019c

08014888 <disp_hop>:

static void disp_hop(void)
{
 8014888:	b580      	push	{r7, lr}
 801488a:	af00      	add	r7, sp, #0
	ssd1306_WriteString("hophophop", Font_7x10, White);
 801488c:	4a08      	ldr	r2, [pc, #32]	; (80148b0 <disp_hop+0x28>)
 801488e:	2301      	movs	r3, #1
 8014890:	ca06      	ldmia	r2, {r1, r2}
 8014892:	4808      	ldr	r0, [pc, #32]	; (80148b4 <disp_hop+0x2c>)
 8014894:	f7fc fb40 	bl	8010f18 <ssd1306_WriteString>
	ssd1306_SetCursor(0,16);
 8014898:	2110      	movs	r1, #16
 801489a:	2000      	movs	r0, #0
 801489c:	f7fc fb62 	bl	8010f64 <ssd1306_SetCursor>
	ssd1306_WriteString("Hop !!", Font_11x18, White);
 80148a0:	4a05      	ldr	r2, [pc, #20]	; (80148b8 <disp_hop+0x30>)
 80148a2:	2301      	movs	r3, #1
 80148a4:	ca06      	ldmia	r2, {r1, r2}
 80148a6:	4805      	ldr	r0, [pc, #20]	; (80148bc <disp_hop+0x34>)
 80148a8:	f7fc fb36 	bl	8010f18 <ssd1306_WriteString>
}
 80148ac:	bf00      	nop
 80148ae:	bd80      	pop	{r7, pc}
 80148b0:	20000194 	.word	0x20000194
 80148b4:	08016188 	.word	0x08016188
 80148b8:	2000019c 	.word	0x2000019c
 80148bc:	08016194 	.word	0x08016194

080148c0 <disp_clock>:

static void disp_clock(void)
{
 80148c0:	b580      	push	{r7, lr}
 80148c2:	b08e      	sub	sp, #56	; 0x38
 80148c4:	af00      	add	r7, sp, #0
	RTC_DateTypeDef sDate = {0};
 80148c6:	2300      	movs	r3, #0
 80148c8:	637b      	str	r3, [r7, #52]	; 0x34
	RTC_TimeTypeDef sTime = {0};
 80148ca:	f107 0320 	add.w	r3, r7, #32
 80148ce:	2200      	movs	r2, #0
 80148d0:	601a      	str	r2, [r3, #0]
 80148d2:	605a      	str	r2, [r3, #4]
 80148d4:	609a      	str	r2, [r3, #8]
 80148d6:	60da      	str	r2, [r3, #12]
 80148d8:	611a      	str	r2, [r3, #16]
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 80148da:	f107 0320 	add.w	r3, r7, #32
 80148de:	2201      	movs	r2, #1
 80148e0:	4619      	mov	r1, r3
 80148e2:	489c      	ldr	r0, [pc, #624]	; (8014b54 <disp_clock+0x294>)
 80148e4:	f7f3 fa0b 	bl	8007cfe <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 80148e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80148ec:	2201      	movs	r2, #1
 80148ee:	4619      	mov	r1, r3
 80148f0:	4898      	ldr	r0, [pc, #608]	; (8014b54 <disp_clock+0x294>)
 80148f2:	f7f3 fa62 	bl	8007dba <HAL_RTC_GetDate>
	char buf[32];
	bcd_2_char(buf, sTime.Hours, 2);
 80148f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80148fa:	4619      	mov	r1, r3
 80148fc:	463b      	mov	r3, r7
 80148fe:	2202      	movs	r2, #2
 8014900:	4618      	mov	r0, r3
 8014902:	f7ff fe39 	bl	8014578 <bcd_2_char>
	buf[2]=':';
 8014906:	233a      	movs	r3, #58	; 0x3a
 8014908:	70bb      	strb	r3, [r7, #2]
	bcd_2_char(buf+3, sTime.Minutes, 2);
 801490a:	463b      	mov	r3, r7
 801490c:	3303      	adds	r3, #3
 801490e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8014912:	4611      	mov	r1, r2
 8014914:	2202      	movs	r2, #2
 8014916:	4618      	mov	r0, r3
 8014918:	f7ff fe2e 	bl	8014578 <bcd_2_char>
	buf[5]=':';
 801491c:	233a      	movs	r3, #58	; 0x3a
 801491e:	717b      	strb	r3, [r7, #5]
	bcd_2_char(buf+6, sTime.Seconds, 2);
 8014920:	463b      	mov	r3, r7
 8014922:	3306      	adds	r3, #6
 8014924:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8014928:	4611      	mov	r1, r2
 801492a:	2202      	movs	r2, #2
 801492c:	4618      	mov	r0, r3
 801492e:	f7ff fe23 	bl	8014578 <bcd_2_char>
	buf[8]='\0';
 8014932:	2300      	movs	r3, #0
 8014934:	723b      	strb	r3, [r7, #8]
	ssd1306_Fill(Black);
 8014936:	2000      	movs	r0, #0
 8014938:	f7fc f9be 	bl	8010cb8 <ssd1306_Fill>
	ssd1306_SetCursor(2,0);
 801493c:	2100      	movs	r1, #0
 801493e:	2002      	movs	r0, #2
 8014940:	f7fc fb10 	bl	8010f64 <ssd1306_SetCursor>
	ssd1306_WriteString(buf, Font_11x18, White);
 8014944:	4a84      	ldr	r2, [pc, #528]	; (8014b58 <disp_clock+0x298>)
 8014946:	4638      	mov	r0, r7
 8014948:	2301      	movs	r3, #1
 801494a:	ca06      	ldmia	r2, {r1, r2}
 801494c:	f7fc fae4 	bl	8010f18 <ssd1306_WriteString>

	switch (sDate.WeekDay) {
 8014950:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8014954:	3b01      	subs	r3, #1
 8014956:	2b06      	cmp	r3, #6
 8014958:	d841      	bhi.n	80149de <disp_clock+0x11e>
 801495a:	a201      	add	r2, pc, #4	; (adr r2, 8014960 <disp_clock+0xa0>)
 801495c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014960:	0801497d 	.word	0x0801497d
 8014964:	0801498b 	.word	0x0801498b
 8014968:	08014999 	.word	0x08014999
 801496c:	080149a7 	.word	0x080149a7
 8014970:	080149b5 	.word	0x080149b5
 8014974:	080149c3 	.word	0x080149c3
 8014978:	080149d1 	.word	0x080149d1
	case RTC_WEEKDAY_MONDAY:    memcpy(buf, "Lun", 3); break;
 801497c:	463b      	mov	r3, r7
 801497e:	2203      	movs	r2, #3
 8014980:	4976      	ldr	r1, [pc, #472]	; (8014b5c <disp_clock+0x29c>)
 8014982:	4618      	mov	r0, r3
 8014984:	f000 fa8f 	bl	8014ea6 <memcpy>
 8014988:	e029      	b.n	80149de <disp_clock+0x11e>
	case RTC_WEEKDAY_TUESDAY:   memcpy(buf, "Mar", 3); break;
 801498a:	463b      	mov	r3, r7
 801498c:	2203      	movs	r2, #3
 801498e:	4974      	ldr	r1, [pc, #464]	; (8014b60 <disp_clock+0x2a0>)
 8014990:	4618      	mov	r0, r3
 8014992:	f000 fa88 	bl	8014ea6 <memcpy>
 8014996:	e022      	b.n	80149de <disp_clock+0x11e>
	case RTC_WEEKDAY_WEDNESDAY: memcpy(buf, "Mer", 3); break;
 8014998:	463b      	mov	r3, r7
 801499a:	2203      	movs	r2, #3
 801499c:	4971      	ldr	r1, [pc, #452]	; (8014b64 <disp_clock+0x2a4>)
 801499e:	4618      	mov	r0, r3
 80149a0:	f000 fa81 	bl	8014ea6 <memcpy>
 80149a4:	e01b      	b.n	80149de <disp_clock+0x11e>
	case RTC_WEEKDAY_THURSDAY:  memcpy(buf, "Jeu", 3); break;
 80149a6:	463b      	mov	r3, r7
 80149a8:	2203      	movs	r2, #3
 80149aa:	496f      	ldr	r1, [pc, #444]	; (8014b68 <disp_clock+0x2a8>)
 80149ac:	4618      	mov	r0, r3
 80149ae:	f000 fa7a 	bl	8014ea6 <memcpy>
 80149b2:	e014      	b.n	80149de <disp_clock+0x11e>
	case RTC_WEEKDAY_FRIDAY:    memcpy(buf, "Ven", 3); break;
 80149b4:	463b      	mov	r3, r7
 80149b6:	2203      	movs	r2, #3
 80149b8:	496c      	ldr	r1, [pc, #432]	; (8014b6c <disp_clock+0x2ac>)
 80149ba:	4618      	mov	r0, r3
 80149bc:	f000 fa73 	bl	8014ea6 <memcpy>
 80149c0:	e00d      	b.n	80149de <disp_clock+0x11e>
	case RTC_WEEKDAY_SATURDAY:  memcpy(buf, "Sam", 3); break;
 80149c2:	463b      	mov	r3, r7
 80149c4:	2203      	movs	r2, #3
 80149c6:	496a      	ldr	r1, [pc, #424]	; (8014b70 <disp_clock+0x2b0>)
 80149c8:	4618      	mov	r0, r3
 80149ca:	f000 fa6c 	bl	8014ea6 <memcpy>
 80149ce:	e006      	b.n	80149de <disp_clock+0x11e>
	case RTC_WEEKDAY_SUNDAY:    memcpy(buf, "Dim", 3); break;
 80149d0:	463b      	mov	r3, r7
 80149d2:	2203      	movs	r2, #3
 80149d4:	4967      	ldr	r1, [pc, #412]	; (8014b74 <disp_clock+0x2b4>)
 80149d6:	4618      	mov	r0, r3
 80149d8:	f000 fa65 	bl	8014ea6 <memcpy>
 80149dc:	bf00      	nop
	}
	buf[3]=' ';
 80149de:	2320      	movs	r3, #32
 80149e0:	70fb      	strb	r3, [r7, #3]
	bcd_2_char(buf+4, sDate.Date, 2);
 80149e2:	463b      	mov	r3, r7
 80149e4:	3304      	adds	r3, #4
 80149e6:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80149ea:	4611      	mov	r1, r2
 80149ec:	2202      	movs	r2, #2
 80149ee:	4618      	mov	r0, r3
 80149f0:	f7ff fdc2 	bl	8014578 <bcd_2_char>
	buf[6]=' ';
 80149f4:	2320      	movs	r3, #32
 80149f6:	71bb      	strb	r3, [r7, #6]
	switch (sDate.Month) {
 80149f8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80149fc:	3b01      	subs	r3, #1
 80149fe:	2b11      	cmp	r3, #17
 8014a00:	f200 8088 	bhi.w	8014b14 <disp_clock+0x254>
 8014a04:	a201      	add	r2, pc, #4	; (adr r2, 8014a0c <disp_clock+0x14c>)
 8014a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a0a:	bf00      	nop
 8014a0c:	08014a55 	.word	0x08014a55
 8014a10:	08014a65 	.word	0x08014a65
 8014a14:	08014a75 	.word	0x08014a75
 8014a18:	08014a85 	.word	0x08014a85
 8014a1c:	08014a95 	.word	0x08014a95
 8014a20:	08014aa5 	.word	0x08014aa5
 8014a24:	08014ab5 	.word	0x08014ab5
 8014a28:	08014ac5 	.word	0x08014ac5
 8014a2c:	08014ad5 	.word	0x08014ad5
 8014a30:	08014b15 	.word	0x08014b15
 8014a34:	08014b15 	.word	0x08014b15
 8014a38:	08014b15 	.word	0x08014b15
 8014a3c:	08014b15 	.word	0x08014b15
 8014a40:	08014b15 	.word	0x08014b15
 8014a44:	08014b15 	.word	0x08014b15
 8014a48:	08014ae5 	.word	0x08014ae5
 8014a4c:	08014af5 	.word	0x08014af5
 8014a50:	08014b05 	.word	0x08014b05
	case RTC_MONTH_JANUARY:    memcpy(buf+7, "Jan", 3); break;
 8014a54:	463b      	mov	r3, r7
 8014a56:	3307      	adds	r3, #7
 8014a58:	2203      	movs	r2, #3
 8014a5a:	4947      	ldr	r1, [pc, #284]	; (8014b78 <disp_clock+0x2b8>)
 8014a5c:	4618      	mov	r0, r3
 8014a5e:	f000 fa22 	bl	8014ea6 <memcpy>
 8014a62:	e057      	b.n	8014b14 <disp_clock+0x254>
	case RTC_MONTH_FEBRUARY:   memcpy(buf+7, "Fev", 3); break;
 8014a64:	463b      	mov	r3, r7
 8014a66:	3307      	adds	r3, #7
 8014a68:	2203      	movs	r2, #3
 8014a6a:	4944      	ldr	r1, [pc, #272]	; (8014b7c <disp_clock+0x2bc>)
 8014a6c:	4618      	mov	r0, r3
 8014a6e:	f000 fa1a 	bl	8014ea6 <memcpy>
 8014a72:	e04f      	b.n	8014b14 <disp_clock+0x254>
	case RTC_MONTH_MARCH:      memcpy(buf+7, "Mar", 3); break;
 8014a74:	463b      	mov	r3, r7
 8014a76:	3307      	adds	r3, #7
 8014a78:	2203      	movs	r2, #3
 8014a7a:	4939      	ldr	r1, [pc, #228]	; (8014b60 <disp_clock+0x2a0>)
 8014a7c:	4618      	mov	r0, r3
 8014a7e:	f000 fa12 	bl	8014ea6 <memcpy>
 8014a82:	e047      	b.n	8014b14 <disp_clock+0x254>
	case RTC_MONTH_APRIL:      memcpy(buf+7, "Avr", 3); break;
 8014a84:	463b      	mov	r3, r7
 8014a86:	3307      	adds	r3, #7
 8014a88:	2203      	movs	r2, #3
 8014a8a:	493d      	ldr	r1, [pc, #244]	; (8014b80 <disp_clock+0x2c0>)
 8014a8c:	4618      	mov	r0, r3
 8014a8e:	f000 fa0a 	bl	8014ea6 <memcpy>
 8014a92:	e03f      	b.n	8014b14 <disp_clock+0x254>
	case RTC_MONTH_MAY:        memcpy(buf+7, "Mai", 3); break;
 8014a94:	463b      	mov	r3, r7
 8014a96:	3307      	adds	r3, #7
 8014a98:	2203      	movs	r2, #3
 8014a9a:	493a      	ldr	r1, [pc, #232]	; (8014b84 <disp_clock+0x2c4>)
 8014a9c:	4618      	mov	r0, r3
 8014a9e:	f000 fa02 	bl	8014ea6 <memcpy>
 8014aa2:	e037      	b.n	8014b14 <disp_clock+0x254>
	case RTC_MONTH_JUNE:       memcpy(buf+7, "Jun", 3); break;
 8014aa4:	463b      	mov	r3, r7
 8014aa6:	3307      	adds	r3, #7
 8014aa8:	2203      	movs	r2, #3
 8014aaa:	4937      	ldr	r1, [pc, #220]	; (8014b88 <disp_clock+0x2c8>)
 8014aac:	4618      	mov	r0, r3
 8014aae:	f000 f9fa 	bl	8014ea6 <memcpy>
 8014ab2:	e02f      	b.n	8014b14 <disp_clock+0x254>
	case RTC_MONTH_JULY:       memcpy(buf+7, "Jul", 3); break;
 8014ab4:	463b      	mov	r3, r7
 8014ab6:	3307      	adds	r3, #7
 8014ab8:	2203      	movs	r2, #3
 8014aba:	4934      	ldr	r1, [pc, #208]	; (8014b8c <disp_clock+0x2cc>)
 8014abc:	4618      	mov	r0, r3
 8014abe:	f000 f9f2 	bl	8014ea6 <memcpy>
 8014ac2:	e027      	b.n	8014b14 <disp_clock+0x254>
	case RTC_MONTH_AUGUST:     memcpy(buf+7, "Aou", 3); break;
 8014ac4:	463b      	mov	r3, r7
 8014ac6:	3307      	adds	r3, #7
 8014ac8:	2203      	movs	r2, #3
 8014aca:	4931      	ldr	r1, [pc, #196]	; (8014b90 <disp_clock+0x2d0>)
 8014acc:	4618      	mov	r0, r3
 8014ace:	f000 f9ea 	bl	8014ea6 <memcpy>
 8014ad2:	e01f      	b.n	8014b14 <disp_clock+0x254>
	case RTC_MONTH_SEPTEMBER:  memcpy(buf+7, "Sep", 3); break;
 8014ad4:	463b      	mov	r3, r7
 8014ad6:	3307      	adds	r3, #7
 8014ad8:	2203      	movs	r2, #3
 8014ada:	492e      	ldr	r1, [pc, #184]	; (8014b94 <disp_clock+0x2d4>)
 8014adc:	4618      	mov	r0, r3
 8014ade:	f000 f9e2 	bl	8014ea6 <memcpy>
 8014ae2:	e017      	b.n	8014b14 <disp_clock+0x254>
	case RTC_MONTH_OCTOBER:    memcpy(buf+7, "Oct", 3); break;
 8014ae4:	463b      	mov	r3, r7
 8014ae6:	3307      	adds	r3, #7
 8014ae8:	2203      	movs	r2, #3
 8014aea:	492b      	ldr	r1, [pc, #172]	; (8014b98 <disp_clock+0x2d8>)
 8014aec:	4618      	mov	r0, r3
 8014aee:	f000 f9da 	bl	8014ea6 <memcpy>
 8014af2:	e00f      	b.n	8014b14 <disp_clock+0x254>
	case RTC_MONTH_NOVEMBER:   memcpy(buf+7, "Nov", 3); break;
 8014af4:	463b      	mov	r3, r7
 8014af6:	3307      	adds	r3, #7
 8014af8:	2203      	movs	r2, #3
 8014afa:	4928      	ldr	r1, [pc, #160]	; (8014b9c <disp_clock+0x2dc>)
 8014afc:	4618      	mov	r0, r3
 8014afe:	f000 f9d2 	bl	8014ea6 <memcpy>
 8014b02:	e007      	b.n	8014b14 <disp_clock+0x254>
	case RTC_MONTH_DECEMBER:   memcpy(buf+7, "Dec", 3); break;
 8014b04:	463b      	mov	r3, r7
 8014b06:	3307      	adds	r3, #7
 8014b08:	2203      	movs	r2, #3
 8014b0a:	4925      	ldr	r1, [pc, #148]	; (8014ba0 <disp_clock+0x2e0>)
 8014b0c:	4618      	mov	r0, r3
 8014b0e:	f000 f9ca 	bl	8014ea6 <memcpy>
 8014b12:	bf00      	nop
	}
	buf[10]=' ';
 8014b14:	2320      	movs	r3, #32
 8014b16:	72bb      	strb	r3, [r7, #10]
	buf[11]='2';
 8014b18:	2332      	movs	r3, #50	; 0x32
 8014b1a:	72fb      	strb	r3, [r7, #11]
	buf[12]='0';
 8014b1c:	2330      	movs	r3, #48	; 0x30
 8014b1e:	733b      	strb	r3, [r7, #12]
	bcd_2_char(buf+13, sDate.Year, 2);
 8014b20:	463b      	mov	r3, r7
 8014b22:	330d      	adds	r3, #13
 8014b24:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014b28:	4611      	mov	r1, r2
 8014b2a:	2202      	movs	r2, #2
 8014b2c:	4618      	mov	r0, r3
 8014b2e:	f7ff fd23 	bl	8014578 <bcd_2_char>
	buf[15]='\0';
 8014b32:	2300      	movs	r3, #0
 8014b34:	73fb      	strb	r3, [r7, #15]
	ssd1306_SetCursor(20,16);
 8014b36:	2110      	movs	r1, #16
 8014b38:	2014      	movs	r0, #20
 8014b3a:	f7fc fa13 	bl	8010f64 <ssd1306_SetCursor>
	ssd1306_WriteString(buf, Font_7x10, White);
 8014b3e:	4a19      	ldr	r2, [pc, #100]	; (8014ba4 <disp_clock+0x2e4>)
 8014b40:	4638      	mov	r0, r7
 8014b42:	2301      	movs	r3, #1
 8014b44:	ca06      	ldmia	r2, {r1, r2}
 8014b46:	f7fc f9e7 	bl	8010f18 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
		osDelay(1000*1);
		ssd1306_SetContrast(0xFF);
		osDelay(1000*1);
	 */
}
 8014b4a:	bf00      	nop
 8014b4c:	3738      	adds	r7, #56	; 0x38
 8014b4e:	46bd      	mov	sp, r7
 8014b50:	bd80      	pop	{r7, pc}
 8014b52:	bf00      	nop
 8014b54:	20006904 	.word	0x20006904
 8014b58:	2000019c 	.word	0x2000019c
 8014b5c:	0801619c 	.word	0x0801619c
 8014b60:	080161a0 	.word	0x080161a0
 8014b64:	080161a4 	.word	0x080161a4
 8014b68:	080161a8 	.word	0x080161a8
 8014b6c:	080161ac 	.word	0x080161ac
 8014b70:	080161b0 	.word	0x080161b0
 8014b74:	080161b4 	.word	0x080161b4
 8014b78:	080161b8 	.word	0x080161b8
 8014b7c:	080161bc 	.word	0x080161bc
 8014b80:	080161c0 	.word	0x080161c0
 8014b84:	080161c4 	.word	0x080161c4
 8014b88:	080161c8 	.word	0x080161c8
 8014b8c:	080161cc 	.word	0x080161cc
 8014b90:	080161d0 	.word	0x080161d0
 8014b94:	080161d4 	.word	0x080161d4
 8014b98:	080161d8 	.word	0x080161d8
 8014b9c:	080161dc 	.word	0x080161dc
 8014ba0:	080161e0 	.word	0x080161e0
 8014ba4:	20000194 	.word	0x20000194

08014ba8 <StartTxRxFrameTask>:

static void handleRxChars(frame_msg_t *m);
static void _send_bytes(uint8_t *b, int len);

void StartTxRxFrameTask(void *argument)
{
 8014ba8:	b580      	push	{r7, lr}
 8014baa:	b090      	sub	sp, #64	; 0x40
 8014bac:	af00      	add	r7, sp, #0
 8014bae:	6078      	str	r0, [r7, #4]
		osMessageQueuePut(frameQueueHandle, &tx, 0, portMAX_DELAY);
	}
	static frame_msg_t m;
	for (;;) {
		uint8_t msg_prio;
		osStatus_t rc = osMessageQueueGet(frameQueueHandle, &m, &msg_prio, portMAX_DELAY);
 8014bb0:	4b24      	ldr	r3, [pc, #144]	; (8014c44 <StartTxRxFrameTask+0x9c>)
 8014bb2:	6818      	ldr	r0, [r3, #0]
 8014bb4:	f107 0237 	add.w	r2, r7, #55	; 0x37
 8014bb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014bbc:	4922      	ldr	r1, [pc, #136]	; (8014c48 <StartTxRxFrameTask+0xa0>)
 8014bbe:	f7f8 fb5f 	bl	800d280 <osMessageQueueGet>
 8014bc2:	63f8      	str	r0, [r7, #60]	; 0x3c
		num_msg_get++;
 8014bc4:	4b21      	ldr	r3, [pc, #132]	; (8014c4c <StartTxRxFrameTask+0xa4>)
 8014bc6:	681b      	ldr	r3, [r3, #0]
 8014bc8:	3301      	adds	r3, #1
 8014bca:	4a20      	ldr	r2, [pc, #128]	; (8014c4c <StartTxRxFrameTask+0xa4>)
 8014bcc:	6013      	str	r3, [r2, #0]
		flash_led();
 8014bce:	f7fd fa03 	bl	8011fd8 <flash_led>
		if (rc != osOK) {
 8014bd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d005      	beq.n	8014be4 <StartTxRxFrameTask+0x3c>
			num_msg_get_err++;
 8014bd8:	4b1d      	ldr	r3, [pc, #116]	; (8014c50 <StartTxRxFrameTask+0xa8>)
 8014bda:	681b      	ldr	r3, [r3, #0]
 8014bdc:	3301      	adds	r3, #1
 8014bde:	4a1c      	ldr	r2, [pc, #112]	; (8014c50 <StartTxRxFrameTask+0xa8>)
 8014be0:	6013      	str	r3, [r2, #0]
			continue;
 8014be2:	e02e      	b.n	8014c42 <StartTxRxFrameTask+0x9a>
		}
		if (m.t == RXFRAME_CHARS) {
 8014be4:	4b18      	ldr	r3, [pc, #96]	; (8014c48 <StartTxRxFrameTask+0xa0>)
 8014be6:	781b      	ldrb	r3, [r3, #0]
 8014be8:	2bff      	cmp	r3, #255	; 0xff
 8014bea:	d103      	bne.n	8014bf4 <StartTxRxFrameTask+0x4c>
			//debug_info('G', 0, "RXFRM", m.len,0, 0);
			handleRxChars(&m);
 8014bec:	4816      	ldr	r0, [pc, #88]	; (8014c48 <StartTxRxFrameTask+0xa0>)
 8014bee:	f000 f89d 	bl	8014d2c <handleRxChars>
			continue;
 8014bf2:	e026      	b.n	8014c42 <StartTxRxFrameTask+0x9a>
		}
		if (m.t == TXFRAME_TYPE_STAT) {
 8014bf4:	4b14      	ldr	r3, [pc, #80]	; (8014c48 <StartTxRxFrameTask+0xa0>)
 8014bf6:	781b      	ldrb	r3, [r3, #0]
 8014bf8:	2b04      	cmp	r3, #4
 8014bfa:	d11c      	bne.n	8014c36 <StartTxRxFrameTask+0x8e>
			uint32_t t = HAL_GetTick();   // XXX t0
 8014bfc:	f7ed fc70 	bl	80024e0 <HAL_GetTick>
 8014c00:	63b8      	str	r0, [r7, #56]	; 0x38
			uint8_t b[]="|_NG\000X";
 8014c02:	4a14      	ldr	r2, [pc, #80]	; (8014c54 <StartTxRxFrameTask+0xac>)
 8014c04:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014c08:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014c0c:	6018      	str	r0, [r3, #0]
 8014c0e:	3304      	adds	r3, #4
 8014c10:	8019      	strh	r1, [r3, #0]
 8014c12:	3302      	adds	r3, #2
 8014c14:	0c0a      	lsrs	r2, r1, #16
 8014c16:	701a      	strb	r2, [r3, #0]
			//memcpy(b+6, &t, 4);
			_send_bytes(b, 6);
 8014c18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014c1c:	2106      	movs	r1, #6
 8014c1e:	4618      	mov	r0, r3
 8014c20:	f000 f820 	bl	8014c64 <_send_bytes>
			frame_send_stat(_send_bytes, t);
 8014c24:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014c26:	480c      	ldr	r0, [pc, #48]	; (8014c58 <StartTxRxFrameTask+0xb0>)
 8014c28:	f7ff fb49 	bl	80142be <frame_send_stat>
			_send_bytes((uint8_t *)"|", 1);
 8014c2c:	2101      	movs	r1, #1
 8014c2e:	480b      	ldr	r0, [pc, #44]	; (8014c5c <StartTxRxFrameTask+0xb4>)
 8014c30:	f000 f818 	bl	8014c64 <_send_bytes>
 8014c34:	e7bc      	b.n	8014bb0 <StartTxRxFrameTask+0x8>
			continue;
		}
		_send_bytes(m.frm, m.len);
 8014c36:	4b04      	ldr	r3, [pc, #16]	; (8014c48 <StartTxRxFrameTask+0xa0>)
 8014c38:	785b      	ldrb	r3, [r3, #1]
 8014c3a:	4619      	mov	r1, r3
 8014c3c:	4808      	ldr	r0, [pc, #32]	; (8014c60 <StartTxRxFrameTask+0xb8>)
 8014c3e:	f000 f811 	bl	8014c64 <_send_bytes>
	for (;;) {
 8014c42:	e7b5      	b.n	8014bb0 <StartTxRxFrameTask+0x8>
 8014c44:	20005eec 	.word	0x20005eec
 8014c48:	20005324 	.word	0x20005324
 8014c4c:	20005314 	.word	0x20005314
 8014c50:	2000531c 	.word	0x2000531c
 8014c54:	080161e8 	.word	0x080161e8
 8014c58:	08014c65 	.word	0x08014c65
 8014c5c:	080161e4 	.word	0x080161e4
 8014c60:	20005326 	.word	0x20005326

08014c64 <_send_bytes>:
	}
}
//void frame_send_stat(void(*cb)(uint8_t *d, int l));

static void _send_bytes(uint8_t *b, int len)
{
 8014c64:	b580      	push	{r7, lr}
 8014c66:	b084      	sub	sp, #16
 8014c68:	af00      	add	r7, sp, #0
 8014c6a:	6078      	str	r0, [r7, #4]
 8014c6c:	6039      	str	r1, [r7, #0]
	for (;;) {
		uint8_t rc = CDC_Transmit_FS(b, len);
 8014c6e:	683b      	ldr	r3, [r7, #0]
 8014c70:	b29b      	uxth	r3, r3
 8014c72:	4619      	mov	r1, r3
 8014c74:	6878      	ldr	r0, [r7, #4]
 8014c76:	f7fb fb39 	bl	80102ec <CDC_Transmit_FS>
 8014c7a:	4603      	mov	r3, r0
 8014c7c:	73fb      	strb	r3, [r7, #15]
		if (rc != USBD_BUSY) break;
 8014c7e:	7bfb      	ldrb	r3, [r7, #15]
 8014c80:	2b01      	cmp	r3, #1
 8014c82:	d103      	bne.n	8014c8c <_send_bytes+0x28>
		osDelay(1);
 8014c84:	2001      	movs	r0, #1
 8014c86:	f7f8 f9d3 	bl	800d030 <osDelay>
	for (;;) {
 8014c8a:	e7f0      	b.n	8014c6e <_send_bytes+0xa>
		if (rc != USBD_BUSY) break;
 8014c8c:	bf00      	nop
	}
}
 8014c8e:	bf00      	nop
 8014c90:	3710      	adds	r7, #16
 8014c92:	46bd      	mov	sp, r7
 8014c94:	bd80      	pop	{r7, pc}
	...

08014c98 <txframe_send>:

int txframe_queue_full = 0;

void txframe_send(frame_msg_t *m, int discardable)
{
 8014c98:	b580      	push	{r7, lr}
 8014c9a:	b084      	sub	sp, #16
 8014c9c:	af00      	add	r7, sp, #0
 8014c9e:	6078      	str	r0, [r7, #4]
 8014ca0:	6039      	str	r1, [r7, #0]
	int s = osMessageQueueGetSpace(frameQueueHandle);
 8014ca2:	4b1f      	ldr	r3, [pc, #124]	; (8014d20 <txframe_send+0x88>)
 8014ca4:	681b      	ldr	r3, [r3, #0]
 8014ca6:	4618      	mov	r0, r3
 8014ca8:	f7f8 fb5c 	bl	800d364 <osMessageQueueGetSpace>
 8014cac:	4603      	mov	r3, r0
 8014cae:	60fb      	str	r3, [r7, #12]
	if (s<=0) {
 8014cb0:	68fb      	ldr	r3, [r7, #12]
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	dc07      	bgt.n	8014cc6 <txframe_send+0x2e>
		txframe_queue_full++;
 8014cb6:	4b1b      	ldr	r3, [pc, #108]	; (8014d24 <txframe_send+0x8c>)
 8014cb8:	681b      	ldr	r3, [r3, #0]
 8014cba:	3301      	adds	r3, #1
 8014cbc:	4a19      	ldr	r2, [pc, #100]	; (8014d24 <txframe_send+0x8c>)
 8014cbe:	6013      	str	r3, [r2, #0]
		if (discardable) return;
 8014cc0:	683b      	ldr	r3, [r7, #0]
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	d127      	bne.n	8014d16 <txframe_send+0x7e>
	}
	if ((s<=20) && discardable) {
 8014cc6:	68fb      	ldr	r3, [r7, #12]
 8014cc8:	2b14      	cmp	r3, #20
 8014cca:	dc08      	bgt.n	8014cde <txframe_send+0x46>
 8014ccc:	683b      	ldr	r3, [r7, #0]
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	d005      	beq.n	8014cde <txframe_send+0x46>
		// we use a single queue, and no priority available with freertos
		// so we just keep some space for non discardable frames
		txframe_queue_full++;
 8014cd2:	4b14      	ldr	r3, [pc, #80]	; (8014d24 <txframe_send+0x8c>)
 8014cd4:	681b      	ldr	r3, [r3, #0]
 8014cd6:	3301      	adds	r3, #1
 8014cd8:	4a12      	ldr	r2, [pc, #72]	; (8014d24 <txframe_send+0x8c>)
 8014cda:	6013      	str	r3, [r2, #0]
		return;
 8014cdc:	e01c      	b.n	8014d18 <txframe_send+0x80>
	}
	uint32_t t = discardable ? 0 : portMAX_DELAY;
 8014cde:	683b      	ldr	r3, [r7, #0]
 8014ce0:	2b00      	cmp	r3, #0
 8014ce2:	d001      	beq.n	8014ce8 <txframe_send+0x50>
 8014ce4:	2300      	movs	r3, #0
 8014ce6:	e001      	b.n	8014cec <txframe_send+0x54>
 8014ce8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014cec:	60bb      	str	r3, [r7, #8]
	if (m->len>FRM_MAX_LEN) m->len=FRM_MAX_LEN;
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	785b      	ldrb	r3, [r3, #1]
 8014cf2:	2b1f      	cmp	r3, #31
 8014cf4:	d902      	bls.n	8014cfc <txframe_send+0x64>
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	221f      	movs	r2, #31
 8014cfa:	705a      	strb	r2, [r3, #1]
	num_msg_put++;
 8014cfc:	4b0a      	ldr	r3, [pc, #40]	; (8014d28 <txframe_send+0x90>)
 8014cfe:	681b      	ldr	r3, [r3, #0]
 8014d00:	3301      	adds	r3, #1
 8014d02:	4a09      	ldr	r2, [pc, #36]	; (8014d28 <txframe_send+0x90>)
 8014d04:	6013      	str	r3, [r2, #0]
	osMessageQueuePut(frameQueueHandle, m, 0, t);
 8014d06:	4b06      	ldr	r3, [pc, #24]	; (8014d20 <txframe_send+0x88>)
 8014d08:	6818      	ldr	r0, [r3, #0]
 8014d0a:	68bb      	ldr	r3, [r7, #8]
 8014d0c:	2200      	movs	r2, #0
 8014d0e:	6879      	ldr	r1, [r7, #4]
 8014d10:	f7f8 fa42 	bl	800d198 <osMessageQueuePut>
 8014d14:	e000      	b.n	8014d18 <txframe_send+0x80>
		if (discardable) return;
 8014d16:	bf00      	nop
}
 8014d18:	3710      	adds	r7, #16
 8014d1a:	46bd      	mov	sp, r7
 8014d1c:	bd80      	pop	{r7, pc}
 8014d1e:	bf00      	nop
 8014d20:	20005eec 	.word	0x20005eec
 8014d24:	20005320 	.word	0x20005320
 8014d28:	20005318 	.word	0x20005318

08014d2c <handleRxChars>:

/* ------ RX ----- */

static void handleRxChars(frame_msg_t *m)
{
 8014d2c:	b580      	push	{r7, lr}
 8014d2e:	b08e      	sub	sp, #56	; 0x38
 8014d30:	af00      	add	r7, sp, #0
 8014d32:	6078      	str	r0, [r7, #4]
    frame_msg_t frresp;
	frresp.t = TXFRAME_TYPE_RESP;
 8014d34:	2301      	movs	r3, #1
 8014d36:	743b      	strb	r3, [r7, #16]
	/*
	 * int rlen = FRM_MAX_LEN;
	    	frame_process(cRxedChar,m.frm, &rlen);
	 */
	for (int i=0; i<m->len; i++) {
 8014d38:	2300      	movs	r3, #0
 8014d3a:	637b      	str	r3, [r7, #52]	; 0x34
 8014d3c:	e01c      	b.n	8014d78 <handleRxChars+0x4c>
		int rlen = FRM_MAX_LEN;
 8014d3e:	231f      	movs	r3, #31
 8014d40:	60fb      	str	r3, [r7, #12]
		txrx_process_char(m->frm[i], frresp.frm, &rlen);
 8014d42:	687a      	ldr	r2, [r7, #4]
 8014d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d46:	4413      	add	r3, r2
 8014d48:	3302      	adds	r3, #2
 8014d4a:	7818      	ldrb	r0, [r3, #0]
 8014d4c:	f107 020c 	add.w	r2, r7, #12
 8014d50:	f107 0310 	add.w	r3, r7, #16
 8014d54:	3302      	adds	r3, #2
 8014d56:	4619      	mov	r1, r3
 8014d58:	f7fe fe36 	bl	80139c8 <txrx_process_char>
		if (rlen>0) {
 8014d5c:	68fb      	ldr	r3, [r7, #12]
 8014d5e:	2b00      	cmp	r3, #0
 8014d60:	dd07      	ble.n	8014d72 <handleRxChars+0x46>
			//debug_info('G', 0, "RESP", rlen,0, 0);
			// would deadlock if we send (non discardable) through the queue
			//txframe_send_response(&frresp, rlen);
			_send_bytes(frresp.frm, rlen);
 8014d62:	68fa      	ldr	r2, [r7, #12]
 8014d64:	f107 0310 	add.w	r3, r7, #16
 8014d68:	3302      	adds	r3, #2
 8014d6a:	4611      	mov	r1, r2
 8014d6c:	4618      	mov	r0, r3
 8014d6e:	f7ff ff79 	bl	8014c64 <_send_bytes>
	for (int i=0; i<m->len; i++) {
 8014d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d74:	3301      	adds	r3, #1
 8014d76:	637b      	str	r3, [r7, #52]	; 0x34
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	785b      	ldrb	r3, [r3, #1]
 8014d7c:	461a      	mov	r2, r3
 8014d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d80:	4293      	cmp	r3, r2
 8014d82:	dbdc      	blt.n	8014d3e <handleRxChars+0x12>
			//frresp.len = rlen;
			//_send_frm(&frresp);
		}
	}
}
 8014d84:	bf00      	nop
 8014d86:	3738      	adds	r7, #56	; 0x38
 8014d88:	46bd      	mov	sp, r7
 8014d8a:	bd80      	pop	{r7, pc}

08014d8c <impl_CDC_Receive_FS>:

extern USBD_HandleTypeDef hUsbDeviceFS;


int8_t impl_CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8014d8c:	b580      	push	{r7, lr}
 8014d8e:	b086      	sub	sp, #24
 8014d90:	af00      	add	r7, sp, #0
 8014d92:	6078      	str	r0, [r7, #4]
 8014d94:	6039      	str	r1, [r7, #0]
	if ((0)) {
		sprintf(str, "[B%d]\r\n", *Len);
		CDC_Transmit_FS(str, strlen(str));
	}
	*/
	uint8_t *p = Buf;
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	617b      	str	r3, [r7, #20]
	int32_t rlen = *Len;
 8014d9a:	683b      	ldr	r3, [r7, #0]
 8014d9c:	681b      	ldr	r3, [r3, #0]
 8014d9e:	613b      	str	r3, [r7, #16]
	for (;;) {
		//BaseType_t xHigherPriorityTaskWoken = pdFALSE;
		frrx.t = RXFRAME_CHARS;
 8014da0:	4b18      	ldr	r3, [pc, #96]	; (8014e04 <impl_CDC_Receive_FS+0x78>)
 8014da2:	22ff      	movs	r2, #255	; 0xff
 8014da4:	701a      	strb	r2, [r3, #0]
		int l = MIN(rlen, RXFRAME_CHARS);
 8014da6:	693b      	ldr	r3, [r7, #16]
 8014da8:	2bff      	cmp	r3, #255	; 0xff
 8014daa:	bfa8      	it	ge
 8014dac:	23ff      	movge	r3, #255	; 0xff
 8014dae:	60fb      	str	r3, [r7, #12]
		memcpy(frrx.frm, p, l);
 8014db0:	68fb      	ldr	r3, [r7, #12]
 8014db2:	461a      	mov	r2, r3
 8014db4:	6979      	ldr	r1, [r7, #20]
 8014db6:	4814      	ldr	r0, [pc, #80]	; (8014e08 <impl_CDC_Receive_FS+0x7c>)
 8014db8:	f000 f875 	bl	8014ea6 <memcpy>
		rlen -= l;
 8014dbc:	693a      	ldr	r2, [r7, #16]
 8014dbe:	68fb      	ldr	r3, [r7, #12]
 8014dc0:	1ad3      	subs	r3, r2, r3
 8014dc2:	613b      	str	r3, [r7, #16]
		p += l;
 8014dc4:	68fb      	ldr	r3, [r7, #12]
 8014dc6:	697a      	ldr	r2, [r7, #20]
 8014dc8:	4413      	add	r3, r2
 8014dca:	617b      	str	r3, [r7, #20]
		frrx.len = l;
 8014dcc:	68fb      	ldr	r3, [r7, #12]
 8014dce:	b2da      	uxtb	r2, r3
 8014dd0:	4b0c      	ldr	r3, [pc, #48]	; (8014e04 <impl_CDC_Receive_FS+0x78>)
 8014dd2:	705a      	strb	r2, [r3, #1]
		osMessageQueuePut(frameQueueHandle, &frrx, 0, 0);
 8014dd4:	4b0d      	ldr	r3, [pc, #52]	; (8014e0c <impl_CDC_Receive_FS+0x80>)
 8014dd6:	6818      	ldr	r0, [r3, #0]
 8014dd8:	2300      	movs	r3, #0
 8014dda:	2200      	movs	r2, #0
 8014ddc:	4909      	ldr	r1, [pc, #36]	; (8014e04 <impl_CDC_Receive_FS+0x78>)
 8014dde:	f7f8 f9db 	bl	800d198 <osMessageQueuePut>
		if (rlen <= 0) break;
 8014de2:	693b      	ldr	r3, [r7, #16]
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	dd00      	ble.n	8014dea <impl_CDC_Receive_FS+0x5e>
	for (;;) {
 8014de8:	e7da      	b.n	8014da0 <impl_CDC_Receive_FS+0x14>
		if (rlen <= 0) break;
 8014dea:	bf00      	nop
	}

	//CDC_Transmit_FS(Buf, *Len); // ADD THIS LINE to echo back all incoming data

	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8014dec:	6879      	ldr	r1, [r7, #4]
 8014dee:	4808      	ldr	r0, [pc, #32]	; (8014e10 <impl_CDC_Receive_FS+0x84>)
 8014df0:	f7f6 fe94 	bl	800bb1c <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8014df4:	4806      	ldr	r0, [pc, #24]	; (8014e10 <impl_CDC_Receive_FS+0x84>)
 8014df6:	f7f6 fed5 	bl	800bba4 <USBD_CDC_ReceivePacket>

	return (USBD_OK);
 8014dfa:	2300      	movs	r3, #0
}
 8014dfc:	4618      	mov	r0, r3
 8014dfe:	3718      	adds	r7, #24
 8014e00:	46bd      	mov	sp, r7
 8014e02:	bd80      	pop	{r7, pc}
 8014e04:	20005348 	.word	0x20005348
 8014e08:	2000534a 	.word	0x2000534a
 8014e0c:	20005eec 	.word	0x20005eec
 8014e10:	20007230 	.word	0x20007230

08014e14 <__errno>:
 8014e14:	4b01      	ldr	r3, [pc, #4]	; (8014e1c <__errno+0x8>)
 8014e16:	6818      	ldr	r0, [r3, #0]
 8014e18:	4770      	bx	lr
 8014e1a:	bf00      	nop
 8014e1c:	20000580 	.word	0x20000580

08014e20 <__libc_init_array>:
 8014e20:	b570      	push	{r4, r5, r6, lr}
 8014e22:	4e0d      	ldr	r6, [pc, #52]	; (8014e58 <__libc_init_array+0x38>)
 8014e24:	4c0d      	ldr	r4, [pc, #52]	; (8014e5c <__libc_init_array+0x3c>)
 8014e26:	1ba4      	subs	r4, r4, r6
 8014e28:	10a4      	asrs	r4, r4, #2
 8014e2a:	2500      	movs	r5, #0
 8014e2c:	42a5      	cmp	r5, r4
 8014e2e:	d109      	bne.n	8014e44 <__libc_init_array+0x24>
 8014e30:	4e0b      	ldr	r6, [pc, #44]	; (8014e60 <__libc_init_array+0x40>)
 8014e32:	4c0c      	ldr	r4, [pc, #48]	; (8014e64 <__libc_init_array+0x44>)
 8014e34:	f000 fff2 	bl	8015e1c <_init>
 8014e38:	1ba4      	subs	r4, r4, r6
 8014e3a:	10a4      	asrs	r4, r4, #2
 8014e3c:	2500      	movs	r5, #0
 8014e3e:	42a5      	cmp	r5, r4
 8014e40:	d105      	bne.n	8014e4e <__libc_init_array+0x2e>
 8014e42:	bd70      	pop	{r4, r5, r6, pc}
 8014e44:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014e48:	4798      	blx	r3
 8014e4a:	3501      	adds	r5, #1
 8014e4c:	e7ee      	b.n	8014e2c <__libc_init_array+0xc>
 8014e4e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014e52:	4798      	blx	r3
 8014e54:	3501      	adds	r5, #1
 8014e56:	e7f2      	b.n	8014e3e <__libc_init_array+0x1e>
 8014e58:	08017cb8 	.word	0x08017cb8
 8014e5c:	08017cb8 	.word	0x08017cb8
 8014e60:	08017cb8 	.word	0x08017cb8
 8014e64:	08017cbc 	.word	0x08017cbc

08014e68 <malloc>:
 8014e68:	4b02      	ldr	r3, [pc, #8]	; (8014e74 <malloc+0xc>)
 8014e6a:	4601      	mov	r1, r0
 8014e6c:	6818      	ldr	r0, [r3, #0]
 8014e6e:	f000 b87b 	b.w	8014f68 <_malloc_r>
 8014e72:	bf00      	nop
 8014e74:	20000580 	.word	0x20000580

08014e78 <free>:
 8014e78:	4b02      	ldr	r3, [pc, #8]	; (8014e84 <free+0xc>)
 8014e7a:	4601      	mov	r1, r0
 8014e7c:	6818      	ldr	r0, [r3, #0]
 8014e7e:	f000 b825 	b.w	8014ecc <_free_r>
 8014e82:	bf00      	nop
 8014e84:	20000580 	.word	0x20000580

08014e88 <memcmp>:
 8014e88:	b530      	push	{r4, r5, lr}
 8014e8a:	2400      	movs	r4, #0
 8014e8c:	42a2      	cmp	r2, r4
 8014e8e:	d101      	bne.n	8014e94 <memcmp+0xc>
 8014e90:	2000      	movs	r0, #0
 8014e92:	e007      	b.n	8014ea4 <memcmp+0x1c>
 8014e94:	5d03      	ldrb	r3, [r0, r4]
 8014e96:	3401      	adds	r4, #1
 8014e98:	190d      	adds	r5, r1, r4
 8014e9a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8014e9e:	42ab      	cmp	r3, r5
 8014ea0:	d0f4      	beq.n	8014e8c <memcmp+0x4>
 8014ea2:	1b58      	subs	r0, r3, r5
 8014ea4:	bd30      	pop	{r4, r5, pc}

08014ea6 <memcpy>:
 8014ea6:	b510      	push	{r4, lr}
 8014ea8:	1e43      	subs	r3, r0, #1
 8014eaa:	440a      	add	r2, r1
 8014eac:	4291      	cmp	r1, r2
 8014eae:	d100      	bne.n	8014eb2 <memcpy+0xc>
 8014eb0:	bd10      	pop	{r4, pc}
 8014eb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014eb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014eba:	e7f7      	b.n	8014eac <memcpy+0x6>

08014ebc <memset>:
 8014ebc:	4402      	add	r2, r0
 8014ebe:	4603      	mov	r3, r0
 8014ec0:	4293      	cmp	r3, r2
 8014ec2:	d100      	bne.n	8014ec6 <memset+0xa>
 8014ec4:	4770      	bx	lr
 8014ec6:	f803 1b01 	strb.w	r1, [r3], #1
 8014eca:	e7f9      	b.n	8014ec0 <memset+0x4>

08014ecc <_free_r>:
 8014ecc:	b538      	push	{r3, r4, r5, lr}
 8014ece:	4605      	mov	r5, r0
 8014ed0:	2900      	cmp	r1, #0
 8014ed2:	d045      	beq.n	8014f60 <_free_r+0x94>
 8014ed4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014ed8:	1f0c      	subs	r4, r1, #4
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	bfb8      	it	lt
 8014ede:	18e4      	addlt	r4, r4, r3
 8014ee0:	f000 fbf0 	bl	80156c4 <__malloc_lock>
 8014ee4:	4a1f      	ldr	r2, [pc, #124]	; (8014f64 <_free_r+0x98>)
 8014ee6:	6813      	ldr	r3, [r2, #0]
 8014ee8:	4610      	mov	r0, r2
 8014eea:	b933      	cbnz	r3, 8014efa <_free_r+0x2e>
 8014eec:	6063      	str	r3, [r4, #4]
 8014eee:	6014      	str	r4, [r2, #0]
 8014ef0:	4628      	mov	r0, r5
 8014ef2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014ef6:	f000 bbe6 	b.w	80156c6 <__malloc_unlock>
 8014efa:	42a3      	cmp	r3, r4
 8014efc:	d90c      	bls.n	8014f18 <_free_r+0x4c>
 8014efe:	6821      	ldr	r1, [r4, #0]
 8014f00:	1862      	adds	r2, r4, r1
 8014f02:	4293      	cmp	r3, r2
 8014f04:	bf04      	itt	eq
 8014f06:	681a      	ldreq	r2, [r3, #0]
 8014f08:	685b      	ldreq	r3, [r3, #4]
 8014f0a:	6063      	str	r3, [r4, #4]
 8014f0c:	bf04      	itt	eq
 8014f0e:	1852      	addeq	r2, r2, r1
 8014f10:	6022      	streq	r2, [r4, #0]
 8014f12:	6004      	str	r4, [r0, #0]
 8014f14:	e7ec      	b.n	8014ef0 <_free_r+0x24>
 8014f16:	4613      	mov	r3, r2
 8014f18:	685a      	ldr	r2, [r3, #4]
 8014f1a:	b10a      	cbz	r2, 8014f20 <_free_r+0x54>
 8014f1c:	42a2      	cmp	r2, r4
 8014f1e:	d9fa      	bls.n	8014f16 <_free_r+0x4a>
 8014f20:	6819      	ldr	r1, [r3, #0]
 8014f22:	1858      	adds	r0, r3, r1
 8014f24:	42a0      	cmp	r0, r4
 8014f26:	d10b      	bne.n	8014f40 <_free_r+0x74>
 8014f28:	6820      	ldr	r0, [r4, #0]
 8014f2a:	4401      	add	r1, r0
 8014f2c:	1858      	adds	r0, r3, r1
 8014f2e:	4282      	cmp	r2, r0
 8014f30:	6019      	str	r1, [r3, #0]
 8014f32:	d1dd      	bne.n	8014ef0 <_free_r+0x24>
 8014f34:	6810      	ldr	r0, [r2, #0]
 8014f36:	6852      	ldr	r2, [r2, #4]
 8014f38:	605a      	str	r2, [r3, #4]
 8014f3a:	4401      	add	r1, r0
 8014f3c:	6019      	str	r1, [r3, #0]
 8014f3e:	e7d7      	b.n	8014ef0 <_free_r+0x24>
 8014f40:	d902      	bls.n	8014f48 <_free_r+0x7c>
 8014f42:	230c      	movs	r3, #12
 8014f44:	602b      	str	r3, [r5, #0]
 8014f46:	e7d3      	b.n	8014ef0 <_free_r+0x24>
 8014f48:	6820      	ldr	r0, [r4, #0]
 8014f4a:	1821      	adds	r1, r4, r0
 8014f4c:	428a      	cmp	r2, r1
 8014f4e:	bf04      	itt	eq
 8014f50:	6811      	ldreq	r1, [r2, #0]
 8014f52:	6852      	ldreq	r2, [r2, #4]
 8014f54:	6062      	str	r2, [r4, #4]
 8014f56:	bf04      	itt	eq
 8014f58:	1809      	addeq	r1, r1, r0
 8014f5a:	6021      	streq	r1, [r4, #0]
 8014f5c:	605c      	str	r4, [r3, #4]
 8014f5e:	e7c7      	b.n	8014ef0 <_free_r+0x24>
 8014f60:	bd38      	pop	{r3, r4, r5, pc}
 8014f62:	bf00      	nop
 8014f64:	2000536c 	.word	0x2000536c

08014f68 <_malloc_r>:
 8014f68:	b570      	push	{r4, r5, r6, lr}
 8014f6a:	1ccd      	adds	r5, r1, #3
 8014f6c:	f025 0503 	bic.w	r5, r5, #3
 8014f70:	3508      	adds	r5, #8
 8014f72:	2d0c      	cmp	r5, #12
 8014f74:	bf38      	it	cc
 8014f76:	250c      	movcc	r5, #12
 8014f78:	2d00      	cmp	r5, #0
 8014f7a:	4606      	mov	r6, r0
 8014f7c:	db01      	blt.n	8014f82 <_malloc_r+0x1a>
 8014f7e:	42a9      	cmp	r1, r5
 8014f80:	d903      	bls.n	8014f8a <_malloc_r+0x22>
 8014f82:	230c      	movs	r3, #12
 8014f84:	6033      	str	r3, [r6, #0]
 8014f86:	2000      	movs	r0, #0
 8014f88:	bd70      	pop	{r4, r5, r6, pc}
 8014f8a:	f000 fb9b 	bl	80156c4 <__malloc_lock>
 8014f8e:	4a21      	ldr	r2, [pc, #132]	; (8015014 <_malloc_r+0xac>)
 8014f90:	6814      	ldr	r4, [r2, #0]
 8014f92:	4621      	mov	r1, r4
 8014f94:	b991      	cbnz	r1, 8014fbc <_malloc_r+0x54>
 8014f96:	4c20      	ldr	r4, [pc, #128]	; (8015018 <_malloc_r+0xb0>)
 8014f98:	6823      	ldr	r3, [r4, #0]
 8014f9a:	b91b      	cbnz	r3, 8014fa4 <_malloc_r+0x3c>
 8014f9c:	4630      	mov	r0, r6
 8014f9e:	f000 f8cd 	bl	801513c <_sbrk_r>
 8014fa2:	6020      	str	r0, [r4, #0]
 8014fa4:	4629      	mov	r1, r5
 8014fa6:	4630      	mov	r0, r6
 8014fa8:	f000 f8c8 	bl	801513c <_sbrk_r>
 8014fac:	1c43      	adds	r3, r0, #1
 8014fae:	d124      	bne.n	8014ffa <_malloc_r+0x92>
 8014fb0:	230c      	movs	r3, #12
 8014fb2:	6033      	str	r3, [r6, #0]
 8014fb4:	4630      	mov	r0, r6
 8014fb6:	f000 fb86 	bl	80156c6 <__malloc_unlock>
 8014fba:	e7e4      	b.n	8014f86 <_malloc_r+0x1e>
 8014fbc:	680b      	ldr	r3, [r1, #0]
 8014fbe:	1b5b      	subs	r3, r3, r5
 8014fc0:	d418      	bmi.n	8014ff4 <_malloc_r+0x8c>
 8014fc2:	2b0b      	cmp	r3, #11
 8014fc4:	d90f      	bls.n	8014fe6 <_malloc_r+0x7e>
 8014fc6:	600b      	str	r3, [r1, #0]
 8014fc8:	50cd      	str	r5, [r1, r3]
 8014fca:	18cc      	adds	r4, r1, r3
 8014fcc:	4630      	mov	r0, r6
 8014fce:	f000 fb7a 	bl	80156c6 <__malloc_unlock>
 8014fd2:	f104 000b 	add.w	r0, r4, #11
 8014fd6:	1d23      	adds	r3, r4, #4
 8014fd8:	f020 0007 	bic.w	r0, r0, #7
 8014fdc:	1ac3      	subs	r3, r0, r3
 8014fde:	d0d3      	beq.n	8014f88 <_malloc_r+0x20>
 8014fe0:	425a      	negs	r2, r3
 8014fe2:	50e2      	str	r2, [r4, r3]
 8014fe4:	e7d0      	b.n	8014f88 <_malloc_r+0x20>
 8014fe6:	428c      	cmp	r4, r1
 8014fe8:	684b      	ldr	r3, [r1, #4]
 8014fea:	bf16      	itet	ne
 8014fec:	6063      	strne	r3, [r4, #4]
 8014fee:	6013      	streq	r3, [r2, #0]
 8014ff0:	460c      	movne	r4, r1
 8014ff2:	e7eb      	b.n	8014fcc <_malloc_r+0x64>
 8014ff4:	460c      	mov	r4, r1
 8014ff6:	6849      	ldr	r1, [r1, #4]
 8014ff8:	e7cc      	b.n	8014f94 <_malloc_r+0x2c>
 8014ffa:	1cc4      	adds	r4, r0, #3
 8014ffc:	f024 0403 	bic.w	r4, r4, #3
 8015000:	42a0      	cmp	r0, r4
 8015002:	d005      	beq.n	8015010 <_malloc_r+0xa8>
 8015004:	1a21      	subs	r1, r4, r0
 8015006:	4630      	mov	r0, r6
 8015008:	f000 f898 	bl	801513c <_sbrk_r>
 801500c:	3001      	adds	r0, #1
 801500e:	d0cf      	beq.n	8014fb0 <_malloc_r+0x48>
 8015010:	6025      	str	r5, [r4, #0]
 8015012:	e7db      	b.n	8014fcc <_malloc_r+0x64>
 8015014:	2000536c 	.word	0x2000536c
 8015018:	20005370 	.word	0x20005370

0801501c <iprintf>:
 801501c:	b40f      	push	{r0, r1, r2, r3}
 801501e:	4b0a      	ldr	r3, [pc, #40]	; (8015048 <iprintf+0x2c>)
 8015020:	b513      	push	{r0, r1, r4, lr}
 8015022:	681c      	ldr	r4, [r3, #0]
 8015024:	b124      	cbz	r4, 8015030 <iprintf+0x14>
 8015026:	69a3      	ldr	r3, [r4, #24]
 8015028:	b913      	cbnz	r3, 8015030 <iprintf+0x14>
 801502a:	4620      	mov	r0, r4
 801502c:	f000 fa5c 	bl	80154e8 <__sinit>
 8015030:	ab05      	add	r3, sp, #20
 8015032:	9a04      	ldr	r2, [sp, #16]
 8015034:	68a1      	ldr	r1, [r4, #8]
 8015036:	9301      	str	r3, [sp, #4]
 8015038:	4620      	mov	r0, r4
 801503a:	f000 fb6f 	bl	801571c <_vfiprintf_r>
 801503e:	b002      	add	sp, #8
 8015040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015044:	b004      	add	sp, #16
 8015046:	4770      	bx	lr
 8015048:	20000580 	.word	0x20000580

0801504c <putchar>:
 801504c:	b538      	push	{r3, r4, r5, lr}
 801504e:	4b08      	ldr	r3, [pc, #32]	; (8015070 <putchar+0x24>)
 8015050:	681c      	ldr	r4, [r3, #0]
 8015052:	4605      	mov	r5, r0
 8015054:	b124      	cbz	r4, 8015060 <putchar+0x14>
 8015056:	69a3      	ldr	r3, [r4, #24]
 8015058:	b913      	cbnz	r3, 8015060 <putchar+0x14>
 801505a:	4620      	mov	r0, r4
 801505c:	f000 fa44 	bl	80154e8 <__sinit>
 8015060:	68a2      	ldr	r2, [r4, #8]
 8015062:	4629      	mov	r1, r5
 8015064:	4620      	mov	r0, r4
 8015066:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801506a:	f000 bdf5 	b.w	8015c58 <_putc_r>
 801506e:	bf00      	nop
 8015070:	20000580 	.word	0x20000580

08015074 <_puts_r>:
 8015074:	b570      	push	{r4, r5, r6, lr}
 8015076:	460e      	mov	r6, r1
 8015078:	4605      	mov	r5, r0
 801507a:	b118      	cbz	r0, 8015084 <_puts_r+0x10>
 801507c:	6983      	ldr	r3, [r0, #24]
 801507e:	b90b      	cbnz	r3, 8015084 <_puts_r+0x10>
 8015080:	f000 fa32 	bl	80154e8 <__sinit>
 8015084:	69ab      	ldr	r3, [r5, #24]
 8015086:	68ac      	ldr	r4, [r5, #8]
 8015088:	b913      	cbnz	r3, 8015090 <_puts_r+0x1c>
 801508a:	4628      	mov	r0, r5
 801508c:	f000 fa2c 	bl	80154e8 <__sinit>
 8015090:	4b23      	ldr	r3, [pc, #140]	; (8015120 <_puts_r+0xac>)
 8015092:	429c      	cmp	r4, r3
 8015094:	d117      	bne.n	80150c6 <_puts_r+0x52>
 8015096:	686c      	ldr	r4, [r5, #4]
 8015098:	89a3      	ldrh	r3, [r4, #12]
 801509a:	071b      	lsls	r3, r3, #28
 801509c:	d51d      	bpl.n	80150da <_puts_r+0x66>
 801509e:	6923      	ldr	r3, [r4, #16]
 80150a0:	b1db      	cbz	r3, 80150da <_puts_r+0x66>
 80150a2:	3e01      	subs	r6, #1
 80150a4:	68a3      	ldr	r3, [r4, #8]
 80150a6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80150aa:	3b01      	subs	r3, #1
 80150ac:	60a3      	str	r3, [r4, #8]
 80150ae:	b9e9      	cbnz	r1, 80150ec <_puts_r+0x78>
 80150b0:	2b00      	cmp	r3, #0
 80150b2:	da2e      	bge.n	8015112 <_puts_r+0x9e>
 80150b4:	4622      	mov	r2, r4
 80150b6:	210a      	movs	r1, #10
 80150b8:	4628      	mov	r0, r5
 80150ba:	f000 f865 	bl	8015188 <__swbuf_r>
 80150be:	3001      	adds	r0, #1
 80150c0:	d011      	beq.n	80150e6 <_puts_r+0x72>
 80150c2:	200a      	movs	r0, #10
 80150c4:	e011      	b.n	80150ea <_puts_r+0x76>
 80150c6:	4b17      	ldr	r3, [pc, #92]	; (8015124 <_puts_r+0xb0>)
 80150c8:	429c      	cmp	r4, r3
 80150ca:	d101      	bne.n	80150d0 <_puts_r+0x5c>
 80150cc:	68ac      	ldr	r4, [r5, #8]
 80150ce:	e7e3      	b.n	8015098 <_puts_r+0x24>
 80150d0:	4b15      	ldr	r3, [pc, #84]	; (8015128 <_puts_r+0xb4>)
 80150d2:	429c      	cmp	r4, r3
 80150d4:	bf08      	it	eq
 80150d6:	68ec      	ldreq	r4, [r5, #12]
 80150d8:	e7de      	b.n	8015098 <_puts_r+0x24>
 80150da:	4621      	mov	r1, r4
 80150dc:	4628      	mov	r0, r5
 80150de:	f000 f8a5 	bl	801522c <__swsetup_r>
 80150e2:	2800      	cmp	r0, #0
 80150e4:	d0dd      	beq.n	80150a2 <_puts_r+0x2e>
 80150e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80150ea:	bd70      	pop	{r4, r5, r6, pc}
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	da04      	bge.n	80150fa <_puts_r+0x86>
 80150f0:	69a2      	ldr	r2, [r4, #24]
 80150f2:	429a      	cmp	r2, r3
 80150f4:	dc06      	bgt.n	8015104 <_puts_r+0x90>
 80150f6:	290a      	cmp	r1, #10
 80150f8:	d004      	beq.n	8015104 <_puts_r+0x90>
 80150fa:	6823      	ldr	r3, [r4, #0]
 80150fc:	1c5a      	adds	r2, r3, #1
 80150fe:	6022      	str	r2, [r4, #0]
 8015100:	7019      	strb	r1, [r3, #0]
 8015102:	e7cf      	b.n	80150a4 <_puts_r+0x30>
 8015104:	4622      	mov	r2, r4
 8015106:	4628      	mov	r0, r5
 8015108:	f000 f83e 	bl	8015188 <__swbuf_r>
 801510c:	3001      	adds	r0, #1
 801510e:	d1c9      	bne.n	80150a4 <_puts_r+0x30>
 8015110:	e7e9      	b.n	80150e6 <_puts_r+0x72>
 8015112:	6823      	ldr	r3, [r4, #0]
 8015114:	200a      	movs	r0, #10
 8015116:	1c5a      	adds	r2, r3, #1
 8015118:	6022      	str	r2, [r4, #0]
 801511a:	7018      	strb	r0, [r3, #0]
 801511c:	e7e5      	b.n	80150ea <_puts_r+0x76>
 801511e:	bf00      	nop
 8015120:	08017c3c 	.word	0x08017c3c
 8015124:	08017c5c 	.word	0x08017c5c
 8015128:	08017c1c 	.word	0x08017c1c

0801512c <puts>:
 801512c:	4b02      	ldr	r3, [pc, #8]	; (8015138 <puts+0xc>)
 801512e:	4601      	mov	r1, r0
 8015130:	6818      	ldr	r0, [r3, #0]
 8015132:	f7ff bf9f 	b.w	8015074 <_puts_r>
 8015136:	bf00      	nop
 8015138:	20000580 	.word	0x20000580

0801513c <_sbrk_r>:
 801513c:	b538      	push	{r3, r4, r5, lr}
 801513e:	4c06      	ldr	r4, [pc, #24]	; (8015158 <_sbrk_r+0x1c>)
 8015140:	2300      	movs	r3, #0
 8015142:	4605      	mov	r5, r0
 8015144:	4608      	mov	r0, r1
 8015146:	6023      	str	r3, [r4, #0]
 8015148:	f7ed f91e 	bl	8002388 <_sbrk>
 801514c:	1c43      	adds	r3, r0, #1
 801514e:	d102      	bne.n	8015156 <_sbrk_r+0x1a>
 8015150:	6823      	ldr	r3, [r4, #0]
 8015152:	b103      	cbz	r3, 8015156 <_sbrk_r+0x1a>
 8015154:	602b      	str	r3, [r5, #0]
 8015156:	bd38      	pop	{r3, r4, r5, pc}
 8015158:	20008b80 	.word	0x20008b80

0801515c <strncpy>:
 801515c:	b570      	push	{r4, r5, r6, lr}
 801515e:	3901      	subs	r1, #1
 8015160:	4604      	mov	r4, r0
 8015162:	b902      	cbnz	r2, 8015166 <strncpy+0xa>
 8015164:	bd70      	pop	{r4, r5, r6, pc}
 8015166:	4623      	mov	r3, r4
 8015168:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 801516c:	f803 5b01 	strb.w	r5, [r3], #1
 8015170:	1e56      	subs	r6, r2, #1
 8015172:	b92d      	cbnz	r5, 8015180 <strncpy+0x24>
 8015174:	4414      	add	r4, r2
 8015176:	42a3      	cmp	r3, r4
 8015178:	d0f4      	beq.n	8015164 <strncpy+0x8>
 801517a:	f803 5b01 	strb.w	r5, [r3], #1
 801517e:	e7fa      	b.n	8015176 <strncpy+0x1a>
 8015180:	461c      	mov	r4, r3
 8015182:	4632      	mov	r2, r6
 8015184:	e7ed      	b.n	8015162 <strncpy+0x6>
	...

08015188 <__swbuf_r>:
 8015188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801518a:	460e      	mov	r6, r1
 801518c:	4614      	mov	r4, r2
 801518e:	4605      	mov	r5, r0
 8015190:	b118      	cbz	r0, 801519a <__swbuf_r+0x12>
 8015192:	6983      	ldr	r3, [r0, #24]
 8015194:	b90b      	cbnz	r3, 801519a <__swbuf_r+0x12>
 8015196:	f000 f9a7 	bl	80154e8 <__sinit>
 801519a:	4b21      	ldr	r3, [pc, #132]	; (8015220 <__swbuf_r+0x98>)
 801519c:	429c      	cmp	r4, r3
 801519e:	d12a      	bne.n	80151f6 <__swbuf_r+0x6e>
 80151a0:	686c      	ldr	r4, [r5, #4]
 80151a2:	69a3      	ldr	r3, [r4, #24]
 80151a4:	60a3      	str	r3, [r4, #8]
 80151a6:	89a3      	ldrh	r3, [r4, #12]
 80151a8:	071a      	lsls	r2, r3, #28
 80151aa:	d52e      	bpl.n	801520a <__swbuf_r+0x82>
 80151ac:	6923      	ldr	r3, [r4, #16]
 80151ae:	b363      	cbz	r3, 801520a <__swbuf_r+0x82>
 80151b0:	6923      	ldr	r3, [r4, #16]
 80151b2:	6820      	ldr	r0, [r4, #0]
 80151b4:	1ac0      	subs	r0, r0, r3
 80151b6:	6963      	ldr	r3, [r4, #20]
 80151b8:	b2f6      	uxtb	r6, r6
 80151ba:	4283      	cmp	r3, r0
 80151bc:	4637      	mov	r7, r6
 80151be:	dc04      	bgt.n	80151ca <__swbuf_r+0x42>
 80151c0:	4621      	mov	r1, r4
 80151c2:	4628      	mov	r0, r5
 80151c4:	f000 f926 	bl	8015414 <_fflush_r>
 80151c8:	bb28      	cbnz	r0, 8015216 <__swbuf_r+0x8e>
 80151ca:	68a3      	ldr	r3, [r4, #8]
 80151cc:	3b01      	subs	r3, #1
 80151ce:	60a3      	str	r3, [r4, #8]
 80151d0:	6823      	ldr	r3, [r4, #0]
 80151d2:	1c5a      	adds	r2, r3, #1
 80151d4:	6022      	str	r2, [r4, #0]
 80151d6:	701e      	strb	r6, [r3, #0]
 80151d8:	6963      	ldr	r3, [r4, #20]
 80151da:	3001      	adds	r0, #1
 80151dc:	4283      	cmp	r3, r0
 80151de:	d004      	beq.n	80151ea <__swbuf_r+0x62>
 80151e0:	89a3      	ldrh	r3, [r4, #12]
 80151e2:	07db      	lsls	r3, r3, #31
 80151e4:	d519      	bpl.n	801521a <__swbuf_r+0x92>
 80151e6:	2e0a      	cmp	r6, #10
 80151e8:	d117      	bne.n	801521a <__swbuf_r+0x92>
 80151ea:	4621      	mov	r1, r4
 80151ec:	4628      	mov	r0, r5
 80151ee:	f000 f911 	bl	8015414 <_fflush_r>
 80151f2:	b190      	cbz	r0, 801521a <__swbuf_r+0x92>
 80151f4:	e00f      	b.n	8015216 <__swbuf_r+0x8e>
 80151f6:	4b0b      	ldr	r3, [pc, #44]	; (8015224 <__swbuf_r+0x9c>)
 80151f8:	429c      	cmp	r4, r3
 80151fa:	d101      	bne.n	8015200 <__swbuf_r+0x78>
 80151fc:	68ac      	ldr	r4, [r5, #8]
 80151fe:	e7d0      	b.n	80151a2 <__swbuf_r+0x1a>
 8015200:	4b09      	ldr	r3, [pc, #36]	; (8015228 <__swbuf_r+0xa0>)
 8015202:	429c      	cmp	r4, r3
 8015204:	bf08      	it	eq
 8015206:	68ec      	ldreq	r4, [r5, #12]
 8015208:	e7cb      	b.n	80151a2 <__swbuf_r+0x1a>
 801520a:	4621      	mov	r1, r4
 801520c:	4628      	mov	r0, r5
 801520e:	f000 f80d 	bl	801522c <__swsetup_r>
 8015212:	2800      	cmp	r0, #0
 8015214:	d0cc      	beq.n	80151b0 <__swbuf_r+0x28>
 8015216:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801521a:	4638      	mov	r0, r7
 801521c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801521e:	bf00      	nop
 8015220:	08017c3c 	.word	0x08017c3c
 8015224:	08017c5c 	.word	0x08017c5c
 8015228:	08017c1c 	.word	0x08017c1c

0801522c <__swsetup_r>:
 801522c:	4b32      	ldr	r3, [pc, #200]	; (80152f8 <__swsetup_r+0xcc>)
 801522e:	b570      	push	{r4, r5, r6, lr}
 8015230:	681d      	ldr	r5, [r3, #0]
 8015232:	4606      	mov	r6, r0
 8015234:	460c      	mov	r4, r1
 8015236:	b125      	cbz	r5, 8015242 <__swsetup_r+0x16>
 8015238:	69ab      	ldr	r3, [r5, #24]
 801523a:	b913      	cbnz	r3, 8015242 <__swsetup_r+0x16>
 801523c:	4628      	mov	r0, r5
 801523e:	f000 f953 	bl	80154e8 <__sinit>
 8015242:	4b2e      	ldr	r3, [pc, #184]	; (80152fc <__swsetup_r+0xd0>)
 8015244:	429c      	cmp	r4, r3
 8015246:	d10f      	bne.n	8015268 <__swsetup_r+0x3c>
 8015248:	686c      	ldr	r4, [r5, #4]
 801524a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801524e:	b29a      	uxth	r2, r3
 8015250:	0715      	lsls	r5, r2, #28
 8015252:	d42c      	bmi.n	80152ae <__swsetup_r+0x82>
 8015254:	06d0      	lsls	r0, r2, #27
 8015256:	d411      	bmi.n	801527c <__swsetup_r+0x50>
 8015258:	2209      	movs	r2, #9
 801525a:	6032      	str	r2, [r6, #0]
 801525c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015260:	81a3      	strh	r3, [r4, #12]
 8015262:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015266:	e03e      	b.n	80152e6 <__swsetup_r+0xba>
 8015268:	4b25      	ldr	r3, [pc, #148]	; (8015300 <__swsetup_r+0xd4>)
 801526a:	429c      	cmp	r4, r3
 801526c:	d101      	bne.n	8015272 <__swsetup_r+0x46>
 801526e:	68ac      	ldr	r4, [r5, #8]
 8015270:	e7eb      	b.n	801524a <__swsetup_r+0x1e>
 8015272:	4b24      	ldr	r3, [pc, #144]	; (8015304 <__swsetup_r+0xd8>)
 8015274:	429c      	cmp	r4, r3
 8015276:	bf08      	it	eq
 8015278:	68ec      	ldreq	r4, [r5, #12]
 801527a:	e7e6      	b.n	801524a <__swsetup_r+0x1e>
 801527c:	0751      	lsls	r1, r2, #29
 801527e:	d512      	bpl.n	80152a6 <__swsetup_r+0x7a>
 8015280:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015282:	b141      	cbz	r1, 8015296 <__swsetup_r+0x6a>
 8015284:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015288:	4299      	cmp	r1, r3
 801528a:	d002      	beq.n	8015292 <__swsetup_r+0x66>
 801528c:	4630      	mov	r0, r6
 801528e:	f7ff fe1d 	bl	8014ecc <_free_r>
 8015292:	2300      	movs	r3, #0
 8015294:	6363      	str	r3, [r4, #52]	; 0x34
 8015296:	89a3      	ldrh	r3, [r4, #12]
 8015298:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801529c:	81a3      	strh	r3, [r4, #12]
 801529e:	2300      	movs	r3, #0
 80152a0:	6063      	str	r3, [r4, #4]
 80152a2:	6923      	ldr	r3, [r4, #16]
 80152a4:	6023      	str	r3, [r4, #0]
 80152a6:	89a3      	ldrh	r3, [r4, #12]
 80152a8:	f043 0308 	orr.w	r3, r3, #8
 80152ac:	81a3      	strh	r3, [r4, #12]
 80152ae:	6923      	ldr	r3, [r4, #16]
 80152b0:	b94b      	cbnz	r3, 80152c6 <__swsetup_r+0x9a>
 80152b2:	89a3      	ldrh	r3, [r4, #12]
 80152b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80152b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80152bc:	d003      	beq.n	80152c6 <__swsetup_r+0x9a>
 80152be:	4621      	mov	r1, r4
 80152c0:	4630      	mov	r0, r6
 80152c2:	f000 f9bf 	bl	8015644 <__smakebuf_r>
 80152c6:	89a2      	ldrh	r2, [r4, #12]
 80152c8:	f012 0301 	ands.w	r3, r2, #1
 80152cc:	d00c      	beq.n	80152e8 <__swsetup_r+0xbc>
 80152ce:	2300      	movs	r3, #0
 80152d0:	60a3      	str	r3, [r4, #8]
 80152d2:	6963      	ldr	r3, [r4, #20]
 80152d4:	425b      	negs	r3, r3
 80152d6:	61a3      	str	r3, [r4, #24]
 80152d8:	6923      	ldr	r3, [r4, #16]
 80152da:	b953      	cbnz	r3, 80152f2 <__swsetup_r+0xc6>
 80152dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80152e0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80152e4:	d1ba      	bne.n	801525c <__swsetup_r+0x30>
 80152e6:	bd70      	pop	{r4, r5, r6, pc}
 80152e8:	0792      	lsls	r2, r2, #30
 80152ea:	bf58      	it	pl
 80152ec:	6963      	ldrpl	r3, [r4, #20]
 80152ee:	60a3      	str	r3, [r4, #8]
 80152f0:	e7f2      	b.n	80152d8 <__swsetup_r+0xac>
 80152f2:	2000      	movs	r0, #0
 80152f4:	e7f7      	b.n	80152e6 <__swsetup_r+0xba>
 80152f6:	bf00      	nop
 80152f8:	20000580 	.word	0x20000580
 80152fc:	08017c3c 	.word	0x08017c3c
 8015300:	08017c5c 	.word	0x08017c5c
 8015304:	08017c1c 	.word	0x08017c1c

08015308 <__sflush_r>:
 8015308:	898a      	ldrh	r2, [r1, #12]
 801530a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801530e:	4605      	mov	r5, r0
 8015310:	0710      	lsls	r0, r2, #28
 8015312:	460c      	mov	r4, r1
 8015314:	d458      	bmi.n	80153c8 <__sflush_r+0xc0>
 8015316:	684b      	ldr	r3, [r1, #4]
 8015318:	2b00      	cmp	r3, #0
 801531a:	dc05      	bgt.n	8015328 <__sflush_r+0x20>
 801531c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801531e:	2b00      	cmp	r3, #0
 8015320:	dc02      	bgt.n	8015328 <__sflush_r+0x20>
 8015322:	2000      	movs	r0, #0
 8015324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015328:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801532a:	2e00      	cmp	r6, #0
 801532c:	d0f9      	beq.n	8015322 <__sflush_r+0x1a>
 801532e:	2300      	movs	r3, #0
 8015330:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015334:	682f      	ldr	r7, [r5, #0]
 8015336:	6a21      	ldr	r1, [r4, #32]
 8015338:	602b      	str	r3, [r5, #0]
 801533a:	d032      	beq.n	80153a2 <__sflush_r+0x9a>
 801533c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801533e:	89a3      	ldrh	r3, [r4, #12]
 8015340:	075a      	lsls	r2, r3, #29
 8015342:	d505      	bpl.n	8015350 <__sflush_r+0x48>
 8015344:	6863      	ldr	r3, [r4, #4]
 8015346:	1ac0      	subs	r0, r0, r3
 8015348:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801534a:	b10b      	cbz	r3, 8015350 <__sflush_r+0x48>
 801534c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801534e:	1ac0      	subs	r0, r0, r3
 8015350:	2300      	movs	r3, #0
 8015352:	4602      	mov	r2, r0
 8015354:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015356:	6a21      	ldr	r1, [r4, #32]
 8015358:	4628      	mov	r0, r5
 801535a:	47b0      	blx	r6
 801535c:	1c43      	adds	r3, r0, #1
 801535e:	89a3      	ldrh	r3, [r4, #12]
 8015360:	d106      	bne.n	8015370 <__sflush_r+0x68>
 8015362:	6829      	ldr	r1, [r5, #0]
 8015364:	291d      	cmp	r1, #29
 8015366:	d848      	bhi.n	80153fa <__sflush_r+0xf2>
 8015368:	4a29      	ldr	r2, [pc, #164]	; (8015410 <__sflush_r+0x108>)
 801536a:	40ca      	lsrs	r2, r1
 801536c:	07d6      	lsls	r6, r2, #31
 801536e:	d544      	bpl.n	80153fa <__sflush_r+0xf2>
 8015370:	2200      	movs	r2, #0
 8015372:	6062      	str	r2, [r4, #4]
 8015374:	04d9      	lsls	r1, r3, #19
 8015376:	6922      	ldr	r2, [r4, #16]
 8015378:	6022      	str	r2, [r4, #0]
 801537a:	d504      	bpl.n	8015386 <__sflush_r+0x7e>
 801537c:	1c42      	adds	r2, r0, #1
 801537e:	d101      	bne.n	8015384 <__sflush_r+0x7c>
 8015380:	682b      	ldr	r3, [r5, #0]
 8015382:	b903      	cbnz	r3, 8015386 <__sflush_r+0x7e>
 8015384:	6560      	str	r0, [r4, #84]	; 0x54
 8015386:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015388:	602f      	str	r7, [r5, #0]
 801538a:	2900      	cmp	r1, #0
 801538c:	d0c9      	beq.n	8015322 <__sflush_r+0x1a>
 801538e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015392:	4299      	cmp	r1, r3
 8015394:	d002      	beq.n	801539c <__sflush_r+0x94>
 8015396:	4628      	mov	r0, r5
 8015398:	f7ff fd98 	bl	8014ecc <_free_r>
 801539c:	2000      	movs	r0, #0
 801539e:	6360      	str	r0, [r4, #52]	; 0x34
 80153a0:	e7c0      	b.n	8015324 <__sflush_r+0x1c>
 80153a2:	2301      	movs	r3, #1
 80153a4:	4628      	mov	r0, r5
 80153a6:	47b0      	blx	r6
 80153a8:	1c41      	adds	r1, r0, #1
 80153aa:	d1c8      	bne.n	801533e <__sflush_r+0x36>
 80153ac:	682b      	ldr	r3, [r5, #0]
 80153ae:	2b00      	cmp	r3, #0
 80153b0:	d0c5      	beq.n	801533e <__sflush_r+0x36>
 80153b2:	2b1d      	cmp	r3, #29
 80153b4:	d001      	beq.n	80153ba <__sflush_r+0xb2>
 80153b6:	2b16      	cmp	r3, #22
 80153b8:	d101      	bne.n	80153be <__sflush_r+0xb6>
 80153ba:	602f      	str	r7, [r5, #0]
 80153bc:	e7b1      	b.n	8015322 <__sflush_r+0x1a>
 80153be:	89a3      	ldrh	r3, [r4, #12]
 80153c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80153c4:	81a3      	strh	r3, [r4, #12]
 80153c6:	e7ad      	b.n	8015324 <__sflush_r+0x1c>
 80153c8:	690f      	ldr	r7, [r1, #16]
 80153ca:	2f00      	cmp	r7, #0
 80153cc:	d0a9      	beq.n	8015322 <__sflush_r+0x1a>
 80153ce:	0793      	lsls	r3, r2, #30
 80153d0:	680e      	ldr	r6, [r1, #0]
 80153d2:	bf08      	it	eq
 80153d4:	694b      	ldreq	r3, [r1, #20]
 80153d6:	600f      	str	r7, [r1, #0]
 80153d8:	bf18      	it	ne
 80153da:	2300      	movne	r3, #0
 80153dc:	eba6 0807 	sub.w	r8, r6, r7
 80153e0:	608b      	str	r3, [r1, #8]
 80153e2:	f1b8 0f00 	cmp.w	r8, #0
 80153e6:	dd9c      	ble.n	8015322 <__sflush_r+0x1a>
 80153e8:	4643      	mov	r3, r8
 80153ea:	463a      	mov	r2, r7
 80153ec:	6a21      	ldr	r1, [r4, #32]
 80153ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80153f0:	4628      	mov	r0, r5
 80153f2:	47b0      	blx	r6
 80153f4:	2800      	cmp	r0, #0
 80153f6:	dc06      	bgt.n	8015406 <__sflush_r+0xfe>
 80153f8:	89a3      	ldrh	r3, [r4, #12]
 80153fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80153fe:	81a3      	strh	r3, [r4, #12]
 8015400:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015404:	e78e      	b.n	8015324 <__sflush_r+0x1c>
 8015406:	4407      	add	r7, r0
 8015408:	eba8 0800 	sub.w	r8, r8, r0
 801540c:	e7e9      	b.n	80153e2 <__sflush_r+0xda>
 801540e:	bf00      	nop
 8015410:	20400001 	.word	0x20400001

08015414 <_fflush_r>:
 8015414:	b538      	push	{r3, r4, r5, lr}
 8015416:	690b      	ldr	r3, [r1, #16]
 8015418:	4605      	mov	r5, r0
 801541a:	460c      	mov	r4, r1
 801541c:	b1db      	cbz	r3, 8015456 <_fflush_r+0x42>
 801541e:	b118      	cbz	r0, 8015428 <_fflush_r+0x14>
 8015420:	6983      	ldr	r3, [r0, #24]
 8015422:	b90b      	cbnz	r3, 8015428 <_fflush_r+0x14>
 8015424:	f000 f860 	bl	80154e8 <__sinit>
 8015428:	4b0c      	ldr	r3, [pc, #48]	; (801545c <_fflush_r+0x48>)
 801542a:	429c      	cmp	r4, r3
 801542c:	d109      	bne.n	8015442 <_fflush_r+0x2e>
 801542e:	686c      	ldr	r4, [r5, #4]
 8015430:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015434:	b17b      	cbz	r3, 8015456 <_fflush_r+0x42>
 8015436:	4621      	mov	r1, r4
 8015438:	4628      	mov	r0, r5
 801543a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801543e:	f7ff bf63 	b.w	8015308 <__sflush_r>
 8015442:	4b07      	ldr	r3, [pc, #28]	; (8015460 <_fflush_r+0x4c>)
 8015444:	429c      	cmp	r4, r3
 8015446:	d101      	bne.n	801544c <_fflush_r+0x38>
 8015448:	68ac      	ldr	r4, [r5, #8]
 801544a:	e7f1      	b.n	8015430 <_fflush_r+0x1c>
 801544c:	4b05      	ldr	r3, [pc, #20]	; (8015464 <_fflush_r+0x50>)
 801544e:	429c      	cmp	r4, r3
 8015450:	bf08      	it	eq
 8015452:	68ec      	ldreq	r4, [r5, #12]
 8015454:	e7ec      	b.n	8015430 <_fflush_r+0x1c>
 8015456:	2000      	movs	r0, #0
 8015458:	bd38      	pop	{r3, r4, r5, pc}
 801545a:	bf00      	nop
 801545c:	08017c3c 	.word	0x08017c3c
 8015460:	08017c5c 	.word	0x08017c5c
 8015464:	08017c1c 	.word	0x08017c1c

08015468 <std>:
 8015468:	2300      	movs	r3, #0
 801546a:	b510      	push	{r4, lr}
 801546c:	4604      	mov	r4, r0
 801546e:	e9c0 3300 	strd	r3, r3, [r0]
 8015472:	6083      	str	r3, [r0, #8]
 8015474:	8181      	strh	r1, [r0, #12]
 8015476:	6643      	str	r3, [r0, #100]	; 0x64
 8015478:	81c2      	strh	r2, [r0, #14]
 801547a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801547e:	6183      	str	r3, [r0, #24]
 8015480:	4619      	mov	r1, r3
 8015482:	2208      	movs	r2, #8
 8015484:	305c      	adds	r0, #92	; 0x5c
 8015486:	f7ff fd19 	bl	8014ebc <memset>
 801548a:	4b05      	ldr	r3, [pc, #20]	; (80154a0 <std+0x38>)
 801548c:	6263      	str	r3, [r4, #36]	; 0x24
 801548e:	4b05      	ldr	r3, [pc, #20]	; (80154a4 <std+0x3c>)
 8015490:	62a3      	str	r3, [r4, #40]	; 0x28
 8015492:	4b05      	ldr	r3, [pc, #20]	; (80154a8 <std+0x40>)
 8015494:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015496:	4b05      	ldr	r3, [pc, #20]	; (80154ac <std+0x44>)
 8015498:	6224      	str	r4, [r4, #32]
 801549a:	6323      	str	r3, [r4, #48]	; 0x30
 801549c:	bd10      	pop	{r4, pc}
 801549e:	bf00      	nop
 80154a0:	08015cc5 	.word	0x08015cc5
 80154a4:	08015ce7 	.word	0x08015ce7
 80154a8:	08015d1f 	.word	0x08015d1f
 80154ac:	08015d43 	.word	0x08015d43

080154b0 <_cleanup_r>:
 80154b0:	4901      	ldr	r1, [pc, #4]	; (80154b8 <_cleanup_r+0x8>)
 80154b2:	f000 b885 	b.w	80155c0 <_fwalk_reent>
 80154b6:	bf00      	nop
 80154b8:	08015415 	.word	0x08015415

080154bc <__sfmoreglue>:
 80154bc:	b570      	push	{r4, r5, r6, lr}
 80154be:	1e4a      	subs	r2, r1, #1
 80154c0:	2568      	movs	r5, #104	; 0x68
 80154c2:	4355      	muls	r5, r2
 80154c4:	460e      	mov	r6, r1
 80154c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80154ca:	f7ff fd4d 	bl	8014f68 <_malloc_r>
 80154ce:	4604      	mov	r4, r0
 80154d0:	b140      	cbz	r0, 80154e4 <__sfmoreglue+0x28>
 80154d2:	2100      	movs	r1, #0
 80154d4:	e9c0 1600 	strd	r1, r6, [r0]
 80154d8:	300c      	adds	r0, #12
 80154da:	60a0      	str	r0, [r4, #8]
 80154dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80154e0:	f7ff fcec 	bl	8014ebc <memset>
 80154e4:	4620      	mov	r0, r4
 80154e6:	bd70      	pop	{r4, r5, r6, pc}

080154e8 <__sinit>:
 80154e8:	6983      	ldr	r3, [r0, #24]
 80154ea:	b510      	push	{r4, lr}
 80154ec:	4604      	mov	r4, r0
 80154ee:	bb33      	cbnz	r3, 801553e <__sinit+0x56>
 80154f0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80154f4:	6503      	str	r3, [r0, #80]	; 0x50
 80154f6:	4b12      	ldr	r3, [pc, #72]	; (8015540 <__sinit+0x58>)
 80154f8:	4a12      	ldr	r2, [pc, #72]	; (8015544 <__sinit+0x5c>)
 80154fa:	681b      	ldr	r3, [r3, #0]
 80154fc:	6282      	str	r2, [r0, #40]	; 0x28
 80154fe:	4298      	cmp	r0, r3
 8015500:	bf04      	itt	eq
 8015502:	2301      	moveq	r3, #1
 8015504:	6183      	streq	r3, [r0, #24]
 8015506:	f000 f81f 	bl	8015548 <__sfp>
 801550a:	6060      	str	r0, [r4, #4]
 801550c:	4620      	mov	r0, r4
 801550e:	f000 f81b 	bl	8015548 <__sfp>
 8015512:	60a0      	str	r0, [r4, #8]
 8015514:	4620      	mov	r0, r4
 8015516:	f000 f817 	bl	8015548 <__sfp>
 801551a:	2200      	movs	r2, #0
 801551c:	60e0      	str	r0, [r4, #12]
 801551e:	2104      	movs	r1, #4
 8015520:	6860      	ldr	r0, [r4, #4]
 8015522:	f7ff ffa1 	bl	8015468 <std>
 8015526:	2201      	movs	r2, #1
 8015528:	2109      	movs	r1, #9
 801552a:	68a0      	ldr	r0, [r4, #8]
 801552c:	f7ff ff9c 	bl	8015468 <std>
 8015530:	2202      	movs	r2, #2
 8015532:	2112      	movs	r1, #18
 8015534:	68e0      	ldr	r0, [r4, #12]
 8015536:	f7ff ff97 	bl	8015468 <std>
 801553a:	2301      	movs	r3, #1
 801553c:	61a3      	str	r3, [r4, #24]
 801553e:	bd10      	pop	{r4, pc}
 8015540:	08017c18 	.word	0x08017c18
 8015544:	080154b1 	.word	0x080154b1

08015548 <__sfp>:
 8015548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801554a:	4b1b      	ldr	r3, [pc, #108]	; (80155b8 <__sfp+0x70>)
 801554c:	681e      	ldr	r6, [r3, #0]
 801554e:	69b3      	ldr	r3, [r6, #24]
 8015550:	4607      	mov	r7, r0
 8015552:	b913      	cbnz	r3, 801555a <__sfp+0x12>
 8015554:	4630      	mov	r0, r6
 8015556:	f7ff ffc7 	bl	80154e8 <__sinit>
 801555a:	3648      	adds	r6, #72	; 0x48
 801555c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015560:	3b01      	subs	r3, #1
 8015562:	d503      	bpl.n	801556c <__sfp+0x24>
 8015564:	6833      	ldr	r3, [r6, #0]
 8015566:	b133      	cbz	r3, 8015576 <__sfp+0x2e>
 8015568:	6836      	ldr	r6, [r6, #0]
 801556a:	e7f7      	b.n	801555c <__sfp+0x14>
 801556c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015570:	b16d      	cbz	r5, 801558e <__sfp+0x46>
 8015572:	3468      	adds	r4, #104	; 0x68
 8015574:	e7f4      	b.n	8015560 <__sfp+0x18>
 8015576:	2104      	movs	r1, #4
 8015578:	4638      	mov	r0, r7
 801557a:	f7ff ff9f 	bl	80154bc <__sfmoreglue>
 801557e:	6030      	str	r0, [r6, #0]
 8015580:	2800      	cmp	r0, #0
 8015582:	d1f1      	bne.n	8015568 <__sfp+0x20>
 8015584:	230c      	movs	r3, #12
 8015586:	603b      	str	r3, [r7, #0]
 8015588:	4604      	mov	r4, r0
 801558a:	4620      	mov	r0, r4
 801558c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801558e:	4b0b      	ldr	r3, [pc, #44]	; (80155bc <__sfp+0x74>)
 8015590:	6665      	str	r5, [r4, #100]	; 0x64
 8015592:	e9c4 5500 	strd	r5, r5, [r4]
 8015596:	60a5      	str	r5, [r4, #8]
 8015598:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801559c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80155a0:	2208      	movs	r2, #8
 80155a2:	4629      	mov	r1, r5
 80155a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80155a8:	f7ff fc88 	bl	8014ebc <memset>
 80155ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80155b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80155b4:	e7e9      	b.n	801558a <__sfp+0x42>
 80155b6:	bf00      	nop
 80155b8:	08017c18 	.word	0x08017c18
 80155bc:	ffff0001 	.word	0xffff0001

080155c0 <_fwalk_reent>:
 80155c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80155c4:	4680      	mov	r8, r0
 80155c6:	4689      	mov	r9, r1
 80155c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80155cc:	2600      	movs	r6, #0
 80155ce:	b914      	cbnz	r4, 80155d6 <_fwalk_reent+0x16>
 80155d0:	4630      	mov	r0, r6
 80155d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80155d6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80155da:	3f01      	subs	r7, #1
 80155dc:	d501      	bpl.n	80155e2 <_fwalk_reent+0x22>
 80155de:	6824      	ldr	r4, [r4, #0]
 80155e0:	e7f5      	b.n	80155ce <_fwalk_reent+0xe>
 80155e2:	89ab      	ldrh	r3, [r5, #12]
 80155e4:	2b01      	cmp	r3, #1
 80155e6:	d907      	bls.n	80155f8 <_fwalk_reent+0x38>
 80155e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80155ec:	3301      	adds	r3, #1
 80155ee:	d003      	beq.n	80155f8 <_fwalk_reent+0x38>
 80155f0:	4629      	mov	r1, r5
 80155f2:	4640      	mov	r0, r8
 80155f4:	47c8      	blx	r9
 80155f6:	4306      	orrs	r6, r0
 80155f8:	3568      	adds	r5, #104	; 0x68
 80155fa:	e7ee      	b.n	80155da <_fwalk_reent+0x1a>

080155fc <__swhatbuf_r>:
 80155fc:	b570      	push	{r4, r5, r6, lr}
 80155fe:	460e      	mov	r6, r1
 8015600:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015604:	2900      	cmp	r1, #0
 8015606:	b096      	sub	sp, #88	; 0x58
 8015608:	4614      	mov	r4, r2
 801560a:	461d      	mov	r5, r3
 801560c:	da07      	bge.n	801561e <__swhatbuf_r+0x22>
 801560e:	2300      	movs	r3, #0
 8015610:	602b      	str	r3, [r5, #0]
 8015612:	89b3      	ldrh	r3, [r6, #12]
 8015614:	061a      	lsls	r2, r3, #24
 8015616:	d410      	bmi.n	801563a <__swhatbuf_r+0x3e>
 8015618:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801561c:	e00e      	b.n	801563c <__swhatbuf_r+0x40>
 801561e:	466a      	mov	r2, sp
 8015620:	f000 fbb6 	bl	8015d90 <_fstat_r>
 8015624:	2800      	cmp	r0, #0
 8015626:	dbf2      	blt.n	801560e <__swhatbuf_r+0x12>
 8015628:	9a01      	ldr	r2, [sp, #4]
 801562a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801562e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015632:	425a      	negs	r2, r3
 8015634:	415a      	adcs	r2, r3
 8015636:	602a      	str	r2, [r5, #0]
 8015638:	e7ee      	b.n	8015618 <__swhatbuf_r+0x1c>
 801563a:	2340      	movs	r3, #64	; 0x40
 801563c:	2000      	movs	r0, #0
 801563e:	6023      	str	r3, [r4, #0]
 8015640:	b016      	add	sp, #88	; 0x58
 8015642:	bd70      	pop	{r4, r5, r6, pc}

08015644 <__smakebuf_r>:
 8015644:	898b      	ldrh	r3, [r1, #12]
 8015646:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015648:	079d      	lsls	r5, r3, #30
 801564a:	4606      	mov	r6, r0
 801564c:	460c      	mov	r4, r1
 801564e:	d507      	bpl.n	8015660 <__smakebuf_r+0x1c>
 8015650:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015654:	6023      	str	r3, [r4, #0]
 8015656:	6123      	str	r3, [r4, #16]
 8015658:	2301      	movs	r3, #1
 801565a:	6163      	str	r3, [r4, #20]
 801565c:	b002      	add	sp, #8
 801565e:	bd70      	pop	{r4, r5, r6, pc}
 8015660:	ab01      	add	r3, sp, #4
 8015662:	466a      	mov	r2, sp
 8015664:	f7ff ffca 	bl	80155fc <__swhatbuf_r>
 8015668:	9900      	ldr	r1, [sp, #0]
 801566a:	4605      	mov	r5, r0
 801566c:	4630      	mov	r0, r6
 801566e:	f7ff fc7b 	bl	8014f68 <_malloc_r>
 8015672:	b948      	cbnz	r0, 8015688 <__smakebuf_r+0x44>
 8015674:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015678:	059a      	lsls	r2, r3, #22
 801567a:	d4ef      	bmi.n	801565c <__smakebuf_r+0x18>
 801567c:	f023 0303 	bic.w	r3, r3, #3
 8015680:	f043 0302 	orr.w	r3, r3, #2
 8015684:	81a3      	strh	r3, [r4, #12]
 8015686:	e7e3      	b.n	8015650 <__smakebuf_r+0xc>
 8015688:	4b0d      	ldr	r3, [pc, #52]	; (80156c0 <__smakebuf_r+0x7c>)
 801568a:	62b3      	str	r3, [r6, #40]	; 0x28
 801568c:	89a3      	ldrh	r3, [r4, #12]
 801568e:	6020      	str	r0, [r4, #0]
 8015690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015694:	81a3      	strh	r3, [r4, #12]
 8015696:	9b00      	ldr	r3, [sp, #0]
 8015698:	6163      	str	r3, [r4, #20]
 801569a:	9b01      	ldr	r3, [sp, #4]
 801569c:	6120      	str	r0, [r4, #16]
 801569e:	b15b      	cbz	r3, 80156b8 <__smakebuf_r+0x74>
 80156a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80156a4:	4630      	mov	r0, r6
 80156a6:	f000 fb85 	bl	8015db4 <_isatty_r>
 80156aa:	b128      	cbz	r0, 80156b8 <__smakebuf_r+0x74>
 80156ac:	89a3      	ldrh	r3, [r4, #12]
 80156ae:	f023 0303 	bic.w	r3, r3, #3
 80156b2:	f043 0301 	orr.w	r3, r3, #1
 80156b6:	81a3      	strh	r3, [r4, #12]
 80156b8:	89a3      	ldrh	r3, [r4, #12]
 80156ba:	431d      	orrs	r5, r3
 80156bc:	81a5      	strh	r5, [r4, #12]
 80156be:	e7cd      	b.n	801565c <__smakebuf_r+0x18>
 80156c0:	080154b1 	.word	0x080154b1

080156c4 <__malloc_lock>:
 80156c4:	4770      	bx	lr

080156c6 <__malloc_unlock>:
 80156c6:	4770      	bx	lr

080156c8 <__sfputc_r>:
 80156c8:	6893      	ldr	r3, [r2, #8]
 80156ca:	3b01      	subs	r3, #1
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	b410      	push	{r4}
 80156d0:	6093      	str	r3, [r2, #8]
 80156d2:	da08      	bge.n	80156e6 <__sfputc_r+0x1e>
 80156d4:	6994      	ldr	r4, [r2, #24]
 80156d6:	42a3      	cmp	r3, r4
 80156d8:	db01      	blt.n	80156de <__sfputc_r+0x16>
 80156da:	290a      	cmp	r1, #10
 80156dc:	d103      	bne.n	80156e6 <__sfputc_r+0x1e>
 80156de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80156e2:	f7ff bd51 	b.w	8015188 <__swbuf_r>
 80156e6:	6813      	ldr	r3, [r2, #0]
 80156e8:	1c58      	adds	r0, r3, #1
 80156ea:	6010      	str	r0, [r2, #0]
 80156ec:	7019      	strb	r1, [r3, #0]
 80156ee:	4608      	mov	r0, r1
 80156f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80156f4:	4770      	bx	lr

080156f6 <__sfputs_r>:
 80156f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80156f8:	4606      	mov	r6, r0
 80156fa:	460f      	mov	r7, r1
 80156fc:	4614      	mov	r4, r2
 80156fe:	18d5      	adds	r5, r2, r3
 8015700:	42ac      	cmp	r4, r5
 8015702:	d101      	bne.n	8015708 <__sfputs_r+0x12>
 8015704:	2000      	movs	r0, #0
 8015706:	e007      	b.n	8015718 <__sfputs_r+0x22>
 8015708:	463a      	mov	r2, r7
 801570a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801570e:	4630      	mov	r0, r6
 8015710:	f7ff ffda 	bl	80156c8 <__sfputc_r>
 8015714:	1c43      	adds	r3, r0, #1
 8015716:	d1f3      	bne.n	8015700 <__sfputs_r+0xa>
 8015718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801571c <_vfiprintf_r>:
 801571c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015720:	460c      	mov	r4, r1
 8015722:	b09d      	sub	sp, #116	; 0x74
 8015724:	4617      	mov	r7, r2
 8015726:	461d      	mov	r5, r3
 8015728:	4606      	mov	r6, r0
 801572a:	b118      	cbz	r0, 8015734 <_vfiprintf_r+0x18>
 801572c:	6983      	ldr	r3, [r0, #24]
 801572e:	b90b      	cbnz	r3, 8015734 <_vfiprintf_r+0x18>
 8015730:	f7ff feda 	bl	80154e8 <__sinit>
 8015734:	4b7c      	ldr	r3, [pc, #496]	; (8015928 <_vfiprintf_r+0x20c>)
 8015736:	429c      	cmp	r4, r3
 8015738:	d158      	bne.n	80157ec <_vfiprintf_r+0xd0>
 801573a:	6874      	ldr	r4, [r6, #4]
 801573c:	89a3      	ldrh	r3, [r4, #12]
 801573e:	0718      	lsls	r0, r3, #28
 8015740:	d55e      	bpl.n	8015800 <_vfiprintf_r+0xe4>
 8015742:	6923      	ldr	r3, [r4, #16]
 8015744:	2b00      	cmp	r3, #0
 8015746:	d05b      	beq.n	8015800 <_vfiprintf_r+0xe4>
 8015748:	2300      	movs	r3, #0
 801574a:	9309      	str	r3, [sp, #36]	; 0x24
 801574c:	2320      	movs	r3, #32
 801574e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015752:	2330      	movs	r3, #48	; 0x30
 8015754:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015758:	9503      	str	r5, [sp, #12]
 801575a:	f04f 0b01 	mov.w	fp, #1
 801575e:	46b8      	mov	r8, r7
 8015760:	4645      	mov	r5, r8
 8015762:	f815 3b01 	ldrb.w	r3, [r5], #1
 8015766:	b10b      	cbz	r3, 801576c <_vfiprintf_r+0x50>
 8015768:	2b25      	cmp	r3, #37	; 0x25
 801576a:	d154      	bne.n	8015816 <_vfiprintf_r+0xfa>
 801576c:	ebb8 0a07 	subs.w	sl, r8, r7
 8015770:	d00b      	beq.n	801578a <_vfiprintf_r+0x6e>
 8015772:	4653      	mov	r3, sl
 8015774:	463a      	mov	r2, r7
 8015776:	4621      	mov	r1, r4
 8015778:	4630      	mov	r0, r6
 801577a:	f7ff ffbc 	bl	80156f6 <__sfputs_r>
 801577e:	3001      	adds	r0, #1
 8015780:	f000 80c2 	beq.w	8015908 <_vfiprintf_r+0x1ec>
 8015784:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015786:	4453      	add	r3, sl
 8015788:	9309      	str	r3, [sp, #36]	; 0x24
 801578a:	f898 3000 	ldrb.w	r3, [r8]
 801578e:	2b00      	cmp	r3, #0
 8015790:	f000 80ba 	beq.w	8015908 <_vfiprintf_r+0x1ec>
 8015794:	2300      	movs	r3, #0
 8015796:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801579a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801579e:	9304      	str	r3, [sp, #16]
 80157a0:	9307      	str	r3, [sp, #28]
 80157a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80157a6:	931a      	str	r3, [sp, #104]	; 0x68
 80157a8:	46a8      	mov	r8, r5
 80157aa:	2205      	movs	r2, #5
 80157ac:	f818 1b01 	ldrb.w	r1, [r8], #1
 80157b0:	485e      	ldr	r0, [pc, #376]	; (801592c <_vfiprintf_r+0x210>)
 80157b2:	f7ea fd25 	bl	8000200 <memchr>
 80157b6:	9b04      	ldr	r3, [sp, #16]
 80157b8:	bb78      	cbnz	r0, 801581a <_vfiprintf_r+0xfe>
 80157ba:	06d9      	lsls	r1, r3, #27
 80157bc:	bf44      	itt	mi
 80157be:	2220      	movmi	r2, #32
 80157c0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80157c4:	071a      	lsls	r2, r3, #28
 80157c6:	bf44      	itt	mi
 80157c8:	222b      	movmi	r2, #43	; 0x2b
 80157ca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80157ce:	782a      	ldrb	r2, [r5, #0]
 80157d0:	2a2a      	cmp	r2, #42	; 0x2a
 80157d2:	d02a      	beq.n	801582a <_vfiprintf_r+0x10e>
 80157d4:	9a07      	ldr	r2, [sp, #28]
 80157d6:	46a8      	mov	r8, r5
 80157d8:	2000      	movs	r0, #0
 80157da:	250a      	movs	r5, #10
 80157dc:	4641      	mov	r1, r8
 80157de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80157e2:	3b30      	subs	r3, #48	; 0x30
 80157e4:	2b09      	cmp	r3, #9
 80157e6:	d969      	bls.n	80158bc <_vfiprintf_r+0x1a0>
 80157e8:	b360      	cbz	r0, 8015844 <_vfiprintf_r+0x128>
 80157ea:	e024      	b.n	8015836 <_vfiprintf_r+0x11a>
 80157ec:	4b50      	ldr	r3, [pc, #320]	; (8015930 <_vfiprintf_r+0x214>)
 80157ee:	429c      	cmp	r4, r3
 80157f0:	d101      	bne.n	80157f6 <_vfiprintf_r+0xda>
 80157f2:	68b4      	ldr	r4, [r6, #8]
 80157f4:	e7a2      	b.n	801573c <_vfiprintf_r+0x20>
 80157f6:	4b4f      	ldr	r3, [pc, #316]	; (8015934 <_vfiprintf_r+0x218>)
 80157f8:	429c      	cmp	r4, r3
 80157fa:	bf08      	it	eq
 80157fc:	68f4      	ldreq	r4, [r6, #12]
 80157fe:	e79d      	b.n	801573c <_vfiprintf_r+0x20>
 8015800:	4621      	mov	r1, r4
 8015802:	4630      	mov	r0, r6
 8015804:	f7ff fd12 	bl	801522c <__swsetup_r>
 8015808:	2800      	cmp	r0, #0
 801580a:	d09d      	beq.n	8015748 <_vfiprintf_r+0x2c>
 801580c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015810:	b01d      	add	sp, #116	; 0x74
 8015812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015816:	46a8      	mov	r8, r5
 8015818:	e7a2      	b.n	8015760 <_vfiprintf_r+0x44>
 801581a:	4a44      	ldr	r2, [pc, #272]	; (801592c <_vfiprintf_r+0x210>)
 801581c:	1a80      	subs	r0, r0, r2
 801581e:	fa0b f000 	lsl.w	r0, fp, r0
 8015822:	4318      	orrs	r0, r3
 8015824:	9004      	str	r0, [sp, #16]
 8015826:	4645      	mov	r5, r8
 8015828:	e7be      	b.n	80157a8 <_vfiprintf_r+0x8c>
 801582a:	9a03      	ldr	r2, [sp, #12]
 801582c:	1d11      	adds	r1, r2, #4
 801582e:	6812      	ldr	r2, [r2, #0]
 8015830:	9103      	str	r1, [sp, #12]
 8015832:	2a00      	cmp	r2, #0
 8015834:	db01      	blt.n	801583a <_vfiprintf_r+0x11e>
 8015836:	9207      	str	r2, [sp, #28]
 8015838:	e004      	b.n	8015844 <_vfiprintf_r+0x128>
 801583a:	4252      	negs	r2, r2
 801583c:	f043 0302 	orr.w	r3, r3, #2
 8015840:	9207      	str	r2, [sp, #28]
 8015842:	9304      	str	r3, [sp, #16]
 8015844:	f898 3000 	ldrb.w	r3, [r8]
 8015848:	2b2e      	cmp	r3, #46	; 0x2e
 801584a:	d10e      	bne.n	801586a <_vfiprintf_r+0x14e>
 801584c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8015850:	2b2a      	cmp	r3, #42	; 0x2a
 8015852:	d138      	bne.n	80158c6 <_vfiprintf_r+0x1aa>
 8015854:	9b03      	ldr	r3, [sp, #12]
 8015856:	1d1a      	adds	r2, r3, #4
 8015858:	681b      	ldr	r3, [r3, #0]
 801585a:	9203      	str	r2, [sp, #12]
 801585c:	2b00      	cmp	r3, #0
 801585e:	bfb8      	it	lt
 8015860:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8015864:	f108 0802 	add.w	r8, r8, #2
 8015868:	9305      	str	r3, [sp, #20]
 801586a:	4d33      	ldr	r5, [pc, #204]	; (8015938 <_vfiprintf_r+0x21c>)
 801586c:	f898 1000 	ldrb.w	r1, [r8]
 8015870:	2203      	movs	r2, #3
 8015872:	4628      	mov	r0, r5
 8015874:	f7ea fcc4 	bl	8000200 <memchr>
 8015878:	b140      	cbz	r0, 801588c <_vfiprintf_r+0x170>
 801587a:	2340      	movs	r3, #64	; 0x40
 801587c:	1b40      	subs	r0, r0, r5
 801587e:	fa03 f000 	lsl.w	r0, r3, r0
 8015882:	9b04      	ldr	r3, [sp, #16]
 8015884:	4303      	orrs	r3, r0
 8015886:	f108 0801 	add.w	r8, r8, #1
 801588a:	9304      	str	r3, [sp, #16]
 801588c:	f898 1000 	ldrb.w	r1, [r8]
 8015890:	482a      	ldr	r0, [pc, #168]	; (801593c <_vfiprintf_r+0x220>)
 8015892:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015896:	2206      	movs	r2, #6
 8015898:	f108 0701 	add.w	r7, r8, #1
 801589c:	f7ea fcb0 	bl	8000200 <memchr>
 80158a0:	2800      	cmp	r0, #0
 80158a2:	d037      	beq.n	8015914 <_vfiprintf_r+0x1f8>
 80158a4:	4b26      	ldr	r3, [pc, #152]	; (8015940 <_vfiprintf_r+0x224>)
 80158a6:	bb1b      	cbnz	r3, 80158f0 <_vfiprintf_r+0x1d4>
 80158a8:	9b03      	ldr	r3, [sp, #12]
 80158aa:	3307      	adds	r3, #7
 80158ac:	f023 0307 	bic.w	r3, r3, #7
 80158b0:	3308      	adds	r3, #8
 80158b2:	9303      	str	r3, [sp, #12]
 80158b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80158b6:	444b      	add	r3, r9
 80158b8:	9309      	str	r3, [sp, #36]	; 0x24
 80158ba:	e750      	b.n	801575e <_vfiprintf_r+0x42>
 80158bc:	fb05 3202 	mla	r2, r5, r2, r3
 80158c0:	2001      	movs	r0, #1
 80158c2:	4688      	mov	r8, r1
 80158c4:	e78a      	b.n	80157dc <_vfiprintf_r+0xc0>
 80158c6:	2300      	movs	r3, #0
 80158c8:	f108 0801 	add.w	r8, r8, #1
 80158cc:	9305      	str	r3, [sp, #20]
 80158ce:	4619      	mov	r1, r3
 80158d0:	250a      	movs	r5, #10
 80158d2:	4640      	mov	r0, r8
 80158d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80158d8:	3a30      	subs	r2, #48	; 0x30
 80158da:	2a09      	cmp	r2, #9
 80158dc:	d903      	bls.n	80158e6 <_vfiprintf_r+0x1ca>
 80158de:	2b00      	cmp	r3, #0
 80158e0:	d0c3      	beq.n	801586a <_vfiprintf_r+0x14e>
 80158e2:	9105      	str	r1, [sp, #20]
 80158e4:	e7c1      	b.n	801586a <_vfiprintf_r+0x14e>
 80158e6:	fb05 2101 	mla	r1, r5, r1, r2
 80158ea:	2301      	movs	r3, #1
 80158ec:	4680      	mov	r8, r0
 80158ee:	e7f0      	b.n	80158d2 <_vfiprintf_r+0x1b6>
 80158f0:	ab03      	add	r3, sp, #12
 80158f2:	9300      	str	r3, [sp, #0]
 80158f4:	4622      	mov	r2, r4
 80158f6:	4b13      	ldr	r3, [pc, #76]	; (8015944 <_vfiprintf_r+0x228>)
 80158f8:	a904      	add	r1, sp, #16
 80158fa:	4630      	mov	r0, r6
 80158fc:	f3af 8000 	nop.w
 8015900:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8015904:	4681      	mov	r9, r0
 8015906:	d1d5      	bne.n	80158b4 <_vfiprintf_r+0x198>
 8015908:	89a3      	ldrh	r3, [r4, #12]
 801590a:	065b      	lsls	r3, r3, #25
 801590c:	f53f af7e 	bmi.w	801580c <_vfiprintf_r+0xf0>
 8015910:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015912:	e77d      	b.n	8015810 <_vfiprintf_r+0xf4>
 8015914:	ab03      	add	r3, sp, #12
 8015916:	9300      	str	r3, [sp, #0]
 8015918:	4622      	mov	r2, r4
 801591a:	4b0a      	ldr	r3, [pc, #40]	; (8015944 <_vfiprintf_r+0x228>)
 801591c:	a904      	add	r1, sp, #16
 801591e:	4630      	mov	r0, r6
 8015920:	f000 f888 	bl	8015a34 <_printf_i>
 8015924:	e7ec      	b.n	8015900 <_vfiprintf_r+0x1e4>
 8015926:	bf00      	nop
 8015928:	08017c3c 	.word	0x08017c3c
 801592c:	08017c7c 	.word	0x08017c7c
 8015930:	08017c5c 	.word	0x08017c5c
 8015934:	08017c1c 	.word	0x08017c1c
 8015938:	08017c82 	.word	0x08017c82
 801593c:	08017c86 	.word	0x08017c86
 8015940:	00000000 	.word	0x00000000
 8015944:	080156f7 	.word	0x080156f7

08015948 <_printf_common>:
 8015948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801594c:	4691      	mov	r9, r2
 801594e:	461f      	mov	r7, r3
 8015950:	688a      	ldr	r2, [r1, #8]
 8015952:	690b      	ldr	r3, [r1, #16]
 8015954:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015958:	4293      	cmp	r3, r2
 801595a:	bfb8      	it	lt
 801595c:	4613      	movlt	r3, r2
 801595e:	f8c9 3000 	str.w	r3, [r9]
 8015962:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015966:	4606      	mov	r6, r0
 8015968:	460c      	mov	r4, r1
 801596a:	b112      	cbz	r2, 8015972 <_printf_common+0x2a>
 801596c:	3301      	adds	r3, #1
 801596e:	f8c9 3000 	str.w	r3, [r9]
 8015972:	6823      	ldr	r3, [r4, #0]
 8015974:	0699      	lsls	r1, r3, #26
 8015976:	bf42      	ittt	mi
 8015978:	f8d9 3000 	ldrmi.w	r3, [r9]
 801597c:	3302      	addmi	r3, #2
 801597e:	f8c9 3000 	strmi.w	r3, [r9]
 8015982:	6825      	ldr	r5, [r4, #0]
 8015984:	f015 0506 	ands.w	r5, r5, #6
 8015988:	d107      	bne.n	801599a <_printf_common+0x52>
 801598a:	f104 0a19 	add.w	sl, r4, #25
 801598e:	68e3      	ldr	r3, [r4, #12]
 8015990:	f8d9 2000 	ldr.w	r2, [r9]
 8015994:	1a9b      	subs	r3, r3, r2
 8015996:	42ab      	cmp	r3, r5
 8015998:	dc28      	bgt.n	80159ec <_printf_common+0xa4>
 801599a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801599e:	6822      	ldr	r2, [r4, #0]
 80159a0:	3300      	adds	r3, #0
 80159a2:	bf18      	it	ne
 80159a4:	2301      	movne	r3, #1
 80159a6:	0692      	lsls	r2, r2, #26
 80159a8:	d42d      	bmi.n	8015a06 <_printf_common+0xbe>
 80159aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80159ae:	4639      	mov	r1, r7
 80159b0:	4630      	mov	r0, r6
 80159b2:	47c0      	blx	r8
 80159b4:	3001      	adds	r0, #1
 80159b6:	d020      	beq.n	80159fa <_printf_common+0xb2>
 80159b8:	6823      	ldr	r3, [r4, #0]
 80159ba:	68e5      	ldr	r5, [r4, #12]
 80159bc:	f8d9 2000 	ldr.w	r2, [r9]
 80159c0:	f003 0306 	and.w	r3, r3, #6
 80159c4:	2b04      	cmp	r3, #4
 80159c6:	bf08      	it	eq
 80159c8:	1aad      	subeq	r5, r5, r2
 80159ca:	68a3      	ldr	r3, [r4, #8]
 80159cc:	6922      	ldr	r2, [r4, #16]
 80159ce:	bf0c      	ite	eq
 80159d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80159d4:	2500      	movne	r5, #0
 80159d6:	4293      	cmp	r3, r2
 80159d8:	bfc4      	itt	gt
 80159da:	1a9b      	subgt	r3, r3, r2
 80159dc:	18ed      	addgt	r5, r5, r3
 80159de:	f04f 0900 	mov.w	r9, #0
 80159e2:	341a      	adds	r4, #26
 80159e4:	454d      	cmp	r5, r9
 80159e6:	d11a      	bne.n	8015a1e <_printf_common+0xd6>
 80159e8:	2000      	movs	r0, #0
 80159ea:	e008      	b.n	80159fe <_printf_common+0xb6>
 80159ec:	2301      	movs	r3, #1
 80159ee:	4652      	mov	r2, sl
 80159f0:	4639      	mov	r1, r7
 80159f2:	4630      	mov	r0, r6
 80159f4:	47c0      	blx	r8
 80159f6:	3001      	adds	r0, #1
 80159f8:	d103      	bne.n	8015a02 <_printf_common+0xba>
 80159fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80159fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015a02:	3501      	adds	r5, #1
 8015a04:	e7c3      	b.n	801598e <_printf_common+0x46>
 8015a06:	18e1      	adds	r1, r4, r3
 8015a08:	1c5a      	adds	r2, r3, #1
 8015a0a:	2030      	movs	r0, #48	; 0x30
 8015a0c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015a10:	4422      	add	r2, r4
 8015a12:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015a16:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015a1a:	3302      	adds	r3, #2
 8015a1c:	e7c5      	b.n	80159aa <_printf_common+0x62>
 8015a1e:	2301      	movs	r3, #1
 8015a20:	4622      	mov	r2, r4
 8015a22:	4639      	mov	r1, r7
 8015a24:	4630      	mov	r0, r6
 8015a26:	47c0      	blx	r8
 8015a28:	3001      	adds	r0, #1
 8015a2a:	d0e6      	beq.n	80159fa <_printf_common+0xb2>
 8015a2c:	f109 0901 	add.w	r9, r9, #1
 8015a30:	e7d8      	b.n	80159e4 <_printf_common+0x9c>
	...

08015a34 <_printf_i>:
 8015a34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015a38:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8015a3c:	460c      	mov	r4, r1
 8015a3e:	7e09      	ldrb	r1, [r1, #24]
 8015a40:	b085      	sub	sp, #20
 8015a42:	296e      	cmp	r1, #110	; 0x6e
 8015a44:	4617      	mov	r7, r2
 8015a46:	4606      	mov	r6, r0
 8015a48:	4698      	mov	r8, r3
 8015a4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015a4c:	f000 80b3 	beq.w	8015bb6 <_printf_i+0x182>
 8015a50:	d822      	bhi.n	8015a98 <_printf_i+0x64>
 8015a52:	2963      	cmp	r1, #99	; 0x63
 8015a54:	d036      	beq.n	8015ac4 <_printf_i+0x90>
 8015a56:	d80a      	bhi.n	8015a6e <_printf_i+0x3a>
 8015a58:	2900      	cmp	r1, #0
 8015a5a:	f000 80b9 	beq.w	8015bd0 <_printf_i+0x19c>
 8015a5e:	2958      	cmp	r1, #88	; 0x58
 8015a60:	f000 8083 	beq.w	8015b6a <_printf_i+0x136>
 8015a64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015a68:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8015a6c:	e032      	b.n	8015ad4 <_printf_i+0xa0>
 8015a6e:	2964      	cmp	r1, #100	; 0x64
 8015a70:	d001      	beq.n	8015a76 <_printf_i+0x42>
 8015a72:	2969      	cmp	r1, #105	; 0x69
 8015a74:	d1f6      	bne.n	8015a64 <_printf_i+0x30>
 8015a76:	6820      	ldr	r0, [r4, #0]
 8015a78:	6813      	ldr	r3, [r2, #0]
 8015a7a:	0605      	lsls	r5, r0, #24
 8015a7c:	f103 0104 	add.w	r1, r3, #4
 8015a80:	d52a      	bpl.n	8015ad8 <_printf_i+0xa4>
 8015a82:	681b      	ldr	r3, [r3, #0]
 8015a84:	6011      	str	r1, [r2, #0]
 8015a86:	2b00      	cmp	r3, #0
 8015a88:	da03      	bge.n	8015a92 <_printf_i+0x5e>
 8015a8a:	222d      	movs	r2, #45	; 0x2d
 8015a8c:	425b      	negs	r3, r3
 8015a8e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8015a92:	486f      	ldr	r0, [pc, #444]	; (8015c50 <_printf_i+0x21c>)
 8015a94:	220a      	movs	r2, #10
 8015a96:	e039      	b.n	8015b0c <_printf_i+0xd8>
 8015a98:	2973      	cmp	r1, #115	; 0x73
 8015a9a:	f000 809d 	beq.w	8015bd8 <_printf_i+0x1a4>
 8015a9e:	d808      	bhi.n	8015ab2 <_printf_i+0x7e>
 8015aa0:	296f      	cmp	r1, #111	; 0x6f
 8015aa2:	d020      	beq.n	8015ae6 <_printf_i+0xb2>
 8015aa4:	2970      	cmp	r1, #112	; 0x70
 8015aa6:	d1dd      	bne.n	8015a64 <_printf_i+0x30>
 8015aa8:	6823      	ldr	r3, [r4, #0]
 8015aaa:	f043 0320 	orr.w	r3, r3, #32
 8015aae:	6023      	str	r3, [r4, #0]
 8015ab0:	e003      	b.n	8015aba <_printf_i+0x86>
 8015ab2:	2975      	cmp	r1, #117	; 0x75
 8015ab4:	d017      	beq.n	8015ae6 <_printf_i+0xb2>
 8015ab6:	2978      	cmp	r1, #120	; 0x78
 8015ab8:	d1d4      	bne.n	8015a64 <_printf_i+0x30>
 8015aba:	2378      	movs	r3, #120	; 0x78
 8015abc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015ac0:	4864      	ldr	r0, [pc, #400]	; (8015c54 <_printf_i+0x220>)
 8015ac2:	e055      	b.n	8015b70 <_printf_i+0x13c>
 8015ac4:	6813      	ldr	r3, [r2, #0]
 8015ac6:	1d19      	adds	r1, r3, #4
 8015ac8:	681b      	ldr	r3, [r3, #0]
 8015aca:	6011      	str	r1, [r2, #0]
 8015acc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015ad0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015ad4:	2301      	movs	r3, #1
 8015ad6:	e08c      	b.n	8015bf2 <_printf_i+0x1be>
 8015ad8:	681b      	ldr	r3, [r3, #0]
 8015ada:	6011      	str	r1, [r2, #0]
 8015adc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015ae0:	bf18      	it	ne
 8015ae2:	b21b      	sxthne	r3, r3
 8015ae4:	e7cf      	b.n	8015a86 <_printf_i+0x52>
 8015ae6:	6813      	ldr	r3, [r2, #0]
 8015ae8:	6825      	ldr	r5, [r4, #0]
 8015aea:	1d18      	adds	r0, r3, #4
 8015aec:	6010      	str	r0, [r2, #0]
 8015aee:	0628      	lsls	r0, r5, #24
 8015af0:	d501      	bpl.n	8015af6 <_printf_i+0xc2>
 8015af2:	681b      	ldr	r3, [r3, #0]
 8015af4:	e002      	b.n	8015afc <_printf_i+0xc8>
 8015af6:	0668      	lsls	r0, r5, #25
 8015af8:	d5fb      	bpl.n	8015af2 <_printf_i+0xbe>
 8015afa:	881b      	ldrh	r3, [r3, #0]
 8015afc:	4854      	ldr	r0, [pc, #336]	; (8015c50 <_printf_i+0x21c>)
 8015afe:	296f      	cmp	r1, #111	; 0x6f
 8015b00:	bf14      	ite	ne
 8015b02:	220a      	movne	r2, #10
 8015b04:	2208      	moveq	r2, #8
 8015b06:	2100      	movs	r1, #0
 8015b08:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015b0c:	6865      	ldr	r5, [r4, #4]
 8015b0e:	60a5      	str	r5, [r4, #8]
 8015b10:	2d00      	cmp	r5, #0
 8015b12:	f2c0 8095 	blt.w	8015c40 <_printf_i+0x20c>
 8015b16:	6821      	ldr	r1, [r4, #0]
 8015b18:	f021 0104 	bic.w	r1, r1, #4
 8015b1c:	6021      	str	r1, [r4, #0]
 8015b1e:	2b00      	cmp	r3, #0
 8015b20:	d13d      	bne.n	8015b9e <_printf_i+0x16a>
 8015b22:	2d00      	cmp	r5, #0
 8015b24:	f040 808e 	bne.w	8015c44 <_printf_i+0x210>
 8015b28:	4665      	mov	r5, ip
 8015b2a:	2a08      	cmp	r2, #8
 8015b2c:	d10b      	bne.n	8015b46 <_printf_i+0x112>
 8015b2e:	6823      	ldr	r3, [r4, #0]
 8015b30:	07db      	lsls	r3, r3, #31
 8015b32:	d508      	bpl.n	8015b46 <_printf_i+0x112>
 8015b34:	6923      	ldr	r3, [r4, #16]
 8015b36:	6862      	ldr	r2, [r4, #4]
 8015b38:	429a      	cmp	r2, r3
 8015b3a:	bfde      	ittt	le
 8015b3c:	2330      	movle	r3, #48	; 0x30
 8015b3e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015b42:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8015b46:	ebac 0305 	sub.w	r3, ip, r5
 8015b4a:	6123      	str	r3, [r4, #16]
 8015b4c:	f8cd 8000 	str.w	r8, [sp]
 8015b50:	463b      	mov	r3, r7
 8015b52:	aa03      	add	r2, sp, #12
 8015b54:	4621      	mov	r1, r4
 8015b56:	4630      	mov	r0, r6
 8015b58:	f7ff fef6 	bl	8015948 <_printf_common>
 8015b5c:	3001      	adds	r0, #1
 8015b5e:	d14d      	bne.n	8015bfc <_printf_i+0x1c8>
 8015b60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015b64:	b005      	add	sp, #20
 8015b66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015b6a:	4839      	ldr	r0, [pc, #228]	; (8015c50 <_printf_i+0x21c>)
 8015b6c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8015b70:	6813      	ldr	r3, [r2, #0]
 8015b72:	6821      	ldr	r1, [r4, #0]
 8015b74:	1d1d      	adds	r5, r3, #4
 8015b76:	681b      	ldr	r3, [r3, #0]
 8015b78:	6015      	str	r5, [r2, #0]
 8015b7a:	060a      	lsls	r2, r1, #24
 8015b7c:	d50b      	bpl.n	8015b96 <_printf_i+0x162>
 8015b7e:	07ca      	lsls	r2, r1, #31
 8015b80:	bf44      	itt	mi
 8015b82:	f041 0120 	orrmi.w	r1, r1, #32
 8015b86:	6021      	strmi	r1, [r4, #0]
 8015b88:	b91b      	cbnz	r3, 8015b92 <_printf_i+0x15e>
 8015b8a:	6822      	ldr	r2, [r4, #0]
 8015b8c:	f022 0220 	bic.w	r2, r2, #32
 8015b90:	6022      	str	r2, [r4, #0]
 8015b92:	2210      	movs	r2, #16
 8015b94:	e7b7      	b.n	8015b06 <_printf_i+0xd2>
 8015b96:	064d      	lsls	r5, r1, #25
 8015b98:	bf48      	it	mi
 8015b9a:	b29b      	uxthmi	r3, r3
 8015b9c:	e7ef      	b.n	8015b7e <_printf_i+0x14a>
 8015b9e:	4665      	mov	r5, ip
 8015ba0:	fbb3 f1f2 	udiv	r1, r3, r2
 8015ba4:	fb02 3311 	mls	r3, r2, r1, r3
 8015ba8:	5cc3      	ldrb	r3, [r0, r3]
 8015baa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8015bae:	460b      	mov	r3, r1
 8015bb0:	2900      	cmp	r1, #0
 8015bb2:	d1f5      	bne.n	8015ba0 <_printf_i+0x16c>
 8015bb4:	e7b9      	b.n	8015b2a <_printf_i+0xf6>
 8015bb6:	6813      	ldr	r3, [r2, #0]
 8015bb8:	6825      	ldr	r5, [r4, #0]
 8015bba:	6961      	ldr	r1, [r4, #20]
 8015bbc:	1d18      	adds	r0, r3, #4
 8015bbe:	6010      	str	r0, [r2, #0]
 8015bc0:	0628      	lsls	r0, r5, #24
 8015bc2:	681b      	ldr	r3, [r3, #0]
 8015bc4:	d501      	bpl.n	8015bca <_printf_i+0x196>
 8015bc6:	6019      	str	r1, [r3, #0]
 8015bc8:	e002      	b.n	8015bd0 <_printf_i+0x19c>
 8015bca:	066a      	lsls	r2, r5, #25
 8015bcc:	d5fb      	bpl.n	8015bc6 <_printf_i+0x192>
 8015bce:	8019      	strh	r1, [r3, #0]
 8015bd0:	2300      	movs	r3, #0
 8015bd2:	6123      	str	r3, [r4, #16]
 8015bd4:	4665      	mov	r5, ip
 8015bd6:	e7b9      	b.n	8015b4c <_printf_i+0x118>
 8015bd8:	6813      	ldr	r3, [r2, #0]
 8015bda:	1d19      	adds	r1, r3, #4
 8015bdc:	6011      	str	r1, [r2, #0]
 8015bde:	681d      	ldr	r5, [r3, #0]
 8015be0:	6862      	ldr	r2, [r4, #4]
 8015be2:	2100      	movs	r1, #0
 8015be4:	4628      	mov	r0, r5
 8015be6:	f7ea fb0b 	bl	8000200 <memchr>
 8015bea:	b108      	cbz	r0, 8015bf0 <_printf_i+0x1bc>
 8015bec:	1b40      	subs	r0, r0, r5
 8015bee:	6060      	str	r0, [r4, #4]
 8015bf0:	6863      	ldr	r3, [r4, #4]
 8015bf2:	6123      	str	r3, [r4, #16]
 8015bf4:	2300      	movs	r3, #0
 8015bf6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015bfa:	e7a7      	b.n	8015b4c <_printf_i+0x118>
 8015bfc:	6923      	ldr	r3, [r4, #16]
 8015bfe:	462a      	mov	r2, r5
 8015c00:	4639      	mov	r1, r7
 8015c02:	4630      	mov	r0, r6
 8015c04:	47c0      	blx	r8
 8015c06:	3001      	adds	r0, #1
 8015c08:	d0aa      	beq.n	8015b60 <_printf_i+0x12c>
 8015c0a:	6823      	ldr	r3, [r4, #0]
 8015c0c:	079b      	lsls	r3, r3, #30
 8015c0e:	d413      	bmi.n	8015c38 <_printf_i+0x204>
 8015c10:	68e0      	ldr	r0, [r4, #12]
 8015c12:	9b03      	ldr	r3, [sp, #12]
 8015c14:	4298      	cmp	r0, r3
 8015c16:	bfb8      	it	lt
 8015c18:	4618      	movlt	r0, r3
 8015c1a:	e7a3      	b.n	8015b64 <_printf_i+0x130>
 8015c1c:	2301      	movs	r3, #1
 8015c1e:	464a      	mov	r2, r9
 8015c20:	4639      	mov	r1, r7
 8015c22:	4630      	mov	r0, r6
 8015c24:	47c0      	blx	r8
 8015c26:	3001      	adds	r0, #1
 8015c28:	d09a      	beq.n	8015b60 <_printf_i+0x12c>
 8015c2a:	3501      	adds	r5, #1
 8015c2c:	68e3      	ldr	r3, [r4, #12]
 8015c2e:	9a03      	ldr	r2, [sp, #12]
 8015c30:	1a9b      	subs	r3, r3, r2
 8015c32:	42ab      	cmp	r3, r5
 8015c34:	dcf2      	bgt.n	8015c1c <_printf_i+0x1e8>
 8015c36:	e7eb      	b.n	8015c10 <_printf_i+0x1dc>
 8015c38:	2500      	movs	r5, #0
 8015c3a:	f104 0919 	add.w	r9, r4, #25
 8015c3e:	e7f5      	b.n	8015c2c <_printf_i+0x1f8>
 8015c40:	2b00      	cmp	r3, #0
 8015c42:	d1ac      	bne.n	8015b9e <_printf_i+0x16a>
 8015c44:	7803      	ldrb	r3, [r0, #0]
 8015c46:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015c4a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015c4e:	e76c      	b.n	8015b2a <_printf_i+0xf6>
 8015c50:	08017c8d 	.word	0x08017c8d
 8015c54:	08017c9e 	.word	0x08017c9e

08015c58 <_putc_r>:
 8015c58:	b570      	push	{r4, r5, r6, lr}
 8015c5a:	460d      	mov	r5, r1
 8015c5c:	4614      	mov	r4, r2
 8015c5e:	4606      	mov	r6, r0
 8015c60:	b118      	cbz	r0, 8015c6a <_putc_r+0x12>
 8015c62:	6983      	ldr	r3, [r0, #24]
 8015c64:	b90b      	cbnz	r3, 8015c6a <_putc_r+0x12>
 8015c66:	f7ff fc3f 	bl	80154e8 <__sinit>
 8015c6a:	4b13      	ldr	r3, [pc, #76]	; (8015cb8 <_putc_r+0x60>)
 8015c6c:	429c      	cmp	r4, r3
 8015c6e:	d112      	bne.n	8015c96 <_putc_r+0x3e>
 8015c70:	6874      	ldr	r4, [r6, #4]
 8015c72:	68a3      	ldr	r3, [r4, #8]
 8015c74:	3b01      	subs	r3, #1
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	60a3      	str	r3, [r4, #8]
 8015c7a:	da16      	bge.n	8015caa <_putc_r+0x52>
 8015c7c:	69a2      	ldr	r2, [r4, #24]
 8015c7e:	4293      	cmp	r3, r2
 8015c80:	db02      	blt.n	8015c88 <_putc_r+0x30>
 8015c82:	b2eb      	uxtb	r3, r5
 8015c84:	2b0a      	cmp	r3, #10
 8015c86:	d110      	bne.n	8015caa <_putc_r+0x52>
 8015c88:	4622      	mov	r2, r4
 8015c8a:	4629      	mov	r1, r5
 8015c8c:	4630      	mov	r0, r6
 8015c8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015c92:	f7ff ba79 	b.w	8015188 <__swbuf_r>
 8015c96:	4b09      	ldr	r3, [pc, #36]	; (8015cbc <_putc_r+0x64>)
 8015c98:	429c      	cmp	r4, r3
 8015c9a:	d101      	bne.n	8015ca0 <_putc_r+0x48>
 8015c9c:	68b4      	ldr	r4, [r6, #8]
 8015c9e:	e7e8      	b.n	8015c72 <_putc_r+0x1a>
 8015ca0:	4b07      	ldr	r3, [pc, #28]	; (8015cc0 <_putc_r+0x68>)
 8015ca2:	429c      	cmp	r4, r3
 8015ca4:	bf08      	it	eq
 8015ca6:	68f4      	ldreq	r4, [r6, #12]
 8015ca8:	e7e3      	b.n	8015c72 <_putc_r+0x1a>
 8015caa:	6823      	ldr	r3, [r4, #0]
 8015cac:	1c5a      	adds	r2, r3, #1
 8015cae:	6022      	str	r2, [r4, #0]
 8015cb0:	701d      	strb	r5, [r3, #0]
 8015cb2:	b2e8      	uxtb	r0, r5
 8015cb4:	bd70      	pop	{r4, r5, r6, pc}
 8015cb6:	bf00      	nop
 8015cb8:	08017c3c 	.word	0x08017c3c
 8015cbc:	08017c5c 	.word	0x08017c5c
 8015cc0:	08017c1c 	.word	0x08017c1c

08015cc4 <__sread>:
 8015cc4:	b510      	push	{r4, lr}
 8015cc6:	460c      	mov	r4, r1
 8015cc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015ccc:	f000 f894 	bl	8015df8 <_read_r>
 8015cd0:	2800      	cmp	r0, #0
 8015cd2:	bfab      	itete	ge
 8015cd4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015cd6:	89a3      	ldrhlt	r3, [r4, #12]
 8015cd8:	181b      	addge	r3, r3, r0
 8015cda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015cde:	bfac      	ite	ge
 8015ce0:	6563      	strge	r3, [r4, #84]	; 0x54
 8015ce2:	81a3      	strhlt	r3, [r4, #12]
 8015ce4:	bd10      	pop	{r4, pc}

08015ce6 <__swrite>:
 8015ce6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015cea:	461f      	mov	r7, r3
 8015cec:	898b      	ldrh	r3, [r1, #12]
 8015cee:	05db      	lsls	r3, r3, #23
 8015cf0:	4605      	mov	r5, r0
 8015cf2:	460c      	mov	r4, r1
 8015cf4:	4616      	mov	r6, r2
 8015cf6:	d505      	bpl.n	8015d04 <__swrite+0x1e>
 8015cf8:	2302      	movs	r3, #2
 8015cfa:	2200      	movs	r2, #0
 8015cfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015d00:	f000 f868 	bl	8015dd4 <_lseek_r>
 8015d04:	89a3      	ldrh	r3, [r4, #12]
 8015d06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015d0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015d0e:	81a3      	strh	r3, [r4, #12]
 8015d10:	4632      	mov	r2, r6
 8015d12:	463b      	mov	r3, r7
 8015d14:	4628      	mov	r0, r5
 8015d16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015d1a:	f000 b817 	b.w	8015d4c <_write_r>

08015d1e <__sseek>:
 8015d1e:	b510      	push	{r4, lr}
 8015d20:	460c      	mov	r4, r1
 8015d22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015d26:	f000 f855 	bl	8015dd4 <_lseek_r>
 8015d2a:	1c43      	adds	r3, r0, #1
 8015d2c:	89a3      	ldrh	r3, [r4, #12]
 8015d2e:	bf15      	itete	ne
 8015d30:	6560      	strne	r0, [r4, #84]	; 0x54
 8015d32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015d36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015d3a:	81a3      	strheq	r3, [r4, #12]
 8015d3c:	bf18      	it	ne
 8015d3e:	81a3      	strhne	r3, [r4, #12]
 8015d40:	bd10      	pop	{r4, pc}

08015d42 <__sclose>:
 8015d42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015d46:	f000 b813 	b.w	8015d70 <_close_r>
	...

08015d4c <_write_r>:
 8015d4c:	b538      	push	{r3, r4, r5, lr}
 8015d4e:	4c07      	ldr	r4, [pc, #28]	; (8015d6c <_write_r+0x20>)
 8015d50:	4605      	mov	r5, r0
 8015d52:	4608      	mov	r0, r1
 8015d54:	4611      	mov	r1, r2
 8015d56:	2200      	movs	r2, #0
 8015d58:	6022      	str	r2, [r4, #0]
 8015d5a:	461a      	mov	r2, r3
 8015d5c:	f7ea fc47 	bl	80005ee <_write>
 8015d60:	1c43      	adds	r3, r0, #1
 8015d62:	d102      	bne.n	8015d6a <_write_r+0x1e>
 8015d64:	6823      	ldr	r3, [r4, #0]
 8015d66:	b103      	cbz	r3, 8015d6a <_write_r+0x1e>
 8015d68:	602b      	str	r3, [r5, #0]
 8015d6a:	bd38      	pop	{r3, r4, r5, pc}
 8015d6c:	20008b80 	.word	0x20008b80

08015d70 <_close_r>:
 8015d70:	b538      	push	{r3, r4, r5, lr}
 8015d72:	4c06      	ldr	r4, [pc, #24]	; (8015d8c <_close_r+0x1c>)
 8015d74:	2300      	movs	r3, #0
 8015d76:	4605      	mov	r5, r0
 8015d78:	4608      	mov	r0, r1
 8015d7a:	6023      	str	r3, [r4, #0]
 8015d7c:	f7ec facf 	bl	800231e <_close>
 8015d80:	1c43      	adds	r3, r0, #1
 8015d82:	d102      	bne.n	8015d8a <_close_r+0x1a>
 8015d84:	6823      	ldr	r3, [r4, #0]
 8015d86:	b103      	cbz	r3, 8015d8a <_close_r+0x1a>
 8015d88:	602b      	str	r3, [r5, #0]
 8015d8a:	bd38      	pop	{r3, r4, r5, pc}
 8015d8c:	20008b80 	.word	0x20008b80

08015d90 <_fstat_r>:
 8015d90:	b538      	push	{r3, r4, r5, lr}
 8015d92:	4c07      	ldr	r4, [pc, #28]	; (8015db0 <_fstat_r+0x20>)
 8015d94:	2300      	movs	r3, #0
 8015d96:	4605      	mov	r5, r0
 8015d98:	4608      	mov	r0, r1
 8015d9a:	4611      	mov	r1, r2
 8015d9c:	6023      	str	r3, [r4, #0]
 8015d9e:	f7ec faca 	bl	8002336 <_fstat>
 8015da2:	1c43      	adds	r3, r0, #1
 8015da4:	d102      	bne.n	8015dac <_fstat_r+0x1c>
 8015da6:	6823      	ldr	r3, [r4, #0]
 8015da8:	b103      	cbz	r3, 8015dac <_fstat_r+0x1c>
 8015daa:	602b      	str	r3, [r5, #0]
 8015dac:	bd38      	pop	{r3, r4, r5, pc}
 8015dae:	bf00      	nop
 8015db0:	20008b80 	.word	0x20008b80

08015db4 <_isatty_r>:
 8015db4:	b538      	push	{r3, r4, r5, lr}
 8015db6:	4c06      	ldr	r4, [pc, #24]	; (8015dd0 <_isatty_r+0x1c>)
 8015db8:	2300      	movs	r3, #0
 8015dba:	4605      	mov	r5, r0
 8015dbc:	4608      	mov	r0, r1
 8015dbe:	6023      	str	r3, [r4, #0]
 8015dc0:	f7ec fac9 	bl	8002356 <_isatty>
 8015dc4:	1c43      	adds	r3, r0, #1
 8015dc6:	d102      	bne.n	8015dce <_isatty_r+0x1a>
 8015dc8:	6823      	ldr	r3, [r4, #0]
 8015dca:	b103      	cbz	r3, 8015dce <_isatty_r+0x1a>
 8015dcc:	602b      	str	r3, [r5, #0]
 8015dce:	bd38      	pop	{r3, r4, r5, pc}
 8015dd0:	20008b80 	.word	0x20008b80

08015dd4 <_lseek_r>:
 8015dd4:	b538      	push	{r3, r4, r5, lr}
 8015dd6:	4c07      	ldr	r4, [pc, #28]	; (8015df4 <_lseek_r+0x20>)
 8015dd8:	4605      	mov	r5, r0
 8015dda:	4608      	mov	r0, r1
 8015ddc:	4611      	mov	r1, r2
 8015dde:	2200      	movs	r2, #0
 8015de0:	6022      	str	r2, [r4, #0]
 8015de2:	461a      	mov	r2, r3
 8015de4:	f7ec fac2 	bl	800236c <_lseek>
 8015de8:	1c43      	adds	r3, r0, #1
 8015dea:	d102      	bne.n	8015df2 <_lseek_r+0x1e>
 8015dec:	6823      	ldr	r3, [r4, #0]
 8015dee:	b103      	cbz	r3, 8015df2 <_lseek_r+0x1e>
 8015df0:	602b      	str	r3, [r5, #0]
 8015df2:	bd38      	pop	{r3, r4, r5, pc}
 8015df4:	20008b80 	.word	0x20008b80

08015df8 <_read_r>:
 8015df8:	b538      	push	{r3, r4, r5, lr}
 8015dfa:	4c07      	ldr	r4, [pc, #28]	; (8015e18 <_read_r+0x20>)
 8015dfc:	4605      	mov	r5, r0
 8015dfe:	4608      	mov	r0, r1
 8015e00:	4611      	mov	r1, r2
 8015e02:	2200      	movs	r2, #0
 8015e04:	6022      	str	r2, [r4, #0]
 8015e06:	461a      	mov	r2, r3
 8015e08:	f7ec fa6c 	bl	80022e4 <_read>
 8015e0c:	1c43      	adds	r3, r0, #1
 8015e0e:	d102      	bne.n	8015e16 <_read_r+0x1e>
 8015e10:	6823      	ldr	r3, [r4, #0]
 8015e12:	b103      	cbz	r3, 8015e16 <_read_r+0x1e>
 8015e14:	602b      	str	r3, [r5, #0]
 8015e16:	bd38      	pop	{r3, r4, r5, pc}
 8015e18:	20008b80 	.word	0x20008b80

08015e1c <_init>:
 8015e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e1e:	bf00      	nop
 8015e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015e22:	bc08      	pop	{r3}
 8015e24:	469e      	mov	lr, r3
 8015e26:	4770      	bx	lr

08015e28 <_fini>:
 8015e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e2a:	bf00      	nop
 8015e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015e2e:	bc08      	pop	{r3}
 8015e30:	469e      	mov	lr, r3
 8015e32:	4770      	bx	lr
