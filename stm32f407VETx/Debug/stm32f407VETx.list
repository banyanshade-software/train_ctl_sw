
stm32f407VETx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019ad4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002b1c  08019c64  08019c64  00029c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c780  0801c780  00030678  2**0
                  CONTENTS
  4 .ARM          00000008  0801c780  0801c780  0002c780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c788  0801c788  00030678  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c788  0801c788  0002c788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c78c  0801c78c  0002c78c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000678  20000000  0801c790  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008c98  20000678  0801ce08  00030678  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20009310  0801ce08  00039310  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030678  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004dbda  00000000  00000000  000306a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000974b  00000000  00000000  0007e282  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002b60  00000000  00000000  000879d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000029a0  00000000  00000000  0008a530  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000313ab  00000000  00000000  0008ced0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0003375e  00000000  00000000  000be27b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000eb1c6  00000000  00000000  000f19d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001dcb9f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b5c8  00000000  00000000  001dcc1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      0000004e  00000000  00000000  001e81e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000678 	.word	0x20000678
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08019c4c 	.word	0x08019c4c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000067c 	.word	0x2000067c
 80001cc:	08019c4c 	.word	0x08019c4c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr

080001f4 <__aeabi_uldivmod>:
 80001f4:	b953      	cbnz	r3, 800020c <__aeabi_uldivmod+0x18>
 80001f6:	b94a      	cbnz	r2, 800020c <__aeabi_uldivmod+0x18>
 80001f8:	2900      	cmp	r1, #0
 80001fa:	bf08      	it	eq
 80001fc:	2800      	cmpeq	r0, #0
 80001fe:	bf1c      	itt	ne
 8000200:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000204:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000208:	f000 b972 	b.w	80004f0 <__aeabi_idiv0>
 800020c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000210:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000214:	f000 f806 	bl	8000224 <__udivmoddi4>
 8000218:	f8dd e004 	ldr.w	lr, [sp, #4]
 800021c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000220:	b004      	add	sp, #16
 8000222:	4770      	bx	lr

08000224 <__udivmoddi4>:
 8000224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000228:	9e08      	ldr	r6, [sp, #32]
 800022a:	4604      	mov	r4, r0
 800022c:	4688      	mov	r8, r1
 800022e:	2b00      	cmp	r3, #0
 8000230:	d14b      	bne.n	80002ca <__udivmoddi4+0xa6>
 8000232:	428a      	cmp	r2, r1
 8000234:	4615      	mov	r5, r2
 8000236:	d967      	bls.n	8000308 <__udivmoddi4+0xe4>
 8000238:	fab2 f282 	clz	r2, r2
 800023c:	b14a      	cbz	r2, 8000252 <__udivmoddi4+0x2e>
 800023e:	f1c2 0720 	rsb	r7, r2, #32
 8000242:	fa01 f302 	lsl.w	r3, r1, r2
 8000246:	fa20 f707 	lsr.w	r7, r0, r7
 800024a:	4095      	lsls	r5, r2
 800024c:	ea47 0803 	orr.w	r8, r7, r3
 8000250:	4094      	lsls	r4, r2
 8000252:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000256:	0c23      	lsrs	r3, r4, #16
 8000258:	fbb8 f7fe 	udiv	r7, r8, lr
 800025c:	fa1f fc85 	uxth.w	ip, r5
 8000260:	fb0e 8817 	mls	r8, lr, r7, r8
 8000264:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000268:	fb07 f10c 	mul.w	r1, r7, ip
 800026c:	4299      	cmp	r1, r3
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x60>
 8000270:	18eb      	adds	r3, r5, r3
 8000272:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000276:	f080 811b 	bcs.w	80004b0 <__udivmoddi4+0x28c>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 8118 	bls.w	80004b0 <__udivmoddi4+0x28c>
 8000280:	3f02      	subs	r7, #2
 8000282:	442b      	add	r3, r5
 8000284:	1a5b      	subs	r3, r3, r1
 8000286:	b2a4      	uxth	r4, r4
 8000288:	fbb3 f0fe 	udiv	r0, r3, lr
 800028c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000290:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000294:	fb00 fc0c 	mul.w	ip, r0, ip
 8000298:	45a4      	cmp	ip, r4
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x8c>
 800029c:	192c      	adds	r4, r5, r4
 800029e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002a2:	f080 8107 	bcs.w	80004b4 <__udivmoddi4+0x290>
 80002a6:	45a4      	cmp	ip, r4
 80002a8:	f240 8104 	bls.w	80004b4 <__udivmoddi4+0x290>
 80002ac:	3802      	subs	r0, #2
 80002ae:	442c      	add	r4, r5
 80002b0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b4:	eba4 040c 	sub.w	r4, r4, ip
 80002b8:	2700      	movs	r7, #0
 80002ba:	b11e      	cbz	r6, 80002c4 <__udivmoddi4+0xa0>
 80002bc:	40d4      	lsrs	r4, r2
 80002be:	2300      	movs	r3, #0
 80002c0:	e9c6 4300 	strd	r4, r3, [r6]
 80002c4:	4639      	mov	r1, r7
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0xbe>
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	f000 80eb 	beq.w	80004aa <__udivmoddi4+0x286>
 80002d4:	2700      	movs	r7, #0
 80002d6:	e9c6 0100 	strd	r0, r1, [r6]
 80002da:	4638      	mov	r0, r7
 80002dc:	4639      	mov	r1, r7
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	fab3 f783 	clz	r7, r3
 80002e6:	2f00      	cmp	r7, #0
 80002e8:	d147      	bne.n	800037a <__udivmoddi4+0x156>
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xd0>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 80fa 	bhi.w	80004e8 <__udivmoddi4+0x2c4>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb61 0303 	sbc.w	r3, r1, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	4698      	mov	r8, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d0e0      	beq.n	80002c4 <__udivmoddi4+0xa0>
 8000302:	e9c6 4800 	strd	r4, r8, [r6]
 8000306:	e7dd      	b.n	80002c4 <__udivmoddi4+0xa0>
 8000308:	b902      	cbnz	r2, 800030c <__udivmoddi4+0xe8>
 800030a:	deff      	udf	#255	; 0xff
 800030c:	fab2 f282 	clz	r2, r2
 8000310:	2a00      	cmp	r2, #0
 8000312:	f040 808f 	bne.w	8000434 <__udivmoddi4+0x210>
 8000316:	1b49      	subs	r1, r1, r5
 8000318:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800031c:	fa1f f885 	uxth.w	r8, r5
 8000320:	2701      	movs	r7, #1
 8000322:	fbb1 fcfe 	udiv	ip, r1, lr
 8000326:	0c23      	lsrs	r3, r4, #16
 8000328:	fb0e 111c 	mls	r1, lr, ip, r1
 800032c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000330:	fb08 f10c 	mul.w	r1, r8, ip
 8000334:	4299      	cmp	r1, r3
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x124>
 8000338:	18eb      	adds	r3, r5, r3
 800033a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x122>
 8000340:	4299      	cmp	r1, r3
 8000342:	f200 80cd 	bhi.w	80004e0 <__udivmoddi4+0x2bc>
 8000346:	4684      	mov	ip, r0
 8000348:	1a59      	subs	r1, r3, r1
 800034a:	b2a3      	uxth	r3, r4
 800034c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000350:	fb0e 1410 	mls	r4, lr, r0, r1
 8000354:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000358:	fb08 f800 	mul.w	r8, r8, r0
 800035c:	45a0      	cmp	r8, r4
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x14c>
 8000360:	192c      	adds	r4, r5, r4
 8000362:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x14a>
 8000368:	45a0      	cmp	r8, r4
 800036a:	f200 80b6 	bhi.w	80004da <__udivmoddi4+0x2b6>
 800036e:	4618      	mov	r0, r3
 8000370:	eba4 0408 	sub.w	r4, r4, r8
 8000374:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000378:	e79f      	b.n	80002ba <__udivmoddi4+0x96>
 800037a:	f1c7 0c20 	rsb	ip, r7, #32
 800037e:	40bb      	lsls	r3, r7
 8000380:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000384:	ea4e 0e03 	orr.w	lr, lr, r3
 8000388:	fa01 f407 	lsl.w	r4, r1, r7
 800038c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000390:	fa21 f30c 	lsr.w	r3, r1, ip
 8000394:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000398:	4325      	orrs	r5, r4
 800039a:	fbb3 f9f8 	udiv	r9, r3, r8
 800039e:	0c2c      	lsrs	r4, r5, #16
 80003a0:	fb08 3319 	mls	r3, r8, r9, r3
 80003a4:	fa1f fa8e 	uxth.w	sl, lr
 80003a8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003ac:	fb09 f40a 	mul.w	r4, r9, sl
 80003b0:	429c      	cmp	r4, r3
 80003b2:	fa02 f207 	lsl.w	r2, r2, r7
 80003b6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b0>
 80003bc:	eb1e 0303 	adds.w	r3, lr, r3
 80003c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003c4:	f080 8087 	bcs.w	80004d6 <__udivmoddi4+0x2b2>
 80003c8:	429c      	cmp	r4, r3
 80003ca:	f240 8084 	bls.w	80004d6 <__udivmoddi4+0x2b2>
 80003ce:	f1a9 0902 	sub.w	r9, r9, #2
 80003d2:	4473      	add	r3, lr
 80003d4:	1b1b      	subs	r3, r3, r4
 80003d6:	b2ad      	uxth	r5, r5
 80003d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003dc:	fb08 3310 	mls	r3, r8, r0, r3
 80003e0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003e4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e8:	45a2      	cmp	sl, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1da>
 80003ec:	eb1e 0404 	adds.w	r4, lr, r4
 80003f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f4:	d26b      	bcs.n	80004ce <__udivmoddi4+0x2aa>
 80003f6:	45a2      	cmp	sl, r4
 80003f8:	d969      	bls.n	80004ce <__udivmoddi4+0x2aa>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4474      	add	r4, lr
 80003fe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000402:	fba0 8902 	umull	r8, r9, r0, r2
 8000406:	eba4 040a 	sub.w	r4, r4, sl
 800040a:	454c      	cmp	r4, r9
 800040c:	46c2      	mov	sl, r8
 800040e:	464b      	mov	r3, r9
 8000410:	d354      	bcc.n	80004bc <__udivmoddi4+0x298>
 8000412:	d051      	beq.n	80004b8 <__udivmoddi4+0x294>
 8000414:	2e00      	cmp	r6, #0
 8000416:	d069      	beq.n	80004ec <__udivmoddi4+0x2c8>
 8000418:	ebb1 050a 	subs.w	r5, r1, sl
 800041c:	eb64 0403 	sbc.w	r4, r4, r3
 8000420:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000424:	40fd      	lsrs	r5, r7
 8000426:	40fc      	lsrs	r4, r7
 8000428:	ea4c 0505 	orr.w	r5, ip, r5
 800042c:	e9c6 5400 	strd	r5, r4, [r6]
 8000430:	2700      	movs	r7, #0
 8000432:	e747      	b.n	80002c4 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f703 	lsr.w	r7, r0, r3
 800043c:	4095      	lsls	r5, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	fa21 f303 	lsr.w	r3, r1, r3
 8000446:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800044a:	4338      	orrs	r0, r7
 800044c:	0c01      	lsrs	r1, r0, #16
 800044e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000452:	fa1f f885 	uxth.w	r8, r5
 8000456:	fb0e 3317 	mls	r3, lr, r7, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb07 f308 	mul.w	r3, r7, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x256>
 800046a:	1869      	adds	r1, r5, r1
 800046c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000470:	d22f      	bcs.n	80004d2 <__udivmoddi4+0x2ae>
 8000472:	428b      	cmp	r3, r1
 8000474:	d92d      	bls.n	80004d2 <__udivmoddi4+0x2ae>
 8000476:	3f02      	subs	r7, #2
 8000478:	4429      	add	r1, r5
 800047a:	1acb      	subs	r3, r1, r3
 800047c:	b281      	uxth	r1, r0
 800047e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000482:	fb0e 3310 	mls	r3, lr, r0, r3
 8000486:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048a:	fb00 f308 	mul.w	r3, r0, r8
 800048e:	428b      	cmp	r3, r1
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x27e>
 8000492:	1869      	adds	r1, r5, r1
 8000494:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000498:	d217      	bcs.n	80004ca <__udivmoddi4+0x2a6>
 800049a:	428b      	cmp	r3, r1
 800049c:	d915      	bls.n	80004ca <__udivmoddi4+0x2a6>
 800049e:	3802      	subs	r0, #2
 80004a0:	4429      	add	r1, r5
 80004a2:	1ac9      	subs	r1, r1, r3
 80004a4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a8:	e73b      	b.n	8000322 <__udivmoddi4+0xfe>
 80004aa:	4637      	mov	r7, r6
 80004ac:	4630      	mov	r0, r6
 80004ae:	e709      	b.n	80002c4 <__udivmoddi4+0xa0>
 80004b0:	4607      	mov	r7, r0
 80004b2:	e6e7      	b.n	8000284 <__udivmoddi4+0x60>
 80004b4:	4618      	mov	r0, r3
 80004b6:	e6fb      	b.n	80002b0 <__udivmoddi4+0x8c>
 80004b8:	4541      	cmp	r1, r8
 80004ba:	d2ab      	bcs.n	8000414 <__udivmoddi4+0x1f0>
 80004bc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004c0:	eb69 020e 	sbc.w	r2, r9, lr
 80004c4:	3801      	subs	r0, #1
 80004c6:	4613      	mov	r3, r2
 80004c8:	e7a4      	b.n	8000414 <__udivmoddi4+0x1f0>
 80004ca:	4660      	mov	r0, ip
 80004cc:	e7e9      	b.n	80004a2 <__udivmoddi4+0x27e>
 80004ce:	4618      	mov	r0, r3
 80004d0:	e795      	b.n	80003fe <__udivmoddi4+0x1da>
 80004d2:	4667      	mov	r7, ip
 80004d4:	e7d1      	b.n	800047a <__udivmoddi4+0x256>
 80004d6:	4681      	mov	r9, r0
 80004d8:	e77c      	b.n	80003d4 <__udivmoddi4+0x1b0>
 80004da:	3802      	subs	r0, #2
 80004dc:	442c      	add	r4, r5
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0x14c>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	442b      	add	r3, r5
 80004e6:	e72f      	b.n	8000348 <__udivmoddi4+0x124>
 80004e8:	4638      	mov	r0, r7
 80004ea:	e708      	b.n	80002fe <__udivmoddi4+0xda>
 80004ec:	4637      	mov	r7, r6
 80004ee:	e6e9      	b.n	80002c4 <__udivmoddi4+0xa0>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0

}
 80004f8:	bf00      	nop
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr

08000502 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8000502:	b480      	push	{r7}
 8000504:	af00      	add	r7, sp, #0
return 0;
 8000506:	2300      	movs	r3, #0
}
 8000508:	4618      	mov	r0, r3
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
	...

08000514 <itm_debug1>:
//void _itm_debug1(const char *msg, int v);
//void _itm_debug2(const char *msg, int v1, int v2);
void _itm_debug3(const char *msg, int32_t v1, int32_t v2, int32_t v3, int n);

static inline void itm_debug1(uint32_t f, const char *msg, int32_t v)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b086      	sub	sp, #24
 8000518:	af02      	add	r7, sp, #8
 800051a:	60f8      	str	r0, [r7, #12]
 800051c:	60b9      	str	r1, [r7, #8]
 800051e:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 8000520:	4b08      	ldr	r3, [pc, #32]	; (8000544 <itm_debug1+0x30>)
 8000522:	681a      	ldr	r2, [r3, #0]
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	4013      	ands	r3, r2
 8000528:	2b00      	cmp	r3, #0
 800052a:	d007      	beq.n	800053c <itm_debug1+0x28>
 800052c:	2301      	movs	r3, #1
 800052e:	9300      	str	r3, [sp, #0]
 8000530:	2300      	movs	r3, #0
 8000532:	2200      	movs	r2, #0
 8000534:	6879      	ldr	r1, [r7, #4]
 8000536:	68b8      	ldr	r0, [r7, #8]
 8000538:	f019 f804 	bl	8019544 <_itm_debug3>
}
 800053c:	bf00      	nop
 800053e:	3710      	adds	r7, #16
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	20000610 	.word	0x20000610

08000548 <itm_debug2>:
static inline void itm_debug2(uint32_t f, const char *msg, int32_t v1, int32_t v2)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b086      	sub	sp, #24
 800054c:	af02      	add	r7, sp, #8
 800054e:	60f8      	str	r0, [r7, #12]
 8000550:	60b9      	str	r1, [r7, #8]
 8000552:	607a      	str	r2, [r7, #4]
 8000554:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, 0, 2);
 8000556:	4b09      	ldr	r3, [pc, #36]	; (800057c <itm_debug2+0x34>)
 8000558:	681a      	ldr	r2, [r3, #0]
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	4013      	ands	r3, r2
 800055e:	2b00      	cmp	r3, #0
 8000560:	d007      	beq.n	8000572 <itm_debug2+0x2a>
 8000562:	2302      	movs	r3, #2
 8000564:	9300      	str	r3, [sp, #0]
 8000566:	2300      	movs	r3, #0
 8000568:	683a      	ldr	r2, [r7, #0]
 800056a:	6879      	ldr	r1, [r7, #4]
 800056c:	68b8      	ldr	r0, [r7, #8]
 800056e:	f018 ffe9 	bl	8019544 <_itm_debug3>
}
 8000572:	bf00      	nop
 8000574:	3710      	adds	r7, #16
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	20000610 	.word	0x20000610

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000584:	f001 fc22 	bl	8001dcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000588:	f000 f864 	bl	8000654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058c:	f000 fdc8 	bl	8001120 <MX_GPIO_Init>
  MX_DMA_Init();
 8000590:	f000 fda6 	bl	80010e0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000594:	f000 f8e0 	bl	8000758 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000598:	f000 f9b4 	bl	8000904 <MX_I2C1_Init>
  MX_TIM1_Init();
 800059c:	f000 fa40 	bl	8000a20 <MX_TIM1_Init>
  MX_TIM2_Init();
 80005a0:	f000 fb02 	bl	8000ba8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80005a4:	f000 fb98 	bl	8000cd8 <MX_TIM3_Init>
  MX_RTC_Init();
 80005a8:	f000 fa0a 	bl	80009c0 <MX_RTC_Init>
  MX_UART4_Init();
 80005ac:	f000 fd6e 	bl	800108c <MX_UART4_Init>
  MX_TIM4_Init();
 80005b0:	f000 fc40 	bl	8000e34 <MX_TIM4_Init>
  MX_TIM8_Init();
 80005b4:	f000 fc92 	bl	8000edc <MX_TIM8_Init>
  MX_I2C3_Init();
 80005b8:	f000 f9d2 	bl	8000960 <MX_I2C3_Init>
  MX_TIM12_Init();
 80005bc:	f000 fcf6 	bl	8000fac <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005c0:	f00c fb48 	bl	800cc54 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of frameQueue */
  frameQueueHandle = osMessageQueueNew (48, sizeof(frame_msg_t), &frameQueue_attributes);
 80005c4:	4a15      	ldr	r2, [pc, #84]	; (800061c <main+0x9c>)
 80005c6:	2121      	movs	r1, #33	; 0x21
 80005c8:	2030      	movs	r0, #48	; 0x30
 80005ca:	f00c fc81 	bl	800ced0 <osMessageQueueNew>
 80005ce:	4602      	mov	r2, r0
 80005d0:	4b13      	ldr	r3, [pc, #76]	; (8000620 <main+0xa0>)
 80005d2:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of uiTask */
  uiTaskHandle = osThreadNew(StartUiTask, NULL, &uiTask_attributes);
 80005d4:	4a13      	ldr	r2, [pc, #76]	; (8000624 <main+0xa4>)
 80005d6:	2100      	movs	r1, #0
 80005d8:	4813      	ldr	r0, [pc, #76]	; (8000628 <main+0xa8>)
 80005da:	f00c fba5 	bl	800cd28 <osThreadNew>
 80005de:	4602      	mov	r2, r0
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <main+0xac>)
 80005e2:	601a      	str	r2, [r3, #0]

  /* creation of ctrlTask */
  ctrlTaskHandle = osThreadNew(StartCtrlTask, NULL, &ctrlTask_attributes);
 80005e4:	4a12      	ldr	r2, [pc, #72]	; (8000630 <main+0xb0>)
 80005e6:	2100      	movs	r1, #0
 80005e8:	4812      	ldr	r0, [pc, #72]	; (8000634 <main+0xb4>)
 80005ea:	f00c fb9d 	bl	800cd28 <osThreadNew>
 80005ee:	4602      	mov	r2, r0
 80005f0:	4b11      	ldr	r3, [pc, #68]	; (8000638 <main+0xb8>)
 80005f2:	601a      	str	r2, [r3, #0]

  /* creation of txrxFrameTask */
  txrxFrameTaskHandle = osThreadNew(StartTxRxFrameTask, NULL, &txrxFrameTask_attributes);
 80005f4:	4a11      	ldr	r2, [pc, #68]	; (800063c <main+0xbc>)
 80005f6:	2100      	movs	r1, #0
 80005f8:	4811      	ldr	r0, [pc, #68]	; (8000640 <main+0xc0>)
 80005fa:	f00c fb95 	bl	800cd28 <osThreadNew>
 80005fe:	4602      	mov	r2, r0
 8000600:	4b10      	ldr	r3, [pc, #64]	; (8000644 <main+0xc4>)
 8000602:	601a      	str	r2, [r3, #0]

  /* creation of ina3221_task */
  ina3221_taskHandle = osThreadNew(ina3221_task_start, NULL, &ina3221_task_attributes);
 8000604:	4a10      	ldr	r2, [pc, #64]	; (8000648 <main+0xc8>)
 8000606:	2100      	movs	r1, #0
 8000608:	4810      	ldr	r0, [pc, #64]	; (800064c <main+0xcc>)
 800060a:	f00c fb8d 	bl	800cd28 <osThreadNew>
 800060e:	4602      	mov	r2, r0
 8000610:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <main+0xd0>)
 8000612:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000614:	f00c fb52 	bl	800ccbc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000618:	e7fe      	b.n	8000618 <main+0x98>
 800061a:	bf00      	nop
 800061c:	0801a6ac 	.word	0x0801a6ac
 8000620:	20005e08 	.word	0x20005e08
 8000624:	0801a61c 	.word	0x0801a61c
 8000628:	08018ed5 	.word	0x08018ed5
 800062c:	20006314 	.word	0x20006314
 8000630:	0801a640 	.word	0x0801a640
 8000634:	08018a75 	.word	0x08018a75
 8000638:	20006358 	.word	0x20006358
 800063c:	0801a664 	.word	0x0801a664
 8000640:	08018f15 	.word	0x08018f15
 8000644:	20006c64 	.word	0x20006c64
 8000648:	0801a688 	.word	0x0801a688
 800064c:	08011d77 	.word	0x08011d77
 8000650:	20006db0 	.word	0x20006db0

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b098      	sub	sp, #96	; 0x60
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800065e:	2230      	movs	r2, #48	; 0x30
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f019 f997 	bl	8019996 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	f107 031c 	add.w	r3, r7, #28
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000678:	f107 030c 	add.w	r3, r7, #12
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	60bb      	str	r3, [r7, #8]
 800068a:	4b31      	ldr	r3, [pc, #196]	; (8000750 <SystemClock_Config+0xfc>)
 800068c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068e:	4a30      	ldr	r2, [pc, #192]	; (8000750 <SystemClock_Config+0xfc>)
 8000690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000694:	6413      	str	r3, [r2, #64]	; 0x40
 8000696:	4b2e      	ldr	r3, [pc, #184]	; (8000750 <SystemClock_Config+0xfc>)
 8000698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069e:	60bb      	str	r3, [r7, #8]
 80006a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a2:	2300      	movs	r3, #0
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	4b2b      	ldr	r3, [pc, #172]	; (8000754 <SystemClock_Config+0x100>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4a2a      	ldr	r2, [pc, #168]	; (8000754 <SystemClock_Config+0x100>)
 80006ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b0:	6013      	str	r3, [r2, #0]
 80006b2:	4b28      	ldr	r3, [pc, #160]	; (8000754 <SystemClock_Config+0x100>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80006be:	2305      	movs	r3, #5
 80006c0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006c8:	2301      	movs	r3, #1
 80006ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006cc:	2302      	movs	r3, #2
 80006ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006d6:	2304      	movs	r3, #4
 80006d8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 96;
 80006da:	2360      	movs	r3, #96	; 0x60
 80006dc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006de:	2302      	movs	r3, #2
 80006e0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006e2:	2304      	movs	r3, #4
 80006e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006ea:	4618      	mov	r0, r3
 80006ec:	f006 fda4 	bl	8007238 <HAL_RCC_OscConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006f6:	f000 fe69 	bl	80013cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fa:	230f      	movs	r3, #15
 80006fc:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fe:	2302      	movs	r3, #2
 8000700:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000706:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800070a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 800070c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000710:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000712:	f107 031c 	add.w	r3, r7, #28
 8000716:	2103      	movs	r1, #3
 8000718:	4618      	mov	r0, r3
 800071a:	f006 fffd 	bl	8007718 <HAL_RCC_ClockConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000724:	f000 fe52 	bl	80013cc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000728:	2302      	movs	r3, #2
 800072a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800072c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000730:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000732:	f107 030c 	add.w	r3, r7, #12
 8000736:	4618      	mov	r0, r3
 8000738:	f007 fa12 	bl	8007b60 <HAL_RCCEx_PeriphCLKConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000742:	f000 fe43 	bl	80013cc <Error_Handler>
  }
}
 8000746:	bf00      	nop
 8000748:	3760      	adds	r7, #96	; 0x60
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40023800 	.word	0x40023800
 8000754:	40007000 	.word	0x40007000

08000758 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800075e:	463b      	mov	r3, r7
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN ADC1_Init 1 */
  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800076a:	4b64      	ldr	r3, [pc, #400]	; (80008fc <MX_ADC1_Init+0x1a4>)
 800076c:	4a64      	ldr	r2, [pc, #400]	; (8000900 <MX_ADC1_Init+0x1a8>)
 800076e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000770:	4b62      	ldr	r3, [pc, #392]	; (80008fc <MX_ADC1_Init+0x1a4>)
 8000772:	2200      	movs	r2, #0
 8000774:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000776:	4b61      	ldr	r3, [pc, #388]	; (80008fc <MX_ADC1_Init+0x1a4>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800077c:	4b5f      	ldr	r3, [pc, #380]	; (80008fc <MX_ADC1_Init+0x1a4>)
 800077e:	2201      	movs	r2, #1
 8000780:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000782:	4b5e      	ldr	r3, [pc, #376]	; (80008fc <MX_ADC1_Init+0x1a4>)
 8000784:	2200      	movs	r2, #0
 8000786:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000788:	4b5c      	ldr	r3, [pc, #368]	; (80008fc <MX_ADC1_Init+0x1a4>)
 800078a:	2200      	movs	r2, #0
 800078c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000790:	4b5a      	ldr	r3, [pc, #360]	; (80008fc <MX_ADC1_Init+0x1a4>)
 8000792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000796:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8000798:	4b58      	ldr	r3, [pc, #352]	; (80008fc <MX_ADC1_Init+0x1a4>)
 800079a:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800079e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007a0:	4b56      	ldr	r3, [pc, #344]	; (80008fc <MX_ADC1_Init+0x1a4>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 10;
 80007a6:	4b55      	ldr	r3, [pc, #340]	; (80008fc <MX_ADC1_Init+0x1a4>)
 80007a8:	220a      	movs	r2, #10
 80007aa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80007ac:	4b53      	ldr	r3, [pc, #332]	; (80008fc <MX_ADC1_Init+0x1a4>)
 80007ae:	2201      	movs	r2, #1
 80007b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80007b4:	4b51      	ldr	r3, [pc, #324]	; (80008fc <MX_ADC1_Init+0x1a4>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007ba:	4850      	ldr	r0, [pc, #320]	; (80008fc <MX_ADC1_Init+0x1a4>)
 80007bc:	f001 fb6a 	bl	8001e94 <HAL_ADC_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80007c6:	f000 fe01 	bl	80013cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007ce:	2301      	movs	r3, #1
 80007d0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80007d2:	2302      	movs	r3, #2
 80007d4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	4619      	mov	r1, r3
 80007da:	4848      	ldr	r0, [pc, #288]	; (80008fc <MX_ADC1_Init+0x1a4>)
 80007dc:	f001 fc90 	bl	8002100 <HAL_ADC_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80007e6:	f000 fdf1 	bl	80013cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007ea:	2301      	movs	r3, #1
 80007ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80007ee:	2302      	movs	r3, #2
 80007f0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007f2:	463b      	mov	r3, r7
 80007f4:	4619      	mov	r1, r3
 80007f6:	4841      	ldr	r0, [pc, #260]	; (80008fc <MX_ADC1_Init+0x1a4>)
 80007f8:	f001 fc82 	bl	8002100 <HAL_ADC_ConfigChannel>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000802:	f000 fde3 	bl	80013cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000806:	2302      	movs	r3, #2
 8000808:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800080a:	2303      	movs	r3, #3
 800080c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800080e:	463b      	mov	r3, r7
 8000810:	4619      	mov	r1, r3
 8000812:	483a      	ldr	r0, [pc, #232]	; (80008fc <MX_ADC1_Init+0x1a4>)
 8000814:	f001 fc74 	bl	8002100 <HAL_ADC_ConfigChannel>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 800081e:	f000 fdd5 	bl	80013cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000822:	2303      	movs	r3, #3
 8000824:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000826:	2304      	movs	r3, #4
 8000828:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800082a:	463b      	mov	r3, r7
 800082c:	4619      	mov	r1, r3
 800082e:	4833      	ldr	r0, [pc, #204]	; (80008fc <MX_ADC1_Init+0x1a4>)
 8000830:	f001 fc66 	bl	8002100 <HAL_ADC_ConfigChannel>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 800083a:	f000 fdc7 	bl	80013cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800083e:	2304      	movs	r3, #4
 8000840:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000842:	2305      	movs	r3, #5
 8000844:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000846:	463b      	mov	r3, r7
 8000848:	4619      	mov	r1, r3
 800084a:	482c      	ldr	r0, [pc, #176]	; (80008fc <MX_ADC1_Init+0x1a4>)
 800084c:	f001 fc58 	bl	8002100 <HAL_ADC_ConfigChannel>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 8000856:	f000 fdb9 	bl	80013cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800085a:	2305      	movs	r3, #5
 800085c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 800085e:	2306      	movs	r3, #6
 8000860:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000862:	463b      	mov	r3, r7
 8000864:	4619      	mov	r1, r3
 8000866:	4825      	ldr	r0, [pc, #148]	; (80008fc <MX_ADC1_Init+0x1a4>)
 8000868:	f001 fc4a 	bl	8002100 <HAL_ADC_ConfigChannel>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 8000872:	f000 fdab 	bl	80013cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000876:	230c      	movs	r3, #12
 8000878:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 800087a:	2307      	movs	r3, #7
 800087c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800087e:	463b      	mov	r3, r7
 8000880:	4619      	mov	r1, r3
 8000882:	481e      	ldr	r0, [pc, #120]	; (80008fc <MX_ADC1_Init+0x1a4>)
 8000884:	f001 fc3c 	bl	8002100 <HAL_ADC_ConfigChannel>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_ADC1_Init+0x13a>
  {
    Error_Handler();
 800088e:	f000 fd9d 	bl	80013cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000892:	2308      	movs	r3, #8
 8000894:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8000896:	2308      	movs	r3, #8
 8000898:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800089a:	463b      	mov	r3, r7
 800089c:	4619      	mov	r1, r3
 800089e:	4817      	ldr	r0, [pc, #92]	; (80008fc <MX_ADC1_Init+0x1a4>)
 80008a0:	f001 fc2e 	bl	8002100 <HAL_ADC_ConfigChannel>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_ADC1_Init+0x156>
  {
    Error_Handler();
 80008aa:	f000 fd8f 	bl	80013cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80008ae:	230a      	movs	r3, #10
 80008b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80008b2:	2309      	movs	r3, #9
 80008b4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008b6:	463b      	mov	r3, r7
 80008b8:	4619      	mov	r1, r3
 80008ba:	4810      	ldr	r0, [pc, #64]	; (80008fc <MX_ADC1_Init+0x1a4>)
 80008bc:	f001 fc20 	bl	8002100 <HAL_ADC_ConfigChannel>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_ADC1_Init+0x172>
  {
    Error_Handler();
 80008c6:	f000 fd81 	bl	80013cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80008ca:	230b      	movs	r3, #11
 80008cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 80008ce:	230a      	movs	r3, #10
 80008d0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008d2:	463b      	mov	r3, r7
 80008d4:	4619      	mov	r1, r3
 80008d6:	4809      	ldr	r0, [pc, #36]	; (80008fc <MX_ADC1_Init+0x1a4>)
 80008d8:	f001 fc12 	bl	8002100 <HAL_ADC_ConfigChannel>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 80008e2:	f000 fd73 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  if (hadc1.Init.NbrOfConversion != NUM_LOCAL_CANTONS_HW*2) {
 80008e6:	4b05      	ldr	r3, [pc, #20]	; (80008fc <MX_ADC1_Init+0x1a4>)
 80008e8:	69db      	ldr	r3, [r3, #28]
 80008ea:	2b0a      	cmp	r3, #10
 80008ec:	d001      	beq.n	80008f2 <MX_ADC1_Init+0x19a>
	    Error_Handler();
 80008ee:	f000 fd6d 	bl	80013cc <Error_Handler>
  }
  /* USER CODE END ADC1_Init 2 */

}
 80008f2:	bf00      	nop
 80008f4:	3710      	adds	r7, #16
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	2000635c 	.word	0x2000635c
 8000900:	40012000 	.word	0x40012000

08000904 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000908:	4b12      	ldr	r3, [pc, #72]	; (8000954 <MX_I2C1_Init+0x50>)
 800090a:	4a13      	ldr	r2, [pc, #76]	; (8000958 <MX_I2C1_Init+0x54>)
 800090c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800090e:	4b11      	ldr	r3, [pc, #68]	; (8000954 <MX_I2C1_Init+0x50>)
 8000910:	4a12      	ldr	r2, [pc, #72]	; (800095c <MX_I2C1_Init+0x58>)
 8000912:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000914:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <MX_I2C1_Init+0x50>)
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800091a:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <MX_I2C1_Init+0x50>)
 800091c:	2200      	movs	r2, #0
 800091e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000920:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <MX_I2C1_Init+0x50>)
 8000922:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000926:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000928:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <MX_I2C1_Init+0x50>)
 800092a:	2200      	movs	r2, #0
 800092c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <MX_I2C1_Init+0x50>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000934:	4b07      	ldr	r3, [pc, #28]	; (8000954 <MX_I2C1_Init+0x50>)
 8000936:	2200      	movs	r2, #0
 8000938:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <MX_I2C1_Init+0x50>)
 800093c:	2200      	movs	r2, #0
 800093e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000940:	4804      	ldr	r0, [pc, #16]	; (8000954 <MX_I2C1_Init+0x50>)
 8000942:	f002 fcb1 	bl	80032a8 <HAL_I2C_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800094c:	f000 fd3e 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20005e0c 	.word	0x20005e0c
 8000958:	40005400 	.word	0x40005400
 800095c:	00061a80 	.word	0x00061a80

08000960 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000964:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <MX_I2C3_Init+0x54>)
 8000966:	4a14      	ldr	r2, [pc, #80]	; (80009b8 <MX_I2C3_Init+0x58>)
 8000968:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 800096a:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <MX_I2C3_Init+0x54>)
 800096c:	4a13      	ldr	r2, [pc, #76]	; (80009bc <MX_I2C3_Init+0x5c>)
 800096e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8000970:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <MX_I2C3_Init+0x54>)
 8000972:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000976:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000978:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <MX_I2C3_Init+0x54>)
 800097a:	2200      	movs	r2, #0
 800097c:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800097e:	4b0d      	ldr	r3, [pc, #52]	; (80009b4 <MX_I2C3_Init+0x54>)
 8000980:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000984:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000986:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <MX_I2C3_Init+0x54>)
 8000988:	2200      	movs	r2, #0
 800098a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800098c:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <MX_I2C3_Init+0x54>)
 800098e:	2200      	movs	r2, #0
 8000990:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000992:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <MX_I2C3_Init+0x54>)
 8000994:	2200      	movs	r2, #0
 8000996:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <MX_I2C3_Init+0x54>)
 800099a:	2200      	movs	r2, #0
 800099c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <MX_I2C3_Init+0x54>)
 80009a0:	f002 fc82 	bl	80032a8 <HAL_I2C_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_I2C3_Init+0x4e>
  {
    Error_Handler();
 80009aa:	f000 fd0f 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	200056a0 	.word	0x200056a0
 80009b8:	40005c00 	.word	0x40005c00
 80009bc:	00061a80 	.word	0x00061a80

080009c0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b086      	sub	sp, #24
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80009c6:	1d3b      	adds	r3, r7, #4
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
 80009d2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80009d4:	2300      	movs	r3, #0
 80009d6:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80009d8:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <MX_RTC_Init+0x58>)
 80009da:	4a10      	ldr	r2, [pc, #64]	; (8000a1c <MX_RTC_Init+0x5c>)
 80009dc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80009de:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <MX_RTC_Init+0x58>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80009e4:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <MX_RTC_Init+0x58>)
 80009e6:	227f      	movs	r2, #127	; 0x7f
 80009e8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80009ea:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <MX_RTC_Init+0x58>)
 80009ec:	22ff      	movs	r2, #255	; 0xff
 80009ee:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80009f0:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <MX_RTC_Init+0x58>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80009f6:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <MX_RTC_Init+0x58>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80009fc:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <MX_RTC_Init+0x58>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a02:	4805      	ldr	r0, [pc, #20]	; (8000a18 <MX_RTC_Init+0x58>)
 8000a04:	f007 f98e 	bl	8007d24 <HAL_RTC_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000a0e:	f000 fcdd 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a12:	3718      	adds	r7, #24
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20006404 	.word	0x20006404
 8000a1c:	40002800 	.word	0x40002800

08000a20 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b096      	sub	sp, #88	; 0x58
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a26:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]
 8000a32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a34:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	60da      	str	r2, [r3, #12]
 8000a4c:	611a      	str	r2, [r3, #16]
 8000a4e:	615a      	str	r2, [r3, #20]
 8000a50:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	2220      	movs	r2, #32
 8000a56:	2100      	movs	r1, #0
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f018 ff9c 	bl	8019996 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a5e:	4b50      	ldr	r3, [pc, #320]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000a60:	4a50      	ldr	r2, [pc, #320]	; (8000ba4 <MX_TIM1_Init+0x184>)
 8000a62:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1199;
 8000a64:	4b4e      	ldr	r3, [pc, #312]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000a66:	f240 42af 	movw	r2, #1199	; 0x4af
 8000a6a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8000a6c:	4b4c      	ldr	r3, [pc, #304]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000a6e:	2260      	movs	r2, #96	; 0x60
 8000a70:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 200;
 8000a72:	4b4b      	ldr	r3, [pc, #300]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000a74:	22c8      	movs	r2, #200	; 0xc8
 8000a76:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a78:	4b49      	ldr	r3, [pc, #292]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a7e:	4b48      	ldr	r3, [pc, #288]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a84:	4b46      	ldr	r3, [pc, #280]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000a86:	2280      	movs	r2, #128	; 0x80
 8000a88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a8a:	4845      	ldr	r0, [pc, #276]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000a8c:	f007 fa2f 	bl	8007eee <HAL_TIM_Base_Init>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000a96:	f000 fc99 	bl	80013cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a9e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000aa0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	483e      	ldr	r0, [pc, #248]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000aa8:	f007 fdf8 	bl	800869c <HAL_TIM_ConfigClockSource>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000ab2:	f000 fc8b 	bl	80013cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ab6:	483a      	ldr	r0, [pc, #232]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000ab8:	f007 fa8c 	bl	8007fd4 <HAL_TIM_PWM_Init>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000ac2:	f000 fc83 	bl	80013cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000ac6:	2320      	movs	r3, #32
 8000ac8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000aca:	2380      	movs	r3, #128	; 0x80
 8000acc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ace:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4832      	ldr	r0, [pc, #200]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000ad6:	f008 fa99 	bl	800900c <HAL_TIMEx_MasterConfigSynchronization>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000ae0:	f000 fc74 	bl	80013cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ae4:	2360      	movs	r3, #96	; 0x60
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aec:	2300      	movs	r3, #0
 8000aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000af0:	2300      	movs	r3, #0
 8000af2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000af4:	2300      	movs	r3, #0
 8000af6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000af8:	2300      	movs	r3, #0
 8000afa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000afc:	2300      	movs	r3, #0
 8000afe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b04:	2200      	movs	r2, #0
 8000b06:	4619      	mov	r1, r3
 8000b08:	4825      	ldr	r0, [pc, #148]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000b0a:	f007 fd01 	bl	8008510 <HAL_TIM_PWM_ConfigChannel>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000b14:	f000 fc5a 	bl	80013cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1c:	2204      	movs	r2, #4
 8000b1e:	4619      	mov	r1, r3
 8000b20:	481f      	ldr	r0, [pc, #124]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000b22:	f007 fcf5 	bl	8008510 <HAL_TIM_PWM_ConfigChannel>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000b2c:	f000 fc4e 	bl	80013cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b34:	2208      	movs	r2, #8
 8000b36:	4619      	mov	r1, r3
 8000b38:	4819      	ldr	r0, [pc, #100]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000b3a:	f007 fce9 	bl	8008510 <HAL_TIM_PWM_ConfigChannel>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000b44:	f000 fc42 	bl	80013cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b4c:	220c      	movs	r2, #12
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4813      	ldr	r0, [pc, #76]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000b52:	f007 fcdd 	bl	8008510 <HAL_TIM_PWM_ConfigChannel>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000b5c:	f000 fc36 	bl	80013cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b60:	2300      	movs	r3, #0
 8000b62:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b64:	2300      	movs	r3, #0
 8000b66:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b78:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b7e:	1d3b      	adds	r3, r7, #4
 8000b80:	4619      	mov	r1, r3
 8000b82:	4807      	ldr	r0, [pc, #28]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000b84:	f008 fabe 	bl	8009104 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8000b8e:	f000 fc1d 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b92:	4803      	ldr	r0, [pc, #12]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000b94:	f000 fe94 	bl	80018c0 <HAL_TIM_MspPostInit>

}
 8000b98:	bf00      	nop
 8000b9a:	3758      	adds	r7, #88	; 0x58
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20006824 	.word	0x20006824
 8000ba4:	40010000 	.word	0x40010000

08000ba8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b092      	sub	sp, #72	; 0x48
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bcc:	f107 031c 	add.w	r3, r7, #28
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bd6:	463b      	mov	r3, r7
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]
 8000be4:	615a      	str	r2, [r3, #20]
 8000be6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000be8:	4b3a      	ldr	r3, [pc, #232]	; (8000cd4 <MX_TIM2_Init+0x12c>)
 8000bea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1199;
 8000bf0:	4b38      	ldr	r3, [pc, #224]	; (8000cd4 <MX_TIM2_Init+0x12c>)
 8000bf2:	f240 42af 	movw	r2, #1199	; 0x4af
 8000bf6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8000bf8:	4b36      	ldr	r3, [pc, #216]	; (8000cd4 <MX_TIM2_Init+0x12c>)
 8000bfa:	2260      	movs	r2, #96	; 0x60
 8000bfc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200;
 8000bfe:	4b35      	ldr	r3, [pc, #212]	; (8000cd4 <MX_TIM2_Init+0x12c>)
 8000c00:	22c8      	movs	r2, #200	; 0xc8
 8000c02:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c04:	4b33      	ldr	r3, [pc, #204]	; (8000cd4 <MX_TIM2_Init+0x12c>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c0a:	4b32      	ldr	r3, [pc, #200]	; (8000cd4 <MX_TIM2_Init+0x12c>)
 8000c0c:	2280      	movs	r2, #128	; 0x80
 8000c0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c10:	4830      	ldr	r0, [pc, #192]	; (8000cd4 <MX_TIM2_Init+0x12c>)
 8000c12:	f007 f96c 	bl	8007eee <HAL_TIM_Base_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000c1c:	f000 fbd6 	bl	80013cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c24:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c26:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4829      	ldr	r0, [pc, #164]	; (8000cd4 <MX_TIM2_Init+0x12c>)
 8000c2e:	f007 fd35 	bl	800869c <HAL_TIM_ConfigClockSource>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000c38:	f000 fbc8 	bl	80013cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c3c:	4825      	ldr	r0, [pc, #148]	; (8000cd4 <MX_TIM2_Init+0x12c>)
 8000c3e:	f007 f9c9 	bl	8007fd4 <HAL_TIM_PWM_Init>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8000c48:	f000 fbc0 	bl	80013cc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000c4c:	2306      	movs	r3, #6
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000c54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c58:	4619      	mov	r1, r3
 8000c5a:	481e      	ldr	r0, [pc, #120]	; (8000cd4 <MX_TIM2_Init+0x12c>)
 8000c5c:	f007 fdd5 	bl	800880a <HAL_TIM_SlaveConfigSynchro>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 8000c66:	f000 fbb1 	bl	80013cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c72:	f107 031c 	add.w	r3, r7, #28
 8000c76:	4619      	mov	r1, r3
 8000c78:	4816      	ldr	r0, [pc, #88]	; (8000cd4 <MX_TIM2_Init+0x12c>)
 8000c7a:	f008 f9c7 	bl	800900c <HAL_TIMEx_MasterConfigSynchronization>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8000c84:	f000 fba2 	bl	80013cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c88:	2360      	movs	r3, #96	; 0x60
 8000c8a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c90:	2300      	movs	r3, #0
 8000c92:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c94:	2300      	movs	r3, #0
 8000c96:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c98:	463b      	mov	r3, r7
 8000c9a:	2208      	movs	r2, #8
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	480d      	ldr	r0, [pc, #52]	; (8000cd4 <MX_TIM2_Init+0x12c>)
 8000ca0:	f007 fc36 	bl	8008510 <HAL_TIM_PWM_ConfigChannel>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8000caa:	f000 fb8f 	bl	80013cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000cae:	463b      	mov	r3, r7
 8000cb0:	220c      	movs	r2, #12
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4807      	ldr	r0, [pc, #28]	; (8000cd4 <MX_TIM2_Init+0x12c>)
 8000cb6:	f007 fc2b 	bl	8008510 <HAL_TIM_PWM_ConfigChannel>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 8000cc0:	f000 fb84 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000cc4:	4803      	ldr	r0, [pc, #12]	; (8000cd4 <MX_TIM2_Init+0x12c>)
 8000cc6:	f000 fdfb 	bl	80018c0 <HAL_TIM_MspPostInit>

}
 8000cca:	bf00      	nop
 8000ccc:	3748      	adds	r7, #72	; 0x48
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20006d70 	.word	0x20006d70

08000cd8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b092      	sub	sp, #72	; 0x48
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cde:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
 8000cea:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000cec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cfc:	f107 031c 	add.w	r3, r7, #28
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d06:	463b      	mov	r3, r7
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
 8000d14:	615a      	str	r2, [r3, #20]
 8000d16:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d18:	4b44      	ldr	r3, [pc, #272]	; (8000e2c <MX_TIM3_Init+0x154>)
 8000d1a:	4a45      	ldr	r2, [pc, #276]	; (8000e30 <MX_TIM3_Init+0x158>)
 8000d1c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d1e:	4b43      	ldr	r3, [pc, #268]	; (8000e2c <MX_TIM3_Init+0x154>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d24:	4b41      	ldr	r3, [pc, #260]	; (8000e2c <MX_TIM3_Init+0x154>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000d2a:	4b40      	ldr	r3, [pc, #256]	; (8000e2c <MX_TIM3_Init+0x154>)
 8000d2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d30:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d32:	4b3e      	ldr	r3, [pc, #248]	; (8000e2c <MX_TIM3_Init+0x154>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d38:	4b3c      	ldr	r3, [pc, #240]	; (8000e2c <MX_TIM3_Init+0x154>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d3e:	483b      	ldr	r0, [pc, #236]	; (8000e2c <MX_TIM3_Init+0x154>)
 8000d40:	f007 f8d5 	bl	8007eee <HAL_TIM_Base_Init>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000d4a:	f000 fb3f 	bl	80013cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d52:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d54:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4834      	ldr	r0, [pc, #208]	; (8000e2c <MX_TIM3_Init+0x154>)
 8000d5c:	f007 fc9e 	bl	800869c <HAL_TIM_ConfigClockSource>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000d66:	f000 fb31 	bl	80013cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d6a:	4830      	ldr	r0, [pc, #192]	; (8000e2c <MX_TIM3_Init+0x154>)
 8000d6c:	f007 f932 	bl	8007fd4 <HAL_TIM_PWM_Init>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 8000d76:	f000 fb29 	bl	80013cc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000d7a:	2306      	movs	r3, #6
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000d82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d86:	4619      	mov	r1, r3
 8000d88:	4828      	ldr	r0, [pc, #160]	; (8000e2c <MX_TIM3_Init+0x154>)
 8000d8a:	f007 fd3e 	bl	800880a <HAL_TIM_SlaveConfigSynchro>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 8000d94:	f000 fb1a 	bl	80013cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000da0:	f107 031c 	add.w	r3, r7, #28
 8000da4:	4619      	mov	r1, r3
 8000da6:	4821      	ldr	r0, [pc, #132]	; (8000e2c <MX_TIM3_Init+0x154>)
 8000da8:	f008 f930 	bl	800900c <HAL_TIMEx_MasterConfigSynchronization>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8000db2:	f000 fb0b 	bl	80013cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000db6:	2360      	movs	r3, #96	; 0x60
 8000db8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dc6:	463b      	mov	r3, r7
 8000dc8:	2200      	movs	r2, #0
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4817      	ldr	r0, [pc, #92]	; (8000e2c <MX_TIM3_Init+0x154>)
 8000dce:	f007 fb9f 	bl	8008510 <HAL_TIM_PWM_ConfigChannel>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8000dd8:	f000 faf8 	bl	80013cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ddc:	463b      	mov	r3, r7
 8000dde:	2204      	movs	r2, #4
 8000de0:	4619      	mov	r1, r3
 8000de2:	4812      	ldr	r0, [pc, #72]	; (8000e2c <MX_TIM3_Init+0x154>)
 8000de4:	f007 fb94 	bl	8008510 <HAL_TIM_PWM_ConfigChannel>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8000dee:	f000 faed 	bl	80013cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000df2:	463b      	mov	r3, r7
 8000df4:	2208      	movs	r2, #8
 8000df6:	4619      	mov	r1, r3
 8000df8:	480c      	ldr	r0, [pc, #48]	; (8000e2c <MX_TIM3_Init+0x154>)
 8000dfa:	f007 fb89 	bl	8008510 <HAL_TIM_PWM_ConfigChannel>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM3_Init+0x130>
  {
    Error_Handler();
 8000e04:	f000 fae2 	bl	80013cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e08:	463b      	mov	r3, r7
 8000e0a:	220c      	movs	r2, #12
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4807      	ldr	r0, [pc, #28]	; (8000e2c <MX_TIM3_Init+0x154>)
 8000e10:	f007 fb7e 	bl	8008510 <HAL_TIM_PWM_ConfigChannel>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_TIM3_Init+0x146>
  {
    Error_Handler();
 8000e1a:	f000 fad7 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e1e:	4803      	ldr	r0, [pc, #12]	; (8000e2c <MX_TIM3_Init+0x154>)
 8000e20:	f000 fd4e 	bl	80018c0 <HAL_TIM_MspPostInit>

}
 8000e24:	bf00      	nop
 8000e26:	3748      	adds	r7, #72	; 0x48
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20006318 	.word	0x20006318
 8000e30:	40000400 	.word	0x40000400

08000e34 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08c      	sub	sp, #48	; 0x30
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e3a:	f107 030c 	add.w	r3, r7, #12
 8000e3e:	2224      	movs	r2, #36	; 0x24
 8000e40:	2100      	movs	r1, #0
 8000e42:	4618      	mov	r0, r3
 8000e44:	f018 fda7 	bl	8019996 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e48:	1d3b      	adds	r3, r7, #4
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e50:	4b20      	ldr	r3, [pc, #128]	; (8000ed4 <MX_TIM4_Init+0xa0>)
 8000e52:	4a21      	ldr	r2, [pc, #132]	; (8000ed8 <MX_TIM4_Init+0xa4>)
 8000e54:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000e56:	4b1f      	ldr	r3, [pc, #124]	; (8000ed4 <MX_TIM4_Init+0xa0>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e5c:	4b1d      	ldr	r3, [pc, #116]	; (8000ed4 <MX_TIM4_Init+0xa0>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff;
 8000e62:	4b1c      	ldr	r3, [pc, #112]	; (8000ed4 <MX_TIM4_Init+0xa0>)
 8000e64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e68:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e6a:	4b1a      	ldr	r3, [pc, #104]	; (8000ed4 <MX_TIM4_Init+0xa0>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e70:	4b18      	ldr	r3, [pc, #96]	; (8000ed4 <MX_TIM4_Init+0xa0>)
 8000e72:	2280      	movs	r2, #128	; 0x80
 8000e74:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000e76:	2301      	movs	r3, #1
 8000e78:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e82:	2300      	movs	r3, #0
 8000e84:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000e86:	230a      	movs	r3, #10
 8000e88:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e92:	2300      	movs	r3, #0
 8000e94:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8000e96:	230a      	movs	r3, #10
 8000e98:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000e9a:	f107 030c 	add.w	r3, r7, #12
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	480c      	ldr	r0, [pc, #48]	; (8000ed4 <MX_TIM4_Init+0xa0>)
 8000ea2:	f007 f963 	bl	800816c <HAL_TIM_Encoder_Init>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000eac:	f000 fa8e 	bl	80013cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000eb8:	1d3b      	adds	r3, r7, #4
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <MX_TIM4_Init+0xa0>)
 8000ebe:	f008 f8a5 	bl	800900c <HAL_TIMEx_MasterConfigSynchronization>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000ec8:	f000 fa80 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000ecc:	bf00      	nop
 8000ece:	3730      	adds	r7, #48	; 0x30
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20005dc8 	.word	0x20005dc8
 8000ed8:	40000800 	.word	0x40000800

08000edc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08c      	sub	sp, #48	; 0x30
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ee2:	f107 0320 	add.w	r3, r7, #32
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]
 8000eee:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000ef0:	f107 030c 	add.w	r3, r7, #12
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f00:	1d3b      	adds	r3, r7, #4
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000f08:	4b26      	ldr	r3, [pc, #152]	; (8000fa4 <MX_TIM8_Init+0xc8>)
 8000f0a:	4a27      	ldr	r2, [pc, #156]	; (8000fa8 <MX_TIM8_Init+0xcc>)
 8000f0c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 1199;
 8000f0e:	4b25      	ldr	r3, [pc, #148]	; (8000fa4 <MX_TIM8_Init+0xc8>)
 8000f10:	f240 42af 	movw	r2, #1199	; 0x4af
 8000f14:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f16:	4b23      	ldr	r3, [pc, #140]	; (8000fa4 <MX_TIM8_Init+0xc8>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 210;
 8000f1c:	4b21      	ldr	r3, [pc, #132]	; (8000fa4 <MX_TIM8_Init+0xc8>)
 8000f1e:	22d2      	movs	r2, #210	; 0xd2
 8000f20:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f22:	4b20      	ldr	r3, [pc, #128]	; (8000fa4 <MX_TIM8_Init+0xc8>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000f28:	4b1e      	ldr	r3, [pc, #120]	; (8000fa4 <MX_TIM8_Init+0xc8>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f2e:	4b1d      	ldr	r3, [pc, #116]	; (8000fa4 <MX_TIM8_Init+0xc8>)
 8000f30:	2280      	movs	r2, #128	; 0x80
 8000f32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000f34:	481b      	ldr	r0, [pc, #108]	; (8000fa4 <MX_TIM8_Init+0xc8>)
 8000f36:	f006 ffda 	bl	8007eee <HAL_TIM_Base_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_TIM8_Init+0x68>
  {
    Error_Handler();
 8000f40:	f000 fa44 	bl	80013cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f48:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000f4a:	f107 0320 	add.w	r3, r7, #32
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4814      	ldr	r0, [pc, #80]	; (8000fa4 <MX_TIM8_Init+0xc8>)
 8000f52:	f007 fba3 	bl	800869c <HAL_TIM_ConfigClockSource>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8000f5c:	f000 fa36 	bl	80013cc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000f60:	2304      	movs	r3, #4
 8000f62:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000f64:	2300      	movs	r3, #0
 8000f66:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8000f68:	f107 030c 	add.w	r3, r7, #12
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	480d      	ldr	r0, [pc, #52]	; (8000fa4 <MX_TIM8_Init+0xc8>)
 8000f70:	f007 fc4b 	bl	800880a <HAL_TIM_SlaveConfigSynchro>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_TIM8_Init+0xa2>
  {
    Error_Handler();
 8000f7a:	f000 fa27 	bl	80013cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000f7e:	2320      	movs	r3, #32
 8000f80:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000f82:	2380      	movs	r3, #128	; 0x80
 8000f84:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4806      	ldr	r0, [pc, #24]	; (8000fa4 <MX_TIM8_Init+0xc8>)
 8000f8c:	f008 f83e 	bl	800900c <HAL_TIMEx_MasterConfigSynchronization>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8000f96:	f000 fa19 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000f9a:	bf00      	nop
 8000f9c:	3730      	adds	r7, #48	; 0x30
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20005d24 	.word	0x20005d24
 8000fa8:	40010400 	.word	0x40010400

08000fac <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08c      	sub	sp, #48	; 0x30
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000fb2:	f107 031c 	add.w	r3, r7, #28
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	605a      	str	r2, [r3, #4]
 8000fbc:	609a      	str	r2, [r3, #8]
 8000fbe:	60da      	str	r2, [r3, #12]
 8000fc0:	611a      	str	r2, [r3, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fc2:	463b      	mov	r3, r7
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]
 8000fd0:	615a      	str	r2, [r3, #20]
 8000fd2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000fd4:	4b2b      	ldr	r3, [pc, #172]	; (8001084 <MX_TIM12_Init+0xd8>)
 8000fd6:	4a2c      	ldr	r2, [pc, #176]	; (8001088 <MX_TIM12_Init+0xdc>)
 8000fd8:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8000fda:	4b2a      	ldr	r3, [pc, #168]	; (8001084 <MX_TIM12_Init+0xd8>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe0:	4b28      	ldr	r3, [pc, #160]	; (8001084 <MX_TIM12_Init+0xd8>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8000fe6:	4b27      	ldr	r3, [pc, #156]	; (8001084 <MX_TIM12_Init+0xd8>)
 8000fe8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fec:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fee:	4b25      	ldr	r3, [pc, #148]	; (8001084 <MX_TIM12_Init+0xd8>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff4:	4b23      	ldr	r3, [pc, #140]	; (8001084 <MX_TIM12_Init+0xd8>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8000ffa:	4822      	ldr	r0, [pc, #136]	; (8001084 <MX_TIM12_Init+0xd8>)
 8000ffc:	f006 ff77 	bl	8007eee <HAL_TIM_Base_Init>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_TIM12_Init+0x5e>
  {
    Error_Handler();
 8001006:	f000 f9e1 	bl	80013cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800100a:	481e      	ldr	r0, [pc, #120]	; (8001084 <MX_TIM12_Init+0xd8>)
 800100c:	f006 ffe2 	bl	8007fd4 <HAL_TIM_PWM_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_TIM12_Init+0x6e>
  {
    Error_Handler();
 8001016:	f000 f9d9 	bl	80013cc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 800101a:	2300      	movs	r3, #0
 800101c:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800101e:	2300      	movs	r3, #0
 8001020:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim12, &sSlaveConfig) != HAL_OK)
 8001022:	f107 031c 	add.w	r3, r7, #28
 8001026:	4619      	mov	r1, r3
 8001028:	4816      	ldr	r0, [pc, #88]	; (8001084 <MX_TIM12_Init+0xd8>)
 800102a:	f007 fbee 	bl	800880a <HAL_TIM_SlaveConfigSynchro>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_TIM12_Init+0x8c>
  {
    Error_Handler();
 8001034:	f000 f9ca 	bl	80013cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001038:	2360      	movs	r3, #96	; 0x60
 800103a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001040:	2300      	movs	r3, #0
 8001042:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001044:	2300      	movs	r3, #0
 8001046:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001048:	463b      	mov	r3, r7
 800104a:	2200      	movs	r2, #0
 800104c:	4619      	mov	r1, r3
 800104e:	480d      	ldr	r0, [pc, #52]	; (8001084 <MX_TIM12_Init+0xd8>)
 8001050:	f007 fa5e 	bl	8008510 <HAL_TIM_PWM_ConfigChannel>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_TIM12_Init+0xb2>
  {
    Error_Handler();
 800105a:	f000 f9b7 	bl	80013cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800105e:	463b      	mov	r3, r7
 8001060:	2204      	movs	r2, #4
 8001062:	4619      	mov	r1, r3
 8001064:	4807      	ldr	r0, [pc, #28]	; (8001084 <MX_TIM12_Init+0xd8>)
 8001066:	f007 fa53 	bl	8008510 <HAL_TIM_PWM_ConfigChannel>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_TIM12_Init+0xc8>
  {
    Error_Handler();
 8001070:	f000 f9ac 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001074:	4803      	ldr	r0, [pc, #12]	; (8001084 <MX_TIM12_Init+0xd8>)
 8001076:	f000 fc23 	bl	80018c0 <HAL_TIM_MspPostInit>

}
 800107a:	bf00      	nop
 800107c:	3730      	adds	r7, #48	; 0x30
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20006db4 	.word	0x20006db4
 8001088:	40001800 	.word	0x40001800

0800108c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001090:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <MX_UART4_Init+0x4c>)
 8001092:	4a12      	ldr	r2, [pc, #72]	; (80010dc <MX_UART4_Init+0x50>)
 8001094:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001096:	4b10      	ldr	r3, [pc, #64]	; (80010d8 <MX_UART4_Init+0x4c>)
 8001098:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800109c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800109e:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <MX_UART4_Init+0x4c>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80010a4:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <MX_UART4_Init+0x4c>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80010aa:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <MX_UART4_Init+0x4c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80010b0:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <MX_UART4_Init+0x4c>)
 80010b2:	220c      	movs	r2, #12
 80010b4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010b6:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <MX_UART4_Init+0x4c>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80010bc:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <MX_UART4_Init+0x4c>)
 80010be:	2200      	movs	r2, #0
 80010c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80010c2:	4805      	ldr	r0, [pc, #20]	; (80010d8 <MX_UART4_Init+0x4c>)
 80010c4:	f008 f884 	bl	80091d0 <HAL_UART_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80010ce:	f000 f97d 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20006ccc 	.word	0x20006ccc
 80010dc:	40004c00 	.word	0x40004c00

080010e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	607b      	str	r3, [r7, #4]
 80010ea:	4b0c      	ldr	r3, [pc, #48]	; (800111c <MX_DMA_Init+0x3c>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	4a0b      	ldr	r2, [pc, #44]	; (800111c <MX_DMA_Init+0x3c>)
 80010f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010f4:	6313      	str	r3, [r2, #48]	; 0x30
 80010f6:	4b09      	ldr	r3, [pc, #36]	; (800111c <MX_DMA_Init+0x3c>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010fe:	607b      	str	r3, [r7, #4]
 8001100:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 7, 0);
 8001102:	2200      	movs	r2, #0
 8001104:	2107      	movs	r1, #7
 8001106:	2038      	movs	r0, #56	; 0x38
 8001108:	f001 fb52 	bl	80027b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800110c:	2038      	movs	r0, #56	; 0x38
 800110e:	f001 fb6b 	bl	80027e8 <HAL_NVIC_EnableIRQ>

}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40023800 	.word	0x40023800

08001120 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08c      	sub	sp, #48	; 0x30
 8001124:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001126:	f107 031c 	add.w	r3, r7, #28
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]
 8001132:	60da      	str	r2, [r3, #12]
 8001134:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	61bb      	str	r3, [r7, #24]
 800113a:	4b65      	ldr	r3, [pc, #404]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	4a64      	ldr	r2, [pc, #400]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 8001140:	f043 0310 	orr.w	r3, r3, #16
 8001144:	6313      	str	r3, [r2, #48]	; 0x30
 8001146:	4b62      	ldr	r3, [pc, #392]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	f003 0310 	and.w	r3, r3, #16
 800114e:	61bb      	str	r3, [r7, #24]
 8001150:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	617b      	str	r3, [r7, #20]
 8001156:	4b5e      	ldr	r3, [pc, #376]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	4a5d      	ldr	r2, [pc, #372]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 800115c:	f043 0304 	orr.w	r3, r3, #4
 8001160:	6313      	str	r3, [r2, #48]	; 0x30
 8001162:	4b5b      	ldr	r3, [pc, #364]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	f003 0304 	and.w	r3, r3, #4
 800116a:	617b      	str	r3, [r7, #20]
 800116c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	613b      	str	r3, [r7, #16]
 8001172:	4b57      	ldr	r3, [pc, #348]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	4a56      	ldr	r2, [pc, #344]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 8001178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800117c:	6313      	str	r3, [r2, #48]	; 0x30
 800117e:	4b54      	ldr	r3, [pc, #336]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001186:	613b      	str	r3, [r7, #16]
 8001188:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	4b50      	ldr	r3, [pc, #320]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	4a4f      	ldr	r2, [pc, #316]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	6313      	str	r3, [r2, #48]	; 0x30
 800119a:	4b4d      	ldr	r3, [pc, #308]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	60bb      	str	r3, [r7, #8]
 80011aa:	4b49      	ldr	r3, [pc, #292]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4a48      	ldr	r2, [pc, #288]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 80011b0:	f043 0302 	orr.w	r3, r3, #2
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	4b46      	ldr	r3, [pc, #280]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	60bb      	str	r3, [r7, #8]
 80011c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	607b      	str	r3, [r7, #4]
 80011c6:	4b42      	ldr	r3, [pc, #264]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	4a41      	ldr	r2, [pc, #260]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 80011cc:	f043 0308 	orr.w	r3, r3, #8
 80011d0:	6313      	str	r3, [r2, #48]	; 0x30
 80011d2:	4b3f      	ldr	r3, [pc, #252]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	f003 0308 	and.w	r3, r3, #8
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VOLT_4_SEL0_Pin|VOLT_4_SEL1_Pin|VOLT_4_SEL2_Pin|TURN3A_Pin
 80011de:	2200      	movs	r2, #0
 80011e0:	f249 116f 	movw	r1, #37231	; 0x916f
 80011e4:	483b      	ldr	r0, [pc, #236]	; (80012d4 <MX_GPIO_Init+0x1b4>)
 80011e6:	f002 f845 	bl	8003274 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_12|GPIO_PIN_15|TURN2A_Pin
                          |TURN2B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TURN3B_Pin|GPIO_PIN_12, GPIO_PIN_RESET);
 80011ea:	2200      	movs	r2, #0
 80011ec:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80011f0:	4839      	ldr	r0, [pc, #228]	; (80012d8 <MX_GPIO_Init+0x1b8>)
 80011f2:	f002 f83f 	bl	8003274 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
 80011f6:	2200      	movs	r2, #0
 80011f8:	f248 6140 	movw	r1, #34368	; 0x8640
 80011fc:	4837      	ldr	r0, [pc, #220]	; (80012dc <MX_GPIO_Init+0x1bc>)
 80011fe:	f002 f839 	bl	8003274 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|VOLT_3_SEL0_Pin|GPIO_PIN_13|GPIO_PIN_4
 8001202:	2200      	movs	r2, #0
 8001204:	f243 3134 	movw	r1, #13108	; 0x3334
 8001208:	4835      	ldr	r0, [pc, #212]	; (80012e0 <MX_GPIO_Init+0x1c0>)
 800120a:	f002 f833 	bl	8003274 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|TURN1A_Pin|TURN1B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, VOLT_2_SEL2_Pin|VOLT_3_SEL0D9_Pin|VOLT_3_SEL1_Pin|VOLT_3_SEL2_Pin
 800120e:	2200      	movs	r2, #0
 8001210:	f640 71ff 	movw	r1, #4095	; 0xfff
 8001214:	4833      	ldr	r0, [pc, #204]	; (80012e4 <MX_GPIO_Init+0x1c4>)
 8001216:	f002 f82d 	bl	8003274 <HAL_GPIO_WritePin>
                          |VOLT_1_SEL1_Pin|VOLT_1_SEL2_Pin|VOLT_2_SEL0_Pin|VOLT_2_SEL1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : VOLT_4_SEL0_Pin VOLT_4_SEL1_Pin VOLT_4_SEL2_Pin TURN3A_Pin
                           PE8 PE12 PE15 TURN2A_Pin
                           TURN2B_Pin */
  GPIO_InitStruct.Pin = VOLT_4_SEL0_Pin|VOLT_4_SEL1_Pin|VOLT_4_SEL2_Pin|TURN3A_Pin
 800121a:	f249 136f 	movw	r3, #37231	; 0x916f
 800121e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_8|GPIO_PIN_12|GPIO_PIN_15|TURN2A_Pin
                          |TURN2B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001220:	2301      	movs	r3, #1
 8001222:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001228:	2300      	movs	r3, #0
 800122a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800122c:	f107 031c 	add.w	r3, r7, #28
 8001230:	4619      	mov	r1, r3
 8001232:	4828      	ldr	r0, [pc, #160]	; (80012d4 <MX_GPIO_Init+0x1b4>)
 8001234:	f001 fe84 	bl	8002f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BTN_Pin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 8001238:	2310      	movs	r3, #16
 800123a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800123c:	2300      	movs	r3, #0
 800123e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001240:	2301      	movs	r3, #1
 8001242:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 8001244:	f107 031c 	add.w	r3, r7, #28
 8001248:	4619      	mov	r1, r3
 800124a:	4822      	ldr	r0, [pc, #136]	; (80012d4 <MX_GPIO_Init+0x1b4>)
 800124c:	f001 fe78 	bl	8002f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : TURN3B_Pin PC12 */
  GPIO_InitStruct.Pin = TURN3B_Pin|GPIO_PIN_12;
 8001250:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001254:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001256:	2301      	movs	r3, #1
 8001258:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125e:	2300      	movs	r3, #0
 8001260:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001262:	f107 031c 	add.w	r3, r7, #28
 8001266:	4619      	mov	r1, r3
 8001268:	481b      	ldr	r0, [pc, #108]	; (80012d8 <MX_GPIO_Init+0x1b8>)
 800126a:	f001 fe69 	bl	8002f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = LED1_Pin|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
 800126e:	f248 6340 	movw	r3, #34368	; 0x8640
 8001272:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001274:	2301      	movs	r3, #1
 8001276:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127c:	2300      	movs	r3, #0
 800127e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001280:	f107 031c 	add.w	r3, r7, #28
 8001284:	4619      	mov	r1, r3
 8001286:	4815      	ldr	r0, [pc, #84]	; (80012dc <MX_GPIO_Init+0x1bc>)
 8001288:	f001 fe5a 	bl	8002f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 VOLT_3_SEL0_Pin PB13 PB4
                           PB5 TURN1A_Pin TURN1B_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|VOLT_3_SEL0_Pin|GPIO_PIN_13|GPIO_PIN_4
 800128c:	f243 3334 	movw	r3, #13108	; 0x3334
 8001290:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5|TURN1A_Pin|TURN1B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001292:	2301      	movs	r3, #1
 8001294:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129a:	2300      	movs	r3, #0
 800129c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800129e:	f107 031c 	add.w	r3, r7, #28
 80012a2:	4619      	mov	r1, r3
 80012a4:	480e      	ldr	r0, [pc, #56]	; (80012e0 <MX_GPIO_Init+0x1c0>)
 80012a6:	f001 fe4b 	bl	8002f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : VOLT_2_SEL2_Pin VOLT_3_SEL0D9_Pin VOLT_3_SEL1_Pin VOLT_3_SEL2_Pin
                           VOLT_0_SEL0_Pin VOLT_0_SEL1_Pin VOLT_0_SEL2_Pin VOLT_1_SEL0_Pin
                           VOLT_1_SEL1_Pin VOLT_1_SEL2_Pin VOLT_2_SEL0_Pin VOLT_2_SEL1_Pin */
  GPIO_InitStruct.Pin = VOLT_2_SEL2_Pin|VOLT_3_SEL0D9_Pin|VOLT_3_SEL1_Pin|VOLT_3_SEL2_Pin
 80012aa:	f640 73ff 	movw	r3, #4095	; 0xfff
 80012ae:	61fb      	str	r3, [r7, #28]
                          |VOLT_0_SEL0_Pin|VOLT_0_SEL1_Pin|VOLT_0_SEL2_Pin|VOLT_1_SEL0_Pin
                          |VOLT_1_SEL1_Pin|VOLT_1_SEL2_Pin|VOLT_2_SEL0_Pin|VOLT_2_SEL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b0:	2301      	movs	r3, #1
 80012b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b8:	2300      	movs	r3, #0
 80012ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012bc:	f107 031c 	add.w	r3, r7, #28
 80012c0:	4619      	mov	r1, r3
 80012c2:	4808      	ldr	r0, [pc, #32]	; (80012e4 <MX_GPIO_Init+0x1c4>)
 80012c4:	f001 fe3c 	bl	8002f40 <HAL_GPIO_Init>

}
 80012c8:	bf00      	nop
 80012ca:	3730      	adds	r7, #48	; 0x30
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40023800 	.word	0x40023800
 80012d4:	40021000 	.word	0x40021000
 80012d8:	40020800 	.word	0x40020800
 80012dc:	40020000 	.word	0x40020000
 80012e0:	40020400 	.word	0x40020400
 80012e4:	40020c00 	.word	0x40020c00

080012e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b088      	sub	sp, #32
 80012ec:	af02      	add	r7, sp, #8
 80012ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a2b      	ldr	r2, [pc, #172]	; (80013a4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d101      	bne.n	80012fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012fa:	f000 fd89 	bl	8001e10 <HAL_IncTick>
		  xTaskNotifyFromISR(uiTaskHandle, NOTIF_TICKUI, eSetBits, &higher);
		  portYIELD_FROM_ISR(higher);
	  }
  }
  */
  if (htim->Instance == TIM8) {
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a29      	ldr	r2, [pc, #164]	; (80013a8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d104      	bne.n	8001312 <HAL_TIM_PeriodElapsedCallback+0x2a>
		  ina3221_trigger_conversion();
		  //BaseType_t higher=0;
		  //xTaskNotifyFromISR(ctrlTaskHandle, NOTIF_TIM8, eSetBits, &higher);
		  //portYIELD_FROM_ISR(higher);
	  } else {
		  itm_debug1(DBG_TIM, "tim8",0);
 8001308:	2200      	movs	r2, #0
 800130a:	4928      	ldr	r1, [pc, #160]	; (80013ac <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800130c:	2001      	movs	r0, #1
 800130e:	f7ff f901 	bl	8000514 <itm_debug1>
	  }
  }
  if (htim->Instance == TIM1) {
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a26      	ldr	r2, [pc, #152]	; (80013b0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d13e      	bne.n	800139a <HAL_TIM_PeriodElapsedCallback+0xb2>
	  static uint32_t lasttick = 0;
	  uint32_t t = HAL_GetTick();
 800131c:	f000 fd8c 	bl	8001e38 <HAL_GetTick>
 8001320:	6178      	str	r0, [r7, #20]
	  if (t >= lasttick+5) { // not faster than 20Hz, whatever the frequency is
 8001322:	4b24      	ldr	r3, [pc, #144]	; (80013b4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	3305      	adds	r3, #5
 8001328:	697a      	ldr	r2, [r7, #20]
 800132a:	429a      	cmp	r2, r3
 800132c:	d335      	bcc.n	800139a <HAL_TIM_PeriodElapsedCallback+0xb2>
		  lasttick = t;
 800132e:	4a21      	ldr	r2, [pc, #132]	; (80013b4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	6013      	str	r3, [r2, #0]
		  uint32_t t1 = __HAL_TIM_GET_COUNTER(&htim1);
 8001334:	4b20      	ldr	r3, [pc, #128]	; (80013b8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133a:	613b      	str	r3, [r7, #16]
		  if (0 || (t1<50)) {
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	2b31      	cmp	r3, #49	; 0x31
 8001340:	d82b      	bhi.n	800139a <HAL_TIM_PeriodElapsedCallback+0xb2>
			  static uint32_t cnt = 0;
			  itm_debug2(DBG_TIM|DBG_INA3221, "tim1",cnt, t1);
 8001342:	4b1e      	ldr	r3, [pc, #120]	; (80013bc <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	461a      	mov	r2, r3
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	491d      	ldr	r1, [pc, #116]	; (80013c0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800134c:	2021      	movs	r0, #33	; 0x21
 800134e:	f7ff f8fb 	bl	8000548 <itm_debug2>
			  cnt++;
 8001352:	4b1a      	ldr	r3, [pc, #104]	; (80013bc <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	3301      	adds	r3, #1
 8001358:	4a18      	ldr	r2, [pc, #96]	; (80013bc <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800135a:	6013      	str	r3, [r2, #0]
#if INA3221_TASK
			  BaseType_t higher=0;
 800135c:	2300      	movs	r3, #0
 800135e:	60fb      	str	r3, [r7, #12]
			  xTaskNotifyFromISR(ina3221_taskHandle, (cnt%2) ? NOTIF_INA_READ : NOTIF_INA_TRIG, eSetBits, &higher);
 8001360:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001362:	6818      	ldr	r0, [r3, #0]
 8001364:	4b15      	ldr	r3, [pc, #84]	; (80013bc <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 0301 	and.w	r3, r3, #1
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <HAL_TIM_PeriodElapsedCallback+0x8c>
 8001370:	2108      	movs	r1, #8
 8001372:	e000      	b.n	8001376 <HAL_TIM_PeriodElapsedCallback+0x8e>
 8001374:	2104      	movs	r1, #4
 8001376:	f107 030c 	add.w	r3, r7, #12
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	2300      	movs	r3, #0
 800137e:	2201      	movs	r2, #1
 8001380:	f00d fd80 	bl	800ee84 <xTaskGenericNotifyFromISR>
			  portYIELD_FROM_ISR(higher);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d007      	beq.n	800139a <HAL_TIM_PeriodElapsedCallback+0xb2>
 800138a:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800138c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	f3bf 8f4f 	dsb	sy
 8001396:	f3bf 8f6f 	isb	sy
#endif
		  }
	  }
  }
  /* USER CODE END Callback 1 */
}
 800139a:	bf00      	nop
 800139c:	3718      	adds	r7, #24
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40001400 	.word	0x40001400
 80013a8:	40010400 	.word	0x40010400
 80013ac:	08019ca4 	.word	0x08019ca4
 80013b0:	40010000 	.word	0x40010000
 80013b4:	20000694 	.word	0x20000694
 80013b8:	20006824 	.word	0x20006824
 80013bc:	20000698 	.word	0x20000698
 80013c0:	08019cac 	.word	0x08019cac
 80013c4:	20006db0 	.word	0x20006db0
 80013c8:	e000ed04 	.word	0xe000ed04

080013cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	for (;;) {
 80013d0:	e7fe      	b.n	80013d0 <Error_Handler+0x4>
	...

080013d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	607b      	str	r3, [r7, #4]
 80013de:	4b10      	ldr	r3, [pc, #64]	; (8001420 <HAL_MspInit+0x4c>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	4a0f      	ldr	r2, [pc, #60]	; (8001420 <HAL_MspInit+0x4c>)
 80013e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e8:	6453      	str	r3, [r2, #68]	; 0x44
 80013ea:	4b0d      	ldr	r3, [pc, #52]	; (8001420 <HAL_MspInit+0x4c>)
 80013ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013f2:	607b      	str	r3, [r7, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	603b      	str	r3, [r7, #0]
 80013fa:	4b09      	ldr	r3, [pc, #36]	; (8001420 <HAL_MspInit+0x4c>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	4a08      	ldr	r2, [pc, #32]	; (8001420 <HAL_MspInit+0x4c>)
 8001400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001404:	6413      	str	r3, [r2, #64]	; 0x40
 8001406:	4b06      	ldr	r3, [pc, #24]	; (8001420 <HAL_MspInit+0x4c>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140e:	603b      	str	r3, [r7, #0]
 8001410:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	40023800 	.word	0x40023800

08001424 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08c      	sub	sp, #48	; 0x30
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142c:	f107 031c 	add.w	r3, r7, #28
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a4a      	ldr	r2, [pc, #296]	; (800156c <HAL_ADC_MspInit+0x148>)
 8001442:	4293      	cmp	r3, r2
 8001444:	f040 808d 	bne.w	8001562 <HAL_ADC_MspInit+0x13e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001448:	2300      	movs	r3, #0
 800144a:	61bb      	str	r3, [r7, #24]
 800144c:	4b48      	ldr	r3, [pc, #288]	; (8001570 <HAL_ADC_MspInit+0x14c>)
 800144e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001450:	4a47      	ldr	r2, [pc, #284]	; (8001570 <HAL_ADC_MspInit+0x14c>)
 8001452:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001456:	6453      	str	r3, [r2, #68]	; 0x44
 8001458:	4b45      	ldr	r3, [pc, #276]	; (8001570 <HAL_ADC_MspInit+0x14c>)
 800145a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001460:	61bb      	str	r3, [r7, #24]
 8001462:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]
 8001468:	4b41      	ldr	r3, [pc, #260]	; (8001570 <HAL_ADC_MspInit+0x14c>)
 800146a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146c:	4a40      	ldr	r2, [pc, #256]	; (8001570 <HAL_ADC_MspInit+0x14c>)
 800146e:	f043 0304 	orr.w	r3, r3, #4
 8001472:	6313      	str	r3, [r2, #48]	; 0x30
 8001474:	4b3e      	ldr	r3, [pc, #248]	; (8001570 <HAL_ADC_MspInit+0x14c>)
 8001476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001478:	f003 0304 	and.w	r3, r3, #4
 800147c:	617b      	str	r3, [r7, #20]
 800147e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001480:	2300      	movs	r3, #0
 8001482:	613b      	str	r3, [r7, #16]
 8001484:	4b3a      	ldr	r3, [pc, #232]	; (8001570 <HAL_ADC_MspInit+0x14c>)
 8001486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001488:	4a39      	ldr	r2, [pc, #228]	; (8001570 <HAL_ADC_MspInit+0x14c>)
 800148a:	f043 0301 	orr.w	r3, r3, #1
 800148e:	6313      	str	r3, [r2, #48]	; 0x30
 8001490:	4b37      	ldr	r3, [pc, #220]	; (8001570 <HAL_ADC_MspInit+0x14c>)
 8001492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001494:	f003 0301 	and.w	r3, r3, #1
 8001498:	613b      	str	r3, [r7, #16]
 800149a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800149c:	2300      	movs	r3, #0
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	4b33      	ldr	r3, [pc, #204]	; (8001570 <HAL_ADC_MspInit+0x14c>)
 80014a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a4:	4a32      	ldr	r2, [pc, #200]	; (8001570 <HAL_ADC_MspInit+0x14c>)
 80014a6:	f043 0302 	orr.w	r3, r3, #2
 80014aa:	6313      	str	r3, [r2, #48]	; 0x30
 80014ac:	4b30      	ldr	r3, [pc, #192]	; (8001570 <HAL_ADC_MspInit+0x14c>)
 80014ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b0:	f003 0302 	and.w	r3, r3, #2
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = ADC_4_V0_Pin|ADC_4_V1_Pin|GPIO_PIN_2|GPIO_PIN_3
 80014b8:	231f      	movs	r3, #31
 80014ba:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014bc:	2303      	movs	r3, #3
 80014be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c4:	f107 031c 	add.w	r3, r7, #28
 80014c8:	4619      	mov	r1, r3
 80014ca:	482a      	ldr	r0, [pc, #168]	; (8001574 <HAL_ADC_MspInit+0x150>)
 80014cc:	f001 fd38 	bl	8002f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|ADC_1_V0_Pin|GPIO_PIN_3
 80014d0:	233f      	movs	r3, #63	; 0x3f
 80014d2:	61fb      	str	r3, [r7, #28]
                          |ADC_2_V0_Pin|ADC_2_V1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014d4:	2303      	movs	r3, #3
 80014d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014dc:	f107 031c 	add.w	r3, r7, #28
 80014e0:	4619      	mov	r1, r3
 80014e2:	4825      	ldr	r0, [pc, #148]	; (8001578 <HAL_ADC_MspInit+0x154>)
 80014e4:	f001 fd2c 	bl	8002f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_3_V1_Pin;
 80014e8:	2301      	movs	r3, #1
 80014ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014ec:	2303      	movs	r3, #3
 80014ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_3_V1_GPIO_Port, &GPIO_InitStruct);
 80014f4:	f107 031c 	add.w	r3, r7, #28
 80014f8:	4619      	mov	r1, r3
 80014fa:	4820      	ldr	r0, [pc, #128]	; (800157c <HAL_ADC_MspInit+0x158>)
 80014fc:	f001 fd20 	bl	8002f40 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001500:	4b1f      	ldr	r3, [pc, #124]	; (8001580 <HAL_ADC_MspInit+0x15c>)
 8001502:	4a20      	ldr	r2, [pc, #128]	; (8001584 <HAL_ADC_MspInit+0x160>)
 8001504:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001506:	4b1e      	ldr	r3, [pc, #120]	; (8001580 <HAL_ADC_MspInit+0x15c>)
 8001508:	2200      	movs	r2, #0
 800150a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800150c:	4b1c      	ldr	r3, [pc, #112]	; (8001580 <HAL_ADC_MspInit+0x15c>)
 800150e:	2200      	movs	r2, #0
 8001510:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001512:	4b1b      	ldr	r3, [pc, #108]	; (8001580 <HAL_ADC_MspInit+0x15c>)
 8001514:	2200      	movs	r2, #0
 8001516:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001518:	4b19      	ldr	r3, [pc, #100]	; (8001580 <HAL_ADC_MspInit+0x15c>)
 800151a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800151e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001520:	4b17      	ldr	r3, [pc, #92]	; (8001580 <HAL_ADC_MspInit+0x15c>)
 8001522:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001526:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001528:	4b15      	ldr	r3, [pc, #84]	; (8001580 <HAL_ADC_MspInit+0x15c>)
 800152a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800152e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001530:	4b13      	ldr	r3, [pc, #76]	; (8001580 <HAL_ADC_MspInit+0x15c>)
 8001532:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001536:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001538:	4b11      	ldr	r3, [pc, #68]	; (8001580 <HAL_ADC_MspInit+0x15c>)
 800153a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800153e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001540:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <HAL_ADC_MspInit+0x15c>)
 8001542:	2200      	movs	r2, #0
 8001544:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001546:	480e      	ldr	r0, [pc, #56]	; (8001580 <HAL_ADC_MspInit+0x15c>)
 8001548:	f001 f95c 	bl	8002804 <HAL_DMA_Init>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <HAL_ADC_MspInit+0x132>
    {
      Error_Handler();
 8001552:	f7ff ff3b 	bl	80013cc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a09      	ldr	r2, [pc, #36]	; (8001580 <HAL_ADC_MspInit+0x15c>)
 800155a:	639a      	str	r2, [r3, #56]	; 0x38
 800155c:	4a08      	ldr	r2, [pc, #32]	; (8001580 <HAL_ADC_MspInit+0x15c>)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001562:	bf00      	nop
 8001564:	3730      	adds	r7, #48	; 0x30
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40012000 	.word	0x40012000
 8001570:	40023800 	.word	0x40023800
 8001574:	40020800 	.word	0x40020800
 8001578:	40020000 	.word	0x40020000
 800157c:	40020400 	.word	0x40020400
 8001580:	200063a4 	.word	0x200063a4
 8001584:	40026410 	.word	0x40026410

08001588 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b08c      	sub	sp, #48	; 0x30
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001590:	f107 031c 	add.w	r3, r7, #28
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a52      	ldr	r2, [pc, #328]	; (80016f0 <HAL_I2C_MspInit+0x168>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d13c      	bne.n	8001624 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	61bb      	str	r3, [r7, #24]
 80015ae:	4b51      	ldr	r3, [pc, #324]	; (80016f4 <HAL_I2C_MspInit+0x16c>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	4a50      	ldr	r2, [pc, #320]	; (80016f4 <HAL_I2C_MspInit+0x16c>)
 80015b4:	f043 0302 	orr.w	r3, r3, #2
 80015b8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ba:	4b4e      	ldr	r3, [pc, #312]	; (80016f4 <HAL_I2C_MspInit+0x16c>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	61bb      	str	r3, [r7, #24]
 80015c4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015c6:	23c0      	movs	r3, #192	; 0xc0
 80015c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015ca:	2312      	movs	r3, #18
 80015cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015ce:	2301      	movs	r3, #1
 80015d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d2:	2303      	movs	r3, #3
 80015d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015d6:	2304      	movs	r3, #4
 80015d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015da:	f107 031c 	add.w	r3, r7, #28
 80015de:	4619      	mov	r1, r3
 80015e0:	4845      	ldr	r0, [pc, #276]	; (80016f8 <HAL_I2C_MspInit+0x170>)
 80015e2:	f001 fcad 	bl	8002f40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	617b      	str	r3, [r7, #20]
 80015ea:	4b42      	ldr	r3, [pc, #264]	; (80016f4 <HAL_I2C_MspInit+0x16c>)
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	4a41      	ldr	r2, [pc, #260]	; (80016f4 <HAL_I2C_MspInit+0x16c>)
 80015f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015f4:	6413      	str	r3, [r2, #64]	; 0x40
 80015f6:	4b3f      	ldr	r3, [pc, #252]	; (80016f4 <HAL_I2C_MspInit+0x16c>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015fe:	617b      	str	r3, [r7, #20]
 8001600:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001602:	2200      	movs	r2, #0
 8001604:	2100      	movs	r1, #0
 8001606:	201f      	movs	r0, #31
 8001608:	f001 f8d2 	bl	80027b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800160c:	201f      	movs	r0, #31
 800160e:	f001 f8eb 	bl	80027e8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001612:	2200      	movs	r2, #0
 8001614:	2100      	movs	r1, #0
 8001616:	2020      	movs	r0, #32
 8001618:	f001 f8ca 	bl	80027b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800161c:	2020      	movs	r0, #32
 800161e:	f001 f8e3 	bl	80027e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001622:	e060      	b.n	80016e6 <HAL_I2C_MspInit+0x15e>
  else if(hi2c->Instance==I2C3)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a34      	ldr	r2, [pc, #208]	; (80016fc <HAL_I2C_MspInit+0x174>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d15b      	bne.n	80016e6 <HAL_I2C_MspInit+0x15e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	613b      	str	r3, [r7, #16]
 8001632:	4b30      	ldr	r3, [pc, #192]	; (80016f4 <HAL_I2C_MspInit+0x16c>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	4a2f      	ldr	r2, [pc, #188]	; (80016f4 <HAL_I2C_MspInit+0x16c>)
 8001638:	f043 0304 	orr.w	r3, r3, #4
 800163c:	6313      	str	r3, [r2, #48]	; 0x30
 800163e:	4b2d      	ldr	r3, [pc, #180]	; (80016f4 <HAL_I2C_MspInit+0x16c>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	f003 0304 	and.w	r3, r3, #4
 8001646:	613b      	str	r3, [r7, #16]
 8001648:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	4b29      	ldr	r3, [pc, #164]	; (80016f4 <HAL_I2C_MspInit+0x16c>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	4a28      	ldr	r2, [pc, #160]	; (80016f4 <HAL_I2C_MspInit+0x16c>)
 8001654:	f043 0301 	orr.w	r3, r3, #1
 8001658:	6313      	str	r3, [r2, #48]	; 0x30
 800165a:	4b26      	ldr	r3, [pc, #152]	; (80016f4 <HAL_I2C_MspInit+0x16c>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001666:	f44f 7300 	mov.w	r3, #512	; 0x200
 800166a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800166c:	2312      	movs	r3, #18
 800166e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001670:	2301      	movs	r3, #1
 8001672:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001674:	2303      	movs	r3, #3
 8001676:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001678:	2304      	movs	r3, #4
 800167a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800167c:	f107 031c 	add.w	r3, r7, #28
 8001680:	4619      	mov	r1, r3
 8001682:	481f      	ldr	r0, [pc, #124]	; (8001700 <HAL_I2C_MspInit+0x178>)
 8001684:	f001 fc5c 	bl	8002f40 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001688:	f44f 7380 	mov.w	r3, #256	; 0x100
 800168c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800168e:	2312      	movs	r3, #18
 8001690:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001692:	2301      	movs	r3, #1
 8001694:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001696:	2303      	movs	r3, #3
 8001698:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800169a:	2304      	movs	r3, #4
 800169c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169e:	f107 031c 	add.w	r3, r7, #28
 80016a2:	4619      	mov	r1, r3
 80016a4:	4817      	ldr	r0, [pc, #92]	; (8001704 <HAL_I2C_MspInit+0x17c>)
 80016a6:	f001 fc4b 	bl	8002f40 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	60bb      	str	r3, [r7, #8]
 80016ae:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <HAL_I2C_MspInit+0x16c>)
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	4a10      	ldr	r2, [pc, #64]	; (80016f4 <HAL_I2C_MspInit+0x16c>)
 80016b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80016b8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ba:	4b0e      	ldr	r3, [pc, #56]	; (80016f4 <HAL_I2C_MspInit+0x16c>)
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80016c2:	60bb      	str	r3, [r7, #8]
 80016c4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 5, 0);
 80016c6:	2200      	movs	r2, #0
 80016c8:	2105      	movs	r1, #5
 80016ca:	2048      	movs	r0, #72	; 0x48
 80016cc:	f001 f870 	bl	80027b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80016d0:	2048      	movs	r0, #72	; 0x48
 80016d2:	f001 f889 	bl	80027e8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 5, 0);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2105      	movs	r1, #5
 80016da:	2049      	movs	r0, #73	; 0x49
 80016dc:	f001 f868 	bl	80027b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 80016e0:	2049      	movs	r0, #73	; 0x49
 80016e2:	f001 f881 	bl	80027e8 <HAL_NVIC_EnableIRQ>
}
 80016e6:	bf00      	nop
 80016e8:	3730      	adds	r7, #48	; 0x30
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40005400 	.word	0x40005400
 80016f4:	40023800 	.word	0x40023800
 80016f8:	40020400 	.word	0x40020400
 80016fc:	40005c00 	.word	0x40005c00
 8001700:	40020800 	.word	0x40020800
 8001704:	40020000 	.word	0x40020000

08001708 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a05      	ldr	r2, [pc, #20]	; (800172c <HAL_RTC_MspInit+0x24>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d102      	bne.n	8001720 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800171a:	4b05      	ldr	r3, [pc, #20]	; (8001730 <HAL_RTC_MspInit+0x28>)
 800171c:	2201      	movs	r2, #1
 800171e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	40002800 	.word	0x40002800
 8001730:	42470e3c 	.word	0x42470e3c

08001734 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b088      	sub	sp, #32
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a36      	ldr	r2, [pc, #216]	; (800181c <HAL_TIM_Base_MspInit+0xe8>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d116      	bne.n	8001774 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	61fb      	str	r3, [r7, #28]
 800174a:	4b35      	ldr	r3, [pc, #212]	; (8001820 <HAL_TIM_Base_MspInit+0xec>)
 800174c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174e:	4a34      	ldr	r2, [pc, #208]	; (8001820 <HAL_TIM_Base_MspInit+0xec>)
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	6453      	str	r3, [r2, #68]	; 0x44
 8001756:	4b32      	ldr	r3, [pc, #200]	; (8001820 <HAL_TIM_Base_MspInit+0xec>)
 8001758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	61fb      	str	r3, [r7, #28]
 8001760:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 7, 0);
 8001762:	2200      	movs	r2, #0
 8001764:	2107      	movs	r1, #7
 8001766:	2019      	movs	r0, #25
 8001768:	f001 f822 	bl	80027b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800176c:	2019      	movs	r0, #25
 800176e:	f001 f83b 	bl	80027e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8001772:	e04e      	b.n	8001812 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM2)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800177c:	d10e      	bne.n	800179c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	61bb      	str	r3, [r7, #24]
 8001782:	4b27      	ldr	r3, [pc, #156]	; (8001820 <HAL_TIM_Base_MspInit+0xec>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	4a26      	ldr	r2, [pc, #152]	; (8001820 <HAL_TIM_Base_MspInit+0xec>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	6413      	str	r3, [r2, #64]	; 0x40
 800178e:	4b24      	ldr	r3, [pc, #144]	; (8001820 <HAL_TIM_Base_MspInit+0xec>)
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	61bb      	str	r3, [r7, #24]
 8001798:	69bb      	ldr	r3, [r7, #24]
}
 800179a:	e03a      	b.n	8001812 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM3)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a20      	ldr	r2, [pc, #128]	; (8001824 <HAL_TIM_Base_MspInit+0xf0>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d10e      	bne.n	80017c4 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	617b      	str	r3, [r7, #20]
 80017aa:	4b1d      	ldr	r3, [pc, #116]	; (8001820 <HAL_TIM_Base_MspInit+0xec>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	4a1c      	ldr	r2, [pc, #112]	; (8001820 <HAL_TIM_Base_MspInit+0xec>)
 80017b0:	f043 0302 	orr.w	r3, r3, #2
 80017b4:	6413      	str	r3, [r2, #64]	; 0x40
 80017b6:	4b1a      	ldr	r3, [pc, #104]	; (8001820 <HAL_TIM_Base_MspInit+0xec>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	617b      	str	r3, [r7, #20]
 80017c0:	697b      	ldr	r3, [r7, #20]
}
 80017c2:	e026      	b.n	8001812 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM8)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a17      	ldr	r2, [pc, #92]	; (8001828 <HAL_TIM_Base_MspInit+0xf4>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d10e      	bne.n	80017ec <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	613b      	str	r3, [r7, #16]
 80017d2:	4b13      	ldr	r3, [pc, #76]	; (8001820 <HAL_TIM_Base_MspInit+0xec>)
 80017d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d6:	4a12      	ldr	r2, [pc, #72]	; (8001820 <HAL_TIM_Base_MspInit+0xec>)
 80017d8:	f043 0302 	orr.w	r3, r3, #2
 80017dc:	6453      	str	r3, [r2, #68]	; 0x44
 80017de:	4b10      	ldr	r3, [pc, #64]	; (8001820 <HAL_TIM_Base_MspInit+0xec>)
 80017e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	613b      	str	r3, [r7, #16]
 80017e8:	693b      	ldr	r3, [r7, #16]
}
 80017ea:	e012      	b.n	8001812 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM12)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a0e      	ldr	r2, [pc, #56]	; (800182c <HAL_TIM_Base_MspInit+0xf8>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d10d      	bne.n	8001812 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	4b09      	ldr	r3, [pc, #36]	; (8001820 <HAL_TIM_Base_MspInit+0xec>)
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	4a08      	ldr	r2, [pc, #32]	; (8001820 <HAL_TIM_Base_MspInit+0xec>)
 8001800:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001804:	6413      	str	r3, [r2, #64]	; 0x40
 8001806:	4b06      	ldr	r3, [pc, #24]	; (8001820 <HAL_TIM_Base_MspInit+0xec>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
}
 8001812:	bf00      	nop
 8001814:	3720      	adds	r7, #32
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40010000 	.word	0x40010000
 8001820:	40023800 	.word	0x40023800
 8001824:	40000400 	.word	0x40000400
 8001828:	40010400 	.word	0x40010400
 800182c:	40001800 	.word	0x40001800

08001830 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08a      	sub	sp, #40	; 0x28
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001838:	f107 0314 	add.w	r3, r7, #20
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a19      	ldr	r2, [pc, #100]	; (80018b4 <HAL_TIM_Encoder_MspInit+0x84>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d12c      	bne.n	80018ac <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	613b      	str	r3, [r7, #16]
 8001856:	4b18      	ldr	r3, [pc, #96]	; (80018b8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	4a17      	ldr	r2, [pc, #92]	; (80018b8 <HAL_TIM_Encoder_MspInit+0x88>)
 800185c:	f043 0304 	orr.w	r3, r3, #4
 8001860:	6413      	str	r3, [r2, #64]	; 0x40
 8001862:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	f003 0304 	and.w	r3, r3, #4
 800186a:	613b      	str	r3, [r7, #16]
 800186c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	4a10      	ldr	r2, [pc, #64]	; (80018b8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001878:	f043 0308 	orr.w	r3, r3, #8
 800187c:	6313      	str	r3, [r2, #48]	; 0x30
 800187e:	4b0e      	ldr	r3, [pc, #56]	; (80018b8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	f003 0308 	and.w	r3, r3, #8
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = ROT1_Pin|ROT2_Pin;
 800188a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800188e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001890:	2302      	movs	r3, #2
 8001892:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001894:	2301      	movs	r3, #1
 8001896:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001898:	2300      	movs	r3, #0
 800189a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800189c:	2302      	movs	r3, #2
 800189e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	4619      	mov	r1, r3
 80018a6:	4805      	ldr	r0, [pc, #20]	; (80018bc <HAL_TIM_Encoder_MspInit+0x8c>)
 80018a8:	f001 fb4a 	bl	8002f40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80018ac:	bf00      	nop
 80018ae:	3728      	adds	r7, #40	; 0x28
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	40000800 	.word	0x40000800
 80018b8:	40023800 	.word	0x40023800
 80018bc:	40020c00 	.word	0x40020c00

080018c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b08c      	sub	sp, #48	; 0x30
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c8:	f107 031c 	add.w	r3, r7, #28
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]
 80018d2:	609a      	str	r2, [r3, #8]
 80018d4:	60da      	str	r2, [r3, #12]
 80018d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a59      	ldr	r2, [pc, #356]	; (8001a44 <HAL_TIM_MspPostInit+0x184>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d11f      	bne.n	8001922 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	61bb      	str	r3, [r7, #24]
 80018e6:	4b58      	ldr	r3, [pc, #352]	; (8001a48 <HAL_TIM_MspPostInit+0x188>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	4a57      	ldr	r2, [pc, #348]	; (8001a48 <HAL_TIM_MspPostInit+0x188>)
 80018ec:	f043 0310 	orr.w	r3, r3, #16
 80018f0:	6313      	str	r3, [r2, #48]	; 0x30
 80018f2:	4b55      	ldr	r3, [pc, #340]	; (8001a48 <HAL_TIM_MspPostInit+0x188>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	f003 0310 	and.w	r3, r3, #16
 80018fa:	61bb      	str	r3, [r7, #24]
 80018fc:	69bb      	ldr	r3, [r7, #24]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = PWM_0_1_Pin|PWM_0_1E11_Pin|PWM_1_0_Pin|PWM_1_1_Pin;
 80018fe:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8001902:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001904:	2302      	movs	r3, #2
 8001906:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800190c:	2301      	movs	r3, #1
 800190e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001910:	2301      	movs	r3, #1
 8001912:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001914:	f107 031c 	add.w	r3, r7, #28
 8001918:	4619      	mov	r1, r3
 800191a:	484c      	ldr	r0, [pc, #304]	; (8001a4c <HAL_TIM_MspPostInit+0x18c>)
 800191c:	f001 fb10 	bl	8002f40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001920:	e08b      	b.n	8001a3a <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM2)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800192a:	d11f      	bne.n	800196c <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800192c:	2300      	movs	r3, #0
 800192e:	617b      	str	r3, [r7, #20]
 8001930:	4b45      	ldr	r3, [pc, #276]	; (8001a48 <HAL_TIM_MspPostInit+0x188>)
 8001932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001934:	4a44      	ldr	r2, [pc, #272]	; (8001a48 <HAL_TIM_MspPostInit+0x188>)
 8001936:	f043 0302 	orr.w	r3, r3, #2
 800193a:	6313      	str	r3, [r2, #48]	; 0x30
 800193c:	4b42      	ldr	r3, [pc, #264]	; (8001a48 <HAL_TIM_MspPostInit+0x188>)
 800193e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001940:	f003 0302 	and.w	r3, r3, #2
 8001944:	617b      	str	r3, [r7, #20]
 8001946:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PWM_2_0_Pin|PWM_2_1_Pin;
 8001948:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800194c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194e:	2302      	movs	r3, #2
 8001950:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001952:	2300      	movs	r3, #0
 8001954:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001956:	2300      	movs	r3, #0
 8001958:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800195a:	2301      	movs	r3, #1
 800195c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800195e:	f107 031c 	add.w	r3, r7, #28
 8001962:	4619      	mov	r1, r3
 8001964:	483a      	ldr	r0, [pc, #232]	; (8001a50 <HAL_TIM_MspPostInit+0x190>)
 8001966:	f001 faeb 	bl	8002f40 <HAL_GPIO_Init>
}
 800196a:	e066      	b.n	8001a3a <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM3)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a38      	ldr	r2, [pc, #224]	; (8001a54 <HAL_TIM_MspPostInit+0x194>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d13d      	bne.n	80019f2 <HAL_TIM_MspPostInit+0x132>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	613b      	str	r3, [r7, #16]
 800197a:	4b33      	ldr	r3, [pc, #204]	; (8001a48 <HAL_TIM_MspPostInit+0x188>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	4a32      	ldr	r2, [pc, #200]	; (8001a48 <HAL_TIM_MspPostInit+0x188>)
 8001980:	f043 0302 	orr.w	r3, r3, #2
 8001984:	6313      	str	r3, [r2, #48]	; 0x30
 8001986:	4b30      	ldr	r3, [pc, #192]	; (8001a48 <HAL_TIM_MspPostInit+0x188>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	613b      	str	r3, [r7, #16]
 8001990:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	4b2c      	ldr	r3, [pc, #176]	; (8001a48 <HAL_TIM_MspPostInit+0x188>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	4a2b      	ldr	r2, [pc, #172]	; (8001a48 <HAL_TIM_MspPostInit+0x188>)
 800199c:	f043 0304 	orr.w	r3, r3, #4
 80019a0:	6313      	str	r3, [r2, #48]	; 0x30
 80019a2:	4b29      	ldr	r3, [pc, #164]	; (8001a48 <HAL_TIM_MspPostInit+0x188>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	f003 0304 	and.w	r3, r3, #4
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_4_1_Pin;
 80019ae:	2302      	movs	r3, #2
 80019b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b2:	2302      	movs	r3, #2
 80019b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b6:	2300      	movs	r3, #0
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ba:	2300      	movs	r3, #0
 80019bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019be:	2302      	movs	r3, #2
 80019c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PWM_4_1_GPIO_Port, &GPIO_InitStruct);
 80019c2:	f107 031c 	add.w	r3, r7, #28
 80019c6:	4619      	mov	r1, r3
 80019c8:	4821      	ldr	r0, [pc, #132]	; (8001a50 <HAL_TIM_MspPostInit+0x190>)
 80019ca:	f001 fab9 	bl	8002f40 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_3_0_Pin|PWM_3_1_Pin|PWM_4_0_Pin;
 80019ce:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80019d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d4:	2302      	movs	r3, #2
 80019d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019dc:	2300      	movs	r3, #0
 80019de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019e0:	2302      	movs	r3, #2
 80019e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019e4:	f107 031c 	add.w	r3, r7, #28
 80019e8:	4619      	mov	r1, r3
 80019ea:	481b      	ldr	r0, [pc, #108]	; (8001a58 <HAL_TIM_MspPostInit+0x198>)
 80019ec:	f001 faa8 	bl	8002f40 <HAL_GPIO_Init>
}
 80019f0:	e023      	b.n	8001a3a <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM12)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a19      	ldr	r2, [pc, #100]	; (8001a5c <HAL_TIM_MspPostInit+0x19c>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d11e      	bne.n	8001a3a <HAL_TIM_MspPostInit+0x17a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019fc:	2300      	movs	r3, #0
 80019fe:	60bb      	str	r3, [r7, #8]
 8001a00:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <HAL_TIM_MspPostInit+0x188>)
 8001a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a04:	4a10      	ldr	r2, [pc, #64]	; (8001a48 <HAL_TIM_MspPostInit+0x188>)
 8001a06:	f043 0302 	orr.w	r3, r3, #2
 8001a0a:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0c:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <HAL_TIM_MspPostInit+0x188>)
 8001a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	60bb      	str	r3, [r7, #8]
 8001a16:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_5_0_Pin|PWM_5_1_Pin;
 8001a18:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001a1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a26:	2300      	movs	r3, #0
 8001a28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001a2a:	2309      	movs	r3, #9
 8001a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a2e:	f107 031c 	add.w	r3, r7, #28
 8001a32:	4619      	mov	r1, r3
 8001a34:	4806      	ldr	r0, [pc, #24]	; (8001a50 <HAL_TIM_MspPostInit+0x190>)
 8001a36:	f001 fa83 	bl	8002f40 <HAL_GPIO_Init>
}
 8001a3a:	bf00      	nop
 8001a3c:	3730      	adds	r7, #48	; 0x30
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40010000 	.word	0x40010000
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	40020400 	.word	0x40020400
 8001a54:	40000400 	.word	0x40000400
 8001a58:	40020800 	.word	0x40020800
 8001a5c:	40001800 	.word	0x40001800

08001a60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b08a      	sub	sp, #40	; 0x28
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a68:	f107 0314 	add.w	r3, r7, #20
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	60da      	str	r2, [r3, #12]
 8001a76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a1d      	ldr	r2, [pc, #116]	; (8001af4 <HAL_UART_MspInit+0x94>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d134      	bne.n	8001aec <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	613b      	str	r3, [r7, #16]
 8001a86:	4b1c      	ldr	r3, [pc, #112]	; (8001af8 <HAL_UART_MspInit+0x98>)
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	4a1b      	ldr	r2, [pc, #108]	; (8001af8 <HAL_UART_MspInit+0x98>)
 8001a8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a90:	6413      	str	r3, [r2, #64]	; 0x40
 8001a92:	4b19      	ldr	r3, [pc, #100]	; (8001af8 <HAL_UART_MspInit+0x98>)
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a9a:	613b      	str	r3, [r7, #16]
 8001a9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	4b15      	ldr	r3, [pc, #84]	; (8001af8 <HAL_UART_MspInit+0x98>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	4a14      	ldr	r2, [pc, #80]	; (8001af8 <HAL_UART_MspInit+0x98>)
 8001aa8:	f043 0304 	orr.w	r3, r3, #4
 8001aac:	6313      	str	r3, [r2, #48]	; 0x30
 8001aae:	4b12      	ldr	r3, [pc, #72]	; (8001af8 <HAL_UART_MspInit+0x98>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	f003 0304 	and.w	r3, r3, #4
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001aba:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001abe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001acc:	2308      	movs	r3, #8
 8001ace:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ad0:	f107 0314 	add.w	r3, r7, #20
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4809      	ldr	r0, [pc, #36]	; (8001afc <HAL_UART_MspInit+0x9c>)
 8001ad8:	f001 fa32 	bl	8002f40 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001adc:	2200      	movs	r2, #0
 8001ade:	2105      	movs	r1, #5
 8001ae0:	2034      	movs	r0, #52	; 0x34
 8001ae2:	f000 fe65 	bl	80027b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001ae6:	2034      	movs	r0, #52	; 0x34
 8001ae8:	f000 fe7e 	bl	80027e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001aec:	bf00      	nop
 8001aee:	3728      	adds	r7, #40	; 0x28
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40004c00 	.word	0x40004c00
 8001af8:	40023800 	.word	0x40023800
 8001afc:	40020800 	.word	0x40020800

08001b00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b08c      	sub	sp, #48	; 0x30
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8001b10:	2200      	movs	r2, #0
 8001b12:	6879      	ldr	r1, [r7, #4]
 8001b14:	2037      	movs	r0, #55	; 0x37
 8001b16:	f000 fe4b 	bl	80027b0 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001b1a:	2037      	movs	r0, #55	; 0x37
 8001b1c:	f000 fe64 	bl	80027e8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001b20:	2300      	movs	r3, #0
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	4b1f      	ldr	r3, [pc, #124]	; (8001ba4 <HAL_InitTick+0xa4>)
 8001b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b28:	4a1e      	ldr	r2, [pc, #120]	; (8001ba4 <HAL_InitTick+0xa4>)
 8001b2a:	f043 0320 	orr.w	r3, r3, #32
 8001b2e:	6413      	str	r3, [r2, #64]	; 0x40
 8001b30:	4b1c      	ldr	r3, [pc, #112]	; (8001ba4 <HAL_InitTick+0xa4>)
 8001b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b34:	f003 0320 	and.w	r3, r3, #32
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b3c:	f107 0210 	add.w	r2, r7, #16
 8001b40:	f107 0314 	add.w	r3, r7, #20
 8001b44:	4611      	mov	r1, r2
 8001b46:	4618      	mov	r0, r3
 8001b48:	f005 ffd8 	bl	8007afc <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001b4c:	f005 ffae 	bl	8007aac <HAL_RCC_GetPCLK1Freq>
 8001b50:	4603      	mov	r3, r0
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b58:	4a13      	ldr	r2, [pc, #76]	; (8001ba8 <HAL_InitTick+0xa8>)
 8001b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b5e:	0c9b      	lsrs	r3, r3, #18
 8001b60:	3b01      	subs	r3, #1
 8001b62:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001b64:	4b11      	ldr	r3, [pc, #68]	; (8001bac <HAL_InitTick+0xac>)
 8001b66:	4a12      	ldr	r2, [pc, #72]	; (8001bb0 <HAL_InitTick+0xb0>)
 8001b68:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 8001b6a:	4b10      	ldr	r3, [pc, #64]	; (8001bac <HAL_InitTick+0xac>)
 8001b6c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b70:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001b72:	4a0e      	ldr	r2, [pc, #56]	; (8001bac <HAL_InitTick+0xac>)
 8001b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b76:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001b78:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <HAL_InitTick+0xac>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b7e:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <HAL_InitTick+0xac>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8001b84:	4809      	ldr	r0, [pc, #36]	; (8001bac <HAL_InitTick+0xac>)
 8001b86:	f006 f9b2 	bl	8007eee <HAL_TIM_Base_Init>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d104      	bne.n	8001b9a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8001b90:	4806      	ldr	r0, [pc, #24]	; (8001bac <HAL_InitTick+0xac>)
 8001b92:	f006 f9fb 	bl	8007f8c <HAL_TIM_Base_Start_IT>
 8001b96:	4603      	mov	r3, r0
 8001b98:	e000      	b.n	8001b9c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3730      	adds	r7, #48	; 0x30
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	431bde83 	.word	0x431bde83
 8001bac:	20006ff4 	.word	0x20006ff4
 8001bb0:	40001400 	.word	0x40001400

08001bb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001bb8:	bf00      	nop
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr

08001bc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bc6:	e7fe      	b.n	8001bc6 <HardFault_Handler+0x4>

08001bc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bcc:	e7fe      	b.n	8001bcc <MemManage_Handler+0x4>

08001bce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bd2:	e7fe      	b.n	8001bd2 <BusFault_Handler+0x4>

08001bd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bd8:	e7fe      	b.n	8001bd8 <UsageFault_Handler+0x4>

08001bda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bde:	bf00      	nop
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bec:	4802      	ldr	r0, [pc, #8]	; (8001bf8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001bee:	f006 fb86 	bl	80082fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20006824 	.word	0x20006824

08001bfc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001c00:	4802      	ldr	r0, [pc, #8]	; (8001c0c <I2C1_EV_IRQHandler+0x10>)
 8001c02:	f002 f995 	bl	8003f30 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20005e0c 	.word	0x20005e0c

08001c10 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001c14:	4802      	ldr	r0, [pc, #8]	; (8001c20 <I2C1_ER_IRQHandler+0x10>)
 8001c16:	f002 faf8 	bl	800420a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20005e0c 	.word	0x20005e0c

08001c24 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001c28:	4802      	ldr	r0, [pc, #8]	; (8001c34 <UART4_IRQHandler+0x10>)
 8001c2a:	f007 fb1f 	bl	800926c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	20006ccc 	.word	0x20006ccc

08001c38 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001c3c:	4802      	ldr	r0, [pc, #8]	; (8001c48 <TIM7_IRQHandler+0x10>)
 8001c3e:	f006 fb5e 	bl	80082fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	20006ff4 	.word	0x20006ff4

08001c4c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c50:	4802      	ldr	r0, [pc, #8]	; (8001c5c <DMA2_Stream0_IRQHandler+0x10>)
 8001c52:	f000 feff 	bl	8002a54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	200063a4 	.word	0x200063a4

08001c60 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001c64:	4802      	ldr	r0, [pc, #8]	; (8001c70 <OTG_FS_IRQHandler+0x10>)
 8001c66:	f004 fab3 	bl	80061d0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20008548 	.word	0x20008548

08001c74 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8001c78:	4802      	ldr	r0, [pc, #8]	; (8001c84 <I2C3_EV_IRQHandler+0x10>)
 8001c7a:	f002 f959 	bl	8003f30 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	200056a0 	.word	0x200056a0

08001c88 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8001c8c:	4802      	ldr	r0, [pc, #8]	; (8001c98 <I2C3_ER_IRQHandler+0x10>)
 8001c8e:	f002 fabc 	bl	800420a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	200056a0 	.word	0x200056a0

08001c9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
	return 1;
 8001ca0:	2301      	movs	r3, #1
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <_kill>:

int _kill(int pid, int sig)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001cb6:	f017 fe0f 	bl	80198d8 <__errno>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	2316      	movs	r3, #22
 8001cbe:	6013      	str	r3, [r2, #0]
	return -1;
 8001cc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <_exit>:

void _exit (int status)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001cd4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f7ff ffe7 	bl	8001cac <_kill>
	while (1) {}		/* Make sure we hang here */
 8001cde:	e7fe      	b.n	8001cde <_exit+0x12>

08001ce0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ce8:	4a14      	ldr	r2, [pc, #80]	; (8001d3c <_sbrk+0x5c>)
 8001cea:	4b15      	ldr	r3, [pc, #84]	; (8001d40 <_sbrk+0x60>)
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cf4:	4b13      	ldr	r3, [pc, #76]	; (8001d44 <_sbrk+0x64>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d102      	bne.n	8001d02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cfc:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <_sbrk+0x64>)
 8001cfe:	4a12      	ldr	r2, [pc, #72]	; (8001d48 <_sbrk+0x68>)
 8001d00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d02:	4b10      	ldr	r3, [pc, #64]	; (8001d44 <_sbrk+0x64>)
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4413      	add	r3, r2
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d207      	bcs.n	8001d20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d10:	f017 fde2 	bl	80198d8 <__errno>
 8001d14:	4602      	mov	r2, r0
 8001d16:	230c      	movs	r3, #12
 8001d18:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001d1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d1e:	e009      	b.n	8001d34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d20:	4b08      	ldr	r3, [pc, #32]	; (8001d44 <_sbrk+0x64>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d26:	4b07      	ldr	r3, [pc, #28]	; (8001d44 <_sbrk+0x64>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	4a05      	ldr	r2, [pc, #20]	; (8001d44 <_sbrk+0x64>)
 8001d30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d32:	68fb      	ldr	r3, [r7, #12]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3718      	adds	r7, #24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	20020000 	.word	0x20020000
 8001d40:	00000400 	.word	0x00000400
 8001d44:	2000069c 	.word	0x2000069c
 8001d48:	20009310 	.word	0x20009310

08001d4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d50:	4b08      	ldr	r3, [pc, #32]	; (8001d74 <SystemInit+0x28>)
 8001d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d56:	4a07      	ldr	r2, [pc, #28]	; (8001d74 <SystemInit+0x28>)
 8001d58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d60:	4b04      	ldr	r3, [pc, #16]	; (8001d74 <SystemInit+0x28>)
 8001d62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d66:	609a      	str	r2, [r3, #8]
#endif
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	e000ed00 	.word	0xe000ed00

08001d78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001db0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001d7c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d7e:	e003      	b.n	8001d88 <LoopCopyDataInit>

08001d80 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d80:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001d82:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d84:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d86:	3104      	adds	r1, #4

08001d88 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d88:	480b      	ldr	r0, [pc, #44]	; (8001db8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001d8a:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001d8c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d8e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d90:	d3f6      	bcc.n	8001d80 <CopyDataInit>
  ldr  r2, =_sbss
 8001d92:	4a0b      	ldr	r2, [pc, #44]	; (8001dc0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001d94:	e002      	b.n	8001d9c <LoopFillZerobss>

08001d96 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001d96:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001d98:	f842 3b04 	str.w	r3, [r2], #4

08001d9c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001d9c:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001d9e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001da0:	d3f9      	bcc.n	8001d96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001da2:	f7ff ffd3 	bl	8001d4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001da6:	f017 fd9d 	bl	80198e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001daa:	f7fe fbe9 	bl	8000580 <main>
  bx  lr    
 8001dae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001db0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001db4:	0801c790 	.word	0x0801c790
  ldr  r0, =_sdata
 8001db8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001dbc:	20000678 	.word	0x20000678
  ldr  r2, =_sbss
 8001dc0:	20000678 	.word	0x20000678
  ldr  r3, = _ebss
 8001dc4:	20009310 	.word	0x20009310

08001dc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dc8:	e7fe      	b.n	8001dc8 <ADC_IRQHandler>
	...

08001dcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dd0:	4b0e      	ldr	r3, [pc, #56]	; (8001e0c <HAL_Init+0x40>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a0d      	ldr	r2, [pc, #52]	; (8001e0c <HAL_Init+0x40>)
 8001dd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ddc:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <HAL_Init+0x40>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a0a      	ldr	r2, [pc, #40]	; (8001e0c <HAL_Init+0x40>)
 8001de2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001de6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001de8:	4b08      	ldr	r3, [pc, #32]	; (8001e0c <HAL_Init+0x40>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a07      	ldr	r2, [pc, #28]	; (8001e0c <HAL_Init+0x40>)
 8001dee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001df2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001df4:	2003      	movs	r0, #3
 8001df6:	f000 fcd0 	bl	800279a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dfa:	2000      	movs	r0, #0
 8001dfc:	f7ff fe80 	bl	8001b00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e00:	f7ff fae8 	bl	80013d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40023c00 	.word	0x40023c00

08001e10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e14:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <HAL_IncTick+0x20>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	461a      	mov	r2, r3
 8001e1a:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <HAL_IncTick+0x24>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4413      	add	r3, r2
 8001e20:	4a04      	ldr	r2, [pc, #16]	; (8001e34 <HAL_IncTick+0x24>)
 8001e22:	6013      	str	r3, [r2, #0]
}
 8001e24:	bf00      	nop
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	20000008 	.word	0x20000008
 8001e34:	20007034 	.word	0x20007034

08001e38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e3c:	4b03      	ldr	r3, [pc, #12]	; (8001e4c <HAL_GetTick+0x14>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	20007034 	.word	0x20007034

08001e50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e58:	f7ff ffee 	bl	8001e38 <HAL_GetTick>
 8001e5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e68:	d005      	beq.n	8001e76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e6a:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <HAL_Delay+0x40>)
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	4413      	add	r3, r2
 8001e74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e76:	bf00      	nop
 8001e78:	f7ff ffde 	bl	8001e38 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d8f7      	bhi.n	8001e78 <HAL_Delay+0x28>
  {
  }
}
 8001e88:	bf00      	nop
 8001e8a:	3710      	adds	r7, #16
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	20000008 	.word	0x20000008

08001e94 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e033      	b.n	8001f12 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d109      	bne.n	8001ec6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f7ff fab6 	bl	8001424 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	f003 0310 	and.w	r3, r3, #16
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d118      	bne.n	8001f04 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001eda:	f023 0302 	bic.w	r3, r3, #2
 8001ede:	f043 0202 	orr.w	r2, r3, #2
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 fa2c 	bl	8002344 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef6:	f023 0303 	bic.w	r3, r3, #3
 8001efa:	f043 0201 	orr.w	r2, r3, #1
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	641a      	str	r2, [r3, #64]	; 0x40
 8001f02:	e001      	b.n	8001f08 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3710      	adds	r7, #16
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
	...

08001f1c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d101      	bne.n	8001f3a <HAL_ADC_Start_DMA+0x1e>
 8001f36:	2302      	movs	r3, #2
 8001f38:	e0cc      	b.n	80020d4 <HAL_ADC_Start_DMA+0x1b8>
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f003 0301 	and.w	r3, r3, #1
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d018      	beq.n	8001f82 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	689a      	ldr	r2, [r3, #8]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f042 0201 	orr.w	r2, r2, #1
 8001f5e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f60:	4b5e      	ldr	r3, [pc, #376]	; (80020dc <HAL_ADC_Start_DMA+0x1c0>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a5e      	ldr	r2, [pc, #376]	; (80020e0 <HAL_ADC_Start_DMA+0x1c4>)
 8001f66:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6a:	0c9a      	lsrs	r2, r3, #18
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	4413      	add	r3, r2
 8001f72:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001f74:	e002      	b.n	8001f7c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1f9      	bne.n	8001f76 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f003 0301 	and.w	r3, r3, #1
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	f040 80a0 	bne.w	80020d2 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f9a:	f023 0301 	bic.w	r3, r3, #1
 8001f9e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d007      	beq.n	8001fc4 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001fbc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fd0:	d106      	bne.n	8001fe0 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd6:	f023 0206 	bic.w	r2, r3, #6
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	645a      	str	r2, [r3, #68]	; 0x44
 8001fde:	e002      	b.n	8001fe6 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fee:	4b3d      	ldr	r3, [pc, #244]	; (80020e4 <HAL_ADC_Start_DMA+0x1c8>)
 8001ff0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ff6:	4a3c      	ldr	r2, [pc, #240]	; (80020e8 <HAL_ADC_Start_DMA+0x1cc>)
 8001ff8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ffe:	4a3b      	ldr	r2, [pc, #236]	; (80020ec <HAL_ADC_Start_DMA+0x1d0>)
 8002000:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002006:	4a3a      	ldr	r2, [pc, #232]	; (80020f0 <HAL_ADC_Start_DMA+0x1d4>)
 8002008:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002012:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	685a      	ldr	r2, [r3, #4]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002022:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	689a      	ldr	r2, [r3, #8]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002032:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	334c      	adds	r3, #76	; 0x4c
 800203e:	4619      	mov	r1, r3
 8002040:	68ba      	ldr	r2, [r7, #8]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f000 fc8c 	bl	8002960 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f003 031f 	and.w	r3, r3, #31
 8002050:	2b00      	cmp	r3, #0
 8002052:	d12a      	bne.n	80020aa <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a26      	ldr	r2, [pc, #152]	; (80020f4 <HAL_ADC_Start_DMA+0x1d8>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d015      	beq.n	800208a <HAL_ADC_Start_DMA+0x16e>
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a25      	ldr	r2, [pc, #148]	; (80020f8 <HAL_ADC_Start_DMA+0x1dc>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d105      	bne.n	8002074 <HAL_ADC_Start_DMA+0x158>
 8002068:	4b1e      	ldr	r3, [pc, #120]	; (80020e4 <HAL_ADC_Start_DMA+0x1c8>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f003 031f 	and.w	r3, r3, #31
 8002070:	2b00      	cmp	r3, #0
 8002072:	d00a      	beq.n	800208a <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a20      	ldr	r2, [pc, #128]	; (80020fc <HAL_ADC_Start_DMA+0x1e0>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d129      	bne.n	80020d2 <HAL_ADC_Start_DMA+0x1b6>
 800207e:	4b19      	ldr	r3, [pc, #100]	; (80020e4 <HAL_ADC_Start_DMA+0x1c8>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f003 031f 	and.w	r3, r3, #31
 8002086:	2b0f      	cmp	r3, #15
 8002088:	d823      	bhi.n	80020d2 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d11c      	bne.n	80020d2 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	689a      	ldr	r2, [r3, #8]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020a6:	609a      	str	r2, [r3, #8]
 80020a8:	e013      	b.n	80020d2 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a11      	ldr	r2, [pc, #68]	; (80020f4 <HAL_ADC_Start_DMA+0x1d8>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d10e      	bne.n	80020d2 <HAL_ADC_Start_DMA+0x1b6>
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d107      	bne.n	80020d2 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020d0:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3718      	adds	r7, #24
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	20000000 	.word	0x20000000
 80020e0:	431bde83 	.word	0x431bde83
 80020e4:	40012300 	.word	0x40012300
 80020e8:	0800253d 	.word	0x0800253d
 80020ec:	080025f7 	.word	0x080025f7
 80020f0:	08002613 	.word	0x08002613
 80020f4:	40012000 	.word	0x40012000
 80020f8:	40012100 	.word	0x40012100
 80020fc:	40012200 	.word	0x40012200

08002100 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800210a:	2300      	movs	r3, #0
 800210c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002114:	2b01      	cmp	r3, #1
 8002116:	d101      	bne.n	800211c <HAL_ADC_ConfigChannel+0x1c>
 8002118:	2302      	movs	r3, #2
 800211a:	e105      	b.n	8002328 <HAL_ADC_ConfigChannel+0x228>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2b09      	cmp	r3, #9
 800212a:	d925      	bls.n	8002178 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68d9      	ldr	r1, [r3, #12]
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	b29b      	uxth	r3, r3
 8002138:	461a      	mov	r2, r3
 800213a:	4613      	mov	r3, r2
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	4413      	add	r3, r2
 8002140:	3b1e      	subs	r3, #30
 8002142:	2207      	movs	r2, #7
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	43da      	mvns	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	400a      	ands	r2, r1
 8002150:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68d9      	ldr	r1, [r3, #12]
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	689a      	ldr	r2, [r3, #8]
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	b29b      	uxth	r3, r3
 8002162:	4618      	mov	r0, r3
 8002164:	4603      	mov	r3, r0
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	4403      	add	r3, r0
 800216a:	3b1e      	subs	r3, #30
 800216c:	409a      	lsls	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	430a      	orrs	r2, r1
 8002174:	60da      	str	r2, [r3, #12]
 8002176:	e022      	b.n	80021be <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6919      	ldr	r1, [r3, #16]
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	b29b      	uxth	r3, r3
 8002184:	461a      	mov	r2, r3
 8002186:	4613      	mov	r3, r2
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	4413      	add	r3, r2
 800218c:	2207      	movs	r2, #7
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	43da      	mvns	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	400a      	ands	r2, r1
 800219a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6919      	ldr	r1, [r3, #16]
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	689a      	ldr	r2, [r3, #8]
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	4618      	mov	r0, r3
 80021ae:	4603      	mov	r3, r0
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	4403      	add	r3, r0
 80021b4:	409a      	lsls	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	430a      	orrs	r2, r1
 80021bc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	2b06      	cmp	r3, #6
 80021c4:	d824      	bhi.n	8002210 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	4613      	mov	r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4413      	add	r3, r2
 80021d6:	3b05      	subs	r3, #5
 80021d8:	221f      	movs	r2, #31
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	43da      	mvns	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	400a      	ands	r2, r1
 80021e6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	4618      	mov	r0, r3
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685a      	ldr	r2, [r3, #4]
 80021fa:	4613      	mov	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4413      	add	r3, r2
 8002200:	3b05      	subs	r3, #5
 8002202:	fa00 f203 	lsl.w	r2, r0, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	430a      	orrs	r2, r1
 800220c:	635a      	str	r2, [r3, #52]	; 0x34
 800220e:	e04c      	b.n	80022aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	2b0c      	cmp	r3, #12
 8002216:	d824      	bhi.n	8002262 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	4613      	mov	r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	4413      	add	r3, r2
 8002228:	3b23      	subs	r3, #35	; 0x23
 800222a:	221f      	movs	r2, #31
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	43da      	mvns	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	400a      	ands	r2, r1
 8002238:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	b29b      	uxth	r3, r3
 8002246:	4618      	mov	r0, r3
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685a      	ldr	r2, [r3, #4]
 800224c:	4613      	mov	r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	4413      	add	r3, r2
 8002252:	3b23      	subs	r3, #35	; 0x23
 8002254:	fa00 f203 	lsl.w	r2, r0, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	430a      	orrs	r2, r1
 800225e:	631a      	str	r2, [r3, #48]	; 0x30
 8002260:	e023      	b.n	80022aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685a      	ldr	r2, [r3, #4]
 800226c:	4613      	mov	r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	4413      	add	r3, r2
 8002272:	3b41      	subs	r3, #65	; 0x41
 8002274:	221f      	movs	r2, #31
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	43da      	mvns	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	400a      	ands	r2, r1
 8002282:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	b29b      	uxth	r3, r3
 8002290:	4618      	mov	r0, r3
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685a      	ldr	r2, [r3, #4]
 8002296:	4613      	mov	r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	4413      	add	r3, r2
 800229c:	3b41      	subs	r3, #65	; 0x41
 800229e:	fa00 f203 	lsl.w	r2, r0, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	430a      	orrs	r2, r1
 80022a8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022aa:	4b22      	ldr	r3, [pc, #136]	; (8002334 <HAL_ADC_ConfigChannel+0x234>)
 80022ac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a21      	ldr	r2, [pc, #132]	; (8002338 <HAL_ADC_ConfigChannel+0x238>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d109      	bne.n	80022cc <HAL_ADC_ConfigChannel+0x1cc>
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2b12      	cmp	r3, #18
 80022be:	d105      	bne.n	80022cc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a19      	ldr	r2, [pc, #100]	; (8002338 <HAL_ADC_ConfigChannel+0x238>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d123      	bne.n	800231e <HAL_ADC_ConfigChannel+0x21e>
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2b10      	cmp	r3, #16
 80022dc:	d003      	beq.n	80022e6 <HAL_ADC_ConfigChannel+0x1e6>
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2b11      	cmp	r3, #17
 80022e4:	d11b      	bne.n	800231e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2b10      	cmp	r3, #16
 80022f8:	d111      	bne.n	800231e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80022fa:	4b10      	ldr	r3, [pc, #64]	; (800233c <HAL_ADC_ConfigChannel+0x23c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a10      	ldr	r2, [pc, #64]	; (8002340 <HAL_ADC_ConfigChannel+0x240>)
 8002300:	fba2 2303 	umull	r2, r3, r2, r3
 8002304:	0c9a      	lsrs	r2, r3, #18
 8002306:	4613      	mov	r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	4413      	add	r3, r2
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002310:	e002      	b.n	8002318 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	3b01      	subs	r3, #1
 8002316:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d1f9      	bne.n	8002312 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	3714      	adds	r7, #20
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	40012300 	.word	0x40012300
 8002338:	40012000 	.word	0x40012000
 800233c:	20000000 	.word	0x20000000
 8002340:	431bde83 	.word	0x431bde83

08002344 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002344:	b480      	push	{r7}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800234c:	4b79      	ldr	r3, [pc, #484]	; (8002534 <ADC_Init+0x1f0>)
 800234e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	685a      	ldr	r2, [r3, #4]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	431a      	orrs	r2, r3
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	685a      	ldr	r2, [r3, #4]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002378:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6859      	ldr	r1, [r3, #4]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	021a      	lsls	r2, r3, #8
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	430a      	orrs	r2, r1
 800238c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	685a      	ldr	r2, [r3, #4]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800239c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	6859      	ldr	r1, [r3, #4]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689a      	ldr	r2, [r3, #8]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	430a      	orrs	r2, r1
 80023ae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	689a      	ldr	r2, [r3, #8]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	6899      	ldr	r1, [r3, #8]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	68da      	ldr	r2, [r3, #12]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	430a      	orrs	r2, r1
 80023d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d6:	4a58      	ldr	r2, [pc, #352]	; (8002538 <ADC_Init+0x1f4>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d022      	beq.n	8002422 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	689a      	ldr	r2, [r3, #8]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	6899      	ldr	r1, [r3, #8]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	430a      	orrs	r2, r1
 80023fc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	689a      	ldr	r2, [r3, #8]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800240c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6899      	ldr	r1, [r3, #8]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	430a      	orrs	r2, r1
 800241e:	609a      	str	r2, [r3, #8]
 8002420:	e00f      	b.n	8002442 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	689a      	ldr	r2, [r3, #8]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002430:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	689a      	ldr	r2, [r3, #8]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002440:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	689a      	ldr	r2, [r3, #8]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f022 0202 	bic.w	r2, r2, #2
 8002450:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	6899      	ldr	r1, [r3, #8]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	7e1b      	ldrb	r3, [r3, #24]
 800245c:	005a      	lsls	r2, r3, #1
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	430a      	orrs	r2, r1
 8002464:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f893 3020 	ldrb.w	r3, [r3, #32]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d01b      	beq.n	80024a8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	685a      	ldr	r2, [r3, #4]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800247e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	685a      	ldr	r2, [r3, #4]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800248e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6859      	ldr	r1, [r3, #4]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249a:	3b01      	subs	r3, #1
 800249c:	035a      	lsls	r2, r3, #13
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	430a      	orrs	r2, r1
 80024a4:	605a      	str	r2, [r3, #4]
 80024a6:	e007      	b.n	80024b8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	685a      	ldr	r2, [r3, #4]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024b6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80024c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	69db      	ldr	r3, [r3, #28]
 80024d2:	3b01      	subs	r3, #1
 80024d4:	051a      	lsls	r2, r3, #20
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	430a      	orrs	r2, r1
 80024dc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	689a      	ldr	r2, [r3, #8]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80024ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	6899      	ldr	r1, [r3, #8]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024fa:	025a      	lsls	r2, r3, #9
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	430a      	orrs	r2, r1
 8002502:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	689a      	ldr	r2, [r3, #8]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002512:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	6899      	ldr	r1, [r3, #8]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	695b      	ldr	r3, [r3, #20]
 800251e:	029a      	lsls	r2, r3, #10
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	430a      	orrs	r2, r1
 8002526:	609a      	str	r2, [r3, #8]
}
 8002528:	bf00      	nop
 800252a:	3714      	adds	r7, #20
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr
 8002534:	40012300 	.word	0x40012300
 8002538:	0f000001 	.word	0x0f000001

0800253c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002548:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002552:	2b00      	cmp	r3, #0
 8002554:	d13c      	bne.n	80025d0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d12b      	bne.n	80025c8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002574:	2b00      	cmp	r3, #0
 8002576:	d127      	bne.n	80025c8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002582:	2b00      	cmp	r3, #0
 8002584:	d006      	beq.n	8002594 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002590:	2b00      	cmp	r3, #0
 8002592:	d119      	bne.n	80025c8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	685a      	ldr	r2, [r3, #4]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f022 0220 	bic.w	r2, r2, #32
 80025a2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d105      	bne.n	80025c8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c0:	f043 0201 	orr.w	r2, r3, #1
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80025c8:	68f8      	ldr	r0, [r7, #12]
 80025ca:	f016 fbef 	bl	8018dac <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80025ce:	e00e      	b.n	80025ee <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d4:	f003 0310 	and.w	r3, r3, #16
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d003      	beq.n	80025e4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80025dc:	68f8      	ldr	r0, [r7, #12]
 80025de:	f016 fc39 	bl	8018e54 <HAL_ADC_ErrorCallback>
}
 80025e2:	e004      	b.n	80025ee <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	4798      	blx	r3
}
 80025ee:	bf00      	nop
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b084      	sub	sp, #16
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002602:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002604:	68f8      	ldr	r0, [r7, #12]
 8002606:	f016 fbfb 	bl	8018e00 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800260a:	bf00      	nop
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002612:	b580      	push	{r7, lr}
 8002614:	b084      	sub	sp, #16
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800261e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2240      	movs	r2, #64	; 0x40
 8002624:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262a:	f043 0204 	orr.w	r2, r3, #4
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f016 fc0e 	bl	8018e54 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002638:	bf00      	nop
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f003 0307 	and.w	r3, r3, #7
 800264e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002650:	4b0c      	ldr	r3, [pc, #48]	; (8002684 <__NVIC_SetPriorityGrouping+0x44>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002656:	68ba      	ldr	r2, [r7, #8]
 8002658:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800265c:	4013      	ands	r3, r2
 800265e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002668:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800266c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002670:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002672:	4a04      	ldr	r2, [pc, #16]	; (8002684 <__NVIC_SetPriorityGrouping+0x44>)
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	60d3      	str	r3, [r2, #12]
}
 8002678:	bf00      	nop
 800267a:	3714      	adds	r7, #20
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr
 8002684:	e000ed00 	.word	0xe000ed00

08002688 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800268c:	4b04      	ldr	r3, [pc, #16]	; (80026a0 <__NVIC_GetPriorityGrouping+0x18>)
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	0a1b      	lsrs	r3, r3, #8
 8002692:	f003 0307 	and.w	r3, r3, #7
}
 8002696:	4618      	mov	r0, r3
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	e000ed00 	.word	0xe000ed00

080026a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	4603      	mov	r3, r0
 80026ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	db0b      	blt.n	80026ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026b6:	79fb      	ldrb	r3, [r7, #7]
 80026b8:	f003 021f 	and.w	r2, r3, #31
 80026bc:	4907      	ldr	r1, [pc, #28]	; (80026dc <__NVIC_EnableIRQ+0x38>)
 80026be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c2:	095b      	lsrs	r3, r3, #5
 80026c4:	2001      	movs	r0, #1
 80026c6:	fa00 f202 	lsl.w	r2, r0, r2
 80026ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026ce:	bf00      	nop
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	e000e100 	.word	0xe000e100

080026e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	4603      	mov	r3, r0
 80026e8:	6039      	str	r1, [r7, #0]
 80026ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	db0a      	blt.n	800270a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	b2da      	uxtb	r2, r3
 80026f8:	490c      	ldr	r1, [pc, #48]	; (800272c <__NVIC_SetPriority+0x4c>)
 80026fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fe:	0112      	lsls	r2, r2, #4
 8002700:	b2d2      	uxtb	r2, r2
 8002702:	440b      	add	r3, r1
 8002704:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002708:	e00a      	b.n	8002720 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	b2da      	uxtb	r2, r3
 800270e:	4908      	ldr	r1, [pc, #32]	; (8002730 <__NVIC_SetPriority+0x50>)
 8002710:	79fb      	ldrb	r3, [r7, #7]
 8002712:	f003 030f 	and.w	r3, r3, #15
 8002716:	3b04      	subs	r3, #4
 8002718:	0112      	lsls	r2, r2, #4
 800271a:	b2d2      	uxtb	r2, r2
 800271c:	440b      	add	r3, r1
 800271e:	761a      	strb	r2, [r3, #24]
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr
 800272c:	e000e100 	.word	0xe000e100
 8002730:	e000ed00 	.word	0xe000ed00

08002734 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002734:	b480      	push	{r7}
 8002736:	b089      	sub	sp, #36	; 0x24
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f003 0307 	and.w	r3, r3, #7
 8002746:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	f1c3 0307 	rsb	r3, r3, #7
 800274e:	2b04      	cmp	r3, #4
 8002750:	bf28      	it	cs
 8002752:	2304      	movcs	r3, #4
 8002754:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	3304      	adds	r3, #4
 800275a:	2b06      	cmp	r3, #6
 800275c:	d902      	bls.n	8002764 <NVIC_EncodePriority+0x30>
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	3b03      	subs	r3, #3
 8002762:	e000      	b.n	8002766 <NVIC_EncodePriority+0x32>
 8002764:	2300      	movs	r3, #0
 8002766:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002768:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	43da      	mvns	r2, r3
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	401a      	ands	r2, r3
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800277c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	fa01 f303 	lsl.w	r3, r1, r3
 8002786:	43d9      	mvns	r1, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800278c:	4313      	orrs	r3, r2
         );
}
 800278e:	4618      	mov	r0, r3
 8002790:	3724      	adds	r7, #36	; 0x24
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr

0800279a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	b082      	sub	sp, #8
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f7ff ff4c 	bl	8002640 <__NVIC_SetPriorityGrouping>
}
 80027a8:	bf00      	nop
 80027aa:	3708      	adds	r7, #8
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	4603      	mov	r3, r0
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
 80027bc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027be:	2300      	movs	r3, #0
 80027c0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027c2:	f7ff ff61 	bl	8002688 <__NVIC_GetPriorityGrouping>
 80027c6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	68b9      	ldr	r1, [r7, #8]
 80027cc:	6978      	ldr	r0, [r7, #20]
 80027ce:	f7ff ffb1 	bl	8002734 <NVIC_EncodePriority>
 80027d2:	4602      	mov	r2, r0
 80027d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027d8:	4611      	mov	r1, r2
 80027da:	4618      	mov	r0, r3
 80027dc:	f7ff ff80 	bl	80026e0 <__NVIC_SetPriority>
}
 80027e0:	bf00      	nop
 80027e2:	3718      	adds	r7, #24
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	4603      	mov	r3, r0
 80027f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7ff ff54 	bl	80026a4 <__NVIC_EnableIRQ>
}
 80027fc:	bf00      	nop
 80027fe:	3708      	adds	r7, #8
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800280c:	2300      	movs	r3, #0
 800280e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002810:	f7ff fb12 	bl	8001e38 <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d101      	bne.n	8002820 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e099      	b.n	8002954 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2202      	movs	r2, #2
 800282c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f022 0201 	bic.w	r2, r2, #1
 800283e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002840:	e00f      	b.n	8002862 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002842:	f7ff faf9 	bl	8001e38 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b05      	cmp	r3, #5
 800284e:	d908      	bls.n	8002862 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2220      	movs	r2, #32
 8002854:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2203      	movs	r2, #3
 800285a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e078      	b.n	8002954 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1e8      	bne.n	8002842 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002878:	697a      	ldr	r2, [r7, #20]
 800287a:	4b38      	ldr	r3, [pc, #224]	; (800295c <HAL_DMA_Init+0x158>)
 800287c:	4013      	ands	r3, r2
 800287e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685a      	ldr	r2, [r3, #4]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800288e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800289a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a1b      	ldr	r3, [r3, #32]
 80028ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b8:	2b04      	cmp	r3, #4
 80028ba:	d107      	bne.n	80028cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c4:	4313      	orrs	r3, r2
 80028c6:	697a      	ldr	r2, [r7, #20]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	697a      	ldr	r2, [r7, #20]
 80028d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	f023 0307 	bic.w	r3, r3, #7
 80028e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e8:	697a      	ldr	r2, [r7, #20]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f2:	2b04      	cmp	r3, #4
 80028f4:	d117      	bne.n	8002926 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028fa:	697a      	ldr	r2, [r7, #20]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00e      	beq.n	8002926 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 fa9f 	bl	8002e4c <DMA_CheckFifoParam>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d008      	beq.n	8002926 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2240      	movs	r2, #64	; 0x40
 8002918:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2201      	movs	r2, #1
 800291e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002922:	2301      	movs	r3, #1
 8002924:	e016      	b.n	8002954 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 fa56 	bl	8002de0 <DMA_CalcBaseAndBitshift>
 8002934:	4603      	mov	r3, r0
 8002936:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800293c:	223f      	movs	r2, #63	; 0x3f
 800293e:	409a      	lsls	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2201      	movs	r2, #1
 800294e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3718      	adds	r7, #24
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	f010803f 	.word	0xf010803f

08002960 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
 800296c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800296e:	2300      	movs	r3, #0
 8002970:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002976:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800297e:	2b01      	cmp	r3, #1
 8002980:	d101      	bne.n	8002986 <HAL_DMA_Start_IT+0x26>
 8002982:	2302      	movs	r3, #2
 8002984:	e040      	b.n	8002a08 <HAL_DMA_Start_IT+0xa8>
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2201      	movs	r2, #1
 800298a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b01      	cmp	r3, #1
 8002998:	d12f      	bne.n	80029fa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2202      	movs	r2, #2
 800299e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	68b9      	ldr	r1, [r7, #8]
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f000 f9e8 	bl	8002d84 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b8:	223f      	movs	r2, #63	; 0x3f
 80029ba:	409a      	lsls	r2, r3
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f042 0216 	orr.w	r2, r2, #22
 80029ce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d007      	beq.n	80029e8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f042 0208 	orr.w	r2, r2, #8
 80029e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f042 0201 	orr.w	r2, r2, #1
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	e005      	b.n	8002a06 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002a02:	2302      	movs	r3, #2
 8002a04:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002a06:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3718      	adds	r7, #24
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d004      	beq.n	8002a2e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2280      	movs	r2, #128	; 0x80
 8002a28:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e00c      	b.n	8002a48 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2205      	movs	r2, #5
 8002a32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 0201 	bic.w	r2, r2, #1
 8002a44:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a60:	4b92      	ldr	r3, [pc, #584]	; (8002cac <HAL_DMA_IRQHandler+0x258>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a92      	ldr	r2, [pc, #584]	; (8002cb0 <HAL_DMA_IRQHandler+0x25c>)
 8002a66:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6a:	0a9b      	lsrs	r3, r3, #10
 8002a6c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a72:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a7e:	2208      	movs	r2, #8
 8002a80:	409a      	lsls	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	4013      	ands	r3, r2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d01a      	beq.n	8002ac0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0304 	and.w	r3, r3, #4
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d013      	beq.n	8002ac0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f022 0204 	bic.w	r2, r2, #4
 8002aa6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aac:	2208      	movs	r2, #8
 8002aae:	409a      	lsls	r2, r3
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab8:	f043 0201 	orr.w	r2, r3, #1
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	409a      	lsls	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	4013      	ands	r3, r2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d012      	beq.n	8002af6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00b      	beq.n	8002af6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	409a      	lsls	r2, r3
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aee:	f043 0202 	orr.w	r2, r3, #2
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002afa:	2204      	movs	r2, #4
 8002afc:	409a      	lsls	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	4013      	ands	r3, r2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d012      	beq.n	8002b2c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00b      	beq.n	8002b2c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b18:	2204      	movs	r2, #4
 8002b1a:	409a      	lsls	r2, r3
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b24:	f043 0204 	orr.w	r2, r3, #4
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b30:	2210      	movs	r2, #16
 8002b32:	409a      	lsls	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	4013      	ands	r3, r2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d043      	beq.n	8002bc4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0308 	and.w	r3, r3, #8
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d03c      	beq.n	8002bc4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b4e:	2210      	movs	r2, #16
 8002b50:	409a      	lsls	r2, r3
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d018      	beq.n	8002b96 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d108      	bne.n	8002b84 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d024      	beq.n	8002bc4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	4798      	blx	r3
 8002b82:	e01f      	b.n	8002bc4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d01b      	beq.n	8002bc4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	4798      	blx	r3
 8002b94:	e016      	b.n	8002bc4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d107      	bne.n	8002bb4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f022 0208 	bic.w	r2, r2, #8
 8002bb2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d003      	beq.n	8002bc4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc8:	2220      	movs	r2, #32
 8002bca:	409a      	lsls	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	4013      	ands	r3, r2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f000 808e 	beq.w	8002cf2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0310 	and.w	r3, r3, #16
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 8086 	beq.w	8002cf2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bea:	2220      	movs	r2, #32
 8002bec:	409a      	lsls	r2, r3
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b05      	cmp	r3, #5
 8002bfc:	d136      	bne.n	8002c6c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f022 0216 	bic.w	r2, r2, #22
 8002c0c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	695a      	ldr	r2, [r3, #20]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c1c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d103      	bne.n	8002c2e <HAL_DMA_IRQHandler+0x1da>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d007      	beq.n	8002c3e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 0208 	bic.w	r2, r2, #8
 8002c3c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c42:	223f      	movs	r2, #63	; 0x3f
 8002c44:	409a      	lsls	r2, r3
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d07d      	beq.n	8002d5e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	4798      	blx	r3
        }
        return;
 8002c6a:	e078      	b.n	8002d5e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d01c      	beq.n	8002cb4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d108      	bne.n	8002c9a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d030      	beq.n	8002cf2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	4798      	blx	r3
 8002c98:	e02b      	b.n	8002cf2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d027      	beq.n	8002cf2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	4798      	blx	r3
 8002caa:	e022      	b.n	8002cf2 <HAL_DMA_IRQHandler+0x29e>
 8002cac:	20000000 	.word	0x20000000
 8002cb0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10f      	bne.n	8002ce2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f022 0210 	bic.w	r2, r2, #16
 8002cd0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d003      	beq.n	8002cf2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d032      	beq.n	8002d60 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d022      	beq.n	8002d4c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2205      	movs	r2, #5
 8002d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f022 0201 	bic.w	r2, r2, #1
 8002d1c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	3301      	adds	r3, #1
 8002d22:	60bb      	str	r3, [r7, #8]
 8002d24:	697a      	ldr	r2, [r7, #20]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d307      	bcc.n	8002d3a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0301 	and.w	r3, r3, #1
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1f2      	bne.n	8002d1e <HAL_DMA_IRQHandler+0x2ca>
 8002d38:	e000      	b.n	8002d3c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002d3a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d005      	beq.n	8002d60 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	4798      	blx	r3
 8002d5c:	e000      	b.n	8002d60 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002d5e:	bf00      	nop
    }
  }
}
 8002d60:	3718      	adds	r7, #24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop

08002d68 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d76:	b2db      	uxtb	r3, r3
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
 8002d90:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002da0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	683a      	ldr	r2, [r7, #0]
 8002da8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	2b40      	cmp	r3, #64	; 0x40
 8002db0:	d108      	bne.n	8002dc4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68ba      	ldr	r2, [r7, #8]
 8002dc0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002dc2:	e007      	b.n	8002dd4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68ba      	ldr	r2, [r7, #8]
 8002dca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	60da      	str	r2, [r3, #12]
}
 8002dd4:	bf00      	nop
 8002dd6:	3714      	adds	r7, #20
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	3b10      	subs	r3, #16
 8002df0:	4a14      	ldr	r2, [pc, #80]	; (8002e44 <DMA_CalcBaseAndBitshift+0x64>)
 8002df2:	fba2 2303 	umull	r2, r3, r2, r3
 8002df6:	091b      	lsrs	r3, r3, #4
 8002df8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002dfa:	4a13      	ldr	r2, [pc, #76]	; (8002e48 <DMA_CalcBaseAndBitshift+0x68>)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	4413      	add	r3, r2
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	461a      	mov	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2b03      	cmp	r3, #3
 8002e0c:	d909      	bls.n	8002e22 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e16:	f023 0303 	bic.w	r3, r3, #3
 8002e1a:	1d1a      	adds	r2, r3, #4
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	659a      	str	r2, [r3, #88]	; 0x58
 8002e20:	e007      	b.n	8002e32 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e2a:	f023 0303 	bic.w	r3, r3, #3
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3714      	adds	r7, #20
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	aaaaaaab 	.word	0xaaaaaaab
 8002e48:	0801a6dc 	.word	0x0801a6dc

08002e4c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b085      	sub	sp, #20
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e54:	2300      	movs	r3, #0
 8002e56:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e5c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d11f      	bne.n	8002ea6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	2b03      	cmp	r3, #3
 8002e6a:	d855      	bhi.n	8002f18 <DMA_CheckFifoParam+0xcc>
 8002e6c:	a201      	add	r2, pc, #4	; (adr r2, 8002e74 <DMA_CheckFifoParam+0x28>)
 8002e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e72:	bf00      	nop
 8002e74:	08002e85 	.word	0x08002e85
 8002e78:	08002e97 	.word	0x08002e97
 8002e7c:	08002e85 	.word	0x08002e85
 8002e80:	08002f19 	.word	0x08002f19
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d045      	beq.n	8002f1c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e94:	e042      	b.n	8002f1c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e9e:	d13f      	bne.n	8002f20 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ea4:	e03c      	b.n	8002f20 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eae:	d121      	bne.n	8002ef4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	2b03      	cmp	r3, #3
 8002eb4:	d836      	bhi.n	8002f24 <DMA_CheckFifoParam+0xd8>
 8002eb6:	a201      	add	r2, pc, #4	; (adr r2, 8002ebc <DMA_CheckFifoParam+0x70>)
 8002eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ebc:	08002ecd 	.word	0x08002ecd
 8002ec0:	08002ed3 	.word	0x08002ed3
 8002ec4:	08002ecd 	.word	0x08002ecd
 8002ec8:	08002ee5 	.word	0x08002ee5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	73fb      	strb	r3, [r7, #15]
      break;
 8002ed0:	e02f      	b.n	8002f32 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d024      	beq.n	8002f28 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ee2:	e021      	b.n	8002f28 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002eec:	d11e      	bne.n	8002f2c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ef2:	e01b      	b.n	8002f2c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d902      	bls.n	8002f00 <DMA_CheckFifoParam+0xb4>
 8002efa:	2b03      	cmp	r3, #3
 8002efc:	d003      	beq.n	8002f06 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002efe:	e018      	b.n	8002f32 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	73fb      	strb	r3, [r7, #15]
      break;
 8002f04:	e015      	b.n	8002f32 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00e      	beq.n	8002f30 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	73fb      	strb	r3, [r7, #15]
      break;
 8002f16:	e00b      	b.n	8002f30 <DMA_CheckFifoParam+0xe4>
      break;
 8002f18:	bf00      	nop
 8002f1a:	e00a      	b.n	8002f32 <DMA_CheckFifoParam+0xe6>
      break;
 8002f1c:	bf00      	nop
 8002f1e:	e008      	b.n	8002f32 <DMA_CheckFifoParam+0xe6>
      break;
 8002f20:	bf00      	nop
 8002f22:	e006      	b.n	8002f32 <DMA_CheckFifoParam+0xe6>
      break;
 8002f24:	bf00      	nop
 8002f26:	e004      	b.n	8002f32 <DMA_CheckFifoParam+0xe6>
      break;
 8002f28:	bf00      	nop
 8002f2a:	e002      	b.n	8002f32 <DMA_CheckFifoParam+0xe6>
      break;   
 8002f2c:	bf00      	nop
 8002f2e:	e000      	b.n	8002f32 <DMA_CheckFifoParam+0xe6>
      break;
 8002f30:	bf00      	nop
    }
  } 
  
  return status; 
 8002f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3714      	adds	r7, #20
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b089      	sub	sp, #36	; 0x24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f52:	2300      	movs	r3, #0
 8002f54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f56:	2300      	movs	r3, #0
 8002f58:	61fb      	str	r3, [r7, #28]
 8002f5a:	e16b      	b.n	8003234 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	fa02 f303 	lsl.w	r3, r2, r3
 8002f64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f70:	693a      	ldr	r2, [r7, #16]
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	f040 815a 	bne.w	800322e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d00b      	beq.n	8002f9a <HAL_GPIO_Init+0x5a>
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d007      	beq.n	8002f9a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f8e:	2b11      	cmp	r3, #17
 8002f90:	d003      	beq.n	8002f9a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	2b12      	cmp	r3, #18
 8002f98:	d130      	bne.n	8002ffc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	2203      	movs	r2, #3
 8002fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002faa:	43db      	mvns	r3, r3
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	4013      	ands	r3, r2
 8002fb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	68da      	ldr	r2, [r3, #12]
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	69ba      	ldr	r2, [r7, #24]
 8002fc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	43db      	mvns	r3, r3
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	4013      	ands	r3, r2
 8002fde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	091b      	lsrs	r3, r3, #4
 8002fe6:	f003 0201 	and.w	r2, r3, #1
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	2203      	movs	r2, #3
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	43db      	mvns	r3, r3
 800300e:	69ba      	ldr	r2, [r7, #24]
 8003010:	4013      	ands	r3, r2
 8003012:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	689a      	ldr	r2, [r3, #8]
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	4313      	orrs	r3, r2
 8003024:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	2b02      	cmp	r3, #2
 8003032:	d003      	beq.n	800303c <HAL_GPIO_Init+0xfc>
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	2b12      	cmp	r3, #18
 800303a:	d123      	bne.n	8003084 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	08da      	lsrs	r2, r3, #3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	3208      	adds	r2, #8
 8003044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003048:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	f003 0307 	and.w	r3, r3, #7
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	220f      	movs	r2, #15
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	43db      	mvns	r3, r3
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	4013      	ands	r3, r2
 800305e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	691a      	ldr	r2, [r3, #16]
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	f003 0307 	and.w	r3, r3, #7
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	4313      	orrs	r3, r2
 8003074:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	08da      	lsrs	r2, r3, #3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	3208      	adds	r2, #8
 800307e:	69b9      	ldr	r1, [r7, #24]
 8003080:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	2203      	movs	r2, #3
 8003090:	fa02 f303 	lsl.w	r3, r2, r3
 8003094:	43db      	mvns	r3, r3
 8003096:	69ba      	ldr	r2, [r7, #24]
 8003098:	4013      	ands	r3, r2
 800309a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f003 0203 	and.w	r2, r3, #3
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f000 80b4 	beq.w	800322e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030c6:	2300      	movs	r3, #0
 80030c8:	60fb      	str	r3, [r7, #12]
 80030ca:	4b5f      	ldr	r3, [pc, #380]	; (8003248 <HAL_GPIO_Init+0x308>)
 80030cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ce:	4a5e      	ldr	r2, [pc, #376]	; (8003248 <HAL_GPIO_Init+0x308>)
 80030d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030d4:	6453      	str	r3, [r2, #68]	; 0x44
 80030d6:	4b5c      	ldr	r3, [pc, #368]	; (8003248 <HAL_GPIO_Init+0x308>)
 80030d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030de:	60fb      	str	r3, [r7, #12]
 80030e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030e2:	4a5a      	ldr	r2, [pc, #360]	; (800324c <HAL_GPIO_Init+0x30c>)
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	089b      	lsrs	r3, r3, #2
 80030e8:	3302      	adds	r3, #2
 80030ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	f003 0303 	and.w	r3, r3, #3
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	220f      	movs	r2, #15
 80030fa:	fa02 f303 	lsl.w	r3, r2, r3
 80030fe:	43db      	mvns	r3, r3
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	4013      	ands	r3, r2
 8003104:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a51      	ldr	r2, [pc, #324]	; (8003250 <HAL_GPIO_Init+0x310>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d02b      	beq.n	8003166 <HAL_GPIO_Init+0x226>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a50      	ldr	r2, [pc, #320]	; (8003254 <HAL_GPIO_Init+0x314>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d025      	beq.n	8003162 <HAL_GPIO_Init+0x222>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a4f      	ldr	r2, [pc, #316]	; (8003258 <HAL_GPIO_Init+0x318>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d01f      	beq.n	800315e <HAL_GPIO_Init+0x21e>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a4e      	ldr	r2, [pc, #312]	; (800325c <HAL_GPIO_Init+0x31c>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d019      	beq.n	800315a <HAL_GPIO_Init+0x21a>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a4d      	ldr	r2, [pc, #308]	; (8003260 <HAL_GPIO_Init+0x320>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d013      	beq.n	8003156 <HAL_GPIO_Init+0x216>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a4c      	ldr	r2, [pc, #304]	; (8003264 <HAL_GPIO_Init+0x324>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d00d      	beq.n	8003152 <HAL_GPIO_Init+0x212>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a4b      	ldr	r2, [pc, #300]	; (8003268 <HAL_GPIO_Init+0x328>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d007      	beq.n	800314e <HAL_GPIO_Init+0x20e>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a4a      	ldr	r2, [pc, #296]	; (800326c <HAL_GPIO_Init+0x32c>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d101      	bne.n	800314a <HAL_GPIO_Init+0x20a>
 8003146:	2307      	movs	r3, #7
 8003148:	e00e      	b.n	8003168 <HAL_GPIO_Init+0x228>
 800314a:	2308      	movs	r3, #8
 800314c:	e00c      	b.n	8003168 <HAL_GPIO_Init+0x228>
 800314e:	2306      	movs	r3, #6
 8003150:	e00a      	b.n	8003168 <HAL_GPIO_Init+0x228>
 8003152:	2305      	movs	r3, #5
 8003154:	e008      	b.n	8003168 <HAL_GPIO_Init+0x228>
 8003156:	2304      	movs	r3, #4
 8003158:	e006      	b.n	8003168 <HAL_GPIO_Init+0x228>
 800315a:	2303      	movs	r3, #3
 800315c:	e004      	b.n	8003168 <HAL_GPIO_Init+0x228>
 800315e:	2302      	movs	r3, #2
 8003160:	e002      	b.n	8003168 <HAL_GPIO_Init+0x228>
 8003162:	2301      	movs	r3, #1
 8003164:	e000      	b.n	8003168 <HAL_GPIO_Init+0x228>
 8003166:	2300      	movs	r3, #0
 8003168:	69fa      	ldr	r2, [r7, #28]
 800316a:	f002 0203 	and.w	r2, r2, #3
 800316e:	0092      	lsls	r2, r2, #2
 8003170:	4093      	lsls	r3, r2
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	4313      	orrs	r3, r2
 8003176:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003178:	4934      	ldr	r1, [pc, #208]	; (800324c <HAL_GPIO_Init+0x30c>)
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	089b      	lsrs	r3, r3, #2
 800317e:	3302      	adds	r3, #2
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003186:	4b3a      	ldr	r3, [pc, #232]	; (8003270 <HAL_GPIO_Init+0x330>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	43db      	mvns	r3, r3
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	4013      	ands	r3, r2
 8003194:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d003      	beq.n	80031aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031aa:	4a31      	ldr	r2, [pc, #196]	; (8003270 <HAL_GPIO_Init+0x330>)
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80031b0:	4b2f      	ldr	r3, [pc, #188]	; (8003270 <HAL_GPIO_Init+0x330>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	43db      	mvns	r3, r3
 80031ba:	69ba      	ldr	r2, [r7, #24]
 80031bc:	4013      	ands	r3, r2
 80031be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d003      	beq.n	80031d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031d4:	4a26      	ldr	r2, [pc, #152]	; (8003270 <HAL_GPIO_Init+0x330>)
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031da:	4b25      	ldr	r3, [pc, #148]	; (8003270 <HAL_GPIO_Init+0x330>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	43db      	mvns	r3, r3
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	4013      	ands	r3, r2
 80031e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d003      	beq.n	80031fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80031f6:	69ba      	ldr	r2, [r7, #24]
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031fe:	4a1c      	ldr	r2, [pc, #112]	; (8003270 <HAL_GPIO_Init+0x330>)
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003204:	4b1a      	ldr	r3, [pc, #104]	; (8003270 <HAL_GPIO_Init+0x330>)
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	43db      	mvns	r3, r3
 800320e:	69ba      	ldr	r2, [r7, #24]
 8003210:	4013      	ands	r3, r2
 8003212:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d003      	beq.n	8003228 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	4313      	orrs	r3, r2
 8003226:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003228:	4a11      	ldr	r2, [pc, #68]	; (8003270 <HAL_GPIO_Init+0x330>)
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	3301      	adds	r3, #1
 8003232:	61fb      	str	r3, [r7, #28]
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	2b0f      	cmp	r3, #15
 8003238:	f67f ae90 	bls.w	8002f5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800323c:	bf00      	nop
 800323e:	3724      	adds	r7, #36	; 0x24
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr
 8003248:	40023800 	.word	0x40023800
 800324c:	40013800 	.word	0x40013800
 8003250:	40020000 	.word	0x40020000
 8003254:	40020400 	.word	0x40020400
 8003258:	40020800 	.word	0x40020800
 800325c:	40020c00 	.word	0x40020c00
 8003260:	40021000 	.word	0x40021000
 8003264:	40021400 	.word	0x40021400
 8003268:	40021800 	.word	0x40021800
 800326c:	40021c00 	.word	0x40021c00
 8003270:	40013c00 	.word	0x40013c00

08003274 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	460b      	mov	r3, r1
 800327e:	807b      	strh	r3, [r7, #2]
 8003280:	4613      	mov	r3, r2
 8003282:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003284:	787b      	ldrb	r3, [r7, #1]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d003      	beq.n	8003292 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800328a:	887a      	ldrh	r2, [r7, #2]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003290:	e003      	b.n	800329a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003292:	887b      	ldrh	r3, [r7, #2]
 8003294:	041a      	lsls	r2, r3, #16
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	619a      	str	r2, [r3, #24]
}
 800329a:	bf00      	nop
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
	...

080032a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e11f      	b.n	80034fa <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d106      	bne.n	80032d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f7fe f95a 	bl	8001588 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2224      	movs	r2, #36	; 0x24
 80032d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f022 0201 	bic.w	r2, r2, #1
 80032ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800330a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800330c:	f004 fbce 	bl	8007aac <HAL_RCC_GetPCLK1Freq>
 8003310:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	4a7b      	ldr	r2, [pc, #492]	; (8003504 <HAL_I2C_Init+0x25c>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d807      	bhi.n	800332c <HAL_I2C_Init+0x84>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	4a7a      	ldr	r2, [pc, #488]	; (8003508 <HAL_I2C_Init+0x260>)
 8003320:	4293      	cmp	r3, r2
 8003322:	bf94      	ite	ls
 8003324:	2301      	movls	r3, #1
 8003326:	2300      	movhi	r3, #0
 8003328:	b2db      	uxtb	r3, r3
 800332a:	e006      	b.n	800333a <HAL_I2C_Init+0x92>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	4a77      	ldr	r2, [pc, #476]	; (800350c <HAL_I2C_Init+0x264>)
 8003330:	4293      	cmp	r3, r2
 8003332:	bf94      	ite	ls
 8003334:	2301      	movls	r3, #1
 8003336:	2300      	movhi	r3, #0
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e0db      	b.n	80034fa <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	4a72      	ldr	r2, [pc, #456]	; (8003510 <HAL_I2C_Init+0x268>)
 8003346:	fba2 2303 	umull	r2, r3, r2, r3
 800334a:	0c9b      	lsrs	r3, r3, #18
 800334c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68ba      	ldr	r2, [r7, #8]
 800335e:	430a      	orrs	r2, r1
 8003360:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	6a1b      	ldr	r3, [r3, #32]
 8003368:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	4a64      	ldr	r2, [pc, #400]	; (8003504 <HAL_I2C_Init+0x25c>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d802      	bhi.n	800337c <HAL_I2C_Init+0xd4>
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	3301      	adds	r3, #1
 800337a:	e009      	b.n	8003390 <HAL_I2C_Init+0xe8>
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003382:	fb02 f303 	mul.w	r3, r2, r3
 8003386:	4a63      	ldr	r2, [pc, #396]	; (8003514 <HAL_I2C_Init+0x26c>)
 8003388:	fba2 2303 	umull	r2, r3, r2, r3
 800338c:	099b      	lsrs	r3, r3, #6
 800338e:	3301      	adds	r3, #1
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	6812      	ldr	r2, [r2, #0]
 8003394:	430b      	orrs	r3, r1
 8003396:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80033a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	4956      	ldr	r1, [pc, #344]	; (8003504 <HAL_I2C_Init+0x25c>)
 80033ac:	428b      	cmp	r3, r1
 80033ae:	d80d      	bhi.n	80033cc <HAL_I2C_Init+0x124>
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	1e59      	subs	r1, r3, #1
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80033be:	3301      	adds	r3, #1
 80033c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033c4:	2b04      	cmp	r3, #4
 80033c6:	bf38      	it	cc
 80033c8:	2304      	movcc	r3, #4
 80033ca:	e04f      	b.n	800346c <HAL_I2C_Init+0x1c4>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d111      	bne.n	80033f8 <HAL_I2C_Init+0x150>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	1e58      	subs	r0, r3, #1
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6859      	ldr	r1, [r3, #4]
 80033dc:	460b      	mov	r3, r1
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	440b      	add	r3, r1
 80033e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80033e6:	3301      	adds	r3, #1
 80033e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	bf0c      	ite	eq
 80033f0:	2301      	moveq	r3, #1
 80033f2:	2300      	movne	r3, #0
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	e012      	b.n	800341e <HAL_I2C_Init+0x176>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	1e58      	subs	r0, r3, #1
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6859      	ldr	r1, [r3, #4]
 8003400:	460b      	mov	r3, r1
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	440b      	add	r3, r1
 8003406:	0099      	lsls	r1, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	fbb0 f3f3 	udiv	r3, r0, r3
 800340e:	3301      	adds	r3, #1
 8003410:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003414:	2b00      	cmp	r3, #0
 8003416:	bf0c      	ite	eq
 8003418:	2301      	moveq	r3, #1
 800341a:	2300      	movne	r3, #0
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <HAL_I2C_Init+0x17e>
 8003422:	2301      	movs	r3, #1
 8003424:	e022      	b.n	800346c <HAL_I2C_Init+0x1c4>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d10e      	bne.n	800344c <HAL_I2C_Init+0x1a4>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	1e58      	subs	r0, r3, #1
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6859      	ldr	r1, [r3, #4]
 8003436:	460b      	mov	r3, r1
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	440b      	add	r3, r1
 800343c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003440:	3301      	adds	r3, #1
 8003442:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003446:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800344a:	e00f      	b.n	800346c <HAL_I2C_Init+0x1c4>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	1e58      	subs	r0, r3, #1
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6859      	ldr	r1, [r3, #4]
 8003454:	460b      	mov	r3, r1
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	440b      	add	r3, r1
 800345a:	0099      	lsls	r1, r3, #2
 800345c:	440b      	add	r3, r1
 800345e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003462:	3301      	adds	r3, #1
 8003464:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003468:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800346c:	6879      	ldr	r1, [r7, #4]
 800346e:	6809      	ldr	r1, [r1, #0]
 8003470:	4313      	orrs	r3, r2
 8003472:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	69da      	ldr	r2, [r3, #28]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	431a      	orrs	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	430a      	orrs	r2, r1
 800348e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800349a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	6911      	ldr	r1, [r2, #16]
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	68d2      	ldr	r2, [r2, #12]
 80034a6:	4311      	orrs	r1, r2
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	6812      	ldr	r2, [r2, #0]
 80034ac:	430b      	orrs	r3, r1
 80034ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	695a      	ldr	r2, [r3, #20]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	431a      	orrs	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	430a      	orrs	r2, r1
 80034ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f042 0201 	orr.w	r2, r2, #1
 80034da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2220      	movs	r2, #32
 80034e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	000186a0 	.word	0x000186a0
 8003508:	001e847f 	.word	0x001e847f
 800350c:	003d08ff 	.word	0x003d08ff
 8003510:	431bde83 	.word	0x431bde83
 8003514:	10624dd3 	.word	0x10624dd3

08003518 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b088      	sub	sp, #32
 800351c:	af02      	add	r7, sp, #8
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	4608      	mov	r0, r1
 8003522:	4611      	mov	r1, r2
 8003524:	461a      	mov	r2, r3
 8003526:	4603      	mov	r3, r0
 8003528:	817b      	strh	r3, [r7, #10]
 800352a:	460b      	mov	r3, r1
 800352c:	813b      	strh	r3, [r7, #8]
 800352e:	4613      	mov	r3, r2
 8003530:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003532:	f7fe fc81 	bl	8001e38 <HAL_GetTick>
 8003536:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800353e:	b2db      	uxtb	r3, r3
 8003540:	2b20      	cmp	r3, #32
 8003542:	f040 80d9 	bne.w	80036f8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	2319      	movs	r3, #25
 800354c:	2201      	movs	r2, #1
 800354e:	496d      	ldr	r1, [pc, #436]	; (8003704 <HAL_I2C_Mem_Write+0x1ec>)
 8003550:	68f8      	ldr	r0, [r7, #12]
 8003552:	f002 fac3 	bl	8005adc <I2C_WaitOnFlagUntilTimeout>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d001      	beq.n	8003560 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800355c:	2302      	movs	r3, #2
 800355e:	e0cc      	b.n	80036fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003566:	2b01      	cmp	r3, #1
 8003568:	d101      	bne.n	800356e <HAL_I2C_Mem_Write+0x56>
 800356a:	2302      	movs	r3, #2
 800356c:	e0c5      	b.n	80036fa <HAL_I2C_Mem_Write+0x1e2>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0301 	and.w	r3, r3, #1
 8003580:	2b01      	cmp	r3, #1
 8003582:	d007      	beq.n	8003594 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f042 0201 	orr.w	r2, r2, #1
 8003592:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2221      	movs	r2, #33	; 0x21
 80035a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2240      	movs	r2, #64	; 0x40
 80035b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6a3a      	ldr	r2, [r7, #32]
 80035be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80035c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ca:	b29a      	uxth	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	4a4d      	ldr	r2, [pc, #308]	; (8003708 <HAL_I2C_Mem_Write+0x1f0>)
 80035d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80035d6:	88f8      	ldrh	r0, [r7, #6]
 80035d8:	893a      	ldrh	r2, [r7, #8]
 80035da:	8979      	ldrh	r1, [r7, #10]
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	9301      	str	r3, [sp, #4]
 80035e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e2:	9300      	str	r3, [sp, #0]
 80035e4:	4603      	mov	r3, r0
 80035e6:	68f8      	ldr	r0, [r7, #12]
 80035e8:	f002 f852 	bl	8005690 <I2C_RequestMemoryWrite>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d052      	beq.n	8003698 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e081      	b.n	80036fa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	f002 fb44 	bl	8005c88 <I2C_WaitOnTXEFlagUntilTimeout>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00d      	beq.n	8003622 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360a:	2b04      	cmp	r3, #4
 800360c:	d107      	bne.n	800361e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800361c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e06b      	b.n	80036fa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003626:	781a      	ldrb	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003632:	1c5a      	adds	r2, r3, #1
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800363c:	3b01      	subs	r3, #1
 800363e:	b29a      	uxth	r2, r3
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003648:	b29b      	uxth	r3, r3
 800364a:	3b01      	subs	r3, #1
 800364c:	b29a      	uxth	r2, r3
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	695b      	ldr	r3, [r3, #20]
 8003658:	f003 0304 	and.w	r3, r3, #4
 800365c:	2b04      	cmp	r3, #4
 800365e:	d11b      	bne.n	8003698 <HAL_I2C_Mem_Write+0x180>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003664:	2b00      	cmp	r3, #0
 8003666:	d017      	beq.n	8003698 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366c:	781a      	ldrb	r2, [r3, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003678:	1c5a      	adds	r2, r3, #1
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003682:	3b01      	subs	r3, #1
 8003684:	b29a      	uxth	r2, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800368e:	b29b      	uxth	r3, r3
 8003690:	3b01      	subs	r3, #1
 8003692:	b29a      	uxth	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1aa      	bne.n	80035f6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036a0:	697a      	ldr	r2, [r7, #20]
 80036a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036a4:	68f8      	ldr	r0, [r7, #12]
 80036a6:	f002 fb30 	bl	8005d0a <I2C_WaitOnBTFFlagUntilTimeout>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00d      	beq.n	80036cc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b4:	2b04      	cmp	r3, #4
 80036b6:	d107      	bne.n	80036c8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036c6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e016      	b.n	80036fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2220      	movs	r2, #32
 80036e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80036f4:	2300      	movs	r3, #0
 80036f6:	e000      	b.n	80036fa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80036f8:	2302      	movs	r3, #2
  }
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3718      	adds	r7, #24
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	00100002 	.word	0x00100002
 8003708:	ffff0000 	.word	0xffff0000

0800370c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b08c      	sub	sp, #48	; 0x30
 8003710:	af02      	add	r7, sp, #8
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	4608      	mov	r0, r1
 8003716:	4611      	mov	r1, r2
 8003718:	461a      	mov	r2, r3
 800371a:	4603      	mov	r3, r0
 800371c:	817b      	strh	r3, [r7, #10]
 800371e:	460b      	mov	r3, r1
 8003720:	813b      	strh	r3, [r7, #8]
 8003722:	4613      	mov	r3, r2
 8003724:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003726:	f7fe fb87 	bl	8001e38 <HAL_GetTick>
 800372a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003732:	b2db      	uxtb	r3, r3
 8003734:	2b20      	cmp	r3, #32
 8003736:	f040 8208 	bne.w	8003b4a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800373a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373c:	9300      	str	r3, [sp, #0]
 800373e:	2319      	movs	r3, #25
 8003740:	2201      	movs	r2, #1
 8003742:	497b      	ldr	r1, [pc, #492]	; (8003930 <HAL_I2C_Mem_Read+0x224>)
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	f002 f9c9 	bl	8005adc <I2C_WaitOnFlagUntilTimeout>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d001      	beq.n	8003754 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003750:	2302      	movs	r3, #2
 8003752:	e1fb      	b.n	8003b4c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800375a:	2b01      	cmp	r3, #1
 800375c:	d101      	bne.n	8003762 <HAL_I2C_Mem_Read+0x56>
 800375e:	2302      	movs	r3, #2
 8003760:	e1f4      	b.n	8003b4c <HAL_I2C_Mem_Read+0x440>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0301 	and.w	r3, r3, #1
 8003774:	2b01      	cmp	r3, #1
 8003776:	d007      	beq.n	8003788 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f042 0201 	orr.w	r2, r2, #1
 8003786:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003796:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2222      	movs	r2, #34	; 0x22
 800379c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2240      	movs	r2, #64	; 0x40
 80037a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80037b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037be:	b29a      	uxth	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	4a5b      	ldr	r2, [pc, #364]	; (8003934 <HAL_I2C_Mem_Read+0x228>)
 80037c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037ca:	88f8      	ldrh	r0, [r7, #6]
 80037cc:	893a      	ldrh	r2, [r7, #8]
 80037ce:	8979      	ldrh	r1, [r7, #10]
 80037d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d2:	9301      	str	r3, [sp, #4]
 80037d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037d6:	9300      	str	r3, [sp, #0]
 80037d8:	4603      	mov	r3, r0
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f001 ffee 	bl	80057bc <I2C_RequestMemoryRead>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d001      	beq.n	80037ea <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e1b0      	b.n	8003b4c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d113      	bne.n	800381a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037f2:	2300      	movs	r3, #0
 80037f4:	623b      	str	r3, [r7, #32]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	695b      	ldr	r3, [r3, #20]
 80037fc:	623b      	str	r3, [r7, #32]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	623b      	str	r3, [r7, #32]
 8003806:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003816:	601a      	str	r2, [r3, #0]
 8003818:	e184      	b.n	8003b24 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800381e:	2b01      	cmp	r3, #1
 8003820:	d11b      	bne.n	800385a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003830:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003832:	2300      	movs	r3, #0
 8003834:	61fb      	str	r3, [r7, #28]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	695b      	ldr	r3, [r3, #20]
 800383c:	61fb      	str	r3, [r7, #28]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	61fb      	str	r3, [r7, #28]
 8003846:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003856:	601a      	str	r2, [r3, #0]
 8003858:	e164      	b.n	8003b24 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800385e:	2b02      	cmp	r3, #2
 8003860:	d11b      	bne.n	800389a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003870:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003880:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003882:	2300      	movs	r3, #0
 8003884:	61bb      	str	r3, [r7, #24]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	695b      	ldr	r3, [r3, #20]
 800388c:	61bb      	str	r3, [r7, #24]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	61bb      	str	r3, [r7, #24]
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	e144      	b.n	8003b24 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800389a:	2300      	movs	r3, #0
 800389c:	617b      	str	r3, [r7, #20]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	695b      	ldr	r3, [r3, #20]
 80038a4:	617b      	str	r3, [r7, #20]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	699b      	ldr	r3, [r3, #24]
 80038ac:	617b      	str	r3, [r7, #20]
 80038ae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80038b0:	e138      	b.n	8003b24 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b6:	2b03      	cmp	r3, #3
 80038b8:	f200 80f1 	bhi.w	8003a9e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d123      	bne.n	800390c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f002 fa91 	bl	8005df0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d001      	beq.n	80038d8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e139      	b.n	8003b4c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	691a      	ldr	r2, [r3, #16]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e2:	b2d2      	uxtb	r2, r2
 80038e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ea:	1c5a      	adds	r2, r3, #1
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038f4:	3b01      	subs	r3, #1
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003900:	b29b      	uxth	r3, r3
 8003902:	3b01      	subs	r3, #1
 8003904:	b29a      	uxth	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	855a      	strh	r2, [r3, #42]	; 0x2a
 800390a:	e10b      	b.n	8003b24 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003910:	2b02      	cmp	r3, #2
 8003912:	d14e      	bne.n	80039b2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003916:	9300      	str	r3, [sp, #0]
 8003918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800391a:	2200      	movs	r2, #0
 800391c:	4906      	ldr	r1, [pc, #24]	; (8003938 <HAL_I2C_Mem_Read+0x22c>)
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f002 f8dc 	bl	8005adc <I2C_WaitOnFlagUntilTimeout>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d008      	beq.n	800393c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e10e      	b.n	8003b4c <HAL_I2C_Mem_Read+0x440>
 800392e:	bf00      	nop
 8003930:	00100002 	.word	0x00100002
 8003934:	ffff0000 	.word	0xffff0000
 8003938:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800394a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	691a      	ldr	r2, [r3, #16]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003956:	b2d2      	uxtb	r2, r2
 8003958:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395e:	1c5a      	adds	r2, r3, #1
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003968:	3b01      	subs	r3, #1
 800396a:	b29a      	uxth	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003974:	b29b      	uxth	r3, r3
 8003976:	3b01      	subs	r3, #1
 8003978:	b29a      	uxth	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	691a      	ldr	r2, [r3, #16]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003988:	b2d2      	uxtb	r2, r2
 800398a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003990:	1c5a      	adds	r2, r3, #1
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800399a:	3b01      	subs	r3, #1
 800399c:	b29a      	uxth	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	3b01      	subs	r3, #1
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039b0:	e0b8      	b.n	8003b24 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b4:	9300      	str	r3, [sp, #0]
 80039b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b8:	2200      	movs	r2, #0
 80039ba:	4966      	ldr	r1, [pc, #408]	; (8003b54 <HAL_I2C_Mem_Read+0x448>)
 80039bc:	68f8      	ldr	r0, [r7, #12]
 80039be:	f002 f88d 	bl	8005adc <I2C_WaitOnFlagUntilTimeout>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d001      	beq.n	80039cc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e0bf      	b.n	8003b4c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	691a      	ldr	r2, [r3, #16]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e6:	b2d2      	uxtb	r2, r2
 80039e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ee:	1c5a      	adds	r2, r3, #1
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039f8:	3b01      	subs	r3, #1
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	3b01      	subs	r3, #1
 8003a08:	b29a      	uxth	r2, r3
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a10:	9300      	str	r3, [sp, #0]
 8003a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a14:	2200      	movs	r2, #0
 8003a16:	494f      	ldr	r1, [pc, #316]	; (8003b54 <HAL_I2C_Mem_Read+0x448>)
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f002 f85f 	bl	8005adc <I2C_WaitOnFlagUntilTimeout>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d001      	beq.n	8003a28 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e091      	b.n	8003b4c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	691a      	ldr	r2, [r3, #16]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a42:	b2d2      	uxtb	r2, r2
 8003a44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4a:	1c5a      	adds	r2, r3, #1
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a54:	3b01      	subs	r3, #1
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	3b01      	subs	r3, #1
 8003a64:	b29a      	uxth	r2, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	691a      	ldr	r2, [r3, #16]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a74:	b2d2      	uxtb	r2, r2
 8003a76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7c:	1c5a      	adds	r2, r3, #1
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a86:	3b01      	subs	r3, #1
 8003a88:	b29a      	uxth	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	3b01      	subs	r3, #1
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a9c:	e042      	b.n	8003b24 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aa0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	f002 f9a4 	bl	8005df0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e04c      	b.n	8003b4c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	691a      	ldr	r2, [r3, #16]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abc:	b2d2      	uxtb	r2, r2
 8003abe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac4:	1c5a      	adds	r2, r3, #1
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	b29a      	uxth	r2, r3
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	3b01      	subs	r3, #1
 8003ade:	b29a      	uxth	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	f003 0304 	and.w	r3, r3, #4
 8003aee:	2b04      	cmp	r3, #4
 8003af0:	d118      	bne.n	8003b24 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	691a      	ldr	r2, [r3, #16]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afc:	b2d2      	uxtb	r2, r2
 8003afe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b04:	1c5a      	adds	r2, r3, #1
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	b29a      	uxth	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f47f aec2 	bne.w	80038b2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2220      	movs	r2, #32
 8003b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b46:	2300      	movs	r3, #0
 8003b48:	e000      	b.n	8003b4c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003b4a:	2302      	movs	r3, #2
  }
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3728      	adds	r7, #40	; 0x28
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	00010004 	.word	0x00010004

08003b58 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b087      	sub	sp, #28
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	4608      	mov	r0, r1
 8003b62:	4611      	mov	r1, r2
 8003b64:	461a      	mov	r2, r3
 8003b66:	4603      	mov	r3, r0
 8003b68:	817b      	strh	r3, [r7, #10]
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	813b      	strh	r3, [r7, #8]
 8003b6e:	4613      	mov	r3, r2
 8003b70:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003b72:	2300      	movs	r3, #0
 8003b74:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b20      	cmp	r3, #32
 8003b80:	f040 809a 	bne.w	8003cb8 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003b84:	4b50      	ldr	r3, [pc, #320]	; (8003cc8 <HAL_I2C_Mem_Read_IT+0x170>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	08db      	lsrs	r3, r3, #3
 8003b8a:	4a50      	ldr	r2, [pc, #320]	; (8003ccc <HAL_I2C_Mem_Read_IT+0x174>)
 8003b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b90:	0a1a      	lsrs	r2, r3, #8
 8003b92:	4613      	mov	r3, r2
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	4413      	add	r3, r2
 8003b98:	009a      	lsls	r2, r3, #2
 8003b9a:	4413      	add	r3, r2
 8003b9c:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d116      	bne.n	8003bd8 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2220      	movs	r2, #32
 8003bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc4:	f043 0220 	orr.w	r2, r3, #32
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e070      	b.n	8003cba <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d0db      	beq.n	8003b9e <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d101      	bne.n	8003bf4 <HAL_I2C_Mem_Read_IT+0x9c>
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	e062      	b.n	8003cba <HAL_I2C_Mem_Read_IT+0x162>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0301 	and.w	r3, r3, #1
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d007      	beq.n	8003c1a <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f042 0201 	orr.w	r2, r2, #1
 8003c18:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c28:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2222      	movs	r2, #34	; 0x22
 8003c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2240      	movs	r2, #64	; 0x40
 8003c36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6a3a      	ldr	r2, [r7, #32]
 8003c44:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003c4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	4a1d      	ldr	r2, [pc, #116]	; (8003cd0 <HAL_I2C_Mem_Read_IT+0x178>)
 8003c5a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003c5c:	897a      	ldrh	r2, [r7, #10]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8003c62:	893a      	ldrh	r2, [r7, #8]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8003c68:	88fa      	ldrh	r2, [r7, #6]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c82:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c92:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d007      	beq.n	8003cb4 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	685a      	ldr	r2, [r3, #4]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003cb2:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	e000      	b.n	8003cba <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 8003cb8:	2302      	movs	r3, #2
  }
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	371c      	adds	r7, #28
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	20000000 	.word	0x20000000
 8003ccc:	14f8b589 	.word	0x14f8b589
 8003cd0:	ffff0000 	.word	0xffff0000

08003cd4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b08a      	sub	sp, #40	; 0x28
 8003cd8:	af02      	add	r7, sp, #8
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	607a      	str	r2, [r7, #4]
 8003cde:	603b      	str	r3, [r7, #0]
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003ce4:	f7fe f8a8 	bl	8001e38 <HAL_GetTick>
 8003ce8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003cea:	2301      	movs	r3, #1
 8003cec:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b20      	cmp	r3, #32
 8003cf8:	f040 8111 	bne.w	8003f1e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	9300      	str	r3, [sp, #0]
 8003d00:	2319      	movs	r3, #25
 8003d02:	2201      	movs	r2, #1
 8003d04:	4988      	ldr	r1, [pc, #544]	; (8003f28 <HAL_I2C_IsDeviceReady+0x254>)
 8003d06:	68f8      	ldr	r0, [r7, #12]
 8003d08:	f001 fee8 	bl	8005adc <I2C_WaitOnFlagUntilTimeout>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d001      	beq.n	8003d16 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003d12:	2302      	movs	r3, #2
 8003d14:	e104      	b.n	8003f20 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d101      	bne.n	8003d24 <HAL_I2C_IsDeviceReady+0x50>
 8003d20:	2302      	movs	r3, #2
 8003d22:	e0fd      	b.n	8003f20 <HAL_I2C_IsDeviceReady+0x24c>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d007      	beq.n	8003d4a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f042 0201 	orr.w	r2, r2, #1
 8003d48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d58:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2224      	movs	r2, #36	; 0x24
 8003d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	4a70      	ldr	r2, [pc, #448]	; (8003f2c <HAL_I2C_IsDeviceReady+0x258>)
 8003d6c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d7c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	9300      	str	r3, [sp, #0]
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d8a:	68f8      	ldr	r0, [r7, #12]
 8003d8c:	f001 fea6 	bl	8005adc <I2C_WaitOnFlagUntilTimeout>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00d      	beq.n	8003db2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003da4:	d103      	bne.n	8003dae <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dac:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e0b6      	b.n	8003f20 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003db2:	897b      	ldrh	r3, [r7, #10]
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	461a      	mov	r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003dc0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003dc2:	f7fe f839 	bl	8001e38 <HAL_GetTick>
 8003dc6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	bf0c      	ite	eq
 8003dd6:	2301      	moveq	r3, #1
 8003dd8:	2300      	movne	r3, #0
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	695b      	ldr	r3, [r3, #20]
 8003de4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003de8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dec:	bf0c      	ite	eq
 8003dee:	2301      	moveq	r3, #1
 8003df0:	2300      	movne	r3, #0
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003df6:	e025      	b.n	8003e44 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003df8:	f7fe f81e 	bl	8001e38 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	683a      	ldr	r2, [r7, #0]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d302      	bcc.n	8003e0e <HAL_I2C_IsDeviceReady+0x13a>
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d103      	bne.n	8003e16 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	22a0      	movs	r2, #160	; 0xa0
 8003e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	695b      	ldr	r3, [r3, #20]
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	bf0c      	ite	eq
 8003e24:	2301      	moveq	r3, #1
 8003e26:	2300      	movne	r3, #0
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e3a:	bf0c      	ite	eq
 8003e3c:	2301      	moveq	r3, #1
 8003e3e:	2300      	movne	r3, #0
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2ba0      	cmp	r3, #160	; 0xa0
 8003e4e:	d005      	beq.n	8003e5c <HAL_I2C_IsDeviceReady+0x188>
 8003e50:	7dfb      	ldrb	r3, [r7, #23]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d102      	bne.n	8003e5c <HAL_I2C_IsDeviceReady+0x188>
 8003e56:	7dbb      	ldrb	r3, [r7, #22]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d0cd      	beq.n	8003df8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2220      	movs	r2, #32
 8003e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d129      	bne.n	8003ec6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e80:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e82:	2300      	movs	r3, #0
 8003e84:	613b      	str	r3, [r7, #16]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	695b      	ldr	r3, [r3, #20]
 8003e8c:	613b      	str	r3, [r7, #16]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	613b      	str	r3, [r7, #16]
 8003e96:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	9300      	str	r3, [sp, #0]
 8003e9c:	2319      	movs	r3, #25
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	4921      	ldr	r1, [pc, #132]	; (8003f28 <HAL_I2C_IsDeviceReady+0x254>)
 8003ea2:	68f8      	ldr	r0, [r7, #12]
 8003ea4:	f001 fe1a 	bl	8005adc <I2C_WaitOnFlagUntilTimeout>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d001      	beq.n	8003eb2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e036      	b.n	8003f20 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2220      	movs	r2, #32
 8003eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	e02c      	b.n	8003f20 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ed4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ede:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	9300      	str	r3, [sp, #0]
 8003ee4:	2319      	movs	r3, #25
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	490f      	ldr	r1, [pc, #60]	; (8003f28 <HAL_I2C_IsDeviceReady+0x254>)
 8003eea:	68f8      	ldr	r0, [r7, #12]
 8003eec:	f001 fdf6 	bl	8005adc <I2C_WaitOnFlagUntilTimeout>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d001      	beq.n	8003efa <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e012      	b.n	8003f20 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	3301      	adds	r3, #1
 8003efe:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003f00:	69ba      	ldr	r2, [r7, #24]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	f4ff af32 	bcc.w	8003d6e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2220      	movs	r2, #32
 8003f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e000      	b.n	8003f20 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003f1e:	2302      	movs	r3, #2
  }
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3720      	adds	r7, #32
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	00100002 	.word	0x00100002
 8003f2c:	ffff0000 	.word	0xffff0000

08003f30 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b088      	sub	sp, #32
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f48:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f50:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f58:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003f5a:	7bfb      	ldrb	r3, [r7, #15]
 8003f5c:	2b10      	cmp	r3, #16
 8003f5e:	d003      	beq.n	8003f68 <HAL_I2C_EV_IRQHandler+0x38>
 8003f60:	7bfb      	ldrb	r3, [r7, #15]
 8003f62:	2b40      	cmp	r3, #64	; 0x40
 8003f64:	f040 80bd 	bne.w	80040e2 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10d      	bne.n	8003f9e <HAL_I2C_EV_IRQHandler+0x6e>
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003f88:	d003      	beq.n	8003f92 <HAL_I2C_EV_IRQHandler+0x62>
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003f90:	d101      	bne.n	8003f96 <HAL_I2C_EV_IRQHandler+0x66>
 8003f92:	2301      	movs	r3, #1
 8003f94:	e000      	b.n	8003f98 <HAL_I2C_EV_IRQHandler+0x68>
 8003f96:	2300      	movs	r3, #0
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	f000 812e 	beq.w	80041fa <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	f003 0301 	and.w	r3, r3, #1
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00c      	beq.n	8003fc2 <HAL_I2C_EV_IRQHandler+0x92>
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	0a5b      	lsrs	r3, r3, #9
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d006      	beq.n	8003fc2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f001 ffa0 	bl	8005efa <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 fd52 	bl	8004a64 <I2C_Master_SB>
 8003fc0:	e08e      	b.n	80040e0 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	08db      	lsrs	r3, r3, #3
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d009      	beq.n	8003fe2 <HAL_I2C_EV_IRQHandler+0xb2>
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	0a5b      	lsrs	r3, r3, #9
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d003      	beq.n	8003fe2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 fdc8 	bl	8004b70 <I2C_Master_ADD10>
 8003fe0:	e07e      	b.n	80040e0 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	085b      	lsrs	r3, r3, #1
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d009      	beq.n	8004002 <HAL_I2C_EV_IRQHandler+0xd2>
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	0a5b      	lsrs	r3, r3, #9
 8003ff2:	f003 0301 	and.w	r3, r3, #1
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d003      	beq.n	8004002 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 fde2 	bl	8004bc4 <I2C_Master_ADDR>
 8004000:	e06e      	b.n	80040e0 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	089b      	lsrs	r3, r3, #2
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b00      	cmp	r3, #0
 800400c:	d037      	beq.n	800407e <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004018:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800401c:	f000 80ef 	beq.w	80041fe <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	09db      	lsrs	r3, r3, #7
 8004024:	f003 0301 	and.w	r3, r3, #1
 8004028:	2b00      	cmp	r3, #0
 800402a:	d00f      	beq.n	800404c <HAL_I2C_EV_IRQHandler+0x11c>
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	0a9b      	lsrs	r3, r3, #10
 8004030:	f003 0301 	and.w	r3, r3, #1
 8004034:	2b00      	cmp	r3, #0
 8004036:	d009      	beq.n	800404c <HAL_I2C_EV_IRQHandler+0x11c>
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	089b      	lsrs	r3, r3, #2
 800403c:	f003 0301 	and.w	r3, r3, #1
 8004040:	2b00      	cmp	r3, #0
 8004042:	d103      	bne.n	800404c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f000 f9df 	bl	8004408 <I2C_MasterTransmit_TXE>
 800404a:	e049      	b.n	80040e0 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	089b      	lsrs	r3, r3, #2
 8004050:	f003 0301 	and.w	r3, r3, #1
 8004054:	2b00      	cmp	r3, #0
 8004056:	f000 80d2 	beq.w	80041fe <HAL_I2C_EV_IRQHandler+0x2ce>
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	0a5b      	lsrs	r3, r3, #9
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	2b00      	cmp	r3, #0
 8004064:	f000 80cb 	beq.w	80041fe <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8004068:	7bfb      	ldrb	r3, [r7, #15]
 800406a:	2b10      	cmp	r3, #16
 800406c:	d103      	bne.n	8004076 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 fa66 	bl	8004540 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004074:	e0c3      	b.n	80041fe <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 faca 	bl	8004610 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800407c:	e0bf      	b.n	80041fe <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004088:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800408c:	f000 80b7 	beq.w	80041fe <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	099b      	lsrs	r3, r3, #6
 8004094:	f003 0301 	and.w	r3, r3, #1
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00f      	beq.n	80040bc <HAL_I2C_EV_IRQHandler+0x18c>
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	0a9b      	lsrs	r3, r3, #10
 80040a0:	f003 0301 	and.w	r3, r3, #1
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d009      	beq.n	80040bc <HAL_I2C_EV_IRQHandler+0x18c>
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	089b      	lsrs	r3, r3, #2
 80040ac:	f003 0301 	and.w	r3, r3, #1
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d103      	bne.n	80040bc <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f000 fb3a 	bl	800472e <I2C_MasterReceive_RXNE>
 80040ba:	e011      	b.n	80040e0 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	089b      	lsrs	r3, r3, #2
 80040c0:	f003 0301 	and.w	r3, r3, #1
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f000 809a 	beq.w	80041fe <HAL_I2C_EV_IRQHandler+0x2ce>
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	0a5b      	lsrs	r3, r3, #9
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	f000 8093 	beq.w	80041fe <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f000 fbd9 	bl	8004890 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040de:	e08e      	b.n	80041fe <HAL_I2C_EV_IRQHandler+0x2ce>
 80040e0:	e08d      	b.n	80041fe <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d004      	beq.n	80040f4 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	695b      	ldr	r3, [r3, #20]
 80040f0:	61fb      	str	r3, [r7, #28]
 80040f2:	e007      	b.n	8004104 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	695b      	ldr	r3, [r3, #20]
 8004102:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	085b      	lsrs	r3, r3, #1
 8004108:	f003 0301 	and.w	r3, r3, #1
 800410c:	2b00      	cmp	r3, #0
 800410e:	d012      	beq.n	8004136 <HAL_I2C_EV_IRQHandler+0x206>
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	0a5b      	lsrs	r3, r3, #9
 8004114:	f003 0301 	and.w	r3, r3, #1
 8004118:	2b00      	cmp	r3, #0
 800411a:	d00c      	beq.n	8004136 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004120:	2b00      	cmp	r3, #0
 8004122:	d003      	beq.n	800412c <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800412c:	69b9      	ldr	r1, [r7, #24]
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 ff97 	bl	8005062 <I2C_Slave_ADDR>
 8004134:	e066      	b.n	8004204 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	091b      	lsrs	r3, r3, #4
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	2b00      	cmp	r3, #0
 8004140:	d009      	beq.n	8004156 <HAL_I2C_EV_IRQHandler+0x226>
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	0a5b      	lsrs	r3, r3, #9
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	2b00      	cmp	r3, #0
 800414c:	d003      	beq.n	8004156 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 ffcc 	bl	80050ec <I2C_Slave_STOPF>
 8004154:	e056      	b.n	8004204 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004156:	7bbb      	ldrb	r3, [r7, #14]
 8004158:	2b21      	cmp	r3, #33	; 0x21
 800415a:	d002      	beq.n	8004162 <HAL_I2C_EV_IRQHandler+0x232>
 800415c:	7bbb      	ldrb	r3, [r7, #14]
 800415e:	2b29      	cmp	r3, #41	; 0x29
 8004160:	d125      	bne.n	80041ae <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	09db      	lsrs	r3, r3, #7
 8004166:	f003 0301 	and.w	r3, r3, #1
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00f      	beq.n	800418e <HAL_I2C_EV_IRQHandler+0x25e>
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	0a9b      	lsrs	r3, r3, #10
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	2b00      	cmp	r3, #0
 8004178:	d009      	beq.n	800418e <HAL_I2C_EV_IRQHandler+0x25e>
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	089b      	lsrs	r3, r3, #2
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	2b00      	cmp	r3, #0
 8004184:	d103      	bne.n	800418e <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 fead 	bl	8004ee6 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800418c:	e039      	b.n	8004202 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	089b      	lsrs	r3, r3, #2
 8004192:	f003 0301 	and.w	r3, r3, #1
 8004196:	2b00      	cmp	r3, #0
 8004198:	d033      	beq.n	8004202 <HAL_I2C_EV_IRQHandler+0x2d2>
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	0a5b      	lsrs	r3, r3, #9
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d02d      	beq.n	8004202 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 feda 	bl	8004f60 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80041ac:	e029      	b.n	8004202 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	099b      	lsrs	r3, r3, #6
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00f      	beq.n	80041da <HAL_I2C_EV_IRQHandler+0x2aa>
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	0a9b      	lsrs	r3, r3, #10
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d009      	beq.n	80041da <HAL_I2C_EV_IRQHandler+0x2aa>
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	089b      	lsrs	r3, r3, #2
 80041ca:	f003 0301 	and.w	r3, r3, #1
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d103      	bne.n	80041da <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f000 fee5 	bl	8004fa2 <I2C_SlaveReceive_RXNE>
 80041d8:	e014      	b.n	8004204 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	089b      	lsrs	r3, r3, #2
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d00e      	beq.n	8004204 <HAL_I2C_EV_IRQHandler+0x2d4>
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	0a5b      	lsrs	r3, r3, #9
 80041ea:	f003 0301 	and.w	r3, r3, #1
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d008      	beq.n	8004204 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 ff13 	bl	800501e <I2C_SlaveReceive_BTF>
 80041f8:	e004      	b.n	8004204 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 80041fa:	bf00      	nop
 80041fc:	e002      	b.n	8004204 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041fe:	bf00      	nop
 8004200:	e000      	b.n	8004204 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004202:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004204:	3720      	adds	r7, #32
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}

0800420a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800420a:	b580      	push	{r7, lr}
 800420c:	b08a      	sub	sp, #40	; 0x28
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	695b      	ldr	r3, [r3, #20]
 8004218:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004222:	2300      	movs	r3, #0
 8004224:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800422c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800422e:	6a3b      	ldr	r3, [r7, #32]
 8004230:	0a1b      	lsrs	r3, r3, #8
 8004232:	f003 0301 	and.w	r3, r3, #1
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00e      	beq.n	8004258 <HAL_I2C_ER_IRQHandler+0x4e>
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	0a1b      	lsrs	r3, r3, #8
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	2b00      	cmp	r3, #0
 8004244:	d008      	beq.n	8004258 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004248:	f043 0301 	orr.w	r3, r3, #1
 800424c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004256:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004258:	6a3b      	ldr	r3, [r7, #32]
 800425a:	0a5b      	lsrs	r3, r3, #9
 800425c:	f003 0301 	and.w	r3, r3, #1
 8004260:	2b00      	cmp	r3, #0
 8004262:	d00e      	beq.n	8004282 <HAL_I2C_ER_IRQHandler+0x78>
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	0a1b      	lsrs	r3, r3, #8
 8004268:	f003 0301 	and.w	r3, r3, #1
 800426c:	2b00      	cmp	r3, #0
 800426e:	d008      	beq.n	8004282 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004272:	f043 0302 	orr.w	r3, r3, #2
 8004276:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004280:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004282:	6a3b      	ldr	r3, [r7, #32]
 8004284:	0a9b      	lsrs	r3, r3, #10
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b00      	cmp	r3, #0
 800428c:	d03f      	beq.n	800430e <HAL_I2C_ER_IRQHandler+0x104>
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	0a1b      	lsrs	r3, r3, #8
 8004292:	f003 0301 	and.w	r3, r3, #1
 8004296:	2b00      	cmp	r3, #0
 8004298:	d039      	beq.n	800430e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800429a:	7efb      	ldrb	r3, [r7, #27]
 800429c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ac:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80042b4:	7ebb      	ldrb	r3, [r7, #26]
 80042b6:	2b20      	cmp	r3, #32
 80042b8:	d112      	bne.n	80042e0 <HAL_I2C_ER_IRQHandler+0xd6>
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d10f      	bne.n	80042e0 <HAL_I2C_ER_IRQHandler+0xd6>
 80042c0:	7cfb      	ldrb	r3, [r7, #19]
 80042c2:	2b21      	cmp	r3, #33	; 0x21
 80042c4:	d008      	beq.n	80042d8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80042c6:	7cfb      	ldrb	r3, [r7, #19]
 80042c8:	2b29      	cmp	r3, #41	; 0x29
 80042ca:	d005      	beq.n	80042d8 <HAL_I2C_ER_IRQHandler+0xce>
 80042cc:	7cfb      	ldrb	r3, [r7, #19]
 80042ce:	2b28      	cmp	r3, #40	; 0x28
 80042d0:	d106      	bne.n	80042e0 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2b21      	cmp	r3, #33	; 0x21
 80042d6:	d103      	bne.n	80042e0 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f001 f837 	bl	800534c <I2C_Slave_AF>
 80042de:	e016      	b.n	800430e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042e8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80042ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ec:	f043 0304 	orr.w	r3, r3, #4
 80042f0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80042f2:	7efb      	ldrb	r3, [r7, #27]
 80042f4:	2b10      	cmp	r3, #16
 80042f6:	d002      	beq.n	80042fe <HAL_I2C_ER_IRQHandler+0xf4>
 80042f8:	7efb      	ldrb	r3, [r7, #27]
 80042fa:	2b40      	cmp	r3, #64	; 0x40
 80042fc:	d107      	bne.n	800430e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800430c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800430e:	6a3b      	ldr	r3, [r7, #32]
 8004310:	0adb      	lsrs	r3, r3, #11
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00e      	beq.n	8004338 <HAL_I2C_ER_IRQHandler+0x12e>
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	0a1b      	lsrs	r3, r3, #8
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	2b00      	cmp	r3, #0
 8004324:	d008      	beq.n	8004338 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004328:	f043 0308 	orr.w	r3, r3, #8
 800432c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004336:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433a:	2b00      	cmp	r3, #0
 800433c:	d008      	beq.n	8004350 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004344:	431a      	orrs	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f001 f86e 	bl	800542c <I2C_ITError>
  }
}
 8004350:	bf00      	nop
 8004352:	3728      	adds	r7, #40	; 0x28
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004374:	bf00      	nop
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004388:	bf00      	nop
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800439c:	bf00      	nop
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	460b      	mov	r3, r1
 80043b2:	70fb      	strb	r3, [r7, #3]
 80043b4:	4613      	mov	r3, r2
 80043b6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80043b8:	bf00      	nop
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80043cc:	bf00      	nop
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80043e0:	bf00      	nop
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043fa:	b2db      	uxtb	r3, r3
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004416:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800441e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004424:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800442a:	2b00      	cmp	r3, #0
 800442c:	d150      	bne.n	80044d0 <I2C_MasterTransmit_TXE+0xc8>
 800442e:	7bfb      	ldrb	r3, [r7, #15]
 8004430:	2b21      	cmp	r3, #33	; 0x21
 8004432:	d14d      	bne.n	80044d0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	2b08      	cmp	r3, #8
 8004438:	d01d      	beq.n	8004476 <I2C_MasterTransmit_TXE+0x6e>
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	2b20      	cmp	r3, #32
 800443e:	d01a      	beq.n	8004476 <I2C_MasterTransmit_TXE+0x6e>
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004446:	d016      	beq.n	8004476 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	685a      	ldr	r2, [r3, #4]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004456:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2211      	movs	r2, #17
 800445c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2220      	movs	r2, #32
 800446a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f7ff ff72 	bl	8004358 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004474:	e060      	b.n	8004538 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	685a      	ldr	r2, [r3, #4]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004484:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004494:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2220      	movs	r2, #32
 80044a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	2b40      	cmp	r3, #64	; 0x40
 80044ae:	d107      	bne.n	80044c0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f00d f933 	bl	8011724 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80044be:	e03b      	b.n	8004538 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f7ff ff45 	bl	8004358 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80044ce:	e033      	b.n	8004538 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80044d0:	7bfb      	ldrb	r3, [r7, #15]
 80044d2:	2b21      	cmp	r3, #33	; 0x21
 80044d4:	d005      	beq.n	80044e2 <I2C_MasterTransmit_TXE+0xda>
 80044d6:	7bbb      	ldrb	r3, [r7, #14]
 80044d8:	2b40      	cmp	r3, #64	; 0x40
 80044da:	d12d      	bne.n	8004538 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80044dc:	7bfb      	ldrb	r3, [r7, #15]
 80044de:	2b22      	cmp	r3, #34	; 0x22
 80044e0:	d12a      	bne.n	8004538 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d108      	bne.n	80044fe <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	685a      	ldr	r2, [r3, #4]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044fa:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80044fc:	e01c      	b.n	8004538 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b40      	cmp	r3, #64	; 0x40
 8004508:	d103      	bne.n	8004512 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 f880 	bl	8004610 <I2C_MemoryTransmit_TXE_BTF>
}
 8004510:	e012      	b.n	8004538 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004516:	781a      	ldrb	r2, [r3, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004522:	1c5a      	adds	r2, r3, #1
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800452c:	b29b      	uxth	r3, r3
 800452e:	3b01      	subs	r3, #1
 8004530:	b29a      	uxth	r2, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004536:	e7ff      	b.n	8004538 <I2C_MasterTransmit_TXE+0x130>
 8004538:	bf00      	nop
 800453a:	3710      	adds	r7, #16
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004554:	b2db      	uxtb	r3, r3
 8004556:	2b21      	cmp	r3, #33	; 0x21
 8004558:	d156      	bne.n	8004608 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800455e:	b29b      	uxth	r3, r3
 8004560:	2b00      	cmp	r3, #0
 8004562:	d012      	beq.n	800458a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004568:	781a      	ldrb	r2, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004574:	1c5a      	adds	r2, r3, #1
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800457e:	b29b      	uxth	r3, r3
 8004580:	3b01      	subs	r3, #1
 8004582:	b29a      	uxth	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004588:	e03e      	b.n	8004608 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2b08      	cmp	r3, #8
 800458e:	d01d      	beq.n	80045cc <I2C_MasterTransmit_BTF+0x8c>
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2b20      	cmp	r3, #32
 8004594:	d01a      	beq.n	80045cc <I2C_MasterTransmit_BTF+0x8c>
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800459c:	d016      	beq.n	80045cc <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	685a      	ldr	r2, [r3, #4]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80045ac:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2211      	movs	r2, #17
 80045b2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2220      	movs	r2, #32
 80045c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f7ff fec7 	bl	8004358 <HAL_I2C_MasterTxCpltCallback>
}
 80045ca:	e01d      	b.n	8004608 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	685a      	ldr	r2, [r3, #4]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80045da:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045ea:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2220      	movs	r2, #32
 80045f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f7ff fea8 	bl	8004358 <HAL_I2C_MasterTxCpltCallback>
}
 8004608:	bf00      	nop
 800460a:	3710      	adds	r7, #16
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800461e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004624:	2b00      	cmp	r3, #0
 8004626:	d11d      	bne.n	8004664 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800462c:	2b01      	cmp	r3, #1
 800462e:	d10b      	bne.n	8004648 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004634:	b2da      	uxtb	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004640:	1c9a      	adds	r2, r3, #2
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004646:	e06e      	b.n	8004726 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800464c:	b29b      	uxth	r3, r3
 800464e:	121b      	asrs	r3, r3, #8
 8004650:	b2da      	uxtb	r2, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800465c:	1c5a      	adds	r2, r3, #1
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004662:	e060      	b.n	8004726 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004668:	2b01      	cmp	r3, #1
 800466a:	d10b      	bne.n	8004684 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004670:	b2da      	uxtb	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800467c:	1c5a      	adds	r2, r3, #1
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004682:	e050      	b.n	8004726 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004688:	2b02      	cmp	r3, #2
 800468a:	d14c      	bne.n	8004726 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800468c:	7bfb      	ldrb	r3, [r7, #15]
 800468e:	2b22      	cmp	r3, #34	; 0x22
 8004690:	d108      	bne.n	80046a4 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046a0:	601a      	str	r2, [r3, #0]
}
 80046a2:	e040      	b.n	8004726 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d015      	beq.n	80046da <I2C_MemoryTransmit_TXE_BTF+0xca>
 80046ae:	7bfb      	ldrb	r3, [r7, #15]
 80046b0:	2b21      	cmp	r3, #33	; 0x21
 80046b2:	d112      	bne.n	80046da <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b8:	781a      	ldrb	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c4:	1c5a      	adds	r2, r3, #1
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	3b01      	subs	r3, #1
 80046d2:	b29a      	uxth	r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80046d8:	e025      	b.n	8004726 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046de:	b29b      	uxth	r3, r3
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d120      	bne.n	8004726 <I2C_MemoryTransmit_TXE_BTF+0x116>
 80046e4:	7bfb      	ldrb	r3, [r7, #15]
 80046e6:	2b21      	cmp	r3, #33	; 0x21
 80046e8:	d11d      	bne.n	8004726 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	685a      	ldr	r2, [r3, #4]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80046f8:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004708:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2220      	movs	r2, #32
 8004714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f00c ffff 	bl	8011724 <HAL_I2C_MemTxCpltCallback>
}
 8004726:	bf00      	nop
 8004728:	3710      	adds	r7, #16
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}

0800472e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800472e:	b580      	push	{r7, lr}
 8004730:	b084      	sub	sp, #16
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b22      	cmp	r3, #34	; 0x22
 8004740:	f040 80a2 	bne.w	8004888 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004748:	b29b      	uxth	r3, r3
 800474a:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2b03      	cmp	r3, #3
 8004750:	d921      	bls.n	8004796 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	691a      	ldr	r2, [r3, #16]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475c:	b2d2      	uxtb	r2, r2
 800475e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004764:	1c5a      	adds	r2, r3, #1
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800476e:	b29b      	uxth	r3, r3
 8004770:	3b01      	subs	r3, #1
 8004772:	b29a      	uxth	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800477c:	b29b      	uxth	r3, r3
 800477e:	2b03      	cmp	r3, #3
 8004780:	f040 8082 	bne.w	8004888 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	685a      	ldr	r2, [r3, #4]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004792:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004794:	e078      	b.n	8004888 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479a:	2b02      	cmp	r3, #2
 800479c:	d074      	beq.n	8004888 <I2C_MasterReceive_RXNE+0x15a>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d002      	beq.n	80047aa <I2C_MasterReceive_RXNE+0x7c>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d16e      	bne.n	8004888 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f001 faee 	bl	8005d8c <I2C_WaitOnSTOPRequestThroughIT>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d142      	bne.n	800483c <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047c4:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	685a      	ldr	r2, [r3, #4]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80047d4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	691a      	ldr	r2, [r3, #16]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e0:	b2d2      	uxtb	r2, r2
 80047e2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e8:	1c5a      	adds	r2, r3, #1
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	3b01      	subs	r3, #1
 80047f6:	b29a      	uxth	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2220      	movs	r2, #32
 8004800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800480a:	b2db      	uxtb	r3, r3
 800480c:	2b40      	cmp	r3, #64	; 0x40
 800480e:	d10a      	bne.n	8004826 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f00c ffc8 	bl	80117b4 <HAL_I2C_MemRxCpltCallback>
}
 8004824:	e030      	b.n	8004888 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2212      	movs	r2, #18
 8004832:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f7ff fd99 	bl	800436c <HAL_I2C_MasterRxCpltCallback>
}
 800483a:	e025      	b.n	8004888 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	685a      	ldr	r2, [r3, #4]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800484a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	691a      	ldr	r2, [r3, #16]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004856:	b2d2      	uxtb	r2, r2
 8004858:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485e:	1c5a      	adds	r2, r3, #1
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004868:	b29b      	uxth	r3, r3
 800486a:	3b01      	subs	r3, #1
 800486c:	b29a      	uxth	r2, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2220      	movs	r2, #32
 8004876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f00c ffde 	bl	8011844 <HAL_I2C_ErrorCallback>
}
 8004888:	bf00      	nop
 800488a:	3710      	adds	r7, #16
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}

08004890 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	2b04      	cmp	r3, #4
 80048a6:	d11b      	bne.n	80048e0 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	685a      	ldr	r2, [r3, #4]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048b6:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	691a      	ldr	r2, [r3, #16]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c2:	b2d2      	uxtb	r2, r2
 80048c4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ca:	1c5a      	adds	r2, r3, #1
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	3b01      	subs	r3, #1
 80048d8:	b29a      	uxth	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80048de:	e0bd      	b.n	8004a5c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	2b03      	cmp	r3, #3
 80048e8:	d129      	bne.n	800493e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	685a      	ldr	r2, [r3, #4]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048f8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2b04      	cmp	r3, #4
 80048fe:	d00a      	beq.n	8004916 <I2C_MasterReceive_BTF+0x86>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2b02      	cmp	r3, #2
 8004904:	d007      	beq.n	8004916 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004914:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	691a      	ldr	r2, [r3, #16]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004920:	b2d2      	uxtb	r2, r2
 8004922:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004928:	1c5a      	adds	r2, r3, #1
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004932:	b29b      	uxth	r3, r3
 8004934:	3b01      	subs	r3, #1
 8004936:	b29a      	uxth	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800493c:	e08e      	b.n	8004a5c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004942:	b29b      	uxth	r3, r3
 8004944:	2b02      	cmp	r3, #2
 8004946:	d176      	bne.n	8004a36 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2b01      	cmp	r3, #1
 800494c:	d002      	beq.n	8004954 <I2C_MasterReceive_BTF+0xc4>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2b10      	cmp	r3, #16
 8004952:	d108      	bne.n	8004966 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004962:	601a      	str	r2, [r3, #0]
 8004964:	e019      	b.n	800499a <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2b04      	cmp	r3, #4
 800496a:	d002      	beq.n	8004972 <I2C_MasterReceive_BTF+0xe2>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2b02      	cmp	r3, #2
 8004970:	d108      	bne.n	8004984 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004980:	601a      	str	r2, [r3, #0]
 8004982:	e00a      	b.n	800499a <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2b10      	cmp	r3, #16
 8004988:	d007      	beq.n	800499a <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004998:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	691a      	ldr	r2, [r3, #16]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a4:	b2d2      	uxtb	r2, r2
 80049a6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ac:	1c5a      	adds	r2, r3, #1
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	3b01      	subs	r3, #1
 80049ba:	b29a      	uxth	r2, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	691a      	ldr	r2, [r3, #16]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ca:	b2d2      	uxtb	r2, r2
 80049cc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d2:	1c5a      	adds	r2, r3, #1
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049dc:	b29b      	uxth	r3, r3
 80049de:	3b01      	subs	r3, #1
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	685a      	ldr	r2, [r3, #4]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80049f4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2220      	movs	r2, #32
 80049fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	2b40      	cmp	r3, #64	; 0x40
 8004a08:	d10a      	bne.n	8004a20 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f00c fecb 	bl	80117b4 <HAL_I2C_MemRxCpltCallback>
}
 8004a1e:	e01d      	b.n	8004a5c <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2212      	movs	r2, #18
 8004a2c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f7ff fc9c 	bl	800436c <HAL_I2C_MasterRxCpltCallback>
}
 8004a34:	e012      	b.n	8004a5c <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	691a      	ldr	r2, [r3, #16]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a40:	b2d2      	uxtb	r2, r2
 8004a42:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a48:	1c5a      	adds	r2, r3, #1
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	3b01      	subs	r3, #1
 8004a56:	b29a      	uxth	r2, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004a5c:	bf00      	nop
 8004a5e:	3710      	adds	r7, #16
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	2b40      	cmp	r3, #64	; 0x40
 8004a76:	d117      	bne.n	8004aa8 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d109      	bne.n	8004a94 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	461a      	mov	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a90:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004a92:	e067      	b.n	8004b64 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	f043 0301 	orr.w	r3, r3, #1
 8004a9e:	b2da      	uxtb	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	611a      	str	r2, [r3, #16]
}
 8004aa6:	e05d      	b.n	8004b64 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	691b      	ldr	r3, [r3, #16]
 8004aac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ab0:	d133      	bne.n	8004b1a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	2b21      	cmp	r3, #33	; 0x21
 8004abc:	d109      	bne.n	8004ad2 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ace:	611a      	str	r2, [r3, #16]
 8004ad0:	e008      	b.n	8004ae4 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	f043 0301 	orr.w	r3, r3, #1
 8004adc:	b2da      	uxtb	r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d004      	beq.n	8004af6 <I2C_Master_SB+0x92>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d108      	bne.n	8004b08 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d032      	beq.n	8004b64 <I2C_Master_SB+0x100>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d02d      	beq.n	8004b64 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	685a      	ldr	r2, [r3, #4]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b16:	605a      	str	r2, [r3, #4]
}
 8004b18:	e024      	b.n	8004b64 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d10e      	bne.n	8004b40 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	11db      	asrs	r3, r3, #7
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	f003 0306 	and.w	r3, r3, #6
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	f063 030f 	orn	r3, r3, #15
 8004b36:	b2da      	uxtb	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	611a      	str	r2, [r3, #16]
}
 8004b3e:	e011      	b.n	8004b64 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d10d      	bne.n	8004b64 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	11db      	asrs	r3, r3, #7
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	f003 0306 	and.w	r3, r3, #6
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	f063 030e 	orn	r3, r3, #14
 8004b5c:	b2da      	uxtb	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	611a      	str	r2, [r3, #16]
}
 8004b64:	bf00      	nop
 8004b66:	370c      	adds	r7, #12
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b7c:	b2da      	uxtb	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d103      	bne.n	8004b94 <I2C_Master_ADD10+0x24>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d011      	beq.n	8004bb8 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d104      	bne.n	8004ba8 <I2C_Master_ADD10+0x38>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d007      	beq.n	8004bb8 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	685a      	ldr	r2, [r3, #4]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bb6:	605a      	str	r2, [r3, #4]
    }
  }
}
 8004bb8:	bf00      	nop
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b091      	sub	sp, #68	; 0x44
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bd2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bda:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be0:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	2b22      	cmp	r3, #34	; 0x22
 8004bec:	f040 8169 	bne.w	8004ec2 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d10f      	bne.n	8004c18 <I2C_Master_ADDR+0x54>
 8004bf8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004bfc:	2b40      	cmp	r3, #64	; 0x40
 8004bfe:	d10b      	bne.n	8004c18 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c00:	2300      	movs	r3, #0
 8004c02:	633b      	str	r3, [r7, #48]	; 0x30
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	633b      	str	r3, [r7, #48]	; 0x30
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	633b      	str	r3, [r7, #48]	; 0x30
 8004c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c16:	e160      	b.n	8004eda <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d11d      	bne.n	8004c5c <I2C_Master_ADDR+0x98>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004c28:	d118      	bne.n	8004c5c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	695b      	ldr	r3, [r3, #20]
 8004c34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c4e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c54:	1c5a      	adds	r2, r3, #1
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	651a      	str	r2, [r3, #80]	; 0x50
 8004c5a:	e13e      	b.n	8004eda <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d113      	bne.n	8004c8e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c66:	2300      	movs	r3, #0
 8004c68:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	695b      	ldr	r3, [r3, #20]
 8004c70:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	699b      	ldr	r3, [r3, #24]
 8004c78:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c8a:	601a      	str	r2, [r3, #0]
 8004c8c:	e115      	b.n	8004eba <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	f040 808a 	bne.w	8004dae <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c9c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ca0:	d137      	bne.n	8004d12 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cb0:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cc0:	d113      	bne.n	8004cea <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cd0:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	627b      	str	r3, [r7, #36]	; 0x24
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	695b      	ldr	r3, [r3, #20]
 8004cdc:	627b      	str	r3, [r7, #36]	; 0x24
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce8:	e0e7      	b.n	8004eba <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cea:	2300      	movs	r3, #0
 8004cec:	623b      	str	r3, [r7, #32]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	695b      	ldr	r3, [r3, #20]
 8004cf4:	623b      	str	r3, [r7, #32]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	699b      	ldr	r3, [r3, #24]
 8004cfc:	623b      	str	r3, [r7, #32]
 8004cfe:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d0e:	601a      	str	r2, [r3, #0]
 8004d10:	e0d3      	b.n	8004eba <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d14:	2b08      	cmp	r3, #8
 8004d16:	d02e      	beq.n	8004d76 <I2C_Master_ADDR+0x1b2>
 8004d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d1a:	2b20      	cmp	r3, #32
 8004d1c:	d02b      	beq.n	8004d76 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d20:	2b12      	cmp	r3, #18
 8004d22:	d102      	bne.n	8004d2a <I2C_Master_ADDR+0x166>
 8004d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d125      	bne.n	8004d76 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d2c:	2b04      	cmp	r3, #4
 8004d2e:	d00e      	beq.n	8004d4e <I2C_Master_ADDR+0x18a>
 8004d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d00b      	beq.n	8004d4e <I2C_Master_ADDR+0x18a>
 8004d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d38:	2b10      	cmp	r3, #16
 8004d3a:	d008      	beq.n	8004d4e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d4a:	601a      	str	r2, [r3, #0]
 8004d4c:	e007      	b.n	8004d5e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d5c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d5e:	2300      	movs	r3, #0
 8004d60:	61fb      	str	r3, [r7, #28]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	695b      	ldr	r3, [r3, #20]
 8004d68:	61fb      	str	r3, [r7, #28]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	699b      	ldr	r3, [r3, #24]
 8004d70:	61fb      	str	r3, [r7, #28]
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	e0a1      	b.n	8004eba <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d84:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d86:	2300      	movs	r3, #0
 8004d88:	61bb      	str	r3, [r7, #24]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	695b      	ldr	r3, [r3, #20]
 8004d90:	61bb      	str	r3, [r7, #24]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	699b      	ldr	r3, [r3, #24]
 8004d98:	61bb      	str	r3, [r7, #24]
 8004d9a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004daa:	601a      	str	r2, [r3, #0]
 8004dac:	e085      	b.n	8004eba <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d14d      	bne.n	8004e54 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dba:	2b04      	cmp	r3, #4
 8004dbc:	d016      	beq.n	8004dec <I2C_Master_ADDR+0x228>
 8004dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d013      	beq.n	8004dec <I2C_Master_ADDR+0x228>
 8004dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc6:	2b10      	cmp	r3, #16
 8004dc8:	d010      	beq.n	8004dec <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dd8:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004de8:	601a      	str	r2, [r3, #0]
 8004dea:	e007      	b.n	8004dfc <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004dfa:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e0a:	d117      	bne.n	8004e3c <I2C_Master_ADDR+0x278>
 8004e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e0e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e12:	d00b      	beq.n	8004e2c <I2C_Master_ADDR+0x268>
 8004e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d008      	beq.n	8004e2c <I2C_Master_ADDR+0x268>
 8004e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e1c:	2b08      	cmp	r3, #8
 8004e1e:	d005      	beq.n	8004e2c <I2C_Master_ADDR+0x268>
 8004e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e22:	2b10      	cmp	r3, #16
 8004e24:	d002      	beq.n	8004e2c <I2C_Master_ADDR+0x268>
 8004e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e28:	2b20      	cmp	r3, #32
 8004e2a:	d107      	bne.n	8004e3c <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	685a      	ldr	r2, [r3, #4]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e3a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	617b      	str	r3, [r7, #20]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	617b      	str	r3, [r7, #20]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	617b      	str	r3, [r7, #20]
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	e032      	b.n	8004eba <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e62:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e72:	d117      	bne.n	8004ea4 <I2C_Master_ADDR+0x2e0>
 8004e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e76:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e7a:	d00b      	beq.n	8004e94 <I2C_Master_ADDR+0x2d0>
 8004e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d008      	beq.n	8004e94 <I2C_Master_ADDR+0x2d0>
 8004e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e84:	2b08      	cmp	r3, #8
 8004e86:	d005      	beq.n	8004e94 <I2C_Master_ADDR+0x2d0>
 8004e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e8a:	2b10      	cmp	r3, #16
 8004e8c:	d002      	beq.n	8004e94 <I2C_Master_ADDR+0x2d0>
 8004e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e90:	2b20      	cmp	r3, #32
 8004e92:	d107      	bne.n	8004ea4 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	685a      	ldr	r2, [r3, #4]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ea2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	613b      	str	r3, [r7, #16]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	613b      	str	r3, [r7, #16]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	613b      	str	r3, [r7, #16]
 8004eb8:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004ec0:	e00b      	b.n	8004eda <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	60fb      	str	r3, [r7, #12]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	695b      	ldr	r3, [r3, #20]
 8004ecc:	60fb      	str	r3, [r7, #12]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	699b      	ldr	r3, [r3, #24]
 8004ed4:	60fb      	str	r3, [r7, #12]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
}
 8004ed8:	e7ff      	b.n	8004eda <I2C_Master_ADDR+0x316>
 8004eda:	bf00      	nop
 8004edc:	3744      	adds	r7, #68	; 0x44
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr

08004ee6 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	b084      	sub	sp, #16
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ef4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d02b      	beq.n	8004f58 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f04:	781a      	ldrb	r2, [r3, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f10:	1c5a      	adds	r2, r3, #1
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	3b01      	subs	r3, #1
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d114      	bne.n	8004f58 <I2C_SlaveTransmit_TXE+0x72>
 8004f2e:	7bfb      	ldrb	r3, [r7, #15]
 8004f30:	2b29      	cmp	r3, #41	; 0x29
 8004f32:	d111      	bne.n	8004f58 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	685a      	ldr	r2, [r3, #4]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f42:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2221      	movs	r2, #33	; 0x21
 8004f48:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2228      	movs	r2, #40	; 0x28
 8004f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f7ff fa14 	bl	8004380 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004f58:	bf00      	nop
 8004f5a:	3710      	adds	r7, #16
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d011      	beq.n	8004f96 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f76:	781a      	ldrb	r2, [r3, #0]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f82:	1c5a      	adds	r2, r3, #1
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004f96:	bf00      	nop
 8004f98:	370c      	adds	r7, #12
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr

08004fa2 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004fa2:	b580      	push	{r7, lr}
 8004fa4:	b084      	sub	sp, #16
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fb0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d02c      	beq.n	8005016 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	691a      	ldr	r2, [r3, #16]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc6:	b2d2      	uxtb	r2, r2
 8004fc8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fce:	1c5a      	adds	r2, r3, #1
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	3b01      	subs	r3, #1
 8004fdc:	b29a      	uxth	r2, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d114      	bne.n	8005016 <I2C_SlaveReceive_RXNE+0x74>
 8004fec:	7bfb      	ldrb	r3, [r7, #15]
 8004fee:	2b2a      	cmp	r3, #42	; 0x2a
 8004ff0:	d111      	bne.n	8005016 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	685a      	ldr	r2, [r3, #4]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005000:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2222      	movs	r2, #34	; 0x22
 8005006:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2228      	movs	r2, #40	; 0x28
 800500c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f7ff f9bf 	bl	8004394 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005016:	bf00      	nop
 8005018:	3710      	adds	r7, #16
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}

0800501e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800501e:	b480      	push	{r7}
 8005020:	b083      	sub	sp, #12
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800502a:	b29b      	uxth	r3, r3
 800502c:	2b00      	cmp	r3, #0
 800502e:	d012      	beq.n	8005056 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	691a      	ldr	r2, [r3, #16]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503a:	b2d2      	uxtb	r2, r2
 800503c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005042:	1c5a      	adds	r2, r3, #1
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800504c:	b29b      	uxth	r3, r3
 800504e:	3b01      	subs	r3, #1
 8005050:	b29a      	uxth	r2, r3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005056:	bf00      	nop
 8005058:	370c      	adds	r7, #12
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr

08005062 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005062:	b580      	push	{r7, lr}
 8005064:	b084      	sub	sp, #16
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
 800506a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800506c:	2300      	movs	r3, #0
 800506e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005076:	b2db      	uxtb	r3, r3
 8005078:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800507c:	2b28      	cmp	r3, #40	; 0x28
 800507e:	d127      	bne.n	80050d0 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	685a      	ldr	r2, [r3, #4]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800508e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	089b      	lsrs	r3, r3, #2
 8005094:	f003 0301 	and.w	r3, r3, #1
 8005098:	2b00      	cmp	r3, #0
 800509a:	d101      	bne.n	80050a0 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800509c:	2301      	movs	r3, #1
 800509e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	09db      	lsrs	r3, r3, #7
 80050a4:	f003 0301 	and.w	r3, r3, #1
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d103      	bne.n	80050b4 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	81bb      	strh	r3, [r7, #12]
 80050b2:	e002      	b.n	80050ba <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	699b      	ldr	r3, [r3, #24]
 80050b8:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80050c2:	89ba      	ldrh	r2, [r7, #12]
 80050c4:	7bfb      	ldrb	r3, [r7, #15]
 80050c6:	4619      	mov	r1, r3
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f7ff f96d 	bl	80043a8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80050ce:	e008      	b.n	80050e2 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f06f 0202 	mvn.w	r2, #2
 80050d8:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80050e2:	bf00      	nop
 80050e4:	3710      	adds	r7, #16
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
	...

080050ec <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050fa:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	685a      	ldr	r2, [r3, #4]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800510a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800510c:	2300      	movs	r3, #0
 800510e:	60bb      	str	r3, [r7, #8]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	60bb      	str	r3, [r7, #8]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f042 0201 	orr.w	r2, r2, #1
 8005126:	601a      	str	r2, [r3, #0]
 8005128:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005138:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005144:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005148:	d172      	bne.n	8005230 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800514a:	7bfb      	ldrb	r3, [r7, #15]
 800514c:	2b22      	cmp	r3, #34	; 0x22
 800514e:	d002      	beq.n	8005156 <I2C_Slave_STOPF+0x6a>
 8005150:	7bfb      	ldrb	r3, [r7, #15]
 8005152:	2b2a      	cmp	r3, #42	; 0x2a
 8005154:	d135      	bne.n	80051c2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	b29a      	uxth	r2, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005168:	b29b      	uxth	r3, r3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d005      	beq.n	800517a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005172:	f043 0204 	orr.w	r2, r3, #4
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	685a      	ldr	r2, [r3, #4]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005188:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800518e:	4618      	mov	r0, r3
 8005190:	f7fd fdea 	bl	8002d68 <HAL_DMA_GetState>
 8005194:	4603      	mov	r3, r0
 8005196:	2b01      	cmp	r3, #1
 8005198:	d049      	beq.n	800522e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519e:	4a69      	ldr	r2, [pc, #420]	; (8005344 <I2C_Slave_STOPF+0x258>)
 80051a0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7fd fc32 	bl	8002a10 <HAL_DMA_Abort_IT>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d03d      	beq.n	800522e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80051bc:	4610      	mov	r0, r2
 80051be:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80051c0:	e035      	b.n	800522e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	b29a      	uxth	r2, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d005      	beq.n	80051e6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051de:	f043 0204 	orr.w	r2, r3, #4
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	685a      	ldr	r2, [r3, #4]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051f4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051fa:	4618      	mov	r0, r3
 80051fc:	f7fd fdb4 	bl	8002d68 <HAL_DMA_GetState>
 8005200:	4603      	mov	r3, r0
 8005202:	2b01      	cmp	r3, #1
 8005204:	d014      	beq.n	8005230 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800520a:	4a4e      	ldr	r2, [pc, #312]	; (8005344 <I2C_Slave_STOPF+0x258>)
 800520c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005212:	4618      	mov	r0, r3
 8005214:	f7fd fbfc 	bl	8002a10 <HAL_DMA_Abort_IT>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d008      	beq.n	8005230 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005228:	4610      	mov	r0, r2
 800522a:	4798      	blx	r3
 800522c:	e000      	b.n	8005230 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800522e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005234:	b29b      	uxth	r3, r3
 8005236:	2b00      	cmp	r3, #0
 8005238:	d03e      	beq.n	80052b8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	695b      	ldr	r3, [r3, #20]
 8005240:	f003 0304 	and.w	r3, r3, #4
 8005244:	2b04      	cmp	r3, #4
 8005246:	d112      	bne.n	800526e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	691a      	ldr	r2, [r3, #16]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005252:	b2d2      	uxtb	r2, r2
 8005254:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525a:	1c5a      	adds	r2, r3, #1
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005264:	b29b      	uxth	r3, r3
 8005266:	3b01      	subs	r3, #1
 8005268:	b29a      	uxth	r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	695b      	ldr	r3, [r3, #20]
 8005274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005278:	2b40      	cmp	r3, #64	; 0x40
 800527a:	d112      	bne.n	80052a2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	691a      	ldr	r2, [r3, #16]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005286:	b2d2      	uxtb	r2, r2
 8005288:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528e:	1c5a      	adds	r2, r3, #1
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005298:	b29b      	uxth	r3, r3
 800529a:	3b01      	subs	r3, #1
 800529c:	b29a      	uxth	r2, r3
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d005      	beq.n	80052b8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b0:	f043 0204 	orr.w	r2, r3, #4
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d003      	beq.n	80052c8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f000 f8b3 	bl	800542c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80052c6:	e039      	b.n	800533c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80052c8:	7bfb      	ldrb	r3, [r7, #15]
 80052ca:	2b2a      	cmp	r3, #42	; 0x2a
 80052cc:	d109      	bne.n	80052e2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2228      	movs	r2, #40	; 0x28
 80052d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f7ff f859 	bl	8004394 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	2b28      	cmp	r3, #40	; 0x28
 80052ec:	d111      	bne.n	8005312 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a15      	ldr	r2, [pc, #84]	; (8005348 <I2C_Slave_STOPF+0x25c>)
 80052f2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2220      	movs	r2, #32
 80052fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f7ff f85a 	bl	80043c4 <HAL_I2C_ListenCpltCallback>
}
 8005310:	e014      	b.n	800533c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005316:	2b22      	cmp	r3, #34	; 0x22
 8005318:	d002      	beq.n	8005320 <I2C_Slave_STOPF+0x234>
 800531a:	7bfb      	ldrb	r3, [r7, #15]
 800531c:	2b22      	cmp	r3, #34	; 0x22
 800531e:	d10d      	bne.n	800533c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2220      	movs	r2, #32
 800532a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f7ff f82c 	bl	8004394 <HAL_I2C_SlaveRxCpltCallback>
}
 800533c:	bf00      	nop
 800533e:	3710      	adds	r7, #16
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}
 8005344:	0800598d 	.word	0x0800598d
 8005348:	ffff0000 	.word	0xffff0000

0800534c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800535a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005360:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	2b08      	cmp	r3, #8
 8005366:	d002      	beq.n	800536e <I2C_Slave_AF+0x22>
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	2b20      	cmp	r3, #32
 800536c:	d129      	bne.n	80053c2 <I2C_Slave_AF+0x76>
 800536e:	7bfb      	ldrb	r3, [r7, #15]
 8005370:	2b28      	cmp	r3, #40	; 0x28
 8005372:	d126      	bne.n	80053c2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4a2c      	ldr	r2, [pc, #176]	; (8005428 <I2C_Slave_AF+0xdc>)
 8005378:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	685a      	ldr	r2, [r3, #4]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005388:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005392:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053a2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2220      	movs	r2, #32
 80053ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f7ff f802 	bl	80043c4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80053c0:	e02e      	b.n	8005420 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80053c2:	7bfb      	ldrb	r3, [r7, #15]
 80053c4:	2b21      	cmp	r3, #33	; 0x21
 80053c6:	d126      	bne.n	8005416 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a17      	ldr	r2, [pc, #92]	; (8005428 <I2C_Slave_AF+0xdc>)
 80053cc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2221      	movs	r2, #33	; 0x21
 80053d2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2220      	movs	r2, #32
 80053d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	685a      	ldr	r2, [r3, #4]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80053f2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80053fc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800540c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f7fe ffb6 	bl	8004380 <HAL_I2C_SlaveTxCpltCallback>
}
 8005414:	e004      	b.n	8005420 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800541e:	615a      	str	r2, [r3, #20]
}
 8005420:	bf00      	nop
 8005422:	3710      	adds	r7, #16
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}
 8005428:	ffff0000 	.word	0xffff0000

0800542c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800543a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005442:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005444:	7bbb      	ldrb	r3, [r7, #14]
 8005446:	2b10      	cmp	r3, #16
 8005448:	d002      	beq.n	8005450 <I2C_ITError+0x24>
 800544a:	7bbb      	ldrb	r3, [r7, #14]
 800544c:	2b40      	cmp	r3, #64	; 0x40
 800544e:	d10a      	bne.n	8005466 <I2C_ITError+0x3a>
 8005450:	7bfb      	ldrb	r3, [r7, #15]
 8005452:	2b22      	cmp	r3, #34	; 0x22
 8005454:	d107      	bne.n	8005466 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005464:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005466:	7bfb      	ldrb	r3, [r7, #15]
 8005468:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800546c:	2b28      	cmp	r3, #40	; 0x28
 800546e:	d107      	bne.n	8005480 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2228      	movs	r2, #40	; 0x28
 800547a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800547e:	e015      	b.n	80054ac <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800548a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800548e:	d00a      	beq.n	80054a6 <I2C_ITError+0x7a>
 8005490:	7bfb      	ldrb	r3, [r7, #15]
 8005492:	2b60      	cmp	r3, #96	; 0x60
 8005494:	d007      	beq.n	80054a6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2220      	movs	r2, #32
 800549a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054ba:	d162      	bne.n	8005582 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	685a      	ldr	r2, [r3, #4]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054ca:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d020      	beq.n	800551c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054de:	4a6a      	ldr	r2, [pc, #424]	; (8005688 <I2C_ITError+0x25c>)
 80054e0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054e6:	4618      	mov	r0, r3
 80054e8:	f7fd fa92 	bl	8002a10 <HAL_DMA_Abort_IT>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	f000 8089 	beq.w	8005606 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f022 0201 	bic.w	r2, r2, #1
 8005502:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2220      	movs	r2, #32
 8005508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005516:	4610      	mov	r0, r2
 8005518:	4798      	blx	r3
 800551a:	e074      	b.n	8005606 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005520:	4a59      	ldr	r2, [pc, #356]	; (8005688 <I2C_ITError+0x25c>)
 8005522:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005528:	4618      	mov	r0, r3
 800552a:	f7fd fa71 	bl	8002a10 <HAL_DMA_Abort_IT>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d068      	beq.n	8005606 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	695b      	ldr	r3, [r3, #20]
 800553a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800553e:	2b40      	cmp	r3, #64	; 0x40
 8005540:	d10b      	bne.n	800555a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	691a      	ldr	r2, [r3, #16]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554c:	b2d2      	uxtb	r2, r2
 800554e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005554:	1c5a      	adds	r2, r3, #1
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f022 0201 	bic.w	r2, r2, #1
 8005568:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2220      	movs	r2, #32
 800556e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005576:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800557c:	4610      	mov	r0, r2
 800557e:	4798      	blx	r3
 8005580:	e041      	b.n	8005606 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005588:	b2db      	uxtb	r3, r3
 800558a:	2b60      	cmp	r3, #96	; 0x60
 800558c:	d125      	bne.n	80055da <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2220      	movs	r2, #32
 8005592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a6:	2b40      	cmp	r3, #64	; 0x40
 80055a8:	d10b      	bne.n	80055c2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	691a      	ldr	r2, [r3, #16]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b4:	b2d2      	uxtb	r2, r2
 80055b6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055bc:	1c5a      	adds	r2, r3, #1
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f022 0201 	bic.w	r2, r2, #1
 80055d0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f7fe ff00 	bl	80043d8 <HAL_I2C_AbortCpltCallback>
 80055d8:	e015      	b.n	8005606 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	695b      	ldr	r3, [r3, #20]
 80055e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055e4:	2b40      	cmp	r3, #64	; 0x40
 80055e6:	d10b      	bne.n	8005600 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	691a      	ldr	r2, [r3, #16]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f2:	b2d2      	uxtb	r2, r2
 80055f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fa:	1c5a      	adds	r2, r3, #1
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f00c f91f 	bl	8011844 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	f003 0301 	and.w	r3, r3, #1
 8005612:	2b00      	cmp	r3, #0
 8005614:	d10e      	bne.n	8005634 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800561c:	2b00      	cmp	r3, #0
 800561e:	d109      	bne.n	8005634 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005626:	2b00      	cmp	r3, #0
 8005628:	d104      	bne.n	8005634 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005630:	2b00      	cmp	r3, #0
 8005632:	d007      	beq.n	8005644 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	685a      	ldr	r2, [r3, #4]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005642:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800564a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005650:	f003 0304 	and.w	r3, r3, #4
 8005654:	2b04      	cmp	r3, #4
 8005656:	d113      	bne.n	8005680 <I2C_ITError+0x254>
 8005658:	7bfb      	ldrb	r3, [r7, #15]
 800565a:	2b28      	cmp	r3, #40	; 0x28
 800565c:	d110      	bne.n	8005680 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a0a      	ldr	r2, [pc, #40]	; (800568c <I2C_ITError+0x260>)
 8005662:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2220      	movs	r2, #32
 800566e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f7fe fea2 	bl	80043c4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005680:	bf00      	nop
 8005682:	3710      	adds	r7, #16
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}
 8005688:	0800598d 	.word	0x0800598d
 800568c:	ffff0000 	.word	0xffff0000

08005690 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b088      	sub	sp, #32
 8005694:	af02      	add	r7, sp, #8
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	4608      	mov	r0, r1
 800569a:	4611      	mov	r1, r2
 800569c:	461a      	mov	r2, r3
 800569e:	4603      	mov	r3, r0
 80056a0:	817b      	strh	r3, [r7, #10]
 80056a2:	460b      	mov	r3, r1
 80056a4:	813b      	strh	r3, [r7, #8]
 80056a6:	4613      	mov	r3, r2
 80056a8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056bc:	9300      	str	r3, [sp, #0]
 80056be:	6a3b      	ldr	r3, [r7, #32]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80056c6:	68f8      	ldr	r0, [r7, #12]
 80056c8:	f000 fa08 	bl	8005adc <I2C_WaitOnFlagUntilTimeout>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d00d      	beq.n	80056ee <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056e0:	d103      	bne.n	80056ea <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056e8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e05f      	b.n	80057ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80056ee:	897b      	ldrh	r3, [r7, #10]
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	461a      	mov	r2, r3
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80056fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80056fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005700:	6a3a      	ldr	r2, [r7, #32]
 8005702:	492d      	ldr	r1, [pc, #180]	; (80057b8 <I2C_RequestMemoryWrite+0x128>)
 8005704:	68f8      	ldr	r0, [r7, #12]
 8005706:	f000 fa40 	bl	8005b8a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800570a:	4603      	mov	r3, r0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d001      	beq.n	8005714 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	e04c      	b.n	80057ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005714:	2300      	movs	r3, #0
 8005716:	617b      	str	r3, [r7, #20]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	617b      	str	r3, [r7, #20]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	617b      	str	r3, [r7, #20]
 8005728:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800572a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800572c:	6a39      	ldr	r1, [r7, #32]
 800572e:	68f8      	ldr	r0, [r7, #12]
 8005730:	f000 faaa 	bl	8005c88 <I2C_WaitOnTXEFlagUntilTimeout>
 8005734:	4603      	mov	r3, r0
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00d      	beq.n	8005756 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573e:	2b04      	cmp	r3, #4
 8005740:	d107      	bne.n	8005752 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005750:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e02b      	b.n	80057ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005756:	88fb      	ldrh	r3, [r7, #6]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d105      	bne.n	8005768 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800575c:	893b      	ldrh	r3, [r7, #8]
 800575e:	b2da      	uxtb	r2, r3
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	611a      	str	r2, [r3, #16]
 8005766:	e021      	b.n	80057ac <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005768:	893b      	ldrh	r3, [r7, #8]
 800576a:	0a1b      	lsrs	r3, r3, #8
 800576c:	b29b      	uxth	r3, r3
 800576e:	b2da      	uxtb	r2, r3
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005778:	6a39      	ldr	r1, [r7, #32]
 800577a:	68f8      	ldr	r0, [r7, #12]
 800577c:	f000 fa84 	bl	8005c88 <I2C_WaitOnTXEFlagUntilTimeout>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00d      	beq.n	80057a2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578a:	2b04      	cmp	r3, #4
 800578c:	d107      	bne.n	800579e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800579c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e005      	b.n	80057ae <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80057a2:	893b      	ldrh	r3, [r7, #8]
 80057a4:	b2da      	uxtb	r2, r3
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3718      	adds	r7, #24
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	00010002 	.word	0x00010002

080057bc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b088      	sub	sp, #32
 80057c0:	af02      	add	r7, sp, #8
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	4608      	mov	r0, r1
 80057c6:	4611      	mov	r1, r2
 80057c8:	461a      	mov	r2, r3
 80057ca:	4603      	mov	r3, r0
 80057cc:	817b      	strh	r3, [r7, #10]
 80057ce:	460b      	mov	r3, r1
 80057d0:	813b      	strh	r3, [r7, #8]
 80057d2:	4613      	mov	r3, r2
 80057d4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80057e4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80057f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f8:	9300      	str	r3, [sp, #0]
 80057fa:	6a3b      	ldr	r3, [r7, #32]
 80057fc:	2200      	movs	r2, #0
 80057fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005802:	68f8      	ldr	r0, [r7, #12]
 8005804:	f000 f96a 	bl	8005adc <I2C_WaitOnFlagUntilTimeout>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00d      	beq.n	800582a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005818:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800581c:	d103      	bne.n	8005826 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005824:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005826:	2303      	movs	r3, #3
 8005828:	e0aa      	b.n	8005980 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800582a:	897b      	ldrh	r3, [r7, #10]
 800582c:	b2db      	uxtb	r3, r3
 800582e:	461a      	mov	r2, r3
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005838:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800583a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583c:	6a3a      	ldr	r2, [r7, #32]
 800583e:	4952      	ldr	r1, [pc, #328]	; (8005988 <I2C_RequestMemoryRead+0x1cc>)
 8005840:	68f8      	ldr	r0, [r7, #12]
 8005842:	f000 f9a2 	bl	8005b8a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005846:	4603      	mov	r3, r0
 8005848:	2b00      	cmp	r3, #0
 800584a:	d001      	beq.n	8005850 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e097      	b.n	8005980 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005850:	2300      	movs	r3, #0
 8005852:	617b      	str	r3, [r7, #20]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	695b      	ldr	r3, [r3, #20]
 800585a:	617b      	str	r3, [r7, #20]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	699b      	ldr	r3, [r3, #24]
 8005862:	617b      	str	r3, [r7, #20]
 8005864:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005868:	6a39      	ldr	r1, [r7, #32]
 800586a:	68f8      	ldr	r0, [r7, #12]
 800586c:	f000 fa0c 	bl	8005c88 <I2C_WaitOnTXEFlagUntilTimeout>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d00d      	beq.n	8005892 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587a:	2b04      	cmp	r3, #4
 800587c:	d107      	bne.n	800588e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800588c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e076      	b.n	8005980 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005892:	88fb      	ldrh	r3, [r7, #6]
 8005894:	2b01      	cmp	r3, #1
 8005896:	d105      	bne.n	80058a4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005898:	893b      	ldrh	r3, [r7, #8]
 800589a:	b2da      	uxtb	r2, r3
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	611a      	str	r2, [r3, #16]
 80058a2:	e021      	b.n	80058e8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80058a4:	893b      	ldrh	r3, [r7, #8]
 80058a6:	0a1b      	lsrs	r3, r3, #8
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	b2da      	uxtb	r2, r3
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058b4:	6a39      	ldr	r1, [r7, #32]
 80058b6:	68f8      	ldr	r0, [r7, #12]
 80058b8:	f000 f9e6 	bl	8005c88 <I2C_WaitOnTXEFlagUntilTimeout>
 80058bc:	4603      	mov	r3, r0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00d      	beq.n	80058de <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c6:	2b04      	cmp	r3, #4
 80058c8:	d107      	bne.n	80058da <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e050      	b.n	8005980 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80058de:	893b      	ldrh	r3, [r7, #8]
 80058e0:	b2da      	uxtb	r2, r3
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058ea:	6a39      	ldr	r1, [r7, #32]
 80058ec:	68f8      	ldr	r0, [r7, #12]
 80058ee:	f000 f9cb 	bl	8005c88 <I2C_WaitOnTXEFlagUntilTimeout>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d00d      	beq.n	8005914 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fc:	2b04      	cmp	r3, #4
 80058fe:	d107      	bne.n	8005910 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800590e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	e035      	b.n	8005980 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005922:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005926:	9300      	str	r3, [sp, #0]
 8005928:	6a3b      	ldr	r3, [r7, #32]
 800592a:	2200      	movs	r2, #0
 800592c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005930:	68f8      	ldr	r0, [r7, #12]
 8005932:	f000 f8d3 	bl	8005adc <I2C_WaitOnFlagUntilTimeout>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d00d      	beq.n	8005958 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005946:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800594a:	d103      	bne.n	8005954 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005952:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005954:	2303      	movs	r3, #3
 8005956:	e013      	b.n	8005980 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005958:	897b      	ldrh	r3, [r7, #10]
 800595a:	b2db      	uxtb	r3, r3
 800595c:	f043 0301 	orr.w	r3, r3, #1
 8005960:	b2da      	uxtb	r2, r3
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596a:	6a3a      	ldr	r2, [r7, #32]
 800596c:	4906      	ldr	r1, [pc, #24]	; (8005988 <I2C_RequestMemoryRead+0x1cc>)
 800596e:	68f8      	ldr	r0, [r7, #12]
 8005970:	f000 f90b 	bl	8005b8a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d001      	beq.n	800597e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e000      	b.n	8005980 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800597e:	2300      	movs	r3, #0
}
 8005980:	4618      	mov	r0, r3
 8005982:	3718      	adds	r7, #24
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}
 8005988:	00010002 	.word	0x00010002

0800598c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b086      	sub	sp, #24
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005994:	2300      	movs	r3, #0
 8005996:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059a4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80059a6:	4b4b      	ldr	r3, [pc, #300]	; (8005ad4 <I2C_DMAAbort+0x148>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	08db      	lsrs	r3, r3, #3
 80059ac:	4a4a      	ldr	r2, [pc, #296]	; (8005ad8 <I2C_DMAAbort+0x14c>)
 80059ae:	fba2 2303 	umull	r2, r3, r2, r3
 80059b2:	0a1a      	lsrs	r2, r3, #8
 80059b4:	4613      	mov	r3, r2
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	4413      	add	r3, r2
 80059ba:	00da      	lsls	r2, r3, #3
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d106      	bne.n	80059d4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ca:	f043 0220 	orr.w	r2, r3, #32
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80059d2:	e00a      	b.n	80059ea <I2C_DMAAbort+0x5e>
    }
    count--;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	3b01      	subs	r3, #1
 80059d8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059e8:	d0ea      	beq.n	80059c0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d003      	beq.n	80059fa <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059f6:	2200      	movs	r2, #0
 80059f8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d003      	beq.n	8005a0a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a06:	2200      	movs	r2, #0
 8005a08:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a18:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d003      	beq.n	8005a30 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d003      	beq.n	8005a40 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f022 0201 	bic.w	r2, r2, #1
 8005a4e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	2b60      	cmp	r3, #96	; 0x60
 8005a5a:	d10e      	bne.n	8005a7a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	2220      	movs	r2, #32
 8005a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005a72:	6978      	ldr	r0, [r7, #20]
 8005a74:	f7fe fcb0 	bl	80043d8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005a78:	e027      	b.n	8005aca <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005a7a:	7cfb      	ldrb	r3, [r7, #19]
 8005a7c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005a80:	2b28      	cmp	r3, #40	; 0x28
 8005a82:	d117      	bne.n	8005ab4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f042 0201 	orr.w	r2, r2, #1
 8005a92:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005aa2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	2228      	movs	r2, #40	; 0x28
 8005aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005ab2:	e007      	b.n	8005ac4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	2220      	movs	r2, #32
 8005ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005ac4:	6978      	ldr	r0, [r7, #20]
 8005ac6:	f00b febd 	bl	8011844 <HAL_I2C_ErrorCallback>
}
 8005aca:	bf00      	nop
 8005acc:	3718      	adds	r7, #24
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	20000000 	.word	0x20000000
 8005ad8:	14f8b589 	.word	0x14f8b589

08005adc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	603b      	str	r3, [r7, #0]
 8005ae8:	4613      	mov	r3, r2
 8005aea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005aec:	e025      	b.n	8005b3a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005af4:	d021      	beq.n	8005b3a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005af6:	f7fc f99f 	bl	8001e38 <HAL_GetTick>
 8005afa:	4602      	mov	r2, r0
 8005afc:	69bb      	ldr	r3, [r7, #24]
 8005afe:	1ad3      	subs	r3, r2, r3
 8005b00:	683a      	ldr	r2, [r7, #0]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d302      	bcc.n	8005b0c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d116      	bne.n	8005b3a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2220      	movs	r2, #32
 8005b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b26:	f043 0220 	orr.w	r2, r3, #32
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e023      	b.n	8005b82 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	0c1b      	lsrs	r3, r3, #16
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d10d      	bne.n	8005b60 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	695b      	ldr	r3, [r3, #20]
 8005b4a:	43da      	mvns	r2, r3
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	4013      	ands	r3, r2
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	bf0c      	ite	eq
 8005b56:	2301      	moveq	r3, #1
 8005b58:	2300      	movne	r3, #0
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	e00c      	b.n	8005b7a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	699b      	ldr	r3, [r3, #24]
 8005b66:	43da      	mvns	r2, r3
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	bf0c      	ite	eq
 8005b72:	2301      	moveq	r3, #1
 8005b74:	2300      	movne	r3, #0
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	461a      	mov	r2, r3
 8005b7a:	79fb      	ldrb	r3, [r7, #7]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d0b6      	beq.n	8005aee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3710      	adds	r7, #16
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}

08005b8a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005b8a:	b580      	push	{r7, lr}
 8005b8c:	b084      	sub	sp, #16
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	60f8      	str	r0, [r7, #12]
 8005b92:	60b9      	str	r1, [r7, #8]
 8005b94:	607a      	str	r2, [r7, #4]
 8005b96:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b98:	e051      	b.n	8005c3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	695b      	ldr	r3, [r3, #20]
 8005ba0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ba4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ba8:	d123      	bne.n	8005bf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bb8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005bc2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2220      	movs	r2, #32
 8005bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bde:	f043 0204 	orr.w	r2, r3, #4
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e046      	b.n	8005c80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bf8:	d021      	beq.n	8005c3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bfa:	f7fc f91d 	bl	8001e38 <HAL_GetTick>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	1ad3      	subs	r3, r2, r3
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d302      	bcc.n	8005c10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d116      	bne.n	8005c3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2200      	movs	r2, #0
 8005c14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2220      	movs	r2, #32
 8005c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2a:	f043 0220 	orr.w	r2, r3, #32
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2200      	movs	r2, #0
 8005c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e020      	b.n	8005c80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	0c1b      	lsrs	r3, r3, #16
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d10c      	bne.n	8005c62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	695b      	ldr	r3, [r3, #20]
 8005c4e:	43da      	mvns	r2, r3
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	4013      	ands	r3, r2
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	bf14      	ite	ne
 8005c5a:	2301      	movne	r3, #1
 8005c5c:	2300      	moveq	r3, #0
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	e00b      	b.n	8005c7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	699b      	ldr	r3, [r3, #24]
 8005c68:	43da      	mvns	r2, r3
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	bf14      	ite	ne
 8005c74:	2301      	movne	r3, #1
 8005c76:	2300      	moveq	r3, #0
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d18d      	bne.n	8005b9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3710      	adds	r7, #16
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c94:	e02d      	b.n	8005cf2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005c96:	68f8      	ldr	r0, [r7, #12]
 8005c98:	f000 f900 	bl	8005e9c <I2C_IsAcknowledgeFailed>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d001      	beq.n	8005ca6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e02d      	b.n	8005d02 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cac:	d021      	beq.n	8005cf2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cae:	f7fc f8c3 	bl	8001e38 <HAL_GetTick>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	1ad3      	subs	r3, r2, r3
 8005cb8:	68ba      	ldr	r2, [r7, #8]
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d302      	bcc.n	8005cc4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d116      	bne.n	8005cf2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2220      	movs	r2, #32
 8005cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cde:	f043 0220 	orr.w	r2, r3, #32
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e007      	b.n	8005d02 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	695b      	ldr	r3, [r3, #20]
 8005cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cfc:	2b80      	cmp	r3, #128	; 0x80
 8005cfe:	d1ca      	bne.n	8005c96 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d00:	2300      	movs	r3, #0
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3710      	adds	r7, #16
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}

08005d0a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d0a:	b580      	push	{r7, lr}
 8005d0c:	b084      	sub	sp, #16
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	60f8      	str	r0, [r7, #12]
 8005d12:	60b9      	str	r1, [r7, #8]
 8005d14:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005d16:	e02d      	b.n	8005d74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d18:	68f8      	ldr	r0, [r7, #12]
 8005d1a:	f000 f8bf 	bl	8005e9c <I2C_IsAcknowledgeFailed>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d001      	beq.n	8005d28 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	e02d      	b.n	8005d84 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d2e:	d021      	beq.n	8005d74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d30:	f7fc f882 	bl	8001e38 <HAL_GetTick>
 8005d34:	4602      	mov	r2, r0
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	68ba      	ldr	r2, [r7, #8]
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d302      	bcc.n	8005d46 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d116      	bne.n	8005d74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2220      	movs	r2, #32
 8005d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d60:	f043 0220 	orr.w	r2, r3, #32
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	e007      	b.n	8005d84 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	695b      	ldr	r3, [r3, #20]
 8005d7a:	f003 0304 	and.w	r3, r3, #4
 8005d7e:	2b04      	cmp	r3, #4
 8005d80:	d1ca      	bne.n	8005d18 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d82:	2300      	movs	r3, #0
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3710      	adds	r7, #16
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b085      	sub	sp, #20
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d94:	2300      	movs	r3, #0
 8005d96:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005d98:	4b13      	ldr	r3, [pc, #76]	; (8005de8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	08db      	lsrs	r3, r3, #3
 8005d9e:	4a13      	ldr	r2, [pc, #76]	; (8005dec <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005da0:	fba2 2303 	umull	r2, r3, r2, r3
 8005da4:	0a1a      	lsrs	r2, r3, #8
 8005da6:	4613      	mov	r3, r2
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	4413      	add	r3, r2
 8005dac:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	3b01      	subs	r3, #1
 8005db2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d107      	bne.n	8005dca <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dbe:	f043 0220 	orr.w	r2, r3, #32
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e008      	b.n	8005ddc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005dd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dd8:	d0e9      	beq.n	8005dae <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3714      	adds	r7, #20
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr
 8005de8:	20000000 	.word	0x20000000
 8005dec:	14f8b589 	.word	0x14f8b589

08005df0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	60f8      	str	r0, [r7, #12]
 8005df8:	60b9      	str	r1, [r7, #8]
 8005dfa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005dfc:	e042      	b.n	8005e84 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	695b      	ldr	r3, [r3, #20]
 8005e04:	f003 0310 	and.w	r3, r3, #16
 8005e08:	2b10      	cmp	r3, #16
 8005e0a:	d119      	bne.n	8005e40 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f06f 0210 	mvn.w	r2, #16
 8005e14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2220      	movs	r2, #32
 8005e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2200      	movs	r2, #0
 8005e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e029      	b.n	8005e94 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e40:	f7fb fffa 	bl	8001e38 <HAL_GetTick>
 8005e44:	4602      	mov	r2, r0
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	68ba      	ldr	r2, [r7, #8]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d302      	bcc.n	8005e56 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d116      	bne.n	8005e84 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2220      	movs	r2, #32
 8005e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e70:	f043 0220 	orr.w	r2, r3, #32
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e007      	b.n	8005e94 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	695b      	ldr	r3, [r3, #20]
 8005e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e8e:	2b40      	cmp	r3, #64	; 0x40
 8005e90:	d1b5      	bne.n	8005dfe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005e92:	2300      	movs	r3, #0
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3710      	adds	r7, #16
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	695b      	ldr	r3, [r3, #20]
 8005eaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005eae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eb2:	d11b      	bne.n	8005eec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ebc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2220      	movs	r2, #32
 8005ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed8:	f043 0204 	orr.w	r2, r3, #4
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e000      	b.n	8005eee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005eec:	2300      	movs	r3, #0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	370c      	adds	r7, #12
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr

08005efa <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005efa:	b480      	push	{r7}
 8005efc:	b083      	sub	sp, #12
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f06:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005f0a:	d103      	bne.n	8005f14 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005f12:	e007      	b.n	8005f24 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f18:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005f1c:	d102      	bne.n	8005f24 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2208      	movs	r2, #8
 8005f22:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005f24:	bf00      	nop
 8005f26:	370c      	adds	r7, #12
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f32:	b08f      	sub	sp, #60	; 0x3c
 8005f34:	af0a      	add	r7, sp, #40	; 0x28
 8005f36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d101      	bne.n	8005f42 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e10f      	b.n	8006162 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d106      	bne.n	8005f62 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f00a fa1b 	bl	8010398 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2203      	movs	r2, #3
 8005f66:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d102      	bne.n	8005f7c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4618      	mov	r0, r3
 8005f82:	f004 f844 	bl	800a00e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	603b      	str	r3, [r7, #0]
 8005f8c:	687e      	ldr	r6, [r7, #4]
 8005f8e:	466d      	mov	r5, sp
 8005f90:	f106 0410 	add.w	r4, r6, #16
 8005f94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005f96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005f98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005f9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005f9c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005fa0:	e885 0003 	stmia.w	r5, {r0, r1}
 8005fa4:	1d33      	adds	r3, r6, #4
 8005fa6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005fa8:	6838      	ldr	r0, [r7, #0]
 8005faa:	f003 ff1b 	bl	8009de4 <USB_CoreInit>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d005      	beq.n	8005fc0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2202      	movs	r2, #2
 8005fb8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e0d0      	b.n	8006162 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2100      	movs	r1, #0
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f004 f832 	bl	800a030 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005fcc:	2300      	movs	r3, #0
 8005fce:	73fb      	strb	r3, [r7, #15]
 8005fd0:	e04a      	b.n	8006068 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005fd2:	7bfa      	ldrb	r2, [r7, #15]
 8005fd4:	6879      	ldr	r1, [r7, #4]
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	00db      	lsls	r3, r3, #3
 8005fda:	1a9b      	subs	r3, r3, r2
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	440b      	add	r3, r1
 8005fe0:	333d      	adds	r3, #61	; 0x3d
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005fe6:	7bfa      	ldrb	r2, [r7, #15]
 8005fe8:	6879      	ldr	r1, [r7, #4]
 8005fea:	4613      	mov	r3, r2
 8005fec:	00db      	lsls	r3, r3, #3
 8005fee:	1a9b      	subs	r3, r3, r2
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	440b      	add	r3, r1
 8005ff4:	333c      	adds	r3, #60	; 0x3c
 8005ff6:	7bfa      	ldrb	r2, [r7, #15]
 8005ff8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005ffa:	7bfa      	ldrb	r2, [r7, #15]
 8005ffc:	7bfb      	ldrb	r3, [r7, #15]
 8005ffe:	b298      	uxth	r0, r3
 8006000:	6879      	ldr	r1, [r7, #4]
 8006002:	4613      	mov	r3, r2
 8006004:	00db      	lsls	r3, r3, #3
 8006006:	1a9b      	subs	r3, r3, r2
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	440b      	add	r3, r1
 800600c:	3342      	adds	r3, #66	; 0x42
 800600e:	4602      	mov	r2, r0
 8006010:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006012:	7bfa      	ldrb	r2, [r7, #15]
 8006014:	6879      	ldr	r1, [r7, #4]
 8006016:	4613      	mov	r3, r2
 8006018:	00db      	lsls	r3, r3, #3
 800601a:	1a9b      	subs	r3, r3, r2
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	440b      	add	r3, r1
 8006020:	333f      	adds	r3, #63	; 0x3f
 8006022:	2200      	movs	r2, #0
 8006024:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006026:	7bfa      	ldrb	r2, [r7, #15]
 8006028:	6879      	ldr	r1, [r7, #4]
 800602a:	4613      	mov	r3, r2
 800602c:	00db      	lsls	r3, r3, #3
 800602e:	1a9b      	subs	r3, r3, r2
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	440b      	add	r3, r1
 8006034:	3344      	adds	r3, #68	; 0x44
 8006036:	2200      	movs	r2, #0
 8006038:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800603a:	7bfa      	ldrb	r2, [r7, #15]
 800603c:	6879      	ldr	r1, [r7, #4]
 800603e:	4613      	mov	r3, r2
 8006040:	00db      	lsls	r3, r3, #3
 8006042:	1a9b      	subs	r3, r3, r2
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	440b      	add	r3, r1
 8006048:	3348      	adds	r3, #72	; 0x48
 800604a:	2200      	movs	r2, #0
 800604c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800604e:	7bfa      	ldrb	r2, [r7, #15]
 8006050:	6879      	ldr	r1, [r7, #4]
 8006052:	4613      	mov	r3, r2
 8006054:	00db      	lsls	r3, r3, #3
 8006056:	1a9b      	subs	r3, r3, r2
 8006058:	009b      	lsls	r3, r3, #2
 800605a:	440b      	add	r3, r1
 800605c:	3350      	adds	r3, #80	; 0x50
 800605e:	2200      	movs	r2, #0
 8006060:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006062:	7bfb      	ldrb	r3, [r7, #15]
 8006064:	3301      	adds	r3, #1
 8006066:	73fb      	strb	r3, [r7, #15]
 8006068:	7bfa      	ldrb	r2, [r7, #15]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	429a      	cmp	r2, r3
 8006070:	d3af      	bcc.n	8005fd2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006072:	2300      	movs	r3, #0
 8006074:	73fb      	strb	r3, [r7, #15]
 8006076:	e044      	b.n	8006102 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006078:	7bfa      	ldrb	r2, [r7, #15]
 800607a:	6879      	ldr	r1, [r7, #4]
 800607c:	4613      	mov	r3, r2
 800607e:	00db      	lsls	r3, r3, #3
 8006080:	1a9b      	subs	r3, r3, r2
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	440b      	add	r3, r1
 8006086:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800608a:	2200      	movs	r2, #0
 800608c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800608e:	7bfa      	ldrb	r2, [r7, #15]
 8006090:	6879      	ldr	r1, [r7, #4]
 8006092:	4613      	mov	r3, r2
 8006094:	00db      	lsls	r3, r3, #3
 8006096:	1a9b      	subs	r3, r3, r2
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	440b      	add	r3, r1
 800609c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80060a0:	7bfa      	ldrb	r2, [r7, #15]
 80060a2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80060a4:	7bfa      	ldrb	r2, [r7, #15]
 80060a6:	6879      	ldr	r1, [r7, #4]
 80060a8:	4613      	mov	r3, r2
 80060aa:	00db      	lsls	r3, r3, #3
 80060ac:	1a9b      	subs	r3, r3, r2
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	440b      	add	r3, r1
 80060b2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80060b6:	2200      	movs	r2, #0
 80060b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80060ba:	7bfa      	ldrb	r2, [r7, #15]
 80060bc:	6879      	ldr	r1, [r7, #4]
 80060be:	4613      	mov	r3, r2
 80060c0:	00db      	lsls	r3, r3, #3
 80060c2:	1a9b      	subs	r3, r3, r2
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	440b      	add	r3, r1
 80060c8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80060cc:	2200      	movs	r2, #0
 80060ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80060d0:	7bfa      	ldrb	r2, [r7, #15]
 80060d2:	6879      	ldr	r1, [r7, #4]
 80060d4:	4613      	mov	r3, r2
 80060d6:	00db      	lsls	r3, r3, #3
 80060d8:	1a9b      	subs	r3, r3, r2
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	440b      	add	r3, r1
 80060de:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80060e2:	2200      	movs	r2, #0
 80060e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80060e6:	7bfa      	ldrb	r2, [r7, #15]
 80060e8:	6879      	ldr	r1, [r7, #4]
 80060ea:	4613      	mov	r3, r2
 80060ec:	00db      	lsls	r3, r3, #3
 80060ee:	1a9b      	subs	r3, r3, r2
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	440b      	add	r3, r1
 80060f4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80060f8:	2200      	movs	r2, #0
 80060fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80060fc:	7bfb      	ldrb	r3, [r7, #15]
 80060fe:	3301      	adds	r3, #1
 8006100:	73fb      	strb	r3, [r7, #15]
 8006102:	7bfa      	ldrb	r2, [r7, #15]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	429a      	cmp	r2, r3
 800610a:	d3b5      	bcc.n	8006078 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	603b      	str	r3, [r7, #0]
 8006112:	687e      	ldr	r6, [r7, #4]
 8006114:	466d      	mov	r5, sp
 8006116:	f106 0410 	add.w	r4, r6, #16
 800611a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800611c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800611e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006120:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006122:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006126:	e885 0003 	stmia.w	r5, {r0, r1}
 800612a:	1d33      	adds	r3, r6, #4
 800612c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800612e:	6838      	ldr	r0, [r7, #0]
 8006130:	f003 ffa8 	bl	800a084 <USB_DevInit>
 8006134:	4603      	mov	r3, r0
 8006136:	2b00      	cmp	r3, #0
 8006138:	d005      	beq.n	8006146 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2202      	movs	r2, #2
 800613e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	e00d      	b.n	8006162 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2201      	movs	r2, #1
 8006152:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4618      	mov	r0, r3
 800615c:	f004 fff0 	bl	800b140 <USB_DevDisconnect>

  return HAL_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	3714      	adds	r7, #20
 8006166:	46bd      	mov	sp, r7
 8006168:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800616a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800616a:	b580      	push	{r7, lr}
 800616c:	b084      	sub	sp, #16
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800617e:	2b01      	cmp	r3, #1
 8006180:	d101      	bne.n	8006186 <HAL_PCD_Start+0x1c>
 8006182:	2302      	movs	r3, #2
 8006184:	e020      	b.n	80061c8 <HAL_PCD_Start+0x5e>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2201      	movs	r2, #1
 800618a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006192:	2b01      	cmp	r3, #1
 8006194:	d109      	bne.n	80061aa <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800619a:	2b01      	cmp	r3, #1
 800619c:	d005      	beq.n	80061aa <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4618      	mov	r0, r3
 80061b0:	f003 ff1c 	bl	8009fec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4618      	mov	r0, r3
 80061ba:	f004 ffa0 	bl	800b0fe <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3710      	adds	r7, #16
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80061d0:	b590      	push	{r4, r7, lr}
 80061d2:	b08d      	sub	sp, #52	; 0x34
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061de:	6a3b      	ldr	r3, [r7, #32]
 80061e0:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4618      	mov	r0, r3
 80061e8:	f005 f85e 	bl	800b2a8 <USB_GetMode>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	f040 839d 	bne.w	800692e <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4618      	mov	r0, r3
 80061fa:	f004 ffc2 	bl	800b182 <USB_ReadInterrupts>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b00      	cmp	r3, #0
 8006202:	f000 8393 	beq.w	800692c <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4618      	mov	r0, r3
 800620c:	f004 ffb9 	bl	800b182 <USB_ReadInterrupts>
 8006210:	4603      	mov	r3, r0
 8006212:	f003 0302 	and.w	r3, r3, #2
 8006216:	2b02      	cmp	r3, #2
 8006218:	d107      	bne.n	800622a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	695a      	ldr	r2, [r3, #20]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f002 0202 	and.w	r2, r2, #2
 8006228:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4618      	mov	r0, r3
 8006230:	f004 ffa7 	bl	800b182 <USB_ReadInterrupts>
 8006234:	4603      	mov	r3, r0
 8006236:	f003 0310 	and.w	r3, r3, #16
 800623a:	2b10      	cmp	r3, #16
 800623c:	d161      	bne.n	8006302 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	699a      	ldr	r2, [r3, #24]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f022 0210 	bic.w	r2, r2, #16
 800624c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800624e:	6a3b      	ldr	r3, [r7, #32]
 8006250:	6a1b      	ldr	r3, [r3, #32]
 8006252:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	f003 020f 	and.w	r2, r3, #15
 800625a:	4613      	mov	r3, r2
 800625c:	00db      	lsls	r3, r3, #3
 800625e:	1a9b      	subs	r3, r3, r2
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	4413      	add	r3, r2
 800626a:	3304      	adds	r3, #4
 800626c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800626e:	69bb      	ldr	r3, [r7, #24]
 8006270:	0c5b      	lsrs	r3, r3, #17
 8006272:	f003 030f 	and.w	r3, r3, #15
 8006276:	2b02      	cmp	r3, #2
 8006278:	d124      	bne.n	80062c4 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800627a:	69ba      	ldr	r2, [r7, #24]
 800627c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006280:	4013      	ands	r3, r2
 8006282:	2b00      	cmp	r3, #0
 8006284:	d035      	beq.n	80062f2 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	091b      	lsrs	r3, r3, #4
 800628e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006290:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006294:	b29b      	uxth	r3, r3
 8006296:	461a      	mov	r2, r3
 8006298:	6a38      	ldr	r0, [r7, #32]
 800629a:	f004 fe0d 	bl	800aeb8 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	68da      	ldr	r2, [r3, #12]
 80062a2:	69bb      	ldr	r3, [r7, #24]
 80062a4:	091b      	lsrs	r3, r3, #4
 80062a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80062aa:	441a      	add	r2, r3
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	699a      	ldr	r2, [r3, #24]
 80062b4:	69bb      	ldr	r3, [r7, #24]
 80062b6:	091b      	lsrs	r3, r3, #4
 80062b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80062bc:	441a      	add	r2, r3
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	619a      	str	r2, [r3, #24]
 80062c2:	e016      	b.n	80062f2 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	0c5b      	lsrs	r3, r3, #17
 80062c8:	f003 030f 	and.w	r3, r3, #15
 80062cc:	2b06      	cmp	r3, #6
 80062ce:	d110      	bne.n	80062f2 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80062d6:	2208      	movs	r2, #8
 80062d8:	4619      	mov	r1, r3
 80062da:	6a38      	ldr	r0, [r7, #32]
 80062dc:	f004 fdec 	bl	800aeb8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	699a      	ldr	r2, [r3, #24]
 80062e4:	69bb      	ldr	r3, [r7, #24]
 80062e6:	091b      	lsrs	r3, r3, #4
 80062e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80062ec:	441a      	add	r2, r3
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	699a      	ldr	r2, [r3, #24]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f042 0210 	orr.w	r2, r2, #16
 8006300:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4618      	mov	r0, r3
 8006308:	f004 ff3b 	bl	800b182 <USB_ReadInterrupts>
 800630c:	4603      	mov	r3, r0
 800630e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006312:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006316:	d16e      	bne.n	80063f6 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8006318:	2300      	movs	r3, #0
 800631a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4618      	mov	r0, r3
 8006322:	f004 ff41 	bl	800b1a8 <USB_ReadDevAllOutEpInterrupt>
 8006326:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8006328:	e062      	b.n	80063f0 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800632a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632c:	f003 0301 	and.w	r3, r3, #1
 8006330:	2b00      	cmp	r3, #0
 8006332:	d057      	beq.n	80063e4 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800633a:	b2d2      	uxtb	r2, r2
 800633c:	4611      	mov	r1, r2
 800633e:	4618      	mov	r0, r3
 8006340:	f004 ff66 	bl	800b210 <USB_ReadDevOutEPInterrupt>
 8006344:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	f003 0301 	and.w	r3, r3, #1
 800634c:	2b00      	cmp	r3, #0
 800634e:	d00c      	beq.n	800636a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006352:	015a      	lsls	r2, r3, #5
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	4413      	add	r3, r2
 8006358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800635c:	461a      	mov	r2, r3
 800635e:	2301      	movs	r3, #1
 8006360:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006362:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f000 fdb1 	bl	8006ecc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	f003 0308 	and.w	r3, r3, #8
 8006370:	2b00      	cmp	r3, #0
 8006372:	d00c      	beq.n	800638e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006376:	015a      	lsls	r2, r3, #5
 8006378:	69fb      	ldr	r3, [r7, #28]
 800637a:	4413      	add	r3, r2
 800637c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006380:	461a      	mov	r2, r3
 8006382:	2308      	movs	r3, #8
 8006384:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006386:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f000 feab 	bl	80070e4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	f003 0310 	and.w	r3, r3, #16
 8006394:	2b00      	cmp	r3, #0
 8006396:	d008      	beq.n	80063aa <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639a:	015a      	lsls	r2, r3, #5
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	4413      	add	r3, r2
 80063a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063a4:	461a      	mov	r2, r3
 80063a6:	2310      	movs	r3, #16
 80063a8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	f003 0320 	and.w	r3, r3, #32
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d008      	beq.n	80063c6 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80063b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b6:	015a      	lsls	r2, r3, #5
 80063b8:	69fb      	ldr	r3, [r7, #28]
 80063ba:	4413      	add	r3, r2
 80063bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063c0:	461a      	mov	r2, r3
 80063c2:	2320      	movs	r3, #32
 80063c4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d009      	beq.n	80063e4 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80063d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d2:	015a      	lsls	r2, r3, #5
 80063d4:	69fb      	ldr	r3, [r7, #28]
 80063d6:	4413      	add	r3, r2
 80063d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063dc:	461a      	mov	r2, r3
 80063de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80063e2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80063e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e6:	3301      	adds	r3, #1
 80063e8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80063ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ec:	085b      	lsrs	r3, r3, #1
 80063ee:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80063f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d199      	bne.n	800632a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4618      	mov	r0, r3
 80063fc:	f004 fec1 	bl	800b182 <USB_ReadInterrupts>
 8006400:	4603      	mov	r3, r0
 8006402:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006406:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800640a:	f040 80c0 	bne.w	800658e <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4618      	mov	r0, r3
 8006414:	f004 fee2 	bl	800b1dc <USB_ReadDevAllInEpInterrupt>
 8006418:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800641a:	2300      	movs	r3, #0
 800641c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800641e:	e0b2      	b.n	8006586 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006422:	f003 0301 	and.w	r3, r3, #1
 8006426:	2b00      	cmp	r3, #0
 8006428:	f000 80a7 	beq.w	800657a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006432:	b2d2      	uxtb	r2, r2
 8006434:	4611      	mov	r1, r2
 8006436:	4618      	mov	r0, r3
 8006438:	f004 ff08 	bl	800b24c <USB_ReadDevInEPInterrupt>
 800643c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	f003 0301 	and.w	r3, r3, #1
 8006444:	2b00      	cmp	r3, #0
 8006446:	d057      	beq.n	80064f8 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644a:	f003 030f 	and.w	r3, r3, #15
 800644e:	2201      	movs	r2, #1
 8006450:	fa02 f303 	lsl.w	r3, r2, r3
 8006454:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800645c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	43db      	mvns	r3, r3
 8006462:	69f9      	ldr	r1, [r7, #28]
 8006464:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006468:	4013      	ands	r3, r2
 800646a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800646c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646e:	015a      	lsls	r2, r3, #5
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	4413      	add	r3, r2
 8006474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006478:	461a      	mov	r2, r3
 800647a:	2301      	movs	r3, #1
 800647c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	691b      	ldr	r3, [r3, #16]
 8006482:	2b01      	cmp	r3, #1
 8006484:	d132      	bne.n	80064ec <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006486:	6879      	ldr	r1, [r7, #4]
 8006488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800648a:	4613      	mov	r3, r2
 800648c:	00db      	lsls	r3, r3, #3
 800648e:	1a9b      	subs	r3, r3, r2
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	440b      	add	r3, r1
 8006494:	3348      	adds	r3, #72	; 0x48
 8006496:	6819      	ldr	r1, [r3, #0]
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800649c:	4613      	mov	r3, r2
 800649e:	00db      	lsls	r3, r3, #3
 80064a0:	1a9b      	subs	r3, r3, r2
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	4403      	add	r3, r0
 80064a6:	3344      	adds	r3, #68	; 0x44
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4419      	add	r1, r3
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064b0:	4613      	mov	r3, r2
 80064b2:	00db      	lsls	r3, r3, #3
 80064b4:	1a9b      	subs	r3, r3, r2
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	4403      	add	r3, r0
 80064ba:	3348      	adds	r3, #72	; 0x48
 80064bc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80064be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d113      	bne.n	80064ec <HAL_PCD_IRQHandler+0x31c>
 80064c4:	6879      	ldr	r1, [r7, #4]
 80064c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064c8:	4613      	mov	r3, r2
 80064ca:	00db      	lsls	r3, r3, #3
 80064cc:	1a9b      	subs	r3, r3, r2
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	440b      	add	r3, r1
 80064d2:	3350      	adds	r3, #80	; 0x50
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d108      	bne.n	80064ec <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6818      	ldr	r0, [r3, #0]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80064e4:	461a      	mov	r2, r3
 80064e6:	2101      	movs	r1, #1
 80064e8:	f004 ff10 	bl	800b30c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80064ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	4619      	mov	r1, r3
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f009 ffd1 	bl	801049a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	f003 0308 	and.w	r3, r3, #8
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d008      	beq.n	8006514 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006504:	015a      	lsls	r2, r3, #5
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	4413      	add	r3, r2
 800650a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800650e:	461a      	mov	r2, r3
 8006510:	2308      	movs	r3, #8
 8006512:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	f003 0310 	and.w	r3, r3, #16
 800651a:	2b00      	cmp	r3, #0
 800651c:	d008      	beq.n	8006530 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800651e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006520:	015a      	lsls	r2, r3, #5
 8006522:	69fb      	ldr	r3, [r7, #28]
 8006524:	4413      	add	r3, r2
 8006526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800652a:	461a      	mov	r2, r3
 800652c:	2310      	movs	r3, #16
 800652e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006536:	2b00      	cmp	r3, #0
 8006538:	d008      	beq.n	800654c <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800653a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653c:	015a      	lsls	r2, r3, #5
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	4413      	add	r3, r2
 8006542:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006546:	461a      	mov	r2, r3
 8006548:	2340      	movs	r3, #64	; 0x40
 800654a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	f003 0302 	and.w	r3, r3, #2
 8006552:	2b00      	cmp	r3, #0
 8006554:	d008      	beq.n	8006568 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006558:	015a      	lsls	r2, r3, #5
 800655a:	69fb      	ldr	r3, [r7, #28]
 800655c:	4413      	add	r3, r2
 800655e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006562:	461a      	mov	r2, r3
 8006564:	2302      	movs	r3, #2
 8006566:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800656e:	2b00      	cmp	r3, #0
 8006570:	d003      	beq.n	800657a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006572:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f000 fc1b 	bl	8006db0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800657a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657c:	3301      	adds	r3, #1
 800657e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006582:	085b      	lsrs	r3, r3, #1
 8006584:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006588:	2b00      	cmp	r3, #0
 800658a:	f47f af49 	bne.w	8006420 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4618      	mov	r0, r3
 8006594:	f004 fdf5 	bl	800b182 <USB_ReadInterrupts>
 8006598:	4603      	mov	r3, r0
 800659a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800659e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065a2:	d122      	bne.n	80065ea <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80065a4:	69fb      	ldr	r3, [r7, #28]
 80065a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	69fa      	ldr	r2, [r7, #28]
 80065ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065b2:	f023 0301 	bic.w	r3, r3, #1
 80065b6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d108      	bne.n	80065d4 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2200      	movs	r2, #0
 80065c6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80065ca:	2100      	movs	r1, #0
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 fe27 	bl	8007220 <HAL_PCDEx_LPM_Callback>
 80065d2:	e002      	b.n	80065da <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f009 ffd7 	bl	8010588 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	695a      	ldr	r2, [r3, #20]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80065e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4618      	mov	r0, r3
 80065f0:	f004 fdc7 	bl	800b182 <USB_ReadInterrupts>
 80065f4:	4603      	mov	r3, r0
 80065f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065fe:	d112      	bne.n	8006626 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006600:	69fb      	ldr	r3, [r7, #28]
 8006602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	f003 0301 	and.w	r3, r3, #1
 800660c:	2b01      	cmp	r3, #1
 800660e:	d102      	bne.n	8006616 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f009 ff93 	bl	801053c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	695a      	ldr	r2, [r3, #20]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006624:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4618      	mov	r0, r3
 800662c:	f004 fda9 	bl	800b182 <USB_ReadInterrupts>
 8006630:	4603      	mov	r3, r0
 8006632:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006636:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800663a:	f040 80c7 	bne.w	80067cc <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	69fa      	ldr	r2, [r7, #28]
 8006648:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800664c:	f023 0301 	bic.w	r3, r3, #1
 8006650:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	2110      	movs	r1, #16
 8006658:	4618      	mov	r0, r3
 800665a:	f003 fe77 	bl	800a34c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800665e:	2300      	movs	r3, #0
 8006660:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006662:	e056      	b.n	8006712 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006666:	015a      	lsls	r2, r3, #5
 8006668:	69fb      	ldr	r3, [r7, #28]
 800666a:	4413      	add	r3, r2
 800666c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006670:	461a      	mov	r2, r3
 8006672:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006676:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800667a:	015a      	lsls	r2, r3, #5
 800667c:	69fb      	ldr	r3, [r7, #28]
 800667e:	4413      	add	r3, r2
 8006680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006688:	0151      	lsls	r1, r2, #5
 800668a:	69fa      	ldr	r2, [r7, #28]
 800668c:	440a      	add	r2, r1
 800668e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006692:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006696:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800669a:	015a      	lsls	r2, r3, #5
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	4413      	add	r3, r2
 80066a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066a8:	0151      	lsls	r1, r2, #5
 80066aa:	69fa      	ldr	r2, [r7, #28]
 80066ac:	440a      	add	r2, r1
 80066ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80066b6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80066b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ba:	015a      	lsls	r2, r3, #5
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	4413      	add	r3, r2
 80066c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066c4:	461a      	mov	r2, r3
 80066c6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80066ca:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80066cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ce:	015a      	lsls	r2, r3, #5
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	4413      	add	r3, r2
 80066d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066dc:	0151      	lsls	r1, r2, #5
 80066de:	69fa      	ldr	r2, [r7, #28]
 80066e0:	440a      	add	r2, r1
 80066e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80066ea:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80066ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ee:	015a      	lsls	r2, r3, #5
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	4413      	add	r3, r2
 80066f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066fc:	0151      	lsls	r1, r2, #5
 80066fe:	69fa      	ldr	r2, [r7, #28]
 8006700:	440a      	add	r2, r1
 8006702:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006706:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800670a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800670c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800670e:	3301      	adds	r3, #1
 8006710:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006718:	429a      	cmp	r2, r3
 800671a:	d3a3      	bcc.n	8006664 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006722:	69db      	ldr	r3, [r3, #28]
 8006724:	69fa      	ldr	r2, [r7, #28]
 8006726:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800672a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800672e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006734:	2b00      	cmp	r3, #0
 8006736:	d016      	beq.n	8006766 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800673e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006742:	69fa      	ldr	r2, [r7, #28]
 8006744:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006748:	f043 030b 	orr.w	r3, r3, #11
 800674c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006750:	69fb      	ldr	r3, [r7, #28]
 8006752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006758:	69fa      	ldr	r2, [r7, #28]
 800675a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800675e:	f043 030b 	orr.w	r3, r3, #11
 8006762:	6453      	str	r3, [r2, #68]	; 0x44
 8006764:	e015      	b.n	8006792 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800676c:	695b      	ldr	r3, [r3, #20]
 800676e:	69fa      	ldr	r2, [r7, #28]
 8006770:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006774:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006778:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800677c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800677e:	69fb      	ldr	r3, [r7, #28]
 8006780:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006784:	691b      	ldr	r3, [r3, #16]
 8006786:	69fa      	ldr	r2, [r7, #28]
 8006788:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800678c:	f043 030b 	orr.w	r3, r3, #11
 8006790:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	69fa      	ldr	r2, [r7, #28]
 800679c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067a0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80067a4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6818      	ldr	r0, [r3, #0]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80067b6:	461a      	mov	r2, r3
 80067b8:	f004 fda8 	bl	800b30c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	695a      	ldr	r2, [r3, #20]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80067ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4618      	mov	r0, r3
 80067d2:	f004 fcd6 	bl	800b182 <USB_ReadInterrupts>
 80067d6:	4603      	mov	r3, r0
 80067d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80067dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067e0:	d124      	bne.n	800682c <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4618      	mov	r0, r3
 80067e8:	f004 fd6c 	bl	800b2c4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4618      	mov	r0, r3
 80067f2:	f003 fe0c 	bl	800a40e <USB_GetDevSpeed>
 80067f6:	4603      	mov	r3, r0
 80067f8:	461a      	mov	r2, r3
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681c      	ldr	r4, [r3, #0]
 8006802:	f001 f947 	bl	8007a94 <HAL_RCC_GetHCLKFreq>
 8006806:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800680c:	b2db      	uxtb	r3, r3
 800680e:	461a      	mov	r2, r3
 8006810:	4620      	mov	r0, r4
 8006812:	f003 fb49 	bl	8009ea8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f009 fe67 	bl	80104ea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	695a      	ldr	r2, [r3, #20]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800682a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4618      	mov	r0, r3
 8006832:	f004 fca6 	bl	800b182 <USB_ReadInterrupts>
 8006836:	4603      	mov	r3, r0
 8006838:	f003 0308 	and.w	r3, r3, #8
 800683c:	2b08      	cmp	r3, #8
 800683e:	d10a      	bne.n	8006856 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f009 fe44 	bl	80104ce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	695a      	ldr	r2, [r3, #20]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f002 0208 	and.w	r2, r2, #8
 8006854:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4618      	mov	r0, r3
 800685c:	f004 fc91 	bl	800b182 <USB_ReadInterrupts>
 8006860:	4603      	mov	r3, r0
 8006862:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006866:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800686a:	d10f      	bne.n	800688c <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800686c:	2300      	movs	r3, #0
 800686e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006872:	b2db      	uxtb	r3, r3
 8006874:	4619      	mov	r1, r3
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f009 fea6 	bl	80105c8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	695a      	ldr	r2, [r3, #20]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800688a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4618      	mov	r0, r3
 8006892:	f004 fc76 	bl	800b182 <USB_ReadInterrupts>
 8006896:	4603      	mov	r3, r0
 8006898:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800689c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80068a0:	d10f      	bne.n	80068c2 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80068a2:	2300      	movs	r3, #0
 80068a4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80068a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	4619      	mov	r1, r3
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f009 fe79 	bl	80105a4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	695a      	ldr	r2, [r3, #20]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80068c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4618      	mov	r0, r3
 80068c8:	f004 fc5b 	bl	800b182 <USB_ReadInterrupts>
 80068cc:	4603      	mov	r3, r0
 80068ce:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80068d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068d6:	d10a      	bne.n	80068ee <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f009 fe87 	bl	80105ec <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	695a      	ldr	r2, [r3, #20]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80068ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4618      	mov	r0, r3
 80068f4:	f004 fc45 	bl	800b182 <USB_ReadInterrupts>
 80068f8:	4603      	mov	r3, r0
 80068fa:	f003 0304 	and.w	r3, r3, #4
 80068fe:	2b04      	cmp	r3, #4
 8006900:	d115      	bne.n	800692e <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800690a:	69bb      	ldr	r3, [r7, #24]
 800690c:	f003 0304 	and.w	r3, r3, #4
 8006910:	2b00      	cmp	r3, #0
 8006912:	d002      	beq.n	800691a <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f009 fe77 	bl	8010608 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	6859      	ldr	r1, [r3, #4]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	69ba      	ldr	r2, [r7, #24]
 8006926:	430a      	orrs	r2, r1
 8006928:	605a      	str	r2, [r3, #4]
 800692a:	e000      	b.n	800692e <HAL_PCD_IRQHandler+0x75e>
      return;
 800692c:	bf00      	nop
    }
  }
}
 800692e:	3734      	adds	r7, #52	; 0x34
 8006930:	46bd      	mov	sp, r7
 8006932:	bd90      	pop	{r4, r7, pc}

08006934 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	460b      	mov	r3, r1
 800693e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006946:	2b01      	cmp	r3, #1
 8006948:	d101      	bne.n	800694e <HAL_PCD_SetAddress+0x1a>
 800694a:	2302      	movs	r3, #2
 800694c:	e013      	b.n	8006976 <HAL_PCD_SetAddress+0x42>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2201      	movs	r2, #1
 8006952:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	78fa      	ldrb	r2, [r7, #3]
 800695a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	78fa      	ldrb	r2, [r7, #3]
 8006964:	4611      	mov	r1, r2
 8006966:	4618      	mov	r0, r3
 8006968:	f004 fba3 	bl	800b0b2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006974:	2300      	movs	r3, #0
}
 8006976:	4618      	mov	r0, r3
 8006978:	3708      	adds	r7, #8
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}

0800697e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800697e:	b580      	push	{r7, lr}
 8006980:	b084      	sub	sp, #16
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
 8006986:	4608      	mov	r0, r1
 8006988:	4611      	mov	r1, r2
 800698a:	461a      	mov	r2, r3
 800698c:	4603      	mov	r3, r0
 800698e:	70fb      	strb	r3, [r7, #3]
 8006990:	460b      	mov	r3, r1
 8006992:	803b      	strh	r3, [r7, #0]
 8006994:	4613      	mov	r3, r2
 8006996:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006998:	2300      	movs	r3, #0
 800699a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800699c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	da0f      	bge.n	80069c4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80069a4:	78fb      	ldrb	r3, [r7, #3]
 80069a6:	f003 020f 	and.w	r2, r3, #15
 80069aa:	4613      	mov	r3, r2
 80069ac:	00db      	lsls	r3, r3, #3
 80069ae:	1a9b      	subs	r3, r3, r2
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	3338      	adds	r3, #56	; 0x38
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	4413      	add	r3, r2
 80069b8:	3304      	adds	r3, #4
 80069ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2201      	movs	r2, #1
 80069c0:	705a      	strb	r2, [r3, #1]
 80069c2:	e00f      	b.n	80069e4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80069c4:	78fb      	ldrb	r3, [r7, #3]
 80069c6:	f003 020f 	and.w	r2, r3, #15
 80069ca:	4613      	mov	r3, r2
 80069cc:	00db      	lsls	r3, r3, #3
 80069ce:	1a9b      	subs	r3, r3, r2
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	4413      	add	r3, r2
 80069da:	3304      	adds	r3, #4
 80069dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2200      	movs	r2, #0
 80069e2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80069e4:	78fb      	ldrb	r3, [r7, #3]
 80069e6:	f003 030f 	and.w	r3, r3, #15
 80069ea:	b2da      	uxtb	r2, r3
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80069f0:	883a      	ldrh	r2, [r7, #0]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	78ba      	ldrb	r2, [r7, #2]
 80069fa:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	785b      	ldrb	r3, [r3, #1]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d004      	beq.n	8006a0e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	b29a      	uxth	r2, r3
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006a0e:	78bb      	ldrb	r3, [r7, #2]
 8006a10:	2b02      	cmp	r3, #2
 8006a12:	d102      	bne.n	8006a1a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2200      	movs	r2, #0
 8006a18:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d101      	bne.n	8006a28 <HAL_PCD_EP_Open+0xaa>
 8006a24:	2302      	movs	r3, #2
 8006a26:	e00e      	b.n	8006a46 <HAL_PCD_EP_Open+0xc8>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	68f9      	ldr	r1, [r7, #12]
 8006a36:	4618      	mov	r0, r3
 8006a38:	f003 fd0e 	bl	800a458 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8006a44:	7afb      	ldrb	r3, [r7, #11]
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3710      	adds	r7, #16
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}

08006a4e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006a4e:	b580      	push	{r7, lr}
 8006a50:	b084      	sub	sp, #16
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
 8006a56:	460b      	mov	r3, r1
 8006a58:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006a5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	da0f      	bge.n	8006a82 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a62:	78fb      	ldrb	r3, [r7, #3]
 8006a64:	f003 020f 	and.w	r2, r3, #15
 8006a68:	4613      	mov	r3, r2
 8006a6a:	00db      	lsls	r3, r3, #3
 8006a6c:	1a9b      	subs	r3, r3, r2
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	3338      	adds	r3, #56	; 0x38
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	4413      	add	r3, r2
 8006a76:	3304      	adds	r3, #4
 8006a78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	705a      	strb	r2, [r3, #1]
 8006a80:	e00f      	b.n	8006aa2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006a82:	78fb      	ldrb	r3, [r7, #3]
 8006a84:	f003 020f 	and.w	r2, r3, #15
 8006a88:	4613      	mov	r3, r2
 8006a8a:	00db      	lsls	r3, r3, #3
 8006a8c:	1a9b      	subs	r3, r3, r2
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	4413      	add	r3, r2
 8006a98:	3304      	adds	r3, #4
 8006a9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006aa2:	78fb      	ldrb	r3, [r7, #3]
 8006aa4:	f003 030f 	and.w	r3, r3, #15
 8006aa8:	b2da      	uxtb	r2, r3
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d101      	bne.n	8006abc <HAL_PCD_EP_Close+0x6e>
 8006ab8:	2302      	movs	r3, #2
 8006aba:	e00e      	b.n	8006ada <HAL_PCD_EP_Close+0x8c>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	68f9      	ldr	r1, [r7, #12]
 8006aca:	4618      	mov	r0, r3
 8006acc:	f003 fd4c 	bl	800a568 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3710      	adds	r7, #16
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}

08006ae2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006ae2:	b580      	push	{r7, lr}
 8006ae4:	b086      	sub	sp, #24
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	60f8      	str	r0, [r7, #12]
 8006aea:	607a      	str	r2, [r7, #4]
 8006aec:	603b      	str	r3, [r7, #0]
 8006aee:	460b      	mov	r3, r1
 8006af0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006af2:	7afb      	ldrb	r3, [r7, #11]
 8006af4:	f003 020f 	and.w	r2, r3, #15
 8006af8:	4613      	mov	r3, r2
 8006afa:	00db      	lsls	r3, r3, #3
 8006afc:	1a9b      	subs	r3, r3, r2
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006b04:	68fa      	ldr	r2, [r7, #12]
 8006b06:	4413      	add	r3, r2
 8006b08:	3304      	adds	r3, #4
 8006b0a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	683a      	ldr	r2, [r7, #0]
 8006b16:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	2200      	movs	r2, #0
 8006b22:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006b24:	7afb      	ldrb	r3, [r7, #11]
 8006b26:	f003 030f 	and.w	r3, r3, #15
 8006b2a:	b2da      	uxtb	r2, r3
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	691b      	ldr	r3, [r3, #16]
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d102      	bne.n	8006b3e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006b3e:	7afb      	ldrb	r3, [r7, #11]
 8006b40:	f003 030f 	and.w	r3, r3, #15
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d109      	bne.n	8006b5c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6818      	ldr	r0, [r3, #0]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	691b      	ldr	r3, [r3, #16]
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	461a      	mov	r2, r3
 8006b54:	6979      	ldr	r1, [r7, #20]
 8006b56:	f004 f827 	bl	800aba8 <USB_EP0StartXfer>
 8006b5a:	e008      	b.n	8006b6e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	6818      	ldr	r0, [r3, #0]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	691b      	ldr	r3, [r3, #16]
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	461a      	mov	r2, r3
 8006b68:	6979      	ldr	r1, [r7, #20]
 8006b6a:	f003 fdd9 	bl	800a720 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006b6e:	2300      	movs	r3, #0
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3718      	adds	r7, #24
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b083      	sub	sp, #12
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	460b      	mov	r3, r1
 8006b82:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006b84:	78fb      	ldrb	r3, [r7, #3]
 8006b86:	f003 020f 	and.w	r2, r3, #15
 8006b8a:	6879      	ldr	r1, [r7, #4]
 8006b8c:	4613      	mov	r3, r2
 8006b8e:	00db      	lsls	r3, r3, #3
 8006b90:	1a9b      	subs	r3, r3, r2
 8006b92:	009b      	lsls	r3, r3, #2
 8006b94:	440b      	add	r3, r1
 8006b96:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006b9a:	681b      	ldr	r3, [r3, #0]
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	370c      	adds	r7, #12
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr

08006ba8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b086      	sub	sp, #24
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	607a      	str	r2, [r7, #4]
 8006bb2:	603b      	str	r3, [r7, #0]
 8006bb4:	460b      	mov	r3, r1
 8006bb6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006bb8:	7afb      	ldrb	r3, [r7, #11]
 8006bba:	f003 020f 	and.w	r2, r3, #15
 8006bbe:	4613      	mov	r3, r2
 8006bc0:	00db      	lsls	r3, r3, #3
 8006bc2:	1a9b      	subs	r3, r3, r2
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	3338      	adds	r3, #56	; 0x38
 8006bc8:	68fa      	ldr	r2, [r7, #12]
 8006bca:	4413      	add	r3, r2
 8006bcc:	3304      	adds	r3, #4
 8006bce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	683a      	ldr	r2, [r7, #0]
 8006bda:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	2200      	movs	r2, #0
 8006be0:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	2201      	movs	r2, #1
 8006be6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006be8:	7afb      	ldrb	r3, [r7, #11]
 8006bea:	f003 030f 	and.w	r3, r3, #15
 8006bee:	b2da      	uxtb	r2, r3
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	691b      	ldr	r3, [r3, #16]
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d102      	bne.n	8006c02 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006c02:	7afb      	ldrb	r3, [r7, #11]
 8006c04:	f003 030f 	and.w	r3, r3, #15
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d109      	bne.n	8006c20 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	6818      	ldr	r0, [r3, #0]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	691b      	ldr	r3, [r3, #16]
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	461a      	mov	r2, r3
 8006c18:	6979      	ldr	r1, [r7, #20]
 8006c1a:	f003 ffc5 	bl	800aba8 <USB_EP0StartXfer>
 8006c1e:	e008      	b.n	8006c32 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	6818      	ldr	r0, [r3, #0]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	691b      	ldr	r3, [r3, #16]
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	6979      	ldr	r1, [r7, #20]
 8006c2e:	f003 fd77 	bl	800a720 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006c32:	2300      	movs	r3, #0
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3718      	adds	r7, #24
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}

08006c3c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b084      	sub	sp, #16
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	460b      	mov	r3, r1
 8006c46:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006c48:	78fb      	ldrb	r3, [r7, #3]
 8006c4a:	f003 020f 	and.w	r2, r3, #15
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d901      	bls.n	8006c5a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	e050      	b.n	8006cfc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006c5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	da0f      	bge.n	8006c82 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006c62:	78fb      	ldrb	r3, [r7, #3]
 8006c64:	f003 020f 	and.w	r2, r3, #15
 8006c68:	4613      	mov	r3, r2
 8006c6a:	00db      	lsls	r3, r3, #3
 8006c6c:	1a9b      	subs	r3, r3, r2
 8006c6e:	009b      	lsls	r3, r3, #2
 8006c70:	3338      	adds	r3, #56	; 0x38
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	4413      	add	r3, r2
 8006c76:	3304      	adds	r3, #4
 8006c78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	705a      	strb	r2, [r3, #1]
 8006c80:	e00d      	b.n	8006c9e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006c82:	78fa      	ldrb	r2, [r7, #3]
 8006c84:	4613      	mov	r3, r2
 8006c86:	00db      	lsls	r3, r3, #3
 8006c88:	1a9b      	subs	r3, r3, r2
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	4413      	add	r3, r2
 8006c94:	3304      	adds	r3, #4
 8006c96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006ca4:	78fb      	ldrb	r3, [r7, #3]
 8006ca6:	f003 030f 	and.w	r3, r3, #15
 8006caa:	b2da      	uxtb	r2, r3
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d101      	bne.n	8006cbe <HAL_PCD_EP_SetStall+0x82>
 8006cba:	2302      	movs	r3, #2
 8006cbc:	e01e      	b.n	8006cfc <HAL_PCD_EP_SetStall+0xc0>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	68f9      	ldr	r1, [r7, #12]
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f004 f91c 	bl	800af0a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006cd2:	78fb      	ldrb	r3, [r7, #3]
 8006cd4:	f003 030f 	and.w	r3, r3, #15
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d10a      	bne.n	8006cf2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6818      	ldr	r0, [r3, #0]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	691b      	ldr	r3, [r3, #16]
 8006ce4:	b2d9      	uxtb	r1, r3
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006cec:	461a      	mov	r2, r3
 8006cee:	f004 fb0d 	bl	800b30c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006cfa:	2300      	movs	r3, #0
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3710      	adds	r7, #16
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b084      	sub	sp, #16
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006d10:	78fb      	ldrb	r3, [r7, #3]
 8006d12:	f003 020f 	and.w	r2, r3, #15
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d901      	bls.n	8006d22 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e042      	b.n	8006da8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006d22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	da0f      	bge.n	8006d4a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006d2a:	78fb      	ldrb	r3, [r7, #3]
 8006d2c:	f003 020f 	and.w	r2, r3, #15
 8006d30:	4613      	mov	r3, r2
 8006d32:	00db      	lsls	r3, r3, #3
 8006d34:	1a9b      	subs	r3, r3, r2
 8006d36:	009b      	lsls	r3, r3, #2
 8006d38:	3338      	adds	r3, #56	; 0x38
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	4413      	add	r3, r2
 8006d3e:	3304      	adds	r3, #4
 8006d40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2201      	movs	r2, #1
 8006d46:	705a      	strb	r2, [r3, #1]
 8006d48:	e00f      	b.n	8006d6a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006d4a:	78fb      	ldrb	r3, [r7, #3]
 8006d4c:	f003 020f 	and.w	r2, r3, #15
 8006d50:	4613      	mov	r3, r2
 8006d52:	00db      	lsls	r3, r3, #3
 8006d54:	1a9b      	subs	r3, r3, r2
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	4413      	add	r3, r2
 8006d60:	3304      	adds	r3, #4
 8006d62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2200      	movs	r2, #0
 8006d68:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006d70:	78fb      	ldrb	r3, [r7, #3]
 8006d72:	f003 030f 	and.w	r3, r3, #15
 8006d76:	b2da      	uxtb	r2, r3
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d101      	bne.n	8006d8a <HAL_PCD_EP_ClrStall+0x86>
 8006d86:	2302      	movs	r3, #2
 8006d88:	e00e      	b.n	8006da8 <HAL_PCD_EP_ClrStall+0xa4>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	68f9      	ldr	r1, [r7, #12]
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f004 f924 	bl	800afe6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006da6:	2300      	movs	r3, #0
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3710      	adds	r7, #16
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b08a      	sub	sp, #40	; 0x28
 8006db4:	af02      	add	r7, sp, #8
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006dc4:	683a      	ldr	r2, [r7, #0]
 8006dc6:	4613      	mov	r3, r2
 8006dc8:	00db      	lsls	r3, r3, #3
 8006dca:	1a9b      	subs	r3, r3, r2
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	3338      	adds	r3, #56	; 0x38
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	3304      	adds	r3, #4
 8006dd6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	699a      	ldr	r2, [r3, #24]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	695b      	ldr	r3, [r3, #20]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d901      	bls.n	8006de8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	e06c      	b.n	8006ec2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	695a      	ldr	r2, [r3, #20]
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	699b      	ldr	r3, [r3, #24]
 8006df0:	1ad3      	subs	r3, r2, r3
 8006df2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	69fa      	ldr	r2, [r7, #28]
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	d902      	bls.n	8006e04 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	3303      	adds	r3, #3
 8006e08:	089b      	lsrs	r3, r3, #2
 8006e0a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006e0c:	e02b      	b.n	8006e66 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	695a      	ldr	r2, [r3, #20]
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	699b      	ldr	r3, [r3, #24]
 8006e16:	1ad3      	subs	r3, r2, r3
 8006e18:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	69fa      	ldr	r2, [r7, #28]
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d902      	bls.n	8006e2a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006e2a:	69fb      	ldr	r3, [r7, #28]
 8006e2c:	3303      	adds	r3, #3
 8006e2e:	089b      	lsrs	r3, r3, #2
 8006e30:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	68d9      	ldr	r1, [r3, #12]
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	b2da      	uxtb	r2, r3
 8006e3a:	69fb      	ldr	r3, [r7, #28]
 8006e3c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006e42:	b2db      	uxtb	r3, r3
 8006e44:	9300      	str	r3, [sp, #0]
 8006e46:	4603      	mov	r3, r0
 8006e48:	6978      	ldr	r0, [r7, #20]
 8006e4a:	f004 f800 	bl	800ae4e <USB_WritePacket>

    ep->xfer_buff  += len;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	68da      	ldr	r2, [r3, #12]
 8006e52:	69fb      	ldr	r3, [r7, #28]
 8006e54:	441a      	add	r2, r3
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	699a      	ldr	r2, [r3, #24]
 8006e5e:	69fb      	ldr	r3, [r7, #28]
 8006e60:	441a      	add	r2, r3
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	015a      	lsls	r2, r3, #5
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e72:	699b      	ldr	r3, [r3, #24]
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	69ba      	ldr	r2, [r7, #24]
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d809      	bhi.n	8006e90 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	699a      	ldr	r2, [r3, #24]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d203      	bcs.n	8006e90 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	695b      	ldr	r3, [r3, #20]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d1be      	bne.n	8006e0e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	695a      	ldr	r2, [r3, #20]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	699b      	ldr	r3, [r3, #24]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d811      	bhi.n	8006ec0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	f003 030f 	and.w	r3, r3, #15
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ea8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	43db      	mvns	r3, r3
 8006eb6:	6939      	ldr	r1, [r7, #16]
 8006eb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ebc:	4013      	ands	r3, r2
 8006ebe:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006ec0:	2300      	movs	r3, #0
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3720      	adds	r7, #32
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
	...

08006ecc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b086      	sub	sp, #24
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	333c      	adds	r3, #60	; 0x3c
 8006ee4:	3304      	adds	r3, #4
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	015a      	lsls	r2, r3, #5
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	4413      	add	r3, r2
 8006ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	691b      	ldr	r3, [r3, #16]
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	f040 80a0 	bne.w	8007044 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	f003 0308 	and.w	r3, r3, #8
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d015      	beq.n	8006f3a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	4a72      	ldr	r2, [pc, #456]	; (80070dc <PCD_EP_OutXfrComplete_int+0x210>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	f240 80dd 	bls.w	80070d2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	f000 80d7 	beq.w	80070d2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	015a      	lsls	r2, r3, #5
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	4413      	add	r3, r2
 8006f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f30:	461a      	mov	r2, r3
 8006f32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f36:	6093      	str	r3, [r2, #8]
 8006f38:	e0cb      	b.n	80070d2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	f003 0320 	and.w	r3, r3, #32
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d009      	beq.n	8006f58 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	015a      	lsls	r2, r3, #5
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	4413      	add	r3, r2
 8006f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f50:	461a      	mov	r2, r3
 8006f52:	2320      	movs	r3, #32
 8006f54:	6093      	str	r3, [r2, #8]
 8006f56:	e0bc      	b.n	80070d2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	f040 80b7 	bne.w	80070d2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	4a5d      	ldr	r2, [pc, #372]	; (80070dc <PCD_EP_OutXfrComplete_int+0x210>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d90f      	bls.n	8006f8c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00a      	beq.n	8006f8c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	015a      	lsls	r2, r3, #5
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	4413      	add	r3, r2
 8006f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f82:	461a      	mov	r2, r3
 8006f84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f88:	6093      	str	r3, [r2, #8]
 8006f8a:	e0a2      	b.n	80070d2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8006f8c:	6879      	ldr	r1, [r7, #4]
 8006f8e:	683a      	ldr	r2, [r7, #0]
 8006f90:	4613      	mov	r3, r2
 8006f92:	00db      	lsls	r3, r3, #3
 8006f94:	1a9b      	subs	r3, r3, r2
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	440b      	add	r3, r1
 8006f9a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006f9e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	0159      	lsls	r1, r3, #5
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	440b      	add	r3, r1
 8006fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fac:	691b      	ldr	r3, [r3, #16]
 8006fae:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8006fb2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	683a      	ldr	r2, [r7, #0]
 8006fb8:	4613      	mov	r3, r2
 8006fba:	00db      	lsls	r3, r3, #3
 8006fbc:	1a9b      	subs	r3, r3, r2
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	4403      	add	r3, r0
 8006fc2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006fc6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8006fc8:	6879      	ldr	r1, [r7, #4]
 8006fca:	683a      	ldr	r2, [r7, #0]
 8006fcc:	4613      	mov	r3, r2
 8006fce:	00db      	lsls	r3, r3, #3
 8006fd0:	1a9b      	subs	r3, r3, r2
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	440b      	add	r3, r1
 8006fd6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006fda:	6819      	ldr	r1, [r3, #0]
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	683a      	ldr	r2, [r7, #0]
 8006fe0:	4613      	mov	r3, r2
 8006fe2:	00db      	lsls	r3, r3, #3
 8006fe4:	1a9b      	subs	r3, r3, r2
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	4403      	add	r3, r0
 8006fea:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4419      	add	r1, r3
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	683a      	ldr	r2, [r7, #0]
 8006ff6:	4613      	mov	r3, r2
 8006ff8:	00db      	lsls	r3, r3, #3
 8006ffa:	1a9b      	subs	r3, r3, r2
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	4403      	add	r3, r0
 8007000:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007004:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d114      	bne.n	8007036 <PCD_EP_OutXfrComplete_int+0x16a>
 800700c:	6879      	ldr	r1, [r7, #4]
 800700e:	683a      	ldr	r2, [r7, #0]
 8007010:	4613      	mov	r3, r2
 8007012:	00db      	lsls	r3, r3, #3
 8007014:	1a9b      	subs	r3, r3, r2
 8007016:	009b      	lsls	r3, r3, #2
 8007018:	440b      	add	r3, r1
 800701a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d108      	bne.n	8007036 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6818      	ldr	r0, [r3, #0]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800702e:	461a      	mov	r2, r3
 8007030:	2101      	movs	r1, #1
 8007032:	f004 f96b 	bl	800b30c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	b2db      	uxtb	r3, r3
 800703a:	4619      	mov	r1, r3
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f009 fa11 	bl	8010464 <HAL_PCD_DataOutStageCallback>
 8007042:	e046      	b.n	80070d2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	4a26      	ldr	r2, [pc, #152]	; (80070e0 <PCD_EP_OutXfrComplete_int+0x214>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d124      	bne.n	8007096 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007052:	2b00      	cmp	r3, #0
 8007054:	d00a      	beq.n	800706c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	015a      	lsls	r2, r3, #5
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	4413      	add	r3, r2
 800705e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007062:	461a      	mov	r2, r3
 8007064:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007068:	6093      	str	r3, [r2, #8]
 800706a:	e032      	b.n	80070d2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	f003 0320 	and.w	r3, r3, #32
 8007072:	2b00      	cmp	r3, #0
 8007074:	d008      	beq.n	8007088 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	015a      	lsls	r2, r3, #5
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	4413      	add	r3, r2
 800707e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007082:	461a      	mov	r2, r3
 8007084:	2320      	movs	r3, #32
 8007086:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	b2db      	uxtb	r3, r3
 800708c:	4619      	mov	r1, r3
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f009 f9e8 	bl	8010464 <HAL_PCD_DataOutStageCallback>
 8007094:	e01d      	b.n	80070d2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d114      	bne.n	80070c6 <PCD_EP_OutXfrComplete_int+0x1fa>
 800709c:	6879      	ldr	r1, [r7, #4]
 800709e:	683a      	ldr	r2, [r7, #0]
 80070a0:	4613      	mov	r3, r2
 80070a2:	00db      	lsls	r3, r3, #3
 80070a4:	1a9b      	subs	r3, r3, r2
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	440b      	add	r3, r1
 80070aa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d108      	bne.n	80070c6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6818      	ldr	r0, [r3, #0]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80070be:	461a      	mov	r2, r3
 80070c0:	2100      	movs	r1, #0
 80070c2:	f004 f923 	bl	800b30c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	4619      	mov	r1, r3
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f009 f9c9 	bl	8010464 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80070d2:	2300      	movs	r3, #0
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3718      	adds	r7, #24
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}
 80070dc:	4f54300a 	.word	0x4f54300a
 80070e0:	4f54310a 	.word	0x4f54310a

080070e4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b086      	sub	sp, #24
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	333c      	adds	r3, #60	; 0x3c
 80070fc:	3304      	adds	r3, #4
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	015a      	lsls	r2, r3, #5
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	4413      	add	r3, r2
 800710a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	4a15      	ldr	r2, [pc, #84]	; (800716c <PCD_EP_OutSetupPacket_int+0x88>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d90e      	bls.n	8007138 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007120:	2b00      	cmp	r3, #0
 8007122:	d009      	beq.n	8007138 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	015a      	lsls	r2, r3, #5
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	4413      	add	r3, r2
 800712c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007130:	461a      	mov	r2, r3
 8007132:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007136:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f009 f981 	bl	8010440 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	4a0a      	ldr	r2, [pc, #40]	; (800716c <PCD_EP_OutSetupPacket_int+0x88>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d90c      	bls.n	8007160 <PCD_EP_OutSetupPacket_int+0x7c>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	691b      	ldr	r3, [r3, #16]
 800714a:	2b01      	cmp	r3, #1
 800714c:	d108      	bne.n	8007160 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6818      	ldr	r0, [r3, #0]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007158:	461a      	mov	r2, r3
 800715a:	2101      	movs	r1, #1
 800715c:	f004 f8d6 	bl	800b30c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	3718      	adds	r7, #24
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop
 800716c:	4f54300a 	.word	0x4f54300a

08007170 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007170:	b480      	push	{r7}
 8007172:	b085      	sub	sp, #20
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	460b      	mov	r3, r1
 800717a:	70fb      	strb	r3, [r7, #3]
 800717c:	4613      	mov	r3, r2
 800717e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007186:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007188:	78fb      	ldrb	r3, [r7, #3]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d107      	bne.n	800719e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800718e:	883b      	ldrh	r3, [r7, #0]
 8007190:	0419      	lsls	r1, r3, #16
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	68ba      	ldr	r2, [r7, #8]
 8007198:	430a      	orrs	r2, r1
 800719a:	629a      	str	r2, [r3, #40]	; 0x28
 800719c:	e028      	b.n	80071f0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071a4:	0c1b      	lsrs	r3, r3, #16
 80071a6:	68ba      	ldr	r2, [r7, #8]
 80071a8:	4413      	add	r3, r2
 80071aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80071ac:	2300      	movs	r3, #0
 80071ae:	73fb      	strb	r3, [r7, #15]
 80071b0:	e00d      	b.n	80071ce <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	7bfb      	ldrb	r3, [r7, #15]
 80071b8:	3340      	adds	r3, #64	; 0x40
 80071ba:	009b      	lsls	r3, r3, #2
 80071bc:	4413      	add	r3, r2
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	0c1b      	lsrs	r3, r3, #16
 80071c2:	68ba      	ldr	r2, [r7, #8]
 80071c4:	4413      	add	r3, r2
 80071c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80071c8:	7bfb      	ldrb	r3, [r7, #15]
 80071ca:	3301      	adds	r3, #1
 80071cc:	73fb      	strb	r3, [r7, #15]
 80071ce:	7bfa      	ldrb	r2, [r7, #15]
 80071d0:	78fb      	ldrb	r3, [r7, #3]
 80071d2:	3b01      	subs	r3, #1
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d3ec      	bcc.n	80071b2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80071d8:	883b      	ldrh	r3, [r7, #0]
 80071da:	0418      	lsls	r0, r3, #16
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6819      	ldr	r1, [r3, #0]
 80071e0:	78fb      	ldrb	r3, [r7, #3]
 80071e2:	3b01      	subs	r3, #1
 80071e4:	68ba      	ldr	r2, [r7, #8]
 80071e6:	4302      	orrs	r2, r0
 80071e8:	3340      	adds	r3, #64	; 0x40
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	440b      	add	r3, r1
 80071ee:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80071f0:	2300      	movs	r3, #0
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3714      	adds	r7, #20
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr

080071fe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80071fe:	b480      	push	{r7}
 8007200:	b083      	sub	sp, #12
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
 8007206:	460b      	mov	r3, r1
 8007208:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	887a      	ldrh	r2, [r7, #2]
 8007210:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007212:	2300      	movs	r3, #0
}
 8007214:	4618      	mov	r0, r3
 8007216:	370c      	adds	r7, #12
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr

08007220 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007220:	b480      	push	{r7}
 8007222:	b083      	sub	sp, #12
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	460b      	mov	r3, r1
 800722a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800722c:	bf00      	nop
 800722e:	370c      	adds	r7, #12
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr

08007238 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b086      	sub	sp, #24
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d101      	bne.n	800724a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007246:	2301      	movs	r3, #1
 8007248:	e25b      	b.n	8007702 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f003 0301 	and.w	r3, r3, #1
 8007252:	2b00      	cmp	r3, #0
 8007254:	d075      	beq.n	8007342 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007256:	4ba3      	ldr	r3, [pc, #652]	; (80074e4 <HAL_RCC_OscConfig+0x2ac>)
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	f003 030c 	and.w	r3, r3, #12
 800725e:	2b04      	cmp	r3, #4
 8007260:	d00c      	beq.n	800727c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007262:	4ba0      	ldr	r3, [pc, #640]	; (80074e4 <HAL_RCC_OscConfig+0x2ac>)
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800726a:	2b08      	cmp	r3, #8
 800726c:	d112      	bne.n	8007294 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800726e:	4b9d      	ldr	r3, [pc, #628]	; (80074e4 <HAL_RCC_OscConfig+0x2ac>)
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007276:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800727a:	d10b      	bne.n	8007294 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800727c:	4b99      	ldr	r3, [pc, #612]	; (80074e4 <HAL_RCC_OscConfig+0x2ac>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007284:	2b00      	cmp	r3, #0
 8007286:	d05b      	beq.n	8007340 <HAL_RCC_OscConfig+0x108>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d157      	bne.n	8007340 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007290:	2301      	movs	r3, #1
 8007292:	e236      	b.n	8007702 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800729c:	d106      	bne.n	80072ac <HAL_RCC_OscConfig+0x74>
 800729e:	4b91      	ldr	r3, [pc, #580]	; (80074e4 <HAL_RCC_OscConfig+0x2ac>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a90      	ldr	r2, [pc, #576]	; (80074e4 <HAL_RCC_OscConfig+0x2ac>)
 80072a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072a8:	6013      	str	r3, [r2, #0]
 80072aa:	e01d      	b.n	80072e8 <HAL_RCC_OscConfig+0xb0>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80072b4:	d10c      	bne.n	80072d0 <HAL_RCC_OscConfig+0x98>
 80072b6:	4b8b      	ldr	r3, [pc, #556]	; (80074e4 <HAL_RCC_OscConfig+0x2ac>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a8a      	ldr	r2, [pc, #552]	; (80074e4 <HAL_RCC_OscConfig+0x2ac>)
 80072bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80072c0:	6013      	str	r3, [r2, #0]
 80072c2:	4b88      	ldr	r3, [pc, #544]	; (80074e4 <HAL_RCC_OscConfig+0x2ac>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a87      	ldr	r2, [pc, #540]	; (80074e4 <HAL_RCC_OscConfig+0x2ac>)
 80072c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072cc:	6013      	str	r3, [r2, #0]
 80072ce:	e00b      	b.n	80072e8 <HAL_RCC_OscConfig+0xb0>
 80072d0:	4b84      	ldr	r3, [pc, #528]	; (80074e4 <HAL_RCC_OscConfig+0x2ac>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a83      	ldr	r2, [pc, #524]	; (80074e4 <HAL_RCC_OscConfig+0x2ac>)
 80072d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072da:	6013      	str	r3, [r2, #0]
 80072dc:	4b81      	ldr	r3, [pc, #516]	; (80074e4 <HAL_RCC_OscConfig+0x2ac>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a80      	ldr	r2, [pc, #512]	; (80074e4 <HAL_RCC_OscConfig+0x2ac>)
 80072e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80072e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d013      	beq.n	8007318 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072f0:	f7fa fda2 	bl	8001e38 <HAL_GetTick>
 80072f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072f6:	e008      	b.n	800730a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80072f8:	f7fa fd9e 	bl	8001e38 <HAL_GetTick>
 80072fc:	4602      	mov	r2, r0
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	1ad3      	subs	r3, r2, r3
 8007302:	2b64      	cmp	r3, #100	; 0x64
 8007304:	d901      	bls.n	800730a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007306:	2303      	movs	r3, #3
 8007308:	e1fb      	b.n	8007702 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800730a:	4b76      	ldr	r3, [pc, #472]	; (80074e4 <HAL_RCC_OscConfig+0x2ac>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007312:	2b00      	cmp	r3, #0
 8007314:	d0f0      	beq.n	80072f8 <HAL_RCC_OscConfig+0xc0>
 8007316:	e014      	b.n	8007342 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007318:	f7fa fd8e 	bl	8001e38 <HAL_GetTick>
 800731c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800731e:	e008      	b.n	8007332 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007320:	f7fa fd8a 	bl	8001e38 <HAL_GetTick>
 8007324:	4602      	mov	r2, r0
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	1ad3      	subs	r3, r2, r3
 800732a:	2b64      	cmp	r3, #100	; 0x64
 800732c:	d901      	bls.n	8007332 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800732e:	2303      	movs	r3, #3
 8007330:	e1e7      	b.n	8007702 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007332:	4b6c      	ldr	r3, [pc, #432]	; (80074e4 <HAL_RCC_OscConfig+0x2ac>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800733a:	2b00      	cmp	r3, #0
 800733c:	d1f0      	bne.n	8007320 <HAL_RCC_OscConfig+0xe8>
 800733e:	e000      	b.n	8007342 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007340:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f003 0302 	and.w	r3, r3, #2
 800734a:	2b00      	cmp	r3, #0
 800734c:	d063      	beq.n	8007416 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800734e:	4b65      	ldr	r3, [pc, #404]	; (80074e4 <HAL_RCC_OscConfig+0x2ac>)
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	f003 030c 	and.w	r3, r3, #12
 8007356:	2b00      	cmp	r3, #0
 8007358:	d00b      	beq.n	8007372 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800735a:	4b62      	ldr	r3, [pc, #392]	; (80074e4 <HAL_RCC_OscConfig+0x2ac>)
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007362:	2b08      	cmp	r3, #8
 8007364:	d11c      	bne.n	80073a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007366:	4b5f      	ldr	r3, [pc, #380]	; (80074e4 <HAL_RCC_OscConfig+0x2ac>)
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800736e:	2b00      	cmp	r3, #0
 8007370:	d116      	bne.n	80073a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007372:	4b5c      	ldr	r3, [pc, #368]	; (80074e4 <HAL_RCC_OscConfig+0x2ac>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f003 0302 	and.w	r3, r3, #2
 800737a:	2b00      	cmp	r3, #0
 800737c:	d005      	beq.n	800738a <HAL_RCC_OscConfig+0x152>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	68db      	ldr	r3, [r3, #12]
 8007382:	2b01      	cmp	r3, #1
 8007384:	d001      	beq.n	800738a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007386:	2301      	movs	r3, #1
 8007388:	e1bb      	b.n	8007702 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800738a:	4b56      	ldr	r3, [pc, #344]	; (80074e4 <HAL_RCC_OscConfig+0x2ac>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	691b      	ldr	r3, [r3, #16]
 8007396:	00db      	lsls	r3, r3, #3
 8007398:	4952      	ldr	r1, [pc, #328]	; (80074e4 <HAL_RCC_OscConfig+0x2ac>)
 800739a:	4313      	orrs	r3, r2
 800739c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800739e:	e03a      	b.n	8007416 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	68db      	ldr	r3, [r3, #12]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d020      	beq.n	80073ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80073a8:	4b4f      	ldr	r3, [pc, #316]	; (80074e8 <HAL_RCC_OscConfig+0x2b0>)
 80073aa:	2201      	movs	r2, #1
 80073ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073ae:	f7fa fd43 	bl	8001e38 <HAL_GetTick>
 80073b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073b4:	e008      	b.n	80073c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80073b6:	f7fa fd3f 	bl	8001e38 <HAL_GetTick>
 80073ba:	4602      	mov	r2, r0
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	1ad3      	subs	r3, r2, r3
 80073c0:	2b02      	cmp	r3, #2
 80073c2:	d901      	bls.n	80073c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80073c4:	2303      	movs	r3, #3
 80073c6:	e19c      	b.n	8007702 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073c8:	4b46      	ldr	r3, [pc, #280]	; (80074e4 <HAL_RCC_OscConfig+0x2ac>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f003 0302 	and.w	r3, r3, #2
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d0f0      	beq.n	80073b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073d4:	4b43      	ldr	r3, [pc, #268]	; (80074e4 <HAL_RCC_OscConfig+0x2ac>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	691b      	ldr	r3, [r3, #16]
 80073e0:	00db      	lsls	r3, r3, #3
 80073e2:	4940      	ldr	r1, [pc, #256]	; (80074e4 <HAL_RCC_OscConfig+0x2ac>)
 80073e4:	4313      	orrs	r3, r2
 80073e6:	600b      	str	r3, [r1, #0]
 80073e8:	e015      	b.n	8007416 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80073ea:	4b3f      	ldr	r3, [pc, #252]	; (80074e8 <HAL_RCC_OscConfig+0x2b0>)
 80073ec:	2200      	movs	r2, #0
 80073ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073f0:	f7fa fd22 	bl	8001e38 <HAL_GetTick>
 80073f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80073f6:	e008      	b.n	800740a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80073f8:	f7fa fd1e 	bl	8001e38 <HAL_GetTick>
 80073fc:	4602      	mov	r2, r0
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	1ad3      	subs	r3, r2, r3
 8007402:	2b02      	cmp	r3, #2
 8007404:	d901      	bls.n	800740a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007406:	2303      	movs	r3, #3
 8007408:	e17b      	b.n	8007702 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800740a:	4b36      	ldr	r3, [pc, #216]	; (80074e4 <HAL_RCC_OscConfig+0x2ac>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f003 0302 	and.w	r3, r3, #2
 8007412:	2b00      	cmp	r3, #0
 8007414:	d1f0      	bne.n	80073f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f003 0308 	and.w	r3, r3, #8
 800741e:	2b00      	cmp	r3, #0
 8007420:	d030      	beq.n	8007484 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	695b      	ldr	r3, [r3, #20]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d016      	beq.n	8007458 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800742a:	4b30      	ldr	r3, [pc, #192]	; (80074ec <HAL_RCC_OscConfig+0x2b4>)
 800742c:	2201      	movs	r2, #1
 800742e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007430:	f7fa fd02 	bl	8001e38 <HAL_GetTick>
 8007434:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007436:	e008      	b.n	800744a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007438:	f7fa fcfe 	bl	8001e38 <HAL_GetTick>
 800743c:	4602      	mov	r2, r0
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	1ad3      	subs	r3, r2, r3
 8007442:	2b02      	cmp	r3, #2
 8007444:	d901      	bls.n	800744a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007446:	2303      	movs	r3, #3
 8007448:	e15b      	b.n	8007702 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800744a:	4b26      	ldr	r3, [pc, #152]	; (80074e4 <HAL_RCC_OscConfig+0x2ac>)
 800744c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800744e:	f003 0302 	and.w	r3, r3, #2
 8007452:	2b00      	cmp	r3, #0
 8007454:	d0f0      	beq.n	8007438 <HAL_RCC_OscConfig+0x200>
 8007456:	e015      	b.n	8007484 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007458:	4b24      	ldr	r3, [pc, #144]	; (80074ec <HAL_RCC_OscConfig+0x2b4>)
 800745a:	2200      	movs	r2, #0
 800745c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800745e:	f7fa fceb 	bl	8001e38 <HAL_GetTick>
 8007462:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007464:	e008      	b.n	8007478 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007466:	f7fa fce7 	bl	8001e38 <HAL_GetTick>
 800746a:	4602      	mov	r2, r0
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	1ad3      	subs	r3, r2, r3
 8007470:	2b02      	cmp	r3, #2
 8007472:	d901      	bls.n	8007478 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007474:	2303      	movs	r3, #3
 8007476:	e144      	b.n	8007702 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007478:	4b1a      	ldr	r3, [pc, #104]	; (80074e4 <HAL_RCC_OscConfig+0x2ac>)
 800747a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800747c:	f003 0302 	and.w	r3, r3, #2
 8007480:	2b00      	cmp	r3, #0
 8007482:	d1f0      	bne.n	8007466 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f003 0304 	and.w	r3, r3, #4
 800748c:	2b00      	cmp	r3, #0
 800748e:	f000 80a0 	beq.w	80075d2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007492:	2300      	movs	r3, #0
 8007494:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007496:	4b13      	ldr	r3, [pc, #76]	; (80074e4 <HAL_RCC_OscConfig+0x2ac>)
 8007498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800749a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d10f      	bne.n	80074c2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80074a2:	2300      	movs	r3, #0
 80074a4:	60bb      	str	r3, [r7, #8]
 80074a6:	4b0f      	ldr	r3, [pc, #60]	; (80074e4 <HAL_RCC_OscConfig+0x2ac>)
 80074a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074aa:	4a0e      	ldr	r2, [pc, #56]	; (80074e4 <HAL_RCC_OscConfig+0x2ac>)
 80074ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074b0:	6413      	str	r3, [r2, #64]	; 0x40
 80074b2:	4b0c      	ldr	r3, [pc, #48]	; (80074e4 <HAL_RCC_OscConfig+0x2ac>)
 80074b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074ba:	60bb      	str	r3, [r7, #8]
 80074bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80074be:	2301      	movs	r3, #1
 80074c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074c2:	4b0b      	ldr	r3, [pc, #44]	; (80074f0 <HAL_RCC_OscConfig+0x2b8>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d121      	bne.n	8007512 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80074ce:	4b08      	ldr	r3, [pc, #32]	; (80074f0 <HAL_RCC_OscConfig+0x2b8>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a07      	ldr	r2, [pc, #28]	; (80074f0 <HAL_RCC_OscConfig+0x2b8>)
 80074d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80074da:	f7fa fcad 	bl	8001e38 <HAL_GetTick>
 80074de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074e0:	e011      	b.n	8007506 <HAL_RCC_OscConfig+0x2ce>
 80074e2:	bf00      	nop
 80074e4:	40023800 	.word	0x40023800
 80074e8:	42470000 	.word	0x42470000
 80074ec:	42470e80 	.word	0x42470e80
 80074f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074f4:	f7fa fca0 	bl	8001e38 <HAL_GetTick>
 80074f8:	4602      	mov	r2, r0
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	1ad3      	subs	r3, r2, r3
 80074fe:	2b02      	cmp	r3, #2
 8007500:	d901      	bls.n	8007506 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007502:	2303      	movs	r3, #3
 8007504:	e0fd      	b.n	8007702 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007506:	4b81      	ldr	r3, [pc, #516]	; (800770c <HAL_RCC_OscConfig+0x4d4>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800750e:	2b00      	cmp	r3, #0
 8007510:	d0f0      	beq.n	80074f4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	689b      	ldr	r3, [r3, #8]
 8007516:	2b01      	cmp	r3, #1
 8007518:	d106      	bne.n	8007528 <HAL_RCC_OscConfig+0x2f0>
 800751a:	4b7d      	ldr	r3, [pc, #500]	; (8007710 <HAL_RCC_OscConfig+0x4d8>)
 800751c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800751e:	4a7c      	ldr	r2, [pc, #496]	; (8007710 <HAL_RCC_OscConfig+0x4d8>)
 8007520:	f043 0301 	orr.w	r3, r3, #1
 8007524:	6713      	str	r3, [r2, #112]	; 0x70
 8007526:	e01c      	b.n	8007562 <HAL_RCC_OscConfig+0x32a>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	2b05      	cmp	r3, #5
 800752e:	d10c      	bne.n	800754a <HAL_RCC_OscConfig+0x312>
 8007530:	4b77      	ldr	r3, [pc, #476]	; (8007710 <HAL_RCC_OscConfig+0x4d8>)
 8007532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007534:	4a76      	ldr	r2, [pc, #472]	; (8007710 <HAL_RCC_OscConfig+0x4d8>)
 8007536:	f043 0304 	orr.w	r3, r3, #4
 800753a:	6713      	str	r3, [r2, #112]	; 0x70
 800753c:	4b74      	ldr	r3, [pc, #464]	; (8007710 <HAL_RCC_OscConfig+0x4d8>)
 800753e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007540:	4a73      	ldr	r2, [pc, #460]	; (8007710 <HAL_RCC_OscConfig+0x4d8>)
 8007542:	f043 0301 	orr.w	r3, r3, #1
 8007546:	6713      	str	r3, [r2, #112]	; 0x70
 8007548:	e00b      	b.n	8007562 <HAL_RCC_OscConfig+0x32a>
 800754a:	4b71      	ldr	r3, [pc, #452]	; (8007710 <HAL_RCC_OscConfig+0x4d8>)
 800754c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800754e:	4a70      	ldr	r2, [pc, #448]	; (8007710 <HAL_RCC_OscConfig+0x4d8>)
 8007550:	f023 0301 	bic.w	r3, r3, #1
 8007554:	6713      	str	r3, [r2, #112]	; 0x70
 8007556:	4b6e      	ldr	r3, [pc, #440]	; (8007710 <HAL_RCC_OscConfig+0x4d8>)
 8007558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800755a:	4a6d      	ldr	r2, [pc, #436]	; (8007710 <HAL_RCC_OscConfig+0x4d8>)
 800755c:	f023 0304 	bic.w	r3, r3, #4
 8007560:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d015      	beq.n	8007596 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800756a:	f7fa fc65 	bl	8001e38 <HAL_GetTick>
 800756e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007570:	e00a      	b.n	8007588 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007572:	f7fa fc61 	bl	8001e38 <HAL_GetTick>
 8007576:	4602      	mov	r2, r0
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	1ad3      	subs	r3, r2, r3
 800757c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007580:	4293      	cmp	r3, r2
 8007582:	d901      	bls.n	8007588 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007584:	2303      	movs	r3, #3
 8007586:	e0bc      	b.n	8007702 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007588:	4b61      	ldr	r3, [pc, #388]	; (8007710 <HAL_RCC_OscConfig+0x4d8>)
 800758a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800758c:	f003 0302 	and.w	r3, r3, #2
 8007590:	2b00      	cmp	r3, #0
 8007592:	d0ee      	beq.n	8007572 <HAL_RCC_OscConfig+0x33a>
 8007594:	e014      	b.n	80075c0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007596:	f7fa fc4f 	bl	8001e38 <HAL_GetTick>
 800759a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800759c:	e00a      	b.n	80075b4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800759e:	f7fa fc4b 	bl	8001e38 <HAL_GetTick>
 80075a2:	4602      	mov	r2, r0
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	1ad3      	subs	r3, r2, r3
 80075a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d901      	bls.n	80075b4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80075b0:	2303      	movs	r3, #3
 80075b2:	e0a6      	b.n	8007702 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80075b4:	4b56      	ldr	r3, [pc, #344]	; (8007710 <HAL_RCC_OscConfig+0x4d8>)
 80075b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075b8:	f003 0302 	and.w	r3, r3, #2
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d1ee      	bne.n	800759e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80075c0:	7dfb      	ldrb	r3, [r7, #23]
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	d105      	bne.n	80075d2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80075c6:	4b52      	ldr	r3, [pc, #328]	; (8007710 <HAL_RCC_OscConfig+0x4d8>)
 80075c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ca:	4a51      	ldr	r2, [pc, #324]	; (8007710 <HAL_RCC_OscConfig+0x4d8>)
 80075cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	699b      	ldr	r3, [r3, #24]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	f000 8092 	beq.w	8007700 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80075dc:	4b4c      	ldr	r3, [pc, #304]	; (8007710 <HAL_RCC_OscConfig+0x4d8>)
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	f003 030c 	and.w	r3, r3, #12
 80075e4:	2b08      	cmp	r3, #8
 80075e6:	d05c      	beq.n	80076a2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	699b      	ldr	r3, [r3, #24]
 80075ec:	2b02      	cmp	r3, #2
 80075ee:	d141      	bne.n	8007674 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075f0:	4b48      	ldr	r3, [pc, #288]	; (8007714 <HAL_RCC_OscConfig+0x4dc>)
 80075f2:	2200      	movs	r2, #0
 80075f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075f6:	f7fa fc1f 	bl	8001e38 <HAL_GetTick>
 80075fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075fc:	e008      	b.n	8007610 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80075fe:	f7fa fc1b 	bl	8001e38 <HAL_GetTick>
 8007602:	4602      	mov	r2, r0
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	1ad3      	subs	r3, r2, r3
 8007608:	2b02      	cmp	r3, #2
 800760a:	d901      	bls.n	8007610 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800760c:	2303      	movs	r3, #3
 800760e:	e078      	b.n	8007702 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007610:	4b3f      	ldr	r3, [pc, #252]	; (8007710 <HAL_RCC_OscConfig+0x4d8>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007618:	2b00      	cmp	r3, #0
 800761a:	d1f0      	bne.n	80075fe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	69da      	ldr	r2, [r3, #28]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6a1b      	ldr	r3, [r3, #32]
 8007624:	431a      	orrs	r2, r3
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762a:	019b      	lsls	r3, r3, #6
 800762c:	431a      	orrs	r2, r3
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007632:	085b      	lsrs	r3, r3, #1
 8007634:	3b01      	subs	r3, #1
 8007636:	041b      	lsls	r3, r3, #16
 8007638:	431a      	orrs	r2, r3
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800763e:	061b      	lsls	r3, r3, #24
 8007640:	4933      	ldr	r1, [pc, #204]	; (8007710 <HAL_RCC_OscConfig+0x4d8>)
 8007642:	4313      	orrs	r3, r2
 8007644:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007646:	4b33      	ldr	r3, [pc, #204]	; (8007714 <HAL_RCC_OscConfig+0x4dc>)
 8007648:	2201      	movs	r2, #1
 800764a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800764c:	f7fa fbf4 	bl	8001e38 <HAL_GetTick>
 8007650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007652:	e008      	b.n	8007666 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007654:	f7fa fbf0 	bl	8001e38 <HAL_GetTick>
 8007658:	4602      	mov	r2, r0
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	1ad3      	subs	r3, r2, r3
 800765e:	2b02      	cmp	r3, #2
 8007660:	d901      	bls.n	8007666 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007662:	2303      	movs	r3, #3
 8007664:	e04d      	b.n	8007702 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007666:	4b2a      	ldr	r3, [pc, #168]	; (8007710 <HAL_RCC_OscConfig+0x4d8>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800766e:	2b00      	cmp	r3, #0
 8007670:	d0f0      	beq.n	8007654 <HAL_RCC_OscConfig+0x41c>
 8007672:	e045      	b.n	8007700 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007674:	4b27      	ldr	r3, [pc, #156]	; (8007714 <HAL_RCC_OscConfig+0x4dc>)
 8007676:	2200      	movs	r2, #0
 8007678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800767a:	f7fa fbdd 	bl	8001e38 <HAL_GetTick>
 800767e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007680:	e008      	b.n	8007694 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007682:	f7fa fbd9 	bl	8001e38 <HAL_GetTick>
 8007686:	4602      	mov	r2, r0
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	1ad3      	subs	r3, r2, r3
 800768c:	2b02      	cmp	r3, #2
 800768e:	d901      	bls.n	8007694 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007690:	2303      	movs	r3, #3
 8007692:	e036      	b.n	8007702 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007694:	4b1e      	ldr	r3, [pc, #120]	; (8007710 <HAL_RCC_OscConfig+0x4d8>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800769c:	2b00      	cmp	r3, #0
 800769e:	d1f0      	bne.n	8007682 <HAL_RCC_OscConfig+0x44a>
 80076a0:	e02e      	b.n	8007700 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	699b      	ldr	r3, [r3, #24]
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	d101      	bne.n	80076ae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80076aa:	2301      	movs	r3, #1
 80076ac:	e029      	b.n	8007702 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80076ae:	4b18      	ldr	r3, [pc, #96]	; (8007710 <HAL_RCC_OscConfig+0x4d8>)
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	69db      	ldr	r3, [r3, #28]
 80076be:	429a      	cmp	r2, r3
 80076c0:	d11c      	bne.n	80076fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d115      	bne.n	80076fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80076d0:	68fa      	ldr	r2, [r7, #12]
 80076d2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80076d6:	4013      	ands	r3, r2
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80076dc:	4293      	cmp	r3, r2
 80076de:	d10d      	bne.n	80076fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d106      	bne.n	80076fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d001      	beq.n	8007700 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80076fc:	2301      	movs	r3, #1
 80076fe:	e000      	b.n	8007702 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8007700:	2300      	movs	r3, #0
}
 8007702:	4618      	mov	r0, r3
 8007704:	3718      	adds	r7, #24
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
 800770a:	bf00      	nop
 800770c:	40007000 	.word	0x40007000
 8007710:	40023800 	.word	0x40023800
 8007714:	42470060 	.word	0x42470060

08007718 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b084      	sub	sp, #16
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d101      	bne.n	800772c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007728:	2301      	movs	r3, #1
 800772a:	e0cc      	b.n	80078c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800772c:	4b68      	ldr	r3, [pc, #416]	; (80078d0 <HAL_RCC_ClockConfig+0x1b8>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f003 030f 	and.w	r3, r3, #15
 8007734:	683a      	ldr	r2, [r7, #0]
 8007736:	429a      	cmp	r2, r3
 8007738:	d90c      	bls.n	8007754 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800773a:	4b65      	ldr	r3, [pc, #404]	; (80078d0 <HAL_RCC_ClockConfig+0x1b8>)
 800773c:	683a      	ldr	r2, [r7, #0]
 800773e:	b2d2      	uxtb	r2, r2
 8007740:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007742:	4b63      	ldr	r3, [pc, #396]	; (80078d0 <HAL_RCC_ClockConfig+0x1b8>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f003 030f 	and.w	r3, r3, #15
 800774a:	683a      	ldr	r2, [r7, #0]
 800774c:	429a      	cmp	r2, r3
 800774e:	d001      	beq.n	8007754 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007750:	2301      	movs	r3, #1
 8007752:	e0b8      	b.n	80078c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f003 0302 	and.w	r3, r3, #2
 800775c:	2b00      	cmp	r3, #0
 800775e:	d020      	beq.n	80077a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f003 0304 	and.w	r3, r3, #4
 8007768:	2b00      	cmp	r3, #0
 800776a:	d005      	beq.n	8007778 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800776c:	4b59      	ldr	r3, [pc, #356]	; (80078d4 <HAL_RCC_ClockConfig+0x1bc>)
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	4a58      	ldr	r2, [pc, #352]	; (80078d4 <HAL_RCC_ClockConfig+0x1bc>)
 8007772:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007776:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f003 0308 	and.w	r3, r3, #8
 8007780:	2b00      	cmp	r3, #0
 8007782:	d005      	beq.n	8007790 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007784:	4b53      	ldr	r3, [pc, #332]	; (80078d4 <HAL_RCC_ClockConfig+0x1bc>)
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	4a52      	ldr	r2, [pc, #328]	; (80078d4 <HAL_RCC_ClockConfig+0x1bc>)
 800778a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800778e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007790:	4b50      	ldr	r3, [pc, #320]	; (80078d4 <HAL_RCC_ClockConfig+0x1bc>)
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	494d      	ldr	r1, [pc, #308]	; (80078d4 <HAL_RCC_ClockConfig+0x1bc>)
 800779e:	4313      	orrs	r3, r2
 80077a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f003 0301 	and.w	r3, r3, #1
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d044      	beq.n	8007838 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	d107      	bne.n	80077c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077b6:	4b47      	ldr	r3, [pc, #284]	; (80078d4 <HAL_RCC_ClockConfig+0x1bc>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d119      	bne.n	80077f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	e07f      	b.n	80078c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	2b02      	cmp	r3, #2
 80077cc:	d003      	beq.n	80077d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80077d2:	2b03      	cmp	r3, #3
 80077d4:	d107      	bne.n	80077e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80077d6:	4b3f      	ldr	r3, [pc, #252]	; (80078d4 <HAL_RCC_ClockConfig+0x1bc>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d109      	bne.n	80077f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	e06f      	b.n	80078c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077e6:	4b3b      	ldr	r3, [pc, #236]	; (80078d4 <HAL_RCC_ClockConfig+0x1bc>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f003 0302 	and.w	r3, r3, #2
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d101      	bne.n	80077f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	e067      	b.n	80078c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80077f6:	4b37      	ldr	r3, [pc, #220]	; (80078d4 <HAL_RCC_ClockConfig+0x1bc>)
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	f023 0203 	bic.w	r2, r3, #3
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	4934      	ldr	r1, [pc, #208]	; (80078d4 <HAL_RCC_ClockConfig+0x1bc>)
 8007804:	4313      	orrs	r3, r2
 8007806:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007808:	f7fa fb16 	bl	8001e38 <HAL_GetTick>
 800780c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800780e:	e00a      	b.n	8007826 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007810:	f7fa fb12 	bl	8001e38 <HAL_GetTick>
 8007814:	4602      	mov	r2, r0
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	1ad3      	subs	r3, r2, r3
 800781a:	f241 3288 	movw	r2, #5000	; 0x1388
 800781e:	4293      	cmp	r3, r2
 8007820:	d901      	bls.n	8007826 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007822:	2303      	movs	r3, #3
 8007824:	e04f      	b.n	80078c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007826:	4b2b      	ldr	r3, [pc, #172]	; (80078d4 <HAL_RCC_ClockConfig+0x1bc>)
 8007828:	689b      	ldr	r3, [r3, #8]
 800782a:	f003 020c 	and.w	r2, r3, #12
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	009b      	lsls	r3, r3, #2
 8007834:	429a      	cmp	r2, r3
 8007836:	d1eb      	bne.n	8007810 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007838:	4b25      	ldr	r3, [pc, #148]	; (80078d0 <HAL_RCC_ClockConfig+0x1b8>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f003 030f 	and.w	r3, r3, #15
 8007840:	683a      	ldr	r2, [r7, #0]
 8007842:	429a      	cmp	r2, r3
 8007844:	d20c      	bcs.n	8007860 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007846:	4b22      	ldr	r3, [pc, #136]	; (80078d0 <HAL_RCC_ClockConfig+0x1b8>)
 8007848:	683a      	ldr	r2, [r7, #0]
 800784a:	b2d2      	uxtb	r2, r2
 800784c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800784e:	4b20      	ldr	r3, [pc, #128]	; (80078d0 <HAL_RCC_ClockConfig+0x1b8>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f003 030f 	and.w	r3, r3, #15
 8007856:	683a      	ldr	r2, [r7, #0]
 8007858:	429a      	cmp	r2, r3
 800785a:	d001      	beq.n	8007860 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	e032      	b.n	80078c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f003 0304 	and.w	r3, r3, #4
 8007868:	2b00      	cmp	r3, #0
 800786a:	d008      	beq.n	800787e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800786c:	4b19      	ldr	r3, [pc, #100]	; (80078d4 <HAL_RCC_ClockConfig+0x1bc>)
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	68db      	ldr	r3, [r3, #12]
 8007878:	4916      	ldr	r1, [pc, #88]	; (80078d4 <HAL_RCC_ClockConfig+0x1bc>)
 800787a:	4313      	orrs	r3, r2
 800787c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f003 0308 	and.w	r3, r3, #8
 8007886:	2b00      	cmp	r3, #0
 8007888:	d009      	beq.n	800789e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800788a:	4b12      	ldr	r3, [pc, #72]	; (80078d4 <HAL_RCC_ClockConfig+0x1bc>)
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	691b      	ldr	r3, [r3, #16]
 8007896:	00db      	lsls	r3, r3, #3
 8007898:	490e      	ldr	r1, [pc, #56]	; (80078d4 <HAL_RCC_ClockConfig+0x1bc>)
 800789a:	4313      	orrs	r3, r2
 800789c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800789e:	f000 f821 	bl	80078e4 <HAL_RCC_GetSysClockFreq>
 80078a2:	4601      	mov	r1, r0
 80078a4:	4b0b      	ldr	r3, [pc, #44]	; (80078d4 <HAL_RCC_ClockConfig+0x1bc>)
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	091b      	lsrs	r3, r3, #4
 80078aa:	f003 030f 	and.w	r3, r3, #15
 80078ae:	4a0a      	ldr	r2, [pc, #40]	; (80078d8 <HAL_RCC_ClockConfig+0x1c0>)
 80078b0:	5cd3      	ldrb	r3, [r2, r3]
 80078b2:	fa21 f303 	lsr.w	r3, r1, r3
 80078b6:	4a09      	ldr	r2, [pc, #36]	; (80078dc <HAL_RCC_ClockConfig+0x1c4>)
 80078b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80078ba:	4b09      	ldr	r3, [pc, #36]	; (80078e0 <HAL_RCC_ClockConfig+0x1c8>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4618      	mov	r0, r3
 80078c0:	f7fa f91e 	bl	8001b00 <HAL_InitTick>

  return HAL_OK;
 80078c4:	2300      	movs	r3, #0
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3710      	adds	r7, #16
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}
 80078ce:	bf00      	nop
 80078d0:	40023c00 	.word	0x40023c00
 80078d4:	40023800 	.word	0x40023800
 80078d8:	0801a6c4 	.word	0x0801a6c4
 80078dc:	20000000 	.word	0x20000000
 80078e0:	20000004 	.word	0x20000004

080078e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80078e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078e6:	b085      	sub	sp, #20
 80078e8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80078ea:	2300      	movs	r3, #0
 80078ec:	607b      	str	r3, [r7, #4]
 80078ee:	2300      	movs	r3, #0
 80078f0:	60fb      	str	r3, [r7, #12]
 80078f2:	2300      	movs	r3, #0
 80078f4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80078f6:	2300      	movs	r3, #0
 80078f8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80078fa:	4b63      	ldr	r3, [pc, #396]	; (8007a88 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80078fc:	689b      	ldr	r3, [r3, #8]
 80078fe:	f003 030c 	and.w	r3, r3, #12
 8007902:	2b04      	cmp	r3, #4
 8007904:	d007      	beq.n	8007916 <HAL_RCC_GetSysClockFreq+0x32>
 8007906:	2b08      	cmp	r3, #8
 8007908:	d008      	beq.n	800791c <HAL_RCC_GetSysClockFreq+0x38>
 800790a:	2b00      	cmp	r3, #0
 800790c:	f040 80b4 	bne.w	8007a78 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007910:	4b5e      	ldr	r3, [pc, #376]	; (8007a8c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007912:	60bb      	str	r3, [r7, #8]
       break;
 8007914:	e0b3      	b.n	8007a7e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007916:	4b5e      	ldr	r3, [pc, #376]	; (8007a90 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8007918:	60bb      	str	r3, [r7, #8]
      break;
 800791a:	e0b0      	b.n	8007a7e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800791c:	4b5a      	ldr	r3, [pc, #360]	; (8007a88 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007924:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007926:	4b58      	ldr	r3, [pc, #352]	; (8007a88 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800792e:	2b00      	cmp	r3, #0
 8007930:	d04a      	beq.n	80079c8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007932:	4b55      	ldr	r3, [pc, #340]	; (8007a88 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	099b      	lsrs	r3, r3, #6
 8007938:	f04f 0400 	mov.w	r4, #0
 800793c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007940:	f04f 0200 	mov.w	r2, #0
 8007944:	ea03 0501 	and.w	r5, r3, r1
 8007948:	ea04 0602 	and.w	r6, r4, r2
 800794c:	4629      	mov	r1, r5
 800794e:	4632      	mov	r2, r6
 8007950:	f04f 0300 	mov.w	r3, #0
 8007954:	f04f 0400 	mov.w	r4, #0
 8007958:	0154      	lsls	r4, r2, #5
 800795a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800795e:	014b      	lsls	r3, r1, #5
 8007960:	4619      	mov	r1, r3
 8007962:	4622      	mov	r2, r4
 8007964:	1b49      	subs	r1, r1, r5
 8007966:	eb62 0206 	sbc.w	r2, r2, r6
 800796a:	f04f 0300 	mov.w	r3, #0
 800796e:	f04f 0400 	mov.w	r4, #0
 8007972:	0194      	lsls	r4, r2, #6
 8007974:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007978:	018b      	lsls	r3, r1, #6
 800797a:	1a5b      	subs	r3, r3, r1
 800797c:	eb64 0402 	sbc.w	r4, r4, r2
 8007980:	f04f 0100 	mov.w	r1, #0
 8007984:	f04f 0200 	mov.w	r2, #0
 8007988:	00e2      	lsls	r2, r4, #3
 800798a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800798e:	00d9      	lsls	r1, r3, #3
 8007990:	460b      	mov	r3, r1
 8007992:	4614      	mov	r4, r2
 8007994:	195b      	adds	r3, r3, r5
 8007996:	eb44 0406 	adc.w	r4, r4, r6
 800799a:	f04f 0100 	mov.w	r1, #0
 800799e:	f04f 0200 	mov.w	r2, #0
 80079a2:	0262      	lsls	r2, r4, #9
 80079a4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80079a8:	0259      	lsls	r1, r3, #9
 80079aa:	460b      	mov	r3, r1
 80079ac:	4614      	mov	r4, r2
 80079ae:	4618      	mov	r0, r3
 80079b0:	4621      	mov	r1, r4
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f04f 0400 	mov.w	r4, #0
 80079b8:	461a      	mov	r2, r3
 80079ba:	4623      	mov	r3, r4
 80079bc:	f7f8 fc1a 	bl	80001f4 <__aeabi_uldivmod>
 80079c0:	4603      	mov	r3, r0
 80079c2:	460c      	mov	r4, r1
 80079c4:	60fb      	str	r3, [r7, #12]
 80079c6:	e049      	b.n	8007a5c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80079c8:	4b2f      	ldr	r3, [pc, #188]	; (8007a88 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	099b      	lsrs	r3, r3, #6
 80079ce:	f04f 0400 	mov.w	r4, #0
 80079d2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80079d6:	f04f 0200 	mov.w	r2, #0
 80079da:	ea03 0501 	and.w	r5, r3, r1
 80079de:	ea04 0602 	and.w	r6, r4, r2
 80079e2:	4629      	mov	r1, r5
 80079e4:	4632      	mov	r2, r6
 80079e6:	f04f 0300 	mov.w	r3, #0
 80079ea:	f04f 0400 	mov.w	r4, #0
 80079ee:	0154      	lsls	r4, r2, #5
 80079f0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80079f4:	014b      	lsls	r3, r1, #5
 80079f6:	4619      	mov	r1, r3
 80079f8:	4622      	mov	r2, r4
 80079fa:	1b49      	subs	r1, r1, r5
 80079fc:	eb62 0206 	sbc.w	r2, r2, r6
 8007a00:	f04f 0300 	mov.w	r3, #0
 8007a04:	f04f 0400 	mov.w	r4, #0
 8007a08:	0194      	lsls	r4, r2, #6
 8007a0a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007a0e:	018b      	lsls	r3, r1, #6
 8007a10:	1a5b      	subs	r3, r3, r1
 8007a12:	eb64 0402 	sbc.w	r4, r4, r2
 8007a16:	f04f 0100 	mov.w	r1, #0
 8007a1a:	f04f 0200 	mov.w	r2, #0
 8007a1e:	00e2      	lsls	r2, r4, #3
 8007a20:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007a24:	00d9      	lsls	r1, r3, #3
 8007a26:	460b      	mov	r3, r1
 8007a28:	4614      	mov	r4, r2
 8007a2a:	195b      	adds	r3, r3, r5
 8007a2c:	eb44 0406 	adc.w	r4, r4, r6
 8007a30:	f04f 0100 	mov.w	r1, #0
 8007a34:	f04f 0200 	mov.w	r2, #0
 8007a38:	02a2      	lsls	r2, r4, #10
 8007a3a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007a3e:	0299      	lsls	r1, r3, #10
 8007a40:	460b      	mov	r3, r1
 8007a42:	4614      	mov	r4, r2
 8007a44:	4618      	mov	r0, r3
 8007a46:	4621      	mov	r1, r4
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f04f 0400 	mov.w	r4, #0
 8007a4e:	461a      	mov	r2, r3
 8007a50:	4623      	mov	r3, r4
 8007a52:	f7f8 fbcf 	bl	80001f4 <__aeabi_uldivmod>
 8007a56:	4603      	mov	r3, r0
 8007a58:	460c      	mov	r4, r1
 8007a5a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007a5c:	4b0a      	ldr	r3, [pc, #40]	; (8007a88 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	0c1b      	lsrs	r3, r3, #16
 8007a62:	f003 0303 	and.w	r3, r3, #3
 8007a66:	3301      	adds	r3, #1
 8007a68:	005b      	lsls	r3, r3, #1
 8007a6a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007a6c:	68fa      	ldr	r2, [r7, #12]
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a74:	60bb      	str	r3, [r7, #8]
      break;
 8007a76:	e002      	b.n	8007a7e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007a78:	4b04      	ldr	r3, [pc, #16]	; (8007a8c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007a7a:	60bb      	str	r3, [r7, #8]
      break;
 8007a7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007a7e:	68bb      	ldr	r3, [r7, #8]
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3714      	adds	r7, #20
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a88:	40023800 	.word	0x40023800
 8007a8c:	00f42400 	.word	0x00f42400
 8007a90:	007a1200 	.word	0x007a1200

08007a94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a94:	b480      	push	{r7}
 8007a96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007a98:	4b03      	ldr	r3, [pc, #12]	; (8007aa8 <HAL_RCC_GetHCLKFreq+0x14>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr
 8007aa6:	bf00      	nop
 8007aa8:	20000000 	.word	0x20000000

08007aac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007ab0:	f7ff fff0 	bl	8007a94 <HAL_RCC_GetHCLKFreq>
 8007ab4:	4601      	mov	r1, r0
 8007ab6:	4b05      	ldr	r3, [pc, #20]	; (8007acc <HAL_RCC_GetPCLK1Freq+0x20>)
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	0a9b      	lsrs	r3, r3, #10
 8007abc:	f003 0307 	and.w	r3, r3, #7
 8007ac0:	4a03      	ldr	r2, [pc, #12]	; (8007ad0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007ac2:	5cd3      	ldrb	r3, [r2, r3]
 8007ac4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	bd80      	pop	{r7, pc}
 8007acc:	40023800 	.word	0x40023800
 8007ad0:	0801a6d4 	.word	0x0801a6d4

08007ad4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007ad8:	f7ff ffdc 	bl	8007a94 <HAL_RCC_GetHCLKFreq>
 8007adc:	4601      	mov	r1, r0
 8007ade:	4b05      	ldr	r3, [pc, #20]	; (8007af4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007ae0:	689b      	ldr	r3, [r3, #8]
 8007ae2:	0b5b      	lsrs	r3, r3, #13
 8007ae4:	f003 0307 	and.w	r3, r3, #7
 8007ae8:	4a03      	ldr	r2, [pc, #12]	; (8007af8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007aea:	5cd3      	ldrb	r3, [r2, r3]
 8007aec:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	bd80      	pop	{r7, pc}
 8007af4:	40023800 	.word	0x40023800
 8007af8:	0801a6d4 	.word	0x0801a6d4

08007afc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b083      	sub	sp, #12
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	220f      	movs	r2, #15
 8007b0a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007b0c:	4b12      	ldr	r3, [pc, #72]	; (8007b58 <HAL_RCC_GetClockConfig+0x5c>)
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	f003 0203 	and.w	r2, r3, #3
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007b18:	4b0f      	ldr	r3, [pc, #60]	; (8007b58 <HAL_RCC_GetClockConfig+0x5c>)
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007b24:	4b0c      	ldr	r3, [pc, #48]	; (8007b58 <HAL_RCC_GetClockConfig+0x5c>)
 8007b26:	689b      	ldr	r3, [r3, #8]
 8007b28:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007b30:	4b09      	ldr	r3, [pc, #36]	; (8007b58 <HAL_RCC_GetClockConfig+0x5c>)
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	08db      	lsrs	r3, r3, #3
 8007b36:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007b3e:	4b07      	ldr	r3, [pc, #28]	; (8007b5c <HAL_RCC_GetClockConfig+0x60>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f003 020f 	and.w	r2, r3, #15
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	601a      	str	r2, [r3, #0]
}
 8007b4a:	bf00      	nop
 8007b4c:	370c      	adds	r7, #12
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b54:	4770      	bx	lr
 8007b56:	bf00      	nop
 8007b58:	40023800 	.word	0x40023800
 8007b5c:	40023c00 	.word	0x40023c00

08007b60 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b086      	sub	sp, #24
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f003 0301 	and.w	r3, r3, #1
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d105      	bne.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d035      	beq.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007b88:	4b62      	ldr	r3, [pc, #392]	; (8007d14 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007b8e:	f7fa f953 	bl	8001e38 <HAL_GetTick>
 8007b92:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007b94:	e008      	b.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007b96:	f7fa f94f 	bl	8001e38 <HAL_GetTick>
 8007b9a:	4602      	mov	r2, r0
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	1ad3      	subs	r3, r2, r3
 8007ba0:	2b02      	cmp	r3, #2
 8007ba2:	d901      	bls.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007ba4:	2303      	movs	r3, #3
 8007ba6:	e0b0      	b.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007ba8:	4b5b      	ldr	r3, [pc, #364]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d1f0      	bne.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	019a      	lsls	r2, r3, #6
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	071b      	lsls	r3, r3, #28
 8007bc0:	4955      	ldr	r1, [pc, #340]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007bc8:	4b52      	ldr	r3, [pc, #328]	; (8007d14 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007bca:	2201      	movs	r2, #1
 8007bcc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007bce:	f7fa f933 	bl	8001e38 <HAL_GetTick>
 8007bd2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007bd4:	e008      	b.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007bd6:	f7fa f92f 	bl	8001e38 <HAL_GetTick>
 8007bda:	4602      	mov	r2, r0
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	1ad3      	subs	r3, r2, r3
 8007be0:	2b02      	cmp	r3, #2
 8007be2:	d901      	bls.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007be4:	2303      	movs	r3, #3
 8007be6:	e090      	b.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007be8:	4b4b      	ldr	r3, [pc, #300]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d0f0      	beq.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f003 0302 	and.w	r3, r3, #2
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	f000 8083 	beq.w	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007c02:	2300      	movs	r3, #0
 8007c04:	60fb      	str	r3, [r7, #12]
 8007c06:	4b44      	ldr	r3, [pc, #272]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c0a:	4a43      	ldr	r2, [pc, #268]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c10:	6413      	str	r3, [r2, #64]	; 0x40
 8007c12:	4b41      	ldr	r3, [pc, #260]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c1a:	60fb      	str	r3, [r7, #12]
 8007c1c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007c1e:	4b3f      	ldr	r3, [pc, #252]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a3e      	ldr	r2, [pc, #248]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007c24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c28:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007c2a:	f7fa f905 	bl	8001e38 <HAL_GetTick>
 8007c2e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007c30:	e008      	b.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007c32:	f7fa f901 	bl	8001e38 <HAL_GetTick>
 8007c36:	4602      	mov	r2, r0
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	1ad3      	subs	r3, r2, r3
 8007c3c:	2b02      	cmp	r3, #2
 8007c3e:	d901      	bls.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007c40:	2303      	movs	r3, #3
 8007c42:	e062      	b.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007c44:	4b35      	ldr	r3, [pc, #212]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d0f0      	beq.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007c50:	4b31      	ldr	r3, [pc, #196]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c58:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d02f      	beq.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	68db      	ldr	r3, [r3, #12]
 8007c64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c68:	693a      	ldr	r2, [r7, #16]
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d028      	beq.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007c6e:	4b2a      	ldr	r3, [pc, #168]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c76:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007c78:	4b29      	ldr	r3, [pc, #164]	; (8007d20 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007c7e:	4b28      	ldr	r3, [pc, #160]	; (8007d20 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007c80:	2200      	movs	r2, #0
 8007c82:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007c84:	4a24      	ldr	r2, [pc, #144]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007c8a:	4b23      	ldr	r3, [pc, #140]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c8e:	f003 0301 	and.w	r3, r3, #1
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d114      	bne.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007c96:	f7fa f8cf 	bl	8001e38 <HAL_GetTick>
 8007c9a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c9c:	e00a      	b.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c9e:	f7fa f8cb 	bl	8001e38 <HAL_GetTick>
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	1ad3      	subs	r3, r2, r3
 8007ca8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d901      	bls.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007cb0:	2303      	movs	r3, #3
 8007cb2:	e02a      	b.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007cb4:	4b18      	ldr	r3, [pc, #96]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cb8:	f003 0302 	and.w	r3, r3, #2
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d0ee      	beq.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	68db      	ldr	r3, [r3, #12]
 8007cc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ccc:	d10d      	bne.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007cce:	4b12      	ldr	r3, [pc, #72]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007cd0:	689b      	ldr	r3, [r3, #8]
 8007cd2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	68db      	ldr	r3, [r3, #12]
 8007cda:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007cde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ce2:	490d      	ldr	r1, [pc, #52]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	608b      	str	r3, [r1, #8]
 8007ce8:	e005      	b.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007cea:	4b0b      	ldr	r3, [pc, #44]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	4a0a      	ldr	r2, [pc, #40]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007cf0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007cf4:	6093      	str	r3, [r2, #8]
 8007cf6:	4b08      	ldr	r3, [pc, #32]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007cf8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	68db      	ldr	r3, [r3, #12]
 8007cfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d02:	4905      	ldr	r1, [pc, #20]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007d04:	4313      	orrs	r3, r2
 8007d06:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007d08:	2300      	movs	r3, #0
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3718      	adds	r7, #24
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
 8007d12:	bf00      	nop
 8007d14:	42470068 	.word	0x42470068
 8007d18:	40023800 	.word	0x40023800
 8007d1c:	40007000 	.word	0x40007000
 8007d20:	42470e40 	.word	0x42470e40

08007d24 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b082      	sub	sp, #8
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d101      	bne.n	8007d36 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8007d32:	2301      	movs	r3, #1
 8007d34:	e083      	b.n	8007e3e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	7f5b      	ldrb	r3, [r3, #29]
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d105      	bne.n	8007d4c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2200      	movs	r2, #0
 8007d44:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f7f9 fcde 	bl	8001708 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2202      	movs	r2, #2
 8007d50:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	22ca      	movs	r2, #202	; 0xca
 8007d58:	625a      	str	r2, [r3, #36]	; 0x24
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	2253      	movs	r2, #83	; 0x53
 8007d60:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f000 f897 	bl	8007e96 <RTC_EnterInitMode>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d008      	beq.n	8007d80 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	22ff      	movs	r2, #255	; 0xff
 8007d74:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2204      	movs	r2, #4
 8007d7a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	e05e      	b.n	8007e3e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	689b      	ldr	r3, [r3, #8]
 8007d86:	687a      	ldr	r2, [r7, #4]
 8007d88:	6812      	ldr	r2, [r2, #0]
 8007d8a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007d8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d92:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	6899      	ldr	r1, [r3, #8]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	685a      	ldr	r2, [r3, #4]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	691b      	ldr	r3, [r3, #16]
 8007da2:	431a      	orrs	r2, r3
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	695b      	ldr	r3, [r3, #20]
 8007da8:	431a      	orrs	r2, r3
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	430a      	orrs	r2, r1
 8007db0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	687a      	ldr	r2, [r7, #4]
 8007db8:	68d2      	ldr	r2, [r2, #12]
 8007dba:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	6919      	ldr	r1, [r3, #16]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	689b      	ldr	r3, [r3, #8]
 8007dc6:	041a      	lsls	r2, r3, #16
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	430a      	orrs	r2, r1
 8007dce:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	68da      	ldr	r2, [r3, #12]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007dde:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	689b      	ldr	r3, [r3, #8]
 8007de6:	f003 0320 	and.w	r3, r3, #32
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d10e      	bne.n	8007e0c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 f829 	bl	8007e46 <HAL_RTC_WaitForSynchro>
 8007df4:	4603      	mov	r3, r0
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d008      	beq.n	8007e0c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	22ff      	movs	r2, #255	; 0xff
 8007e00:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2204      	movs	r2, #4
 8007e06:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	e018      	b.n	8007e3e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007e1a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	699a      	ldr	r2, [r3, #24]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	430a      	orrs	r2, r1
 8007e2c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	22ff      	movs	r2, #255	; 0xff
 8007e34:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2201      	movs	r2, #1
 8007e3a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007e3c:	2300      	movs	r3, #0
  }
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3708      	adds	r7, #8
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}

08007e46 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007e46:	b580      	push	{r7, lr}
 8007e48:	b084      	sub	sp, #16
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	68da      	ldr	r2, [r3, #12]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007e60:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007e62:	f7f9 ffe9 	bl	8001e38 <HAL_GetTick>
 8007e66:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007e68:	e009      	b.n	8007e7e <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007e6a:	f7f9 ffe5 	bl	8001e38 <HAL_GetTick>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	1ad3      	subs	r3, r2, r3
 8007e74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e78:	d901      	bls.n	8007e7e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007e7a:	2303      	movs	r3, #3
 8007e7c:	e007      	b.n	8007e8e <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	68db      	ldr	r3, [r3, #12]
 8007e84:	f003 0320 	and.w	r3, r3, #32
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d0ee      	beq.n	8007e6a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007e8c:	2300      	movs	r3, #0
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3710      	adds	r7, #16
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}

08007e96 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007e96:	b580      	push	{r7, lr}
 8007e98:	b084      	sub	sp, #16
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	68db      	ldr	r3, [r3, #12]
 8007ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d119      	bne.n	8007ee4 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007eb8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007eba:	f7f9 ffbd 	bl	8001e38 <HAL_GetTick>
 8007ebe:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007ec0:	e009      	b.n	8007ed6 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007ec2:	f7f9 ffb9 	bl	8001e38 <HAL_GetTick>
 8007ec6:	4602      	mov	r2, r0
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	1ad3      	subs	r3, r2, r3
 8007ecc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ed0:	d901      	bls.n	8007ed6 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8007ed2:	2303      	movs	r3, #3
 8007ed4:	e007      	b.n	8007ee6 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	68db      	ldr	r3, [r3, #12]
 8007edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d0ee      	beq.n	8007ec2 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8007ee4:	2300      	movs	r3, #0
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3710      	adds	r7, #16
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}

08007eee <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007eee:	b580      	push	{r7, lr}
 8007ef0:	b082      	sub	sp, #8
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d101      	bne.n	8007f00 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007efc:	2301      	movs	r3, #1
 8007efe:	e01d      	b.n	8007f3c <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f06:	b2db      	uxtb	r3, r3
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d106      	bne.n	8007f1a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f7f9 fc0d 	bl	8001734 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2202      	movs	r2, #2
 8007f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681a      	ldr	r2, [r3, #0]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	3304      	adds	r3, #4
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	4610      	mov	r0, r2
 8007f2e:	f000 fcd7 	bl	80088e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2201      	movs	r2, #1
 8007f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f3a:	2300      	movs	r3, #0
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3708      	adds	r7, #8
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b085      	sub	sp, #20
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2202      	movs	r2, #2
 8007f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	689b      	ldr	r3, [r3, #8]
 8007f5a:	f003 0307 	and.w	r3, r3, #7
 8007f5e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2b06      	cmp	r3, #6
 8007f64:	d007      	beq.n	8007f76 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	681a      	ldr	r2, [r3, #0]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f042 0201 	orr.w	r2, r2, #1
 8007f74:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2201      	movs	r2, #1
 8007f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007f7e:	2300      	movs	r3, #0
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3714      	adds	r7, #20
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr

08007f8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b085      	sub	sp, #20
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	68da      	ldr	r2, [r3, #12]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f042 0201 	orr.w	r2, r2, #1
 8007fa2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	f003 0307 	and.w	r3, r3, #7
 8007fae:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2b06      	cmp	r3, #6
 8007fb4:	d007      	beq.n	8007fc6 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	681a      	ldr	r2, [r3, #0]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f042 0201 	orr.w	r2, r2, #1
 8007fc4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007fc6:	2300      	movs	r3, #0
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3714      	adds	r7, #20
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr

08007fd4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b082      	sub	sp, #8
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d101      	bne.n	8007fe6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	e01d      	b.n	8008022 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d106      	bne.n	8008000 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f000 f815 	bl	800802a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2202      	movs	r2, #2
 8008004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681a      	ldr	r2, [r3, #0]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	3304      	adds	r3, #4
 8008010:	4619      	mov	r1, r3
 8008012:	4610      	mov	r0, r2
 8008014:	f000 fc64 	bl	80088e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2201      	movs	r2, #1
 800801c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008020:	2300      	movs	r3, #0
}
 8008022:	4618      	mov	r0, r3
 8008024:	3708      	adds	r7, #8
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}

0800802a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800802a:	b480      	push	{r7}
 800802c:	b083      	sub	sp, #12
 800802e:	af00      	add	r7, sp, #0
 8008030:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008032:	bf00      	nop
 8008034:	370c      	adds	r7, #12
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr
	...

08008040 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b084      	sub	sp, #16
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	2201      	movs	r2, #1
 8008050:	6839      	ldr	r1, [r7, #0]
 8008052:	4618      	mov	r0, r3
 8008054:	f000 ffb4 	bl	8008fc0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a15      	ldr	r2, [pc, #84]	; (80080b4 <HAL_TIM_PWM_Start+0x74>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d004      	beq.n	800806c <HAL_TIM_PWM_Start+0x2c>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a14      	ldr	r2, [pc, #80]	; (80080b8 <HAL_TIM_PWM_Start+0x78>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d101      	bne.n	8008070 <HAL_TIM_PWM_Start+0x30>
 800806c:	2301      	movs	r3, #1
 800806e:	e000      	b.n	8008072 <HAL_TIM_PWM_Start+0x32>
 8008070:	2300      	movs	r3, #0
 8008072:	2b00      	cmp	r3, #0
 8008074:	d007      	beq.n	8008086 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008084:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	689b      	ldr	r3, [r3, #8]
 800808c:	f003 0307 	and.w	r3, r3, #7
 8008090:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2b06      	cmp	r3, #6
 8008096:	d007      	beq.n	80080a8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	681a      	ldr	r2, [r3, #0]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f042 0201 	orr.w	r2, r2, #1
 80080a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80080a8:	2300      	movs	r3, #0
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3710      	adds	r7, #16
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
 80080b2:	bf00      	nop
 80080b4:	40010000 	.word	0x40010000
 80080b8:	40010400 	.word	0x40010400

080080bc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b082      	sub	sp, #8
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
 80080c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	2200      	movs	r2, #0
 80080cc:	6839      	ldr	r1, [r7, #0]
 80080ce:	4618      	mov	r0, r3
 80080d0:	f000 ff76 	bl	8008fc0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a22      	ldr	r2, [pc, #136]	; (8008164 <HAL_TIM_PWM_Stop+0xa8>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d004      	beq.n	80080e8 <HAL_TIM_PWM_Stop+0x2c>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a21      	ldr	r2, [pc, #132]	; (8008168 <HAL_TIM_PWM_Stop+0xac>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d101      	bne.n	80080ec <HAL_TIM_PWM_Stop+0x30>
 80080e8:	2301      	movs	r3, #1
 80080ea:	e000      	b.n	80080ee <HAL_TIM_PWM_Stop+0x32>
 80080ec:	2300      	movs	r3, #0
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d017      	beq.n	8008122 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	6a1a      	ldr	r2, [r3, #32]
 80080f8:	f241 1311 	movw	r3, #4369	; 0x1111
 80080fc:	4013      	ands	r3, r2
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d10f      	bne.n	8008122 <HAL_TIM_PWM_Stop+0x66>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	6a1a      	ldr	r2, [r3, #32]
 8008108:	f240 4344 	movw	r3, #1092	; 0x444
 800810c:	4013      	ands	r3, r2
 800810e:	2b00      	cmp	r3, #0
 8008110:	d107      	bne.n	8008122 <HAL_TIM_PWM_Stop+0x66>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008120:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	6a1a      	ldr	r2, [r3, #32]
 8008128:	f241 1311 	movw	r3, #4369	; 0x1111
 800812c:	4013      	ands	r3, r2
 800812e:	2b00      	cmp	r3, #0
 8008130:	d10f      	bne.n	8008152 <HAL_TIM_PWM_Stop+0x96>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	6a1a      	ldr	r2, [r3, #32]
 8008138:	f240 4344 	movw	r3, #1092	; 0x444
 800813c:	4013      	ands	r3, r2
 800813e:	2b00      	cmp	r3, #0
 8008140:	d107      	bne.n	8008152 <HAL_TIM_PWM_Stop+0x96>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	681a      	ldr	r2, [r3, #0]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f022 0201 	bic.w	r2, r2, #1
 8008150:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2201      	movs	r2, #1
 8008156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800815a:	2300      	movs	r3, #0
}
 800815c:	4618      	mov	r0, r3
 800815e:	3708      	adds	r7, #8
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}
 8008164:	40010000 	.word	0x40010000
 8008168:	40010400 	.word	0x40010400

0800816c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b086      	sub	sp, #24
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d101      	bne.n	8008180 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800817c:	2301      	movs	r3, #1
 800817e:	e083      	b.n	8008288 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008186:	b2db      	uxtb	r3, r3
 8008188:	2b00      	cmp	r3, #0
 800818a:	d106      	bne.n	800819a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2200      	movs	r2, #0
 8008190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f7f9 fb4b 	bl	8001830 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2202      	movs	r2, #2
 800819e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	689b      	ldr	r3, [r3, #8]
 80081a8:	687a      	ldr	r2, [r7, #4]
 80081aa:	6812      	ldr	r2, [r2, #0]
 80081ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80081b0:	f023 0307 	bic.w	r3, r3, #7
 80081b4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681a      	ldr	r2, [r3, #0]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	3304      	adds	r3, #4
 80081be:	4619      	mov	r1, r3
 80081c0:	4610      	mov	r0, r2
 80081c2:	f000 fb8d 	bl	80088e0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	699b      	ldr	r3, [r3, #24]
 80081d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	6a1b      	ldr	r3, [r3, #32]
 80081dc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	697a      	ldr	r2, [r7, #20]
 80081e4:	4313      	orrs	r3, r2
 80081e6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081ee:	f023 0303 	bic.w	r3, r3, #3
 80081f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	689a      	ldr	r2, [r3, #8]
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	699b      	ldr	r3, [r3, #24]
 80081fc:	021b      	lsls	r3, r3, #8
 80081fe:	4313      	orrs	r3, r2
 8008200:	693a      	ldr	r2, [r7, #16]
 8008202:	4313      	orrs	r3, r2
 8008204:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800820c:	f023 030c 	bic.w	r3, r3, #12
 8008210:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008218:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800821c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	68da      	ldr	r2, [r3, #12]
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	69db      	ldr	r3, [r3, #28]
 8008226:	021b      	lsls	r3, r3, #8
 8008228:	4313      	orrs	r3, r2
 800822a:	693a      	ldr	r2, [r7, #16]
 800822c:	4313      	orrs	r3, r2
 800822e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	691b      	ldr	r3, [r3, #16]
 8008234:	011a      	lsls	r2, r3, #4
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	6a1b      	ldr	r3, [r3, #32]
 800823a:	031b      	lsls	r3, r3, #12
 800823c:	4313      	orrs	r3, r2
 800823e:	693a      	ldr	r2, [r7, #16]
 8008240:	4313      	orrs	r3, r2
 8008242:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800824a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008252:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	685a      	ldr	r2, [r3, #4]
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	695b      	ldr	r3, [r3, #20]
 800825c:	011b      	lsls	r3, r3, #4
 800825e:	4313      	orrs	r3, r2
 8008260:	68fa      	ldr	r2, [r7, #12]
 8008262:	4313      	orrs	r3, r2
 8008264:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	697a      	ldr	r2, [r7, #20]
 800826c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	693a      	ldr	r2, [r7, #16]
 8008274:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	68fa      	ldr	r2, [r7, #12]
 800827c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2201      	movs	r2, #1
 8008282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008286:	2300      	movs	r3, #0
}
 8008288:	4618      	mov	r0, r3
 800828a:	3718      	adds	r7, #24
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}

08008290 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b082      	sub	sp, #8
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d002      	beq.n	80082a6 <HAL_TIM_Encoder_Start+0x16>
 80082a0:	2b04      	cmp	r3, #4
 80082a2:	d008      	beq.n	80082b6 <HAL_TIM_Encoder_Start+0x26>
 80082a4:	e00f      	b.n	80082c6 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	2201      	movs	r2, #1
 80082ac:	2100      	movs	r1, #0
 80082ae:	4618      	mov	r0, r3
 80082b0:	f000 fe86 	bl	8008fc0 <TIM_CCxChannelCmd>
      break;
 80082b4:	e016      	b.n	80082e4 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	2201      	movs	r2, #1
 80082bc:	2104      	movs	r1, #4
 80082be:	4618      	mov	r0, r3
 80082c0:	f000 fe7e 	bl	8008fc0 <TIM_CCxChannelCmd>
      break;
 80082c4:	e00e      	b.n	80082e4 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	2201      	movs	r2, #1
 80082cc:	2100      	movs	r1, #0
 80082ce:	4618      	mov	r0, r3
 80082d0:	f000 fe76 	bl	8008fc0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	2201      	movs	r2, #1
 80082da:	2104      	movs	r1, #4
 80082dc:	4618      	mov	r0, r3
 80082de:	f000 fe6f 	bl	8008fc0 <TIM_CCxChannelCmd>
      break;
 80082e2:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	681a      	ldr	r2, [r3, #0]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f042 0201 	orr.w	r2, r2, #1
 80082f2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80082f4:	2300      	movs	r3, #0
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3708      	adds	r7, #8
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}

080082fe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80082fe:	b580      	push	{r7, lr}
 8008300:	b082      	sub	sp, #8
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	691b      	ldr	r3, [r3, #16]
 800830c:	f003 0302 	and.w	r3, r3, #2
 8008310:	2b02      	cmp	r3, #2
 8008312:	d122      	bne.n	800835a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	68db      	ldr	r3, [r3, #12]
 800831a:	f003 0302 	and.w	r3, r3, #2
 800831e:	2b02      	cmp	r3, #2
 8008320:	d11b      	bne.n	800835a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f06f 0202 	mvn.w	r2, #2
 800832a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2201      	movs	r2, #1
 8008330:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	699b      	ldr	r3, [r3, #24]
 8008338:	f003 0303 	and.w	r3, r3, #3
 800833c:	2b00      	cmp	r3, #0
 800833e:	d003      	beq.n	8008348 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 faae 	bl	80088a2 <HAL_TIM_IC_CaptureCallback>
 8008346:	e005      	b.n	8008354 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f000 faa0 	bl	800888e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f000 fab1 	bl	80088b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2200      	movs	r2, #0
 8008358:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	691b      	ldr	r3, [r3, #16]
 8008360:	f003 0304 	and.w	r3, r3, #4
 8008364:	2b04      	cmp	r3, #4
 8008366:	d122      	bne.n	80083ae <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	68db      	ldr	r3, [r3, #12]
 800836e:	f003 0304 	and.w	r3, r3, #4
 8008372:	2b04      	cmp	r3, #4
 8008374:	d11b      	bne.n	80083ae <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f06f 0204 	mvn.w	r2, #4
 800837e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2202      	movs	r2, #2
 8008384:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	699b      	ldr	r3, [r3, #24]
 800838c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008390:	2b00      	cmp	r3, #0
 8008392:	d003      	beq.n	800839c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f000 fa84 	bl	80088a2 <HAL_TIM_IC_CaptureCallback>
 800839a:	e005      	b.n	80083a8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f000 fa76 	bl	800888e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 fa87 	bl	80088b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2200      	movs	r2, #0
 80083ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	691b      	ldr	r3, [r3, #16]
 80083b4:	f003 0308 	and.w	r3, r3, #8
 80083b8:	2b08      	cmp	r3, #8
 80083ba:	d122      	bne.n	8008402 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	68db      	ldr	r3, [r3, #12]
 80083c2:	f003 0308 	and.w	r3, r3, #8
 80083c6:	2b08      	cmp	r3, #8
 80083c8:	d11b      	bne.n	8008402 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f06f 0208 	mvn.w	r2, #8
 80083d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2204      	movs	r2, #4
 80083d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	69db      	ldr	r3, [r3, #28]
 80083e0:	f003 0303 	and.w	r3, r3, #3
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d003      	beq.n	80083f0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 fa5a 	bl	80088a2 <HAL_TIM_IC_CaptureCallback>
 80083ee:	e005      	b.n	80083fc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 fa4c 	bl	800888e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 fa5d 	bl	80088b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2200      	movs	r2, #0
 8008400:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	691b      	ldr	r3, [r3, #16]
 8008408:	f003 0310 	and.w	r3, r3, #16
 800840c:	2b10      	cmp	r3, #16
 800840e:	d122      	bne.n	8008456 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	68db      	ldr	r3, [r3, #12]
 8008416:	f003 0310 	and.w	r3, r3, #16
 800841a:	2b10      	cmp	r3, #16
 800841c:	d11b      	bne.n	8008456 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f06f 0210 	mvn.w	r2, #16
 8008426:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2208      	movs	r2, #8
 800842c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	69db      	ldr	r3, [r3, #28]
 8008434:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008438:	2b00      	cmp	r3, #0
 800843a:	d003      	beq.n	8008444 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f000 fa30 	bl	80088a2 <HAL_TIM_IC_CaptureCallback>
 8008442:	e005      	b.n	8008450 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 fa22 	bl	800888e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f000 fa33 	bl	80088b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2200      	movs	r2, #0
 8008454:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	691b      	ldr	r3, [r3, #16]
 800845c:	f003 0301 	and.w	r3, r3, #1
 8008460:	2b01      	cmp	r3, #1
 8008462:	d10e      	bne.n	8008482 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	68db      	ldr	r3, [r3, #12]
 800846a:	f003 0301 	and.w	r3, r3, #1
 800846e:	2b01      	cmp	r3, #1
 8008470:	d107      	bne.n	8008482 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f06f 0201 	mvn.w	r2, #1
 800847a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f7f8 ff33 	bl	80012e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	691b      	ldr	r3, [r3, #16]
 8008488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800848c:	2b80      	cmp	r3, #128	; 0x80
 800848e:	d10e      	bne.n	80084ae <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	68db      	ldr	r3, [r3, #12]
 8008496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800849a:	2b80      	cmp	r3, #128	; 0x80
 800849c:	d107      	bne.n	80084ae <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80084a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f000 fe87 	bl	80091bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	691b      	ldr	r3, [r3, #16]
 80084b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084b8:	2b40      	cmp	r3, #64	; 0x40
 80084ba:	d10e      	bne.n	80084da <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	68db      	ldr	r3, [r3, #12]
 80084c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084c6:	2b40      	cmp	r3, #64	; 0x40
 80084c8:	d107      	bne.n	80084da <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80084d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 f9f8 	bl	80088ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	691b      	ldr	r3, [r3, #16]
 80084e0:	f003 0320 	and.w	r3, r3, #32
 80084e4:	2b20      	cmp	r3, #32
 80084e6:	d10e      	bne.n	8008506 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	68db      	ldr	r3, [r3, #12]
 80084ee:	f003 0320 	and.w	r3, r3, #32
 80084f2:	2b20      	cmp	r3, #32
 80084f4:	d107      	bne.n	8008506 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f06f 0220 	mvn.w	r2, #32
 80084fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f000 fe51 	bl	80091a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008506:	bf00      	nop
 8008508:	3708      	adds	r7, #8
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
	...

08008510 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
 8008516:	60f8      	str	r0, [r7, #12]
 8008518:	60b9      	str	r1, [r7, #8]
 800851a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008522:	2b01      	cmp	r3, #1
 8008524:	d101      	bne.n	800852a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008526:	2302      	movs	r3, #2
 8008528:	e0b4      	b.n	8008694 <HAL_TIM_PWM_ConfigChannel+0x184>
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2201      	movs	r2, #1
 800852e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2202      	movs	r2, #2
 8008536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2b0c      	cmp	r3, #12
 800853e:	f200 809f 	bhi.w	8008680 <HAL_TIM_PWM_ConfigChannel+0x170>
 8008542:	a201      	add	r2, pc, #4	; (adr r2, 8008548 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8008544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008548:	0800857d 	.word	0x0800857d
 800854c:	08008681 	.word	0x08008681
 8008550:	08008681 	.word	0x08008681
 8008554:	08008681 	.word	0x08008681
 8008558:	080085bd 	.word	0x080085bd
 800855c:	08008681 	.word	0x08008681
 8008560:	08008681 	.word	0x08008681
 8008564:	08008681 	.word	0x08008681
 8008568:	080085ff 	.word	0x080085ff
 800856c:	08008681 	.word	0x08008681
 8008570:	08008681 	.word	0x08008681
 8008574:	08008681 	.word	0x08008681
 8008578:	0800863f 	.word	0x0800863f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	68b9      	ldr	r1, [r7, #8]
 8008582:	4618      	mov	r0, r3
 8008584:	f000 fa4c 	bl	8008a20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	699a      	ldr	r2, [r3, #24]
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f042 0208 	orr.w	r2, r2, #8
 8008596:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	699a      	ldr	r2, [r3, #24]
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f022 0204 	bic.w	r2, r2, #4
 80085a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	6999      	ldr	r1, [r3, #24]
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	691a      	ldr	r2, [r3, #16]
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	430a      	orrs	r2, r1
 80085b8:	619a      	str	r2, [r3, #24]
      break;
 80085ba:	e062      	b.n	8008682 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	68b9      	ldr	r1, [r7, #8]
 80085c2:	4618      	mov	r0, r3
 80085c4:	f000 fa9c 	bl	8008b00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	699a      	ldr	r2, [r3, #24]
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80085d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	699a      	ldr	r2, [r3, #24]
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	6999      	ldr	r1, [r3, #24]
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	691b      	ldr	r3, [r3, #16]
 80085f2:	021a      	lsls	r2, r3, #8
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	430a      	orrs	r2, r1
 80085fa:	619a      	str	r2, [r3, #24]
      break;
 80085fc:	e041      	b.n	8008682 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	68b9      	ldr	r1, [r7, #8]
 8008604:	4618      	mov	r0, r3
 8008606:	f000 faf1 	bl	8008bec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	69da      	ldr	r2, [r3, #28]
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f042 0208 	orr.w	r2, r2, #8
 8008618:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	69da      	ldr	r2, [r3, #28]
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f022 0204 	bic.w	r2, r2, #4
 8008628:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	69d9      	ldr	r1, [r3, #28]
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	691a      	ldr	r2, [r3, #16]
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	430a      	orrs	r2, r1
 800863a:	61da      	str	r2, [r3, #28]
      break;
 800863c:	e021      	b.n	8008682 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	68b9      	ldr	r1, [r7, #8]
 8008644:	4618      	mov	r0, r3
 8008646:	f000 fb45 	bl	8008cd4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	69da      	ldr	r2, [r3, #28]
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008658:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	69da      	ldr	r2, [r3, #28]
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008668:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	69d9      	ldr	r1, [r3, #28]
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	691b      	ldr	r3, [r3, #16]
 8008674:	021a      	lsls	r2, r3, #8
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	430a      	orrs	r2, r1
 800867c:	61da      	str	r2, [r3, #28]
      break;
 800867e:	e000      	b.n	8008682 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8008680:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2201      	movs	r2, #1
 8008686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2200      	movs	r2, #0
 800868e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008692:	2300      	movs	r3, #0
}
 8008694:	4618      	mov	r0, r3
 8008696:	3710      	adds	r7, #16
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}

0800869c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b084      	sub	sp, #16
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	d101      	bne.n	80086b4 <HAL_TIM_ConfigClockSource+0x18>
 80086b0:	2302      	movs	r3, #2
 80086b2:	e0a6      	b.n	8008802 <HAL_TIM_ConfigClockSource+0x166>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2201      	movs	r2, #1
 80086b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2202      	movs	r2, #2
 80086c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	689b      	ldr	r3, [r3, #8]
 80086ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80086d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80086da:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	68fa      	ldr	r2, [r7, #12]
 80086e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	2b40      	cmp	r3, #64	; 0x40
 80086ea:	d067      	beq.n	80087bc <HAL_TIM_ConfigClockSource+0x120>
 80086ec:	2b40      	cmp	r3, #64	; 0x40
 80086ee:	d80b      	bhi.n	8008708 <HAL_TIM_ConfigClockSource+0x6c>
 80086f0:	2b10      	cmp	r3, #16
 80086f2:	d073      	beq.n	80087dc <HAL_TIM_ConfigClockSource+0x140>
 80086f4:	2b10      	cmp	r3, #16
 80086f6:	d802      	bhi.n	80086fe <HAL_TIM_ConfigClockSource+0x62>
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d06f      	beq.n	80087dc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80086fc:	e078      	b.n	80087f0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80086fe:	2b20      	cmp	r3, #32
 8008700:	d06c      	beq.n	80087dc <HAL_TIM_ConfigClockSource+0x140>
 8008702:	2b30      	cmp	r3, #48	; 0x30
 8008704:	d06a      	beq.n	80087dc <HAL_TIM_ConfigClockSource+0x140>
      break;
 8008706:	e073      	b.n	80087f0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008708:	2b70      	cmp	r3, #112	; 0x70
 800870a:	d00d      	beq.n	8008728 <HAL_TIM_ConfigClockSource+0x8c>
 800870c:	2b70      	cmp	r3, #112	; 0x70
 800870e:	d804      	bhi.n	800871a <HAL_TIM_ConfigClockSource+0x7e>
 8008710:	2b50      	cmp	r3, #80	; 0x50
 8008712:	d033      	beq.n	800877c <HAL_TIM_ConfigClockSource+0xe0>
 8008714:	2b60      	cmp	r3, #96	; 0x60
 8008716:	d041      	beq.n	800879c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8008718:	e06a      	b.n	80087f0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800871a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800871e:	d066      	beq.n	80087ee <HAL_TIM_ConfigClockSource+0x152>
 8008720:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008724:	d017      	beq.n	8008756 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8008726:	e063      	b.n	80087f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6818      	ldr	r0, [r3, #0]
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	6899      	ldr	r1, [r3, #8]
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	685a      	ldr	r2, [r3, #4]
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	68db      	ldr	r3, [r3, #12]
 8008738:	f000 fc22 	bl	8008f80 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	689b      	ldr	r3, [r3, #8]
 8008742:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800874a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	68fa      	ldr	r2, [r7, #12]
 8008752:	609a      	str	r2, [r3, #8]
      break;
 8008754:	e04c      	b.n	80087f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6818      	ldr	r0, [r3, #0]
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	6899      	ldr	r1, [r3, #8]
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	685a      	ldr	r2, [r3, #4]
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	68db      	ldr	r3, [r3, #12]
 8008766:	f000 fc0b 	bl	8008f80 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	689a      	ldr	r2, [r3, #8]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008778:	609a      	str	r2, [r3, #8]
      break;
 800877a:	e039      	b.n	80087f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6818      	ldr	r0, [r3, #0]
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	6859      	ldr	r1, [r3, #4]
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	68db      	ldr	r3, [r3, #12]
 8008788:	461a      	mov	r2, r3
 800878a:	f000 fb7f 	bl	8008e8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	2150      	movs	r1, #80	; 0x50
 8008794:	4618      	mov	r0, r3
 8008796:	f000 fbd8 	bl	8008f4a <TIM_ITRx_SetConfig>
      break;
 800879a:	e029      	b.n	80087f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6818      	ldr	r0, [r3, #0]
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	6859      	ldr	r1, [r3, #4]
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	68db      	ldr	r3, [r3, #12]
 80087a8:	461a      	mov	r2, r3
 80087aa:	f000 fb9e 	bl	8008eea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	2160      	movs	r1, #96	; 0x60
 80087b4:	4618      	mov	r0, r3
 80087b6:	f000 fbc8 	bl	8008f4a <TIM_ITRx_SetConfig>
      break;
 80087ba:	e019      	b.n	80087f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6818      	ldr	r0, [r3, #0]
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	6859      	ldr	r1, [r3, #4]
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	68db      	ldr	r3, [r3, #12]
 80087c8:	461a      	mov	r2, r3
 80087ca:	f000 fb5f 	bl	8008e8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	2140      	movs	r1, #64	; 0x40
 80087d4:	4618      	mov	r0, r3
 80087d6:	f000 fbb8 	bl	8008f4a <TIM_ITRx_SetConfig>
      break;
 80087da:	e009      	b.n	80087f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681a      	ldr	r2, [r3, #0]
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4619      	mov	r1, r3
 80087e6:	4610      	mov	r0, r2
 80087e8:	f000 fbaf 	bl	8008f4a <TIM_ITRx_SetConfig>
      break;
 80087ec:	e000      	b.n	80087f0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80087ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2201      	movs	r2, #1
 80087f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2200      	movs	r2, #0
 80087fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008800:	2300      	movs	r3, #0
}
 8008802:	4618      	mov	r0, r3
 8008804:	3710      	adds	r7, #16
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}

0800880a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800880a:	b580      	push	{r7, lr}
 800880c:	b082      	sub	sp, #8
 800880e:	af00      	add	r7, sp, #0
 8008810:	6078      	str	r0, [r7, #4]
 8008812:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800881a:	2b01      	cmp	r3, #1
 800881c:	d101      	bne.n	8008822 <HAL_TIM_SlaveConfigSynchro+0x18>
 800881e:	2302      	movs	r3, #2
 8008820:	e031      	b.n	8008886 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2201      	movs	r2, #1
 8008826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2202      	movs	r2, #2
 800882e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8008832:	6839      	ldr	r1, [r7, #0]
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f000 faa3 	bl	8008d80 <TIM_SlaveTimer_SetConfig>
 800883a:	4603      	mov	r3, r0
 800883c:	2b00      	cmp	r3, #0
 800883e:	d009      	beq.n	8008854 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2201      	movs	r2, #1
 8008844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2200      	movs	r2, #0
 800884c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8008850:	2301      	movs	r3, #1
 8008852:	e018      	b.n	8008886 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	68da      	ldr	r2, [r3, #12]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008862:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	68da      	ldr	r2, [r3, #12]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008872:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2201      	movs	r2, #1
 8008878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2200      	movs	r2, #0
 8008880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008884:	2300      	movs	r3, #0
}
 8008886:	4618      	mov	r0, r3
 8008888:	3708      	adds	r7, #8
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}

0800888e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800888e:	b480      	push	{r7}
 8008890:	b083      	sub	sp, #12
 8008892:	af00      	add	r7, sp, #0
 8008894:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008896:	bf00      	nop
 8008898:	370c      	adds	r7, #12
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr

080088a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80088a2:	b480      	push	{r7}
 80088a4:	b083      	sub	sp, #12
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80088aa:	bf00      	nop
 80088ac:	370c      	adds	r7, #12
 80088ae:	46bd      	mov	sp, r7
 80088b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b4:	4770      	bx	lr

080088b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80088b6:	b480      	push	{r7}
 80088b8:	b083      	sub	sp, #12
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80088be:	bf00      	nop
 80088c0:	370c      	adds	r7, #12
 80088c2:	46bd      	mov	sp, r7
 80088c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c8:	4770      	bx	lr

080088ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80088ca:	b480      	push	{r7}
 80088cc:	b083      	sub	sp, #12
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80088d2:	bf00      	nop
 80088d4:	370c      	adds	r7, #12
 80088d6:	46bd      	mov	sp, r7
 80088d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088dc:	4770      	bx	lr
	...

080088e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b085      	sub	sp, #20
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
 80088e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	4a40      	ldr	r2, [pc, #256]	; (80089f4 <TIM_Base_SetConfig+0x114>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d013      	beq.n	8008920 <TIM_Base_SetConfig+0x40>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088fe:	d00f      	beq.n	8008920 <TIM_Base_SetConfig+0x40>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	4a3d      	ldr	r2, [pc, #244]	; (80089f8 <TIM_Base_SetConfig+0x118>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d00b      	beq.n	8008920 <TIM_Base_SetConfig+0x40>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	4a3c      	ldr	r2, [pc, #240]	; (80089fc <TIM_Base_SetConfig+0x11c>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d007      	beq.n	8008920 <TIM_Base_SetConfig+0x40>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	4a3b      	ldr	r2, [pc, #236]	; (8008a00 <TIM_Base_SetConfig+0x120>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d003      	beq.n	8008920 <TIM_Base_SetConfig+0x40>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	4a3a      	ldr	r2, [pc, #232]	; (8008a04 <TIM_Base_SetConfig+0x124>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d108      	bne.n	8008932 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008926:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	68fa      	ldr	r2, [r7, #12]
 800892e:	4313      	orrs	r3, r2
 8008930:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	4a2f      	ldr	r2, [pc, #188]	; (80089f4 <TIM_Base_SetConfig+0x114>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d02b      	beq.n	8008992 <TIM_Base_SetConfig+0xb2>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008940:	d027      	beq.n	8008992 <TIM_Base_SetConfig+0xb2>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	4a2c      	ldr	r2, [pc, #176]	; (80089f8 <TIM_Base_SetConfig+0x118>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d023      	beq.n	8008992 <TIM_Base_SetConfig+0xb2>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	4a2b      	ldr	r2, [pc, #172]	; (80089fc <TIM_Base_SetConfig+0x11c>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d01f      	beq.n	8008992 <TIM_Base_SetConfig+0xb2>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	4a2a      	ldr	r2, [pc, #168]	; (8008a00 <TIM_Base_SetConfig+0x120>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d01b      	beq.n	8008992 <TIM_Base_SetConfig+0xb2>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	4a29      	ldr	r2, [pc, #164]	; (8008a04 <TIM_Base_SetConfig+0x124>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d017      	beq.n	8008992 <TIM_Base_SetConfig+0xb2>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	4a28      	ldr	r2, [pc, #160]	; (8008a08 <TIM_Base_SetConfig+0x128>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d013      	beq.n	8008992 <TIM_Base_SetConfig+0xb2>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	4a27      	ldr	r2, [pc, #156]	; (8008a0c <TIM_Base_SetConfig+0x12c>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d00f      	beq.n	8008992 <TIM_Base_SetConfig+0xb2>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	4a26      	ldr	r2, [pc, #152]	; (8008a10 <TIM_Base_SetConfig+0x130>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d00b      	beq.n	8008992 <TIM_Base_SetConfig+0xb2>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	4a25      	ldr	r2, [pc, #148]	; (8008a14 <TIM_Base_SetConfig+0x134>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d007      	beq.n	8008992 <TIM_Base_SetConfig+0xb2>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	4a24      	ldr	r2, [pc, #144]	; (8008a18 <TIM_Base_SetConfig+0x138>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d003      	beq.n	8008992 <TIM_Base_SetConfig+0xb2>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	4a23      	ldr	r2, [pc, #140]	; (8008a1c <TIM_Base_SetConfig+0x13c>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d108      	bne.n	80089a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008998:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	68db      	ldr	r3, [r3, #12]
 800899e:	68fa      	ldr	r2, [r7, #12]
 80089a0:	4313      	orrs	r3, r2
 80089a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	695b      	ldr	r3, [r3, #20]
 80089ae:	4313      	orrs	r3, r2
 80089b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	68fa      	ldr	r2, [r7, #12]
 80089b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	689a      	ldr	r2, [r3, #8]
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	681a      	ldr	r2, [r3, #0]
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	4a0a      	ldr	r2, [pc, #40]	; (80089f4 <TIM_Base_SetConfig+0x114>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d003      	beq.n	80089d8 <TIM_Base_SetConfig+0xf8>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	4a0c      	ldr	r2, [pc, #48]	; (8008a04 <TIM_Base_SetConfig+0x124>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d103      	bne.n	80089e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	691a      	ldr	r2, [r3, #16]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2201      	movs	r2, #1
 80089e4:	615a      	str	r2, [r3, #20]
}
 80089e6:	bf00      	nop
 80089e8:	3714      	adds	r7, #20
 80089ea:	46bd      	mov	sp, r7
 80089ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f0:	4770      	bx	lr
 80089f2:	bf00      	nop
 80089f4:	40010000 	.word	0x40010000
 80089f8:	40000400 	.word	0x40000400
 80089fc:	40000800 	.word	0x40000800
 8008a00:	40000c00 	.word	0x40000c00
 8008a04:	40010400 	.word	0x40010400
 8008a08:	40014000 	.word	0x40014000
 8008a0c:	40014400 	.word	0x40014400
 8008a10:	40014800 	.word	0x40014800
 8008a14:	40001800 	.word	0x40001800
 8008a18:	40001c00 	.word	0x40001c00
 8008a1c:	40002000 	.word	0x40002000

08008a20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b087      	sub	sp, #28
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
 8008a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6a1b      	ldr	r3, [r3, #32]
 8008a2e:	f023 0201 	bic.w	r2, r3, #1
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6a1b      	ldr	r3, [r3, #32]
 8008a3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	699b      	ldr	r3, [r3, #24]
 8008a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f023 0303 	bic.w	r3, r3, #3
 8008a56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	68fa      	ldr	r2, [r7, #12]
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	f023 0302 	bic.w	r3, r3, #2
 8008a68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	689b      	ldr	r3, [r3, #8]
 8008a6e:	697a      	ldr	r2, [r7, #20]
 8008a70:	4313      	orrs	r3, r2
 8008a72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	4a20      	ldr	r2, [pc, #128]	; (8008af8 <TIM_OC1_SetConfig+0xd8>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d003      	beq.n	8008a84 <TIM_OC1_SetConfig+0x64>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	4a1f      	ldr	r2, [pc, #124]	; (8008afc <TIM_OC1_SetConfig+0xdc>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d10c      	bne.n	8008a9e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	f023 0308 	bic.w	r3, r3, #8
 8008a8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	68db      	ldr	r3, [r3, #12]
 8008a90:	697a      	ldr	r2, [r7, #20]
 8008a92:	4313      	orrs	r3, r2
 8008a94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	f023 0304 	bic.w	r3, r3, #4
 8008a9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	4a15      	ldr	r2, [pc, #84]	; (8008af8 <TIM_OC1_SetConfig+0xd8>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d003      	beq.n	8008aae <TIM_OC1_SetConfig+0x8e>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	4a14      	ldr	r2, [pc, #80]	; (8008afc <TIM_OC1_SetConfig+0xdc>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d111      	bne.n	8008ad2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ab4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008ab6:	693b      	ldr	r3, [r7, #16]
 8008ab8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008abc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	695b      	ldr	r3, [r3, #20]
 8008ac2:	693a      	ldr	r2, [r7, #16]
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	699b      	ldr	r3, [r3, #24]
 8008acc:	693a      	ldr	r2, [r7, #16]
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	693a      	ldr	r2, [r7, #16]
 8008ad6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	68fa      	ldr	r2, [r7, #12]
 8008adc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	685a      	ldr	r2, [r3, #4]
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	697a      	ldr	r2, [r7, #20]
 8008aea:	621a      	str	r2, [r3, #32]
}
 8008aec:	bf00      	nop
 8008aee:	371c      	adds	r7, #28
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr
 8008af8:	40010000 	.word	0x40010000
 8008afc:	40010400 	.word	0x40010400

08008b00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b087      	sub	sp, #28
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
 8008b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6a1b      	ldr	r3, [r3, #32]
 8008b0e:	f023 0210 	bic.w	r2, r3, #16
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6a1b      	ldr	r3, [r3, #32]
 8008b1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	685b      	ldr	r3, [r3, #4]
 8008b20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	699b      	ldr	r3, [r3, #24]
 8008b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	021b      	lsls	r3, r3, #8
 8008b3e:	68fa      	ldr	r2, [r7, #12]
 8008b40:	4313      	orrs	r3, r2
 8008b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	f023 0320 	bic.w	r3, r3, #32
 8008b4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	689b      	ldr	r3, [r3, #8]
 8008b50:	011b      	lsls	r3, r3, #4
 8008b52:	697a      	ldr	r2, [r7, #20]
 8008b54:	4313      	orrs	r3, r2
 8008b56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	4a22      	ldr	r2, [pc, #136]	; (8008be4 <TIM_OC2_SetConfig+0xe4>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d003      	beq.n	8008b68 <TIM_OC2_SetConfig+0x68>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	4a21      	ldr	r2, [pc, #132]	; (8008be8 <TIM_OC2_SetConfig+0xe8>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d10d      	bne.n	8008b84 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	68db      	ldr	r3, [r3, #12]
 8008b74:	011b      	lsls	r3, r3, #4
 8008b76:	697a      	ldr	r2, [r7, #20]
 8008b78:	4313      	orrs	r3, r2
 8008b7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b82:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	4a17      	ldr	r2, [pc, #92]	; (8008be4 <TIM_OC2_SetConfig+0xe4>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d003      	beq.n	8008b94 <TIM_OC2_SetConfig+0x94>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	4a16      	ldr	r2, [pc, #88]	; (8008be8 <TIM_OC2_SetConfig+0xe8>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d113      	bne.n	8008bbc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008ba2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	695b      	ldr	r3, [r3, #20]
 8008ba8:	009b      	lsls	r3, r3, #2
 8008baa:	693a      	ldr	r2, [r7, #16]
 8008bac:	4313      	orrs	r3, r2
 8008bae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	699b      	ldr	r3, [r3, #24]
 8008bb4:	009b      	lsls	r3, r3, #2
 8008bb6:	693a      	ldr	r2, [r7, #16]
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	693a      	ldr	r2, [r7, #16]
 8008bc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	68fa      	ldr	r2, [r7, #12]
 8008bc6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	685a      	ldr	r2, [r3, #4]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	697a      	ldr	r2, [r7, #20]
 8008bd4:	621a      	str	r2, [r3, #32]
}
 8008bd6:	bf00      	nop
 8008bd8:	371c      	adds	r7, #28
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be0:	4770      	bx	lr
 8008be2:	bf00      	nop
 8008be4:	40010000 	.word	0x40010000
 8008be8:	40010400 	.word	0x40010400

08008bec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b087      	sub	sp, #28
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6a1b      	ldr	r3, [r3, #32]
 8008bfa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6a1b      	ldr	r3, [r3, #32]
 8008c06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	69db      	ldr	r3, [r3, #28]
 8008c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	f023 0303 	bic.w	r3, r3, #3
 8008c22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	68fa      	ldr	r2, [r7, #12]
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008c34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	689b      	ldr	r3, [r3, #8]
 8008c3a:	021b      	lsls	r3, r3, #8
 8008c3c:	697a      	ldr	r2, [r7, #20]
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	4a21      	ldr	r2, [pc, #132]	; (8008ccc <TIM_OC3_SetConfig+0xe0>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d003      	beq.n	8008c52 <TIM_OC3_SetConfig+0x66>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	4a20      	ldr	r2, [pc, #128]	; (8008cd0 <TIM_OC3_SetConfig+0xe4>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d10d      	bne.n	8008c6e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008c58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	68db      	ldr	r3, [r3, #12]
 8008c5e:	021b      	lsls	r3, r3, #8
 8008c60:	697a      	ldr	r2, [r7, #20]
 8008c62:	4313      	orrs	r3, r2
 8008c64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008c6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	4a16      	ldr	r2, [pc, #88]	; (8008ccc <TIM_OC3_SetConfig+0xe0>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d003      	beq.n	8008c7e <TIM_OC3_SetConfig+0x92>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	4a15      	ldr	r2, [pc, #84]	; (8008cd0 <TIM_OC3_SetConfig+0xe4>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d113      	bne.n	8008ca6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008c8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	695b      	ldr	r3, [r3, #20]
 8008c92:	011b      	lsls	r3, r3, #4
 8008c94:	693a      	ldr	r2, [r7, #16]
 8008c96:	4313      	orrs	r3, r2
 8008c98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	699b      	ldr	r3, [r3, #24]
 8008c9e:	011b      	lsls	r3, r3, #4
 8008ca0:	693a      	ldr	r2, [r7, #16]
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	693a      	ldr	r2, [r7, #16]
 8008caa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	68fa      	ldr	r2, [r7, #12]
 8008cb0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	685a      	ldr	r2, [r3, #4]
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	697a      	ldr	r2, [r7, #20]
 8008cbe:	621a      	str	r2, [r3, #32]
}
 8008cc0:	bf00      	nop
 8008cc2:	371c      	adds	r7, #28
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr
 8008ccc:	40010000 	.word	0x40010000
 8008cd0:	40010400 	.word	0x40010400

08008cd4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b087      	sub	sp, #28
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6a1b      	ldr	r3, [r3, #32]
 8008ce2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6a1b      	ldr	r3, [r3, #32]
 8008cee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	69db      	ldr	r3, [r3, #28]
 8008cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	021b      	lsls	r3, r3, #8
 8008d12:	68fa      	ldr	r2, [r7, #12]
 8008d14:	4313      	orrs	r3, r2
 8008d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008d1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	689b      	ldr	r3, [r3, #8]
 8008d24:	031b      	lsls	r3, r3, #12
 8008d26:	693a      	ldr	r2, [r7, #16]
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	4a12      	ldr	r2, [pc, #72]	; (8008d78 <TIM_OC4_SetConfig+0xa4>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d003      	beq.n	8008d3c <TIM_OC4_SetConfig+0x68>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	4a11      	ldr	r2, [pc, #68]	; (8008d7c <TIM_OC4_SetConfig+0xa8>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d109      	bne.n	8008d50 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	695b      	ldr	r3, [r3, #20]
 8008d48:	019b      	lsls	r3, r3, #6
 8008d4a:	697a      	ldr	r2, [r7, #20]
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	697a      	ldr	r2, [r7, #20]
 8008d54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	68fa      	ldr	r2, [r7, #12]
 8008d5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	685a      	ldr	r2, [r3, #4]
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	693a      	ldr	r2, [r7, #16]
 8008d68:	621a      	str	r2, [r3, #32]
}
 8008d6a:	bf00      	nop
 8008d6c:	371c      	adds	r7, #28
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d74:	4770      	bx	lr
 8008d76:	bf00      	nop
 8008d78:	40010000 	.word	0x40010000
 8008d7c:	40010400 	.word	0x40010400

08008d80 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b086      	sub	sp, #24
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	689b      	ldr	r3, [r3, #8]
 8008d90:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d98:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	685b      	ldr	r3, [r3, #4]
 8008d9e:	697a      	ldr	r2, [r7, #20]
 8008da0:	4313      	orrs	r3, r2
 8008da2:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	f023 0307 	bic.w	r3, r3, #7
 8008daa:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	697a      	ldr	r2, [r7, #20]
 8008db2:	4313      	orrs	r3, r2
 8008db4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	697a      	ldr	r2, [r7, #20]
 8008dbc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	2b30      	cmp	r3, #48	; 0x30
 8008dc4:	d05c      	beq.n	8008e80 <TIM_SlaveTimer_SetConfig+0x100>
 8008dc6:	2b30      	cmp	r3, #48	; 0x30
 8008dc8:	d806      	bhi.n	8008dd8 <TIM_SlaveTimer_SetConfig+0x58>
 8008dca:	2b10      	cmp	r3, #16
 8008dcc:	d058      	beq.n	8008e80 <TIM_SlaveTimer_SetConfig+0x100>
 8008dce:	2b20      	cmp	r3, #32
 8008dd0:	d056      	beq.n	8008e80 <TIM_SlaveTimer_SetConfig+0x100>
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d054      	beq.n	8008e80 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8008dd6:	e054      	b.n	8008e82 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8008dd8:	2b50      	cmp	r3, #80	; 0x50
 8008dda:	d03d      	beq.n	8008e58 <TIM_SlaveTimer_SetConfig+0xd8>
 8008ddc:	2b50      	cmp	r3, #80	; 0x50
 8008dde:	d802      	bhi.n	8008de6 <TIM_SlaveTimer_SetConfig+0x66>
 8008de0:	2b40      	cmp	r3, #64	; 0x40
 8008de2:	d010      	beq.n	8008e06 <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8008de4:	e04d      	b.n	8008e82 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8008de6:	2b60      	cmp	r3, #96	; 0x60
 8008de8:	d040      	beq.n	8008e6c <TIM_SlaveTimer_SetConfig+0xec>
 8008dea:	2b70      	cmp	r3, #112	; 0x70
 8008dec:	d000      	beq.n	8008df0 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8008dee:	e048      	b.n	8008e82 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6818      	ldr	r0, [r3, #0]
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	68d9      	ldr	r1, [r3, #12]
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	689a      	ldr	r2, [r3, #8]
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	691b      	ldr	r3, [r3, #16]
 8008e00:	f000 f8be 	bl	8008f80 <TIM_ETR_SetConfig>
      break;
 8008e04:	e03d      	b.n	8008e82 <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	2b05      	cmp	r3, #5
 8008e0c:	d101      	bne.n	8008e12 <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8008e0e:	2301      	movs	r3, #1
 8008e10:	e038      	b.n	8008e84 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	6a1b      	ldr	r3, [r3, #32]
 8008e18:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	6a1a      	ldr	r2, [r3, #32]
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f022 0201 	bic.w	r2, r2, #1
 8008e28:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	699b      	ldr	r3, [r3, #24]
 8008e30:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008e38:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	691b      	ldr	r3, [r3, #16]
 8008e3e:	011b      	lsls	r3, r3, #4
 8008e40:	68fa      	ldr	r2, [r7, #12]
 8008e42:	4313      	orrs	r3, r2
 8008e44:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	68fa      	ldr	r2, [r7, #12]
 8008e4c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	693a      	ldr	r2, [r7, #16]
 8008e54:	621a      	str	r2, [r3, #32]
      break;
 8008e56:	e014      	b.n	8008e82 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6818      	ldr	r0, [r3, #0]
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	6899      	ldr	r1, [r3, #8]
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	691b      	ldr	r3, [r3, #16]
 8008e64:	461a      	mov	r2, r3
 8008e66:	f000 f811 	bl	8008e8c <TIM_TI1_ConfigInputStage>
      break;
 8008e6a:	e00a      	b.n	8008e82 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6818      	ldr	r0, [r3, #0]
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	6899      	ldr	r1, [r3, #8]
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	691b      	ldr	r3, [r3, #16]
 8008e78:	461a      	mov	r2, r3
 8008e7a:	f000 f836 	bl	8008eea <TIM_TI2_ConfigInputStage>
      break;
 8008e7e:	e000      	b.n	8008e82 <TIM_SlaveTimer_SetConfig+0x102>
      break;
 8008e80:	bf00      	nop
  }
  return HAL_OK;
 8008e82:	2300      	movs	r3, #0
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3718      	adds	r7, #24
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}

08008e8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b087      	sub	sp, #28
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	60f8      	str	r0, [r7, #12]
 8008e94:	60b9      	str	r1, [r7, #8]
 8008e96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	6a1b      	ldr	r3, [r3, #32]
 8008e9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	6a1b      	ldr	r3, [r3, #32]
 8008ea2:	f023 0201 	bic.w	r2, r3, #1
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	699b      	ldr	r3, [r3, #24]
 8008eae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008eb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	011b      	lsls	r3, r3, #4
 8008ebc:	693a      	ldr	r2, [r7, #16]
 8008ebe:	4313      	orrs	r3, r2
 8008ec0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	f023 030a 	bic.w	r3, r3, #10
 8008ec8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008eca:	697a      	ldr	r2, [r7, #20]
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	693a      	ldr	r2, [r7, #16]
 8008ed6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	697a      	ldr	r2, [r7, #20]
 8008edc:	621a      	str	r2, [r3, #32]
}
 8008ede:	bf00      	nop
 8008ee0:	371c      	adds	r7, #28
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee8:	4770      	bx	lr

08008eea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008eea:	b480      	push	{r7}
 8008eec:	b087      	sub	sp, #28
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	60f8      	str	r0, [r7, #12]
 8008ef2:	60b9      	str	r1, [r7, #8]
 8008ef4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	6a1b      	ldr	r3, [r3, #32]
 8008efa:	f023 0210 	bic.w	r2, r3, #16
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	699b      	ldr	r3, [r3, #24]
 8008f06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	6a1b      	ldr	r3, [r3, #32]
 8008f0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008f14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	031b      	lsls	r3, r3, #12
 8008f1a:	697a      	ldr	r2, [r7, #20]
 8008f1c:	4313      	orrs	r3, r2
 8008f1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008f26:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	011b      	lsls	r3, r3, #4
 8008f2c:	693a      	ldr	r2, [r7, #16]
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	697a      	ldr	r2, [r7, #20]
 8008f36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	693a      	ldr	r2, [r7, #16]
 8008f3c:	621a      	str	r2, [r3, #32]
}
 8008f3e:	bf00      	nop
 8008f40:	371c      	adds	r7, #28
 8008f42:	46bd      	mov	sp, r7
 8008f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f48:	4770      	bx	lr

08008f4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008f4a:	b480      	push	{r7}
 8008f4c:	b085      	sub	sp, #20
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	6078      	str	r0, [r7, #4]
 8008f52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	689b      	ldr	r3, [r3, #8]
 8008f58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008f62:	683a      	ldr	r2, [r7, #0]
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	4313      	orrs	r3, r2
 8008f68:	f043 0307 	orr.w	r3, r3, #7
 8008f6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	68fa      	ldr	r2, [r7, #12]
 8008f72:	609a      	str	r2, [r3, #8]
}
 8008f74:	bf00      	nop
 8008f76:	3714      	adds	r7, #20
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7e:	4770      	bx	lr

08008f80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008f80:	b480      	push	{r7}
 8008f82:	b087      	sub	sp, #28
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	60f8      	str	r0, [r7, #12]
 8008f88:	60b9      	str	r1, [r7, #8]
 8008f8a:	607a      	str	r2, [r7, #4]
 8008f8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	689b      	ldr	r3, [r3, #8]
 8008f92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008f9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	021a      	lsls	r2, r3, #8
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	431a      	orrs	r2, r3
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	697a      	ldr	r2, [r7, #20]
 8008faa:	4313      	orrs	r3, r2
 8008fac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	697a      	ldr	r2, [r7, #20]
 8008fb2:	609a      	str	r2, [r3, #8]
}
 8008fb4:	bf00      	nop
 8008fb6:	371c      	adds	r7, #28
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbe:	4770      	bx	lr

08008fc0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b087      	sub	sp, #28
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	60f8      	str	r0, [r7, #12]
 8008fc8:	60b9      	str	r1, [r7, #8]
 8008fca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	f003 031f 	and.w	r3, r3, #31
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8008fd8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	6a1a      	ldr	r2, [r3, #32]
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	43db      	mvns	r3, r3
 8008fe2:	401a      	ands	r2, r3
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	6a1a      	ldr	r2, [r3, #32]
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	f003 031f 	and.w	r3, r3, #31
 8008ff2:	6879      	ldr	r1, [r7, #4]
 8008ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8008ff8:	431a      	orrs	r2, r3
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	621a      	str	r2, [r3, #32]
}
 8008ffe:	bf00      	nop
 8009000:	371c      	adds	r7, #28
 8009002:	46bd      	mov	sp, r7
 8009004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009008:	4770      	bx	lr
	...

0800900c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800900c:	b480      	push	{r7}
 800900e:	b085      	sub	sp, #20
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800901c:	2b01      	cmp	r3, #1
 800901e:	d101      	bne.n	8009024 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009020:	2302      	movs	r3, #2
 8009022:	e05a      	b.n	80090da <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2201      	movs	r2, #1
 8009028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2202      	movs	r2, #2
 8009030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	685b      	ldr	r3, [r3, #4]
 800903a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	689b      	ldr	r3, [r3, #8]
 8009042:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800904a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	68fa      	ldr	r2, [r7, #12]
 8009052:	4313      	orrs	r3, r2
 8009054:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	68fa      	ldr	r2, [r7, #12]
 800905c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	4a21      	ldr	r2, [pc, #132]	; (80090e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d022      	beq.n	80090ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009070:	d01d      	beq.n	80090ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4a1d      	ldr	r2, [pc, #116]	; (80090ec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d018      	beq.n	80090ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4a1b      	ldr	r2, [pc, #108]	; (80090f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d013      	beq.n	80090ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4a1a      	ldr	r2, [pc, #104]	; (80090f4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d00e      	beq.n	80090ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	4a18      	ldr	r2, [pc, #96]	; (80090f8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d009      	beq.n	80090ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	4a17      	ldr	r2, [pc, #92]	; (80090fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d004      	beq.n	80090ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	4a15      	ldr	r2, [pc, #84]	; (8009100 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d10c      	bne.n	80090c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80090b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	68ba      	ldr	r2, [r7, #8]
 80090bc:	4313      	orrs	r3, r2
 80090be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	68ba      	ldr	r2, [r7, #8]
 80090c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2201      	movs	r2, #1
 80090cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2200      	movs	r2, #0
 80090d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80090d8:	2300      	movs	r3, #0
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3714      	adds	r7, #20
 80090de:	46bd      	mov	sp, r7
 80090e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e4:	4770      	bx	lr
 80090e6:	bf00      	nop
 80090e8:	40010000 	.word	0x40010000
 80090ec:	40000400 	.word	0x40000400
 80090f0:	40000800 	.word	0x40000800
 80090f4:	40000c00 	.word	0x40000c00
 80090f8:	40010400 	.word	0x40010400
 80090fc:	40014000 	.word	0x40014000
 8009100:	40001800 	.word	0x40001800

08009104 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009104:	b480      	push	{r7}
 8009106:	b085      	sub	sp, #20
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
 800910c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800910e:	2300      	movs	r3, #0
 8009110:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009118:	2b01      	cmp	r3, #1
 800911a:	d101      	bne.n	8009120 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800911c:	2302      	movs	r3, #2
 800911e:	e03d      	b.n	800919c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2201      	movs	r2, #1
 8009124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	68db      	ldr	r3, [r3, #12]
 8009132:	4313      	orrs	r3, r2
 8009134:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	689b      	ldr	r3, [r3, #8]
 8009140:	4313      	orrs	r3, r2
 8009142:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	4313      	orrs	r3, r2
 8009150:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	4313      	orrs	r3, r2
 800915e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	691b      	ldr	r3, [r3, #16]
 800916a:	4313      	orrs	r3, r2
 800916c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	695b      	ldr	r3, [r3, #20]
 8009178:	4313      	orrs	r3, r2
 800917a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	69db      	ldr	r3, [r3, #28]
 8009186:	4313      	orrs	r3, r2
 8009188:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	68fa      	ldr	r2, [r7, #12]
 8009190:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2200      	movs	r2, #0
 8009196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800919a:	2300      	movs	r3, #0
}
 800919c:	4618      	mov	r0, r3
 800919e:	3714      	adds	r7, #20
 80091a0:	46bd      	mov	sp, r7
 80091a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a6:	4770      	bx	lr

080091a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80091a8:	b480      	push	{r7}
 80091aa:	b083      	sub	sp, #12
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80091b0:	bf00      	nop
 80091b2:	370c      	adds	r7, #12
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr

080091bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80091bc:	b480      	push	{r7}
 80091be:	b083      	sub	sp, #12
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80091c4:	bf00      	nop
 80091c6:	370c      	adds	r7, #12
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr

080091d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b082      	sub	sp, #8
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d101      	bne.n	80091e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80091de:	2301      	movs	r3, #1
 80091e0:	e03f      	b.n	8009262 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80091e8:	b2db      	uxtb	r3, r3
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d106      	bne.n	80091fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2200      	movs	r2, #0
 80091f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f7f8 fc32 	bl	8001a60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2224      	movs	r2, #36	; 0x24
 8009200:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	68da      	ldr	r2, [r3, #12]
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009212:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f000 fa69 	bl	80096ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	691a      	ldr	r2, [r3, #16]
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009228:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	695a      	ldr	r2, [r3, #20]
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009238:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	68da      	ldr	r2, [r3, #12]
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009248:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2200      	movs	r2, #0
 800924e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2220      	movs	r2, #32
 8009254:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2220      	movs	r2, #32
 800925c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8009260:	2300      	movs	r3, #0
}
 8009262:	4618      	mov	r0, r3
 8009264:	3708      	adds	r7, #8
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}
	...

0800926c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b088      	sub	sp, #32
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	68db      	ldr	r3, [r3, #12]
 8009282:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	695b      	ldr	r3, [r3, #20]
 800928a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800928c:	2300      	movs	r3, #0
 800928e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8009290:	2300      	movs	r3, #0
 8009292:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009294:	69fb      	ldr	r3, [r7, #28]
 8009296:	f003 030f 	and.w	r3, r3, #15
 800929a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d10d      	bne.n	80092be <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80092a2:	69fb      	ldr	r3, [r7, #28]
 80092a4:	f003 0320 	and.w	r3, r3, #32
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d008      	beq.n	80092be <HAL_UART_IRQHandler+0x52>
 80092ac:	69bb      	ldr	r3, [r7, #24]
 80092ae:	f003 0320 	and.w	r3, r3, #32
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d003      	beq.n	80092be <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f000 f996 	bl	80095e8 <UART_Receive_IT>
      return;
 80092bc:	e0d1      	b.n	8009462 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	f000 80b0 	beq.w	8009426 <HAL_UART_IRQHandler+0x1ba>
 80092c6:	697b      	ldr	r3, [r7, #20]
 80092c8:	f003 0301 	and.w	r3, r3, #1
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d105      	bne.n	80092dc <HAL_UART_IRQHandler+0x70>
 80092d0:	69bb      	ldr	r3, [r7, #24]
 80092d2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	f000 80a5 	beq.w	8009426 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80092dc:	69fb      	ldr	r3, [r7, #28]
 80092de:	f003 0301 	and.w	r3, r3, #1
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d00a      	beq.n	80092fc <HAL_UART_IRQHandler+0x90>
 80092e6:	69bb      	ldr	r3, [r7, #24]
 80092e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d005      	beq.n	80092fc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092f4:	f043 0201 	orr.w	r2, r3, #1
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80092fc:	69fb      	ldr	r3, [r7, #28]
 80092fe:	f003 0304 	and.w	r3, r3, #4
 8009302:	2b00      	cmp	r3, #0
 8009304:	d00a      	beq.n	800931c <HAL_UART_IRQHandler+0xb0>
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	f003 0301 	and.w	r3, r3, #1
 800930c:	2b00      	cmp	r3, #0
 800930e:	d005      	beq.n	800931c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009314:	f043 0202 	orr.w	r2, r3, #2
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800931c:	69fb      	ldr	r3, [r7, #28]
 800931e:	f003 0302 	and.w	r3, r3, #2
 8009322:	2b00      	cmp	r3, #0
 8009324:	d00a      	beq.n	800933c <HAL_UART_IRQHandler+0xd0>
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	f003 0301 	and.w	r3, r3, #1
 800932c:	2b00      	cmp	r3, #0
 800932e:	d005      	beq.n	800933c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009334:	f043 0204 	orr.w	r2, r3, #4
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800933c:	69fb      	ldr	r3, [r7, #28]
 800933e:	f003 0308 	and.w	r3, r3, #8
 8009342:	2b00      	cmp	r3, #0
 8009344:	d00f      	beq.n	8009366 <HAL_UART_IRQHandler+0xfa>
 8009346:	69bb      	ldr	r3, [r7, #24]
 8009348:	f003 0320 	and.w	r3, r3, #32
 800934c:	2b00      	cmp	r3, #0
 800934e:	d104      	bne.n	800935a <HAL_UART_IRQHandler+0xee>
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	f003 0301 	and.w	r3, r3, #1
 8009356:	2b00      	cmp	r3, #0
 8009358:	d005      	beq.n	8009366 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800935e:	f043 0208 	orr.w	r2, r3, #8
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800936a:	2b00      	cmp	r3, #0
 800936c:	d078      	beq.n	8009460 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800936e:	69fb      	ldr	r3, [r7, #28]
 8009370:	f003 0320 	and.w	r3, r3, #32
 8009374:	2b00      	cmp	r3, #0
 8009376:	d007      	beq.n	8009388 <HAL_UART_IRQHandler+0x11c>
 8009378:	69bb      	ldr	r3, [r7, #24]
 800937a:	f003 0320 	and.w	r3, r3, #32
 800937e:	2b00      	cmp	r3, #0
 8009380:	d002      	beq.n	8009388 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f000 f930 	bl	80095e8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	695b      	ldr	r3, [r3, #20]
 800938e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009392:	2b40      	cmp	r3, #64	; 0x40
 8009394:	bf0c      	ite	eq
 8009396:	2301      	moveq	r3, #1
 8009398:	2300      	movne	r3, #0
 800939a:	b2db      	uxtb	r3, r3
 800939c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093a2:	f003 0308 	and.w	r3, r3, #8
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d102      	bne.n	80093b0 <HAL_UART_IRQHandler+0x144>
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d031      	beq.n	8009414 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f000 f879 	bl	80094a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	695b      	ldr	r3, [r3, #20]
 80093bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093c0:	2b40      	cmp	r3, #64	; 0x40
 80093c2:	d123      	bne.n	800940c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	695a      	ldr	r2, [r3, #20]
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80093d2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d013      	beq.n	8009404 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093e0:	4a21      	ldr	r2, [pc, #132]	; (8009468 <HAL_UART_IRQHandler+0x1fc>)
 80093e2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093e8:	4618      	mov	r0, r3
 80093ea:	f7f9 fb11 	bl	8002a10 <HAL_DMA_Abort_IT>
 80093ee:	4603      	mov	r3, r0
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d016      	beq.n	8009422 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093fa:	687a      	ldr	r2, [r7, #4]
 80093fc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80093fe:	4610      	mov	r0, r2
 8009400:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009402:	e00e      	b.n	8009422 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f000 f845 	bl	8009494 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800940a:	e00a      	b.n	8009422 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f000 f841 	bl	8009494 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009412:	e006      	b.n	8009422 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f000 f83d 	bl	8009494 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2200      	movs	r2, #0
 800941e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8009420:	e01e      	b.n	8009460 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009422:	bf00      	nop
    return;
 8009424:	e01c      	b.n	8009460 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009426:	69fb      	ldr	r3, [r7, #28]
 8009428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800942c:	2b00      	cmp	r3, #0
 800942e:	d008      	beq.n	8009442 <HAL_UART_IRQHandler+0x1d6>
 8009430:	69bb      	ldr	r3, [r7, #24]
 8009432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009436:	2b00      	cmp	r3, #0
 8009438:	d003      	beq.n	8009442 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f000 f866 	bl	800950c <UART_Transmit_IT>
    return;
 8009440:	e00f      	b.n	8009462 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009442:	69fb      	ldr	r3, [r7, #28]
 8009444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009448:	2b00      	cmp	r3, #0
 800944a:	d00a      	beq.n	8009462 <HAL_UART_IRQHandler+0x1f6>
 800944c:	69bb      	ldr	r3, [r7, #24]
 800944e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009452:	2b00      	cmp	r3, #0
 8009454:	d005      	beq.n	8009462 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f000 f8ae 	bl	80095b8 <UART_EndTransmit_IT>
    return;
 800945c:	bf00      	nop
 800945e:	e000      	b.n	8009462 <HAL_UART_IRQHandler+0x1f6>
    return;
 8009460:	bf00      	nop
  }
}
 8009462:	3720      	adds	r7, #32
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}
 8009468:	080094e5 	.word	0x080094e5

0800946c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800946c:	b480      	push	{r7}
 800946e:	b083      	sub	sp, #12
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009474:	bf00      	nop
 8009476:	370c      	adds	r7, #12
 8009478:	46bd      	mov	sp, r7
 800947a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947e:	4770      	bx	lr

08009480 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009480:	b480      	push	{r7}
 8009482:	b083      	sub	sp, #12
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009488:	bf00      	nop
 800948a:	370c      	adds	r7, #12
 800948c:	46bd      	mov	sp, r7
 800948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009492:	4770      	bx	lr

08009494 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009494:	b480      	push	{r7}
 8009496:	b083      	sub	sp, #12
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800949c:	bf00      	nop
 800949e:	370c      	adds	r7, #12
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr

080094a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b083      	sub	sp, #12
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	68da      	ldr	r2, [r3, #12]
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80094be:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	695a      	ldr	r2, [r3, #20]
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f022 0201 	bic.w	r2, r2, #1
 80094ce:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2220      	movs	r2, #32
 80094d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80094d8:	bf00      	nop
 80094da:	370c      	adds	r7, #12
 80094dc:	46bd      	mov	sp, r7
 80094de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e2:	4770      	bx	lr

080094e4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b084      	sub	sp, #16
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	2200      	movs	r2, #0
 80094f6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	2200      	movs	r2, #0
 80094fc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80094fe:	68f8      	ldr	r0, [r7, #12]
 8009500:	f7ff ffc8 	bl	8009494 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009504:	bf00      	nop
 8009506:	3710      	adds	r7, #16
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}

0800950c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800950c:	b480      	push	{r7}
 800950e:	b085      	sub	sp, #20
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800951a:	b2db      	uxtb	r3, r3
 800951c:	2b21      	cmp	r3, #33	; 0x21
 800951e:	d144      	bne.n	80095aa <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	689b      	ldr	r3, [r3, #8]
 8009524:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009528:	d11a      	bne.n	8009560 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6a1b      	ldr	r3, [r3, #32]
 800952e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	881b      	ldrh	r3, [r3, #0]
 8009534:	461a      	mov	r2, r3
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800953e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	691b      	ldr	r3, [r3, #16]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d105      	bne.n	8009554 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6a1b      	ldr	r3, [r3, #32]
 800954c:	1c9a      	adds	r2, r3, #2
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	621a      	str	r2, [r3, #32]
 8009552:	e00e      	b.n	8009572 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6a1b      	ldr	r3, [r3, #32]
 8009558:	1c5a      	adds	r2, r3, #1
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	621a      	str	r2, [r3, #32]
 800955e:	e008      	b.n	8009572 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6a1b      	ldr	r3, [r3, #32]
 8009564:	1c59      	adds	r1, r3, #1
 8009566:	687a      	ldr	r2, [r7, #4]
 8009568:	6211      	str	r1, [r2, #32]
 800956a:	781a      	ldrb	r2, [r3, #0]
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009576:	b29b      	uxth	r3, r3
 8009578:	3b01      	subs	r3, #1
 800957a:	b29b      	uxth	r3, r3
 800957c:	687a      	ldr	r2, [r7, #4]
 800957e:	4619      	mov	r1, r3
 8009580:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009582:	2b00      	cmp	r3, #0
 8009584:	d10f      	bne.n	80095a6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	68da      	ldr	r2, [r3, #12]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009594:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	68da      	ldr	r2, [r3, #12]
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80095a4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80095a6:	2300      	movs	r3, #0
 80095a8:	e000      	b.n	80095ac <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80095aa:	2302      	movs	r3, #2
  }
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3714      	adds	r7, #20
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr

080095b8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b082      	sub	sp, #8
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	68da      	ldr	r2, [r3, #12]
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095ce:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2220      	movs	r2, #32
 80095d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f7ff ff47 	bl	800946c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80095de:	2300      	movs	r3, #0
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3708      	adds	r7, #8
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}

080095e8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b084      	sub	sp, #16
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80095f6:	b2db      	uxtb	r3, r3
 80095f8:	2b22      	cmp	r3, #34	; 0x22
 80095fa:	d171      	bne.n	80096e0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	689b      	ldr	r3, [r3, #8]
 8009600:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009604:	d123      	bne.n	800964e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800960a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	691b      	ldr	r3, [r3, #16]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d10e      	bne.n	8009632 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	685b      	ldr	r3, [r3, #4]
 800961a:	b29b      	uxth	r3, r3
 800961c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009620:	b29a      	uxth	r2, r3
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800962a:	1c9a      	adds	r2, r3, #2
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	629a      	str	r2, [r3, #40]	; 0x28
 8009630:	e029      	b.n	8009686 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	685b      	ldr	r3, [r3, #4]
 8009638:	b29b      	uxth	r3, r3
 800963a:	b2db      	uxtb	r3, r3
 800963c:	b29a      	uxth	r2, r3
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009646:	1c5a      	adds	r2, r3, #1
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	629a      	str	r2, [r3, #40]	; 0x28
 800964c:	e01b      	b.n	8009686 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	691b      	ldr	r3, [r3, #16]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d10a      	bne.n	800966c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	6858      	ldr	r0, [r3, #4]
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009660:	1c59      	adds	r1, r3, #1
 8009662:	687a      	ldr	r2, [r7, #4]
 8009664:	6291      	str	r1, [r2, #40]	; 0x28
 8009666:	b2c2      	uxtb	r2, r0
 8009668:	701a      	strb	r2, [r3, #0]
 800966a:	e00c      	b.n	8009686 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	685b      	ldr	r3, [r3, #4]
 8009672:	b2da      	uxtb	r2, r3
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009678:	1c58      	adds	r0, r3, #1
 800967a:	6879      	ldr	r1, [r7, #4]
 800967c:	6288      	str	r0, [r1, #40]	; 0x28
 800967e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009682:	b2d2      	uxtb	r2, r2
 8009684:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800968a:	b29b      	uxth	r3, r3
 800968c:	3b01      	subs	r3, #1
 800968e:	b29b      	uxth	r3, r3
 8009690:	687a      	ldr	r2, [r7, #4]
 8009692:	4619      	mov	r1, r3
 8009694:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009696:	2b00      	cmp	r3, #0
 8009698:	d120      	bne.n	80096dc <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	68da      	ldr	r2, [r3, #12]
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f022 0220 	bic.w	r2, r2, #32
 80096a8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	68da      	ldr	r2, [r3, #12]
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80096b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	695a      	ldr	r2, [r3, #20]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f022 0201 	bic.w	r2, r2, #1
 80096c8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2220      	movs	r2, #32
 80096ce:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f7ff fed4 	bl	8009480 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80096d8:	2300      	movs	r3, #0
 80096da:	e002      	b.n	80096e2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80096dc:	2300      	movs	r3, #0
 80096de:	e000      	b.n	80096e2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80096e0:	2302      	movs	r3, #2
  }
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	3710      	adds	r7, #16
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}
	...

080096ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80096ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096f0:	b085      	sub	sp, #20
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	691b      	ldr	r3, [r3, #16]
 80096fc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	68da      	ldr	r2, [r3, #12]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	430a      	orrs	r2, r1
 800970a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	689a      	ldr	r2, [r3, #8]
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	691b      	ldr	r3, [r3, #16]
 8009714:	431a      	orrs	r2, r3
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	695b      	ldr	r3, [r3, #20]
 800971a:	431a      	orrs	r2, r3
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	69db      	ldr	r3, [r3, #28]
 8009720:	4313      	orrs	r3, r2
 8009722:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	68db      	ldr	r3, [r3, #12]
 800972a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800972e:	f023 030c 	bic.w	r3, r3, #12
 8009732:	687a      	ldr	r2, [r7, #4]
 8009734:	6812      	ldr	r2, [r2, #0]
 8009736:	68f9      	ldr	r1, [r7, #12]
 8009738:	430b      	orrs	r3, r1
 800973a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	695b      	ldr	r3, [r3, #20]
 8009742:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	699a      	ldr	r2, [r3, #24]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	430a      	orrs	r2, r1
 8009750:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	69db      	ldr	r3, [r3, #28]
 8009756:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800975a:	f040 818b 	bne.w	8009a74 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	4ac1      	ldr	r2, [pc, #772]	; (8009a68 <UART_SetConfig+0x37c>)
 8009764:	4293      	cmp	r3, r2
 8009766:	d005      	beq.n	8009774 <UART_SetConfig+0x88>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4abf      	ldr	r2, [pc, #764]	; (8009a6c <UART_SetConfig+0x380>)
 800976e:	4293      	cmp	r3, r2
 8009770:	f040 80bd 	bne.w	80098ee <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009774:	f7fe f9ae 	bl	8007ad4 <HAL_RCC_GetPCLK2Freq>
 8009778:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	461d      	mov	r5, r3
 800977e:	f04f 0600 	mov.w	r6, #0
 8009782:	46a8      	mov	r8, r5
 8009784:	46b1      	mov	r9, r6
 8009786:	eb18 0308 	adds.w	r3, r8, r8
 800978a:	eb49 0409 	adc.w	r4, r9, r9
 800978e:	4698      	mov	r8, r3
 8009790:	46a1      	mov	r9, r4
 8009792:	eb18 0805 	adds.w	r8, r8, r5
 8009796:	eb49 0906 	adc.w	r9, r9, r6
 800979a:	f04f 0100 	mov.w	r1, #0
 800979e:	f04f 0200 	mov.w	r2, #0
 80097a2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80097a6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80097aa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80097ae:	4688      	mov	r8, r1
 80097b0:	4691      	mov	r9, r2
 80097b2:	eb18 0005 	adds.w	r0, r8, r5
 80097b6:	eb49 0106 	adc.w	r1, r9, r6
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	685b      	ldr	r3, [r3, #4]
 80097be:	461d      	mov	r5, r3
 80097c0:	f04f 0600 	mov.w	r6, #0
 80097c4:	196b      	adds	r3, r5, r5
 80097c6:	eb46 0406 	adc.w	r4, r6, r6
 80097ca:	461a      	mov	r2, r3
 80097cc:	4623      	mov	r3, r4
 80097ce:	f7f6 fd11 	bl	80001f4 <__aeabi_uldivmod>
 80097d2:	4603      	mov	r3, r0
 80097d4:	460c      	mov	r4, r1
 80097d6:	461a      	mov	r2, r3
 80097d8:	4ba5      	ldr	r3, [pc, #660]	; (8009a70 <UART_SetConfig+0x384>)
 80097da:	fba3 2302 	umull	r2, r3, r3, r2
 80097de:	095b      	lsrs	r3, r3, #5
 80097e0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	461d      	mov	r5, r3
 80097e8:	f04f 0600 	mov.w	r6, #0
 80097ec:	46a9      	mov	r9, r5
 80097ee:	46b2      	mov	sl, r6
 80097f0:	eb19 0309 	adds.w	r3, r9, r9
 80097f4:	eb4a 040a 	adc.w	r4, sl, sl
 80097f8:	4699      	mov	r9, r3
 80097fa:	46a2      	mov	sl, r4
 80097fc:	eb19 0905 	adds.w	r9, r9, r5
 8009800:	eb4a 0a06 	adc.w	sl, sl, r6
 8009804:	f04f 0100 	mov.w	r1, #0
 8009808:	f04f 0200 	mov.w	r2, #0
 800980c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009810:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009814:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009818:	4689      	mov	r9, r1
 800981a:	4692      	mov	sl, r2
 800981c:	eb19 0005 	adds.w	r0, r9, r5
 8009820:	eb4a 0106 	adc.w	r1, sl, r6
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	461d      	mov	r5, r3
 800982a:	f04f 0600 	mov.w	r6, #0
 800982e:	196b      	adds	r3, r5, r5
 8009830:	eb46 0406 	adc.w	r4, r6, r6
 8009834:	461a      	mov	r2, r3
 8009836:	4623      	mov	r3, r4
 8009838:	f7f6 fcdc 	bl	80001f4 <__aeabi_uldivmod>
 800983c:	4603      	mov	r3, r0
 800983e:	460c      	mov	r4, r1
 8009840:	461a      	mov	r2, r3
 8009842:	4b8b      	ldr	r3, [pc, #556]	; (8009a70 <UART_SetConfig+0x384>)
 8009844:	fba3 1302 	umull	r1, r3, r3, r2
 8009848:	095b      	lsrs	r3, r3, #5
 800984a:	2164      	movs	r1, #100	; 0x64
 800984c:	fb01 f303 	mul.w	r3, r1, r3
 8009850:	1ad3      	subs	r3, r2, r3
 8009852:	00db      	lsls	r3, r3, #3
 8009854:	3332      	adds	r3, #50	; 0x32
 8009856:	4a86      	ldr	r2, [pc, #536]	; (8009a70 <UART_SetConfig+0x384>)
 8009858:	fba2 2303 	umull	r2, r3, r2, r3
 800985c:	095b      	lsrs	r3, r3, #5
 800985e:	005b      	lsls	r3, r3, #1
 8009860:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009864:	4498      	add	r8, r3
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	461d      	mov	r5, r3
 800986a:	f04f 0600 	mov.w	r6, #0
 800986e:	46a9      	mov	r9, r5
 8009870:	46b2      	mov	sl, r6
 8009872:	eb19 0309 	adds.w	r3, r9, r9
 8009876:	eb4a 040a 	adc.w	r4, sl, sl
 800987a:	4699      	mov	r9, r3
 800987c:	46a2      	mov	sl, r4
 800987e:	eb19 0905 	adds.w	r9, r9, r5
 8009882:	eb4a 0a06 	adc.w	sl, sl, r6
 8009886:	f04f 0100 	mov.w	r1, #0
 800988a:	f04f 0200 	mov.w	r2, #0
 800988e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009892:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009896:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800989a:	4689      	mov	r9, r1
 800989c:	4692      	mov	sl, r2
 800989e:	eb19 0005 	adds.w	r0, r9, r5
 80098a2:	eb4a 0106 	adc.w	r1, sl, r6
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	685b      	ldr	r3, [r3, #4]
 80098aa:	461d      	mov	r5, r3
 80098ac:	f04f 0600 	mov.w	r6, #0
 80098b0:	196b      	adds	r3, r5, r5
 80098b2:	eb46 0406 	adc.w	r4, r6, r6
 80098b6:	461a      	mov	r2, r3
 80098b8:	4623      	mov	r3, r4
 80098ba:	f7f6 fc9b 	bl	80001f4 <__aeabi_uldivmod>
 80098be:	4603      	mov	r3, r0
 80098c0:	460c      	mov	r4, r1
 80098c2:	461a      	mov	r2, r3
 80098c4:	4b6a      	ldr	r3, [pc, #424]	; (8009a70 <UART_SetConfig+0x384>)
 80098c6:	fba3 1302 	umull	r1, r3, r3, r2
 80098ca:	095b      	lsrs	r3, r3, #5
 80098cc:	2164      	movs	r1, #100	; 0x64
 80098ce:	fb01 f303 	mul.w	r3, r1, r3
 80098d2:	1ad3      	subs	r3, r2, r3
 80098d4:	00db      	lsls	r3, r3, #3
 80098d6:	3332      	adds	r3, #50	; 0x32
 80098d8:	4a65      	ldr	r2, [pc, #404]	; (8009a70 <UART_SetConfig+0x384>)
 80098da:	fba2 2303 	umull	r2, r3, r2, r3
 80098de:	095b      	lsrs	r3, r3, #5
 80098e0:	f003 0207 	and.w	r2, r3, #7
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	4442      	add	r2, r8
 80098ea:	609a      	str	r2, [r3, #8]
 80098ec:	e26f      	b.n	8009dce <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80098ee:	f7fe f8dd 	bl	8007aac <HAL_RCC_GetPCLK1Freq>
 80098f2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	461d      	mov	r5, r3
 80098f8:	f04f 0600 	mov.w	r6, #0
 80098fc:	46a8      	mov	r8, r5
 80098fe:	46b1      	mov	r9, r6
 8009900:	eb18 0308 	adds.w	r3, r8, r8
 8009904:	eb49 0409 	adc.w	r4, r9, r9
 8009908:	4698      	mov	r8, r3
 800990a:	46a1      	mov	r9, r4
 800990c:	eb18 0805 	adds.w	r8, r8, r5
 8009910:	eb49 0906 	adc.w	r9, r9, r6
 8009914:	f04f 0100 	mov.w	r1, #0
 8009918:	f04f 0200 	mov.w	r2, #0
 800991c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009920:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009924:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009928:	4688      	mov	r8, r1
 800992a:	4691      	mov	r9, r2
 800992c:	eb18 0005 	adds.w	r0, r8, r5
 8009930:	eb49 0106 	adc.w	r1, r9, r6
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	685b      	ldr	r3, [r3, #4]
 8009938:	461d      	mov	r5, r3
 800993a:	f04f 0600 	mov.w	r6, #0
 800993e:	196b      	adds	r3, r5, r5
 8009940:	eb46 0406 	adc.w	r4, r6, r6
 8009944:	461a      	mov	r2, r3
 8009946:	4623      	mov	r3, r4
 8009948:	f7f6 fc54 	bl	80001f4 <__aeabi_uldivmod>
 800994c:	4603      	mov	r3, r0
 800994e:	460c      	mov	r4, r1
 8009950:	461a      	mov	r2, r3
 8009952:	4b47      	ldr	r3, [pc, #284]	; (8009a70 <UART_SetConfig+0x384>)
 8009954:	fba3 2302 	umull	r2, r3, r3, r2
 8009958:	095b      	lsrs	r3, r3, #5
 800995a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	461d      	mov	r5, r3
 8009962:	f04f 0600 	mov.w	r6, #0
 8009966:	46a9      	mov	r9, r5
 8009968:	46b2      	mov	sl, r6
 800996a:	eb19 0309 	adds.w	r3, r9, r9
 800996e:	eb4a 040a 	adc.w	r4, sl, sl
 8009972:	4699      	mov	r9, r3
 8009974:	46a2      	mov	sl, r4
 8009976:	eb19 0905 	adds.w	r9, r9, r5
 800997a:	eb4a 0a06 	adc.w	sl, sl, r6
 800997e:	f04f 0100 	mov.w	r1, #0
 8009982:	f04f 0200 	mov.w	r2, #0
 8009986:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800998a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800998e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009992:	4689      	mov	r9, r1
 8009994:	4692      	mov	sl, r2
 8009996:	eb19 0005 	adds.w	r0, r9, r5
 800999a:	eb4a 0106 	adc.w	r1, sl, r6
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	685b      	ldr	r3, [r3, #4]
 80099a2:	461d      	mov	r5, r3
 80099a4:	f04f 0600 	mov.w	r6, #0
 80099a8:	196b      	adds	r3, r5, r5
 80099aa:	eb46 0406 	adc.w	r4, r6, r6
 80099ae:	461a      	mov	r2, r3
 80099b0:	4623      	mov	r3, r4
 80099b2:	f7f6 fc1f 	bl	80001f4 <__aeabi_uldivmod>
 80099b6:	4603      	mov	r3, r0
 80099b8:	460c      	mov	r4, r1
 80099ba:	461a      	mov	r2, r3
 80099bc:	4b2c      	ldr	r3, [pc, #176]	; (8009a70 <UART_SetConfig+0x384>)
 80099be:	fba3 1302 	umull	r1, r3, r3, r2
 80099c2:	095b      	lsrs	r3, r3, #5
 80099c4:	2164      	movs	r1, #100	; 0x64
 80099c6:	fb01 f303 	mul.w	r3, r1, r3
 80099ca:	1ad3      	subs	r3, r2, r3
 80099cc:	00db      	lsls	r3, r3, #3
 80099ce:	3332      	adds	r3, #50	; 0x32
 80099d0:	4a27      	ldr	r2, [pc, #156]	; (8009a70 <UART_SetConfig+0x384>)
 80099d2:	fba2 2303 	umull	r2, r3, r2, r3
 80099d6:	095b      	lsrs	r3, r3, #5
 80099d8:	005b      	lsls	r3, r3, #1
 80099da:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80099de:	4498      	add	r8, r3
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	461d      	mov	r5, r3
 80099e4:	f04f 0600 	mov.w	r6, #0
 80099e8:	46a9      	mov	r9, r5
 80099ea:	46b2      	mov	sl, r6
 80099ec:	eb19 0309 	adds.w	r3, r9, r9
 80099f0:	eb4a 040a 	adc.w	r4, sl, sl
 80099f4:	4699      	mov	r9, r3
 80099f6:	46a2      	mov	sl, r4
 80099f8:	eb19 0905 	adds.w	r9, r9, r5
 80099fc:	eb4a 0a06 	adc.w	sl, sl, r6
 8009a00:	f04f 0100 	mov.w	r1, #0
 8009a04:	f04f 0200 	mov.w	r2, #0
 8009a08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009a0c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009a10:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009a14:	4689      	mov	r9, r1
 8009a16:	4692      	mov	sl, r2
 8009a18:	eb19 0005 	adds.w	r0, r9, r5
 8009a1c:	eb4a 0106 	adc.w	r1, sl, r6
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	685b      	ldr	r3, [r3, #4]
 8009a24:	461d      	mov	r5, r3
 8009a26:	f04f 0600 	mov.w	r6, #0
 8009a2a:	196b      	adds	r3, r5, r5
 8009a2c:	eb46 0406 	adc.w	r4, r6, r6
 8009a30:	461a      	mov	r2, r3
 8009a32:	4623      	mov	r3, r4
 8009a34:	f7f6 fbde 	bl	80001f4 <__aeabi_uldivmod>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	460c      	mov	r4, r1
 8009a3c:	461a      	mov	r2, r3
 8009a3e:	4b0c      	ldr	r3, [pc, #48]	; (8009a70 <UART_SetConfig+0x384>)
 8009a40:	fba3 1302 	umull	r1, r3, r3, r2
 8009a44:	095b      	lsrs	r3, r3, #5
 8009a46:	2164      	movs	r1, #100	; 0x64
 8009a48:	fb01 f303 	mul.w	r3, r1, r3
 8009a4c:	1ad3      	subs	r3, r2, r3
 8009a4e:	00db      	lsls	r3, r3, #3
 8009a50:	3332      	adds	r3, #50	; 0x32
 8009a52:	4a07      	ldr	r2, [pc, #28]	; (8009a70 <UART_SetConfig+0x384>)
 8009a54:	fba2 2303 	umull	r2, r3, r2, r3
 8009a58:	095b      	lsrs	r3, r3, #5
 8009a5a:	f003 0207 	and.w	r2, r3, #7
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	4442      	add	r2, r8
 8009a64:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8009a66:	e1b2      	b.n	8009dce <UART_SetConfig+0x6e2>
 8009a68:	40011000 	.word	0x40011000
 8009a6c:	40011400 	.word	0x40011400
 8009a70:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	4ad7      	ldr	r2, [pc, #860]	; (8009dd8 <UART_SetConfig+0x6ec>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d005      	beq.n	8009a8a <UART_SetConfig+0x39e>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4ad6      	ldr	r2, [pc, #856]	; (8009ddc <UART_SetConfig+0x6f0>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	f040 80d1 	bne.w	8009c2c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8009a8a:	f7fe f823 	bl	8007ad4 <HAL_RCC_GetPCLK2Freq>
 8009a8e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	469a      	mov	sl, r3
 8009a94:	f04f 0b00 	mov.w	fp, #0
 8009a98:	46d0      	mov	r8, sl
 8009a9a:	46d9      	mov	r9, fp
 8009a9c:	eb18 0308 	adds.w	r3, r8, r8
 8009aa0:	eb49 0409 	adc.w	r4, r9, r9
 8009aa4:	4698      	mov	r8, r3
 8009aa6:	46a1      	mov	r9, r4
 8009aa8:	eb18 080a 	adds.w	r8, r8, sl
 8009aac:	eb49 090b 	adc.w	r9, r9, fp
 8009ab0:	f04f 0100 	mov.w	r1, #0
 8009ab4:	f04f 0200 	mov.w	r2, #0
 8009ab8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009abc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009ac0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009ac4:	4688      	mov	r8, r1
 8009ac6:	4691      	mov	r9, r2
 8009ac8:	eb1a 0508 	adds.w	r5, sl, r8
 8009acc:	eb4b 0609 	adc.w	r6, fp, r9
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	685b      	ldr	r3, [r3, #4]
 8009ad4:	4619      	mov	r1, r3
 8009ad6:	f04f 0200 	mov.w	r2, #0
 8009ada:	f04f 0300 	mov.w	r3, #0
 8009ade:	f04f 0400 	mov.w	r4, #0
 8009ae2:	0094      	lsls	r4, r2, #2
 8009ae4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009ae8:	008b      	lsls	r3, r1, #2
 8009aea:	461a      	mov	r2, r3
 8009aec:	4623      	mov	r3, r4
 8009aee:	4628      	mov	r0, r5
 8009af0:	4631      	mov	r1, r6
 8009af2:	f7f6 fb7f 	bl	80001f4 <__aeabi_uldivmod>
 8009af6:	4603      	mov	r3, r0
 8009af8:	460c      	mov	r4, r1
 8009afa:	461a      	mov	r2, r3
 8009afc:	4bb8      	ldr	r3, [pc, #736]	; (8009de0 <UART_SetConfig+0x6f4>)
 8009afe:	fba3 2302 	umull	r2, r3, r3, r2
 8009b02:	095b      	lsrs	r3, r3, #5
 8009b04:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	469b      	mov	fp, r3
 8009b0c:	f04f 0c00 	mov.w	ip, #0
 8009b10:	46d9      	mov	r9, fp
 8009b12:	46e2      	mov	sl, ip
 8009b14:	eb19 0309 	adds.w	r3, r9, r9
 8009b18:	eb4a 040a 	adc.w	r4, sl, sl
 8009b1c:	4699      	mov	r9, r3
 8009b1e:	46a2      	mov	sl, r4
 8009b20:	eb19 090b 	adds.w	r9, r9, fp
 8009b24:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009b28:	f04f 0100 	mov.w	r1, #0
 8009b2c:	f04f 0200 	mov.w	r2, #0
 8009b30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009b34:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009b38:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009b3c:	4689      	mov	r9, r1
 8009b3e:	4692      	mov	sl, r2
 8009b40:	eb1b 0509 	adds.w	r5, fp, r9
 8009b44:	eb4c 060a 	adc.w	r6, ip, sl
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	685b      	ldr	r3, [r3, #4]
 8009b4c:	4619      	mov	r1, r3
 8009b4e:	f04f 0200 	mov.w	r2, #0
 8009b52:	f04f 0300 	mov.w	r3, #0
 8009b56:	f04f 0400 	mov.w	r4, #0
 8009b5a:	0094      	lsls	r4, r2, #2
 8009b5c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009b60:	008b      	lsls	r3, r1, #2
 8009b62:	461a      	mov	r2, r3
 8009b64:	4623      	mov	r3, r4
 8009b66:	4628      	mov	r0, r5
 8009b68:	4631      	mov	r1, r6
 8009b6a:	f7f6 fb43 	bl	80001f4 <__aeabi_uldivmod>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	460c      	mov	r4, r1
 8009b72:	461a      	mov	r2, r3
 8009b74:	4b9a      	ldr	r3, [pc, #616]	; (8009de0 <UART_SetConfig+0x6f4>)
 8009b76:	fba3 1302 	umull	r1, r3, r3, r2
 8009b7a:	095b      	lsrs	r3, r3, #5
 8009b7c:	2164      	movs	r1, #100	; 0x64
 8009b7e:	fb01 f303 	mul.w	r3, r1, r3
 8009b82:	1ad3      	subs	r3, r2, r3
 8009b84:	011b      	lsls	r3, r3, #4
 8009b86:	3332      	adds	r3, #50	; 0x32
 8009b88:	4a95      	ldr	r2, [pc, #596]	; (8009de0 <UART_SetConfig+0x6f4>)
 8009b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8009b8e:	095b      	lsrs	r3, r3, #5
 8009b90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b94:	4498      	add	r8, r3
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	469b      	mov	fp, r3
 8009b9a:	f04f 0c00 	mov.w	ip, #0
 8009b9e:	46d9      	mov	r9, fp
 8009ba0:	46e2      	mov	sl, ip
 8009ba2:	eb19 0309 	adds.w	r3, r9, r9
 8009ba6:	eb4a 040a 	adc.w	r4, sl, sl
 8009baa:	4699      	mov	r9, r3
 8009bac:	46a2      	mov	sl, r4
 8009bae:	eb19 090b 	adds.w	r9, r9, fp
 8009bb2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009bb6:	f04f 0100 	mov.w	r1, #0
 8009bba:	f04f 0200 	mov.w	r2, #0
 8009bbe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009bc2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009bc6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009bca:	4689      	mov	r9, r1
 8009bcc:	4692      	mov	sl, r2
 8009bce:	eb1b 0509 	adds.w	r5, fp, r9
 8009bd2:	eb4c 060a 	adc.w	r6, ip, sl
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	685b      	ldr	r3, [r3, #4]
 8009bda:	4619      	mov	r1, r3
 8009bdc:	f04f 0200 	mov.w	r2, #0
 8009be0:	f04f 0300 	mov.w	r3, #0
 8009be4:	f04f 0400 	mov.w	r4, #0
 8009be8:	0094      	lsls	r4, r2, #2
 8009bea:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009bee:	008b      	lsls	r3, r1, #2
 8009bf0:	461a      	mov	r2, r3
 8009bf2:	4623      	mov	r3, r4
 8009bf4:	4628      	mov	r0, r5
 8009bf6:	4631      	mov	r1, r6
 8009bf8:	f7f6 fafc 	bl	80001f4 <__aeabi_uldivmod>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	460c      	mov	r4, r1
 8009c00:	461a      	mov	r2, r3
 8009c02:	4b77      	ldr	r3, [pc, #476]	; (8009de0 <UART_SetConfig+0x6f4>)
 8009c04:	fba3 1302 	umull	r1, r3, r3, r2
 8009c08:	095b      	lsrs	r3, r3, #5
 8009c0a:	2164      	movs	r1, #100	; 0x64
 8009c0c:	fb01 f303 	mul.w	r3, r1, r3
 8009c10:	1ad3      	subs	r3, r2, r3
 8009c12:	011b      	lsls	r3, r3, #4
 8009c14:	3332      	adds	r3, #50	; 0x32
 8009c16:	4a72      	ldr	r2, [pc, #456]	; (8009de0 <UART_SetConfig+0x6f4>)
 8009c18:	fba2 2303 	umull	r2, r3, r2, r3
 8009c1c:	095b      	lsrs	r3, r3, #5
 8009c1e:	f003 020f 	and.w	r2, r3, #15
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	4442      	add	r2, r8
 8009c28:	609a      	str	r2, [r3, #8]
 8009c2a:	e0d0      	b.n	8009dce <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8009c2c:	f7fd ff3e 	bl	8007aac <HAL_RCC_GetPCLK1Freq>
 8009c30:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	469a      	mov	sl, r3
 8009c36:	f04f 0b00 	mov.w	fp, #0
 8009c3a:	46d0      	mov	r8, sl
 8009c3c:	46d9      	mov	r9, fp
 8009c3e:	eb18 0308 	adds.w	r3, r8, r8
 8009c42:	eb49 0409 	adc.w	r4, r9, r9
 8009c46:	4698      	mov	r8, r3
 8009c48:	46a1      	mov	r9, r4
 8009c4a:	eb18 080a 	adds.w	r8, r8, sl
 8009c4e:	eb49 090b 	adc.w	r9, r9, fp
 8009c52:	f04f 0100 	mov.w	r1, #0
 8009c56:	f04f 0200 	mov.w	r2, #0
 8009c5a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009c5e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009c62:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009c66:	4688      	mov	r8, r1
 8009c68:	4691      	mov	r9, r2
 8009c6a:	eb1a 0508 	adds.w	r5, sl, r8
 8009c6e:	eb4b 0609 	adc.w	r6, fp, r9
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	685b      	ldr	r3, [r3, #4]
 8009c76:	4619      	mov	r1, r3
 8009c78:	f04f 0200 	mov.w	r2, #0
 8009c7c:	f04f 0300 	mov.w	r3, #0
 8009c80:	f04f 0400 	mov.w	r4, #0
 8009c84:	0094      	lsls	r4, r2, #2
 8009c86:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009c8a:	008b      	lsls	r3, r1, #2
 8009c8c:	461a      	mov	r2, r3
 8009c8e:	4623      	mov	r3, r4
 8009c90:	4628      	mov	r0, r5
 8009c92:	4631      	mov	r1, r6
 8009c94:	f7f6 faae 	bl	80001f4 <__aeabi_uldivmod>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	460c      	mov	r4, r1
 8009c9c:	461a      	mov	r2, r3
 8009c9e:	4b50      	ldr	r3, [pc, #320]	; (8009de0 <UART_SetConfig+0x6f4>)
 8009ca0:	fba3 2302 	umull	r2, r3, r3, r2
 8009ca4:	095b      	lsrs	r3, r3, #5
 8009ca6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	469b      	mov	fp, r3
 8009cae:	f04f 0c00 	mov.w	ip, #0
 8009cb2:	46d9      	mov	r9, fp
 8009cb4:	46e2      	mov	sl, ip
 8009cb6:	eb19 0309 	adds.w	r3, r9, r9
 8009cba:	eb4a 040a 	adc.w	r4, sl, sl
 8009cbe:	4699      	mov	r9, r3
 8009cc0:	46a2      	mov	sl, r4
 8009cc2:	eb19 090b 	adds.w	r9, r9, fp
 8009cc6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009cca:	f04f 0100 	mov.w	r1, #0
 8009cce:	f04f 0200 	mov.w	r2, #0
 8009cd2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009cd6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009cda:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009cde:	4689      	mov	r9, r1
 8009ce0:	4692      	mov	sl, r2
 8009ce2:	eb1b 0509 	adds.w	r5, fp, r9
 8009ce6:	eb4c 060a 	adc.w	r6, ip, sl
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	685b      	ldr	r3, [r3, #4]
 8009cee:	4619      	mov	r1, r3
 8009cf0:	f04f 0200 	mov.w	r2, #0
 8009cf4:	f04f 0300 	mov.w	r3, #0
 8009cf8:	f04f 0400 	mov.w	r4, #0
 8009cfc:	0094      	lsls	r4, r2, #2
 8009cfe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009d02:	008b      	lsls	r3, r1, #2
 8009d04:	461a      	mov	r2, r3
 8009d06:	4623      	mov	r3, r4
 8009d08:	4628      	mov	r0, r5
 8009d0a:	4631      	mov	r1, r6
 8009d0c:	f7f6 fa72 	bl	80001f4 <__aeabi_uldivmod>
 8009d10:	4603      	mov	r3, r0
 8009d12:	460c      	mov	r4, r1
 8009d14:	461a      	mov	r2, r3
 8009d16:	4b32      	ldr	r3, [pc, #200]	; (8009de0 <UART_SetConfig+0x6f4>)
 8009d18:	fba3 1302 	umull	r1, r3, r3, r2
 8009d1c:	095b      	lsrs	r3, r3, #5
 8009d1e:	2164      	movs	r1, #100	; 0x64
 8009d20:	fb01 f303 	mul.w	r3, r1, r3
 8009d24:	1ad3      	subs	r3, r2, r3
 8009d26:	011b      	lsls	r3, r3, #4
 8009d28:	3332      	adds	r3, #50	; 0x32
 8009d2a:	4a2d      	ldr	r2, [pc, #180]	; (8009de0 <UART_SetConfig+0x6f4>)
 8009d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8009d30:	095b      	lsrs	r3, r3, #5
 8009d32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009d36:	4498      	add	r8, r3
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	469b      	mov	fp, r3
 8009d3c:	f04f 0c00 	mov.w	ip, #0
 8009d40:	46d9      	mov	r9, fp
 8009d42:	46e2      	mov	sl, ip
 8009d44:	eb19 0309 	adds.w	r3, r9, r9
 8009d48:	eb4a 040a 	adc.w	r4, sl, sl
 8009d4c:	4699      	mov	r9, r3
 8009d4e:	46a2      	mov	sl, r4
 8009d50:	eb19 090b 	adds.w	r9, r9, fp
 8009d54:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009d58:	f04f 0100 	mov.w	r1, #0
 8009d5c:	f04f 0200 	mov.w	r2, #0
 8009d60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009d64:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009d68:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009d6c:	4689      	mov	r9, r1
 8009d6e:	4692      	mov	sl, r2
 8009d70:	eb1b 0509 	adds.w	r5, fp, r9
 8009d74:	eb4c 060a 	adc.w	r6, ip, sl
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	685b      	ldr	r3, [r3, #4]
 8009d7c:	4619      	mov	r1, r3
 8009d7e:	f04f 0200 	mov.w	r2, #0
 8009d82:	f04f 0300 	mov.w	r3, #0
 8009d86:	f04f 0400 	mov.w	r4, #0
 8009d8a:	0094      	lsls	r4, r2, #2
 8009d8c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009d90:	008b      	lsls	r3, r1, #2
 8009d92:	461a      	mov	r2, r3
 8009d94:	4623      	mov	r3, r4
 8009d96:	4628      	mov	r0, r5
 8009d98:	4631      	mov	r1, r6
 8009d9a:	f7f6 fa2b 	bl	80001f4 <__aeabi_uldivmod>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	460c      	mov	r4, r1
 8009da2:	461a      	mov	r2, r3
 8009da4:	4b0e      	ldr	r3, [pc, #56]	; (8009de0 <UART_SetConfig+0x6f4>)
 8009da6:	fba3 1302 	umull	r1, r3, r3, r2
 8009daa:	095b      	lsrs	r3, r3, #5
 8009dac:	2164      	movs	r1, #100	; 0x64
 8009dae:	fb01 f303 	mul.w	r3, r1, r3
 8009db2:	1ad3      	subs	r3, r2, r3
 8009db4:	011b      	lsls	r3, r3, #4
 8009db6:	3332      	adds	r3, #50	; 0x32
 8009db8:	4a09      	ldr	r2, [pc, #36]	; (8009de0 <UART_SetConfig+0x6f4>)
 8009dba:	fba2 2303 	umull	r2, r3, r2, r3
 8009dbe:	095b      	lsrs	r3, r3, #5
 8009dc0:	f003 020f 	and.w	r2, r3, #15
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	4442      	add	r2, r8
 8009dca:	609a      	str	r2, [r3, #8]
}
 8009dcc:	e7ff      	b.n	8009dce <UART_SetConfig+0x6e2>
 8009dce:	bf00      	nop
 8009dd0:	3714      	adds	r7, #20
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dd8:	40011000 	.word	0x40011000
 8009ddc:	40011400 	.word	0x40011400
 8009de0:	51eb851f 	.word	0x51eb851f

08009de4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009de4:	b084      	sub	sp, #16
 8009de6:	b580      	push	{r7, lr}
 8009de8:	b084      	sub	sp, #16
 8009dea:	af00      	add	r7, sp, #0
 8009dec:	6078      	str	r0, [r7, #4]
 8009dee:	f107 001c 	add.w	r0, r7, #28
 8009df2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df8:	2b01      	cmp	r3, #1
 8009dfa:	d122      	bne.n	8009e42 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e00:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	68db      	ldr	r3, [r3, #12]
 8009e0c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009e10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e14:	687a      	ldr	r2, [r7, #4]
 8009e16:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	68db      	ldr	r3, [r3, #12]
 8009e1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009e24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e26:	2b01      	cmp	r3, #1
 8009e28:	d105      	bne.n	8009e36 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	68db      	ldr	r3, [r3, #12]
 8009e2e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f001 fac6 	bl	800b3c8 <USB_CoreReset>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	73fb      	strb	r3, [r7, #15]
 8009e40:	e01a      	b.n	8009e78 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	68db      	ldr	r3, [r3, #12]
 8009e46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f001 faba 	bl	800b3c8 <USB_CoreReset>
 8009e54:	4603      	mov	r3, r0
 8009e56:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009e58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d106      	bne.n	8009e6c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e62:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	639a      	str	r2, [r3, #56]	; 0x38
 8009e6a:	e005      	b.n	8009e78 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e7a:	2b01      	cmp	r3, #1
 8009e7c:	d10b      	bne.n	8009e96 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	689b      	ldr	r3, [r3, #8]
 8009e82:	f043 0206 	orr.w	r2, r3, #6
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	689b      	ldr	r3, [r3, #8]
 8009e8e:	f043 0220 	orr.w	r2, r3, #32
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3710      	adds	r7, #16
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009ea2:	b004      	add	sp, #16
 8009ea4:	4770      	bx	lr
	...

08009ea8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b087      	sub	sp, #28
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	60f8      	str	r0, [r7, #12]
 8009eb0:	60b9      	str	r1, [r7, #8]
 8009eb2:	4613      	mov	r3, r2
 8009eb4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009eb6:	79fb      	ldrb	r3, [r7, #7]
 8009eb8:	2b02      	cmp	r3, #2
 8009eba:	d165      	bne.n	8009f88 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	4a41      	ldr	r2, [pc, #260]	; (8009fc4 <USB_SetTurnaroundTime+0x11c>)
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	d906      	bls.n	8009ed2 <USB_SetTurnaroundTime+0x2a>
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	4a40      	ldr	r2, [pc, #256]	; (8009fc8 <USB_SetTurnaroundTime+0x120>)
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	d802      	bhi.n	8009ed2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009ecc:	230f      	movs	r3, #15
 8009ece:	617b      	str	r3, [r7, #20]
 8009ed0:	e062      	b.n	8009f98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	4a3c      	ldr	r2, [pc, #240]	; (8009fc8 <USB_SetTurnaroundTime+0x120>)
 8009ed6:	4293      	cmp	r3, r2
 8009ed8:	d906      	bls.n	8009ee8 <USB_SetTurnaroundTime+0x40>
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	4a3b      	ldr	r2, [pc, #236]	; (8009fcc <USB_SetTurnaroundTime+0x124>)
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	d802      	bhi.n	8009ee8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009ee2:	230e      	movs	r3, #14
 8009ee4:	617b      	str	r3, [r7, #20]
 8009ee6:	e057      	b.n	8009f98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	4a38      	ldr	r2, [pc, #224]	; (8009fcc <USB_SetTurnaroundTime+0x124>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d906      	bls.n	8009efe <USB_SetTurnaroundTime+0x56>
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	4a37      	ldr	r2, [pc, #220]	; (8009fd0 <USB_SetTurnaroundTime+0x128>)
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	d802      	bhi.n	8009efe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009ef8:	230d      	movs	r3, #13
 8009efa:	617b      	str	r3, [r7, #20]
 8009efc:	e04c      	b.n	8009f98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	4a33      	ldr	r2, [pc, #204]	; (8009fd0 <USB_SetTurnaroundTime+0x128>)
 8009f02:	4293      	cmp	r3, r2
 8009f04:	d906      	bls.n	8009f14 <USB_SetTurnaroundTime+0x6c>
 8009f06:	68bb      	ldr	r3, [r7, #8]
 8009f08:	4a32      	ldr	r2, [pc, #200]	; (8009fd4 <USB_SetTurnaroundTime+0x12c>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d802      	bhi.n	8009f14 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009f0e:	230c      	movs	r3, #12
 8009f10:	617b      	str	r3, [r7, #20]
 8009f12:	e041      	b.n	8009f98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	4a2f      	ldr	r2, [pc, #188]	; (8009fd4 <USB_SetTurnaroundTime+0x12c>)
 8009f18:	4293      	cmp	r3, r2
 8009f1a:	d906      	bls.n	8009f2a <USB_SetTurnaroundTime+0x82>
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	4a2e      	ldr	r2, [pc, #184]	; (8009fd8 <USB_SetTurnaroundTime+0x130>)
 8009f20:	4293      	cmp	r3, r2
 8009f22:	d802      	bhi.n	8009f2a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009f24:	230b      	movs	r3, #11
 8009f26:	617b      	str	r3, [r7, #20]
 8009f28:	e036      	b.n	8009f98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009f2a:	68bb      	ldr	r3, [r7, #8]
 8009f2c:	4a2a      	ldr	r2, [pc, #168]	; (8009fd8 <USB_SetTurnaroundTime+0x130>)
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	d906      	bls.n	8009f40 <USB_SetTurnaroundTime+0x98>
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	4a29      	ldr	r2, [pc, #164]	; (8009fdc <USB_SetTurnaroundTime+0x134>)
 8009f36:	4293      	cmp	r3, r2
 8009f38:	d802      	bhi.n	8009f40 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009f3a:	230a      	movs	r3, #10
 8009f3c:	617b      	str	r3, [r7, #20]
 8009f3e:	e02b      	b.n	8009f98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	4a26      	ldr	r2, [pc, #152]	; (8009fdc <USB_SetTurnaroundTime+0x134>)
 8009f44:	4293      	cmp	r3, r2
 8009f46:	d906      	bls.n	8009f56 <USB_SetTurnaroundTime+0xae>
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	4a25      	ldr	r2, [pc, #148]	; (8009fe0 <USB_SetTurnaroundTime+0x138>)
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	d802      	bhi.n	8009f56 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009f50:	2309      	movs	r3, #9
 8009f52:	617b      	str	r3, [r7, #20]
 8009f54:	e020      	b.n	8009f98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	4a21      	ldr	r2, [pc, #132]	; (8009fe0 <USB_SetTurnaroundTime+0x138>)
 8009f5a:	4293      	cmp	r3, r2
 8009f5c:	d906      	bls.n	8009f6c <USB_SetTurnaroundTime+0xc4>
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	4a20      	ldr	r2, [pc, #128]	; (8009fe4 <USB_SetTurnaroundTime+0x13c>)
 8009f62:	4293      	cmp	r3, r2
 8009f64:	d802      	bhi.n	8009f6c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009f66:	2308      	movs	r3, #8
 8009f68:	617b      	str	r3, [r7, #20]
 8009f6a:	e015      	b.n	8009f98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	4a1d      	ldr	r2, [pc, #116]	; (8009fe4 <USB_SetTurnaroundTime+0x13c>)
 8009f70:	4293      	cmp	r3, r2
 8009f72:	d906      	bls.n	8009f82 <USB_SetTurnaroundTime+0xda>
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	4a1c      	ldr	r2, [pc, #112]	; (8009fe8 <USB_SetTurnaroundTime+0x140>)
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	d802      	bhi.n	8009f82 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009f7c:	2307      	movs	r3, #7
 8009f7e:	617b      	str	r3, [r7, #20]
 8009f80:	e00a      	b.n	8009f98 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009f82:	2306      	movs	r3, #6
 8009f84:	617b      	str	r3, [r7, #20]
 8009f86:	e007      	b.n	8009f98 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009f88:	79fb      	ldrb	r3, [r7, #7]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d102      	bne.n	8009f94 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009f8e:	2309      	movs	r3, #9
 8009f90:	617b      	str	r3, [r7, #20]
 8009f92:	e001      	b.n	8009f98 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009f94:	2309      	movs	r3, #9
 8009f96:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	68db      	ldr	r3, [r3, #12]
 8009f9c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	68da      	ldr	r2, [r3, #12]
 8009fa8:	697b      	ldr	r3, [r7, #20]
 8009faa:	029b      	lsls	r3, r3, #10
 8009fac:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009fb0:	431a      	orrs	r2, r3
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009fb6:	2300      	movs	r3, #0
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	371c      	adds	r7, #28
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc2:	4770      	bx	lr
 8009fc4:	00d8acbf 	.word	0x00d8acbf
 8009fc8:	00e4e1bf 	.word	0x00e4e1bf
 8009fcc:	00f423ff 	.word	0x00f423ff
 8009fd0:	0106737f 	.word	0x0106737f
 8009fd4:	011a499f 	.word	0x011a499f
 8009fd8:	01312cff 	.word	0x01312cff
 8009fdc:	014ca43f 	.word	0x014ca43f
 8009fe0:	016e35ff 	.word	0x016e35ff
 8009fe4:	01a6ab1f 	.word	0x01a6ab1f
 8009fe8:	01e847ff 	.word	0x01e847ff

08009fec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009fec:	b480      	push	{r7}
 8009fee:	b083      	sub	sp, #12
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	689b      	ldr	r3, [r3, #8]
 8009ff8:	f043 0201 	orr.w	r2, r3, #1
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a000:	2300      	movs	r3, #0
}
 800a002:	4618      	mov	r0, r3
 800a004:	370c      	adds	r7, #12
 800a006:	46bd      	mov	sp, r7
 800a008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00c:	4770      	bx	lr

0800a00e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a00e:	b480      	push	{r7}
 800a010:	b083      	sub	sp, #12
 800a012:	af00      	add	r7, sp, #0
 800a014:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	689b      	ldr	r3, [r3, #8]
 800a01a:	f023 0201 	bic.w	r2, r3, #1
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a022:	2300      	movs	r3, #0
}
 800a024:	4618      	mov	r0, r3
 800a026:	370c      	adds	r7, #12
 800a028:	46bd      	mov	sp, r7
 800a02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02e:	4770      	bx	lr

0800a030 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b082      	sub	sp, #8
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
 800a038:	460b      	mov	r3, r1
 800a03a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	68db      	ldr	r3, [r3, #12]
 800a040:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a048:	78fb      	ldrb	r3, [r7, #3]
 800a04a:	2b01      	cmp	r3, #1
 800a04c:	d106      	bne.n	800a05c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	68db      	ldr	r3, [r3, #12]
 800a052:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	60da      	str	r2, [r3, #12]
 800a05a:	e00b      	b.n	800a074 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800a05c:	78fb      	ldrb	r3, [r7, #3]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d106      	bne.n	800a070 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	68db      	ldr	r3, [r3, #12]
 800a066:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	60da      	str	r2, [r3, #12]
 800a06e:	e001      	b.n	800a074 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800a070:	2301      	movs	r3, #1
 800a072:	e003      	b.n	800a07c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800a074:	2032      	movs	r0, #50	; 0x32
 800a076:	f7f7 feeb 	bl	8001e50 <HAL_Delay>

  return HAL_OK;
 800a07a:	2300      	movs	r3, #0
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3708      	adds	r7, #8
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}

0800a084 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a084:	b084      	sub	sp, #16
 800a086:	b580      	push	{r7, lr}
 800a088:	b086      	sub	sp, #24
 800a08a:	af00      	add	r7, sp, #0
 800a08c:	6078      	str	r0, [r7, #4]
 800a08e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a092:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a096:	2300      	movs	r3, #0
 800a098:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a09e:	2300      	movs	r3, #0
 800a0a0:	613b      	str	r3, [r7, #16]
 800a0a2:	e009      	b.n	800a0b8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a0a4:	687a      	ldr	r2, [r7, #4]
 800a0a6:	693b      	ldr	r3, [r7, #16]
 800a0a8:	3340      	adds	r3, #64	; 0x40
 800a0aa:	009b      	lsls	r3, r3, #2
 800a0ac:	4413      	add	r3, r2
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a0b2:	693b      	ldr	r3, [r7, #16]
 800a0b4:	3301      	adds	r3, #1
 800a0b6:	613b      	str	r3, [r7, #16]
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	2b0e      	cmp	r3, #14
 800a0bc:	d9f2      	bls.n	800a0a4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a0be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d11c      	bne.n	800a0fe <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0ca:	685b      	ldr	r3, [r3, #4]
 800a0cc:	68fa      	ldr	r2, [r7, #12]
 800a0ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a0d2:	f043 0302 	orr.w	r3, r3, #2
 800a0d6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0dc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0e8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0f4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	639a      	str	r2, [r3, #56]	; 0x38
 800a0fc:	e00b      	b.n	800a116 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a102:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a10e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a11c:	461a      	mov	r2, r3
 800a11e:	2300      	movs	r3, #0
 800a120:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a128:	4619      	mov	r1, r3
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a130:	461a      	mov	r2, r3
 800a132:	680b      	ldr	r3, [r1, #0]
 800a134:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a138:	2b01      	cmp	r3, #1
 800a13a:	d10c      	bne.n	800a156 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a13c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d104      	bne.n	800a14c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a142:	2100      	movs	r1, #0
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f000 f949 	bl	800a3dc <USB_SetDevSpeed>
 800a14a:	e008      	b.n	800a15e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a14c:	2101      	movs	r1, #1
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f000 f944 	bl	800a3dc <USB_SetDevSpeed>
 800a154:	e003      	b.n	800a15e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a156:	2103      	movs	r1, #3
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f000 f93f 	bl	800a3dc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a15e:	2110      	movs	r1, #16
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f000 f8f3 	bl	800a34c <USB_FlushTxFifo>
 800a166:	4603      	mov	r3, r0
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d001      	beq.n	800a170 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800a16c:	2301      	movs	r3, #1
 800a16e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f000 f911 	bl	800a398 <USB_FlushRxFifo>
 800a176:	4603      	mov	r3, r0
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d001      	beq.n	800a180 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800a17c:	2301      	movs	r3, #1
 800a17e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a186:	461a      	mov	r2, r3
 800a188:	2300      	movs	r3, #0
 800a18a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a192:	461a      	mov	r2, r3
 800a194:	2300      	movs	r3, #0
 800a196:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a19e:	461a      	mov	r2, r3
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	613b      	str	r3, [r7, #16]
 800a1a8:	e043      	b.n	800a232 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a1aa:	693b      	ldr	r3, [r7, #16]
 800a1ac:	015a      	lsls	r2, r3, #5
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	4413      	add	r3, r2
 800a1b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a1bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a1c0:	d118      	bne.n	800a1f4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800a1c2:	693b      	ldr	r3, [r7, #16]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d10a      	bne.n	800a1de <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a1c8:	693b      	ldr	r3, [r7, #16]
 800a1ca:	015a      	lsls	r2, r3, #5
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	4413      	add	r3, r2
 800a1d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1d4:	461a      	mov	r2, r3
 800a1d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a1da:	6013      	str	r3, [r2, #0]
 800a1dc:	e013      	b.n	800a206 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a1de:	693b      	ldr	r3, [r7, #16]
 800a1e0:	015a      	lsls	r2, r3, #5
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	4413      	add	r3, r2
 800a1e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1ea:	461a      	mov	r2, r3
 800a1ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a1f0:	6013      	str	r3, [r2, #0]
 800a1f2:	e008      	b.n	800a206 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	015a      	lsls	r2, r3, #5
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	4413      	add	r3, r2
 800a1fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a200:	461a      	mov	r2, r3
 800a202:	2300      	movs	r3, #0
 800a204:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a206:	693b      	ldr	r3, [r7, #16]
 800a208:	015a      	lsls	r2, r3, #5
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	4413      	add	r3, r2
 800a20e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a212:	461a      	mov	r2, r3
 800a214:	2300      	movs	r3, #0
 800a216:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a218:	693b      	ldr	r3, [r7, #16]
 800a21a:	015a      	lsls	r2, r3, #5
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	4413      	add	r3, r2
 800a220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a224:	461a      	mov	r2, r3
 800a226:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a22a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a22c:	693b      	ldr	r3, [r7, #16]
 800a22e:	3301      	adds	r3, #1
 800a230:	613b      	str	r3, [r7, #16]
 800a232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a234:	693a      	ldr	r2, [r7, #16]
 800a236:	429a      	cmp	r2, r3
 800a238:	d3b7      	bcc.n	800a1aa <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a23a:	2300      	movs	r3, #0
 800a23c:	613b      	str	r3, [r7, #16]
 800a23e:	e043      	b.n	800a2c8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a240:	693b      	ldr	r3, [r7, #16]
 800a242:	015a      	lsls	r2, r3, #5
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	4413      	add	r3, r2
 800a248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a252:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a256:	d118      	bne.n	800a28a <USB_DevInit+0x206>
    {
      if (i == 0U)
 800a258:	693b      	ldr	r3, [r7, #16]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d10a      	bne.n	800a274 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a25e:	693b      	ldr	r3, [r7, #16]
 800a260:	015a      	lsls	r2, r3, #5
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	4413      	add	r3, r2
 800a266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a26a:	461a      	mov	r2, r3
 800a26c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a270:	6013      	str	r3, [r2, #0]
 800a272:	e013      	b.n	800a29c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a274:	693b      	ldr	r3, [r7, #16]
 800a276:	015a      	lsls	r2, r3, #5
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	4413      	add	r3, r2
 800a27c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a280:	461a      	mov	r2, r3
 800a282:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a286:	6013      	str	r3, [r2, #0]
 800a288:	e008      	b.n	800a29c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	015a      	lsls	r2, r3, #5
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	4413      	add	r3, r2
 800a292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a296:	461a      	mov	r2, r3
 800a298:	2300      	movs	r3, #0
 800a29a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a29c:	693b      	ldr	r3, [r7, #16]
 800a29e:	015a      	lsls	r2, r3, #5
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	4413      	add	r3, r2
 800a2a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2a8:	461a      	mov	r2, r3
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a2ae:	693b      	ldr	r3, [r7, #16]
 800a2b0:	015a      	lsls	r2, r3, #5
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	4413      	add	r3, r2
 800a2b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2ba:	461a      	mov	r2, r3
 800a2bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a2c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a2c2:	693b      	ldr	r3, [r7, #16]
 800a2c4:	3301      	adds	r3, #1
 800a2c6:	613b      	str	r3, [r7, #16]
 800a2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ca:	693a      	ldr	r2, [r7, #16]
 800a2cc:	429a      	cmp	r2, r3
 800a2ce:	d3b7      	bcc.n	800a240 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2d6:	691b      	ldr	r3, [r3, #16]
 800a2d8:	68fa      	ldr	r2, [r7, #12]
 800a2da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a2de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a2e2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a2f0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a2f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d105      	bne.n	800a304 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	699b      	ldr	r3, [r3, #24]
 800a2fc:	f043 0210 	orr.w	r2, r3, #16
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	699a      	ldr	r2, [r3, #24]
 800a308:	4b0f      	ldr	r3, [pc, #60]	; (800a348 <USB_DevInit+0x2c4>)
 800a30a:	4313      	orrs	r3, r2
 800a30c:	687a      	ldr	r2, [r7, #4]
 800a30e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a312:	2b00      	cmp	r3, #0
 800a314:	d005      	beq.n	800a322 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	699b      	ldr	r3, [r3, #24]
 800a31a:	f043 0208 	orr.w	r2, r3, #8
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a322:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a324:	2b01      	cmp	r3, #1
 800a326:	d107      	bne.n	800a338 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	699b      	ldr	r3, [r3, #24]
 800a32c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a330:	f043 0304 	orr.w	r3, r3, #4
 800a334:	687a      	ldr	r2, [r7, #4]
 800a336:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a338:	7dfb      	ldrb	r3, [r7, #23]
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3718      	adds	r7, #24
 800a33e:	46bd      	mov	sp, r7
 800a340:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a344:	b004      	add	sp, #16
 800a346:	4770      	bx	lr
 800a348:	803c3800 	.word	0x803c3800

0800a34c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a34c:	b480      	push	{r7}
 800a34e:	b085      	sub	sp, #20
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
 800a354:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800a356:	2300      	movs	r3, #0
 800a358:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	019b      	lsls	r3, r3, #6
 800a35e:	f043 0220 	orr.w	r2, r3, #32
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	3301      	adds	r3, #1
 800a36a:	60fb      	str	r3, [r7, #12]
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	4a09      	ldr	r2, [pc, #36]	; (800a394 <USB_FlushTxFifo+0x48>)
 800a370:	4293      	cmp	r3, r2
 800a372:	d901      	bls.n	800a378 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a374:	2303      	movs	r3, #3
 800a376:	e006      	b.n	800a386 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	691b      	ldr	r3, [r3, #16]
 800a37c:	f003 0320 	and.w	r3, r3, #32
 800a380:	2b20      	cmp	r3, #32
 800a382:	d0f0      	beq.n	800a366 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a384:	2300      	movs	r3, #0
}
 800a386:	4618      	mov	r0, r3
 800a388:	3714      	adds	r7, #20
 800a38a:	46bd      	mov	sp, r7
 800a38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a390:	4770      	bx	lr
 800a392:	bf00      	nop
 800a394:	00030d40 	.word	0x00030d40

0800a398 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a398:	b480      	push	{r7}
 800a39a:	b085      	sub	sp, #20
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2210      	movs	r2, #16
 800a3a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	3301      	adds	r3, #1
 800a3ae:	60fb      	str	r3, [r7, #12]
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	4a09      	ldr	r2, [pc, #36]	; (800a3d8 <USB_FlushRxFifo+0x40>)
 800a3b4:	4293      	cmp	r3, r2
 800a3b6:	d901      	bls.n	800a3bc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800a3b8:	2303      	movs	r3, #3
 800a3ba:	e006      	b.n	800a3ca <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	691b      	ldr	r3, [r3, #16]
 800a3c0:	f003 0310 	and.w	r3, r3, #16
 800a3c4:	2b10      	cmp	r3, #16
 800a3c6:	d0f0      	beq.n	800a3aa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a3c8:	2300      	movs	r3, #0
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	3714      	adds	r7, #20
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d4:	4770      	bx	lr
 800a3d6:	bf00      	nop
 800a3d8:	00030d40 	.word	0x00030d40

0800a3dc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b085      	sub	sp, #20
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
 800a3e4:	460b      	mov	r3, r1
 800a3e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3f2:	681a      	ldr	r2, [r3, #0]
 800a3f4:	78fb      	ldrb	r3, [r7, #3]
 800a3f6:	68f9      	ldr	r1, [r7, #12]
 800a3f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a3fc:	4313      	orrs	r3, r2
 800a3fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a400:	2300      	movs	r3, #0
}
 800a402:	4618      	mov	r0, r3
 800a404:	3714      	adds	r7, #20
 800a406:	46bd      	mov	sp, r7
 800a408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40c:	4770      	bx	lr

0800a40e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a40e:	b480      	push	{r7}
 800a410:	b087      	sub	sp, #28
 800a412:	af00      	add	r7, sp, #0
 800a414:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a41a:	693b      	ldr	r3, [r7, #16]
 800a41c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a420:	689b      	ldr	r3, [r3, #8]
 800a422:	f003 0306 	and.w	r3, r3, #6
 800a426:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d102      	bne.n	800a434 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a42e:	2300      	movs	r3, #0
 800a430:	75fb      	strb	r3, [r7, #23]
 800a432:	e00a      	b.n	800a44a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	2b02      	cmp	r3, #2
 800a438:	d002      	beq.n	800a440 <USB_GetDevSpeed+0x32>
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	2b06      	cmp	r3, #6
 800a43e:	d102      	bne.n	800a446 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a440:	2302      	movs	r3, #2
 800a442:	75fb      	strb	r3, [r7, #23]
 800a444:	e001      	b.n	800a44a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a446:	230f      	movs	r3, #15
 800a448:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a44a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	371c      	adds	r7, #28
 800a450:	46bd      	mov	sp, r7
 800a452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a456:	4770      	bx	lr

0800a458 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a458:	b480      	push	{r7}
 800a45a:	b085      	sub	sp, #20
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
 800a460:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	781b      	ldrb	r3, [r3, #0]
 800a46a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	785b      	ldrb	r3, [r3, #1]
 800a470:	2b01      	cmp	r3, #1
 800a472:	d13a      	bne.n	800a4ea <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a47a:	69da      	ldr	r2, [r3, #28]
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	781b      	ldrb	r3, [r3, #0]
 800a480:	f003 030f 	and.w	r3, r3, #15
 800a484:	2101      	movs	r1, #1
 800a486:	fa01 f303 	lsl.w	r3, r1, r3
 800a48a:	b29b      	uxth	r3, r3
 800a48c:	68f9      	ldr	r1, [r7, #12]
 800a48e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a492:	4313      	orrs	r3, r2
 800a494:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	015a      	lsls	r2, r3, #5
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	4413      	add	r3, r2
 800a49e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d155      	bne.n	800a558 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	015a      	lsls	r2, r3, #5
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	4413      	add	r3, r2
 800a4b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4b8:	681a      	ldr	r2, [r3, #0]
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	689b      	ldr	r3, [r3, #8]
 800a4be:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	78db      	ldrb	r3, [r3, #3]
 800a4c6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a4c8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	059b      	lsls	r3, r3, #22
 800a4ce:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a4d0:	4313      	orrs	r3, r2
 800a4d2:	68ba      	ldr	r2, [r7, #8]
 800a4d4:	0151      	lsls	r1, r2, #5
 800a4d6:	68fa      	ldr	r2, [r7, #12]
 800a4d8:	440a      	add	r2, r1
 800a4da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a4e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a4e6:	6013      	str	r3, [r2, #0]
 800a4e8:	e036      	b.n	800a558 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4f0:	69da      	ldr	r2, [r3, #28]
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	781b      	ldrb	r3, [r3, #0]
 800a4f6:	f003 030f 	and.w	r3, r3, #15
 800a4fa:	2101      	movs	r1, #1
 800a4fc:	fa01 f303 	lsl.w	r3, r1, r3
 800a500:	041b      	lsls	r3, r3, #16
 800a502:	68f9      	ldr	r1, [r7, #12]
 800a504:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a508:	4313      	orrs	r3, r2
 800a50a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	015a      	lsls	r2, r3, #5
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	4413      	add	r3, r2
 800a514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d11a      	bne.n	800a558 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	015a      	lsls	r2, r3, #5
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	4413      	add	r3, r2
 800a52a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a52e:	681a      	ldr	r2, [r3, #0]
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	689b      	ldr	r3, [r3, #8]
 800a534:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	78db      	ldrb	r3, [r3, #3]
 800a53c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a53e:	430b      	orrs	r3, r1
 800a540:	4313      	orrs	r3, r2
 800a542:	68ba      	ldr	r2, [r7, #8]
 800a544:	0151      	lsls	r1, r2, #5
 800a546:	68fa      	ldr	r2, [r7, #12]
 800a548:	440a      	add	r2, r1
 800a54a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a54e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a552:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a556:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a558:	2300      	movs	r3, #0
}
 800a55a:	4618      	mov	r0, r3
 800a55c:	3714      	adds	r7, #20
 800a55e:	46bd      	mov	sp, r7
 800a560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a564:	4770      	bx	lr
	...

0800a568 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a568:	b480      	push	{r7}
 800a56a:	b085      	sub	sp, #20
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
 800a570:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	781b      	ldrb	r3, [r3, #0]
 800a57a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	785b      	ldrb	r3, [r3, #1]
 800a580:	2b01      	cmp	r3, #1
 800a582:	d161      	bne.n	800a648 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	015a      	lsls	r2, r3, #5
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	4413      	add	r3, r2
 800a58c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a596:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a59a:	d11f      	bne.n	800a5dc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	015a      	lsls	r2, r3, #5
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	4413      	add	r3, r2
 800a5a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	68ba      	ldr	r2, [r7, #8]
 800a5ac:	0151      	lsls	r1, r2, #5
 800a5ae:	68fa      	ldr	r2, [r7, #12]
 800a5b0:	440a      	add	r2, r1
 800a5b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a5ba:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	015a      	lsls	r2, r3, #5
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	4413      	add	r3, r2
 800a5c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	68ba      	ldr	r2, [r7, #8]
 800a5cc:	0151      	lsls	r1, r2, #5
 800a5ce:	68fa      	ldr	r2, [r7, #12]
 800a5d0:	440a      	add	r2, r1
 800a5d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a5da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	781b      	ldrb	r3, [r3, #0]
 800a5e8:	f003 030f 	and.w	r3, r3, #15
 800a5ec:	2101      	movs	r1, #1
 800a5ee:	fa01 f303 	lsl.w	r3, r1, r3
 800a5f2:	b29b      	uxth	r3, r3
 800a5f4:	43db      	mvns	r3, r3
 800a5f6:	68f9      	ldr	r1, [r7, #12]
 800a5f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a5fc:	4013      	ands	r3, r2
 800a5fe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a606:	69da      	ldr	r2, [r3, #28]
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	781b      	ldrb	r3, [r3, #0]
 800a60c:	f003 030f 	and.w	r3, r3, #15
 800a610:	2101      	movs	r1, #1
 800a612:	fa01 f303 	lsl.w	r3, r1, r3
 800a616:	b29b      	uxth	r3, r3
 800a618:	43db      	mvns	r3, r3
 800a61a:	68f9      	ldr	r1, [r7, #12]
 800a61c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a620:	4013      	ands	r3, r2
 800a622:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	015a      	lsls	r2, r3, #5
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	4413      	add	r3, r2
 800a62c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a630:	681a      	ldr	r2, [r3, #0]
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	0159      	lsls	r1, r3, #5
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	440b      	add	r3, r1
 800a63a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a63e:	4619      	mov	r1, r3
 800a640:	4b35      	ldr	r3, [pc, #212]	; (800a718 <USB_DeactivateEndpoint+0x1b0>)
 800a642:	4013      	ands	r3, r2
 800a644:	600b      	str	r3, [r1, #0]
 800a646:	e060      	b.n	800a70a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a648:	68bb      	ldr	r3, [r7, #8]
 800a64a:	015a      	lsls	r2, r3, #5
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	4413      	add	r3, r2
 800a650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a65a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a65e:	d11f      	bne.n	800a6a0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	015a      	lsls	r2, r3, #5
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	4413      	add	r3, r2
 800a668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	68ba      	ldr	r2, [r7, #8]
 800a670:	0151      	lsls	r1, r2, #5
 800a672:	68fa      	ldr	r2, [r7, #12]
 800a674:	440a      	add	r2, r1
 800a676:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a67a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a67e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	015a      	lsls	r2, r3, #5
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	4413      	add	r3, r2
 800a688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	68ba      	ldr	r2, [r7, #8]
 800a690:	0151      	lsls	r1, r2, #5
 800a692:	68fa      	ldr	r2, [r7, #12]
 800a694:	440a      	add	r2, r1
 800a696:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a69a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a69e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	781b      	ldrb	r3, [r3, #0]
 800a6ac:	f003 030f 	and.w	r3, r3, #15
 800a6b0:	2101      	movs	r1, #1
 800a6b2:	fa01 f303 	lsl.w	r3, r1, r3
 800a6b6:	041b      	lsls	r3, r3, #16
 800a6b8:	43db      	mvns	r3, r3
 800a6ba:	68f9      	ldr	r1, [r7, #12]
 800a6bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a6c0:	4013      	ands	r3, r2
 800a6c2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6ca:	69da      	ldr	r2, [r3, #28]
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	781b      	ldrb	r3, [r3, #0]
 800a6d0:	f003 030f 	and.w	r3, r3, #15
 800a6d4:	2101      	movs	r1, #1
 800a6d6:	fa01 f303 	lsl.w	r3, r1, r3
 800a6da:	041b      	lsls	r3, r3, #16
 800a6dc:	43db      	mvns	r3, r3
 800a6de:	68f9      	ldr	r1, [r7, #12]
 800a6e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a6e4:	4013      	ands	r3, r2
 800a6e6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	015a      	lsls	r2, r3, #5
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	4413      	add	r3, r2
 800a6f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6f4:	681a      	ldr	r2, [r3, #0]
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	0159      	lsls	r1, r3, #5
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	440b      	add	r3, r1
 800a6fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a702:	4619      	mov	r1, r3
 800a704:	4b05      	ldr	r3, [pc, #20]	; (800a71c <USB_DeactivateEndpoint+0x1b4>)
 800a706:	4013      	ands	r3, r2
 800a708:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a70a:	2300      	movs	r3, #0
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	3714      	adds	r7, #20
 800a710:	46bd      	mov	sp, r7
 800a712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a716:	4770      	bx	lr
 800a718:	ec337800 	.word	0xec337800
 800a71c:	eff37800 	.word	0xeff37800

0800a720 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b08a      	sub	sp, #40	; 0x28
 800a724:	af02      	add	r7, sp, #8
 800a726:	60f8      	str	r0, [r7, #12]
 800a728:	60b9      	str	r1, [r7, #8]
 800a72a:	4613      	mov	r3, r2
 800a72c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	781b      	ldrb	r3, [r3, #0]
 800a736:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	785b      	ldrb	r3, [r3, #1]
 800a73c:	2b01      	cmp	r3, #1
 800a73e:	f040 815c 	bne.w	800a9fa <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a742:	68bb      	ldr	r3, [r7, #8]
 800a744:	695b      	ldr	r3, [r3, #20]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d132      	bne.n	800a7b0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a74a:	69bb      	ldr	r3, [r7, #24]
 800a74c:	015a      	lsls	r2, r3, #5
 800a74e:	69fb      	ldr	r3, [r7, #28]
 800a750:	4413      	add	r3, r2
 800a752:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a756:	691b      	ldr	r3, [r3, #16]
 800a758:	69ba      	ldr	r2, [r7, #24]
 800a75a:	0151      	lsls	r1, r2, #5
 800a75c:	69fa      	ldr	r2, [r7, #28]
 800a75e:	440a      	add	r2, r1
 800a760:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a764:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a768:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a76c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a76e:	69bb      	ldr	r3, [r7, #24]
 800a770:	015a      	lsls	r2, r3, #5
 800a772:	69fb      	ldr	r3, [r7, #28]
 800a774:	4413      	add	r3, r2
 800a776:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a77a:	691b      	ldr	r3, [r3, #16]
 800a77c:	69ba      	ldr	r2, [r7, #24]
 800a77e:	0151      	lsls	r1, r2, #5
 800a780:	69fa      	ldr	r2, [r7, #28]
 800a782:	440a      	add	r2, r1
 800a784:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a788:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a78c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a78e:	69bb      	ldr	r3, [r7, #24]
 800a790:	015a      	lsls	r2, r3, #5
 800a792:	69fb      	ldr	r3, [r7, #28]
 800a794:	4413      	add	r3, r2
 800a796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a79a:	691b      	ldr	r3, [r3, #16]
 800a79c:	69ba      	ldr	r2, [r7, #24]
 800a79e:	0151      	lsls	r1, r2, #5
 800a7a0:	69fa      	ldr	r2, [r7, #28]
 800a7a2:	440a      	add	r2, r1
 800a7a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7a8:	0cdb      	lsrs	r3, r3, #19
 800a7aa:	04db      	lsls	r3, r3, #19
 800a7ac:	6113      	str	r3, [r2, #16]
 800a7ae:	e074      	b.n	800a89a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a7b0:	69bb      	ldr	r3, [r7, #24]
 800a7b2:	015a      	lsls	r2, r3, #5
 800a7b4:	69fb      	ldr	r3, [r7, #28]
 800a7b6:	4413      	add	r3, r2
 800a7b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7bc:	691b      	ldr	r3, [r3, #16]
 800a7be:	69ba      	ldr	r2, [r7, #24]
 800a7c0:	0151      	lsls	r1, r2, #5
 800a7c2:	69fa      	ldr	r2, [r7, #28]
 800a7c4:	440a      	add	r2, r1
 800a7c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7ca:	0cdb      	lsrs	r3, r3, #19
 800a7cc:	04db      	lsls	r3, r3, #19
 800a7ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a7d0:	69bb      	ldr	r3, [r7, #24]
 800a7d2:	015a      	lsls	r2, r3, #5
 800a7d4:	69fb      	ldr	r3, [r7, #28]
 800a7d6:	4413      	add	r3, r2
 800a7d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7dc:	691b      	ldr	r3, [r3, #16]
 800a7de:	69ba      	ldr	r2, [r7, #24]
 800a7e0:	0151      	lsls	r1, r2, #5
 800a7e2:	69fa      	ldr	r2, [r7, #28]
 800a7e4:	440a      	add	r2, r1
 800a7e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7ea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a7ee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a7f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a7f4:	69bb      	ldr	r3, [r7, #24]
 800a7f6:	015a      	lsls	r2, r3, #5
 800a7f8:	69fb      	ldr	r3, [r7, #28]
 800a7fa:	4413      	add	r3, r2
 800a7fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a800:	691a      	ldr	r2, [r3, #16]
 800a802:	68bb      	ldr	r3, [r7, #8]
 800a804:	6959      	ldr	r1, [r3, #20]
 800a806:	68bb      	ldr	r3, [r7, #8]
 800a808:	689b      	ldr	r3, [r3, #8]
 800a80a:	440b      	add	r3, r1
 800a80c:	1e59      	subs	r1, r3, #1
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	689b      	ldr	r3, [r3, #8]
 800a812:	fbb1 f3f3 	udiv	r3, r1, r3
 800a816:	04d9      	lsls	r1, r3, #19
 800a818:	4b9d      	ldr	r3, [pc, #628]	; (800aa90 <USB_EPStartXfer+0x370>)
 800a81a:	400b      	ands	r3, r1
 800a81c:	69b9      	ldr	r1, [r7, #24]
 800a81e:	0148      	lsls	r0, r1, #5
 800a820:	69f9      	ldr	r1, [r7, #28]
 800a822:	4401      	add	r1, r0
 800a824:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a828:	4313      	orrs	r3, r2
 800a82a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a82c:	69bb      	ldr	r3, [r7, #24]
 800a82e:	015a      	lsls	r2, r3, #5
 800a830:	69fb      	ldr	r3, [r7, #28]
 800a832:	4413      	add	r3, r2
 800a834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a838:	691a      	ldr	r2, [r3, #16]
 800a83a:	68bb      	ldr	r3, [r7, #8]
 800a83c:	695b      	ldr	r3, [r3, #20]
 800a83e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a842:	69b9      	ldr	r1, [r7, #24]
 800a844:	0148      	lsls	r0, r1, #5
 800a846:	69f9      	ldr	r1, [r7, #28]
 800a848:	4401      	add	r1, r0
 800a84a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a84e:	4313      	orrs	r3, r2
 800a850:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a852:	68bb      	ldr	r3, [r7, #8]
 800a854:	78db      	ldrb	r3, [r3, #3]
 800a856:	2b01      	cmp	r3, #1
 800a858:	d11f      	bne.n	800a89a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a85a:	69bb      	ldr	r3, [r7, #24]
 800a85c:	015a      	lsls	r2, r3, #5
 800a85e:	69fb      	ldr	r3, [r7, #28]
 800a860:	4413      	add	r3, r2
 800a862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a866:	691b      	ldr	r3, [r3, #16]
 800a868:	69ba      	ldr	r2, [r7, #24]
 800a86a:	0151      	lsls	r1, r2, #5
 800a86c:	69fa      	ldr	r2, [r7, #28]
 800a86e:	440a      	add	r2, r1
 800a870:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a874:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a878:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a87a:	69bb      	ldr	r3, [r7, #24]
 800a87c:	015a      	lsls	r2, r3, #5
 800a87e:	69fb      	ldr	r3, [r7, #28]
 800a880:	4413      	add	r3, r2
 800a882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a886:	691b      	ldr	r3, [r3, #16]
 800a888:	69ba      	ldr	r2, [r7, #24]
 800a88a:	0151      	lsls	r1, r2, #5
 800a88c:	69fa      	ldr	r2, [r7, #28]
 800a88e:	440a      	add	r2, r1
 800a890:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a894:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a898:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a89a:	79fb      	ldrb	r3, [r7, #7]
 800a89c:	2b01      	cmp	r3, #1
 800a89e:	d14b      	bne.n	800a938 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	691b      	ldr	r3, [r3, #16]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d009      	beq.n	800a8bc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a8a8:	69bb      	ldr	r3, [r7, #24]
 800a8aa:	015a      	lsls	r2, r3, #5
 800a8ac:	69fb      	ldr	r3, [r7, #28]
 800a8ae:	4413      	add	r3, r2
 800a8b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8b4:	461a      	mov	r2, r3
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	691b      	ldr	r3, [r3, #16]
 800a8ba:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	78db      	ldrb	r3, [r3, #3]
 800a8c0:	2b01      	cmp	r3, #1
 800a8c2:	d128      	bne.n	800a916 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a8c4:	69fb      	ldr	r3, [r7, #28]
 800a8c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8ca:	689b      	ldr	r3, [r3, #8]
 800a8cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d110      	bne.n	800a8f6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a8d4:	69bb      	ldr	r3, [r7, #24]
 800a8d6:	015a      	lsls	r2, r3, #5
 800a8d8:	69fb      	ldr	r3, [r7, #28]
 800a8da:	4413      	add	r3, r2
 800a8dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	69ba      	ldr	r2, [r7, #24]
 800a8e4:	0151      	lsls	r1, r2, #5
 800a8e6:	69fa      	ldr	r2, [r7, #28]
 800a8e8:	440a      	add	r2, r1
 800a8ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a8ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a8f2:	6013      	str	r3, [r2, #0]
 800a8f4:	e00f      	b.n	800a916 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a8f6:	69bb      	ldr	r3, [r7, #24]
 800a8f8:	015a      	lsls	r2, r3, #5
 800a8fa:	69fb      	ldr	r3, [r7, #28]
 800a8fc:	4413      	add	r3, r2
 800a8fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	69ba      	ldr	r2, [r7, #24]
 800a906:	0151      	lsls	r1, r2, #5
 800a908:	69fa      	ldr	r2, [r7, #28]
 800a90a:	440a      	add	r2, r1
 800a90c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a914:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a916:	69bb      	ldr	r3, [r7, #24]
 800a918:	015a      	lsls	r2, r3, #5
 800a91a:	69fb      	ldr	r3, [r7, #28]
 800a91c:	4413      	add	r3, r2
 800a91e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	69ba      	ldr	r2, [r7, #24]
 800a926:	0151      	lsls	r1, r2, #5
 800a928:	69fa      	ldr	r2, [r7, #28]
 800a92a:	440a      	add	r2, r1
 800a92c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a930:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a934:	6013      	str	r3, [r2, #0]
 800a936:	e12f      	b.n	800ab98 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a938:	69bb      	ldr	r3, [r7, #24]
 800a93a:	015a      	lsls	r2, r3, #5
 800a93c:	69fb      	ldr	r3, [r7, #28]
 800a93e:	4413      	add	r3, r2
 800a940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	69ba      	ldr	r2, [r7, #24]
 800a948:	0151      	lsls	r1, r2, #5
 800a94a:	69fa      	ldr	r2, [r7, #28]
 800a94c:	440a      	add	r2, r1
 800a94e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a952:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a956:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a958:	68bb      	ldr	r3, [r7, #8]
 800a95a:	78db      	ldrb	r3, [r3, #3]
 800a95c:	2b01      	cmp	r3, #1
 800a95e:	d015      	beq.n	800a98c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	695b      	ldr	r3, [r3, #20]
 800a964:	2b00      	cmp	r3, #0
 800a966:	f000 8117 	beq.w	800ab98 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a96a:	69fb      	ldr	r3, [r7, #28]
 800a96c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a970:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a972:	68bb      	ldr	r3, [r7, #8]
 800a974:	781b      	ldrb	r3, [r3, #0]
 800a976:	f003 030f 	and.w	r3, r3, #15
 800a97a:	2101      	movs	r1, #1
 800a97c:	fa01 f303 	lsl.w	r3, r1, r3
 800a980:	69f9      	ldr	r1, [r7, #28]
 800a982:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a986:	4313      	orrs	r3, r2
 800a988:	634b      	str	r3, [r1, #52]	; 0x34
 800a98a:	e105      	b.n	800ab98 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a98c:	69fb      	ldr	r3, [r7, #28]
 800a98e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a992:	689b      	ldr	r3, [r3, #8]
 800a994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d110      	bne.n	800a9be <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a99c:	69bb      	ldr	r3, [r7, #24]
 800a99e:	015a      	lsls	r2, r3, #5
 800a9a0:	69fb      	ldr	r3, [r7, #28]
 800a9a2:	4413      	add	r3, r2
 800a9a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	69ba      	ldr	r2, [r7, #24]
 800a9ac:	0151      	lsls	r1, r2, #5
 800a9ae:	69fa      	ldr	r2, [r7, #28]
 800a9b0:	440a      	add	r2, r1
 800a9b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a9ba:	6013      	str	r3, [r2, #0]
 800a9bc:	e00f      	b.n	800a9de <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a9be:	69bb      	ldr	r3, [r7, #24]
 800a9c0:	015a      	lsls	r2, r3, #5
 800a9c2:	69fb      	ldr	r3, [r7, #28]
 800a9c4:	4413      	add	r3, r2
 800a9c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	69ba      	ldr	r2, [r7, #24]
 800a9ce:	0151      	lsls	r1, r2, #5
 800a9d0:	69fa      	ldr	r2, [r7, #28]
 800a9d2:	440a      	add	r2, r1
 800a9d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a9dc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	68d9      	ldr	r1, [r3, #12]
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	781a      	ldrb	r2, [r3, #0]
 800a9e6:	68bb      	ldr	r3, [r7, #8]
 800a9e8:	695b      	ldr	r3, [r3, #20]
 800a9ea:	b298      	uxth	r0, r3
 800a9ec:	79fb      	ldrb	r3, [r7, #7]
 800a9ee:	9300      	str	r3, [sp, #0]
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	68f8      	ldr	r0, [r7, #12]
 800a9f4:	f000 fa2b 	bl	800ae4e <USB_WritePacket>
 800a9f8:	e0ce      	b.n	800ab98 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a9fa:	69bb      	ldr	r3, [r7, #24]
 800a9fc:	015a      	lsls	r2, r3, #5
 800a9fe:	69fb      	ldr	r3, [r7, #28]
 800aa00:	4413      	add	r3, r2
 800aa02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa06:	691b      	ldr	r3, [r3, #16]
 800aa08:	69ba      	ldr	r2, [r7, #24]
 800aa0a:	0151      	lsls	r1, r2, #5
 800aa0c:	69fa      	ldr	r2, [r7, #28]
 800aa0e:	440a      	add	r2, r1
 800aa10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa14:	0cdb      	lsrs	r3, r3, #19
 800aa16:	04db      	lsls	r3, r3, #19
 800aa18:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800aa1a:	69bb      	ldr	r3, [r7, #24]
 800aa1c:	015a      	lsls	r2, r3, #5
 800aa1e:	69fb      	ldr	r3, [r7, #28]
 800aa20:	4413      	add	r3, r2
 800aa22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa26:	691b      	ldr	r3, [r3, #16]
 800aa28:	69ba      	ldr	r2, [r7, #24]
 800aa2a:	0151      	lsls	r1, r2, #5
 800aa2c:	69fa      	ldr	r2, [r7, #28]
 800aa2e:	440a      	add	r2, r1
 800aa30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa34:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800aa38:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800aa3c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800aa3e:	68bb      	ldr	r3, [r7, #8]
 800aa40:	695b      	ldr	r3, [r3, #20]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d126      	bne.n	800aa94 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800aa46:	69bb      	ldr	r3, [r7, #24]
 800aa48:	015a      	lsls	r2, r3, #5
 800aa4a:	69fb      	ldr	r3, [r7, #28]
 800aa4c:	4413      	add	r3, r2
 800aa4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa52:	691a      	ldr	r2, [r3, #16]
 800aa54:	68bb      	ldr	r3, [r7, #8]
 800aa56:	689b      	ldr	r3, [r3, #8]
 800aa58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aa5c:	69b9      	ldr	r1, [r7, #24]
 800aa5e:	0148      	lsls	r0, r1, #5
 800aa60:	69f9      	ldr	r1, [r7, #28]
 800aa62:	4401      	add	r1, r0
 800aa64:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800aa68:	4313      	orrs	r3, r2
 800aa6a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aa6c:	69bb      	ldr	r3, [r7, #24]
 800aa6e:	015a      	lsls	r2, r3, #5
 800aa70:	69fb      	ldr	r3, [r7, #28]
 800aa72:	4413      	add	r3, r2
 800aa74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa78:	691b      	ldr	r3, [r3, #16]
 800aa7a:	69ba      	ldr	r2, [r7, #24]
 800aa7c:	0151      	lsls	r1, r2, #5
 800aa7e:	69fa      	ldr	r2, [r7, #28]
 800aa80:	440a      	add	r2, r1
 800aa82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aa8a:	6113      	str	r3, [r2, #16]
 800aa8c:	e036      	b.n	800aafc <USB_EPStartXfer+0x3dc>
 800aa8e:	bf00      	nop
 800aa90:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800aa94:	68bb      	ldr	r3, [r7, #8]
 800aa96:	695a      	ldr	r2, [r3, #20]
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	689b      	ldr	r3, [r3, #8]
 800aa9c:	4413      	add	r3, r2
 800aa9e:	1e5a      	subs	r2, r3, #1
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	689b      	ldr	r3, [r3, #8]
 800aaa4:	fbb2 f3f3 	udiv	r3, r2, r3
 800aaa8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800aaaa:	69bb      	ldr	r3, [r7, #24]
 800aaac:	015a      	lsls	r2, r3, #5
 800aaae:	69fb      	ldr	r3, [r7, #28]
 800aab0:	4413      	add	r3, r2
 800aab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aab6:	691a      	ldr	r2, [r3, #16]
 800aab8:	8afb      	ldrh	r3, [r7, #22]
 800aaba:	04d9      	lsls	r1, r3, #19
 800aabc:	4b39      	ldr	r3, [pc, #228]	; (800aba4 <USB_EPStartXfer+0x484>)
 800aabe:	400b      	ands	r3, r1
 800aac0:	69b9      	ldr	r1, [r7, #24]
 800aac2:	0148      	lsls	r0, r1, #5
 800aac4:	69f9      	ldr	r1, [r7, #28]
 800aac6:	4401      	add	r1, r0
 800aac8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800aacc:	4313      	orrs	r3, r2
 800aace:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800aad0:	69bb      	ldr	r3, [r7, #24]
 800aad2:	015a      	lsls	r2, r3, #5
 800aad4:	69fb      	ldr	r3, [r7, #28]
 800aad6:	4413      	add	r3, r2
 800aad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aadc:	691a      	ldr	r2, [r3, #16]
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	689b      	ldr	r3, [r3, #8]
 800aae2:	8af9      	ldrh	r1, [r7, #22]
 800aae4:	fb01 f303 	mul.w	r3, r1, r3
 800aae8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aaec:	69b9      	ldr	r1, [r7, #24]
 800aaee:	0148      	lsls	r0, r1, #5
 800aaf0:	69f9      	ldr	r1, [r7, #28]
 800aaf2:	4401      	add	r1, r0
 800aaf4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800aaf8:	4313      	orrs	r3, r2
 800aafa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800aafc:	79fb      	ldrb	r3, [r7, #7]
 800aafe:	2b01      	cmp	r3, #1
 800ab00:	d10d      	bne.n	800ab1e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ab02:	68bb      	ldr	r3, [r7, #8]
 800ab04:	68db      	ldr	r3, [r3, #12]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d009      	beq.n	800ab1e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ab0a:	68bb      	ldr	r3, [r7, #8]
 800ab0c:	68d9      	ldr	r1, [r3, #12]
 800ab0e:	69bb      	ldr	r3, [r7, #24]
 800ab10:	015a      	lsls	r2, r3, #5
 800ab12:	69fb      	ldr	r3, [r7, #28]
 800ab14:	4413      	add	r3, r2
 800ab16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab1a:	460a      	mov	r2, r1
 800ab1c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ab1e:	68bb      	ldr	r3, [r7, #8]
 800ab20:	78db      	ldrb	r3, [r3, #3]
 800ab22:	2b01      	cmp	r3, #1
 800ab24:	d128      	bne.n	800ab78 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ab26:	69fb      	ldr	r3, [r7, #28]
 800ab28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab2c:	689b      	ldr	r3, [r3, #8]
 800ab2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d110      	bne.n	800ab58 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ab36:	69bb      	ldr	r3, [r7, #24]
 800ab38:	015a      	lsls	r2, r3, #5
 800ab3a:	69fb      	ldr	r3, [r7, #28]
 800ab3c:	4413      	add	r3, r2
 800ab3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	69ba      	ldr	r2, [r7, #24]
 800ab46:	0151      	lsls	r1, r2, #5
 800ab48:	69fa      	ldr	r2, [r7, #28]
 800ab4a:	440a      	add	r2, r1
 800ab4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab50:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ab54:	6013      	str	r3, [r2, #0]
 800ab56:	e00f      	b.n	800ab78 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ab58:	69bb      	ldr	r3, [r7, #24]
 800ab5a:	015a      	lsls	r2, r3, #5
 800ab5c:	69fb      	ldr	r3, [r7, #28]
 800ab5e:	4413      	add	r3, r2
 800ab60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	69ba      	ldr	r2, [r7, #24]
 800ab68:	0151      	lsls	r1, r2, #5
 800ab6a:	69fa      	ldr	r2, [r7, #28]
 800ab6c:	440a      	add	r2, r1
 800ab6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab76:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ab78:	69bb      	ldr	r3, [r7, #24]
 800ab7a:	015a      	lsls	r2, r3, #5
 800ab7c:	69fb      	ldr	r3, [r7, #28]
 800ab7e:	4413      	add	r3, r2
 800ab80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	69ba      	ldr	r2, [r7, #24]
 800ab88:	0151      	lsls	r1, r2, #5
 800ab8a:	69fa      	ldr	r2, [r7, #28]
 800ab8c:	440a      	add	r2, r1
 800ab8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab92:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ab96:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ab98:	2300      	movs	r3, #0
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	3720      	adds	r7, #32
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}
 800aba2:	bf00      	nop
 800aba4:	1ff80000 	.word	0x1ff80000

0800aba8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800aba8:	b480      	push	{r7}
 800abaa:	b087      	sub	sp, #28
 800abac:	af00      	add	r7, sp, #0
 800abae:	60f8      	str	r0, [r7, #12]
 800abb0:	60b9      	str	r1, [r7, #8]
 800abb2:	4613      	mov	r3, r2
 800abb4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800abba:	68bb      	ldr	r3, [r7, #8]
 800abbc:	781b      	ldrb	r3, [r3, #0]
 800abbe:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	785b      	ldrb	r3, [r3, #1]
 800abc4:	2b01      	cmp	r3, #1
 800abc6:	f040 80cd 	bne.w	800ad64 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800abca:	68bb      	ldr	r3, [r7, #8]
 800abcc:	695b      	ldr	r3, [r3, #20]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d132      	bne.n	800ac38 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	015a      	lsls	r2, r3, #5
 800abd6:	697b      	ldr	r3, [r7, #20]
 800abd8:	4413      	add	r3, r2
 800abda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abde:	691b      	ldr	r3, [r3, #16]
 800abe0:	693a      	ldr	r2, [r7, #16]
 800abe2:	0151      	lsls	r1, r2, #5
 800abe4:	697a      	ldr	r2, [r7, #20]
 800abe6:	440a      	add	r2, r1
 800abe8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800abf0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800abf4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800abf6:	693b      	ldr	r3, [r7, #16]
 800abf8:	015a      	lsls	r2, r3, #5
 800abfa:	697b      	ldr	r3, [r7, #20]
 800abfc:	4413      	add	r3, r2
 800abfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac02:	691b      	ldr	r3, [r3, #16]
 800ac04:	693a      	ldr	r2, [r7, #16]
 800ac06:	0151      	lsls	r1, r2, #5
 800ac08:	697a      	ldr	r2, [r7, #20]
 800ac0a:	440a      	add	r2, r1
 800ac0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ac14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ac16:	693b      	ldr	r3, [r7, #16]
 800ac18:	015a      	lsls	r2, r3, #5
 800ac1a:	697b      	ldr	r3, [r7, #20]
 800ac1c:	4413      	add	r3, r2
 800ac1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac22:	691b      	ldr	r3, [r3, #16]
 800ac24:	693a      	ldr	r2, [r7, #16]
 800ac26:	0151      	lsls	r1, r2, #5
 800ac28:	697a      	ldr	r2, [r7, #20]
 800ac2a:	440a      	add	r2, r1
 800ac2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac30:	0cdb      	lsrs	r3, r3, #19
 800ac32:	04db      	lsls	r3, r3, #19
 800ac34:	6113      	str	r3, [r2, #16]
 800ac36:	e04e      	b.n	800acd6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	015a      	lsls	r2, r3, #5
 800ac3c:	697b      	ldr	r3, [r7, #20]
 800ac3e:	4413      	add	r3, r2
 800ac40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac44:	691b      	ldr	r3, [r3, #16]
 800ac46:	693a      	ldr	r2, [r7, #16]
 800ac48:	0151      	lsls	r1, r2, #5
 800ac4a:	697a      	ldr	r2, [r7, #20]
 800ac4c:	440a      	add	r2, r1
 800ac4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac52:	0cdb      	lsrs	r3, r3, #19
 800ac54:	04db      	lsls	r3, r3, #19
 800ac56:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ac58:	693b      	ldr	r3, [r7, #16]
 800ac5a:	015a      	lsls	r2, r3, #5
 800ac5c:	697b      	ldr	r3, [r7, #20]
 800ac5e:	4413      	add	r3, r2
 800ac60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac64:	691b      	ldr	r3, [r3, #16]
 800ac66:	693a      	ldr	r2, [r7, #16]
 800ac68:	0151      	lsls	r1, r2, #5
 800ac6a:	697a      	ldr	r2, [r7, #20]
 800ac6c:	440a      	add	r2, r1
 800ac6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac72:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ac76:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ac7a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800ac7c:	68bb      	ldr	r3, [r7, #8]
 800ac7e:	695a      	ldr	r2, [r3, #20]
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	689b      	ldr	r3, [r3, #8]
 800ac84:	429a      	cmp	r2, r3
 800ac86:	d903      	bls.n	800ac90 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	689a      	ldr	r2, [r3, #8]
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ac90:	693b      	ldr	r3, [r7, #16]
 800ac92:	015a      	lsls	r2, r3, #5
 800ac94:	697b      	ldr	r3, [r7, #20]
 800ac96:	4413      	add	r3, r2
 800ac98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac9c:	691b      	ldr	r3, [r3, #16]
 800ac9e:	693a      	ldr	r2, [r7, #16]
 800aca0:	0151      	lsls	r1, r2, #5
 800aca2:	697a      	ldr	r2, [r7, #20]
 800aca4:	440a      	add	r2, r1
 800aca6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800acaa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800acae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800acb0:	693b      	ldr	r3, [r7, #16]
 800acb2:	015a      	lsls	r2, r3, #5
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	4413      	add	r3, r2
 800acb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acbc:	691a      	ldr	r2, [r3, #16]
 800acbe:	68bb      	ldr	r3, [r7, #8]
 800acc0:	695b      	ldr	r3, [r3, #20]
 800acc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800acc6:	6939      	ldr	r1, [r7, #16]
 800acc8:	0148      	lsls	r0, r1, #5
 800acca:	6979      	ldr	r1, [r7, #20]
 800accc:	4401      	add	r1, r0
 800acce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800acd2:	4313      	orrs	r3, r2
 800acd4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800acd6:	79fb      	ldrb	r3, [r7, #7]
 800acd8:	2b01      	cmp	r3, #1
 800acda:	d11e      	bne.n	800ad1a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	691b      	ldr	r3, [r3, #16]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d009      	beq.n	800acf8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ace4:	693b      	ldr	r3, [r7, #16]
 800ace6:	015a      	lsls	r2, r3, #5
 800ace8:	697b      	ldr	r3, [r7, #20]
 800acea:	4413      	add	r3, r2
 800acec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acf0:	461a      	mov	r2, r3
 800acf2:	68bb      	ldr	r3, [r7, #8]
 800acf4:	691b      	ldr	r3, [r3, #16]
 800acf6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800acf8:	693b      	ldr	r3, [r7, #16]
 800acfa:	015a      	lsls	r2, r3, #5
 800acfc:	697b      	ldr	r3, [r7, #20]
 800acfe:	4413      	add	r3, r2
 800ad00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	693a      	ldr	r2, [r7, #16]
 800ad08:	0151      	lsls	r1, r2, #5
 800ad0a:	697a      	ldr	r2, [r7, #20]
 800ad0c:	440a      	add	r2, r1
 800ad0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad12:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ad16:	6013      	str	r3, [r2, #0]
 800ad18:	e092      	b.n	800ae40 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ad1a:	693b      	ldr	r3, [r7, #16]
 800ad1c:	015a      	lsls	r2, r3, #5
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	4413      	add	r3, r2
 800ad22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	693a      	ldr	r2, [r7, #16]
 800ad2a:	0151      	lsls	r1, r2, #5
 800ad2c:	697a      	ldr	r2, [r7, #20]
 800ad2e:	440a      	add	r2, r1
 800ad30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad34:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ad38:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	695b      	ldr	r3, [r3, #20]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d07e      	beq.n	800ae40 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ad42:	697b      	ldr	r3, [r7, #20]
 800ad44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad4a:	68bb      	ldr	r3, [r7, #8]
 800ad4c:	781b      	ldrb	r3, [r3, #0]
 800ad4e:	f003 030f 	and.w	r3, r3, #15
 800ad52:	2101      	movs	r1, #1
 800ad54:	fa01 f303 	lsl.w	r3, r1, r3
 800ad58:	6979      	ldr	r1, [r7, #20]
 800ad5a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ad5e:	4313      	orrs	r3, r2
 800ad60:	634b      	str	r3, [r1, #52]	; 0x34
 800ad62:	e06d      	b.n	800ae40 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ad64:	693b      	ldr	r3, [r7, #16]
 800ad66:	015a      	lsls	r2, r3, #5
 800ad68:	697b      	ldr	r3, [r7, #20]
 800ad6a:	4413      	add	r3, r2
 800ad6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad70:	691b      	ldr	r3, [r3, #16]
 800ad72:	693a      	ldr	r2, [r7, #16]
 800ad74:	0151      	lsls	r1, r2, #5
 800ad76:	697a      	ldr	r2, [r7, #20]
 800ad78:	440a      	add	r2, r1
 800ad7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad7e:	0cdb      	lsrs	r3, r3, #19
 800ad80:	04db      	lsls	r3, r3, #19
 800ad82:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ad84:	693b      	ldr	r3, [r7, #16]
 800ad86:	015a      	lsls	r2, r3, #5
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	4413      	add	r3, r2
 800ad8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad90:	691b      	ldr	r3, [r3, #16]
 800ad92:	693a      	ldr	r2, [r7, #16]
 800ad94:	0151      	lsls	r1, r2, #5
 800ad96:	697a      	ldr	r2, [r7, #20]
 800ad98:	440a      	add	r2, r1
 800ad9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad9e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ada2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ada6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	695b      	ldr	r3, [r3, #20]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d003      	beq.n	800adb8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	689a      	ldr	r2, [r3, #8]
 800adb4:	68bb      	ldr	r3, [r7, #8]
 800adb6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800adb8:	693b      	ldr	r3, [r7, #16]
 800adba:	015a      	lsls	r2, r3, #5
 800adbc:	697b      	ldr	r3, [r7, #20]
 800adbe:	4413      	add	r3, r2
 800adc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adc4:	691b      	ldr	r3, [r3, #16]
 800adc6:	693a      	ldr	r2, [r7, #16]
 800adc8:	0151      	lsls	r1, r2, #5
 800adca:	697a      	ldr	r2, [r7, #20]
 800adcc:	440a      	add	r2, r1
 800adce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800add2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800add6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800add8:	693b      	ldr	r3, [r7, #16]
 800adda:	015a      	lsls	r2, r3, #5
 800addc:	697b      	ldr	r3, [r7, #20]
 800adde:	4413      	add	r3, r2
 800ade0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ade4:	691a      	ldr	r2, [r3, #16]
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	689b      	ldr	r3, [r3, #8]
 800adea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800adee:	6939      	ldr	r1, [r7, #16]
 800adf0:	0148      	lsls	r0, r1, #5
 800adf2:	6979      	ldr	r1, [r7, #20]
 800adf4:	4401      	add	r1, r0
 800adf6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800adfa:	4313      	orrs	r3, r2
 800adfc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800adfe:	79fb      	ldrb	r3, [r7, #7]
 800ae00:	2b01      	cmp	r3, #1
 800ae02:	d10d      	bne.n	800ae20 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	68db      	ldr	r3, [r3, #12]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d009      	beq.n	800ae20 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	68d9      	ldr	r1, [r3, #12]
 800ae10:	693b      	ldr	r3, [r7, #16]
 800ae12:	015a      	lsls	r2, r3, #5
 800ae14:	697b      	ldr	r3, [r7, #20]
 800ae16:	4413      	add	r3, r2
 800ae18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae1c:	460a      	mov	r2, r1
 800ae1e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ae20:	693b      	ldr	r3, [r7, #16]
 800ae22:	015a      	lsls	r2, r3, #5
 800ae24:	697b      	ldr	r3, [r7, #20]
 800ae26:	4413      	add	r3, r2
 800ae28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	693a      	ldr	r2, [r7, #16]
 800ae30:	0151      	lsls	r1, r2, #5
 800ae32:	697a      	ldr	r2, [r7, #20]
 800ae34:	440a      	add	r2, r1
 800ae36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae3a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ae3e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ae40:	2300      	movs	r3, #0
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	371c      	adds	r7, #28
 800ae46:	46bd      	mov	sp, r7
 800ae48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4c:	4770      	bx	lr

0800ae4e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ae4e:	b480      	push	{r7}
 800ae50:	b089      	sub	sp, #36	; 0x24
 800ae52:	af00      	add	r7, sp, #0
 800ae54:	60f8      	str	r0, [r7, #12]
 800ae56:	60b9      	str	r1, [r7, #8]
 800ae58:	4611      	mov	r1, r2
 800ae5a:	461a      	mov	r2, r3
 800ae5c:	460b      	mov	r3, r1
 800ae5e:	71fb      	strb	r3, [r7, #7]
 800ae60:	4613      	mov	r3, r2
 800ae62:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800ae68:	68bb      	ldr	r3, [r7, #8]
 800ae6a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800ae6c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d11a      	bne.n	800aeaa <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ae74:	88bb      	ldrh	r3, [r7, #4]
 800ae76:	3303      	adds	r3, #3
 800ae78:	089b      	lsrs	r3, r3, #2
 800ae7a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	61bb      	str	r3, [r7, #24]
 800ae80:	e00f      	b.n	800aea2 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ae82:	79fb      	ldrb	r3, [r7, #7]
 800ae84:	031a      	lsls	r2, r3, #12
 800ae86:	697b      	ldr	r3, [r7, #20]
 800ae88:	4413      	add	r3, r2
 800ae8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae8e:	461a      	mov	r2, r3
 800ae90:	69fb      	ldr	r3, [r7, #28]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ae96:	69fb      	ldr	r3, [r7, #28]
 800ae98:	3304      	adds	r3, #4
 800ae9a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ae9c:	69bb      	ldr	r3, [r7, #24]
 800ae9e:	3301      	adds	r3, #1
 800aea0:	61bb      	str	r3, [r7, #24]
 800aea2:	69ba      	ldr	r2, [r7, #24]
 800aea4:	693b      	ldr	r3, [r7, #16]
 800aea6:	429a      	cmp	r2, r3
 800aea8:	d3eb      	bcc.n	800ae82 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800aeaa:	2300      	movs	r3, #0
}
 800aeac:	4618      	mov	r0, r3
 800aeae:	3724      	adds	r7, #36	; 0x24
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb6:	4770      	bx	lr

0800aeb8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800aeb8:	b480      	push	{r7}
 800aeba:	b089      	sub	sp, #36	; 0x24
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	60f8      	str	r0, [r7, #12]
 800aec0:	60b9      	str	r1, [r7, #8]
 800aec2:	4613      	mov	r3, r2
 800aec4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800aece:	88fb      	ldrh	r3, [r7, #6]
 800aed0:	3303      	adds	r3, #3
 800aed2:	089b      	lsrs	r3, r3, #2
 800aed4:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800aed6:	2300      	movs	r3, #0
 800aed8:	61bb      	str	r3, [r7, #24]
 800aeda:	e00b      	b.n	800aef4 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800aedc:	697b      	ldr	r3, [r7, #20]
 800aede:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aee2:	681a      	ldr	r2, [r3, #0]
 800aee4:	69fb      	ldr	r3, [r7, #28]
 800aee6:	601a      	str	r2, [r3, #0]
    pDest++;
 800aee8:	69fb      	ldr	r3, [r7, #28]
 800aeea:	3304      	adds	r3, #4
 800aeec:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800aeee:	69bb      	ldr	r3, [r7, #24]
 800aef0:	3301      	adds	r3, #1
 800aef2:	61bb      	str	r3, [r7, #24]
 800aef4:	69ba      	ldr	r2, [r7, #24]
 800aef6:	693b      	ldr	r3, [r7, #16]
 800aef8:	429a      	cmp	r2, r3
 800aefa:	d3ef      	bcc.n	800aedc <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800aefc:	69fb      	ldr	r3, [r7, #28]
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3724      	adds	r7, #36	; 0x24
 800af02:	46bd      	mov	sp, r7
 800af04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af08:	4770      	bx	lr

0800af0a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800af0a:	b480      	push	{r7}
 800af0c:	b085      	sub	sp, #20
 800af0e:	af00      	add	r7, sp, #0
 800af10:	6078      	str	r0, [r7, #4]
 800af12:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	781b      	ldrb	r3, [r3, #0]
 800af1c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	785b      	ldrb	r3, [r3, #1]
 800af22:	2b01      	cmp	r3, #1
 800af24:	d12c      	bne.n	800af80 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800af26:	68bb      	ldr	r3, [r7, #8]
 800af28:	015a      	lsls	r2, r3, #5
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	4413      	add	r3, r2
 800af2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	2b00      	cmp	r3, #0
 800af36:	db12      	blt.n	800af5e <USB_EPSetStall+0x54>
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d00f      	beq.n	800af5e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800af3e:	68bb      	ldr	r3, [r7, #8]
 800af40:	015a      	lsls	r2, r3, #5
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	4413      	add	r3, r2
 800af46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	68ba      	ldr	r2, [r7, #8]
 800af4e:	0151      	lsls	r1, r2, #5
 800af50:	68fa      	ldr	r2, [r7, #12]
 800af52:	440a      	add	r2, r1
 800af54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af58:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800af5c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800af5e:	68bb      	ldr	r3, [r7, #8]
 800af60:	015a      	lsls	r2, r3, #5
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	4413      	add	r3, r2
 800af66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	68ba      	ldr	r2, [r7, #8]
 800af6e:	0151      	lsls	r1, r2, #5
 800af70:	68fa      	ldr	r2, [r7, #12]
 800af72:	440a      	add	r2, r1
 800af74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800af7c:	6013      	str	r3, [r2, #0]
 800af7e:	e02b      	b.n	800afd8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	015a      	lsls	r2, r3, #5
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	4413      	add	r3, r2
 800af88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	db12      	blt.n	800afb8 <USB_EPSetStall+0xae>
 800af92:	68bb      	ldr	r3, [r7, #8]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d00f      	beq.n	800afb8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800af98:	68bb      	ldr	r3, [r7, #8]
 800af9a:	015a      	lsls	r2, r3, #5
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	4413      	add	r3, r2
 800afa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	68ba      	ldr	r2, [r7, #8]
 800afa8:	0151      	lsls	r1, r2, #5
 800afaa:	68fa      	ldr	r2, [r7, #12]
 800afac:	440a      	add	r2, r1
 800afae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800afb2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800afb6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	015a      	lsls	r2, r3, #5
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	4413      	add	r3, r2
 800afc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	68ba      	ldr	r2, [r7, #8]
 800afc8:	0151      	lsls	r1, r2, #5
 800afca:	68fa      	ldr	r2, [r7, #12]
 800afcc:	440a      	add	r2, r1
 800afce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800afd2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800afd6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800afd8:	2300      	movs	r3, #0
}
 800afda:	4618      	mov	r0, r3
 800afdc:	3714      	adds	r7, #20
 800afde:	46bd      	mov	sp, r7
 800afe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe4:	4770      	bx	lr

0800afe6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800afe6:	b480      	push	{r7}
 800afe8:	b085      	sub	sp, #20
 800afea:	af00      	add	r7, sp, #0
 800afec:	6078      	str	r0, [r7, #4]
 800afee:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	781b      	ldrb	r3, [r3, #0]
 800aff8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	785b      	ldrb	r3, [r3, #1]
 800affe:	2b01      	cmp	r3, #1
 800b000:	d128      	bne.n	800b054 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b002:	68bb      	ldr	r3, [r7, #8]
 800b004:	015a      	lsls	r2, r3, #5
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	4413      	add	r3, r2
 800b00a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	68ba      	ldr	r2, [r7, #8]
 800b012:	0151      	lsls	r1, r2, #5
 800b014:	68fa      	ldr	r2, [r7, #12]
 800b016:	440a      	add	r2, r1
 800b018:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b01c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b020:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	78db      	ldrb	r3, [r3, #3]
 800b026:	2b03      	cmp	r3, #3
 800b028:	d003      	beq.n	800b032 <USB_EPClearStall+0x4c>
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	78db      	ldrb	r3, [r3, #3]
 800b02e:	2b02      	cmp	r3, #2
 800b030:	d138      	bne.n	800b0a4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b032:	68bb      	ldr	r3, [r7, #8]
 800b034:	015a      	lsls	r2, r3, #5
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	4413      	add	r3, r2
 800b03a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	68ba      	ldr	r2, [r7, #8]
 800b042:	0151      	lsls	r1, r2, #5
 800b044:	68fa      	ldr	r2, [r7, #12]
 800b046:	440a      	add	r2, r1
 800b048:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b04c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b050:	6013      	str	r3, [r2, #0]
 800b052:	e027      	b.n	800b0a4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	015a      	lsls	r2, r3, #5
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	4413      	add	r3, r2
 800b05c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	68ba      	ldr	r2, [r7, #8]
 800b064:	0151      	lsls	r1, r2, #5
 800b066:	68fa      	ldr	r2, [r7, #12]
 800b068:	440a      	add	r2, r1
 800b06a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b06e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b072:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	78db      	ldrb	r3, [r3, #3]
 800b078:	2b03      	cmp	r3, #3
 800b07a:	d003      	beq.n	800b084 <USB_EPClearStall+0x9e>
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	78db      	ldrb	r3, [r3, #3]
 800b080:	2b02      	cmp	r3, #2
 800b082:	d10f      	bne.n	800b0a4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	015a      	lsls	r2, r3, #5
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	4413      	add	r3, r2
 800b08c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	68ba      	ldr	r2, [r7, #8]
 800b094:	0151      	lsls	r1, r2, #5
 800b096:	68fa      	ldr	r2, [r7, #12]
 800b098:	440a      	add	r2, r1
 800b09a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b09e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b0a2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b0a4:	2300      	movs	r3, #0
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	3714      	adds	r7, #20
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b0:	4770      	bx	lr

0800b0b2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b0b2:	b480      	push	{r7}
 800b0b4:	b085      	sub	sp, #20
 800b0b6:	af00      	add	r7, sp, #0
 800b0b8:	6078      	str	r0, [r7, #4]
 800b0ba:	460b      	mov	r3, r1
 800b0bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	68fa      	ldr	r2, [r7, #12]
 800b0cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b0d0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b0d4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0dc:	681a      	ldr	r2, [r3, #0]
 800b0de:	78fb      	ldrb	r3, [r7, #3]
 800b0e0:	011b      	lsls	r3, r3, #4
 800b0e2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b0e6:	68f9      	ldr	r1, [r7, #12]
 800b0e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b0ec:	4313      	orrs	r3, r2
 800b0ee:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b0f0:	2300      	movs	r3, #0
}
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	3714      	adds	r7, #20
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fc:	4770      	bx	lr

0800b0fe <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b0fe:	b480      	push	{r7}
 800b100:	b085      	sub	sp, #20
 800b102:	af00      	add	r7, sp, #0
 800b104:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	68fa      	ldr	r2, [r7, #12]
 800b114:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b118:	f023 0303 	bic.w	r3, r3, #3
 800b11c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b124:	685b      	ldr	r3, [r3, #4]
 800b126:	68fa      	ldr	r2, [r7, #12]
 800b128:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b12c:	f023 0302 	bic.w	r3, r3, #2
 800b130:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b132:	2300      	movs	r3, #0
}
 800b134:	4618      	mov	r0, r3
 800b136:	3714      	adds	r7, #20
 800b138:	46bd      	mov	sp, r7
 800b13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13e:	4770      	bx	lr

0800b140 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b140:	b480      	push	{r7}
 800b142:	b085      	sub	sp, #20
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	68fa      	ldr	r2, [r7, #12]
 800b156:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b15a:	f023 0303 	bic.w	r3, r3, #3
 800b15e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b166:	685b      	ldr	r3, [r3, #4]
 800b168:	68fa      	ldr	r2, [r7, #12]
 800b16a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b16e:	f043 0302 	orr.w	r3, r3, #2
 800b172:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b174:	2300      	movs	r3, #0
}
 800b176:	4618      	mov	r0, r3
 800b178:	3714      	adds	r7, #20
 800b17a:	46bd      	mov	sp, r7
 800b17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b180:	4770      	bx	lr

0800b182 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b182:	b480      	push	{r7}
 800b184:	b085      	sub	sp, #20
 800b186:	af00      	add	r7, sp, #0
 800b188:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	695b      	ldr	r3, [r3, #20]
 800b18e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	699b      	ldr	r3, [r3, #24]
 800b194:	68fa      	ldr	r2, [r7, #12]
 800b196:	4013      	ands	r3, r2
 800b198:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b19a:	68fb      	ldr	r3, [r7, #12]
}
 800b19c:	4618      	mov	r0, r3
 800b19e:	3714      	adds	r7, #20
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a6:	4770      	bx	lr

0800b1a8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b1a8:	b480      	push	{r7}
 800b1aa:	b085      	sub	sp, #20
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1ba:	699b      	ldr	r3, [r3, #24]
 800b1bc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1c4:	69db      	ldr	r3, [r3, #28]
 800b1c6:	68ba      	ldr	r2, [r7, #8]
 800b1c8:	4013      	ands	r3, r2
 800b1ca:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	0c1b      	lsrs	r3, r3, #16
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	3714      	adds	r7, #20
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1da:	4770      	bx	lr

0800b1dc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b1dc:	b480      	push	{r7}
 800b1de:	b085      	sub	sp, #20
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1ee:	699b      	ldr	r3, [r3, #24]
 800b1f0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1f8:	69db      	ldr	r3, [r3, #28]
 800b1fa:	68ba      	ldr	r2, [r7, #8]
 800b1fc:	4013      	ands	r3, r2
 800b1fe:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	b29b      	uxth	r3, r3
}
 800b204:	4618      	mov	r0, r3
 800b206:	3714      	adds	r7, #20
 800b208:	46bd      	mov	sp, r7
 800b20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20e:	4770      	bx	lr

0800b210 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b210:	b480      	push	{r7}
 800b212:	b085      	sub	sp, #20
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
 800b218:	460b      	mov	r3, r1
 800b21a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b220:	78fb      	ldrb	r3, [r7, #3]
 800b222:	015a      	lsls	r2, r3, #5
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	4413      	add	r3, r2
 800b228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b22c:	689b      	ldr	r3, [r3, #8]
 800b22e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b236:	695b      	ldr	r3, [r3, #20]
 800b238:	68ba      	ldr	r2, [r7, #8]
 800b23a:	4013      	ands	r3, r2
 800b23c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b23e:	68bb      	ldr	r3, [r7, #8]
}
 800b240:	4618      	mov	r0, r3
 800b242:	3714      	adds	r7, #20
 800b244:	46bd      	mov	sp, r7
 800b246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24a:	4770      	bx	lr

0800b24c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b24c:	b480      	push	{r7}
 800b24e:	b087      	sub	sp, #28
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
 800b254:	460b      	mov	r3, r1
 800b256:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b25c:	697b      	ldr	r3, [r7, #20]
 800b25e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b262:	691b      	ldr	r3, [r3, #16]
 800b264:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b266:	697b      	ldr	r3, [r7, #20]
 800b268:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b26c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b26e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b270:	78fb      	ldrb	r3, [r7, #3]
 800b272:	f003 030f 	and.w	r3, r3, #15
 800b276:	68fa      	ldr	r2, [r7, #12]
 800b278:	fa22 f303 	lsr.w	r3, r2, r3
 800b27c:	01db      	lsls	r3, r3, #7
 800b27e:	b2db      	uxtb	r3, r3
 800b280:	693a      	ldr	r2, [r7, #16]
 800b282:	4313      	orrs	r3, r2
 800b284:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b286:	78fb      	ldrb	r3, [r7, #3]
 800b288:	015a      	lsls	r2, r3, #5
 800b28a:	697b      	ldr	r3, [r7, #20]
 800b28c:	4413      	add	r3, r2
 800b28e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b292:	689b      	ldr	r3, [r3, #8]
 800b294:	693a      	ldr	r2, [r7, #16]
 800b296:	4013      	ands	r3, r2
 800b298:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b29a:	68bb      	ldr	r3, [r7, #8]
}
 800b29c:	4618      	mov	r0, r3
 800b29e:	371c      	adds	r7, #28
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a6:	4770      	bx	lr

0800b2a8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b2a8:	b480      	push	{r7}
 800b2aa:	b083      	sub	sp, #12
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	695b      	ldr	r3, [r3, #20]
 800b2b4:	f003 0301 	and.w	r3, r3, #1
}
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	370c      	adds	r7, #12
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c2:	4770      	bx	lr

0800b2c4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b085      	sub	sp, #20
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	68fa      	ldr	r2, [r7, #12]
 800b2da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b2de:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b2e2:	f023 0307 	bic.w	r3, r3, #7
 800b2e6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2ee:	685b      	ldr	r3, [r3, #4]
 800b2f0:	68fa      	ldr	r2, [r7, #12]
 800b2f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b2f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b2fa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b2fc:	2300      	movs	r3, #0
}
 800b2fe:	4618      	mov	r0, r3
 800b300:	3714      	adds	r7, #20
 800b302:	46bd      	mov	sp, r7
 800b304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b308:	4770      	bx	lr
	...

0800b30c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800b30c:	b480      	push	{r7}
 800b30e:	b087      	sub	sp, #28
 800b310:	af00      	add	r7, sp, #0
 800b312:	60f8      	str	r0, [r7, #12]
 800b314:	460b      	mov	r3, r1
 800b316:	607a      	str	r2, [r7, #4]
 800b318:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	333c      	adds	r3, #60	; 0x3c
 800b322:	3304      	adds	r3, #4
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b328:	693b      	ldr	r3, [r7, #16]
 800b32a:	4a26      	ldr	r2, [pc, #152]	; (800b3c4 <USB_EP0_OutStart+0xb8>)
 800b32c:	4293      	cmp	r3, r2
 800b32e:	d90a      	bls.n	800b346 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b330:	697b      	ldr	r3, [r7, #20]
 800b332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b33c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b340:	d101      	bne.n	800b346 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b342:	2300      	movs	r3, #0
 800b344:	e037      	b.n	800b3b6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b346:	697b      	ldr	r3, [r7, #20]
 800b348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b34c:	461a      	mov	r2, r3
 800b34e:	2300      	movs	r3, #0
 800b350:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b352:	697b      	ldr	r3, [r7, #20]
 800b354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b358:	691b      	ldr	r3, [r3, #16]
 800b35a:	697a      	ldr	r2, [r7, #20]
 800b35c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b360:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b364:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b366:	697b      	ldr	r3, [r7, #20]
 800b368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b36c:	691b      	ldr	r3, [r3, #16]
 800b36e:	697a      	ldr	r2, [r7, #20]
 800b370:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b374:	f043 0318 	orr.w	r3, r3, #24
 800b378:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b37a:	697b      	ldr	r3, [r7, #20]
 800b37c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b380:	691b      	ldr	r3, [r3, #16]
 800b382:	697a      	ldr	r2, [r7, #20]
 800b384:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b388:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b38c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b38e:	7afb      	ldrb	r3, [r7, #11]
 800b390:	2b01      	cmp	r3, #1
 800b392:	d10f      	bne.n	800b3b4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b394:	697b      	ldr	r3, [r7, #20]
 800b396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b39a:	461a      	mov	r2, r3
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b3a0:	697b      	ldr	r3, [r7, #20]
 800b3a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	697a      	ldr	r2, [r7, #20]
 800b3aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b3ae:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800b3b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b3b4:	2300      	movs	r3, #0
}
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	371c      	adds	r7, #28
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c0:	4770      	bx	lr
 800b3c2:	bf00      	nop
 800b3c4:	4f54300a 	.word	0x4f54300a

0800b3c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b3c8:	b480      	push	{r7}
 800b3ca:	b085      	sub	sp, #20
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	3301      	adds	r3, #1
 800b3d8:	60fb      	str	r3, [r7, #12]
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	4a13      	ldr	r2, [pc, #76]	; (800b42c <USB_CoreReset+0x64>)
 800b3de:	4293      	cmp	r3, r2
 800b3e0:	d901      	bls.n	800b3e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b3e2:	2303      	movs	r3, #3
 800b3e4:	e01b      	b.n	800b41e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	691b      	ldr	r3, [r3, #16]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	daf2      	bge.n	800b3d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	691b      	ldr	r3, [r3, #16]
 800b3f6:	f043 0201 	orr.w	r2, r3, #1
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	3301      	adds	r3, #1
 800b402:	60fb      	str	r3, [r7, #12]
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	4a09      	ldr	r2, [pc, #36]	; (800b42c <USB_CoreReset+0x64>)
 800b408:	4293      	cmp	r3, r2
 800b40a:	d901      	bls.n	800b410 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b40c:	2303      	movs	r3, #3
 800b40e:	e006      	b.n	800b41e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	691b      	ldr	r3, [r3, #16]
 800b414:	f003 0301 	and.w	r3, r3, #1
 800b418:	2b01      	cmp	r3, #1
 800b41a:	d0f0      	beq.n	800b3fe <USB_CoreReset+0x36>

  return HAL_OK;
 800b41c:	2300      	movs	r3, #0
}
 800b41e:	4618      	mov	r0, r3
 800b420:	3714      	adds	r7, #20
 800b422:	46bd      	mov	sp, r7
 800b424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b428:	4770      	bx	lr
 800b42a:	bf00      	nop
 800b42c:	00030d40 	.word	0x00030d40

0800b430 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b084      	sub	sp, #16
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
 800b438:	460b      	mov	r3, r1
 800b43a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b43c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b440:	f00e fa8e 	bl	8019960 <malloc>
 800b444:	4603      	mov	r3, r0
 800b446:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d105      	bne.n	800b45a <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2200      	movs	r2, #0
 800b452:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800b456:	2302      	movs	r3, #2
 800b458:	e066      	b.n	800b528 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	68fa      	ldr	r2, [r7, #12]
 800b45e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	7c1b      	ldrb	r3, [r3, #16]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d119      	bne.n	800b49e <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b46a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b46e:	2202      	movs	r2, #2
 800b470:	2181      	movs	r1, #129	; 0x81
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	f005 f93d 	bl	80106f2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2201      	movs	r2, #1
 800b47c:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b47e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b482:	2202      	movs	r2, #2
 800b484:	2101      	movs	r1, #1
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	f005 f933 	bl	80106f2 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2201      	movs	r2, #1
 800b490:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2210      	movs	r2, #16
 800b498:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800b49c:	e016      	b.n	800b4cc <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b49e:	2340      	movs	r3, #64	; 0x40
 800b4a0:	2202      	movs	r2, #2
 800b4a2:	2181      	movs	r1, #129	; 0x81
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	f005 f924 	bl	80106f2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	2201      	movs	r2, #1
 800b4ae:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b4b0:	2340      	movs	r3, #64	; 0x40
 800b4b2:	2202      	movs	r2, #2
 800b4b4:	2101      	movs	r1, #1
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f005 f91b 	bl	80106f2 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2201      	movs	r2, #1
 800b4c0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2210      	movs	r2, #16
 800b4c8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b4cc:	2308      	movs	r3, #8
 800b4ce:	2203      	movs	r2, #3
 800b4d0:	2182      	movs	r1, #130	; 0x82
 800b4d2:	6878      	ldr	r0, [r7, #4]
 800b4d4:	f005 f90d 	bl	80106f2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2201      	movs	r2, #1
 800b4dc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	7c1b      	ldrb	r3, [r3, #16]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d109      	bne.n	800b516 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b508:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b50c:	2101      	movs	r1, #1
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	f005 f9de 	bl	80108d0 <USBD_LL_PrepareReceive>
 800b514:	e007      	b.n	800b526 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b51c:	2340      	movs	r3, #64	; 0x40
 800b51e:	2101      	movs	r1, #1
 800b520:	6878      	ldr	r0, [r7, #4]
 800b522:	f005 f9d5 	bl	80108d0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b526:	2300      	movs	r3, #0
}
 800b528:	4618      	mov	r0, r3
 800b52a:	3710      	adds	r7, #16
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd80      	pop	{r7, pc}

0800b530 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b084      	sub	sp, #16
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
 800b538:	460b      	mov	r3, r1
 800b53a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800b53c:	2300      	movs	r3, #0
 800b53e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b540:	2181      	movs	r1, #129	; 0x81
 800b542:	6878      	ldr	r0, [r7, #4]
 800b544:	f005 f8fb 	bl	801073e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2200      	movs	r2, #0
 800b54c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b54e:	2101      	movs	r1, #1
 800b550:	6878      	ldr	r0, [r7, #4]
 800b552:	f005 f8f4 	bl	801073e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2200      	movs	r2, #0
 800b55a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b55e:	2182      	movs	r1, #130	; 0x82
 800b560:	6878      	ldr	r0, [r7, #4]
 800b562:	f005 f8ec 	bl	801073e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2200      	movs	r2, #0
 800b56a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2200      	movs	r2, #0
 800b572:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d00e      	beq.n	800b59e <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b586:	685b      	ldr	r3, [r3, #4]
 800b588:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b590:	4618      	mov	r0, r3
 800b592:	f00e f9ed 	bl	8019970 <free>
    pdev->pClassData = NULL;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	2200      	movs	r2, #0
 800b59a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800b59e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	3710      	adds	r7, #16
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bd80      	pop	{r7, pc}

0800b5a8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b086      	sub	sp, #24
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
 800b5b0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b5b8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800b5be:	2300      	movs	r3, #0
 800b5c0:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	781b      	ldrb	r3, [r3, #0]
 800b5ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d03a      	beq.n	800b648 <USBD_CDC_Setup+0xa0>
 800b5d2:	2b20      	cmp	r3, #32
 800b5d4:	f040 8097 	bne.w	800b706 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	88db      	ldrh	r3, [r3, #6]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d029      	beq.n	800b634 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	781b      	ldrb	r3, [r3, #0]
 800b5e4:	b25b      	sxtb	r3, r3
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	da11      	bge.n	800b60e <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b5f0:	689b      	ldr	r3, [r3, #8]
 800b5f2:	683a      	ldr	r2, [r7, #0]
 800b5f4:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800b5f6:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b5f8:	683a      	ldr	r2, [r7, #0]
 800b5fa:	88d2      	ldrh	r2, [r2, #6]
 800b5fc:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b5fe:	6939      	ldr	r1, [r7, #16]
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	88db      	ldrh	r3, [r3, #6]
 800b604:	461a      	mov	r2, r3
 800b606:	6878      	ldr	r0, [r7, #4]
 800b608:	f001 fa9d 	bl	800cb46 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800b60c:	e082      	b.n	800b714 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	785a      	ldrb	r2, [r3, #1]
 800b612:	693b      	ldr	r3, [r7, #16]
 800b614:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	88db      	ldrh	r3, [r3, #6]
 800b61c:	b2da      	uxtb	r2, r3
 800b61e:	693b      	ldr	r3, [r7, #16]
 800b620:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b624:	6939      	ldr	r1, [r7, #16]
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	88db      	ldrh	r3, [r3, #6]
 800b62a:	461a      	mov	r2, r3
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f001 fab6 	bl	800cb9e <USBD_CtlPrepareRx>
    break;
 800b632:	e06f      	b.n	800b714 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b63a:	689b      	ldr	r3, [r3, #8]
 800b63c:	683a      	ldr	r2, [r7, #0]
 800b63e:	7850      	ldrb	r0, [r2, #1]
 800b640:	2200      	movs	r2, #0
 800b642:	6839      	ldr	r1, [r7, #0]
 800b644:	4798      	blx	r3
    break;
 800b646:	e065      	b.n	800b714 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	785b      	ldrb	r3, [r3, #1]
 800b64c:	2b0b      	cmp	r3, #11
 800b64e:	d84f      	bhi.n	800b6f0 <USBD_CDC_Setup+0x148>
 800b650:	a201      	add	r2, pc, #4	; (adr r2, 800b658 <USBD_CDC_Setup+0xb0>)
 800b652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b656:	bf00      	nop
 800b658:	0800b689 	.word	0x0800b689
 800b65c:	0800b6ff 	.word	0x0800b6ff
 800b660:	0800b6f1 	.word	0x0800b6f1
 800b664:	0800b6f1 	.word	0x0800b6f1
 800b668:	0800b6f1 	.word	0x0800b6f1
 800b66c:	0800b6f1 	.word	0x0800b6f1
 800b670:	0800b6f1 	.word	0x0800b6f1
 800b674:	0800b6f1 	.word	0x0800b6f1
 800b678:	0800b6f1 	.word	0x0800b6f1
 800b67c:	0800b6f1 	.word	0x0800b6f1
 800b680:	0800b6b1 	.word	0x0800b6b1
 800b684:	0800b6d9 	.word	0x0800b6d9
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b68e:	2b03      	cmp	r3, #3
 800b690:	d107      	bne.n	800b6a2 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b692:	f107 030c 	add.w	r3, r7, #12
 800b696:	2202      	movs	r2, #2
 800b698:	4619      	mov	r1, r3
 800b69a:	6878      	ldr	r0, [r7, #4]
 800b69c:	f001 fa53 	bl	800cb46 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b6a0:	e030      	b.n	800b704 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800b6a2:	6839      	ldr	r1, [r7, #0]
 800b6a4:	6878      	ldr	r0, [r7, #4]
 800b6a6:	f001 f9dd 	bl	800ca64 <USBD_CtlError>
        ret = USBD_FAIL;
 800b6aa:	2303      	movs	r3, #3
 800b6ac:	75fb      	strb	r3, [r7, #23]
      break;
 800b6ae:	e029      	b.n	800b704 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6b6:	2b03      	cmp	r3, #3
 800b6b8:	d107      	bne.n	800b6ca <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b6ba:	f107 030f 	add.w	r3, r7, #15
 800b6be:	2201      	movs	r2, #1
 800b6c0:	4619      	mov	r1, r3
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	f001 fa3f 	bl	800cb46 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b6c8:	e01c      	b.n	800b704 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800b6ca:	6839      	ldr	r1, [r7, #0]
 800b6cc:	6878      	ldr	r0, [r7, #4]
 800b6ce:	f001 f9c9 	bl	800ca64 <USBD_CtlError>
        ret = USBD_FAIL;
 800b6d2:	2303      	movs	r3, #3
 800b6d4:	75fb      	strb	r3, [r7, #23]
      break;
 800b6d6:	e015      	b.n	800b704 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6de:	2b03      	cmp	r3, #3
 800b6e0:	d00f      	beq.n	800b702 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800b6e2:	6839      	ldr	r1, [r7, #0]
 800b6e4:	6878      	ldr	r0, [r7, #4]
 800b6e6:	f001 f9bd 	bl	800ca64 <USBD_CtlError>
        ret = USBD_FAIL;
 800b6ea:	2303      	movs	r3, #3
 800b6ec:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800b6ee:	e008      	b.n	800b702 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800b6f0:	6839      	ldr	r1, [r7, #0]
 800b6f2:	6878      	ldr	r0, [r7, #4]
 800b6f4:	f001 f9b6 	bl	800ca64 <USBD_CtlError>
      ret = USBD_FAIL;
 800b6f8:	2303      	movs	r3, #3
 800b6fa:	75fb      	strb	r3, [r7, #23]
      break;
 800b6fc:	e002      	b.n	800b704 <USBD_CDC_Setup+0x15c>
      break;
 800b6fe:	bf00      	nop
 800b700:	e008      	b.n	800b714 <USBD_CDC_Setup+0x16c>
      break;
 800b702:	bf00      	nop
    }
    break;
 800b704:	e006      	b.n	800b714 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800b706:	6839      	ldr	r1, [r7, #0]
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	f001 f9ab 	bl	800ca64 <USBD_CtlError>
    ret = USBD_FAIL;
 800b70e:	2303      	movs	r3, #3
 800b710:	75fb      	strb	r3, [r7, #23]
    break;
 800b712:	bf00      	nop
  }

  return (uint8_t)ret;
 800b714:	7dfb      	ldrb	r3, [r7, #23]
}
 800b716:	4618      	mov	r0, r3
 800b718:	3718      	adds	r7, #24
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}
 800b71e:	bf00      	nop

0800b720 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b084      	sub	sp, #16
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
 800b728:	460b      	mov	r3, r1
 800b72a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b732:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d101      	bne.n	800b742 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b73e:	2303      	movs	r3, #3
 800b740:	e049      	b.n	800b7d6 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b748:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b74a:	78fa      	ldrb	r2, [r7, #3]
 800b74c:	6879      	ldr	r1, [r7, #4]
 800b74e:	4613      	mov	r3, r2
 800b750:	009b      	lsls	r3, r3, #2
 800b752:	4413      	add	r3, r2
 800b754:	009b      	lsls	r3, r3, #2
 800b756:	440b      	add	r3, r1
 800b758:	3318      	adds	r3, #24
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d029      	beq.n	800b7b4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b760:	78fa      	ldrb	r2, [r7, #3]
 800b762:	6879      	ldr	r1, [r7, #4]
 800b764:	4613      	mov	r3, r2
 800b766:	009b      	lsls	r3, r3, #2
 800b768:	4413      	add	r3, r2
 800b76a:	009b      	lsls	r3, r3, #2
 800b76c:	440b      	add	r3, r1
 800b76e:	3318      	adds	r3, #24
 800b770:	681a      	ldr	r2, [r3, #0]
 800b772:	78f9      	ldrb	r1, [r7, #3]
 800b774:	68f8      	ldr	r0, [r7, #12]
 800b776:	460b      	mov	r3, r1
 800b778:	00db      	lsls	r3, r3, #3
 800b77a:	1a5b      	subs	r3, r3, r1
 800b77c:	009b      	lsls	r3, r3, #2
 800b77e:	4403      	add	r3, r0
 800b780:	3344      	adds	r3, #68	; 0x44
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	fbb2 f1f3 	udiv	r1, r2, r3
 800b788:	fb03 f301 	mul.w	r3, r3, r1
 800b78c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d110      	bne.n	800b7b4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800b792:	78fa      	ldrb	r2, [r7, #3]
 800b794:	6879      	ldr	r1, [r7, #4]
 800b796:	4613      	mov	r3, r2
 800b798:	009b      	lsls	r3, r3, #2
 800b79a:	4413      	add	r3, r2
 800b79c:	009b      	lsls	r3, r3, #2
 800b79e:	440b      	add	r3, r1
 800b7a0:	3318      	adds	r3, #24
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b7a6:	78f9      	ldrb	r1, [r7, #3]
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	f005 f86e 	bl	801088e <USBD_LL_Transmit>
 800b7b2:	e00f      	b.n	800b7d4 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b7c2:	691b      	ldr	r3, [r3, #16]
 800b7c4:	68ba      	ldr	r2, [r7, #8]
 800b7c6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b7ca:	68ba      	ldr	r2, [r7, #8]
 800b7cc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b7d0:	78fa      	ldrb	r2, [r7, #3]
 800b7d2:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800b7d4:	2300      	movs	r3, #0
}
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	3710      	adds	r7, #16
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bd80      	pop	{r7, pc}

0800b7de <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b7de:	b580      	push	{r7, lr}
 800b7e0:	b084      	sub	sp, #16
 800b7e2:	af00      	add	r7, sp, #0
 800b7e4:	6078      	str	r0, [r7, #4]
 800b7e6:	460b      	mov	r3, r1
 800b7e8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b7f0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d101      	bne.n	800b800 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b7fc:	2303      	movs	r3, #3
 800b7fe:	e015      	b.n	800b82c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b800:	78fb      	ldrb	r3, [r7, #3]
 800b802:	4619      	mov	r1, r3
 800b804:	6878      	ldr	r0, [r7, #4]
 800b806:	f005 f884 	bl	8010912 <USBD_LL_GetRxDataSize>
 800b80a:	4602      	mov	r2, r0
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b818:	68db      	ldr	r3, [r3, #12]
 800b81a:	68fa      	ldr	r2, [r7, #12]
 800b81c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b820:	68fa      	ldr	r2, [r7, #12]
 800b822:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b826:	4611      	mov	r1, r2
 800b828:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b82a:	2300      	movs	r3, #0
}
 800b82c:	4618      	mov	r0, r3
 800b82e:	3710      	adds	r7, #16
 800b830:	46bd      	mov	sp, r7
 800b832:	bd80      	pop	{r7, pc}

0800b834 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b084      	sub	sp, #16
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b842:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d015      	beq.n	800b87a <USBD_CDC_EP0_RxReady+0x46>
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b854:	2bff      	cmp	r3, #255	; 0xff
 800b856:	d010      	beq.n	800b87a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b85e:	689b      	ldr	r3, [r3, #8]
 800b860:	68fa      	ldr	r2, [r7, #12]
 800b862:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800b866:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b868:	68fa      	ldr	r2, [r7, #12]
 800b86a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b86e:	b292      	uxth	r2, r2
 800b870:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	22ff      	movs	r2, #255	; 0xff
 800b876:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800b87a:	2300      	movs	r3, #0
}
 800b87c:	4618      	mov	r0, r3
 800b87e:	3710      	adds	r7, #16
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}

0800b884 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b884:	b480      	push	{r7}
 800b886:	b083      	sub	sp, #12
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2243      	movs	r2, #67	; 0x43
 800b890:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800b892:	4b03      	ldr	r3, [pc, #12]	; (800b8a0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b894:	4618      	mov	r0, r3
 800b896:	370c      	adds	r7, #12
 800b898:	46bd      	mov	sp, r7
 800b89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89e:	4770      	bx	lr
 800b8a0:	20000094 	.word	0x20000094

0800b8a4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b8a4:	b480      	push	{r7}
 800b8a6:	b083      	sub	sp, #12
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2243      	movs	r2, #67	; 0x43
 800b8b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800b8b2:	4b03      	ldr	r3, [pc, #12]	; (800b8c0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	370c      	adds	r7, #12
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8be:	4770      	bx	lr
 800b8c0:	20000050 	.word	0x20000050

0800b8c4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b8c4:	b480      	push	{r7}
 800b8c6:	b083      	sub	sp, #12
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2243      	movs	r2, #67	; 0x43
 800b8d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800b8d2:	4b03      	ldr	r3, [pc, #12]	; (800b8e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	370c      	adds	r7, #12
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8de:	4770      	bx	lr
 800b8e0:	200000d8 	.word	0x200000d8

0800b8e4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	b083      	sub	sp, #12
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	220a      	movs	r2, #10
 800b8f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b8f2:	4b03      	ldr	r3, [pc, #12]	; (800b900 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	370c      	adds	r7, #12
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fe:	4770      	bx	lr
 800b900:	2000000c 	.word	0x2000000c

0800b904 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b904:	b480      	push	{r7}
 800b906:	b083      	sub	sp, #12
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
 800b90c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b90e:	683b      	ldr	r3, [r7, #0]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d101      	bne.n	800b918 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b914:	2303      	movs	r3, #3
 800b916:	e004      	b.n	800b922 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	683a      	ldr	r2, [r7, #0]
 800b91c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800b920:	2300      	movs	r3, #0
}
 800b922:	4618      	mov	r0, r3
 800b924:	370c      	adds	r7, #12
 800b926:	46bd      	mov	sp, r7
 800b928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92c:	4770      	bx	lr

0800b92e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b92e:	b480      	push	{r7}
 800b930:	b087      	sub	sp, #28
 800b932:	af00      	add	r7, sp, #0
 800b934:	60f8      	str	r0, [r7, #12]
 800b936:	60b9      	str	r1, [r7, #8]
 800b938:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b940:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b942:	697b      	ldr	r3, [r7, #20]
 800b944:	68ba      	ldr	r2, [r7, #8]
 800b946:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b94a:	697b      	ldr	r3, [r7, #20]
 800b94c:	687a      	ldr	r2, [r7, #4]
 800b94e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b952:	2300      	movs	r3, #0
}
 800b954:	4618      	mov	r0, r3
 800b956:	371c      	adds	r7, #28
 800b958:	46bd      	mov	sp, r7
 800b95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95e:	4770      	bx	lr

0800b960 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b960:	b480      	push	{r7}
 800b962:	b085      	sub	sp, #20
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
 800b968:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b970:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	683a      	ldr	r2, [r7, #0]
 800b976:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b97a:	2300      	movs	r3, #0
}
 800b97c:	4618      	mov	r0, r3
 800b97e:	3714      	adds	r7, #20
 800b980:	46bd      	mov	sp, r7
 800b982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b986:	4770      	bx	lr

0800b988 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b084      	sub	sp, #16
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b996:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800b998:	2301      	movs	r3, #1
 800b99a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d101      	bne.n	800b9aa <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b9a6:	2303      	movs	r3, #3
 800b9a8:	e01a      	b.n	800b9e0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800b9aa:	68bb      	ldr	r3, [r7, #8]
 800b9ac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d114      	bne.n	800b9de <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b9b4:	68bb      	ldr	r3, [r7, #8]
 800b9b6:	2201      	movs	r2, #1
 800b9b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800b9c6:	68bb      	ldr	r3, [r7, #8]
 800b9c8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800b9cc:	68bb      	ldr	r3, [r7, #8]
 800b9ce:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b9d2:	2181      	movs	r1, #129	; 0x81
 800b9d4:	6878      	ldr	r0, [r7, #4]
 800b9d6:	f004 ff5a 	bl	801088e <USBD_LL_Transmit>

    ret = USBD_OK;
 800b9da:	2300      	movs	r3, #0
 800b9dc:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b9de:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	3710      	adds	r7, #16
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd80      	pop	{r7, pc}

0800b9e8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b084      	sub	sp, #16
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b9f6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d101      	bne.n	800ba06 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800ba02:	2303      	movs	r3, #3
 800ba04:	e016      	b.n	800ba34 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	7c1b      	ldrb	r3, [r3, #16]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d109      	bne.n	800ba22 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ba14:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ba18:	2101      	movs	r1, #1
 800ba1a:	6878      	ldr	r0, [r7, #4]
 800ba1c:	f004 ff58 	bl	80108d0 <USBD_LL_PrepareReceive>
 800ba20:	e007      	b.n	800ba32 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ba28:	2340      	movs	r3, #64	; 0x40
 800ba2a:	2101      	movs	r1, #1
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	f004 ff4f 	bl	80108d0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ba32:	2300      	movs	r3, #0
}
 800ba34:	4618      	mov	r0, r3
 800ba36:	3710      	adds	r7, #16
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bd80      	pop	{r7, pc}

0800ba3c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b086      	sub	sp, #24
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	60f8      	str	r0, [r7, #12]
 800ba44:	60b9      	str	r1, [r7, #8]
 800ba46:	4613      	mov	r3, r2
 800ba48:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d101      	bne.n	800ba54 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ba50:	2303      	movs	r3, #3
 800ba52:	e025      	b.n	800baa0 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d003      	beq.n	800ba66 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	2200      	movs	r2, #0
 800ba62:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d003      	beq.n	800ba78 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	2200      	movs	r2, #0
 800ba74:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ba78:	68bb      	ldr	r3, [r7, #8]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d003      	beq.n	800ba86 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	68ba      	ldr	r2, [r7, #8]
 800ba82:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	2201      	movs	r2, #1
 800ba8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	79fa      	ldrb	r2, [r7, #7]
 800ba92:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ba94:	68f8      	ldr	r0, [r7, #12]
 800ba96:	f004 fdc5 	bl	8010624 <USBD_LL_Init>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ba9e:	7dfb      	ldrb	r3, [r7, #23]
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	3718      	adds	r7, #24
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}

0800baa8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b084      	sub	sp, #16
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
 800bab0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bab2:	2300      	movs	r3, #0
 800bab4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d101      	bne.n	800bac0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800babc:	2303      	movs	r3, #3
 800babe:	e010      	b.n	800bae2 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	683a      	ldr	r2, [r7, #0]
 800bac4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bad0:	f107 020e 	add.w	r2, r7, #14
 800bad4:	4610      	mov	r0, r2
 800bad6:	4798      	blx	r3
 800bad8:	4602      	mov	r2, r0
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800bae0:	2300      	movs	r3, #0
}
 800bae2:	4618      	mov	r0, r3
 800bae4:	3710      	adds	r7, #16
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}

0800baea <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800baea:	b580      	push	{r7, lr}
 800baec:	b082      	sub	sp, #8
 800baee:	af00      	add	r7, sp, #0
 800baf0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f004 fde2 	bl	80106bc <USBD_LL_Start>
 800baf8:	4603      	mov	r3, r0
}
 800bafa:	4618      	mov	r0, r3
 800bafc:	3708      	adds	r7, #8
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bd80      	pop	{r7, pc}

0800bb02 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800bb02:	b480      	push	{r7}
 800bb04:	b083      	sub	sp, #12
 800bb06:	af00      	add	r7, sp, #0
 800bb08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bb0a:	2300      	movs	r3, #0
}
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	370c      	adds	r7, #12
 800bb10:	46bd      	mov	sp, r7
 800bb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb16:	4770      	bx	lr

0800bb18 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b084      	sub	sp, #16
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
 800bb20:	460b      	mov	r3, r1
 800bb22:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800bb24:	2303      	movs	r3, #3
 800bb26:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d009      	beq.n	800bb46 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	78fa      	ldrb	r2, [r7, #3]
 800bb3c:	4611      	mov	r1, r2
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	4798      	blx	r3
 800bb42:	4603      	mov	r3, r0
 800bb44:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800bb46:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb48:	4618      	mov	r0, r3
 800bb4a:	3710      	adds	r7, #16
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bd80      	pop	{r7, pc}

0800bb50 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b082      	sub	sp, #8
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
 800bb58:	460b      	mov	r3, r1
 800bb5a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d007      	beq.n	800bb76 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb6c:	685b      	ldr	r3, [r3, #4]
 800bb6e:	78fa      	ldrb	r2, [r7, #3]
 800bb70:	4611      	mov	r1, r2
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	4798      	blx	r3
  }

  return USBD_OK;
 800bb76:	2300      	movs	r3, #0
}
 800bb78:	4618      	mov	r0, r3
 800bb7a:	3708      	adds	r7, #8
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}

0800bb80 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b084      	sub	sp, #16
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
 800bb88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bb90:	6839      	ldr	r1, [r7, #0]
 800bb92:	4618      	mov	r0, r3
 800bb94:	f000 ff2c 	bl	800c9f0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2201      	movs	r2, #1
 800bb9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800bba6:	461a      	mov	r2, r3
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bbb4:	f003 031f 	and.w	r3, r3, #31
 800bbb8:	2b01      	cmp	r3, #1
 800bbba:	d00e      	beq.n	800bbda <USBD_LL_SetupStage+0x5a>
 800bbbc:	2b01      	cmp	r3, #1
 800bbbe:	d302      	bcc.n	800bbc6 <USBD_LL_SetupStage+0x46>
 800bbc0:	2b02      	cmp	r3, #2
 800bbc2:	d014      	beq.n	800bbee <USBD_LL_SetupStage+0x6e>
 800bbc4:	e01d      	b.n	800bc02 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bbcc:	4619      	mov	r1, r3
 800bbce:	6878      	ldr	r0, [r7, #4]
 800bbd0:	f000 fa18 	bl	800c004 <USBD_StdDevReq>
 800bbd4:	4603      	mov	r3, r0
 800bbd6:	73fb      	strb	r3, [r7, #15]
      break;
 800bbd8:	e020      	b.n	800bc1c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bbe0:	4619      	mov	r1, r3
 800bbe2:	6878      	ldr	r0, [r7, #4]
 800bbe4:	f000 fa7c 	bl	800c0e0 <USBD_StdItfReq>
 800bbe8:	4603      	mov	r3, r0
 800bbea:	73fb      	strb	r3, [r7, #15]
      break;
 800bbec:	e016      	b.n	800bc1c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bbf4:	4619      	mov	r1, r3
 800bbf6:	6878      	ldr	r0, [r7, #4]
 800bbf8:	f000 fab8 	bl	800c16c <USBD_StdEPReq>
 800bbfc:	4603      	mov	r3, r0
 800bbfe:	73fb      	strb	r3, [r7, #15]
      break;
 800bc00:	e00c      	b.n	800bc1c <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bc08:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bc0c:	b2db      	uxtb	r3, r3
 800bc0e:	4619      	mov	r1, r3
 800bc10:	6878      	ldr	r0, [r7, #4]
 800bc12:	f004 fdb3 	bl	801077c <USBD_LL_StallEP>
 800bc16:	4603      	mov	r3, r0
 800bc18:	73fb      	strb	r3, [r7, #15]
      break;
 800bc1a:	bf00      	nop
  }

  return ret;
 800bc1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc1e:	4618      	mov	r0, r3
 800bc20:	3710      	adds	r7, #16
 800bc22:	46bd      	mov	sp, r7
 800bc24:	bd80      	pop	{r7, pc}

0800bc26 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bc26:	b580      	push	{r7, lr}
 800bc28:	b086      	sub	sp, #24
 800bc2a:	af00      	add	r7, sp, #0
 800bc2c:	60f8      	str	r0, [r7, #12]
 800bc2e:	460b      	mov	r3, r1
 800bc30:	607a      	str	r2, [r7, #4]
 800bc32:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bc34:	7afb      	ldrb	r3, [r7, #11]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d137      	bne.n	800bcaa <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800bc40:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bc48:	2b03      	cmp	r3, #3
 800bc4a:	d14a      	bne.n	800bce2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800bc4c:	693b      	ldr	r3, [r7, #16]
 800bc4e:	689a      	ldr	r2, [r3, #8]
 800bc50:	693b      	ldr	r3, [r7, #16]
 800bc52:	68db      	ldr	r3, [r3, #12]
 800bc54:	429a      	cmp	r2, r3
 800bc56:	d913      	bls.n	800bc80 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bc58:	693b      	ldr	r3, [r7, #16]
 800bc5a:	689a      	ldr	r2, [r3, #8]
 800bc5c:	693b      	ldr	r3, [r7, #16]
 800bc5e:	68db      	ldr	r3, [r3, #12]
 800bc60:	1ad2      	subs	r2, r2, r3
 800bc62:	693b      	ldr	r3, [r7, #16]
 800bc64:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800bc66:	693b      	ldr	r3, [r7, #16]
 800bc68:	68da      	ldr	r2, [r3, #12]
 800bc6a:	693b      	ldr	r3, [r7, #16]
 800bc6c:	689b      	ldr	r3, [r3, #8]
 800bc6e:	4293      	cmp	r3, r2
 800bc70:	bf28      	it	cs
 800bc72:	4613      	movcs	r3, r2
 800bc74:	461a      	mov	r2, r3
 800bc76:	6879      	ldr	r1, [r7, #4]
 800bc78:	68f8      	ldr	r0, [r7, #12]
 800bc7a:	f000 ffad 	bl	800cbd8 <USBD_CtlContinueRx>
 800bc7e:	e030      	b.n	800bce2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc86:	691b      	ldr	r3, [r3, #16]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d00a      	beq.n	800bca2 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800bc92:	2b03      	cmp	r3, #3
 800bc94:	d105      	bne.n	800bca2 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc9c:	691b      	ldr	r3, [r3, #16]
 800bc9e:	68f8      	ldr	r0, [r7, #12]
 800bca0:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800bca2:	68f8      	ldr	r0, [r7, #12]
 800bca4:	f000 ffa9 	bl	800cbfa <USBD_CtlSendStatus>
 800bca8:	e01b      	b.n	800bce2 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcb0:	699b      	ldr	r3, [r3, #24]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d013      	beq.n	800bcde <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800bcbc:	2b03      	cmp	r3, #3
 800bcbe:	d10e      	bne.n	800bcde <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcc6:	699b      	ldr	r3, [r3, #24]
 800bcc8:	7afa      	ldrb	r2, [r7, #11]
 800bcca:	4611      	mov	r1, r2
 800bccc:	68f8      	ldr	r0, [r7, #12]
 800bcce:	4798      	blx	r3
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800bcd4:	7dfb      	ldrb	r3, [r7, #23]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d003      	beq.n	800bce2 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800bcda:	7dfb      	ldrb	r3, [r7, #23]
 800bcdc:	e002      	b.n	800bce4 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bcde:	2303      	movs	r3, #3
 800bce0:	e000      	b.n	800bce4 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800bce2:	2300      	movs	r3, #0
}
 800bce4:	4618      	mov	r0, r3
 800bce6:	3718      	adds	r7, #24
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bd80      	pop	{r7, pc}

0800bcec <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b086      	sub	sp, #24
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	60f8      	str	r0, [r7, #12]
 800bcf4:	460b      	mov	r3, r1
 800bcf6:	607a      	str	r2, [r7, #4]
 800bcf8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bcfa:	7afb      	ldrb	r3, [r7, #11]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d16a      	bne.n	800bdd6 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	3314      	adds	r3, #20
 800bd04:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bd0c:	2b02      	cmp	r3, #2
 800bd0e:	d155      	bne.n	800bdbc <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800bd10:	693b      	ldr	r3, [r7, #16]
 800bd12:	689a      	ldr	r2, [r3, #8]
 800bd14:	693b      	ldr	r3, [r7, #16]
 800bd16:	68db      	ldr	r3, [r3, #12]
 800bd18:	429a      	cmp	r2, r3
 800bd1a:	d914      	bls.n	800bd46 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bd1c:	693b      	ldr	r3, [r7, #16]
 800bd1e:	689a      	ldr	r2, [r3, #8]
 800bd20:	693b      	ldr	r3, [r7, #16]
 800bd22:	68db      	ldr	r3, [r3, #12]
 800bd24:	1ad2      	subs	r2, r2, r3
 800bd26:	693b      	ldr	r3, [r7, #16]
 800bd28:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bd2a:	693b      	ldr	r3, [r7, #16]
 800bd2c:	689b      	ldr	r3, [r3, #8]
 800bd2e:	461a      	mov	r2, r3
 800bd30:	6879      	ldr	r1, [r7, #4]
 800bd32:	68f8      	ldr	r0, [r7, #12]
 800bd34:	f000 ff22 	bl	800cb7c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bd38:	2300      	movs	r3, #0
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	2100      	movs	r1, #0
 800bd3e:	68f8      	ldr	r0, [r7, #12]
 800bd40:	f004 fdc6 	bl	80108d0 <USBD_LL_PrepareReceive>
 800bd44:	e03a      	b.n	800bdbc <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bd46:	693b      	ldr	r3, [r7, #16]
 800bd48:	68da      	ldr	r2, [r3, #12]
 800bd4a:	693b      	ldr	r3, [r7, #16]
 800bd4c:	689b      	ldr	r3, [r3, #8]
 800bd4e:	429a      	cmp	r2, r3
 800bd50:	d11c      	bne.n	800bd8c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bd52:	693b      	ldr	r3, [r7, #16]
 800bd54:	685a      	ldr	r2, [r3, #4]
 800bd56:	693b      	ldr	r3, [r7, #16]
 800bd58:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bd5a:	429a      	cmp	r2, r3
 800bd5c:	d316      	bcc.n	800bd8c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bd5e:	693b      	ldr	r3, [r7, #16]
 800bd60:	685a      	ldr	r2, [r3, #4]
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bd68:	429a      	cmp	r2, r3
 800bd6a:	d20f      	bcs.n	800bd8c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	2100      	movs	r1, #0
 800bd70:	68f8      	ldr	r0, [r7, #12]
 800bd72:	f000 ff03 	bl	800cb7c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	2200      	movs	r2, #0
 800bd7a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bd7e:	2300      	movs	r3, #0
 800bd80:	2200      	movs	r2, #0
 800bd82:	2100      	movs	r1, #0
 800bd84:	68f8      	ldr	r0, [r7, #12]
 800bd86:	f004 fda3 	bl	80108d0 <USBD_LL_PrepareReceive>
 800bd8a:	e017      	b.n	800bdbc <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd92:	68db      	ldr	r3, [r3, #12]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d00a      	beq.n	800bdae <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bd9e:	2b03      	cmp	r3, #3
 800bda0:	d105      	bne.n	800bdae <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bda8:	68db      	ldr	r3, [r3, #12]
 800bdaa:	68f8      	ldr	r0, [r7, #12]
 800bdac:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bdae:	2180      	movs	r1, #128	; 0x80
 800bdb0:	68f8      	ldr	r0, [r7, #12]
 800bdb2:	f004 fce3 	bl	801077c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bdb6:	68f8      	ldr	r0, [r7, #12]
 800bdb8:	f000 ff32 	bl	800cc20 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800bdc2:	2b01      	cmp	r3, #1
 800bdc4:	d123      	bne.n	800be0e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800bdc6:	68f8      	ldr	r0, [r7, #12]
 800bdc8:	f7ff fe9b 	bl	800bb02 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	2200      	movs	r2, #0
 800bdd0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800bdd4:	e01b      	b.n	800be0e <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bddc:	695b      	ldr	r3, [r3, #20]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d013      	beq.n	800be0a <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800bde8:	2b03      	cmp	r3, #3
 800bdea:	d10e      	bne.n	800be0a <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdf2:	695b      	ldr	r3, [r3, #20]
 800bdf4:	7afa      	ldrb	r2, [r7, #11]
 800bdf6:	4611      	mov	r1, r2
 800bdf8:	68f8      	ldr	r0, [r7, #12]
 800bdfa:	4798      	blx	r3
 800bdfc:	4603      	mov	r3, r0
 800bdfe:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800be00:	7dfb      	ldrb	r3, [r7, #23]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d003      	beq.n	800be0e <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800be06:	7dfb      	ldrb	r3, [r7, #23]
 800be08:	e002      	b.n	800be10 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800be0a:	2303      	movs	r3, #3
 800be0c:	e000      	b.n	800be10 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800be0e:	2300      	movs	r3, #0
}
 800be10:	4618      	mov	r0, r3
 800be12:	3718      	adds	r7, #24
 800be14:	46bd      	mov	sp, r7
 800be16:	bd80      	pop	{r7, pc}

0800be18 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b082      	sub	sp, #8
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2201      	movs	r2, #1
 800be24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2200      	movs	r2, #0
 800be2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2200      	movs	r2, #0
 800be34:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	2200      	movs	r2, #0
 800be3a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800be44:	2b00      	cmp	r3, #0
 800be46:	d009      	beq.n	800be5c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be4e:	685b      	ldr	r3, [r3, #4]
 800be50:	687a      	ldr	r2, [r7, #4]
 800be52:	6852      	ldr	r2, [r2, #4]
 800be54:	b2d2      	uxtb	r2, r2
 800be56:	4611      	mov	r1, r2
 800be58:	6878      	ldr	r0, [r7, #4]
 800be5a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800be5c:	2340      	movs	r3, #64	; 0x40
 800be5e:	2200      	movs	r2, #0
 800be60:	2100      	movs	r1, #0
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	f004 fc45 	bl	80106f2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2201      	movs	r2, #1
 800be6c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2240      	movs	r2, #64	; 0x40
 800be74:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800be78:	2340      	movs	r3, #64	; 0x40
 800be7a:	2200      	movs	r2, #0
 800be7c:	2180      	movs	r1, #128	; 0x80
 800be7e:	6878      	ldr	r0, [r7, #4]
 800be80:	f004 fc37 	bl	80106f2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	2201      	movs	r2, #1
 800be88:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	2240      	movs	r2, #64	; 0x40
 800be8e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800be90:	2300      	movs	r3, #0
}
 800be92:	4618      	mov	r0, r3
 800be94:	3708      	adds	r7, #8
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}

0800be9a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800be9a:	b480      	push	{r7}
 800be9c:	b083      	sub	sp, #12
 800be9e:	af00      	add	r7, sp, #0
 800bea0:	6078      	str	r0, [r7, #4]
 800bea2:	460b      	mov	r3, r1
 800bea4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	78fa      	ldrb	r2, [r7, #3]
 800beaa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800beac:	2300      	movs	r3, #0
}
 800beae:	4618      	mov	r0, r3
 800beb0:	370c      	adds	r7, #12
 800beb2:	46bd      	mov	sp, r7
 800beb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb8:	4770      	bx	lr

0800beba <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800beba:	b480      	push	{r7}
 800bebc:	b083      	sub	sp, #12
 800bebe:	af00      	add	r7, sp, #0
 800bec0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	2204      	movs	r2, #4
 800bed2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800bed6:	2300      	movs	r3, #0
}
 800bed8:	4618      	mov	r0, r3
 800beda:	370c      	adds	r7, #12
 800bedc:	46bd      	mov	sp, r7
 800bede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee2:	4770      	bx	lr

0800bee4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bee4:	b480      	push	{r7}
 800bee6:	b083      	sub	sp, #12
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bef2:	2b04      	cmp	r3, #4
 800bef4:	d105      	bne.n	800bf02 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bf02:	2300      	movs	r3, #0
}
 800bf04:	4618      	mov	r0, r3
 800bf06:	370c      	adds	r7, #12
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0e:	4770      	bx	lr

0800bf10 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b082      	sub	sp, #8
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf1e:	2b03      	cmp	r3, #3
 800bf20:	d10b      	bne.n	800bf3a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf28:	69db      	ldr	r3, [r3, #28]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d005      	beq.n	800bf3a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf34:	69db      	ldr	r3, [r3, #28]
 800bf36:	6878      	ldr	r0, [r7, #4]
 800bf38:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bf3a:	2300      	movs	r3, #0
}
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	3708      	adds	r7, #8
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bd80      	pop	{r7, pc}

0800bf44 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bf44:	b480      	push	{r7}
 800bf46:	b083      	sub	sp, #12
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
 800bf4c:	460b      	mov	r3, r1
 800bf4e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800bf50:	2300      	movs	r3, #0
}
 800bf52:	4618      	mov	r0, r3
 800bf54:	370c      	adds	r7, #12
 800bf56:	46bd      	mov	sp, r7
 800bf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5c:	4770      	bx	lr

0800bf5e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bf5e:	b480      	push	{r7}
 800bf60:	b083      	sub	sp, #12
 800bf62:	af00      	add	r7, sp, #0
 800bf64:	6078      	str	r0, [r7, #4]
 800bf66:	460b      	mov	r3, r1
 800bf68:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800bf6a:	2300      	movs	r3, #0
}
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	370c      	adds	r7, #12
 800bf70:	46bd      	mov	sp, r7
 800bf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf76:	4770      	bx	lr

0800bf78 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bf78:	b480      	push	{r7}
 800bf7a:	b083      	sub	sp, #12
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bf80:	2300      	movs	r3, #0
}
 800bf82:	4618      	mov	r0, r3
 800bf84:	370c      	adds	r7, #12
 800bf86:	46bd      	mov	sp, r7
 800bf88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8c:	4770      	bx	lr

0800bf8e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bf8e:	b580      	push	{r7, lr}
 800bf90:	b082      	sub	sp, #8
 800bf92:	af00      	add	r7, sp, #0
 800bf94:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2201      	movs	r2, #1
 800bf9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d009      	beq.n	800bfbc <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfae:	685b      	ldr	r3, [r3, #4]
 800bfb0:	687a      	ldr	r2, [r7, #4]
 800bfb2:	6852      	ldr	r2, [r2, #4]
 800bfb4:	b2d2      	uxtb	r2, r2
 800bfb6:	4611      	mov	r1, r2
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	4798      	blx	r3
  }

  return USBD_OK;
 800bfbc:	2300      	movs	r3, #0
}
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	3708      	adds	r7, #8
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bd80      	pop	{r7, pc}

0800bfc6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bfc6:	b480      	push	{r7}
 800bfc8:	b087      	sub	sp, #28
 800bfca:	af00      	add	r7, sp, #0
 800bfcc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bfd2:	697b      	ldr	r3, [r7, #20]
 800bfd4:	781b      	ldrb	r3, [r3, #0]
 800bfd6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bfd8:	697b      	ldr	r3, [r7, #20]
 800bfda:	3301      	adds	r3, #1
 800bfdc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bfde:	697b      	ldr	r3, [r7, #20]
 800bfe0:	781b      	ldrb	r3, [r3, #0]
 800bfe2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bfe4:	8a3b      	ldrh	r3, [r7, #16]
 800bfe6:	021b      	lsls	r3, r3, #8
 800bfe8:	b21a      	sxth	r2, r3
 800bfea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bfee:	4313      	orrs	r3, r2
 800bff0:	b21b      	sxth	r3, r3
 800bff2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bff4:	89fb      	ldrh	r3, [r7, #14]
}
 800bff6:	4618      	mov	r0, r3
 800bff8:	371c      	adds	r7, #28
 800bffa:	46bd      	mov	sp, r7
 800bffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c000:	4770      	bx	lr
	...

0800c004 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b084      	sub	sp, #16
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
 800c00c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c00e:	2300      	movs	r3, #0
 800c010:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	781b      	ldrb	r3, [r3, #0]
 800c016:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c01a:	2b20      	cmp	r3, #32
 800c01c:	d004      	beq.n	800c028 <USBD_StdDevReq+0x24>
 800c01e:	2b40      	cmp	r3, #64	; 0x40
 800c020:	d002      	beq.n	800c028 <USBD_StdDevReq+0x24>
 800c022:	2b00      	cmp	r3, #0
 800c024:	d00a      	beq.n	800c03c <USBD_StdDevReq+0x38>
 800c026:	e050      	b.n	800c0ca <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c02e:	689b      	ldr	r3, [r3, #8]
 800c030:	6839      	ldr	r1, [r7, #0]
 800c032:	6878      	ldr	r0, [r7, #4]
 800c034:	4798      	blx	r3
 800c036:	4603      	mov	r3, r0
 800c038:	73fb      	strb	r3, [r7, #15]
    break;
 800c03a:	e04b      	b.n	800c0d4 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800c03c:	683b      	ldr	r3, [r7, #0]
 800c03e:	785b      	ldrb	r3, [r3, #1]
 800c040:	2b09      	cmp	r3, #9
 800c042:	d83c      	bhi.n	800c0be <USBD_StdDevReq+0xba>
 800c044:	a201      	add	r2, pc, #4	; (adr r2, 800c04c <USBD_StdDevReq+0x48>)
 800c046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c04a:	bf00      	nop
 800c04c:	0800c0a1 	.word	0x0800c0a1
 800c050:	0800c0b5 	.word	0x0800c0b5
 800c054:	0800c0bf 	.word	0x0800c0bf
 800c058:	0800c0ab 	.word	0x0800c0ab
 800c05c:	0800c0bf 	.word	0x0800c0bf
 800c060:	0800c07f 	.word	0x0800c07f
 800c064:	0800c075 	.word	0x0800c075
 800c068:	0800c0bf 	.word	0x0800c0bf
 800c06c:	0800c097 	.word	0x0800c097
 800c070:	0800c089 	.word	0x0800c089
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800c074:	6839      	ldr	r1, [r7, #0]
 800c076:	6878      	ldr	r0, [r7, #4]
 800c078:	f000 f9ce 	bl	800c418 <USBD_GetDescriptor>
      break;
 800c07c:	e024      	b.n	800c0c8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800c07e:	6839      	ldr	r1, [r7, #0]
 800c080:	6878      	ldr	r0, [r7, #4]
 800c082:	f000 fb33 	bl	800c6ec <USBD_SetAddress>
      break;
 800c086:	e01f      	b.n	800c0c8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800c088:	6839      	ldr	r1, [r7, #0]
 800c08a:	6878      	ldr	r0, [r7, #4]
 800c08c:	f000 fb70 	bl	800c770 <USBD_SetConfig>
 800c090:	4603      	mov	r3, r0
 800c092:	73fb      	strb	r3, [r7, #15]
      break;
 800c094:	e018      	b.n	800c0c8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800c096:	6839      	ldr	r1, [r7, #0]
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f000 fc0d 	bl	800c8b8 <USBD_GetConfig>
      break;
 800c09e:	e013      	b.n	800c0c8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800c0a0:	6839      	ldr	r1, [r7, #0]
 800c0a2:	6878      	ldr	r0, [r7, #4]
 800c0a4:	f000 fc3c 	bl	800c920 <USBD_GetStatus>
      break;
 800c0a8:	e00e      	b.n	800c0c8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800c0aa:	6839      	ldr	r1, [r7, #0]
 800c0ac:	6878      	ldr	r0, [r7, #4]
 800c0ae:	f000 fc6a 	bl	800c986 <USBD_SetFeature>
      break;
 800c0b2:	e009      	b.n	800c0c8 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800c0b4:	6839      	ldr	r1, [r7, #0]
 800c0b6:	6878      	ldr	r0, [r7, #4]
 800c0b8:	f000 fc79 	bl	800c9ae <USBD_ClrFeature>
      break;
 800c0bc:	e004      	b.n	800c0c8 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800c0be:	6839      	ldr	r1, [r7, #0]
 800c0c0:	6878      	ldr	r0, [r7, #4]
 800c0c2:	f000 fccf 	bl	800ca64 <USBD_CtlError>
      break;
 800c0c6:	bf00      	nop
    }
    break;
 800c0c8:	e004      	b.n	800c0d4 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800c0ca:	6839      	ldr	r1, [r7, #0]
 800c0cc:	6878      	ldr	r0, [r7, #4]
 800c0ce:	f000 fcc9 	bl	800ca64 <USBD_CtlError>
    break;
 800c0d2:	bf00      	nop
  }

  return ret;
 800c0d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	3710      	adds	r7, #16
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd80      	pop	{r7, pc}
 800c0de:	bf00      	nop

0800c0e0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b084      	sub	sp, #16
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
 800c0e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	781b      	ldrb	r3, [r3, #0]
 800c0f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c0f6:	2b20      	cmp	r3, #32
 800c0f8:	d003      	beq.n	800c102 <USBD_StdItfReq+0x22>
 800c0fa:	2b40      	cmp	r3, #64	; 0x40
 800c0fc:	d001      	beq.n	800c102 <USBD_StdItfReq+0x22>
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d12a      	bne.n	800c158 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c108:	3b01      	subs	r3, #1
 800c10a:	2b02      	cmp	r3, #2
 800c10c:	d81d      	bhi.n	800c14a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	889b      	ldrh	r3, [r3, #4]
 800c112:	b2db      	uxtb	r3, r3
 800c114:	2b01      	cmp	r3, #1
 800c116:	d813      	bhi.n	800c140 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c11e:	689b      	ldr	r3, [r3, #8]
 800c120:	6839      	ldr	r1, [r7, #0]
 800c122:	6878      	ldr	r0, [r7, #4]
 800c124:	4798      	blx	r3
 800c126:	4603      	mov	r3, r0
 800c128:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	88db      	ldrh	r3, [r3, #6]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d110      	bne.n	800c154 <USBD_StdItfReq+0x74>
 800c132:	7bfb      	ldrb	r3, [r7, #15]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d10d      	bne.n	800c154 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800c138:	6878      	ldr	r0, [r7, #4]
 800c13a:	f000 fd5e 	bl	800cbfa <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800c13e:	e009      	b.n	800c154 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800c140:	6839      	ldr	r1, [r7, #0]
 800c142:	6878      	ldr	r0, [r7, #4]
 800c144:	f000 fc8e 	bl	800ca64 <USBD_CtlError>
      break;
 800c148:	e004      	b.n	800c154 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800c14a:	6839      	ldr	r1, [r7, #0]
 800c14c:	6878      	ldr	r0, [r7, #4]
 800c14e:	f000 fc89 	bl	800ca64 <USBD_CtlError>
      break;
 800c152:	e000      	b.n	800c156 <USBD_StdItfReq+0x76>
      break;
 800c154:	bf00      	nop
    }
    break;
 800c156:	e004      	b.n	800c162 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800c158:	6839      	ldr	r1, [r7, #0]
 800c15a:	6878      	ldr	r0, [r7, #4]
 800c15c:	f000 fc82 	bl	800ca64 <USBD_CtlError>
    break;
 800c160:	bf00      	nop
  }

  return ret;
 800c162:	7bfb      	ldrb	r3, [r7, #15]
}
 800c164:	4618      	mov	r0, r3
 800c166:	3710      	adds	r7, #16
 800c168:	46bd      	mov	sp, r7
 800c16a:	bd80      	pop	{r7, pc}

0800c16c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b084      	sub	sp, #16
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
 800c174:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c176:	2300      	movs	r3, #0
 800c178:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	889b      	ldrh	r3, [r3, #4]
 800c17e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c180:	683b      	ldr	r3, [r7, #0]
 800c182:	781b      	ldrb	r3, [r3, #0]
 800c184:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c188:	2b20      	cmp	r3, #32
 800c18a:	d004      	beq.n	800c196 <USBD_StdEPReq+0x2a>
 800c18c:	2b40      	cmp	r3, #64	; 0x40
 800c18e:	d002      	beq.n	800c196 <USBD_StdEPReq+0x2a>
 800c190:	2b00      	cmp	r3, #0
 800c192:	d00a      	beq.n	800c1aa <USBD_StdEPReq+0x3e>
 800c194:	e135      	b.n	800c402 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c19c:	689b      	ldr	r3, [r3, #8]
 800c19e:	6839      	ldr	r1, [r7, #0]
 800c1a0:	6878      	ldr	r0, [r7, #4]
 800c1a2:	4798      	blx	r3
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	73fb      	strb	r3, [r7, #15]
    break;
 800c1a8:	e130      	b.n	800c40c <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	785b      	ldrb	r3, [r3, #1]
 800c1ae:	2b01      	cmp	r3, #1
 800c1b0:	d03e      	beq.n	800c230 <USBD_StdEPReq+0xc4>
 800c1b2:	2b03      	cmp	r3, #3
 800c1b4:	d002      	beq.n	800c1bc <USBD_StdEPReq+0x50>
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d077      	beq.n	800c2aa <USBD_StdEPReq+0x13e>
 800c1ba:	e11c      	b.n	800c3f6 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1c2:	2b02      	cmp	r3, #2
 800c1c4:	d002      	beq.n	800c1cc <USBD_StdEPReq+0x60>
 800c1c6:	2b03      	cmp	r3, #3
 800c1c8:	d015      	beq.n	800c1f6 <USBD_StdEPReq+0x8a>
 800c1ca:	e02b      	b.n	800c224 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c1cc:	7bbb      	ldrb	r3, [r7, #14]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d00c      	beq.n	800c1ec <USBD_StdEPReq+0x80>
 800c1d2:	7bbb      	ldrb	r3, [r7, #14]
 800c1d4:	2b80      	cmp	r3, #128	; 0x80
 800c1d6:	d009      	beq.n	800c1ec <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800c1d8:	7bbb      	ldrb	r3, [r7, #14]
 800c1da:	4619      	mov	r1, r3
 800c1dc:	6878      	ldr	r0, [r7, #4]
 800c1de:	f004 facd 	bl	801077c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c1e2:	2180      	movs	r1, #128	; 0x80
 800c1e4:	6878      	ldr	r0, [r7, #4]
 800c1e6:	f004 fac9 	bl	801077c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c1ea:	e020      	b.n	800c22e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800c1ec:	6839      	ldr	r1, [r7, #0]
 800c1ee:	6878      	ldr	r0, [r7, #4]
 800c1f0:	f000 fc38 	bl	800ca64 <USBD_CtlError>
        break;
 800c1f4:	e01b      	b.n	800c22e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	885b      	ldrh	r3, [r3, #2]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d10e      	bne.n	800c21c <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c1fe:	7bbb      	ldrb	r3, [r7, #14]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d00b      	beq.n	800c21c <USBD_StdEPReq+0xb0>
 800c204:	7bbb      	ldrb	r3, [r7, #14]
 800c206:	2b80      	cmp	r3, #128	; 0x80
 800c208:	d008      	beq.n	800c21c <USBD_StdEPReq+0xb0>
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	88db      	ldrh	r3, [r3, #6]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d104      	bne.n	800c21c <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800c212:	7bbb      	ldrb	r3, [r7, #14]
 800c214:	4619      	mov	r1, r3
 800c216:	6878      	ldr	r0, [r7, #4]
 800c218:	f004 fab0 	bl	801077c <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800c21c:	6878      	ldr	r0, [r7, #4]
 800c21e:	f000 fcec 	bl	800cbfa <USBD_CtlSendStatus>

        break;
 800c222:	e004      	b.n	800c22e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800c224:	6839      	ldr	r1, [r7, #0]
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	f000 fc1c 	bl	800ca64 <USBD_CtlError>
        break;
 800c22c:	bf00      	nop
      }
      break;
 800c22e:	e0e7      	b.n	800c400 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c236:	2b02      	cmp	r3, #2
 800c238:	d002      	beq.n	800c240 <USBD_StdEPReq+0xd4>
 800c23a:	2b03      	cmp	r3, #3
 800c23c:	d015      	beq.n	800c26a <USBD_StdEPReq+0xfe>
 800c23e:	e02d      	b.n	800c29c <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c240:	7bbb      	ldrb	r3, [r7, #14]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d00c      	beq.n	800c260 <USBD_StdEPReq+0xf4>
 800c246:	7bbb      	ldrb	r3, [r7, #14]
 800c248:	2b80      	cmp	r3, #128	; 0x80
 800c24a:	d009      	beq.n	800c260 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800c24c:	7bbb      	ldrb	r3, [r7, #14]
 800c24e:	4619      	mov	r1, r3
 800c250:	6878      	ldr	r0, [r7, #4]
 800c252:	f004 fa93 	bl	801077c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c256:	2180      	movs	r1, #128	; 0x80
 800c258:	6878      	ldr	r0, [r7, #4]
 800c25a:	f004 fa8f 	bl	801077c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c25e:	e023      	b.n	800c2a8 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800c260:	6839      	ldr	r1, [r7, #0]
 800c262:	6878      	ldr	r0, [r7, #4]
 800c264:	f000 fbfe 	bl	800ca64 <USBD_CtlError>
        break;
 800c268:	e01e      	b.n	800c2a8 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	885b      	ldrh	r3, [r3, #2]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d119      	bne.n	800c2a6 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800c272:	7bbb      	ldrb	r3, [r7, #14]
 800c274:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d004      	beq.n	800c286 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c27c:	7bbb      	ldrb	r3, [r7, #14]
 800c27e:	4619      	mov	r1, r3
 800c280:	6878      	ldr	r0, [r7, #4]
 800c282:	f004 fa9a 	bl	80107ba <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800c286:	6878      	ldr	r0, [r7, #4]
 800c288:	f000 fcb7 	bl	800cbfa <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c292:	689b      	ldr	r3, [r3, #8]
 800c294:	6839      	ldr	r1, [r7, #0]
 800c296:	6878      	ldr	r0, [r7, #4]
 800c298:	4798      	blx	r3
        }
        break;
 800c29a:	e004      	b.n	800c2a6 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800c29c:	6839      	ldr	r1, [r7, #0]
 800c29e:	6878      	ldr	r0, [r7, #4]
 800c2a0:	f000 fbe0 	bl	800ca64 <USBD_CtlError>
        break;
 800c2a4:	e000      	b.n	800c2a8 <USBD_StdEPReq+0x13c>
        break;
 800c2a6:	bf00      	nop
      }
      break;
 800c2a8:	e0aa      	b.n	800c400 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2b0:	2b02      	cmp	r3, #2
 800c2b2:	d002      	beq.n	800c2ba <USBD_StdEPReq+0x14e>
 800c2b4:	2b03      	cmp	r3, #3
 800c2b6:	d032      	beq.n	800c31e <USBD_StdEPReq+0x1b2>
 800c2b8:	e097      	b.n	800c3ea <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c2ba:	7bbb      	ldrb	r3, [r7, #14]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d007      	beq.n	800c2d0 <USBD_StdEPReq+0x164>
 800c2c0:	7bbb      	ldrb	r3, [r7, #14]
 800c2c2:	2b80      	cmp	r3, #128	; 0x80
 800c2c4:	d004      	beq.n	800c2d0 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800c2c6:	6839      	ldr	r1, [r7, #0]
 800c2c8:	6878      	ldr	r0, [r7, #4]
 800c2ca:	f000 fbcb 	bl	800ca64 <USBD_CtlError>
          break;
 800c2ce:	e091      	b.n	800c3f4 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c2d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	da0b      	bge.n	800c2f0 <USBD_StdEPReq+0x184>
 800c2d8:	7bbb      	ldrb	r3, [r7, #14]
 800c2da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c2de:	4613      	mov	r3, r2
 800c2e0:	009b      	lsls	r3, r3, #2
 800c2e2:	4413      	add	r3, r2
 800c2e4:	009b      	lsls	r3, r3, #2
 800c2e6:	3310      	adds	r3, #16
 800c2e8:	687a      	ldr	r2, [r7, #4]
 800c2ea:	4413      	add	r3, r2
 800c2ec:	3304      	adds	r3, #4
 800c2ee:	e00b      	b.n	800c308 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800c2f0:	7bbb      	ldrb	r3, [r7, #14]
 800c2f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c2f6:	4613      	mov	r3, r2
 800c2f8:	009b      	lsls	r3, r3, #2
 800c2fa:	4413      	add	r3, r2
 800c2fc:	009b      	lsls	r3, r3, #2
 800c2fe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c302:	687a      	ldr	r2, [r7, #4]
 800c304:	4413      	add	r3, r2
 800c306:	3304      	adds	r3, #4
 800c308:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800c30a:	68bb      	ldr	r3, [r7, #8]
 800c30c:	2200      	movs	r2, #0
 800c30e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	2202      	movs	r2, #2
 800c314:	4619      	mov	r1, r3
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	f000 fc15 	bl	800cb46 <USBD_CtlSendData>
        break;
 800c31c:	e06a      	b.n	800c3f4 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800c31e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c322:	2b00      	cmp	r3, #0
 800c324:	da11      	bge.n	800c34a <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c326:	7bbb      	ldrb	r3, [r7, #14]
 800c328:	f003 020f 	and.w	r2, r3, #15
 800c32c:	6879      	ldr	r1, [r7, #4]
 800c32e:	4613      	mov	r3, r2
 800c330:	009b      	lsls	r3, r3, #2
 800c332:	4413      	add	r3, r2
 800c334:	009b      	lsls	r3, r3, #2
 800c336:	440b      	add	r3, r1
 800c338:	3324      	adds	r3, #36	; 0x24
 800c33a:	881b      	ldrh	r3, [r3, #0]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d117      	bne.n	800c370 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800c340:	6839      	ldr	r1, [r7, #0]
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f000 fb8e 	bl	800ca64 <USBD_CtlError>
            break;
 800c348:	e054      	b.n	800c3f4 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c34a:	7bbb      	ldrb	r3, [r7, #14]
 800c34c:	f003 020f 	and.w	r2, r3, #15
 800c350:	6879      	ldr	r1, [r7, #4]
 800c352:	4613      	mov	r3, r2
 800c354:	009b      	lsls	r3, r3, #2
 800c356:	4413      	add	r3, r2
 800c358:	009b      	lsls	r3, r3, #2
 800c35a:	440b      	add	r3, r1
 800c35c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c360:	881b      	ldrh	r3, [r3, #0]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d104      	bne.n	800c370 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800c366:	6839      	ldr	r1, [r7, #0]
 800c368:	6878      	ldr	r0, [r7, #4]
 800c36a:	f000 fb7b 	bl	800ca64 <USBD_CtlError>
            break;
 800c36e:	e041      	b.n	800c3f4 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c370:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c374:	2b00      	cmp	r3, #0
 800c376:	da0b      	bge.n	800c390 <USBD_StdEPReq+0x224>
 800c378:	7bbb      	ldrb	r3, [r7, #14]
 800c37a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c37e:	4613      	mov	r3, r2
 800c380:	009b      	lsls	r3, r3, #2
 800c382:	4413      	add	r3, r2
 800c384:	009b      	lsls	r3, r3, #2
 800c386:	3310      	adds	r3, #16
 800c388:	687a      	ldr	r2, [r7, #4]
 800c38a:	4413      	add	r3, r2
 800c38c:	3304      	adds	r3, #4
 800c38e:	e00b      	b.n	800c3a8 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800c390:	7bbb      	ldrb	r3, [r7, #14]
 800c392:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c396:	4613      	mov	r3, r2
 800c398:	009b      	lsls	r3, r3, #2
 800c39a:	4413      	add	r3, r2
 800c39c:	009b      	lsls	r3, r3, #2
 800c39e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c3a2:	687a      	ldr	r2, [r7, #4]
 800c3a4:	4413      	add	r3, r2
 800c3a6:	3304      	adds	r3, #4
 800c3a8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c3aa:	7bbb      	ldrb	r3, [r7, #14]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d002      	beq.n	800c3b6 <USBD_StdEPReq+0x24a>
 800c3b0:	7bbb      	ldrb	r3, [r7, #14]
 800c3b2:	2b80      	cmp	r3, #128	; 0x80
 800c3b4:	d103      	bne.n	800c3be <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800c3b6:	68bb      	ldr	r3, [r7, #8]
 800c3b8:	2200      	movs	r2, #0
 800c3ba:	601a      	str	r2, [r3, #0]
 800c3bc:	e00e      	b.n	800c3dc <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c3be:	7bbb      	ldrb	r3, [r7, #14]
 800c3c0:	4619      	mov	r1, r3
 800c3c2:	6878      	ldr	r0, [r7, #4]
 800c3c4:	f004 fa18 	bl	80107f8 <USBD_LL_IsStallEP>
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d003      	beq.n	800c3d6 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	2201      	movs	r2, #1
 800c3d2:	601a      	str	r2, [r3, #0]
 800c3d4:	e002      	b.n	800c3dc <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800c3d6:	68bb      	ldr	r3, [r7, #8]
 800c3d8:	2200      	movs	r2, #0
 800c3da:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c3dc:	68bb      	ldr	r3, [r7, #8]
 800c3de:	2202      	movs	r2, #2
 800c3e0:	4619      	mov	r1, r3
 800c3e2:	6878      	ldr	r0, [r7, #4]
 800c3e4:	f000 fbaf 	bl	800cb46 <USBD_CtlSendData>
          break;
 800c3e8:	e004      	b.n	800c3f4 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800c3ea:	6839      	ldr	r1, [r7, #0]
 800c3ec:	6878      	ldr	r0, [r7, #4]
 800c3ee:	f000 fb39 	bl	800ca64 <USBD_CtlError>
        break;
 800c3f2:	bf00      	nop
      }
      break;
 800c3f4:	e004      	b.n	800c400 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800c3f6:	6839      	ldr	r1, [r7, #0]
 800c3f8:	6878      	ldr	r0, [r7, #4]
 800c3fa:	f000 fb33 	bl	800ca64 <USBD_CtlError>
      break;
 800c3fe:	bf00      	nop
    }
    break;
 800c400:	e004      	b.n	800c40c <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800c402:	6839      	ldr	r1, [r7, #0]
 800c404:	6878      	ldr	r0, [r7, #4]
 800c406:	f000 fb2d 	bl	800ca64 <USBD_CtlError>
    break;
 800c40a:	bf00      	nop
  }

  return ret;
 800c40c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c40e:	4618      	mov	r0, r3
 800c410:	3710      	adds	r7, #16
 800c412:	46bd      	mov	sp, r7
 800c414:	bd80      	pop	{r7, pc}
	...

0800c418 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b084      	sub	sp, #16
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
 800c420:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c422:	2300      	movs	r3, #0
 800c424:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c426:	2300      	movs	r3, #0
 800c428:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c42a:	2300      	movs	r3, #0
 800c42c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c42e:	683b      	ldr	r3, [r7, #0]
 800c430:	885b      	ldrh	r3, [r3, #2]
 800c432:	0a1b      	lsrs	r3, r3, #8
 800c434:	b29b      	uxth	r3, r3
 800c436:	3b01      	subs	r3, #1
 800c438:	2b06      	cmp	r3, #6
 800c43a:	f200 8128 	bhi.w	800c68e <USBD_GetDescriptor+0x276>
 800c43e:	a201      	add	r2, pc, #4	; (adr r2, 800c444 <USBD_GetDescriptor+0x2c>)
 800c440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c444:	0800c461 	.word	0x0800c461
 800c448:	0800c479 	.word	0x0800c479
 800c44c:	0800c4b9 	.word	0x0800c4b9
 800c450:	0800c68f 	.word	0x0800c68f
 800c454:	0800c68f 	.word	0x0800c68f
 800c458:	0800c62f 	.word	0x0800c62f
 800c45c:	0800c65b 	.word	0x0800c65b
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	687a      	ldr	r2, [r7, #4]
 800c46a:	7c12      	ldrb	r2, [r2, #16]
 800c46c:	f107 0108 	add.w	r1, r7, #8
 800c470:	4610      	mov	r0, r2
 800c472:	4798      	blx	r3
 800c474:	60f8      	str	r0, [r7, #12]
    break;
 800c476:	e112      	b.n	800c69e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	7c1b      	ldrb	r3, [r3, #16]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d10d      	bne.n	800c49c <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c488:	f107 0208 	add.w	r2, r7, #8
 800c48c:	4610      	mov	r0, r2
 800c48e:	4798      	blx	r3
 800c490:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	3301      	adds	r3, #1
 800c496:	2202      	movs	r2, #2
 800c498:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800c49a:	e100      	b.n	800c69e <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4a4:	f107 0208 	add.w	r2, r7, #8
 800c4a8:	4610      	mov	r0, r2
 800c4aa:	4798      	blx	r3
 800c4ac:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	3301      	adds	r3, #1
 800c4b2:	2202      	movs	r2, #2
 800c4b4:	701a      	strb	r2, [r3, #0]
    break;
 800c4b6:	e0f2      	b.n	800c69e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800c4b8:	683b      	ldr	r3, [r7, #0]
 800c4ba:	885b      	ldrh	r3, [r3, #2]
 800c4bc:	b2db      	uxtb	r3, r3
 800c4be:	2b05      	cmp	r3, #5
 800c4c0:	f200 80ac 	bhi.w	800c61c <USBD_GetDescriptor+0x204>
 800c4c4:	a201      	add	r2, pc, #4	; (adr r2, 800c4cc <USBD_GetDescriptor+0xb4>)
 800c4c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4ca:	bf00      	nop
 800c4cc:	0800c4e5 	.word	0x0800c4e5
 800c4d0:	0800c519 	.word	0x0800c519
 800c4d4:	0800c54d 	.word	0x0800c54d
 800c4d8:	0800c581 	.word	0x0800c581
 800c4dc:	0800c5b5 	.word	0x0800c5b5
 800c4e0:	0800c5e9 	.word	0x0800c5e9
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4ea:	685b      	ldr	r3, [r3, #4]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d00b      	beq.n	800c508 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4f6:	685b      	ldr	r3, [r3, #4]
 800c4f8:	687a      	ldr	r2, [r7, #4]
 800c4fa:	7c12      	ldrb	r2, [r2, #16]
 800c4fc:	f107 0108 	add.w	r1, r7, #8
 800c500:	4610      	mov	r0, r2
 800c502:	4798      	blx	r3
 800c504:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c506:	e091      	b.n	800c62c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c508:	6839      	ldr	r1, [r7, #0]
 800c50a:	6878      	ldr	r0, [r7, #4]
 800c50c:	f000 faaa 	bl	800ca64 <USBD_CtlError>
        err++;
 800c510:	7afb      	ldrb	r3, [r7, #11]
 800c512:	3301      	adds	r3, #1
 800c514:	72fb      	strb	r3, [r7, #11]
      break;
 800c516:	e089      	b.n	800c62c <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c51e:	689b      	ldr	r3, [r3, #8]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d00b      	beq.n	800c53c <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c52a:	689b      	ldr	r3, [r3, #8]
 800c52c:	687a      	ldr	r2, [r7, #4]
 800c52e:	7c12      	ldrb	r2, [r2, #16]
 800c530:	f107 0108 	add.w	r1, r7, #8
 800c534:	4610      	mov	r0, r2
 800c536:	4798      	blx	r3
 800c538:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c53a:	e077      	b.n	800c62c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c53c:	6839      	ldr	r1, [r7, #0]
 800c53e:	6878      	ldr	r0, [r7, #4]
 800c540:	f000 fa90 	bl	800ca64 <USBD_CtlError>
        err++;
 800c544:	7afb      	ldrb	r3, [r7, #11]
 800c546:	3301      	adds	r3, #1
 800c548:	72fb      	strb	r3, [r7, #11]
      break;
 800c54a:	e06f      	b.n	800c62c <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c552:	68db      	ldr	r3, [r3, #12]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d00b      	beq.n	800c570 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c55e:	68db      	ldr	r3, [r3, #12]
 800c560:	687a      	ldr	r2, [r7, #4]
 800c562:	7c12      	ldrb	r2, [r2, #16]
 800c564:	f107 0108 	add.w	r1, r7, #8
 800c568:	4610      	mov	r0, r2
 800c56a:	4798      	blx	r3
 800c56c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c56e:	e05d      	b.n	800c62c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c570:	6839      	ldr	r1, [r7, #0]
 800c572:	6878      	ldr	r0, [r7, #4]
 800c574:	f000 fa76 	bl	800ca64 <USBD_CtlError>
        err++;
 800c578:	7afb      	ldrb	r3, [r7, #11]
 800c57a:	3301      	adds	r3, #1
 800c57c:	72fb      	strb	r3, [r7, #11]
      break;
 800c57e:	e055      	b.n	800c62c <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c586:	691b      	ldr	r3, [r3, #16]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d00b      	beq.n	800c5a4 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c592:	691b      	ldr	r3, [r3, #16]
 800c594:	687a      	ldr	r2, [r7, #4]
 800c596:	7c12      	ldrb	r2, [r2, #16]
 800c598:	f107 0108 	add.w	r1, r7, #8
 800c59c:	4610      	mov	r0, r2
 800c59e:	4798      	blx	r3
 800c5a0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c5a2:	e043      	b.n	800c62c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c5a4:	6839      	ldr	r1, [r7, #0]
 800c5a6:	6878      	ldr	r0, [r7, #4]
 800c5a8:	f000 fa5c 	bl	800ca64 <USBD_CtlError>
        err++;
 800c5ac:	7afb      	ldrb	r3, [r7, #11]
 800c5ae:	3301      	adds	r3, #1
 800c5b0:	72fb      	strb	r3, [r7, #11]
      break;
 800c5b2:	e03b      	b.n	800c62c <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c5ba:	695b      	ldr	r3, [r3, #20]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d00b      	beq.n	800c5d8 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c5c6:	695b      	ldr	r3, [r3, #20]
 800c5c8:	687a      	ldr	r2, [r7, #4]
 800c5ca:	7c12      	ldrb	r2, [r2, #16]
 800c5cc:	f107 0108 	add.w	r1, r7, #8
 800c5d0:	4610      	mov	r0, r2
 800c5d2:	4798      	blx	r3
 800c5d4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c5d6:	e029      	b.n	800c62c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c5d8:	6839      	ldr	r1, [r7, #0]
 800c5da:	6878      	ldr	r0, [r7, #4]
 800c5dc:	f000 fa42 	bl	800ca64 <USBD_CtlError>
        err++;
 800c5e0:	7afb      	ldrb	r3, [r7, #11]
 800c5e2:	3301      	adds	r3, #1
 800c5e4:	72fb      	strb	r3, [r7, #11]
      break;
 800c5e6:	e021      	b.n	800c62c <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c5ee:	699b      	ldr	r3, [r3, #24]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d00b      	beq.n	800c60c <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c5fa:	699b      	ldr	r3, [r3, #24]
 800c5fc:	687a      	ldr	r2, [r7, #4]
 800c5fe:	7c12      	ldrb	r2, [r2, #16]
 800c600:	f107 0108 	add.w	r1, r7, #8
 800c604:	4610      	mov	r0, r2
 800c606:	4798      	blx	r3
 800c608:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c60a:	e00f      	b.n	800c62c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c60c:	6839      	ldr	r1, [r7, #0]
 800c60e:	6878      	ldr	r0, [r7, #4]
 800c610:	f000 fa28 	bl	800ca64 <USBD_CtlError>
        err++;
 800c614:	7afb      	ldrb	r3, [r7, #11]
 800c616:	3301      	adds	r3, #1
 800c618:	72fb      	strb	r3, [r7, #11]
      break;
 800c61a:	e007      	b.n	800c62c <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800c61c:	6839      	ldr	r1, [r7, #0]
 800c61e:	6878      	ldr	r0, [r7, #4]
 800c620:	f000 fa20 	bl	800ca64 <USBD_CtlError>
      err++;
 800c624:	7afb      	ldrb	r3, [r7, #11]
 800c626:	3301      	adds	r3, #1
 800c628:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800c62a:	bf00      	nop
    }
    break;
 800c62c:	e037      	b.n	800c69e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	7c1b      	ldrb	r3, [r3, #16]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d109      	bne.n	800c64a <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c63c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c63e:	f107 0208 	add.w	r2, r7, #8
 800c642:	4610      	mov	r0, r2
 800c644:	4798      	blx	r3
 800c646:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800c648:	e029      	b.n	800c69e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800c64a:	6839      	ldr	r1, [r7, #0]
 800c64c:	6878      	ldr	r0, [r7, #4]
 800c64e:	f000 fa09 	bl	800ca64 <USBD_CtlError>
      err++;
 800c652:	7afb      	ldrb	r3, [r7, #11]
 800c654:	3301      	adds	r3, #1
 800c656:	72fb      	strb	r3, [r7, #11]
    break;
 800c658:	e021      	b.n	800c69e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	7c1b      	ldrb	r3, [r3, #16]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d10d      	bne.n	800c67e <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c66a:	f107 0208 	add.w	r2, r7, #8
 800c66e:	4610      	mov	r0, r2
 800c670:	4798      	blx	r3
 800c672:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	3301      	adds	r3, #1
 800c678:	2207      	movs	r2, #7
 800c67a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800c67c:	e00f      	b.n	800c69e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800c67e:	6839      	ldr	r1, [r7, #0]
 800c680:	6878      	ldr	r0, [r7, #4]
 800c682:	f000 f9ef 	bl	800ca64 <USBD_CtlError>
      err++;
 800c686:	7afb      	ldrb	r3, [r7, #11]
 800c688:	3301      	adds	r3, #1
 800c68a:	72fb      	strb	r3, [r7, #11]
    break;
 800c68c:	e007      	b.n	800c69e <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800c68e:	6839      	ldr	r1, [r7, #0]
 800c690:	6878      	ldr	r0, [r7, #4]
 800c692:	f000 f9e7 	bl	800ca64 <USBD_CtlError>
    err++;
 800c696:	7afb      	ldrb	r3, [r7, #11]
 800c698:	3301      	adds	r3, #1
 800c69a:	72fb      	strb	r3, [r7, #11]
    break;
 800c69c:	bf00      	nop
  }

  if (err != 0U)
 800c69e:	7afb      	ldrb	r3, [r7, #11]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d11e      	bne.n	800c6e2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800c6a4:	683b      	ldr	r3, [r7, #0]
 800c6a6:	88db      	ldrh	r3, [r3, #6]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d016      	beq.n	800c6da <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800c6ac:	893b      	ldrh	r3, [r7, #8]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d00e      	beq.n	800c6d0 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800c6b2:	683b      	ldr	r3, [r7, #0]
 800c6b4:	88da      	ldrh	r2, [r3, #6]
 800c6b6:	893b      	ldrh	r3, [r7, #8]
 800c6b8:	4293      	cmp	r3, r2
 800c6ba:	bf28      	it	cs
 800c6bc:	4613      	movcs	r3, r2
 800c6be:	b29b      	uxth	r3, r3
 800c6c0:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800c6c2:	893b      	ldrh	r3, [r7, #8]
 800c6c4:	461a      	mov	r2, r3
 800c6c6:	68f9      	ldr	r1, [r7, #12]
 800c6c8:	6878      	ldr	r0, [r7, #4]
 800c6ca:	f000 fa3c 	bl	800cb46 <USBD_CtlSendData>
 800c6ce:	e009      	b.n	800c6e4 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800c6d0:	6839      	ldr	r1, [r7, #0]
 800c6d2:	6878      	ldr	r0, [r7, #4]
 800c6d4:	f000 f9c6 	bl	800ca64 <USBD_CtlError>
 800c6d8:	e004      	b.n	800c6e4 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800c6da:	6878      	ldr	r0, [r7, #4]
 800c6dc:	f000 fa8d 	bl	800cbfa <USBD_CtlSendStatus>
 800c6e0:	e000      	b.n	800c6e4 <USBD_GetDescriptor+0x2cc>
    return;
 800c6e2:	bf00      	nop
    }
  }
}
 800c6e4:	3710      	adds	r7, #16
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	bd80      	pop	{r7, pc}
 800c6ea:	bf00      	nop

0800c6ec <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b084      	sub	sp, #16
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
 800c6f4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c6f6:	683b      	ldr	r3, [r7, #0]
 800c6f8:	889b      	ldrh	r3, [r3, #4]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d130      	bne.n	800c760 <USBD_SetAddress+0x74>
 800c6fe:	683b      	ldr	r3, [r7, #0]
 800c700:	88db      	ldrh	r3, [r3, #6]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d12c      	bne.n	800c760 <USBD_SetAddress+0x74>
 800c706:	683b      	ldr	r3, [r7, #0]
 800c708:	885b      	ldrh	r3, [r3, #2]
 800c70a:	2b7f      	cmp	r3, #127	; 0x7f
 800c70c:	d828      	bhi.n	800c760 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	885b      	ldrh	r3, [r3, #2]
 800c712:	b2db      	uxtb	r3, r3
 800c714:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c718:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c720:	2b03      	cmp	r3, #3
 800c722:	d104      	bne.n	800c72e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800c724:	6839      	ldr	r1, [r7, #0]
 800c726:	6878      	ldr	r0, [r7, #4]
 800c728:	f000 f99c 	bl	800ca64 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c72c:	e01c      	b.n	800c768 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	7bfa      	ldrb	r2, [r7, #15]
 800c732:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c736:	7bfb      	ldrb	r3, [r7, #15]
 800c738:	4619      	mov	r1, r3
 800c73a:	6878      	ldr	r0, [r7, #4]
 800c73c:	f004 f888 	bl	8010850 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c740:	6878      	ldr	r0, [r7, #4]
 800c742:	f000 fa5a 	bl	800cbfa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c746:	7bfb      	ldrb	r3, [r7, #15]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d004      	beq.n	800c756 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	2202      	movs	r2, #2
 800c750:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c754:	e008      	b.n	800c768 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	2201      	movs	r2, #1
 800c75a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c75e:	e003      	b.n	800c768 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c760:	6839      	ldr	r1, [r7, #0]
 800c762:	6878      	ldr	r0, [r7, #4]
 800c764:	f000 f97e 	bl	800ca64 <USBD_CtlError>
  }
}
 800c768:	bf00      	nop
 800c76a:	3710      	adds	r7, #16
 800c76c:	46bd      	mov	sp, r7
 800c76e:	bd80      	pop	{r7, pc}

0800c770 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c770:	b580      	push	{r7, lr}
 800c772:	b084      	sub	sp, #16
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
 800c778:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c77a:	2300      	movs	r3, #0
 800c77c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c77e:	683b      	ldr	r3, [r7, #0]
 800c780:	885b      	ldrh	r3, [r3, #2]
 800c782:	b2da      	uxtb	r2, r3
 800c784:	4b4b      	ldr	r3, [pc, #300]	; (800c8b4 <USBD_SetConfig+0x144>)
 800c786:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c788:	4b4a      	ldr	r3, [pc, #296]	; (800c8b4 <USBD_SetConfig+0x144>)
 800c78a:	781b      	ldrb	r3, [r3, #0]
 800c78c:	2b01      	cmp	r3, #1
 800c78e:	d905      	bls.n	800c79c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c790:	6839      	ldr	r1, [r7, #0]
 800c792:	6878      	ldr	r0, [r7, #4]
 800c794:	f000 f966 	bl	800ca64 <USBD_CtlError>
    return USBD_FAIL;
 800c798:	2303      	movs	r3, #3
 800c79a:	e087      	b.n	800c8ac <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7a2:	2b02      	cmp	r3, #2
 800c7a4:	d002      	beq.n	800c7ac <USBD_SetConfig+0x3c>
 800c7a6:	2b03      	cmp	r3, #3
 800c7a8:	d025      	beq.n	800c7f6 <USBD_SetConfig+0x86>
 800c7aa:	e071      	b.n	800c890 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800c7ac:	4b41      	ldr	r3, [pc, #260]	; (800c8b4 <USBD_SetConfig+0x144>)
 800c7ae:	781b      	ldrb	r3, [r3, #0]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d01c      	beq.n	800c7ee <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800c7b4:	4b3f      	ldr	r3, [pc, #252]	; (800c8b4 <USBD_SetConfig+0x144>)
 800c7b6:	781b      	ldrb	r3, [r3, #0]
 800c7b8:	461a      	mov	r2, r3
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800c7be:	4b3d      	ldr	r3, [pc, #244]	; (800c8b4 <USBD_SetConfig+0x144>)
 800c7c0:	781b      	ldrb	r3, [r3, #0]
 800c7c2:	4619      	mov	r1, r3
 800c7c4:	6878      	ldr	r0, [r7, #4]
 800c7c6:	f7ff f9a7 	bl	800bb18 <USBD_SetClassConfig>
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800c7ce:	7bfb      	ldrb	r3, [r7, #15]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d004      	beq.n	800c7de <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800c7d4:	6839      	ldr	r1, [r7, #0]
 800c7d6:	6878      	ldr	r0, [r7, #4]
 800c7d8:	f000 f944 	bl	800ca64 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800c7dc:	e065      	b.n	800c8aa <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800c7de:	6878      	ldr	r0, [r7, #4]
 800c7e0:	f000 fa0b 	bl	800cbfa <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2203      	movs	r2, #3
 800c7e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800c7ec:	e05d      	b.n	800c8aa <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800c7ee:	6878      	ldr	r0, [r7, #4]
 800c7f0:	f000 fa03 	bl	800cbfa <USBD_CtlSendStatus>
    break;
 800c7f4:	e059      	b.n	800c8aa <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800c7f6:	4b2f      	ldr	r3, [pc, #188]	; (800c8b4 <USBD_SetConfig+0x144>)
 800c7f8:	781b      	ldrb	r3, [r3, #0]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d112      	bne.n	800c824 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	2202      	movs	r2, #2
 800c802:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800c806:	4b2b      	ldr	r3, [pc, #172]	; (800c8b4 <USBD_SetConfig+0x144>)
 800c808:	781b      	ldrb	r3, [r3, #0]
 800c80a:	461a      	mov	r2, r3
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c810:	4b28      	ldr	r3, [pc, #160]	; (800c8b4 <USBD_SetConfig+0x144>)
 800c812:	781b      	ldrb	r3, [r3, #0]
 800c814:	4619      	mov	r1, r3
 800c816:	6878      	ldr	r0, [r7, #4]
 800c818:	f7ff f99a 	bl	800bb50 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800c81c:	6878      	ldr	r0, [r7, #4]
 800c81e:	f000 f9ec 	bl	800cbfa <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800c822:	e042      	b.n	800c8aa <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800c824:	4b23      	ldr	r3, [pc, #140]	; (800c8b4 <USBD_SetConfig+0x144>)
 800c826:	781b      	ldrb	r3, [r3, #0]
 800c828:	461a      	mov	r2, r3
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	685b      	ldr	r3, [r3, #4]
 800c82e:	429a      	cmp	r2, r3
 800c830:	d02a      	beq.n	800c888 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	685b      	ldr	r3, [r3, #4]
 800c836:	b2db      	uxtb	r3, r3
 800c838:	4619      	mov	r1, r3
 800c83a:	6878      	ldr	r0, [r7, #4]
 800c83c:	f7ff f988 	bl	800bb50 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800c840:	4b1c      	ldr	r3, [pc, #112]	; (800c8b4 <USBD_SetConfig+0x144>)
 800c842:	781b      	ldrb	r3, [r3, #0]
 800c844:	461a      	mov	r2, r3
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800c84a:	4b1a      	ldr	r3, [pc, #104]	; (800c8b4 <USBD_SetConfig+0x144>)
 800c84c:	781b      	ldrb	r3, [r3, #0]
 800c84e:	4619      	mov	r1, r3
 800c850:	6878      	ldr	r0, [r7, #4]
 800c852:	f7ff f961 	bl	800bb18 <USBD_SetClassConfig>
 800c856:	4603      	mov	r3, r0
 800c858:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800c85a:	7bfb      	ldrb	r3, [r7, #15]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d00f      	beq.n	800c880 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800c860:	6839      	ldr	r1, [r7, #0]
 800c862:	6878      	ldr	r0, [r7, #4]
 800c864:	f000 f8fe 	bl	800ca64 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	685b      	ldr	r3, [r3, #4]
 800c86c:	b2db      	uxtb	r3, r3
 800c86e:	4619      	mov	r1, r3
 800c870:	6878      	ldr	r0, [r7, #4]
 800c872:	f7ff f96d 	bl	800bb50 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	2202      	movs	r2, #2
 800c87a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800c87e:	e014      	b.n	800c8aa <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800c880:	6878      	ldr	r0, [r7, #4]
 800c882:	f000 f9ba 	bl	800cbfa <USBD_CtlSendStatus>
    break;
 800c886:	e010      	b.n	800c8aa <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800c888:	6878      	ldr	r0, [r7, #4]
 800c88a:	f000 f9b6 	bl	800cbfa <USBD_CtlSendStatus>
    break;
 800c88e:	e00c      	b.n	800c8aa <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800c890:	6839      	ldr	r1, [r7, #0]
 800c892:	6878      	ldr	r0, [r7, #4]
 800c894:	f000 f8e6 	bl	800ca64 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c898:	4b06      	ldr	r3, [pc, #24]	; (800c8b4 <USBD_SetConfig+0x144>)
 800c89a:	781b      	ldrb	r3, [r3, #0]
 800c89c:	4619      	mov	r1, r3
 800c89e:	6878      	ldr	r0, [r7, #4]
 800c8a0:	f7ff f956 	bl	800bb50 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800c8a4:	2303      	movs	r3, #3
 800c8a6:	73fb      	strb	r3, [r7, #15]
    break;
 800c8a8:	bf00      	nop
  }

  return ret;
 800c8aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	3710      	adds	r7, #16
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	bd80      	pop	{r7, pc}
 800c8b4:	200006a0 	.word	0x200006a0

0800c8b8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b082      	sub	sp, #8
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
 800c8c0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c8c2:	683b      	ldr	r3, [r7, #0]
 800c8c4:	88db      	ldrh	r3, [r3, #6]
 800c8c6:	2b01      	cmp	r3, #1
 800c8c8:	d004      	beq.n	800c8d4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c8ca:	6839      	ldr	r1, [r7, #0]
 800c8cc:	6878      	ldr	r0, [r7, #4]
 800c8ce:	f000 f8c9 	bl	800ca64 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800c8d2:	e021      	b.n	800c918 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8da:	2b01      	cmp	r3, #1
 800c8dc:	db17      	blt.n	800c90e <USBD_GetConfig+0x56>
 800c8de:	2b02      	cmp	r3, #2
 800c8e0:	dd02      	ble.n	800c8e8 <USBD_GetConfig+0x30>
 800c8e2:	2b03      	cmp	r3, #3
 800c8e4:	d00b      	beq.n	800c8fe <USBD_GetConfig+0x46>
 800c8e6:	e012      	b.n	800c90e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	3308      	adds	r3, #8
 800c8f2:	2201      	movs	r2, #1
 800c8f4:	4619      	mov	r1, r3
 800c8f6:	6878      	ldr	r0, [r7, #4]
 800c8f8:	f000 f925 	bl	800cb46 <USBD_CtlSendData>
      break;
 800c8fc:	e00c      	b.n	800c918 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	3304      	adds	r3, #4
 800c902:	2201      	movs	r2, #1
 800c904:	4619      	mov	r1, r3
 800c906:	6878      	ldr	r0, [r7, #4]
 800c908:	f000 f91d 	bl	800cb46 <USBD_CtlSendData>
      break;
 800c90c:	e004      	b.n	800c918 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800c90e:	6839      	ldr	r1, [r7, #0]
 800c910:	6878      	ldr	r0, [r7, #4]
 800c912:	f000 f8a7 	bl	800ca64 <USBD_CtlError>
      break;
 800c916:	bf00      	nop
}
 800c918:	bf00      	nop
 800c91a:	3708      	adds	r7, #8
 800c91c:	46bd      	mov	sp, r7
 800c91e:	bd80      	pop	{r7, pc}

0800c920 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c920:	b580      	push	{r7, lr}
 800c922:	b082      	sub	sp, #8
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
 800c928:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c930:	3b01      	subs	r3, #1
 800c932:	2b02      	cmp	r3, #2
 800c934:	d81e      	bhi.n	800c974 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800c936:	683b      	ldr	r3, [r7, #0]
 800c938:	88db      	ldrh	r3, [r3, #6]
 800c93a:	2b02      	cmp	r3, #2
 800c93c:	d004      	beq.n	800c948 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800c93e:	6839      	ldr	r1, [r7, #0]
 800c940:	6878      	ldr	r0, [r7, #4]
 800c942:	f000 f88f 	bl	800ca64 <USBD_CtlError>
      break;
 800c946:	e01a      	b.n	800c97e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	2201      	movs	r2, #1
 800c94c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c954:	2b00      	cmp	r3, #0
 800c956:	d005      	beq.n	800c964 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	68db      	ldr	r3, [r3, #12]
 800c95c:	f043 0202 	orr.w	r2, r3, #2
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	330c      	adds	r3, #12
 800c968:	2202      	movs	r2, #2
 800c96a:	4619      	mov	r1, r3
 800c96c:	6878      	ldr	r0, [r7, #4]
 800c96e:	f000 f8ea 	bl	800cb46 <USBD_CtlSendData>
    break;
 800c972:	e004      	b.n	800c97e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800c974:	6839      	ldr	r1, [r7, #0]
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f000 f874 	bl	800ca64 <USBD_CtlError>
    break;
 800c97c:	bf00      	nop
  }
}
 800c97e:	bf00      	nop
 800c980:	3708      	adds	r7, #8
 800c982:	46bd      	mov	sp, r7
 800c984:	bd80      	pop	{r7, pc}

0800c986 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c986:	b580      	push	{r7, lr}
 800c988:	b082      	sub	sp, #8
 800c98a:	af00      	add	r7, sp, #0
 800c98c:	6078      	str	r0, [r7, #4]
 800c98e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c990:	683b      	ldr	r3, [r7, #0]
 800c992:	885b      	ldrh	r3, [r3, #2]
 800c994:	2b01      	cmp	r3, #1
 800c996:	d106      	bne.n	800c9a6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	2201      	movs	r2, #1
 800c99c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c9a0:	6878      	ldr	r0, [r7, #4]
 800c9a2:	f000 f92a 	bl	800cbfa <USBD_CtlSendStatus>
  }
}
 800c9a6:	bf00      	nop
 800c9a8:	3708      	adds	r7, #8
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	bd80      	pop	{r7, pc}

0800c9ae <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9ae:	b580      	push	{r7, lr}
 800c9b0:	b082      	sub	sp, #8
 800c9b2:	af00      	add	r7, sp, #0
 800c9b4:	6078      	str	r0, [r7, #4]
 800c9b6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c9be:	3b01      	subs	r3, #1
 800c9c0:	2b02      	cmp	r3, #2
 800c9c2:	d80b      	bhi.n	800c9dc <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	885b      	ldrh	r3, [r3, #2]
 800c9c8:	2b01      	cmp	r3, #1
 800c9ca:	d10c      	bne.n	800c9e6 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c9d4:	6878      	ldr	r0, [r7, #4]
 800c9d6:	f000 f910 	bl	800cbfa <USBD_CtlSendStatus>
      }
      break;
 800c9da:	e004      	b.n	800c9e6 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c9dc:	6839      	ldr	r1, [r7, #0]
 800c9de:	6878      	ldr	r0, [r7, #4]
 800c9e0:	f000 f840 	bl	800ca64 <USBD_CtlError>
      break;
 800c9e4:	e000      	b.n	800c9e8 <USBD_ClrFeature+0x3a>
      break;
 800c9e6:	bf00      	nop
  }
}
 800c9e8:	bf00      	nop
 800c9ea:	3708      	adds	r7, #8
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	bd80      	pop	{r7, pc}

0800c9f0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b084      	sub	sp, #16
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
 800c9f8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c9fa:	683b      	ldr	r3, [r7, #0]
 800c9fc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	781a      	ldrb	r2, [r3, #0]
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	3301      	adds	r3, #1
 800ca0a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	781a      	ldrb	r2, [r3, #0]
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	3301      	adds	r3, #1
 800ca18:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ca1a:	68f8      	ldr	r0, [r7, #12]
 800ca1c:	f7ff fad3 	bl	800bfc6 <SWAPBYTE>
 800ca20:	4603      	mov	r3, r0
 800ca22:	461a      	mov	r2, r3
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	3301      	adds	r3, #1
 800ca2c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	3301      	adds	r3, #1
 800ca32:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ca34:	68f8      	ldr	r0, [r7, #12]
 800ca36:	f7ff fac6 	bl	800bfc6 <SWAPBYTE>
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	461a      	mov	r2, r3
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	3301      	adds	r3, #1
 800ca46:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	3301      	adds	r3, #1
 800ca4c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ca4e:	68f8      	ldr	r0, [r7, #12]
 800ca50:	f7ff fab9 	bl	800bfc6 <SWAPBYTE>
 800ca54:	4603      	mov	r3, r0
 800ca56:	461a      	mov	r2, r3
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	80da      	strh	r2, [r3, #6]
}
 800ca5c:	bf00      	nop
 800ca5e:	3710      	adds	r7, #16
 800ca60:	46bd      	mov	sp, r7
 800ca62:	bd80      	pop	{r7, pc}

0800ca64 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b082      	sub	sp, #8
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
 800ca6c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ca6e:	2180      	movs	r1, #128	; 0x80
 800ca70:	6878      	ldr	r0, [r7, #4]
 800ca72:	f003 fe83 	bl	801077c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ca76:	2100      	movs	r1, #0
 800ca78:	6878      	ldr	r0, [r7, #4]
 800ca7a:	f003 fe7f 	bl	801077c <USBD_LL_StallEP>
}
 800ca7e:	bf00      	nop
 800ca80:	3708      	adds	r7, #8
 800ca82:	46bd      	mov	sp, r7
 800ca84:	bd80      	pop	{r7, pc}

0800ca86 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ca86:	b580      	push	{r7, lr}
 800ca88:	b086      	sub	sp, #24
 800ca8a:	af00      	add	r7, sp, #0
 800ca8c:	60f8      	str	r0, [r7, #12]
 800ca8e:	60b9      	str	r1, [r7, #8]
 800ca90:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ca92:	2300      	movs	r3, #0
 800ca94:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d036      	beq.n	800cb0a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800caa0:	6938      	ldr	r0, [r7, #16]
 800caa2:	f000 f836 	bl	800cb12 <USBD_GetLen>
 800caa6:	4603      	mov	r3, r0
 800caa8:	3301      	adds	r3, #1
 800caaa:	b29b      	uxth	r3, r3
 800caac:	005b      	lsls	r3, r3, #1
 800caae:	b29a      	uxth	r2, r3
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800cab4:	7dfb      	ldrb	r3, [r7, #23]
 800cab6:	68ba      	ldr	r2, [r7, #8]
 800cab8:	4413      	add	r3, r2
 800caba:	687a      	ldr	r2, [r7, #4]
 800cabc:	7812      	ldrb	r2, [r2, #0]
 800cabe:	701a      	strb	r2, [r3, #0]
  idx++;
 800cac0:	7dfb      	ldrb	r3, [r7, #23]
 800cac2:	3301      	adds	r3, #1
 800cac4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cac6:	7dfb      	ldrb	r3, [r7, #23]
 800cac8:	68ba      	ldr	r2, [r7, #8]
 800caca:	4413      	add	r3, r2
 800cacc:	2203      	movs	r2, #3
 800cace:	701a      	strb	r2, [r3, #0]
  idx++;
 800cad0:	7dfb      	ldrb	r3, [r7, #23]
 800cad2:	3301      	adds	r3, #1
 800cad4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cad6:	e013      	b.n	800cb00 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800cad8:	7dfb      	ldrb	r3, [r7, #23]
 800cada:	68ba      	ldr	r2, [r7, #8]
 800cadc:	4413      	add	r3, r2
 800cade:	693a      	ldr	r2, [r7, #16]
 800cae0:	7812      	ldrb	r2, [r2, #0]
 800cae2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800cae4:	693b      	ldr	r3, [r7, #16]
 800cae6:	3301      	adds	r3, #1
 800cae8:	613b      	str	r3, [r7, #16]
    idx++;
 800caea:	7dfb      	ldrb	r3, [r7, #23]
 800caec:	3301      	adds	r3, #1
 800caee:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800caf0:	7dfb      	ldrb	r3, [r7, #23]
 800caf2:	68ba      	ldr	r2, [r7, #8]
 800caf4:	4413      	add	r3, r2
 800caf6:	2200      	movs	r2, #0
 800caf8:	701a      	strb	r2, [r3, #0]
    idx++;
 800cafa:	7dfb      	ldrb	r3, [r7, #23]
 800cafc:	3301      	adds	r3, #1
 800cafe:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cb00:	693b      	ldr	r3, [r7, #16]
 800cb02:	781b      	ldrb	r3, [r3, #0]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d1e7      	bne.n	800cad8 <USBD_GetString+0x52>
 800cb08:	e000      	b.n	800cb0c <USBD_GetString+0x86>
    return;
 800cb0a:	bf00      	nop
  }
}
 800cb0c:	3718      	adds	r7, #24
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	bd80      	pop	{r7, pc}

0800cb12 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cb12:	b480      	push	{r7}
 800cb14:	b085      	sub	sp, #20
 800cb16:	af00      	add	r7, sp, #0
 800cb18:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cb22:	e005      	b.n	800cb30 <USBD_GetLen+0x1e>
  {
    len++;
 800cb24:	7bfb      	ldrb	r3, [r7, #15]
 800cb26:	3301      	adds	r3, #1
 800cb28:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cb2a:	68bb      	ldr	r3, [r7, #8]
 800cb2c:	3301      	adds	r3, #1
 800cb2e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cb30:	68bb      	ldr	r3, [r7, #8]
 800cb32:	781b      	ldrb	r3, [r3, #0]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d1f5      	bne.n	800cb24 <USBD_GetLen+0x12>
  }

  return len;
 800cb38:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	3714      	adds	r7, #20
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb44:	4770      	bx	lr

0800cb46 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cb46:	b580      	push	{r7, lr}
 800cb48:	b084      	sub	sp, #16
 800cb4a:	af00      	add	r7, sp, #0
 800cb4c:	60f8      	str	r0, [r7, #12]
 800cb4e:	60b9      	str	r1, [r7, #8]
 800cb50:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	2202      	movs	r2, #2
 800cb56:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	687a      	ldr	r2, [r7, #4]
 800cb5e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	687a      	ldr	r2, [r7, #4]
 800cb64:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	68ba      	ldr	r2, [r7, #8]
 800cb6a:	2100      	movs	r1, #0
 800cb6c:	68f8      	ldr	r0, [r7, #12]
 800cb6e:	f003 fe8e 	bl	801088e <USBD_LL_Transmit>

  return USBD_OK;
 800cb72:	2300      	movs	r3, #0
}
 800cb74:	4618      	mov	r0, r3
 800cb76:	3710      	adds	r7, #16
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	bd80      	pop	{r7, pc}

0800cb7c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b084      	sub	sp, #16
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	60f8      	str	r0, [r7, #12]
 800cb84:	60b9      	str	r1, [r7, #8]
 800cb86:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	68ba      	ldr	r2, [r7, #8]
 800cb8c:	2100      	movs	r1, #0
 800cb8e:	68f8      	ldr	r0, [r7, #12]
 800cb90:	f003 fe7d 	bl	801088e <USBD_LL_Transmit>

  return USBD_OK;
 800cb94:	2300      	movs	r3, #0
}
 800cb96:	4618      	mov	r0, r3
 800cb98:	3710      	adds	r7, #16
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	bd80      	pop	{r7, pc}

0800cb9e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cb9e:	b580      	push	{r7, lr}
 800cba0:	b084      	sub	sp, #16
 800cba2:	af00      	add	r7, sp, #0
 800cba4:	60f8      	str	r0, [r7, #12]
 800cba6:	60b9      	str	r1, [r7, #8]
 800cba8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	2203      	movs	r2, #3
 800cbae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	687a      	ldr	r2, [r7, #4]
 800cbb6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	687a      	ldr	r2, [r7, #4]
 800cbbe:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	68ba      	ldr	r2, [r7, #8]
 800cbc6:	2100      	movs	r1, #0
 800cbc8:	68f8      	ldr	r0, [r7, #12]
 800cbca:	f003 fe81 	bl	80108d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cbce:	2300      	movs	r3, #0
}
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	3710      	adds	r7, #16
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	bd80      	pop	{r7, pc}

0800cbd8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b084      	sub	sp, #16
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	60f8      	str	r0, [r7, #12]
 800cbe0:	60b9      	str	r1, [r7, #8]
 800cbe2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	68ba      	ldr	r2, [r7, #8]
 800cbe8:	2100      	movs	r1, #0
 800cbea:	68f8      	ldr	r0, [r7, #12]
 800cbec:	f003 fe70 	bl	80108d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cbf0:	2300      	movs	r3, #0
}
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	3710      	adds	r7, #16
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	bd80      	pop	{r7, pc}

0800cbfa <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cbfa:	b580      	push	{r7, lr}
 800cbfc:	b082      	sub	sp, #8
 800cbfe:	af00      	add	r7, sp, #0
 800cc00:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	2204      	movs	r2, #4
 800cc06:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	2200      	movs	r2, #0
 800cc0e:	2100      	movs	r1, #0
 800cc10:	6878      	ldr	r0, [r7, #4]
 800cc12:	f003 fe3c 	bl	801088e <USBD_LL_Transmit>

  return USBD_OK;
 800cc16:	2300      	movs	r3, #0
}
 800cc18:	4618      	mov	r0, r3
 800cc1a:	3708      	adds	r7, #8
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	bd80      	pop	{r7, pc}

0800cc20 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b082      	sub	sp, #8
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2205      	movs	r2, #5
 800cc2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cc30:	2300      	movs	r3, #0
 800cc32:	2200      	movs	r2, #0
 800cc34:	2100      	movs	r1, #0
 800cc36:	6878      	ldr	r0, [r7, #4]
 800cc38:	f003 fe4a 	bl	80108d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cc3c:	2300      	movs	r3, #0
}
 800cc3e:	4618      	mov	r0, r3
 800cc40:	3708      	adds	r7, #8
 800cc42:	46bd      	mov	sp, r7
 800cc44:	bd80      	pop	{r7, pc}

0800cc46 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800cc46:	b480      	push	{r7}
 800cc48:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800cc4a:	bf00      	nop
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc52:	4770      	bx	lr

0800cc54 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800cc54:	b480      	push	{r7}
 800cc56:	b085      	sub	sp, #20
 800cc58:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc5a:	f3ef 8305 	mrs	r3, IPSR
 800cc5e:	60bb      	str	r3, [r7, #8]
  return(result);
 800cc60:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d10f      	bne.n	800cc86 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc66:	f3ef 8310 	mrs	r3, PRIMASK
 800cc6a:	607b      	str	r3, [r7, #4]
  return(result);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d105      	bne.n	800cc7e <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cc72:	f3ef 8311 	mrs	r3, BASEPRI
 800cc76:	603b      	str	r3, [r7, #0]
  return(result);
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d007      	beq.n	800cc8e <osKernelInitialize+0x3a>
 800cc7e:	4b0e      	ldr	r3, [pc, #56]	; (800ccb8 <osKernelInitialize+0x64>)
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	2b02      	cmp	r3, #2
 800cc84:	d103      	bne.n	800cc8e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800cc86:	f06f 0305 	mvn.w	r3, #5
 800cc8a:	60fb      	str	r3, [r7, #12]
 800cc8c:	e00c      	b.n	800cca8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800cc8e:	4b0a      	ldr	r3, [pc, #40]	; (800ccb8 <osKernelInitialize+0x64>)
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d105      	bne.n	800cca2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800cc96:	4b08      	ldr	r3, [pc, #32]	; (800ccb8 <osKernelInitialize+0x64>)
 800cc98:	2201      	movs	r2, #1
 800cc9a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	60fb      	str	r3, [r7, #12]
 800cca0:	e002      	b.n	800cca8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800cca2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cca6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800cca8:	68fb      	ldr	r3, [r7, #12]
}
 800ccaa:	4618      	mov	r0, r3
 800ccac:	3714      	adds	r7, #20
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb4:	4770      	bx	lr
 800ccb6:	bf00      	nop
 800ccb8:	200006a4 	.word	0x200006a4

0800ccbc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b084      	sub	sp, #16
 800ccc0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ccc2:	f3ef 8305 	mrs	r3, IPSR
 800ccc6:	60bb      	str	r3, [r7, #8]
  return(result);
 800ccc8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d10f      	bne.n	800ccee <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ccce:	f3ef 8310 	mrs	r3, PRIMASK
 800ccd2:	607b      	str	r3, [r7, #4]
  return(result);
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d105      	bne.n	800cce6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ccda:	f3ef 8311 	mrs	r3, BASEPRI
 800ccde:	603b      	str	r3, [r7, #0]
  return(result);
 800cce0:	683b      	ldr	r3, [r7, #0]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d007      	beq.n	800ccf6 <osKernelStart+0x3a>
 800cce6:	4b0f      	ldr	r3, [pc, #60]	; (800cd24 <osKernelStart+0x68>)
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	2b02      	cmp	r3, #2
 800ccec:	d103      	bne.n	800ccf6 <osKernelStart+0x3a>
    stat = osErrorISR;
 800ccee:	f06f 0305 	mvn.w	r3, #5
 800ccf2:	60fb      	str	r3, [r7, #12]
 800ccf4:	e010      	b.n	800cd18 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ccf6:	4b0b      	ldr	r3, [pc, #44]	; (800cd24 <osKernelStart+0x68>)
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	2b01      	cmp	r3, #1
 800ccfc:	d109      	bne.n	800cd12 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ccfe:	f7ff ffa2 	bl	800cc46 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800cd02:	4b08      	ldr	r3, [pc, #32]	; (800cd24 <osKernelStart+0x68>)
 800cd04:	2202      	movs	r2, #2
 800cd06:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800cd08:	f001 fb84 	bl	800e414 <vTaskStartScheduler>
      stat = osOK;
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	60fb      	str	r3, [r7, #12]
 800cd10:	e002      	b.n	800cd18 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800cd12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cd16:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800cd18:	68fb      	ldr	r3, [r7, #12]
}
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	3710      	adds	r7, #16
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	bd80      	pop	{r7, pc}
 800cd22:	bf00      	nop
 800cd24:	200006a4 	.word	0x200006a4

0800cd28 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b090      	sub	sp, #64	; 0x40
 800cd2c:	af04      	add	r7, sp, #16
 800cd2e:	60f8      	str	r0, [r7, #12]
 800cd30:	60b9      	str	r1, [r7, #8]
 800cd32:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800cd34:	2300      	movs	r3, #0
 800cd36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd38:	f3ef 8305 	mrs	r3, IPSR
 800cd3c:	61fb      	str	r3, [r7, #28]
  return(result);
 800cd3e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	f040 808f 	bne.w	800ce64 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cd46:	f3ef 8310 	mrs	r3, PRIMASK
 800cd4a:	61bb      	str	r3, [r7, #24]
  return(result);
 800cd4c:	69bb      	ldr	r3, [r7, #24]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d105      	bne.n	800cd5e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cd52:	f3ef 8311 	mrs	r3, BASEPRI
 800cd56:	617b      	str	r3, [r7, #20]
  return(result);
 800cd58:	697b      	ldr	r3, [r7, #20]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d003      	beq.n	800cd66 <osThreadNew+0x3e>
 800cd5e:	4b44      	ldr	r3, [pc, #272]	; (800ce70 <osThreadNew+0x148>)
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	2b02      	cmp	r3, #2
 800cd64:	d07e      	beq.n	800ce64 <osThreadNew+0x13c>
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d07b      	beq.n	800ce64 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800cd6c:	2380      	movs	r3, #128	; 0x80
 800cd6e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800cd70:	2318      	movs	r3, #24
 800cd72:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800cd74:	2300      	movs	r3, #0
 800cd76:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800cd78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cd7c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d045      	beq.n	800ce10 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d002      	beq.n	800cd92 <osThreadNew+0x6a>
        name = attr->name;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	699b      	ldr	r3, [r3, #24]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d002      	beq.n	800cda0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	699b      	ldr	r3, [r3, #24]
 800cd9e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800cda0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d008      	beq.n	800cdb8 <osThreadNew+0x90>
 800cda6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cda8:	2b38      	cmp	r3, #56	; 0x38
 800cdaa:	d805      	bhi.n	800cdb8 <osThreadNew+0x90>
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	685b      	ldr	r3, [r3, #4]
 800cdb0:	f003 0301 	and.w	r3, r3, #1
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d001      	beq.n	800cdbc <osThreadNew+0x94>
        return (NULL);
 800cdb8:	2300      	movs	r3, #0
 800cdba:	e054      	b.n	800ce66 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	695b      	ldr	r3, [r3, #20]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d003      	beq.n	800cdcc <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	695b      	ldr	r3, [r3, #20]
 800cdc8:	089b      	lsrs	r3, r3, #2
 800cdca:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	689b      	ldr	r3, [r3, #8]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d00e      	beq.n	800cdf2 <osThreadNew+0xca>
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	68db      	ldr	r3, [r3, #12]
 800cdd8:	2b63      	cmp	r3, #99	; 0x63
 800cdda:	d90a      	bls.n	800cdf2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d006      	beq.n	800cdf2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	695b      	ldr	r3, [r3, #20]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d002      	beq.n	800cdf2 <osThreadNew+0xca>
        mem = 1;
 800cdec:	2301      	movs	r3, #1
 800cdee:	623b      	str	r3, [r7, #32]
 800cdf0:	e010      	b.n	800ce14 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	689b      	ldr	r3, [r3, #8]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d10c      	bne.n	800ce14 <osThreadNew+0xec>
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	68db      	ldr	r3, [r3, #12]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d108      	bne.n	800ce14 <osThreadNew+0xec>
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	691b      	ldr	r3, [r3, #16]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d104      	bne.n	800ce14 <osThreadNew+0xec>
          mem = 0;
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	623b      	str	r3, [r7, #32]
 800ce0e:	e001      	b.n	800ce14 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800ce10:	2300      	movs	r3, #0
 800ce12:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800ce14:	6a3b      	ldr	r3, [r7, #32]
 800ce16:	2b01      	cmp	r3, #1
 800ce18:	d110      	bne.n	800ce3c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800ce1e:	687a      	ldr	r2, [r7, #4]
 800ce20:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ce22:	9202      	str	r2, [sp, #8]
 800ce24:	9301      	str	r3, [sp, #4]
 800ce26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce28:	9300      	str	r3, [sp, #0]
 800ce2a:	68bb      	ldr	r3, [r7, #8]
 800ce2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ce30:	68f8      	ldr	r0, [r7, #12]
 800ce32:	f001 f89d 	bl	800df70 <xTaskCreateStatic>
 800ce36:	4603      	mov	r3, r0
 800ce38:	613b      	str	r3, [r7, #16]
 800ce3a:	e013      	b.n	800ce64 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800ce3c:	6a3b      	ldr	r3, [r7, #32]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d110      	bne.n	800ce64 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ce42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce44:	b29a      	uxth	r2, r3
 800ce46:	f107 0310 	add.w	r3, r7, #16
 800ce4a:	9301      	str	r3, [sp, #4]
 800ce4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce4e:	9300      	str	r3, [sp, #0]
 800ce50:	68bb      	ldr	r3, [r7, #8]
 800ce52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ce54:	68f8      	ldr	r0, [r7, #12]
 800ce56:	f001 f8e5 	bl	800e024 <xTaskCreate>
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	2b01      	cmp	r3, #1
 800ce5e:	d001      	beq.n	800ce64 <osThreadNew+0x13c>
          hTask = NULL;
 800ce60:	2300      	movs	r3, #0
 800ce62:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ce64:	693b      	ldr	r3, [r7, #16]
}
 800ce66:	4618      	mov	r0, r3
 800ce68:	3730      	adds	r7, #48	; 0x30
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	bd80      	pop	{r7, pc}
 800ce6e:	bf00      	nop
 800ce70:	200006a4 	.word	0x200006a4

0800ce74 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b086      	sub	sp, #24
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ce7c:	f3ef 8305 	mrs	r3, IPSR
 800ce80:	613b      	str	r3, [r7, #16]
  return(result);
 800ce82:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d10f      	bne.n	800cea8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce88:	f3ef 8310 	mrs	r3, PRIMASK
 800ce8c:	60fb      	str	r3, [r7, #12]
  return(result);
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d105      	bne.n	800cea0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ce94:	f3ef 8311 	mrs	r3, BASEPRI
 800ce98:	60bb      	str	r3, [r7, #8]
  return(result);
 800ce9a:	68bb      	ldr	r3, [r7, #8]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d007      	beq.n	800ceb0 <osDelay+0x3c>
 800cea0:	4b0a      	ldr	r3, [pc, #40]	; (800cecc <osDelay+0x58>)
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	2b02      	cmp	r3, #2
 800cea6:	d103      	bne.n	800ceb0 <osDelay+0x3c>
    stat = osErrorISR;
 800cea8:	f06f 0305 	mvn.w	r3, #5
 800ceac:	617b      	str	r3, [r7, #20]
 800ceae:	e007      	b.n	800cec0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d002      	beq.n	800cec0 <osDelay+0x4c>
      vTaskDelay(ticks);
 800ceba:	6878      	ldr	r0, [r7, #4]
 800cebc:	f001 fa76 	bl	800e3ac <vTaskDelay>
    }
  }

  return (stat);
 800cec0:	697b      	ldr	r3, [r7, #20]
}
 800cec2:	4618      	mov	r0, r3
 800cec4:	3718      	adds	r7, #24
 800cec6:	46bd      	mov	sp, r7
 800cec8:	bd80      	pop	{r7, pc}
 800ceca:	bf00      	nop
 800cecc:	200006a4 	.word	0x200006a4

0800ced0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b08c      	sub	sp, #48	; 0x30
 800ced4:	af02      	add	r7, sp, #8
 800ced6:	60f8      	str	r0, [r7, #12]
 800ced8:	60b9      	str	r1, [r7, #8]
 800ceda:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800cedc:	2300      	movs	r3, #0
 800cede:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cee0:	f3ef 8305 	mrs	r3, IPSR
 800cee4:	61bb      	str	r3, [r7, #24]
  return(result);
 800cee6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d170      	bne.n	800cfce <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ceec:	f3ef 8310 	mrs	r3, PRIMASK
 800cef0:	617b      	str	r3, [r7, #20]
  return(result);
 800cef2:	697b      	ldr	r3, [r7, #20]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d105      	bne.n	800cf04 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cef8:	f3ef 8311 	mrs	r3, BASEPRI
 800cefc:	613b      	str	r3, [r7, #16]
  return(result);
 800cefe:	693b      	ldr	r3, [r7, #16]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d003      	beq.n	800cf0c <osMessageQueueNew+0x3c>
 800cf04:	4b34      	ldr	r3, [pc, #208]	; (800cfd8 <osMessageQueueNew+0x108>)
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	2b02      	cmp	r3, #2
 800cf0a:	d060      	beq.n	800cfce <osMessageQueueNew+0xfe>
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d05d      	beq.n	800cfce <osMessageQueueNew+0xfe>
 800cf12:	68bb      	ldr	r3, [r7, #8]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d05a      	beq.n	800cfce <osMessageQueueNew+0xfe>
    mem = -1;
 800cf18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cf1c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d029      	beq.n	800cf78 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	689b      	ldr	r3, [r3, #8]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d012      	beq.n	800cf52 <osMessageQueueNew+0x82>
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	68db      	ldr	r3, [r3, #12]
 800cf30:	2b4f      	cmp	r3, #79	; 0x4f
 800cf32:	d90e      	bls.n	800cf52 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d00a      	beq.n	800cf52 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	695a      	ldr	r2, [r3, #20]
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	68b9      	ldr	r1, [r7, #8]
 800cf44:	fb01 f303 	mul.w	r3, r1, r3
 800cf48:	429a      	cmp	r2, r3
 800cf4a:	d302      	bcc.n	800cf52 <osMessageQueueNew+0x82>
        mem = 1;
 800cf4c:	2301      	movs	r3, #1
 800cf4e:	623b      	str	r3, [r7, #32]
 800cf50:	e014      	b.n	800cf7c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	689b      	ldr	r3, [r3, #8]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d110      	bne.n	800cf7c <osMessageQueueNew+0xac>
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	68db      	ldr	r3, [r3, #12]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d10c      	bne.n	800cf7c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d108      	bne.n	800cf7c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	695b      	ldr	r3, [r3, #20]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d104      	bne.n	800cf7c <osMessageQueueNew+0xac>
          mem = 0;
 800cf72:	2300      	movs	r3, #0
 800cf74:	623b      	str	r3, [r7, #32]
 800cf76:	e001      	b.n	800cf7c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800cf78:	2300      	movs	r3, #0
 800cf7a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800cf7c:	6a3b      	ldr	r3, [r7, #32]
 800cf7e:	2b01      	cmp	r3, #1
 800cf80:	d10c      	bne.n	800cf9c <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	691a      	ldr	r2, [r3, #16]
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	6899      	ldr	r1, [r3, #8]
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	9300      	str	r3, [sp, #0]
 800cf8e:	460b      	mov	r3, r1
 800cf90:	68b9      	ldr	r1, [r7, #8]
 800cf92:	68f8      	ldr	r0, [r7, #12]
 800cf94:	f000 faa0 	bl	800d4d8 <xQueueGenericCreateStatic>
 800cf98:	6278      	str	r0, [r7, #36]	; 0x24
 800cf9a:	e008      	b.n	800cfae <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800cf9c:	6a3b      	ldr	r3, [r7, #32]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d105      	bne.n	800cfae <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	68b9      	ldr	r1, [r7, #8]
 800cfa6:	68f8      	ldr	r0, [r7, #12]
 800cfa8:	f000 fb09 	bl	800d5be <xQueueGenericCreate>
 800cfac:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800cfae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d00c      	beq.n	800cfce <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d003      	beq.n	800cfc2 <osMessageQueueNew+0xf2>
        name = attr->name;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	61fb      	str	r3, [r7, #28]
 800cfc0:	e001      	b.n	800cfc6 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800cfc6:	69f9      	ldr	r1, [r7, #28]
 800cfc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cfca:	f000 ff75 	bl	800deb8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800cfce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	3728      	adds	r7, #40	; 0x28
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	bd80      	pop	{r7, pc}
 800cfd8:	200006a4 	.word	0x200006a4

0800cfdc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b08a      	sub	sp, #40	; 0x28
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	60f8      	str	r0, [r7, #12]
 800cfe4:	60b9      	str	r1, [r7, #8]
 800cfe6:	603b      	str	r3, [r7, #0]
 800cfe8:	4613      	mov	r3, r2
 800cfea:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800cff0:	2300      	movs	r3, #0
 800cff2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cff4:	f3ef 8305 	mrs	r3, IPSR
 800cff8:	61fb      	str	r3, [r7, #28]
  return(result);
 800cffa:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d10f      	bne.n	800d020 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d000:	f3ef 8310 	mrs	r3, PRIMASK
 800d004:	61bb      	str	r3, [r7, #24]
  return(result);
 800d006:	69bb      	ldr	r3, [r7, #24]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d105      	bne.n	800d018 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d00c:	f3ef 8311 	mrs	r3, BASEPRI
 800d010:	617b      	str	r3, [r7, #20]
  return(result);
 800d012:	697b      	ldr	r3, [r7, #20]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d02c      	beq.n	800d072 <osMessageQueuePut+0x96>
 800d018:	4b28      	ldr	r3, [pc, #160]	; (800d0bc <osMessageQueuePut+0xe0>)
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	2b02      	cmp	r3, #2
 800d01e:	d128      	bne.n	800d072 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d020:	6a3b      	ldr	r3, [r7, #32]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d005      	beq.n	800d032 <osMessageQueuePut+0x56>
 800d026:	68bb      	ldr	r3, [r7, #8]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d002      	beq.n	800d032 <osMessageQueuePut+0x56>
 800d02c:	683b      	ldr	r3, [r7, #0]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d003      	beq.n	800d03a <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800d032:	f06f 0303 	mvn.w	r3, #3
 800d036:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d038:	e039      	b.n	800d0ae <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800d03a:	2300      	movs	r3, #0
 800d03c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800d03e:	f107 0210 	add.w	r2, r7, #16
 800d042:	2300      	movs	r3, #0
 800d044:	68b9      	ldr	r1, [r7, #8]
 800d046:	6a38      	ldr	r0, [r7, #32]
 800d048:	f000 fc16 	bl	800d878 <xQueueGenericSendFromISR>
 800d04c:	4603      	mov	r3, r0
 800d04e:	2b01      	cmp	r3, #1
 800d050:	d003      	beq.n	800d05a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800d052:	f06f 0302 	mvn.w	r3, #2
 800d056:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d058:	e029      	b.n	800d0ae <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800d05a:	693b      	ldr	r3, [r7, #16]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d026      	beq.n	800d0ae <osMessageQueuePut+0xd2>
 800d060:	4b17      	ldr	r3, [pc, #92]	; (800d0c0 <osMessageQueuePut+0xe4>)
 800d062:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d066:	601a      	str	r2, [r3, #0]
 800d068:	f3bf 8f4f 	dsb	sy
 800d06c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d070:	e01d      	b.n	800d0ae <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d072:	6a3b      	ldr	r3, [r7, #32]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d002      	beq.n	800d07e <osMessageQueuePut+0xa2>
 800d078:	68bb      	ldr	r3, [r7, #8]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d103      	bne.n	800d086 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800d07e:	f06f 0303 	mvn.w	r3, #3
 800d082:	627b      	str	r3, [r7, #36]	; 0x24
 800d084:	e014      	b.n	800d0b0 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d086:	2300      	movs	r3, #0
 800d088:	683a      	ldr	r2, [r7, #0]
 800d08a:	68b9      	ldr	r1, [r7, #8]
 800d08c:	6a38      	ldr	r0, [r7, #32]
 800d08e:	f000 faf9 	bl	800d684 <xQueueGenericSend>
 800d092:	4603      	mov	r3, r0
 800d094:	2b01      	cmp	r3, #1
 800d096:	d00b      	beq.n	800d0b0 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d003      	beq.n	800d0a6 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800d09e:	f06f 0301 	mvn.w	r3, #1
 800d0a2:	627b      	str	r3, [r7, #36]	; 0x24
 800d0a4:	e004      	b.n	800d0b0 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800d0a6:	f06f 0302 	mvn.w	r3, #2
 800d0aa:	627b      	str	r3, [r7, #36]	; 0x24
 800d0ac:	e000      	b.n	800d0b0 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d0ae:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800d0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	3728      	adds	r7, #40	; 0x28
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	bd80      	pop	{r7, pc}
 800d0ba:	bf00      	nop
 800d0bc:	200006a4 	.word	0x200006a4
 800d0c0:	e000ed04 	.word	0xe000ed04

0800d0c4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b08a      	sub	sp, #40	; 0x28
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	60f8      	str	r0, [r7, #12]
 800d0cc:	60b9      	str	r1, [r7, #8]
 800d0ce:	607a      	str	r2, [r7, #4]
 800d0d0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d0da:	f3ef 8305 	mrs	r3, IPSR
 800d0de:	61fb      	str	r3, [r7, #28]
  return(result);
 800d0e0:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d10f      	bne.n	800d106 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d0e6:	f3ef 8310 	mrs	r3, PRIMASK
 800d0ea:	61bb      	str	r3, [r7, #24]
  return(result);
 800d0ec:	69bb      	ldr	r3, [r7, #24]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d105      	bne.n	800d0fe <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d0f2:	f3ef 8311 	mrs	r3, BASEPRI
 800d0f6:	617b      	str	r3, [r7, #20]
  return(result);
 800d0f8:	697b      	ldr	r3, [r7, #20]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d02c      	beq.n	800d158 <osMessageQueueGet+0x94>
 800d0fe:	4b28      	ldr	r3, [pc, #160]	; (800d1a0 <osMessageQueueGet+0xdc>)
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	2b02      	cmp	r3, #2
 800d104:	d128      	bne.n	800d158 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d106:	6a3b      	ldr	r3, [r7, #32]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d005      	beq.n	800d118 <osMessageQueueGet+0x54>
 800d10c:	68bb      	ldr	r3, [r7, #8]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d002      	beq.n	800d118 <osMessageQueueGet+0x54>
 800d112:	683b      	ldr	r3, [r7, #0]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d003      	beq.n	800d120 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800d118:	f06f 0303 	mvn.w	r3, #3
 800d11c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d11e:	e038      	b.n	800d192 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800d120:	2300      	movs	r3, #0
 800d122:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800d124:	f107 0310 	add.w	r3, r7, #16
 800d128:	461a      	mov	r2, r3
 800d12a:	68b9      	ldr	r1, [r7, #8]
 800d12c:	6a38      	ldr	r0, [r7, #32]
 800d12e:	f000 fd13 	bl	800db58 <xQueueReceiveFromISR>
 800d132:	4603      	mov	r3, r0
 800d134:	2b01      	cmp	r3, #1
 800d136:	d003      	beq.n	800d140 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800d138:	f06f 0302 	mvn.w	r3, #2
 800d13c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d13e:	e028      	b.n	800d192 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800d140:	693b      	ldr	r3, [r7, #16]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d025      	beq.n	800d192 <osMessageQueueGet+0xce>
 800d146:	4b17      	ldr	r3, [pc, #92]	; (800d1a4 <osMessageQueueGet+0xe0>)
 800d148:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d14c:	601a      	str	r2, [r3, #0]
 800d14e:	f3bf 8f4f 	dsb	sy
 800d152:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d156:	e01c      	b.n	800d192 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d158:	6a3b      	ldr	r3, [r7, #32]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d002      	beq.n	800d164 <osMessageQueueGet+0xa0>
 800d15e:	68bb      	ldr	r3, [r7, #8]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d103      	bne.n	800d16c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800d164:	f06f 0303 	mvn.w	r3, #3
 800d168:	627b      	str	r3, [r7, #36]	; 0x24
 800d16a:	e013      	b.n	800d194 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d16c:	683a      	ldr	r2, [r7, #0]
 800d16e:	68b9      	ldr	r1, [r7, #8]
 800d170:	6a38      	ldr	r0, [r7, #32]
 800d172:	f000 fc15 	bl	800d9a0 <xQueueReceive>
 800d176:	4603      	mov	r3, r0
 800d178:	2b01      	cmp	r3, #1
 800d17a:	d00b      	beq.n	800d194 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800d17c:	683b      	ldr	r3, [r7, #0]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d003      	beq.n	800d18a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800d182:	f06f 0301 	mvn.w	r3, #1
 800d186:	627b      	str	r3, [r7, #36]	; 0x24
 800d188:	e004      	b.n	800d194 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800d18a:	f06f 0302 	mvn.w	r3, #2
 800d18e:	627b      	str	r3, [r7, #36]	; 0x24
 800d190:	e000      	b.n	800d194 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d192:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800d194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d196:	4618      	mov	r0, r3
 800d198:	3728      	adds	r7, #40	; 0x28
 800d19a:	46bd      	mov	sp, r7
 800d19c:	bd80      	pop	{r7, pc}
 800d19e:	bf00      	nop
 800d1a0:	200006a4 	.word	0x200006a4
 800d1a4:	e000ed04 	.word	0xe000ed04

0800d1a8 <osMessageQueueGetSpace>:
  }

  return ((uint32_t)count);
}

uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b08c      	sub	sp, #48	; 0x30
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t space;
  uint32_t isrm;

  if (mq == NULL) {
 800d1b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d102      	bne.n	800d1c0 <osMessageQueueGetSpace+0x18>
    space = 0U;
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d1be:	e033      	b.n	800d228 <osMessageQueueGetSpace+0x80>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d1c0:	f3ef 8305 	mrs	r3, IPSR
 800d1c4:	623b      	str	r3, [r7, #32]
  return(result);
 800d1c6:	6a3b      	ldr	r3, [r7, #32]
  }
  else if (IS_IRQ()) {
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d10f      	bne.n	800d1ec <osMessageQueueGetSpace+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d1cc:	f3ef 8310 	mrs	r3, PRIMASK
 800d1d0:	61fb      	str	r3, [r7, #28]
  return(result);
 800d1d2:	69fb      	ldr	r3, [r7, #28]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d105      	bne.n	800d1e4 <osMessageQueueGetSpace+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d1d8:	f3ef 8311 	mrs	r3, BASEPRI
 800d1dc:	61bb      	str	r3, [r7, #24]
  return(result);
 800d1de:	69bb      	ldr	r3, [r7, #24]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d01d      	beq.n	800d220 <osMessageQueueGetSpace+0x78>
 800d1e4:	4b13      	ldr	r3, [pc, #76]	; (800d234 <osMessageQueueGetSpace+0x8c>)
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	2b02      	cmp	r3, #2
 800d1ea:	d119      	bne.n	800d220 <osMessageQueueGetSpace+0x78>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d1ec:	f3ef 8211 	mrs	r2, BASEPRI
 800d1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1f4:	f383 8811 	msr	BASEPRI, r3
 800d1f8:	f3bf 8f6f 	isb	sy
 800d1fc:	f3bf 8f4f 	dsb	sy
 800d200:	613a      	str	r2, [r7, #16]
 800d202:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d204:	693b      	ldr	r3, [r7, #16]
    isrm = taskENTER_CRITICAL_FROM_ISR();
 800d206:	627b      	str	r3, [r7, #36]	; 0x24

    /* space = pxQueue->uxLength - pxQueue->uxMessagesWaiting; */
    space = mq->uxDummy4[1] - mq->uxDummy4[0];
 800d208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d20a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d20e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d210:	1ad3      	subs	r3, r2, r3
 800d212:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d216:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d218:	697b      	ldr	r3, [r7, #20]
 800d21a:	f383 8811 	msr	BASEPRI, r3

    taskEXIT_CRITICAL_FROM_ISR(isrm);
 800d21e:	e003      	b.n	800d228 <osMessageQueueGetSpace+0x80>
  }
  else {
    space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
 800d220:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d222:	f000 fd16 	bl	800dc52 <uxQueueSpacesAvailable>
 800d226:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return (space);
 800d228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800d22a:	4618      	mov	r0, r3
 800d22c:	3730      	adds	r7, #48	; 0x30
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}
 800d232:	bf00      	nop
 800d234:	200006a4 	.word	0x200006a4

0800d238 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d238:	b480      	push	{r7}
 800d23a:	b085      	sub	sp, #20
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	60f8      	str	r0, [r7, #12]
 800d240:	60b9      	str	r1, [r7, #8]
 800d242:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	4a07      	ldr	r2, [pc, #28]	; (800d264 <vApplicationGetIdleTaskMemory+0x2c>)
 800d248:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d24a:	68bb      	ldr	r3, [r7, #8]
 800d24c:	4a06      	ldr	r2, [pc, #24]	; (800d268 <vApplicationGetIdleTaskMemory+0x30>)
 800d24e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	2280      	movs	r2, #128	; 0x80
 800d254:	601a      	str	r2, [r3, #0]
}
 800d256:	bf00      	nop
 800d258:	3714      	adds	r7, #20
 800d25a:	46bd      	mov	sp, r7
 800d25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d260:	4770      	bx	lr
 800d262:	bf00      	nop
 800d264:	200006a8 	.word	0x200006a8
 800d268:	2000070c 	.word	0x2000070c

0800d26c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d26c:	b480      	push	{r7}
 800d26e:	b085      	sub	sp, #20
 800d270:	af00      	add	r7, sp, #0
 800d272:	60f8      	str	r0, [r7, #12]
 800d274:	60b9      	str	r1, [r7, #8]
 800d276:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	4a07      	ldr	r2, [pc, #28]	; (800d298 <vApplicationGetTimerTaskMemory+0x2c>)
 800d27c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d27e:	68bb      	ldr	r3, [r7, #8]
 800d280:	4a06      	ldr	r2, [pc, #24]	; (800d29c <vApplicationGetTimerTaskMemory+0x30>)
 800d282:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d28a:	601a      	str	r2, [r3, #0]
}
 800d28c:	bf00      	nop
 800d28e:	3714      	adds	r7, #20
 800d290:	46bd      	mov	sp, r7
 800d292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d296:	4770      	bx	lr
 800d298:	2000090c 	.word	0x2000090c
 800d29c:	20000970 	.word	0x20000970

0800d2a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d2a0:	b480      	push	{r7}
 800d2a2:	b083      	sub	sp, #12
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	f103 0208 	add.w	r2, r3, #8
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d2b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	f103 0208 	add.w	r2, r3, #8
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	f103 0208 	add.w	r2, r3, #8
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d2d4:	bf00      	nop
 800d2d6:	370c      	adds	r7, #12
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2de:	4770      	bx	lr

0800d2e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d2e0:	b480      	push	{r7}
 800d2e2:	b083      	sub	sp, #12
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d2ee:	bf00      	nop
 800d2f0:	370c      	adds	r7, #12
 800d2f2:	46bd      	mov	sp, r7
 800d2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f8:	4770      	bx	lr

0800d2fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d2fa:	b480      	push	{r7}
 800d2fc:	b085      	sub	sp, #20
 800d2fe:	af00      	add	r7, sp, #0
 800d300:	6078      	str	r0, [r7, #4]
 800d302:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	685b      	ldr	r3, [r3, #4]
 800d308:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d30a:	683b      	ldr	r3, [r7, #0]
 800d30c:	68fa      	ldr	r2, [r7, #12]
 800d30e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	689a      	ldr	r2, [r3, #8]
 800d314:	683b      	ldr	r3, [r7, #0]
 800d316:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	689b      	ldr	r3, [r3, #8]
 800d31c:	683a      	ldr	r2, [r7, #0]
 800d31e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	683a      	ldr	r2, [r7, #0]
 800d324:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d326:	683b      	ldr	r3, [r7, #0]
 800d328:	687a      	ldr	r2, [r7, #4]
 800d32a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	1c5a      	adds	r2, r3, #1
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	601a      	str	r2, [r3, #0]
}
 800d336:	bf00      	nop
 800d338:	3714      	adds	r7, #20
 800d33a:	46bd      	mov	sp, r7
 800d33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d340:	4770      	bx	lr

0800d342 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d342:	b480      	push	{r7}
 800d344:	b085      	sub	sp, #20
 800d346:	af00      	add	r7, sp, #0
 800d348:	6078      	str	r0, [r7, #4]
 800d34a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d34c:	683b      	ldr	r3, [r7, #0]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d352:	68bb      	ldr	r3, [r7, #8]
 800d354:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d358:	d103      	bne.n	800d362 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	691b      	ldr	r3, [r3, #16]
 800d35e:	60fb      	str	r3, [r7, #12]
 800d360:	e00c      	b.n	800d37c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	3308      	adds	r3, #8
 800d366:	60fb      	str	r3, [r7, #12]
 800d368:	e002      	b.n	800d370 <vListInsert+0x2e>
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	685b      	ldr	r3, [r3, #4]
 800d36e:	60fb      	str	r3, [r7, #12]
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	685b      	ldr	r3, [r3, #4]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	68ba      	ldr	r2, [r7, #8]
 800d378:	429a      	cmp	r2, r3
 800d37a:	d2f6      	bcs.n	800d36a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	685a      	ldr	r2, [r3, #4]
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	685b      	ldr	r3, [r3, #4]
 800d388:	683a      	ldr	r2, [r7, #0]
 800d38a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d38c:	683b      	ldr	r3, [r7, #0]
 800d38e:	68fa      	ldr	r2, [r7, #12]
 800d390:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	683a      	ldr	r2, [r7, #0]
 800d396:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d398:	683b      	ldr	r3, [r7, #0]
 800d39a:	687a      	ldr	r2, [r7, #4]
 800d39c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	1c5a      	adds	r2, r3, #1
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	601a      	str	r2, [r3, #0]
}
 800d3a8:	bf00      	nop
 800d3aa:	3714      	adds	r7, #20
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b2:	4770      	bx	lr

0800d3b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d3b4:	b480      	push	{r7}
 800d3b6:	b085      	sub	sp, #20
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	691b      	ldr	r3, [r3, #16]
 800d3c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	685b      	ldr	r3, [r3, #4]
 800d3c6:	687a      	ldr	r2, [r7, #4]
 800d3c8:	6892      	ldr	r2, [r2, #8]
 800d3ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	689b      	ldr	r3, [r3, #8]
 800d3d0:	687a      	ldr	r2, [r7, #4]
 800d3d2:	6852      	ldr	r2, [r2, #4]
 800d3d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	685b      	ldr	r3, [r3, #4]
 800d3da:	687a      	ldr	r2, [r7, #4]
 800d3dc:	429a      	cmp	r2, r3
 800d3de:	d103      	bne.n	800d3e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	689a      	ldr	r2, [r3, #8]
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	1e5a      	subs	r2, r3, #1
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	681b      	ldr	r3, [r3, #0]
}
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	3714      	adds	r7, #20
 800d400:	46bd      	mov	sp, r7
 800d402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d406:	4770      	bx	lr

0800d408 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b084      	sub	sp, #16
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	6078      	str	r0, [r7, #4]
 800d410:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d109      	bne.n	800d430 <xQueueGenericReset+0x28>
	__asm volatile
 800d41c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d420:	f383 8811 	msr	BASEPRI, r3
 800d424:	f3bf 8f6f 	isb	sy
 800d428:	f3bf 8f4f 	dsb	sy
 800d42c:	60bb      	str	r3, [r7, #8]
 800d42e:	e7fe      	b.n	800d42e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800d430:	f002 fac4 	bl	800f9bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	681a      	ldr	r2, [r3, #0]
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d43c:	68f9      	ldr	r1, [r7, #12]
 800d43e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d440:	fb01 f303 	mul.w	r3, r1, r3
 800d444:	441a      	add	r2, r3
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	2200      	movs	r2, #0
 800d44e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	681a      	ldr	r2, [r3, #0]
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	681a      	ldr	r2, [r3, #0]
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d460:	3b01      	subs	r3, #1
 800d462:	68f9      	ldr	r1, [r7, #12]
 800d464:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d466:	fb01 f303 	mul.w	r3, r1, r3
 800d46a:	441a      	add	r2, r3
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	22ff      	movs	r2, #255	; 0xff
 800d474:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	22ff      	movs	r2, #255	; 0xff
 800d47c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d480:	683b      	ldr	r3, [r7, #0]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d114      	bne.n	800d4b0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	691b      	ldr	r3, [r3, #16]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d01a      	beq.n	800d4c4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	3310      	adds	r3, #16
 800d492:	4618      	mov	r0, r3
 800d494:	f001 fa5c 	bl	800e950 <xTaskRemoveFromEventList>
 800d498:	4603      	mov	r3, r0
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d012      	beq.n	800d4c4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d49e:	4b0d      	ldr	r3, [pc, #52]	; (800d4d4 <xQueueGenericReset+0xcc>)
 800d4a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d4a4:	601a      	str	r2, [r3, #0]
 800d4a6:	f3bf 8f4f 	dsb	sy
 800d4aa:	f3bf 8f6f 	isb	sy
 800d4ae:	e009      	b.n	800d4c4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	3310      	adds	r3, #16
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	f7ff fef3 	bl	800d2a0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	3324      	adds	r3, #36	; 0x24
 800d4be:	4618      	mov	r0, r3
 800d4c0:	f7ff feee 	bl	800d2a0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d4c4:	f002 faa8 	bl	800fa18 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d4c8:	2301      	movs	r3, #1
}
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	3710      	adds	r7, #16
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	bd80      	pop	{r7, pc}
 800d4d2:	bf00      	nop
 800d4d4:	e000ed04 	.word	0xe000ed04

0800d4d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b08e      	sub	sp, #56	; 0x38
 800d4dc:	af02      	add	r7, sp, #8
 800d4de:	60f8      	str	r0, [r7, #12]
 800d4e0:	60b9      	str	r1, [r7, #8]
 800d4e2:	607a      	str	r2, [r7, #4]
 800d4e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d109      	bne.n	800d500 <xQueueGenericCreateStatic+0x28>
 800d4ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4f0:	f383 8811 	msr	BASEPRI, r3
 800d4f4:	f3bf 8f6f 	isb	sy
 800d4f8:	f3bf 8f4f 	dsb	sy
 800d4fc:	62bb      	str	r3, [r7, #40]	; 0x28
 800d4fe:	e7fe      	b.n	800d4fe <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d500:	683b      	ldr	r3, [r7, #0]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d109      	bne.n	800d51a <xQueueGenericCreateStatic+0x42>
 800d506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d50a:	f383 8811 	msr	BASEPRI, r3
 800d50e:	f3bf 8f6f 	isb	sy
 800d512:	f3bf 8f4f 	dsb	sy
 800d516:	627b      	str	r3, [r7, #36]	; 0x24
 800d518:	e7fe      	b.n	800d518 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d002      	beq.n	800d526 <xQueueGenericCreateStatic+0x4e>
 800d520:	68bb      	ldr	r3, [r7, #8]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d001      	beq.n	800d52a <xQueueGenericCreateStatic+0x52>
 800d526:	2301      	movs	r3, #1
 800d528:	e000      	b.n	800d52c <xQueueGenericCreateStatic+0x54>
 800d52a:	2300      	movs	r3, #0
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d109      	bne.n	800d544 <xQueueGenericCreateStatic+0x6c>
 800d530:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d534:	f383 8811 	msr	BASEPRI, r3
 800d538:	f3bf 8f6f 	isb	sy
 800d53c:	f3bf 8f4f 	dsb	sy
 800d540:	623b      	str	r3, [r7, #32]
 800d542:	e7fe      	b.n	800d542 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	2b00      	cmp	r3, #0
 800d548:	d102      	bne.n	800d550 <xQueueGenericCreateStatic+0x78>
 800d54a:	68bb      	ldr	r3, [r7, #8]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d101      	bne.n	800d554 <xQueueGenericCreateStatic+0x7c>
 800d550:	2301      	movs	r3, #1
 800d552:	e000      	b.n	800d556 <xQueueGenericCreateStatic+0x7e>
 800d554:	2300      	movs	r3, #0
 800d556:	2b00      	cmp	r3, #0
 800d558:	d109      	bne.n	800d56e <xQueueGenericCreateStatic+0x96>
 800d55a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d55e:	f383 8811 	msr	BASEPRI, r3
 800d562:	f3bf 8f6f 	isb	sy
 800d566:	f3bf 8f4f 	dsb	sy
 800d56a:	61fb      	str	r3, [r7, #28]
 800d56c:	e7fe      	b.n	800d56c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d56e:	2350      	movs	r3, #80	; 0x50
 800d570:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d572:	697b      	ldr	r3, [r7, #20]
 800d574:	2b50      	cmp	r3, #80	; 0x50
 800d576:	d009      	beq.n	800d58c <xQueueGenericCreateStatic+0xb4>
 800d578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d57c:	f383 8811 	msr	BASEPRI, r3
 800d580:	f3bf 8f6f 	isb	sy
 800d584:	f3bf 8f4f 	dsb	sy
 800d588:	61bb      	str	r3, [r7, #24]
 800d58a:	e7fe      	b.n	800d58a <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d58c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d58e:	683b      	ldr	r3, [r7, #0]
 800d590:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d594:	2b00      	cmp	r3, #0
 800d596:	d00d      	beq.n	800d5b4 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d59a:	2201      	movs	r2, #1
 800d59c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d5a0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d5a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5a6:	9300      	str	r3, [sp, #0]
 800d5a8:	4613      	mov	r3, r2
 800d5aa:	687a      	ldr	r2, [r7, #4]
 800d5ac:	68b9      	ldr	r1, [r7, #8]
 800d5ae:	68f8      	ldr	r0, [r7, #12]
 800d5b0:	f000 f844 	bl	800d63c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d5b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	3730      	adds	r7, #48	; 0x30
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	bd80      	pop	{r7, pc}

0800d5be <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d5be:	b580      	push	{r7, lr}
 800d5c0:	b08a      	sub	sp, #40	; 0x28
 800d5c2:	af02      	add	r7, sp, #8
 800d5c4:	60f8      	str	r0, [r7, #12]
 800d5c6:	60b9      	str	r1, [r7, #8]
 800d5c8:	4613      	mov	r3, r2
 800d5ca:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d109      	bne.n	800d5e6 <xQueueGenericCreate+0x28>
 800d5d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5d6:	f383 8811 	msr	BASEPRI, r3
 800d5da:	f3bf 8f6f 	isb	sy
 800d5de:	f3bf 8f4f 	dsb	sy
 800d5e2:	613b      	str	r3, [r7, #16]
 800d5e4:	e7fe      	b.n	800d5e4 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800d5e6:	68bb      	ldr	r3, [r7, #8]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d102      	bne.n	800d5f2 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	61fb      	str	r3, [r7, #28]
 800d5f0:	e004      	b.n	800d5fc <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	68ba      	ldr	r2, [r7, #8]
 800d5f6:	fb02 f303 	mul.w	r3, r2, r3
 800d5fa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d5fc:	69fb      	ldr	r3, [r7, #28]
 800d5fe:	3350      	adds	r3, #80	; 0x50
 800d600:	4618      	mov	r0, r3
 800d602:	f002 faf5 	bl	800fbf0 <pvPortMalloc>
 800d606:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d608:	69bb      	ldr	r3, [r7, #24]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d011      	beq.n	800d632 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d60e:	69bb      	ldr	r3, [r7, #24]
 800d610:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d612:	697b      	ldr	r3, [r7, #20]
 800d614:	3350      	adds	r3, #80	; 0x50
 800d616:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d618:	69bb      	ldr	r3, [r7, #24]
 800d61a:	2200      	movs	r2, #0
 800d61c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d620:	79fa      	ldrb	r2, [r7, #7]
 800d622:	69bb      	ldr	r3, [r7, #24]
 800d624:	9300      	str	r3, [sp, #0]
 800d626:	4613      	mov	r3, r2
 800d628:	697a      	ldr	r2, [r7, #20]
 800d62a:	68b9      	ldr	r1, [r7, #8]
 800d62c:	68f8      	ldr	r0, [r7, #12]
 800d62e:	f000 f805 	bl	800d63c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d632:	69bb      	ldr	r3, [r7, #24]
	}
 800d634:	4618      	mov	r0, r3
 800d636:	3720      	adds	r7, #32
 800d638:	46bd      	mov	sp, r7
 800d63a:	bd80      	pop	{r7, pc}

0800d63c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b084      	sub	sp, #16
 800d640:	af00      	add	r7, sp, #0
 800d642:	60f8      	str	r0, [r7, #12]
 800d644:	60b9      	str	r1, [r7, #8]
 800d646:	607a      	str	r2, [r7, #4]
 800d648:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d64a:	68bb      	ldr	r3, [r7, #8]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d103      	bne.n	800d658 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d650:	69bb      	ldr	r3, [r7, #24]
 800d652:	69ba      	ldr	r2, [r7, #24]
 800d654:	601a      	str	r2, [r3, #0]
 800d656:	e002      	b.n	800d65e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d658:	69bb      	ldr	r3, [r7, #24]
 800d65a:	687a      	ldr	r2, [r7, #4]
 800d65c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d65e:	69bb      	ldr	r3, [r7, #24]
 800d660:	68fa      	ldr	r2, [r7, #12]
 800d662:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d664:	69bb      	ldr	r3, [r7, #24]
 800d666:	68ba      	ldr	r2, [r7, #8]
 800d668:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d66a:	2101      	movs	r1, #1
 800d66c:	69b8      	ldr	r0, [r7, #24]
 800d66e:	f7ff fecb 	bl	800d408 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d672:	69bb      	ldr	r3, [r7, #24]
 800d674:	78fa      	ldrb	r2, [r7, #3]
 800d676:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d67a:	bf00      	nop
 800d67c:	3710      	adds	r7, #16
 800d67e:	46bd      	mov	sp, r7
 800d680:	bd80      	pop	{r7, pc}
	...

0800d684 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d684:	b580      	push	{r7, lr}
 800d686:	b08e      	sub	sp, #56	; 0x38
 800d688:	af00      	add	r7, sp, #0
 800d68a:	60f8      	str	r0, [r7, #12]
 800d68c:	60b9      	str	r1, [r7, #8]
 800d68e:	607a      	str	r2, [r7, #4]
 800d690:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d692:	2300      	movs	r3, #0
 800d694:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d69a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d109      	bne.n	800d6b4 <xQueueGenericSend+0x30>
 800d6a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6a4:	f383 8811 	msr	BASEPRI, r3
 800d6a8:	f3bf 8f6f 	isb	sy
 800d6ac:	f3bf 8f4f 	dsb	sy
 800d6b0:	62bb      	str	r3, [r7, #40]	; 0x28
 800d6b2:	e7fe      	b.n	800d6b2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d6b4:	68bb      	ldr	r3, [r7, #8]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d103      	bne.n	800d6c2 <xQueueGenericSend+0x3e>
 800d6ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d101      	bne.n	800d6c6 <xQueueGenericSend+0x42>
 800d6c2:	2301      	movs	r3, #1
 800d6c4:	e000      	b.n	800d6c8 <xQueueGenericSend+0x44>
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d109      	bne.n	800d6e0 <xQueueGenericSend+0x5c>
 800d6cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6d0:	f383 8811 	msr	BASEPRI, r3
 800d6d4:	f3bf 8f6f 	isb	sy
 800d6d8:	f3bf 8f4f 	dsb	sy
 800d6dc:	627b      	str	r3, [r7, #36]	; 0x24
 800d6de:	e7fe      	b.n	800d6de <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d6e0:	683b      	ldr	r3, [r7, #0]
 800d6e2:	2b02      	cmp	r3, #2
 800d6e4:	d103      	bne.n	800d6ee <xQueueGenericSend+0x6a>
 800d6e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6ea:	2b01      	cmp	r3, #1
 800d6ec:	d101      	bne.n	800d6f2 <xQueueGenericSend+0x6e>
 800d6ee:	2301      	movs	r3, #1
 800d6f0:	e000      	b.n	800d6f4 <xQueueGenericSend+0x70>
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d109      	bne.n	800d70c <xQueueGenericSend+0x88>
 800d6f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6fc:	f383 8811 	msr	BASEPRI, r3
 800d700:	f3bf 8f6f 	isb	sy
 800d704:	f3bf 8f4f 	dsb	sy
 800d708:	623b      	str	r3, [r7, #32]
 800d70a:	e7fe      	b.n	800d70a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d70c:	f001 fad6 	bl	800ecbc <xTaskGetSchedulerState>
 800d710:	4603      	mov	r3, r0
 800d712:	2b00      	cmp	r3, #0
 800d714:	d102      	bne.n	800d71c <xQueueGenericSend+0x98>
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d101      	bne.n	800d720 <xQueueGenericSend+0x9c>
 800d71c:	2301      	movs	r3, #1
 800d71e:	e000      	b.n	800d722 <xQueueGenericSend+0x9e>
 800d720:	2300      	movs	r3, #0
 800d722:	2b00      	cmp	r3, #0
 800d724:	d109      	bne.n	800d73a <xQueueGenericSend+0xb6>
 800d726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d72a:	f383 8811 	msr	BASEPRI, r3
 800d72e:	f3bf 8f6f 	isb	sy
 800d732:	f3bf 8f4f 	dsb	sy
 800d736:	61fb      	str	r3, [r7, #28]
 800d738:	e7fe      	b.n	800d738 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d73a:	f002 f93f 	bl	800f9bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d73e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d740:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d746:	429a      	cmp	r2, r3
 800d748:	d302      	bcc.n	800d750 <xQueueGenericSend+0xcc>
 800d74a:	683b      	ldr	r3, [r7, #0]
 800d74c:	2b02      	cmp	r3, #2
 800d74e:	d129      	bne.n	800d7a4 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d750:	683a      	ldr	r2, [r7, #0]
 800d752:	68b9      	ldr	r1, [r7, #8]
 800d754:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d756:	f000 fa9e 	bl	800dc96 <prvCopyDataToQueue>
 800d75a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d75c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d75e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d760:	2b00      	cmp	r3, #0
 800d762:	d010      	beq.n	800d786 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d766:	3324      	adds	r3, #36	; 0x24
 800d768:	4618      	mov	r0, r3
 800d76a:	f001 f8f1 	bl	800e950 <xTaskRemoveFromEventList>
 800d76e:	4603      	mov	r3, r0
 800d770:	2b00      	cmp	r3, #0
 800d772:	d013      	beq.n	800d79c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d774:	4b3f      	ldr	r3, [pc, #252]	; (800d874 <xQueueGenericSend+0x1f0>)
 800d776:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d77a:	601a      	str	r2, [r3, #0]
 800d77c:	f3bf 8f4f 	dsb	sy
 800d780:	f3bf 8f6f 	isb	sy
 800d784:	e00a      	b.n	800d79c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d007      	beq.n	800d79c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d78c:	4b39      	ldr	r3, [pc, #228]	; (800d874 <xQueueGenericSend+0x1f0>)
 800d78e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d792:	601a      	str	r2, [r3, #0]
 800d794:	f3bf 8f4f 	dsb	sy
 800d798:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d79c:	f002 f93c 	bl	800fa18 <vPortExitCritical>
				return pdPASS;
 800d7a0:	2301      	movs	r3, #1
 800d7a2:	e063      	b.n	800d86c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d103      	bne.n	800d7b2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d7aa:	f002 f935 	bl	800fa18 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	e05c      	b.n	800d86c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d7b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d106      	bne.n	800d7c6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d7b8:	f107 0314 	add.w	r3, r7, #20
 800d7bc:	4618      	mov	r0, r3
 800d7be:	f001 f929 	bl	800ea14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d7c2:	2301      	movs	r3, #1
 800d7c4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d7c6:	f002 f927 	bl	800fa18 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d7ca:	f000 fe89 	bl	800e4e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d7ce:	f002 f8f5 	bl	800f9bc <vPortEnterCritical>
 800d7d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d7d8:	b25b      	sxtb	r3, r3
 800d7da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d7de:	d103      	bne.n	800d7e8 <xQueueGenericSend+0x164>
 800d7e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d7e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d7ee:	b25b      	sxtb	r3, r3
 800d7f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d7f4:	d103      	bne.n	800d7fe <xQueueGenericSend+0x17a>
 800d7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7f8:	2200      	movs	r2, #0
 800d7fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d7fe:	f002 f90b 	bl	800fa18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d802:	1d3a      	adds	r2, r7, #4
 800d804:	f107 0314 	add.w	r3, r7, #20
 800d808:	4611      	mov	r1, r2
 800d80a:	4618      	mov	r0, r3
 800d80c:	f001 f918 	bl	800ea40 <xTaskCheckForTimeOut>
 800d810:	4603      	mov	r3, r0
 800d812:	2b00      	cmp	r3, #0
 800d814:	d124      	bne.n	800d860 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d816:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d818:	f000 fb35 	bl	800de86 <prvIsQueueFull>
 800d81c:	4603      	mov	r3, r0
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d018      	beq.n	800d854 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d824:	3310      	adds	r3, #16
 800d826:	687a      	ldr	r2, [r7, #4]
 800d828:	4611      	mov	r1, r2
 800d82a:	4618      	mov	r0, r3
 800d82c:	f001 f842 	bl	800e8b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d830:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d832:	f000 fac0 	bl	800ddb6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d836:	f000 fe61 	bl	800e4fc <xTaskResumeAll>
 800d83a:	4603      	mov	r3, r0
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	f47f af7c 	bne.w	800d73a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800d842:	4b0c      	ldr	r3, [pc, #48]	; (800d874 <xQueueGenericSend+0x1f0>)
 800d844:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d848:	601a      	str	r2, [r3, #0]
 800d84a:	f3bf 8f4f 	dsb	sy
 800d84e:	f3bf 8f6f 	isb	sy
 800d852:	e772      	b.n	800d73a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d854:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d856:	f000 faae 	bl	800ddb6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d85a:	f000 fe4f 	bl	800e4fc <xTaskResumeAll>
 800d85e:	e76c      	b.n	800d73a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d860:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d862:	f000 faa8 	bl	800ddb6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d866:	f000 fe49 	bl	800e4fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d86a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d86c:	4618      	mov	r0, r3
 800d86e:	3738      	adds	r7, #56	; 0x38
 800d870:	46bd      	mov	sp, r7
 800d872:	bd80      	pop	{r7, pc}
 800d874:	e000ed04 	.word	0xe000ed04

0800d878 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d878:	b580      	push	{r7, lr}
 800d87a:	b08e      	sub	sp, #56	; 0x38
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	60f8      	str	r0, [r7, #12]
 800d880:	60b9      	str	r1, [r7, #8]
 800d882:	607a      	str	r2, [r7, #4]
 800d884:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d88a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d109      	bne.n	800d8a4 <xQueueGenericSendFromISR+0x2c>
 800d890:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d894:	f383 8811 	msr	BASEPRI, r3
 800d898:	f3bf 8f6f 	isb	sy
 800d89c:	f3bf 8f4f 	dsb	sy
 800d8a0:	627b      	str	r3, [r7, #36]	; 0x24
 800d8a2:	e7fe      	b.n	800d8a2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d8a4:	68bb      	ldr	r3, [r7, #8]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d103      	bne.n	800d8b2 <xQueueGenericSendFromISR+0x3a>
 800d8aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d101      	bne.n	800d8b6 <xQueueGenericSendFromISR+0x3e>
 800d8b2:	2301      	movs	r3, #1
 800d8b4:	e000      	b.n	800d8b8 <xQueueGenericSendFromISR+0x40>
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d109      	bne.n	800d8d0 <xQueueGenericSendFromISR+0x58>
 800d8bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8c0:	f383 8811 	msr	BASEPRI, r3
 800d8c4:	f3bf 8f6f 	isb	sy
 800d8c8:	f3bf 8f4f 	dsb	sy
 800d8cc:	623b      	str	r3, [r7, #32]
 800d8ce:	e7fe      	b.n	800d8ce <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d8d0:	683b      	ldr	r3, [r7, #0]
 800d8d2:	2b02      	cmp	r3, #2
 800d8d4:	d103      	bne.n	800d8de <xQueueGenericSendFromISR+0x66>
 800d8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8da:	2b01      	cmp	r3, #1
 800d8dc:	d101      	bne.n	800d8e2 <xQueueGenericSendFromISR+0x6a>
 800d8de:	2301      	movs	r3, #1
 800d8e0:	e000      	b.n	800d8e4 <xQueueGenericSendFromISR+0x6c>
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d109      	bne.n	800d8fc <xQueueGenericSendFromISR+0x84>
 800d8e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8ec:	f383 8811 	msr	BASEPRI, r3
 800d8f0:	f3bf 8f6f 	isb	sy
 800d8f4:	f3bf 8f4f 	dsb	sy
 800d8f8:	61fb      	str	r3, [r7, #28]
 800d8fa:	e7fe      	b.n	800d8fa <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d8fc:	f002 f93a 	bl	800fb74 <vPortValidateInterruptPriority>
	__asm volatile
 800d900:	f3ef 8211 	mrs	r2, BASEPRI
 800d904:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d908:	f383 8811 	msr	BASEPRI, r3
 800d90c:	f3bf 8f6f 	isb	sy
 800d910:	f3bf 8f4f 	dsb	sy
 800d914:	61ba      	str	r2, [r7, #24]
 800d916:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d918:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d91a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d91c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d91e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d924:	429a      	cmp	r2, r3
 800d926:	d302      	bcc.n	800d92e <xQueueGenericSendFromISR+0xb6>
 800d928:	683b      	ldr	r3, [r7, #0]
 800d92a:	2b02      	cmp	r3, #2
 800d92c:	d12c      	bne.n	800d988 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d92e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d930:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d934:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d938:	683a      	ldr	r2, [r7, #0]
 800d93a:	68b9      	ldr	r1, [r7, #8]
 800d93c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d93e:	f000 f9aa 	bl	800dc96 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d942:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800d946:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d94a:	d112      	bne.n	800d972 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d94c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d94e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d950:	2b00      	cmp	r3, #0
 800d952:	d016      	beq.n	800d982 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d956:	3324      	adds	r3, #36	; 0x24
 800d958:	4618      	mov	r0, r3
 800d95a:	f000 fff9 	bl	800e950 <xTaskRemoveFromEventList>
 800d95e:	4603      	mov	r3, r0
 800d960:	2b00      	cmp	r3, #0
 800d962:	d00e      	beq.n	800d982 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d00b      	beq.n	800d982 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	2201      	movs	r2, #1
 800d96e:	601a      	str	r2, [r3, #0]
 800d970:	e007      	b.n	800d982 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d972:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d976:	3301      	adds	r3, #1
 800d978:	b2db      	uxtb	r3, r3
 800d97a:	b25a      	sxtb	r2, r3
 800d97c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d97e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d982:	2301      	movs	r3, #1
 800d984:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800d986:	e001      	b.n	800d98c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d988:	2300      	movs	r3, #0
 800d98a:	637b      	str	r3, [r7, #52]	; 0x34
 800d98c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d98e:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d990:	693b      	ldr	r3, [r7, #16]
 800d992:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d998:	4618      	mov	r0, r3
 800d99a:	3738      	adds	r7, #56	; 0x38
 800d99c:	46bd      	mov	sp, r7
 800d99e:	bd80      	pop	{r7, pc}

0800d9a0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b08c      	sub	sp, #48	; 0x30
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	60f8      	str	r0, [r7, #12]
 800d9a8:	60b9      	str	r1, [r7, #8]
 800d9aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d9ac:	2300      	movs	r3, #0
 800d9ae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d9b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d109      	bne.n	800d9ce <xQueueReceive+0x2e>
	__asm volatile
 800d9ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9be:	f383 8811 	msr	BASEPRI, r3
 800d9c2:	f3bf 8f6f 	isb	sy
 800d9c6:	f3bf 8f4f 	dsb	sy
 800d9ca:	623b      	str	r3, [r7, #32]
 800d9cc:	e7fe      	b.n	800d9cc <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d9ce:	68bb      	ldr	r3, [r7, #8]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d103      	bne.n	800d9dc <xQueueReceive+0x3c>
 800d9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d101      	bne.n	800d9e0 <xQueueReceive+0x40>
 800d9dc:	2301      	movs	r3, #1
 800d9de:	e000      	b.n	800d9e2 <xQueueReceive+0x42>
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d109      	bne.n	800d9fa <xQueueReceive+0x5a>
 800d9e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9ea:	f383 8811 	msr	BASEPRI, r3
 800d9ee:	f3bf 8f6f 	isb	sy
 800d9f2:	f3bf 8f4f 	dsb	sy
 800d9f6:	61fb      	str	r3, [r7, #28]
 800d9f8:	e7fe      	b.n	800d9f8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d9fa:	f001 f95f 	bl	800ecbc <xTaskGetSchedulerState>
 800d9fe:	4603      	mov	r3, r0
 800da00:	2b00      	cmp	r3, #0
 800da02:	d102      	bne.n	800da0a <xQueueReceive+0x6a>
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d101      	bne.n	800da0e <xQueueReceive+0x6e>
 800da0a:	2301      	movs	r3, #1
 800da0c:	e000      	b.n	800da10 <xQueueReceive+0x70>
 800da0e:	2300      	movs	r3, #0
 800da10:	2b00      	cmp	r3, #0
 800da12:	d109      	bne.n	800da28 <xQueueReceive+0x88>
 800da14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da18:	f383 8811 	msr	BASEPRI, r3
 800da1c:	f3bf 8f6f 	isb	sy
 800da20:	f3bf 8f4f 	dsb	sy
 800da24:	61bb      	str	r3, [r7, #24]
 800da26:	e7fe      	b.n	800da26 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800da28:	f001 ffc8 	bl	800f9bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800da2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da30:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800da32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da34:	2b00      	cmp	r3, #0
 800da36:	d01f      	beq.n	800da78 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800da38:	68b9      	ldr	r1, [r7, #8]
 800da3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da3c:	f000 f995 	bl	800dd6a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800da40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da42:	1e5a      	subs	r2, r3, #1
 800da44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da46:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800da48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da4a:	691b      	ldr	r3, [r3, #16]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d00f      	beq.n	800da70 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800da50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da52:	3310      	adds	r3, #16
 800da54:	4618      	mov	r0, r3
 800da56:	f000 ff7b 	bl	800e950 <xTaskRemoveFromEventList>
 800da5a:	4603      	mov	r3, r0
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d007      	beq.n	800da70 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800da60:	4b3c      	ldr	r3, [pc, #240]	; (800db54 <xQueueReceive+0x1b4>)
 800da62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da66:	601a      	str	r2, [r3, #0]
 800da68:	f3bf 8f4f 	dsb	sy
 800da6c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800da70:	f001 ffd2 	bl	800fa18 <vPortExitCritical>
				return pdPASS;
 800da74:	2301      	movs	r3, #1
 800da76:	e069      	b.n	800db4c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d103      	bne.n	800da86 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800da7e:	f001 ffcb 	bl	800fa18 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800da82:	2300      	movs	r3, #0
 800da84:	e062      	b.n	800db4c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800da86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d106      	bne.n	800da9a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800da8c:	f107 0310 	add.w	r3, r7, #16
 800da90:	4618      	mov	r0, r3
 800da92:	f000 ffbf 	bl	800ea14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800da96:	2301      	movs	r3, #1
 800da98:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800da9a:	f001 ffbd 	bl	800fa18 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800da9e:	f000 fd1f 	bl	800e4e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800daa2:	f001 ff8b 	bl	800f9bc <vPortEnterCritical>
 800daa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daa8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800daac:	b25b      	sxtb	r3, r3
 800daae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dab2:	d103      	bne.n	800dabc <xQueueReceive+0x11c>
 800dab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dab6:	2200      	movs	r2, #0
 800dab8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dabc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dabe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dac2:	b25b      	sxtb	r3, r3
 800dac4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dac8:	d103      	bne.n	800dad2 <xQueueReceive+0x132>
 800daca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dacc:	2200      	movs	r2, #0
 800dace:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dad2:	f001 ffa1 	bl	800fa18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dad6:	1d3a      	adds	r2, r7, #4
 800dad8:	f107 0310 	add.w	r3, r7, #16
 800dadc:	4611      	mov	r1, r2
 800dade:	4618      	mov	r0, r3
 800dae0:	f000 ffae 	bl	800ea40 <xTaskCheckForTimeOut>
 800dae4:	4603      	mov	r3, r0
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d123      	bne.n	800db32 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800daea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800daec:	f000 f9b5 	bl	800de5a <prvIsQueueEmpty>
 800daf0:	4603      	mov	r3, r0
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d017      	beq.n	800db26 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800daf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daf8:	3324      	adds	r3, #36	; 0x24
 800dafa:	687a      	ldr	r2, [r7, #4]
 800dafc:	4611      	mov	r1, r2
 800dafe:	4618      	mov	r0, r3
 800db00:	f000 fed8 	bl	800e8b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800db04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800db06:	f000 f956 	bl	800ddb6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800db0a:	f000 fcf7 	bl	800e4fc <xTaskResumeAll>
 800db0e:	4603      	mov	r3, r0
 800db10:	2b00      	cmp	r3, #0
 800db12:	d189      	bne.n	800da28 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800db14:	4b0f      	ldr	r3, [pc, #60]	; (800db54 <xQueueReceive+0x1b4>)
 800db16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db1a:	601a      	str	r2, [r3, #0]
 800db1c:	f3bf 8f4f 	dsb	sy
 800db20:	f3bf 8f6f 	isb	sy
 800db24:	e780      	b.n	800da28 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800db26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800db28:	f000 f945 	bl	800ddb6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800db2c:	f000 fce6 	bl	800e4fc <xTaskResumeAll>
 800db30:	e77a      	b.n	800da28 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800db32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800db34:	f000 f93f 	bl	800ddb6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800db38:	f000 fce0 	bl	800e4fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800db3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800db3e:	f000 f98c 	bl	800de5a <prvIsQueueEmpty>
 800db42:	4603      	mov	r3, r0
 800db44:	2b00      	cmp	r3, #0
 800db46:	f43f af6f 	beq.w	800da28 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800db4a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800db4c:	4618      	mov	r0, r3
 800db4e:	3730      	adds	r7, #48	; 0x30
 800db50:	46bd      	mov	sp, r7
 800db52:	bd80      	pop	{r7, pc}
 800db54:	e000ed04 	.word	0xe000ed04

0800db58 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b08e      	sub	sp, #56	; 0x38
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	60f8      	str	r0, [r7, #12]
 800db60:	60b9      	str	r1, [r7, #8]
 800db62:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800db68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d109      	bne.n	800db82 <xQueueReceiveFromISR+0x2a>
 800db6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db72:	f383 8811 	msr	BASEPRI, r3
 800db76:	f3bf 8f6f 	isb	sy
 800db7a:	f3bf 8f4f 	dsb	sy
 800db7e:	623b      	str	r3, [r7, #32]
 800db80:	e7fe      	b.n	800db80 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800db82:	68bb      	ldr	r3, [r7, #8]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d103      	bne.n	800db90 <xQueueReceiveFromISR+0x38>
 800db88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d101      	bne.n	800db94 <xQueueReceiveFromISR+0x3c>
 800db90:	2301      	movs	r3, #1
 800db92:	e000      	b.n	800db96 <xQueueReceiveFromISR+0x3e>
 800db94:	2300      	movs	r3, #0
 800db96:	2b00      	cmp	r3, #0
 800db98:	d109      	bne.n	800dbae <xQueueReceiveFromISR+0x56>
 800db9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db9e:	f383 8811 	msr	BASEPRI, r3
 800dba2:	f3bf 8f6f 	isb	sy
 800dba6:	f3bf 8f4f 	dsb	sy
 800dbaa:	61fb      	str	r3, [r7, #28]
 800dbac:	e7fe      	b.n	800dbac <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dbae:	f001 ffe1 	bl	800fb74 <vPortValidateInterruptPriority>
	__asm volatile
 800dbb2:	f3ef 8211 	mrs	r2, BASEPRI
 800dbb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbba:	f383 8811 	msr	BASEPRI, r3
 800dbbe:	f3bf 8f6f 	isb	sy
 800dbc2:	f3bf 8f4f 	dsb	sy
 800dbc6:	61ba      	str	r2, [r7, #24]
 800dbc8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800dbca:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dbcc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dbce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbd2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dbd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d02f      	beq.n	800dc3a <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800dbda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbdc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dbe0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dbe4:	68b9      	ldr	r1, [r7, #8]
 800dbe6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dbe8:	f000 f8bf 	bl	800dd6a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dbec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbee:	1e5a      	subs	r2, r3, #1
 800dbf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbf2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800dbf4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800dbf8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dbfc:	d112      	bne.n	800dc24 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dbfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc00:	691b      	ldr	r3, [r3, #16]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d016      	beq.n	800dc34 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dc06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc08:	3310      	adds	r3, #16
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	f000 fea0 	bl	800e950 <xTaskRemoveFromEventList>
 800dc10:	4603      	mov	r3, r0
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d00e      	beq.n	800dc34 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d00b      	beq.n	800dc34 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	2201      	movs	r2, #1
 800dc20:	601a      	str	r2, [r3, #0]
 800dc22:	e007      	b.n	800dc34 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800dc24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc28:	3301      	adds	r3, #1
 800dc2a:	b2db      	uxtb	r3, r3
 800dc2c:	b25a      	sxtb	r2, r3
 800dc2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800dc34:	2301      	movs	r3, #1
 800dc36:	637b      	str	r3, [r7, #52]	; 0x34
 800dc38:	e001      	b.n	800dc3e <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	637b      	str	r3, [r7, #52]	; 0x34
 800dc3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc40:	613b      	str	r3, [r7, #16]
	__asm volatile
 800dc42:	693b      	ldr	r3, [r7, #16]
 800dc44:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dc48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	3738      	adds	r7, #56	; 0x38
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	bd80      	pop	{r7, pc}

0800dc52 <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 800dc52:	b580      	push	{r7, lr}
 800dc54:	b086      	sub	sp, #24
 800dc56:	af00      	add	r7, sp, #0
 800dc58:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800dc5e:	697b      	ldr	r3, [r7, #20]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d109      	bne.n	800dc78 <uxQueueSpacesAvailable+0x26>
	__asm volatile
 800dc64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc68:	f383 8811 	msr	BASEPRI, r3
 800dc6c:	f3bf 8f6f 	isb	sy
 800dc70:	f3bf 8f4f 	dsb	sy
 800dc74:	60fb      	str	r3, [r7, #12]
 800dc76:	e7fe      	b.n	800dc76 <uxQueueSpacesAvailable+0x24>

	taskENTER_CRITICAL();
 800dc78:	f001 fea0 	bl	800f9bc <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 800dc7c:	697b      	ldr	r3, [r7, #20]
 800dc7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dc80:	697b      	ldr	r3, [r7, #20]
 800dc82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc84:	1ad3      	subs	r3, r2, r3
 800dc86:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800dc88:	f001 fec6 	bl	800fa18 <vPortExitCritical>

	return uxReturn;
 800dc8c:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800dc8e:	4618      	mov	r0, r3
 800dc90:	3718      	adds	r7, #24
 800dc92:	46bd      	mov	sp, r7
 800dc94:	bd80      	pop	{r7, pc}

0800dc96 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800dc96:	b580      	push	{r7, lr}
 800dc98:	b086      	sub	sp, #24
 800dc9a:	af00      	add	r7, sp, #0
 800dc9c:	60f8      	str	r0, [r7, #12]
 800dc9e:	60b9      	str	r1, [r7, #8]
 800dca0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800dca2:	2300      	movs	r3, #0
 800dca4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcaa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d10d      	bne.n	800dcd0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d14d      	bne.n	800dd58 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	689b      	ldr	r3, [r3, #8]
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	f001 f819 	bl	800ecf8 <xTaskPriorityDisinherit>
 800dcc6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	2200      	movs	r2, #0
 800dccc:	609a      	str	r2, [r3, #8]
 800dcce:	e043      	b.n	800dd58 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d119      	bne.n	800dd0a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	6858      	ldr	r0, [r3, #4]
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcde:	461a      	mov	r2, r3
 800dce0:	68b9      	ldr	r1, [r7, #8]
 800dce2:	f00b fe4d 	bl	8019980 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	685a      	ldr	r2, [r3, #4]
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcee:	441a      	add	r2, r3
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	685a      	ldr	r2, [r3, #4]
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	689b      	ldr	r3, [r3, #8]
 800dcfc:	429a      	cmp	r2, r3
 800dcfe:	d32b      	bcc.n	800dd58 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	681a      	ldr	r2, [r3, #0]
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	605a      	str	r2, [r3, #4]
 800dd08:	e026      	b.n	800dd58 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	68d8      	ldr	r0, [r3, #12]
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd12:	461a      	mov	r2, r3
 800dd14:	68b9      	ldr	r1, [r7, #8]
 800dd16:	f00b fe33 	bl	8019980 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	68da      	ldr	r2, [r3, #12]
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd22:	425b      	negs	r3, r3
 800dd24:	441a      	add	r2, r3
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	68da      	ldr	r2, [r3, #12]
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	429a      	cmp	r2, r3
 800dd34:	d207      	bcs.n	800dd46 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	689a      	ldr	r2, [r3, #8]
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd3e:	425b      	negs	r3, r3
 800dd40:	441a      	add	r2, r3
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	2b02      	cmp	r3, #2
 800dd4a:	d105      	bne.n	800dd58 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dd4c:	693b      	ldr	r3, [r7, #16]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d002      	beq.n	800dd58 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800dd52:	693b      	ldr	r3, [r7, #16]
 800dd54:	3b01      	subs	r3, #1
 800dd56:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dd58:	693b      	ldr	r3, [r7, #16]
 800dd5a:	1c5a      	adds	r2, r3, #1
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800dd60:	697b      	ldr	r3, [r7, #20]
}
 800dd62:	4618      	mov	r0, r3
 800dd64:	3718      	adds	r7, #24
 800dd66:	46bd      	mov	sp, r7
 800dd68:	bd80      	pop	{r7, pc}

0800dd6a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800dd6a:	b580      	push	{r7, lr}
 800dd6c:	b082      	sub	sp, #8
 800dd6e:	af00      	add	r7, sp, #0
 800dd70:	6078      	str	r0, [r7, #4]
 800dd72:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d018      	beq.n	800ddae <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	68da      	ldr	r2, [r3, #12]
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd84:	441a      	add	r2, r3
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	68da      	ldr	r2, [r3, #12]
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	689b      	ldr	r3, [r3, #8]
 800dd92:	429a      	cmp	r2, r3
 800dd94:	d303      	bcc.n	800dd9e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	681a      	ldr	r2, [r3, #0]
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	68d9      	ldr	r1, [r3, #12]
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dda6:	461a      	mov	r2, r3
 800dda8:	6838      	ldr	r0, [r7, #0]
 800ddaa:	f00b fde9 	bl	8019980 <memcpy>
	}
}
 800ddae:	bf00      	nop
 800ddb0:	3708      	adds	r7, #8
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	bd80      	pop	{r7, pc}

0800ddb6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ddb6:	b580      	push	{r7, lr}
 800ddb8:	b084      	sub	sp, #16
 800ddba:	af00      	add	r7, sp, #0
 800ddbc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ddbe:	f001 fdfd 	bl	800f9bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ddc8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ddca:	e011      	b.n	800ddf0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d012      	beq.n	800ddfa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	3324      	adds	r3, #36	; 0x24
 800ddd8:	4618      	mov	r0, r3
 800ddda:	f000 fdb9 	bl	800e950 <xTaskRemoveFromEventList>
 800ddde:	4603      	mov	r3, r0
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d001      	beq.n	800dde8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800dde4:	f000 fe8c 	bl	800eb00 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800dde8:	7bfb      	ldrb	r3, [r7, #15]
 800ddea:	3b01      	subs	r3, #1
 800ddec:	b2db      	uxtb	r3, r3
 800ddee:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ddf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	dce9      	bgt.n	800ddcc <prvUnlockQueue+0x16>
 800ddf8:	e000      	b.n	800ddfc <prvUnlockQueue+0x46>
					break;
 800ddfa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	22ff      	movs	r2, #255	; 0xff
 800de00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800de04:	f001 fe08 	bl	800fa18 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800de08:	f001 fdd8 	bl	800f9bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800de12:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800de14:	e011      	b.n	800de3a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	691b      	ldr	r3, [r3, #16]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d012      	beq.n	800de44 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	3310      	adds	r3, #16
 800de22:	4618      	mov	r0, r3
 800de24:	f000 fd94 	bl	800e950 <xTaskRemoveFromEventList>
 800de28:	4603      	mov	r3, r0
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d001      	beq.n	800de32 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800de2e:	f000 fe67 	bl	800eb00 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800de32:	7bbb      	ldrb	r3, [r7, #14]
 800de34:	3b01      	subs	r3, #1
 800de36:	b2db      	uxtb	r3, r3
 800de38:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800de3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	dce9      	bgt.n	800de16 <prvUnlockQueue+0x60>
 800de42:	e000      	b.n	800de46 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800de44:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	22ff      	movs	r2, #255	; 0xff
 800de4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800de4e:	f001 fde3 	bl	800fa18 <vPortExitCritical>
}
 800de52:	bf00      	nop
 800de54:	3710      	adds	r7, #16
 800de56:	46bd      	mov	sp, r7
 800de58:	bd80      	pop	{r7, pc}

0800de5a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800de5a:	b580      	push	{r7, lr}
 800de5c:	b084      	sub	sp, #16
 800de5e:	af00      	add	r7, sp, #0
 800de60:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800de62:	f001 fdab 	bl	800f9bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d102      	bne.n	800de74 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800de6e:	2301      	movs	r3, #1
 800de70:	60fb      	str	r3, [r7, #12]
 800de72:	e001      	b.n	800de78 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800de74:	2300      	movs	r3, #0
 800de76:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800de78:	f001 fdce 	bl	800fa18 <vPortExitCritical>

	return xReturn;
 800de7c:	68fb      	ldr	r3, [r7, #12]
}
 800de7e:	4618      	mov	r0, r3
 800de80:	3710      	adds	r7, #16
 800de82:	46bd      	mov	sp, r7
 800de84:	bd80      	pop	{r7, pc}

0800de86 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800de86:	b580      	push	{r7, lr}
 800de88:	b084      	sub	sp, #16
 800de8a:	af00      	add	r7, sp, #0
 800de8c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800de8e:	f001 fd95 	bl	800f9bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de9a:	429a      	cmp	r2, r3
 800de9c:	d102      	bne.n	800dea4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800de9e:	2301      	movs	r3, #1
 800dea0:	60fb      	str	r3, [r7, #12]
 800dea2:	e001      	b.n	800dea8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800dea4:	2300      	movs	r3, #0
 800dea6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dea8:	f001 fdb6 	bl	800fa18 <vPortExitCritical>

	return xReturn;
 800deac:	68fb      	ldr	r3, [r7, #12]
}
 800deae:	4618      	mov	r0, r3
 800deb0:	3710      	adds	r7, #16
 800deb2:	46bd      	mov	sp, r7
 800deb4:	bd80      	pop	{r7, pc}
	...

0800deb8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800deb8:	b480      	push	{r7}
 800deba:	b085      	sub	sp, #20
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
 800dec0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dec2:	2300      	movs	r3, #0
 800dec4:	60fb      	str	r3, [r7, #12]
 800dec6:	e014      	b.n	800def2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800dec8:	4a0e      	ldr	r2, [pc, #56]	; (800df04 <vQueueAddToRegistry+0x4c>)
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d10b      	bne.n	800deec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ded4:	490b      	ldr	r1, [pc, #44]	; (800df04 <vQueueAddToRegistry+0x4c>)
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	683a      	ldr	r2, [r7, #0]
 800deda:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800dede:	4a09      	ldr	r2, [pc, #36]	; (800df04 <vQueueAddToRegistry+0x4c>)
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	00db      	lsls	r3, r3, #3
 800dee4:	4413      	add	r3, r2
 800dee6:	687a      	ldr	r2, [r7, #4]
 800dee8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800deea:	e005      	b.n	800def8 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	3301      	adds	r3, #1
 800def0:	60fb      	str	r3, [r7, #12]
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	2b07      	cmp	r3, #7
 800def6:	d9e7      	bls.n	800dec8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800def8:	bf00      	nop
 800defa:	3714      	adds	r7, #20
 800defc:	46bd      	mov	sp, r7
 800defe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df02:	4770      	bx	lr
 800df04:	20007038 	.word	0x20007038

0800df08 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800df08:	b580      	push	{r7, lr}
 800df0a:	b086      	sub	sp, #24
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	60f8      	str	r0, [r7, #12]
 800df10:	60b9      	str	r1, [r7, #8]
 800df12:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800df18:	f001 fd50 	bl	800f9bc <vPortEnterCritical>
 800df1c:	697b      	ldr	r3, [r7, #20]
 800df1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800df22:	b25b      	sxtb	r3, r3
 800df24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800df28:	d103      	bne.n	800df32 <vQueueWaitForMessageRestricted+0x2a>
 800df2a:	697b      	ldr	r3, [r7, #20]
 800df2c:	2200      	movs	r2, #0
 800df2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800df32:	697b      	ldr	r3, [r7, #20]
 800df34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800df38:	b25b      	sxtb	r3, r3
 800df3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800df3e:	d103      	bne.n	800df48 <vQueueWaitForMessageRestricted+0x40>
 800df40:	697b      	ldr	r3, [r7, #20]
 800df42:	2200      	movs	r2, #0
 800df44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800df48:	f001 fd66 	bl	800fa18 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800df4c:	697b      	ldr	r3, [r7, #20]
 800df4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df50:	2b00      	cmp	r3, #0
 800df52:	d106      	bne.n	800df62 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800df54:	697b      	ldr	r3, [r7, #20]
 800df56:	3324      	adds	r3, #36	; 0x24
 800df58:	687a      	ldr	r2, [r7, #4]
 800df5a:	68b9      	ldr	r1, [r7, #8]
 800df5c:	4618      	mov	r0, r3
 800df5e:	f000 fccd 	bl	800e8fc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800df62:	6978      	ldr	r0, [r7, #20]
 800df64:	f7ff ff27 	bl	800ddb6 <prvUnlockQueue>
	}
 800df68:	bf00      	nop
 800df6a:	3718      	adds	r7, #24
 800df6c:	46bd      	mov	sp, r7
 800df6e:	bd80      	pop	{r7, pc}

0800df70 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800df70:	b580      	push	{r7, lr}
 800df72:	b08e      	sub	sp, #56	; 0x38
 800df74:	af04      	add	r7, sp, #16
 800df76:	60f8      	str	r0, [r7, #12]
 800df78:	60b9      	str	r1, [r7, #8]
 800df7a:	607a      	str	r2, [r7, #4]
 800df7c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800df7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df80:	2b00      	cmp	r3, #0
 800df82:	d109      	bne.n	800df98 <xTaskCreateStatic+0x28>
 800df84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df88:	f383 8811 	msr	BASEPRI, r3
 800df8c:	f3bf 8f6f 	isb	sy
 800df90:	f3bf 8f4f 	dsb	sy
 800df94:	623b      	str	r3, [r7, #32]
 800df96:	e7fe      	b.n	800df96 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800df98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d109      	bne.n	800dfb2 <xTaskCreateStatic+0x42>
 800df9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfa2:	f383 8811 	msr	BASEPRI, r3
 800dfa6:	f3bf 8f6f 	isb	sy
 800dfaa:	f3bf 8f4f 	dsb	sy
 800dfae:	61fb      	str	r3, [r7, #28]
 800dfb0:	e7fe      	b.n	800dfb0 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800dfb2:	2364      	movs	r3, #100	; 0x64
 800dfb4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800dfb6:	693b      	ldr	r3, [r7, #16]
 800dfb8:	2b64      	cmp	r3, #100	; 0x64
 800dfba:	d009      	beq.n	800dfd0 <xTaskCreateStatic+0x60>
 800dfbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfc0:	f383 8811 	msr	BASEPRI, r3
 800dfc4:	f3bf 8f6f 	isb	sy
 800dfc8:	f3bf 8f4f 	dsb	sy
 800dfcc:	61bb      	str	r3, [r7, #24]
 800dfce:	e7fe      	b.n	800dfce <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800dfd0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800dfd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d01e      	beq.n	800e016 <xTaskCreateStatic+0xa6>
 800dfd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d01b      	beq.n	800e016 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dfde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfe0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800dfe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfe4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dfe6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800dfe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfea:	2202      	movs	r2, #2
 800dfec:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800dff0:	2300      	movs	r3, #0
 800dff2:	9303      	str	r3, [sp, #12]
 800dff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dff6:	9302      	str	r3, [sp, #8]
 800dff8:	f107 0314 	add.w	r3, r7, #20
 800dffc:	9301      	str	r3, [sp, #4]
 800dffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e000:	9300      	str	r3, [sp, #0]
 800e002:	683b      	ldr	r3, [r7, #0]
 800e004:	687a      	ldr	r2, [r7, #4]
 800e006:	68b9      	ldr	r1, [r7, #8]
 800e008:	68f8      	ldr	r0, [r7, #12]
 800e00a:	f000 f850 	bl	800e0ae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e00e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e010:	f000 f8e2 	bl	800e1d8 <prvAddNewTaskToReadyList>
 800e014:	e001      	b.n	800e01a <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800e016:	2300      	movs	r3, #0
 800e018:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e01a:	697b      	ldr	r3, [r7, #20]
	}
 800e01c:	4618      	mov	r0, r3
 800e01e:	3728      	adds	r7, #40	; 0x28
 800e020:	46bd      	mov	sp, r7
 800e022:	bd80      	pop	{r7, pc}

0800e024 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e024:	b580      	push	{r7, lr}
 800e026:	b08c      	sub	sp, #48	; 0x30
 800e028:	af04      	add	r7, sp, #16
 800e02a:	60f8      	str	r0, [r7, #12]
 800e02c:	60b9      	str	r1, [r7, #8]
 800e02e:	603b      	str	r3, [r7, #0]
 800e030:	4613      	mov	r3, r2
 800e032:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e034:	88fb      	ldrh	r3, [r7, #6]
 800e036:	009b      	lsls	r3, r3, #2
 800e038:	4618      	mov	r0, r3
 800e03a:	f001 fdd9 	bl	800fbf0 <pvPortMalloc>
 800e03e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e040:	697b      	ldr	r3, [r7, #20]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d00e      	beq.n	800e064 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e046:	2064      	movs	r0, #100	; 0x64
 800e048:	f001 fdd2 	bl	800fbf0 <pvPortMalloc>
 800e04c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e04e:	69fb      	ldr	r3, [r7, #28]
 800e050:	2b00      	cmp	r3, #0
 800e052:	d003      	beq.n	800e05c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e054:	69fb      	ldr	r3, [r7, #28]
 800e056:	697a      	ldr	r2, [r7, #20]
 800e058:	631a      	str	r2, [r3, #48]	; 0x30
 800e05a:	e005      	b.n	800e068 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e05c:	6978      	ldr	r0, [r7, #20]
 800e05e:	f001 fe89 	bl	800fd74 <vPortFree>
 800e062:	e001      	b.n	800e068 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e064:	2300      	movs	r3, #0
 800e066:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e068:	69fb      	ldr	r3, [r7, #28]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d017      	beq.n	800e09e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e06e:	69fb      	ldr	r3, [r7, #28]
 800e070:	2200      	movs	r2, #0
 800e072:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e076:	88fa      	ldrh	r2, [r7, #6]
 800e078:	2300      	movs	r3, #0
 800e07a:	9303      	str	r3, [sp, #12]
 800e07c:	69fb      	ldr	r3, [r7, #28]
 800e07e:	9302      	str	r3, [sp, #8]
 800e080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e082:	9301      	str	r3, [sp, #4]
 800e084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e086:	9300      	str	r3, [sp, #0]
 800e088:	683b      	ldr	r3, [r7, #0]
 800e08a:	68b9      	ldr	r1, [r7, #8]
 800e08c:	68f8      	ldr	r0, [r7, #12]
 800e08e:	f000 f80e 	bl	800e0ae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e092:	69f8      	ldr	r0, [r7, #28]
 800e094:	f000 f8a0 	bl	800e1d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e098:	2301      	movs	r3, #1
 800e09a:	61bb      	str	r3, [r7, #24]
 800e09c:	e002      	b.n	800e0a4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e09e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e0a2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e0a4:	69bb      	ldr	r3, [r7, #24]
	}
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	3720      	adds	r7, #32
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	bd80      	pop	{r7, pc}

0800e0ae <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e0ae:	b580      	push	{r7, lr}
 800e0b0:	b088      	sub	sp, #32
 800e0b2:	af00      	add	r7, sp, #0
 800e0b4:	60f8      	str	r0, [r7, #12]
 800e0b6:	60b9      	str	r1, [r7, #8]
 800e0b8:	607a      	str	r2, [r7, #4]
 800e0ba:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e0bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0be:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	009b      	lsls	r3, r3, #2
 800e0c4:	461a      	mov	r2, r3
 800e0c6:	21a5      	movs	r1, #165	; 0xa5
 800e0c8:	f00b fc65 	bl	8019996 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e0cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e0d6:	3b01      	subs	r3, #1
 800e0d8:	009b      	lsls	r3, r3, #2
 800e0da:	4413      	add	r3, r2
 800e0dc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e0de:	69bb      	ldr	r3, [r7, #24]
 800e0e0:	f023 0307 	bic.w	r3, r3, #7
 800e0e4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e0e6:	69bb      	ldr	r3, [r7, #24]
 800e0e8:	f003 0307 	and.w	r3, r3, #7
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d009      	beq.n	800e104 <prvInitialiseNewTask+0x56>
 800e0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0f4:	f383 8811 	msr	BASEPRI, r3
 800e0f8:	f3bf 8f6f 	isb	sy
 800e0fc:	f3bf 8f4f 	dsb	sy
 800e100:	617b      	str	r3, [r7, #20]
 800e102:	e7fe      	b.n	800e102 <prvInitialiseNewTask+0x54>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800e104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e106:	69ba      	ldr	r2, [r7, #24]
 800e108:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e10a:	68bb      	ldr	r3, [r7, #8]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d01f      	beq.n	800e150 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e110:	2300      	movs	r3, #0
 800e112:	61fb      	str	r3, [r7, #28]
 800e114:	e012      	b.n	800e13c <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e116:	68ba      	ldr	r2, [r7, #8]
 800e118:	69fb      	ldr	r3, [r7, #28]
 800e11a:	4413      	add	r3, r2
 800e11c:	7819      	ldrb	r1, [r3, #0]
 800e11e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e120:	69fb      	ldr	r3, [r7, #28]
 800e122:	4413      	add	r3, r2
 800e124:	3334      	adds	r3, #52	; 0x34
 800e126:	460a      	mov	r2, r1
 800e128:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e12a:	68ba      	ldr	r2, [r7, #8]
 800e12c:	69fb      	ldr	r3, [r7, #28]
 800e12e:	4413      	add	r3, r2
 800e130:	781b      	ldrb	r3, [r3, #0]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d006      	beq.n	800e144 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e136:	69fb      	ldr	r3, [r7, #28]
 800e138:	3301      	adds	r3, #1
 800e13a:	61fb      	str	r3, [r7, #28]
 800e13c:	69fb      	ldr	r3, [r7, #28]
 800e13e:	2b0f      	cmp	r3, #15
 800e140:	d9e9      	bls.n	800e116 <prvInitialiseNewTask+0x68>
 800e142:	e000      	b.n	800e146 <prvInitialiseNewTask+0x98>
			{
				break;
 800e144:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e148:	2200      	movs	r2, #0
 800e14a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e14e:	e003      	b.n	800e158 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e152:	2200      	movs	r2, #0
 800e154:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e15a:	2b37      	cmp	r3, #55	; 0x37
 800e15c:	d901      	bls.n	800e162 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e15e:	2337      	movs	r3, #55	; 0x37
 800e160:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e164:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e166:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e16a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e16c:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800e16e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e170:	2200      	movs	r2, #0
 800e172:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e176:	3304      	adds	r3, #4
 800e178:	4618      	mov	r0, r3
 800e17a:	f7ff f8b1 	bl	800d2e0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e17e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e180:	3318      	adds	r3, #24
 800e182:	4618      	mov	r0, r3
 800e184:	f7ff f8ac 	bl	800d2e0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e18a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e18c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e18e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e190:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e196:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e19a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e19c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800e19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1a0:	2200      	movs	r2, #0
 800e1a2:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e1a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1ac:	2200      	movs	r2, #0
 800e1ae:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e1b2:	683a      	ldr	r2, [r7, #0]
 800e1b4:	68f9      	ldr	r1, [r7, #12]
 800e1b6:	69b8      	ldr	r0, [r7, #24]
 800e1b8:	f001 fad6 	bl	800f768 <pxPortInitialiseStack>
 800e1bc:	4602      	mov	r2, r0
 800e1be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1c0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e1c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d002      	beq.n	800e1ce <prvInitialiseNewTask+0x120>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e1cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e1ce:	bf00      	nop
 800e1d0:	3720      	adds	r7, #32
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	bd80      	pop	{r7, pc}
	...

0800e1d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	b082      	sub	sp, #8
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e1e0:	f001 fbec 	bl	800f9bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e1e4:	4b2d      	ldr	r3, [pc, #180]	; (800e29c <prvAddNewTaskToReadyList+0xc4>)
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	3301      	adds	r3, #1
 800e1ea:	4a2c      	ldr	r2, [pc, #176]	; (800e29c <prvAddNewTaskToReadyList+0xc4>)
 800e1ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e1ee:	4b2c      	ldr	r3, [pc, #176]	; (800e2a0 <prvAddNewTaskToReadyList+0xc8>)
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d109      	bne.n	800e20a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e1f6:	4a2a      	ldr	r2, [pc, #168]	; (800e2a0 <prvAddNewTaskToReadyList+0xc8>)
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e1fc:	4b27      	ldr	r3, [pc, #156]	; (800e29c <prvAddNewTaskToReadyList+0xc4>)
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	2b01      	cmp	r3, #1
 800e202:	d110      	bne.n	800e226 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e204:	f000 fca0 	bl	800eb48 <prvInitialiseTaskLists>
 800e208:	e00d      	b.n	800e226 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e20a:	4b26      	ldr	r3, [pc, #152]	; (800e2a4 <prvAddNewTaskToReadyList+0xcc>)
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d109      	bne.n	800e226 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e212:	4b23      	ldr	r3, [pc, #140]	; (800e2a0 <prvAddNewTaskToReadyList+0xc8>)
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e21c:	429a      	cmp	r2, r3
 800e21e:	d802      	bhi.n	800e226 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e220:	4a1f      	ldr	r2, [pc, #124]	; (800e2a0 <prvAddNewTaskToReadyList+0xc8>)
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e226:	4b20      	ldr	r3, [pc, #128]	; (800e2a8 <prvAddNewTaskToReadyList+0xd0>)
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	3301      	adds	r3, #1
 800e22c:	4a1e      	ldr	r2, [pc, #120]	; (800e2a8 <prvAddNewTaskToReadyList+0xd0>)
 800e22e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e230:	4b1d      	ldr	r3, [pc, #116]	; (800e2a8 <prvAddNewTaskToReadyList+0xd0>)
 800e232:	681a      	ldr	r2, [r3, #0]
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e23c:	4b1b      	ldr	r3, [pc, #108]	; (800e2ac <prvAddNewTaskToReadyList+0xd4>)
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	429a      	cmp	r2, r3
 800e242:	d903      	bls.n	800e24c <prvAddNewTaskToReadyList+0x74>
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e248:	4a18      	ldr	r2, [pc, #96]	; (800e2ac <prvAddNewTaskToReadyList+0xd4>)
 800e24a:	6013      	str	r3, [r2, #0]
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e250:	4613      	mov	r3, r2
 800e252:	009b      	lsls	r3, r3, #2
 800e254:	4413      	add	r3, r2
 800e256:	009b      	lsls	r3, r3, #2
 800e258:	4a15      	ldr	r2, [pc, #84]	; (800e2b0 <prvAddNewTaskToReadyList+0xd8>)
 800e25a:	441a      	add	r2, r3
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	3304      	adds	r3, #4
 800e260:	4619      	mov	r1, r3
 800e262:	4610      	mov	r0, r2
 800e264:	f7ff f849 	bl	800d2fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e268:	f001 fbd6 	bl	800fa18 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e26c:	4b0d      	ldr	r3, [pc, #52]	; (800e2a4 <prvAddNewTaskToReadyList+0xcc>)
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	2b00      	cmp	r3, #0
 800e272:	d00e      	beq.n	800e292 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e274:	4b0a      	ldr	r3, [pc, #40]	; (800e2a0 <prvAddNewTaskToReadyList+0xc8>)
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e27e:	429a      	cmp	r2, r3
 800e280:	d207      	bcs.n	800e292 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e282:	4b0c      	ldr	r3, [pc, #48]	; (800e2b4 <prvAddNewTaskToReadyList+0xdc>)
 800e284:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e288:	601a      	str	r2, [r3, #0]
 800e28a:	f3bf 8f4f 	dsb	sy
 800e28e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e292:	bf00      	nop
 800e294:	3708      	adds	r7, #8
 800e296:	46bd      	mov	sp, r7
 800e298:	bd80      	pop	{r7, pc}
 800e29a:	bf00      	nop
 800e29c:	20001244 	.word	0x20001244
 800e2a0:	20000d70 	.word	0x20000d70
 800e2a4:	20001250 	.word	0x20001250
 800e2a8:	20001260 	.word	0x20001260
 800e2ac:	2000124c 	.word	0x2000124c
 800e2b0:	20000d74 	.word	0x20000d74
 800e2b4:	e000ed04 	.word	0xe000ed04

0800e2b8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800e2b8:	b580      	push	{r7, lr}
 800e2ba:	b08a      	sub	sp, #40	; 0x28
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	6078      	str	r0, [r7, #4]
 800e2c0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d109      	bne.n	800e2e0 <vTaskDelayUntil+0x28>
 800e2cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2d0:	f383 8811 	msr	BASEPRI, r3
 800e2d4:	f3bf 8f6f 	isb	sy
 800e2d8:	f3bf 8f4f 	dsb	sy
 800e2dc:	617b      	str	r3, [r7, #20]
 800e2de:	e7fe      	b.n	800e2de <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 800e2e0:	683b      	ldr	r3, [r7, #0]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d109      	bne.n	800e2fa <vTaskDelayUntil+0x42>
 800e2e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2ea:	f383 8811 	msr	BASEPRI, r3
 800e2ee:	f3bf 8f6f 	isb	sy
 800e2f2:	f3bf 8f4f 	dsb	sy
 800e2f6:	613b      	str	r3, [r7, #16]
 800e2f8:	e7fe      	b.n	800e2f8 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 800e2fa:	4b29      	ldr	r3, [pc, #164]	; (800e3a0 <vTaskDelayUntil+0xe8>)
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d009      	beq.n	800e316 <vTaskDelayUntil+0x5e>
 800e302:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e306:	f383 8811 	msr	BASEPRI, r3
 800e30a:	f3bf 8f6f 	isb	sy
 800e30e:	f3bf 8f4f 	dsb	sy
 800e312:	60fb      	str	r3, [r7, #12]
 800e314:	e7fe      	b.n	800e314 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 800e316:	f000 f8e3 	bl	800e4e0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800e31a:	4b22      	ldr	r3, [pc, #136]	; (800e3a4 <vTaskDelayUntil+0xec>)
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	683a      	ldr	r2, [r7, #0]
 800e326:	4413      	add	r3, r2
 800e328:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	6a3a      	ldr	r2, [r7, #32]
 800e330:	429a      	cmp	r2, r3
 800e332:	d20b      	bcs.n	800e34c <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	69fa      	ldr	r2, [r7, #28]
 800e33a:	429a      	cmp	r2, r3
 800e33c:	d211      	bcs.n	800e362 <vTaskDelayUntil+0xaa>
 800e33e:	69fa      	ldr	r2, [r7, #28]
 800e340:	6a3b      	ldr	r3, [r7, #32]
 800e342:	429a      	cmp	r2, r3
 800e344:	d90d      	bls.n	800e362 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800e346:	2301      	movs	r3, #1
 800e348:	627b      	str	r3, [r7, #36]	; 0x24
 800e34a:	e00a      	b.n	800e362 <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	69fa      	ldr	r2, [r7, #28]
 800e352:	429a      	cmp	r2, r3
 800e354:	d303      	bcc.n	800e35e <vTaskDelayUntil+0xa6>
 800e356:	69fa      	ldr	r2, [r7, #28]
 800e358:	6a3b      	ldr	r3, [r7, #32]
 800e35a:	429a      	cmp	r2, r3
 800e35c:	d901      	bls.n	800e362 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800e35e:	2301      	movs	r3, #1
 800e360:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	69fa      	ldr	r2, [r7, #28]
 800e366:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800e368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d006      	beq.n	800e37c <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800e36e:	69fa      	ldr	r2, [r7, #28]
 800e370:	6a3b      	ldr	r3, [r7, #32]
 800e372:	1ad3      	subs	r3, r2, r3
 800e374:	2100      	movs	r1, #0
 800e376:	4618      	mov	r0, r3
 800e378:	f000 fe5c 	bl	800f034 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800e37c:	f000 f8be 	bl	800e4fc <xTaskResumeAll>
 800e380:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e382:	69bb      	ldr	r3, [r7, #24]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d107      	bne.n	800e398 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 800e388:	4b07      	ldr	r3, [pc, #28]	; (800e3a8 <vTaskDelayUntil+0xf0>)
 800e38a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e38e:	601a      	str	r2, [r3, #0]
 800e390:	f3bf 8f4f 	dsb	sy
 800e394:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e398:	bf00      	nop
 800e39a:	3728      	adds	r7, #40	; 0x28
 800e39c:	46bd      	mov	sp, r7
 800e39e:	bd80      	pop	{r7, pc}
 800e3a0:	2000126c 	.word	0x2000126c
 800e3a4:	20001248 	.word	0x20001248
 800e3a8:	e000ed04 	.word	0xe000ed04

0800e3ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	b084      	sub	sp, #16
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e3b4:	2300      	movs	r3, #0
 800e3b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d016      	beq.n	800e3ec <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e3be:	4b13      	ldr	r3, [pc, #76]	; (800e40c <vTaskDelay+0x60>)
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d009      	beq.n	800e3da <vTaskDelay+0x2e>
 800e3c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3ca:	f383 8811 	msr	BASEPRI, r3
 800e3ce:	f3bf 8f6f 	isb	sy
 800e3d2:	f3bf 8f4f 	dsb	sy
 800e3d6:	60bb      	str	r3, [r7, #8]
 800e3d8:	e7fe      	b.n	800e3d8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800e3da:	f000 f881 	bl	800e4e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e3de:	2100      	movs	r1, #0
 800e3e0:	6878      	ldr	r0, [r7, #4]
 800e3e2:	f000 fe27 	bl	800f034 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e3e6:	f000 f889 	bl	800e4fc <xTaskResumeAll>
 800e3ea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d107      	bne.n	800e402 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800e3f2:	4b07      	ldr	r3, [pc, #28]	; (800e410 <vTaskDelay+0x64>)
 800e3f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3f8:	601a      	str	r2, [r3, #0]
 800e3fa:	f3bf 8f4f 	dsb	sy
 800e3fe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e402:	bf00      	nop
 800e404:	3710      	adds	r7, #16
 800e406:	46bd      	mov	sp, r7
 800e408:	bd80      	pop	{r7, pc}
 800e40a:	bf00      	nop
 800e40c:	2000126c 	.word	0x2000126c
 800e410:	e000ed04 	.word	0xe000ed04

0800e414 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e414:	b580      	push	{r7, lr}
 800e416:	b08a      	sub	sp, #40	; 0x28
 800e418:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e41a:	2300      	movs	r3, #0
 800e41c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e41e:	2300      	movs	r3, #0
 800e420:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e422:	463a      	mov	r2, r7
 800e424:	1d39      	adds	r1, r7, #4
 800e426:	f107 0308 	add.w	r3, r7, #8
 800e42a:	4618      	mov	r0, r3
 800e42c:	f7fe ff04 	bl	800d238 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e430:	6839      	ldr	r1, [r7, #0]
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	68ba      	ldr	r2, [r7, #8]
 800e436:	9202      	str	r2, [sp, #8]
 800e438:	9301      	str	r3, [sp, #4]
 800e43a:	2300      	movs	r3, #0
 800e43c:	9300      	str	r3, [sp, #0]
 800e43e:	2300      	movs	r3, #0
 800e440:	460a      	mov	r2, r1
 800e442:	4921      	ldr	r1, [pc, #132]	; (800e4c8 <vTaskStartScheduler+0xb4>)
 800e444:	4821      	ldr	r0, [pc, #132]	; (800e4cc <vTaskStartScheduler+0xb8>)
 800e446:	f7ff fd93 	bl	800df70 <xTaskCreateStatic>
 800e44a:	4602      	mov	r2, r0
 800e44c:	4b20      	ldr	r3, [pc, #128]	; (800e4d0 <vTaskStartScheduler+0xbc>)
 800e44e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e450:	4b1f      	ldr	r3, [pc, #124]	; (800e4d0 <vTaskStartScheduler+0xbc>)
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d002      	beq.n	800e45e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e458:	2301      	movs	r3, #1
 800e45a:	617b      	str	r3, [r7, #20]
 800e45c:	e001      	b.n	800e462 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e45e:	2300      	movs	r3, #0
 800e460:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e462:	697b      	ldr	r3, [r7, #20]
 800e464:	2b01      	cmp	r3, #1
 800e466:	d102      	bne.n	800e46e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e468:	f000 fe38 	bl	800f0dc <xTimerCreateTimerTask>
 800e46c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e46e:	697b      	ldr	r3, [r7, #20]
 800e470:	2b01      	cmp	r3, #1
 800e472:	d117      	bne.n	800e4a4 <vTaskStartScheduler+0x90>
 800e474:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e478:	f383 8811 	msr	BASEPRI, r3
 800e47c:	f3bf 8f6f 	isb	sy
 800e480:	f3bf 8f4f 	dsb	sy
 800e484:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e486:	4b13      	ldr	r3, [pc, #76]	; (800e4d4 <vTaskStartScheduler+0xc0>)
 800e488:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e48c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e48e:	4b12      	ldr	r3, [pc, #72]	; (800e4d8 <vTaskStartScheduler+0xc4>)
 800e490:	2201      	movs	r2, #1
 800e492:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e494:	4b11      	ldr	r3, [pc, #68]	; (800e4dc <vTaskStartScheduler+0xc8>)
 800e496:	2200      	movs	r2, #0
 800e498:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800e49a:	f7f2 f82b 	bl	80004f4 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e49e:	f001 f9ef 	bl	800f880 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e4a2:	e00d      	b.n	800e4c0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e4a4:	697b      	ldr	r3, [r7, #20]
 800e4a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e4aa:	d109      	bne.n	800e4c0 <vTaskStartScheduler+0xac>
 800e4ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4b0:	f383 8811 	msr	BASEPRI, r3
 800e4b4:	f3bf 8f6f 	isb	sy
 800e4b8:	f3bf 8f4f 	dsb	sy
 800e4bc:	60fb      	str	r3, [r7, #12]
 800e4be:	e7fe      	b.n	800e4be <vTaskStartScheduler+0xaa>
}
 800e4c0:	bf00      	nop
 800e4c2:	3718      	adds	r7, #24
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	bd80      	pop	{r7, pc}
 800e4c8:	08019cb4 	.word	0x08019cb4
 800e4cc:	0800eb19 	.word	0x0800eb19
 800e4d0:	20001268 	.word	0x20001268
 800e4d4:	20001264 	.word	0x20001264
 800e4d8:	20001250 	.word	0x20001250
 800e4dc:	20001248 	.word	0x20001248

0800e4e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e4e0:	b480      	push	{r7}
 800e4e2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800e4e4:	4b04      	ldr	r3, [pc, #16]	; (800e4f8 <vTaskSuspendAll+0x18>)
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	3301      	adds	r3, #1
 800e4ea:	4a03      	ldr	r2, [pc, #12]	; (800e4f8 <vTaskSuspendAll+0x18>)
 800e4ec:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800e4ee:	bf00      	nop
 800e4f0:	46bd      	mov	sp, r7
 800e4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f6:	4770      	bx	lr
 800e4f8:	2000126c 	.word	0x2000126c

0800e4fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e4fc:	b580      	push	{r7, lr}
 800e4fe:	b084      	sub	sp, #16
 800e500:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e502:	2300      	movs	r3, #0
 800e504:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e506:	2300      	movs	r3, #0
 800e508:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e50a:	4b41      	ldr	r3, [pc, #260]	; (800e610 <xTaskResumeAll+0x114>)
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d109      	bne.n	800e526 <xTaskResumeAll+0x2a>
 800e512:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e516:	f383 8811 	msr	BASEPRI, r3
 800e51a:	f3bf 8f6f 	isb	sy
 800e51e:	f3bf 8f4f 	dsb	sy
 800e522:	603b      	str	r3, [r7, #0]
 800e524:	e7fe      	b.n	800e524 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e526:	f001 fa49 	bl	800f9bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e52a:	4b39      	ldr	r3, [pc, #228]	; (800e610 <xTaskResumeAll+0x114>)
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	3b01      	subs	r3, #1
 800e530:	4a37      	ldr	r2, [pc, #220]	; (800e610 <xTaskResumeAll+0x114>)
 800e532:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e534:	4b36      	ldr	r3, [pc, #216]	; (800e610 <xTaskResumeAll+0x114>)
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d162      	bne.n	800e602 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e53c:	4b35      	ldr	r3, [pc, #212]	; (800e614 <xTaskResumeAll+0x118>)
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d05e      	beq.n	800e602 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e544:	e02f      	b.n	800e5a6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e546:	4b34      	ldr	r3, [pc, #208]	; (800e618 <xTaskResumeAll+0x11c>)
 800e548:	68db      	ldr	r3, [r3, #12]
 800e54a:	68db      	ldr	r3, [r3, #12]
 800e54c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	3318      	adds	r3, #24
 800e552:	4618      	mov	r0, r3
 800e554:	f7fe ff2e 	bl	800d3b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	3304      	adds	r3, #4
 800e55c:	4618      	mov	r0, r3
 800e55e:	f7fe ff29 	bl	800d3b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e566:	4b2d      	ldr	r3, [pc, #180]	; (800e61c <xTaskResumeAll+0x120>)
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	429a      	cmp	r2, r3
 800e56c:	d903      	bls.n	800e576 <xTaskResumeAll+0x7a>
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e572:	4a2a      	ldr	r2, [pc, #168]	; (800e61c <xTaskResumeAll+0x120>)
 800e574:	6013      	str	r3, [r2, #0]
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e57a:	4613      	mov	r3, r2
 800e57c:	009b      	lsls	r3, r3, #2
 800e57e:	4413      	add	r3, r2
 800e580:	009b      	lsls	r3, r3, #2
 800e582:	4a27      	ldr	r2, [pc, #156]	; (800e620 <xTaskResumeAll+0x124>)
 800e584:	441a      	add	r2, r3
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	3304      	adds	r3, #4
 800e58a:	4619      	mov	r1, r3
 800e58c:	4610      	mov	r0, r2
 800e58e:	f7fe feb4 	bl	800d2fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e596:	4b23      	ldr	r3, [pc, #140]	; (800e624 <xTaskResumeAll+0x128>)
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e59c:	429a      	cmp	r2, r3
 800e59e:	d302      	bcc.n	800e5a6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800e5a0:	4b21      	ldr	r3, [pc, #132]	; (800e628 <xTaskResumeAll+0x12c>)
 800e5a2:	2201      	movs	r2, #1
 800e5a4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e5a6:	4b1c      	ldr	r3, [pc, #112]	; (800e618 <xTaskResumeAll+0x11c>)
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d1cb      	bne.n	800e546 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d001      	beq.n	800e5b8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e5b4:	f000 fb62 	bl	800ec7c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800e5b8:	4b1c      	ldr	r3, [pc, #112]	; (800e62c <xTaskResumeAll+0x130>)
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d010      	beq.n	800e5e6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e5c4:	f000 f846 	bl	800e654 <xTaskIncrementTick>
 800e5c8:	4603      	mov	r3, r0
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d002      	beq.n	800e5d4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800e5ce:	4b16      	ldr	r3, [pc, #88]	; (800e628 <xTaskResumeAll+0x12c>)
 800e5d0:	2201      	movs	r2, #1
 800e5d2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	3b01      	subs	r3, #1
 800e5d8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d1f1      	bne.n	800e5c4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800e5e0:	4b12      	ldr	r3, [pc, #72]	; (800e62c <xTaskResumeAll+0x130>)
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e5e6:	4b10      	ldr	r3, [pc, #64]	; (800e628 <xTaskResumeAll+0x12c>)
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d009      	beq.n	800e602 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e5ee:	2301      	movs	r3, #1
 800e5f0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e5f2:	4b0f      	ldr	r3, [pc, #60]	; (800e630 <xTaskResumeAll+0x134>)
 800e5f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e5f8:	601a      	str	r2, [r3, #0]
 800e5fa:	f3bf 8f4f 	dsb	sy
 800e5fe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e602:	f001 fa09 	bl	800fa18 <vPortExitCritical>

	return xAlreadyYielded;
 800e606:	68bb      	ldr	r3, [r7, #8]
}
 800e608:	4618      	mov	r0, r3
 800e60a:	3710      	adds	r7, #16
 800e60c:	46bd      	mov	sp, r7
 800e60e:	bd80      	pop	{r7, pc}
 800e610:	2000126c 	.word	0x2000126c
 800e614:	20001244 	.word	0x20001244
 800e618:	20001204 	.word	0x20001204
 800e61c:	2000124c 	.word	0x2000124c
 800e620:	20000d74 	.word	0x20000d74
 800e624:	20000d70 	.word	0x20000d70
 800e628:	20001258 	.word	0x20001258
 800e62c:	20001254 	.word	0x20001254
 800e630:	e000ed04 	.word	0xe000ed04

0800e634 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e634:	b480      	push	{r7}
 800e636:	b083      	sub	sp, #12
 800e638:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e63a:	4b05      	ldr	r3, [pc, #20]	; (800e650 <xTaskGetTickCount+0x1c>)
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e640:	687b      	ldr	r3, [r7, #4]
}
 800e642:	4618      	mov	r0, r3
 800e644:	370c      	adds	r7, #12
 800e646:	46bd      	mov	sp, r7
 800e648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e64c:	4770      	bx	lr
 800e64e:	bf00      	nop
 800e650:	20001248 	.word	0x20001248

0800e654 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e654:	b580      	push	{r7, lr}
 800e656:	b086      	sub	sp, #24
 800e658:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e65a:	2300      	movs	r3, #0
 800e65c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e65e:	4b4e      	ldr	r3, [pc, #312]	; (800e798 <xTaskIncrementTick+0x144>)
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	2b00      	cmp	r3, #0
 800e664:	f040 8088 	bne.w	800e778 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e668:	4b4c      	ldr	r3, [pc, #304]	; (800e79c <xTaskIncrementTick+0x148>)
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	3301      	adds	r3, #1
 800e66e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e670:	4a4a      	ldr	r2, [pc, #296]	; (800e79c <xTaskIncrementTick+0x148>)
 800e672:	693b      	ldr	r3, [r7, #16]
 800e674:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e676:	693b      	ldr	r3, [r7, #16]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d11f      	bne.n	800e6bc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800e67c:	4b48      	ldr	r3, [pc, #288]	; (800e7a0 <xTaskIncrementTick+0x14c>)
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	2b00      	cmp	r3, #0
 800e684:	d009      	beq.n	800e69a <xTaskIncrementTick+0x46>
 800e686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e68a:	f383 8811 	msr	BASEPRI, r3
 800e68e:	f3bf 8f6f 	isb	sy
 800e692:	f3bf 8f4f 	dsb	sy
 800e696:	603b      	str	r3, [r7, #0]
 800e698:	e7fe      	b.n	800e698 <xTaskIncrementTick+0x44>
 800e69a:	4b41      	ldr	r3, [pc, #260]	; (800e7a0 <xTaskIncrementTick+0x14c>)
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	60fb      	str	r3, [r7, #12]
 800e6a0:	4b40      	ldr	r3, [pc, #256]	; (800e7a4 <xTaskIncrementTick+0x150>)
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	4a3e      	ldr	r2, [pc, #248]	; (800e7a0 <xTaskIncrementTick+0x14c>)
 800e6a6:	6013      	str	r3, [r2, #0]
 800e6a8:	4a3e      	ldr	r2, [pc, #248]	; (800e7a4 <xTaskIncrementTick+0x150>)
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	6013      	str	r3, [r2, #0]
 800e6ae:	4b3e      	ldr	r3, [pc, #248]	; (800e7a8 <xTaskIncrementTick+0x154>)
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	3301      	adds	r3, #1
 800e6b4:	4a3c      	ldr	r2, [pc, #240]	; (800e7a8 <xTaskIncrementTick+0x154>)
 800e6b6:	6013      	str	r3, [r2, #0]
 800e6b8:	f000 fae0 	bl	800ec7c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e6bc:	4b3b      	ldr	r3, [pc, #236]	; (800e7ac <xTaskIncrementTick+0x158>)
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	693a      	ldr	r2, [r7, #16]
 800e6c2:	429a      	cmp	r2, r3
 800e6c4:	d349      	bcc.n	800e75a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e6c6:	4b36      	ldr	r3, [pc, #216]	; (800e7a0 <xTaskIncrementTick+0x14c>)
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d104      	bne.n	800e6da <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e6d0:	4b36      	ldr	r3, [pc, #216]	; (800e7ac <xTaskIncrementTick+0x158>)
 800e6d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e6d6:	601a      	str	r2, [r3, #0]
					break;
 800e6d8:	e03f      	b.n	800e75a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e6da:	4b31      	ldr	r3, [pc, #196]	; (800e7a0 <xTaskIncrementTick+0x14c>)
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	68db      	ldr	r3, [r3, #12]
 800e6e0:	68db      	ldr	r3, [r3, #12]
 800e6e2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e6e4:	68bb      	ldr	r3, [r7, #8]
 800e6e6:	685b      	ldr	r3, [r3, #4]
 800e6e8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e6ea:	693a      	ldr	r2, [r7, #16]
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	429a      	cmp	r2, r3
 800e6f0:	d203      	bcs.n	800e6fa <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e6f2:	4a2e      	ldr	r2, [pc, #184]	; (800e7ac <xTaskIncrementTick+0x158>)
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e6f8:	e02f      	b.n	800e75a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e6fa:	68bb      	ldr	r3, [r7, #8]
 800e6fc:	3304      	adds	r3, #4
 800e6fe:	4618      	mov	r0, r3
 800e700:	f7fe fe58 	bl	800d3b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e704:	68bb      	ldr	r3, [r7, #8]
 800e706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d004      	beq.n	800e716 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e70c:	68bb      	ldr	r3, [r7, #8]
 800e70e:	3318      	adds	r3, #24
 800e710:	4618      	mov	r0, r3
 800e712:	f7fe fe4f 	bl	800d3b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e716:	68bb      	ldr	r3, [r7, #8]
 800e718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e71a:	4b25      	ldr	r3, [pc, #148]	; (800e7b0 <xTaskIncrementTick+0x15c>)
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	429a      	cmp	r2, r3
 800e720:	d903      	bls.n	800e72a <xTaskIncrementTick+0xd6>
 800e722:	68bb      	ldr	r3, [r7, #8]
 800e724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e726:	4a22      	ldr	r2, [pc, #136]	; (800e7b0 <xTaskIncrementTick+0x15c>)
 800e728:	6013      	str	r3, [r2, #0]
 800e72a:	68bb      	ldr	r3, [r7, #8]
 800e72c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e72e:	4613      	mov	r3, r2
 800e730:	009b      	lsls	r3, r3, #2
 800e732:	4413      	add	r3, r2
 800e734:	009b      	lsls	r3, r3, #2
 800e736:	4a1f      	ldr	r2, [pc, #124]	; (800e7b4 <xTaskIncrementTick+0x160>)
 800e738:	441a      	add	r2, r3
 800e73a:	68bb      	ldr	r3, [r7, #8]
 800e73c:	3304      	adds	r3, #4
 800e73e:	4619      	mov	r1, r3
 800e740:	4610      	mov	r0, r2
 800e742:	f7fe fdda 	bl	800d2fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e746:	68bb      	ldr	r3, [r7, #8]
 800e748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e74a:	4b1b      	ldr	r3, [pc, #108]	; (800e7b8 <xTaskIncrementTick+0x164>)
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e750:	429a      	cmp	r2, r3
 800e752:	d3b8      	bcc.n	800e6c6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800e754:	2301      	movs	r3, #1
 800e756:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e758:	e7b5      	b.n	800e6c6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e75a:	4b17      	ldr	r3, [pc, #92]	; (800e7b8 <xTaskIncrementTick+0x164>)
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e760:	4914      	ldr	r1, [pc, #80]	; (800e7b4 <xTaskIncrementTick+0x160>)
 800e762:	4613      	mov	r3, r2
 800e764:	009b      	lsls	r3, r3, #2
 800e766:	4413      	add	r3, r2
 800e768:	009b      	lsls	r3, r3, #2
 800e76a:	440b      	add	r3, r1
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	2b01      	cmp	r3, #1
 800e770:	d907      	bls.n	800e782 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800e772:	2301      	movs	r3, #1
 800e774:	617b      	str	r3, [r7, #20]
 800e776:	e004      	b.n	800e782 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800e778:	4b10      	ldr	r3, [pc, #64]	; (800e7bc <xTaskIncrementTick+0x168>)
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	3301      	adds	r3, #1
 800e77e:	4a0f      	ldr	r2, [pc, #60]	; (800e7bc <xTaskIncrementTick+0x168>)
 800e780:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800e782:	4b0f      	ldr	r3, [pc, #60]	; (800e7c0 <xTaskIncrementTick+0x16c>)
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d001      	beq.n	800e78e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800e78a:	2301      	movs	r3, #1
 800e78c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800e78e:	697b      	ldr	r3, [r7, #20]
}
 800e790:	4618      	mov	r0, r3
 800e792:	3718      	adds	r7, #24
 800e794:	46bd      	mov	sp, r7
 800e796:	bd80      	pop	{r7, pc}
 800e798:	2000126c 	.word	0x2000126c
 800e79c:	20001248 	.word	0x20001248
 800e7a0:	200011fc 	.word	0x200011fc
 800e7a4:	20001200 	.word	0x20001200
 800e7a8:	2000125c 	.word	0x2000125c
 800e7ac:	20001264 	.word	0x20001264
 800e7b0:	2000124c 	.word	0x2000124c
 800e7b4:	20000d74 	.word	0x20000d74
 800e7b8:	20000d70 	.word	0x20000d70
 800e7bc:	20001254 	.word	0x20001254
 800e7c0:	20001258 	.word	0x20001258

0800e7c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b084      	sub	sp, #16
 800e7c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e7ca:	4b33      	ldr	r3, [pc, #204]	; (800e898 <vTaskSwitchContext+0xd4>)
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d003      	beq.n	800e7da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e7d2:	4b32      	ldr	r3, [pc, #200]	; (800e89c <vTaskSwitchContext+0xd8>)
 800e7d4:	2201      	movs	r2, #1
 800e7d6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e7d8:	e059      	b.n	800e88e <vTaskSwitchContext+0xca>
		xYieldPending = pdFALSE;
 800e7da:	4b30      	ldr	r3, [pc, #192]	; (800e89c <vTaskSwitchContext+0xd8>)
 800e7dc:	2200      	movs	r2, #0
 800e7de:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800e7e0:	f7f1 fe8f 	bl	8000502 <getRunTimeCounterValue>
 800e7e4:	4602      	mov	r2, r0
 800e7e6:	4b2e      	ldr	r3, [pc, #184]	; (800e8a0 <vTaskSwitchContext+0xdc>)
 800e7e8:	601a      	str	r2, [r3, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800e7ea:	4b2d      	ldr	r3, [pc, #180]	; (800e8a0 <vTaskSwitchContext+0xdc>)
 800e7ec:	681a      	ldr	r2, [r3, #0]
 800e7ee:	4b2d      	ldr	r3, [pc, #180]	; (800e8a4 <vTaskSwitchContext+0xe0>)
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	429a      	cmp	r2, r3
 800e7f4:	d909      	bls.n	800e80a <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800e7f6:	4b2c      	ldr	r3, [pc, #176]	; (800e8a8 <vTaskSwitchContext+0xe4>)
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800e7fc:	4a28      	ldr	r2, [pc, #160]	; (800e8a0 <vTaskSwitchContext+0xdc>)
 800e7fe:	6810      	ldr	r0, [r2, #0]
 800e800:	4a28      	ldr	r2, [pc, #160]	; (800e8a4 <vTaskSwitchContext+0xe0>)
 800e802:	6812      	ldr	r2, [r2, #0]
 800e804:	1a82      	subs	r2, r0, r2
 800e806:	440a      	add	r2, r1
 800e808:	659a      	str	r2, [r3, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 800e80a:	4b25      	ldr	r3, [pc, #148]	; (800e8a0 <vTaskSwitchContext+0xdc>)
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	4a25      	ldr	r2, [pc, #148]	; (800e8a4 <vTaskSwitchContext+0xe0>)
 800e810:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e812:	4b26      	ldr	r3, [pc, #152]	; (800e8ac <vTaskSwitchContext+0xe8>)
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	60fb      	str	r3, [r7, #12]
 800e818:	e00f      	b.n	800e83a <vTaskSwitchContext+0x76>
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d109      	bne.n	800e834 <vTaskSwitchContext+0x70>
 800e820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e824:	f383 8811 	msr	BASEPRI, r3
 800e828:	f3bf 8f6f 	isb	sy
 800e82c:	f3bf 8f4f 	dsb	sy
 800e830:	607b      	str	r3, [r7, #4]
 800e832:	e7fe      	b.n	800e832 <vTaskSwitchContext+0x6e>
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	3b01      	subs	r3, #1
 800e838:	60fb      	str	r3, [r7, #12]
 800e83a:	491d      	ldr	r1, [pc, #116]	; (800e8b0 <vTaskSwitchContext+0xec>)
 800e83c:	68fa      	ldr	r2, [r7, #12]
 800e83e:	4613      	mov	r3, r2
 800e840:	009b      	lsls	r3, r3, #2
 800e842:	4413      	add	r3, r2
 800e844:	009b      	lsls	r3, r3, #2
 800e846:	440b      	add	r3, r1
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d0e5      	beq.n	800e81a <vTaskSwitchContext+0x56>
 800e84e:	68fa      	ldr	r2, [r7, #12]
 800e850:	4613      	mov	r3, r2
 800e852:	009b      	lsls	r3, r3, #2
 800e854:	4413      	add	r3, r2
 800e856:	009b      	lsls	r3, r3, #2
 800e858:	4a15      	ldr	r2, [pc, #84]	; (800e8b0 <vTaskSwitchContext+0xec>)
 800e85a:	4413      	add	r3, r2
 800e85c:	60bb      	str	r3, [r7, #8]
 800e85e:	68bb      	ldr	r3, [r7, #8]
 800e860:	685b      	ldr	r3, [r3, #4]
 800e862:	685a      	ldr	r2, [r3, #4]
 800e864:	68bb      	ldr	r3, [r7, #8]
 800e866:	605a      	str	r2, [r3, #4]
 800e868:	68bb      	ldr	r3, [r7, #8]
 800e86a:	685a      	ldr	r2, [r3, #4]
 800e86c:	68bb      	ldr	r3, [r7, #8]
 800e86e:	3308      	adds	r3, #8
 800e870:	429a      	cmp	r2, r3
 800e872:	d104      	bne.n	800e87e <vTaskSwitchContext+0xba>
 800e874:	68bb      	ldr	r3, [r7, #8]
 800e876:	685b      	ldr	r3, [r3, #4]
 800e878:	685a      	ldr	r2, [r3, #4]
 800e87a:	68bb      	ldr	r3, [r7, #8]
 800e87c:	605a      	str	r2, [r3, #4]
 800e87e:	68bb      	ldr	r3, [r7, #8]
 800e880:	685b      	ldr	r3, [r3, #4]
 800e882:	68db      	ldr	r3, [r3, #12]
 800e884:	4a08      	ldr	r2, [pc, #32]	; (800e8a8 <vTaskSwitchContext+0xe4>)
 800e886:	6013      	str	r3, [r2, #0]
 800e888:	4a08      	ldr	r2, [pc, #32]	; (800e8ac <vTaskSwitchContext+0xe8>)
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	6013      	str	r3, [r2, #0]
}
 800e88e:	bf00      	nop
 800e890:	3710      	adds	r7, #16
 800e892:	46bd      	mov	sp, r7
 800e894:	bd80      	pop	{r7, pc}
 800e896:	bf00      	nop
 800e898:	2000126c 	.word	0x2000126c
 800e89c:	20001258 	.word	0x20001258
 800e8a0:	20001274 	.word	0x20001274
 800e8a4:	20001270 	.word	0x20001270
 800e8a8:	20000d70 	.word	0x20000d70
 800e8ac:	2000124c 	.word	0x2000124c
 800e8b0:	20000d74 	.word	0x20000d74

0800e8b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b084      	sub	sp, #16
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	6078      	str	r0, [r7, #4]
 800e8bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d109      	bne.n	800e8d8 <vTaskPlaceOnEventList+0x24>
 800e8c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8c8:	f383 8811 	msr	BASEPRI, r3
 800e8cc:	f3bf 8f6f 	isb	sy
 800e8d0:	f3bf 8f4f 	dsb	sy
 800e8d4:	60fb      	str	r3, [r7, #12]
 800e8d6:	e7fe      	b.n	800e8d6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e8d8:	4b07      	ldr	r3, [pc, #28]	; (800e8f8 <vTaskPlaceOnEventList+0x44>)
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	3318      	adds	r3, #24
 800e8de:	4619      	mov	r1, r3
 800e8e0:	6878      	ldr	r0, [r7, #4]
 800e8e2:	f7fe fd2e 	bl	800d342 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e8e6:	2101      	movs	r1, #1
 800e8e8:	6838      	ldr	r0, [r7, #0]
 800e8ea:	f000 fba3 	bl	800f034 <prvAddCurrentTaskToDelayedList>
}
 800e8ee:	bf00      	nop
 800e8f0:	3710      	adds	r7, #16
 800e8f2:	46bd      	mov	sp, r7
 800e8f4:	bd80      	pop	{r7, pc}
 800e8f6:	bf00      	nop
 800e8f8:	20000d70 	.word	0x20000d70

0800e8fc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b086      	sub	sp, #24
 800e900:	af00      	add	r7, sp, #0
 800e902:	60f8      	str	r0, [r7, #12]
 800e904:	60b9      	str	r1, [r7, #8]
 800e906:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d109      	bne.n	800e922 <vTaskPlaceOnEventListRestricted+0x26>
 800e90e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e912:	f383 8811 	msr	BASEPRI, r3
 800e916:	f3bf 8f6f 	isb	sy
 800e91a:	f3bf 8f4f 	dsb	sy
 800e91e:	617b      	str	r3, [r7, #20]
 800e920:	e7fe      	b.n	800e920 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e922:	4b0a      	ldr	r3, [pc, #40]	; (800e94c <vTaskPlaceOnEventListRestricted+0x50>)
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	3318      	adds	r3, #24
 800e928:	4619      	mov	r1, r3
 800e92a:	68f8      	ldr	r0, [r7, #12]
 800e92c:	f7fe fce5 	bl	800d2fa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	2b00      	cmp	r3, #0
 800e934:	d002      	beq.n	800e93c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800e936:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e93a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e93c:	6879      	ldr	r1, [r7, #4]
 800e93e:	68b8      	ldr	r0, [r7, #8]
 800e940:	f000 fb78 	bl	800f034 <prvAddCurrentTaskToDelayedList>
	}
 800e944:	bf00      	nop
 800e946:	3718      	adds	r7, #24
 800e948:	46bd      	mov	sp, r7
 800e94a:	bd80      	pop	{r7, pc}
 800e94c:	20000d70 	.word	0x20000d70

0800e950 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e950:	b580      	push	{r7, lr}
 800e952:	b086      	sub	sp, #24
 800e954:	af00      	add	r7, sp, #0
 800e956:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	68db      	ldr	r3, [r3, #12]
 800e95c:	68db      	ldr	r3, [r3, #12]
 800e95e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e960:	693b      	ldr	r3, [r7, #16]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d109      	bne.n	800e97a <xTaskRemoveFromEventList+0x2a>
 800e966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e96a:	f383 8811 	msr	BASEPRI, r3
 800e96e:	f3bf 8f6f 	isb	sy
 800e972:	f3bf 8f4f 	dsb	sy
 800e976:	60fb      	str	r3, [r7, #12]
 800e978:	e7fe      	b.n	800e978 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e97a:	693b      	ldr	r3, [r7, #16]
 800e97c:	3318      	adds	r3, #24
 800e97e:	4618      	mov	r0, r3
 800e980:	f7fe fd18 	bl	800d3b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e984:	4b1d      	ldr	r3, [pc, #116]	; (800e9fc <xTaskRemoveFromEventList+0xac>)
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d11d      	bne.n	800e9c8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e98c:	693b      	ldr	r3, [r7, #16]
 800e98e:	3304      	adds	r3, #4
 800e990:	4618      	mov	r0, r3
 800e992:	f7fe fd0f 	bl	800d3b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e996:	693b      	ldr	r3, [r7, #16]
 800e998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e99a:	4b19      	ldr	r3, [pc, #100]	; (800ea00 <xTaskRemoveFromEventList+0xb0>)
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	429a      	cmp	r2, r3
 800e9a0:	d903      	bls.n	800e9aa <xTaskRemoveFromEventList+0x5a>
 800e9a2:	693b      	ldr	r3, [r7, #16]
 800e9a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9a6:	4a16      	ldr	r2, [pc, #88]	; (800ea00 <xTaskRemoveFromEventList+0xb0>)
 800e9a8:	6013      	str	r3, [r2, #0]
 800e9aa:	693b      	ldr	r3, [r7, #16]
 800e9ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9ae:	4613      	mov	r3, r2
 800e9b0:	009b      	lsls	r3, r3, #2
 800e9b2:	4413      	add	r3, r2
 800e9b4:	009b      	lsls	r3, r3, #2
 800e9b6:	4a13      	ldr	r2, [pc, #76]	; (800ea04 <xTaskRemoveFromEventList+0xb4>)
 800e9b8:	441a      	add	r2, r3
 800e9ba:	693b      	ldr	r3, [r7, #16]
 800e9bc:	3304      	adds	r3, #4
 800e9be:	4619      	mov	r1, r3
 800e9c0:	4610      	mov	r0, r2
 800e9c2:	f7fe fc9a 	bl	800d2fa <vListInsertEnd>
 800e9c6:	e005      	b.n	800e9d4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e9c8:	693b      	ldr	r3, [r7, #16]
 800e9ca:	3318      	adds	r3, #24
 800e9cc:	4619      	mov	r1, r3
 800e9ce:	480e      	ldr	r0, [pc, #56]	; (800ea08 <xTaskRemoveFromEventList+0xb8>)
 800e9d0:	f7fe fc93 	bl	800d2fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e9d4:	693b      	ldr	r3, [r7, #16]
 800e9d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9d8:	4b0c      	ldr	r3, [pc, #48]	; (800ea0c <xTaskRemoveFromEventList+0xbc>)
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9de:	429a      	cmp	r2, r3
 800e9e0:	d905      	bls.n	800e9ee <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e9e2:	2301      	movs	r3, #1
 800e9e4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e9e6:	4b0a      	ldr	r3, [pc, #40]	; (800ea10 <xTaskRemoveFromEventList+0xc0>)
 800e9e8:	2201      	movs	r2, #1
 800e9ea:	601a      	str	r2, [r3, #0]
 800e9ec:	e001      	b.n	800e9f2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e9f2:	697b      	ldr	r3, [r7, #20]
}
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	3718      	adds	r7, #24
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	bd80      	pop	{r7, pc}
 800e9fc:	2000126c 	.word	0x2000126c
 800ea00:	2000124c 	.word	0x2000124c
 800ea04:	20000d74 	.word	0x20000d74
 800ea08:	20001204 	.word	0x20001204
 800ea0c:	20000d70 	.word	0x20000d70
 800ea10:	20001258 	.word	0x20001258

0800ea14 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ea14:	b480      	push	{r7}
 800ea16:	b083      	sub	sp, #12
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ea1c:	4b06      	ldr	r3, [pc, #24]	; (800ea38 <vTaskInternalSetTimeOutState+0x24>)
 800ea1e:	681a      	ldr	r2, [r3, #0]
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ea24:	4b05      	ldr	r3, [pc, #20]	; (800ea3c <vTaskInternalSetTimeOutState+0x28>)
 800ea26:	681a      	ldr	r2, [r3, #0]
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	605a      	str	r2, [r3, #4]
}
 800ea2c:	bf00      	nop
 800ea2e:	370c      	adds	r7, #12
 800ea30:	46bd      	mov	sp, r7
 800ea32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea36:	4770      	bx	lr
 800ea38:	2000125c 	.word	0x2000125c
 800ea3c:	20001248 	.word	0x20001248

0800ea40 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b088      	sub	sp, #32
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	6078      	str	r0, [r7, #4]
 800ea48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d109      	bne.n	800ea64 <xTaskCheckForTimeOut+0x24>
 800ea50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea54:	f383 8811 	msr	BASEPRI, r3
 800ea58:	f3bf 8f6f 	isb	sy
 800ea5c:	f3bf 8f4f 	dsb	sy
 800ea60:	613b      	str	r3, [r7, #16]
 800ea62:	e7fe      	b.n	800ea62 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800ea64:	683b      	ldr	r3, [r7, #0]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d109      	bne.n	800ea7e <xTaskCheckForTimeOut+0x3e>
 800ea6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea6e:	f383 8811 	msr	BASEPRI, r3
 800ea72:	f3bf 8f6f 	isb	sy
 800ea76:	f3bf 8f4f 	dsb	sy
 800ea7a:	60fb      	str	r3, [r7, #12]
 800ea7c:	e7fe      	b.n	800ea7c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800ea7e:	f000 ff9d 	bl	800f9bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ea82:	4b1d      	ldr	r3, [pc, #116]	; (800eaf8 <xTaskCheckForTimeOut+0xb8>)
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	685b      	ldr	r3, [r3, #4]
 800ea8c:	69ba      	ldr	r2, [r7, #24]
 800ea8e:	1ad3      	subs	r3, r2, r3
 800ea90:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ea92:	683b      	ldr	r3, [r7, #0]
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ea9a:	d102      	bne.n	800eaa2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ea9c:	2300      	movs	r3, #0
 800ea9e:	61fb      	str	r3, [r7, #28]
 800eaa0:	e023      	b.n	800eaea <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	681a      	ldr	r2, [r3, #0]
 800eaa6:	4b15      	ldr	r3, [pc, #84]	; (800eafc <xTaskCheckForTimeOut+0xbc>)
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	429a      	cmp	r2, r3
 800eaac:	d007      	beq.n	800eabe <xTaskCheckForTimeOut+0x7e>
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	685b      	ldr	r3, [r3, #4]
 800eab2:	69ba      	ldr	r2, [r7, #24]
 800eab4:	429a      	cmp	r2, r3
 800eab6:	d302      	bcc.n	800eabe <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800eab8:	2301      	movs	r3, #1
 800eaba:	61fb      	str	r3, [r7, #28]
 800eabc:	e015      	b.n	800eaea <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800eabe:	683b      	ldr	r3, [r7, #0]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	697a      	ldr	r2, [r7, #20]
 800eac4:	429a      	cmp	r2, r3
 800eac6:	d20b      	bcs.n	800eae0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800eac8:	683b      	ldr	r3, [r7, #0]
 800eaca:	681a      	ldr	r2, [r3, #0]
 800eacc:	697b      	ldr	r3, [r7, #20]
 800eace:	1ad2      	subs	r2, r2, r3
 800ead0:	683b      	ldr	r3, [r7, #0]
 800ead2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ead4:	6878      	ldr	r0, [r7, #4]
 800ead6:	f7ff ff9d 	bl	800ea14 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800eada:	2300      	movs	r3, #0
 800eadc:	61fb      	str	r3, [r7, #28]
 800eade:	e004      	b.n	800eaea <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800eae0:	683b      	ldr	r3, [r7, #0]
 800eae2:	2200      	movs	r2, #0
 800eae4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800eae6:	2301      	movs	r3, #1
 800eae8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800eaea:	f000 ff95 	bl	800fa18 <vPortExitCritical>

	return xReturn;
 800eaee:	69fb      	ldr	r3, [r7, #28]
}
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	3720      	adds	r7, #32
 800eaf4:	46bd      	mov	sp, r7
 800eaf6:	bd80      	pop	{r7, pc}
 800eaf8:	20001248 	.word	0x20001248
 800eafc:	2000125c 	.word	0x2000125c

0800eb00 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800eb00:	b480      	push	{r7}
 800eb02:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800eb04:	4b03      	ldr	r3, [pc, #12]	; (800eb14 <vTaskMissedYield+0x14>)
 800eb06:	2201      	movs	r2, #1
 800eb08:	601a      	str	r2, [r3, #0]
}
 800eb0a:	bf00      	nop
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb12:	4770      	bx	lr
 800eb14:	20001258 	.word	0x20001258

0800eb18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b082      	sub	sp, #8
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800eb20:	f000 f852 	bl	800ebc8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800eb24:	4b06      	ldr	r3, [pc, #24]	; (800eb40 <prvIdleTask+0x28>)
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	2b01      	cmp	r3, #1
 800eb2a:	d9f9      	bls.n	800eb20 <prvIdleTask+0x8>
			{
				taskYIELD();
 800eb2c:	4b05      	ldr	r3, [pc, #20]	; (800eb44 <prvIdleTask+0x2c>)
 800eb2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb32:	601a      	str	r2, [r3, #0]
 800eb34:	f3bf 8f4f 	dsb	sy
 800eb38:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800eb3c:	e7f0      	b.n	800eb20 <prvIdleTask+0x8>
 800eb3e:	bf00      	nop
 800eb40:	20000d74 	.word	0x20000d74
 800eb44:	e000ed04 	.word	0xe000ed04

0800eb48 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	b082      	sub	sp, #8
 800eb4c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eb4e:	2300      	movs	r3, #0
 800eb50:	607b      	str	r3, [r7, #4]
 800eb52:	e00c      	b.n	800eb6e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800eb54:	687a      	ldr	r2, [r7, #4]
 800eb56:	4613      	mov	r3, r2
 800eb58:	009b      	lsls	r3, r3, #2
 800eb5a:	4413      	add	r3, r2
 800eb5c:	009b      	lsls	r3, r3, #2
 800eb5e:	4a12      	ldr	r2, [pc, #72]	; (800eba8 <prvInitialiseTaskLists+0x60>)
 800eb60:	4413      	add	r3, r2
 800eb62:	4618      	mov	r0, r3
 800eb64:	f7fe fb9c 	bl	800d2a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	3301      	adds	r3, #1
 800eb6c:	607b      	str	r3, [r7, #4]
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	2b37      	cmp	r3, #55	; 0x37
 800eb72:	d9ef      	bls.n	800eb54 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800eb74:	480d      	ldr	r0, [pc, #52]	; (800ebac <prvInitialiseTaskLists+0x64>)
 800eb76:	f7fe fb93 	bl	800d2a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800eb7a:	480d      	ldr	r0, [pc, #52]	; (800ebb0 <prvInitialiseTaskLists+0x68>)
 800eb7c:	f7fe fb90 	bl	800d2a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800eb80:	480c      	ldr	r0, [pc, #48]	; (800ebb4 <prvInitialiseTaskLists+0x6c>)
 800eb82:	f7fe fb8d 	bl	800d2a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800eb86:	480c      	ldr	r0, [pc, #48]	; (800ebb8 <prvInitialiseTaskLists+0x70>)
 800eb88:	f7fe fb8a 	bl	800d2a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800eb8c:	480b      	ldr	r0, [pc, #44]	; (800ebbc <prvInitialiseTaskLists+0x74>)
 800eb8e:	f7fe fb87 	bl	800d2a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800eb92:	4b0b      	ldr	r3, [pc, #44]	; (800ebc0 <prvInitialiseTaskLists+0x78>)
 800eb94:	4a05      	ldr	r2, [pc, #20]	; (800ebac <prvInitialiseTaskLists+0x64>)
 800eb96:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800eb98:	4b0a      	ldr	r3, [pc, #40]	; (800ebc4 <prvInitialiseTaskLists+0x7c>)
 800eb9a:	4a05      	ldr	r2, [pc, #20]	; (800ebb0 <prvInitialiseTaskLists+0x68>)
 800eb9c:	601a      	str	r2, [r3, #0]
}
 800eb9e:	bf00      	nop
 800eba0:	3708      	adds	r7, #8
 800eba2:	46bd      	mov	sp, r7
 800eba4:	bd80      	pop	{r7, pc}
 800eba6:	bf00      	nop
 800eba8:	20000d74 	.word	0x20000d74
 800ebac:	200011d4 	.word	0x200011d4
 800ebb0:	200011e8 	.word	0x200011e8
 800ebb4:	20001204 	.word	0x20001204
 800ebb8:	20001218 	.word	0x20001218
 800ebbc:	20001230 	.word	0x20001230
 800ebc0:	200011fc 	.word	0x200011fc
 800ebc4:	20001200 	.word	0x20001200

0800ebc8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	b082      	sub	sp, #8
 800ebcc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ebce:	e019      	b.n	800ec04 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ebd0:	f000 fef4 	bl	800f9bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ebd4:	4b0f      	ldr	r3, [pc, #60]	; (800ec14 <prvCheckTasksWaitingTermination+0x4c>)
 800ebd6:	68db      	ldr	r3, [r3, #12]
 800ebd8:	68db      	ldr	r3, [r3, #12]
 800ebda:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	3304      	adds	r3, #4
 800ebe0:	4618      	mov	r0, r3
 800ebe2:	f7fe fbe7 	bl	800d3b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ebe6:	4b0c      	ldr	r3, [pc, #48]	; (800ec18 <prvCheckTasksWaitingTermination+0x50>)
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	3b01      	subs	r3, #1
 800ebec:	4a0a      	ldr	r2, [pc, #40]	; (800ec18 <prvCheckTasksWaitingTermination+0x50>)
 800ebee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ebf0:	4b0a      	ldr	r3, [pc, #40]	; (800ec1c <prvCheckTasksWaitingTermination+0x54>)
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	3b01      	subs	r3, #1
 800ebf6:	4a09      	ldr	r2, [pc, #36]	; (800ec1c <prvCheckTasksWaitingTermination+0x54>)
 800ebf8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ebfa:	f000 ff0d 	bl	800fa18 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ebfe:	6878      	ldr	r0, [r7, #4]
 800ec00:	f000 f80e 	bl	800ec20 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ec04:	4b05      	ldr	r3, [pc, #20]	; (800ec1c <prvCheckTasksWaitingTermination+0x54>)
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d1e1      	bne.n	800ebd0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ec0c:	bf00      	nop
 800ec0e:	3708      	adds	r7, #8
 800ec10:	46bd      	mov	sp, r7
 800ec12:	bd80      	pop	{r7, pc}
 800ec14:	20001218 	.word	0x20001218
 800ec18:	20001244 	.word	0x20001244
 800ec1c:	2000122c 	.word	0x2000122c

0800ec20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ec20:	b580      	push	{r7, lr}
 800ec22:	b084      	sub	sp, #16
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d108      	bne.n	800ec44 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec36:	4618      	mov	r0, r3
 800ec38:	f001 f89c 	bl	800fd74 <vPortFree>
				vPortFree( pxTCB );
 800ec3c:	6878      	ldr	r0, [r7, #4]
 800ec3e:	f001 f899 	bl	800fd74 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ec42:	e017      	b.n	800ec74 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800ec4a:	2b01      	cmp	r3, #1
 800ec4c:	d103      	bne.n	800ec56 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ec4e:	6878      	ldr	r0, [r7, #4]
 800ec50:	f001 f890 	bl	800fd74 <vPortFree>
	}
 800ec54:	e00e      	b.n	800ec74 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800ec5c:	2b02      	cmp	r3, #2
 800ec5e:	d009      	beq.n	800ec74 <prvDeleteTCB+0x54>
 800ec60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec64:	f383 8811 	msr	BASEPRI, r3
 800ec68:	f3bf 8f6f 	isb	sy
 800ec6c:	f3bf 8f4f 	dsb	sy
 800ec70:	60fb      	str	r3, [r7, #12]
 800ec72:	e7fe      	b.n	800ec72 <prvDeleteTCB+0x52>
	}
 800ec74:	bf00      	nop
 800ec76:	3710      	adds	r7, #16
 800ec78:	46bd      	mov	sp, r7
 800ec7a:	bd80      	pop	{r7, pc}

0800ec7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ec7c:	b480      	push	{r7}
 800ec7e:	b083      	sub	sp, #12
 800ec80:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ec82:	4b0c      	ldr	r3, [pc, #48]	; (800ecb4 <prvResetNextTaskUnblockTime+0x38>)
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d104      	bne.n	800ec96 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ec8c:	4b0a      	ldr	r3, [pc, #40]	; (800ecb8 <prvResetNextTaskUnblockTime+0x3c>)
 800ec8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ec92:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ec94:	e008      	b.n	800eca8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec96:	4b07      	ldr	r3, [pc, #28]	; (800ecb4 <prvResetNextTaskUnblockTime+0x38>)
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	68db      	ldr	r3, [r3, #12]
 800ec9c:	68db      	ldr	r3, [r3, #12]
 800ec9e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	685b      	ldr	r3, [r3, #4]
 800eca4:	4a04      	ldr	r2, [pc, #16]	; (800ecb8 <prvResetNextTaskUnblockTime+0x3c>)
 800eca6:	6013      	str	r3, [r2, #0]
}
 800eca8:	bf00      	nop
 800ecaa:	370c      	adds	r7, #12
 800ecac:	46bd      	mov	sp, r7
 800ecae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb2:	4770      	bx	lr
 800ecb4:	200011fc 	.word	0x200011fc
 800ecb8:	20001264 	.word	0x20001264

0800ecbc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ecbc:	b480      	push	{r7}
 800ecbe:	b083      	sub	sp, #12
 800ecc0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ecc2:	4b0b      	ldr	r3, [pc, #44]	; (800ecf0 <xTaskGetSchedulerState+0x34>)
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d102      	bne.n	800ecd0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ecca:	2301      	movs	r3, #1
 800eccc:	607b      	str	r3, [r7, #4]
 800ecce:	e008      	b.n	800ece2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ecd0:	4b08      	ldr	r3, [pc, #32]	; (800ecf4 <xTaskGetSchedulerState+0x38>)
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d102      	bne.n	800ecde <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ecd8:	2302      	movs	r3, #2
 800ecda:	607b      	str	r3, [r7, #4]
 800ecdc:	e001      	b.n	800ece2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ecde:	2300      	movs	r3, #0
 800ece0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ece2:	687b      	ldr	r3, [r7, #4]
	}
 800ece4:	4618      	mov	r0, r3
 800ece6:	370c      	adds	r7, #12
 800ece8:	46bd      	mov	sp, r7
 800ecea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecee:	4770      	bx	lr
 800ecf0:	20001250 	.word	0x20001250
 800ecf4:	2000126c 	.word	0x2000126c

0800ecf8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ecf8:	b580      	push	{r7, lr}
 800ecfa:	b086      	sub	sp, #24
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ed04:	2300      	movs	r3, #0
 800ed06:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d054      	beq.n	800edb8 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ed0e:	4b2d      	ldr	r3, [pc, #180]	; (800edc4 <xTaskPriorityDisinherit+0xcc>)
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	693a      	ldr	r2, [r7, #16]
 800ed14:	429a      	cmp	r2, r3
 800ed16:	d009      	beq.n	800ed2c <xTaskPriorityDisinherit+0x34>
 800ed18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed1c:	f383 8811 	msr	BASEPRI, r3
 800ed20:	f3bf 8f6f 	isb	sy
 800ed24:	f3bf 8f4f 	dsb	sy
 800ed28:	60fb      	str	r3, [r7, #12]
 800ed2a:	e7fe      	b.n	800ed2a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800ed2c:	693b      	ldr	r3, [r7, #16]
 800ed2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d109      	bne.n	800ed48 <xTaskPriorityDisinherit+0x50>
 800ed34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed38:	f383 8811 	msr	BASEPRI, r3
 800ed3c:	f3bf 8f6f 	isb	sy
 800ed40:	f3bf 8f4f 	dsb	sy
 800ed44:	60bb      	str	r3, [r7, #8]
 800ed46:	e7fe      	b.n	800ed46 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800ed48:	693b      	ldr	r3, [r7, #16]
 800ed4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed4c:	1e5a      	subs	r2, r3, #1
 800ed4e:	693b      	ldr	r3, [r7, #16]
 800ed50:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ed52:	693b      	ldr	r3, [r7, #16]
 800ed54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed56:	693b      	ldr	r3, [r7, #16]
 800ed58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed5a:	429a      	cmp	r2, r3
 800ed5c:	d02c      	beq.n	800edb8 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ed5e:	693b      	ldr	r3, [r7, #16]
 800ed60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d128      	bne.n	800edb8 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ed66:	693b      	ldr	r3, [r7, #16]
 800ed68:	3304      	adds	r3, #4
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	f7fe fb22 	bl	800d3b4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ed70:	693b      	ldr	r3, [r7, #16]
 800ed72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ed74:	693b      	ldr	r3, [r7, #16]
 800ed76:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed78:	693b      	ldr	r3, [r7, #16]
 800ed7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed7c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ed80:	693b      	ldr	r3, [r7, #16]
 800ed82:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ed84:	693b      	ldr	r3, [r7, #16]
 800ed86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed88:	4b0f      	ldr	r3, [pc, #60]	; (800edc8 <xTaskPriorityDisinherit+0xd0>)
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	429a      	cmp	r2, r3
 800ed8e:	d903      	bls.n	800ed98 <xTaskPriorityDisinherit+0xa0>
 800ed90:	693b      	ldr	r3, [r7, #16]
 800ed92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed94:	4a0c      	ldr	r2, [pc, #48]	; (800edc8 <xTaskPriorityDisinherit+0xd0>)
 800ed96:	6013      	str	r3, [r2, #0]
 800ed98:	693b      	ldr	r3, [r7, #16]
 800ed9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed9c:	4613      	mov	r3, r2
 800ed9e:	009b      	lsls	r3, r3, #2
 800eda0:	4413      	add	r3, r2
 800eda2:	009b      	lsls	r3, r3, #2
 800eda4:	4a09      	ldr	r2, [pc, #36]	; (800edcc <xTaskPriorityDisinherit+0xd4>)
 800eda6:	441a      	add	r2, r3
 800eda8:	693b      	ldr	r3, [r7, #16]
 800edaa:	3304      	adds	r3, #4
 800edac:	4619      	mov	r1, r3
 800edae:	4610      	mov	r0, r2
 800edb0:	f7fe faa3 	bl	800d2fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800edb4:	2301      	movs	r3, #1
 800edb6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800edb8:	697b      	ldr	r3, [r7, #20]
	}
 800edba:	4618      	mov	r0, r3
 800edbc:	3718      	adds	r7, #24
 800edbe:	46bd      	mov	sp, r7
 800edc0:	bd80      	pop	{r7, pc}
 800edc2:	bf00      	nop
 800edc4:	20000d70 	.word	0x20000d70
 800edc8:	2000124c 	.word	0x2000124c
 800edcc:	20000d74 	.word	0x20000d74

0800edd0 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800edd0:	b580      	push	{r7, lr}
 800edd2:	b086      	sub	sp, #24
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	60f8      	str	r0, [r7, #12]
 800edd8:	60b9      	str	r1, [r7, #8]
 800edda:	607a      	str	r2, [r7, #4]
 800eddc:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800edde:	f000 fded 	bl	800f9bc <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800ede2:	4b26      	ldr	r3, [pc, #152]	; (800ee7c <xTaskNotifyWait+0xac>)
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800edea:	b2db      	uxtb	r3, r3
 800edec:	2b02      	cmp	r3, #2
 800edee:	d01a      	beq.n	800ee26 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800edf0:	4b22      	ldr	r3, [pc, #136]	; (800ee7c <xTaskNotifyWait+0xac>)
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800edf6:	68fa      	ldr	r2, [r7, #12]
 800edf8:	43d2      	mvns	r2, r2
 800edfa:	400a      	ands	r2, r1
 800edfc:	65da      	str	r2, [r3, #92]	; 0x5c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800edfe:	4b1f      	ldr	r3, [pc, #124]	; (800ee7c <xTaskNotifyWait+0xac>)
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	2201      	movs	r2, #1
 800ee04:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

				if( xTicksToWait > ( TickType_t ) 0 )
 800ee08:	683b      	ldr	r3, [r7, #0]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d00b      	beq.n	800ee26 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ee0e:	2101      	movs	r1, #1
 800ee10:	6838      	ldr	r0, [r7, #0]
 800ee12:	f000 f90f 	bl	800f034 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800ee16:	4b1a      	ldr	r3, [pc, #104]	; (800ee80 <xTaskNotifyWait+0xb0>)
 800ee18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee1c:	601a      	str	r2, [r3, #0]
 800ee1e:	f3bf 8f4f 	dsb	sy
 800ee22:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ee26:	f000 fdf7 	bl	800fa18 <vPortExitCritical>

		taskENTER_CRITICAL();
 800ee2a:	f000 fdc7 	bl	800f9bc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d004      	beq.n	800ee3e <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800ee34:	4b11      	ldr	r3, [pc, #68]	; (800ee7c <xTaskNotifyWait+0xac>)
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800ee3e:	4b0f      	ldr	r3, [pc, #60]	; (800ee7c <xTaskNotifyWait+0xac>)
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800ee46:	b2db      	uxtb	r3, r3
 800ee48:	2b02      	cmp	r3, #2
 800ee4a:	d002      	beq.n	800ee52 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800ee4c:	2300      	movs	r3, #0
 800ee4e:	617b      	str	r3, [r7, #20]
 800ee50:	e008      	b.n	800ee64 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800ee52:	4b0a      	ldr	r3, [pc, #40]	; (800ee7c <xTaskNotifyWait+0xac>)
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800ee58:	68ba      	ldr	r2, [r7, #8]
 800ee5a:	43d2      	mvns	r2, r2
 800ee5c:	400a      	ands	r2, r1
 800ee5e:	65da      	str	r2, [r3, #92]	; 0x5c
				xReturn = pdTRUE;
 800ee60:	2301      	movs	r3, #1
 800ee62:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ee64:	4b05      	ldr	r3, [pc, #20]	; (800ee7c <xTaskNotifyWait+0xac>)
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	2200      	movs	r2, #0
 800ee6a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		}
		taskEXIT_CRITICAL();
 800ee6e:	f000 fdd3 	bl	800fa18 <vPortExitCritical>

		return xReturn;
 800ee72:	697b      	ldr	r3, [r7, #20]
	}
 800ee74:	4618      	mov	r0, r3
 800ee76:	3718      	adds	r7, #24
 800ee78:	46bd      	mov	sp, r7
 800ee7a:	bd80      	pop	{r7, pc}
 800ee7c:	20000d70 	.word	0x20000d70
 800ee80:	e000ed04 	.word	0xe000ed04

0800ee84 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b08e      	sub	sp, #56	; 0x38
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	60f8      	str	r0, [r7, #12]
 800ee8c:	60b9      	str	r1, [r7, #8]
 800ee8e:	603b      	str	r3, [r7, #0]
 800ee90:	4613      	mov	r3, r2
 800ee92:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800ee94:	2301      	movs	r3, #1
 800ee96:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d109      	bne.n	800eeb2 <xTaskGenericNotifyFromISR+0x2e>
 800ee9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eea2:	f383 8811 	msr	BASEPRI, r3
 800eea6:	f3bf 8f6f 	isb	sy
 800eeaa:	f3bf 8f4f 	dsb	sy
 800eeae:	627b      	str	r3, [r7, #36]	; 0x24
 800eeb0:	e7fe      	b.n	800eeb0 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800eeb2:	f000 fe5f 	bl	800fb74 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800eeba:	f3ef 8211 	mrs	r2, BASEPRI
 800eebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eec2:	f383 8811 	msr	BASEPRI, r3
 800eec6:	f3bf 8f6f 	isb	sy
 800eeca:	f3bf 8f4f 	dsb	sy
 800eece:	623a      	str	r2, [r7, #32]
 800eed0:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800eed2:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800eed4:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800eed6:	683b      	ldr	r3, [r7, #0]
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d003      	beq.n	800eee4 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800eedc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eede:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800eee0:	683b      	ldr	r3, [r7, #0]
 800eee2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800eee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eee6:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800eeea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800eeee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eef0:	2202      	movs	r2, #2
 800eef2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

			switch( eAction )
 800eef6:	79fb      	ldrb	r3, [r7, #7]
 800eef8:	2b04      	cmp	r3, #4
 800eefa:	d829      	bhi.n	800ef50 <xTaskGenericNotifyFromISR+0xcc>
 800eefc:	a201      	add	r2, pc, #4	; (adr r2, 800ef04 <xTaskGenericNotifyFromISR+0x80>)
 800eefe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef02:	bf00      	nop
 800ef04:	0800ef6f 	.word	0x0800ef6f
 800ef08:	0800ef19 	.word	0x0800ef19
 800ef0c:	0800ef27 	.word	0x0800ef27
 800ef10:	0800ef33 	.word	0x0800ef33
 800ef14:	0800ef3b 	.word	0x0800ef3b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800ef18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef1a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ef1c:	68bb      	ldr	r3, [r7, #8]
 800ef1e:	431a      	orrs	r2, r3
 800ef20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef22:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 800ef24:	e026      	b.n	800ef74 <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800ef26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ef2a:	1c5a      	adds	r2, r3, #1
 800ef2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef2e:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 800ef30:	e020      	b.n	800ef74 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800ef32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef34:	68ba      	ldr	r2, [r7, #8]
 800ef36:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 800ef38:	e01c      	b.n	800ef74 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800ef3a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ef3e:	2b02      	cmp	r3, #2
 800ef40:	d003      	beq.n	800ef4a <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800ef42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef44:	68ba      	ldr	r2, [r7, #8]
 800ef46:	65da      	str	r2, [r3, #92]	; 0x5c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800ef48:	e014      	b.n	800ef74 <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 800ef4a:	2300      	movs	r3, #0
 800ef4c:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800ef4e:	e011      	b.n	800ef74 <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800ef50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ef54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ef58:	d00b      	beq.n	800ef72 <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 800ef5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef5e:	f383 8811 	msr	BASEPRI, r3
 800ef62:	f3bf 8f6f 	isb	sy
 800ef66:	f3bf 8f4f 	dsb	sy
 800ef6a:	61bb      	str	r3, [r7, #24]
 800ef6c:	e7fe      	b.n	800ef6c <xTaskGenericNotifyFromISR+0xe8>
					break;
 800ef6e:	bf00      	nop
 800ef70:	e000      	b.n	800ef74 <xTaskGenericNotifyFromISR+0xf0>
					break;
 800ef72:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800ef74:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ef78:	2b01      	cmp	r3, #1
 800ef7a:	d145      	bne.n	800f008 <xTaskGenericNotifyFromISR+0x184>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800ef7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d009      	beq.n	800ef98 <xTaskGenericNotifyFromISR+0x114>
 800ef84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef88:	f383 8811 	msr	BASEPRI, r3
 800ef8c:	f3bf 8f6f 	isb	sy
 800ef90:	f3bf 8f4f 	dsb	sy
 800ef94:	617b      	str	r3, [r7, #20]
 800ef96:	e7fe      	b.n	800ef96 <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ef98:	4b20      	ldr	r3, [pc, #128]	; (800f01c <xTaskGenericNotifyFromISR+0x198>)
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d11d      	bne.n	800efdc <xTaskGenericNotifyFromISR+0x158>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800efa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efa2:	3304      	adds	r3, #4
 800efa4:	4618      	mov	r0, r3
 800efa6:	f7fe fa05 	bl	800d3b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800efaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800efae:	4b1c      	ldr	r3, [pc, #112]	; (800f020 <xTaskGenericNotifyFromISR+0x19c>)
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	429a      	cmp	r2, r3
 800efb4:	d903      	bls.n	800efbe <xTaskGenericNotifyFromISR+0x13a>
 800efb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efba:	4a19      	ldr	r2, [pc, #100]	; (800f020 <xTaskGenericNotifyFromISR+0x19c>)
 800efbc:	6013      	str	r3, [r2, #0]
 800efbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800efc2:	4613      	mov	r3, r2
 800efc4:	009b      	lsls	r3, r3, #2
 800efc6:	4413      	add	r3, r2
 800efc8:	009b      	lsls	r3, r3, #2
 800efca:	4a16      	ldr	r2, [pc, #88]	; (800f024 <xTaskGenericNotifyFromISR+0x1a0>)
 800efcc:	441a      	add	r2, r3
 800efce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efd0:	3304      	adds	r3, #4
 800efd2:	4619      	mov	r1, r3
 800efd4:	4610      	mov	r0, r2
 800efd6:	f7fe f990 	bl	800d2fa <vListInsertEnd>
 800efda:	e005      	b.n	800efe8 <xTaskGenericNotifyFromISR+0x164>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800efdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efde:	3318      	adds	r3, #24
 800efe0:	4619      	mov	r1, r3
 800efe2:	4811      	ldr	r0, [pc, #68]	; (800f028 <xTaskGenericNotifyFromISR+0x1a4>)
 800efe4:	f7fe f989 	bl	800d2fa <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800efe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800efec:	4b0f      	ldr	r3, [pc, #60]	; (800f02c <xTaskGenericNotifyFromISR+0x1a8>)
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eff2:	429a      	cmp	r2, r3
 800eff4:	d908      	bls.n	800f008 <xTaskGenericNotifyFromISR+0x184>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800eff6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d002      	beq.n	800f002 <xTaskGenericNotifyFromISR+0x17e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800effc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800effe:	2201      	movs	r2, #1
 800f000:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800f002:	4b0b      	ldr	r3, [pc, #44]	; (800f030 <xTaskGenericNotifyFromISR+0x1ac>)
 800f004:	2201      	movs	r2, #1
 800f006:	601a      	str	r2, [r3, #0]
 800f008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f00a:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f00c:	693b      	ldr	r3, [r7, #16]
 800f00e:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800f012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800f014:	4618      	mov	r0, r3
 800f016:	3738      	adds	r7, #56	; 0x38
 800f018:	46bd      	mov	sp, r7
 800f01a:	bd80      	pop	{r7, pc}
 800f01c:	2000126c 	.word	0x2000126c
 800f020:	2000124c 	.word	0x2000124c
 800f024:	20000d74 	.word	0x20000d74
 800f028:	20001204 	.word	0x20001204
 800f02c:	20000d70 	.word	0x20000d70
 800f030:	20001258 	.word	0x20001258

0800f034 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f034:	b580      	push	{r7, lr}
 800f036:	b084      	sub	sp, #16
 800f038:	af00      	add	r7, sp, #0
 800f03a:	6078      	str	r0, [r7, #4]
 800f03c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f03e:	4b21      	ldr	r3, [pc, #132]	; (800f0c4 <prvAddCurrentTaskToDelayedList+0x90>)
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f044:	4b20      	ldr	r3, [pc, #128]	; (800f0c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	3304      	adds	r3, #4
 800f04a:	4618      	mov	r0, r3
 800f04c:	f7fe f9b2 	bl	800d3b4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f056:	d10a      	bne.n	800f06e <prvAddCurrentTaskToDelayedList+0x3a>
 800f058:	683b      	ldr	r3, [r7, #0]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d007      	beq.n	800f06e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f05e:	4b1a      	ldr	r3, [pc, #104]	; (800f0c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	3304      	adds	r3, #4
 800f064:	4619      	mov	r1, r3
 800f066:	4819      	ldr	r0, [pc, #100]	; (800f0cc <prvAddCurrentTaskToDelayedList+0x98>)
 800f068:	f7fe f947 	bl	800d2fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f06c:	e026      	b.n	800f0bc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f06e:	68fa      	ldr	r2, [r7, #12]
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	4413      	add	r3, r2
 800f074:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f076:	4b14      	ldr	r3, [pc, #80]	; (800f0c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	68ba      	ldr	r2, [r7, #8]
 800f07c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f07e:	68ba      	ldr	r2, [r7, #8]
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	429a      	cmp	r2, r3
 800f084:	d209      	bcs.n	800f09a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f086:	4b12      	ldr	r3, [pc, #72]	; (800f0d0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f088:	681a      	ldr	r2, [r3, #0]
 800f08a:	4b0f      	ldr	r3, [pc, #60]	; (800f0c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	3304      	adds	r3, #4
 800f090:	4619      	mov	r1, r3
 800f092:	4610      	mov	r0, r2
 800f094:	f7fe f955 	bl	800d342 <vListInsert>
}
 800f098:	e010      	b.n	800f0bc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f09a:	4b0e      	ldr	r3, [pc, #56]	; (800f0d4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f09c:	681a      	ldr	r2, [r3, #0]
 800f09e:	4b0a      	ldr	r3, [pc, #40]	; (800f0c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	3304      	adds	r3, #4
 800f0a4:	4619      	mov	r1, r3
 800f0a6:	4610      	mov	r0, r2
 800f0a8:	f7fe f94b 	bl	800d342 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f0ac:	4b0a      	ldr	r3, [pc, #40]	; (800f0d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	68ba      	ldr	r2, [r7, #8]
 800f0b2:	429a      	cmp	r2, r3
 800f0b4:	d202      	bcs.n	800f0bc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f0b6:	4a08      	ldr	r2, [pc, #32]	; (800f0d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f0b8:	68bb      	ldr	r3, [r7, #8]
 800f0ba:	6013      	str	r3, [r2, #0]
}
 800f0bc:	bf00      	nop
 800f0be:	3710      	adds	r7, #16
 800f0c0:	46bd      	mov	sp, r7
 800f0c2:	bd80      	pop	{r7, pc}
 800f0c4:	20001248 	.word	0x20001248
 800f0c8:	20000d70 	.word	0x20000d70
 800f0cc:	20001230 	.word	0x20001230
 800f0d0:	20001200 	.word	0x20001200
 800f0d4:	200011fc 	.word	0x200011fc
 800f0d8:	20001264 	.word	0x20001264

0800f0dc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b08a      	sub	sp, #40	; 0x28
 800f0e0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f0e6:	f000 faff 	bl	800f6e8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f0ea:	4b1c      	ldr	r3, [pc, #112]	; (800f15c <xTimerCreateTimerTask+0x80>)
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d021      	beq.n	800f136 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f0fa:	1d3a      	adds	r2, r7, #4
 800f0fc:	f107 0108 	add.w	r1, r7, #8
 800f100:	f107 030c 	add.w	r3, r7, #12
 800f104:	4618      	mov	r0, r3
 800f106:	f7fe f8b1 	bl	800d26c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f10a:	6879      	ldr	r1, [r7, #4]
 800f10c:	68bb      	ldr	r3, [r7, #8]
 800f10e:	68fa      	ldr	r2, [r7, #12]
 800f110:	9202      	str	r2, [sp, #8]
 800f112:	9301      	str	r3, [sp, #4]
 800f114:	2302      	movs	r3, #2
 800f116:	9300      	str	r3, [sp, #0]
 800f118:	2300      	movs	r3, #0
 800f11a:	460a      	mov	r2, r1
 800f11c:	4910      	ldr	r1, [pc, #64]	; (800f160 <xTimerCreateTimerTask+0x84>)
 800f11e:	4811      	ldr	r0, [pc, #68]	; (800f164 <xTimerCreateTimerTask+0x88>)
 800f120:	f7fe ff26 	bl	800df70 <xTaskCreateStatic>
 800f124:	4602      	mov	r2, r0
 800f126:	4b10      	ldr	r3, [pc, #64]	; (800f168 <xTimerCreateTimerTask+0x8c>)
 800f128:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f12a:	4b0f      	ldr	r3, [pc, #60]	; (800f168 <xTimerCreateTimerTask+0x8c>)
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d001      	beq.n	800f136 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f132:	2301      	movs	r3, #1
 800f134:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f136:	697b      	ldr	r3, [r7, #20]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d109      	bne.n	800f150 <xTimerCreateTimerTask+0x74>
	__asm volatile
 800f13c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f140:	f383 8811 	msr	BASEPRI, r3
 800f144:	f3bf 8f6f 	isb	sy
 800f148:	f3bf 8f4f 	dsb	sy
 800f14c:	613b      	str	r3, [r7, #16]
 800f14e:	e7fe      	b.n	800f14e <xTimerCreateTimerTask+0x72>
	return xReturn;
 800f150:	697b      	ldr	r3, [r7, #20]
}
 800f152:	4618      	mov	r0, r3
 800f154:	3718      	adds	r7, #24
 800f156:	46bd      	mov	sp, r7
 800f158:	bd80      	pop	{r7, pc}
 800f15a:	bf00      	nop
 800f15c:	200012a8 	.word	0x200012a8
 800f160:	08019cbc 	.word	0x08019cbc
 800f164:	0800f29d 	.word	0x0800f29d
 800f168:	200012ac 	.word	0x200012ac

0800f16c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f16c:	b580      	push	{r7, lr}
 800f16e:	b08a      	sub	sp, #40	; 0x28
 800f170:	af00      	add	r7, sp, #0
 800f172:	60f8      	str	r0, [r7, #12]
 800f174:	60b9      	str	r1, [r7, #8]
 800f176:	607a      	str	r2, [r7, #4]
 800f178:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f17a:	2300      	movs	r3, #0
 800f17c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	2b00      	cmp	r3, #0
 800f182:	d109      	bne.n	800f198 <xTimerGenericCommand+0x2c>
 800f184:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f188:	f383 8811 	msr	BASEPRI, r3
 800f18c:	f3bf 8f6f 	isb	sy
 800f190:	f3bf 8f4f 	dsb	sy
 800f194:	623b      	str	r3, [r7, #32]
 800f196:	e7fe      	b.n	800f196 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f198:	4b19      	ldr	r3, [pc, #100]	; (800f200 <xTimerGenericCommand+0x94>)
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d02a      	beq.n	800f1f6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f1a0:	68bb      	ldr	r3, [r7, #8]
 800f1a2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f1ac:	68bb      	ldr	r3, [r7, #8]
 800f1ae:	2b05      	cmp	r3, #5
 800f1b0:	dc18      	bgt.n	800f1e4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f1b2:	f7ff fd83 	bl	800ecbc <xTaskGetSchedulerState>
 800f1b6:	4603      	mov	r3, r0
 800f1b8:	2b02      	cmp	r3, #2
 800f1ba:	d109      	bne.n	800f1d0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f1bc:	4b10      	ldr	r3, [pc, #64]	; (800f200 <xTimerGenericCommand+0x94>)
 800f1be:	6818      	ldr	r0, [r3, #0]
 800f1c0:	f107 0110 	add.w	r1, r7, #16
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f1c8:	f7fe fa5c 	bl	800d684 <xQueueGenericSend>
 800f1cc:	6278      	str	r0, [r7, #36]	; 0x24
 800f1ce:	e012      	b.n	800f1f6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f1d0:	4b0b      	ldr	r3, [pc, #44]	; (800f200 <xTimerGenericCommand+0x94>)
 800f1d2:	6818      	ldr	r0, [r3, #0]
 800f1d4:	f107 0110 	add.w	r1, r7, #16
 800f1d8:	2300      	movs	r3, #0
 800f1da:	2200      	movs	r2, #0
 800f1dc:	f7fe fa52 	bl	800d684 <xQueueGenericSend>
 800f1e0:	6278      	str	r0, [r7, #36]	; 0x24
 800f1e2:	e008      	b.n	800f1f6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f1e4:	4b06      	ldr	r3, [pc, #24]	; (800f200 <xTimerGenericCommand+0x94>)
 800f1e6:	6818      	ldr	r0, [r3, #0]
 800f1e8:	f107 0110 	add.w	r1, r7, #16
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	683a      	ldr	r2, [r7, #0]
 800f1f0:	f7fe fb42 	bl	800d878 <xQueueGenericSendFromISR>
 800f1f4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f1f8:	4618      	mov	r0, r3
 800f1fa:	3728      	adds	r7, #40	; 0x28
 800f1fc:	46bd      	mov	sp, r7
 800f1fe:	bd80      	pop	{r7, pc}
 800f200:	200012a8 	.word	0x200012a8

0800f204 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f204:	b580      	push	{r7, lr}
 800f206:	b088      	sub	sp, #32
 800f208:	af02      	add	r7, sp, #8
 800f20a:	6078      	str	r0, [r7, #4]
 800f20c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f20e:	4b22      	ldr	r3, [pc, #136]	; (800f298 <prvProcessExpiredTimer+0x94>)
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	68db      	ldr	r3, [r3, #12]
 800f214:	68db      	ldr	r3, [r3, #12]
 800f216:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f218:	697b      	ldr	r3, [r7, #20]
 800f21a:	3304      	adds	r3, #4
 800f21c:	4618      	mov	r0, r3
 800f21e:	f7fe f8c9 	bl	800d3b4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f222:	697b      	ldr	r3, [r7, #20]
 800f224:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f228:	f003 0304 	and.w	r3, r3, #4
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d021      	beq.n	800f274 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f230:	697b      	ldr	r3, [r7, #20]
 800f232:	699a      	ldr	r2, [r3, #24]
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	18d1      	adds	r1, r2, r3
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	683a      	ldr	r2, [r7, #0]
 800f23c:	6978      	ldr	r0, [r7, #20]
 800f23e:	f000 f8d1 	bl	800f3e4 <prvInsertTimerInActiveList>
 800f242:	4603      	mov	r3, r0
 800f244:	2b00      	cmp	r3, #0
 800f246:	d01e      	beq.n	800f286 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f248:	2300      	movs	r3, #0
 800f24a:	9300      	str	r3, [sp, #0]
 800f24c:	2300      	movs	r3, #0
 800f24e:	687a      	ldr	r2, [r7, #4]
 800f250:	2100      	movs	r1, #0
 800f252:	6978      	ldr	r0, [r7, #20]
 800f254:	f7ff ff8a 	bl	800f16c <xTimerGenericCommand>
 800f258:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f25a:	693b      	ldr	r3, [r7, #16]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d112      	bne.n	800f286 <prvProcessExpiredTimer+0x82>
 800f260:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f264:	f383 8811 	msr	BASEPRI, r3
 800f268:	f3bf 8f6f 	isb	sy
 800f26c:	f3bf 8f4f 	dsb	sy
 800f270:	60fb      	str	r3, [r7, #12]
 800f272:	e7fe      	b.n	800f272 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f274:	697b      	ldr	r3, [r7, #20]
 800f276:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f27a:	f023 0301 	bic.w	r3, r3, #1
 800f27e:	b2da      	uxtb	r2, r3
 800f280:	697b      	ldr	r3, [r7, #20]
 800f282:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f286:	697b      	ldr	r3, [r7, #20]
 800f288:	6a1b      	ldr	r3, [r3, #32]
 800f28a:	6978      	ldr	r0, [r7, #20]
 800f28c:	4798      	blx	r3
}
 800f28e:	bf00      	nop
 800f290:	3718      	adds	r7, #24
 800f292:	46bd      	mov	sp, r7
 800f294:	bd80      	pop	{r7, pc}
 800f296:	bf00      	nop
 800f298:	200012a0 	.word	0x200012a0

0800f29c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f29c:	b580      	push	{r7, lr}
 800f29e:	b084      	sub	sp, #16
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f2a4:	f107 0308 	add.w	r3, r7, #8
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	f000 f857 	bl	800f35c <prvGetNextExpireTime>
 800f2ae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f2b0:	68bb      	ldr	r3, [r7, #8]
 800f2b2:	4619      	mov	r1, r3
 800f2b4:	68f8      	ldr	r0, [r7, #12]
 800f2b6:	f000 f803 	bl	800f2c0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f2ba:	f000 f8d5 	bl	800f468 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f2be:	e7f1      	b.n	800f2a4 <prvTimerTask+0x8>

0800f2c0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	b084      	sub	sp, #16
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	6078      	str	r0, [r7, #4]
 800f2c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f2ca:	f7ff f909 	bl	800e4e0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f2ce:	f107 0308 	add.w	r3, r7, #8
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	f000 f866 	bl	800f3a4 <prvSampleTimeNow>
 800f2d8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f2da:	68bb      	ldr	r3, [r7, #8]
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d130      	bne.n	800f342 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f2e0:	683b      	ldr	r3, [r7, #0]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d10a      	bne.n	800f2fc <prvProcessTimerOrBlockTask+0x3c>
 800f2e6:	687a      	ldr	r2, [r7, #4]
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	429a      	cmp	r2, r3
 800f2ec:	d806      	bhi.n	800f2fc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f2ee:	f7ff f905 	bl	800e4fc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f2f2:	68f9      	ldr	r1, [r7, #12]
 800f2f4:	6878      	ldr	r0, [r7, #4]
 800f2f6:	f7ff ff85 	bl	800f204 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f2fa:	e024      	b.n	800f346 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f2fc:	683b      	ldr	r3, [r7, #0]
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d008      	beq.n	800f314 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f302:	4b13      	ldr	r3, [pc, #76]	; (800f350 <prvProcessTimerOrBlockTask+0x90>)
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d101      	bne.n	800f310 <prvProcessTimerOrBlockTask+0x50>
 800f30c:	2301      	movs	r3, #1
 800f30e:	e000      	b.n	800f312 <prvProcessTimerOrBlockTask+0x52>
 800f310:	2300      	movs	r3, #0
 800f312:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f314:	4b0f      	ldr	r3, [pc, #60]	; (800f354 <prvProcessTimerOrBlockTask+0x94>)
 800f316:	6818      	ldr	r0, [r3, #0]
 800f318:	687a      	ldr	r2, [r7, #4]
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	1ad3      	subs	r3, r2, r3
 800f31e:	683a      	ldr	r2, [r7, #0]
 800f320:	4619      	mov	r1, r3
 800f322:	f7fe fdf1 	bl	800df08 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f326:	f7ff f8e9 	bl	800e4fc <xTaskResumeAll>
 800f32a:	4603      	mov	r3, r0
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d10a      	bne.n	800f346 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f330:	4b09      	ldr	r3, [pc, #36]	; (800f358 <prvProcessTimerOrBlockTask+0x98>)
 800f332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f336:	601a      	str	r2, [r3, #0]
 800f338:	f3bf 8f4f 	dsb	sy
 800f33c:	f3bf 8f6f 	isb	sy
}
 800f340:	e001      	b.n	800f346 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f342:	f7ff f8db 	bl	800e4fc <xTaskResumeAll>
}
 800f346:	bf00      	nop
 800f348:	3710      	adds	r7, #16
 800f34a:	46bd      	mov	sp, r7
 800f34c:	bd80      	pop	{r7, pc}
 800f34e:	bf00      	nop
 800f350:	200012a4 	.word	0x200012a4
 800f354:	200012a8 	.word	0x200012a8
 800f358:	e000ed04 	.word	0xe000ed04

0800f35c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f35c:	b480      	push	{r7}
 800f35e:	b085      	sub	sp, #20
 800f360:	af00      	add	r7, sp, #0
 800f362:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f364:	4b0e      	ldr	r3, [pc, #56]	; (800f3a0 <prvGetNextExpireTime+0x44>)
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d101      	bne.n	800f372 <prvGetNextExpireTime+0x16>
 800f36e:	2201      	movs	r2, #1
 800f370:	e000      	b.n	800f374 <prvGetNextExpireTime+0x18>
 800f372:	2200      	movs	r2, #0
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d105      	bne.n	800f38c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f380:	4b07      	ldr	r3, [pc, #28]	; (800f3a0 <prvGetNextExpireTime+0x44>)
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	68db      	ldr	r3, [r3, #12]
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	60fb      	str	r3, [r7, #12]
 800f38a:	e001      	b.n	800f390 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f38c:	2300      	movs	r3, #0
 800f38e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f390:	68fb      	ldr	r3, [r7, #12]
}
 800f392:	4618      	mov	r0, r3
 800f394:	3714      	adds	r7, #20
 800f396:	46bd      	mov	sp, r7
 800f398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f39c:	4770      	bx	lr
 800f39e:	bf00      	nop
 800f3a0:	200012a0 	.word	0x200012a0

0800f3a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	b084      	sub	sp, #16
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f3ac:	f7ff f942 	bl	800e634 <xTaskGetTickCount>
 800f3b0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f3b2:	4b0b      	ldr	r3, [pc, #44]	; (800f3e0 <prvSampleTimeNow+0x3c>)
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	68fa      	ldr	r2, [r7, #12]
 800f3b8:	429a      	cmp	r2, r3
 800f3ba:	d205      	bcs.n	800f3c8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f3bc:	f000 f930 	bl	800f620 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	2201      	movs	r2, #1
 800f3c4:	601a      	str	r2, [r3, #0]
 800f3c6:	e002      	b.n	800f3ce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	2200      	movs	r2, #0
 800f3cc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f3ce:	4a04      	ldr	r2, [pc, #16]	; (800f3e0 <prvSampleTimeNow+0x3c>)
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f3d4:	68fb      	ldr	r3, [r7, #12]
}
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	3710      	adds	r7, #16
 800f3da:	46bd      	mov	sp, r7
 800f3dc:	bd80      	pop	{r7, pc}
 800f3de:	bf00      	nop
 800f3e0:	200012b0 	.word	0x200012b0

0800f3e4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f3e4:	b580      	push	{r7, lr}
 800f3e6:	b086      	sub	sp, #24
 800f3e8:	af00      	add	r7, sp, #0
 800f3ea:	60f8      	str	r0, [r7, #12]
 800f3ec:	60b9      	str	r1, [r7, #8]
 800f3ee:	607a      	str	r2, [r7, #4]
 800f3f0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	68ba      	ldr	r2, [r7, #8]
 800f3fa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	68fa      	ldr	r2, [r7, #12]
 800f400:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f402:	68ba      	ldr	r2, [r7, #8]
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	429a      	cmp	r2, r3
 800f408:	d812      	bhi.n	800f430 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f40a:	687a      	ldr	r2, [r7, #4]
 800f40c:	683b      	ldr	r3, [r7, #0]
 800f40e:	1ad2      	subs	r2, r2, r3
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	699b      	ldr	r3, [r3, #24]
 800f414:	429a      	cmp	r2, r3
 800f416:	d302      	bcc.n	800f41e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f418:	2301      	movs	r3, #1
 800f41a:	617b      	str	r3, [r7, #20]
 800f41c:	e01b      	b.n	800f456 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f41e:	4b10      	ldr	r3, [pc, #64]	; (800f460 <prvInsertTimerInActiveList+0x7c>)
 800f420:	681a      	ldr	r2, [r3, #0]
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	3304      	adds	r3, #4
 800f426:	4619      	mov	r1, r3
 800f428:	4610      	mov	r0, r2
 800f42a:	f7fd ff8a 	bl	800d342 <vListInsert>
 800f42e:	e012      	b.n	800f456 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f430:	687a      	ldr	r2, [r7, #4]
 800f432:	683b      	ldr	r3, [r7, #0]
 800f434:	429a      	cmp	r2, r3
 800f436:	d206      	bcs.n	800f446 <prvInsertTimerInActiveList+0x62>
 800f438:	68ba      	ldr	r2, [r7, #8]
 800f43a:	683b      	ldr	r3, [r7, #0]
 800f43c:	429a      	cmp	r2, r3
 800f43e:	d302      	bcc.n	800f446 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f440:	2301      	movs	r3, #1
 800f442:	617b      	str	r3, [r7, #20]
 800f444:	e007      	b.n	800f456 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f446:	4b07      	ldr	r3, [pc, #28]	; (800f464 <prvInsertTimerInActiveList+0x80>)
 800f448:	681a      	ldr	r2, [r3, #0]
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	3304      	adds	r3, #4
 800f44e:	4619      	mov	r1, r3
 800f450:	4610      	mov	r0, r2
 800f452:	f7fd ff76 	bl	800d342 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f456:	697b      	ldr	r3, [r7, #20]
}
 800f458:	4618      	mov	r0, r3
 800f45a:	3718      	adds	r7, #24
 800f45c:	46bd      	mov	sp, r7
 800f45e:	bd80      	pop	{r7, pc}
 800f460:	200012a4 	.word	0x200012a4
 800f464:	200012a0 	.word	0x200012a0

0800f468 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f468:	b580      	push	{r7, lr}
 800f46a:	b08e      	sub	sp, #56	; 0x38
 800f46c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f46e:	e0c6      	b.n	800f5fe <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	2b00      	cmp	r3, #0
 800f474:	da17      	bge.n	800f4a6 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f476:	1d3b      	adds	r3, r7, #4
 800f478:	3304      	adds	r3, #4
 800f47a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f47c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d109      	bne.n	800f496 <prvProcessReceivedCommands+0x2e>
 800f482:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f486:	f383 8811 	msr	BASEPRI, r3
 800f48a:	f3bf 8f6f 	isb	sy
 800f48e:	f3bf 8f4f 	dsb	sy
 800f492:	61fb      	str	r3, [r7, #28]
 800f494:	e7fe      	b.n	800f494 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f49c:	6850      	ldr	r0, [r2, #4]
 800f49e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f4a0:	6892      	ldr	r2, [r2, #8]
 800f4a2:	4611      	mov	r1, r2
 800f4a4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	f2c0 80a7 	blt.w	800f5fc <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f4b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4b4:	695b      	ldr	r3, [r3, #20]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d004      	beq.n	800f4c4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f4ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4bc:	3304      	adds	r3, #4
 800f4be:	4618      	mov	r0, r3
 800f4c0:	f7fd ff78 	bl	800d3b4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f4c4:	463b      	mov	r3, r7
 800f4c6:	4618      	mov	r0, r3
 800f4c8:	f7ff ff6c 	bl	800f3a4 <prvSampleTimeNow>
 800f4cc:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	2b09      	cmp	r3, #9
 800f4d2:	f200 8094 	bhi.w	800f5fe <prvProcessReceivedCommands+0x196>
 800f4d6:	a201      	add	r2, pc, #4	; (adr r2, 800f4dc <prvProcessReceivedCommands+0x74>)
 800f4d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4dc:	0800f505 	.word	0x0800f505
 800f4e0:	0800f505 	.word	0x0800f505
 800f4e4:	0800f505 	.word	0x0800f505
 800f4e8:	0800f577 	.word	0x0800f577
 800f4ec:	0800f58b 	.word	0x0800f58b
 800f4f0:	0800f5d3 	.word	0x0800f5d3
 800f4f4:	0800f505 	.word	0x0800f505
 800f4f8:	0800f505 	.word	0x0800f505
 800f4fc:	0800f577 	.word	0x0800f577
 800f500:	0800f58b 	.word	0x0800f58b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f506:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f50a:	f043 0301 	orr.w	r3, r3, #1
 800f50e:	b2da      	uxtb	r2, r3
 800f510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f512:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f516:	68ba      	ldr	r2, [r7, #8]
 800f518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f51a:	699b      	ldr	r3, [r3, #24]
 800f51c:	18d1      	adds	r1, r2, r3
 800f51e:	68bb      	ldr	r3, [r7, #8]
 800f520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f522:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f524:	f7ff ff5e 	bl	800f3e4 <prvInsertTimerInActiveList>
 800f528:	4603      	mov	r3, r0
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d067      	beq.n	800f5fe <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f530:	6a1b      	ldr	r3, [r3, #32]
 800f532:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f534:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f538:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f53c:	f003 0304 	and.w	r3, r3, #4
 800f540:	2b00      	cmp	r3, #0
 800f542:	d05c      	beq.n	800f5fe <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f544:	68ba      	ldr	r2, [r7, #8]
 800f546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f548:	699b      	ldr	r3, [r3, #24]
 800f54a:	441a      	add	r2, r3
 800f54c:	2300      	movs	r3, #0
 800f54e:	9300      	str	r3, [sp, #0]
 800f550:	2300      	movs	r3, #0
 800f552:	2100      	movs	r1, #0
 800f554:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f556:	f7ff fe09 	bl	800f16c <xTimerGenericCommand>
 800f55a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f55c:	6a3b      	ldr	r3, [r7, #32]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d14d      	bne.n	800f5fe <prvProcessReceivedCommands+0x196>
 800f562:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f566:	f383 8811 	msr	BASEPRI, r3
 800f56a:	f3bf 8f6f 	isb	sy
 800f56e:	f3bf 8f4f 	dsb	sy
 800f572:	61bb      	str	r3, [r7, #24]
 800f574:	e7fe      	b.n	800f574 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f578:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f57c:	f023 0301 	bic.w	r3, r3, #1
 800f580:	b2da      	uxtb	r2, r3
 800f582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f584:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800f588:	e039      	b.n	800f5fe <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f58a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f58c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f590:	f043 0301 	orr.w	r3, r3, #1
 800f594:	b2da      	uxtb	r2, r3
 800f596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f598:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f59c:	68ba      	ldr	r2, [r7, #8]
 800f59e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5a0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f5a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5a4:	699b      	ldr	r3, [r3, #24]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d109      	bne.n	800f5be <prvProcessReceivedCommands+0x156>
 800f5aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5ae:	f383 8811 	msr	BASEPRI, r3
 800f5b2:	f3bf 8f6f 	isb	sy
 800f5b6:	f3bf 8f4f 	dsb	sy
 800f5ba:	617b      	str	r3, [r7, #20]
 800f5bc:	e7fe      	b.n	800f5bc <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f5be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5c0:	699a      	ldr	r2, [r3, #24]
 800f5c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5c4:	18d1      	adds	r1, r2, r3
 800f5c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f5ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f5cc:	f7ff ff0a 	bl	800f3e4 <prvInsertTimerInActiveList>
					break;
 800f5d0:	e015      	b.n	800f5fe <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f5d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f5d8:	f003 0302 	and.w	r3, r3, #2
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d103      	bne.n	800f5e8 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800f5e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f5e2:	f000 fbc7 	bl	800fd74 <vPortFree>
 800f5e6:	e00a      	b.n	800f5fe <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f5e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f5ee:	f023 0301 	bic.w	r3, r3, #1
 800f5f2:	b2da      	uxtb	r2, r3
 800f5f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f5fa:	e000      	b.n	800f5fe <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800f5fc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f5fe:	4b07      	ldr	r3, [pc, #28]	; (800f61c <prvProcessReceivedCommands+0x1b4>)
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	1d39      	adds	r1, r7, #4
 800f604:	2200      	movs	r2, #0
 800f606:	4618      	mov	r0, r3
 800f608:	f7fe f9ca 	bl	800d9a0 <xQueueReceive>
 800f60c:	4603      	mov	r3, r0
 800f60e:	2b00      	cmp	r3, #0
 800f610:	f47f af2e 	bne.w	800f470 <prvProcessReceivedCommands+0x8>
	}
}
 800f614:	bf00      	nop
 800f616:	3730      	adds	r7, #48	; 0x30
 800f618:	46bd      	mov	sp, r7
 800f61a:	bd80      	pop	{r7, pc}
 800f61c:	200012a8 	.word	0x200012a8

0800f620 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f620:	b580      	push	{r7, lr}
 800f622:	b088      	sub	sp, #32
 800f624:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f626:	e047      	b.n	800f6b8 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f628:	4b2d      	ldr	r3, [pc, #180]	; (800f6e0 <prvSwitchTimerLists+0xc0>)
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	68db      	ldr	r3, [r3, #12]
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f632:	4b2b      	ldr	r3, [pc, #172]	; (800f6e0 <prvSwitchTimerLists+0xc0>)
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	68db      	ldr	r3, [r3, #12]
 800f638:	68db      	ldr	r3, [r3, #12]
 800f63a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	3304      	adds	r3, #4
 800f640:	4618      	mov	r0, r3
 800f642:	f7fd feb7 	bl	800d3b4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	6a1b      	ldr	r3, [r3, #32]
 800f64a:	68f8      	ldr	r0, [r7, #12]
 800f64c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f654:	f003 0304 	and.w	r3, r3, #4
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d02d      	beq.n	800f6b8 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	699b      	ldr	r3, [r3, #24]
 800f660:	693a      	ldr	r2, [r7, #16]
 800f662:	4413      	add	r3, r2
 800f664:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f666:	68ba      	ldr	r2, [r7, #8]
 800f668:	693b      	ldr	r3, [r7, #16]
 800f66a:	429a      	cmp	r2, r3
 800f66c:	d90e      	bls.n	800f68c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	68ba      	ldr	r2, [r7, #8]
 800f672:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	68fa      	ldr	r2, [r7, #12]
 800f678:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f67a:	4b19      	ldr	r3, [pc, #100]	; (800f6e0 <prvSwitchTimerLists+0xc0>)
 800f67c:	681a      	ldr	r2, [r3, #0]
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	3304      	adds	r3, #4
 800f682:	4619      	mov	r1, r3
 800f684:	4610      	mov	r0, r2
 800f686:	f7fd fe5c 	bl	800d342 <vListInsert>
 800f68a:	e015      	b.n	800f6b8 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f68c:	2300      	movs	r3, #0
 800f68e:	9300      	str	r3, [sp, #0]
 800f690:	2300      	movs	r3, #0
 800f692:	693a      	ldr	r2, [r7, #16]
 800f694:	2100      	movs	r1, #0
 800f696:	68f8      	ldr	r0, [r7, #12]
 800f698:	f7ff fd68 	bl	800f16c <xTimerGenericCommand>
 800f69c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d109      	bne.n	800f6b8 <prvSwitchTimerLists+0x98>
 800f6a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6a8:	f383 8811 	msr	BASEPRI, r3
 800f6ac:	f3bf 8f6f 	isb	sy
 800f6b0:	f3bf 8f4f 	dsb	sy
 800f6b4:	603b      	str	r3, [r7, #0]
 800f6b6:	e7fe      	b.n	800f6b6 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f6b8:	4b09      	ldr	r3, [pc, #36]	; (800f6e0 <prvSwitchTimerLists+0xc0>)
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d1b2      	bne.n	800f628 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f6c2:	4b07      	ldr	r3, [pc, #28]	; (800f6e0 <prvSwitchTimerLists+0xc0>)
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f6c8:	4b06      	ldr	r3, [pc, #24]	; (800f6e4 <prvSwitchTimerLists+0xc4>)
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	4a04      	ldr	r2, [pc, #16]	; (800f6e0 <prvSwitchTimerLists+0xc0>)
 800f6ce:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f6d0:	4a04      	ldr	r2, [pc, #16]	; (800f6e4 <prvSwitchTimerLists+0xc4>)
 800f6d2:	697b      	ldr	r3, [r7, #20]
 800f6d4:	6013      	str	r3, [r2, #0]
}
 800f6d6:	bf00      	nop
 800f6d8:	3718      	adds	r7, #24
 800f6da:	46bd      	mov	sp, r7
 800f6dc:	bd80      	pop	{r7, pc}
 800f6de:	bf00      	nop
 800f6e0:	200012a0 	.word	0x200012a0
 800f6e4:	200012a4 	.word	0x200012a4

0800f6e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f6e8:	b580      	push	{r7, lr}
 800f6ea:	b082      	sub	sp, #8
 800f6ec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f6ee:	f000 f965 	bl	800f9bc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f6f2:	4b15      	ldr	r3, [pc, #84]	; (800f748 <prvCheckForValidListAndQueue+0x60>)
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d120      	bne.n	800f73c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f6fa:	4814      	ldr	r0, [pc, #80]	; (800f74c <prvCheckForValidListAndQueue+0x64>)
 800f6fc:	f7fd fdd0 	bl	800d2a0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f700:	4813      	ldr	r0, [pc, #76]	; (800f750 <prvCheckForValidListAndQueue+0x68>)
 800f702:	f7fd fdcd 	bl	800d2a0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f706:	4b13      	ldr	r3, [pc, #76]	; (800f754 <prvCheckForValidListAndQueue+0x6c>)
 800f708:	4a10      	ldr	r2, [pc, #64]	; (800f74c <prvCheckForValidListAndQueue+0x64>)
 800f70a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f70c:	4b12      	ldr	r3, [pc, #72]	; (800f758 <prvCheckForValidListAndQueue+0x70>)
 800f70e:	4a10      	ldr	r2, [pc, #64]	; (800f750 <prvCheckForValidListAndQueue+0x68>)
 800f710:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f712:	2300      	movs	r3, #0
 800f714:	9300      	str	r3, [sp, #0]
 800f716:	4b11      	ldr	r3, [pc, #68]	; (800f75c <prvCheckForValidListAndQueue+0x74>)
 800f718:	4a11      	ldr	r2, [pc, #68]	; (800f760 <prvCheckForValidListAndQueue+0x78>)
 800f71a:	2110      	movs	r1, #16
 800f71c:	200a      	movs	r0, #10
 800f71e:	f7fd fedb 	bl	800d4d8 <xQueueGenericCreateStatic>
 800f722:	4602      	mov	r2, r0
 800f724:	4b08      	ldr	r3, [pc, #32]	; (800f748 <prvCheckForValidListAndQueue+0x60>)
 800f726:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f728:	4b07      	ldr	r3, [pc, #28]	; (800f748 <prvCheckForValidListAndQueue+0x60>)
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d005      	beq.n	800f73c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f730:	4b05      	ldr	r3, [pc, #20]	; (800f748 <prvCheckForValidListAndQueue+0x60>)
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	490b      	ldr	r1, [pc, #44]	; (800f764 <prvCheckForValidListAndQueue+0x7c>)
 800f736:	4618      	mov	r0, r3
 800f738:	f7fe fbbe 	bl	800deb8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f73c:	f000 f96c 	bl	800fa18 <vPortExitCritical>
}
 800f740:	bf00      	nop
 800f742:	46bd      	mov	sp, r7
 800f744:	bd80      	pop	{r7, pc}
 800f746:	bf00      	nop
 800f748:	200012a8 	.word	0x200012a8
 800f74c:	20001278 	.word	0x20001278
 800f750:	2000128c 	.word	0x2000128c
 800f754:	200012a0 	.word	0x200012a0
 800f758:	200012a4 	.word	0x200012a4
 800f75c:	20001354 	.word	0x20001354
 800f760:	200012b4 	.word	0x200012b4
 800f764:	08019cc4 	.word	0x08019cc4

0800f768 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f768:	b480      	push	{r7}
 800f76a:	b085      	sub	sp, #20
 800f76c:	af00      	add	r7, sp, #0
 800f76e:	60f8      	str	r0, [r7, #12]
 800f770:	60b9      	str	r1, [r7, #8]
 800f772:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	3b04      	subs	r3, #4
 800f778:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f780:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	3b04      	subs	r3, #4
 800f786:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f788:	68bb      	ldr	r3, [r7, #8]
 800f78a:	f023 0201 	bic.w	r2, r3, #1
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	3b04      	subs	r3, #4
 800f796:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f798:	4a0c      	ldr	r2, [pc, #48]	; (800f7cc <pxPortInitialiseStack+0x64>)
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	3b14      	subs	r3, #20
 800f7a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f7a4:	687a      	ldr	r2, [r7, #4]
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	3b04      	subs	r3, #4
 800f7ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	f06f 0202 	mvn.w	r2, #2
 800f7b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	3b20      	subs	r3, #32
 800f7bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f7be:	68fb      	ldr	r3, [r7, #12]
}
 800f7c0:	4618      	mov	r0, r3
 800f7c2:	3714      	adds	r7, #20
 800f7c4:	46bd      	mov	sp, r7
 800f7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ca:	4770      	bx	lr
 800f7cc:	0800f7d1 	.word	0x0800f7d1

0800f7d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f7d0:	b480      	push	{r7}
 800f7d2:	b085      	sub	sp, #20
 800f7d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f7d6:	2300      	movs	r3, #0
 800f7d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f7da:	4b11      	ldr	r3, [pc, #68]	; (800f820 <prvTaskExitError+0x50>)
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f7e2:	d009      	beq.n	800f7f8 <prvTaskExitError+0x28>
 800f7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7e8:	f383 8811 	msr	BASEPRI, r3
 800f7ec:	f3bf 8f6f 	isb	sy
 800f7f0:	f3bf 8f4f 	dsb	sy
 800f7f4:	60fb      	str	r3, [r7, #12]
 800f7f6:	e7fe      	b.n	800f7f6 <prvTaskExitError+0x26>
 800f7f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7fc:	f383 8811 	msr	BASEPRI, r3
 800f800:	f3bf 8f6f 	isb	sy
 800f804:	f3bf 8f4f 	dsb	sy
 800f808:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f80a:	bf00      	nop
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d0fc      	beq.n	800f80c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f812:	bf00      	nop
 800f814:	3714      	adds	r7, #20
 800f816:	46bd      	mov	sp, r7
 800f818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f81c:	4770      	bx	lr
 800f81e:	bf00      	nop
 800f820:	2000011c 	.word	0x2000011c
	...

0800f830 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f830:	4b07      	ldr	r3, [pc, #28]	; (800f850 <pxCurrentTCBConst2>)
 800f832:	6819      	ldr	r1, [r3, #0]
 800f834:	6808      	ldr	r0, [r1, #0]
 800f836:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f83a:	f380 8809 	msr	PSP, r0
 800f83e:	f3bf 8f6f 	isb	sy
 800f842:	f04f 0000 	mov.w	r0, #0
 800f846:	f380 8811 	msr	BASEPRI, r0
 800f84a:	4770      	bx	lr
 800f84c:	f3af 8000 	nop.w

0800f850 <pxCurrentTCBConst2>:
 800f850:	20000d70 	.word	0x20000d70
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f854:	bf00      	nop
 800f856:	bf00      	nop

0800f858 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f858:	4808      	ldr	r0, [pc, #32]	; (800f87c <prvPortStartFirstTask+0x24>)
 800f85a:	6800      	ldr	r0, [r0, #0]
 800f85c:	6800      	ldr	r0, [r0, #0]
 800f85e:	f380 8808 	msr	MSP, r0
 800f862:	f04f 0000 	mov.w	r0, #0
 800f866:	f380 8814 	msr	CONTROL, r0
 800f86a:	b662      	cpsie	i
 800f86c:	b661      	cpsie	f
 800f86e:	f3bf 8f4f 	dsb	sy
 800f872:	f3bf 8f6f 	isb	sy
 800f876:	df00      	svc	0
 800f878:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f87a:	bf00      	nop
 800f87c:	e000ed08 	.word	0xe000ed08

0800f880 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f880:	b580      	push	{r7, lr}
 800f882:	b086      	sub	sp, #24
 800f884:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f886:	4b44      	ldr	r3, [pc, #272]	; (800f998 <xPortStartScheduler+0x118>)
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	4a44      	ldr	r2, [pc, #272]	; (800f99c <xPortStartScheduler+0x11c>)
 800f88c:	4293      	cmp	r3, r2
 800f88e:	d109      	bne.n	800f8a4 <xPortStartScheduler+0x24>
 800f890:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f894:	f383 8811 	msr	BASEPRI, r3
 800f898:	f3bf 8f6f 	isb	sy
 800f89c:	f3bf 8f4f 	dsb	sy
 800f8a0:	613b      	str	r3, [r7, #16]
 800f8a2:	e7fe      	b.n	800f8a2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f8a4:	4b3c      	ldr	r3, [pc, #240]	; (800f998 <xPortStartScheduler+0x118>)
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	4a3d      	ldr	r2, [pc, #244]	; (800f9a0 <xPortStartScheduler+0x120>)
 800f8aa:	4293      	cmp	r3, r2
 800f8ac:	d109      	bne.n	800f8c2 <xPortStartScheduler+0x42>
 800f8ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8b2:	f383 8811 	msr	BASEPRI, r3
 800f8b6:	f3bf 8f6f 	isb	sy
 800f8ba:	f3bf 8f4f 	dsb	sy
 800f8be:	60fb      	str	r3, [r7, #12]
 800f8c0:	e7fe      	b.n	800f8c0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f8c2:	4b38      	ldr	r3, [pc, #224]	; (800f9a4 <xPortStartScheduler+0x124>)
 800f8c4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f8c6:	697b      	ldr	r3, [r7, #20]
 800f8c8:	781b      	ldrb	r3, [r3, #0]
 800f8ca:	b2db      	uxtb	r3, r3
 800f8cc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f8ce:	697b      	ldr	r3, [r7, #20]
 800f8d0:	22ff      	movs	r2, #255	; 0xff
 800f8d2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f8d4:	697b      	ldr	r3, [r7, #20]
 800f8d6:	781b      	ldrb	r3, [r3, #0]
 800f8d8:	b2db      	uxtb	r3, r3
 800f8da:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f8dc:	78fb      	ldrb	r3, [r7, #3]
 800f8de:	b2db      	uxtb	r3, r3
 800f8e0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f8e4:	b2da      	uxtb	r2, r3
 800f8e6:	4b30      	ldr	r3, [pc, #192]	; (800f9a8 <xPortStartScheduler+0x128>)
 800f8e8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f8ea:	4b30      	ldr	r3, [pc, #192]	; (800f9ac <xPortStartScheduler+0x12c>)
 800f8ec:	2207      	movs	r2, #7
 800f8ee:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f8f0:	e009      	b.n	800f906 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800f8f2:	4b2e      	ldr	r3, [pc, #184]	; (800f9ac <xPortStartScheduler+0x12c>)
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	3b01      	subs	r3, #1
 800f8f8:	4a2c      	ldr	r2, [pc, #176]	; (800f9ac <xPortStartScheduler+0x12c>)
 800f8fa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f8fc:	78fb      	ldrb	r3, [r7, #3]
 800f8fe:	b2db      	uxtb	r3, r3
 800f900:	005b      	lsls	r3, r3, #1
 800f902:	b2db      	uxtb	r3, r3
 800f904:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f906:	78fb      	ldrb	r3, [r7, #3]
 800f908:	b2db      	uxtb	r3, r3
 800f90a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f90e:	2b80      	cmp	r3, #128	; 0x80
 800f910:	d0ef      	beq.n	800f8f2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f912:	4b26      	ldr	r3, [pc, #152]	; (800f9ac <xPortStartScheduler+0x12c>)
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	f1c3 0307 	rsb	r3, r3, #7
 800f91a:	2b04      	cmp	r3, #4
 800f91c:	d009      	beq.n	800f932 <xPortStartScheduler+0xb2>
 800f91e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f922:	f383 8811 	msr	BASEPRI, r3
 800f926:	f3bf 8f6f 	isb	sy
 800f92a:	f3bf 8f4f 	dsb	sy
 800f92e:	60bb      	str	r3, [r7, #8]
 800f930:	e7fe      	b.n	800f930 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f932:	4b1e      	ldr	r3, [pc, #120]	; (800f9ac <xPortStartScheduler+0x12c>)
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	021b      	lsls	r3, r3, #8
 800f938:	4a1c      	ldr	r2, [pc, #112]	; (800f9ac <xPortStartScheduler+0x12c>)
 800f93a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f93c:	4b1b      	ldr	r3, [pc, #108]	; (800f9ac <xPortStartScheduler+0x12c>)
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f944:	4a19      	ldr	r2, [pc, #100]	; (800f9ac <xPortStartScheduler+0x12c>)
 800f946:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	b2da      	uxtb	r2, r3
 800f94c:	697b      	ldr	r3, [r7, #20]
 800f94e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f950:	4b17      	ldr	r3, [pc, #92]	; (800f9b0 <xPortStartScheduler+0x130>)
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	4a16      	ldr	r2, [pc, #88]	; (800f9b0 <xPortStartScheduler+0x130>)
 800f956:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f95a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f95c:	4b14      	ldr	r3, [pc, #80]	; (800f9b0 <xPortStartScheduler+0x130>)
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	4a13      	ldr	r2, [pc, #76]	; (800f9b0 <xPortStartScheduler+0x130>)
 800f962:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f966:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f968:	f000 f8d6 	bl	800fb18 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f96c:	4b11      	ldr	r3, [pc, #68]	; (800f9b4 <xPortStartScheduler+0x134>)
 800f96e:	2200      	movs	r2, #0
 800f970:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f972:	f000 f8f5 	bl	800fb60 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f976:	4b10      	ldr	r3, [pc, #64]	; (800f9b8 <xPortStartScheduler+0x138>)
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	4a0f      	ldr	r2, [pc, #60]	; (800f9b8 <xPortStartScheduler+0x138>)
 800f97c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f980:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f982:	f7ff ff69 	bl	800f858 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f986:	f7fe ff1d 	bl	800e7c4 <vTaskSwitchContext>
	prvTaskExitError();
 800f98a:	f7ff ff21 	bl	800f7d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f98e:	2300      	movs	r3, #0
}
 800f990:	4618      	mov	r0, r3
 800f992:	3718      	adds	r7, #24
 800f994:	46bd      	mov	sp, r7
 800f996:	bd80      	pop	{r7, pc}
 800f998:	e000ed00 	.word	0xe000ed00
 800f99c:	410fc271 	.word	0x410fc271
 800f9a0:	410fc270 	.word	0x410fc270
 800f9a4:	e000e400 	.word	0xe000e400
 800f9a8:	200013a4 	.word	0x200013a4
 800f9ac:	200013a8 	.word	0x200013a8
 800f9b0:	e000ed20 	.word	0xe000ed20
 800f9b4:	2000011c 	.word	0x2000011c
 800f9b8:	e000ef34 	.word	0xe000ef34

0800f9bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f9bc:	b480      	push	{r7}
 800f9be:	b083      	sub	sp, #12
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9c6:	f383 8811 	msr	BASEPRI, r3
 800f9ca:	f3bf 8f6f 	isb	sy
 800f9ce:	f3bf 8f4f 	dsb	sy
 800f9d2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f9d4:	4b0e      	ldr	r3, [pc, #56]	; (800fa10 <vPortEnterCritical+0x54>)
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	3301      	adds	r3, #1
 800f9da:	4a0d      	ldr	r2, [pc, #52]	; (800fa10 <vPortEnterCritical+0x54>)
 800f9dc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f9de:	4b0c      	ldr	r3, [pc, #48]	; (800fa10 <vPortEnterCritical+0x54>)
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	2b01      	cmp	r3, #1
 800f9e4:	d10e      	bne.n	800fa04 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f9e6:	4b0b      	ldr	r3, [pc, #44]	; (800fa14 <vPortEnterCritical+0x58>)
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	b2db      	uxtb	r3, r3
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d009      	beq.n	800fa04 <vPortEnterCritical+0x48>
 800f9f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9f4:	f383 8811 	msr	BASEPRI, r3
 800f9f8:	f3bf 8f6f 	isb	sy
 800f9fc:	f3bf 8f4f 	dsb	sy
 800fa00:	603b      	str	r3, [r7, #0]
 800fa02:	e7fe      	b.n	800fa02 <vPortEnterCritical+0x46>
	}
}
 800fa04:	bf00      	nop
 800fa06:	370c      	adds	r7, #12
 800fa08:	46bd      	mov	sp, r7
 800fa0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa0e:	4770      	bx	lr
 800fa10:	2000011c 	.word	0x2000011c
 800fa14:	e000ed04 	.word	0xe000ed04

0800fa18 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fa18:	b480      	push	{r7}
 800fa1a:	b083      	sub	sp, #12
 800fa1c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fa1e:	4b11      	ldr	r3, [pc, #68]	; (800fa64 <vPortExitCritical+0x4c>)
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d109      	bne.n	800fa3a <vPortExitCritical+0x22>
 800fa26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa2a:	f383 8811 	msr	BASEPRI, r3
 800fa2e:	f3bf 8f6f 	isb	sy
 800fa32:	f3bf 8f4f 	dsb	sy
 800fa36:	607b      	str	r3, [r7, #4]
 800fa38:	e7fe      	b.n	800fa38 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800fa3a:	4b0a      	ldr	r3, [pc, #40]	; (800fa64 <vPortExitCritical+0x4c>)
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	3b01      	subs	r3, #1
 800fa40:	4a08      	ldr	r2, [pc, #32]	; (800fa64 <vPortExitCritical+0x4c>)
 800fa42:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fa44:	4b07      	ldr	r3, [pc, #28]	; (800fa64 <vPortExitCritical+0x4c>)
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d104      	bne.n	800fa56 <vPortExitCritical+0x3e>
 800fa4c:	2300      	movs	r3, #0
 800fa4e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fa50:	683b      	ldr	r3, [r7, #0]
 800fa52:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800fa56:	bf00      	nop
 800fa58:	370c      	adds	r7, #12
 800fa5a:	46bd      	mov	sp, r7
 800fa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa60:	4770      	bx	lr
 800fa62:	bf00      	nop
 800fa64:	2000011c 	.word	0x2000011c
	...

0800fa70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fa70:	f3ef 8009 	mrs	r0, PSP
 800fa74:	f3bf 8f6f 	isb	sy
 800fa78:	4b15      	ldr	r3, [pc, #84]	; (800fad0 <pxCurrentTCBConst>)
 800fa7a:	681a      	ldr	r2, [r3, #0]
 800fa7c:	f01e 0f10 	tst.w	lr, #16
 800fa80:	bf08      	it	eq
 800fa82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fa86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa8a:	6010      	str	r0, [r2, #0]
 800fa8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fa90:	f04f 0050 	mov.w	r0, #80	; 0x50
 800fa94:	f380 8811 	msr	BASEPRI, r0
 800fa98:	f3bf 8f4f 	dsb	sy
 800fa9c:	f3bf 8f6f 	isb	sy
 800faa0:	f7fe fe90 	bl	800e7c4 <vTaskSwitchContext>
 800faa4:	f04f 0000 	mov.w	r0, #0
 800faa8:	f380 8811 	msr	BASEPRI, r0
 800faac:	bc09      	pop	{r0, r3}
 800faae:	6819      	ldr	r1, [r3, #0]
 800fab0:	6808      	ldr	r0, [r1, #0]
 800fab2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fab6:	f01e 0f10 	tst.w	lr, #16
 800faba:	bf08      	it	eq
 800fabc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fac0:	f380 8809 	msr	PSP, r0
 800fac4:	f3bf 8f6f 	isb	sy
 800fac8:	4770      	bx	lr
 800faca:	bf00      	nop
 800facc:	f3af 8000 	nop.w

0800fad0 <pxCurrentTCBConst>:
 800fad0:	20000d70 	.word	0x20000d70
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fad4:	bf00      	nop
 800fad6:	bf00      	nop

0800fad8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fad8:	b580      	push	{r7, lr}
 800fada:	b082      	sub	sp, #8
 800fadc:	af00      	add	r7, sp, #0
	__asm volatile
 800fade:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fae2:	f383 8811 	msr	BASEPRI, r3
 800fae6:	f3bf 8f6f 	isb	sy
 800faea:	f3bf 8f4f 	dsb	sy
 800faee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800faf0:	f7fe fdb0 	bl	800e654 <xTaskIncrementTick>
 800faf4:	4603      	mov	r3, r0
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d003      	beq.n	800fb02 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fafa:	4b06      	ldr	r3, [pc, #24]	; (800fb14 <SysTick_Handler+0x3c>)
 800fafc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb00:	601a      	str	r2, [r3, #0]
 800fb02:	2300      	movs	r3, #0
 800fb04:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fb06:	683b      	ldr	r3, [r7, #0]
 800fb08:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800fb0c:	bf00      	nop
 800fb0e:	3708      	adds	r7, #8
 800fb10:	46bd      	mov	sp, r7
 800fb12:	bd80      	pop	{r7, pc}
 800fb14:	e000ed04 	.word	0xe000ed04

0800fb18 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fb18:	b480      	push	{r7}
 800fb1a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fb1c:	4b0b      	ldr	r3, [pc, #44]	; (800fb4c <vPortSetupTimerInterrupt+0x34>)
 800fb1e:	2200      	movs	r2, #0
 800fb20:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fb22:	4b0b      	ldr	r3, [pc, #44]	; (800fb50 <vPortSetupTimerInterrupt+0x38>)
 800fb24:	2200      	movs	r2, #0
 800fb26:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fb28:	4b0a      	ldr	r3, [pc, #40]	; (800fb54 <vPortSetupTimerInterrupt+0x3c>)
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	4a0a      	ldr	r2, [pc, #40]	; (800fb58 <vPortSetupTimerInterrupt+0x40>)
 800fb2e:	fba2 2303 	umull	r2, r3, r2, r3
 800fb32:	099b      	lsrs	r3, r3, #6
 800fb34:	4a09      	ldr	r2, [pc, #36]	; (800fb5c <vPortSetupTimerInterrupt+0x44>)
 800fb36:	3b01      	subs	r3, #1
 800fb38:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fb3a:	4b04      	ldr	r3, [pc, #16]	; (800fb4c <vPortSetupTimerInterrupt+0x34>)
 800fb3c:	2207      	movs	r2, #7
 800fb3e:	601a      	str	r2, [r3, #0]
}
 800fb40:	bf00      	nop
 800fb42:	46bd      	mov	sp, r7
 800fb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb48:	4770      	bx	lr
 800fb4a:	bf00      	nop
 800fb4c:	e000e010 	.word	0xe000e010
 800fb50:	e000e018 	.word	0xe000e018
 800fb54:	20000000 	.word	0x20000000
 800fb58:	10624dd3 	.word	0x10624dd3
 800fb5c:	e000e014 	.word	0xe000e014

0800fb60 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fb60:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800fb70 <vPortEnableVFP+0x10>
 800fb64:	6801      	ldr	r1, [r0, #0]
 800fb66:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800fb6a:	6001      	str	r1, [r0, #0]
 800fb6c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fb6e:	bf00      	nop
 800fb70:	e000ed88 	.word	0xe000ed88

0800fb74 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fb74:	b480      	push	{r7}
 800fb76:	b085      	sub	sp, #20
 800fb78:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fb7a:	f3ef 8305 	mrs	r3, IPSR
 800fb7e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	2b0f      	cmp	r3, #15
 800fb84:	d913      	bls.n	800fbae <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fb86:	4a16      	ldr	r2, [pc, #88]	; (800fbe0 <vPortValidateInterruptPriority+0x6c>)
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	4413      	add	r3, r2
 800fb8c:	781b      	ldrb	r3, [r3, #0]
 800fb8e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fb90:	4b14      	ldr	r3, [pc, #80]	; (800fbe4 <vPortValidateInterruptPriority+0x70>)
 800fb92:	781b      	ldrb	r3, [r3, #0]
 800fb94:	7afa      	ldrb	r2, [r7, #11]
 800fb96:	429a      	cmp	r2, r3
 800fb98:	d209      	bcs.n	800fbae <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800fb9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb9e:	f383 8811 	msr	BASEPRI, r3
 800fba2:	f3bf 8f6f 	isb	sy
 800fba6:	f3bf 8f4f 	dsb	sy
 800fbaa:	607b      	str	r3, [r7, #4]
 800fbac:	e7fe      	b.n	800fbac <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fbae:	4b0e      	ldr	r3, [pc, #56]	; (800fbe8 <vPortValidateInterruptPriority+0x74>)
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800fbb6:	4b0d      	ldr	r3, [pc, #52]	; (800fbec <vPortValidateInterruptPriority+0x78>)
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	429a      	cmp	r2, r3
 800fbbc:	d909      	bls.n	800fbd2 <vPortValidateInterruptPriority+0x5e>
 800fbbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbc2:	f383 8811 	msr	BASEPRI, r3
 800fbc6:	f3bf 8f6f 	isb	sy
 800fbca:	f3bf 8f4f 	dsb	sy
 800fbce:	603b      	str	r3, [r7, #0]
 800fbd0:	e7fe      	b.n	800fbd0 <vPortValidateInterruptPriority+0x5c>
	}
 800fbd2:	bf00      	nop
 800fbd4:	3714      	adds	r7, #20
 800fbd6:	46bd      	mov	sp, r7
 800fbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbdc:	4770      	bx	lr
 800fbde:	bf00      	nop
 800fbe0:	e000e3f0 	.word	0xe000e3f0
 800fbe4:	200013a4 	.word	0x200013a4
 800fbe8:	e000ed0c 	.word	0xe000ed0c
 800fbec:	200013a8 	.word	0x200013a8

0800fbf0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fbf0:	b580      	push	{r7, lr}
 800fbf2:	b08a      	sub	sp, #40	; 0x28
 800fbf4:	af00      	add	r7, sp, #0
 800fbf6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fbf8:	2300      	movs	r3, #0
 800fbfa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fbfc:	f7fe fc70 	bl	800e4e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fc00:	4b57      	ldr	r3, [pc, #348]	; (800fd60 <pvPortMalloc+0x170>)
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d101      	bne.n	800fc0c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fc08:	f000 f90c 	bl	800fe24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fc0c:	4b55      	ldr	r3, [pc, #340]	; (800fd64 <pvPortMalloc+0x174>)
 800fc0e:	681a      	ldr	r2, [r3, #0]
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	4013      	ands	r3, r2
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	f040 808c 	bne.w	800fd32 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d01c      	beq.n	800fc5a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800fc20:	2208      	movs	r2, #8
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	4413      	add	r3, r2
 800fc26:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	f003 0307 	and.w	r3, r3, #7
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d013      	beq.n	800fc5a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	f023 0307 	bic.w	r3, r3, #7
 800fc38:	3308      	adds	r3, #8
 800fc3a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	f003 0307 	and.w	r3, r3, #7
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d009      	beq.n	800fc5a <pvPortMalloc+0x6a>
 800fc46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc4a:	f383 8811 	msr	BASEPRI, r3
 800fc4e:	f3bf 8f6f 	isb	sy
 800fc52:	f3bf 8f4f 	dsb	sy
 800fc56:	617b      	str	r3, [r7, #20]
 800fc58:	e7fe      	b.n	800fc58 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d068      	beq.n	800fd32 <pvPortMalloc+0x142>
 800fc60:	4b41      	ldr	r3, [pc, #260]	; (800fd68 <pvPortMalloc+0x178>)
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	687a      	ldr	r2, [r7, #4]
 800fc66:	429a      	cmp	r2, r3
 800fc68:	d863      	bhi.n	800fd32 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fc6a:	4b40      	ldr	r3, [pc, #256]	; (800fd6c <pvPortMalloc+0x17c>)
 800fc6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fc6e:	4b3f      	ldr	r3, [pc, #252]	; (800fd6c <pvPortMalloc+0x17c>)
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fc74:	e004      	b.n	800fc80 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800fc76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fc7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fc80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc82:	685b      	ldr	r3, [r3, #4]
 800fc84:	687a      	ldr	r2, [r7, #4]
 800fc86:	429a      	cmp	r2, r3
 800fc88:	d903      	bls.n	800fc92 <pvPortMalloc+0xa2>
 800fc8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d1f1      	bne.n	800fc76 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fc92:	4b33      	ldr	r3, [pc, #204]	; (800fd60 <pvPortMalloc+0x170>)
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc98:	429a      	cmp	r2, r3
 800fc9a:	d04a      	beq.n	800fd32 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fc9c:	6a3b      	ldr	r3, [r7, #32]
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	2208      	movs	r2, #8
 800fca2:	4413      	add	r3, r2
 800fca4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fca8:	681a      	ldr	r2, [r3, #0]
 800fcaa:	6a3b      	ldr	r3, [r7, #32]
 800fcac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fcae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcb0:	685a      	ldr	r2, [r3, #4]
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	1ad2      	subs	r2, r2, r3
 800fcb6:	2308      	movs	r3, #8
 800fcb8:	005b      	lsls	r3, r3, #1
 800fcba:	429a      	cmp	r2, r3
 800fcbc:	d91e      	bls.n	800fcfc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fcbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	4413      	add	r3, r2
 800fcc4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fcc6:	69bb      	ldr	r3, [r7, #24]
 800fcc8:	f003 0307 	and.w	r3, r3, #7
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d009      	beq.n	800fce4 <pvPortMalloc+0xf4>
 800fcd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcd4:	f383 8811 	msr	BASEPRI, r3
 800fcd8:	f3bf 8f6f 	isb	sy
 800fcdc:	f3bf 8f4f 	dsb	sy
 800fce0:	613b      	str	r3, [r7, #16]
 800fce2:	e7fe      	b.n	800fce2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fce6:	685a      	ldr	r2, [r3, #4]
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	1ad2      	subs	r2, r2, r3
 800fcec:	69bb      	ldr	r3, [r7, #24]
 800fcee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fcf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcf2:	687a      	ldr	r2, [r7, #4]
 800fcf4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fcf6:	69b8      	ldr	r0, [r7, #24]
 800fcf8:	f000 f8f6 	bl	800fee8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fcfc:	4b1a      	ldr	r3, [pc, #104]	; (800fd68 <pvPortMalloc+0x178>)
 800fcfe:	681a      	ldr	r2, [r3, #0]
 800fd00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd02:	685b      	ldr	r3, [r3, #4]
 800fd04:	1ad3      	subs	r3, r2, r3
 800fd06:	4a18      	ldr	r2, [pc, #96]	; (800fd68 <pvPortMalloc+0x178>)
 800fd08:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fd0a:	4b17      	ldr	r3, [pc, #92]	; (800fd68 <pvPortMalloc+0x178>)
 800fd0c:	681a      	ldr	r2, [r3, #0]
 800fd0e:	4b18      	ldr	r3, [pc, #96]	; (800fd70 <pvPortMalloc+0x180>)
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	429a      	cmp	r2, r3
 800fd14:	d203      	bcs.n	800fd1e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fd16:	4b14      	ldr	r3, [pc, #80]	; (800fd68 <pvPortMalloc+0x178>)
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	4a15      	ldr	r2, [pc, #84]	; (800fd70 <pvPortMalloc+0x180>)
 800fd1c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fd1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd20:	685a      	ldr	r2, [r3, #4]
 800fd22:	4b10      	ldr	r3, [pc, #64]	; (800fd64 <pvPortMalloc+0x174>)
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	431a      	orrs	r2, r3
 800fd28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd2a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fd2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd2e:	2200      	movs	r2, #0
 800fd30:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fd32:	f7fe fbe3 	bl	800e4fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fd36:	69fb      	ldr	r3, [r7, #28]
 800fd38:	f003 0307 	and.w	r3, r3, #7
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d009      	beq.n	800fd54 <pvPortMalloc+0x164>
 800fd40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd44:	f383 8811 	msr	BASEPRI, r3
 800fd48:	f3bf 8f6f 	isb	sy
 800fd4c:	f3bf 8f4f 	dsb	sy
 800fd50:	60fb      	str	r3, [r7, #12]
 800fd52:	e7fe      	b.n	800fd52 <pvPortMalloc+0x162>
	return pvReturn;
 800fd54:	69fb      	ldr	r3, [r7, #28]
}
 800fd56:	4618      	mov	r0, r3
 800fd58:	3728      	adds	r7, #40	; 0x28
 800fd5a:	46bd      	mov	sp, r7
 800fd5c:	bd80      	pop	{r7, pc}
 800fd5e:	bf00      	nop
 800fd60:	20004fb4 	.word	0x20004fb4
 800fd64:	20004fc0 	.word	0x20004fc0
 800fd68:	20004fb8 	.word	0x20004fb8
 800fd6c:	20004fac 	.word	0x20004fac
 800fd70:	20004fbc 	.word	0x20004fbc

0800fd74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fd74:	b580      	push	{r7, lr}
 800fd76:	b086      	sub	sp, #24
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d046      	beq.n	800fe14 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fd86:	2308      	movs	r3, #8
 800fd88:	425b      	negs	r3, r3
 800fd8a:	697a      	ldr	r2, [r7, #20]
 800fd8c:	4413      	add	r3, r2
 800fd8e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fd90:	697b      	ldr	r3, [r7, #20]
 800fd92:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fd94:	693b      	ldr	r3, [r7, #16]
 800fd96:	685a      	ldr	r2, [r3, #4]
 800fd98:	4b20      	ldr	r3, [pc, #128]	; (800fe1c <vPortFree+0xa8>)
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	4013      	ands	r3, r2
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d109      	bne.n	800fdb6 <vPortFree+0x42>
 800fda2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fda6:	f383 8811 	msr	BASEPRI, r3
 800fdaa:	f3bf 8f6f 	isb	sy
 800fdae:	f3bf 8f4f 	dsb	sy
 800fdb2:	60fb      	str	r3, [r7, #12]
 800fdb4:	e7fe      	b.n	800fdb4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fdb6:	693b      	ldr	r3, [r7, #16]
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d009      	beq.n	800fdd2 <vPortFree+0x5e>
 800fdbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdc2:	f383 8811 	msr	BASEPRI, r3
 800fdc6:	f3bf 8f6f 	isb	sy
 800fdca:	f3bf 8f4f 	dsb	sy
 800fdce:	60bb      	str	r3, [r7, #8]
 800fdd0:	e7fe      	b.n	800fdd0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fdd2:	693b      	ldr	r3, [r7, #16]
 800fdd4:	685a      	ldr	r2, [r3, #4]
 800fdd6:	4b11      	ldr	r3, [pc, #68]	; (800fe1c <vPortFree+0xa8>)
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	4013      	ands	r3, r2
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d019      	beq.n	800fe14 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fde0:	693b      	ldr	r3, [r7, #16]
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d115      	bne.n	800fe14 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fde8:	693b      	ldr	r3, [r7, #16]
 800fdea:	685a      	ldr	r2, [r3, #4]
 800fdec:	4b0b      	ldr	r3, [pc, #44]	; (800fe1c <vPortFree+0xa8>)
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	43db      	mvns	r3, r3
 800fdf2:	401a      	ands	r2, r3
 800fdf4:	693b      	ldr	r3, [r7, #16]
 800fdf6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fdf8:	f7fe fb72 	bl	800e4e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fdfc:	693b      	ldr	r3, [r7, #16]
 800fdfe:	685a      	ldr	r2, [r3, #4]
 800fe00:	4b07      	ldr	r3, [pc, #28]	; (800fe20 <vPortFree+0xac>)
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	4413      	add	r3, r2
 800fe06:	4a06      	ldr	r2, [pc, #24]	; (800fe20 <vPortFree+0xac>)
 800fe08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fe0a:	6938      	ldr	r0, [r7, #16]
 800fe0c:	f000 f86c 	bl	800fee8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800fe10:	f7fe fb74 	bl	800e4fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fe14:	bf00      	nop
 800fe16:	3718      	adds	r7, #24
 800fe18:	46bd      	mov	sp, r7
 800fe1a:	bd80      	pop	{r7, pc}
 800fe1c:	20004fc0 	.word	0x20004fc0
 800fe20:	20004fb8 	.word	0x20004fb8

0800fe24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fe24:	b480      	push	{r7}
 800fe26:	b085      	sub	sp, #20
 800fe28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fe2a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800fe2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fe30:	4b27      	ldr	r3, [pc, #156]	; (800fed0 <prvHeapInit+0xac>)
 800fe32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	f003 0307 	and.w	r3, r3, #7
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d00c      	beq.n	800fe58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	3307      	adds	r3, #7
 800fe42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	f023 0307 	bic.w	r3, r3, #7
 800fe4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fe4c:	68ba      	ldr	r2, [r7, #8]
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	1ad3      	subs	r3, r2, r3
 800fe52:	4a1f      	ldr	r2, [pc, #124]	; (800fed0 <prvHeapInit+0xac>)
 800fe54:	4413      	add	r3, r2
 800fe56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fe5c:	4a1d      	ldr	r2, [pc, #116]	; (800fed4 <prvHeapInit+0xb0>)
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fe62:	4b1c      	ldr	r3, [pc, #112]	; (800fed4 <prvHeapInit+0xb0>)
 800fe64:	2200      	movs	r2, #0
 800fe66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	68ba      	ldr	r2, [r7, #8]
 800fe6c:	4413      	add	r3, r2
 800fe6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fe70:	2208      	movs	r2, #8
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	1a9b      	subs	r3, r3, r2
 800fe76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	f023 0307 	bic.w	r3, r3, #7
 800fe7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	4a15      	ldr	r2, [pc, #84]	; (800fed8 <prvHeapInit+0xb4>)
 800fe84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fe86:	4b14      	ldr	r3, [pc, #80]	; (800fed8 <prvHeapInit+0xb4>)
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	2200      	movs	r2, #0
 800fe8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fe8e:	4b12      	ldr	r3, [pc, #72]	; (800fed8 <prvHeapInit+0xb4>)
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	2200      	movs	r2, #0
 800fe94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fe9a:	683b      	ldr	r3, [r7, #0]
 800fe9c:	68fa      	ldr	r2, [r7, #12]
 800fe9e:	1ad2      	subs	r2, r2, r3
 800fea0:	683b      	ldr	r3, [r7, #0]
 800fea2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fea4:	4b0c      	ldr	r3, [pc, #48]	; (800fed8 <prvHeapInit+0xb4>)
 800fea6:	681a      	ldr	r2, [r3, #0]
 800fea8:	683b      	ldr	r3, [r7, #0]
 800feaa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800feac:	683b      	ldr	r3, [r7, #0]
 800feae:	685b      	ldr	r3, [r3, #4]
 800feb0:	4a0a      	ldr	r2, [pc, #40]	; (800fedc <prvHeapInit+0xb8>)
 800feb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800feb4:	683b      	ldr	r3, [r7, #0]
 800feb6:	685b      	ldr	r3, [r3, #4]
 800feb8:	4a09      	ldr	r2, [pc, #36]	; (800fee0 <prvHeapInit+0xbc>)
 800feba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800febc:	4b09      	ldr	r3, [pc, #36]	; (800fee4 <prvHeapInit+0xc0>)
 800febe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800fec2:	601a      	str	r2, [r3, #0]
}
 800fec4:	bf00      	nop
 800fec6:	3714      	adds	r7, #20
 800fec8:	46bd      	mov	sp, r7
 800feca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fece:	4770      	bx	lr
 800fed0:	200013ac 	.word	0x200013ac
 800fed4:	20004fac 	.word	0x20004fac
 800fed8:	20004fb4 	.word	0x20004fb4
 800fedc:	20004fbc 	.word	0x20004fbc
 800fee0:	20004fb8 	.word	0x20004fb8
 800fee4:	20004fc0 	.word	0x20004fc0

0800fee8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fee8:	b480      	push	{r7}
 800feea:	b085      	sub	sp, #20
 800feec:	af00      	add	r7, sp, #0
 800feee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fef0:	4b28      	ldr	r3, [pc, #160]	; (800ff94 <prvInsertBlockIntoFreeList+0xac>)
 800fef2:	60fb      	str	r3, [r7, #12]
 800fef4:	e002      	b.n	800fefc <prvInsertBlockIntoFreeList+0x14>
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	60fb      	str	r3, [r7, #12]
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	687a      	ldr	r2, [r7, #4]
 800ff02:	429a      	cmp	r2, r3
 800ff04:	d8f7      	bhi.n	800fef6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	685b      	ldr	r3, [r3, #4]
 800ff0e:	68ba      	ldr	r2, [r7, #8]
 800ff10:	4413      	add	r3, r2
 800ff12:	687a      	ldr	r2, [r7, #4]
 800ff14:	429a      	cmp	r2, r3
 800ff16:	d108      	bne.n	800ff2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	685a      	ldr	r2, [r3, #4]
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	685b      	ldr	r3, [r3, #4]
 800ff20:	441a      	add	r2, r3
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	685b      	ldr	r3, [r3, #4]
 800ff32:	68ba      	ldr	r2, [r7, #8]
 800ff34:	441a      	add	r2, r3
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	429a      	cmp	r2, r3
 800ff3c:	d118      	bne.n	800ff70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	681a      	ldr	r2, [r3, #0]
 800ff42:	4b15      	ldr	r3, [pc, #84]	; (800ff98 <prvInsertBlockIntoFreeList+0xb0>)
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	429a      	cmp	r2, r3
 800ff48:	d00d      	beq.n	800ff66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	685a      	ldr	r2, [r3, #4]
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	685b      	ldr	r3, [r3, #4]
 800ff54:	441a      	add	r2, r3
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	681a      	ldr	r2, [r3, #0]
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	601a      	str	r2, [r3, #0]
 800ff64:	e008      	b.n	800ff78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ff66:	4b0c      	ldr	r3, [pc, #48]	; (800ff98 <prvInsertBlockIntoFreeList+0xb0>)
 800ff68:	681a      	ldr	r2, [r3, #0]
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	601a      	str	r2, [r3, #0]
 800ff6e:	e003      	b.n	800ff78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	681a      	ldr	r2, [r3, #0]
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ff78:	68fa      	ldr	r2, [r7, #12]
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	429a      	cmp	r2, r3
 800ff7e:	d002      	beq.n	800ff86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	687a      	ldr	r2, [r7, #4]
 800ff84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ff86:	bf00      	nop
 800ff88:	3714      	adds	r7, #20
 800ff8a:	46bd      	mov	sp, r7
 800ff8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff90:	4770      	bx	lr
 800ff92:	bf00      	nop
 800ff94:	20004fac 	.word	0x20004fac
 800ff98:	20004fb4 	.word	0x20004fb4

0800ff9c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ff9c:	b580      	push	{r7, lr}
 800ff9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ffa0:	2200      	movs	r2, #0
 800ffa2:	4912      	ldr	r1, [pc, #72]	; (800ffec <MX_USB_DEVICE_Init+0x50>)
 800ffa4:	4812      	ldr	r0, [pc, #72]	; (800fff0 <MX_USB_DEVICE_Init+0x54>)
 800ffa6:	f7fb fd49 	bl	800ba3c <USBD_Init>
 800ffaa:	4603      	mov	r3, r0
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d001      	beq.n	800ffb4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ffb0:	f7f1 fa0c 	bl	80013cc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ffb4:	490f      	ldr	r1, [pc, #60]	; (800fff4 <MX_USB_DEVICE_Init+0x58>)
 800ffb6:	480e      	ldr	r0, [pc, #56]	; (800fff0 <MX_USB_DEVICE_Init+0x54>)
 800ffb8:	f7fb fd76 	bl	800baa8 <USBD_RegisterClass>
 800ffbc:	4603      	mov	r3, r0
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d001      	beq.n	800ffc6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ffc2:	f7f1 fa03 	bl	80013cc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ffc6:	490c      	ldr	r1, [pc, #48]	; (800fff8 <MX_USB_DEVICE_Init+0x5c>)
 800ffc8:	4809      	ldr	r0, [pc, #36]	; (800fff0 <MX_USB_DEVICE_Init+0x54>)
 800ffca:	f7fb fc9b 	bl	800b904 <USBD_CDC_RegisterInterface>
 800ffce:	4603      	mov	r3, r0
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d001      	beq.n	800ffd8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ffd4:	f7f1 f9fa 	bl	80013cc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ffd8:	4805      	ldr	r0, [pc, #20]	; (800fff0 <MX_USB_DEVICE_Init+0x54>)
 800ffda:	f7fb fd86 	bl	800baea <USBD_Start>
 800ffde:	4603      	mov	r3, r0
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d001      	beq.n	800ffe8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ffe4:	f7f1 f9f2 	bl	80013cc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ffe8:	bf00      	nop
 800ffea:	bd80      	pop	{r7, pc}
 800ffec:	20000134 	.word	0x20000134
 800fff0:	20007078 	.word	0x20007078
 800fff4:	20000018 	.word	0x20000018
 800fff8:	20000120 	.word	0x20000120

0800fffc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800fffc:	b580      	push	{r7, lr}
 800fffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010000:	2200      	movs	r2, #0
 8010002:	4905      	ldr	r1, [pc, #20]	; (8010018 <CDC_Init_FS+0x1c>)
 8010004:	4805      	ldr	r0, [pc, #20]	; (801001c <CDC_Init_FS+0x20>)
 8010006:	f7fb fc92 	bl	800b92e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801000a:	4905      	ldr	r1, [pc, #20]	; (8010020 <CDC_Init_FS+0x24>)
 801000c:	4803      	ldr	r0, [pc, #12]	; (801001c <CDC_Init_FS+0x20>)
 801000e:	f7fb fca7 	bl	800b960 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010012:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010014:	4618      	mov	r0, r3
 8010016:	bd80      	pop	{r7, pc}
 8010018:	20007b48 	.word	0x20007b48
 801001c:	20007078 	.word	0x20007078
 8010020:	20007348 	.word	0x20007348

08010024 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010024:	b480      	push	{r7}
 8010026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010028:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801002a:	4618      	mov	r0, r3
 801002c:	46bd      	mov	sp, r7
 801002e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010032:	4770      	bx	lr

08010034 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010034:	b480      	push	{r7}
 8010036:	b083      	sub	sp, #12
 8010038:	af00      	add	r7, sp, #0
 801003a:	4603      	mov	r3, r0
 801003c:	6039      	str	r1, [r7, #0]
 801003e:	71fb      	strb	r3, [r7, #7]
 8010040:	4613      	mov	r3, r2
 8010042:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010044:	79fb      	ldrb	r3, [r7, #7]
 8010046:	2b23      	cmp	r3, #35	; 0x23
 8010048:	d84a      	bhi.n	80100e0 <CDC_Control_FS+0xac>
 801004a:	a201      	add	r2, pc, #4	; (adr r2, 8010050 <CDC_Control_FS+0x1c>)
 801004c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010050:	080100e1 	.word	0x080100e1
 8010054:	080100e1 	.word	0x080100e1
 8010058:	080100e1 	.word	0x080100e1
 801005c:	080100e1 	.word	0x080100e1
 8010060:	080100e1 	.word	0x080100e1
 8010064:	080100e1 	.word	0x080100e1
 8010068:	080100e1 	.word	0x080100e1
 801006c:	080100e1 	.word	0x080100e1
 8010070:	080100e1 	.word	0x080100e1
 8010074:	080100e1 	.word	0x080100e1
 8010078:	080100e1 	.word	0x080100e1
 801007c:	080100e1 	.word	0x080100e1
 8010080:	080100e1 	.word	0x080100e1
 8010084:	080100e1 	.word	0x080100e1
 8010088:	080100e1 	.word	0x080100e1
 801008c:	080100e1 	.word	0x080100e1
 8010090:	080100e1 	.word	0x080100e1
 8010094:	080100e1 	.word	0x080100e1
 8010098:	080100e1 	.word	0x080100e1
 801009c:	080100e1 	.word	0x080100e1
 80100a0:	080100e1 	.word	0x080100e1
 80100a4:	080100e1 	.word	0x080100e1
 80100a8:	080100e1 	.word	0x080100e1
 80100ac:	080100e1 	.word	0x080100e1
 80100b0:	080100e1 	.word	0x080100e1
 80100b4:	080100e1 	.word	0x080100e1
 80100b8:	080100e1 	.word	0x080100e1
 80100bc:	080100e1 	.word	0x080100e1
 80100c0:	080100e1 	.word	0x080100e1
 80100c4:	080100e1 	.word	0x080100e1
 80100c8:	080100e1 	.word	0x080100e1
 80100cc:	080100e1 	.word	0x080100e1
 80100d0:	080100e1 	.word	0x080100e1
 80100d4:	080100e1 	.word	0x080100e1
 80100d8:	080100e1 	.word	0x080100e1
 80100dc:	080100e1 	.word	0x080100e1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80100e0:	bf00      	nop
  }

  return (USBD_OK);
 80100e2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80100e4:	4618      	mov	r0, r3
 80100e6:	370c      	adds	r7, #12
 80100e8:	46bd      	mov	sp, r7
 80100ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ee:	4770      	bx	lr

080100f0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b082      	sub	sp, #8
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	6078      	str	r0, [r7, #4]
 80100f8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	return impl_CDC_Receive_FS(Buf, Len);
 80100fa:	6839      	ldr	r1, [r7, #0]
 80100fc:	6878      	ldr	r0, [r7, #4]
 80100fe:	f009 f803 	bl	8019108 <impl_CDC_Receive_FS>
 8010102:	4603      	mov	r3, r0

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8010104:	4618      	mov	r0, r3
 8010106:	3708      	adds	r7, #8
 8010108:	46bd      	mov	sp, r7
 801010a:	bd80      	pop	{r7, pc}

0801010c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801010c:	b580      	push	{r7, lr}
 801010e:	b084      	sub	sp, #16
 8010110:	af00      	add	r7, sp, #0
 8010112:	6078      	str	r0, [r7, #4]
 8010114:	460b      	mov	r3, r1
 8010116:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8010118:	2300      	movs	r3, #0
 801011a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801011c:	4b0d      	ldr	r3, [pc, #52]	; (8010154 <CDC_Transmit_FS+0x48>)
 801011e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010122:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8010124:	68bb      	ldr	r3, [r7, #8]
 8010126:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801012a:	2b00      	cmp	r3, #0
 801012c:	d001      	beq.n	8010132 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801012e:	2301      	movs	r3, #1
 8010130:	e00b      	b.n	801014a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8010132:	887b      	ldrh	r3, [r7, #2]
 8010134:	461a      	mov	r2, r3
 8010136:	6879      	ldr	r1, [r7, #4]
 8010138:	4806      	ldr	r0, [pc, #24]	; (8010154 <CDC_Transmit_FS+0x48>)
 801013a:	f7fb fbf8 	bl	800b92e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801013e:	4805      	ldr	r0, [pc, #20]	; (8010154 <CDC_Transmit_FS+0x48>)
 8010140:	f7fb fc22 	bl	800b988 <USBD_CDC_TransmitPacket>
 8010144:	4603      	mov	r3, r0
 8010146:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8010148:	7bfb      	ldrb	r3, [r7, #15]
}
 801014a:	4618      	mov	r0, r3
 801014c:	3710      	adds	r7, #16
 801014e:	46bd      	mov	sp, r7
 8010150:	bd80      	pop	{r7, pc}
 8010152:	bf00      	nop
 8010154:	20007078 	.word	0x20007078

08010158 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010158:	b480      	push	{r7}
 801015a:	b087      	sub	sp, #28
 801015c:	af00      	add	r7, sp, #0
 801015e:	60f8      	str	r0, [r7, #12]
 8010160:	60b9      	str	r1, [r7, #8]
 8010162:	4613      	mov	r3, r2
 8010164:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010166:	2300      	movs	r3, #0
 8010168:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801016a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801016e:	4618      	mov	r0, r3
 8010170:	371c      	adds	r7, #28
 8010172:	46bd      	mov	sp, r7
 8010174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010178:	4770      	bx	lr
	...

0801017c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801017c:	b480      	push	{r7}
 801017e:	b083      	sub	sp, #12
 8010180:	af00      	add	r7, sp, #0
 8010182:	4603      	mov	r3, r0
 8010184:	6039      	str	r1, [r7, #0]
 8010186:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010188:	683b      	ldr	r3, [r7, #0]
 801018a:	2212      	movs	r2, #18
 801018c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801018e:	4b03      	ldr	r3, [pc, #12]	; (801019c <USBD_FS_DeviceDescriptor+0x20>)
}
 8010190:	4618      	mov	r0, r3
 8010192:	370c      	adds	r7, #12
 8010194:	46bd      	mov	sp, r7
 8010196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801019a:	4770      	bx	lr
 801019c:	20000150 	.word	0x20000150

080101a0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80101a0:	b480      	push	{r7}
 80101a2:	b083      	sub	sp, #12
 80101a4:	af00      	add	r7, sp, #0
 80101a6:	4603      	mov	r3, r0
 80101a8:	6039      	str	r1, [r7, #0]
 80101aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80101ac:	683b      	ldr	r3, [r7, #0]
 80101ae:	2204      	movs	r2, #4
 80101b0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80101b2:	4b03      	ldr	r3, [pc, #12]	; (80101c0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80101b4:	4618      	mov	r0, r3
 80101b6:	370c      	adds	r7, #12
 80101b8:	46bd      	mov	sp, r7
 80101ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101be:	4770      	bx	lr
 80101c0:	20000164 	.word	0x20000164

080101c4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80101c4:	b580      	push	{r7, lr}
 80101c6:	b082      	sub	sp, #8
 80101c8:	af00      	add	r7, sp, #0
 80101ca:	4603      	mov	r3, r0
 80101cc:	6039      	str	r1, [r7, #0]
 80101ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80101d0:	79fb      	ldrb	r3, [r7, #7]
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d105      	bne.n	80101e2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80101d6:	683a      	ldr	r2, [r7, #0]
 80101d8:	4907      	ldr	r1, [pc, #28]	; (80101f8 <USBD_FS_ProductStrDescriptor+0x34>)
 80101da:	4808      	ldr	r0, [pc, #32]	; (80101fc <USBD_FS_ProductStrDescriptor+0x38>)
 80101dc:	f7fc fc53 	bl	800ca86 <USBD_GetString>
 80101e0:	e004      	b.n	80101ec <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80101e2:	683a      	ldr	r2, [r7, #0]
 80101e4:	4904      	ldr	r1, [pc, #16]	; (80101f8 <USBD_FS_ProductStrDescriptor+0x34>)
 80101e6:	4805      	ldr	r0, [pc, #20]	; (80101fc <USBD_FS_ProductStrDescriptor+0x38>)
 80101e8:	f7fc fc4d 	bl	800ca86 <USBD_GetString>
  }
  return USBD_StrDesc;
 80101ec:	4b02      	ldr	r3, [pc, #8]	; (80101f8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80101ee:	4618      	mov	r0, r3
 80101f0:	3708      	adds	r7, #8
 80101f2:	46bd      	mov	sp, r7
 80101f4:	bd80      	pop	{r7, pc}
 80101f6:	bf00      	nop
 80101f8:	20008348 	.word	0x20008348
 80101fc:	08019ccc 	.word	0x08019ccc

08010200 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010200:	b580      	push	{r7, lr}
 8010202:	b082      	sub	sp, #8
 8010204:	af00      	add	r7, sp, #0
 8010206:	4603      	mov	r3, r0
 8010208:	6039      	str	r1, [r7, #0]
 801020a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801020c:	683a      	ldr	r2, [r7, #0]
 801020e:	4904      	ldr	r1, [pc, #16]	; (8010220 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010210:	4804      	ldr	r0, [pc, #16]	; (8010224 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010212:	f7fc fc38 	bl	800ca86 <USBD_GetString>
  return USBD_StrDesc;
 8010216:	4b02      	ldr	r3, [pc, #8]	; (8010220 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010218:	4618      	mov	r0, r3
 801021a:	3708      	adds	r7, #8
 801021c:	46bd      	mov	sp, r7
 801021e:	bd80      	pop	{r7, pc}
 8010220:	20008348 	.word	0x20008348
 8010224:	08019ce4 	.word	0x08019ce4

08010228 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010228:	b580      	push	{r7, lr}
 801022a:	b082      	sub	sp, #8
 801022c:	af00      	add	r7, sp, #0
 801022e:	4603      	mov	r3, r0
 8010230:	6039      	str	r1, [r7, #0]
 8010232:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010234:	683b      	ldr	r3, [r7, #0]
 8010236:	221a      	movs	r2, #26
 8010238:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801023a:	f000 f843 	bl	80102c4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801023e:	4b02      	ldr	r3, [pc, #8]	; (8010248 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010240:	4618      	mov	r0, r3
 8010242:	3708      	adds	r7, #8
 8010244:	46bd      	mov	sp, r7
 8010246:	bd80      	pop	{r7, pc}
 8010248:	20000168 	.word	0x20000168

0801024c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801024c:	b580      	push	{r7, lr}
 801024e:	b082      	sub	sp, #8
 8010250:	af00      	add	r7, sp, #0
 8010252:	4603      	mov	r3, r0
 8010254:	6039      	str	r1, [r7, #0]
 8010256:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010258:	79fb      	ldrb	r3, [r7, #7]
 801025a:	2b00      	cmp	r3, #0
 801025c:	d105      	bne.n	801026a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801025e:	683a      	ldr	r2, [r7, #0]
 8010260:	4907      	ldr	r1, [pc, #28]	; (8010280 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010262:	4808      	ldr	r0, [pc, #32]	; (8010284 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010264:	f7fc fc0f 	bl	800ca86 <USBD_GetString>
 8010268:	e004      	b.n	8010274 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801026a:	683a      	ldr	r2, [r7, #0]
 801026c:	4904      	ldr	r1, [pc, #16]	; (8010280 <USBD_FS_ConfigStrDescriptor+0x34>)
 801026e:	4805      	ldr	r0, [pc, #20]	; (8010284 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010270:	f7fc fc09 	bl	800ca86 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010274:	4b02      	ldr	r3, [pc, #8]	; (8010280 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010276:	4618      	mov	r0, r3
 8010278:	3708      	adds	r7, #8
 801027a:	46bd      	mov	sp, r7
 801027c:	bd80      	pop	{r7, pc}
 801027e:	bf00      	nop
 8010280:	20008348 	.word	0x20008348
 8010284:	08019cf8 	.word	0x08019cf8

08010288 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010288:	b580      	push	{r7, lr}
 801028a:	b082      	sub	sp, #8
 801028c:	af00      	add	r7, sp, #0
 801028e:	4603      	mov	r3, r0
 8010290:	6039      	str	r1, [r7, #0]
 8010292:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010294:	79fb      	ldrb	r3, [r7, #7]
 8010296:	2b00      	cmp	r3, #0
 8010298:	d105      	bne.n	80102a6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801029a:	683a      	ldr	r2, [r7, #0]
 801029c:	4907      	ldr	r1, [pc, #28]	; (80102bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 801029e:	4808      	ldr	r0, [pc, #32]	; (80102c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80102a0:	f7fc fbf1 	bl	800ca86 <USBD_GetString>
 80102a4:	e004      	b.n	80102b0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80102a6:	683a      	ldr	r2, [r7, #0]
 80102a8:	4904      	ldr	r1, [pc, #16]	; (80102bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80102aa:	4805      	ldr	r0, [pc, #20]	; (80102c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80102ac:	f7fc fbeb 	bl	800ca86 <USBD_GetString>
  }
  return USBD_StrDesc;
 80102b0:	4b02      	ldr	r3, [pc, #8]	; (80102bc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80102b2:	4618      	mov	r0, r3
 80102b4:	3708      	adds	r7, #8
 80102b6:	46bd      	mov	sp, r7
 80102b8:	bd80      	pop	{r7, pc}
 80102ba:	bf00      	nop
 80102bc:	20008348 	.word	0x20008348
 80102c0:	08019d04 	.word	0x08019d04

080102c4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80102c4:	b580      	push	{r7, lr}
 80102c6:	b084      	sub	sp, #16
 80102c8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80102ca:	4b0f      	ldr	r3, [pc, #60]	; (8010308 <Get_SerialNum+0x44>)
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80102d0:	4b0e      	ldr	r3, [pc, #56]	; (801030c <Get_SerialNum+0x48>)
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80102d6:	4b0e      	ldr	r3, [pc, #56]	; (8010310 <Get_SerialNum+0x4c>)
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80102dc:	68fa      	ldr	r2, [r7, #12]
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	4413      	add	r3, r2
 80102e2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d009      	beq.n	80102fe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80102ea:	2208      	movs	r2, #8
 80102ec:	4909      	ldr	r1, [pc, #36]	; (8010314 <Get_SerialNum+0x50>)
 80102ee:	68f8      	ldr	r0, [r7, #12]
 80102f0:	f000 f814 	bl	801031c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80102f4:	2204      	movs	r2, #4
 80102f6:	4908      	ldr	r1, [pc, #32]	; (8010318 <Get_SerialNum+0x54>)
 80102f8:	68b8      	ldr	r0, [r7, #8]
 80102fa:	f000 f80f 	bl	801031c <IntToUnicode>
  }
}
 80102fe:	bf00      	nop
 8010300:	3710      	adds	r7, #16
 8010302:	46bd      	mov	sp, r7
 8010304:	bd80      	pop	{r7, pc}
 8010306:	bf00      	nop
 8010308:	1fff7a10 	.word	0x1fff7a10
 801030c:	1fff7a14 	.word	0x1fff7a14
 8010310:	1fff7a18 	.word	0x1fff7a18
 8010314:	2000016a 	.word	0x2000016a
 8010318:	2000017a 	.word	0x2000017a

0801031c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801031c:	b480      	push	{r7}
 801031e:	b087      	sub	sp, #28
 8010320:	af00      	add	r7, sp, #0
 8010322:	60f8      	str	r0, [r7, #12]
 8010324:	60b9      	str	r1, [r7, #8]
 8010326:	4613      	mov	r3, r2
 8010328:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801032a:	2300      	movs	r3, #0
 801032c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801032e:	2300      	movs	r3, #0
 8010330:	75fb      	strb	r3, [r7, #23]
 8010332:	e027      	b.n	8010384 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	0f1b      	lsrs	r3, r3, #28
 8010338:	2b09      	cmp	r3, #9
 801033a:	d80b      	bhi.n	8010354 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	0f1b      	lsrs	r3, r3, #28
 8010340:	b2da      	uxtb	r2, r3
 8010342:	7dfb      	ldrb	r3, [r7, #23]
 8010344:	005b      	lsls	r3, r3, #1
 8010346:	4619      	mov	r1, r3
 8010348:	68bb      	ldr	r3, [r7, #8]
 801034a:	440b      	add	r3, r1
 801034c:	3230      	adds	r2, #48	; 0x30
 801034e:	b2d2      	uxtb	r2, r2
 8010350:	701a      	strb	r2, [r3, #0]
 8010352:	e00a      	b.n	801036a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	0f1b      	lsrs	r3, r3, #28
 8010358:	b2da      	uxtb	r2, r3
 801035a:	7dfb      	ldrb	r3, [r7, #23]
 801035c:	005b      	lsls	r3, r3, #1
 801035e:	4619      	mov	r1, r3
 8010360:	68bb      	ldr	r3, [r7, #8]
 8010362:	440b      	add	r3, r1
 8010364:	3237      	adds	r2, #55	; 0x37
 8010366:	b2d2      	uxtb	r2, r2
 8010368:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	011b      	lsls	r3, r3, #4
 801036e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010370:	7dfb      	ldrb	r3, [r7, #23]
 8010372:	005b      	lsls	r3, r3, #1
 8010374:	3301      	adds	r3, #1
 8010376:	68ba      	ldr	r2, [r7, #8]
 8010378:	4413      	add	r3, r2
 801037a:	2200      	movs	r2, #0
 801037c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801037e:	7dfb      	ldrb	r3, [r7, #23]
 8010380:	3301      	adds	r3, #1
 8010382:	75fb      	strb	r3, [r7, #23]
 8010384:	7dfa      	ldrb	r2, [r7, #23]
 8010386:	79fb      	ldrb	r3, [r7, #7]
 8010388:	429a      	cmp	r2, r3
 801038a:	d3d3      	bcc.n	8010334 <IntToUnicode+0x18>
  }
}
 801038c:	bf00      	nop
 801038e:	371c      	adds	r7, #28
 8010390:	46bd      	mov	sp, r7
 8010392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010396:	4770      	bx	lr

08010398 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010398:	b580      	push	{r7, lr}
 801039a:	b08a      	sub	sp, #40	; 0x28
 801039c:	af00      	add	r7, sp, #0
 801039e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80103a0:	f107 0314 	add.w	r3, r7, #20
 80103a4:	2200      	movs	r2, #0
 80103a6:	601a      	str	r2, [r3, #0]
 80103a8:	605a      	str	r2, [r3, #4]
 80103aa:	609a      	str	r2, [r3, #8]
 80103ac:	60da      	str	r2, [r3, #12]
 80103ae:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80103b8:	d13a      	bne.n	8010430 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80103ba:	2300      	movs	r3, #0
 80103bc:	613b      	str	r3, [r7, #16]
 80103be:	4b1e      	ldr	r3, [pc, #120]	; (8010438 <HAL_PCD_MspInit+0xa0>)
 80103c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80103c2:	4a1d      	ldr	r2, [pc, #116]	; (8010438 <HAL_PCD_MspInit+0xa0>)
 80103c4:	f043 0301 	orr.w	r3, r3, #1
 80103c8:	6313      	str	r3, [r2, #48]	; 0x30
 80103ca:	4b1b      	ldr	r3, [pc, #108]	; (8010438 <HAL_PCD_MspInit+0xa0>)
 80103cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80103ce:	f003 0301 	and.w	r3, r3, #1
 80103d2:	613b      	str	r3, [r7, #16]
 80103d4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80103d6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80103da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80103dc:	2302      	movs	r3, #2
 80103de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80103e0:	2300      	movs	r3, #0
 80103e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80103e4:	2303      	movs	r3, #3
 80103e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80103e8:	230a      	movs	r3, #10
 80103ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80103ec:	f107 0314 	add.w	r3, r7, #20
 80103f0:	4619      	mov	r1, r3
 80103f2:	4812      	ldr	r0, [pc, #72]	; (801043c <HAL_PCD_MspInit+0xa4>)
 80103f4:	f7f2 fda4 	bl	8002f40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80103f8:	4b0f      	ldr	r3, [pc, #60]	; (8010438 <HAL_PCD_MspInit+0xa0>)
 80103fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80103fc:	4a0e      	ldr	r2, [pc, #56]	; (8010438 <HAL_PCD_MspInit+0xa0>)
 80103fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010402:	6353      	str	r3, [r2, #52]	; 0x34
 8010404:	2300      	movs	r3, #0
 8010406:	60fb      	str	r3, [r7, #12]
 8010408:	4b0b      	ldr	r3, [pc, #44]	; (8010438 <HAL_PCD_MspInit+0xa0>)
 801040a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801040c:	4a0a      	ldr	r2, [pc, #40]	; (8010438 <HAL_PCD_MspInit+0xa0>)
 801040e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010412:	6453      	str	r3, [r2, #68]	; 0x44
 8010414:	4b08      	ldr	r3, [pc, #32]	; (8010438 <HAL_PCD_MspInit+0xa0>)
 8010416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010418:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801041c:	60fb      	str	r3, [r7, #12]
 801041e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8010420:	2200      	movs	r2, #0
 8010422:	2105      	movs	r1, #5
 8010424:	2043      	movs	r0, #67	; 0x43
 8010426:	f7f2 f9c3 	bl	80027b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801042a:	2043      	movs	r0, #67	; 0x43
 801042c:	f7f2 f9dc 	bl	80027e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010430:	bf00      	nop
 8010432:	3728      	adds	r7, #40	; 0x28
 8010434:	46bd      	mov	sp, r7
 8010436:	bd80      	pop	{r7, pc}
 8010438:	40023800 	.word	0x40023800
 801043c:	40020000 	.word	0x40020000

08010440 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010440:	b580      	push	{r7, lr}
 8010442:	b082      	sub	sp, #8
 8010444:	af00      	add	r7, sp, #0
 8010446:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8010454:	4619      	mov	r1, r3
 8010456:	4610      	mov	r0, r2
 8010458:	f7fb fb92 	bl	800bb80 <USBD_LL_SetupStage>
}
 801045c:	bf00      	nop
 801045e:	3708      	adds	r7, #8
 8010460:	46bd      	mov	sp, r7
 8010462:	bd80      	pop	{r7, pc}

08010464 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010464:	b580      	push	{r7, lr}
 8010466:	b082      	sub	sp, #8
 8010468:	af00      	add	r7, sp, #0
 801046a:	6078      	str	r0, [r7, #4]
 801046c:	460b      	mov	r3, r1
 801046e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8010476:	78fa      	ldrb	r2, [r7, #3]
 8010478:	6879      	ldr	r1, [r7, #4]
 801047a:	4613      	mov	r3, r2
 801047c:	00db      	lsls	r3, r3, #3
 801047e:	1a9b      	subs	r3, r3, r2
 8010480:	009b      	lsls	r3, r3, #2
 8010482:	440b      	add	r3, r1
 8010484:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8010488:	681a      	ldr	r2, [r3, #0]
 801048a:	78fb      	ldrb	r3, [r7, #3]
 801048c:	4619      	mov	r1, r3
 801048e:	f7fb fbca 	bl	800bc26 <USBD_LL_DataOutStage>
}
 8010492:	bf00      	nop
 8010494:	3708      	adds	r7, #8
 8010496:	46bd      	mov	sp, r7
 8010498:	bd80      	pop	{r7, pc}

0801049a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801049a:	b580      	push	{r7, lr}
 801049c:	b082      	sub	sp, #8
 801049e:	af00      	add	r7, sp, #0
 80104a0:	6078      	str	r0, [r7, #4]
 80104a2:	460b      	mov	r3, r1
 80104a4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80104ac:	78fa      	ldrb	r2, [r7, #3]
 80104ae:	6879      	ldr	r1, [r7, #4]
 80104b0:	4613      	mov	r3, r2
 80104b2:	00db      	lsls	r3, r3, #3
 80104b4:	1a9b      	subs	r3, r3, r2
 80104b6:	009b      	lsls	r3, r3, #2
 80104b8:	440b      	add	r3, r1
 80104ba:	3348      	adds	r3, #72	; 0x48
 80104bc:	681a      	ldr	r2, [r3, #0]
 80104be:	78fb      	ldrb	r3, [r7, #3]
 80104c0:	4619      	mov	r1, r3
 80104c2:	f7fb fc13 	bl	800bcec <USBD_LL_DataInStage>
}
 80104c6:	bf00      	nop
 80104c8:	3708      	adds	r7, #8
 80104ca:	46bd      	mov	sp, r7
 80104cc:	bd80      	pop	{r7, pc}

080104ce <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80104ce:	b580      	push	{r7, lr}
 80104d0:	b082      	sub	sp, #8
 80104d2:	af00      	add	r7, sp, #0
 80104d4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80104dc:	4618      	mov	r0, r3
 80104de:	f7fb fd17 	bl	800bf10 <USBD_LL_SOF>
}
 80104e2:	bf00      	nop
 80104e4:	3708      	adds	r7, #8
 80104e6:	46bd      	mov	sp, r7
 80104e8:	bd80      	pop	{r7, pc}

080104ea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80104ea:	b580      	push	{r7, lr}
 80104ec:	b084      	sub	sp, #16
 80104ee:	af00      	add	r7, sp, #0
 80104f0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80104f2:	2301      	movs	r3, #1
 80104f4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	68db      	ldr	r3, [r3, #12]
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d102      	bne.n	8010504 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80104fe:	2300      	movs	r3, #0
 8010500:	73fb      	strb	r3, [r7, #15]
 8010502:	e008      	b.n	8010516 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	68db      	ldr	r3, [r3, #12]
 8010508:	2b02      	cmp	r3, #2
 801050a:	d102      	bne.n	8010512 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801050c:	2301      	movs	r3, #1
 801050e:	73fb      	strb	r3, [r7, #15]
 8010510:	e001      	b.n	8010516 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8010512:	f7f0 ff5b 	bl	80013cc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801051c:	7bfa      	ldrb	r2, [r7, #15]
 801051e:	4611      	mov	r1, r2
 8010520:	4618      	mov	r0, r3
 8010522:	f7fb fcba 	bl	800be9a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801052c:	4618      	mov	r0, r3
 801052e:	f7fb fc73 	bl	800be18 <USBD_LL_Reset>
}
 8010532:	bf00      	nop
 8010534:	3710      	adds	r7, #16
 8010536:	46bd      	mov	sp, r7
 8010538:	bd80      	pop	{r7, pc}
	...

0801053c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801053c:	b580      	push	{r7, lr}
 801053e:	b082      	sub	sp, #8
 8010540:	af00      	add	r7, sp, #0
 8010542:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801054a:	4618      	mov	r0, r3
 801054c:	f7fb fcb5 	bl	800beba <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	687a      	ldr	r2, [r7, #4]
 801055c:	6812      	ldr	r2, [r2, #0]
 801055e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010562:	f043 0301 	orr.w	r3, r3, #1
 8010566:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	6a1b      	ldr	r3, [r3, #32]
 801056c:	2b00      	cmp	r3, #0
 801056e:	d005      	beq.n	801057c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010570:	4b04      	ldr	r3, [pc, #16]	; (8010584 <HAL_PCD_SuspendCallback+0x48>)
 8010572:	691b      	ldr	r3, [r3, #16]
 8010574:	4a03      	ldr	r2, [pc, #12]	; (8010584 <HAL_PCD_SuspendCallback+0x48>)
 8010576:	f043 0306 	orr.w	r3, r3, #6
 801057a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801057c:	bf00      	nop
 801057e:	3708      	adds	r7, #8
 8010580:	46bd      	mov	sp, r7
 8010582:	bd80      	pop	{r7, pc}
 8010584:	e000ed00 	.word	0xe000ed00

08010588 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010588:	b580      	push	{r7, lr}
 801058a:	b082      	sub	sp, #8
 801058c:	af00      	add	r7, sp, #0
 801058e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010596:	4618      	mov	r0, r3
 8010598:	f7fb fca4 	bl	800bee4 <USBD_LL_Resume>
}
 801059c:	bf00      	nop
 801059e:	3708      	adds	r7, #8
 80105a0:	46bd      	mov	sp, r7
 80105a2:	bd80      	pop	{r7, pc}

080105a4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80105a4:	b580      	push	{r7, lr}
 80105a6:	b082      	sub	sp, #8
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	6078      	str	r0, [r7, #4]
 80105ac:	460b      	mov	r3, r1
 80105ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80105b6:	78fa      	ldrb	r2, [r7, #3]
 80105b8:	4611      	mov	r1, r2
 80105ba:	4618      	mov	r0, r3
 80105bc:	f7fb fccf 	bl	800bf5e <USBD_LL_IsoOUTIncomplete>
}
 80105c0:	bf00      	nop
 80105c2:	3708      	adds	r7, #8
 80105c4:	46bd      	mov	sp, r7
 80105c6:	bd80      	pop	{r7, pc}

080105c8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80105c8:	b580      	push	{r7, lr}
 80105ca:	b082      	sub	sp, #8
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	6078      	str	r0, [r7, #4]
 80105d0:	460b      	mov	r3, r1
 80105d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80105da:	78fa      	ldrb	r2, [r7, #3]
 80105dc:	4611      	mov	r1, r2
 80105de:	4618      	mov	r0, r3
 80105e0:	f7fb fcb0 	bl	800bf44 <USBD_LL_IsoINIncomplete>
}
 80105e4:	bf00      	nop
 80105e6:	3708      	adds	r7, #8
 80105e8:	46bd      	mov	sp, r7
 80105ea:	bd80      	pop	{r7, pc}

080105ec <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80105ec:	b580      	push	{r7, lr}
 80105ee:	b082      	sub	sp, #8
 80105f0:	af00      	add	r7, sp, #0
 80105f2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80105fa:	4618      	mov	r0, r3
 80105fc:	f7fb fcbc 	bl	800bf78 <USBD_LL_DevConnected>
}
 8010600:	bf00      	nop
 8010602:	3708      	adds	r7, #8
 8010604:	46bd      	mov	sp, r7
 8010606:	bd80      	pop	{r7, pc}

08010608 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010608:	b580      	push	{r7, lr}
 801060a:	b082      	sub	sp, #8
 801060c:	af00      	add	r7, sp, #0
 801060e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010616:	4618      	mov	r0, r3
 8010618:	f7fb fcb9 	bl	800bf8e <USBD_LL_DevDisconnected>
}
 801061c:	bf00      	nop
 801061e:	3708      	adds	r7, #8
 8010620:	46bd      	mov	sp, r7
 8010622:	bd80      	pop	{r7, pc}

08010624 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010624:	b580      	push	{r7, lr}
 8010626:	b082      	sub	sp, #8
 8010628:	af00      	add	r7, sp, #0
 801062a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	781b      	ldrb	r3, [r3, #0]
 8010630:	2b00      	cmp	r3, #0
 8010632:	d13c      	bne.n	80106ae <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010634:	4a20      	ldr	r2, [pc, #128]	; (80106b8 <USBD_LL_Init+0x94>)
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	4a1e      	ldr	r2, [pc, #120]	; (80106b8 <USBD_LL_Init+0x94>)
 8010640:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010644:	4b1c      	ldr	r3, [pc, #112]	; (80106b8 <USBD_LL_Init+0x94>)
 8010646:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801064a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801064c:	4b1a      	ldr	r3, [pc, #104]	; (80106b8 <USBD_LL_Init+0x94>)
 801064e:	2204      	movs	r2, #4
 8010650:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010652:	4b19      	ldr	r3, [pc, #100]	; (80106b8 <USBD_LL_Init+0x94>)
 8010654:	2202      	movs	r2, #2
 8010656:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010658:	4b17      	ldr	r3, [pc, #92]	; (80106b8 <USBD_LL_Init+0x94>)
 801065a:	2200      	movs	r2, #0
 801065c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801065e:	4b16      	ldr	r3, [pc, #88]	; (80106b8 <USBD_LL_Init+0x94>)
 8010660:	2202      	movs	r2, #2
 8010662:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010664:	4b14      	ldr	r3, [pc, #80]	; (80106b8 <USBD_LL_Init+0x94>)
 8010666:	2200      	movs	r2, #0
 8010668:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801066a:	4b13      	ldr	r3, [pc, #76]	; (80106b8 <USBD_LL_Init+0x94>)
 801066c:	2200      	movs	r2, #0
 801066e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010670:	4b11      	ldr	r3, [pc, #68]	; (80106b8 <USBD_LL_Init+0x94>)
 8010672:	2200      	movs	r2, #0
 8010674:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8010676:	4b10      	ldr	r3, [pc, #64]	; (80106b8 <USBD_LL_Init+0x94>)
 8010678:	2200      	movs	r2, #0
 801067a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801067c:	4b0e      	ldr	r3, [pc, #56]	; (80106b8 <USBD_LL_Init+0x94>)
 801067e:	2200      	movs	r2, #0
 8010680:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010682:	480d      	ldr	r0, [pc, #52]	; (80106b8 <USBD_LL_Init+0x94>)
 8010684:	f7f5 fc54 	bl	8005f30 <HAL_PCD_Init>
 8010688:	4603      	mov	r3, r0
 801068a:	2b00      	cmp	r3, #0
 801068c:	d001      	beq.n	8010692 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801068e:	f7f0 fe9d 	bl	80013cc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8010692:	2180      	movs	r1, #128	; 0x80
 8010694:	4808      	ldr	r0, [pc, #32]	; (80106b8 <USBD_LL_Init+0x94>)
 8010696:	f7f6 fdb2 	bl	80071fe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801069a:	2240      	movs	r2, #64	; 0x40
 801069c:	2100      	movs	r1, #0
 801069e:	4806      	ldr	r0, [pc, #24]	; (80106b8 <USBD_LL_Init+0x94>)
 80106a0:	f7f6 fd66 	bl	8007170 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80106a4:	2280      	movs	r2, #128	; 0x80
 80106a6:	2101      	movs	r1, #1
 80106a8:	4803      	ldr	r0, [pc, #12]	; (80106b8 <USBD_LL_Init+0x94>)
 80106aa:	f7f6 fd61 	bl	8007170 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80106ae:	2300      	movs	r3, #0
}
 80106b0:	4618      	mov	r0, r3
 80106b2:	3708      	adds	r7, #8
 80106b4:	46bd      	mov	sp, r7
 80106b6:	bd80      	pop	{r7, pc}
 80106b8:	20008548 	.word	0x20008548

080106bc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80106bc:	b580      	push	{r7, lr}
 80106be:	b084      	sub	sp, #16
 80106c0:	af00      	add	r7, sp, #0
 80106c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80106c4:	2300      	movs	r3, #0
 80106c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80106c8:	2300      	movs	r3, #0
 80106ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80106d2:	4618      	mov	r0, r3
 80106d4:	f7f5 fd49 	bl	800616a <HAL_PCD_Start>
 80106d8:	4603      	mov	r3, r0
 80106da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80106dc:	7bfb      	ldrb	r3, [r7, #15]
 80106de:	4618      	mov	r0, r3
 80106e0:	f000 f92a 	bl	8010938 <USBD_Get_USB_Status>
 80106e4:	4603      	mov	r3, r0
 80106e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80106e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80106ea:	4618      	mov	r0, r3
 80106ec:	3710      	adds	r7, #16
 80106ee:	46bd      	mov	sp, r7
 80106f0:	bd80      	pop	{r7, pc}

080106f2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80106f2:	b580      	push	{r7, lr}
 80106f4:	b084      	sub	sp, #16
 80106f6:	af00      	add	r7, sp, #0
 80106f8:	6078      	str	r0, [r7, #4]
 80106fa:	4608      	mov	r0, r1
 80106fc:	4611      	mov	r1, r2
 80106fe:	461a      	mov	r2, r3
 8010700:	4603      	mov	r3, r0
 8010702:	70fb      	strb	r3, [r7, #3]
 8010704:	460b      	mov	r3, r1
 8010706:	70bb      	strb	r3, [r7, #2]
 8010708:	4613      	mov	r3, r2
 801070a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801070c:	2300      	movs	r3, #0
 801070e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010710:	2300      	movs	r3, #0
 8010712:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801071a:	78bb      	ldrb	r3, [r7, #2]
 801071c:	883a      	ldrh	r2, [r7, #0]
 801071e:	78f9      	ldrb	r1, [r7, #3]
 8010720:	f7f6 f92d 	bl	800697e <HAL_PCD_EP_Open>
 8010724:	4603      	mov	r3, r0
 8010726:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010728:	7bfb      	ldrb	r3, [r7, #15]
 801072a:	4618      	mov	r0, r3
 801072c:	f000 f904 	bl	8010938 <USBD_Get_USB_Status>
 8010730:	4603      	mov	r3, r0
 8010732:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010734:	7bbb      	ldrb	r3, [r7, #14]
}
 8010736:	4618      	mov	r0, r3
 8010738:	3710      	adds	r7, #16
 801073a:	46bd      	mov	sp, r7
 801073c:	bd80      	pop	{r7, pc}

0801073e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801073e:	b580      	push	{r7, lr}
 8010740:	b084      	sub	sp, #16
 8010742:	af00      	add	r7, sp, #0
 8010744:	6078      	str	r0, [r7, #4]
 8010746:	460b      	mov	r3, r1
 8010748:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801074a:	2300      	movs	r3, #0
 801074c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801074e:	2300      	movs	r3, #0
 8010750:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010758:	78fa      	ldrb	r2, [r7, #3]
 801075a:	4611      	mov	r1, r2
 801075c:	4618      	mov	r0, r3
 801075e:	f7f6 f976 	bl	8006a4e <HAL_PCD_EP_Close>
 8010762:	4603      	mov	r3, r0
 8010764:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010766:	7bfb      	ldrb	r3, [r7, #15]
 8010768:	4618      	mov	r0, r3
 801076a:	f000 f8e5 	bl	8010938 <USBD_Get_USB_Status>
 801076e:	4603      	mov	r3, r0
 8010770:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010772:	7bbb      	ldrb	r3, [r7, #14]
}
 8010774:	4618      	mov	r0, r3
 8010776:	3710      	adds	r7, #16
 8010778:	46bd      	mov	sp, r7
 801077a:	bd80      	pop	{r7, pc}

0801077c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801077c:	b580      	push	{r7, lr}
 801077e:	b084      	sub	sp, #16
 8010780:	af00      	add	r7, sp, #0
 8010782:	6078      	str	r0, [r7, #4]
 8010784:	460b      	mov	r3, r1
 8010786:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010788:	2300      	movs	r3, #0
 801078a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801078c:	2300      	movs	r3, #0
 801078e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010796:	78fa      	ldrb	r2, [r7, #3]
 8010798:	4611      	mov	r1, r2
 801079a:	4618      	mov	r0, r3
 801079c:	f7f6 fa4e 	bl	8006c3c <HAL_PCD_EP_SetStall>
 80107a0:	4603      	mov	r3, r0
 80107a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80107a4:	7bfb      	ldrb	r3, [r7, #15]
 80107a6:	4618      	mov	r0, r3
 80107a8:	f000 f8c6 	bl	8010938 <USBD_Get_USB_Status>
 80107ac:	4603      	mov	r3, r0
 80107ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80107b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80107b2:	4618      	mov	r0, r3
 80107b4:	3710      	adds	r7, #16
 80107b6:	46bd      	mov	sp, r7
 80107b8:	bd80      	pop	{r7, pc}

080107ba <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80107ba:	b580      	push	{r7, lr}
 80107bc:	b084      	sub	sp, #16
 80107be:	af00      	add	r7, sp, #0
 80107c0:	6078      	str	r0, [r7, #4]
 80107c2:	460b      	mov	r3, r1
 80107c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80107c6:	2300      	movs	r3, #0
 80107c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80107ca:	2300      	movs	r3, #0
 80107cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80107d4:	78fa      	ldrb	r2, [r7, #3]
 80107d6:	4611      	mov	r1, r2
 80107d8:	4618      	mov	r0, r3
 80107da:	f7f6 fa93 	bl	8006d04 <HAL_PCD_EP_ClrStall>
 80107de:	4603      	mov	r3, r0
 80107e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80107e2:	7bfb      	ldrb	r3, [r7, #15]
 80107e4:	4618      	mov	r0, r3
 80107e6:	f000 f8a7 	bl	8010938 <USBD_Get_USB_Status>
 80107ea:	4603      	mov	r3, r0
 80107ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80107ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80107f0:	4618      	mov	r0, r3
 80107f2:	3710      	adds	r7, #16
 80107f4:	46bd      	mov	sp, r7
 80107f6:	bd80      	pop	{r7, pc}

080107f8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80107f8:	b480      	push	{r7}
 80107fa:	b085      	sub	sp, #20
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	6078      	str	r0, [r7, #4]
 8010800:	460b      	mov	r3, r1
 8010802:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801080a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801080c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010810:	2b00      	cmp	r3, #0
 8010812:	da0b      	bge.n	801082c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010814:	78fb      	ldrb	r3, [r7, #3]
 8010816:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801081a:	68f9      	ldr	r1, [r7, #12]
 801081c:	4613      	mov	r3, r2
 801081e:	00db      	lsls	r3, r3, #3
 8010820:	1a9b      	subs	r3, r3, r2
 8010822:	009b      	lsls	r3, r3, #2
 8010824:	440b      	add	r3, r1
 8010826:	333e      	adds	r3, #62	; 0x3e
 8010828:	781b      	ldrb	r3, [r3, #0]
 801082a:	e00b      	b.n	8010844 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801082c:	78fb      	ldrb	r3, [r7, #3]
 801082e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010832:	68f9      	ldr	r1, [r7, #12]
 8010834:	4613      	mov	r3, r2
 8010836:	00db      	lsls	r3, r3, #3
 8010838:	1a9b      	subs	r3, r3, r2
 801083a:	009b      	lsls	r3, r3, #2
 801083c:	440b      	add	r3, r1
 801083e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010842:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010844:	4618      	mov	r0, r3
 8010846:	3714      	adds	r7, #20
 8010848:	46bd      	mov	sp, r7
 801084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801084e:	4770      	bx	lr

08010850 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010850:	b580      	push	{r7, lr}
 8010852:	b084      	sub	sp, #16
 8010854:	af00      	add	r7, sp, #0
 8010856:	6078      	str	r0, [r7, #4]
 8010858:	460b      	mov	r3, r1
 801085a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801085c:	2300      	movs	r3, #0
 801085e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010860:	2300      	movs	r3, #0
 8010862:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801086a:	78fa      	ldrb	r2, [r7, #3]
 801086c:	4611      	mov	r1, r2
 801086e:	4618      	mov	r0, r3
 8010870:	f7f6 f860 	bl	8006934 <HAL_PCD_SetAddress>
 8010874:	4603      	mov	r3, r0
 8010876:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010878:	7bfb      	ldrb	r3, [r7, #15]
 801087a:	4618      	mov	r0, r3
 801087c:	f000 f85c 	bl	8010938 <USBD_Get_USB_Status>
 8010880:	4603      	mov	r3, r0
 8010882:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010884:	7bbb      	ldrb	r3, [r7, #14]
}
 8010886:	4618      	mov	r0, r3
 8010888:	3710      	adds	r7, #16
 801088a:	46bd      	mov	sp, r7
 801088c:	bd80      	pop	{r7, pc}

0801088e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801088e:	b580      	push	{r7, lr}
 8010890:	b086      	sub	sp, #24
 8010892:	af00      	add	r7, sp, #0
 8010894:	60f8      	str	r0, [r7, #12]
 8010896:	607a      	str	r2, [r7, #4]
 8010898:	603b      	str	r3, [r7, #0]
 801089a:	460b      	mov	r3, r1
 801089c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801089e:	2300      	movs	r3, #0
 80108a0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80108a2:	2300      	movs	r3, #0
 80108a4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80108ac:	7af9      	ldrb	r1, [r7, #11]
 80108ae:	683b      	ldr	r3, [r7, #0]
 80108b0:	687a      	ldr	r2, [r7, #4]
 80108b2:	f7f6 f979 	bl	8006ba8 <HAL_PCD_EP_Transmit>
 80108b6:	4603      	mov	r3, r0
 80108b8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80108ba:	7dfb      	ldrb	r3, [r7, #23]
 80108bc:	4618      	mov	r0, r3
 80108be:	f000 f83b 	bl	8010938 <USBD_Get_USB_Status>
 80108c2:	4603      	mov	r3, r0
 80108c4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80108c6:	7dbb      	ldrb	r3, [r7, #22]
}
 80108c8:	4618      	mov	r0, r3
 80108ca:	3718      	adds	r7, #24
 80108cc:	46bd      	mov	sp, r7
 80108ce:	bd80      	pop	{r7, pc}

080108d0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80108d0:	b580      	push	{r7, lr}
 80108d2:	b086      	sub	sp, #24
 80108d4:	af00      	add	r7, sp, #0
 80108d6:	60f8      	str	r0, [r7, #12]
 80108d8:	607a      	str	r2, [r7, #4]
 80108da:	603b      	str	r3, [r7, #0]
 80108dc:	460b      	mov	r3, r1
 80108de:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80108e0:	2300      	movs	r3, #0
 80108e2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80108e4:	2300      	movs	r3, #0
 80108e6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80108ee:	7af9      	ldrb	r1, [r7, #11]
 80108f0:	683b      	ldr	r3, [r7, #0]
 80108f2:	687a      	ldr	r2, [r7, #4]
 80108f4:	f7f6 f8f5 	bl	8006ae2 <HAL_PCD_EP_Receive>
 80108f8:	4603      	mov	r3, r0
 80108fa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80108fc:	7dfb      	ldrb	r3, [r7, #23]
 80108fe:	4618      	mov	r0, r3
 8010900:	f000 f81a 	bl	8010938 <USBD_Get_USB_Status>
 8010904:	4603      	mov	r3, r0
 8010906:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010908:	7dbb      	ldrb	r3, [r7, #22]
}
 801090a:	4618      	mov	r0, r3
 801090c:	3718      	adds	r7, #24
 801090e:	46bd      	mov	sp, r7
 8010910:	bd80      	pop	{r7, pc}

08010912 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010912:	b580      	push	{r7, lr}
 8010914:	b082      	sub	sp, #8
 8010916:	af00      	add	r7, sp, #0
 8010918:	6078      	str	r0, [r7, #4]
 801091a:	460b      	mov	r3, r1
 801091c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010924:	78fa      	ldrb	r2, [r7, #3]
 8010926:	4611      	mov	r1, r2
 8010928:	4618      	mov	r0, r3
 801092a:	f7f6 f925 	bl	8006b78 <HAL_PCD_EP_GetRxCount>
 801092e:	4603      	mov	r3, r0
}
 8010930:	4618      	mov	r0, r3
 8010932:	3708      	adds	r7, #8
 8010934:	46bd      	mov	sp, r7
 8010936:	bd80      	pop	{r7, pc}

08010938 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010938:	b480      	push	{r7}
 801093a:	b085      	sub	sp, #20
 801093c:	af00      	add	r7, sp, #0
 801093e:	4603      	mov	r3, r0
 8010940:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010942:	2300      	movs	r3, #0
 8010944:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010946:	79fb      	ldrb	r3, [r7, #7]
 8010948:	2b03      	cmp	r3, #3
 801094a:	d817      	bhi.n	801097c <USBD_Get_USB_Status+0x44>
 801094c:	a201      	add	r2, pc, #4	; (adr r2, 8010954 <USBD_Get_USB_Status+0x1c>)
 801094e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010952:	bf00      	nop
 8010954:	08010965 	.word	0x08010965
 8010958:	0801096b 	.word	0x0801096b
 801095c:	08010971 	.word	0x08010971
 8010960:	08010977 	.word	0x08010977
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010964:	2300      	movs	r3, #0
 8010966:	73fb      	strb	r3, [r7, #15]
    break;
 8010968:	e00b      	b.n	8010982 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801096a:	2303      	movs	r3, #3
 801096c:	73fb      	strb	r3, [r7, #15]
    break;
 801096e:	e008      	b.n	8010982 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010970:	2301      	movs	r3, #1
 8010972:	73fb      	strb	r3, [r7, #15]
    break;
 8010974:	e005      	b.n	8010982 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010976:	2303      	movs	r3, #3
 8010978:	73fb      	strb	r3, [r7, #15]
    break;
 801097a:	e002      	b.n	8010982 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801097c:	2303      	movs	r3, #3
 801097e:	73fb      	strb	r3, [r7, #15]
    break;
 8010980:	bf00      	nop
  }
  return usb_status;
 8010982:	7bfb      	ldrb	r3, [r7, #15]
}
 8010984:	4618      	mov	r0, r3
 8010986:	3714      	adds	r7, #20
 8010988:	46bd      	mov	sp, r7
 801098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801098e:	4770      	bx	lr

08010990 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8010990:	b480      	push	{r7}
 8010992:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8010994:	bf00      	nop
 8010996:	46bd      	mov	sp, r7
 8010998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801099c:	4770      	bx	lr
	...

080109a0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80109a0:	b580      	push	{r7, lr}
 80109a2:	b086      	sub	sp, #24
 80109a4:	af04      	add	r7, sp, #16
 80109a6:	4603      	mov	r3, r0
 80109a8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80109aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80109ae:	9302      	str	r3, [sp, #8]
 80109b0:	2301      	movs	r3, #1
 80109b2:	9301      	str	r3, [sp, #4]
 80109b4:	1dfb      	adds	r3, r7, #7
 80109b6:	9300      	str	r3, [sp, #0]
 80109b8:	2301      	movs	r3, #1
 80109ba:	2200      	movs	r2, #0
 80109bc:	2178      	movs	r1, #120	; 0x78
 80109be:	4803      	ldr	r0, [pc, #12]	; (80109cc <ssd1306_WriteCommand+0x2c>)
 80109c0:	f7f2 fdaa 	bl	8003518 <HAL_I2C_Mem_Write>
}
 80109c4:	bf00      	nop
 80109c6:	3708      	adds	r7, #8
 80109c8:	46bd      	mov	sp, r7
 80109ca:	bd80      	pop	{r7, pc}
 80109cc:	20005e0c 	.word	0x20005e0c

080109d0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80109d0:	b580      	push	{r7, lr}
 80109d2:	b086      	sub	sp, #24
 80109d4:	af04      	add	r7, sp, #16
 80109d6:	6078      	str	r0, [r7, #4]
 80109d8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80109da:	683b      	ldr	r3, [r7, #0]
 80109dc:	b29b      	uxth	r3, r3
 80109de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80109e2:	9202      	str	r2, [sp, #8]
 80109e4:	9301      	str	r3, [sp, #4]
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	9300      	str	r3, [sp, #0]
 80109ea:	2301      	movs	r3, #1
 80109ec:	2240      	movs	r2, #64	; 0x40
 80109ee:	2178      	movs	r1, #120	; 0x78
 80109f0:	4803      	ldr	r0, [pc, #12]	; (8010a00 <ssd1306_WriteData+0x30>)
 80109f2:	f7f2 fd91 	bl	8003518 <HAL_I2C_Mem_Write>
}
 80109f6:	bf00      	nop
 80109f8:	3708      	adds	r7, #8
 80109fa:	46bd      	mov	sp, r7
 80109fc:	bd80      	pop	{r7, pc}
 80109fe:	bf00      	nop
 8010a00:	20005e0c 	.word	0x20005e0c

08010a04 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8010a04:	b580      	push	{r7, lr}
 8010a06:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8010a08:	f7ff ffc2 	bl	8010990 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8010a0c:	2064      	movs	r0, #100	; 0x64
 8010a0e:	f7f1 fa1f 	bl	8001e50 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8010a12:	2000      	movs	r0, #0
 8010a14:	f000 fb2a 	bl	801106c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8010a18:	2020      	movs	r0, #32
 8010a1a:	f7ff ffc1 	bl	80109a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8010a1e:	2000      	movs	r0, #0
 8010a20:	f7ff ffbe 	bl	80109a0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8010a24:	20b0      	movs	r0, #176	; 0xb0
 8010a26:	f7ff ffbb 	bl	80109a0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8010a2a:	20c8      	movs	r0, #200	; 0xc8
 8010a2c:	f7ff ffb8 	bl	80109a0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8010a30:	2000      	movs	r0, #0
 8010a32:	f7ff ffb5 	bl	80109a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8010a36:	2010      	movs	r0, #16
 8010a38:	f7ff ffb2 	bl	80109a0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8010a3c:	2040      	movs	r0, #64	; 0x40
 8010a3e:	f7ff ffaf 	bl	80109a0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8010a42:	20ff      	movs	r0, #255	; 0xff
 8010a44:	f000 faff 	bl	8011046 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8010a48:	20a1      	movs	r0, #161	; 0xa1
 8010a4a:	f7ff ffa9 	bl	80109a0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8010a4e:	20a6      	movs	r0, #166	; 0xa6
 8010a50:	f7ff ffa6 	bl	80109a0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8010a54:	20a8      	movs	r0, #168	; 0xa8
 8010a56:	f7ff ffa3 	bl	80109a0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 8010a5a:	201f      	movs	r0, #31
 8010a5c:	f7ff ffa0 	bl	80109a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8010a60:	20a4      	movs	r0, #164	; 0xa4
 8010a62:	f7ff ff9d 	bl	80109a0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8010a66:	20d3      	movs	r0, #211	; 0xd3
 8010a68:	f7ff ff9a 	bl	80109a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8010a6c:	2000      	movs	r0, #0
 8010a6e:	f7ff ff97 	bl	80109a0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8010a72:	20d5      	movs	r0, #213	; 0xd5
 8010a74:	f7ff ff94 	bl	80109a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8010a78:	20f0      	movs	r0, #240	; 0xf0
 8010a7a:	f7ff ff91 	bl	80109a0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8010a7e:	20d9      	movs	r0, #217	; 0xd9
 8010a80:	f7ff ff8e 	bl	80109a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8010a84:	2022      	movs	r0, #34	; 0x22
 8010a86:	f7ff ff8b 	bl	80109a0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8010a8a:	20da      	movs	r0, #218	; 0xda
 8010a8c:	f7ff ff88 	bl	80109a0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 8010a90:	2002      	movs	r0, #2
 8010a92:	f7ff ff85 	bl	80109a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8010a96:	20db      	movs	r0, #219	; 0xdb
 8010a98:	f7ff ff82 	bl	80109a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8010a9c:	2020      	movs	r0, #32
 8010a9e:	f7ff ff7f 	bl	80109a0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8010aa2:	208d      	movs	r0, #141	; 0x8d
 8010aa4:	f7ff ff7c 	bl	80109a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8010aa8:	2014      	movs	r0, #20
 8010aaa:	f7ff ff79 	bl	80109a0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8010aae:	2001      	movs	r0, #1
 8010ab0:	f000 fadc 	bl	801106c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8010ab4:	2000      	movs	r0, #0
 8010ab6:	f000 f80f 	bl	8010ad8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8010aba:	f000 f8bd 	bl	8010c38 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8010abe:	4b05      	ldr	r3, [pc, #20]	; (8010ad4 <ssd1306_Init+0xd0>)
 8010ac0:	2200      	movs	r2, #0
 8010ac2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8010ac4:	4b03      	ldr	r3, [pc, #12]	; (8010ad4 <ssd1306_Init+0xd0>)
 8010ac6:	2200      	movs	r2, #0
 8010ac8:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8010aca:	4b02      	ldr	r3, [pc, #8]	; (8010ad4 <ssd1306_Init+0xd0>)
 8010acc:	2201      	movs	r2, #1
 8010ace:	715a      	strb	r2, [r3, #5]
}
 8010ad0:	bf00      	nop
 8010ad2:	bd80      	pop	{r7, pc}
 8010ad4:	200051c4 	.word	0x200051c4

08010ad8 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8010ad8:	b480      	push	{r7}
 8010ada:	b085      	sub	sp, #20
 8010adc:	af00      	add	r7, sp, #0
 8010ade:	4603      	mov	r3, r0
 8010ae0:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8010ae2:	2300      	movs	r3, #0
 8010ae4:	60fb      	str	r3, [r7, #12]
 8010ae6:	e00d      	b.n	8010b04 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8010ae8:	79fb      	ldrb	r3, [r7, #7]
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d101      	bne.n	8010af2 <ssd1306_Fill+0x1a>
 8010aee:	2100      	movs	r1, #0
 8010af0:	e000      	b.n	8010af4 <ssd1306_Fill+0x1c>
 8010af2:	21ff      	movs	r1, #255	; 0xff
 8010af4:	4a08      	ldr	r2, [pc, #32]	; (8010b18 <ssd1306_Fill+0x40>)
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	4413      	add	r3, r2
 8010afa:	460a      	mov	r2, r1
 8010afc:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	3301      	adds	r3, #1
 8010b02:	60fb      	str	r3, [r7, #12]
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010b0a:	d3ed      	bcc.n	8010ae8 <ssd1306_Fill+0x10>
    }
}
 8010b0c:	bf00      	nop
 8010b0e:	3714      	adds	r7, #20
 8010b10:	46bd      	mov	sp, r7
 8010b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b16:	4770      	bx	lr
 8010b18:	20004fc4 	.word	0x20004fc4

08010b1c <ssd1306_FillZone>:


void ssd1306_FillZone(uint8_t x, uint8_t y, uint8_t wx, uint8_t wy, SSD1306_COLOR color)
{
 8010b1c:	b490      	push	{r4, r7}
 8010b1e:	b08a      	sub	sp, #40	; 0x28
 8010b20:	af00      	add	r7, sp, #0
 8010b22:	4604      	mov	r4, r0
 8010b24:	4608      	mov	r0, r1
 8010b26:	4611      	mov	r1, r2
 8010b28:	461a      	mov	r2, r3
 8010b2a:	4623      	mov	r3, r4
 8010b2c:	71fb      	strb	r3, [r7, #7]
 8010b2e:	4603      	mov	r3, r0
 8010b30:	71bb      	strb	r3, [r7, #6]
 8010b32:	460b      	mov	r3, r1
 8010b34:	717b      	strb	r3, [r7, #5]
 8010b36:	4613      	mov	r3, r2
 8010b38:	713b      	strb	r3, [r7, #4]
    uint32_t xi;
    uint32_t yi;

    uint32_t by = y/8;
 8010b3a:	79bb      	ldrb	r3, [r7, #6]
 8010b3c:	08db      	lsrs	r3, r3, #3
 8010b3e:	b2db      	uxtb	r3, r3
 8010b40:	61bb      	str	r3, [r7, #24]
    uint32_t bly = (y+wy+7)/8;
 8010b42:	79ba      	ldrb	r2, [r7, #6]
 8010b44:	793b      	ldrb	r3, [r7, #4]
 8010b46:	4413      	add	r3, r2
 8010b48:	3307      	adds	r3, #7
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	da00      	bge.n	8010b50 <ssd1306_FillZone+0x34>
 8010b4e:	3307      	adds	r3, #7
 8010b50:	10db      	asrs	r3, r3, #3
 8010b52:	617b      	str	r3, [r7, #20]

    for (yi = by; yi < bly; yi++) {
 8010b54:	69bb      	ldr	r3, [r7, #24]
 8010b56:	623b      	str	r3, [r7, #32]
 8010b58:	e062      	b.n	8010c20 <ssd1306_FillZone+0x104>
    	uint8_t b = 0xFF;
 8010b5a:	23ff      	movs	r3, #255	; 0xff
 8010b5c:	77fb      	strb	r3, [r7, #31]
    	if (yi == by) {
 8010b5e:	6a3a      	ldr	r2, [r7, #32]
 8010b60:	69bb      	ldr	r3, [r7, #24]
 8010b62:	429a      	cmp	r2, r3
 8010b64:	d106      	bne.n	8010b74 <ssd1306_FillZone+0x58>
    		b = b << (y & 0x7);
 8010b66:	7ffa      	ldrb	r2, [r7, #31]
 8010b68:	79bb      	ldrb	r3, [r7, #6]
 8010b6a:	f003 0307 	and.w	r3, r3, #7
 8010b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8010b72:	77fb      	strb	r3, [r7, #31]
    	}
    	if (yi == bly-1) {
 8010b74:	697b      	ldr	r3, [r7, #20]
 8010b76:	3b01      	subs	r3, #1
 8010b78:	6a3a      	ldr	r2, [r7, #32]
 8010b7a:	429a      	cmp	r2, r3
 8010b7c:	d113      	bne.n	8010ba6 <ssd1306_FillZone+0x8a>
    		int s = (y+wy) & 0x7;
 8010b7e:	79ba      	ldrb	r2, [r7, #6]
 8010b80:	793b      	ldrb	r3, [r7, #4]
 8010b82:	4413      	add	r3, r2
 8010b84:	b2db      	uxtb	r3, r3
 8010b86:	f003 0307 	and.w	r3, r3, #7
 8010b8a:	613b      	str	r3, [r7, #16]
    		if (s) b &= ~(0xFFU << s);
 8010b8c:	693b      	ldr	r3, [r7, #16]
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d009      	beq.n	8010ba6 <ssd1306_FillZone+0x8a>
 8010b92:	22ff      	movs	r2, #255	; 0xff
 8010b94:	693b      	ldr	r3, [r7, #16]
 8010b96:	fa02 f303 	lsl.w	r3, r2, r3
 8010b9a:	b2db      	uxtb	r3, r3
 8010b9c:	43db      	mvns	r3, r3
 8010b9e:	b2da      	uxtb	r2, r3
 8010ba0:	7ffb      	ldrb	r3, [r7, #31]
 8010ba2:	4013      	ands	r3, r2
 8010ba4:	77fb      	strb	r3, [r7, #31]
    	}
    	for (xi = x; xi <x+wx; xi++) {
 8010ba6:	79fb      	ldrb	r3, [r7, #7]
 8010ba8:	627b      	str	r3, [r7, #36]	; 0x24
 8010baa:	e02d      	b.n	8010c08 <ssd1306_FillZone+0xec>
    		int i = yi*SSD1306_WIDTH+xi;
 8010bac:	6a3b      	ldr	r3, [r7, #32]
 8010bae:	01da      	lsls	r2, r3, #7
 8010bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bb2:	4413      	add	r3, r2
 8010bb4:	60fb      	str	r3, [r7, #12]
    		if (i>=SSD1306_BUFFER_SIZE) break;
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010bbc:	da2c      	bge.n	8010c18 <ssd1306_FillZone+0xfc>
    		if (color == Black) {
 8010bbe:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d111      	bne.n	8010bea <ssd1306_FillZone+0xce>
    			SSD1306_Buffer[i] &= ~b;
 8010bc6:	4a1b      	ldr	r2, [pc, #108]	; (8010c34 <ssd1306_FillZone+0x118>)
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	4413      	add	r3, r2
 8010bcc:	781b      	ldrb	r3, [r3, #0]
 8010bce:	b25a      	sxtb	r2, r3
 8010bd0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010bd4:	43db      	mvns	r3, r3
 8010bd6:	b25b      	sxtb	r3, r3
 8010bd8:	4013      	ands	r3, r2
 8010bda:	b25b      	sxtb	r3, r3
 8010bdc:	b2d9      	uxtb	r1, r3
 8010bde:	4a15      	ldr	r2, [pc, #84]	; (8010c34 <ssd1306_FillZone+0x118>)
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	4413      	add	r3, r2
 8010be4:	460a      	mov	r2, r1
 8010be6:	701a      	strb	r2, [r3, #0]
 8010be8:	e00b      	b.n	8010c02 <ssd1306_FillZone+0xe6>
    		} else {
    			SSD1306_Buffer[i] |= b;
 8010bea:	4a12      	ldr	r2, [pc, #72]	; (8010c34 <ssd1306_FillZone+0x118>)
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	4413      	add	r3, r2
 8010bf0:	781a      	ldrb	r2, [r3, #0]
 8010bf2:	7ffb      	ldrb	r3, [r7, #31]
 8010bf4:	4313      	orrs	r3, r2
 8010bf6:	b2d9      	uxtb	r1, r3
 8010bf8:	4a0e      	ldr	r2, [pc, #56]	; (8010c34 <ssd1306_FillZone+0x118>)
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	4413      	add	r3, r2
 8010bfe:	460a      	mov	r2, r1
 8010c00:	701a      	strb	r2, [r3, #0]
    	for (xi = x; xi <x+wx; xi++) {
 8010c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c04:	3301      	adds	r3, #1
 8010c06:	627b      	str	r3, [r7, #36]	; 0x24
 8010c08:	79fa      	ldrb	r2, [r7, #7]
 8010c0a:	797b      	ldrb	r3, [r7, #5]
 8010c0c:	4413      	add	r3, r2
 8010c0e:	461a      	mov	r2, r3
 8010c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c12:	4293      	cmp	r3, r2
 8010c14:	d3ca      	bcc.n	8010bac <ssd1306_FillZone+0x90>
 8010c16:	e000      	b.n	8010c1a <ssd1306_FillZone+0xfe>
    		if (i>=SSD1306_BUFFER_SIZE) break;
 8010c18:	bf00      	nop
    for (yi = by; yi < bly; yi++) {
 8010c1a:	6a3b      	ldr	r3, [r7, #32]
 8010c1c:	3301      	adds	r3, #1
 8010c1e:	623b      	str	r3, [r7, #32]
 8010c20:	6a3a      	ldr	r2, [r7, #32]
 8010c22:	697b      	ldr	r3, [r7, #20]
 8010c24:	429a      	cmp	r2, r3
 8010c26:	d398      	bcc.n	8010b5a <ssd1306_FillZone+0x3e>
    		}
    	}
    }

}
 8010c28:	bf00      	nop
 8010c2a:	3728      	adds	r7, #40	; 0x28
 8010c2c:	46bd      	mov	sp, r7
 8010c2e:	bc90      	pop	{r4, r7}
 8010c30:	4770      	bx	lr
 8010c32:	bf00      	nop
 8010c34:	20004fc4 	.word	0x20004fc4

08010c38 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8010c38:	b580      	push	{r7, lr}
 8010c3a:	b082      	sub	sp, #8
 8010c3c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8010c3e:	2300      	movs	r3, #0
 8010c40:	71fb      	strb	r3, [r7, #7]
 8010c42:	e016      	b.n	8010c72 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8010c44:	79fb      	ldrb	r3, [r7, #7]
 8010c46:	3b50      	subs	r3, #80	; 0x50
 8010c48:	b2db      	uxtb	r3, r3
 8010c4a:	4618      	mov	r0, r3
 8010c4c:	f7ff fea8 	bl	80109a0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8010c50:	2000      	movs	r0, #0
 8010c52:	f7ff fea5 	bl	80109a0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8010c56:	2010      	movs	r0, #16
 8010c58:	f7ff fea2 	bl	80109a0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8010c5c:	79fb      	ldrb	r3, [r7, #7]
 8010c5e:	01db      	lsls	r3, r3, #7
 8010c60:	4a07      	ldr	r2, [pc, #28]	; (8010c80 <ssd1306_UpdateScreen+0x48>)
 8010c62:	4413      	add	r3, r2
 8010c64:	2180      	movs	r1, #128	; 0x80
 8010c66:	4618      	mov	r0, r3
 8010c68:	f7ff feb2 	bl	80109d0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8010c6c:	79fb      	ldrb	r3, [r7, #7]
 8010c6e:	3301      	adds	r3, #1
 8010c70:	71fb      	strb	r3, [r7, #7]
 8010c72:	79fb      	ldrb	r3, [r7, #7]
 8010c74:	2b03      	cmp	r3, #3
 8010c76:	d9e5      	bls.n	8010c44 <ssd1306_UpdateScreen+0xc>
    }
}
 8010c78:	bf00      	nop
 8010c7a:	3708      	adds	r7, #8
 8010c7c:	46bd      	mov	sp, r7
 8010c7e:	bd80      	pop	{r7, pc}
 8010c80:	20004fc4 	.word	0x20004fc4

08010c84 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8010c84:	b480      	push	{r7}
 8010c86:	b083      	sub	sp, #12
 8010c88:	af00      	add	r7, sp, #0
 8010c8a:	4603      	mov	r3, r0
 8010c8c:	71fb      	strb	r3, [r7, #7]
 8010c8e:	460b      	mov	r3, r1
 8010c90:	71bb      	strb	r3, [r7, #6]
 8010c92:	4613      	mov	r3, r2
 8010c94:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8010c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	db48      	blt.n	8010d30 <ssd1306_DrawPixel+0xac>
 8010c9e:	79bb      	ldrb	r3, [r7, #6]
 8010ca0:	2b1f      	cmp	r3, #31
 8010ca2:	d845      	bhi.n	8010d30 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8010ca4:	4b25      	ldr	r3, [pc, #148]	; (8010d3c <ssd1306_DrawPixel+0xb8>)
 8010ca6:	791b      	ldrb	r3, [r3, #4]
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d006      	beq.n	8010cba <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 8010cac:	797b      	ldrb	r3, [r7, #5]
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	bf0c      	ite	eq
 8010cb2:	2301      	moveq	r3, #1
 8010cb4:	2300      	movne	r3, #0
 8010cb6:	b2db      	uxtb	r3, r3
 8010cb8:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 8010cba:	797b      	ldrb	r3, [r7, #5]
 8010cbc:	2b01      	cmp	r3, #1
 8010cbe:	d11a      	bne.n	8010cf6 <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8010cc0:	79fa      	ldrb	r2, [r7, #7]
 8010cc2:	79bb      	ldrb	r3, [r7, #6]
 8010cc4:	08db      	lsrs	r3, r3, #3
 8010cc6:	b2d8      	uxtb	r0, r3
 8010cc8:	4603      	mov	r3, r0
 8010cca:	01db      	lsls	r3, r3, #7
 8010ccc:	4413      	add	r3, r2
 8010cce:	4a1c      	ldr	r2, [pc, #112]	; (8010d40 <ssd1306_DrawPixel+0xbc>)
 8010cd0:	5cd3      	ldrb	r3, [r2, r3]
 8010cd2:	b25a      	sxtb	r2, r3
 8010cd4:	79bb      	ldrb	r3, [r7, #6]
 8010cd6:	f003 0307 	and.w	r3, r3, #7
 8010cda:	2101      	movs	r1, #1
 8010cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8010ce0:	b25b      	sxtb	r3, r3
 8010ce2:	4313      	orrs	r3, r2
 8010ce4:	b259      	sxtb	r1, r3
 8010ce6:	79fa      	ldrb	r2, [r7, #7]
 8010ce8:	4603      	mov	r3, r0
 8010cea:	01db      	lsls	r3, r3, #7
 8010cec:	4413      	add	r3, r2
 8010cee:	b2c9      	uxtb	r1, r1
 8010cf0:	4a13      	ldr	r2, [pc, #76]	; (8010d40 <ssd1306_DrawPixel+0xbc>)
 8010cf2:	54d1      	strb	r1, [r2, r3]
 8010cf4:	e01d      	b.n	8010d32 <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8010cf6:	79fa      	ldrb	r2, [r7, #7]
 8010cf8:	79bb      	ldrb	r3, [r7, #6]
 8010cfa:	08db      	lsrs	r3, r3, #3
 8010cfc:	b2d8      	uxtb	r0, r3
 8010cfe:	4603      	mov	r3, r0
 8010d00:	01db      	lsls	r3, r3, #7
 8010d02:	4413      	add	r3, r2
 8010d04:	4a0e      	ldr	r2, [pc, #56]	; (8010d40 <ssd1306_DrawPixel+0xbc>)
 8010d06:	5cd3      	ldrb	r3, [r2, r3]
 8010d08:	b25a      	sxtb	r2, r3
 8010d0a:	79bb      	ldrb	r3, [r7, #6]
 8010d0c:	f003 0307 	and.w	r3, r3, #7
 8010d10:	2101      	movs	r1, #1
 8010d12:	fa01 f303 	lsl.w	r3, r1, r3
 8010d16:	b25b      	sxtb	r3, r3
 8010d18:	43db      	mvns	r3, r3
 8010d1a:	b25b      	sxtb	r3, r3
 8010d1c:	4013      	ands	r3, r2
 8010d1e:	b259      	sxtb	r1, r3
 8010d20:	79fa      	ldrb	r2, [r7, #7]
 8010d22:	4603      	mov	r3, r0
 8010d24:	01db      	lsls	r3, r3, #7
 8010d26:	4413      	add	r3, r2
 8010d28:	b2c9      	uxtb	r1, r1
 8010d2a:	4a05      	ldr	r2, [pc, #20]	; (8010d40 <ssd1306_DrawPixel+0xbc>)
 8010d2c:	54d1      	strb	r1, [r2, r3]
 8010d2e:	e000      	b.n	8010d32 <ssd1306_DrawPixel+0xae>
        return;
 8010d30:	bf00      	nop
    }
}
 8010d32:	370c      	adds	r7, #12
 8010d34:	46bd      	mov	sp, r7
 8010d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d3a:	4770      	bx	lr
 8010d3c:	200051c4 	.word	0x200051c4
 8010d40:	20004fc4 	.word	0x20004fc4

08010d44 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8010d44:	b590      	push	{r4, r7, lr}
 8010d46:	b089      	sub	sp, #36	; 0x24
 8010d48:	af00      	add	r7, sp, #0
 8010d4a:	4604      	mov	r4, r0
 8010d4c:	1d38      	adds	r0, r7, #4
 8010d4e:	e880 0006 	stmia.w	r0, {r1, r2}
 8010d52:	461a      	mov	r2, r3
 8010d54:	4623      	mov	r3, r4
 8010d56:	73fb      	strb	r3, [r7, #15]
 8010d58:	4613      	mov	r3, r2
 8010d5a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8010d5c:	7bfb      	ldrb	r3, [r7, #15]
 8010d5e:	2b1f      	cmp	r3, #31
 8010d60:	d902      	bls.n	8010d68 <ssd1306_WriteChar+0x24>
 8010d62:	7bfb      	ldrb	r3, [r7, #15]
 8010d64:	2b7e      	cmp	r3, #126	; 0x7e
 8010d66:	d901      	bls.n	8010d6c <ssd1306_WriteChar+0x28>
        return 0;
 8010d68:	2300      	movs	r3, #0
 8010d6a:	e06d      	b.n	8010e48 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8010d6c:	4b38      	ldr	r3, [pc, #224]	; (8010e50 <ssd1306_WriteChar+0x10c>)
 8010d6e:	881b      	ldrh	r3, [r3, #0]
 8010d70:	461a      	mov	r2, r3
 8010d72:	793b      	ldrb	r3, [r7, #4]
 8010d74:	4413      	add	r3, r2
 8010d76:	2b80      	cmp	r3, #128	; 0x80
 8010d78:	dc06      	bgt.n	8010d88 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8010d7a:	4b35      	ldr	r3, [pc, #212]	; (8010e50 <ssd1306_WriteChar+0x10c>)
 8010d7c:	885b      	ldrh	r3, [r3, #2]
 8010d7e:	461a      	mov	r2, r3
 8010d80:	797b      	ldrb	r3, [r7, #5]
 8010d82:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8010d84:	2b20      	cmp	r3, #32
 8010d86:	dd01      	ble.n	8010d8c <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8010d88:	2300      	movs	r3, #0
 8010d8a:	e05d      	b.n	8010e48 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8010d8c:	2300      	movs	r3, #0
 8010d8e:	61fb      	str	r3, [r7, #28]
 8010d90:	e04c      	b.n	8010e2c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8010d92:	68ba      	ldr	r2, [r7, #8]
 8010d94:	7bfb      	ldrb	r3, [r7, #15]
 8010d96:	3b20      	subs	r3, #32
 8010d98:	7979      	ldrb	r1, [r7, #5]
 8010d9a:	fb01 f303 	mul.w	r3, r1, r3
 8010d9e:	4619      	mov	r1, r3
 8010da0:	69fb      	ldr	r3, [r7, #28]
 8010da2:	440b      	add	r3, r1
 8010da4:	005b      	lsls	r3, r3, #1
 8010da6:	4413      	add	r3, r2
 8010da8:	881b      	ldrh	r3, [r3, #0]
 8010daa:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8010dac:	2300      	movs	r3, #0
 8010dae:	61bb      	str	r3, [r7, #24]
 8010db0:	e034      	b.n	8010e1c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8010db2:	697a      	ldr	r2, [r7, #20]
 8010db4:	69bb      	ldr	r3, [r7, #24]
 8010db6:	fa02 f303 	lsl.w	r3, r2, r3
 8010dba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d012      	beq.n	8010de8 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8010dc2:	4b23      	ldr	r3, [pc, #140]	; (8010e50 <ssd1306_WriteChar+0x10c>)
 8010dc4:	881b      	ldrh	r3, [r3, #0]
 8010dc6:	b2da      	uxtb	r2, r3
 8010dc8:	69bb      	ldr	r3, [r7, #24]
 8010dca:	b2db      	uxtb	r3, r3
 8010dcc:	4413      	add	r3, r2
 8010dce:	b2d8      	uxtb	r0, r3
 8010dd0:	4b1f      	ldr	r3, [pc, #124]	; (8010e50 <ssd1306_WriteChar+0x10c>)
 8010dd2:	885b      	ldrh	r3, [r3, #2]
 8010dd4:	b2da      	uxtb	r2, r3
 8010dd6:	69fb      	ldr	r3, [r7, #28]
 8010dd8:	b2db      	uxtb	r3, r3
 8010dda:	4413      	add	r3, r2
 8010ddc:	b2db      	uxtb	r3, r3
 8010dde:	7bba      	ldrb	r2, [r7, #14]
 8010de0:	4619      	mov	r1, r3
 8010de2:	f7ff ff4f 	bl	8010c84 <ssd1306_DrawPixel>
 8010de6:	e016      	b.n	8010e16 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8010de8:	4b19      	ldr	r3, [pc, #100]	; (8010e50 <ssd1306_WriteChar+0x10c>)
 8010dea:	881b      	ldrh	r3, [r3, #0]
 8010dec:	b2da      	uxtb	r2, r3
 8010dee:	69bb      	ldr	r3, [r7, #24]
 8010df0:	b2db      	uxtb	r3, r3
 8010df2:	4413      	add	r3, r2
 8010df4:	b2d8      	uxtb	r0, r3
 8010df6:	4b16      	ldr	r3, [pc, #88]	; (8010e50 <ssd1306_WriteChar+0x10c>)
 8010df8:	885b      	ldrh	r3, [r3, #2]
 8010dfa:	b2da      	uxtb	r2, r3
 8010dfc:	69fb      	ldr	r3, [r7, #28]
 8010dfe:	b2db      	uxtb	r3, r3
 8010e00:	4413      	add	r3, r2
 8010e02:	b2d9      	uxtb	r1, r3
 8010e04:	7bbb      	ldrb	r3, [r7, #14]
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	bf0c      	ite	eq
 8010e0a:	2301      	moveq	r3, #1
 8010e0c:	2300      	movne	r3, #0
 8010e0e:	b2db      	uxtb	r3, r3
 8010e10:	461a      	mov	r2, r3
 8010e12:	f7ff ff37 	bl	8010c84 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8010e16:	69bb      	ldr	r3, [r7, #24]
 8010e18:	3301      	adds	r3, #1
 8010e1a:	61bb      	str	r3, [r7, #24]
 8010e1c:	793b      	ldrb	r3, [r7, #4]
 8010e1e:	461a      	mov	r2, r3
 8010e20:	69bb      	ldr	r3, [r7, #24]
 8010e22:	4293      	cmp	r3, r2
 8010e24:	d3c5      	bcc.n	8010db2 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8010e26:	69fb      	ldr	r3, [r7, #28]
 8010e28:	3301      	adds	r3, #1
 8010e2a:	61fb      	str	r3, [r7, #28]
 8010e2c:	797b      	ldrb	r3, [r7, #5]
 8010e2e:	461a      	mov	r2, r3
 8010e30:	69fb      	ldr	r3, [r7, #28]
 8010e32:	4293      	cmp	r3, r2
 8010e34:	d3ad      	bcc.n	8010d92 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8010e36:	4b06      	ldr	r3, [pc, #24]	; (8010e50 <ssd1306_WriteChar+0x10c>)
 8010e38:	881a      	ldrh	r2, [r3, #0]
 8010e3a:	793b      	ldrb	r3, [r7, #4]
 8010e3c:	b29b      	uxth	r3, r3
 8010e3e:	4413      	add	r3, r2
 8010e40:	b29a      	uxth	r2, r3
 8010e42:	4b03      	ldr	r3, [pc, #12]	; (8010e50 <ssd1306_WriteChar+0x10c>)
 8010e44:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8010e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e48:	4618      	mov	r0, r3
 8010e4a:	3724      	adds	r7, #36	; 0x24
 8010e4c:	46bd      	mov	sp, r7
 8010e4e:	bd90      	pop	{r4, r7, pc}
 8010e50:	200051c4 	.word	0x200051c4

08010e54 <ssd1306_WriteString>:
    }

    // Everything ok
    return *str;
}
char ssd1306_WriteString(const char* str, FontDef Font, SSD1306_COLOR color) {
 8010e54:	b580      	push	{r7, lr}
 8010e56:	b084      	sub	sp, #16
 8010e58:	af00      	add	r7, sp, #0
 8010e5a:	60f8      	str	r0, [r7, #12]
 8010e5c:	1d38      	adds	r0, r7, #4
 8010e5e:	e880 0006 	stmia.w	r0, {r1, r2}
 8010e62:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8010e64:	e012      	b.n	8010e8c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8010e66:	68fb      	ldr	r3, [r7, #12]
 8010e68:	7818      	ldrb	r0, [r3, #0]
 8010e6a:	78fb      	ldrb	r3, [r7, #3]
 8010e6c:	1d3a      	adds	r2, r7, #4
 8010e6e:	ca06      	ldmia	r2, {r1, r2}
 8010e70:	f7ff ff68 	bl	8010d44 <ssd1306_WriteChar>
 8010e74:	4603      	mov	r3, r0
 8010e76:	461a      	mov	r2, r3
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	781b      	ldrb	r3, [r3, #0]
 8010e7c:	429a      	cmp	r2, r3
 8010e7e:	d002      	beq.n	8010e86 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8010e80:	68fb      	ldr	r3, [r7, #12]
 8010e82:	781b      	ldrb	r3, [r3, #0]
 8010e84:	e008      	b.n	8010e98 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	3301      	adds	r3, #1
 8010e8a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8010e8c:	68fb      	ldr	r3, [r7, #12]
 8010e8e:	781b      	ldrb	r3, [r3, #0]
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d1e8      	bne.n	8010e66 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	781b      	ldrb	r3, [r3, #0]
}
 8010e98:	4618      	mov	r0, r3
 8010e9a:	3710      	adds	r7, #16
 8010e9c:	46bd      	mov	sp, r7
 8010e9e:	bd80      	pop	{r7, pc}

08010ea0 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8010ea0:	b480      	push	{r7}
 8010ea2:	b083      	sub	sp, #12
 8010ea4:	af00      	add	r7, sp, #0
 8010ea6:	4603      	mov	r3, r0
 8010ea8:	460a      	mov	r2, r1
 8010eaa:	71fb      	strb	r3, [r7, #7]
 8010eac:	4613      	mov	r3, r2
 8010eae:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8010eb0:	79fb      	ldrb	r3, [r7, #7]
 8010eb2:	b29a      	uxth	r2, r3
 8010eb4:	4b05      	ldr	r3, [pc, #20]	; (8010ecc <ssd1306_SetCursor+0x2c>)
 8010eb6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8010eb8:	79bb      	ldrb	r3, [r7, #6]
 8010eba:	b29a      	uxth	r2, r3
 8010ebc:	4b03      	ldr	r3, [pc, #12]	; (8010ecc <ssd1306_SetCursor+0x2c>)
 8010ebe:	805a      	strh	r2, [r3, #2]
}
 8010ec0:	bf00      	nop
 8010ec2:	370c      	adds	r7, #12
 8010ec4:	46bd      	mov	sp, r7
 8010ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eca:	4770      	bx	lr
 8010ecc:	200051c4 	.word	0x200051c4

08010ed0 <ssd1306_GetCursorX>:

uint8_t ssd1306_GetCursorX(void)
{
 8010ed0:	b480      	push	{r7}
 8010ed2:	af00      	add	r7, sp, #0
	return SSD1306.CurrentX;
 8010ed4:	4b03      	ldr	r3, [pc, #12]	; (8010ee4 <ssd1306_GetCursorX+0x14>)
 8010ed6:	881b      	ldrh	r3, [r3, #0]
 8010ed8:	b2db      	uxtb	r3, r3
}
 8010eda:	4618      	mov	r0, r3
 8010edc:	46bd      	mov	sp, r7
 8010ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ee2:	4770      	bx	lr
 8010ee4:	200051c4 	.word	0x200051c4

08010ee8 <ssd1306_GetCursorY>:
uint8_t ssd1306_GetCursorY(void)
{
 8010ee8:	b480      	push	{r7}
 8010eea:	af00      	add	r7, sp, #0
	return SSD1306.CurrentY;
 8010eec:	4b03      	ldr	r3, [pc, #12]	; (8010efc <ssd1306_GetCursorY+0x14>)
 8010eee:	885b      	ldrh	r3, [r3, #2]
 8010ef0:	b2db      	uxtb	r3, r3
}
 8010ef2:	4618      	mov	r0, r3
 8010ef4:	46bd      	mov	sp, r7
 8010ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010efa:	4770      	bx	lr
 8010efc:	200051c4 	.word	0x200051c4

08010f00 <ssd1306_Line>:

// Draw line by Bresenhem's algorithm
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8010f00:	b590      	push	{r4, r7, lr}
 8010f02:	b089      	sub	sp, #36	; 0x24
 8010f04:	af00      	add	r7, sp, #0
 8010f06:	4604      	mov	r4, r0
 8010f08:	4608      	mov	r0, r1
 8010f0a:	4611      	mov	r1, r2
 8010f0c:	461a      	mov	r2, r3
 8010f0e:	4623      	mov	r3, r4
 8010f10:	71fb      	strb	r3, [r7, #7]
 8010f12:	4603      	mov	r3, r0
 8010f14:	71bb      	strb	r3, [r7, #6]
 8010f16:	460b      	mov	r3, r1
 8010f18:	717b      	strb	r3, [r7, #5]
 8010f1a:	4613      	mov	r3, r2
 8010f1c:	713b      	strb	r3, [r7, #4]
  int32_t deltaX = abs(x2 - x1);
 8010f1e:	797a      	ldrb	r2, [r7, #5]
 8010f20:	79fb      	ldrb	r3, [r7, #7]
 8010f22:	1ad3      	subs	r3, r2, r3
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	bfb8      	it	lt
 8010f28:	425b      	neglt	r3, r3
 8010f2a:	61bb      	str	r3, [r7, #24]
  int32_t deltaY = abs(y2 - y1);
 8010f2c:	793a      	ldrb	r2, [r7, #4]
 8010f2e:	79bb      	ldrb	r3, [r7, #6]
 8010f30:	1ad3      	subs	r3, r2, r3
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	bfb8      	it	lt
 8010f36:	425b      	neglt	r3, r3
 8010f38:	617b      	str	r3, [r7, #20]
  int32_t signX = ((x1 < x2) ? 1 : -1);
 8010f3a:	79fa      	ldrb	r2, [r7, #7]
 8010f3c:	797b      	ldrb	r3, [r7, #5]
 8010f3e:	429a      	cmp	r2, r3
 8010f40:	d201      	bcs.n	8010f46 <ssd1306_Line+0x46>
 8010f42:	2301      	movs	r3, #1
 8010f44:	e001      	b.n	8010f4a <ssd1306_Line+0x4a>
 8010f46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010f4a:	613b      	str	r3, [r7, #16]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 8010f4c:	79ba      	ldrb	r2, [r7, #6]
 8010f4e:	793b      	ldrb	r3, [r7, #4]
 8010f50:	429a      	cmp	r2, r3
 8010f52:	d201      	bcs.n	8010f58 <ssd1306_Line+0x58>
 8010f54:	2301      	movs	r3, #1
 8010f56:	e001      	b.n	8010f5c <ssd1306_Line+0x5c>
 8010f58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010f5c:	60fb      	str	r3, [r7, #12]
  int32_t error = deltaX - deltaY;
 8010f5e:	69ba      	ldr	r2, [r7, #24]
 8010f60:	697b      	ldr	r3, [r7, #20]
 8010f62:	1ad3      	subs	r3, r2, r3
 8010f64:	61fb      	str	r3, [r7, #28]
  int32_t error2;
    
  ssd1306_DrawPixel(x2, y2, color);
 8010f66:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8010f6a:	7939      	ldrb	r1, [r7, #4]
 8010f6c:	797b      	ldrb	r3, [r7, #5]
 8010f6e:	4618      	mov	r0, r3
 8010f70:	f7ff fe88 	bl	8010c84 <ssd1306_DrawPixel>
    while((x1 != x2) || (y1 != y2))
 8010f74:	e024      	b.n	8010fc0 <ssd1306_Line+0xc0>
    {
    ssd1306_DrawPixel(x1, y1, color);
 8010f76:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8010f7a:	79b9      	ldrb	r1, [r7, #6]
 8010f7c:	79fb      	ldrb	r3, [r7, #7]
 8010f7e:	4618      	mov	r0, r3
 8010f80:	f7ff fe80 	bl	8010c84 <ssd1306_DrawPixel>
    error2 = error * 2;
 8010f84:	69fb      	ldr	r3, [r7, #28]
 8010f86:	005b      	lsls	r3, r3, #1
 8010f88:	60bb      	str	r3, [r7, #8]
    if(error2 > -deltaY)
 8010f8a:	697b      	ldr	r3, [r7, #20]
 8010f8c:	425b      	negs	r3, r3
 8010f8e:	68ba      	ldr	r2, [r7, #8]
 8010f90:	429a      	cmp	r2, r3
 8010f92:	dd08      	ble.n	8010fa6 <ssd1306_Line+0xa6>
    {
      error -= deltaY;
 8010f94:	69fa      	ldr	r2, [r7, #28]
 8010f96:	697b      	ldr	r3, [r7, #20]
 8010f98:	1ad3      	subs	r3, r2, r3
 8010f9a:	61fb      	str	r3, [r7, #28]
      x1 += signX;
 8010f9c:	693b      	ldr	r3, [r7, #16]
 8010f9e:	b2da      	uxtb	r2, r3
 8010fa0:	79fb      	ldrb	r3, [r7, #7]
 8010fa2:	4413      	add	r3, r2
 8010fa4:	71fb      	strb	r3, [r7, #7]
    else
    {
    /*nothing to do*/
    }
        
    if(error2 < deltaX)
 8010fa6:	68ba      	ldr	r2, [r7, #8]
 8010fa8:	69bb      	ldr	r3, [r7, #24]
 8010faa:	429a      	cmp	r2, r3
 8010fac:	da08      	bge.n	8010fc0 <ssd1306_Line+0xc0>
    {
      error += deltaX;
 8010fae:	69fa      	ldr	r2, [r7, #28]
 8010fb0:	69bb      	ldr	r3, [r7, #24]
 8010fb2:	4413      	add	r3, r2
 8010fb4:	61fb      	str	r3, [r7, #28]
      y1 += signY;
 8010fb6:	68fb      	ldr	r3, [r7, #12]
 8010fb8:	b2da      	uxtb	r2, r3
 8010fba:	79bb      	ldrb	r3, [r7, #6]
 8010fbc:	4413      	add	r3, r2
 8010fbe:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2))
 8010fc0:	79fa      	ldrb	r2, [r7, #7]
 8010fc2:	797b      	ldrb	r3, [r7, #5]
 8010fc4:	429a      	cmp	r2, r3
 8010fc6:	d1d6      	bne.n	8010f76 <ssd1306_Line+0x76>
 8010fc8:	79ba      	ldrb	r2, [r7, #6]
 8010fca:	793b      	ldrb	r3, [r7, #4]
 8010fcc:	429a      	cmp	r2, r3
 8010fce:	d1d2      	bne.n	8010f76 <ssd1306_Line+0x76>
    else
    {
    /*nothing to do*/
    }
  }
  return;
 8010fd0:	bf00      	nop
}
 8010fd2:	3724      	adds	r7, #36	; 0x24
 8010fd4:	46bd      	mov	sp, r7
 8010fd6:	bd90      	pop	{r4, r7, pc}

08010fd8 <ssd1306_DrawRectangle>:

    return;
}

//Draw rectangle
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8010fd8:	b590      	push	{r4, r7, lr}
 8010fda:	b085      	sub	sp, #20
 8010fdc:	af02      	add	r7, sp, #8
 8010fde:	4604      	mov	r4, r0
 8010fe0:	4608      	mov	r0, r1
 8010fe2:	4611      	mov	r1, r2
 8010fe4:	461a      	mov	r2, r3
 8010fe6:	4623      	mov	r3, r4
 8010fe8:	71fb      	strb	r3, [r7, #7]
 8010fea:	4603      	mov	r3, r0
 8010fec:	71bb      	strb	r3, [r7, #6]
 8010fee:	460b      	mov	r3, r1
 8010ff0:	717b      	strb	r3, [r7, #5]
 8010ff2:	4613      	mov	r3, r2
 8010ff4:	713b      	strb	r3, [r7, #4]
  ssd1306_Line(x1,y1,x2,y1,color);
 8010ff6:	79bc      	ldrb	r4, [r7, #6]
 8010ff8:	797a      	ldrb	r2, [r7, #5]
 8010ffa:	79b9      	ldrb	r1, [r7, #6]
 8010ffc:	79f8      	ldrb	r0, [r7, #7]
 8010ffe:	7e3b      	ldrb	r3, [r7, #24]
 8011000:	9300      	str	r3, [sp, #0]
 8011002:	4623      	mov	r3, r4
 8011004:	f7ff ff7c 	bl	8010f00 <ssd1306_Line>
  ssd1306_Line(x2,y1,x2,y2,color);
 8011008:	793c      	ldrb	r4, [r7, #4]
 801100a:	797a      	ldrb	r2, [r7, #5]
 801100c:	79b9      	ldrb	r1, [r7, #6]
 801100e:	7978      	ldrb	r0, [r7, #5]
 8011010:	7e3b      	ldrb	r3, [r7, #24]
 8011012:	9300      	str	r3, [sp, #0]
 8011014:	4623      	mov	r3, r4
 8011016:	f7ff ff73 	bl	8010f00 <ssd1306_Line>
  ssd1306_Line(x2,y2,x1,y2,color);
 801101a:	793c      	ldrb	r4, [r7, #4]
 801101c:	79fa      	ldrb	r2, [r7, #7]
 801101e:	7939      	ldrb	r1, [r7, #4]
 8011020:	7978      	ldrb	r0, [r7, #5]
 8011022:	7e3b      	ldrb	r3, [r7, #24]
 8011024:	9300      	str	r3, [sp, #0]
 8011026:	4623      	mov	r3, r4
 8011028:	f7ff ff6a 	bl	8010f00 <ssd1306_Line>
  ssd1306_Line(x1,y2,x1,y1,color);
 801102c:	79bc      	ldrb	r4, [r7, #6]
 801102e:	79fa      	ldrb	r2, [r7, #7]
 8011030:	7939      	ldrb	r1, [r7, #4]
 8011032:	79f8      	ldrb	r0, [r7, #7]
 8011034:	7e3b      	ldrb	r3, [r7, #24]
 8011036:	9300      	str	r3, [sp, #0]
 8011038:	4623      	mov	r3, r4
 801103a:	f7ff ff61 	bl	8010f00 <ssd1306_Line>

  return;
 801103e:	bf00      	nop
}
 8011040:	370c      	adds	r7, #12
 8011042:	46bd      	mov	sp, r7
 8011044:	bd90      	pop	{r4, r7, pc}

08011046 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8011046:	b580      	push	{r7, lr}
 8011048:	b084      	sub	sp, #16
 801104a:	af00      	add	r7, sp, #0
 801104c:	4603      	mov	r3, r0
 801104e:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8011050:	2381      	movs	r3, #129	; 0x81
 8011052:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8011054:	7bfb      	ldrb	r3, [r7, #15]
 8011056:	4618      	mov	r0, r3
 8011058:	f7ff fca2 	bl	80109a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 801105c:	79fb      	ldrb	r3, [r7, #7]
 801105e:	4618      	mov	r0, r3
 8011060:	f7ff fc9e 	bl	80109a0 <ssd1306_WriteCommand>
}
 8011064:	bf00      	nop
 8011066:	3710      	adds	r7, #16
 8011068:	46bd      	mov	sp, r7
 801106a:	bd80      	pop	{r7, pc}

0801106c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 801106c:	b580      	push	{r7, lr}
 801106e:	b084      	sub	sp, #16
 8011070:	af00      	add	r7, sp, #0
 8011072:	4603      	mov	r3, r0
 8011074:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8011076:	79fb      	ldrb	r3, [r7, #7]
 8011078:	2b00      	cmp	r3, #0
 801107a:	d005      	beq.n	8011088 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 801107c:	23af      	movs	r3, #175	; 0xaf
 801107e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8011080:	4b08      	ldr	r3, [pc, #32]	; (80110a4 <ssd1306_SetDisplayOn+0x38>)
 8011082:	2201      	movs	r2, #1
 8011084:	719a      	strb	r2, [r3, #6]
 8011086:	e004      	b.n	8011092 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8011088:	23ae      	movs	r3, #174	; 0xae
 801108a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 801108c:	4b05      	ldr	r3, [pc, #20]	; (80110a4 <ssd1306_SetDisplayOn+0x38>)
 801108e:	2200      	movs	r2, #0
 8011090:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 8011092:	7bfb      	ldrb	r3, [r7, #15]
 8011094:	4618      	mov	r0, r3
 8011096:	f7ff fc83 	bl	80109a0 <ssd1306_WriteCommand>
}
 801109a:	bf00      	nop
 801109c:	3710      	adds	r7, #16
 801109e:	46bd      	mov	sp, r7
 80110a0:	bd80      	pop	{r7, pc}
 80110a2:	bf00      	nop
 80110a4:	200051c4 	.word	0x200051c4

080110a8 <itm_debug1>:
{
 80110a8:	b580      	push	{r7, lr}
 80110aa:	b086      	sub	sp, #24
 80110ac:	af02      	add	r7, sp, #8
 80110ae:	60f8      	str	r0, [r7, #12]
 80110b0:	60b9      	str	r1, [r7, #8]
 80110b2:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 80110b4:	4b08      	ldr	r3, [pc, #32]	; (80110d8 <itm_debug1+0x30>)
 80110b6:	681a      	ldr	r2, [r3, #0]
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	4013      	ands	r3, r2
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d007      	beq.n	80110d0 <itm_debug1+0x28>
 80110c0:	2301      	movs	r3, #1
 80110c2:	9300      	str	r3, [sp, #0]
 80110c4:	2300      	movs	r3, #0
 80110c6:	2200      	movs	r2, #0
 80110c8:	6879      	ldr	r1, [r7, #4]
 80110ca:	68b8      	ldr	r0, [r7, #8]
 80110cc:	f008 fa3a 	bl	8019544 <_itm_debug3>
}
 80110d0:	bf00      	nop
 80110d2:	3710      	adds	r7, #16
 80110d4:	46bd      	mov	sp, r7
 80110d6:	bd80      	pop	{r7, pc}
 80110d8:	20000610 	.word	0x20000610

080110dc <itm_debug2>:
{
 80110dc:	b580      	push	{r7, lr}
 80110de:	b086      	sub	sp, #24
 80110e0:	af02      	add	r7, sp, #8
 80110e2:	60f8      	str	r0, [r7, #12]
 80110e4:	60b9      	str	r1, [r7, #8]
 80110e6:	607a      	str	r2, [r7, #4]
 80110e8:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, 0, 2);
 80110ea:	4b09      	ldr	r3, [pc, #36]	; (8011110 <itm_debug2+0x34>)
 80110ec:	681a      	ldr	r2, [r3, #0]
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	4013      	ands	r3, r2
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d007      	beq.n	8011106 <itm_debug2+0x2a>
 80110f6:	2302      	movs	r3, #2
 80110f8:	9300      	str	r3, [sp, #0]
 80110fa:	2300      	movs	r3, #0
 80110fc:	683a      	ldr	r2, [r7, #0]
 80110fe:	6879      	ldr	r1, [r7, #4]
 8011100:	68b8      	ldr	r0, [r7, #8]
 8011102:	f008 fa1f 	bl	8019544 <_itm_debug3>
}
 8011106:	bf00      	nop
 8011108:	3710      	adds	r7, #16
 801110a:	46bd      	mov	sp, r7
 801110c:	bd80      	pop	{r7, pc}
 801110e:	bf00      	nop
 8011110:	20000610 	.word	0x20000610

08011114 <itm_debug3>:
static inline void itm_debug3(uint32_t f, const char *msg, int32_t v1, int32_t v2, int32_t v3)
{
 8011114:	b580      	push	{r7, lr}
 8011116:	b086      	sub	sp, #24
 8011118:	af02      	add	r7, sp, #8
 801111a:	60f8      	str	r0, [r7, #12]
 801111c:	60b9      	str	r1, [r7, #8]
 801111e:	607a      	str	r2, [r7, #4]
 8011120:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, v3, 3);
 8011122:	4b09      	ldr	r3, [pc, #36]	; (8011148 <itm_debug3+0x34>)
 8011124:	681a      	ldr	r2, [r3, #0]
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	4013      	ands	r3, r2
 801112a:	2b00      	cmp	r3, #0
 801112c:	d007      	beq.n	801113e <itm_debug3+0x2a>
 801112e:	2303      	movs	r3, #3
 8011130:	9300      	str	r3, [sp, #0]
 8011132:	69bb      	ldr	r3, [r7, #24]
 8011134:	683a      	ldr	r2, [r7, #0]
 8011136:	6879      	ldr	r1, [r7, #4]
 8011138:	68b8      	ldr	r0, [r7, #8]
 801113a:	f008 fa03 	bl	8019544 <_itm_debug3>
}
 801113e:	bf00      	nop
 8011140:	3710      	adds	r7, #16
 8011142:	46bd      	mov	sp, r7
 8011144:	bd80      	pop	{r7, pc}
 8011146:	bf00      	nop
 8011148:	20000610 	.word	0x20000610

0801114c <mqf_read_to_ina3221>:

LFMQUEUE_DEF_H(to_ui_track, msg_64_t)
LFMQUEUE_DEF_H(from_ui_track, msg_64_t)


LFMQUEUE_DEF_H(to_ina3221, msg_64_t)
 801114c:	b580      	push	{r7, lr}
 801114e:	b082      	sub	sp, #8
 8011150:	af00      	add	r7, sp, #0
 8011152:	6078      	str	r0, [r7, #4]
 8011154:	6879      	ldr	r1, [r7, #4]
 8011156:	4804      	ldr	r0, [pc, #16]	; (8011168 <mqf_read_to_ina3221+0x1c>)
 8011158:	f008 fb76 	bl	8019848 <mqf_read>
 801115c:	4603      	mov	r3, r0
 801115e:	4618      	mov	r0, r3
 8011160:	3708      	adds	r7, #8
 8011162:	46bd      	mov	sp, r7
 8011164:	bd80      	pop	{r7, pc}
 8011166:	bf00      	nop
 8011168:	200005f0 	.word	0x200005f0

0801116c <mqf_write_from_ina3221>:
LFMQUEUE_DEF_H(from_ina3221, msg_64_t)
 801116c:	b580      	push	{r7, lr}
 801116e:	b082      	sub	sp, #8
 8011170:	af00      	add	r7, sp, #0
 8011172:	6078      	str	r0, [r7, #4]
 8011174:	6879      	ldr	r1, [r7, #4]
 8011176:	4804      	ldr	r0, [pc, #16]	; (8011188 <mqf_write_from_ina3221+0x1c>)
 8011178:	f008 faec 	bl	8019754 <mqf_write>
 801117c:	4603      	mov	r3, r0
 801117e:	4618      	mov	r0, r3
 8011180:	3708      	adds	r7, #8
 8011182:	46bd      	mov	sp, r7
 8011184:	bd80      	pop	{r7, pc}
 8011186:	bf00      	nop
 8011188:	200005fc 	.word	0x200005fc

0801118c <bkpoint>:
#ifndef INA3221_TASKRD
#error hu?
#endif

static void bkpoint(int loc, int err)
{
 801118c:	b580      	push	{r7, lr}
 801118e:	b082      	sub	sp, #8
 8011190:	af00      	add	r7, sp, #0
 8011192:	6078      	str	r0, [r7, #4]
 8011194:	6039      	str	r1, [r7, #0]
	itm_debug2(DBG_ERR|DBG_INA3221, "INA ERR", loc, err);
 8011196:	683b      	ldr	r3, [r7, #0]
 8011198:	687a      	ldr	r2, [r7, #4]
 801119a:	4904      	ldr	r1, [pc, #16]	; (80111ac <bkpoint+0x20>)
 801119c:	4804      	ldr	r0, [pc, #16]	; (80111b0 <bkpoint+0x24>)
 801119e:	f7ff ff9d 	bl	80110dc <itm_debug2>
}
 80111a2:	bf00      	nop
 80111a4:	3708      	adds	r7, #8
 80111a6:	46bd      	mov	sp, r7
 80111a8:	bd80      	pop	{r7, pc}
 80111aa:	bf00      	nop
 80111ac:	08019d14 	.word	0x08019d14
 80111b0:	80000020 	.word	0x80000020

080111b4 <run_ina_task>:
static void handle_ina_notif(uint32_t notif);

static 	ina_state_t state = state_idle;

static void run_ina_task(void)
{
 80111b4:	b580      	push	{r7, lr}
 80111b6:	b086      	sub	sp, #24
 80111b8:	af00      	add	r7, sp, #0
	ina3221_init_and_configure();
 80111ba:	f000 fdd5 	bl	8011d68 <ina3221_init_and_configure>
	_UNUSED_ int nstuck = 0;
 80111be:	2300      	movs	r3, #0
 80111c0:	617b      	str	r3, [r7, #20]
	for (;;) {
		uint32_t notif = 0;
 80111c2:	2300      	movs	r3, #0
 80111c4:	60fb      	str	r3, [r7, #12]
		xTaskNotifyWait(0, 0xFFFFFFFF, &notif, portMAX_DELAY);
 80111c6:	f107 020c 	add.w	r2, r7, #12
 80111ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80111ce:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80111d2:	2000      	movs	r0, #0
 80111d4:	f7fd fdfc 	bl	800edd0 <xTaskNotifyWait>
		handle_ina_notif(notif);
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	4618      	mov	r0, r3
 80111dc:	f000 f828 	bl	8011230 <handle_ina_notif>

		for (;;) {
			msg_64_t m;
			int rc = mqf_read_to_ina3221(&m);
 80111e0:	463b      	mov	r3, r7
 80111e2:	4618      	mov	r0, r3
 80111e4:	f7ff ffb2 	bl	801114c <mqf_read_to_ina3221>
 80111e8:	6138      	str	r0, [r7, #16]
			if (rc) break;
 80111ea:	693b      	ldr	r3, [r7, #16]
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d000      	beq.n	80111f2 <run_ina_task+0x3e>
	for (;;) {
 80111f0:	e7e7      	b.n	80111c2 <run_ina_task+0xe>
			switch (m.cmd) {
 80111f2:	78bb      	ldrb	r3, [r7, #2]
 80111f4:	2bfc      	cmp	r3, #252	; 0xfc
 80111f6:	d004      	beq.n	8011202 <run_ina_task+0x4e>
 80111f8:	2bfc      	cmp	r3, #252	; 0xfc
 80111fa:	db10      	blt.n	801121e <run_ina_task+0x6a>
 80111fc:	3bfe      	subs	r3, #254	; 0xfe
 80111fe:	2b01      	cmp	r3, #1
					testerAddr = m.from;
				}
				continue;
				break;
			default:
				break;
 8011200:	e00d      	b.n	801121e <run_ina_task+0x6a>
				if (run_mode != m.v1u) {
 8011202:	4b09      	ldr	r3, [pc, #36]	; (8011228 <run_ina_task+0x74>)
 8011204:	781b      	ldrb	r3, [r3, #0]
 8011206:	b29a      	uxth	r2, r3
 8011208:	88bb      	ldrh	r3, [r7, #4]
 801120a:	429a      	cmp	r2, r3
 801120c:	d009      	beq.n	8011222 <run_ina_task+0x6e>
					run_mode = m.v1u;
 801120e:	88bb      	ldrh	r3, [r7, #4]
 8011210:	b2da      	uxtb	r2, r3
 8011212:	4b05      	ldr	r3, [pc, #20]	; (8011228 <run_ina_task+0x74>)
 8011214:	701a      	strb	r2, [r3, #0]
					testerAddr = m.from;
 8011216:	787a      	ldrb	r2, [r7, #1]
 8011218:	4b04      	ldr	r3, [pc, #16]	; (801122c <run_ina_task+0x78>)
 801121a:	701a      	strb	r2, [r3, #0]
				continue;
 801121c:	e001      	b.n	8011222 <run_ina_task+0x6e>
				break;
 801121e:	bf00      	nop
 8011220:	e7de      	b.n	80111e0 <run_ina_task+0x2c>
				continue;
 8011222:	bf00      	nop
		for (;;) {
 8011224:	e7dc      	b.n	80111e0 <run_ina_task+0x2c>
 8011226:	bf00      	nop
 8011228:	200051cc 	.word	0x200051cc
 801122c:	200051cd 	.word	0x200051cd

08011230 <handle_ina_notif>:
		}
	}
}

static void handle_ina_notif(uint32_t notif)
{
 8011230:	b580      	push	{r7, lr}
 8011232:	b088      	sub	sp, #32
 8011234:	af00      	add	r7, sp, #0
 8011236:	6078      	str	r0, [r7, #4]
				continue;
			}
		}
#endif // INA3221_CONTIUNOUS
	}
	if (notif & NOTIF_INA_WRCOMPL) {
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	f003 0310 	and.w	r3, r3, #16
 801123e:	2b00      	cmp	r3, #0
 8011240:	d035      	beq.n	80112ae <handle_ina_notif+0x7e>
		itm_debug1(DBG_INA3221, "WRcpl", state);
 8011242:	4b74      	ldr	r3, [pc, #464]	; (8011414 <handle_ina_notif+0x1e4>)
 8011244:	781b      	ldrb	r3, [r3, #0]
 8011246:	461a      	mov	r2, r3
 8011248:	4973      	ldr	r1, [pc, #460]	; (8011418 <handle_ina_notif+0x1e8>)
 801124a:	2020      	movs	r0, #32
 801124c:	f7ff ff2c 	bl	80110a8 <itm_debug1>
		if ((state >= state_trig_0) && (state <= state_trig_3)) {
 8011250:	4b70      	ldr	r3, [pc, #448]	; (8011414 <handle_ina_notif+0x1e4>)
 8011252:	781b      	ldrb	r3, [r3, #0]
 8011254:	2b00      	cmp	r3, #0
 8011256:	d023      	beq.n	80112a0 <handle_ina_notif+0x70>
 8011258:	4b6e      	ldr	r3, [pc, #440]	; (8011414 <handle_ina_notif+0x1e4>)
 801125a:	781b      	ldrb	r3, [r3, #0]
 801125c:	2b04      	cmp	r3, #4
 801125e:	d81f      	bhi.n	80112a0 <handle_ina_notif+0x70>
			int dev = state - state_trig_0;
 8011260:	4b6c      	ldr	r3, [pc, #432]	; (8011414 <handle_ina_notif+0x1e4>)
 8011262:	781b      	ldrb	r3, [r3, #0]
 8011264:	3b01      	subs	r3, #1
 8011266:	61fb      	str	r3, [r7, #28]
			dev = _next_dev(dev);
 8011268:	69f8      	ldr	r0, [r7, #28]
 801126a:	f000 f8e3 	bl	8011434 <_next_dev>
 801126e:	61f8      	str	r0, [r7, #28]
			if (dev >= 0) {
 8011270:	69fb      	ldr	r3, [r7, #28]
 8011272:	2b00      	cmp	r3, #0
 8011274:	db10      	blt.n	8011298 <handle_ina_notif+0x68>
				state = dev + state_trig_0;
 8011276:	69fb      	ldr	r3, [r7, #28]
 8011278:	b2db      	uxtb	r3, r3
 801127a:	3301      	adds	r3, #1
 801127c:	b2da      	uxtb	r2, r3
 801127e:	4b65      	ldr	r3, [pc, #404]	; (8011414 <handle_ina_notif+0x1e4>)
 8011280:	701a      	strb	r2, [r3, #0]
				rc = _trig(dev);
 8011282:	69f8      	ldr	r0, [r7, #28]
 8011284:	f000 f8f6 	bl	8011474 <_trig>
 8011288:	61b8      	str	r0, [r7, #24]
				if (rc) {
 801128a:	69bb      	ldr	r3, [r7, #24]
 801128c:	2b00      	cmp	r3, #0
 801128e:	d00d      	beq.n	80112ac <handle_ina_notif+0x7c>
					state = state_idle;
 8011290:	4b60      	ldr	r3, [pc, #384]	; (8011414 <handle_ina_notif+0x1e4>)
 8011292:	2200      	movs	r2, #0
 8011294:	701a      	strb	r2, [r3, #0]
					return;
 8011296:	e0b9      	b.n	801140c <handle_ina_notif+0x1dc>
				}
			} else {
#if INA3221_TASKRD
state = state_idle;
 8011298:	4b5e      	ldr	r3, [pc, #376]	; (8011414 <handle_ina_notif+0x1e4>)
 801129a:	2200      	movs	r2, #0
 801129c:	701a      	strb	r2, [r3, #0]
		if ((state >= state_trig_0) && (state <= state_trig_3)) {
 801129e:	e005      	b.n	80112ac <handle_ina_notif+0x7c>
                        _read_complete(0);
                        state = state_idle;
                    }
                }*/
		} else {
			bkpoint(1,1000);
 80112a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80112a4:	2001      	movs	r0, #1
 80112a6:	f7ff ff71 	bl	801118c <bkpoint>
 80112aa:	e000      	b.n	80112ae <handle_ina_notif+0x7e>
		if ((state >= state_trig_0) && (state <= state_trig_3)) {
 80112ac:	bf00      	nop
		}
	}
	if (notif & NOTIF_INA_READ) {
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	f003 0308 	and.w	r3, r3, #8
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d01c      	beq.n	80112f2 <handle_ina_notif+0xc2>
#if INA3221_TASKRD
#if INA3221_CHECKCONV
		state = state_chk_cvrf;
		_read_cvrf();
#else
		int dev = _next_dev(-1);
 80112b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80112bc:	f000 f8ba 	bl	8011434 <_next_dev>
 80112c0:	6178      	str	r0, [r7, #20]
		if (dev >= 0) {
 80112c2:	697b      	ldr	r3, [r7, #20]
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	db0e      	blt.n	80112e6 <handle_ina_notif+0xb6>
			state = state_rd_0 + dev * 3;
 80112c8:	697b      	ldr	r3, [r7, #20]
 80112ca:	b2db      	uxtb	r3, r3
 80112cc:	461a      	mov	r2, r3
 80112ce:	0052      	lsls	r2, r2, #1
 80112d0:	4413      	add	r3, r2
 80112d2:	b2db      	uxtb	r3, r3
 80112d4:	3305      	adds	r3, #5
 80112d6:	b2da      	uxtb	r2, r3
 80112d8:	4b4e      	ldr	r3, [pc, #312]	; (8011414 <handle_ina_notif+0x1e4>)
 80112da:	701a      	strb	r2, [r3, #0]
			_reg_read(dev, 0);
 80112dc:	2100      	movs	r1, #0
 80112de:	6978      	ldr	r0, [r7, #20]
 80112e0:	f000 f8f4 	bl	80114cc <_reg_read>
 80112e4:	e005      	b.n	80112f2 <handle_ina_notif+0xc2>
		} else {
			_read_complete(0);
 80112e6:	2000      	movs	r0, #0
 80112e8:	f000 f95a 	bl	80115a0 <_read_complete>
			state = state_idle;
 80112ec:	4b49      	ldr	r3, [pc, #292]	; (8011414 <handle_ina_notif+0x1e4>)
 80112ee:	2200      	movs	r2, #0
 80112f0:	701a      	strb	r2, [r3, #0]
		}

#endif
#endif
	}
	if (notif & NOTIF_INA_RDCOMPL) {
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	f003 0320 	and.w	r3, r3, #32
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d055      	beq.n	80113a8 <handle_ina_notif+0x178>
		itm_debug1(DBG_INA3221, "RDcpl", state);
 80112fc:	4b45      	ldr	r3, [pc, #276]	; (8011414 <handle_ina_notif+0x1e4>)
 80112fe:	781b      	ldrb	r3, [r3, #0]
 8011300:	461a      	mov	r2, r3
 8011302:	4946      	ldr	r1, [pc, #280]	; (801141c <handle_ina_notif+0x1ec>)
 8011304:	2020      	movs	r0, #32
 8011306:	f7ff fecf 	bl	80110a8 <itm_debug1>
				_read_cvrf();
			}
#else
		if (0) {
#endif
		} else if ((state >= state_rd_0) && (state <= state_rd_11)) {
 801130a:	4b42      	ldr	r3, [pc, #264]	; (8011414 <handle_ina_notif+0x1e4>)
 801130c:	781b      	ldrb	r3, [r3, #0]
 801130e:	2b04      	cmp	r3, #4
 8011310:	d945      	bls.n	801139e <handle_ina_notif+0x16e>
 8011312:	4b40      	ldr	r3, [pc, #256]	; (8011414 <handle_ina_notif+0x1e4>)
 8011314:	781b      	ldrb	r3, [r3, #0]
 8011316:	2b10      	cmp	r3, #16
 8011318:	d841      	bhi.n	801139e <handle_ina_notif+0x16e>
			int reg = (state - state_rd_0) % 3;
 801131a:	4b3e      	ldr	r3, [pc, #248]	; (8011414 <handle_ina_notif+0x1e4>)
 801131c:	781b      	ldrb	r3, [r3, #0]
 801131e:	1f5a      	subs	r2, r3, #5
 8011320:	4b3f      	ldr	r3, [pc, #252]	; (8011420 <handle_ina_notif+0x1f0>)
 8011322:	fb83 3102 	smull	r3, r1, r3, r2
 8011326:	17d3      	asrs	r3, r2, #31
 8011328:	1ac9      	subs	r1, r1, r3
 801132a:	460b      	mov	r3, r1
 801132c:	005b      	lsls	r3, r3, #1
 801132e:	440b      	add	r3, r1
 8011330:	1ad3      	subs	r3, r2, r3
 8011332:	613b      	str	r3, [r7, #16]
			int dev = (state - state_rd_0) / 3;
 8011334:	4b37      	ldr	r3, [pc, #220]	; (8011414 <handle_ina_notif+0x1e4>)
 8011336:	781b      	ldrb	r3, [r3, #0]
 8011338:	3b05      	subs	r3, #5
 801133a:	4a39      	ldr	r2, [pc, #228]	; (8011420 <handle_ina_notif+0x1f0>)
 801133c:	fb82 1203 	smull	r1, r2, r2, r3
 8011340:	17db      	asrs	r3, r3, #31
 8011342:	1ad3      	subs	r3, r2, r3
 8011344:	60fb      	str	r3, [r7, #12]
			if (reg==2){
 8011346:	693b      	ldr	r3, [r7, #16]
 8011348:	2b02      	cmp	r3, #2
 801134a:	d11b      	bne.n	8011384 <handle_ina_notif+0x154>
				dev = _next_dev(dev);
 801134c:	68f8      	ldr	r0, [r7, #12]
 801134e:	f000 f871 	bl	8011434 <_next_dev>
 8011352:	60f8      	str	r0, [r7, #12]
				if (dev >= 0) {
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	2b00      	cmp	r3, #0
 8011358:	db0d      	blt.n	8011376 <handle_ina_notif+0x146>
					state = (state_rd_0 + dev) * 3;
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	3305      	adds	r3, #5
 801135e:	b2db      	uxtb	r3, r3
 8011360:	461a      	mov	r2, r3
 8011362:	0052      	lsls	r2, r2, #1
 8011364:	4413      	add	r3, r2
 8011366:	b2da      	uxtb	r2, r3
 8011368:	4b2a      	ldr	r3, [pc, #168]	; (8011414 <handle_ina_notif+0x1e4>)
 801136a:	701a      	strb	r2, [r3, #0]
					_reg_read(dev, 0);
 801136c:	2100      	movs	r1, #0
 801136e:	68f8      	ldr	r0, [r7, #12]
 8011370:	f000 f8ac 	bl	80114cc <_reg_read>
		} else if ((state >= state_rd_0) && (state <= state_rd_11)) {
 8011374:	e018      	b.n	80113a8 <handle_ina_notif+0x178>
				} else {
					_read_complete(0);
 8011376:	2000      	movs	r0, #0
 8011378:	f000 f912 	bl	80115a0 <_read_complete>
					state = state_idle;
 801137c:	4b25      	ldr	r3, [pc, #148]	; (8011414 <handle_ina_notif+0x1e4>)
 801137e:	2200      	movs	r2, #0
 8011380:	701a      	strb	r2, [r3, #0]
		} else if ((state >= state_rd_0) && (state <= state_rd_11)) {
 8011382:	e011      	b.n	80113a8 <handle_ina_notif+0x178>
				}
			} else {
				state++;
 8011384:	4b23      	ldr	r3, [pc, #140]	; (8011414 <handle_ina_notif+0x1e4>)
 8011386:	781b      	ldrb	r3, [r3, #0]
 8011388:	3301      	adds	r3, #1
 801138a:	b2da      	uxtb	r2, r3
 801138c:	4b21      	ldr	r3, [pc, #132]	; (8011414 <handle_ina_notif+0x1e4>)
 801138e:	701a      	strb	r2, [r3, #0]
				_reg_read(dev, reg+1);
 8011390:	693b      	ldr	r3, [r7, #16]
 8011392:	3301      	adds	r3, #1
 8011394:	4619      	mov	r1, r3
 8011396:	68f8      	ldr	r0, [r7, #12]
 8011398:	f000 f898 	bl	80114cc <_reg_read>
		} else if ((state >= state_rd_0) && (state <= state_rd_11)) {
 801139c:	e004      	b.n	80113a8 <handle_ina_notif+0x178>
			}
		} else {
			bkpoint(2,1000);
 801139e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80113a2:	2002      	movs	r0, #2
 80113a4:	f7ff fef2 	bl	801118c <bkpoint>
		}
	}
	if (notif & NOTIF_INA_ERR) {
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d02c      	beq.n	801140c <handle_ina_notif+0x1dc>
		bkpoint(3, lastErr);
 80113b2:	4b1c      	ldr	r3, [pc, #112]	; (8011424 <handle_ina_notif+0x1f4>)
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	4619      	mov	r1, r3
 80113b8:	2003      	movs	r0, #3
 80113ba:	f7ff fee7 	bl	801118c <bkpoint>
		if ((state >= state_rd_0) && (state <= state_rd_11)) {
 80113be:	4b15      	ldr	r3, [pc, #84]	; (8011414 <handle_ina_notif+0x1e4>)
 80113c0:	781b      	ldrb	r3, [r3, #0]
 80113c2:	2b04      	cmp	r3, #4
 80113c4:	d907      	bls.n	80113d6 <handle_ina_notif+0x1a6>
 80113c6:	4b13      	ldr	r3, [pc, #76]	; (8011414 <handle_ina_notif+0x1e4>)
 80113c8:	781b      	ldrb	r3, [r3, #0]
 80113ca:	2b10      	cmp	r3, #16
 80113cc:	d803      	bhi.n	80113d6 <handle_ina_notif+0x1a6>
			// write error
			// TODO
			state = state_idle;
 80113ce:	4b11      	ldr	r3, [pc, #68]	; (8011414 <handle_ina_notif+0x1e4>)
 80113d0:	2200      	movs	r2, #0
 80113d2:	701a      	strb	r2, [r3, #0]
 80113d4:	e010      	b.n	80113f8 <handle_ina_notif+0x1c8>
		} else if ((state >= state_trig_0) && (state <= state_trig_3)) {
 80113d6:	4b0f      	ldr	r3, [pc, #60]	; (8011414 <handle_ina_notif+0x1e4>)
 80113d8:	781b      	ldrb	r3, [r3, #0]
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d007      	beq.n	80113ee <handle_ina_notif+0x1be>
 80113de:	4b0d      	ldr	r3, [pc, #52]	; (8011414 <handle_ina_notif+0x1e4>)
 80113e0:	781b      	ldrb	r3, [r3, #0]
 80113e2:	2b04      	cmp	r3, #4
 80113e4:	d803      	bhi.n	80113ee <handle_ina_notif+0x1be>
			// read error
			// TODO
			state = state_idle;
 80113e6:	4b0b      	ldr	r3, [pc, #44]	; (8011414 <handle_ina_notif+0x1e4>)
 80113e8:	2200      	movs	r2, #0
 80113ea:	701a      	strb	r2, [r3, #0]
 80113ec:	e004      	b.n	80113f8 <handle_ina_notif+0x1c8>
		} else {
			bkpoint(3,1000);
 80113ee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80113f2:	2003      	movs	r0, #3
 80113f4:	f7ff feca 	bl	801118c <bkpoint>
		}
		itm_debug1(DBG_INA3221|DBG_ERR, "i2c rst", lastErr);
 80113f8:	4b0a      	ldr	r3, [pc, #40]	; (8011424 <handle_ina_notif+0x1f4>)
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	461a      	mov	r2, r3
 80113fe:	490a      	ldr	r1, [pc, #40]	; (8011428 <handle_ina_notif+0x1f8>)
 8011400:	480a      	ldr	r0, [pc, #40]	; (801142c <handle_ina_notif+0x1fc>)
 8011402:	f7ff fe51 	bl	80110a8 <itm_debug1>
		HAL_I2C_Init(&INA3221_I2C_PORT);
 8011406:	480a      	ldr	r0, [pc, #40]	; (8011430 <handle_ina_notif+0x200>)
 8011408:	f7f1 ff4e 	bl	80032a8 <HAL_I2C_Init>
	}
}
 801140c:	3720      	adds	r7, #32
 801140e:	46bd      	mov	sp, r7
 8011410:	bd80      	pop	{r7, pc}
 8011412:	bf00      	nop
 8011414:	20005218 	.word	0x20005218
 8011418:	08019d1c 	.word	0x08019d1c
 801141c:	08019d24 	.word	0x08019d24
 8011420:	55555556 	.word	0x55555556
 8011424:	20005210 	.word	0x20005210
 8011428:	08019d2c 	.word	0x08019d2c
 801142c:	80000020 	.word	0x80000020
 8011430:	200056a0 	.word	0x200056a0

08011434 <_next_dev>:




static int _next_dev(int dev)
{
 8011434:	b480      	push	{r7}
 8011436:	b083      	sub	sp, #12
 8011438:	af00      	add	r7, sp, #0
 801143a:	6078      	str	r0, [r7, #4]
	dev = dev+1;
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	3301      	adds	r3, #1
 8011440:	607b      	str	r3, [r7, #4]
	for (;dev<=3;dev++) {
 8011442:	e00a      	b.n	801145a <_next_dev+0x26>
		if (ina3221_devices[dev]) return dev;
 8011444:	4a0a      	ldr	r2, [pc, #40]	; (8011470 <_next_dev+0x3c>)
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	4413      	add	r3, r2
 801144a:	781b      	ldrb	r3, [r3, #0]
 801144c:	2b00      	cmp	r3, #0
 801144e:	d001      	beq.n	8011454 <_next_dev+0x20>
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	e007      	b.n	8011464 <_next_dev+0x30>
	for (;dev<=3;dev++) {
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	3301      	adds	r3, #1
 8011458:	607b      	str	r3, [r7, #4]
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	2b03      	cmp	r3, #3
 801145e:	ddf1      	ble.n	8011444 <_next_dev+0x10>
	}
	return -1;
 8011460:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8011464:	4618      	mov	r0, r3
 8011466:	370c      	adds	r7, #12
 8011468:	46bd      	mov	sp, r7
 801146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801146e:	4770      	bx	lr
 8011470:	200051d0 	.word	0x200051d0

08011474 <_trig>:


static int  _trig(int dev)
{
 8011474:	b580      	push	{r7, lr}
 8011476:	b084      	sub	sp, #16
 8011478:	af00      	add	r7, sp, #0
 801147a:	6078      	str	r0, [r7, #4]
	if (disable_ina3221) return 0;
 801147c:	4b0f      	ldr	r3, [pc, #60]	; (80114bc <_trig+0x48>)
 801147e:	781b      	ldrb	r3, [r3, #0]
 8011480:	2b00      	cmp	r3, #0
 8011482:	d001      	beq.n	8011488 <_trig+0x14>
 8011484:	2300      	movs	r3, #0
 8011486:	e014      	b.n	80114b2 <_trig+0x3e>
	cvrf_dev = dev;
 8011488:	4a0d      	ldr	r2, [pc, #52]	; (80114c0 <_trig+0x4c>)
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	6013      	str	r3, [r2, #0]
	int addr = 0x40 + dev;
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	3340      	adds	r3, #64	; 0x40
 8011492:	60fb      	str	r3, [r7, #12]
	itm_debug2(DBG_INA3221, "TRIG", dev, addr);
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	687a      	ldr	r2, [r7, #4]
 8011498:	490a      	ldr	r1, [pc, #40]	; (80114c4 <_trig+0x50>)
 801149a:	2020      	movs	r0, #32
 801149c:	f7ff fe1e 	bl	80110dc <itm_debug2>
	return ina3221_write16it(addr, INA3221_REG_CONFIG, ina_conf_val);
 80114a0:	4b09      	ldr	r3, [pc, #36]	; (80114c8 <_trig+0x54>)
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	b29b      	uxth	r3, r3
 80114a6:	461a      	mov	r2, r3
 80114a8:	2100      	movs	r1, #0
 80114aa:	68f8      	ldr	r0, [r7, #12]
 80114ac:	f000 fa9e 	bl	80119ec <ina3221_write16it>
 80114b0:	4603      	mov	r3, r0
}
 80114b2:	4618      	mov	r0, r3
 80114b4:	3710      	adds	r7, #16
 80114b6:	46bd      	mov	sp, r7
 80114b8:	bd80      	pop	{r7, pc}
 80114ba:	bf00      	nop
 80114bc:	200051d6 	.word	0x200051d6
 80114c0:	20005214 	.word	0x20005214
 80114c4:	08019d34 	.word	0x08019d34
 80114c8:	200051dc 	.word	0x200051dc

080114cc <_reg_read>:
static void _reg_read(int dev, int nreg)
{
 80114cc:	b590      	push	{r4, r7, lr}
 80114ce:	b089      	sub	sp, #36	; 0x24
 80114d0:	af02      	add	r7, sp, #8
 80114d2:	6078      	str	r0, [r7, #4]
 80114d4:	6039      	str	r1, [r7, #0]
	int addr = 0x40 + dev;
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	3340      	adds	r3, #64	; 0x40
 80114da:	613b      	str	r3, [r7, #16]
	int hwreg;
	switch (nreg) {
 80114dc:	683b      	ldr	r3, [r7, #0]
 80114de:	2b01      	cmp	r3, #1
 80114e0:	d006      	beq.n	80114f0 <_reg_read+0x24>
 80114e2:	2b02      	cmp	r3, #2
 80114e4:	d007      	beq.n	80114f6 <_reg_read+0x2a>
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d108      	bne.n	80114fc <_reg_read+0x30>
	case 0: hwreg = INA3221_REG_CH1_SHUNTVOLT; break;
 80114ea:	2301      	movs	r3, #1
 80114ec:	617b      	str	r3, [r7, #20]
 80114ee:	e00b      	b.n	8011508 <_reg_read+0x3c>
	case 1: hwreg = INA3221_REG_CH2_SHUNTVOLT; break;
 80114f0:	2303      	movs	r3, #3
 80114f2:	617b      	str	r3, [r7, #20]
 80114f4:	e008      	b.n	8011508 <_reg_read+0x3c>
	case 2: hwreg = INA3221_REG_CH3_SHUNTVOLT; break;
 80114f6:	2305      	movs	r3, #5
 80114f8:	617b      	str	r3, [r7, #20]
 80114fa:	e005      	b.n	8011508 <_reg_read+0x3c>
	default:
		itm_debug1(DBG_ERR|DBG_INA3221, "hu?", nreg);
 80114fc:	683a      	ldr	r2, [r7, #0]
 80114fe:	4921      	ldr	r1, [pc, #132]	; (8011584 <_reg_read+0xb8>)
 8011500:	4821      	ldr	r0, [pc, #132]	; (8011588 <_reg_read+0xbc>)
 8011502:	f7ff fdd1 	bl	80110a8 <itm_debug1>
		return;
 8011506:	e039      	b.n	801157c <_reg_read+0xb0>
	}
	itm_debug3(DBG_INA3221, "gns read", dev, nreg, hwreg);
 8011508:	697b      	ldr	r3, [r7, #20]
 801150a:	9300      	str	r3, [sp, #0]
 801150c:	683b      	ldr	r3, [r7, #0]
 801150e:	687a      	ldr	r2, [r7, #4]
 8011510:	491e      	ldr	r1, [pc, #120]	; (801158c <_reg_read+0xc0>)
 8011512:	2020      	movs	r0, #32
 8011514:	f7ff fdfe 	bl	8011114 <itm_debug3>
	HAL_StatusTypeDef status;

	if (__HAL_I2C_GET_FLAG(&INA3221_I2C_PORT, I2C_FLAG_BUSY) != RESET) {
 8011518:	4b1d      	ldr	r3, [pc, #116]	; (8011590 <_reg_read+0xc4>)
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	699b      	ldr	r3, [r3, #24]
 801151e:	f003 0302 	and.w	r3, r3, #2
 8011522:	2b02      	cmp	r3, #2
 8011524:	d105      	bne.n	8011532 <_reg_read+0x66>
		itm_debug1(DBG_ERR|DBG_INA3221, "busy", 0);
 8011526:	2200      	movs	r2, #0
 8011528:	491a      	ldr	r1, [pc, #104]	; (8011594 <_reg_read+0xc8>)
 801152a:	4817      	ldr	r0, [pc, #92]	; (8011588 <_reg_read+0xbc>)
 801152c:	f7ff fdbc 	bl	80110a8 <itm_debug1>
		// TODO _end_next_reg(1);
		return;
 8011530:	e024      	b.n	801157c <_reg_read+0xb0>
	}

	status = HAL_I2C_Mem_Read_IT(&INA3221_I2C_PORT, addr<<1, hwreg, I2C_MEMADD_SIZE_8BIT,
 8011532:	693b      	ldr	r3, [r7, #16]
 8011534:	b29b      	uxth	r3, r3
 8011536:	005b      	lsls	r3, r3, #1
 8011538:	b298      	uxth	r0, r3
 801153a:	697b      	ldr	r3, [r7, #20]
 801153c:	b29c      	uxth	r4, r3
 801153e:	4b16      	ldr	r3, [pc, #88]	; (8011598 <_reg_read+0xcc>)
 8011540:	6819      	ldr	r1, [r3, #0]
			(uint8_t *)&cur_values[dev*3+nreg], 2);
 8011542:	687a      	ldr	r2, [r7, #4]
 8011544:	4613      	mov	r3, r2
 8011546:	005b      	lsls	r3, r3, #1
 8011548:	441a      	add	r2, r3
 801154a:	683b      	ldr	r3, [r7, #0]
 801154c:	4413      	add	r3, r2
 801154e:	005b      	lsls	r3, r3, #1
 8011550:	440b      	add	r3, r1
	status = HAL_I2C_Mem_Read_IT(&INA3221_I2C_PORT, addr<<1, hwreg, I2C_MEMADD_SIZE_8BIT,
 8011552:	2202      	movs	r2, #2
 8011554:	9201      	str	r2, [sp, #4]
 8011556:	9300      	str	r3, [sp, #0]
 8011558:	2301      	movs	r3, #1
 801155a:	4622      	mov	r2, r4
 801155c:	4601      	mov	r1, r0
 801155e:	480c      	ldr	r0, [pc, #48]	; (8011590 <_reg_read+0xc4>)
 8011560:	f7f2 fafa 	bl	8003b58 <HAL_I2C_Mem_Read_IT>
 8011564:	4603      	mov	r3, r0
 8011566:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
 8011568:	7bfb      	ldrb	r3, [r7, #15]
 801156a:	2b00      	cmp	r3, #0
 801156c:	d006      	beq.n	801157c <_reg_read+0xb0>
		itm_debug1(DBG_INA3221|DBG_ERR, "readit", status);
 801156e:	7bfb      	ldrb	r3, [r7, #15]
 8011570:	461a      	mov	r2, r3
 8011572:	490a      	ldr	r1, [pc, #40]	; (801159c <_reg_read+0xd0>)
 8011574:	4804      	ldr	r0, [pc, #16]	; (8011588 <_reg_read+0xbc>)
 8011576:	f7ff fd97 	bl	80110a8 <itm_debug1>
		// TODO
		return;
 801157a:	bf00      	nop
	}
}
 801157c:	371c      	adds	r7, #28
 801157e:	46bd      	mov	sp, r7
 8011580:	bd90      	pop	{r4, r7, pc}
 8011582:	bf00      	nop
 8011584:	08019d3c 	.word	0x08019d3c
 8011588:	80000020 	.word	0x80000020
 801158c:	08019d40 	.word	0x08019d40
 8011590:	200056a0 	.word	0x200056a0
 8011594:	08019d4c 	.word	0x08019d4c
 8011598:	2000019c 	.word	0x2000019c
 801159c:	08019d54 	.word	0x08019d54

080115a0 <_read_complete>:
	return 0;
}
#endif

static void _read_complete(_UNUSED_ int err)
{
 80115a0:	b580      	push	{r7, lr}
 80115a2:	b08e      	sub	sp, #56	; 0x38
 80115a4:	af02      	add	r7, sp, #8
 80115a6:	6078      	str	r0, [r7, #4]
	uint16_t *valu = (uint16_t *) cur_values;
 80115a8:	4b56      	ldr	r3, [pc, #344]	; (8011704 <_read_complete+0x164>)
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	627b      	str	r3, [r7, #36]	; 0x24
	int16_t  *vals = (int16_t *) cur_values;
 80115ae:	4b55      	ldr	r3, [pc, #340]	; (8011704 <_read_complete+0x164>)
 80115b0:	681b      	ldr	r3, [r3, #0]
 80115b2:	623b      	str	r3, [r7, #32]
	static int8_t presence[INA3221_NUM_VALS] = {0};

	for (int i = 0; i<INA3221_NUM_VALS; i++) {
 80115b4:	2300      	movs	r3, #0
 80115b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80115b8:	e00e      	b.n	80115d8 <_read_complete+0x38>
			valu[i] = __builtin_bswap16(valu[i]);
 80115ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115bc:	005b      	lsls	r3, r3, #1
 80115be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80115c0:	4413      	add	r3, r2
 80115c2:	881a      	ldrh	r2, [r3, #0]
 80115c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115c6:	005b      	lsls	r3, r3, #1
 80115c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80115ca:	440b      	add	r3, r1
 80115cc:	ba52      	rev16	r2, r2
 80115ce:	b292      	uxth	r2, r2
 80115d0:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i<INA3221_NUM_VALS; i++) {
 80115d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115d4:	3301      	adds	r3, #1
 80115d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80115d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115da:	2b0b      	cmp	r3, #11
 80115dc:	dded      	ble.n	80115ba <_read_complete+0x1a>
	}
	msg_64_t m;

	switch (run_mode) {
 80115de:	4b4a      	ldr	r3, [pc, #296]	; (8011708 <_read_complete+0x168>)
 80115e0:	781b      	ldrb	r3, [r3, #0]
 80115e2:	2b01      	cmp	r3, #1
 80115e4:	d023      	beq.n	801162e <_read_complete+0x8e>
 80115e6:	2b03      	cmp	r3, #3
 80115e8:	d000      	beq.n	80115ec <_read_complete+0x4c>
	default:
		break;
 80115ea:	e086      	b.n	80116fa <_read_complete+0x15a>
	case runmode_detect1:
		itm_debug1(DBG_INA3221, "D/1", vals[1]);
 80115ec:	6a3b      	ldr	r3, [r7, #32]
 80115ee:	3302      	adds	r3, #2
 80115f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80115f4:	461a      	mov	r2, r3
 80115f6:	4945      	ldr	r1, [pc, #276]	; (801170c <_read_complete+0x16c>)
 80115f8:	2020      	movs	r0, #32
 80115fa:	f7ff fd55 	bl	80110a8 <itm_debug1>
		m.from =  MA_CANTON(localBoardNum, 0);
 80115fe:	4b44      	ldr	r3, [pc, #272]	; (8011710 <_read_complete+0x170>)
 8011600:	781b      	ldrb	r3, [r3, #0]
 8011602:	00db      	lsls	r3, r3, #3
 8011604:	b2db      	uxtb	r3, r3
 8011606:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801160a:	b2db      	uxtb	r3, r3
 801160c:	747b      	strb	r3, [r7, #17]
		m.to = MA_UI(1);
 801160e:	2381      	movs	r3, #129	; 0x81
 8011610:	743b      	strb	r3, [r7, #16]
		m.cmd = CMD_INA3221_VAL1;
 8011612:	2327      	movs	r3, #39	; 0x27
 8011614:	74bb      	strb	r3, [r7, #18]
		m.sub = 1;
 8011616:	2301      	movs	r3, #1
 8011618:	74fb      	strb	r3, [r7, #19]
		m.v1 = vals[1];
 801161a:	6a3b      	ldr	r3, [r7, #32]
 801161c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011620:	82bb      	strh	r3, [r7, #20]
		mqf_write_from_ina3221(&m);
 8011622:	f107 0310 	add.w	r3, r7, #16
 8011626:	4618      	mov	r0, r3
 8011628:	f7ff fda0 	bl	801116c <mqf_write_from_ina3221>
		break;
 801162c:	e065      	b.n	80116fa <_read_complete+0x15a>
	case runmode_normal:
		for (int i = 0; i<INA3221_NUM_VALS; i++) {
 801162e:	2300      	movs	r3, #0
 8011630:	62bb      	str	r3, [r7, #40]	; 0x28
 8011632:	e05f      	b.n	80116f4 <_read_complete+0x154>
			itm_debug2(DBG_INA3221, "ina val", i, vals[i]);
 8011634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011636:	005b      	lsls	r3, r3, #1
 8011638:	6a3a      	ldr	r2, [r7, #32]
 801163a:	4413      	add	r3, r2
 801163c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011640:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011642:	4934      	ldr	r1, [pc, #208]	; (8011714 <_read_complete+0x174>)
 8011644:	2020      	movs	r0, #32
 8011646:	f7ff fd49 	bl	80110dc <itm_debug2>
			int p = (abs(vals[i])>1000) ? 1 : 0;
 801164a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801164c:	005b      	lsls	r3, r3, #1
 801164e:	6a3a      	ldr	r2, [r7, #32]
 8011650:	4413      	add	r3, r2
 8011652:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011656:	2b00      	cmp	r3, #0
 8011658:	bfb8      	it	lt
 801165a:	425b      	neglt	r3, r3
 801165c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011660:	bfcc      	ite	gt
 8011662:	2301      	movgt	r3, #1
 8011664:	2300      	movle	r3, #0
 8011666:	b2db      	uxtb	r3, r3
 8011668:	61fb      	str	r3, [r7, #28]
			if (p == presence[i]) continue;
 801166a:	4a2b      	ldr	r2, [pc, #172]	; (8011718 <_read_complete+0x178>)
 801166c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801166e:	4413      	add	r3, r2
 8011670:	f993 3000 	ldrsb.w	r3, [r3]
 8011674:	461a      	mov	r2, r3
 8011676:	69fb      	ldr	r3, [r7, #28]
 8011678:	4293      	cmp	r3, r2
 801167a:	d103      	bne.n	8011684 <_read_complete+0xe4>
		for (int i = 0; i<INA3221_NUM_VALS; i++) {
 801167c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801167e:	3301      	adds	r3, #1
 8011680:	62bb      	str	r3, [r7, #40]	; 0x28
 8011682:	e037      	b.n	80116f4 <_read_complete+0x154>
			presence[i] = p;
 8011684:	69fb      	ldr	r3, [r7, #28]
 8011686:	b259      	sxtb	r1, r3
 8011688:	4a23      	ldr	r2, [pc, #140]	; (8011718 <_read_complete+0x178>)
 801168a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801168c:	4413      	add	r3, r2
 801168e:	460a      	mov	r2, r1
 8011690:	701a      	strb	r2, [r3, #0]
			itm_debug3(DBG_INA3221|DBG_PRES, "PRSCH", i,p, vals[i]);
 8011692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011694:	005b      	lsls	r3, r3, #1
 8011696:	6a3a      	ldr	r2, [r7, #32]
 8011698:	4413      	add	r3, r2
 801169a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801169e:	9300      	str	r3, [sp, #0]
 80116a0:	69fb      	ldr	r3, [r7, #28]
 80116a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80116a4:	491d      	ldr	r1, [pc, #116]	; (801171c <_read_complete+0x17c>)
 80116a6:	2060      	movs	r0, #96	; 0x60
 80116a8:	f7ff fd34 	bl	8011114 <itm_debug3>
			// notify change
			m.from = MA_CANTON(localBoardNum, 0);
 80116ac:	4b18      	ldr	r3, [pc, #96]	; (8011710 <_read_complete+0x170>)
 80116ae:	781b      	ldrb	r3, [r3, #0]
 80116b0:	00db      	lsls	r3, r3, #3
 80116b2:	b2db      	uxtb	r3, r3
 80116b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80116b8:	b2db      	uxtb	r3, r3
 80116ba:	747b      	strb	r3, [r7, #17]
			m.to = MA_CONTROL();
 80116bc:	23d7      	movs	r3, #215	; 0xd7
 80116be:	743b      	strb	r3, [r7, #16]
			m.cmd = CMD_PRESENCE_CHANGE;
 80116c0:	2312      	movs	r3, #18
 80116c2:	74bb      	strb	r3, [r7, #18]
			m.sub = i;
 80116c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116c6:	b2db      	uxtb	r3, r3
 80116c8:	74fb      	strb	r3, [r7, #19]
			m.v1u = p;
 80116ca:	69fb      	ldr	r3, [r7, #28]
 80116cc:	b29b      	uxth	r3, r3
 80116ce:	82bb      	strh	r3, [r7, #20]
			m.v2 = vals[i];
 80116d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116d2:	005b      	lsls	r3, r3, #1
 80116d4:	6a3a      	ldr	r2, [r7, #32]
 80116d6:	4413      	add	r3, r2
 80116d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80116dc:	82fb      	strh	r3, [r7, #22]
			mqf_write_from_ina3221(&m);
 80116de:	f107 0310 	add.w	r3, r7, #16
 80116e2:	4618      	mov	r0, r3
 80116e4:	f7ff fd42 	bl	801116c <mqf_write_from_ina3221>


			static int cnt=0;
			cnt++;
 80116e8:	4b0d      	ldr	r3, [pc, #52]	; (8011720 <_read_complete+0x180>)
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	3301      	adds	r3, #1
 80116ee:	4a0c      	ldr	r2, [pc, #48]	; (8011720 <_read_complete+0x180>)
 80116f0:	6013      	str	r3, [r2, #0]
				m.to = MA_UI(1);
				m.cmd = CMD_INA3221_REPORT;
				m.v32u = (uint32_t) v;
				mqf_write_from_ina3221(&m);
			}
			break;
 80116f2:	e002      	b.n	80116fa <_read_complete+0x15a>
		for (int i = 0; i<INA3221_NUM_VALS; i++) {
 80116f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116f6:	2b0b      	cmp	r3, #11
 80116f8:	dd9c      	ble.n	8011634 <_read_complete+0x94>
		}
	}
}
 80116fa:	bf00      	nop
 80116fc:	3730      	adds	r7, #48	; 0x30
 80116fe:	46bd      	mov	sp, r7
 8011700:	bd80      	pop	{r7, pc}
 8011702:	bf00      	nop
 8011704:	2000019c 	.word	0x2000019c
 8011708:	200051cc 	.word	0x200051cc
 801170c:	08019d5c 	.word	0x08019d5c
 8011710:	20005451 	.word	0x20005451
 8011714:	08019d60 	.word	0x08019d60
 8011718:	2000521c 	.word	0x2000521c
 801171c:	08019d68 	.word	0x08019d68
 8011720:	20005228 	.word	0x20005228

08011724 <HAL_I2C_MemTxCpltCallback>:


void HAL_I2C_MemTxCpltCallback(_UNUSED_ I2C_HandleTypeDef *hi2c)
{
 8011724:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8011728:	b08a      	sub	sp, #40	; 0x28
 801172a:	af02      	add	r7, sp, #8
 801172c:	6078      	str	r0, [r7, #4]
	BEGIN_ISR
 801172e:	f004 fcc3 	bl	80160b8 <GetCycleCount64>
 8011732:	4603      	mov	r3, r0
 8011734:	460c      	mov	r4, r1
 8011736:	e9c7 3404 	strd	r3, r4, [r7, #16]
	BaseType_t higher=0;
 801173a:	2300      	movs	r3, #0
 801173c:	60fb      	str	r3, [r7, #12]
	xTaskNotifyFromISR(ina3221_taskHandle, NOTIF_INA_WRCOMPL, eSetBits, &higher);
 801173e:	4b1b      	ldr	r3, [pc, #108]	; (80117ac <HAL_I2C_MemTxCpltCallback+0x88>)
 8011740:	6818      	ldr	r0, [r3, #0]
 8011742:	f107 030c 	add.w	r3, r7, #12
 8011746:	9300      	str	r3, [sp, #0]
 8011748:	2300      	movs	r3, #0
 801174a:	2201      	movs	r2, #1
 801174c:	2110      	movs	r1, #16
 801174e:	f7fd fb99 	bl	800ee84 <xTaskGenericNotifyFromISR>
	portYIELD_FROM_ISR(higher);
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	2b00      	cmp	r3, #0
 8011756:	d007      	beq.n	8011768 <HAL_I2C_MemTxCpltCallback+0x44>
 8011758:	4b15      	ldr	r3, [pc, #84]	; (80117b0 <HAL_I2C_MemTxCpltCallback+0x8c>)
 801175a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801175e:	601a      	str	r2, [r3, #0]
 8011760:	f3bf 8f4f 	dsb	sy
 8011764:	f3bf 8f6f 	isb	sy
	END_ISR;
 8011768:	f004 fca6 	bl	80160b8 <GetCycleCount64>
 801176c:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8011770:	e9d7 bc04 	ldrd	fp, ip, [r7, #16]
 8011774:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8011778:	460b      	mov	r3, r1
 801177a:	4614      	mov	r4, r2
 801177c:	ebb3 030b 	subs.w	r3, r3, fp
 8011780:	eb64 040c 	sbc.w	r4, r4, ip
 8011784:	f64b 3180 	movw	r1, #48000	; 0xbb80
 8011788:	f04f 0200 	mov.w	r2, #0
 801178c:	42a2      	cmp	r2, r4
 801178e:	bf08      	it	eq
 8011790:	4299      	cmpeq	r1, r3
 8011792:	d206      	bcs.n	80117a2 <HAL_I2C_MemTxCpltCallback+0x7e>
 8011794:	69ba      	ldr	r2, [r7, #24]
 8011796:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801179a:	1ad3      	subs	r3, r2, r3
 801179c:	4618      	mov	r0, r3
 801179e:	f004 fc79 	bl	8016094 <long_isr>
}
 80117a2:	bf00      	nop
 80117a4:	3720      	adds	r7, #32
 80117a6:	46bd      	mov	sp, r7
 80117a8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80117ac:	20006db0 	.word	0x20006db0
 80117b0:	e000ed04 	.word	0xe000ed04

080117b4 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(_UNUSED_ I2C_HandleTypeDef *hi2c)
{
 80117b4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80117b8:	b08a      	sub	sp, #40	; 0x28
 80117ba:	af02      	add	r7, sp, #8
 80117bc:	6078      	str	r0, [r7, #4]
	BEGIN_ISR
 80117be:	f004 fc7b 	bl	80160b8 <GetCycleCount64>
 80117c2:	4603      	mov	r3, r0
 80117c4:	460c      	mov	r4, r1
 80117c6:	e9c7 3404 	strd	r3, r4, [r7, #16]
	BaseType_t higher=0;
 80117ca:	2300      	movs	r3, #0
 80117cc:	60fb      	str	r3, [r7, #12]
	xTaskNotifyFromISR(ina3221_taskHandle, NOTIF_INA_RDCOMPL, eSetBits, &higher);
 80117ce:	4b1b      	ldr	r3, [pc, #108]	; (801183c <HAL_I2C_MemRxCpltCallback+0x88>)
 80117d0:	6818      	ldr	r0, [r3, #0]
 80117d2:	f107 030c 	add.w	r3, r7, #12
 80117d6:	9300      	str	r3, [sp, #0]
 80117d8:	2300      	movs	r3, #0
 80117da:	2201      	movs	r2, #1
 80117dc:	2120      	movs	r1, #32
 80117de:	f7fd fb51 	bl	800ee84 <xTaskGenericNotifyFromISR>
	portYIELD_FROM_ISR(higher);
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d007      	beq.n	80117f8 <HAL_I2C_MemRxCpltCallback+0x44>
 80117e8:	4b15      	ldr	r3, [pc, #84]	; (8011840 <HAL_I2C_MemRxCpltCallback+0x8c>)
 80117ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80117ee:	601a      	str	r2, [r3, #0]
 80117f0:	f3bf 8f4f 	dsb	sy
 80117f4:	f3bf 8f6f 	isb	sy
	END_ISR;
 80117f8:	f004 fc5e 	bl	80160b8 <GetCycleCount64>
 80117fc:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8011800:	e9d7 bc04 	ldrd	fp, ip, [r7, #16]
 8011804:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8011808:	460b      	mov	r3, r1
 801180a:	4614      	mov	r4, r2
 801180c:	ebb3 030b 	subs.w	r3, r3, fp
 8011810:	eb64 040c 	sbc.w	r4, r4, ip
 8011814:	f64b 3180 	movw	r1, #48000	; 0xbb80
 8011818:	f04f 0200 	mov.w	r2, #0
 801181c:	42a2      	cmp	r2, r4
 801181e:	bf08      	it	eq
 8011820:	4299      	cmpeq	r1, r3
 8011822:	d206      	bcs.n	8011832 <HAL_I2C_MemRxCpltCallback+0x7e>
 8011824:	69ba      	ldr	r2, [r7, #24]
 8011826:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801182a:	1ad3      	subs	r3, r2, r3
 801182c:	4618      	mov	r0, r3
 801182e:	f004 fc31 	bl	8016094 <long_isr>
}
 8011832:	bf00      	nop
 8011834:	3720      	adds	r7, #32
 8011836:	46bd      	mov	sp, r7
 8011838:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 801183c:	20006db0 	.word	0x20006db0
 8011840:	e000ed04 	.word	0xe000ed04

08011844 <HAL_I2C_ErrorCallback>:



void HAL_I2C_ErrorCallback(_UNUSED_ I2C_HandleTypeDef *hi2c)
{
 8011844:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8011848:	b08a      	sub	sp, #40	; 0x28
 801184a:	af02      	add	r7, sp, #8
 801184c:	6078      	str	r0, [r7, #4]
	BEGIN_ISR
 801184e:	f004 fc33 	bl	80160b8 <GetCycleCount64>
 8011852:	4603      	mov	r3, r0
 8011854:	460c      	mov	r4, r1
 8011856:	e9c7 3404 	strd	r3, r4, [r7, #16]
	lastErr = hi2c->ErrorCode;
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801185e:	461a      	mov	r2, r3
 8011860:	4b1d      	ldr	r3, [pc, #116]	; (80118d8 <HAL_I2C_ErrorCallback+0x94>)
 8011862:	601a      	str	r2, [r3, #0]
	BaseType_t higher=0;
 8011864:	2300      	movs	r3, #0
 8011866:	60fb      	str	r3, [r7, #12]
	xTaskNotifyFromISR(ina3221_taskHandle, NOTIF_INA_ERR, eSetBits, &higher);
 8011868:	4b1c      	ldr	r3, [pc, #112]	; (80118dc <HAL_I2C_ErrorCallback+0x98>)
 801186a:	6818      	ldr	r0, [r3, #0]
 801186c:	f107 030c 	add.w	r3, r7, #12
 8011870:	9300      	str	r3, [sp, #0]
 8011872:	2300      	movs	r3, #0
 8011874:	2201      	movs	r2, #1
 8011876:	2140      	movs	r1, #64	; 0x40
 8011878:	f7fd fb04 	bl	800ee84 <xTaskGenericNotifyFromISR>
	portYIELD_FROM_ISR(higher);
 801187c:	68fb      	ldr	r3, [r7, #12]
 801187e:	2b00      	cmp	r3, #0
 8011880:	d007      	beq.n	8011892 <HAL_I2C_ErrorCallback+0x4e>
 8011882:	4b17      	ldr	r3, [pc, #92]	; (80118e0 <HAL_I2C_ErrorCallback+0x9c>)
 8011884:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011888:	601a      	str	r2, [r3, #0]
 801188a:	f3bf 8f4f 	dsb	sy
 801188e:	f3bf 8f6f 	isb	sy
	END_ISR;
 8011892:	f004 fc11 	bl	80160b8 <GetCycleCount64>
 8011896:	e9c7 0106 	strd	r0, r1, [r7, #24]
 801189a:	e9d7 bc04 	ldrd	fp, ip, [r7, #16]
 801189e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80118a2:	460b      	mov	r3, r1
 80118a4:	4614      	mov	r4, r2
 80118a6:	ebb3 030b 	subs.w	r3, r3, fp
 80118aa:	eb64 040c 	sbc.w	r4, r4, ip
 80118ae:	f64b 3180 	movw	r1, #48000	; 0xbb80
 80118b2:	f04f 0200 	mov.w	r2, #0
 80118b6:	42a2      	cmp	r2, r4
 80118b8:	bf08      	it	eq
 80118ba:	4299      	cmpeq	r1, r3
 80118bc:	d206      	bcs.n	80118cc <HAL_I2C_ErrorCallback+0x88>
 80118be:	69ba      	ldr	r2, [r7, #24]
 80118c0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80118c4:	1ad3      	subs	r3, r2, r3
 80118c6:	4618      	mov	r0, r3
 80118c8:	f004 fbe4 	bl	8016094 <long_isr>
}
 80118cc:	bf00      	nop
 80118ce:	3720      	adds	r7, #32
 80118d0:	46bd      	mov	sp, r7
 80118d2:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80118d6:	bf00      	nop
 80118d8:	20005210 	.word	0x20005210
 80118dc:	20006db0 	.word	0x20006db0
 80118e0:	e000ed04 	.word	0xe000ed04

080118e4 <ina3221_read16>:

// ----------------------------------------------------------------------------------


static uint16_t ina3221_read16(int a, int reg)
{
 80118e4:	b580      	push	{r7, lr}
 80118e6:	b088      	sub	sp, #32
 80118e8:	af04      	add	r7, sp, #16
 80118ea:	6078      	str	r0, [r7, #4]
 80118ec:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;
	uint16_t w16;
    status = HAL_I2C_Mem_Read(&INA3221_I2C_PORT, a<<1, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&w16, 2, HAL_MAX_DELAY);
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	b29b      	uxth	r3, r3
 80118f2:	005b      	lsls	r3, r3, #1
 80118f4:	b299      	uxth	r1, r3
 80118f6:	683b      	ldr	r3, [r7, #0]
 80118f8:	b29a      	uxth	r2, r3
 80118fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80118fe:	9302      	str	r3, [sp, #8]
 8011900:	2302      	movs	r3, #2
 8011902:	9301      	str	r3, [sp, #4]
 8011904:	f107 030c 	add.w	r3, r7, #12
 8011908:	9300      	str	r3, [sp, #0]
 801190a:	2301      	movs	r3, #1
 801190c:	4811      	ldr	r0, [pc, #68]	; (8011954 <ina3221_read16+0x70>)
 801190e:	f7f1 fefd 	bl	800370c <HAL_I2C_Mem_Read>
 8011912:	4603      	mov	r3, r0
 8011914:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) {
 8011916:	7bfb      	ldrb	r3, [r7, #15]
 8011918:	2b00      	cmp	r3, #0
 801191a:	d013      	beq.n	8011944 <ina3221_read16+0x60>
    	itm_debug1(DBG_INA3221|DBG_ERR, "i2c r err", status);
 801191c:	7bfb      	ldrb	r3, [r7, #15]
 801191e:	461a      	mov	r2, r3
 8011920:	490d      	ldr	r1, [pc, #52]	; (8011958 <ina3221_read16+0x74>)
 8011922:	480e      	ldr	r0, [pc, #56]	; (801195c <ina3221_read16+0x78>)
 8011924:	f7ff fbc0 	bl	80110a8 <itm_debug1>
    	ina3221_errors++;
 8011928:	4b0d      	ldr	r3, [pc, #52]	; (8011960 <ina3221_read16+0x7c>)
 801192a:	881b      	ldrh	r3, [r3, #0]
 801192c:	3301      	adds	r3, #1
 801192e:	b29a      	uxth	r2, r3
 8011930:	4b0b      	ldr	r3, [pc, #44]	; (8011960 <ina3221_read16+0x7c>)
 8011932:	801a      	strh	r2, [r3, #0]
    	bkpoint(1, INA3221_I2C_PORT.ErrorCode);
 8011934:	4b07      	ldr	r3, [pc, #28]	; (8011954 <ina3221_read16+0x70>)
 8011936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011938:	4619      	mov	r1, r3
 801193a:	2001      	movs	r0, #1
 801193c:	f7ff fc26 	bl	801118c <bkpoint>
    	return 0;
 8011940:	2300      	movs	r3, #0
 8011942:	e002      	b.n	801194a <ina3221_read16+0x66>
    } else {
    	return __builtin_bswap16(w16);
 8011944:	89bb      	ldrh	r3, [r7, #12]
 8011946:	ba5b      	rev16	r3, r3
 8011948:	b29b      	uxth	r3, r3
    }
}
 801194a:	4618      	mov	r0, r3
 801194c:	3710      	adds	r7, #16
 801194e:	46bd      	mov	sp, r7
 8011950:	bd80      	pop	{r7, pc}
 8011952:	bf00      	nop
 8011954:	200056a0 	.word	0x200056a0
 8011958:	08019d70 	.word	0x08019d70
 801195c:	80000020 	.word	0x80000020
 8011960:	200051d4 	.word	0x200051d4

08011964 <ina3221_write16>:

static int ina3221_write16(int a, int reg, uint16_t v)
{
 8011964:	b580      	push	{r7, lr}
 8011966:	b08a      	sub	sp, #40	; 0x28
 8011968:	af04      	add	r7, sp, #16
 801196a:	60f8      	str	r0, [r7, #12]
 801196c:	60b9      	str	r1, [r7, #8]
 801196e:	4613      	mov	r3, r2
 8011970:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status;
	uint16_t w16;
	if ((1)) w16 = __builtin_bswap16(v);
 8011972:	88fb      	ldrh	r3, [r7, #6]
 8011974:	ba5b      	rev16	r3, r3
 8011976:	b29b      	uxth	r3, r3
 8011978:	82bb      	strh	r3, [r7, #20]
	else w16=v;
    status = HAL_I2C_Mem_Write(&INA3221_I2C_PORT, a<<1, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&w16, 2, HAL_MAX_DELAY);
 801197a:	68fb      	ldr	r3, [r7, #12]
 801197c:	b29b      	uxth	r3, r3
 801197e:	005b      	lsls	r3, r3, #1
 8011980:	b299      	uxth	r1, r3
 8011982:	68bb      	ldr	r3, [r7, #8]
 8011984:	b29a      	uxth	r2, r3
 8011986:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801198a:	9302      	str	r3, [sp, #8]
 801198c:	2302      	movs	r3, #2
 801198e:	9301      	str	r3, [sp, #4]
 8011990:	f107 0314 	add.w	r3, r7, #20
 8011994:	9300      	str	r3, [sp, #0]
 8011996:	2301      	movs	r3, #1
 8011998:	4810      	ldr	r0, [pc, #64]	; (80119dc <ina3221_write16+0x78>)
 801199a:	f7f1 fdbd 	bl	8003518 <HAL_I2C_Mem_Write>
 801199e:	4603      	mov	r3, r0
 80119a0:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) {
 80119a2:	7dfb      	ldrb	r3, [r7, #23]
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d014      	beq.n	80119d2 <ina3221_write16+0x6e>
    	itm_debug1(DBG_INA3221|DBG_ERR, "i2c w err", status);
 80119a8:	7dfb      	ldrb	r3, [r7, #23]
 80119aa:	461a      	mov	r2, r3
 80119ac:	490c      	ldr	r1, [pc, #48]	; (80119e0 <ina3221_write16+0x7c>)
 80119ae:	480d      	ldr	r0, [pc, #52]	; (80119e4 <ina3221_write16+0x80>)
 80119b0:	f7ff fb7a 	bl	80110a8 <itm_debug1>
       	ina3221_errors++;
 80119b4:	4b0c      	ldr	r3, [pc, #48]	; (80119e8 <ina3221_write16+0x84>)
 80119b6:	881b      	ldrh	r3, [r3, #0]
 80119b8:	3301      	adds	r3, #1
 80119ba:	b29a      	uxth	r2, r3
 80119bc:	4b0a      	ldr	r3, [pc, #40]	; (80119e8 <ina3221_write16+0x84>)
 80119be:	801a      	strh	r2, [r3, #0]
    	bkpoint(2, INA3221_I2C_PORT.ErrorCode);
 80119c0:	4b06      	ldr	r3, [pc, #24]	; (80119dc <ina3221_write16+0x78>)
 80119c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80119c4:	4619      	mov	r1, r3
 80119c6:	2002      	movs	r0, #2
 80119c8:	f7ff fbe0 	bl	801118c <bkpoint>
    	return -1;
 80119cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80119d0:	e000      	b.n	80119d4 <ina3221_write16+0x70>
    }
    return 0;
 80119d2:	2300      	movs	r3, #0
}
 80119d4:	4618      	mov	r0, r3
 80119d6:	3718      	adds	r7, #24
 80119d8:	46bd      	mov	sp, r7
 80119da:	bd80      	pop	{r7, pc}
 80119dc:	200056a0 	.word	0x200056a0
 80119e0:	08019d7c 	.word	0x08019d7c
 80119e4:	80000020 	.word	0x80000020
 80119e8:	200051d4 	.word	0x200051d4

080119ec <ina3221_write16it>:




_UNUSED_ static int ina3221_write16it(int a, int reg, uint16_t v)
{
 80119ec:	b580      	push	{r7, lr}
 80119ee:	b088      	sub	sp, #32
 80119f0:	af02      	add	r7, sp, #8
 80119f2:	60f8      	str	r0, [r7, #12]
 80119f4:	60b9      	str	r1, [r7, #8]
 80119f6:	4613      	mov	r3, r2
 80119f8:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status;
	uint16_t w16;
	if ((1)) w16 = __builtin_bswap16(v);
 80119fa:	88fb      	ldrh	r3, [r7, #6]
 80119fc:	ba5b      	rev16	r3, r3
 80119fe:	b29b      	uxth	r3, r3
 8011a00:	82bb      	strh	r3, [r7, #20]
	else w16=v;

	if (HAL_I2C_GetState(&INA3221_I2C_PORT) != HAL_I2C_STATE_READY) {
 8011a02:	4824      	ldr	r0, [pc, #144]	; (8011a94 <ina3221_write16it+0xa8>)
 8011a04:	f7f2 fcf2 	bl	80043ec <HAL_I2C_GetState>
 8011a08:	4603      	mov	r3, r0
 8011a0a:	2b20      	cmp	r3, #32
 8011a0c:	d00a      	beq.n	8011a24 <ina3221_write16it+0x38>
    	bkpoint(3, INA3221_I2C_PORT.State);
 8011a0e:	4b21      	ldr	r3, [pc, #132]	; (8011a94 <ina3221_write16it+0xa8>)
 8011a10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011a14:	b2db      	uxtb	r3, r3
 8011a16:	4619      	mov	r1, r3
 8011a18:	2003      	movs	r0, #3
 8011a1a:	f7ff fbb7 	bl	801118c <bkpoint>
    	return -1;
 8011a1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011a22:	e033      	b.n	8011a8c <ina3221_write16it+0xa0>
	}
#if 0
    status = HAL_I2C_Mem_Write_IT(&INA3221_I2C_PORT, a<<1, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&w16, 2);
#else
    status = HAL_I2C_Mem_Write_IT_NW(&INA3221_I2C_PORT, a<<1, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&w16, 2);
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	b29b      	uxth	r3, r3
 8011a28:	005b      	lsls	r3, r3, #1
 8011a2a:	b299      	uxth	r1, r3
 8011a2c:	68bb      	ldr	r3, [r7, #8]
 8011a2e:	b29a      	uxth	r2, r3
 8011a30:	2302      	movs	r3, #2
 8011a32:	9301      	str	r3, [sp, #4]
 8011a34:	f107 0314 	add.w	r3, r7, #20
 8011a38:	9300      	str	r3, [sp, #0]
 8011a3a:	2301      	movs	r3, #1
 8011a3c:	4815      	ldr	r0, [pc, #84]	; (8011a94 <ina3221_write16it+0xa8>)
 8011a3e:	f000 f835 	bl	8011aac <HAL_I2C_Mem_Write_IT_NW>
 8011a42:	4603      	mov	r3, r0
 8011a44:	75fb      	strb	r3, [r7, #23]
#endif
    if (status != HAL_OK) {
 8011a46:	7dfb      	ldrb	r3, [r7, #23]
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d01e      	beq.n	8011a8a <ina3221_write16it+0x9e>
    	itm_debug1(DBG_INA3221|DBG_ERR, "i2c w err", status);
 8011a4c:	7dfb      	ldrb	r3, [r7, #23]
 8011a4e:	461a      	mov	r2, r3
 8011a50:	4911      	ldr	r1, [pc, #68]	; (8011a98 <ina3221_write16it+0xac>)
 8011a52:	4812      	ldr	r0, [pc, #72]	; (8011a9c <ina3221_write16it+0xb0>)
 8011a54:	f7ff fb28 	bl	80110a8 <itm_debug1>
       	ina3221_errors++;
 8011a58:	4b11      	ldr	r3, [pc, #68]	; (8011aa0 <ina3221_write16it+0xb4>)
 8011a5a:	881b      	ldrh	r3, [r3, #0]
 8011a5c:	3301      	adds	r3, #1
 8011a5e:	b29a      	uxth	r2, r3
 8011a60:	4b0f      	ldr	r3, [pc, #60]	; (8011aa0 <ina3221_write16it+0xb4>)
 8011a62:	801a      	strh	r2, [r3, #0]
    	bkpoint(3, INA3221_I2C_PORT.ErrorCode);
 8011a64:	4b0b      	ldr	r3, [pc, #44]	; (8011a94 <ina3221_write16it+0xa8>)
 8011a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a68:	4619      	mov	r1, r3
 8011a6a:	2003      	movs	r0, #3
 8011a6c:	f7ff fb8e 	bl	801118c <bkpoint>
    	itm_debug1(DBG_INA3221|DBG_ERR, "i2c rst", lastErr);
 8011a70:	4b0c      	ldr	r3, [pc, #48]	; (8011aa4 <ina3221_write16it+0xb8>)
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	461a      	mov	r2, r3
 8011a76:	490c      	ldr	r1, [pc, #48]	; (8011aa8 <ina3221_write16it+0xbc>)
 8011a78:	4808      	ldr	r0, [pc, #32]	; (8011a9c <ina3221_write16it+0xb0>)
 8011a7a:	f7ff fb15 	bl	80110a8 <itm_debug1>
    	HAL_I2C_Init(&INA3221_I2C_PORT);
 8011a7e:	4805      	ldr	r0, [pc, #20]	; (8011a94 <ina3221_write16it+0xa8>)
 8011a80:	f7f1 fc12 	bl	80032a8 <HAL_I2C_Init>
    	return -1;
 8011a84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011a88:	e000      	b.n	8011a8c <ina3221_write16it+0xa0>
    }
    return 0;
 8011a8a:	2300      	movs	r3, #0
}
 8011a8c:	4618      	mov	r0, r3
 8011a8e:	3718      	adds	r7, #24
 8011a90:	46bd      	mov	sp, r7
 8011a92:	bd80      	pop	{r7, pc}
 8011a94:	200056a0 	.word	0x200056a0
 8011a98:	08019d7c 	.word	0x08019d7c
 8011a9c:	80000020 	.word	0x80000020
 8011aa0:	200051d4 	.word	0x200051d4
 8011aa4:	20005210 	.word	0x20005210
 8011aa8:	08019d2c 	.word	0x08019d2c

08011aac <HAL_I2C_Mem_Write_IT_NW>:
#define I2C_TIMEOUT_BUSY_FLAG     25U         /*!< Timeout 25 ms             */
#define I2C_TIMEOUT_STOP_FLAG     5U          /*!< Timeout 5 ms              */
#define I2C_NO_OPTION_FRAME       0xFFFF0000U /*!< XferOptions default value */

HAL_StatusTypeDef HAL_I2C_Mem_Write_IT_NW(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8011aac:	b480      	push	{r7}
 8011aae:	b087      	sub	sp, #28
 8011ab0:	af00      	add	r7, sp, #0
 8011ab2:	60f8      	str	r0, [r7, #12]
 8011ab4:	4608      	mov	r0, r1
 8011ab6:	4611      	mov	r1, r2
 8011ab8:	461a      	mov	r2, r3
 8011aba:	4603      	mov	r3, r0
 8011abc:	817b      	strh	r3, [r7, #10]
 8011abe:	460b      	mov	r3, r1
 8011ac0:	813b      	strh	r3, [r7, #8]
 8011ac2:	4613      	mov	r3, r2
 8011ac4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8011ac6:	2300      	movs	r3, #0
 8011ac8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8011aca:	68fb      	ldr	r3, [r7, #12]
 8011acc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011ad0:	b2db      	uxtb	r3, r3
 8011ad2:	2b20      	cmp	r3, #32
 8011ad4:	f040 8083 	bne.w	8011bde <HAL_I2C_Mem_Write_IT_NW+0x132>
  {
    /* Wait until BUSY flag is reset */
    count = 2; //I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8011ad8:	2302      	movs	r3, #2
 8011ada:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8011adc:	697b      	ldr	r3, [r7, #20]
 8011ade:	3b01      	subs	r3, #1
 8011ae0:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8011ae2:	697b      	ldr	r3, [r7, #20]
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d116      	bne.n	8011b16 <HAL_I2C_Mem_Write_IT_NW+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8011ae8:	68fb      	ldr	r3, [r7, #12]
 8011aea:	2200      	movs	r2, #0
 8011aec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8011aee:	68fb      	ldr	r3, [r7, #12]
 8011af0:	2220      	movs	r2, #32
 8011af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8011af6:	68fb      	ldr	r3, [r7, #12]
 8011af8:	2200      	movs	r2, #0
 8011afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8011afe:	68fb      	ldr	r3, [r7, #12]
 8011b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b02:	f043 0220 	orr.w	r2, r3, #32
 8011b06:	68fb      	ldr	r3, [r7, #12]
 8011b08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011b0a:	68fb      	ldr	r3, [r7, #12]
 8011b0c:	2200      	movs	r2, #0
 8011b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8011b12:	2301      	movs	r3, #1
 8011b14:	e064      	b.n	8011be0 <HAL_I2C_Mem_Write_IT_NW+0x134>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8011b16:	68fb      	ldr	r3, [r7, #12]
 8011b18:	681b      	ldr	r3, [r3, #0]
 8011b1a:	699b      	ldr	r3, [r3, #24]
 8011b1c:	f003 0302 	and.w	r3, r3, #2
 8011b20:	2b02      	cmp	r3, #2
 8011b22:	d0db      	beq.n	8011adc <HAL_I2C_Mem_Write_IT_NW+0x30>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011b2a:	2b01      	cmp	r3, #1
 8011b2c:	d101      	bne.n	8011b32 <HAL_I2C_Mem_Write_IT_NW+0x86>
 8011b2e:	2302      	movs	r3, #2
 8011b30:	e056      	b.n	8011be0 <HAL_I2C_Mem_Write_IT_NW+0x134>
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	2201      	movs	r2, #1
 8011b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8011b3a:	68fb      	ldr	r3, [r7, #12]
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	f003 0301 	and.w	r3, r3, #1
 8011b44:	2b01      	cmp	r3, #1
 8011b46:	d007      	beq.n	8011b58 <HAL_I2C_Mem_Write_IT_NW+0xac>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8011b48:	68fb      	ldr	r3, [r7, #12]
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	681a      	ldr	r2, [r3, #0]
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	f042 0201 	orr.w	r2, r2, #1
 8011b56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8011b58:	68fb      	ldr	r3, [r7, #12]
 8011b5a:	681b      	ldr	r3, [r3, #0]
 8011b5c:	681a      	ldr	r2, [r3, #0]
 8011b5e:	68fb      	ldr	r3, [r7, #12]
 8011b60:	681b      	ldr	r3, [r3, #0]
 8011b62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011b66:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8011b68:	68fb      	ldr	r3, [r7, #12]
 8011b6a:	2221      	movs	r2, #33	; 0x21
 8011b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8011b70:	68fb      	ldr	r3, [r7, #12]
 8011b72:	2240      	movs	r2, #64	; 0x40
 8011b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8011b78:	68fb      	ldr	r3, [r7, #12]
 8011b7a:	2200      	movs	r2, #0
 8011b7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	6a3a      	ldr	r2, [r7, #32]
 8011b82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011b88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8011b8a:	68fb      	ldr	r3, [r7, #12]
 8011b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011b8e:	b29a      	uxth	r2, r3
 8011b90:	68fb      	ldr	r3, [r7, #12]
 8011b92:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8011b94:	68fb      	ldr	r3, [r7, #12]
 8011b96:	4a15      	ldr	r2, [pc, #84]	; (8011bec <HAL_I2C_Mem_Write_IT_NW+0x140>)
 8011b98:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8011b9a:	897a      	ldrh	r2, [r7, #10]
 8011b9c:	68fb      	ldr	r3, [r7, #12]
 8011b9e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8011ba0:	893a      	ldrh	r2, [r7, #8]
 8011ba2:	68fb      	ldr	r3, [r7, #12]
 8011ba4:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8011ba6:	88fa      	ldrh	r2, [r7, #6]
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8011bac:	68fb      	ldr	r3, [r7, #12]
 8011bae:	2200      	movs	r2, #0
 8011bb0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8011bb2:	68fb      	ldr	r3, [r7, #12]
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	681a      	ldr	r2, [r3, #0]
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	681b      	ldr	r3, [r3, #0]
 8011bbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011bc0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011bc2:	68fb      	ldr	r3, [r7, #12]
 8011bc4:	2200      	movs	r2, #0
 8011bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8011bca:	68fb      	ldr	r3, [r7, #12]
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	685a      	ldr	r2, [r3, #4]
 8011bd0:	68fb      	ldr	r3, [r7, #12]
 8011bd2:	681b      	ldr	r3, [r3, #0]
 8011bd4:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8011bd8:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8011bda:	2300      	movs	r3, #0
 8011bdc:	e000      	b.n	8011be0 <HAL_I2C_Mem_Write_IT_NW+0x134>
  }
  else
  {
    return HAL_BUSY;
 8011bde:	2302      	movs	r3, #2
  }
}
 8011be0:	4618      	mov	r0, r3
 8011be2:	371c      	adds	r7, #28
 8011be4:	46bd      	mov	sp, r7
 8011be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bea:	4770      	bx	lr
 8011bec:	ffff0000 	.word	0xffff0000

08011bf0 <_ina3221_configure>:
    return HAL_BUSY;
  }
}

static void _ina3221_configure(int a, int continuous)
{
 8011bf0:	b580      	push	{r7, lr}
 8011bf2:	b088      	sub	sp, #32
 8011bf4:	af00      	add	r7, sp, #0
 8011bf6:	6078      	str	r0, [r7, #4]
 8011bf8:	6039      	str	r1, [r7, #0]
	//HAL_StatusTypeDef status;
	uint16_t w16;

    _UNUSED_ uint16_t mid = ina3221_read16(a, INA3221_REG_MANUFACTURER_ID);
 8011bfa:	21fe      	movs	r1, #254	; 0xfe
 8011bfc:	6878      	ldr	r0, [r7, #4]
 8011bfe:	f7ff fe71 	bl	80118e4 <ina3221_read16>
 8011c02:	4603      	mov	r3, r0
 8011c04:	83bb      	strh	r3, [r7, #28]
     // 0x5449
    _UNUSED_ uint16_t did = ina3221_read16(a,  INA3221_REG_DIE_ID);
 8011c06:	21ff      	movs	r1, #255	; 0xff
 8011c08:	6878      	ldr	r0, [r7, #4]
 8011c0a:	f7ff fe6b 	bl	80118e4 <ina3221_read16>
 8011c0e:	4603      	mov	r3, r0
 8011c10:	837b      	strh	r3, [r7, #26]
    // 0x3220

    _UNUSED_ uint16_t cnfbr = ina3221_read16(a,  INA3221_REG_CONFIG);
 8011c12:	2100      	movs	r1, #0
 8011c14:	6878      	ldr	r0, [r7, #4]
 8011c16:	f7ff fe65 	bl	80118e4 <ina3221_read16>
 8011c1a:	4603      	mov	r3, r0
 8011c1c:	833b      	strh	r3, [r7, #24]

    if ((1)) {
    	w16 = INA3221_CONF_RESET;
 8011c1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011c22:	83fb      	strh	r3, [r7, #30]
    	int rc = ina3221_write16(a, INA3221_REG_CONFIG, w16);
 8011c24:	8bfb      	ldrh	r3, [r7, #30]
 8011c26:	461a      	mov	r2, r3
 8011c28:	2100      	movs	r1, #0
 8011c2a:	6878      	ldr	r0, [r7, #4]
 8011c2c:	f7ff fe9a 	bl	8011964 <ina3221_write16>
 8011c30:	6178      	str	r0, [r7, #20]
    	if (rc) {
 8011c32:	697b      	ldr	r3, [r7, #20]
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d003      	beq.n	8011c40 <_ina3221_configure+0x50>
    		bkpoint(100,rc);
 8011c38:	6979      	ldr	r1, [r7, #20]
 8011c3a:	2064      	movs	r0, #100	; 0x64
 8011c3c:	f7ff faa6 	bl	801118c <bkpoint>
    	}
    	osDelay(1000);
 8011c40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8011c44:	f7fb f916 	bl	800ce74 <osDelay>
    	//if ((1)) return;
    }
    _UNUSED_ uint16_t cnfar = ina3221_read16(a,  INA3221_REG_CONFIG);
 8011c48:	2100      	movs	r1, #0
 8011c4a:	6878      	ldr	r0, [r7, #4]
 8011c4c:	f7ff fe4a 	bl	80118e4 <ina3221_read16>
 8011c50:	4603      	mov	r3, r0
 8011c52:	827b      	strh	r3, [r7, #18]

    w16 = INA3221_CONF_CH1_EN | INA3221_CONF_CH2_EN | INA3221_CONF_CH3_EN
 8011c54:	f247 0301 	movw	r3, #28673	; 0x7001
 8011c58:	83fb      	strh	r3, [r7, #30]
    		| INA3221_CONF_VS_CT_140u
			| INA3221_CONF_MODE_SHUNT;
    w16 |= (continuous ? INA3221_CONF_AVG16 : INA3221_CONF_AVG1);
 8011c5a:	683b      	ldr	r3, [r7, #0]
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d002      	beq.n	8011c66 <_ina3221_configure+0x76>
 8011c60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011c64:	e000      	b.n	8011c68 <_ina3221_configure+0x78>
 8011c66:	2200      	movs	r2, #0
 8011c68:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011c6c:	4313      	orrs	r3, r2
 8011c6e:	b21b      	sxth	r3, r3
 8011c70:	83fb      	strh	r3, [r7, #30]

    if (continuous) w16 |= INA3221_CONF_MODE_CONTINUOUS;
 8011c72:	683b      	ldr	r3, [r7, #0]
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d003      	beq.n	8011c80 <_ina3221_configure+0x90>
 8011c78:	8bfb      	ldrh	r3, [r7, #30]
 8011c7a:	f043 0304 	orr.w	r3, r3, #4
 8011c7e:	83fb      	strh	r3, [r7, #30]
	ina_conf_val = w16;
 8011c80:	8bfb      	ldrh	r3, [r7, #30]
 8011c82:	4a13      	ldr	r2, [pc, #76]	; (8011cd0 <_ina3221_configure+0xe0>)
 8011c84:	6013      	str	r3, [r2, #0]
	int rc = ina3221_write16(a, INA3221_REG_CONFIG, w16);
 8011c86:	8bfb      	ldrh	r3, [r7, #30]
 8011c88:	461a      	mov	r2, r3
 8011c8a:	2100      	movs	r1, #0
 8011c8c:	6878      	ldr	r0, [r7, #4]
 8011c8e:	f7ff fe69 	bl	8011964 <ina3221_write16>
 8011c92:	60f8      	str	r0, [r7, #12]
    if ((0)) osDelay(100*1);
    if (rc) bkpoint(101, rc);
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d003      	beq.n	8011ca2 <_ina3221_configure+0xb2>
 8011c9a:	68f9      	ldr	r1, [r7, #12]
 8011c9c:	2065      	movs	r0, #101	; 0x65
 8011c9e:	f7ff fa75 	bl	801118c <bkpoint>
    rc = ina3221_write16(a, INA3221_REG_MASK_ENABLE, 0);
 8011ca2:	2200      	movs	r2, #0
 8011ca4:	210f      	movs	r1, #15
 8011ca6:	6878      	ldr	r0, [r7, #4]
 8011ca8:	f7ff fe5c 	bl	8011964 <ina3221_write16>
 8011cac:	60f8      	str	r0, [r7, #12]
    if (rc) bkpoint(102, rc);
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d003      	beq.n	8011cbc <_ina3221_configure+0xcc>
 8011cb4:	68f9      	ldr	r1, [r7, #12]
 8011cb6:	2066      	movs	r0, #102	; 0x66
 8011cb8:	f7ff fa68 	bl	801118c <bkpoint>

    _UNUSED_ uint16_t cnfac = ina3221_read16(a,  INA3221_REG_CONFIG);
 8011cbc:	2100      	movs	r1, #0
 8011cbe:	6878      	ldr	r0, [r7, #4]
 8011cc0:	f7ff fe10 	bl	80118e4 <ina3221_read16>
 8011cc4:	4603      	mov	r3, r0
 8011cc6:	817b      	strh	r3, [r7, #10]
    //if ((0)) ina3221_start_read();

    return;
 8011cc8:	bf00      	nop
}
 8011cca:	3720      	adds	r7, #32
 8011ccc:	46bd      	mov	sp, r7
 8011cce:	bd80      	pop	{r7, pc}
 8011cd0:	200051dc 	.word	0x200051dc

08011cd4 <_ina3221_init>:

void _ina3221_init(int continuous)
{
 8011cd4:	b580      	push	{r7, lr}
 8011cd6:	b086      	sub	sp, #24
 8011cd8:	af00      	add	r7, sp, #0
 8011cda:	6078      	str	r0, [r7, #4]
	if (disable_ina3221) return;
 8011cdc:	4b1d      	ldr	r3, [pc, #116]	; (8011d54 <_ina3221_init+0x80>)
 8011cde:	781b      	ldrb	r3, [r3, #0]
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d132      	bne.n	8011d4a <_ina3221_init+0x76>
	//I2C_Scan();
	for (int dev = 0; dev<4; dev++) {
 8011ce4:	2300      	movs	r3, #0
 8011ce6:	617b      	str	r3, [r7, #20]
 8011ce8:	e028      	b.n	8011d3c <_ina3221_init+0x68>
		int addr = 0x40 + dev;
 8011cea:	697b      	ldr	r3, [r7, #20]
 8011cec:	3340      	adds	r3, #64	; 0x40
 8011cee:	613b      	str	r3, [r7, #16]
	    HAL_StatusTypeDef res;
        res = HAL_I2C_IsDeviceReady(&INA3221_I2C_PORT, addr << 1, 1, 10);
 8011cf0:	693b      	ldr	r3, [r7, #16]
 8011cf2:	b29b      	uxth	r3, r3
 8011cf4:	005b      	lsls	r3, r3, #1
 8011cf6:	b299      	uxth	r1, r3
 8011cf8:	230a      	movs	r3, #10
 8011cfa:	2201      	movs	r2, #1
 8011cfc:	4816      	ldr	r0, [pc, #88]	; (8011d58 <_ina3221_init+0x84>)
 8011cfe:	f7f1 ffe9 	bl	8003cd4 <HAL_I2C_IsDeviceReady>
 8011d02:	4603      	mov	r3, r0
 8011d04:	73fb      	strb	r3, [r7, #15]
        if (res == HAL_OK) {
 8011d06:	7bfb      	ldrb	r3, [r7, #15]
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d10f      	bne.n	8011d2c <_ina3221_init+0x58>
        	_ina3221_configure(addr, continuous);
 8011d0c:	6879      	ldr	r1, [r7, #4]
 8011d0e:	6938      	ldr	r0, [r7, #16]
 8011d10:	f7ff ff6e 	bl	8011bf0 <_ina3221_configure>
        	itm_debug2(DBG_PRES|DBG_INA3221, "INA@", dev, addr);
 8011d14:	693b      	ldr	r3, [r7, #16]
 8011d16:	697a      	ldr	r2, [r7, #20]
 8011d18:	4910      	ldr	r1, [pc, #64]	; (8011d5c <_ina3221_init+0x88>)
 8011d1a:	2060      	movs	r0, #96	; 0x60
 8011d1c:	f7ff f9de 	bl	80110dc <itm_debug2>
        	ina3221_devices[dev]=1;
 8011d20:	4a0f      	ldr	r2, [pc, #60]	; (8011d60 <_ina3221_init+0x8c>)
 8011d22:	697b      	ldr	r3, [r7, #20]
 8011d24:	4413      	add	r3, r2
 8011d26:	2201      	movs	r2, #1
 8011d28:	701a      	strb	r2, [r3, #0]
 8011d2a:	e004      	b.n	8011d36 <_ina3221_init+0x62>
        } else {
        	ina3221_devices[dev]=0;
 8011d2c:	4a0c      	ldr	r2, [pc, #48]	; (8011d60 <_ina3221_init+0x8c>)
 8011d2e:	697b      	ldr	r3, [r7, #20]
 8011d30:	4413      	add	r3, r2
 8011d32:	2200      	movs	r2, #0
 8011d34:	701a      	strb	r2, [r3, #0]
	for (int dev = 0; dev<4; dev++) {
 8011d36:	697b      	ldr	r3, [r7, #20]
 8011d38:	3301      	adds	r3, #1
 8011d3a:	617b      	str	r3, [r7, #20]
 8011d3c:	697b      	ldr	r3, [r7, #20]
 8011d3e:	2b03      	cmp	r3, #3
 8011d40:	ddd3      	ble.n	8011cea <_ina3221_init+0x16>
        }
	}
	ina3221_init_done = 1;
 8011d42:	4b08      	ldr	r3, [pc, #32]	; (8011d64 <_ina3221_init+0x90>)
 8011d44:	2201      	movs	r2, #1
 8011d46:	601a      	str	r2, [r3, #0]
 8011d48:	e000      	b.n	8011d4c <_ina3221_init+0x78>
	if (disable_ina3221) return;
 8011d4a:	bf00      	nop
}
 8011d4c:	3718      	adds	r7, #24
 8011d4e:	46bd      	mov	sp, r7
 8011d50:	bd80      	pop	{r7, pc}
 8011d52:	bf00      	nop
 8011d54:	200051d6 	.word	0x200051d6
 8011d58:	200056a0 	.word	0x200056a0
 8011d5c:	08019d88 	.word	0x08019d88
 8011d60:	200051d0 	.word	0x200051d0
 8011d64:	200051d8 	.word	0x200051d8

08011d68 <ina3221_init_and_configure>:

static void ina3221_init_and_configure(void)
{
 8011d68:	b580      	push	{r7, lr}
 8011d6a:	af00      	add	r7, sp, #0
	_ina3221_init(INA3221_CONTIUNOUS);
 8011d6c:	2001      	movs	r0, #1
 8011d6e:	f7ff ffb1 	bl	8011cd4 <_ina3221_init>
}
 8011d72:	bf00      	nop
 8011d74:	bd80      	pop	{r7, pc}

08011d76 <ina3221_task_start>:

// ----------------------------------------------------------------------------------

void ina3221_task_start(_UNUSED_ void *argument)
{
 8011d76:	b580      	push	{r7, lr}
 8011d78:	b082      	sub	sp, #8
 8011d7a:	af00      	add	r7, sp, #0
 8011d7c:	6078      	str	r0, [r7, #4]
	if (DISABLE_INA3221) {
		for(;;) {
			osDelay(1);
		}
	}
	run_ina_task();
 8011d7e:	f7ff fa19 	bl	80111b4 <run_ina_task>
#else
	for(;;) {
		osDelay(1);
	}
#endif
}
 8011d82:	bf00      	nop
 8011d84:	3708      	adds	r7, #8
 8011d86:	46bd      	mov	sp, r7
 8011d88:	bd80      	pop	{r7, pc}
	...

08011d8c <itm_debug1>:
{
 8011d8c:	b580      	push	{r7, lr}
 8011d8e:	b086      	sub	sp, #24
 8011d90:	af02      	add	r7, sp, #8
 8011d92:	60f8      	str	r0, [r7, #12]
 8011d94:	60b9      	str	r1, [r7, #8]
 8011d96:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 8011d98:	4b08      	ldr	r3, [pc, #32]	; (8011dbc <itm_debug1+0x30>)
 8011d9a:	681a      	ldr	r2, [r3, #0]
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	4013      	ands	r3, r2
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d007      	beq.n	8011db4 <itm_debug1+0x28>
 8011da4:	2301      	movs	r3, #1
 8011da6:	9300      	str	r3, [sp, #0]
 8011da8:	2300      	movs	r3, #0
 8011daa:	2200      	movs	r2, #0
 8011dac:	6879      	ldr	r1, [r7, #4]
 8011dae:	68b8      	ldr	r0, [r7, #8]
 8011db0:	f007 fbc8 	bl	8019544 <_itm_debug3>
}
 8011db4:	bf00      	nop
 8011db6:	3710      	adds	r7, #16
 8011db8:	46bd      	mov	sp, r7
 8011dba:	bd80      	pop	{r7, pc}
 8011dbc:	20000610 	.word	0x20000610

08011dc0 <ihm_setlayout>:
		CODE_END
};


void ihm_setlayout(int numdisp, int numlayout)
{
 8011dc0:	b580      	push	{r7, lr}
 8011dc2:	b084      	sub	sp, #16
 8011dc4:	af00      	add	r7, sp, #0
 8011dc6:	6078      	str	r0, [r7, #4]
 8011dc8:	6039      	str	r1, [r7, #0]
	const uint8_t *p = NULL;
 8011dca:	2300      	movs	r3, #0
 8011dcc:	60fb      	str	r3, [r7, #12]
	switch (numlayout) {
 8011dce:	683b      	ldr	r3, [r7, #0]
 8011dd0:	2b03      	cmp	r3, #3
 8011dd2:	d017      	beq.n	8011e04 <ihm_setlayout+0x44>
 8011dd4:	2b03      	cmp	r3, #3
 8011dd6:	dc06      	bgt.n	8011de6 <ihm_setlayout+0x26>
 8011dd8:	2b01      	cmp	r3, #1
 8011dda:	d00d      	beq.n	8011df8 <ihm_setlayout+0x38>
 8011ddc:	2b01      	cmp	r3, #1
 8011dde:	dc0e      	bgt.n	8011dfe <ihm_setlayout+0x3e>
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d024      	beq.n	8011e2e <ihm_setlayout+0x6e>
 8011de4:	e01d      	b.n	8011e22 <ihm_setlayout+0x62>
 8011de6:	2b05      	cmp	r3, #5
 8011de8:	d018      	beq.n	8011e1c <ihm_setlayout+0x5c>
 8011dea:	2b05      	cmp	r3, #5
 8011dec:	db13      	blt.n	8011e16 <ihm_setlayout+0x56>
 8011dee:	2bc8      	cmp	r3, #200	; 0xc8
 8011df0:	d00b      	beq.n	8011e0a <ihm_setlayout+0x4a>
 8011df2:	2bc9      	cmp	r3, #201	; 0xc9
 8011df4:	d00c      	beq.n	8011e10 <ihm_setlayout+0x50>
 8011df6:	e014      	b.n	8011e22 <ihm_setlayout+0x62>
	case LAYOUT_DEFAULT: // default
		break;
	case LAYOUT_INIT:
		p = layout_init;
 8011df8:	4b12      	ldr	r3, [pc, #72]	; (8011e44 <ihm_setlayout+0x84>)
 8011dfa:	60fb      	str	r3, [r7, #12]
		break;
 8011dfc:	e018      	b.n	8011e30 <ihm_setlayout+0x70>
	case LAYOUT_MANUAL: // speed mode
		p = layout_manual;
 8011dfe:	4b12      	ldr	r3, [pc, #72]	; (8011e48 <ihm_setlayout+0x88>)
 8011e00:	60fb      	str	r3, [r7, #12]
		break;
 8011e02:	e015      	b.n	8011e30 <ihm_setlayout+0x70>
	case LAYOUT_AUTO:
		p = layout_auto;
 8011e04:	4b11      	ldr	r3, [pc, #68]	; (8011e4c <ihm_setlayout+0x8c>)
 8011e06:	60fb      	str	r3, [r7, #12]
		break;
 8011e08:	e012      	b.n	8011e30 <ihm_setlayout+0x70>
	case LAYOUT_INA3221_DETECT: // ina3221 I2C detection
		p = layout_ina3221_i2c;
 8011e0a:	4b11      	ldr	r3, [pc, #68]	; (8011e50 <ihm_setlayout+0x90>)
 8011e0c:	60fb      	str	r3, [r7, #12]
		break;
 8011e0e:	e00f      	b.n	8011e30 <ihm_setlayout+0x70>
	case LAYOUT_INA3221_VAL:
		p = layout_ina3221_val;
 8011e10:	4b10      	ldr	r3, [pc, #64]	; (8011e54 <ihm_setlayout+0x94>)
 8011e12:	60fb      	str	r3, [r7, #12]
		break;
 8011e14:	e00c      	b.n	8011e30 <ihm_setlayout+0x70>
	case LAYOUT_OFF:
		p = layout_off;
 8011e16:	4b10      	ldr	r3, [pc, #64]	; (8011e58 <ihm_setlayout+0x98>)
 8011e18:	60fb      	str	r3, [r7, #12]
		break;
 8011e1a:	e009      	b.n	8011e30 <ihm_setlayout+0x70>
	case LAYOUT_DETECT1:
		p = layout_detect1;
 8011e1c:	4b0f      	ldr	r3, [pc, #60]	; (8011e5c <ihm_setlayout+0x9c>)
 8011e1e:	60fb      	str	r3, [r7, #12]
		break;
 8011e20:	e006      	b.n	8011e30 <ihm_setlayout+0x70>
	default:
		itm_debug1(DBG_ERR|DBG_UI, "bad layout", numlayout);
 8011e22:	683a      	ldr	r2, [r7, #0]
 8011e24:	490e      	ldr	r1, [pc, #56]	; (8011e60 <ihm_setlayout+0xa0>)
 8011e26:	480f      	ldr	r0, [pc, #60]	; (8011e64 <ihm_setlayout+0xa4>)
 8011e28:	f7ff ffb0 	bl	8011d8c <itm_debug1>
		break;
 8011e2c:	e000      	b.n	8011e30 <ihm_setlayout+0x70>
		break;
 8011e2e:	bf00      	nop
	}
	disp[numdisp] = p;
 8011e30:	490d      	ldr	r1, [pc, #52]	; (8011e68 <ihm_setlayout+0xa8>)
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	68fa      	ldr	r2, [r7, #12]
 8011e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8011e3a:	bf00      	nop
 8011e3c:	3710      	adds	r7, #16
 8011e3e:	46bd      	mov	sp, r7
 8011e40:	bd80      	pop	{r7, pc}
 8011e42:	bf00      	nop
 8011e44:	0801c1ac 	.word	0x0801c1ac
 8011e48:	0801c1b4 	.word	0x0801c1b4
 8011e4c:	0801c1c8 	.word	0x0801c1c8
 8011e50:	0801c1dc 	.word	0x0801c1dc
 8011e54:	0801c1f4 	.word	0x0801c1f4
 8011e58:	0801c19c 	.word	0x0801c19c
 8011e5c:	0801c20c 	.word	0x0801c20c
 8011e60:	08019d90 	.word	0x08019d90
 8011e64:	80000800 	.word	0x80000800
 8011e68:	2000522c 	.word	0x2000522c

08011e6c <ihm_setvar>:
// ----------------------------------------------------------------

static uint16_t regs[DISP_MAX_REGS][MAX_DISP];

void ihm_setvar(int numdisp, int varnum, uint16_t val)
{
 8011e6c:	b480      	push	{r7}
 8011e6e:	b085      	sub	sp, #20
 8011e70:	af00      	add	r7, sp, #0
 8011e72:	60f8      	str	r0, [r7, #12]
 8011e74:	60b9      	str	r1, [r7, #8]
 8011e76:	4613      	mov	r3, r2
 8011e78:	80fb      	strh	r3, [r7, #6]
	if (varnum>DISP_MAX_REGS) return;
 8011e7a:	68bb      	ldr	r3, [r7, #8]
 8011e7c:	2b10      	cmp	r3, #16
 8011e7e:	dc0a      	bgt.n	8011e96 <ihm_setvar+0x2a>
	if (numdisp>MAX_DISP) return;
 8011e80:	68fb      	ldr	r3, [r7, #12]
 8011e82:	2b01      	cmp	r3, #1
 8011e84:	dc09      	bgt.n	8011e9a <ihm_setvar+0x2e>
	regs[varnum][numdisp] = val;
 8011e86:	4908      	ldr	r1, [pc, #32]	; (8011ea8 <ihm_setvar+0x3c>)
 8011e88:	68ba      	ldr	r2, [r7, #8]
 8011e8a:	68fb      	ldr	r3, [r7, #12]
 8011e8c:	4413      	add	r3, r2
 8011e8e:	88fa      	ldrh	r2, [r7, #6]
 8011e90:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8011e94:	e002      	b.n	8011e9c <ihm_setvar+0x30>
	if (varnum>DISP_MAX_REGS) return;
 8011e96:	bf00      	nop
 8011e98:	e000      	b.n	8011e9c <ihm_setvar+0x30>
	if (numdisp>MAX_DISP) return;
 8011e9a:	bf00      	nop
}
 8011e9c:	3714      	adds	r7, #20
 8011e9e:	46bd      	mov	sp, r7
 8011ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ea4:	4770      	bx	lr
 8011ea6:	bf00      	nop
 8011ea8:	20005230 	.word	0x20005230

08011eac <ihm_getvar>:
uint16_t ihm_getvar(int numdisp, int varnum)
{
 8011eac:	b480      	push	{r7}
 8011eae:	b083      	sub	sp, #12
 8011eb0:	af00      	add	r7, sp, #0
 8011eb2:	6078      	str	r0, [r7, #4]
 8011eb4:	6039      	str	r1, [r7, #0]
	if (varnum>DISP_MAX_REGS) return 0;
 8011eb6:	683b      	ldr	r3, [r7, #0]
 8011eb8:	2b10      	cmp	r3, #16
 8011eba:	dd01      	ble.n	8011ec0 <ihm_getvar+0x14>
 8011ebc:	2300      	movs	r3, #0
 8011ebe:	e00a      	b.n	8011ed6 <ihm_getvar+0x2a>
	if (numdisp>MAX_DISP) return 0;
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	2b01      	cmp	r3, #1
 8011ec4:	dd01      	ble.n	8011eca <ihm_getvar+0x1e>
 8011ec6:	2300      	movs	r3, #0
 8011ec8:	e005      	b.n	8011ed6 <ihm_getvar+0x2a>
	return regs[varnum][numdisp];
 8011eca:	4906      	ldr	r1, [pc, #24]	; (8011ee4 <ihm_getvar+0x38>)
 8011ecc:	683a      	ldr	r2, [r7, #0]
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	4413      	add	r3, r2
 8011ed2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
}
 8011ed6:	4618      	mov	r0, r3
 8011ed8:	370c      	adds	r7, #12
 8011eda:	46bd      	mov	sp, r7
 8011edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ee0:	4770      	bx	lr
 8011ee2:	bf00      	nop
 8011ee4:	20005230 	.word	0x20005230

08011ee8 <disp_layout>:
static void write_snum1000(int16_t v, FontDef *curfont);
static void write_bargraph(int16_t v, int16_t min, int16_t max);
static void write_sbargraph(int16_t v, int16_t min, int16_t max);

void disp_layout(int numdisp)
{
 8011ee8:	b580      	push	{r7, lr}
 8011eea:	b08c      	sub	sp, #48	; 0x30
 8011eec:	af00      	add	r7, sp, #0
 8011eee:	6078      	str	r0, [r7, #4]
	uint32_t t0 = HAL_GetTick();
 8011ef0:	f7ef ffa2 	bl	8001e38 <HAL_GetTick>
 8011ef4:	61f8      	str	r0, [r7, #28]
	const uint8_t *d = disp[numdisp];
 8011ef6:	4ace      	ldr	r2, [pc, #824]	; (8012230 <disp_layout+0x348>)
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011efe:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (!d) d = default_layout;
 8011f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d101      	bne.n	8011f0a <disp_layout+0x22>
 8011f06:	4bcb      	ldr	r3, [pc, #812]	; (8012234 <disp_layout+0x34c>)
 8011f08:	62fb      	str	r3, [r7, #44]	; 0x2c
	ssd1306_Fill(Black);
 8011f0a:	2000      	movs	r0, #0
 8011f0c:	f7fe fde4 	bl	8010ad8 <ssd1306_Fill>
	ssd1306_SetCursor(0, 0);
 8011f10:	2100      	movs	r1, #0
 8011f12:	2000      	movs	r0, #0
 8011f14:	f7fe ffc4 	bl	8010ea0 <ssd1306_SetCursor>
	FontDef *curfont = &Font_7x10;
 8011f18:	4bc7      	ldr	r3, [pc, #796]	; (8012238 <disp_layout+0x350>)
 8011f1a:	62bb      	str	r3, [r7, #40]	; 0x28
	int16_t v16s;
	//uint16_t *puval;
	static uint16_t last_dur1=0;
	static uint16_t last_dur2=0;

	for (int i=0; i<MAX_OPCODE_PER_DISPLAY; i++) {
 8011f1c:	2300      	movs	r3, #0
 8011f1e:	623b      	str	r3, [r7, #32]
 8011f20:	e2a4      	b.n	801246c <disp_layout+0x584>
		if (CODE_END == d[i]) break;
 8011f22:	6a3b      	ldr	r3, [r7, #32]
 8011f24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011f26:	4413      	add	r3, r2
 8011f28:	781b      	ldrb	r3, [r3, #0]
 8011f2a:	2bfe      	cmp	r3, #254	; 0xfe
 8011f2c:	f000 82a3 	beq.w	8012476 <disp_layout+0x58e>
		if ((d[i] & 0x80)==0) { // CODE_STR
 8011f30:	6a3b      	ldr	r3, [r7, #32]
 8011f32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011f34:	4413      	add	r3, r2
 8011f36:	781b      	ldrb	r3, [r3, #0]
 8011f38:	b25b      	sxtb	r3, r3
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	db10      	blt.n	8011f60 <disp_layout+0x78>
			const char * stri = ui_strings[d[i]&0x7F];
 8011f3e:	6a3b      	ldr	r3, [r7, #32]
 8011f40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011f42:	4413      	add	r3, r2
 8011f44:	781b      	ldrb	r3, [r3, #0]
 8011f46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011f4a:	4abc      	ldr	r2, [pc, #752]	; (801223c <disp_layout+0x354>)
 8011f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011f50:	613b      	str	r3, [r7, #16]
			ssd1306_WriteString(stri, *curfont, White);
 8011f52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011f54:	2301      	movs	r3, #1
 8011f56:	ca06      	ldmia	r2, {r1, r2}
 8011f58:	6938      	ldr	r0, [r7, #16]
 8011f5a:	f7fe ff7b 	bl	8010e54 <ssd1306_WriteString>
			continue;
 8011f5e:	e282      	b.n	8012466 <disp_layout+0x57e>
		}
		switch (d[i]) {
 8011f60:	6a3b      	ldr	r3, [r7, #32]
 8011f62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011f64:	4413      	add	r3, r2
 8011f66:	781b      	ldrb	r3, [r3, #0]
 8011f68:	3b80      	subs	r3, #128	; 0x80
 8011f6a:	2b7f      	cmp	r3, #127	; 0x7f
 8011f6c:	f200 826d 	bhi.w	801244a <disp_layout+0x562>
 8011f70:	a201      	add	r2, pc, #4	; (adr r2, 8011f78 <disp_layout+0x90>)
 8011f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f76:	bf00      	nop
 8011f78:	08012179 	.word	0x08012179
 8011f7c:	08012187 	.word	0x08012187
 8011f80:	08012195 	.word	0x08012195
 8011f84:	080121a3 	.word	0x080121a3
 8011f88:	080121b1 	.word	0x080121b1
 8011f8c:	080121bf 	.word	0x080121bf
 8011f90:	080121cd 	.word	0x080121cd
 8011f94:	080121db 	.word	0x080121db
 8011f98:	080123bd 	.word	0x080123bd
 8011f9c:	0801244b 	.word	0x0801244b
 8011fa0:	0801244b 	.word	0x0801244b
 8011fa4:	0801244b 	.word	0x0801244b
 8011fa8:	0801244b 	.word	0x0801244b
 8011fac:	0801244b 	.word	0x0801244b
 8011fb0:	0801244b 	.word	0x0801244b
 8011fb4:	080123d1 	.word	0x080123d1
 8011fb8:	0801244b 	.word	0x0801244b
 8011fbc:	0801244b 	.word	0x0801244b
 8011fc0:	0801244b 	.word	0x0801244b
 8011fc4:	0801244b 	.word	0x0801244b
 8011fc8:	0801244b 	.word	0x0801244b
 8011fcc:	0801244b 	.word	0x0801244b
 8011fd0:	0801244b 	.word	0x0801244b
 8011fd4:	0801244b 	.word	0x0801244b
 8011fd8:	0801244b 	.word	0x0801244b
 8011fdc:	0801244b 	.word	0x0801244b
 8011fe0:	0801244b 	.word	0x0801244b
 8011fe4:	0801244b 	.word	0x0801244b
 8011fe8:	0801244b 	.word	0x0801244b
 8011fec:	0801244b 	.word	0x0801244b
 8011ff0:	0801244b 	.word	0x0801244b
 8011ff4:	0801244b 	.word	0x0801244b
 8011ff8:	0801244b 	.word	0x0801244b
 8011ffc:	0801244b 	.word	0x0801244b
 8012000:	0801244b 	.word	0x0801244b
 8012004:	0801244b 	.word	0x0801244b
 8012008:	0801244b 	.word	0x0801244b
 801200c:	0801244b 	.word	0x0801244b
 8012010:	0801244b 	.word	0x0801244b
 8012014:	0801244b 	.word	0x0801244b
 8012018:	0801244b 	.word	0x0801244b
 801201c:	0801244b 	.word	0x0801244b
 8012020:	0801244b 	.word	0x0801244b
 8012024:	0801244b 	.word	0x0801244b
 8012028:	0801244b 	.word	0x0801244b
 801202c:	0801244b 	.word	0x0801244b
 8012030:	0801244b 	.word	0x0801244b
 8012034:	0801244b 	.word	0x0801244b
 8012038:	0801244b 	.word	0x0801244b
 801203c:	0801244b 	.word	0x0801244b
 8012040:	0801244b 	.word	0x0801244b
 8012044:	0801244b 	.word	0x0801244b
 8012048:	0801244b 	.word	0x0801244b
 801204c:	0801244b 	.word	0x0801244b
 8012050:	0801244b 	.word	0x0801244b
 8012054:	0801244b 	.word	0x0801244b
 8012058:	0801244b 	.word	0x0801244b
 801205c:	0801244b 	.word	0x0801244b
 8012060:	0801244b 	.word	0x0801244b
 8012064:	0801244b 	.word	0x0801244b
 8012068:	0801244b 	.word	0x0801244b
 801206c:	0801244b 	.word	0x0801244b
 8012070:	0801244b 	.word	0x0801244b
 8012074:	0801244b 	.word	0x0801244b
 8012078:	08012249 	.word	0x08012249
 801207c:	080123f7 	.word	0x080123f7
 8012080:	080122f5 	.word	0x080122f5
 8012084:	0801231b 	.word	0x0801231b
 8012088:	08012341 	.word	0x08012341
 801208c:	0801227d 	.word	0x0801227d
 8012090:	080122a5 	.word	0x080122a5
 8012094:	080122cd 	.word	0x080122cd
 8012098:	08012367 	.word	0x08012367
 801209c:	08012391 	.word	0x08012391
 80120a0:	080121e9 	.word	0x080121e9
 80120a4:	0801244b 	.word	0x0801244b
 80120a8:	0801244b 	.word	0x0801244b
 80120ac:	0801244b 	.word	0x0801244b
 80120b0:	0801244b 	.word	0x0801244b
 80120b4:	0801244b 	.word	0x0801244b
 80120b8:	0801244b 	.word	0x0801244b
 80120bc:	0801244b 	.word	0x0801244b
 80120c0:	0801244b 	.word	0x0801244b
 80120c4:	0801244b 	.word	0x0801244b
 80120c8:	0801244b 	.word	0x0801244b
 80120cc:	0801244b 	.word	0x0801244b
 80120d0:	0801244b 	.word	0x0801244b
 80120d4:	0801244b 	.word	0x0801244b
 80120d8:	0801244b 	.word	0x0801244b
 80120dc:	0801244b 	.word	0x0801244b
 80120e0:	0801244b 	.word	0x0801244b
 80120e4:	0801244b 	.word	0x0801244b
 80120e8:	0801244b 	.word	0x0801244b
 80120ec:	0801244b 	.word	0x0801244b
 80120f0:	0801244b 	.word	0x0801244b
 80120f4:	0801244b 	.word	0x0801244b
 80120f8:	0801244b 	.word	0x0801244b
 80120fc:	0801244b 	.word	0x0801244b
 8012100:	0801244b 	.word	0x0801244b
 8012104:	0801244b 	.word	0x0801244b
 8012108:	0801244b 	.word	0x0801244b
 801210c:	0801244b 	.word	0x0801244b
 8012110:	0801244b 	.word	0x0801244b
 8012114:	0801244b 	.word	0x0801244b
 8012118:	0801244b 	.word	0x0801244b
 801211c:	0801244b 	.word	0x0801244b
 8012120:	0801244b 	.word	0x0801244b
 8012124:	0801244b 	.word	0x0801244b
 8012128:	0801244b 	.word	0x0801244b
 801212c:	0801244b 	.word	0x0801244b
 8012130:	0801244b 	.word	0x0801244b
 8012134:	0801244b 	.word	0x0801244b
 8012138:	0801244b 	.word	0x0801244b
 801213c:	0801244b 	.word	0x0801244b
 8012140:	0801244b 	.word	0x0801244b
 8012144:	0801244b 	.word	0x0801244b
 8012148:	0801244b 	.word	0x0801244b
 801214c:	0801244b 	.word	0x0801244b
 8012150:	0801244b 	.word	0x0801244b
 8012154:	0801244b 	.word	0x0801244b
 8012158:	0801244b 	.word	0x0801244b
 801215c:	0801244b 	.word	0x0801244b
 8012160:	0801244b 	.word	0x0801244b
 8012164:	0801244b 	.word	0x0801244b
 8012168:	0801244b 	.word	0x0801244b
 801216c:	0801244b 	.word	0x0801244b
 8012170:	0801244b 	.word	0x0801244b
 8012174:	08012465 	.word	0x08012465
		case CODE_NOP: break;
		case CODE_ZONE_STATUS:
			ssd1306_SetCursor(0, 0);
 8012178:	2100      	movs	r1, #0
 801217a:	2000      	movs	r0, #0
 801217c:	f7fe fe90 	bl	8010ea0 <ssd1306_SetCursor>
			curfont = &Font_7x10;
 8012180:	4b2d      	ldr	r3, [pc, #180]	; (8012238 <disp_layout+0x350>)
 8012182:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 8012184:	e16f      	b.n	8012466 <disp_layout+0x57e>
		case CODE_ZONE_MODE:
			ssd1306_SetCursor(RIGHT_X, 0);
 8012186:	2100      	movs	r1, #0
 8012188:	2040      	movs	r0, #64	; 0x40
 801218a:	f7fe fe89 	bl	8010ea0 <ssd1306_SetCursor>
			curfont = &Font_7x10;
 801218e:	4b2a      	ldr	r3, [pc, #168]	; (8012238 <disp_layout+0x350>)
 8012190:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 8012192:	e168      	b.n	8012466 <disp_layout+0x57e>
		case CODE_ZONE_TEXT1:
			ssd1306_SetCursor(0, TEXT_Y);
 8012194:	210c      	movs	r1, #12
 8012196:	2000      	movs	r0, #0
 8012198:	f7fe fe82 	bl	8010ea0 <ssd1306_SetCursor>
			curfont = &Font_11x18;
 801219c:	4b28      	ldr	r3, [pc, #160]	; (8012240 <disp_layout+0x358>)
 801219e:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 80121a0:	e161      	b.n	8012466 <disp_layout+0x57e>
		case CODE_ZONE_TEXT2:
			ssd1306_SetCursor(RIGHT_X, TEXT_Y);
 80121a2:	210c      	movs	r1, #12
 80121a4:	2040      	movs	r0, #64	; 0x40
 80121a6:	f7fe fe7b 	bl	8010ea0 <ssd1306_SetCursor>
			curfont = &Font_11x18;
 80121aa:	4b25      	ldr	r3, [pc, #148]	; (8012240 <disp_layout+0x358>)
 80121ac:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 80121ae:	e15a      	b.n	8012466 <disp_layout+0x57e>
		case CODE_ZONE_TEXT1s:
			ssd1306_SetCursor(0, TEXT_Y);
 80121b0:	210c      	movs	r1, #12
 80121b2:	2000      	movs	r0, #0
 80121b4:	f7fe fe74 	bl	8010ea0 <ssd1306_SetCursor>
			curfont = &Font_7x10;
 80121b8:	4b1f      	ldr	r3, [pc, #124]	; (8012238 <disp_layout+0x350>)
 80121ba:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 80121bc:	e153      	b.n	8012466 <disp_layout+0x57e>
		case CODE_ZONE_TEXT2s:
			ssd1306_SetCursor(RIGHT_X, TEXT_Y);
 80121be:	210c      	movs	r1, #12
 80121c0:	2040      	movs	r0, #64	; 0x40
 80121c2:	f7fe fe6d 	bl	8010ea0 <ssd1306_SetCursor>
			curfont = &Font_7x10;
 80121c6:	4b1c      	ldr	r3, [pc, #112]	; (8012238 <disp_layout+0x350>)
 80121c8:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 80121ca:	e14c      	b.n	8012466 <disp_layout+0x57e>
		case CODE_ZONE_TEXT3s:
#ifdef SSD1306_INCLUDE_FONT_6x8
			ssd1306_SetCursor(0, TEXT_Y+12);
 80121cc:	2118      	movs	r1, #24
 80121ce:	2000      	movs	r0, #0
 80121d0:	f7fe fe66 	bl	8010ea0 <ssd1306_SetCursor>
			curfont = &Font_6x8;
 80121d4:	4b1b      	ldr	r3, [pc, #108]	; (8012244 <disp_layout+0x35c>)
 80121d6:	62bb      	str	r3, [r7, #40]	; 0x28
#else
			ssd1306_SetCursor(0, TEXT_Y+10);
			curfont = &Font_7x10;
#endif
			break;
 80121d8:	e145      	b.n	8012466 <disp_layout+0x57e>
		case CODE_ZONE_TEXT4s:
#ifdef SSD1306_INCLUDE_FONT_6x8
			ssd1306_SetCursor(RIGHT_X, TEXT_Y+12);
 80121da:	2118      	movs	r1, #24
 80121dc:	2040      	movs	r0, #64	; 0x40
 80121de:	f7fe fe5f 	bl	8010ea0 <ssd1306_SetCursor>
			curfont = &Font_6x8;
 80121e2:	4b18      	ldr	r3, [pc, #96]	; (8012244 <disp_layout+0x35c>)
 80121e4:	62bb      	str	r3, [r7, #40]	; 0x28
#else
			ssd1306_SetCursor(RIGHT_X, TEXT_Y+10);
			curfont = &Font_7x10;
#endif
			break;
 80121e6:	e13e      	b.n	8012466 <disp_layout+0x57e>
			curfont = &Font_16x26;
			break;
#endif

		case CODE_SPTR:
			i++;
 80121e8:	6a3b      	ldr	r3, [r7, #32]
 80121ea:	3301      	adds	r3, #1
 80121ec:	623b      	str	r3, [r7, #32]
			v16u = (int16_t) _GET_REG(numdisp, d[i]);
 80121ee:	6a3b      	ldr	r3, [r7, #32]
 80121f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80121f2:	4413      	add	r3, r2
 80121f4:	781b      	ldrb	r3, [r3, #0]
 80121f6:	4619      	mov	r1, r3
 80121f8:	6878      	ldr	r0, [r7, #4]
 80121fa:	f7ff fe57 	bl	8011eac <ihm_getvar>
 80121fe:	4603      	mov	r3, r0
 8012200:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (v16u<10) v16u = 10;
 8012202:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012204:	2b09      	cmp	r3, #9
 8012206:	d801      	bhi.n	801220c <disp_layout+0x324>
 8012208:	230a      	movs	r3, #10
 801220a:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (v16u>100) v16u = 100;
 801220c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801220e:	2b64      	cmp	r3, #100	; 0x64
 8012210:	d901      	bls.n	8012216 <disp_layout+0x32e>
 8012212:	2364      	movs	r3, #100	; 0x64
 8012214:	84fb      	strh	r3, [r7, #38]	; 0x26
			const char * stri = ui_strings[v16u];
 8012216:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012218:	4a08      	ldr	r2, [pc, #32]	; (801223c <disp_layout+0x354>)
 801221a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801221e:	61bb      	str	r3, [r7, #24]
			ssd1306_WriteString(stri, *curfont, White);
 8012220:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012222:	2301      	movs	r3, #1
 8012224:	ca06      	ldmia	r2, {r1, r2}
 8012226:	69b8      	ldr	r0, [r7, #24]
 8012228:	f7fe fe14 	bl	8010e54 <ssd1306_WriteString>
			break;
 801222c:	e11b      	b.n	8012466 <disp_layout+0x57e>
 801222e:	bf00      	nop
 8012230:	2000522c 	.word	0x2000522c
 8012234:	0801c1a4 	.word	0x0801c1a4
 8012238:	2000018c 	.word	0x2000018c
 801223c:	200001a0 	.word	0x200001a0
 8012240:	20000194 	.word	0x20000194
 8012244:	20000184 	.word	0x20000184
		case CODE_DIGIT:
			i++;
 8012248:	6a3b      	ldr	r3, [r7, #32]
 801224a:	3301      	adds	r3, #1
 801224c:	623b      	str	r3, [r7, #32]
			v16u = (int16_t) _GET_REG(numdisp, d[i]);
 801224e:	6a3b      	ldr	r3, [r7, #32]
 8012250:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012252:	4413      	add	r3, r2
 8012254:	781b      	ldrb	r3, [r3, #0]
 8012256:	4619      	mov	r1, r3
 8012258:	6878      	ldr	r0, [r7, #4]
 801225a:	f7ff fe27 	bl	8011eac <ihm_getvar>
 801225e:	4603      	mov	r3, r0
 8012260:	84fb      	strh	r3, [r7, #38]	; 0x26
			ssd1306_WriteChar('0'+(v16u & 0xF) , *curfont, White);
 8012262:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012264:	b2db      	uxtb	r3, r3
 8012266:	f003 030f 	and.w	r3, r3, #15
 801226a:	b2db      	uxtb	r3, r3
 801226c:	3330      	adds	r3, #48	; 0x30
 801226e:	b2d8      	uxtb	r0, r3
 8012270:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012272:	2301      	movs	r3, #1
 8012274:	ca06      	ldmia	r2, {r1, r2}
 8012276:	f7fe fd65 	bl	8010d44 <ssd1306_WriteChar>
			break;
 801227a:	e0f4      	b.n	8012466 <disp_layout+0x57e>
		case CODE_SVAL:
			i++;
 801227c:	6a3b      	ldr	r3, [r7, #32]
 801227e:	3301      	adds	r3, #1
 8012280:	623b      	str	r3, [r7, #32]
			v16s = (int16_t) _GET_REG(numdisp, d[i]);
 8012282:	6a3b      	ldr	r3, [r7, #32]
 8012284:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012286:	4413      	add	r3, r2
 8012288:	781b      	ldrb	r3, [r3, #0]
 801228a:	4619      	mov	r1, r3
 801228c:	6878      	ldr	r0, [r7, #4]
 801228e:	f7ff fe0d 	bl	8011eac <ihm_getvar>
 8012292:	4603      	mov	r3, r0
 8012294:	82fb      	strh	r3, [r7, #22]
			write_snum(v16s, curfont);
 8012296:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801229a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801229c:	4618      	mov	r0, r3
 801229e:	f000 f9bb 	bl	8012618 <write_snum>
			break;
 80122a2:	e0e0      	b.n	8012466 <disp_layout+0x57e>
		case CODE_SVAL4:
			i++;
 80122a4:	6a3b      	ldr	r3, [r7, #32]
 80122a6:	3301      	adds	r3, #1
 80122a8:	623b      	str	r3, [r7, #32]
			v16s = (int16_t) _GET_REG(numdisp, d[i]);
 80122aa:	6a3b      	ldr	r3, [r7, #32]
 80122ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80122ae:	4413      	add	r3, r2
 80122b0:	781b      	ldrb	r3, [r3, #0]
 80122b2:	4619      	mov	r1, r3
 80122b4:	6878      	ldr	r0, [r7, #4]
 80122b6:	f7ff fdf9 	bl	8011eac <ihm_getvar>
 80122ba:	4603      	mov	r3, r0
 80122bc:	82fb      	strh	r3, [r7, #22]
			write_snum4(v16s, curfont);
 80122be:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80122c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80122c4:	4618      	mov	r0, r3
 80122c6:	f000 f9e5 	bl	8012694 <write_snum4>
			break;
 80122ca:	e0cc      	b.n	8012466 <disp_layout+0x57e>
		case CODE_SVAL1000:
			i++;
 80122cc:	6a3b      	ldr	r3, [r7, #32]
 80122ce:	3301      	adds	r3, #1
 80122d0:	623b      	str	r3, [r7, #32]
			v16s = (int16_t) _GET_REG(numdisp, d[i]);
 80122d2:	6a3b      	ldr	r3, [r7, #32]
 80122d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80122d6:	4413      	add	r3, r2
 80122d8:	781b      	ldrb	r3, [r3, #0]
 80122da:	4619      	mov	r1, r3
 80122dc:	6878      	ldr	r0, [r7, #4]
 80122de:	f7ff fde5 	bl	8011eac <ihm_getvar>
 80122e2:	4603      	mov	r3, r0
 80122e4:	82fb      	strh	r3, [r7, #22]
			write_snum1000(v16s, curfont);
 80122e6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80122ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80122ec:	4618      	mov	r0, r3
 80122ee:	f000 fa0b 	bl	8012708 <write_snum1000>
			break;
 80122f2:	e0b8      	b.n	8012466 <disp_layout+0x57e>
		case CODE_UVAL:
			i++;
 80122f4:	6a3b      	ldr	r3, [r7, #32]
 80122f6:	3301      	adds	r3, #1
 80122f8:	623b      	str	r3, [r7, #32]
			v16u = _GET_REG(numdisp, d[i]);
 80122fa:	6a3b      	ldr	r3, [r7, #32]
 80122fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80122fe:	4413      	add	r3, r2
 8012300:	781b      	ldrb	r3, [r3, #0]
 8012302:	4619      	mov	r1, r3
 8012304:	6878      	ldr	r0, [r7, #4]
 8012306:	f7ff fdd1 	bl	8011eac <ihm_getvar>
 801230a:	4603      	mov	r3, r0
 801230c:	84fb      	strh	r3, [r7, #38]	; 0x26
			write_unum(v16u, curfont);
 801230e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012310:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012312:	4618      	mov	r0, r3
 8012314:	f000 f940 	bl	8012598 <write_unum>
			break;
 8012318:	e0a5      	b.n	8012466 <disp_layout+0x57e>
		case CODE_UVAL4:
			i++;
 801231a:	6a3b      	ldr	r3, [r7, #32]
 801231c:	3301      	adds	r3, #1
 801231e:	623b      	str	r3, [r7, #32]
			v16u = _GET_REG(numdisp, d[i]);
 8012320:	6a3b      	ldr	r3, [r7, #32]
 8012322:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012324:	4413      	add	r3, r2
 8012326:	781b      	ldrb	r3, [r3, #0]
 8012328:	4619      	mov	r1, r3
 801232a:	6878      	ldr	r0, [r7, #4]
 801232c:	f7ff fdbe 	bl	8011eac <ihm_getvar>
 8012330:	4603      	mov	r3, r0
 8012332:	84fb      	strh	r3, [r7, #38]	; 0x26
			write_unum4(v16u, curfont);
 8012334:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012336:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012338:	4618      	mov	r0, r3
 801233a:	f000 f93d 	bl	80125b8 <write_unum4>
			break;
 801233e:	e092      	b.n	8012466 <disp_layout+0x57e>
		case CODE_UVAL1000:
			i++;
 8012340:	6a3b      	ldr	r3, [r7, #32]
 8012342:	3301      	adds	r3, #1
 8012344:	623b      	str	r3, [r7, #32]
			v16u = _GET_REG(numdisp, d[i]);
 8012346:	6a3b      	ldr	r3, [r7, #32]
 8012348:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801234a:	4413      	add	r3, r2
 801234c:	781b      	ldrb	r3, [r3, #0]
 801234e:	4619      	mov	r1, r3
 8012350:	6878      	ldr	r0, [r7, #4]
 8012352:	f7ff fdab 	bl	8011eac <ihm_getvar>
 8012356:	4603      	mov	r3, r0
 8012358:	84fb      	strh	r3, [r7, #38]	; 0x26
			write_unum1000(v16u, curfont);
 801235a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801235c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801235e:	4618      	mov	r0, r3
 8012360:	f000 f942 	bl	80125e8 <write_unum1000>
			break;
 8012364:	e07f      	b.n	8012466 <disp_layout+0x57e>
		case CODE_GRAPH_LEVEL:
			i++;
 8012366:	6a3b      	ldr	r3, [r7, #32]
 8012368:	3301      	adds	r3, #1
 801236a:	623b      	str	r3, [r7, #32]
			v16u = _GET_REG(numdisp, d[i]);
 801236c:	6a3b      	ldr	r3, [r7, #32]
 801236e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012370:	4413      	add	r3, r2
 8012372:	781b      	ldrb	r3, [r3, #0]
 8012374:	4619      	mov	r1, r3
 8012376:	6878      	ldr	r0, [r7, #4]
 8012378:	f7ff fd98 	bl	8011eac <ihm_getvar>
 801237c:	4603      	mov	r3, r0
 801237e:	84fb      	strh	r3, [r7, #38]	; 0x26
			write_bargraph(v16u, 0, 100);
 8012380:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8012384:	2264      	movs	r2, #100	; 0x64
 8012386:	2100      	movs	r1, #0
 8012388:	4618      	mov	r0, r3
 801238a:	f000 f9f7 	bl	801277c <write_bargraph>
			break;
 801238e:	e06a      	b.n	8012466 <disp_layout+0x57e>
		case CODE_GRAPH_SLEVEL:
			i++;
 8012390:	6a3b      	ldr	r3, [r7, #32]
 8012392:	3301      	adds	r3, #1
 8012394:	623b      	str	r3, [r7, #32]
			v16s = _GET_REG(numdisp, d[i]);
 8012396:	6a3b      	ldr	r3, [r7, #32]
 8012398:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801239a:	4413      	add	r3, r2
 801239c:	781b      	ldrb	r3, [r3, #0]
 801239e:	4619      	mov	r1, r3
 80123a0:	6878      	ldr	r0, [r7, #4]
 80123a2:	f7ff fd83 	bl	8011eac <ihm_getvar>
 80123a6:	4603      	mov	r3, r0
 80123a8:	82fb      	strh	r3, [r7, #22]
			write_sbargraph(v16s, -100, 100);
 80123aa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80123ae:	2264      	movs	r2, #100	; 0x64
 80123b0:	f06f 0163 	mvn.w	r1, #99	; 0x63
 80123b4:	4618      	mov	r0, r3
 80123b6:	f000 fa4d 	bl	8012854 <write_sbargraph>
			break;
 80123ba:	e054      	b.n	8012466 <disp_layout+0x57e>
		case CODE_TIM4_CNT: {
			extern TIM_HandleTypeDef htim4;
			v16u = htim4.Instance->CNT;
 80123bc:	4b3c      	ldr	r3, [pc, #240]	; (80124b0 <disp_layout+0x5c8>)
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123c2:	84fb      	strh	r3, [r7, #38]	; 0x26
			write_unum(v16u, curfont);
 80123c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80123c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80123c8:	4618      	mov	r0, r3
 80123ca:	f000 f8e5 	bl	8012598 <write_unum>
			break;
 80123ce:	e04a      	b.n	8012466 <disp_layout+0x57e>
		}
		case CODE_PROFILE:
			write_unum((int16_t)last_dur1, curfont);
 80123d0:	4b38      	ldr	r3, [pc, #224]	; (80124b4 <disp_layout+0x5cc>)
 80123d2:	881b      	ldrh	r3, [r3, #0]
 80123d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80123d6:	4618      	mov	r0, r3
 80123d8:	f000 f8de 	bl	8012598 <write_unum>
			ssd1306_WriteChar('/', *curfont, White);
 80123dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80123de:	2301      	movs	r3, #1
 80123e0:	ca06      	ldmia	r2, {r1, r2}
 80123e2:	202f      	movs	r0, #47	; 0x2f
 80123e4:	f7fe fcae 	bl	8010d44 <ssd1306_WriteChar>
			write_unum((int16_t)last_dur2, curfont);
 80123e8:	4b33      	ldr	r3, [pc, #204]	; (80124b8 <disp_layout+0x5d0>)
 80123ea:	881b      	ldrh	r3, [r3, #0]
 80123ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80123ee:	4618      	mov	r0, r3
 80123f0:	f000 f8d2 	bl	8012598 <write_unum>
			break;
 80123f4:	e037      	b.n	8012466 <disp_layout+0x57e>
		case CODE_DIR:
			i+=1;
 80123f6:	6a3b      	ldr	r3, [r7, #32]
 80123f8:	3301      	adds	r3, #1
 80123fa:	623b      	str	r3, [r7, #32]
			v16s = _GET_REG(numdisp, d[i]);
 80123fc:	6a3b      	ldr	r3, [r7, #32]
 80123fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012400:	4413      	add	r3, r2
 8012402:	781b      	ldrb	r3, [r3, #0]
 8012404:	4619      	mov	r1, r3
 8012406:	6878      	ldr	r0, [r7, #4]
 8012408:	f7ff fd50 	bl	8011eac <ihm_getvar>
 801240c:	4603      	mov	r3, r0
 801240e:	82fb      	strh	r3, [r7, #22]
			if (v16s > 0) ssd1306_WriteChar('>', *curfont, White);
 8012410:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012414:	2b00      	cmp	r3, #0
 8012416:	dd06      	ble.n	8012426 <disp_layout+0x53e>
 8012418:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801241a:	2301      	movs	r3, #1
 801241c:	ca06      	ldmia	r2, {r1, r2}
 801241e:	203e      	movs	r0, #62	; 0x3e
 8012420:	f7fe fc90 	bl	8010d44 <ssd1306_WriteChar>
			else if (v16s < 0) ssd1306_WriteChar('<', *curfont, White);
			else ssd1306_WriteChar('|', *curfont, White);
			break;
 8012424:	e01f      	b.n	8012466 <disp_layout+0x57e>
			else if (v16s < 0) ssd1306_WriteChar('<', *curfont, White);
 8012426:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801242a:	2b00      	cmp	r3, #0
 801242c:	da06      	bge.n	801243c <disp_layout+0x554>
 801242e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012430:	2301      	movs	r3, #1
 8012432:	ca06      	ldmia	r2, {r1, r2}
 8012434:	203c      	movs	r0, #60	; 0x3c
 8012436:	f7fe fc85 	bl	8010d44 <ssd1306_WriteChar>
			break;
 801243a:	e014      	b.n	8012466 <disp_layout+0x57e>
			else ssd1306_WriteChar('|', *curfont, White);
 801243c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801243e:	2301      	movs	r3, #1
 8012440:	ca06      	ldmia	r2, {r1, r2}
 8012442:	207c      	movs	r0, #124	; 0x7c
 8012444:	f7fe fc7e 	bl	8010d44 <ssd1306_WriteChar>
			break;
 8012448:	e00d      	b.n	8012466 <disp_layout+0x57e>


		default:
			switch (d[i] & 0xC0) {
 801244a:	6a3b      	ldr	r3, [r7, #32]
 801244c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801244e:	4413      	add	r3, r2
 8012450:	781b      	ldrb	r3, [r3, #0]
 8012452:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8012456:	2bc0      	cmp	r3, #192	; 0xc0
 8012458:	d000      	beq.n	801245c <disp_layout+0x574>
			default:
			case 0x80: break;
 801245a:	e004      	b.n	8012466 <disp_layout+0x57e>
			case 0xC0: i++; break;
 801245c:	6a3b      	ldr	r3, [r7, #32]
 801245e:	3301      	adds	r3, #1
 8012460:	623b      	str	r3, [r7, #32]
 8012462:	e000      	b.n	8012466 <disp_layout+0x57e>
		case CODE_NOP: break;
 8012464:	bf00      	nop
	for (int i=0; i<MAX_OPCODE_PER_DISPLAY; i++) {
 8012466:	6a3b      	ldr	r3, [r7, #32]
 8012468:	3301      	adds	r3, #1
 801246a:	623b      	str	r3, [r7, #32]
 801246c:	6a3b      	ldr	r3, [r7, #32]
 801246e:	2b17      	cmp	r3, #23
 8012470:	f77f ad57 	ble.w	8011f22 <disp_layout+0x3a>
 8012474:	e000      	b.n	8012478 <disp_layout+0x590>
		if (CODE_END == d[i]) break;
 8012476:	bf00      	nop
			//case 0xB0: i+=2; break;
			//case 0xD0: i+=4; break;
			}
		}
	}
	uint32_t t1 = HAL_GetTick();
 8012478:	f7ef fcde 	bl	8001e38 <HAL_GetTick>
 801247c:	60f8      	str	r0, [r7, #12]
	ssd1306_UpdateScreen();
 801247e:	f7fe fbdb 	bl	8010c38 <ssd1306_UpdateScreen>
	uint32_t t2 = HAL_GetTick();
 8012482:	f7ef fcd9 	bl	8001e38 <HAL_GetTick>
 8012486:	60b8      	str	r0, [r7, #8]
	last_dur1 = t2-t0;
 8012488:	68bb      	ldr	r3, [r7, #8]
 801248a:	b29a      	uxth	r2, r3
 801248c:	69fb      	ldr	r3, [r7, #28]
 801248e:	b29b      	uxth	r3, r3
 8012490:	1ad3      	subs	r3, r2, r3
 8012492:	b29a      	uxth	r2, r3
 8012494:	4b07      	ldr	r3, [pc, #28]	; (80124b4 <disp_layout+0x5cc>)
 8012496:	801a      	strh	r2, [r3, #0]
	last_dur2 = t2-t1;
 8012498:	68bb      	ldr	r3, [r7, #8]
 801249a:	b29a      	uxth	r2, r3
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	b29b      	uxth	r3, r3
 80124a0:	1ad3      	subs	r3, r2, r3
 80124a2:	b29a      	uxth	r2, r3
 80124a4:	4b04      	ldr	r3, [pc, #16]	; (80124b8 <disp_layout+0x5d0>)
 80124a6:	801a      	strh	r2, [r3, #0]
}
 80124a8:	bf00      	nop
 80124aa:	3730      	adds	r7, #48	; 0x30
 80124ac:	46bd      	mov	sp, r7
 80124ae:	bd80      	pop	{r7, pc}
 80124b0:	20005dc8 	.word	0x20005dc8
 80124b4:	20005250 	.word	0x20005250
 80124b8:	20005252 	.word	0x20005252

080124bc <_write_unum>:
	}
}
*/

static void _write_unum(uint16_t v, FontDef *curfont, uint8_t hzero, uint8_t fp1000)
{
 80124bc:	b580      	push	{r7, lr}
 80124be:	b086      	sub	sp, #24
 80124c0:	af00      	add	r7, sp, #0
 80124c2:	6039      	str	r1, [r7, #0]
 80124c4:	4611      	mov	r1, r2
 80124c6:	461a      	mov	r2, r3
 80124c8:	4603      	mov	r3, r0
 80124ca:	80fb      	strh	r3, [r7, #6]
 80124cc:	460b      	mov	r3, r1
 80124ce:	717b      	strb	r3, [r7, #5]
 80124d0:	4613      	mov	r3, r2
 80124d2:	713b      	strb	r3, [r7, #4]
	int f = 0;
 80124d4:	2300      	movs	r3, #0
 80124d6:	617b      	str	r3, [r7, #20]
	int ns = 1000;
 80124d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80124dc:	613b      	str	r3, [r7, #16]
	if (fp1000) {
 80124de:	793b      	ldrb	r3, [r7, #4]
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d004      	beq.n	80124ee <_write_unum+0x32>
		ns = 1000;
 80124e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80124e8:	613b      	str	r3, [r7, #16]
		hzero = 1;
 80124ea:	2301      	movs	r3, #1
 80124ec:	717b      	strb	r3, [r7, #5]
	}
	for (int i=ns;i>0; i = i /10) {
 80124ee:	693b      	ldr	r3, [r7, #16]
 80124f0:	60fb      	str	r3, [r7, #12]
 80124f2:	e048      	b.n	8012586 <_write_unum+0xca>
		int n = v/i;
 80124f4:	88fa      	ldrh	r2, [r7, #6]
 80124f6:	68fb      	ldr	r3, [r7, #12]
 80124f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80124fc:	60bb      	str	r3, [r7, #8]
		if (!n && !f && (i>1)) {
 80124fe:	68bb      	ldr	r3, [r7, #8]
 8012500:	2b00      	cmp	r3, #0
 8012502:	d112      	bne.n	801252a <_write_unum+0x6e>
 8012504:	697b      	ldr	r3, [r7, #20]
 8012506:	2b00      	cmp	r3, #0
 8012508:	d10f      	bne.n	801252a <_write_unum+0x6e>
 801250a:	68fb      	ldr	r3, [r7, #12]
 801250c:	2b01      	cmp	r3, #1
 801250e:	dd0c      	ble.n	801252a <_write_unum+0x6e>
			if (!hzero) continue;
 8012510:	797b      	ldrb	r3, [r7, #5]
 8012512:	2b00      	cmp	r3, #0
 8012514:	d02e      	beq.n	8012574 <_write_unum+0xb8>
			if (hzero == ' ') {
 8012516:	797b      	ldrb	r3, [r7, #5]
 8012518:	2b20      	cmp	r3, #32
 801251a:	d106      	bne.n	801252a <_write_unum+0x6e>
				ssd1306_WriteChar(' ', *curfont, White);
 801251c:	683a      	ldr	r2, [r7, #0]
 801251e:	2301      	movs	r3, #1
 8012520:	ca06      	ldmia	r2, {r1, r2}
 8012522:	2020      	movs	r0, #32
 8012524:	f7fe fc0e 	bl	8010d44 <ssd1306_WriteChar>
				continue;
 8012528:	e025      	b.n	8012576 <_write_unum+0xba>
			}
		}
		ssd1306_WriteChar(n+'0', *curfont, White);
 801252a:	68bb      	ldr	r3, [r7, #8]
 801252c:	b2db      	uxtb	r3, r3
 801252e:	3330      	adds	r3, #48	; 0x30
 8012530:	b2d8      	uxtb	r0, r3
 8012532:	683a      	ldr	r2, [r7, #0]
 8012534:	2301      	movs	r3, #1
 8012536:	ca06      	ldmia	r2, {r1, r2}
 8012538:	f7fe fc04 	bl	8010d44 <ssd1306_WriteChar>
		if ((f==0) && fp1000) {
 801253c:	697b      	ldr	r3, [r7, #20]
 801253e:	2b00      	cmp	r3, #0
 8012540:	d10a      	bne.n	8012558 <_write_unum+0x9c>
 8012542:	793b      	ldrb	r3, [r7, #4]
 8012544:	2b00      	cmp	r3, #0
 8012546:	d007      	beq.n	8012558 <_write_unum+0x9c>
			ssd1306_WriteChar(',', *curfont, White);
 8012548:	683a      	ldr	r2, [r7, #0]
 801254a:	2301      	movs	r3, #1
 801254c:	ca06      	ldmia	r2, {r1, r2}
 801254e:	202c      	movs	r0, #44	; 0x2c
 8012550:	f7fe fbf8 	bl	8010d44 <ssd1306_WriteChar>
			hzero = 1;
 8012554:	2301      	movs	r3, #1
 8012556:	717b      	strb	r3, [r7, #5]
		}
		f++;
 8012558:	697b      	ldr	r3, [r7, #20]
 801255a:	3301      	adds	r3, #1
 801255c:	617b      	str	r3, [r7, #20]
		v = v - i*n;
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	b29a      	uxth	r2, r3
 8012562:	68bb      	ldr	r3, [r7, #8]
 8012564:	b29b      	uxth	r3, r3
 8012566:	fb12 f303 	smulbb	r3, r2, r3
 801256a:	b29b      	uxth	r3, r3
 801256c:	88fa      	ldrh	r2, [r7, #6]
 801256e:	1ad3      	subs	r3, r2, r3
 8012570:	80fb      	strh	r3, [r7, #6]
 8012572:	e000      	b.n	8012576 <_write_unum+0xba>
			if (!hzero) continue;
 8012574:	bf00      	nop
	for (int i=ns;i>0; i = i /10) {
 8012576:	68fb      	ldr	r3, [r7, #12]
 8012578:	4a06      	ldr	r2, [pc, #24]	; (8012594 <_write_unum+0xd8>)
 801257a:	fb82 1203 	smull	r1, r2, r2, r3
 801257e:	1092      	asrs	r2, r2, #2
 8012580:	17db      	asrs	r3, r3, #31
 8012582:	1ad3      	subs	r3, r2, r3
 8012584:	60fb      	str	r3, [r7, #12]
 8012586:	68fb      	ldr	r3, [r7, #12]
 8012588:	2b00      	cmp	r3, #0
 801258a:	dcb3      	bgt.n	80124f4 <_write_unum+0x38>
	}
}
 801258c:	bf00      	nop
 801258e:	3718      	adds	r7, #24
 8012590:	46bd      	mov	sp, r7
 8012592:	bd80      	pop	{r7, pc}
 8012594:	66666667 	.word	0x66666667

08012598 <write_unum>:
static void write_unum(uint16_t v, FontDef *curfont)
{
 8012598:	b580      	push	{r7, lr}
 801259a:	b082      	sub	sp, #8
 801259c:	af00      	add	r7, sp, #0
 801259e:	4603      	mov	r3, r0
 80125a0:	6039      	str	r1, [r7, #0]
 80125a2:	80fb      	strh	r3, [r7, #6]
	_write_unum(v, curfont, 0, 0);
 80125a4:	88f8      	ldrh	r0, [r7, #6]
 80125a6:	2300      	movs	r3, #0
 80125a8:	2200      	movs	r2, #0
 80125aa:	6839      	ldr	r1, [r7, #0]
 80125ac:	f7ff ff86 	bl	80124bc <_write_unum>
}
 80125b0:	bf00      	nop
 80125b2:	3708      	adds	r7, #8
 80125b4:	46bd      	mov	sp, r7
 80125b6:	bd80      	pop	{r7, pc}

080125b8 <write_unum4>:
static void write_unum4(uint16_t v, FontDef *curfont)
{
 80125b8:	b580      	push	{r7, lr}
 80125ba:	b082      	sub	sp, #8
 80125bc:	af00      	add	r7, sp, #0
 80125be:	4603      	mov	r3, r0
 80125c0:	6039      	str	r1, [r7, #0]
 80125c2:	80fb      	strh	r3, [r7, #6]
	if (v>9999) v=9999;
 80125c4:	88fb      	ldrh	r3, [r7, #6]
 80125c6:	f242 720f 	movw	r2, #9999	; 0x270f
 80125ca:	4293      	cmp	r3, r2
 80125cc:	d902      	bls.n	80125d4 <write_unum4+0x1c>
 80125ce:	f242 730f 	movw	r3, #9999	; 0x270f
 80125d2:	80fb      	strh	r3, [r7, #6]
	_write_unum(v, curfont, 1, 0);
 80125d4:	88f8      	ldrh	r0, [r7, #6]
 80125d6:	2300      	movs	r3, #0
 80125d8:	2201      	movs	r2, #1
 80125da:	6839      	ldr	r1, [r7, #0]
 80125dc:	f7ff ff6e 	bl	80124bc <_write_unum>
}
 80125e0:	bf00      	nop
 80125e2:	3708      	adds	r7, #8
 80125e4:	46bd      	mov	sp, r7
 80125e6:	bd80      	pop	{r7, pc}

080125e8 <write_unum1000>:
static void write_unum1000(uint16_t v, FontDef *curfont)
{
 80125e8:	b580      	push	{r7, lr}
 80125ea:	b082      	sub	sp, #8
 80125ec:	af00      	add	r7, sp, #0
 80125ee:	4603      	mov	r3, r0
 80125f0:	6039      	str	r1, [r7, #0]
 80125f2:	80fb      	strh	r3, [r7, #6]
	if (v>9999) v=9999;
 80125f4:	88fb      	ldrh	r3, [r7, #6]
 80125f6:	f242 720f 	movw	r2, #9999	; 0x270f
 80125fa:	4293      	cmp	r3, r2
 80125fc:	d902      	bls.n	8012604 <write_unum1000+0x1c>
 80125fe:	f242 730f 	movw	r3, #9999	; 0x270f
 8012602:	80fb      	strh	r3, [r7, #6]
	_write_unum(v, curfont, 1, 1);
 8012604:	88f8      	ldrh	r0, [r7, #6]
 8012606:	2301      	movs	r3, #1
 8012608:	2201      	movs	r2, #1
 801260a:	6839      	ldr	r1, [r7, #0]
 801260c:	f7ff ff56 	bl	80124bc <_write_unum>
}
 8012610:	bf00      	nop
 8012612:	3708      	adds	r7, #8
 8012614:	46bd      	mov	sp, r7
 8012616:	bd80      	pop	{r7, pc}

08012618 <write_snum>:
static void write_snum(int16_t v, FontDef *curfont)
{
 8012618:	b580      	push	{r7, lr}
 801261a:	b082      	sub	sp, #8
 801261c:	af00      	add	r7, sp, #0
 801261e:	4603      	mov	r3, r0
 8012620:	6039      	str	r1, [r7, #0]
 8012622:	80fb      	strh	r3, [r7, #6]
	if ((v<-5000)||(v>5000)) {
 8012624:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012628:	4a17      	ldr	r2, [pc, #92]	; (8012688 <write_snum+0x70>)
 801262a:	4293      	cmp	r3, r2
 801262c:	db05      	blt.n	801263a <write_snum+0x22>
 801262e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012632:	f241 3288 	movw	r2, #5000	; 0x1388
 8012636:	4293      	cmp	r3, r2
 8012638:	dd06      	ble.n	8012648 <write_snum+0x30>
		itm_debug1(DBG_UI|DBG_ERR, "strange here", v);
 801263a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801263e:	461a      	mov	r2, r3
 8012640:	4912      	ldr	r1, [pc, #72]	; (801268c <write_snum+0x74>)
 8012642:	4813      	ldr	r0, [pc, #76]	; (8012690 <write_snum+0x78>)
 8012644:	f7ff fba2 	bl	8011d8c <itm_debug1>
	}
	if (v < 0) {
 8012648:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801264c:	2b00      	cmp	r3, #0
 801264e:	da06      	bge.n	801265e <write_snum+0x46>
		ssd1306_WriteChar('-', *curfont, White);
 8012650:	683a      	ldr	r2, [r7, #0]
 8012652:	2301      	movs	r3, #1
 8012654:	ca06      	ldmia	r2, {r1, r2}
 8012656:	202d      	movs	r0, #45	; 0x2d
 8012658:	f7fe fb74 	bl	8010d44 <ssd1306_WriteChar>
 801265c:	e005      	b.n	801266a <write_snum+0x52>
	} else {
		ssd1306_WriteChar('+', *curfont, White);
 801265e:	683a      	ldr	r2, [r7, #0]
 8012660:	2301      	movs	r3, #1
 8012662:	ca06      	ldmia	r2, {r1, r2}
 8012664:	202b      	movs	r0, #43	; 0x2b
 8012666:	f7fe fb6d 	bl	8010d44 <ssd1306_WriteChar>
	}
	write_unum(abs(v), curfont);
 801266a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801266e:	2b00      	cmp	r3, #0
 8012670:	bfb8      	it	lt
 8012672:	425b      	neglt	r3, r3
 8012674:	b29b      	uxth	r3, r3
 8012676:	6839      	ldr	r1, [r7, #0]
 8012678:	4618      	mov	r0, r3
 801267a:	f7ff ff8d 	bl	8012598 <write_unum>
}
 801267e:	bf00      	nop
 8012680:	3708      	adds	r7, #8
 8012682:	46bd      	mov	sp, r7
 8012684:	bd80      	pop	{r7, pc}
 8012686:	bf00      	nop
 8012688:	ffffec78 	.word	0xffffec78
 801268c:	08019e50 	.word	0x08019e50
 8012690:	80000800 	.word	0x80000800

08012694 <write_snum4>:

static void write_snum4(int16_t v, FontDef *curfont)
{
 8012694:	b580      	push	{r7, lr}
 8012696:	b082      	sub	sp, #8
 8012698:	af00      	add	r7, sp, #0
 801269a:	4603      	mov	r3, r0
 801269c:	6039      	str	r1, [r7, #0]
 801269e:	80fb      	strh	r3, [r7, #6]
	if (v<-9999) v=-9999;
 80126a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80126a4:	4a17      	ldr	r2, [pc, #92]	; (8012704 <write_snum4+0x70>)
 80126a6:	4293      	cmp	r3, r2
 80126a8:	da02      	bge.n	80126b0 <write_snum4+0x1c>
 80126aa:	f64d 03f1 	movw	r3, #55537	; 0xd8f1
 80126ae:	80fb      	strh	r3, [r7, #6]
	if (v>9999) v=9999;
 80126b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80126b4:	f242 720f 	movw	r2, #9999	; 0x270f
 80126b8:	4293      	cmp	r3, r2
 80126ba:	dd02      	ble.n	80126c2 <write_snum4+0x2e>
 80126bc:	f242 730f 	movw	r3, #9999	; 0x270f
 80126c0:	80fb      	strh	r3, [r7, #6]
	if (v < 0) {
 80126c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	da06      	bge.n	80126d8 <write_snum4+0x44>
		ssd1306_WriteChar('-', *curfont, White);
 80126ca:	683a      	ldr	r2, [r7, #0]
 80126cc:	2301      	movs	r3, #1
 80126ce:	ca06      	ldmia	r2, {r1, r2}
 80126d0:	202d      	movs	r0, #45	; 0x2d
 80126d2:	f7fe fb37 	bl	8010d44 <ssd1306_WriteChar>
 80126d6:	e005      	b.n	80126e4 <write_snum4+0x50>
	} else {
		ssd1306_WriteChar('+', *curfont, White);
 80126d8:	683a      	ldr	r2, [r7, #0]
 80126da:	2301      	movs	r3, #1
 80126dc:	ca06      	ldmia	r2, {r1, r2}
 80126de:	202b      	movs	r0, #43	; 0x2b
 80126e0:	f7fe fb30 	bl	8010d44 <ssd1306_WriteChar>
	}
	_write_unum(abs(v), curfont, 1, 0);
 80126e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	bfb8      	it	lt
 80126ec:	425b      	neglt	r3, r3
 80126ee:	b298      	uxth	r0, r3
 80126f0:	2300      	movs	r3, #0
 80126f2:	2201      	movs	r2, #1
 80126f4:	6839      	ldr	r1, [r7, #0]
 80126f6:	f7ff fee1 	bl	80124bc <_write_unum>
}
 80126fa:	bf00      	nop
 80126fc:	3708      	adds	r7, #8
 80126fe:	46bd      	mov	sp, r7
 8012700:	bd80      	pop	{r7, pc}
 8012702:	bf00      	nop
 8012704:	ffffd8f1 	.word	0xffffd8f1

08012708 <write_snum1000>:

static void write_snum1000(int16_t v, FontDef *curfont)
{
 8012708:	b580      	push	{r7, lr}
 801270a:	b082      	sub	sp, #8
 801270c:	af00      	add	r7, sp, #0
 801270e:	4603      	mov	r3, r0
 8012710:	6039      	str	r1, [r7, #0]
 8012712:	80fb      	strh	r3, [r7, #6]
	if (v<-9999) v=-9999;
 8012714:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012718:	4a17      	ldr	r2, [pc, #92]	; (8012778 <write_snum1000+0x70>)
 801271a:	4293      	cmp	r3, r2
 801271c:	da02      	bge.n	8012724 <write_snum1000+0x1c>
 801271e:	f64d 03f1 	movw	r3, #55537	; 0xd8f1
 8012722:	80fb      	strh	r3, [r7, #6]
	if (v>9999) v=9999;
 8012724:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012728:	f242 720f 	movw	r2, #9999	; 0x270f
 801272c:	4293      	cmp	r3, r2
 801272e:	dd02      	ble.n	8012736 <write_snum1000+0x2e>
 8012730:	f242 730f 	movw	r3, #9999	; 0x270f
 8012734:	80fb      	strh	r3, [r7, #6]
	if (v < 0) {
 8012736:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801273a:	2b00      	cmp	r3, #0
 801273c:	da06      	bge.n	801274c <write_snum1000+0x44>
		ssd1306_WriteChar('-', *curfont, White);
 801273e:	683a      	ldr	r2, [r7, #0]
 8012740:	2301      	movs	r3, #1
 8012742:	ca06      	ldmia	r2, {r1, r2}
 8012744:	202d      	movs	r0, #45	; 0x2d
 8012746:	f7fe fafd 	bl	8010d44 <ssd1306_WriteChar>
 801274a:	e005      	b.n	8012758 <write_snum1000+0x50>
	} else {
		ssd1306_WriteChar('+', *curfont, White);
 801274c:	683a      	ldr	r2, [r7, #0]
 801274e:	2301      	movs	r3, #1
 8012750:	ca06      	ldmia	r2, {r1, r2}
 8012752:	202b      	movs	r0, #43	; 0x2b
 8012754:	f7fe faf6 	bl	8010d44 <ssd1306_WriteChar>
	}
	_write_unum(abs(v), curfont, 1, 1);
 8012758:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801275c:	2b00      	cmp	r3, #0
 801275e:	bfb8      	it	lt
 8012760:	425b      	neglt	r3, r3
 8012762:	b298      	uxth	r0, r3
 8012764:	2301      	movs	r3, #1
 8012766:	2201      	movs	r2, #1
 8012768:	6839      	ldr	r1, [r7, #0]
 801276a:	f7ff fea7 	bl	80124bc <_write_unum>
}
 801276e:	bf00      	nop
 8012770:	3708      	adds	r7, #8
 8012772:	46bd      	mov	sp, r7
 8012774:	bd80      	pop	{r7, pc}
 8012776:	bf00      	nop
 8012778:	ffffd8f1 	.word	0xffffd8f1

0801277c <write_bargraph>:

static void write_bargraph(int16_t v, int16_t min, int16_t max)
{
 801277c:	b590      	push	{r4, r7, lr}
 801277e:	b087      	sub	sp, #28
 8012780:	af02      	add	r7, sp, #8
 8012782:	4603      	mov	r3, r0
 8012784:	80fb      	strh	r3, [r7, #6]
 8012786:	460b      	mov	r3, r1
 8012788:	80bb      	strh	r3, [r7, #4]
 801278a:	4613      	mov	r3, r2
 801278c:	807b      	strh	r3, [r7, #2]
	uint8_t x0 = ssd1306_GetCursorX();
 801278e:	f7fe fb9f 	bl	8010ed0 <ssd1306_GetCursorX>
 8012792:	4603      	mov	r3, r0
 8012794:	73fb      	strb	r3, [r7, #15]
	uint8_t y0 = ssd1306_GetCursorY();
 8012796:	f7fe fba7 	bl	8010ee8 <ssd1306_GetCursorY>
 801279a:	4603      	mov	r3, r0
 801279c:	73bb      	strb	r3, [r7, #14]
	const uint8_t w = 50;
 801279e:	2332      	movs	r3, #50	; 0x32
 80127a0:	737b      	strb	r3, [r7, #13]
	const uint8_t h = 11; //y0+=3;
 80127a2:	230b      	movs	r3, #11
 80127a4:	733b      	strb	r3, [r7, #12]
	ssd1306_DrawRectangle(x0, y0, x0+w, y0+h, White);
 80127a6:	7bfa      	ldrb	r2, [r7, #15]
 80127a8:	7b7b      	ldrb	r3, [r7, #13]
 80127aa:	4413      	add	r3, r2
 80127ac:	b2dc      	uxtb	r4, r3
 80127ae:	7bba      	ldrb	r2, [r7, #14]
 80127b0:	7b3b      	ldrb	r3, [r7, #12]
 80127b2:	4413      	add	r3, r2
 80127b4:	b2da      	uxtb	r2, r3
 80127b6:	7bb9      	ldrb	r1, [r7, #14]
 80127b8:	7bf8      	ldrb	r0, [r7, #15]
 80127ba:	2301      	movs	r3, #1
 80127bc:	9300      	str	r3, [sp, #0]
 80127be:	4613      	mov	r3, r2
 80127c0:	4622      	mov	r2, r4
 80127c2:	f7fe fc09 	bl	8010fd8 <ssd1306_DrawRectangle>

	if (v>max) v=max;
 80127c6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80127ca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80127ce:	429a      	cmp	r2, r3
 80127d0:	dd01      	ble.n	80127d6 <write_bargraph+0x5a>
 80127d2:	887b      	ldrh	r3, [r7, #2]
 80127d4:	80fb      	strh	r3, [r7, #6]
	if (v<min) v=min;
 80127d6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80127da:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80127de:	429a      	cmp	r2, r3
 80127e0:	da01      	bge.n	80127e6 <write_bargraph+0x6a>
 80127e2:	88bb      	ldrh	r3, [r7, #4]
 80127e4:	80fb      	strh	r3, [r7, #6]
	int l = ((int)w*(v-min))/(max-min);
 80127e6:	7b7b      	ldrb	r3, [r7, #13]
 80127e8:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80127ec:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80127f0:	1a8a      	subs	r2, r1, r2
 80127f2:	fb02 f203 	mul.w	r2, r2, r3
 80127f6:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80127fa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80127fe:	1acb      	subs	r3, r1, r3
 8012800:	fb92 f3f3 	sdiv	r3, r2, r3
 8012804:	60bb      	str	r3, [r7, #8]
	if (l>0) ssd1306_FillZone(x0, y0, l, h, White);
 8012806:	68bb      	ldr	r3, [r7, #8]
 8012808:	2b00      	cmp	r3, #0
 801280a:	dd09      	ble.n	8012820 <write_bargraph+0xa4>
 801280c:	68bb      	ldr	r3, [r7, #8]
 801280e:	b2da      	uxtb	r2, r3
 8012810:	7b3c      	ldrb	r4, [r7, #12]
 8012812:	7bb9      	ldrb	r1, [r7, #14]
 8012814:	7bf8      	ldrb	r0, [r7, #15]
 8012816:	2301      	movs	r3, #1
 8012818:	9300      	str	r3, [sp, #0]
 801281a:	4623      	mov	r3, r4
 801281c:	f7fe f97e 	bl	8010b1c <ssd1306_FillZone>
	if ((min<0) && (max>0)) {
 8012820:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012824:	2b00      	cmp	r3, #0
 8012826:	da11      	bge.n	801284c <write_bargraph+0xd0>
 8012828:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801282c:	2b00      	cmp	r3, #0
 801282e:	dd0d      	ble.n	801284c <write_bargraph+0xd0>
		l = ((int)w*(0-min))/(max-min);
 8012830:	7b7b      	ldrb	r3, [r7, #13]
 8012832:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8012836:	4252      	negs	r2, r2
 8012838:	fb02 f203 	mul.w	r2, r2, r3
 801283c:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8012840:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012844:	1acb      	subs	r3, r1, r3
 8012846:	fb92 f3f3 	sdiv	r3, r2, r3
 801284a:	60bb      	str	r3, [r7, #8]
		/// TODO ?
	}
}
 801284c:	bf00      	nop
 801284e:	3714      	adds	r7, #20
 8012850:	46bd      	mov	sp, r7
 8012852:	bd90      	pop	{r4, r7, pc}

08012854 <write_sbargraph>:



static void write_sbargraph(int16_t v, int16_t min, int16_t max)
{
 8012854:	b590      	push	{r4, r7, lr}
 8012856:	b089      	sub	sp, #36	; 0x24
 8012858:	af02      	add	r7, sp, #8
 801285a:	4603      	mov	r3, r0
 801285c:	80fb      	strh	r3, [r7, #6]
 801285e:	460b      	mov	r3, r1
 8012860:	80bb      	strh	r3, [r7, #4]
 8012862:	4613      	mov	r3, r2
 8012864:	807b      	strh	r3, [r7, #2]
	uint8_t x0 = ssd1306_GetCursorX();
 8012866:	f7fe fb33 	bl	8010ed0 <ssd1306_GetCursorX>
 801286a:	4603      	mov	r3, r0
 801286c:	75fb      	strb	r3, [r7, #23]
	uint8_t y0 = ssd1306_GetCursorY();
 801286e:	f7fe fb3b 	bl	8010ee8 <ssd1306_GetCursorY>
 8012872:	4603      	mov	r3, r0
 8012874:	75bb      	strb	r3, [r7, #22]
	const uint8_t w = 50;
 8012876:	2332      	movs	r3, #50	; 0x32
 8012878:	757b      	strb	r3, [r7, #21]
	const uint8_t h = 11; //y0+=3;
 801287a:	230b      	movs	r3, #11
 801287c:	753b      	strb	r3, [r7, #20]
	ssd1306_DrawRectangle(x0, y0, x0+w, y0+h, White);
 801287e:	7dfa      	ldrb	r2, [r7, #23]
 8012880:	7d7b      	ldrb	r3, [r7, #21]
 8012882:	4413      	add	r3, r2
 8012884:	b2dc      	uxtb	r4, r3
 8012886:	7dba      	ldrb	r2, [r7, #22]
 8012888:	7d3b      	ldrb	r3, [r7, #20]
 801288a:	4413      	add	r3, r2
 801288c:	b2da      	uxtb	r2, r3
 801288e:	7db9      	ldrb	r1, [r7, #22]
 8012890:	7df8      	ldrb	r0, [r7, #23]
 8012892:	2301      	movs	r3, #1
 8012894:	9300      	str	r3, [sp, #0]
 8012896:	4613      	mov	r3, r2
 8012898:	4622      	mov	r2, r4
 801289a:	f7fe fb9d 	bl	8010fd8 <ssd1306_DrawRectangle>

	if (v>max) v=max;
 801289e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80128a2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80128a6:	429a      	cmp	r2, r3
 80128a8:	dd01      	ble.n	80128ae <write_sbargraph+0x5a>
 80128aa:	887b      	ldrh	r3, [r7, #2]
 80128ac:	80fb      	strh	r3, [r7, #6]
	if (v<min) v=min;
 80128ae:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80128b2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80128b6:	429a      	cmp	r2, r3
 80128b8:	da01      	bge.n	80128be <write_sbargraph+0x6a>
 80128ba:	88bb      	ldrh	r3, [r7, #4]
 80128bc:	80fb      	strh	r3, [r7, #6]
	int m = ((int)w*(0-min))/(max-min);
 80128be:	7d7b      	ldrb	r3, [r7, #21]
 80128c0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80128c4:	4252      	negs	r2, r2
 80128c6:	fb02 f203 	mul.w	r2, r2, r3
 80128ca:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80128ce:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80128d2:	1acb      	subs	r3, r1, r3
 80128d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80128d8:	613b      	str	r3, [r7, #16]
	int l = ((int)w*(v-min))/(max-min);
 80128da:	7d7b      	ldrb	r3, [r7, #21]
 80128dc:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80128e0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80128e4:	1a8a      	subs	r2, r1, r2
 80128e6:	fb02 f203 	mul.w	r2, r2, r3
 80128ea:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80128ee:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80128f2:	1acb      	subs	r3, r1, r3
 80128f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80128f8:	60fb      	str	r3, [r7, #12]
	if (l>m) ssd1306_FillZone(x0+m, y0, l-m, h, White);
 80128fa:	68fa      	ldr	r2, [r7, #12]
 80128fc:	693b      	ldr	r3, [r7, #16]
 80128fe:	429a      	cmp	r2, r3
 8012900:	dd12      	ble.n	8012928 <write_sbargraph+0xd4>
 8012902:	693b      	ldr	r3, [r7, #16]
 8012904:	b2da      	uxtb	r2, r3
 8012906:	7dfb      	ldrb	r3, [r7, #23]
 8012908:	4413      	add	r3, r2
 801290a:	b2d8      	uxtb	r0, r3
 801290c:	68fb      	ldr	r3, [r7, #12]
 801290e:	b2da      	uxtb	r2, r3
 8012910:	693b      	ldr	r3, [r7, #16]
 8012912:	b2db      	uxtb	r3, r3
 8012914:	1ad3      	subs	r3, r2, r3
 8012916:	b2da      	uxtb	r2, r3
 8012918:	7d3c      	ldrb	r4, [r7, #20]
 801291a:	7db9      	ldrb	r1, [r7, #22]
 801291c:	2301      	movs	r3, #1
 801291e:	9300      	str	r3, [sp, #0]
 8012920:	4623      	mov	r3, r4
 8012922:	f7fe f8fb 	bl	8010b1c <ssd1306_FillZone>
 8012926:	e011      	b.n	801294c <write_sbargraph+0xf8>
	else ssd1306_FillZone(x0+l, y0, m-l, h, White);
 8012928:	68fb      	ldr	r3, [r7, #12]
 801292a:	b2da      	uxtb	r2, r3
 801292c:	7dfb      	ldrb	r3, [r7, #23]
 801292e:	4413      	add	r3, r2
 8012930:	b2d8      	uxtb	r0, r3
 8012932:	693b      	ldr	r3, [r7, #16]
 8012934:	b2da      	uxtb	r2, r3
 8012936:	68fb      	ldr	r3, [r7, #12]
 8012938:	b2db      	uxtb	r3, r3
 801293a:	1ad3      	subs	r3, r2, r3
 801293c:	b2da      	uxtb	r2, r3
 801293e:	7d3c      	ldrb	r4, [r7, #20]
 8012940:	7db9      	ldrb	r1, [r7, #22]
 8012942:	2301      	movs	r3, #1
 8012944:	9300      	str	r3, [sp, #0]
 8012946:	4623      	mov	r3, r4
 8012948:	f7fe f8e8 	bl	8010b1c <ssd1306_FillZone>
	ssd1306_Line(x0+m, y0-1, x0+m, y0+h+2, White);
 801294c:	693b      	ldr	r3, [r7, #16]
 801294e:	b2da      	uxtb	r2, r3
 8012950:	7dfb      	ldrb	r3, [r7, #23]
 8012952:	4413      	add	r3, r2
 8012954:	b2d8      	uxtb	r0, r3
 8012956:	7dbb      	ldrb	r3, [r7, #22]
 8012958:	3b01      	subs	r3, #1
 801295a:	b2d9      	uxtb	r1, r3
 801295c:	693b      	ldr	r3, [r7, #16]
 801295e:	b2da      	uxtb	r2, r3
 8012960:	7dfb      	ldrb	r3, [r7, #23]
 8012962:	4413      	add	r3, r2
 8012964:	b2dc      	uxtb	r4, r3
 8012966:	7dba      	ldrb	r2, [r7, #22]
 8012968:	7d3b      	ldrb	r3, [r7, #20]
 801296a:	4413      	add	r3, r2
 801296c:	b2db      	uxtb	r3, r3
 801296e:	3302      	adds	r3, #2
 8012970:	b2da      	uxtb	r2, r3
 8012972:	2301      	movs	r3, #1
 8012974:	9300      	str	r3, [sp, #0]
 8012976:	4613      	mov	r3, r2
 8012978:	4622      	mov	r2, r4
 801297a:	f7fe fac1 	bl	8010f00 <ssd1306_Line>
	if ((min<0) && (max>0)) {
 801297e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012982:	2b00      	cmp	r3, #0
 8012984:	da11      	bge.n	80129aa <write_sbargraph+0x156>
 8012986:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801298a:	2b00      	cmp	r3, #0
 801298c:	dd0d      	ble.n	80129aa <write_sbargraph+0x156>
		l = ((int)w*(0-min))/(max-min);
 801298e:	7d7b      	ldrb	r3, [r7, #21]
 8012990:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8012994:	4252      	negs	r2, r2
 8012996:	fb02 f203 	mul.w	r2, r2, r3
 801299a:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 801299e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80129a2:	1acb      	subs	r3, r1, r3
 80129a4:	fb92 f3f3 	sdiv	r3, r2, r3
 80129a8:	60fb      	str	r3, [r7, #12]
		/// TODO
	}
}
 80129aa:	bf00      	nop
 80129ac:	371c      	adds	r7, #28
 80129ae:	46bd      	mov	sp, r7
 80129b0:	bd90      	pop	{r4, r7, pc}
	...

080129b4 <itm_debug1>:
{
 80129b4:	b580      	push	{r7, lr}
 80129b6:	b086      	sub	sp, #24
 80129b8:	af02      	add	r7, sp, #8
 80129ba:	60f8      	str	r0, [r7, #12]
 80129bc:	60b9      	str	r1, [r7, #8]
 80129be:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 80129c0:	4b08      	ldr	r3, [pc, #32]	; (80129e4 <itm_debug1+0x30>)
 80129c2:	681a      	ldr	r2, [r3, #0]
 80129c4:	68fb      	ldr	r3, [r7, #12]
 80129c6:	4013      	ands	r3, r2
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d007      	beq.n	80129dc <itm_debug1+0x28>
 80129cc:	2301      	movs	r3, #1
 80129ce:	9300      	str	r3, [sp, #0]
 80129d0:	2300      	movs	r3, #0
 80129d2:	2200      	movs	r2, #0
 80129d4:	6879      	ldr	r1, [r7, #4]
 80129d6:	68b8      	ldr	r0, [r7, #8]
 80129d8:	f006 fdb4 	bl	8019544 <_itm_debug3>
}
 80129dc:	bf00      	nop
 80129de:	3710      	adds	r7, #16
 80129e0:	46bd      	mov	sp, r7
 80129e2:	bd80      	pop	{r7, pc}
 80129e4:	20000610 	.word	0x20000610

080129e8 <itm_debug2>:
{
 80129e8:	b580      	push	{r7, lr}
 80129ea:	b086      	sub	sp, #24
 80129ec:	af02      	add	r7, sp, #8
 80129ee:	60f8      	str	r0, [r7, #12]
 80129f0:	60b9      	str	r1, [r7, #8]
 80129f2:	607a      	str	r2, [r7, #4]
 80129f4:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, 0, 2);
 80129f6:	4b09      	ldr	r3, [pc, #36]	; (8012a1c <itm_debug2+0x34>)
 80129f8:	681a      	ldr	r2, [r3, #0]
 80129fa:	68fb      	ldr	r3, [r7, #12]
 80129fc:	4013      	ands	r3, r2
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d007      	beq.n	8012a12 <itm_debug2+0x2a>
 8012a02:	2302      	movs	r3, #2
 8012a04:	9300      	str	r3, [sp, #0]
 8012a06:	2300      	movs	r3, #0
 8012a08:	683a      	ldr	r2, [r7, #0]
 8012a0a:	6879      	ldr	r1, [r7, #4]
 8012a0c:	68b8      	ldr	r0, [r7, #8]
 8012a0e:	f006 fd99 	bl	8019544 <_itm_debug3>
}
 8012a12:	bf00      	nop
 8012a14:	3710      	adds	r7, #16
 8012a16:	46bd      	mov	sp, r7
 8012a18:	bd80      	pop	{r7, pc}
 8012a1a:	bf00      	nop
 8012a1c:	20000610 	.word	0x20000610

08012a20 <mqf_read_to_ui>:

LFMQUEUE_DEF_H(to_forward_usb, msg_64_t)
LFMQUEUE_DEF_H(from_forward_usb, msg_64_t)


LFMQUEUE_DEF_H(to_ui, msg_64_t)
 8012a20:	b580      	push	{r7, lr}
 8012a22:	b082      	sub	sp, #8
 8012a24:	af00      	add	r7, sp, #0
 8012a26:	6078      	str	r0, [r7, #4]
 8012a28:	6879      	ldr	r1, [r7, #4]
 8012a2a:	4804      	ldr	r0, [pc, #16]	; (8012a3c <mqf_read_to_ui+0x1c>)
 8012a2c:	f006 ff0c 	bl	8019848 <mqf_read>
 8012a30:	4603      	mov	r3, r0
 8012a32:	4618      	mov	r0, r3
 8012a34:	3708      	adds	r7, #8
 8012a36:	46bd      	mov	sp, r7
 8012a38:	bd80      	pop	{r7, pc}
 8012a3a:	bf00      	nop
 8012a3c:	200005b4 	.word	0x200005b4

08012a40 <mqf_write_from_ui>:
LFMQUEUE_DEF_H(from_ui, msg_64_t)
 8012a40:	b580      	push	{r7, lr}
 8012a42:	b082      	sub	sp, #8
 8012a44:	af00      	add	r7, sp, #0
 8012a46:	6078      	str	r0, [r7, #4]
 8012a48:	6879      	ldr	r1, [r7, #4]
 8012a4a:	4804      	ldr	r0, [pc, #16]	; (8012a5c <mqf_write_from_ui+0x1c>)
 8012a4c:	f006 fe82 	bl	8019754 <mqf_write>
 8012a50:	4603      	mov	r3, r0
 8012a52:	4618      	mov	r0, r3
 8012a54:	3708      	adds	r7, #8
 8012a56:	46bd      	mov	sp, r7
 8012a58:	bd80      	pop	{r7, pc}
 8012a5a:	bf00      	nop
 8012a5c:	200005c0 	.word	0x200005c0

08012a60 <get_srotary>:
	return ((p<<ENC_MUL2)>>ENC_DIV2);//>>1;
}


static int16_t get_srotary(TIM_HandleTypeDef *ptdef)
{
 8012a60:	b480      	push	{r7}
 8012a62:	b085      	sub	sp, #20
 8012a64:	af00      	add	r7, sp, #0
 8012a66:	6078      	str	r0, [r7, #4]
	int16_t p = __HAL_TIM_GET_COUNTER(ptdef);
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a6e:	81fb      	strh	r3, [r7, #14]
	if (p<-ENC_MAX-MIDDLE_ZERO) {
 8012a70:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012a74:	f113 0f36 	cmn.w	r3, #54	; 0x36
 8012a78:	da08      	bge.n	8012a8c <get_srotary+0x2c>
		p = -ENC_MAX-MIDDLE_ZERO;
 8012a7a:	f64f 73ca 	movw	r3, #65482	; 0xffca
 8012a7e:	81fb      	strh	r3, [r7, #14]
		__HAL_TIM_SET_COUNTER(ptdef, p);
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8012a88:	625a      	str	r2, [r3, #36]	; 0x24
 8012a8a:	e00a      	b.n	8012aa2 <get_srotary+0x42>
	} else if (p>=ENC_MAX+MIDDLE_ZERO) {
 8012a8c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012a90:	2b35      	cmp	r3, #53	; 0x35
 8012a92:	dd06      	ble.n	8012aa2 <get_srotary+0x42>
		p=ENC_MAX+MIDDLE_ZERO;
 8012a94:	2336      	movs	r3, #54	; 0x36
 8012a96:	81fb      	strh	r3, [r7, #14]
		__HAL_TIM_SET_COUNTER(ptdef, p);
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	681b      	ldr	r3, [r3, #0]
 8012a9c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8012aa0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	if (abs(p)<MIDDLE_ZERO) p=0;
 8012aa2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012aa6:	f113 0f03 	cmn.w	r3, #3
 8012aaa:	db06      	blt.n	8012aba <get_srotary+0x5a>
 8012aac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012ab0:	2b03      	cmp	r3, #3
 8012ab2:	dc02      	bgt.n	8012aba <get_srotary+0x5a>
 8012ab4:	2300      	movs	r3, #0
 8012ab6:	81fb      	strh	r3, [r7, #14]
 8012ab8:	e00c      	b.n	8012ad4 <get_srotary+0x74>
	else if (p>0) p=p-MIDDLE_ZERO;
 8012aba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	dd04      	ble.n	8012acc <get_srotary+0x6c>
 8012ac2:	89fb      	ldrh	r3, [r7, #14]
 8012ac4:	3b04      	subs	r3, #4
 8012ac6:	b29b      	uxth	r3, r3
 8012ac8:	81fb      	strh	r3, [r7, #14]
 8012aca:	e003      	b.n	8012ad4 <get_srotary+0x74>
	else p=p+MIDDLE_ZERO;
 8012acc:	89fb      	ldrh	r3, [r7, #14]
 8012ace:	3304      	adds	r3, #4
 8012ad0:	b29b      	uxth	r3, r3
 8012ad2:	81fb      	strh	r3, [r7, #14]
	return ((p<<ENC_MUL2)>>ENC_DIV2);//>>1;
 8012ad4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012ad8:	005b      	lsls	r3, r3, #1
 8012ada:	b21b      	sxth	r3, r3
}
 8012adc:	4618      	mov	r0, r3
 8012ade:	3714      	adds	r7, #20
 8012ae0:	46bd      	mov	sp, r7
 8012ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ae6:	4770      	bx	lr

08012ae8 <ihm_runtick>:
static void ihm_runtick_testcanton(int);
static void ihm_runtick_detect(int);
static void ihm_runtick_detect1(int);

void ihm_runtick(void)
{
 8012ae8:	b580      	push	{r7, lr}
 8012aea:	b082      	sub	sp, #8
 8012aec:	af00      	add	r7, sp, #0
	static int performInit = 1;
	runmode_t orm = run_mode;
 8012aee:	4b24      	ldr	r3, [pc, #144]	; (8012b80 <ihm_runtick+0x98>)
 8012af0:	781b      	ldrb	r3, [r3, #0]
 8012af2:	71fb      	strb	r3, [r7, #7]
	switch (run_mode) {
 8012af4:	4b22      	ldr	r3, [pc, #136]	; (8012b80 <ihm_runtick+0x98>)
 8012af6:	781b      	ldrb	r3, [r3, #0]
 8012af8:	2b04      	cmp	r3, #4
 8012afa:	d82b      	bhi.n	8012b54 <ihm_runtick+0x6c>
 8012afc:	a201      	add	r2, pc, #4	; (adr r2, 8012b04 <ihm_runtick+0x1c>)
 8012afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b02:	bf00      	nop
 8012b04:	08012b25 	.word	0x08012b25
 8012b08:	08012b19 	.word	0x08012b19
 8012b0c:	08012b31 	.word	0x08012b31
 8012b10:	08012b3d 	.word	0x08012b3d
 8012b14:	08012b49 	.word	0x08012b49
	case runmode_normal:	ihm_runtick_normal(performInit); 	break;
 8012b18:	4b1a      	ldr	r3, [pc, #104]	; (8012b84 <ihm_runtick+0x9c>)
 8012b1a:	681b      	ldr	r3, [r3, #0]
 8012b1c:	4618      	mov	r0, r3
 8012b1e:	f000 f8a3 	bl	8012c68 <ihm_runtick_normal>
 8012b22:	e01d      	b.n	8012b60 <ihm_runtick+0x78>
	case runmode_off:		ihm_runtick_off(performInit); 		break;
 8012b24:	4b17      	ldr	r3, [pc, #92]	; (8012b84 <ihm_runtick+0x9c>)
 8012b26:	681b      	ldr	r3, [r3, #0]
 8012b28:	4618      	mov	r0, r3
 8012b2a:	f000 fad7 	bl	80130dc <ihm_runtick_off>
 8012b2e:	e017      	b.n	8012b60 <ihm_runtick+0x78>
	case runmode_testcanton:ihm_runtick_testcanton(performInit); break;
 8012b30:	4b14      	ldr	r3, [pc, #80]	; (8012b84 <ihm_runtick+0x9c>)
 8012b32:	681b      	ldr	r3, [r3, #0]
 8012b34:	4618      	mov	r0, r3
 8012b36:	f000 fb1b 	bl	8013170 <ihm_runtick_testcanton>
 8012b3a:	e011      	b.n	8012b60 <ihm_runtick+0x78>
	case runmode_detect1:	ihm_runtick_detect1(performInit);	break;
 8012b3c:	4b11      	ldr	r3, [pc, #68]	; (8012b84 <ihm_runtick+0x9c>)
 8012b3e:	681b      	ldr	r3, [r3, #0]
 8012b40:	4618      	mov	r0, r3
 8012b42:	f000 fb21 	bl	8013188 <ihm_runtick_detect1>
 8012b46:	e00b      	b.n	8012b60 <ihm_runtick+0x78>
	case runmode_detect:	ihm_runtick_detect(performInit);	break;
 8012b48:	4b0e      	ldr	r3, [pc, #56]	; (8012b84 <ihm_runtick+0x9c>)
 8012b4a:	681b      	ldr	r3, [r3, #0]
 8012b4c:	4618      	mov	r0, r3
 8012b4e:	f000 fc1d 	bl	801338c <ihm_runtick_detect>
 8012b52:	e005      	b.n	8012b60 <ihm_runtick+0x78>
	default:				ihm_runtick_off(performInit);		break;
 8012b54:	4b0b      	ldr	r3, [pc, #44]	; (8012b84 <ihm_runtick+0x9c>)
 8012b56:	681b      	ldr	r3, [r3, #0]
 8012b58:	4618      	mov	r0, r3
 8012b5a:	f000 fabf 	bl	80130dc <ihm_runtick_off>
 8012b5e:	bf00      	nop
	}
	performInit = (run_mode == orm) ? 0 : 1;
 8012b60:	4b07      	ldr	r3, [pc, #28]	; (8012b80 <ihm_runtick+0x98>)
 8012b62:	781b      	ldrb	r3, [r3, #0]
 8012b64:	79fa      	ldrb	r2, [r7, #7]
 8012b66:	429a      	cmp	r2, r3
 8012b68:	bf14      	ite	ne
 8012b6a:	2301      	movne	r3, #1
 8012b6c:	2300      	moveq	r3, #0
 8012b6e:	b2db      	uxtb	r3, r3
 8012b70:	461a      	mov	r2, r3
 8012b72:	4b04      	ldr	r3, [pc, #16]	; (8012b84 <ihm_runtick+0x9c>)
 8012b74:	601a      	str	r2, [r3, #0]
}
 8012b76:	bf00      	nop
 8012b78:	3708      	adds	r7, #8
 8012b7a:	46bd      	mov	sp, r7
 8012b7c:	bd80      	pop	{r7, pc}
 8012b7e:	bf00      	nop
 8012b80:	20005255 	.word	0x20005255
 8012b84:	20000228 	.word	0x20000228

08012b88 <set_displayout>:
// TODO : change this for per display struct
static ihm_mode_t ihm_dispmode = mode_init;
//static int ihm_train = 0;

static void set_displayout(void)
{
 8012b88:	b580      	push	{r7, lr}
 8012b8a:	af00      	add	r7, sp, #0
	switch (ihm_dispmode) {
 8012b8c:	4b18      	ldr	r3, [pc, #96]	; (8012bf0 <set_displayout+0x68>)
 8012b8e:	781b      	ldrb	r3, [r3, #0]
 8012b90:	3b01      	subs	r3, #1
 8012b92:	2b03      	cmp	r3, #3
 8012b94:	d80a      	bhi.n	8012bac <set_displayout+0x24>
 8012b96:	a201      	add	r2, pc, #4	; (adr r2, 8012b9c <set_displayout+0x14>)
 8012b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b9c:	08012bb7 	.word	0x08012bb7
 8012ba0:	08012bc1 	.word	0x08012bc1
 8012ba4:	08012bcb 	.word	0x08012bcb
 8012ba8:	08012bd5 	.word	0x08012bd5
	default:
	case mode_init: 	  	ihm_setlayout(0, LAYOUT_INIT); break;
 8012bac:	2101      	movs	r1, #1
 8012bae:	2000      	movs	r0, #0
 8012bb0:	f7ff f906 	bl	8011dc0 <ihm_setlayout>
 8012bb4:	e013      	b.n	8012bde <set_displayout+0x56>
	case mode_ina_detect:	ihm_setlayout(0, LAYOUT_INA3221_DETECT); break;
 8012bb6:	21c8      	movs	r1, #200	; 0xc8
 8012bb8:	2000      	movs	r0, #0
 8012bba:	f7ff f901 	bl	8011dc0 <ihm_setlayout>
 8012bbe:	e00e      	b.n	8012bde <set_displayout+0x56>
	case mode_ina_val:		ihm_setlayout(0, LAYOUT_INA3221_VAL); break;
 8012bc0:	21c9      	movs	r1, #201	; 0xc9
 8012bc2:	2000      	movs	r0, #0
 8012bc4:	f7ff f8fc 	bl	8011dc0 <ihm_setlayout>
 8012bc8:	e009      	b.n	8012bde <set_displayout+0x56>

	case mode_manual:		ihm_setlayout(0, LAYOUT_MANUAL); break;
 8012bca:	2102      	movs	r1, #2
 8012bcc:	2000      	movs	r0, #0
 8012bce:	f7ff f8f7 	bl	8011dc0 <ihm_setlayout>
 8012bd2:	e004      	b.n	8012bde <set_displayout+0x56>
	case mode_auto: 		ihm_setlayout(0, LAYOUT_AUTO); break;
 8012bd4:	2103      	movs	r1, #3
 8012bd6:	2000      	movs	r0, #0
 8012bd8:	f7ff f8f2 	bl	8011dc0 <ihm_setlayout>
 8012bdc:	bf00      	nop
	}
	SET_NEEDSREFRESH(0);
 8012bde:	4b05      	ldr	r3, [pc, #20]	; (8012bf4 <set_displayout+0x6c>)
 8012be0:	781b      	ldrb	r3, [r3, #0]
 8012be2:	f043 0301 	orr.w	r3, r3, #1
 8012be6:	b2da      	uxtb	r2, r3
 8012be8:	4b02      	ldr	r3, [pc, #8]	; (8012bf4 <set_displayout+0x6c>)
 8012bea:	701a      	strb	r2, [r3, #0]
}
 8012bec:	bf00      	nop
 8012bee:	bd80      	pop	{r7, pc}
 8012bf0:	20005256 	.word	0x20005256
 8012bf4:	20005254 	.word	0x20005254

08012bf8 <is_special_dispmode>:

static int is_special_dispmode(void)
{
 8012bf8:	b480      	push	{r7}
 8012bfa:	af00      	add	r7, sp, #0
	switch (ihm_dispmode) {
 8012bfc:	4b0e      	ldr	r3, [pc, #56]	; (8012c38 <is_special_dispmode+0x40>)
 8012bfe:	781b      	ldrb	r3, [r3, #0]
 8012c00:	3b01      	subs	r3, #1
 8012c02:	2b03      	cmp	r3, #3
 8012c04:	d80a      	bhi.n	8012c1c <is_special_dispmode+0x24>
 8012c06:	a201      	add	r2, pc, #4	; (adr r2, 8012c0c <is_special_dispmode+0x14>)
 8012c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c0c:	08012c21 	.word	0x08012c21
 8012c10:	08012c25 	.word	0x08012c25
 8012c14:	08012c29 	.word	0x08012c29
 8012c18:	08012c2d 	.word	0x08012c2d
	default:
	case mode_init: 	  	return 0;
 8012c1c:	2300      	movs	r3, #0
 8012c1e:	e006      	b.n	8012c2e <is_special_dispmode+0x36>
	case mode_ina_detect:	return 1;
 8012c20:	2301      	movs	r3, #1
 8012c22:	e004      	b.n	8012c2e <is_special_dispmode+0x36>
	case mode_ina_val:		return 1;
 8012c24:	2301      	movs	r3, #1
 8012c26:	e002      	b.n	8012c2e <is_special_dispmode+0x36>

	case mode_manual:		return 0;
 8012c28:	2300      	movs	r3, #0
 8012c2a:	e000      	b.n	8012c2e <is_special_dispmode+0x36>
	case mode_auto: 		return 0;
 8012c2c:	2300      	movs	r3, #0
	}
}
 8012c2e:	4618      	mov	r0, r3
 8012c30:	46bd      	mov	sp, r7
 8012c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c36:	4770      	bx	lr
 8012c38:	20005256 	.word	0x20005256

08012c3c <set_dispmode>:

static void set_dispmode(ihm_mode_t m)
{
 8012c3c:	b580      	push	{r7, lr}
 8012c3e:	b082      	sub	sp, #8
 8012c40:	af00      	add	r7, sp, #0
 8012c42:	4603      	mov	r3, r0
 8012c44:	71fb      	strb	r3, [r7, #7]
	if (ihm_dispmode == m) return;
 8012c46:	4b07      	ldr	r3, [pc, #28]	; (8012c64 <set_dispmode+0x28>)
 8012c48:	781b      	ldrb	r3, [r3, #0]
 8012c4a:	79fa      	ldrb	r2, [r7, #7]
 8012c4c:	429a      	cmp	r2, r3
 8012c4e:	d005      	beq.n	8012c5c <set_dispmode+0x20>
	ihm_dispmode = m;
 8012c50:	4a04      	ldr	r2, [pc, #16]	; (8012c64 <set_dispmode+0x28>)
 8012c52:	79fb      	ldrb	r3, [r7, #7]
 8012c54:	7013      	strb	r3, [r2, #0]
	set_displayout();
 8012c56:	f7ff ff97 	bl	8012b88 <set_displayout>
 8012c5a:	e000      	b.n	8012c5e <set_dispmode+0x22>
	if (ihm_dispmode == m) return;
 8012c5c:	bf00      	nop
}
 8012c5e:	3708      	adds	r7, #8
 8012c60:	46bd      	mov	sp, r7
 8012c62:	bd80      	pop	{r7, pc}
 8012c64:	20005256 	.word	0x20005256

08012c68 <ihm_runtick_normal>:

void ihm_runtick_normal(int init)
{
 8012c68:	b580      	push	{r7, lr}
 8012c6a:	b08a      	sub	sp, #40	; 0x28
 8012c6c:	af00      	add	r7, sp, #0
 8012c6e:	6078      	str	r0, [r7, #4]
	//static int cnt=0;
	if (init) {
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d016      	beq.n	8012ca4 <ihm_runtick_normal+0x3c>
		itm_debug1(DBG_UI, "UI init", 0);
 8012c76:	2200      	movs	r2, #0
 8012c78:	4963      	ldr	r1, [pc, #396]	; (8012e08 <ihm_runtick_normal+0x1a0>)
 8012c7a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8012c7e:	f7ff fe99 	bl	80129b4 <itm_debug1>
		set_dispmode(mode_init);
 8012c82:	2000      	movs	r0, #0
 8012c84:	f7ff ffda 	bl	8012c3c <set_dispmode>
		for (int i = 0; i<DISP_MAX_REGS; i++) {
 8012c88:	2300      	movs	r3, #0
 8012c8a:	627b      	str	r3, [r7, #36]	; 0x24
 8012c8c:	e007      	b.n	8012c9e <ihm_runtick_normal+0x36>
			ihm_setvar(0, i, 0);
 8012c8e:	2200      	movs	r2, #0
 8012c90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012c92:	2000      	movs	r0, #0
 8012c94:	f7ff f8ea 	bl	8011e6c <ihm_setvar>
		for (int i = 0; i<DISP_MAX_REGS; i++) {
 8012c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c9a:	3301      	adds	r3, #1
 8012c9c:	627b      	str	r3, [r7, #36]	; 0x24
 8012c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ca0:	2b0f      	cmp	r3, #15
 8012ca2:	ddf4      	ble.n	8012c8e <ihm_runtick_normal+0x26>
		}
	}
	itm_debug1(DBG_UI, "UI tick", 0);
 8012ca4:	2200      	movs	r2, #0
 8012ca6:	4959      	ldr	r1, [pc, #356]	; (8012e0c <ihm_runtick_normal+0x1a4>)
 8012ca8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8012cac:	f7ff fe82 	bl	80129b4 <itm_debug1>

	needsrefresh_mask = 0;
 8012cb0:	4b57      	ldr	r3, [pc, #348]	; (8012e10 <ihm_runtick_normal+0x1a8>)
 8012cb2:	2200      	movs	r2, #0
 8012cb4:	701a      	strb	r2, [r3, #0]
	// scan rotary encoder -----------
	for (int i=0; i<MAX_ROTARY; i++) {
 8012cb6:	2300      	movs	r3, #0
 8012cb8:	623b      	str	r3, [r7, #32]
 8012cba:	e066      	b.n	8012d8a <ihm_runtick_normal+0x122>
				m.v1u = rot_position[i];
				mqf_write_from_ui(&m);
			}
		}
#else
		int16_t p = get_srotary(&htim4);
 8012cbc:	4855      	ldr	r0, [pc, #340]	; (8012e14 <ihm_runtick_normal+0x1ac>)
 8012cbe:	f7ff fecf 	bl	8012a60 <get_srotary>
 8012cc2:	4603      	mov	r3, r0
 8012cc4:	82fb      	strh	r3, [r7, #22]
		if (p != rot_position[i]) {
 8012cc6:	4a54      	ldr	r2, [pc, #336]	; (8012e18 <ihm_runtick_normal+0x1b0>)
 8012cc8:	6a3b      	ldr	r3, [r7, #32]
 8012cca:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012cce:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012cd2:	429a      	cmp	r2, r3
 8012cd4:	d056      	beq.n	8012d84 <ihm_runtick_normal+0x11c>
			// pos changed
			rot_position[i] = p;
 8012cd6:	4950      	ldr	r1, [pc, #320]	; (8012e18 <ihm_runtick_normal+0x1b0>)
 8012cd8:	6a3b      	ldr	r3, [r7, #32]
 8012cda:	8afa      	ldrh	r2, [r7, #22]
 8012cdc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			if (ihm_dispmode==mode_manual) {
 8012ce0:	4b4e      	ldr	r3, [pc, #312]	; (8012e1c <ihm_runtick_normal+0x1b4>)
 8012ce2:	781b      	ldrb	r3, [r3, #0]
 8012ce4:	2b03      	cmp	r3, #3
 8012ce6:	d10f      	bne.n	8012d08 <ihm_runtick_normal+0xa0>
				ihm_setvar(0, 1, (uint16_t) rot_position[0]);
 8012ce8:	4b4b      	ldr	r3, [pc, #300]	; (8012e18 <ihm_runtick_normal+0x1b0>)
 8012cea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012cee:	b29b      	uxth	r3, r3
 8012cf0:	461a      	mov	r2, r3
 8012cf2:	2101      	movs	r1, #1
 8012cf4:	2000      	movs	r0, #0
 8012cf6:	f7ff f8b9 	bl	8011e6c <ihm_setvar>
				//ihm_setvar(0, 1, ((int)rot0_position - 50));
				SET_NEEDSREFRESH(0);
 8012cfa:	4b45      	ldr	r3, [pc, #276]	; (8012e10 <ihm_runtick_normal+0x1a8>)
 8012cfc:	781b      	ldrb	r3, [r3, #0]
 8012cfe:	f043 0301 	orr.w	r3, r3, #1
 8012d02:	b2da      	uxtb	r2, r3
 8012d04:	4b42      	ldr	r3, [pc, #264]	; (8012e10 <ihm_runtick_normal+0x1a8>)
 8012d06:	701a      	strb	r2, [r3, #0]
			}
			if (drive_mode[i]) {	// TODO refactor drive_mode
 8012d08:	4a45      	ldr	r2, [pc, #276]	; (8012e20 <ihm_runtick_normal+0x1b8>)
 8012d0a:	6a3b      	ldr	r3, [r7, #32]
 8012d0c:	4413      	add	r3, r2
 8012d0e:	781b      	ldrb	r3, [r3, #0]
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d037      	beq.n	8012d84 <ihm_runtick_normal+0x11c>
				msg_64_t m;
				m.from = MA_UI(i);
 8012d14:	6a3b      	ldr	r3, [r7, #32]
 8012d16:	b25b      	sxtb	r3, r3
 8012d18:	f003 031f 	and.w	r3, r3, #31
 8012d1c:	b25b      	sxtb	r3, r3
 8012d1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012d22:	b25b      	sxtb	r3, r3
 8012d24:	b2db      	uxtb	r3, r3
 8012d26:	727b      	strb	r3, [r7, #9]
				m.to = MA_CONTROL_T(i);
 8012d28:	6a3b      	ldr	r3, [r7, #32]
 8012d2a:	b25b      	sxtb	r3, r3
 8012d2c:	f003 0307 	and.w	r3, r3, #7
 8012d30:	b25b      	sxtb	r3, r3
 8012d32:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8012d36:	b25b      	sxtb	r3, r3
 8012d38:	b2db      	uxtb	r3, r3
 8012d3a:	723b      	strb	r3, [r7, #8]
				m.cmd = CMD_MDRIVE_SPEED_DIR;
 8012d3c:	2317      	movs	r3, #23
 8012d3e:	72bb      	strb	r3, [r7, #10]
				m.v1u = abs(rot_position[i]);
 8012d40:	4a35      	ldr	r2, [pc, #212]	; (8012e18 <ihm_runtick_normal+0x1b0>)
 8012d42:	6a3b      	ldr	r3, [r7, #32]
 8012d44:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	bfb8      	it	lt
 8012d4c:	425b      	neglt	r3, r3
 8012d4e:	b29b      	uxth	r3, r3
 8012d50:	81bb      	strh	r3, [r7, #12]
				m.v2 = SIGNOF0(rot_position[i]);
 8012d52:	4a31      	ldr	r2, [pc, #196]	; (8012e18 <ihm_runtick_normal+0x1b0>)
 8012d54:	6a3b      	ldr	r3, [r7, #32]
 8012d56:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	db0a      	blt.n	8012d74 <ihm_runtick_normal+0x10c>
 8012d5e:	4a2e      	ldr	r2, [pc, #184]	; (8012e18 <ihm_runtick_normal+0x1b0>)
 8012d60:	6a3b      	ldr	r3, [r7, #32]
 8012d62:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	bfcc      	ite	gt
 8012d6a:	2301      	movgt	r3, #1
 8012d6c:	2300      	movle	r3, #0
 8012d6e:	b2db      	uxtb	r3, r3
 8012d70:	b21b      	sxth	r3, r3
 8012d72:	e001      	b.n	8012d78 <ihm_runtick_normal+0x110>
 8012d74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012d78:	81fb      	strh	r3, [r7, #14]
				// TODO handle dir
				mqf_write_from_ui(&m);
 8012d7a:	f107 0308 	add.w	r3, r7, #8
 8012d7e:	4618      	mov	r0, r3
 8012d80:	f7ff fe5e 	bl	8012a40 <mqf_write_from_ui>
	for (int i=0; i<MAX_ROTARY; i++) {
 8012d84:	6a3b      	ldr	r3, [r7, #32]
 8012d86:	3301      	adds	r3, #1
 8012d88:	623b      	str	r3, [r7, #32]
 8012d8a:	6a3b      	ldr	r3, [r7, #32]
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	dd95      	ble.n	8012cbc <ihm_runtick_normal+0x54>
	}

	// scan buttons ------------------

	// mode test hook
	if (ihm_dispmode==mode_ina_detect) {
 8012d90:	4b22      	ldr	r3, [pc, #136]	; (8012e1c <ihm_runtick_normal+0x1b4>)
 8012d92:	781b      	ldrb	r3, [r3, #0]
 8012d94:	2b01      	cmp	r3, #1
 8012d96:	d119      	bne.n	8012dcc <ihm_runtick_normal+0x164>
		// ina3221 detection
		for (int i=0; i<4; i++) {
 8012d98:	2300      	movs	r3, #0
 8012d9a:	61fb      	str	r3, [r7, #28]
 8012d9c:	e00c      	b.n	8012db8 <ihm_runtick_normal+0x150>
			ihm_setvar(0, i, ina3221_devices[i]);
 8012d9e:	4a21      	ldr	r2, [pc, #132]	; (8012e24 <ihm_runtick_normal+0x1bc>)
 8012da0:	69fb      	ldr	r3, [r7, #28]
 8012da2:	4413      	add	r3, r2
 8012da4:	781b      	ldrb	r3, [r3, #0]
 8012da6:	b29b      	uxth	r3, r3
 8012da8:	461a      	mov	r2, r3
 8012daa:	69f9      	ldr	r1, [r7, #28]
 8012dac:	2000      	movs	r0, #0
 8012dae:	f7ff f85d 	bl	8011e6c <ihm_setvar>
		for (int i=0; i<4; i++) {
 8012db2:	69fb      	ldr	r3, [r7, #28]
 8012db4:	3301      	adds	r3, #1
 8012db6:	61fb      	str	r3, [r7, #28]
 8012db8:	69fb      	ldr	r3, [r7, #28]
 8012dba:	2b03      	cmp	r3, #3
 8012dbc:	ddef      	ble.n	8012d9e <ihm_runtick_normal+0x136>
		}
		SET_NEEDSREFRESH(0);
 8012dbe:	4b14      	ldr	r3, [pc, #80]	; (8012e10 <ihm_runtick_normal+0x1a8>)
 8012dc0:	781b      	ldrb	r3, [r3, #0]
 8012dc2:	f043 0301 	orr.w	r3, r3, #1
 8012dc6:	b2da      	uxtb	r2, r3
 8012dc8:	4b11      	ldr	r3, [pc, #68]	; (8012e10 <ihm_runtick_normal+0x1a8>)
 8012dca:	701a      	strb	r2, [r3, #0]
	}
	// process messages --------------
	ui_process_msg();
 8012dcc:	f000 f82c 	bl	8012e28 <ui_process_msg>

	// update displays ---------------
	for (int i=0; i<MAX_DISP; i++) {
 8012dd0:	2300      	movs	r3, #0
 8012dd2:	61bb      	str	r3, [r7, #24]
 8012dd4:	e010      	b.n	8012df8 <ihm_runtick_normal+0x190>
		if (NEEDSREFRESH(i)) {
 8012dd6:	4b0e      	ldr	r3, [pc, #56]	; (8012e10 <ihm_runtick_normal+0x1a8>)
 8012dd8:	781b      	ldrb	r3, [r3, #0]
 8012dda:	461a      	mov	r2, r3
 8012ddc:	69bb      	ldr	r3, [r7, #24]
 8012dde:	fa42 f303 	asr.w	r3, r2, r3
 8012de2:	f003 0301 	and.w	r3, r3, #1
 8012de6:	b2db      	uxtb	r3, r3
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d002      	beq.n	8012df2 <ihm_runtick_normal+0x18a>
			disp_layout(i);
 8012dec:	69b8      	ldr	r0, [r7, #24]
 8012dee:	f7ff f87b 	bl	8011ee8 <disp_layout>
	for (int i=0; i<MAX_DISP; i++) {
 8012df2:	69bb      	ldr	r3, [r7, #24]
 8012df4:	3301      	adds	r3, #1
 8012df6:	61bb      	str	r3, [r7, #24]
 8012df8:	69bb      	ldr	r3, [r7, #24]
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	ddeb      	ble.n	8012dd6 <ihm_runtick_normal+0x16e>
		}
	}
}
 8012dfe:	bf00      	nop
 8012e00:	3728      	adds	r7, #40	; 0x28
 8012e02:	46bd      	mov	sp, r7
 8012e04:	bd80      	pop	{r7, pc}
 8012e06:	bf00      	nop
 8012e08:	08019e60 	.word	0x08019e60
 8012e0c:	08019e68 	.word	0x08019e68
 8012e10:	20005254 	.word	0x20005254
 8012e14:	20005dc8 	.word	0x20005dc8
 8012e18:	20000220 	.word	0x20000220
 8012e1c:	20005256 	.word	0x20005256
 8012e20:	20000224 	.word	0x20000224
 8012e24:	200051d0 	.word	0x200051d0

08012e28 <ui_process_msg>:


static void ui_process_msg(void)
{
 8012e28:	b580      	push	{r7, lr}
 8012e2a:	b088      	sub	sp, #32
 8012e2c:	af00      	add	r7, sp, #0
	for (;;) {
		msg_64_t m;
		int rc = mqf_read_to_ui(&m);
 8012e2e:	463b      	mov	r3, r7
 8012e30:	4618      	mov	r0, r3
 8012e32:	f7ff fdf5 	bl	8012a20 <mqf_read_to_ui>
 8012e36:	61b8      	str	r0, [r7, #24]
		if (rc) break;
 8012e38:	69bb      	ldr	r3, [r7, #24]
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	f040 810d 	bne.w	801305a <ui_process_msg+0x232>

		if (m.cmd == CMD_TRTSPD_NOTIF) {
 8012e40:	78bb      	ldrb	r3, [r7, #2]
 8012e42:	2b24      	cmp	r3, #36	; 0x24
 8012e44:	d105      	bne.n	8012e52 <ui_process_msg+0x2a>
			itm_debug1(DBG_UI, "hop", 0);
 8012e46:	2200      	movs	r2, #0
 8012e48:	498d      	ldr	r1, [pc, #564]	; (8013080 <ui_process_msg+0x258>)
 8012e4a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8012e4e:	f7ff fdb1 	bl	80129b4 <itm_debug1>
		}

		switch(m.cmd) {
 8012e52:	78bb      	ldrb	r3, [r7, #2]
 8012e54:	2b25      	cmp	r3, #37	; 0x25
 8012e56:	f000 8102 	beq.w	801305e <ui_process_msg+0x236>
 8012e5a:	2bfc      	cmp	r3, #252	; 0xfc
 8012e5c:	d00a      	beq.n	8012e74 <ui_process_msg+0x4c>
 8012e5e:	2b01      	cmp	r3, #1
 8012e60:	f000 80ff 	beq.w	8013062 <ui_process_msg+0x23a>
		default:
			break;
 8012e64:	bf00      	nop
        		SET_NEEDSREFRESH(0);
        	}
        	return;
        	break;
        }
		if (IS_CONTROL_T(m.from)) {
 8012e66:	787b      	ldrb	r3, [r7, #1]
 8012e68:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8012e6c:	2bd0      	cmp	r3, #208	; 0xd0
 8012e6e:	f040 80a1 	bne.w	8012fb4 <ui_process_msg+0x18c>
 8012e72:	e004      	b.n	8012e7e <ui_process_msg+0x56>
            run_mode = m.v1u;
 8012e74:	88bb      	ldrh	r3, [r7, #4]
 8012e76:	b2da      	uxtb	r2, r3
 8012e78:	4b82      	ldr	r3, [pc, #520]	; (8013084 <ui_process_msg+0x25c>)
 8012e7a:	701a      	strb	r2, [r3, #0]
            return;
 8012e7c:	e0fc      	b.n	8013078 <ui_process_msg+0x250>
			int trnum = m.from & 0x07;
 8012e7e:	787b      	ldrb	r3, [r7, #1]
 8012e80:	f003 0307 	and.w	r3, r3, #7
 8012e84:	617b      	str	r3, [r7, #20]
			if (trnum != 0) break; // TODO
 8012e86:	697b      	ldr	r3, [r7, #20]
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	f040 80ec 	bne.w	8013066 <ui_process_msg+0x23e>
			switch (m.cmd) {
 8012e8e:	78bb      	ldrb	r3, [r7, #2]
 8012e90:	2b23      	cmp	r3, #35	; 0x23
 8012e92:	d03f      	beq.n	8012f14 <ui_process_msg+0xec>
 8012e94:	2b23      	cmp	r3, #35	; 0x23
 8012e96:	dc04      	bgt.n	8012ea2 <ui_process_msg+0x7a>
 8012e98:	2b21      	cmp	r3, #33	; 0x21
 8012e9a:	d051      	beq.n	8012f40 <ui_process_msg+0x118>
 8012e9c:	2b22      	cmp	r3, #34	; 0x22
 8012e9e:	d008      	beq.n	8012eb2 <ui_process_msg+0x8a>
 8012ea0:	e07f      	b.n	8012fa2 <ui_process_msg+0x17a>
 8012ea2:	2b26      	cmp	r3, #38	; 0x26
 8012ea4:	d068      	beq.n	8012f78 <ui_process_msg+0x150>
 8012ea6:	2ba1      	cmp	r3, #161	; 0xa1
 8012ea8:	f000 8086 	beq.w	8012fb8 <ui_process_msg+0x190>
 8012eac:	2b24      	cmp	r3, #36	; 0x24
 8012eae:	d00d      	beq.n	8012ecc <ui_process_msg+0xa4>
 8012eb0:	e077      	b.n	8012fa2 <ui_process_msg+0x17a>
			case CMD_TRSTATUS_NOTIF:
				// unused
				// TODO trnum -> display num
				if (ihm_dispmode == mode_auto) {
 8012eb2:	4b75      	ldr	r3, [pc, #468]	; (8013088 <ui_process_msg+0x260>)
 8012eb4:	781b      	ldrb	r3, [r3, #0]
 8012eb6:	2b04      	cmp	r3, #4
 8012eb8:	f040 80d7 	bne.w	801306a <ui_process_msg+0x242>
					//TODO
					//ihm_setvar(0, 2, m.v1u);
					SET_NEEDSREFRESH(0);
 8012ebc:	4b73      	ldr	r3, [pc, #460]	; (801308c <ui_process_msg+0x264>)
 8012ebe:	781b      	ldrb	r3, [r3, #0]
 8012ec0:	f043 0301 	orr.w	r3, r3, #1
 8012ec4:	b2da      	uxtb	r2, r3
 8012ec6:	4b71      	ldr	r3, [pc, #452]	; (801308c <ui_process_msg+0x264>)
 8012ec8:	701a      	strb	r2, [r3, #0]
				}
				return;
 8012eca:	e0ce      	b.n	801306a <ui_process_msg+0x242>
				break;
			case CMD_TRTSPD_NOTIF:
				itm_debug2(DBG_UI|DBG_CTRL, "rx tspd notif", trnum, m.v1u);
 8012ecc:	88bb      	ldrh	r3, [r7, #4]
 8012ece:	697a      	ldr	r2, [r7, #20]
 8012ed0:	496f      	ldr	r1, [pc, #444]	; (8013090 <ui_process_msg+0x268>)
 8012ed2:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8012ed6:	f7ff fd87 	bl	80129e8 <itm_debug2>
				// TODO trnum -> display num
				if (!NOTIF_VOFF && ((ihm_dispmode == mode_manual) || (ihm_dispmode == mode_auto))) {
 8012eda:	4b6b      	ldr	r3, [pc, #428]	; (8013088 <ui_process_msg+0x260>)
 8012edc:	781b      	ldrb	r3, [r3, #0]
 8012ede:	2b03      	cmp	r3, #3
 8012ee0:	d004      	beq.n	8012eec <ui_process_msg+0xc4>
 8012ee2:	4b69      	ldr	r3, [pc, #420]	; (8013088 <ui_process_msg+0x260>)
 8012ee4:	781b      	ldrb	r3, [r3, #0]
 8012ee6:	2b04      	cmp	r3, #4
 8012ee8:	f040 80c1 	bne.w	801306e <ui_process_msg+0x246>
					ihm_setvar(0, 2, m.v2 * m.v1u);
 8012eec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012ef0:	b29a      	uxth	r2, r3
 8012ef2:	88bb      	ldrh	r3, [r7, #4]
 8012ef4:	fb12 f303 	smulbb	r3, r2, r3
 8012ef8:	b29b      	uxth	r3, r3
 8012efa:	461a      	mov	r2, r3
 8012efc:	2102      	movs	r1, #2
 8012efe:	2000      	movs	r0, #0
 8012f00:	f7fe ffb4 	bl	8011e6c <ihm_setvar>
					SET_NEEDSREFRESH(0);
 8012f04:	4b61      	ldr	r3, [pc, #388]	; (801308c <ui_process_msg+0x264>)
 8012f06:	781b      	ldrb	r3, [r3, #0]
 8012f08:	f043 0301 	orr.w	r3, r3, #1
 8012f0c:	b2da      	uxtb	r2, r3
 8012f0e:	4b5f      	ldr	r3, [pc, #380]	; (801308c <ui_process_msg+0x264>)
 8012f10:	701a      	strb	r2, [r3, #0]
				}
				return;
 8012f12:	e0ac      	b.n	801306e <ui_process_msg+0x246>
				break;

			case CMD_TRDIR_NOTIF:
				if (!is_special_dispmode()) {
 8012f14:	f7ff fe70 	bl	8012bf8 <is_special_dispmode>
 8012f18:	4603      	mov	r3, r0
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	f040 80a9 	bne.w	8013072 <ui_process_msg+0x24a>
					ihm_setvar(0, 4, m.v1);
 8012f20:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012f24:	b29b      	uxth	r3, r3
 8012f26:	461a      	mov	r2, r3
 8012f28:	2104      	movs	r1, #4
 8012f2a:	2000      	movs	r0, #0
 8012f2c:	f7fe ff9e 	bl	8011e6c <ihm_setvar>
					SET_NEEDSREFRESH(0);
 8012f30:	4b56      	ldr	r3, [pc, #344]	; (801308c <ui_process_msg+0x264>)
 8012f32:	781b      	ldrb	r3, [r3, #0]
 8012f34:	f043 0301 	orr.w	r3, r3, #1
 8012f38:	b2da      	uxtb	r2, r3
 8012f3a:	4b54      	ldr	r3, [pc, #336]	; (801308c <ui_process_msg+0x264>)
 8012f3c:	701a      	strb	r2, [r3, #0]
				}
				return;
 8012f3e:	e098      	b.n	8013072 <ui_process_msg+0x24a>
				break;
			case CMD_TRMODE_NOTIF:
				// TODO
				if (!is_special_dispmode()) {
 8012f40:	f7ff fe5a 	bl	8012bf8 <is_special_dispmode>
 8012f44:	4603      	mov	r3, r0
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	d114      	bne.n	8012f74 <ui_process_msg+0x14c>
					train_mode_t cm = (train_mode_t) m.v1u;
 8012f4a:	88bb      	ldrh	r3, [r7, #4]
 8012f4c:	74fb      	strb	r3, [r7, #19]
					switch (cm) {
 8012f4e:	7cfb      	ldrb	r3, [r7, #19]
 8012f50:	2b01      	cmp	r3, #1
 8012f52:	db03      	blt.n	8012f5c <ui_process_msg+0x134>
 8012f54:	2b02      	cmp	r3, #2
 8012f56:	dd05      	ble.n	8012f64 <ui_process_msg+0x13c>
 8012f58:	2b03      	cmp	r3, #3
 8012f5a:	d007      	beq.n	8012f6c <ui_process_msg+0x144>
					default:
					case train_notrunning:
						set_dispmode(mode_init);
 8012f5c:	2000      	movs	r0, #0
 8012f5e:	f7ff fe6d 	bl	8012c3c <set_dispmode>
						break;
 8012f62:	e008      	b.n	8012f76 <ui_process_msg+0x14e>
					case train_manual:
					case train_fullmanual:
						set_dispmode(mode_manual);
 8012f64:	2003      	movs	r0, #3
 8012f66:	f7ff fe69 	bl	8012c3c <set_dispmode>
						break;
 8012f6a:	e004      	b.n	8012f76 <ui_process_msg+0x14e>
					case train_auto:
						set_dispmode(mode_auto);
 8012f6c:	2004      	movs	r0, #4
 8012f6e:	f7ff fe65 	bl	8012c3c <set_dispmode>
						break;
 8012f72:	e000      	b.n	8012f76 <ui_process_msg+0x14e>
					}
				}
 8012f74:	bf00      	nop
				return;
 8012f76:	e07f      	b.n	8013078 <ui_process_msg+0x250>
				break;
			case CMD_TRSTATE_NOTIF:
				if (!is_special_dispmode()) {
 8012f78:	f7ff fe3e 	bl	8012bf8 <is_special_dispmode>
 8012f7c:	4603      	mov	r3, r0
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	d179      	bne.n	8013076 <ui_process_msg+0x24e>
					ihm_setvar(0, 3, 10+m.v1u);
 8012f82:	88bb      	ldrh	r3, [r7, #4]
 8012f84:	330a      	adds	r3, #10
 8012f86:	b29b      	uxth	r3, r3
 8012f88:	461a      	mov	r2, r3
 8012f8a:	2103      	movs	r1, #3
 8012f8c:	2000      	movs	r0, #0
 8012f8e:	f7fe ff6d 	bl	8011e6c <ihm_setvar>
					SET_NEEDSREFRESH(0);
 8012f92:	4b3e      	ldr	r3, [pc, #248]	; (801308c <ui_process_msg+0x264>)
 8012f94:	781b      	ldrb	r3, [r3, #0]
 8012f96:	f043 0301 	orr.w	r3, r3, #1
 8012f9a:	b2da      	uxtb	r2, r3
 8012f9c:	4b3b      	ldr	r3, [pc, #236]	; (801308c <ui_process_msg+0x264>)
 8012f9e:	701a      	strb	r2, [r3, #0]
				}
				return;
 8012fa0:	e069      	b.n	8013076 <ui_process_msg+0x24e>
				break;
			case CMD_UI_MSG:
				break; // see below
			default:
				itm_debug1(DBG_UI, "unk ctl", m.cmd);
 8012fa2:	78bb      	ldrb	r3, [r7, #2]
 8012fa4:	461a      	mov	r2, r3
 8012fa6:	493b      	ldr	r1, [pc, #236]	; (8013094 <ui_process_msg+0x26c>)
 8012fa8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8012fac:	f7ff fd02 	bl	80129b4 <itm_debug1>
				return;
 8012fb0:	bf00      	nop
 8012fb2:	e061      	b.n	8013078 <ui_process_msg+0x250>
				break;
			}
		}
 8012fb4:	bf00      	nop
 8012fb6:	e000      	b.n	8012fba <ui_process_msg+0x192>
				break; // see below
 8012fb8:	bf00      	nop
		if (IS_UI(m.to)) {
 8012fba:	783b      	ldrb	r3, [r7, #0]
 8012fbc:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8012fc0:	2b80      	cmp	r3, #128	; 0x80
 8012fc2:	d13f      	bne.n	8013044 <ui_process_msg+0x21c>
			int dn = m.to & 0x1F;
 8012fc4:	783b      	ldrb	r3, [r7, #0]
 8012fc6:	f003 031f 	and.w	r3, r3, #31
 8012fca:	60fb      	str	r3, [r7, #12]
			if (dn != 1) {
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	2b01      	cmp	r3, #1
 8012fd0:	d006      	beq.n	8012fe0 <ui_process_msg+0x1b8>
				itm_debug1(DBG_UI, "?dn", dn);
 8012fd2:	68fa      	ldr	r2, [r7, #12]
 8012fd4:	4930      	ldr	r1, [pc, #192]	; (8013098 <ui_process_msg+0x270>)
 8012fd6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8012fda:	f7ff fceb 	bl	80129b4 <itm_debug1>
 8012fde:	e726      	b.n	8012e2e <ui_process_msg+0x6>
				continue;
			}
			switch (m.cmd) {
 8012fe0:	78bb      	ldrb	r3, [r7, #2]
 8012fe2:	2b20      	cmp	r3, #32
 8012fe4:	d002      	beq.n	8012fec <ui_process_msg+0x1c4>
 8012fe6:	2ba1      	cmp	r3, #161	; 0xa1
 8012fe8:	d033      	beq.n	8013052 <ui_process_msg+0x22a>
 8012fea:	e022      	b.n	8013032 <ui_process_msg+0x20a>
			case CMD_UI_MSG:
				//ui_msg5(dn, (char *) m.rbytes+1);
				break;
			case CMD_INA3221_REPORT:
				if (ihm_dispmode == mode_ina_val) {
 8012fec:	4b26      	ldr	r3, [pc, #152]	; (8013088 <ui_process_msg+0x260>)
 8012fee:	781b      	ldrb	r3, [r3, #0]
 8012ff0:	2b02      	cmp	r3, #2
 8012ff2:	d130      	bne.n	8013056 <ui_process_msg+0x22e>
					int16_t *values = (int16_t *) m.v32u;
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	60bb      	str	r3, [r7, #8]
					for (int i =0; i<12; i++) {
 8012ff8:	2300      	movs	r3, #0
 8012ffa:	61fb      	str	r3, [r7, #28]
 8012ffc:	e00e      	b.n	801301c <ui_process_msg+0x1f4>
						ihm_setvar(0, i, values[i]);
 8012ffe:	69fb      	ldr	r3, [r7, #28]
 8013000:	005b      	lsls	r3, r3, #1
 8013002:	68ba      	ldr	r2, [r7, #8]
 8013004:	4413      	add	r3, r2
 8013006:	f9b3 3000 	ldrsh.w	r3, [r3]
 801300a:	b29b      	uxth	r3, r3
 801300c:	461a      	mov	r2, r3
 801300e:	69f9      	ldr	r1, [r7, #28]
 8013010:	2000      	movs	r0, #0
 8013012:	f7fe ff2b 	bl	8011e6c <ihm_setvar>
					for (int i =0; i<12; i++) {
 8013016:	69fb      	ldr	r3, [r7, #28]
 8013018:	3301      	adds	r3, #1
 801301a:	61fb      	str	r3, [r7, #28]
 801301c:	69fb      	ldr	r3, [r7, #28]
 801301e:	2b0b      	cmp	r3, #11
 8013020:	dded      	ble.n	8012ffe <ui_process_msg+0x1d6>
					}
					SET_NEEDSREFRESH(0);
 8013022:	4b1a      	ldr	r3, [pc, #104]	; (801308c <ui_process_msg+0x264>)
 8013024:	781b      	ldrb	r3, [r3, #0]
 8013026:	f043 0301 	orr.w	r3, r3, #1
 801302a:	b2da      	uxtb	r2, r3
 801302c:	4b17      	ldr	r3, [pc, #92]	; (801308c <ui_process_msg+0x264>)
 801302e:	701a      	strb	r2, [r3, #0]
				}
				break;
 8013030:	e011      	b.n	8013056 <ui_process_msg+0x22e>

			default:
				itm_debug1(DBG_UI, "cmd?", m.cmd);
 8013032:	78bb      	ldrb	r3, [r7, #2]
 8013034:	461a      	mov	r2, r3
 8013036:	4919      	ldr	r1, [pc, #100]	; (801309c <ui_process_msg+0x274>)
 8013038:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801303c:	f7ff fcba 	bl	80129b4 <itm_debug1>
				break;
 8013040:	bf00      	nop
 8013042:	e009      	b.n	8013058 <ui_process_msg+0x230>
			}
		} else {
			itm_debug1(DBG_UI, "non ui msg", 0);
 8013044:	2200      	movs	r2, #0
 8013046:	4916      	ldr	r1, [pc, #88]	; (80130a0 <ui_process_msg+0x278>)
 8013048:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801304c:	f7ff fcb2 	bl	80129b4 <itm_debug1>
 8013050:	e6ed      	b.n	8012e2e <ui_process_msg+0x6>
				break;
 8013052:	bf00      	nop
 8013054:	e6eb      	b.n	8012e2e <ui_process_msg+0x6>
				break;
 8013056:	bf00      	nop
	for (;;) {
 8013058:	e6e9      	b.n	8012e2e <ui_process_msg+0x6>
		if (rc) break;
 801305a:	bf00      	nop
 801305c:	e00c      	b.n	8013078 <ui_process_msg+0x250>
        	return;
 801305e:	bf00      	nop
 8013060:	e00a      	b.n	8013078 <ui_process_msg+0x250>
        	return;
 8013062:	bf00      	nop
 8013064:	e008      	b.n	8013078 <ui_process_msg+0x250>
			if (trnum != 0) break; // TODO
 8013066:	bf00      	nop
 8013068:	e006      	b.n	8013078 <ui_process_msg+0x250>
				return;
 801306a:	bf00      	nop
 801306c:	e004      	b.n	8013078 <ui_process_msg+0x250>
				return;
 801306e:	bf00      	nop
 8013070:	e002      	b.n	8013078 <ui_process_msg+0x250>
				return;
 8013072:	bf00      	nop
 8013074:	e000      	b.n	8013078 <ui_process_msg+0x250>
				return;
 8013076:	bf00      	nop
		}
	}
}
 8013078:	3720      	adds	r7, #32
 801307a:	46bd      	mov	sp, r7
 801307c:	bd80      	pop	{r7, pc}
 801307e:	bf00      	nop
 8013080:	08019e70 	.word	0x08019e70
 8013084:	20005255 	.word	0x20005255
 8013088:	20005256 	.word	0x20005256
 801308c:	20005254 	.word	0x20005254
 8013090:	08019e74 	.word	0x08019e74
 8013094:	08019e84 	.word	0x08019e84
 8013098:	08019e8c 	.word	0x08019e8c
 801309c:	08019e90 	.word	0x08019e90
 80130a0:	08019e98 	.word	0x08019e98

080130a4 <ui_process_msg_off>:
// ---------------------------------



static void ui_process_msg_off(void)
{
 80130a4:	b580      	push	{r7, lr}
 80130a6:	b084      	sub	sp, #16
 80130a8:	af00      	add	r7, sp, #0
	for (;;) {
		msg_64_t m;
		int rc = mqf_read_to_ui(&m);
 80130aa:	463b      	mov	r3, r7
 80130ac:	4618      	mov	r0, r3
 80130ae:	f7ff fcb7 	bl	8012a20 <mqf_read_to_ui>
 80130b2:	60f8      	str	r0, [r7, #12]
		if (rc) break;
 80130b4:	68fb      	ldr	r3, [r7, #12]
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	d109      	bne.n	80130ce <ui_process_msg_off+0x2a>

		switch(m.cmd) {
 80130ba:	78bb      	ldrb	r3, [r7, #2]
 80130bc:	2bfc      	cmp	r3, #252	; 0xfc
 80130be:	d000      	beq.n	80130c2 <ui_process_msg_off+0x1e>
		default:
			break;
 80130c0:	e004      	b.n	80130cc <ui_process_msg_off+0x28>
        case CMD_SETRUN_MODE:
            run_mode = m.v1u;
 80130c2:	88bb      	ldrh	r3, [r7, #4]
 80130c4:	b2da      	uxtb	r2, r3
 80130c6:	4b04      	ldr	r3, [pc, #16]	; (80130d8 <ui_process_msg_off+0x34>)
 80130c8:	701a      	strb	r2, [r3, #0]
 80130ca:	e001      	b.n	80130d0 <ui_process_msg_off+0x2c>
	for (;;) {
 80130cc:	e7ed      	b.n	80130aa <ui_process_msg_off+0x6>
		if (rc) break;
 80130ce:	bf00      	nop
            return;
            break;
		}
	}
}
 80130d0:	3710      	adds	r7, #16
 80130d2:	46bd      	mov	sp, r7
 80130d4:	bd80      	pop	{r7, pc}
 80130d6:	bf00      	nop
 80130d8:	20005255 	.word	0x20005255

080130dc <ihm_runtick_off>:

void ihm_runtick_off(int init)
{
 80130dc:	b580      	push	{r7, lr}
 80130de:	b084      	sub	sp, #16
 80130e0:	af00      	add	r7, sp, #0
 80130e2:	6078      	str	r0, [r7, #4]
	needsrefresh_mask = 0;
 80130e4:	4b20      	ldr	r3, [pc, #128]	; (8013168 <ihm_runtick_off+0x8c>)
 80130e6:	2200      	movs	r2, #0
 80130e8:	701a      	strb	r2, [r3, #0]

	if (init) {
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d01e      	beq.n	801312e <ihm_runtick_off+0x52>
		itm_debug1(DBG_UI, "UI init", 0);
 80130f0:	2200      	movs	r2, #0
 80130f2:	491e      	ldr	r1, [pc, #120]	; (801316c <ihm_runtick_off+0x90>)
 80130f4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80130f8:	f7ff fc5c 	bl	80129b4 <itm_debug1>
		ihm_setlayout(0, LAYOUT_OFF);
 80130fc:	2104      	movs	r1, #4
 80130fe:	2000      	movs	r0, #0
 8013100:	f7fe fe5e 	bl	8011dc0 <ihm_setlayout>
		for (int i = 0; i<DISP_MAX_REGS; i++) {
 8013104:	2300      	movs	r3, #0
 8013106:	60fb      	str	r3, [r7, #12]
 8013108:	e007      	b.n	801311a <ihm_runtick_off+0x3e>
			ihm_setvar(0, i, 0);
 801310a:	2200      	movs	r2, #0
 801310c:	68f9      	ldr	r1, [r7, #12]
 801310e:	2000      	movs	r0, #0
 8013110:	f7fe feac 	bl	8011e6c <ihm_setvar>
		for (int i = 0; i<DISP_MAX_REGS; i++) {
 8013114:	68fb      	ldr	r3, [r7, #12]
 8013116:	3301      	adds	r3, #1
 8013118:	60fb      	str	r3, [r7, #12]
 801311a:	68fb      	ldr	r3, [r7, #12]
 801311c:	2b0f      	cmp	r3, #15
 801311e:	ddf4      	ble.n	801310a <ihm_runtick_off+0x2e>
		}
		SET_NEEDSREFRESH(0);
 8013120:	4b11      	ldr	r3, [pc, #68]	; (8013168 <ihm_runtick_off+0x8c>)
 8013122:	781b      	ldrb	r3, [r3, #0]
 8013124:	f043 0301 	orr.w	r3, r3, #1
 8013128:	b2da      	uxtb	r2, r3
 801312a:	4b0f      	ldr	r3, [pc, #60]	; (8013168 <ihm_runtick_off+0x8c>)
 801312c:	701a      	strb	r2, [r3, #0]
	}
	// process messages --------------
	ui_process_msg_off();
 801312e:	f7ff ffb9 	bl	80130a4 <ui_process_msg_off>

	// update displays ---------------
	for (int i=0; i<MAX_DISP; i++) {
 8013132:	2300      	movs	r3, #0
 8013134:	60bb      	str	r3, [r7, #8]
 8013136:	e010      	b.n	801315a <ihm_runtick_off+0x7e>
		if (NEEDSREFRESH(i)) {
 8013138:	4b0b      	ldr	r3, [pc, #44]	; (8013168 <ihm_runtick_off+0x8c>)
 801313a:	781b      	ldrb	r3, [r3, #0]
 801313c:	461a      	mov	r2, r3
 801313e:	68bb      	ldr	r3, [r7, #8]
 8013140:	fa42 f303 	asr.w	r3, r2, r3
 8013144:	f003 0301 	and.w	r3, r3, #1
 8013148:	b2db      	uxtb	r3, r3
 801314a:	2b00      	cmp	r3, #0
 801314c:	d002      	beq.n	8013154 <ihm_runtick_off+0x78>
			disp_layout(i);
 801314e:	68b8      	ldr	r0, [r7, #8]
 8013150:	f7fe feca 	bl	8011ee8 <disp_layout>
	for (int i=0; i<MAX_DISP; i++) {
 8013154:	68bb      	ldr	r3, [r7, #8]
 8013156:	3301      	adds	r3, #1
 8013158:	60bb      	str	r3, [r7, #8]
 801315a:	68bb      	ldr	r3, [r7, #8]
 801315c:	2b00      	cmp	r3, #0
 801315e:	ddeb      	ble.n	8013138 <ihm_runtick_off+0x5c>
		}
	}
}
 8013160:	bf00      	nop
 8013162:	3710      	adds	r7, #16
 8013164:	46bd      	mov	sp, r7
 8013166:	bd80      	pop	{r7, pc}
 8013168:	20005254 	.word	0x20005254
 801316c:	08019e60 	.word	0x08019e60

08013170 <ihm_runtick_testcanton>:
// ---------------------------------
// run mode Cantontest
// ---------------------------------

static void ihm_runtick_testcanton(int f)
{
 8013170:	b580      	push	{r7, lr}
 8013172:	b082      	sub	sp, #8
 8013174:	af00      	add	r7, sp, #0
 8013176:	6078      	str	r0, [r7, #4]
	ihm_runtick_off(f);
 8013178:	6878      	ldr	r0, [r7, #4]
 801317a:	f7ff ffaf 	bl	80130dc <ihm_runtick_off>
}
 801317e:	bf00      	nop
 8013180:	3708      	adds	r7, #8
 8013182:	46bd      	mov	sp, r7
 8013184:	bd80      	pop	{r7, pc}
	...

08013188 <ihm_runtick_detect1>:
// ---------------------------------

static void ui_process_msg_d1(void);

static void ihm_runtick_detect1(int init)
{
 8013188:	b580      	push	{r7, lr}
 801318a:	b08a      	sub	sp, #40	; 0x28
 801318c:	af00      	add	r7, sp, #0
 801318e:	6078      	str	r0, [r7, #4]
	static int voltidx = 7;
	needsrefresh_mask = 0;
 8013190:	4b4f      	ldr	r3, [pc, #316]	; (80132d0 <ihm_runtick_detect1+0x148>)
 8013192:	2200      	movs	r2, #0
 8013194:	701a      	strb	r2, [r3, #0]

	if (init) {
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	2b00      	cmp	r3, #0
 801319a:	d049      	beq.n	8013230 <ihm_runtick_detect1+0xa8>
		voltidx = 7;
 801319c:	4b4d      	ldr	r3, [pc, #308]	; (80132d4 <ihm_runtick_detect1+0x14c>)
 801319e:	2207      	movs	r2, #7
 80131a0:	601a      	str	r2, [r3, #0]
		osDelay(500); // ugly : make sure other tasklet are ready. TODO : fix this
 80131a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80131a6:	f7f9 fe65 	bl	800ce74 <osDelay>
		itm_debug1(DBG_UI, "UI init", 0);
 80131aa:	2200      	movs	r2, #0
 80131ac:	494a      	ldr	r1, [pc, #296]	; (80132d8 <ihm_runtick_detect1+0x150>)
 80131ae:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80131b2:	f7ff fbff 	bl	80129b4 <itm_debug1>
		ihm_setlayout(0, LAYOUT_DETECT1);
 80131b6:	2105      	movs	r1, #5
 80131b8:	2000      	movs	r0, #0
 80131ba:	f7fe fe01 	bl	8011dc0 <ihm_setlayout>
		for (int i = 0; i<DISP_MAX_REGS; i++) {
 80131be:	2300      	movs	r3, #0
 80131c0:	627b      	str	r3, [r7, #36]	; 0x24
 80131c2:	e007      	b.n	80131d4 <ihm_runtick_detect1+0x4c>
			ihm_setvar(0, i, 0);
 80131c4:	2200      	movs	r2, #0
 80131c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80131c8:	2000      	movs	r0, #0
 80131ca:	f7fe fe4f 	bl	8011e6c <ihm_setvar>
		for (int i = 0; i<DISP_MAX_REGS; i++) {
 80131ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131d0:	3301      	adds	r3, #1
 80131d2:	627b      	str	r3, [r7, #36]	; 0x24
 80131d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131d6:	2b0f      	cmp	r3, #15
 80131d8:	ddf4      	ble.n	80131c4 <ihm_runtick_detect1+0x3c>
		}
		ihm_setvar(0, 9, voltidx);
 80131da:	4b3e      	ldr	r3, [pc, #248]	; (80132d4 <ihm_runtick_detect1+0x14c>)
 80131dc:	681b      	ldr	r3, [r3, #0]
 80131de:	b29b      	uxth	r3, r3
 80131e0:	461a      	mov	r2, r3
 80131e2:	2109      	movs	r1, #9
 80131e4:	2000      	movs	r0, #0
 80131e6:	f7fe fe41 	bl	8011e6c <ihm_setvar>
		SET_NEEDSREFRESH(0);
 80131ea:	4b39      	ldr	r3, [pc, #228]	; (80132d0 <ihm_runtick_detect1+0x148>)
 80131ec:	781b      	ldrb	r3, [r3, #0]
 80131ee:	f043 0301 	orr.w	r3, r3, #1
 80131f2:	b2da      	uxtb	r2, r3
 80131f4:	4b36      	ldr	r3, [pc, #216]	; (80132d0 <ihm_runtick_detect1+0x148>)
 80131f6:	701a      	strb	r2, [r3, #0]
		msg_64_t m;
		m.from = MA_UI(1);
 80131f8:	2381      	movs	r3, #129	; 0x81
 80131fa:	747b      	strb	r3, [r7, #17]
		m.to = MA_CANTON(0,1);
 80131fc:	2301      	movs	r3, #1
 80131fe:	743b      	strb	r3, [r7, #16]
		m.cmd = CMD_BEMF_ON;
 8013200:	2340      	movs	r3, #64	; 0x40
 8013202:	74bb      	strb	r3, [r7, #18]
		mqf_write_from_ui(&m);
 8013204:	f107 0310 	add.w	r3, r7, #16
 8013208:	4618      	mov	r0, r3
 801320a:	f7ff fc19 	bl	8012a40 <mqf_write_from_ui>

		m.from = MA_UI(1);
 801320e:	2381      	movs	r3, #129	; 0x81
 8013210:	747b      	strb	r3, [r7, #17]
		m.to = MA_CANTON(0,1);
 8013212:	2301      	movs	r3, #1
 8013214:	743b      	strb	r3, [r7, #16]
		m.cmd = CMD_SETVPWM;
 8013216:	2301      	movs	r3, #1
 8013218:	74bb      	strb	r3, [r7, #18]
		m.v1u = voltidx;
 801321a:	4b2e      	ldr	r3, [pc, #184]	; (80132d4 <ihm_runtick_detect1+0x14c>)
 801321c:	681b      	ldr	r3, [r3, #0]
 801321e:	b29b      	uxth	r3, r3
 8013220:	82bb      	strh	r3, [r7, #20]
		m.v2 = 0;
 8013222:	2300      	movs	r3, #0
 8013224:	82fb      	strh	r3, [r7, #22]
		mqf_write_from_ui(&m);
 8013226:	f107 0310 	add.w	r3, r7, #16
 801322a:	4618      	mov	r0, r3
 801322c:	f7ff fc08 	bl	8012a40 <mqf_write_from_ui>
	}
	// rotary encoder
	static  int16_t rotpos = 0x7FFF;
	int16_t p = get_srotary(&htim4);
 8013230:	482a      	ldr	r0, [pc, #168]	; (80132dc <ihm_runtick_detect1+0x154>)
 8013232:	f7ff fc15 	bl	8012a60 <get_srotary>
 8013236:	4603      	mov	r3, r0
 8013238:	83fb      	strh	r3, [r7, #30]
	if (p != rotpos) {
 801323a:	4b29      	ldr	r3, [pc, #164]	; (80132e0 <ihm_runtick_detect1+0x158>)
 801323c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013240:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8013244:	429a      	cmp	r2, r3
 8013246:	d025      	beq.n	8013294 <ihm_runtick_detect1+0x10c>
		// pos changed
		rotpos = p;
 8013248:	4a25      	ldr	r2, [pc, #148]	; (80132e0 <ihm_runtick_detect1+0x158>)
 801324a:	8bfb      	ldrh	r3, [r7, #30]
 801324c:	8013      	strh	r3, [r2, #0]
		ihm_setvar(0, 8, rotpos);
 801324e:	4b24      	ldr	r3, [pc, #144]	; (80132e0 <ihm_runtick_detect1+0x158>)
 8013250:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013254:	b29b      	uxth	r3, r3
 8013256:	461a      	mov	r2, r3
 8013258:	2108      	movs	r1, #8
 801325a:	2000      	movs	r0, #0
 801325c:	f7fe fe06 	bl	8011e6c <ihm_setvar>
		SET_NEEDSREFRESH(0);
 8013260:	4b1b      	ldr	r3, [pc, #108]	; (80132d0 <ihm_runtick_detect1+0x148>)
 8013262:	781b      	ldrb	r3, [r3, #0]
 8013264:	f043 0301 	orr.w	r3, r3, #1
 8013268:	b2da      	uxtb	r2, r3
 801326a:	4b19      	ldr	r3, [pc, #100]	; (80132d0 <ihm_runtick_detect1+0x148>)
 801326c:	701a      	strb	r2, [r3, #0]

		msg_64_t m;
		m.from = MA_UI(1);
 801326e:	2381      	movs	r3, #129	; 0x81
 8013270:	727b      	strb	r3, [r7, #9]
		m.to = MA_CANTON(0,1);
 8013272:	2301      	movs	r3, #1
 8013274:	723b      	strb	r3, [r7, #8]
		m.cmd = CMD_SETVPWM;
 8013276:	2301      	movs	r3, #1
 8013278:	72bb      	strb	r3, [r7, #10]
		m.v1u = voltidx;
 801327a:	4b16      	ldr	r3, [pc, #88]	; (80132d4 <ihm_runtick_detect1+0x14c>)
 801327c:	681b      	ldr	r3, [r3, #0]
 801327e:	b29b      	uxth	r3, r3
 8013280:	81bb      	strh	r3, [r7, #12]
		m.v2 = rotpos;
 8013282:	4b17      	ldr	r3, [pc, #92]	; (80132e0 <ihm_runtick_detect1+0x158>)
 8013284:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013288:	81fb      	strh	r3, [r7, #14]
		mqf_write_from_ui(&m);
 801328a:	f107 0308 	add.w	r3, r7, #8
 801328e:	4618      	mov	r0, r3
 8013290:	f7ff fbd6 	bl	8012a40 <mqf_write_from_ui>

	}
	// process messages --------------
	ui_process_msg_d1();
 8013294:	f000 f826 	bl	80132e4 <ui_process_msg_d1>

	// update displays ---------------
	for (int i=0; i<MAX_DISP; i++) {
 8013298:	2300      	movs	r3, #0
 801329a:	623b      	str	r3, [r7, #32]
 801329c:	e010      	b.n	80132c0 <ihm_runtick_detect1+0x138>
		if (NEEDSREFRESH(i)) {
 801329e:	4b0c      	ldr	r3, [pc, #48]	; (80132d0 <ihm_runtick_detect1+0x148>)
 80132a0:	781b      	ldrb	r3, [r3, #0]
 80132a2:	461a      	mov	r2, r3
 80132a4:	6a3b      	ldr	r3, [r7, #32]
 80132a6:	fa42 f303 	asr.w	r3, r2, r3
 80132aa:	f003 0301 	and.w	r3, r3, #1
 80132ae:	b2db      	uxtb	r3, r3
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d002      	beq.n	80132ba <ihm_runtick_detect1+0x132>
			disp_layout(i);
 80132b4:	6a38      	ldr	r0, [r7, #32]
 80132b6:	f7fe fe17 	bl	8011ee8 <disp_layout>
	for (int i=0; i<MAX_DISP; i++) {
 80132ba:	6a3b      	ldr	r3, [r7, #32]
 80132bc:	3301      	adds	r3, #1
 80132be:	623b      	str	r3, [r7, #32]
 80132c0:	6a3b      	ldr	r3, [r7, #32]
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	ddeb      	ble.n	801329e <ihm_runtick_detect1+0x116>
		}
	}
}
 80132c6:	bf00      	nop
 80132c8:	3728      	adds	r7, #40	; 0x28
 80132ca:	46bd      	mov	sp, r7
 80132cc:	bd80      	pop	{r7, pc}
 80132ce:	bf00      	nop
 80132d0:	20005254 	.word	0x20005254
 80132d4:	2000022c 	.word	0x2000022c
 80132d8:	08019e60 	.word	0x08019e60
 80132dc:	20005dc8 	.word	0x20005dc8
 80132e0:	20000230 	.word	0x20000230

080132e4 <ui_process_msg_d1>:



static void ui_process_msg_d1(void)
{
 80132e4:	b580      	push	{r7, lr}
 80132e6:	b084      	sub	sp, #16
 80132e8:	af00      	add	r7, sp, #0
	for (;;) {
		msg_64_t m;
		int rc = mqf_read_to_ui(&m);
 80132ea:	463b      	mov	r3, r7
 80132ec:	4618      	mov	r0, r3
 80132ee:	f7ff fb97 	bl	8012a20 <mqf_read_to_ui>
 80132f2:	60f8      	str	r0, [r7, #12]
		if (rc) break;
 80132f4:	68fb      	ldr	r3, [r7, #12]
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	d13c      	bne.n	8013374 <ui_process_msg_d1+0x90>

		switch(m.cmd) {
 80132fa:	78bb      	ldrb	r3, [r7, #2]
 80132fc:	2b27      	cmp	r3, #39	; 0x27
 80132fe:	d021      	beq.n	8013344 <ui_process_msg_d1+0x60>
 8013300:	2bfc      	cmp	r3, #252	; 0xfc
 8013302:	d002      	beq.n	801330a <ui_process_msg_d1+0x26>
 8013304:	2b03      	cmp	r3, #3
 8013306:	d005      	beq.n	8013314 <ui_process_msg_d1+0x30>
 8013308:	e02c      	b.n	8013364 <ui_process_msg_d1+0x80>

        case CMD_SETRUN_MODE:
            run_mode = m.v1u;
 801330a:	88bb      	ldrh	r3, [r7, #4]
 801330c:	b2da      	uxtb	r2, r3
 801330e:	4b1b      	ldr	r3, [pc, #108]	; (801337c <ui_process_msg_d1+0x98>)
 8013310:	701a      	strb	r2, [r3, #0]
 8013312:	e030      	b.n	8013376 <ui_process_msg_d1+0x92>
            return;
            break;


        case CMD_BEMF_NOTIF:
    		ihm_setvar(0, 5, m.v2); //Von
 8013314:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013318:	b29b      	uxth	r3, r3
 801331a:	461a      	mov	r2, r3
 801331c:	2105      	movs	r1, #5
 801331e:	2000      	movs	r0, #0
 8013320:	f7fe fda4 	bl	8011e6c <ihm_setvar>
    		ihm_setvar(0, 6, m.v1); //Voff
 8013324:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8013328:	b29b      	uxth	r3, r3
 801332a:	461a      	mov	r2, r3
 801332c:	2106      	movs	r1, #6
 801332e:	2000      	movs	r0, #0
 8013330:	f7fe fd9c 	bl	8011e6c <ihm_setvar>
    		SET_NEEDSREFRESH(0);
 8013334:	4b12      	ldr	r3, [pc, #72]	; (8013380 <ui_process_msg_d1+0x9c>)
 8013336:	781b      	ldrb	r3, [r3, #0]
 8013338:	f043 0301 	orr.w	r3, r3, #1
 801333c:	b2da      	uxtb	r2, r3
 801333e:	4b10      	ldr	r3, [pc, #64]	; (8013380 <ui_process_msg_d1+0x9c>)
 8013340:	701a      	strb	r2, [r3, #0]
    		break;
 8013342:	e016      	b.n	8013372 <ui_process_msg_d1+0x8e>
        case CMD_INA3221_VAL1:
        	ihm_setvar(0, 7, m.v1);
 8013344:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8013348:	b29b      	uxth	r3, r3
 801334a:	461a      	mov	r2, r3
 801334c:	2107      	movs	r1, #7
 801334e:	2000      	movs	r0, #0
 8013350:	f7fe fd8c 	bl	8011e6c <ihm_setvar>
        	SET_NEEDSREFRESH(0);
 8013354:	4b0a      	ldr	r3, [pc, #40]	; (8013380 <ui_process_msg_d1+0x9c>)
 8013356:	781b      	ldrb	r3, [r3, #0]
 8013358:	f043 0301 	orr.w	r3, r3, #1
 801335c:	b2da      	uxtb	r2, r3
 801335e:	4b08      	ldr	r3, [pc, #32]	; (8013380 <ui_process_msg_d1+0x9c>)
 8013360:	701a      	strb	r2, [r3, #0]
        	break;
 8013362:	e006      	b.n	8013372 <ui_process_msg_d1+0x8e>

        default:
        	itm_debug1(DBG_ERR|DBG_UI, "unhndld msg", m.cmd);
 8013364:	78bb      	ldrb	r3, [r7, #2]
 8013366:	461a      	mov	r2, r3
 8013368:	4906      	ldr	r1, [pc, #24]	; (8013384 <ui_process_msg_d1+0xa0>)
 801336a:	4807      	ldr	r0, [pc, #28]	; (8013388 <ui_process_msg_d1+0xa4>)
 801336c:	f7ff fb22 	bl	80129b4 <itm_debug1>
        	break;
 8013370:	bf00      	nop
	for (;;) {
 8013372:	e7ba      	b.n	80132ea <ui_process_msg_d1+0x6>
		if (rc) break;
 8013374:	bf00      	nop
		}
	}
}
 8013376:	3710      	adds	r7, #16
 8013378:	46bd      	mov	sp, r7
 801337a:	bd80      	pop	{r7, pc}
 801337c:	20005255 	.word	0x20005255
 8013380:	20005254 	.word	0x20005254
 8013384:	08019ea4 	.word	0x08019ea4
 8013388:	80000800 	.word	0x80000800

0801338c <ihm_runtick_detect>:
// ---------------------------------
// run mode detect
// ---------------------------------

static void ihm_runtick_detect(int f)
{
 801338c:	b580      	push	{r7, lr}
 801338e:	b082      	sub	sp, #8
 8013390:	af00      	add	r7, sp, #0
 8013392:	6078      	str	r0, [r7, #4]
	ihm_runtick_off(f);
 8013394:	6878      	ldr	r0, [r7, #4]
 8013396:	f7ff fea1 	bl	80130dc <ihm_runtick_off>
}
 801339a:	bf00      	nop
 801339c:	3708      	adds	r7, #8
 801339e:	46bd      	mov	sp, r7
 80133a0:	bd80      	pop	{r7, pc}
	...

080133a4 <itm_debug1>:
{
 80133a4:	b580      	push	{r7, lr}
 80133a6:	b086      	sub	sp, #24
 80133a8:	af02      	add	r7, sp, #8
 80133aa:	60f8      	str	r0, [r7, #12]
 80133ac:	60b9      	str	r1, [r7, #8]
 80133ae:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 80133b0:	4b08      	ldr	r3, [pc, #32]	; (80133d4 <itm_debug1+0x30>)
 80133b2:	681a      	ldr	r2, [r3, #0]
 80133b4:	68fb      	ldr	r3, [r7, #12]
 80133b6:	4013      	ands	r3, r2
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d007      	beq.n	80133cc <itm_debug1+0x28>
 80133bc:	2301      	movs	r3, #1
 80133be:	9300      	str	r3, [sp, #0]
 80133c0:	2300      	movs	r3, #0
 80133c2:	2200      	movs	r2, #0
 80133c4:	6879      	ldr	r1, [r7, #4]
 80133c6:	68b8      	ldr	r0, [r7, #8]
 80133c8:	f006 f8bc 	bl	8019544 <_itm_debug3>
}
 80133cc:	bf00      	nop
 80133ce:	3710      	adds	r7, #16
 80133d0:	46bd      	mov	sp, r7
 80133d2:	bd80      	pop	{r7, pc}
 80133d4:	20000610 	.word	0x20000610

080133d8 <itm_debug2>:
{
 80133d8:	b580      	push	{r7, lr}
 80133da:	b086      	sub	sp, #24
 80133dc:	af02      	add	r7, sp, #8
 80133de:	60f8      	str	r0, [r7, #12]
 80133e0:	60b9      	str	r1, [r7, #8]
 80133e2:	607a      	str	r2, [r7, #4]
 80133e4:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, 0, 2);
 80133e6:	4b09      	ldr	r3, [pc, #36]	; (801340c <itm_debug2+0x34>)
 80133e8:	681a      	ldr	r2, [r3, #0]
 80133ea:	68fb      	ldr	r3, [r7, #12]
 80133ec:	4013      	ands	r3, r2
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	d007      	beq.n	8013402 <itm_debug2+0x2a>
 80133f2:	2302      	movs	r3, #2
 80133f4:	9300      	str	r3, [sp, #0]
 80133f6:	2300      	movs	r3, #0
 80133f8:	683a      	ldr	r2, [r7, #0]
 80133fa:	6879      	ldr	r1, [r7, #4]
 80133fc:	68b8      	ldr	r0, [r7, #8]
 80133fe:	f006 f8a1 	bl	8019544 <_itm_debug3>
}
 8013402:	bf00      	nop
 8013404:	3710      	adds	r7, #16
 8013406:	46bd      	mov	sp, r7
 8013408:	bd80      	pop	{r7, pc}
 801340a:	bf00      	nop
 801340c:	20000610 	.word	0x20000610

08013410 <itm_debug3>:
{
 8013410:	b580      	push	{r7, lr}
 8013412:	b086      	sub	sp, #24
 8013414:	af02      	add	r7, sp, #8
 8013416:	60f8      	str	r0, [r7, #12]
 8013418:	60b9      	str	r1, [r7, #8]
 801341a:	607a      	str	r2, [r7, #4]
 801341c:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, v3, 3);
 801341e:	4b09      	ldr	r3, [pc, #36]	; (8013444 <itm_debug3+0x34>)
 8013420:	681a      	ldr	r2, [r3, #0]
 8013422:	68fb      	ldr	r3, [r7, #12]
 8013424:	4013      	ands	r3, r2
 8013426:	2b00      	cmp	r3, #0
 8013428:	d007      	beq.n	801343a <itm_debug3+0x2a>
 801342a:	2303      	movs	r3, #3
 801342c:	9300      	str	r3, [sp, #0]
 801342e:	69bb      	ldr	r3, [r7, #24]
 8013430:	683a      	ldr	r2, [r7, #0]
 8013432:	6879      	ldr	r1, [r7, #4]
 8013434:	68b8      	ldr	r0, [r7, #8]
 8013436:	f006 f885 	bl	8019544 <_itm_debug3>
}
 801343a:	bf00      	nop
 801343c:	3710      	adds	r7, #16
 801343e:	46bd      	mov	sp, r7
 8013440:	bd80      	pop	{r7, pc}
 8013442:	bf00      	nop
 8013444:	20000610 	.word	0x20000610

08013448 <mqf_read_to_ctrl>:
/* from upper */
#define CMD_SET_TARGET_SPEED 0x10
#define CMD_SET_C1_C2		 0x11


LFMQUEUE_DEF_H(to_ctrl, msg_64_t)
 8013448:	b580      	push	{r7, lr}
 801344a:	b082      	sub	sp, #8
 801344c:	af00      	add	r7, sp, #0
 801344e:	6078      	str	r0, [r7, #4]
 8013450:	6879      	ldr	r1, [r7, #4]
 8013452:	4804      	ldr	r0, [pc, #16]	; (8013464 <mqf_read_to_ctrl+0x1c>)
 8013454:	f006 f9f8 	bl	8019848 <mqf_read>
 8013458:	4603      	mov	r3, r0
 801345a:	4618      	mov	r0, r3
 801345c:	3708      	adds	r7, #8
 801345e:	46bd      	mov	sp, r7
 8013460:	bd80      	pop	{r7, pc}
 8013462:	bf00      	nop
 8013464:	2000059c 	.word	0x2000059c

08013468 <mqf_write_from_ctrl>:
LFMQUEUE_DEF_H(from_ctrl, msg_64_t)
 8013468:	b580      	push	{r7, lr}
 801346a:	b082      	sub	sp, #8
 801346c:	af00      	add	r7, sp, #0
 801346e:	6078      	str	r0, [r7, #4]
 8013470:	6879      	ldr	r1, [r7, #4]
 8013472:	4804      	ldr	r0, [pc, #16]	; (8013484 <mqf_write_from_ctrl+0x1c>)
 8013474:	f006 f96e 	bl	8019754 <mqf_write>
 8013478:	4603      	mov	r3, r0
 801347a:	4618      	mov	r0, r3
 801347c:	3708      	adds	r7, #8
 801347e:	46bd      	mov	sp, r7
 8013480:	bd80      	pop	{r7, pc}
 8013482:	bf00      	nop
 8013484:	200005a8 	.word	0x200005a8

08013488 <_sub_addr_to_sub_num>:
 l2r : (sw t 2) (blk 5.1) (blk 5.2)
 */
#include "../msg/trainmsg.h"

static inline int _sub_addr_to_sub_num(uint8_t addr, uint8_t sub)
{
 8013488:	b480      	push	{r7}
 801348a:	b085      	sub	sp, #20
 801348c:	af00      	add	r7, sp, #0
 801348e:	4603      	mov	r3, r0
 8013490:	460a      	mov	r2, r1
 8013492:	71fb      	strb	r3, [r7, #7]
 8013494:	4613      	mov	r3, r2
 8013496:	71bb      	strb	r3, [r7, #6]
    int brd = MA_2_BOARD(addr);
 8013498:	79fb      	ldrb	r3, [r7, #7]
 801349a:	10db      	asrs	r3, r3, #3
 801349c:	f003 0307 	and.w	r3, r3, #7
 80134a0:	60fb      	str	r3, [r7, #12]
    int n = brd * 12 + sub;
 80134a2:	68fa      	ldr	r2, [r7, #12]
 80134a4:	4613      	mov	r3, r2
 80134a6:	005b      	lsls	r3, r3, #1
 80134a8:	4413      	add	r3, r2
 80134aa:	009b      	lsls	r3, r3, #2
 80134ac:	461a      	mov	r2, r3
 80134ae:	79bb      	ldrb	r3, [r7, #6]
 80134b0:	4413      	add	r3, r2
 80134b2:	60bb      	str	r3, [r7, #8]
    return n;
 80134b4:	68bb      	ldr	r3, [r7, #8]
}
 80134b6:	4618      	mov	r0, r3
 80134b8:	3714      	adds	r7, #20
 80134ba:	46bd      	mov	sp, r7
 80134bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134c0:	4770      	bx	lr

080134c2 <_blk_addr_to_blk_num>:

static inline int _blk_addr_to_blk_num(uint8_t addr)
{
 80134c2:	b480      	push	{r7}
 80134c4:	b085      	sub	sp, #20
 80134c6:	af00      	add	r7, sp, #0
 80134c8:	4603      	mov	r3, r0
 80134ca:	71fb      	strb	r3, [r7, #7]
    int brd = MA_2_BOARD(addr);
 80134cc:	79fb      	ldrb	r3, [r7, #7]
 80134ce:	10db      	asrs	r3, r3, #3
 80134d0:	f003 0307 	and.w	r3, r3, #7
 80134d4:	60fb      	str	r3, [r7, #12]
    int nc = addr & 0x07;
 80134d6:	79fb      	ldrb	r3, [r7, #7]
 80134d8:	f003 0307 	and.w	r3, r3, #7
 80134dc:	60bb      	str	r3, [r7, #8]
    return brd*6+nc;
 80134de:	68fa      	ldr	r2, [r7, #12]
 80134e0:	4613      	mov	r3, r2
 80134e2:	005b      	lsls	r3, r3, #1
 80134e4:	4413      	add	r3, r2
 80134e6:	005b      	lsls	r3, r3, #1
 80134e8:	461a      	mov	r2, r3
 80134ea:	68bb      	ldr	r3, [r7, #8]
 80134ec:	4413      	add	r3, r2
}
 80134ee:	4618      	mov	r0, r3
 80134f0:	3714      	adds	r7, #20
 80134f2:	46bd      	mov	sp, r7
 80134f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134f8:	4770      	bx	lr
	...

080134fc <_blk_num_to_blk_addr>:
    int brd = subnum/12;
    return MA_CANTON(brd, 0);
}

static uint8_t _blk_num_to_blk_addr(int blknum)
{
 80134fc:	b480      	push	{r7}
 80134fe:	b085      	sub	sp, #20
 8013500:	af00      	add	r7, sp, #0
 8013502:	6078      	str	r0, [r7, #4]
	if (blknum == -1) return 0xFF;
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801350a:	d101      	bne.n	8013510 <_blk_num_to_blk_addr+0x14>
 801350c:	23ff      	movs	r3, #255	; 0xff
 801350e:	e020      	b.n	8013552 <_blk_num_to_blk_addr+0x56>
    int nc = blknum % 6;
 8013510:	687a      	ldr	r2, [r7, #4]
 8013512:	4b13      	ldr	r3, [pc, #76]	; (8013560 <_blk_num_to_blk_addr+0x64>)
 8013514:	fb83 3102 	smull	r3, r1, r3, r2
 8013518:	17d3      	asrs	r3, r2, #31
 801351a:	1ac9      	subs	r1, r1, r3
 801351c:	460b      	mov	r3, r1
 801351e:	005b      	lsls	r3, r3, #1
 8013520:	440b      	add	r3, r1
 8013522:	005b      	lsls	r3, r3, #1
 8013524:	1ad3      	subs	r3, r2, r3
 8013526:	60fb      	str	r3, [r7, #12]
    int brd = blknum/6;
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	4a0d      	ldr	r2, [pc, #52]	; (8013560 <_blk_num_to_blk_addr+0x64>)
 801352c:	fb82 1203 	smull	r1, r2, r2, r3
 8013530:	17db      	asrs	r3, r3, #31
 8013532:	1ad3      	subs	r3, r2, r3
 8013534:	60bb      	str	r3, [r7, #8]
    return MA_CANTON(brd, nc);
 8013536:	68bb      	ldr	r3, [r7, #8]
 8013538:	00db      	lsls	r3, r3, #3
 801353a:	b25b      	sxtb	r3, r3
 801353c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8013540:	b25a      	sxtb	r2, r3
 8013542:	68fb      	ldr	r3, [r7, #12]
 8013544:	b25b      	sxtb	r3, r3
 8013546:	f003 0307 	and.w	r3, r3, #7
 801354a:	b25b      	sxtb	r3, r3
 801354c:	4313      	orrs	r3, r2
 801354e:	b25b      	sxtb	r3, r3
 8013550:	b2db      	uxtb	r3, r3
}
 8013552:	4618      	mov	r0, r3
 8013554:	3714      	adds	r7, #20
 8013556:	46bd      	mov	sp, r7
 8013558:	f85d 7b04 	ldr.w	r7, [sp], #4
 801355c:	4770      	bx	lr
 801355e:	bf00      	nop
 8013560:	2aaaaaab 	.word	0x2aaaaaab

08013564 <blk_addr_for_sub_addr>:

void next_blocks_nums(int blknum, uint8_t left, int *pb1, int *pb2, int *t);
// ---------------------------------------------------------------------

static inline uint8_t blk_addr_for_sub_addr(uint8_t addr, uint8_t sub)
{
 8013564:	b580      	push	{r7, lr}
 8013566:	b084      	sub	sp, #16
 8013568:	af00      	add	r7, sp, #0
 801356a:	4603      	mov	r3, r0
 801356c:	460a      	mov	r2, r1
 801356e:	71fb      	strb	r3, [r7, #7]
 8013570:	4613      	mov	r3, r2
 8013572:	71bb      	strb	r3, [r7, #6]
    int n = _sub_addr_to_sub_num(addr, sub);
 8013574:	79ba      	ldrb	r2, [r7, #6]
 8013576:	79fb      	ldrb	r3, [r7, #7]
 8013578:	4611      	mov	r1, r2
 801357a:	4618      	mov	r0, r3
 801357c:	f7ff ff84 	bl	8013488 <_sub_addr_to_sub_num>
 8013580:	60f8      	str	r0, [r7, #12]
    n = _blk_num_for_sub_num(n);
 8013582:	68f8      	ldr	r0, [r7, #12]
 8013584:	f005 fe20 	bl	80191c8 <_blk_num_for_sub_num>
 8013588:	60f8      	str	r0, [r7, #12]
    return _blk_num_to_blk_addr(n);
 801358a:	68f8      	ldr	r0, [r7, #12]
 801358c:	f7ff ffb6 	bl	80134fc <_blk_num_to_blk_addr>
 8013590:	4603      	mov	r3, r0
}
 8013592:	4618      	mov	r0, r3
 8013594:	3710      	adds	r7, #16
 8013596:	46bd      	mov	sp, r7
 8013598:	bd80      	pop	{r7, pc}
	...

0801359c <fatal>:

static void ctrl_reset(void);


static void fatal(void)
{
 801359c:	b580      	push	{r7, lr}
 801359e:	af00      	add	r7, sp, #0
	itm_debug1(DBG_ERR, "fatal", 0);
 80135a0:	2200      	movs	r2, #0
 80135a2:	4905      	ldr	r1, [pc, #20]	; (80135b8 <fatal+0x1c>)
 80135a4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80135a8:	f7ff fefc 	bl	80133a4 <itm_debug1>
#ifdef TRAIN_SIMU
    abort();
#else
    for (;;) osDelay(1000);
 80135ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80135b0:	f7f9 fc60 	bl	800ce74 <osDelay>
 80135b4:	e7fa      	b.n	80135ac <fatal+0x10>
 80135b6:	bf00      	nop
 80135b8:	08019eb0 	.word	0x08019eb0

080135bc <ctrl_reset>:

static void check_behaviour(uint32_t tick);


static void ctrl_reset(void)
{
 80135bc:	b480      	push	{r7}
 80135be:	af00      	add	r7, sp, #0
	//TODO
}
 80135c0:	bf00      	nop
 80135c2:	46bd      	mov	sp, r7
 80135c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135c8:	4770      	bx	lr
	...

080135cc <set_state>:
// ----------------------------------------------------------------------------


static inline void set_state(int tidx, train_ctrl_t *tvar, train_state_t ns)
{
 80135cc:	b580      	push	{r7, lr}
 80135ce:	b086      	sub	sp, #24
 80135d0:	af00      	add	r7, sp, #0
 80135d2:	60f8      	str	r0, [r7, #12]
 80135d4:	60b9      	str	r1, [r7, #8]
 80135d6:	4613      	mov	r3, r2
 80135d8:	71fb      	strb	r3, [r7, #7]
	switch (ns) {
 80135da:	79fb      	ldrb	r3, [r7, #7]
 80135dc:	2b05      	cmp	r3, #5
 80135de:	d839      	bhi.n	8013654 <set_state+0x88>
 80135e0:	a201      	add	r2, pc, #4	; (adr r2, 80135e8 <set_state+0x1c>)
 80135e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80135e6:	bf00      	nop
 80135e8:	08013601 	.word	0x08013601
 80135ec:	0801360f 	.word	0x0801360f
 80135f0:	0801361d 	.word	0x0801361d
 80135f4:	0801362b 	.word	0x0801362b
 80135f8:	08013639 	.word	0x08013639
 80135fc:	08013647 	.word	0x08013647
	case train_off: 			itm_debug1(DBG_CTRL, "ST->OFF", tidx); break;
 8013600:	68fa      	ldr	r2, [r7, #12]
 8013602:	4927      	ldr	r1, [pc, #156]	; (80136a0 <set_state+0xd4>)
 8013604:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013608:	f7ff fecc 	bl	80133a4 <itm_debug1>
 801360c:	e02a      	b.n	8013664 <set_state+0x98>
	case train_running_c1: 		itm_debug1(DBG_CTRL, "ST->RC1", tidx); break;
 801360e:	68fa      	ldr	r2, [r7, #12]
 8013610:	4924      	ldr	r1, [pc, #144]	; (80136a4 <set_state+0xd8>)
 8013612:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013616:	f7ff fec5 	bl	80133a4 <itm_debug1>
 801361a:	e023      	b.n	8013664 <set_state+0x98>
	case train_running_c1c2: 	itm_debug1(DBG_CTRL, "ST->C1C2", tidx); break;
 801361c:	68fa      	ldr	r2, [r7, #12]
 801361e:	4922      	ldr	r1, [pc, #136]	; (80136a8 <set_state+0xdc>)
 8013620:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013624:	f7ff febe 	bl	80133a4 <itm_debug1>
 8013628:	e01c      	b.n	8013664 <set_state+0x98>
	case train_station:			itm_debug1(DBG_CTRL, "ST->STA", tidx); break;
 801362a:	68fa      	ldr	r2, [r7, #12]
 801362c:	491f      	ldr	r1, [pc, #124]	; (80136ac <set_state+0xe0>)
 801362e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013632:	f7ff feb7 	bl	80133a4 <itm_debug1>
 8013636:	e015      	b.n	8013664 <set_state+0x98>
	case train_blk_wait:	 	itm_debug1(DBG_CTRL, "ST->BLKW", tidx); break;
 8013638:	68fa      	ldr	r2, [r7, #12]
 801363a:	491d      	ldr	r1, [pc, #116]	; (80136b0 <set_state+0xe4>)
 801363c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013640:	f7ff feb0 	bl	80133a4 <itm_debug1>
 8013644:	e00e      	b.n	8013664 <set_state+0x98>
	case train_end_of_track:	itm_debug1(DBG_CTRL, "ST->EOT", tidx); break;
 8013646:	68fa      	ldr	r2, [r7, #12]
 8013648:	491a      	ldr	r1, [pc, #104]	; (80136b4 <set_state+0xe8>)
 801364a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 801364e:	f7ff fea9 	bl	80133a4 <itm_debug1>
 8013652:	e007      	b.n	8013664 <set_state+0x98>
	default: 					itm_debug2(DBG_CTRL, "ST->?", tidx, ns); break;
 8013654:	79fb      	ldrb	r3, [r7, #7]
 8013656:	68fa      	ldr	r2, [r7, #12]
 8013658:	4917      	ldr	r1, [pc, #92]	; (80136b8 <set_state+0xec>)
 801365a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 801365e:	f7ff febb 	bl	80133d8 <itm_debug2>
 8013662:	bf00      	nop
	}
	tvar->_state = ns;
 8013664:	68bb      	ldr	r3, [r7, #8]
 8013666:	79fa      	ldrb	r2, [r7, #7]
 8013668:	705a      	strb	r2, [r3, #1]
	// notif UI
	msg_64_t m;
	m.from = MA_CONTROL_T(tidx);
 801366a:	68fb      	ldr	r3, [r7, #12]
 801366c:	b25b      	sxtb	r3, r3
 801366e:	f003 0307 	and.w	r3, r3, #7
 8013672:	b25b      	sxtb	r3, r3
 8013674:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8013678:	b25b      	sxtb	r3, r3
 801367a:	b2db      	uxtb	r3, r3
 801367c:	747b      	strb	r3, [r7, #17]
	m.to = MA_UI(UISUB_TFT);
 801367e:	2381      	movs	r3, #129	; 0x81
 8013680:	743b      	strb	r3, [r7, #16]
	m.cmd = CMD_TRSTATE_NOTIF;
 8013682:	2326      	movs	r3, #38	; 0x26
 8013684:	74bb      	strb	r3, [r7, #18]
	m.v1u = ns;
 8013686:	79fb      	ldrb	r3, [r7, #7]
 8013688:	b29b      	uxth	r3, r3
 801368a:	82bb      	strh	r3, [r7, #20]
	mqf_write_from_ctrl(&m);
 801368c:	f107 0310 	add.w	r3, r7, #16
 8013690:	4618      	mov	r0, r3
 8013692:	f7ff fee9 	bl	8013468 <mqf_write_from_ctrl>
}
 8013696:	bf00      	nop
 8013698:	3718      	adds	r7, #24
 801369a:	46bd      	mov	sp, r7
 801369c:	bd80      	pop	{r7, pc}
 801369e:	bf00      	nop
 80136a0:	08019eb8 	.word	0x08019eb8
 80136a4:	08019ec0 	.word	0x08019ec0
 80136a8:	08019ec8 	.word	0x08019ec8
 80136ac:	08019ed4 	.word	0x08019ed4
 80136b0:	08019edc 	.word	0x08019edc
 80136b4:	08019ee8 	.word	0x08019ee8
 80136b8:	08019ef0 	.word	0x08019ef0

080136bc <ctrl_set_mode>:


static void ctrl_set_mode(int trnum, train_mode_t mode)
{
 80136bc:	b580      	push	{r7, lr}
 80136be:	b084      	sub	sp, #16
 80136c0:	af00      	add	r7, sp, #0
 80136c2:	6078      	str	r0, [r7, #4]
 80136c4:	460b      	mov	r3, r1
 80136c6:	70fb      	strb	r3, [r7, #3]
	itm_debug2(DBG_CTRL, "set mode", trnum, mode);
 80136c8:	78fb      	ldrb	r3, [r7, #3]
 80136ca:	687a      	ldr	r2, [r7, #4]
 80136cc:	4919      	ldr	r1, [pc, #100]	; (8013734 <ctrl_set_mode+0x78>)
 80136ce:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80136d2:	f7ff fe81 	bl	80133d8 <itm_debug2>
	if (trctl[trnum]._mode == mode) return;
 80136d6:	4918      	ldr	r1, [pc, #96]	; (8013738 <ctrl_set_mode+0x7c>)
 80136d8:	687a      	ldr	r2, [r7, #4]
 80136da:	4613      	mov	r3, r2
 80136dc:	005b      	lsls	r3, r3, #1
 80136de:	4413      	add	r3, r2
 80136e0:	00db      	lsls	r3, r3, #3
 80136e2:	440b      	add	r3, r1
 80136e4:	781b      	ldrb	r3, [r3, #0]
 80136e6:	78fa      	ldrb	r2, [r7, #3]
 80136e8:	429a      	cmp	r2, r3
 80136ea:	d01f      	beq.n	801372c <ctrl_set_mode+0x70>
	trctl[trnum]._mode = mode;
 80136ec:	4912      	ldr	r1, [pc, #72]	; (8013738 <ctrl_set_mode+0x7c>)
 80136ee:	687a      	ldr	r2, [r7, #4]
 80136f0:	4613      	mov	r3, r2
 80136f2:	005b      	lsls	r3, r3, #1
 80136f4:	4413      	add	r3, r2
 80136f6:	00db      	lsls	r3, r3, #3
 80136f8:	440b      	add	r3, r1
 80136fa:	78fa      	ldrb	r2, [r7, #3]
 80136fc:	701a      	strb	r2, [r3, #0]
	// notif UI
	msg_64_t m;
	m.from = MA_CONTROL_T(trnum);
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	b25b      	sxtb	r3, r3
 8013702:	f003 0307 	and.w	r3, r3, #7
 8013706:	b25b      	sxtb	r3, r3
 8013708:	f063 032f 	orn	r3, r3, #47	; 0x2f
 801370c:	b25b      	sxtb	r3, r3
 801370e:	b2db      	uxtb	r3, r3
 8013710:	727b      	strb	r3, [r7, #9]
	m.to = MA_UI(UISUB_TFT);
 8013712:	2381      	movs	r3, #129	; 0x81
 8013714:	723b      	strb	r3, [r7, #8]
	m.cmd = CMD_TRMODE_NOTIF;
 8013716:	2321      	movs	r3, #33	; 0x21
 8013718:	72bb      	strb	r3, [r7, #10]
	m.v1u = mode;
 801371a:	78fb      	ldrb	r3, [r7, #3]
 801371c:	b29b      	uxth	r3, r3
 801371e:	81bb      	strh	r3, [r7, #12]
	mqf_write_from_ctrl(&m);
 8013720:	f107 0308 	add.w	r3, r7, #8
 8013724:	4618      	mov	r0, r3
 8013726:	f7ff fe9f 	bl	8013468 <mqf_write_from_ctrl>
 801372a:	e000      	b.n	801372e <ctrl_set_mode+0x72>
	if (trctl[trnum]._mode == mode) return;
 801372c:	bf00      	nop
}
 801372e:	3710      	adds	r7, #16
 8013730:	46bd      	mov	sp, r7
 8013732:	bd80      	pop	{r7, pc}
 8013734:	08019ef8 	.word	0x08019ef8
 8013738:	20005258 	.word	0x20005258

0801373c <ctrl_init>:
}
*/


static void ctrl_init(void)
{
 801373c:	b580      	push	{r7, lr}
 801373e:	b082      	sub	sp, #8
 8013740:	af02      	add	r7, sp, #8
	memset(trctl, 0, sizeof(train_ctrl_t)*NUM_TRAINS);
 8013742:	22c0      	movs	r2, #192	; 0xc0
 8013744:	2100      	movs	r1, #0
 8013746:	482e      	ldr	r0, [pc, #184]	; (8013800 <ctrl_init+0xc4>)
 8013748:	f006 f925 	bl	8019996 <memset>
	ctrl_set_mode(0, train_manual);
 801374c:	2101      	movs	r1, #1
 801374e:	2000      	movs	r0, #0
 8013750:	f7ff ffb4 	bl	80136bc <ctrl_set_mode>
	ctrl_set_mode(1, train_auto);
 8013754:	2103      	movs	r1, #3
 8013756:	2001      	movs	r0, #1
 8013758:	f7ff ffb0 	bl	80136bc <ctrl_set_mode>
    set_turnout(0, 0);
 801375c:	2100      	movs	r1, #0
 801375e:	2000      	movs	r0, #0
 8013760:	f001 f9b4 	bl	8014acc <set_turnout>
    set_turnout(1, 0);
 8013764:	2100      	movs	r1, #0
 8013766:	2001      	movs	r0, #1
 8013768:	f001 f9b0 	bl	8014acc <set_turnout>
	if ((1)) {
		trctl[0].canton1_addr = MA_CANTON(0, 1);//MA_CANTON(0, 1); // initial blk
 801376c:	4b24      	ldr	r3, [pc, #144]	; (8013800 <ctrl_init+0xc4>)
 801376e:	2201      	movs	r2, #1
 8013770:	715a      	strb	r2, [r3, #5]
		trctl[0].canton2_addr = 0xFF;
 8013772:	4b23      	ldr	r3, [pc, #140]	; (8013800 <ctrl_init+0xc4>)
 8013774:	22ff      	movs	r2, #255	; 0xff
 8013776:	719a      	strb	r2, [r3, #6]
		trctl[0]._dir = 0;
 8013778:	4b21      	ldr	r3, [pc, #132]	; (8013800 <ctrl_init+0xc4>)
 801377a:	2200      	movs	r2, #0
 801377c:	711a      	strb	r2, [r3, #4]
		trctl[0].desired_speed = 0;
 801377e:	4b20      	ldr	r3, [pc, #128]	; (8013800 <ctrl_init+0xc4>)
 8013780:	2200      	movs	r2, #0
 8013782:	815a      	strh	r2, [r3, #10]
		trctl[0]._target_speed = 0;
 8013784:	4b1e      	ldr	r3, [pc, #120]	; (8013800 <ctrl_init+0xc4>)
 8013786:	2200      	movs	r2, #0
 8013788:	805a      	strh	r2, [r3, #2]
		set_state(0, &trctl[0], train_station);
 801378a:	2203      	movs	r2, #3
 801378c:	491c      	ldr	r1, [pc, #112]	; (8013800 <ctrl_init+0xc4>)
 801378e:	2000      	movs	r0, #0
 8013790:	f7ff ff1c 	bl	80135cc <set_state>
		set_block_addr_occupency(trctl[0].canton1_addr, BLK_OCC_STOP);
 8013794:	4b1a      	ldr	r3, [pc, #104]	; (8013800 <ctrl_init+0xc4>)
 8013796:	795b      	ldrb	r3, [r3, #5]
 8013798:	2101      	movs	r1, #1
 801379a:	4618      	mov	r0, r3
 801379c:	f000 faf6 	bl	8013d8c <set_block_addr_occupency>

		if ((SCEN_TWOTRAIN)) {
			trctl[1].canton1_addr = MA_CANTON(0, 2); // initial blk
 80137a0:	4b17      	ldr	r3, [pc, #92]	; (8013800 <ctrl_init+0xc4>)
 80137a2:	2202      	movs	r2, #2
 80137a4:	775a      	strb	r2, [r3, #29]
			trctl[1].canton2_addr = 0xFF;
 80137a6:	4b16      	ldr	r3, [pc, #88]	; (8013800 <ctrl_init+0xc4>)
 80137a8:	22ff      	movs	r2, #255	; 0xff
 80137aa:	779a      	strb	r2, [r3, #30]
			trctl[1]._dir = 1;
 80137ac:	4b14      	ldr	r3, [pc, #80]	; (8013800 <ctrl_init+0xc4>)
 80137ae:	2201      	movs	r2, #1
 80137b0:	771a      	strb	r2, [r3, #28]
			trctl[1]._target_speed = 0;
 80137b2:	4b13      	ldr	r3, [pc, #76]	; (8013800 <ctrl_init+0xc4>)
 80137b4:	2200      	movs	r2, #0
 80137b6:	835a      	strh	r2, [r3, #26]
			trctl[1].desired_speed = 12;
 80137b8:	4b11      	ldr	r3, [pc, #68]	; (8013800 <ctrl_init+0xc4>)
 80137ba:	220c      	movs	r2, #12
 80137bc:	845a      	strh	r2, [r3, #34]	; 0x22
			set_state(1, &trctl[1], train_station);
 80137be:	2203      	movs	r2, #3
 80137c0:	4910      	ldr	r1, [pc, #64]	; (8013804 <ctrl_init+0xc8>)
 80137c2:	2001      	movs	r0, #1
 80137c4:	f7ff ff02 	bl	80135cc <set_state>
			set_block_addr_occupency(trctl[1].canton1_addr, BLK_OCC_STOP);
 80137c8:	4b0d      	ldr	r3, [pc, #52]	; (8013800 <ctrl_init+0xc4>)
 80137ca:	7f5b      	ldrb	r3, [r3, #29]
 80137cc:	2101      	movs	r1, #1
 80137ce:	4618      	mov	r0, r3
 80137d0:	f000 fadc 	bl	8013d8c <set_block_addr_occupency>

			update_c2_state_limits(0, &trctl[0], upd_init);
 80137d4:	2200      	movs	r2, #0
 80137d6:	490a      	ldr	r1, [pc, #40]	; (8013800 <ctrl_init+0xc4>)
 80137d8:	2000      	movs	r0, #0
 80137da:	f000 fdf7 	bl	80143cc <update_c2_state_limits>
			update_c2_state_limits(1, &trctl[1], upd_init);
 80137de:	2200      	movs	r2, #0
 80137e0:	4908      	ldr	r1, [pc, #32]	; (8013804 <ctrl_init+0xc8>)
 80137e2:	2001      	movs	r0, #1
 80137e4:	f000 fdf2 	bl	80143cc <update_c2_state_limits>

			if ((1)) {
				evt_cmd_set_setdirspeed(1, &trctl[1], 1, 30, 1);
 80137e8:	2301      	movs	r3, #1
 80137ea:	9300      	str	r3, [sp, #0]
 80137ec:	231e      	movs	r3, #30
 80137ee:	2201      	movs	r2, #1
 80137f0:	4904      	ldr	r1, [pc, #16]	; (8013804 <ctrl_init+0xc8>)
 80137f2:	2001      	movs	r0, #1
 80137f4:	f000 fc5c 	bl	80140b0 <evt_cmd_set_setdirspeed>
			//trctl[1].enabled = 0;
			update_c2_state_limits(0, &trctl[0], upd_init);

		}
	}
}
 80137f8:	bf00      	nop
 80137fa:	46bd      	mov	sp, r7
 80137fc:	bd80      	pop	{r7, pc}
 80137fe:	bf00      	nop
 8013800:	20005258 	.word	0x20005258
 8013804:	20005270 	.word	0x20005270

08013808 <reset_timer>:
// ----------------------------------------------------------------------------
// timers


static void reset_timer(int tidx, train_ctrl_t *tvar, int numtimer)
{
 8013808:	b580      	push	{r7, lr}
 801380a:	b084      	sub	sp, #16
 801380c:	af00      	add	r7, sp, #0
 801380e:	60f8      	str	r0, [r7, #12]
 8013810:	60b9      	str	r1, [r7, #8]
 8013812:	607a      	str	r2, [r7, #4]
	itm_debug2(DBG_CTRL, "reset_timer", tidx, numtimer);
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	68fa      	ldr	r2, [r7, #12]
 8013818:	490b      	ldr	r1, [pc, #44]	; (8013848 <reset_timer+0x40>)
 801381a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 801381e:	f7ff fddb 	bl	80133d8 <itm_debug2>
	if (numtimer<0 || numtimer>=NUM_TIMERS) fatal();
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	2b00      	cmp	r3, #0
 8013826:	db02      	blt.n	801382e <reset_timer+0x26>
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	2b01      	cmp	r3, #1
 801382c:	dd01      	ble.n	8013832 <reset_timer+0x2a>
 801382e:	f7ff feb5 	bl	801359c <fatal>
	tvar->timertick[numtimer] = 0;
 8013832:	68bb      	ldr	r3, [r7, #8]
 8013834:	687a      	ldr	r2, [r7, #4]
 8013836:	3204      	adds	r2, #4
 8013838:	2100      	movs	r1, #0
 801383a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 801383e:	bf00      	nop
 8013840:	3710      	adds	r7, #16
 8013842:	46bd      	mov	sp, r7
 8013844:	bd80      	pop	{r7, pc}
 8013846:	bf00      	nop
 8013848:	08019f04 	.word	0x08019f04

0801384c <set_timer>:
static void set_timer(int tidx, train_ctrl_t *tvar, int numtimer, uint32_t tval)
{
 801384c:	b580      	push	{r7, lr}
 801384e:	b086      	sub	sp, #24
 8013850:	af02      	add	r7, sp, #8
 8013852:	60f8      	str	r0, [r7, #12]
 8013854:	60b9      	str	r1, [r7, #8]
 8013856:	607a      	str	r2, [r7, #4]
 8013858:	603b      	str	r3, [r7, #0]
	itm_debug3(DBG_CTRL, "set_timer", tidx, numtimer, tval);
 801385a:	683b      	ldr	r3, [r7, #0]
 801385c:	9300      	str	r3, [sp, #0]
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	68fa      	ldr	r2, [r7, #12]
 8013862:	490d      	ldr	r1, [pc, #52]	; (8013898 <set_timer+0x4c>)
 8013864:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013868:	f7ff fdd2 	bl	8013410 <itm_debug3>
	if (numtimer<0 || numtimer>=NUM_TIMERS) fatal();
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	2b00      	cmp	r3, #0
 8013870:	db02      	blt.n	8013878 <set_timer+0x2c>
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	2b01      	cmp	r3, #1
 8013876:	dd01      	ble.n	801387c <set_timer+0x30>
 8013878:	f7ff fe90 	bl	801359c <fatal>
	tvar->timertick[numtimer] = HAL_GetTick() + tval;
 801387c:	f7ee fadc 	bl	8001e38 <HAL_GetTick>
 8013880:	4602      	mov	r2, r0
 8013882:	683b      	ldr	r3, [r7, #0]
 8013884:	18d1      	adds	r1, r2, r3
 8013886:	68bb      	ldr	r3, [r7, #8]
 8013888:	687a      	ldr	r2, [r7, #4]
 801388a:	3204      	adds	r2, #4
 801388c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8013890:	bf00      	nop
 8013892:	3710      	adds	r7, #16
 8013894:	46bd      	mov	sp, r7
 8013896:	bd80      	pop	{r7, pc}
 8013898:	08019f10 	.word	0x08019f10

0801389c <check_timers>:

static void check_timers(uint32_t tick)
{
 801389c:	b580      	push	{r7, lr}
 801389e:	b088      	sub	sp, #32
 80138a0:	af02      	add	r7, sp, #8
 80138a2:	6078      	str	r0, [r7, #4]
	//uint32_t t = HAL_GetTick();
	for (int tidx = 0; tidx<NUM_TRAINS; tidx++) {
 80138a4:	2300      	movs	r3, #0
 80138a6:	617b      	str	r3, [r7, #20]
 80138a8:	e036      	b.n	8013918 <check_timers+0x7c>
		train_ctrl_t *tvar = &trctl[tidx];
 80138aa:	697a      	ldr	r2, [r7, #20]
 80138ac:	4613      	mov	r3, r2
 80138ae:	005b      	lsls	r3, r3, #1
 80138b0:	4413      	add	r3, r2
 80138b2:	00db      	lsls	r3, r3, #3
 80138b4:	4a1c      	ldr	r2, [pc, #112]	; (8013928 <check_timers+0x8c>)
 80138b6:	4413      	add	r3, r2
 80138b8:	60fb      	str	r3, [r7, #12]
		for (int j=0; j<NUM_TIMERS; j++) {
 80138ba:	2300      	movs	r3, #0
 80138bc:	613b      	str	r3, [r7, #16]
 80138be:	e025      	b.n	801390c <check_timers+0x70>
			uint32_t tv = tvar->timertick[j];
 80138c0:	68fb      	ldr	r3, [r7, #12]
 80138c2:	693a      	ldr	r2, [r7, #16]
 80138c4:	3204      	adds	r2, #4
 80138c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80138ca:	60bb      	str	r3, [r7, #8]
			if (!tv) continue;
 80138cc:	68bb      	ldr	r3, [r7, #8]
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d018      	beq.n	8013904 <check_timers+0x68>
			if (tv <= tick) {
 80138d2:	68ba      	ldr	r2, [r7, #8]
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	429a      	cmp	r2, r3
 80138d8:	d815      	bhi.n	8013906 <check_timers+0x6a>
				itm_debug3(DBG_CTRL, "tim", tidx, j, tv);
 80138da:	68bb      	ldr	r3, [r7, #8]
 80138dc:	9300      	str	r3, [sp, #0]
 80138de:	693b      	ldr	r3, [r7, #16]
 80138e0:	697a      	ldr	r2, [r7, #20]
 80138e2:	4912      	ldr	r1, [pc, #72]	; (801392c <check_timers+0x90>)
 80138e4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80138e8:	f7ff fd92 	bl	8013410 <itm_debug3>
				tvar->timertick[j] = 0;
 80138ec:	68fb      	ldr	r3, [r7, #12]
 80138ee:	693a      	ldr	r2, [r7, #16]
 80138f0:	3204      	adds	r2, #4
 80138f2:	2100      	movs	r1, #0
 80138f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				evt_timer(tidx, tvar, j);
 80138f8:	693a      	ldr	r2, [r7, #16]
 80138fa:	68f9      	ldr	r1, [r7, #12]
 80138fc:	6978      	ldr	r0, [r7, #20]
 80138fe:	f000 fd31 	bl	8014364 <evt_timer>
 8013902:	e000      	b.n	8013906 <check_timers+0x6a>
			if (!tv) continue;
 8013904:	bf00      	nop
		for (int j=0; j<NUM_TIMERS; j++) {
 8013906:	693b      	ldr	r3, [r7, #16]
 8013908:	3301      	adds	r3, #1
 801390a:	613b      	str	r3, [r7, #16]
 801390c:	693b      	ldr	r3, [r7, #16]
 801390e:	2b01      	cmp	r3, #1
 8013910:	ddd6      	ble.n	80138c0 <check_timers+0x24>
	for (int tidx = 0; tidx<NUM_TRAINS; tidx++) {
 8013912:	697b      	ldr	r3, [r7, #20]
 8013914:	3301      	adds	r3, #1
 8013916:	617b      	str	r3, [r7, #20]
 8013918:	697b      	ldr	r3, [r7, #20]
 801391a:	2b07      	cmp	r3, #7
 801391c:	ddc5      	ble.n	80138aa <check_timers+0xe>
			}
		}
	}
}
 801391e:	bf00      	nop
 8013920:	3718      	adds	r7, #24
 8013922:	46bd      	mov	sp, r7
 8013924:	bd80      	pop	{r7, pc}
 8013926:	bf00      	nop
 8013928:	20005258 	.word	0x20005258
 801392c:	08019f1c 	.word	0x08019f1c

08013930 <sub_presence_changed>:




static void sub_presence_changed(_UNUSED_ uint32_t tick, uint8_t from_addr, uint8_t lsegnum, uint16_t p, int16_t ival)
{
 8013930:	b580      	push	{r7, lr}
 8013932:	b08a      	sub	sp, #40	; 0x28
 8013934:	af02      	add	r7, sp, #8
 8013936:	6078      	str	r0, [r7, #4]
 8013938:	4608      	mov	r0, r1
 801393a:	4611      	mov	r1, r2
 801393c:	461a      	mov	r2, r3
 801393e:	4603      	mov	r3, r0
 8013940:	70fb      	strb	r3, [r7, #3]
 8013942:	460b      	mov	r3, r1
 8013944:	70bb      	strb	r3, [r7, #2]
 8013946:	4613      	mov	r3, r2
 8013948:	803b      	strh	r3, [r7, #0]
	int segnum = _sub_addr_to_sub_num(from_addr, lsegnum);
 801394a:	78ba      	ldrb	r2, [r7, #2]
 801394c:	78fb      	ldrb	r3, [r7, #3]
 801394e:	4611      	mov	r1, r2
 8013950:	4618      	mov	r0, r3
 8013952:	f7ff fd99 	bl	8013488 <_sub_addr_to_sub_num>
 8013956:	6178      	str	r0, [r7, #20]
	itm_debug3(DBG_PRES|DBG_CTRL, "PRC",  p, lsegnum, ival);
 8013958:	883a      	ldrh	r2, [r7, #0]
 801395a:	78b9      	ldrb	r1, [r7, #2]
 801395c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8013960:	9300      	str	r3, [sp, #0]
 8013962:	460b      	mov	r3, r1
 8013964:	4947      	ldr	r1, [pc, #284]	; (8013a84 <sub_presence_changed+0x154>)
 8013966:	f44f 6088 	mov.w	r0, #1088	; 0x440
 801396a:	f7ff fd51 	bl	8013410 <itm_debug3>
	if ((segnum<0) || (segnum>11)) return;
 801396e:	697b      	ldr	r3, [r7, #20]
 8013970:	2b00      	cmp	r3, #0
 8013972:	f2c0 8082 	blt.w	8013a7a <sub_presence_changed+0x14a>
 8013976:	697b      	ldr	r3, [r7, #20]
 8013978:	2b0b      	cmp	r3, #11
 801397a:	dc7e      	bgt.n	8013a7a <sub_presence_changed+0x14a>

	uint8_t canton = blk_addr_for_sub_addr(from_addr, segnum);
 801397c:	697b      	ldr	r3, [r7, #20]
 801397e:	b2da      	uxtb	r2, r3
 8013980:	78fb      	ldrb	r3, [r7, #3]
 8013982:	4611      	mov	r1, r2
 8013984:	4618      	mov	r0, r3
 8013986:	f7ff fded 	bl	8013564 <blk_addr_for_sub_addr>
 801398a:	4603      	mov	r3, r0
 801398c:	74fb      	strb	r3, [r7, #19]
	if (0xFF == canton) {
 801398e:	7cfb      	ldrb	r3, [r7, #19]
 8013990:	2bff      	cmp	r3, #255	; 0xff
 8013992:	d106      	bne.n	80139a2 <sub_presence_changed+0x72>
		itm_debug2(DBG_ERR|DBG_CTRL, "blk??", from_addr, segnum);
 8013994:	78fa      	ldrb	r2, [r7, #3]
 8013996:	697b      	ldr	r3, [r7, #20]
 8013998:	493b      	ldr	r1, [pc, #236]	; (8013a88 <sub_presence_changed+0x158>)
 801399a:	483c      	ldr	r0, [pc, #240]	; (8013a8c <sub_presence_changed+0x15c>)
 801399c:	f7ff fd1c 	bl	80133d8 <itm_debug2>
		return;
 80139a0:	e06c      	b.n	8013a7c <sub_presence_changed+0x14c>
	}
	itm_debug3(DBG_PRES|DBG_CTRL, "PRBLK", p, segnum, canton);
 80139a2:	883a      	ldrh	r2, [r7, #0]
 80139a4:	7cfb      	ldrb	r3, [r7, #19]
 80139a6:	9300      	str	r3, [sp, #0]
 80139a8:	697b      	ldr	r3, [r7, #20]
 80139aa:	4939      	ldr	r1, [pc, #228]	; (8013a90 <sub_presence_changed+0x160>)
 80139ac:	f44f 6088 	mov.w	r0, #1088	; 0x440
 80139b0:	f7ff fd2e 	bl	8013410 <itm_debug3>

	int f = 0;
 80139b4:	2300      	movs	r3, #0
 80139b6:	61fb      	str	r3, [r7, #28]

	for (int tn = 0; tn < NUM_TRAINS; tn++) {
 80139b8:	2300      	movs	r3, #0
 80139ba:	61bb      	str	r3, [r7, #24]
 80139bc:	e050      	b.n	8013a60 <sub_presence_changed+0x130>
		train_ctrl_t *tvar = &trctl[tn];
 80139be:	69ba      	ldr	r2, [r7, #24]
 80139c0:	4613      	mov	r3, r2
 80139c2:	005b      	lsls	r3, r3, #1
 80139c4:	4413      	add	r3, r2
 80139c6:	00db      	lsls	r3, r3, #3
 80139c8:	4a32      	ldr	r2, [pc, #200]	; (8013a94 <sub_presence_changed+0x164>)
 80139ca:	4413      	add	r3, r2
 80139cc:	60fb      	str	r3, [r7, #12]
		const train_config_t *tconf = get_train_cnf(tn);
 80139ce:	69b8      	ldr	r0, [r7, #24]
 80139d0:	f002 fcf0 	bl	80163b4 <get_train_cnf>
 80139d4:	60b8      	str	r0, [r7, #8]
		// check enabled
		if (!tconf->enabled) continue;
 80139d6:	68bb      	ldr	r3, [r7, #8]
 80139d8:	7c9b      	ldrb	r3, [r3, #18]
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d03c      	beq.n	8013a58 <sub_presence_changed+0x128>
		itm_debug3(DBG_PRES|DBG_CTRL, "prblk?", tn, tvar->canton1_addr, tvar->canton2_addr);
 80139de:	68fb      	ldr	r3, [r7, #12]
 80139e0:	795b      	ldrb	r3, [r3, #5]
 80139e2:	461a      	mov	r2, r3
 80139e4:	68fb      	ldr	r3, [r7, #12]
 80139e6:	799b      	ldrb	r3, [r3, #6]
 80139e8:	9300      	str	r3, [sp, #0]
 80139ea:	4613      	mov	r3, r2
 80139ec:	69ba      	ldr	r2, [r7, #24]
 80139ee:	492a      	ldr	r1, [pc, #168]	; (8013a98 <sub_presence_changed+0x168>)
 80139f0:	f44f 6088 	mov.w	r0, #1088	; 0x440
 80139f4:	f7ff fd0c 	bl	8013410 <itm_debug3>
		if (tvar->canton1_addr == canton) {
 80139f8:	68fb      	ldr	r3, [r7, #12]
 80139fa:	795b      	ldrb	r3, [r3, #5]
 80139fc:	7cfa      	ldrb	r2, [r7, #19]
 80139fe:	429a      	cmp	r2, r3
 8013a00:	d115      	bne.n	8013a2e <sub_presence_changed+0xfe>
			if (p) {
 8013a02:	883b      	ldrh	r3, [r7, #0]
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d00b      	beq.n	8013a20 <sub_presence_changed+0xf0>
				itm_debug2(DBG_PRES, "?enter c1", tn, segnum);
 8013a08:	697b      	ldr	r3, [r7, #20]
 8013a0a:	69ba      	ldr	r2, [r7, #24]
 8013a0c:	4923      	ldr	r1, [pc, #140]	; (8013a9c <sub_presence_changed+0x16c>)
 8013a0e:	2040      	movs	r0, #64	; 0x40
 8013a10:	f7ff fce2 	bl	80133d8 <itm_debug2>
				evt_entered_c1(tn, tvar, 0);
 8013a14:	2200      	movs	r2, #0
 8013a16:	68f9      	ldr	r1, [r7, #12]
 8013a18:	69b8      	ldr	r0, [r7, #24]
 8013a1a:	f000 fae5 	bl	8013fe8 <evt_entered_c1>
 8013a1e:	e003      	b.n	8013a28 <sub_presence_changed+0xf8>
			} else {
				evt_leaved_c1(tn, tvar);
 8013a20:	68f9      	ldr	r1, [r7, #12]
 8013a22:	69b8      	ldr	r0, [r7, #24]
 8013a24:	f000 fa98 	bl	8013f58 <evt_leaved_c1>
			}
			f = 1;
 8013a28:	2301      	movs	r3, #1
 8013a2a:	61fb      	str	r3, [r7, #28]
 8013a2c:	e015      	b.n	8013a5a <sub_presence_changed+0x12a>
		} else if (tvar->canton2_addr == canton) {
 8013a2e:	68fb      	ldr	r3, [r7, #12]
 8013a30:	799b      	ldrb	r3, [r3, #6]
 8013a32:	7cfa      	ldrb	r2, [r7, #19]
 8013a34:	429a      	cmp	r2, r3
 8013a36:	d110      	bne.n	8013a5a <sub_presence_changed+0x12a>
			if (p) {
 8013a38:	883b      	ldrh	r3, [r7, #0]
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d005      	beq.n	8013a4a <sub_presence_changed+0x11a>
				evt_entered_c2(tn, tvar, 0);
 8013a3e:	2200      	movs	r2, #0
 8013a40:	68f9      	ldr	r1, [r7, #12]
 8013a42:	69b8      	ldr	r0, [r7, #24]
 8013a44:	f000 fa34 	bl	8013eb0 <evt_entered_c2>
 8013a48:	e003      	b.n	8013a52 <sub_presence_changed+0x122>
			} else {
				evt_leaved_c2(tn, tvar);
 8013a4a:	68f9      	ldr	r1, [r7, #12]
 8013a4c:	69b8      	ldr	r0, [r7, #24]
 8013a4e:	f000 fae1 	bl	8014014 <evt_leaved_c2>
			}
			f = 1;
 8013a52:	2301      	movs	r3, #1
 8013a54:	61fb      	str	r3, [r7, #28]
 8013a56:	e000      	b.n	8013a5a <sub_presence_changed+0x12a>
		if (!tconf->enabled) continue;
 8013a58:	bf00      	nop
	for (int tn = 0; tn < NUM_TRAINS; tn++) {
 8013a5a:	69bb      	ldr	r3, [r7, #24]
 8013a5c:	3301      	adds	r3, #1
 8013a5e:	61bb      	str	r3, [r7, #24]
 8013a60:	69bb      	ldr	r3, [r7, #24]
 8013a62:	2b07      	cmp	r3, #7
 8013a64:	ddab      	ble.n	80139be <sub_presence_changed+0x8e>
		}
	}
	if (!f) {
 8013a66:	69fb      	ldr	r3, [r7, #28]
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	d107      	bne.n	8013a7c <sub_presence_changed+0x14c>
		// presence on unexpected canton
		itm_debug2(DBG_ERR|DBG_PRES, "?unexp", segnum, canton);
 8013a6c:	7cfb      	ldrb	r3, [r7, #19]
 8013a6e:	697a      	ldr	r2, [r7, #20]
 8013a70:	490b      	ldr	r1, [pc, #44]	; (8013aa0 <sub_presence_changed+0x170>)
 8013a72:	480c      	ldr	r0, [pc, #48]	; (8013aa4 <sub_presence_changed+0x174>)
 8013a74:	f7ff fcb0 	bl	80133d8 <itm_debug2>
 8013a78:	e000      	b.n	8013a7c <sub_presence_changed+0x14c>
	if ((segnum<0) || (segnum>11)) return;
 8013a7a:	bf00      	nop
	}
}
 8013a7c:	3720      	adds	r7, #32
 8013a7e:	46bd      	mov	sp, r7
 8013a80:	bd80      	pop	{r7, pc}
 8013a82:	bf00      	nop
 8013a84:	08019f20 	.word	0x08019f20
 8013a88:	08019f24 	.word	0x08019f24
 8013a8c:	80000400 	.word	0x80000400
 8013a90:	08019f2c 	.word	0x08019f2c
 8013a94:	20005258 	.word	0x20005258
 8013a98:	08019f34 	.word	0x08019f34
 8013a9c:	08019f3c 	.word	0x08019f3c
 8013aa0:	08019f48 	.word	0x08019f48
 8013aa4:	80000040 	.word	0x80000040

08013aa8 <ctrl_run_tick>:

// ----------------------------------------------------------------------------


void ctrl_run_tick(_UNUSED_ uint32_t notif_flags, uint32_t tick, _UNUSED_ uint32_t dt)
{
 8013aa8:	b580      	push	{r7, lr}
 8013aaa:	b08c      	sub	sp, #48	; 0x30
 8013aac:	af02      	add	r7, sp, #8
 8013aae:	60f8      	str	r0, [r7, #12]
 8013ab0:	60b9      	str	r1, [r7, #8]
 8013ab2:	607a      	str	r2, [r7, #4]
	static int first=1;
	if (first) {
 8013ab4:	4b6d      	ldr	r3, [pc, #436]	; (8013c6c <ctrl_run_tick+0x1c4>)
 8013ab6:	681b      	ldr	r3, [r3, #0]
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	d006      	beq.n	8013aca <ctrl_run_tick+0x22>
		first = 0;
 8013abc:	4b6b      	ldr	r3, [pc, #428]	; (8013c6c <ctrl_run_tick+0x1c4>)
 8013abe:	2200      	movs	r2, #0
 8013ac0:	601a      	str	r2, [r3, #0]
		ctrl_init();
 8013ac2:	f7ff fe3b 	bl	801373c <ctrl_init>
		ctrl_reset();
 8013ac6:	f7ff fd79 	bl	80135bc <ctrl_reset>
    }
   
	check_block_delayed(tick);
 8013aca:	68b8      	ldr	r0, [r7, #8]
 8013acc:	f000 f99e 	bl	8013e0c <check_block_delayed>

	/* process messages */
	for (;;) {
		msg_64_t m;
		int rc = mqf_read_to_ctrl(&m);
 8013ad0:	f107 0310 	add.w	r3, r7, #16
 8013ad4:	4618      	mov	r0, r3
 8013ad6:	f7ff fcb7 	bl	8013448 <mqf_read_to_ctrl>
 8013ada:	6278      	str	r0, [r7, #36]	; 0x24
		if (rc) break;
 8013adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ade:	2b00      	cmp	r3, #0
 8013ae0:	d009      	beq.n	8013af6 <ctrl_run_tick+0x4e>
			}
		} else {
			itm_debug1(DBG_MSG|DBG_CTRL, "bad msg", m.to);
		}
	}
	check_timers(tick);
 8013ae2:	68b8      	ldr	r0, [r7, #8]
 8013ae4:	f7ff feda 	bl	801389c <check_timers>
	check_blk_tick(tick);
 8013ae8:	68b8      	ldr	r0, [r7, #8]
 8013aea:	f000 ffa7 	bl	8014a3c <check_blk_tick>
	check_behaviour(tick);
 8013aee:	68b8      	ldr	r0, [r7, #8]
 8013af0:	f001 f838 	bl	8014b64 <check_behaviour>
 8013af4:	e0b3      	b.n	8013c5e <ctrl_run_tick+0x1b6>
        switch (m.cmd) {
 8013af6:	7cbb      	ldrb	r3, [r7, #18]
 8013af8:	2bfc      	cmp	r3, #252	; 0xfc
 8013afa:	d007      	beq.n	8013b0c <ctrl_run_tick+0x64>
 8013afc:	2bfc      	cmp	r3, #252	; 0xfc
 8013afe:	db17      	blt.n	8013b30 <ctrl_run_tick+0x88>
 8013b00:	3bfe      	subs	r3, #254	; 0xfe
 8013b02:	2b01      	cmp	r3, #1
 8013b04:	d814      	bhi.n	8013b30 <ctrl_run_tick+0x88>
                ctrl_reset(); // untested
 8013b06:	f7ff fd59 	bl	80135bc <ctrl_reset>
                continue;
 8013b0a:	e0a7      	b.n	8013c5c <ctrl_run_tick+0x1b4>
            	if (run_mode != m.v1u) {
 8013b0c:	4b58      	ldr	r3, [pc, #352]	; (8013c70 <ctrl_run_tick+0x1c8>)
 8013b0e:	781b      	ldrb	r3, [r3, #0]
 8013b10:	b29a      	uxth	r2, r3
 8013b12:	8abb      	ldrh	r3, [r7, #20]
 8013b14:	429a      	cmp	r2, r3
 8013b16:	f000 809c 	beq.w	8013c52 <ctrl_run_tick+0x1aa>
            		run_mode = m.v1u;
 8013b1a:	8abb      	ldrh	r3, [r7, #20]
 8013b1c:	b2da      	uxtb	r2, r3
 8013b1e:	4b54      	ldr	r3, [pc, #336]	; (8013c70 <ctrl_run_tick+0x1c8>)
 8013b20:	701a      	strb	r2, [r3, #0]
            		testerAddr = m.from;
 8013b22:	7c7a      	ldrb	r2, [r7, #17]
 8013b24:	4b53      	ldr	r3, [pc, #332]	; (8013c74 <ctrl_run_tick+0x1cc>)
 8013b26:	701a      	strb	r2, [r3, #0]
            		first = 1;
 8013b28:	4b50      	ldr	r3, [pc, #320]	; (8013c6c <ctrl_run_tick+0x1c4>)
 8013b2a:	2201      	movs	r2, #1
 8013b2c:	601a      	str	r2, [r3, #0]
                continue;
 8013b2e:	e090      	b.n	8013c52 <ctrl_run_tick+0x1aa>
            	break;
 8013b30:	bf00      	nop
        if (run_mode != runmode_normal) continue;
 8013b32:	4b4f      	ldr	r3, [pc, #316]	; (8013c70 <ctrl_run_tick+0x1c8>)
 8013b34:	781b      	ldrb	r3, [r3, #0]
 8013b36:	2b01      	cmp	r3, #1
 8013b38:	f040 808d 	bne.w	8013c56 <ctrl_run_tick+0x1ae>
        switch (m.cmd) {
 8013b3c:	7cbb      	ldrb	r3, [r7, #18]
 8013b3e:	2b33      	cmp	r3, #51	; 0x33
 8013b40:	d002      	beq.n	8013b48 <ctrl_run_tick+0xa0>
 8013b42:	2b34      	cmp	r3, #52	; 0x34
 8013b44:	d006      	beq.n	8013b54 <ctrl_run_tick+0xac>
                break;
 8013b46:	e00b      	b.n	8013b60 <ctrl_run_tick+0xb8>
                set_turnout(m.v1u, 0);
 8013b48:	8abb      	ldrh	r3, [r7, #20]
 8013b4a:	2100      	movs	r1, #0
 8013b4c:	4618      	mov	r0, r3
 8013b4e:	f000 ffbd 	bl	8014acc <set_turnout>
                break;
 8013b52:	e005      	b.n	8013b60 <ctrl_run_tick+0xb8>
                set_turnout(m.v1u, 1);
 8013b54:	8abb      	ldrh	r3, [r7, #20]
 8013b56:	2101      	movs	r1, #1
 8013b58:	4618      	mov	r0, r3
 8013b5a:	f000 ffb7 	bl	8014acc <set_turnout>
                break;
 8013b5e:	bf00      	nop
		if (IS_CONTROL_T(m.to)) {
 8013b60:	7c3b      	ldrb	r3, [r7, #16]
 8013b62:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8013b66:	2bd0      	cmp	r3, #208	; 0xd0
 8013b68:	d16b      	bne.n	8013c42 <ctrl_run_tick+0x19a>
			int tidx = m.to & 0x7;
 8013b6a:	7c3b      	ldrb	r3, [r7, #16]
 8013b6c:	f003 0307 	and.w	r3, r3, #7
 8013b70:	623b      	str	r3, [r7, #32]
			train_ctrl_t *tvar = &trctl[tidx];
 8013b72:	6a3a      	ldr	r2, [r7, #32]
 8013b74:	4613      	mov	r3, r2
 8013b76:	005b      	lsls	r3, r3, #1
 8013b78:	4413      	add	r3, r2
 8013b7a:	00db      	lsls	r3, r3, #3
 8013b7c:	4a3e      	ldr	r2, [pc, #248]	; (8013c78 <ctrl_run_tick+0x1d0>)
 8013b7e:	4413      	add	r3, r2
 8013b80:	61fb      	str	r3, [r7, #28]
			switch (m.cmd) {
 8013b82:	7cbb      	ldrb	r3, [r7, #18]
 8013b84:	2b13      	cmp	r3, #19
 8013b86:	d018      	beq.n	8013bba <ctrl_run_tick+0x112>
 8013b88:	2b13      	cmp	r3, #19
 8013b8a:	dc02      	bgt.n	8013b92 <ctrl_run_tick+0xea>
 8013b8c:	2b12      	cmp	r3, #18
 8013b8e:	d005      	beq.n	8013b9c <ctrl_run_tick+0xf4>
				break;
 8013b90:	e064      	b.n	8013c5c <ctrl_run_tick+0x1b4>
			switch (m.cmd) {
 8013b92:	2b17      	cmp	r3, #23
 8013b94:	d039      	beq.n	8013c0a <ctrl_run_tick+0x162>
 8013b96:	2b51      	cmp	r3, #81	; 0x51
 8013b98:	d043      	beq.n	8013c22 <ctrl_run_tick+0x17a>
				break;
 8013b9a:	e05f      	b.n	8013c5c <ctrl_run_tick+0x1b4>
				if (ignore_ina_presence) break;
 8013b9c:	4b37      	ldr	r3, [pc, #220]	; (8013c7c <ctrl_run_tick+0x1d4>)
 8013b9e:	781b      	ldrb	r3, [r3, #0]
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	d15a      	bne.n	8013c5a <ctrl_run_tick+0x1b2>
				sub_presence_changed(tick, m.from, m.sub, m.v1u, m.v2);
 8013ba4:	7c79      	ldrb	r1, [r7, #17]
 8013ba6:	7cfa      	ldrb	r2, [r7, #19]
 8013ba8:	8ab8      	ldrh	r0, [r7, #20]
 8013baa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013bae:	9300      	str	r3, [sp, #0]
 8013bb0:	4603      	mov	r3, r0
 8013bb2:	68b8      	ldr	r0, [r7, #8]
 8013bb4:	f7ff febc 	bl	8013930 <sub_presence_changed>
				break;
 8013bb8:	e050      	b.n	8013c5c <ctrl_run_tick+0x1b4>
				itm_debug2(DBG_CTRL,"BEMF/C2", tidx,  m.v1u);
 8013bba:	8abb      	ldrh	r3, [r7, #20]
 8013bbc:	6a3a      	ldr	r2, [r7, #32]
 8013bbe:	4930      	ldr	r1, [pc, #192]	; (8013c80 <ctrl_run_tick+0x1d8>)
 8013bc0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013bc4:	f7ff fc08 	bl	80133d8 <itm_debug2>
				train_ctrl_t *tvar = &trctl[tidx];
 8013bc8:	6a3a      	ldr	r2, [r7, #32]
 8013bca:	4613      	mov	r3, r2
 8013bcc:	005b      	lsls	r3, r3, #1
 8013bce:	4413      	add	r3, r2
 8013bd0:	00db      	lsls	r3, r3, #3
 8013bd2:	4a29      	ldr	r2, [pc, #164]	; (8013c78 <ctrl_run_tick+0x1d0>)
 8013bd4:	4413      	add	r3, r2
 8013bd6:	61bb      	str	r3, [r7, #24]
				if (m.v1u != tvar->canton2_addr) {
 8013bd8:	8aba      	ldrh	r2, [r7, #20]
 8013bda:	69bb      	ldr	r3, [r7, #24]
 8013bdc:	799b      	ldrb	r3, [r3, #6]
 8013bde:	b29b      	uxth	r3, r3
 8013be0:	429a      	cmp	r2, r3
 8013be2:	d00c      	beq.n	8013bfe <ctrl_run_tick+0x156>
					itm_debug3(DBG_CTRL, "not c2", tidx, m.v1u, tvar->canton2_addr);
 8013be4:	8abb      	ldrh	r3, [r7, #20]
 8013be6:	461a      	mov	r2, r3
 8013be8:	69bb      	ldr	r3, [r7, #24]
 8013bea:	799b      	ldrb	r3, [r3, #6]
 8013bec:	9300      	str	r3, [sp, #0]
 8013bee:	4613      	mov	r3, r2
 8013bf0:	6a3a      	ldr	r2, [r7, #32]
 8013bf2:	4924      	ldr	r1, [pc, #144]	; (8013c84 <ctrl_run_tick+0x1dc>)
 8013bf4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013bf8:	f7ff fc0a 	bl	8013410 <itm_debug3>
					break;
 8013bfc:	e02e      	b.n	8013c5c <ctrl_run_tick+0x1b4>
				evt_entered_c2(tidx, tvar, 1);
 8013bfe:	2201      	movs	r2, #1
 8013c00:	69b9      	ldr	r1, [r7, #24]
 8013c02:	6a38      	ldr	r0, [r7, #32]
 8013c04:	f000 f954 	bl	8013eb0 <evt_entered_c2>
				break;
 8013c08:	e028      	b.n	8013c5c <ctrl_run_tick+0x1b4>
				evt_cmd_set_setdirspeed(tidx, tvar, m.v2, m.v1u, 0);
 8013c0a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013c0e:	b25a      	sxtb	r2, r3
 8013c10:	8ab9      	ldrh	r1, [r7, #20]
 8013c12:	2300      	movs	r3, #0
 8013c14:	9300      	str	r3, [sp, #0]
 8013c16:	460b      	mov	r3, r1
 8013c18:	69f9      	ldr	r1, [r7, #28]
 8013c1a:	6a38      	ldr	r0, [r7, #32]
 8013c1c:	f000 fa48 	bl	80140b0 <evt_cmd_set_setdirspeed>
				break;
 8013c20:	e01c      	b.n	8013c5c <ctrl_run_tick+0x1b4>
				itm_debug2(DBG_POSE, "Trig", m.v1u, m.v2u);
 8013c22:	8abb      	ldrh	r3, [r7, #20]
 8013c24:	461a      	mov	r2, r3
 8013c26:	8afb      	ldrh	r3, [r7, #22]
 8013c28:	4917      	ldr	r1, [pc, #92]	; (8013c88 <ctrl_run_tick+0x1e0>)
 8013c2a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8013c2e:	f7ff fbd3 	bl	80133d8 <itm_debug2>
				evt_pose_triggered(tidx, tvar, m.v1u);
 8013c32:	8abb      	ldrh	r3, [r7, #20]
 8013c34:	b2db      	uxtb	r3, r3
 8013c36:	461a      	mov	r2, r3
 8013c38:	69f9      	ldr	r1, [r7, #28]
 8013c3a:	6a38      	ldr	r0, [r7, #32]
 8013c3c:	f000 fb44 	bl	80142c8 <evt_pose_triggered>
				break;
 8013c40:	e00c      	b.n	8013c5c <ctrl_run_tick+0x1b4>
			itm_debug1(DBG_MSG|DBG_CTRL, "bad msg", m.to);
 8013c42:	7c3b      	ldrb	r3, [r7, #16]
 8013c44:	461a      	mov	r2, r3
 8013c46:	4911      	ldr	r1, [pc, #68]	; (8013c8c <ctrl_run_tick+0x1e4>)
 8013c48:	f240 4002 	movw	r0, #1026	; 0x402
 8013c4c:	f7ff fbaa 	bl	80133a4 <itm_debug1>
 8013c50:	e73e      	b.n	8013ad0 <ctrl_run_tick+0x28>
                continue;
 8013c52:	bf00      	nop
 8013c54:	e73c      	b.n	8013ad0 <ctrl_run_tick+0x28>
        if (run_mode != runmode_normal) continue;
 8013c56:	bf00      	nop
 8013c58:	e73a      	b.n	8013ad0 <ctrl_run_tick+0x28>
				if (ignore_ina_presence) break;
 8013c5a:	bf00      	nop
	for (;;) {
 8013c5c:	e738      	b.n	8013ad0 <ctrl_run_tick+0x28>
	//hi_tick(notif_flags, tick, dt);

	if ((1)) {
		void txframe_send_stat(void);
		txframe_send_stat();
 8013c5e:	f003 fb41 	bl	80172e4 <txframe_send_stat>
	}
}
 8013c62:	bf00      	nop
 8013c64:	3728      	adds	r7, #40	; 0x28
 8013c66:	46bd      	mov	sp, r7
 8013c68:	bd80      	pop	{r7, pc}
 8013c6a:	bf00      	nop
 8013c6c:	20000234 	.word	0x20000234
 8013c70:	20005318 	.word	0x20005318
 8013c74:	20005319 	.word	0x20005319
 8013c78:	20005258 	.word	0x20005258
 8013c7c:	20000232 	.word	0x20000232
 8013c80:	08019f50 	.word	0x08019f50
 8013c84:	08019f58 	.word	0x08019f58
 8013c88:	08019f60 	.word	0x08019f60
 8013c8c:	08019f68 	.word	0x08019f68

08013c90 <notif_blk_occup_chg>:


static uint8_t notif_blk_reset = 1;

static void notif_blk_occup_chg(int blknum, uint8_t val)
{
 8013c90:	b580      	push	{r7, lr}
 8013c92:	b084      	sub	sp, #16
 8013c94:	af00      	add	r7, sp, #0
 8013c96:	6078      	str	r0, [r7, #4]
 8013c98:	460b      	mov	r3, r1
 8013c9a:	70fb      	strb	r3, [r7, #3]
    msg_64_t m;
    m.from = MA_CONTROL();
 8013c9c:	23d7      	movs	r3, #215	; 0xd7
 8013c9e:	727b      	strb	r3, [r7, #9]
    m.to = MA_UI(UISUB_TRACK);
 8013ca0:	2382      	movs	r3, #130	; 0x82
 8013ca2:	723b      	strb	r3, [r7, #8]
    m.cmd = CMD_BLK_CHANGE;
 8013ca4:	23a2      	movs	r3, #162	; 0xa2
 8013ca6:	72bb      	strb	r3, [r7, #10]
    m.vbytes[0] = blknum;
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	b2db      	uxtb	r3, r3
 8013cac:	733b      	strb	r3, [r7, #12]
    m.vbytes[1] = val;
 8013cae:	78fb      	ldrb	r3, [r7, #3]
 8013cb0:	737b      	strb	r3, [r7, #13]
    m.vbytes[2] = notif_blk_reset ? 1 : 0;
 8013cb2:	4b0a      	ldr	r3, [pc, #40]	; (8013cdc <notif_blk_occup_chg+0x4c>)
 8013cb4:	781b      	ldrb	r3, [r3, #0]
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	bf14      	ite	ne
 8013cba:	2301      	movne	r3, #1
 8013cbc:	2300      	moveq	r3, #0
 8013cbe:	b2db      	uxtb	r3, r3
 8013cc0:	73bb      	strb	r3, [r7, #14]
    notif_blk_reset = 0;
 8013cc2:	4b06      	ldr	r3, [pc, #24]	; (8013cdc <notif_blk_occup_chg+0x4c>)
 8013cc4:	2200      	movs	r2, #0
 8013cc6:	701a      	strb	r2, [r3, #0]
    mqf_write_from_ctrl(&m);
 8013cc8:	f107 0308 	add.w	r3, r7, #8
 8013ccc:	4618      	mov	r0, r3
 8013cce:	f7ff fbcb 	bl	8013468 <mqf_write_from_ctrl>
}
 8013cd2:	bf00      	nop
 8013cd4:	3710      	adds	r7, #16
 8013cd6:	46bd      	mov	sp, r7
 8013cd8:	bd80      	pop	{r7, pc}
 8013cda:	bf00      	nop
 8013cdc:	20000233 	.word	0x20000233

08013ce0 <set_block_num_occupency>:

static void set_block_num_occupency(int blknum, uint8_t v)
{
 8013ce0:	b580      	push	{r7, lr}
 8013ce2:	b084      	sub	sp, #16
 8013ce4:	af02      	add	r7, sp, #8
 8013ce6:	6078      	str	r0, [r7, #4]
 8013ce8:	460b      	mov	r3, r1
 8013cea:	70fb      	strb	r3, [r7, #3]
	if (-1 == blknum) fatal();
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013cf2:	d101      	bne.n	8013cf8 <set_block_num_occupency+0x18>
 8013cf4:	f7ff fc52 	bl	801359c <fatal>
	if (blk_occup[blknum] != v) {
 8013cf8:	4a20      	ldr	r2, [pc, #128]	; (8013d7c <set_block_num_occupency+0x9c>)
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	4413      	add	r3, r2
 8013cfe:	781b      	ldrb	r3, [r3, #0]
 8013d00:	78fa      	ldrb	r2, [r7, #3]
 8013d02:	429a      	cmp	r2, r3
 8013d04:	d01e      	beq.n	8013d44 <set_block_num_occupency+0x64>
		if (USE_BLOCK_DELAY_FREE && (v==BLK_OCC_FREE)) {
 8013d06:	78fb      	ldrb	r3, [r7, #3]
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	d113      	bne.n	8013d34 <set_block_num_occupency+0x54>
			if (blk_occup[blknum] >= BLK_OCC_DELAY1) fatal();
 8013d0c:	4a1b      	ldr	r2, [pc, #108]	; (8013d7c <set_block_num_occupency+0x9c>)
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	4413      	add	r3, r2
 8013d12:	781b      	ldrb	r3, [r3, #0]
 8013d14:	2b0f      	cmp	r3, #15
 8013d16:	d901      	bls.n	8013d1c <set_block_num_occupency+0x3c>
 8013d18:	f7ff fc40 	bl	801359c <fatal>
			blk_occup[blknum] = BLK_OCC_DELAYM;
 8013d1c:	4a17      	ldr	r2, [pc, #92]	; (8013d7c <set_block_num_occupency+0x9c>)
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	4413      	add	r3, r2
 8013d22:	2216      	movs	r2, #22
 8013d24:	701a      	strb	r2, [r3, #0]
			itm_debug1(DBG_CTRL, "delay free", blknum);
 8013d26:	687a      	ldr	r2, [r7, #4]
 8013d28:	4915      	ldr	r1, [pc, #84]	; (8013d80 <set_block_num_occupency+0xa0>)
 8013d2a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013d2e:	f7ff fb39 	bl	80133a4 <itm_debug1>
 8013d32:	e007      	b.n	8013d44 <set_block_num_occupency+0x64>
		} else {
			blk_occup[blknum] = v;
 8013d34:	4a11      	ldr	r2, [pc, #68]	; (8013d7c <set_block_num_occupency+0x9c>)
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	4413      	add	r3, r2
 8013d3a:	78fa      	ldrb	r2, [r7, #3]
 8013d3c:	701a      	strb	r2, [r3, #0]
			occupency_changed = 1;
 8013d3e:	4b11      	ldr	r3, [pc, #68]	; (8013d84 <set_block_num_occupency+0xa4>)
 8013d40:	2201      	movs	r2, #1
 8013d42:	701a      	strb	r2, [r3, #0]
		}
	}
	if ((1)) {
		itm_debug3(DBG_CTRL, "BO123:", blk_occup[0], blk_occup[1], blk_occup[2]);
 8013d44:	4b0d      	ldr	r3, [pc, #52]	; (8013d7c <set_block_num_occupency+0x9c>)
 8013d46:	781b      	ldrb	r3, [r3, #0]
 8013d48:	461a      	mov	r2, r3
 8013d4a:	4b0c      	ldr	r3, [pc, #48]	; (8013d7c <set_block_num_occupency+0x9c>)
 8013d4c:	785b      	ldrb	r3, [r3, #1]
 8013d4e:	4619      	mov	r1, r3
 8013d50:	4b0a      	ldr	r3, [pc, #40]	; (8013d7c <set_block_num_occupency+0x9c>)
 8013d52:	789b      	ldrb	r3, [r3, #2]
 8013d54:	9300      	str	r3, [sp, #0]
 8013d56:	460b      	mov	r3, r1
 8013d58:	490b      	ldr	r1, [pc, #44]	; (8013d88 <set_block_num_occupency+0xa8>)
 8013d5a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013d5e:	f7ff fb57 	bl	8013410 <itm_debug3>
	}
    notif_blk_occup_chg(blknum, blk_occup[blknum]);
 8013d62:	4a06      	ldr	r2, [pc, #24]	; (8013d7c <set_block_num_occupency+0x9c>)
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	4413      	add	r3, r2
 8013d68:	781b      	ldrb	r3, [r3, #0]
 8013d6a:	4619      	mov	r1, r3
 8013d6c:	6878      	ldr	r0, [r7, #4]
 8013d6e:	f7ff ff8f 	bl	8013c90 <notif_blk_occup_chg>
}
 8013d72:	bf00      	nop
 8013d74:	3708      	adds	r7, #8
 8013d76:	46bd      	mov	sp, r7
 8013d78:	bd80      	pop	{r7, pc}
 8013d7a:	bf00      	nop
 8013d7c:	2000531c 	.word	0x2000531c
 8013d80:	08019f70 	.word	0x08019f70
 8013d84:	20005324 	.word	0x20005324
 8013d88:	08019f7c 	.word	0x08019f7c

08013d8c <set_block_addr_occupency>:

static void set_block_addr_occupency(uint8_t blkaddr, uint8_t v)
{
 8013d8c:	b580      	push	{r7, lr}
 8013d8e:	b082      	sub	sp, #8
 8013d90:	af00      	add	r7, sp, #0
 8013d92:	4603      	mov	r3, r0
 8013d94:	460a      	mov	r2, r1
 8013d96:	71fb      	strb	r3, [r7, #7]
 8013d98:	4613      	mov	r3, r2
 8013d9a:	71bb      	strb	r3, [r7, #6]
	set_block_num_occupency(_blk_addr_to_blk_num(blkaddr), v);
 8013d9c:	79fb      	ldrb	r3, [r7, #7]
 8013d9e:	4618      	mov	r0, r3
 8013da0:	f7ff fb8f 	bl	80134c2 <_blk_addr_to_blk_num>
 8013da4:	4602      	mov	r2, r0
 8013da6:	79bb      	ldrb	r3, [r7, #6]
 8013da8:	4619      	mov	r1, r3
 8013daa:	4610      	mov	r0, r2
 8013dac:	f7ff ff98 	bl	8013ce0 <set_block_num_occupency>
}
 8013db0:	bf00      	nop
 8013db2:	3708      	adds	r7, #8
 8013db4:	46bd      	mov	sp, r7
 8013db6:	bd80      	pop	{r7, pc}

08013db8 <get_block_num_occupency>:

static uint8_t get_block_num_occupency(int blknum)
{
 8013db8:	b580      	push	{r7, lr}
 8013dba:	b082      	sub	sp, #8
 8013dbc:	af00      	add	r7, sp, #0
 8013dbe:	6078      	str	r0, [r7, #4]
	if (-1 == blknum) fatal();
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013dc6:	d101      	bne.n	8013dcc <get_block_num_occupency+0x14>
 8013dc8:	f7ff fbe8 	bl	801359c <fatal>
	return blk_occup[blknum];
 8013dcc:	4a03      	ldr	r2, [pc, #12]	; (8013ddc <get_block_num_occupency+0x24>)
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	4413      	add	r3, r2
 8013dd2:	781b      	ldrb	r3, [r3, #0]
}
 8013dd4:	4618      	mov	r0, r3
 8013dd6:	3708      	adds	r7, #8
 8013dd8:	46bd      	mov	sp, r7
 8013dda:	bd80      	pop	{r7, pc}
 8013ddc:	2000531c 	.word	0x2000531c

08013de0 <occupied>:
{
	return get_block_num_occupency(_blk_addr_to_blk_num(blkaddr));
}

static uint8_t occupied(int dir)
{
 8013de0:	b480      	push	{r7}
 8013de2:	b083      	sub	sp, #12
 8013de4:	af00      	add	r7, sp, #0
 8013de6:	6078      	str	r0, [r7, #4]
	if (dir<0) return BLK_OCC_LEFT;
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	2b00      	cmp	r3, #0
 8013dec:	da01      	bge.n	8013df2 <occupied+0x12>
 8013dee:	2302      	movs	r3, #2
 8013df0:	e005      	b.n	8013dfe <occupied+0x1e>
	if (dir>0) return BLK_OCC_RIGHT;
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	2b00      	cmp	r3, #0
 8013df6:	dd01      	ble.n	8013dfc <occupied+0x1c>
 8013df8:	2303      	movs	r3, #3
 8013dfa:	e000      	b.n	8013dfe <occupied+0x1e>
	return BLK_OCC_STOP;
 8013dfc:	2301      	movs	r3, #1
}
 8013dfe:	4618      	mov	r0, r3
 8013e00:	370c      	adds	r7, #12
 8013e02:	46bd      	mov	sp, r7
 8013e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e08:	4770      	bx	lr
	...

08013e0c <check_block_delayed>:

static void check_block_delayed(_UNUSED_ uint32_t tick)
{
 8013e0c:	b580      	push	{r7, lr}
 8013e0e:	b084      	sub	sp, #16
 8013e10:	af00      	add	r7, sp, #0
 8013e12:	6078      	str	r0, [r7, #4]
	static int cnt = 0;
	cnt++;
	if (cnt % 10) return;
#else
	static uint32_t lastcheck = 0;
	if (tick<lastcheck+100) return;
 8013e14:	4b22      	ldr	r3, [pc, #136]	; (8013ea0 <check_block_delayed+0x94>)
 8013e16:	681b      	ldr	r3, [r3, #0]
 8013e18:	3364      	adds	r3, #100	; 0x64
 8013e1a:	687a      	ldr	r2, [r7, #4]
 8013e1c:	429a      	cmp	r2, r3
 8013e1e:	d33a      	bcc.n	8013e96 <check_block_delayed+0x8a>
	lastcheck = tick;
 8013e20:	4a1f      	ldr	r2, [pc, #124]	; (8013ea0 <check_block_delayed+0x94>)
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	6013      	str	r3, [r2, #0]
#endif
	for (int i=0; i<NUM_CANTONS; i++) {
 8013e26:	2300      	movs	r3, #0
 8013e28:	60fb      	str	r3, [r7, #12]
 8013e2a:	e030      	b.n	8013e8e <check_block_delayed+0x82>
		if (blk_occup[i] == BLK_OCC_DELAY1) {
 8013e2c:	4a1d      	ldr	r2, [pc, #116]	; (8013ea4 <check_block_delayed+0x98>)
 8013e2e:	68fb      	ldr	r3, [r7, #12]
 8013e30:	4413      	add	r3, r2
 8013e32:	781b      	ldrb	r3, [r3, #0]
 8013e34:	2b10      	cmp	r3, #16
 8013e36:	d116      	bne.n	8013e66 <check_block_delayed+0x5a>
			itm_debug1(DBG_CTRL, "FREE(d)", i);
 8013e38:	68fa      	ldr	r2, [r7, #12]
 8013e3a:	491b      	ldr	r1, [pc, #108]	; (8013ea8 <check_block_delayed+0x9c>)
 8013e3c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013e40:	f7ff fab0 	bl	80133a4 <itm_debug1>
			blk_occup[i] = BLK_OCC_FREE;
 8013e44:	4a17      	ldr	r2, [pc, #92]	; (8013ea4 <check_block_delayed+0x98>)
 8013e46:	68fb      	ldr	r3, [r7, #12]
 8013e48:	4413      	add	r3, r2
 8013e4a:	2200      	movs	r2, #0
 8013e4c:	701a      	strb	r2, [r3, #0]
			occupency_changed = 1;
 8013e4e:	4b17      	ldr	r3, [pc, #92]	; (8013eac <check_block_delayed+0xa0>)
 8013e50:	2201      	movs	r2, #1
 8013e52:	701a      	strb	r2, [r3, #0]
            notif_blk_occup_chg(i, blk_occup[i]);
 8013e54:	4a13      	ldr	r2, [pc, #76]	; (8013ea4 <check_block_delayed+0x98>)
 8013e56:	68fb      	ldr	r3, [r7, #12]
 8013e58:	4413      	add	r3, r2
 8013e5a:	781b      	ldrb	r3, [r3, #0]
 8013e5c:	4619      	mov	r1, r3
 8013e5e:	68f8      	ldr	r0, [r7, #12]
 8013e60:	f7ff ff16 	bl	8013c90 <notif_blk_occup_chg>
 8013e64:	e010      	b.n	8013e88 <check_block_delayed+0x7c>
		} else if (blk_occup[i] > BLK_OCC_DELAY1) {
 8013e66:	4a0f      	ldr	r2, [pc, #60]	; (8013ea4 <check_block_delayed+0x98>)
 8013e68:	68fb      	ldr	r3, [r7, #12]
 8013e6a:	4413      	add	r3, r2
 8013e6c:	781b      	ldrb	r3, [r3, #0]
 8013e6e:	2b10      	cmp	r3, #16
 8013e70:	d90a      	bls.n	8013e88 <check_block_delayed+0x7c>
			blk_occup[i]--;
 8013e72:	4a0c      	ldr	r2, [pc, #48]	; (8013ea4 <check_block_delayed+0x98>)
 8013e74:	68fb      	ldr	r3, [r7, #12]
 8013e76:	4413      	add	r3, r2
 8013e78:	781b      	ldrb	r3, [r3, #0]
 8013e7a:	3b01      	subs	r3, #1
 8013e7c:	b2d9      	uxtb	r1, r3
 8013e7e:	4a09      	ldr	r2, [pc, #36]	; (8013ea4 <check_block_delayed+0x98>)
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	4413      	add	r3, r2
 8013e84:	460a      	mov	r2, r1
 8013e86:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<NUM_CANTONS; i++) {
 8013e88:	68fb      	ldr	r3, [r7, #12]
 8013e8a:	3301      	adds	r3, #1
 8013e8c:	60fb      	str	r3, [r7, #12]
 8013e8e:	68fb      	ldr	r3, [r7, #12]
 8013e90:	2b07      	cmp	r3, #7
 8013e92:	ddcb      	ble.n	8013e2c <check_block_delayed+0x20>
 8013e94:	e000      	b.n	8013e98 <check_block_delayed+0x8c>
	if (tick<lastcheck+100) return;
 8013e96:	bf00      	nop
		}
	}
}
 8013e98:	3710      	adds	r7, #16
 8013e9a:	46bd      	mov	sp, r7
 8013e9c:	bd80      	pop	{r7, pc}
 8013e9e:	bf00      	nop
 8013ea0:	20005328 	.word	0x20005328
 8013ea4:	2000531c 	.word	0x2000531c
 8013ea8:	08019f84 	.word	0x08019f84
 8013eac:	20005324 	.word	0x20005324

08013eb0 <evt_entered_c2>:




static void evt_entered_c2(int tidx, train_ctrl_t *tvar, uint8_t from_bemf)
{
 8013eb0:	b590      	push	{r4, r7, lr}
 8013eb2:	b085      	sub	sp, #20
 8013eb4:	af00      	add	r7, sp, #0
 8013eb6:	60f8      	str	r0, [r7, #12]
 8013eb8:	60b9      	str	r1, [r7, #8]
 8013eba:	4613      	mov	r3, r2
 8013ebc:	71fb      	strb	r3, [r7, #7]
	if (from_bemf && ignore_bemf_presence) return;
 8013ebe:	79fb      	ldrb	r3, [r7, #7]
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	d003      	beq.n	8013ecc <evt_entered_c2+0x1c>
 8013ec4:	4b20      	ldr	r3, [pc, #128]	; (8013f48 <evt_entered_c2+0x98>)
 8013ec6:	781b      	ldrb	r3, [r3, #0]
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d136      	bne.n	8013f3a <evt_entered_c2+0x8a>
	switch (tvar->_state) {
 8013ecc:	68bb      	ldr	r3, [r7, #8]
 8013ece:	785b      	ldrb	r3, [r3, #1]
 8013ed0:	2b01      	cmp	r3, #1
 8013ed2:	d002      	beq.n	8013eda <evt_entered_c2+0x2a>
 8013ed4:	2b02      	cmp	r3, #2
 8013ed6:	d032      	beq.n	8013f3e <evt_entered_c2+0x8e>
 8013ed8:	e026      	b.n	8013f28 <evt_entered_c2+0x78>
	case train_running_c1:
		if (from_bemf && ignore_ina_presence) {
 8013eda:	79fb      	ldrb	r3, [r7, #7]
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d00a      	beq.n	8013ef6 <evt_entered_c2+0x46>
 8013ee0:	4b1a      	ldr	r3, [pc, #104]	; (8013f4c <evt_entered_c2+0x9c>)
 8013ee2:	781b      	ldrb	r3, [r3, #0]
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d006      	beq.n	8013ef6 <evt_entered_c2+0x46>
			set_timer(tidx, tvar, TLEAVE_C1, TLEAVE_C1_VALUE);
 8013ee8:	2314      	movs	r3, #20
 8013eea:	2200      	movs	r2, #0
 8013eec:	68b9      	ldr	r1, [r7, #8]
 8013eee:	68f8      	ldr	r0, [r7, #12]
 8013ef0:	f7ff fcac 	bl	801384c <set_timer>
 8013ef4:	e005      	b.n	8013f02 <evt_entered_c2+0x52>
		} else {
			set_timer(tidx, tvar, TLEAVE_C1, TGUARD_C1_VALUE);
 8013ef6:	2364      	movs	r3, #100	; 0x64
 8013ef8:	2200      	movs	r2, #0
 8013efa:	68b9      	ldr	r1, [r7, #8]
 8013efc:	68f8      	ldr	r0, [r7, #12]
 8013efe:	f7ff fca5 	bl	801384c <set_timer>
		}
		set_block_addr_occupency(tvar->canton2_addr, occupied(tvar->_dir));
 8013f02:	68bb      	ldr	r3, [r7, #8]
 8013f04:	799c      	ldrb	r4, [r3, #6]
 8013f06:	68bb      	ldr	r3, [r7, #8]
 8013f08:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8013f0c:	4618      	mov	r0, r3
 8013f0e:	f7ff ff67 	bl	8013de0 <occupied>
 8013f12:	4603      	mov	r3, r0
 8013f14:	4619      	mov	r1, r3
 8013f16:	4620      	mov	r0, r4
 8013f18:	f7ff ff38 	bl	8013d8c <set_block_addr_occupency>
		set_state(tidx, tvar, train_running_c1c2);
 8013f1c:	2202      	movs	r2, #2
 8013f1e:	68b9      	ldr	r1, [r7, #8]
 8013f20:	68f8      	ldr	r0, [r7, #12]
 8013f22:	f7ff fb53 	bl	80135cc <set_state>
		break;
 8013f26:	e00b      	b.n	8013f40 <evt_entered_c2+0x90>
	case train_running_c1c2:
		break;
	default:
		itm_debug2(DBG_ERR|DBG_CTRL, "bad st/1",tidx, tvar->_state);
 8013f28:	68bb      	ldr	r3, [r7, #8]
 8013f2a:	785b      	ldrb	r3, [r3, #1]
 8013f2c:	68fa      	ldr	r2, [r7, #12]
 8013f2e:	4908      	ldr	r1, [pc, #32]	; (8013f50 <evt_entered_c2+0xa0>)
 8013f30:	4808      	ldr	r0, [pc, #32]	; (8013f54 <evt_entered_c2+0xa4>)
 8013f32:	f7ff fa51 	bl	80133d8 <itm_debug2>
		break;
 8013f36:	bf00      	nop
 8013f38:	e002      	b.n	8013f40 <evt_entered_c2+0x90>
	if (from_bemf && ignore_bemf_presence) return;
 8013f3a:	bf00      	nop
 8013f3c:	e000      	b.n	8013f40 <evt_entered_c2+0x90>
		break;
 8013f3e:	bf00      	nop
	}
}
 8013f40:	3714      	adds	r7, #20
 8013f42:	46bd      	mov	sp, r7
 8013f44:	bd90      	pop	{r4, r7, pc}
 8013f46:	bf00      	nop
 8013f48:	20005257 	.word	0x20005257
 8013f4c:	20000232 	.word	0x20000232
 8013f50:	08019f8c 	.word	0x08019f8c
 8013f54:	80000400 	.word	0x80000400

08013f58 <evt_leaved_c1>:

static void evt_leaved_c1(int tidx, train_ctrl_t *tvars)
{
 8013f58:	b580      	push	{r7, lr}
 8013f5a:	b082      	sub	sp, #8
 8013f5c:	af00      	add	r7, sp, #0
 8013f5e:	6078      	str	r0, [r7, #4]
 8013f60:	6039      	str	r1, [r7, #0]
	itm_debug2(DBG_CTRL, "evt_left_c1", tidx, tvars->_state);
 8013f62:	683b      	ldr	r3, [r7, #0]
 8013f64:	785b      	ldrb	r3, [r3, #1]
 8013f66:	687a      	ldr	r2, [r7, #4]
 8013f68:	491c      	ldr	r1, [pc, #112]	; (8013fdc <evt_leaved_c1+0x84>)
 8013f6a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013f6e:	f7ff fa33 	bl	80133d8 <itm_debug2>
	switch (tvars->_state) {
 8013f72:	683b      	ldr	r3, [r7, #0]
 8013f74:	785b      	ldrb	r3, [r3, #1]
 8013f76:	2b02      	cmp	r3, #2
 8013f78:	d123      	bne.n	8013fc2 <evt_leaved_c1+0x6a>
	case train_running_c1c2:
		reset_timer(tidx, tvars, TLEAVE_C1);
 8013f7a:	2200      	movs	r2, #0
 8013f7c:	6839      	ldr	r1, [r7, #0]
 8013f7e:	6878      	ldr	r0, [r7, #4]
 8013f80:	f7ff fc42 	bl	8013808 <reset_timer>
		set_block_addr_occupency(tvars->canton1_addr, BLK_OCC_FREE);
 8013f84:	683b      	ldr	r3, [r7, #0]
 8013f86:	795b      	ldrb	r3, [r3, #5]
 8013f88:	2100      	movs	r1, #0
 8013f8a:	4618      	mov	r0, r3
 8013f8c:	f7ff fefe 	bl	8013d8c <set_block_addr_occupency>
		tvars->canton1_addr = tvars->canton2_addr;
 8013f90:	683b      	ldr	r3, [r7, #0]
 8013f92:	799a      	ldrb	r2, [r3, #6]
 8013f94:	683b      	ldr	r3, [r7, #0]
 8013f96:	715a      	strb	r2, [r3, #5]
		tvars->canton2_addr = 0xFF;
 8013f98:	683b      	ldr	r3, [r7, #0]
 8013f9a:	22ff      	movs	r2, #255	; 0xff
 8013f9c:	719a      	strb	r2, [r3, #6]
		set_state(tidx, tvars, train_running_c1);
 8013f9e:	2201      	movs	r2, #1
 8013fa0:	6839      	ldr	r1, [r7, #0]
 8013fa2:	6878      	ldr	r0, [r7, #4]
 8013fa4:	f7ff fb12 	bl	80135cc <set_state>
		update_c2_state_limits(tidx, tvars, upd_c1c2);
 8013fa8:	2202      	movs	r2, #2
 8013faa:	6839      	ldr	r1, [r7, #0]
 8013fac:	6878      	ldr	r0, [r7, #4]
 8013fae:	f000 fa0d 	bl	80143cc <update_c2_state_limits>
		tvars->behaviour_flags |= BEHAVE_CHBKLK;
 8013fb2:	683b      	ldr	r3, [r7, #0]
 8013fb4:	899b      	ldrh	r3, [r3, #12]
 8013fb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013fba:	b29a      	uxth	r2, r3
 8013fbc:	683b      	ldr	r3, [r7, #0]
 8013fbe:	819a      	strh	r2, [r3, #12]
		break;
 8013fc0:	e007      	b.n	8013fd2 <evt_leaved_c1+0x7a>
	default:
		itm_debug2(DBG_ERR|DBG_CTRL, "bad st/2",tidx, tvars->_state);
 8013fc2:	683b      	ldr	r3, [r7, #0]
 8013fc4:	785b      	ldrb	r3, [r3, #1]
 8013fc6:	687a      	ldr	r2, [r7, #4]
 8013fc8:	4905      	ldr	r1, [pc, #20]	; (8013fe0 <evt_leaved_c1+0x88>)
 8013fca:	4806      	ldr	r0, [pc, #24]	; (8013fe4 <evt_leaved_c1+0x8c>)
 8013fcc:	f7ff fa04 	bl	80133d8 <itm_debug2>
		break;
 8013fd0:	bf00      	nop
	}
}
 8013fd2:	bf00      	nop
 8013fd4:	3708      	adds	r7, #8
 8013fd6:	46bd      	mov	sp, r7
 8013fd8:	bd80      	pop	{r7, pc}
 8013fda:	bf00      	nop
 8013fdc:	08019f98 	.word	0x08019f98
 8013fe0:	08019fa4 	.word	0x08019fa4
 8013fe4:	80000400 	.word	0x80000400

08013fe8 <evt_entered_c1>:

static void evt_entered_c1(int tidx, train_ctrl_t *tvars, _UNUSED_ uint8_t from_bemf)
{
 8013fe8:	b580      	push	{r7, lr}
 8013fea:	b084      	sub	sp, #16
 8013fec:	af00      	add	r7, sp, #0
 8013fee:	60f8      	str	r0, [r7, #12]
 8013ff0:	60b9      	str	r1, [r7, #8]
 8013ff2:	4613      	mov	r3, r2
 8013ff4:	71fb      	strb	r3, [r7, #7]
	itm_debug2(DBG_CTRL, "enter C1", tidx, tvars->_state);
 8013ff6:	68bb      	ldr	r3, [r7, #8]
 8013ff8:	785b      	ldrb	r3, [r3, #1]
 8013ffa:	68fa      	ldr	r2, [r7, #12]
 8013ffc:	4904      	ldr	r1, [pc, #16]	; (8014010 <evt_entered_c1+0x28>)
 8013ffe:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8014002:	f7ff f9e9 	bl	80133d8 <itm_debug2>
}
 8014006:	bf00      	nop
 8014008:	3710      	adds	r7, #16
 801400a:	46bd      	mov	sp, r7
 801400c:	bd80      	pop	{r7, pc}
 801400e:	bf00      	nop
 8014010:	08019fb0 	.word	0x08019fb0

08014014 <evt_leaved_c2>:
static void evt_leaved_c2(int tidx, train_ctrl_t *tvar)
{
 8014014:	b580      	push	{r7, lr}
 8014016:	b082      	sub	sp, #8
 8014018:	af00      	add	r7, sp, #0
 801401a:	6078      	str	r0, [r7, #4]
 801401c:	6039      	str	r1, [r7, #0]
	itm_debug2(DBG_CTRL, "leave C2", tidx, tvar->_state);
 801401e:	683b      	ldr	r3, [r7, #0]
 8014020:	785b      	ldrb	r3, [r3, #1]
 8014022:	687a      	ldr	r2, [r7, #4]
 8014024:	4904      	ldr	r1, [pc, #16]	; (8014038 <evt_leaved_c2+0x24>)
 8014026:	f44f 6080 	mov.w	r0, #1024	; 0x400
 801402a:	f7ff f9d5 	bl	80133d8 <itm_debug2>
}
 801402e:	bf00      	nop
 8014030:	3708      	adds	r7, #8
 8014032:	46bd      	mov	sp, r7
 8014034:	bd80      	pop	{r7, pc}
 8014036:	bf00      	nop
 8014038:	08019fbc 	.word	0x08019fbc

0801403c <evt_tleave>:

static void evt_tleave(int tidx, train_ctrl_t *tvars)
{
 801403c:	b580      	push	{r7, lr}
 801403e:	b082      	sub	sp, #8
 8014040:	af00      	add	r7, sp, #0
 8014042:	6078      	str	r0, [r7, #4]
 8014044:	6039      	str	r1, [r7, #0]
	if (ignore_ina_presence) {
 8014046:	4b15      	ldr	r3, [pc, #84]	; (801409c <evt_tleave+0x60>)
 8014048:	781b      	ldrb	r3, [r3, #0]
 801404a:	2b00      	cmp	r3, #0
 801404c:	d00b      	beq.n	8014066 <evt_tleave+0x2a>
		itm_debug2(DBG_ERR|DBG_CTRL, "TLeave", tidx, tvars->_state);
 801404e:	683b      	ldr	r3, [r7, #0]
 8014050:	785b      	ldrb	r3, [r3, #1]
 8014052:	687a      	ldr	r2, [r7, #4]
 8014054:	4912      	ldr	r1, [pc, #72]	; (80140a0 <evt_tleave+0x64>)
 8014056:	4813      	ldr	r0, [pc, #76]	; (80140a4 <evt_tleave+0x68>)
 8014058:	f7ff f9be 	bl	80133d8 <itm_debug2>
		evt_leaved_c1(tidx, tvars);
 801405c:	6839      	ldr	r1, [r7, #0]
 801405e:	6878      	ldr	r0, [r7, #4]
 8014060:	f7ff ff7a 	bl	8013f58 <evt_leaved_c1>
		// for now we do the same, but more to do for long trains
		evt_leaved_c1(tidx, tvars);
	} else {
		itm_debug2(DBG_ERR|DBG_CTRL, "TGurd/bdst", tidx, tvars->_state);
	}
}
 8014064:	e016      	b.n	8014094 <evt_tleave+0x58>
	} else if (tvars->_state == train_running_c1c2){
 8014066:	683b      	ldr	r3, [r7, #0]
 8014068:	785b      	ldrb	r3, [r3, #1]
 801406a:	2b02      	cmp	r3, #2
 801406c:	d10b      	bne.n	8014086 <evt_tleave+0x4a>
		itm_debug2(DBG_ERR|DBG_CTRL, "TGuard", tidx, tvars->_state);
 801406e:	683b      	ldr	r3, [r7, #0]
 8014070:	785b      	ldrb	r3, [r3, #1]
 8014072:	687a      	ldr	r2, [r7, #4]
 8014074:	490c      	ldr	r1, [pc, #48]	; (80140a8 <evt_tleave+0x6c>)
 8014076:	480b      	ldr	r0, [pc, #44]	; (80140a4 <evt_tleave+0x68>)
 8014078:	f7ff f9ae 	bl	80133d8 <itm_debug2>
		evt_leaved_c1(tidx, tvars);
 801407c:	6839      	ldr	r1, [r7, #0]
 801407e:	6878      	ldr	r0, [r7, #4]
 8014080:	f7ff ff6a 	bl	8013f58 <evt_leaved_c1>
}
 8014084:	e006      	b.n	8014094 <evt_tleave+0x58>
		itm_debug2(DBG_ERR|DBG_CTRL, "TGurd/bdst", tidx, tvars->_state);
 8014086:	683b      	ldr	r3, [r7, #0]
 8014088:	785b      	ldrb	r3, [r3, #1]
 801408a:	687a      	ldr	r2, [r7, #4]
 801408c:	4907      	ldr	r1, [pc, #28]	; (80140ac <evt_tleave+0x70>)
 801408e:	4805      	ldr	r0, [pc, #20]	; (80140a4 <evt_tleave+0x68>)
 8014090:	f7ff f9a2 	bl	80133d8 <itm_debug2>
}
 8014094:	bf00      	nop
 8014096:	3708      	adds	r7, #8
 8014098:	46bd      	mov	sp, r7
 801409a:	bd80      	pop	{r7, pc}
 801409c:	20000232 	.word	0x20000232
 80140a0:	08019fc8 	.word	0x08019fc8
 80140a4:	80000400 	.word	0x80000400
 80140a8:	08019fd0 	.word	0x08019fd0
 80140ac:	08019fd8 	.word	0x08019fd8

080140b0 <evt_cmd_set_setdirspeed>:

static void evt_cmd_set_setdirspeed(int tidx, train_ctrl_t *tvars, int8_t dir, uint16_t tspd, _UNUSED_ uint8_t generated)
{
 80140b0:	b580      	push	{r7, lr}
 80140b2:	b088      	sub	sp, #32
 80140b4:	af02      	add	r7, sp, #8
 80140b6:	60f8      	str	r0, [r7, #12]
 80140b8:	60b9      	str	r1, [r7, #8]
 80140ba:	4611      	mov	r1, r2
 80140bc:	461a      	mov	r2, r3
 80140be:	460b      	mov	r3, r1
 80140c0:	71fb      	strb	r3, [r7, #7]
 80140c2:	4613      	mov	r3, r2
 80140c4:	80bb      	strh	r3, [r7, #4]
	itm_debug3(DBG_CTRL, "dirspd", tidx, dir, tspd);
 80140c6:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80140ca:	88bb      	ldrh	r3, [r7, #4]
 80140cc:	9300      	str	r3, [sp, #0]
 80140ce:	4613      	mov	r3, r2
 80140d0:	68fa      	ldr	r2, [r7, #12]
 80140d2:	4973      	ldr	r1, [pc, #460]	; (80142a0 <evt_cmd_set_setdirspeed+0x1f0>)
 80140d4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80140d8:	f7ff f99a 	bl	8013410 <itm_debug3>

	if (tvars->_state == train_off) {
 80140dc:	68bb      	ldr	r3, [r7, #8]
 80140de:	785b      	ldrb	r3, [r3, #1]
 80140e0:	2b00      	cmp	r3, #0
 80140e2:	d105      	bne.n	80140f0 <evt_cmd_set_setdirspeed+0x40>
		itm_debug1(DBG_ERR|DBG_CTRL, "dir ch off", tidx);
 80140e4:	68fa      	ldr	r2, [r7, #12]
 80140e6:	496f      	ldr	r1, [pc, #444]	; (80142a4 <evt_cmd_set_setdirspeed+0x1f4>)
 80140e8:	486f      	ldr	r0, [pc, #444]	; (80142a8 <evt_cmd_set_setdirspeed+0x1f8>)
 80140ea:	f7ff f95b 	bl	80133a4 <itm_debug1>
		return;
 80140ee:	e0d4      	b.n	801429a <evt_cmd_set_setdirspeed+0x1ea>
	}
	int8_t odir = tvars->_dir;
 80140f0:	68bb      	ldr	r3, [r7, #8]
 80140f2:	791b      	ldrb	r3, [r3, #4]
 80140f4:	75fb      	strb	r3, [r7, #23]
	uint16_t otspd = tvars->_target_speed;
 80140f6:	68bb      	ldr	r3, [r7, #8]
 80140f8:	885b      	ldrh	r3, [r3, #2]
 80140fa:	82bb      	strh	r3, [r7, #20]

	if (!dir && tspd) {
 80140fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014100:	2b00      	cmp	r3, #0
 8014102:	d10a      	bne.n	801411a <evt_cmd_set_setdirspeed+0x6a>
 8014104:	88bb      	ldrh	r3, [r7, #4]
 8014106:	2b00      	cmp	r3, #0
 8014108:	d007      	beq.n	801411a <evt_cmd_set_setdirspeed+0x6a>
		itm_debug2(DBG_ERR|DBG_CTRL, "dir0spd", tidx, tspd);
 801410a:	88bb      	ldrh	r3, [r7, #4]
 801410c:	68fa      	ldr	r2, [r7, #12]
 801410e:	4967      	ldr	r1, [pc, #412]	; (80142ac <evt_cmd_set_setdirspeed+0x1fc>)
 8014110:	4865      	ldr	r0, [pc, #404]	; (80142a8 <evt_cmd_set_setdirspeed+0x1f8>)
 8014112:	f7ff f961 	bl	80133d8 <itm_debug2>
		tspd = 0;
 8014116:	2300      	movs	r3, #0
 8014118:	80bb      	strh	r3, [r7, #4]
	}
	if (!tspd && dir) {
 801411a:	88bb      	ldrh	r3, [r7, #4]
 801411c:	2b00      	cmp	r3, #0
 801411e:	d10c      	bne.n	801413a <evt_cmd_set_setdirspeed+0x8a>
 8014120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014124:	2b00      	cmp	r3, #0
 8014126:	d008      	beq.n	801413a <evt_cmd_set_setdirspeed+0x8a>
		itm_debug2(DBG_ERR|DBG_CTRL, "spd0dir", tidx, dir);
 8014128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801412c:	68fa      	ldr	r2, [r7, #12]
 801412e:	4960      	ldr	r1, [pc, #384]	; (80142b0 <evt_cmd_set_setdirspeed+0x200>)
 8014130:	485d      	ldr	r0, [pc, #372]	; (80142a8 <evt_cmd_set_setdirspeed+0x1f8>)
 8014132:	f7ff f951 	bl	80133d8 <itm_debug2>
		dir = 0;
 8014136:	2300      	movs	r3, #0
 8014138:	71fb      	strb	r3, [r7, #7]
	}
	tvars->desired_speed = tspd;
 801413a:	68bb      	ldr	r3, [r7, #8]
 801413c:	88ba      	ldrh	r2, [r7, #4]
 801413e:	815a      	strh	r2, [r3, #10]

	if ((tspd == otspd) && (dir == odir)) {
 8014140:	88ba      	ldrh	r2, [r7, #4]
 8014142:	8abb      	ldrh	r3, [r7, #20]
 8014144:	429a      	cmp	r2, r3
 8014146:	d111      	bne.n	801416c <evt_cmd_set_setdirspeed+0xbc>
 8014148:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801414c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014150:	429a      	cmp	r2, r3
 8014152:	d10b      	bne.n	801416c <evt_cmd_set_setdirspeed+0xbc>
		// no change
		itm_debug3(DBG_CTRL, "dirspd/=", tidx, dir, tspd);
 8014154:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8014158:	88bb      	ldrh	r3, [r7, #4]
 801415a:	9300      	str	r3, [sp, #0]
 801415c:	4613      	mov	r3, r2
 801415e:	68fa      	ldr	r2, [r7, #12]
 8014160:	4954      	ldr	r1, [pc, #336]	; (80142b4 <evt_cmd_set_setdirspeed+0x204>)
 8014162:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8014166:	f7ff f953 	bl	8013410 <itm_debug3>
		return;
 801416a:	e096      	b.n	801429a <evt_cmd_set_setdirspeed+0x1ea>
	}
	if ((tvars->_target_speed != 0) && (tvars->_dir != dir)) {
 801416c:	68bb      	ldr	r3, [r7, #8]
 801416e:	885b      	ldrh	r3, [r3, #2]
 8014170:	2b00      	cmp	r3, #0
 8014172:	d016      	beq.n	80141a2 <evt_cmd_set_setdirspeed+0xf2>
 8014174:	68bb      	ldr	r3, [r7, #8]
 8014176:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801417a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801417e:	429a      	cmp	r2, r3
 8014180:	d00f      	beq.n	80141a2 <evt_cmd_set_setdirspeed+0xf2>
		itm_debug3(DBG_ERR|DBG_CTRL, "dir ch mov", tidx, dir, tvars->_target_speed);
 8014182:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8014186:	68bb      	ldr	r3, [r7, #8]
 8014188:	885b      	ldrh	r3, [r3, #2]
 801418a:	9300      	str	r3, [sp, #0]
 801418c:	4613      	mov	r3, r2
 801418e:	68fa      	ldr	r2, [r7, #12]
 8014190:	4949      	ldr	r1, [pc, #292]	; (80142b8 <evt_cmd_set_setdirspeed+0x208>)
 8014192:	4845      	ldr	r0, [pc, #276]	; (80142a8 <evt_cmd_set_setdirspeed+0x1f8>)
 8014194:	f7ff f93c 	bl	8013410 <itm_debug3>
		set_state(tidx, tvars, train_station); // say it did stopped
 8014198:	2203      	movs	r2, #3
 801419a:	68b9      	ldr	r1, [r7, #8]
 801419c:	68f8      	ldr	r0, [r7, #12]
 801419e:	f7ff fa15 	bl	80135cc <set_state>
		// change dir while not stopped... what do we do here ?
	}
	if ((tvars->_state == train_station) && dir && tspd) {
 80141a2:	68bb      	ldr	r3, [r7, #8]
 80141a4:	785b      	ldrb	r3, [r3, #1]
 80141a6:	2b03      	cmp	r3, #3
 80141a8:	d120      	bne.n	80141ec <evt_cmd_set_setdirspeed+0x13c>
 80141aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	d01c      	beq.n	80141ec <evt_cmd_set_setdirspeed+0x13c>
 80141b2:	88bb      	ldrh	r3, [r7, #4]
 80141b4:	2b00      	cmp	r3, #0
 80141b6:	d019      	beq.n	80141ec <evt_cmd_set_setdirspeed+0x13c>
		itm_debug1(DBG_CTRL, "quit stop", tidx);
 80141b8:	68fa      	ldr	r2, [r7, #12]
 80141ba:	4940      	ldr	r1, [pc, #256]	; (80142bc <evt_cmd_set_setdirspeed+0x20c>)
 80141bc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80141c0:	f7ff f8f0 	bl	80133a4 <itm_debug1>
		odir = 0;
 80141c4:	2300      	movs	r3, #0
 80141c6:	75fb      	strb	r3, [r7, #23]
		set_state(tidx, tvars, train_running_c1);
 80141c8:	2201      	movs	r2, #1
 80141ca:	68b9      	ldr	r1, [r7, #8]
 80141cc:	68f8      	ldr	r0, [r7, #12]
 80141ce:	f7ff f9fd 	bl	80135cc <set_state>
		set_block_addr_occupency(tvars->canton1_addr, (dir>0)? BLK_OCC_RIGHT:BLK_OCC_LEFT);
 80141d2:	68bb      	ldr	r3, [r7, #8]
 80141d4:	795a      	ldrb	r2, [r3, #5]
 80141d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80141da:	2b00      	cmp	r3, #0
 80141dc:	dd01      	ble.n	80141e2 <evt_cmd_set_setdirspeed+0x132>
 80141de:	2303      	movs	r3, #3
 80141e0:	e000      	b.n	80141e4 <evt_cmd_set_setdirspeed+0x134>
 80141e2:	2302      	movs	r3, #2
 80141e4:	4619      	mov	r1, r3
 80141e6:	4610      	mov	r0, r2
 80141e8:	f7ff fdd0 	bl	8013d8c <set_block_addr_occupency>
	}
	if (tvars->_state == train_running_c1c2 && (odir != dir) && dir) {
 80141ec:	68bb      	ldr	r3, [r7, #8]
 80141ee:	785b      	ldrb	r3, [r3, #1]
 80141f0:	2b02      	cmp	r3, #2
 80141f2:	d10e      	bne.n	8014212 <evt_cmd_set_setdirspeed+0x162>
 80141f4:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80141f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80141fc:	429a      	cmp	r2, r3
 80141fe:	d008      	beq.n	8014212 <evt_cmd_set_setdirspeed+0x162>
 8014200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014204:	2b00      	cmp	r3, #0
 8014206:	d004      	beq.n	8014212 <evt_cmd_set_setdirspeed+0x162>
		// special care here TODO when reversing change while in c1 to c2 transition
		// TODO
		itm_debug1(DBG_ERR|DBG_CTRL, "c1c2 rev!", tidx);
 8014208:	68fa      	ldr	r2, [r7, #12]
 801420a:	492d      	ldr	r1, [pc, #180]	; (80142c0 <evt_cmd_set_setdirspeed+0x210>)
 801420c:	4826      	ldr	r0, [pc, #152]	; (80142a8 <evt_cmd_set_setdirspeed+0x1f8>)
 801420e:	f7ff f8c9 	bl	80133a4 <itm_debug1>
	}

	if (dir != odir) {
 8014212:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8014216:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801421a:	429a      	cmp	r2, r3
 801421c:	d025      	beq.n	801426a <evt_cmd_set_setdirspeed+0x1ba>
		tvars->_dir = dir;
 801421e:	68bb      	ldr	r3, [r7, #8]
 8014220:	79fa      	ldrb	r2, [r7, #7]
 8014222:	711a      	strb	r2, [r3, #4]
		if (!dir) {
 8014224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014228:	2b00      	cmp	r3, #0
 801422a:	d10c      	bne.n	8014246 <evt_cmd_set_setdirspeed+0x196>
			itm_debug1(DBG_CTRL, "stopping", tidx);
 801422c:	68fa      	ldr	r2, [r7, #12]
 801422e:	4925      	ldr	r1, [pc, #148]	; (80142c4 <evt_cmd_set_setdirspeed+0x214>)
 8014230:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8014234:	f7ff f8b6 	bl	80133a4 <itm_debug1>
			set_block_addr_occupency(tvars->canton1_addr, BLK_OCC_STOP);
 8014238:	68bb      	ldr	r3, [r7, #8]
 801423a:	795b      	ldrb	r3, [r3, #5]
 801423c:	2101      	movs	r1, #1
 801423e:	4618      	mov	r0, r3
 8014240:	f7ff fda4 	bl	8013d8c <set_block_addr_occupency>
 8014244:	e00c      	b.n	8014260 <evt_cmd_set_setdirspeed+0x1b0>
		} else {
			set_block_addr_occupency(tvars->canton1_addr, (dir>0)? BLK_OCC_RIGHT:BLK_OCC_LEFT);
 8014246:	68bb      	ldr	r3, [r7, #8]
 8014248:	795a      	ldrb	r2, [r3, #5]
 801424a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801424e:	2b00      	cmp	r3, #0
 8014250:	dd01      	ble.n	8014256 <evt_cmd_set_setdirspeed+0x1a6>
 8014252:	2303      	movs	r3, #3
 8014254:	e000      	b.n	8014258 <evt_cmd_set_setdirspeed+0x1a8>
 8014256:	2302      	movs	r3, #2
 8014258:	4619      	mov	r1, r3
 801425a:	4610      	mov	r0, r2
 801425c:	f7ff fd96 	bl	8013d8c <set_block_addr_occupency>
		}
		update_c2_state_limits(tidx, tvars, upd_change_dir);
 8014260:	2201      	movs	r2, #1
 8014262:	68b9      	ldr	r1, [r7, #8]
 8014264:	68f8      	ldr	r0, [r7, #12]
 8014266:	f000 f8b1 	bl	80143cc <update_c2_state_limits>
	}

	ctrl_set_dir(tidx, tvars, dir, 0);
 801426a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801426e:	2300      	movs	r3, #0
 8014270:	68b9      	ldr	r1, [r7, #8]
 8014272:	68f8      	ldr	r0, [r7, #12]
 8014274:	f000 fb42 	bl	80148fc <ctrl_set_dir>

	if (tvars->_mode != train_fullmanual) {
 8014278:	68bb      	ldr	r3, [r7, #8]
 801427a:	781b      	ldrb	r3, [r3, #0]
 801427c:	2b02      	cmp	r3, #2
 801427e:	d006      	beq.n	801428e <evt_cmd_set_setdirspeed+0x1de>
		tspd = MIN(tvars->spd_limit, tspd);
 8014280:	68bb      	ldr	r3, [r7, #8]
 8014282:	891b      	ldrh	r3, [r3, #8]
 8014284:	88ba      	ldrh	r2, [r7, #4]
 8014286:	4293      	cmp	r3, r2
 8014288:	bf28      	it	cs
 801428a:	4613      	movcs	r3, r2
 801428c:	80bb      	strh	r3, [r7, #4]
	}
	//ctrl_set_status(tidx, tspd ? train_running : train_station);
	ctrl_set_tspeed(tidx, tvars, tspd);
 801428e:	88bb      	ldrh	r3, [r7, #4]
 8014290:	461a      	mov	r2, r3
 8014292:	68b9      	ldr	r1, [r7, #8]
 8014294:	68f8      	ldr	r0, [r7, #12]
 8014296:	f000 fadd 	bl	8014854 <ctrl_set_tspeed>
}
 801429a:	3718      	adds	r7, #24
 801429c:	46bd      	mov	sp, r7
 801429e:	bd80      	pop	{r7, pc}
 80142a0:	08019fe4 	.word	0x08019fe4
 80142a4:	08019fec 	.word	0x08019fec
 80142a8:	80000400 	.word	0x80000400
 80142ac:	08019ff8 	.word	0x08019ff8
 80142b0:	0801a000 	.word	0x0801a000
 80142b4:	0801a008 	.word	0x0801a008
 80142b8:	0801a014 	.word	0x0801a014
 80142bc:	0801a020 	.word	0x0801a020
 80142c0:	0801a02c 	.word	0x0801a02c
 80142c4:	0801a038 	.word	0x0801a038

080142c8 <evt_pose_triggered>:


static void evt_pose_triggered(int tidx, train_ctrl_t *tvar, uint8_t c_addr)
{
 80142c8:	b580      	push	{r7, lr}
 80142ca:	b086      	sub	sp, #24
 80142cc:	af02      	add	r7, sp, #8
 80142ce:	60f8      	str	r0, [r7, #12]
 80142d0:	60b9      	str	r1, [r7, #8]
 80142d2:	4613      	mov	r3, r2
 80142d4:	71fb      	strb	r3, [r7, #7]
	itm_debug3(DBG_CTRL, "pose trgd", tidx, c_addr, tvar->_state);
 80142d6:	79fa      	ldrb	r2, [r7, #7]
 80142d8:	68bb      	ldr	r3, [r7, #8]
 80142da:	785b      	ldrb	r3, [r3, #1]
 80142dc:	9300      	str	r3, [sp, #0]
 80142de:	4613      	mov	r3, r2
 80142e0:	68fa      	ldr	r2, [r7, #12]
 80142e2:	491a      	ldr	r1, [pc, #104]	; (801434c <evt_pose_triggered+0x84>)
 80142e4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80142e8:	f7ff f892 	bl	8013410 <itm_debug3>
	if (0==tidx) {
 80142ec:	68fb      	ldr	r3, [r7, #12]
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d107      	bne.n	8014302 <evt_pose_triggered+0x3a>
		itm_debug2(DBG_CTRL, "----trg0", c_addr, tvar->_state);
 80142f2:	79fa      	ldrb	r2, [r7, #7]
 80142f4:	68bb      	ldr	r3, [r7, #8]
 80142f6:	785b      	ldrb	r3, [r3, #1]
 80142f8:	4915      	ldr	r1, [pc, #84]	; (8014350 <evt_pose_triggered+0x88>)
 80142fa:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80142fe:	f7ff f86b 	bl	80133d8 <itm_debug2>
	}
	switch (tvar->_state) {
 8014302:	68bb      	ldr	r3, [r7, #8]
 8014304:	785b      	ldrb	r3, [r3, #1]
 8014306:	2b01      	cmp	r3, #1
 8014308:	d115      	bne.n	8014336 <evt_pose_triggered+0x6e>
	case train_running_c1:
		if (c_addr == tvar->canton1_addr) {
 801430a:	68bb      	ldr	r3, [r7, #8]
 801430c:	795b      	ldrb	r3, [r3, #5]
 801430e:	79fa      	ldrb	r2, [r7, #7]
 8014310:	429a      	cmp	r2, r3
 8014312:	d105      	bne.n	8014320 <evt_pose_triggered+0x58>
			update_c2_state_limits(tidx, tvar, upd_pose_trig);
 8014314:	2203      	movs	r2, #3
 8014316:	68b9      	ldr	r1, [r7, #8]
 8014318:	68f8      	ldr	r0, [r7, #12]
 801431a:	f000 f857 	bl	80143cc <update_c2_state_limits>
			//hi_pose_triggered(tidx, tvar, _blk_addr_to_blk_num(c_addr));
			// TODO
		} else {
			itm_debug3(DBG_ERR|DBG_POSE|DBG_CTRL, "ptrg bad", tidx, c_addr, tvar->canton1_addr);
		}
		break;
 801431e:	e011      	b.n	8014344 <evt_pose_triggered+0x7c>
			itm_debug3(DBG_ERR|DBG_POSE|DBG_CTRL, "ptrg bad", tidx, c_addr, tvar->canton1_addr);
 8014320:	79fa      	ldrb	r2, [r7, #7]
 8014322:	68bb      	ldr	r3, [r7, #8]
 8014324:	795b      	ldrb	r3, [r3, #5]
 8014326:	9300      	str	r3, [sp, #0]
 8014328:	4613      	mov	r3, r2
 801432a:	68fa      	ldr	r2, [r7, #12]
 801432c:	4909      	ldr	r1, [pc, #36]	; (8014354 <evt_pose_triggered+0x8c>)
 801432e:	480a      	ldr	r0, [pc, #40]	; (8014358 <evt_pose_triggered+0x90>)
 8014330:	f7ff f86e 	bl	8013410 <itm_debug3>
		break;
 8014334:	e006      	b.n	8014344 <evt_pose_triggered+0x7c>
	default:
		itm_debug2(DBG_ERR|DBG_CTRL, "bad st/3",tidx, tvar->_state);
 8014336:	68bb      	ldr	r3, [r7, #8]
 8014338:	785b      	ldrb	r3, [r3, #1]
 801433a:	68fa      	ldr	r2, [r7, #12]
 801433c:	4907      	ldr	r1, [pc, #28]	; (801435c <evt_pose_triggered+0x94>)
 801433e:	4808      	ldr	r0, [pc, #32]	; (8014360 <evt_pose_triggered+0x98>)
 8014340:	f7ff f84a 	bl	80133d8 <itm_debug2>
	}
}
 8014344:	bf00      	nop
 8014346:	3710      	adds	r7, #16
 8014348:	46bd      	mov	sp, r7
 801434a:	bd80      	pop	{r7, pc}
 801434c:	0801a044 	.word	0x0801a044
 8014350:	0801a050 	.word	0x0801a050
 8014354:	0801a05c 	.word	0x0801a05c
 8014358:	80002400 	.word	0x80002400
 801435c:	0801a068 	.word	0x0801a068
 8014360:	80000400 	.word	0x80000400

08014364 <evt_timer>:




static void evt_timer(int tidx, train_ctrl_t *tvar, int tnum)
{
 8014364:	b580      	push	{r7, lr}
 8014366:	b084      	sub	sp, #16
 8014368:	af00      	add	r7, sp, #0
 801436a:	60f8      	str	r0, [r7, #12]
 801436c:	60b9      	str	r1, [r7, #8]
 801436e:	607a      	str	r2, [r7, #4]
	itm_debug2(DBG_CTRL, "timer evt", tidx, tnum);
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	68fa      	ldr	r2, [r7, #12]
 8014374:	4912      	ldr	r1, [pc, #72]	; (80143c0 <evt_timer+0x5c>)
 8014376:	f44f 6080 	mov.w	r0, #1024	; 0x400
 801437a:	f7ff f82d 	bl	80133d8 <itm_debug2>
	switch (tnum) {
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	2b00      	cmp	r3, #0
 8014382:	d002      	beq.n	801438a <evt_timer+0x26>
 8014384:	2b01      	cmp	r3, #1
 8014386:	d005      	beq.n	8014394 <evt_timer+0x30>
 8014388:	e00c      	b.n	80143a4 <evt_timer+0x40>
	case TLEAVE_C1:
		evt_tleave(tidx, tvar);
 801438a:	68b9      	ldr	r1, [r7, #8]
 801438c:	68f8      	ldr	r0, [r7, #12]
 801438e:	f7ff fe55 	bl	801403c <evt_tleave>
		break;
 8014392:	e010      	b.n	80143b6 <evt_timer+0x52>
	case TBEHAVE:
		tvar->behaviour_flags |= BEHAVE_TBEHAVE;
 8014394:	68bb      	ldr	r3, [r7, #8]
 8014396:	899b      	ldrh	r3, [r3, #12]
 8014398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801439c:	b29a      	uxth	r2, r3
 801439e:	68bb      	ldr	r3, [r7, #8]
 80143a0:	819a      	strh	r2, [r3, #12]
		break;
 80143a2:	e008      	b.n	80143b6 <evt_timer+0x52>
	default:
		itm_debug2(DBG_ERR|DBG_CTRL, "?TIM", tidx, tnum);
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	68fa      	ldr	r2, [r7, #12]
 80143a8:	4906      	ldr	r1, [pc, #24]	; (80143c4 <evt_timer+0x60>)
 80143aa:	4807      	ldr	r0, [pc, #28]	; (80143c8 <evt_timer+0x64>)
 80143ac:	f7ff f814 	bl	80133d8 <itm_debug2>
		fatal();
 80143b0:	f7ff f8f4 	bl	801359c <fatal>
		break;
 80143b4:	bf00      	nop
	}
}
 80143b6:	bf00      	nop
 80143b8:	3710      	adds	r7, #16
 80143ba:	46bd      	mov	sp, r7
 80143bc:	bd80      	pop	{r7, pc}
 80143be:	bf00      	nop
 80143c0:	0801a074 	.word	0x0801a074
 80143c4:	0801a080 	.word	0x0801a080
 80143c8:	80000400 	.word	0x80000400

080143cc <update_c2_state_limits>:




static void update_c2_state_limits(int tidx, train_ctrl_t *tvars, update_reason_t updreason)
{
 80143cc:	b580      	push	{r7, lr}
 80143ce:	b092      	sub	sp, #72	; 0x48
 80143d0:	af02      	add	r7, sp, #8
 80143d2:	60f8      	str	r0, [r7, #12]
 80143d4:	60b9      	str	r1, [r7, #8]
 80143d6:	4613      	mov	r3, r2
 80143d8:	71fb      	strb	r3, [r7, #7]
	itm_debug3(DBG_CTRL, "UPDC2", tidx, tvars->canton1_addr, updreason);
 80143da:	68bb      	ldr	r3, [r7, #8]
 80143dc:	795b      	ldrb	r3, [r3, #5]
 80143de:	461a      	mov	r2, r3
 80143e0:	79fb      	ldrb	r3, [r7, #7]
 80143e2:	9300      	str	r3, [sp, #0]
 80143e4:	4613      	mov	r3, r2
 80143e6:	68fa      	ldr	r2, [r7, #12]
 80143e8:	4998      	ldr	r1, [pc, #608]	; (801464c <update_c2_state_limits+0x280>)
 80143ea:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80143ee:	f7ff f80f 	bl	8013410 <itm_debug3>
	uint8_t c2addr = 0xFF;
 80143f2:	23ff      	movs	r3, #255	; 0xff
 80143f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint16_t olim = tvars->spd_limit;
 80143f8:	68bb      	ldr	r3, [r7, #8]
 80143fa:	891b      	ldrh	r3, [r3, #8]
 80143fc:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint32_t posetval = 0;
 80143fe:	2300      	movs	r3, #0
 8014400:	63bb      	str	r3, [r7, #56]	; 0x38

	if (updreason == upd_pose_trig) tvars->behaviour_flags |= BEHAVE_PTRIG;
 8014402:	79fb      	ldrb	r3, [r7, #7]
 8014404:	2b03      	cmp	r3, #3
 8014406:	d106      	bne.n	8014416 <update_c2_state_limits+0x4a>
 8014408:	68bb      	ldr	r3, [r7, #8]
 801440a:	899b      	ldrh	r3, [r3, #12]
 801440c:	f043 0320 	orr.w	r3, r3, #32
 8014410:	b29a      	uxth	r2, r3
 8014412:	68bb      	ldr	r3, [r7, #8]
 8014414:	819a      	strh	r2, [r3, #12]

	if ((tidx==1) && (tvars->canton1_addr==0x02) && (tvars->canton2_addr==0x01)) {
 8014416:	68fb      	ldr	r3, [r7, #12]
 8014418:	2b01      	cmp	r3, #1
 801441a:	d10d      	bne.n	8014438 <update_c2_state_limits+0x6c>
 801441c:	68bb      	ldr	r3, [r7, #8]
 801441e:	795b      	ldrb	r3, [r3, #5]
 8014420:	2b02      	cmp	r3, #2
 8014422:	d109      	bne.n	8014438 <update_c2_state_limits+0x6c>
 8014424:	68bb      	ldr	r3, [r7, #8]
 8014426:	799b      	ldrb	r3, [r3, #6]
 8014428:	2b01      	cmp	r3, #1
 801442a:	d105      	bne.n	8014438 <update_c2_state_limits+0x6c>
		itm_debug1(DBG_CTRL, "hop", tidx);
 801442c:	68fa      	ldr	r2, [r7, #12]
 801442e:	4988      	ldr	r1, [pc, #544]	; (8014650 <update_c2_state_limits+0x284>)
 8014430:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8014434:	f7fe ffb6 	bl	80133a4 <itm_debug1>
	}
	switch (tvars->_state) {
 8014438:	68bb      	ldr	r3, [r7, #8]
 801443a:	785b      	ldrb	r3, [r3, #1]
 801443c:	2b00      	cmp	r3, #0
 801443e:	d007      	beq.n	8014450 <update_c2_state_limits+0x84>
 8014440:	2b03      	cmp	r3, #3
 8014442:	d005      	beq.n	8014450 <update_c2_state_limits+0x84>
		tvars->_target_speed = 0;
		if (tvars->canton2_addr != 0xFF) set_block_addr_occupency(tvars->canton2_addr, BLK_OCC_FREE);
		tvars->canton2_addr = 0xFF;
		goto sendlow;
	default:
		break;
 8014444:	bf00      	nop
	}
	if (tvars->canton1_addr == 0xFF) {
 8014446:	68bb      	ldr	r3, [r7, #8]
 8014448:	795b      	ldrb	r3, [r3, #5]
 801444a:	2bff      	cmp	r3, #255	; 0xff
 801444c:	d11a      	bne.n	8014484 <update_c2_state_limits+0xb8>
 801444e:	e013      	b.n	8014478 <update_c2_state_limits+0xac>
		tvars->_dir = 0;
 8014450:	68bb      	ldr	r3, [r7, #8]
 8014452:	2200      	movs	r2, #0
 8014454:	711a      	strb	r2, [r3, #4]
		tvars->_target_speed = 0;
 8014456:	68bb      	ldr	r3, [r7, #8]
 8014458:	2200      	movs	r2, #0
 801445a:	805a      	strh	r2, [r3, #2]
		if (tvars->canton2_addr != 0xFF) set_block_addr_occupency(tvars->canton2_addr, BLK_OCC_FREE);
 801445c:	68bb      	ldr	r3, [r7, #8]
 801445e:	799b      	ldrb	r3, [r3, #6]
 8014460:	2bff      	cmp	r3, #255	; 0xff
 8014462:	d005      	beq.n	8014470 <update_c2_state_limits+0xa4>
 8014464:	68bb      	ldr	r3, [r7, #8]
 8014466:	799b      	ldrb	r3, [r3, #6]
 8014468:	2100      	movs	r1, #0
 801446a:	4618      	mov	r0, r3
 801446c:	f7ff fc8e 	bl	8013d8c <set_block_addr_occupency>
		tvars->canton2_addr = 0xFF;
 8014470:	68bb      	ldr	r3, [r7, #8]
 8014472:	22ff      	movs	r2, #255	; 0xff
 8014474:	719a      	strb	r2, [r3, #6]
		goto sendlow;
 8014476:	e157      	b.n	8014728 <update_c2_state_limits+0x35c>
		itm_debug1(DBG_ERR|DBG_CTRL, "*** NO C1", tidx);
 8014478:	68fa      	ldr	r2, [r7, #12]
 801447a:	4976      	ldr	r1, [pc, #472]	; (8014654 <update_c2_state_limits+0x288>)
 801447c:	4876      	ldr	r0, [pc, #472]	; (8014658 <update_c2_state_limits+0x28c>)
 801447e:	f7fe ff91 	bl	80133a4 <itm_debug1>
		return;
 8014482:	e1d9      	b.n	8014838 <update_c2_state_limits+0x46c>
	}
	if (!tvars->_dir) {
 8014484:	68bb      	ldr	r3, [r7, #8]
 8014486:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801448a:	2b00      	cmp	r3, #0
 801448c:	d11c      	bne.n	80144c8 <update_c2_state_limits+0xfc>
		set_state(tidx, tvars, train_station);
 801448e:	2203      	movs	r2, #3
 8014490:	68b9      	ldr	r1, [r7, #8]
 8014492:	68f8      	ldr	r0, [r7, #12]
 8014494:	f7ff f89a 	bl	80135cc <set_state>
		tvars->behaviour_flags |= BEHAVE_STOPPED;
 8014498:	68bb      	ldr	r3, [r7, #8]
 801449a:	899b      	ldrh	r3, [r3, #12]
 801449c:	f043 0302 	orr.w	r3, r3, #2
 80144a0:	b29a      	uxth	r2, r3
 80144a2:	68bb      	ldr	r3, [r7, #8]
 80144a4:	819a      	strh	r2, [r3, #12]
		tvars->_target_speed = 0;
 80144a6:	68bb      	ldr	r3, [r7, #8]
 80144a8:	2200      	movs	r2, #0
 80144aa:	805a      	strh	r2, [r3, #2]
		if (tvars->canton2_addr != 0xFF) set_block_addr_occupency(tvars->canton2_addr, BLK_OCC_FREE);
 80144ac:	68bb      	ldr	r3, [r7, #8]
 80144ae:	799b      	ldrb	r3, [r3, #6]
 80144b0:	2bff      	cmp	r3, #255	; 0xff
 80144b2:	d005      	beq.n	80144c0 <update_c2_state_limits+0xf4>
 80144b4:	68bb      	ldr	r3, [r7, #8]
 80144b6:	799b      	ldrb	r3, [r3, #6]
 80144b8:	2100      	movs	r1, #0
 80144ba:	4618      	mov	r0, r3
 80144bc:	f7ff fc66 	bl	8013d8c <set_block_addr_occupency>
		tvars->canton2_addr = 0xFF;
 80144c0:	68bb      	ldr	r3, [r7, #8]
 80144c2:	22ff      	movs	r2, #255	; 0xff
 80144c4:	719a      	strb	r2, [r3, #6]
		goto sendlow;
 80144c6:	e12f      	b.n	8014728 <update_c2_state_limits+0x35c>
	}
	int c1num = _blk_addr_to_blk_num(tvars->canton1_addr);
 80144c8:	68bb      	ldr	r3, [r7, #8]
 80144ca:	795b      	ldrb	r3, [r3, #5]
 80144cc:	4618      	mov	r0, r3
 80144ce:	f7fe fff8 	bl	80134c2 <_blk_addr_to_blk_num>
 80144d2:	62b8      	str	r0, [r7, #40]	; 0x28
	int c2num = _next_block_num(c1num, (tvars->_dir<0));
 80144d4:	68bb      	ldr	r3, [r7, #8]
 80144d6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80144da:	b2db      	uxtb	r3, r3
 80144dc:	09db      	lsrs	r3, r3, #7
 80144de:	b2db      	uxtb	r3, r3
 80144e0:	4619      	mov	r1, r3
 80144e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80144e4:	f004 fe8b 	bl	80191fe <_next_block_num>
 80144e8:	6378      	str	r0, [r7, #52]	; 0x34

	itm_debug3(DBG_CTRL, "prev c1c2", tidx, tvars->canton1_addr, tvars->canton2_addr);
 80144ea:	68bb      	ldr	r3, [r7, #8]
 80144ec:	795b      	ldrb	r3, [r3, #5]
 80144ee:	461a      	mov	r2, r3
 80144f0:	68bb      	ldr	r3, [r7, #8]
 80144f2:	799b      	ldrb	r3, [r3, #6]
 80144f4:	9300      	str	r3, [sp, #0]
 80144f6:	4613      	mov	r3, r2
 80144f8:	68fa      	ldr	r2, [r7, #12]
 80144fa:	4958      	ldr	r1, [pc, #352]	; (801465c <update_c2_state_limits+0x290>)
 80144fc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8014500:	f7fe ff86 	bl	8013410 <itm_debug3>
	itm_debug3(DBG_CTRL, "c1c2num", tidx, c1num, c2num);
 8014504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014506:	9300      	str	r3, [sp, #0]
 8014508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801450a:	68fa      	ldr	r2, [r7, #12]
 801450c:	4954      	ldr	r1, [pc, #336]	; (8014660 <update_c2_state_limits+0x294>)
 801450e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8014512:	f7fe ff7d 	bl	8013410 <itm_debug3>

	if (c2num < 0) {
 8014516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014518:	2b00      	cmp	r3, #0
 801451a:	da3f      	bge.n	801459c <update_c2_state_limits+0x1d0>
		// end of track
		if (updreason == upd_c1c2) {
 801451c:	79fb      	ldrb	r3, [r7, #7]
 801451e:	2b02      	cmp	r3, #2
 8014520:	d122      	bne.n	8014568 <update_c2_state_limits+0x19c>
			itm_debug1(DBG_CTRL, "eot", tidx);
 8014522:	68fa      	ldr	r2, [r7, #12]
 8014524:	494f      	ldr	r1, [pc, #316]	; (8014664 <update_c2_state_limits+0x298>)
 8014526:	f44f 6080 	mov.w	r0, #1024	; 0x400
 801452a:	f7fe ff3b 	bl	80133a4 <itm_debug1>
			tvars->spd_limit = EOT_SPD_LIMIT;//			set_speed_limit(tn, 20);
 801452e:	68bb      	ldr	r3, [r7, #8]
 8014530:	2246      	movs	r2, #70	; 0x46
 8014532:	811a      	strh	r2, [r3, #8]
			const train_config_t *tconf = get_train_cnf(tidx);
 8014534:	68f8      	ldr	r0, [r7, #12]
 8014536:	f001 ff3d 	bl	80163b4 <get_train_cnf>
 801453a:	6238      	str	r0, [r7, #32]
			posetval = pose_middle(_blk_addr_to_blk_num(tvars->canton1_addr), tconf, tvars->_dir);
 801453c:	68bb      	ldr	r3, [r7, #8]
 801453e:	795b      	ldrb	r3, [r3, #5]
 8014540:	4618      	mov	r0, r3
 8014542:	f7fe ffbe 	bl	80134c2 <_blk_addr_to_blk_num>
 8014546:	68bb      	ldr	r3, [r7, #8]
 8014548:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801454c:	461a      	mov	r2, r3
 801454e:	6a39      	ldr	r1, [r7, #32]
 8014550:	f000 fa54 	bl	80149fc <pose_middle>
 8014554:	4603      	mov	r3, r0
 8014556:	63bb      	str	r3, [r7, #56]	; 0x38
			tvars->behaviour_flags |= BEHAVE_EOT1;
 8014558:	68bb      	ldr	r3, [r7, #8]
 801455a:	899b      	ldrh	r3, [r3, #12]
 801455c:	f043 0304 	orr.w	r3, r3, #4
 8014560:	b29a      	uxth	r2, r3
 8014562:	68bb      	ldr	r3, [r7, #8]
 8014564:	819a      	strh	r2, [r3, #12]
 8014566:	e0bf      	b.n	80146e8 <update_c2_state_limits+0x31c>
		} else if (updreason == upd_pose_trig) {
 8014568:	79fb      	ldrb	r3, [r7, #7]
 801456a:	2b03      	cmp	r3, #3
 801456c:	f040 80bc 	bne.w	80146e8 <update_c2_state_limits+0x31c>
			itm_debug1(DBG_CTRL, "eot2", tidx);
 8014570:	68fa      	ldr	r2, [r7, #12]
 8014572:	493d      	ldr	r1, [pc, #244]	; (8014668 <update_c2_state_limits+0x29c>)
 8014574:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8014578:	f7fe ff14 	bl	80133a4 <itm_debug1>
			set_state(tidx, tvars, train_end_of_track);
 801457c:	2205      	movs	r2, #5
 801457e:	68b9      	ldr	r1, [r7, #8]
 8014580:	68f8      	ldr	r0, [r7, #12]
 8014582:	f7ff f823 	bl	80135cc <set_state>
			tvars->spd_limit = 0;
 8014586:	68bb      	ldr	r3, [r7, #8]
 8014588:	2200      	movs	r2, #0
 801458a:	811a      	strh	r2, [r3, #8]
			tvars->behaviour_flags |= BEHAVE_EOT2;
 801458c:	68bb      	ldr	r3, [r7, #8]
 801458e:	899b      	ldrh	r3, [r3, #12]
 8014590:	f043 0308 	orr.w	r3, r3, #8
 8014594:	b29a      	uxth	r2, r3
 8014596:	68bb      	ldr	r3, [r7, #8]
 8014598:	819a      	strh	r2, [r3, #12]
 801459a:	e0a5      	b.n	80146e8 <update_c2_state_limits+0x31c>
		}
	} else {
		switch (blk_occup[c2num]) {
 801459c:	4a33      	ldr	r2, [pc, #204]	; (801466c <update_c2_state_limits+0x2a0>)
 801459e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80145a0:	4413      	add	r3, r2
 80145a2:	781b      	ldrb	r3, [r3, #0]
 80145a4:	2b00      	cmp	r3, #0
 80145a6:	d002      	beq.n	80145ae <update_c2_state_limits+0x1e2>
 80145a8:	2b04      	cmp	r3, #4
 80145aa:	d046      	beq.n	801463a <update_c2_state_limits+0x26e>
 80145ac:	e026      	b.n	80145fc <update_c2_state_limits+0x230>
			case BLK_OCC_FREE:
				itm_debug2(DBG_CTRL, "free", tidx, c2num);
 80145ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80145b0:	68fa      	ldr	r2, [r7, #12]
 80145b2:	492f      	ldr	r1, [pc, #188]	; (8014670 <update_c2_state_limits+0x2a4>)
 80145b4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80145b8:	f7fe ff0e 	bl	80133d8 <itm_debug2>
				tvars->spd_limit = 100; //set_speed_limit(tidx, 100);
 80145bc:	68bb      	ldr	r3, [r7, #8]
 80145be:	2264      	movs	r2, #100	; 0x64
 80145c0:	811a      	strh	r2, [r3, #8]
				switch (tvars->_state) {
 80145c2:	68bb      	ldr	r3, [r7, #8]
 80145c4:	785b      	ldrb	r3, [r3, #1]
 80145c6:	2b01      	cmp	r3, #1
 80145c8:	d016      	beq.n	80145f8 <update_c2_state_limits+0x22c>
 80145ca:	2b04      	cmp	r3, #4
 80145cc:	d10c      	bne.n	80145e8 <update_c2_state_limits+0x21c>
				case train_running_c1:
					break;
				case train_blk_wait:
					set_state(tidx, tvars, train_running_c1);
 80145ce:	2201      	movs	r2, #1
 80145d0:	68b9      	ldr	r1, [r7, #8]
 80145d2:	68f8      	ldr	r0, [r7, #12]
 80145d4:	f7fe fffa 	bl	80135cc <set_state>
					tvars->behaviour_flags |= BEHAVE_RESTARTBLK;
 80145d8:	68bb      	ldr	r3, [r7, #8]
 80145da:	899b      	ldrh	r3, [r3, #12]
 80145dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80145e0:	b29a      	uxth	r2, r3
 80145e2:	68bb      	ldr	r3, [r7, #8]
 80145e4:	819a      	strh	r2, [r3, #12]
					break;
 80145e6:	e008      	b.n	80145fa <update_c2_state_limits+0x22e>
				default:
					itm_debug2(DBG_ERR|DBG_CTRL, "bad st/4", tidx, tvars->_state);
 80145e8:	68bb      	ldr	r3, [r7, #8]
 80145ea:	785b      	ldrb	r3, [r3, #1]
 80145ec:	68fa      	ldr	r2, [r7, #12]
 80145ee:	4921      	ldr	r1, [pc, #132]	; (8014674 <update_c2_state_limits+0x2a8>)
 80145f0:	4819      	ldr	r0, [pc, #100]	; (8014658 <update_c2_state_limits+0x28c>)
 80145f2:	f7fe fef1 	bl	80133d8 <itm_debug2>
					break;
 80145f6:	e000      	b.n	80145fa <update_c2_state_limits+0x22e>
					break;
 80145f8:	bf00      	nop
				}
				break;
 80145fa:	e075      	b.n	80146e8 <update_c2_state_limits+0x31c>
			default:
			case BLK_OCC_RIGHT:
			case BLK_OCC_LEFT:
			case BLK_OCC_STOP:
				itm_debug3(DBG_CTRL, "occ", tidx, c2num, blk_occup[c2num]);
 80145fc:	4a1b      	ldr	r2, [pc, #108]	; (801466c <update_c2_state_limits+0x2a0>)
 80145fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014600:	4413      	add	r3, r2
 8014602:	781b      	ldrb	r3, [r3, #0]
 8014604:	9300      	str	r3, [sp, #0]
 8014606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014608:	68fa      	ldr	r2, [r7, #12]
 801460a:	491b      	ldr	r1, [pc, #108]	; (8014678 <update_c2_state_limits+0x2ac>)
 801460c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8014610:	f7fe fefe 	bl	8013410 <itm_debug3>
				set_state(tidx, tvars, train_blk_wait);
 8014614:	2204      	movs	r2, #4
 8014616:	68b9      	ldr	r1, [r7, #8]
 8014618:	68f8      	ldr	r0, [r7, #12]
 801461a:	f7fe ffd7 	bl	80135cc <set_state>
				tvars->behaviour_flags |= BEHAVE_BLKW;
 801461e:	68bb      	ldr	r3, [r7, #8]
 8014620:	899b      	ldrh	r3, [r3, #12]
 8014622:	f043 0310 	orr.w	r3, r3, #16
 8014626:	b29a      	uxth	r2, r3
 8014628:	68bb      	ldr	r3, [r7, #8]
 801462a:	819a      	strh	r2, [r3, #12]
				c2num = -1;
 801462c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014630:	637b      	str	r3, [r7, #52]	; 0x34
				tvars->spd_limit = 0;
 8014632:	68bb      	ldr	r3, [r7, #8]
 8014634:	2200      	movs	r2, #0
 8014636:	811a      	strh	r2, [r3, #8]
				break;
 8014638:	e056      	b.n	80146e8 <update_c2_state_limits+0x31c>
			case BLK_OCC_C2: {
			    uint8_t c2addr = (c2num>=0) ? _blk_num_to_blk_addr(c2num) : 0xFF;
 801463a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801463c:	2b00      	cmp	r3, #0
 801463e:	db1d      	blt.n	801467c <update_c2_state_limits+0x2b0>
 8014640:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014642:	f7fe ff5b 	bl	80134fc <_blk_num_to_blk_addr>
 8014646:	4603      	mov	r3, r0
 8014648:	e019      	b.n	801467e <update_c2_state_limits+0x2b2>
 801464a:	bf00      	nop
 801464c:	0801a088 	.word	0x0801a088
 8014650:	0801a090 	.word	0x0801a090
 8014654:	0801a094 	.word	0x0801a094
 8014658:	80000400 	.word	0x80000400
 801465c:	0801a0a0 	.word	0x0801a0a0
 8014660:	0801a0ac 	.word	0x0801a0ac
 8014664:	0801a0b4 	.word	0x0801a0b4
 8014668:	0801a0b8 	.word	0x0801a0b8
 801466c:	2000531c 	.word	0x2000531c
 8014670:	0801a0c0 	.word	0x0801a0c0
 8014674:	0801a0c8 	.word	0x0801a0c8
 8014678:	0801a0d4 	.word	0x0801a0d4
 801467c:	23ff      	movs	r3, #255	; 0xff
 801467e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			    if (c2addr == tvars->canton2_addr) {
 8014682:	68bb      	ldr	r3, [r7, #8]
 8014684:	799b      	ldrb	r3, [r3, #6]
 8014686:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801468a:	429a      	cmp	r2, r3
 801468c:	d02b      	beq.n	80146e6 <update_c2_state_limits+0x31a>
			    	// normal case, same C2
			    	break;
			    } else if (tvars->canton2_addr != 0xFF) {
 801468e:	68bb      	ldr	r3, [r7, #8]
 8014690:	799b      	ldrb	r3, [r3, #6]
 8014692:	2bff      	cmp	r3, #255	; 0xff
 8014694:	d014      	beq.n	80146c0 <update_c2_state_limits+0x2f4>
			    	// change C2. Can this occur ? if turnout is changed
			    	// but turnout should not be changed if C2 already set
			    	itm_debug3(DBG_ERR|DBG_CTRL, "C2 change", tidx, tvars->canton2_addr, c2addr);
 8014696:	68bb      	ldr	r3, [r7, #8]
 8014698:	799b      	ldrb	r3, [r3, #6]
 801469a:	461a      	mov	r2, r3
 801469c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80146a0:	9300      	str	r3, [sp, #0]
 80146a2:	4613      	mov	r3, r2
 80146a4:	68fa      	ldr	r2, [r7, #12]
 80146a6:	4966      	ldr	r1, [pc, #408]	; (8014840 <update_c2_state_limits+0x474>)
 80146a8:	4866      	ldr	r0, [pc, #408]	; (8014844 <update_c2_state_limits+0x478>)
 80146aa:	f7fe feb1 	bl	8013410 <itm_debug3>
			    	set_block_addr_occupency(tvars->canton2_addr, BLK_OCC_FREE);
 80146ae:	68bb      	ldr	r3, [r7, #8]
 80146b0:	799b      	ldrb	r3, [r3, #6]
 80146b2:	2100      	movs	r1, #0
 80146b4:	4618      	mov	r0, r3
 80146b6:	f7ff fb69 	bl	8013d8c <set_block_addr_occupency>
			    	tvars->canton2_addr = 0xFF;
 80146ba:	68bb      	ldr	r3, [r7, #8]
 80146bc:	22ff      	movs	r2, #255	; 0xff
 80146be:	719a      	strb	r2, [r3, #6]
			    }
			    // occupied
				itm_debug2(DBG_CTRL, "OCC C2", tidx, c2num);
 80146c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80146c2:	68fa      	ldr	r2, [r7, #12]
 80146c4:	4960      	ldr	r1, [pc, #384]	; (8014848 <update_c2_state_limits+0x47c>)
 80146c6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80146ca:	f7fe fe85 	bl	80133d8 <itm_debug2>
				set_state(tidx, tvars, train_blk_wait);
 80146ce:	2204      	movs	r2, #4
 80146d0:	68b9      	ldr	r1, [r7, #8]
 80146d2:	68f8      	ldr	r0, [r7, #12]
 80146d4:	f7fe ff7a 	bl	80135cc <set_state>
				c2num = - 1;
 80146d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80146dc:	637b      	str	r3, [r7, #52]	; 0x34
				tvars->spd_limit = 0;
 80146de:	68bb      	ldr	r3, [r7, #8]
 80146e0:	2200      	movs	r2, #0
 80146e2:	811a      	strh	r2, [r3, #8]
				break;
 80146e4:	e000      	b.n	80146e8 <update_c2_state_limits+0x31c>
			    	break;
 80146e6:	bf00      	nop
			}
		}
	}
	if (c2num>=0) {
 80146e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	db11      	blt.n	8014712 <update_c2_state_limits+0x346>
		// sanity check, can be removed (TODO)
		if ((get_block_num_occupency(c2num) != BLK_OCC_FREE)
 80146ee:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80146f0:	f7ff fb62 	bl	8013db8 <get_block_num_occupency>
 80146f4:	4603      	mov	r3, r0
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	d007      	beq.n	801470a <update_c2_state_limits+0x33e>
				&& (get_block_num_occupency(c2num) != BLK_OCC_C2))fatal();
 80146fa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80146fc:	f7ff fb5c 	bl	8013db8 <get_block_num_occupency>
 8014700:	4603      	mov	r3, r0
 8014702:	2b04      	cmp	r3, #4
 8014704:	d001      	beq.n	801470a <update_c2_state_limits+0x33e>
 8014706:	f7fe ff49 	bl	801359c <fatal>
		set_block_num_occupency(c2num, BLK_OCC_C2);
 801470a:	2104      	movs	r1, #4
 801470c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801470e:	f7ff fae7 	bl	8013ce0 <set_block_num_occupency>
	}
    c2addr = (c2num>=0) ? _blk_num_to_blk_addr(c2num) : 0xFF;
 8014712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014714:	2b00      	cmp	r3, #0
 8014716:	db04      	blt.n	8014722 <update_c2_state_limits+0x356>
 8014718:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801471a:	f7fe feef 	bl	80134fc <_blk_num_to_blk_addr>
 801471e:	4603      	mov	r3, r0
 8014720:	e000      	b.n	8014724 <update_c2_state_limits+0x358>
 8014722:	23ff      	movs	r3, #255	; 0xff
 8014724:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

sendlow:
	if ((c2addr != tvars->canton2_addr) || (updreason == upd_c1c2) || (updreason == upd_change_dir) ||(updreason==upd_init)) {
 8014728:	68bb      	ldr	r3, [r7, #8]
 801472a:	799b      	ldrb	r3, [r3, #6]
 801472c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8014730:	429a      	cmp	r2, r3
 8014732:	d108      	bne.n	8014746 <update_c2_state_limits+0x37a>
 8014734:	79fb      	ldrb	r3, [r7, #7]
 8014736:	2b02      	cmp	r3, #2
 8014738:	d005      	beq.n	8014746 <update_c2_state_limits+0x37a>
 801473a:	79fb      	ldrb	r3, [r7, #7]
 801473c:	2b01      	cmp	r3, #1
 801473e:	d002      	beq.n	8014746 <update_c2_state_limits+0x37a>
 8014740:	79fb      	ldrb	r3, [r7, #7]
 8014742:	2b00      	cmp	r3, #0
 8014744:	d146      	bne.n	80147d4 <update_c2_state_limits+0x408>
		itm_debug3(DBG_CTRL, "C1C2", tidx, tvars->canton1_addr, tvars->canton2_addr);
 8014746:	68bb      	ldr	r3, [r7, #8]
 8014748:	795b      	ldrb	r3, [r3, #5]
 801474a:	461a      	mov	r2, r3
 801474c:	68bb      	ldr	r3, [r7, #8]
 801474e:	799b      	ldrb	r3, [r3, #6]
 8014750:	9300      	str	r3, [sp, #0]
 8014752:	4613      	mov	r3, r2
 8014754:	68fa      	ldr	r2, [r7, #12]
 8014756:	493d      	ldr	r1, [pc, #244]	; (801484c <update_c2_state_limits+0x480>)
 8014758:	f44f 6080 	mov.w	r0, #1024	; 0x400
 801475c:	f7fe fe58 	bl	8013410 <itm_debug3>
		tvars->canton2_addr = c2addr;
 8014760:	68bb      	ldr	r3, [r7, #8]
 8014762:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8014766:	719a      	strb	r2, [r3, #6]

		int dir = tvars->_dir;
 8014768:	68bb      	ldr	r3, [r7, #8]
 801476a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801476e:	633b      	str	r3, [r7, #48]	; 0x30
		const train_config_t *tconf = get_train_cnf(tidx);
 8014770:	68f8      	ldr	r0, [r7, #12]
 8014772:	f001 fe1f 	bl	80163b4 <get_train_cnf>
 8014776:	61f8      	str	r0, [r7, #28]
		if (tconf->reversed) dir = -dir;
 8014778:	69fb      	ldr	r3, [r7, #28]
 801477a:	7edb      	ldrb	r3, [r3, #27]
 801477c:	2b00      	cmp	r3, #0
 801477e:	d002      	beq.n	8014786 <update_c2_state_limits+0x3ba>
 8014780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014782:	425b      	negs	r3, r3
 8014784:	633b      	str	r3, [r7, #48]	; 0x30

		msg_64_t m;
		m.from = MA_CONTROL_T(tidx);
 8014786:	68fb      	ldr	r3, [r7, #12]
 8014788:	b25b      	sxtb	r3, r3
 801478a:	f003 0307 	and.w	r3, r3, #7
 801478e:	b25b      	sxtb	r3, r3
 8014790:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8014794:	b25b      	sxtb	r3, r3
 8014796:	b2db      	uxtb	r3, r3
 8014798:	747b      	strb	r3, [r7, #17]
		m.to =  MA_TRAIN_SC(tidx);
 801479a:	68fb      	ldr	r3, [r7, #12]
 801479c:	b25b      	sxtb	r3, r3
 801479e:	f003 0307 	and.w	r3, r3, #7
 80147a2:	b25b      	sxtb	r3, r3
 80147a4:	f063 0337 	orn	r3, r3, #55	; 0x37
 80147a8:	b25b      	sxtb	r3, r3
 80147aa:	b2db      	uxtb	r3, r3
 80147ac:	743b      	strb	r3, [r7, #16]
		m.cmd = CMD_SET_C1_C2;
 80147ae:	2311      	movs	r3, #17
 80147b0:	74bb      	strb	r3, [r7, #18]
		m.vbytes[0] = tvars->canton1_addr;
 80147b2:	68bb      	ldr	r3, [r7, #8]
 80147b4:	795b      	ldrb	r3, [r3, #5]
 80147b6:	753b      	strb	r3, [r7, #20]
		m.vbytes[1] = dir;
 80147b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147ba:	b2db      	uxtb	r3, r3
 80147bc:	757b      	strb	r3, [r7, #21]
		m.vbytes[2] = tvars->canton2_addr;
 80147be:	68bb      	ldr	r3, [r7, #8]
 80147c0:	799b      	ldrb	r3, [r3, #6]
 80147c2:	75bb      	strb	r3, [r7, #22]
		m.vbytes[3] = dir; // 0;
 80147c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147c6:	b2db      	uxtb	r3, r3
 80147c8:	75fb      	strb	r3, [r7, #23]
		mqf_write_from_ctrl(&m);
 80147ca:	f107 0310 	add.w	r3, r7, #16
 80147ce:	4618      	mov	r0, r3
 80147d0:	f7fe fe4a 	bl	8013468 <mqf_write_from_ctrl>
	}
	if ((tvars->_mode != train_fullmanual) && (olim != tvars->spd_limit)) {
 80147d4:	68bb      	ldr	r3, [r7, #8]
 80147d6:	781b      	ldrb	r3, [r3, #0]
 80147d8:	2b02      	cmp	r3, #2
 80147da:	d020      	beq.n	801481e <update_c2_state_limits+0x452>
 80147dc:	68bb      	ldr	r3, [r7, #8]
 80147de:	891b      	ldrh	r3, [r3, #8]
 80147e0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80147e2:	429a      	cmp	r2, r3
 80147e4:	d01b      	beq.n	801481e <update_c2_state_limits+0x452>
		itm_debug2(DBG_CTRL, "lim upd", tidx, tvars->spd_limit);
 80147e6:	68bb      	ldr	r3, [r7, #8]
 80147e8:	891b      	ldrh	r3, [r3, #8]
 80147ea:	68fa      	ldr	r2, [r7, #12]
 80147ec:	4918      	ldr	r1, [pc, #96]	; (8014850 <update_c2_state_limits+0x484>)
 80147ee:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80147f2:	f7fe fdf1 	bl	80133d8 <itm_debug2>
		uint16_t tspd = MIN(tvars->spd_limit, tvars->desired_speed);
 80147f6:	68bb      	ldr	r3, [r7, #8]
 80147f8:	895a      	ldrh	r2, [r3, #10]
 80147fa:	68bb      	ldr	r3, [r7, #8]
 80147fc:	891b      	ldrh	r3, [r3, #8]
 80147fe:	4293      	cmp	r3, r2
 8014800:	bf28      	it	cs
 8014802:	4613      	movcs	r3, r2
 8014804:	837b      	strh	r3, [r7, #26]
		switch (updreason) {
 8014806:	79fb      	ldrb	r3, [r7, #7]
 8014808:	2b00      	cmp	r3, #0
 801480a:	d00a      	beq.n	8014822 <update_c2_state_limits+0x456>
 801480c:	2b01      	cmp	r3, #1
 801480e:	d00a      	beq.n	8014826 <update_c2_state_limits+0x45a>
		case upd_change_dir: // do nothing, ctrl_set_tspeed will be updated
			break;
		case upd_init:
			break;
		default:
			ctrl_set_tspeed(tidx, tvars, tspd);
 8014810:	8b7b      	ldrh	r3, [r7, #26]
 8014812:	461a      	mov	r2, r3
 8014814:	68b9      	ldr	r1, [r7, #8]
 8014816:	68f8      	ldr	r0, [r7, #12]
 8014818:	f000 f81c 	bl	8014854 <ctrl_set_tspeed>
			break;
 801481c:	e004      	b.n	8014828 <update_c2_state_limits+0x45c>
		}
	}
 801481e:	bf00      	nop
 8014820:	e002      	b.n	8014828 <update_c2_state_limits+0x45c>
			break;
 8014822:	bf00      	nop
 8014824:	e000      	b.n	8014828 <update_c2_state_limits+0x45c>
			break;
 8014826:	bf00      	nop
	if (posetval) {
 8014828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801482a:	2b00      	cmp	r3, #0
 801482c:	d004      	beq.n	8014838 <update_c2_state_limits+0x46c>
		//itm_debug2(DBG_CTRL, "set pose", tidx, posetval);
		// POSE trigger must be sent *after* CMD_SET_C1_C2
		set_pose_trig(tidx, posetval);
 801482e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014830:	4619      	mov	r1, r3
 8014832:	68f8      	ldr	r0, [r7, #12]
 8014834:	f000 f89c 	bl	8014970 <set_pose_trig>
	}

}
 8014838:	3740      	adds	r7, #64	; 0x40
 801483a:	46bd      	mov	sp, r7
 801483c:	bd80      	pop	{r7, pc}
 801483e:	bf00      	nop
 8014840:	0801a0d8 	.word	0x0801a0d8
 8014844:	80000400 	.word	0x80000400
 8014848:	0801a0e4 	.word	0x0801a0e4
 801484c:	0801a0ec 	.word	0x0801a0ec
 8014850:	0801a0f4 	.word	0x0801a0f4

08014854 <ctrl_set_tspeed>:


// ---------------------------------------------------------------

static void ctrl_set_tspeed(int trnum, train_ctrl_t *tvars, uint16_t tspd)
{
 8014854:	b580      	push	{r7, lr}
 8014856:	b086      	sub	sp, #24
 8014858:	af00      	add	r7, sp, #0
 801485a:	60f8      	str	r0, [r7, #12]
 801485c:	60b9      	str	r1, [r7, #8]
 801485e:	4613      	mov	r3, r2
 8014860:	80fb      	strh	r3, [r7, #6]
	if (tvars->_target_speed == tspd) return;
 8014862:	68bb      	ldr	r3, [r7, #8]
 8014864:	885b      	ldrh	r3, [r3, #2]
 8014866:	88fa      	ldrh	r2, [r7, #6]
 8014868:	429a      	cmp	r2, r3
 801486a:	d03f      	beq.n	80148ec <ctrl_set_tspeed+0x98>
	tvars->_target_speed = tspd;
 801486c:	68bb      	ldr	r3, [r7, #8]
 801486e:	88fa      	ldrh	r2, [r7, #6]
 8014870:	805a      	strh	r2, [r3, #2]

	// notif UI
	itm_debug2(DBG_UI|DBG_CTRL, "ctrl_set_tspeed", trnum, tspd);
 8014872:	88fb      	ldrh	r3, [r7, #6]
 8014874:	68fa      	ldr	r2, [r7, #12]
 8014876:	491f      	ldr	r1, [pc, #124]	; (80148f4 <ctrl_set_tspeed+0xa0>)
 8014878:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 801487c:	f7fe fdac 	bl	80133d8 <itm_debug2>
	msg_64_t m;
	m.from = MA_CONTROL_T(trnum);
 8014880:	68fb      	ldr	r3, [r7, #12]
 8014882:	b25b      	sxtb	r3, r3
 8014884:	f003 0307 	and.w	r3, r3, #7
 8014888:	b25b      	sxtb	r3, r3
 801488a:	f063 032f 	orn	r3, r3, #47	; 0x2f
 801488e:	b25b      	sxtb	r3, r3
 8014890:	b2db      	uxtb	r3, r3
 8014892:	747b      	strb	r3, [r7, #17]
	m.to = MA_UI(UISUB_TFT);
 8014894:	2381      	movs	r3, #129	; 0x81
 8014896:	743b      	strb	r3, [r7, #16]
	m.cmd = CMD_TRTSPD_NOTIF;
 8014898:	2324      	movs	r3, #36	; 0x24
 801489a:	74bb      	strb	r3, [r7, #18]
	m.v1u = tspd;
 801489c:	88fb      	ldrh	r3, [r7, #6]
 801489e:	82bb      	strh	r3, [r7, #20]
	m.v2 = trctl[trnum]._dir;
 80148a0:	4915      	ldr	r1, [pc, #84]	; (80148f8 <ctrl_set_tspeed+0xa4>)
 80148a2:	68fa      	ldr	r2, [r7, #12]
 80148a4:	4613      	mov	r3, r2
 80148a6:	005b      	lsls	r3, r3, #1
 80148a8:	4413      	add	r3, r2
 80148aa:	00db      	lsls	r3, r3, #3
 80148ac:	440b      	add	r3, r1
 80148ae:	3304      	adds	r3, #4
 80148b0:	f993 3000 	ldrsb.w	r3, [r3]
 80148b4:	b21b      	sxth	r3, r3
 80148b6:	82fb      	strh	r3, [r7, #22]
	mqf_write_from_ctrl(&m);
 80148b8:	f107 0310 	add.w	r3, r7, #16
 80148bc:	4618      	mov	r0, r3
 80148be:	f7fe fdd3 	bl	8013468 <mqf_write_from_ctrl>

	m.to = MA_TRAIN_SC(trnum);
 80148c2:	68fb      	ldr	r3, [r7, #12]
 80148c4:	b25b      	sxtb	r3, r3
 80148c6:	f003 0307 	and.w	r3, r3, #7
 80148ca:	b25b      	sxtb	r3, r3
 80148cc:	f063 0337 	orn	r3, r3, #55	; 0x37
 80148d0:	b25b      	sxtb	r3, r3
 80148d2:	b2db      	uxtb	r3, r3
 80148d4:	743b      	strb	r3, [r7, #16]
	m.cmd = CMD_SET_TARGET_SPEED;
 80148d6:	2310      	movs	r3, #16
 80148d8:	74bb      	strb	r3, [r7, #18]
	// direction already given by SET_C1_C2
	//m.v1 = trctl[trnum]._dir*trctl[trnum]._target_speed;
	m.v1u = tvars->_target_speed;
 80148da:	68bb      	ldr	r3, [r7, #8]
 80148dc:	885b      	ldrh	r3, [r3, #2]
 80148de:	82bb      	strh	r3, [r7, #20]
	mqf_write_from_ctrl(&m);
 80148e0:	f107 0310 	add.w	r3, r7, #16
 80148e4:	4618      	mov	r0, r3
 80148e6:	f7fe fdbf 	bl	8013468 <mqf_write_from_ctrl>
 80148ea:	e000      	b.n	80148ee <ctrl_set_tspeed+0x9a>
	if (tvars->_target_speed == tspd) return;
 80148ec:	bf00      	nop


}
 80148ee:	3718      	adds	r7, #24
 80148f0:	46bd      	mov	sp, r7
 80148f2:	bd80      	pop	{r7, pc}
 80148f4:	0801a0fc 	.word	0x0801a0fc
 80148f8:	20005258 	.word	0x20005258

080148fc <ctrl_set_dir>:

static void ctrl_set_dir(int trnum,  train_ctrl_t *tvars, int  dir, int force)
{
 80148fc:	b580      	push	{r7, lr}
 80148fe:	b086      	sub	sp, #24
 8014900:	af00      	add	r7, sp, #0
 8014902:	60f8      	str	r0, [r7, #12]
 8014904:	60b9      	str	r1, [r7, #8]
 8014906:	607a      	str	r2, [r7, #4]
 8014908:	603b      	str	r3, [r7, #0]
	if (!force && (tvars->_dir == dir)) return;
 801490a:	683b      	ldr	r3, [r7, #0]
 801490c:	2b00      	cmp	r3, #0
 801490e:	d106      	bne.n	801491e <ctrl_set_dir+0x22>
 8014910:	68bb      	ldr	r3, [r7, #8]
 8014912:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014916:	461a      	mov	r2, r3
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	4293      	cmp	r3, r2
 801491c:	d021      	beq.n	8014962 <ctrl_set_dir+0x66>

	itm_debug2(DBG_CTRL, "setdir", trnum, dir);
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	68fa      	ldr	r2, [r7, #12]
 8014922:	4912      	ldr	r1, [pc, #72]	; (801496c <ctrl_set_dir+0x70>)
 8014924:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8014928:	f7fe fd56 	bl	80133d8 <itm_debug2>


	msg_64_t m;
	m.from = MA_CONTROL_T(trnum);
 801492c:	68fb      	ldr	r3, [r7, #12]
 801492e:	b25b      	sxtb	r3, r3
 8014930:	f003 0307 	and.w	r3, r3, #7
 8014934:	b25b      	sxtb	r3, r3
 8014936:	f063 032f 	orn	r3, r3, #47	; 0x2f
 801493a:	b25b      	sxtb	r3, r3
 801493c:	b2db      	uxtb	r3, r3
 801493e:	747b      	strb	r3, [r7, #17]
	tvars->_dir = dir;
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	b25a      	sxtb	r2, r3
 8014944:	68bb      	ldr	r3, [r7, #8]
 8014946:	711a      	strb	r2, [r3, #4]

	// notif UI
	m.to = MA_UI(UISUB_TFT);
 8014948:	2381      	movs	r3, #129	; 0x81
 801494a:	743b      	strb	r3, [r7, #16]
	m.cmd = CMD_TRDIR_NOTIF;
 801494c:	2323      	movs	r3, #35	; 0x23
 801494e:	74bb      	strb	r3, [r7, #18]
	m.v1 = dir;
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	b21b      	sxth	r3, r3
 8014954:	82bb      	strh	r3, [r7, #20]
	mqf_write_from_ctrl(&m);
 8014956:	f107 0310 	add.w	r3, r7, #16
 801495a:	4618      	mov	r0, r3
 801495c:	f7fe fd84 	bl	8013468 <mqf_write_from_ctrl>
 8014960:	e000      	b.n	8014964 <ctrl_set_dir+0x68>
	if (!force && (tvars->_dir == dir)) return;
 8014962:	bf00      	nop
}
 8014964:	3718      	adds	r7, #24
 8014966:	46bd      	mov	sp, r7
 8014968:	bd80      	pop	{r7, pc}
 801496a:	bf00      	nop
 801496c:	0801a10c 	.word	0x0801a10c

08014970 <set_pose_trig>:

// ---------------------------------------------------------------


static void set_pose_trig(int numtrain, int32_t pose)
{
 8014970:	b580      	push	{r7, lr}
 8014972:	b086      	sub	sp, #24
 8014974:	af00      	add	r7, sp, #0
 8014976:	6078      	str	r0, [r7, #4]
 8014978:	6039      	str	r1, [r7, #0]
	itm_debug2(DBG_CTRL, "set posetr", numtrain, pose);
 801497a:	683b      	ldr	r3, [r7, #0]
 801497c:	687a      	ldr	r2, [r7, #4]
 801497e:	491e      	ldr	r1, [pc, #120]	; (80149f8 <set_pose_trig+0x88>)
 8014980:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8014984:	f7fe fd28 	bl	80133d8 <itm_debug2>
	msg_64_t m;
	m.from = MA_CONTROL_T(numtrain);
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	b25b      	sxtb	r3, r3
 801498c:	f003 0307 	and.w	r3, r3, #7
 8014990:	b25b      	sxtb	r3, r3
 8014992:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8014996:	b25b      	sxtb	r3, r3
 8014998:	b2db      	uxtb	r3, r3
 801499a:	727b      	strb	r3, [r7, #9]
	m.from = MA_CONTROL_T(numtrain);
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	b25b      	sxtb	r3, r3
 80149a0:	f003 0307 	and.w	r3, r3, #7
 80149a4:	b25b      	sxtb	r3, r3
 80149a6:	f063 032f 	orn	r3, r3, #47	; 0x2f
 80149aa:	b25b      	sxtb	r3, r3
 80149ac:	b2db      	uxtb	r3, r3
 80149ae:	727b      	strb	r3, [r7, #9]
	m.to =  MA_TRAIN_SC(numtrain);
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	b25b      	sxtb	r3, r3
 80149b4:	f003 0307 	and.w	r3, r3, #7
 80149b8:	b25b      	sxtb	r3, r3
 80149ba:	f063 0337 	orn	r3, r3, #55	; 0x37
 80149be:	b25b      	sxtb	r3, r3
 80149c0:	b2db      	uxtb	r3, r3
 80149c2:	723b      	strb	r3, [r7, #8]
	m.cmd = CMD_POSE_SET_TRIG;
 80149c4:	2350      	movs	r3, #80	; 0x50
 80149c6:	72bb      	strb	r3, [r7, #10]
	const train_config_t *tconf = get_train_cnf(numtrain);
 80149c8:	6878      	ldr	r0, [r7, #4]
 80149ca:	f001 fcf3 	bl	80163b4 <get_train_cnf>
 80149ce:	6178      	str	r0, [r7, #20]
	if (tconf->reversed)  m.v32 = -pose;
 80149d0:	697b      	ldr	r3, [r7, #20]
 80149d2:	7edb      	ldrb	r3, [r3, #27]
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	d003      	beq.n	80149e0 <set_pose_trig+0x70>
 80149d8:	683b      	ldr	r3, [r7, #0]
 80149da:	425b      	negs	r3, r3
 80149dc:	60fb      	str	r3, [r7, #12]
 80149de:	e001      	b.n	80149e4 <set_pose_trig+0x74>
	else m.v32 = pose;
 80149e0:	683b      	ldr	r3, [r7, #0]
 80149e2:	60fb      	str	r3, [r7, #12]
	mqf_write_from_ctrl(&m);
 80149e4:	f107 0308 	add.w	r3, r7, #8
 80149e8:	4618      	mov	r0, r3
 80149ea:	f7fe fd3d 	bl	8013468 <mqf_write_from_ctrl>
}
 80149ee:	bf00      	nop
 80149f0:	3718      	adds	r7, #24
 80149f2:	46bd      	mov	sp, r7
 80149f4:	bd80      	pop	{r7, pc}
 80149f6:	bf00      	nop
 80149f8:	0801a114 	.word	0x0801a114

080149fc <pose_middle>:


static int32_t pose_middle(int blknum, const train_config_t *tconf, int dir)
{
 80149fc:	b580      	push	{r7, lr}
 80149fe:	b088      	sub	sp, #32
 8014a00:	af00      	add	r7, sp, #0
 8014a02:	60f8      	str	r0, [r7, #12]
 8014a04:	60b9      	str	r1, [r7, #8]
 8014a06:	607a      	str	r2, [r7, #4]
	int cm = get_blk_len(blknum);
 8014a08:	68f8      	ldr	r0, [r7, #12]
 8014a0a:	f004 fc9b 	bl	8019344 <get_blk_len>
 8014a0e:	61b8      	str	r0, [r7, #24]
	uint32_t p = cm * tconf->pose_per_cm;
 8014a10:	68bb      	ldr	r3, [r7, #8]
 8014a12:	8b9b      	ldrh	r3, [r3, #28]
 8014a14:	461a      	mov	r2, r3
 8014a16:	69bb      	ldr	r3, [r7, #24]
 8014a18:	fb03 f302 	mul.w	r3, r3, r2
 8014a1c:	617b      	str	r3, [r7, #20]
	uint32_t pm = p/2;
 8014a1e:	697b      	ldr	r3, [r7, #20]
 8014a20:	085b      	lsrs	r3, r3, #1
 8014a22:	61fb      	str	r3, [r7, #28]
	if (dir<0) pm = -pm;
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	da02      	bge.n	8014a30 <pose_middle+0x34>
 8014a2a:	69fb      	ldr	r3, [r7, #28]
 8014a2c:	425b      	negs	r3, r3
 8014a2e:	61fb      	str	r3, [r7, #28]
	return pm;
 8014a30:	69fb      	ldr	r3, [r7, #28]
}
 8014a32:	4618      	mov	r0, r3
 8014a34:	3720      	adds	r7, #32
 8014a36:	46bd      	mov	sp, r7
 8014a38:	bd80      	pop	{r7, pc}
	...

08014a3c <check_blk_tick>:

// ---------------------------------------------------------------


static void check_blk_tick(_UNUSED_ uint32_t tick)
{
 8014a3c:	b580      	push	{r7, lr}
 8014a3e:	b086      	sub	sp, #24
 8014a40:	af00      	add	r7, sp, #0
 8014a42:	6078      	str	r0, [r7, #4]
	if ((0)) return;
	if (occupency_changed) {
 8014a44:	4b1e      	ldr	r3, [pc, #120]	; (8014ac0 <check_blk_tick+0x84>)
 8014a46:	781b      	ldrb	r3, [r3, #0]
 8014a48:	2b00      	cmp	r3, #0
 8014a4a:	d036      	beq.n	8014aba <check_blk_tick+0x7e>
		occupency_changed = 0;
 8014a4c:	4b1c      	ldr	r3, [pc, #112]	; (8014ac0 <check_blk_tick+0x84>)
 8014a4e:	2200      	movs	r2, #0
 8014a50:	701a      	strb	r2, [r3, #0]
		for (int tidx=0; tidx<NUM_TRAINS; tidx++) {
 8014a52:	2300      	movs	r3, #0
 8014a54:	617b      	str	r3, [r7, #20]
 8014a56:	e02d      	b.n	8014ab4 <check_blk_tick+0x78>
			train_ctrl_t *tvars = &trctl[tidx];
 8014a58:	697a      	ldr	r2, [r7, #20]
 8014a5a:	4613      	mov	r3, r2
 8014a5c:	005b      	lsls	r3, r3, #1
 8014a5e:	4413      	add	r3, r2
 8014a60:	00db      	lsls	r3, r3, #3
 8014a62:	4a18      	ldr	r2, [pc, #96]	; (8014ac4 <check_blk_tick+0x88>)
 8014a64:	4413      	add	r3, r2
 8014a66:	613b      	str	r3, [r7, #16]
			const train_config_t *tconf = get_train_cnf(tidx);
 8014a68:	6978      	ldr	r0, [r7, #20]
 8014a6a:	f001 fca3 	bl	80163b4 <get_train_cnf>
 8014a6e:	60f8      	str	r0, [r7, #12]
			if (!tconf->enabled) continue;
 8014a70:	68fb      	ldr	r3, [r7, #12]
 8014a72:	7c9b      	ldrb	r3, [r3, #18]
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	d017      	beq.n	8014aa8 <check_blk_tick+0x6c>
			if (tvars->_state == train_off) continue;
 8014a78:	693b      	ldr	r3, [r7, #16]
 8014a7a:	785b      	ldrb	r3, [r3, #1]
 8014a7c:	2b00      	cmp	r3, #0
 8014a7e:	d015      	beq.n	8014aac <check_blk_tick+0x70>
			if ((tvars->_state == train_blk_wait) || (tvars->spd_limit <100)) {
 8014a80:	693b      	ldr	r3, [r7, #16]
 8014a82:	785b      	ldrb	r3, [r3, #1]
 8014a84:	2b04      	cmp	r3, #4
 8014a86:	d003      	beq.n	8014a90 <check_blk_tick+0x54>
 8014a88:	693b      	ldr	r3, [r7, #16]
 8014a8a:	891b      	ldrh	r3, [r3, #8]
 8014a8c:	2b63      	cmp	r3, #99	; 0x63
 8014a8e:	d80e      	bhi.n	8014aae <check_blk_tick+0x72>
				itm_debug1(DBG_CTRL, "chk", tidx);
 8014a90:	697a      	ldr	r2, [r7, #20]
 8014a92:	490d      	ldr	r1, [pc, #52]	; (8014ac8 <check_blk_tick+0x8c>)
 8014a94:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8014a98:	f7fe fc84 	bl	80133a4 <itm_debug1>
				update_c2_state_limits(tidx, tvars, upd_check);
 8014a9c:	2204      	movs	r2, #4
 8014a9e:	6939      	ldr	r1, [r7, #16]
 8014aa0:	6978      	ldr	r0, [r7, #20]
 8014aa2:	f7ff fc93 	bl	80143cc <update_c2_state_limits>
 8014aa6:	e002      	b.n	8014aae <check_blk_tick+0x72>
			if (!tconf->enabled) continue;
 8014aa8:	bf00      	nop
 8014aaa:	e000      	b.n	8014aae <check_blk_tick+0x72>
			if (tvars->_state == train_off) continue;
 8014aac:	bf00      	nop
		for (int tidx=0; tidx<NUM_TRAINS; tidx++) {
 8014aae:	697b      	ldr	r3, [r7, #20]
 8014ab0:	3301      	adds	r3, #1
 8014ab2:	617b      	str	r3, [r7, #20]
 8014ab4:	697b      	ldr	r3, [r7, #20]
 8014ab6:	2b07      	cmp	r3, #7
 8014ab8:	ddce      	ble.n	8014a58 <check_blk_tick+0x1c>
			}
		}
	}
}
 8014aba:	3718      	adds	r7, #24
 8014abc:	46bd      	mov	sp, r7
 8014abe:	bd80      	pop	{r7, pc}
 8014ac0:	20005324 	.word	0x20005324
 8014ac4:	20005258 	.word	0x20005258
 8014ac8:	0801a120 	.word	0x0801a120

08014acc <set_turnout>:
// - sends cmd to turnout tasklet
// - updates topology
// - sends info to UI (cto)

static void set_turnout(int tn, int v)
{
 8014acc:	b580      	push	{r7, lr}
 8014ace:	b084      	sub	sp, #16
 8014ad0:	af00      	add	r7, sp, #0
 8014ad2:	6078      	str	r0, [r7, #4]
 8014ad4:	6039      	str	r1, [r7, #0]
	itm_debug2(DBG_CTRL, "TURN", tn, v);
 8014ad6:	683b      	ldr	r3, [r7, #0]
 8014ad8:	687a      	ldr	r2, [r7, #4]
 8014ada:	4920      	ldr	r1, [pc, #128]	; (8014b5c <set_turnout+0x90>)
 8014adc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8014ae0:	f7fe fc7a 	bl	80133d8 <itm_debug2>
	if (tn<0) fatal();
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	da01      	bge.n	8014aee <set_turnout+0x22>
 8014aea:	f7fe fd57 	bl	801359c <fatal>
	if (tn>=NUM_TURNOUTS) fatal();
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	2b07      	cmp	r3, #7
 8014af2:	dd01      	ble.n	8014af8 <set_turnout+0x2c>
 8014af4:	f7fe fd52 	bl	801359c <fatal>
	if (tn>=NUM_LOCAL_TURNOUTS) fatal(); // TODO
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	2b07      	cmp	r3, #7
 8014afc:	dd01      	ble.n	8014b02 <set_turnout+0x36>
 8014afe:	f7fe fd4d 	bl	801359c <fatal>
	msg_64_t m;
	m.from = MA_CONTROL();
 8014b02:	23d7      	movs	r3, #215	; 0xd7
 8014b04:	727b      	strb	r3, [r7, #9]
	m.to = MA_TURNOUT(0, tn); // TODO board num
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	b25b      	sxtb	r3, r3
 8014b0a:	f003 0307 	and.w	r3, r3, #7
 8014b0e:	b25b      	sxtb	r3, r3
 8014b10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014b14:	b25b      	sxtb	r3, r3
 8014b16:	b2db      	uxtb	r3, r3
 8014b18:	723b      	strb	r3, [r7, #8]
	m.cmd = v ? CMD_TURNOUT_B : CMD_TURNOUT_A;
 8014b1a:	683b      	ldr	r3, [r7, #0]
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	d001      	beq.n	8014b24 <set_turnout+0x58>
 8014b20:	2332      	movs	r3, #50	; 0x32
 8014b22:	e000      	b.n	8014b26 <set_turnout+0x5a>
 8014b24:	2331      	movs	r3, #49	; 0x31
 8014b26:	72bb      	strb	r3, [r7, #10]

	mqf_write_from_ctrl(&m);
 8014b28:	f107 0308 	add.w	r3, r7, #8
 8014b2c:	4618      	mov	r0, r3
 8014b2e:	f7fe fc9b 	bl	8013468 <mqf_write_from_ctrl>
	topolgy_set_turnout(tn, v);
 8014b32:	6839      	ldr	r1, [r7, #0]
 8014b34:	6878      	ldr	r0, [r7, #4]
 8014b36:	f004 fc19 	bl	801936c <topolgy_set_turnout>

	occupency_changed = 1;
 8014b3a:	4b09      	ldr	r3, [pc, #36]	; (8014b60 <set_turnout+0x94>)
 8014b3c:	2201      	movs	r2, #1
 8014b3e:	701a      	strb	r2, [r3, #0]
    
    // forward to CTO
    m.to = MA_UI(UISUB_TRACK);
 8014b40:	2382      	movs	r3, #130	; 0x82
 8014b42:	723b      	strb	r3, [r7, #8]
    m.v2 = tn;
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	b21b      	sxth	r3, r3
 8014b48:	81fb      	strh	r3, [r7, #14]
    mqf_write_from_ctrl(&m);
 8014b4a:	f107 0308 	add.w	r3, r7, #8
 8014b4e:	4618      	mov	r0, r3
 8014b50:	f7fe fc8a 	bl	8013468 <mqf_write_from_ctrl>
}
 8014b54:	bf00      	nop
 8014b56:	3710      	adds	r7, #16
 8014b58:	46bd      	mov	sp, r7
 8014b5a:	bd80      	pop	{r7, pc}
 8014b5c:	0801a124 	.word	0x0801a124
 8014b60:	20005324 	.word	0x20005324

08014b64 <check_behaviour>:

// ---------------------------------------------------------------

static void check_behaviour(_UNUSED_ uint32_t tick)
{
 8014b64:	b580      	push	{r7, lr}
 8014b66:	b088      	sub	sp, #32
 8014b68:	af02      	add	r7, sp, #8
 8014b6a:	6078      	str	r0, [r7, #4]
	for (int tidx = 0; tidx<NUM_TRAINS; tidx++) {
 8014b6c:	2300      	movs	r3, #0
 8014b6e:	617b      	str	r3, [r7, #20]
 8014b70:	e13c      	b.n	8014dec <check_behaviour+0x288>
		const train_config_t *tconf = get_train_cnf(tidx);
 8014b72:	6978      	ldr	r0, [r7, #20]
 8014b74:	f001 fc1e 	bl	80163b4 <get_train_cnf>
 8014b78:	6138      	str	r0, [r7, #16]
		if (!tconf->enabled) continue;
 8014b7a:	693b      	ldr	r3, [r7, #16]
 8014b7c:	7c9b      	ldrb	r3, [r3, #18]
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	f000 812a 	beq.w	8014dd8 <check_behaviour+0x274>

		if (!SCEN_TWOTRAIN) return; // XXX

		train_ctrl_t *tvars = &trctl[tidx];
 8014b84:	697a      	ldr	r2, [r7, #20]
 8014b86:	4613      	mov	r3, r2
 8014b88:	005b      	lsls	r3, r3, #1
 8014b8a:	4413      	add	r3, r2
 8014b8c:	00db      	lsls	r3, r3, #3
 8014b8e:	4a9b      	ldr	r2, [pc, #620]	; (8014dfc <check_behaviour+0x298>)
 8014b90:	4413      	add	r3, r2
 8014b92:	60fb      	str	r3, [r7, #12]

		uint16_t flags = tvars->behaviour_flags;
 8014b94:	68fb      	ldr	r3, [r7, #12]
 8014b96:	899b      	ldrh	r3, [r3, #12]
 8014b98:	817b      	strh	r3, [r7, #10]

		//itm_debug3(DBG_CTRL, "(hi f)", tidx, flags, tvars->canton1_addr);

		if (tvars->_mode != train_auto) {
 8014b9a:	68fb      	ldr	r3, [r7, #12]
 8014b9c:	781b      	ldrb	r3, [r3, #0]
 8014b9e:	2b03      	cmp	r3, #3
 8014ba0:	d01b      	beq.n	8014bda <check_behaviour+0x76>
			if ((tidx == 0) && (flags & BEHAVE_EOT2) && (tvars->_dir<0)) {
 8014ba2:	697b      	ldr	r3, [r7, #20]
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	f040 8119 	bne.w	8014ddc <check_behaviour+0x278>
 8014baa:	897b      	ldrh	r3, [r7, #10]
 8014bac:	f003 0308 	and.w	r3, r3, #8
 8014bb0:	2b00      	cmp	r3, #0
 8014bb2:	f000 8113 	beq.w	8014ddc <check_behaviour+0x278>
 8014bb6:	68fb      	ldr	r3, [r7, #12]
 8014bb8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	f280 810d 	bge.w	8014ddc <check_behaviour+0x278>
				ctrl_set_mode(tidx, train_auto);
 8014bc2:	2103      	movs	r1, #3
 8014bc4:	6978      	ldr	r0, [r7, #20]
 8014bc6:	f7fe fd79 	bl	80136bc <ctrl_set_mode>
				set_timer(tidx, tvars, TBEHAVE, 500);
 8014bca:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8014bce:	2201      	movs	r2, #1
 8014bd0:	68f9      	ldr	r1, [r7, #12]
 8014bd2:	6978      	ldr	r0, [r7, #20]
 8014bd4:	f7fe fe3a 	bl	801384c <set_timer>
			}
			continue;
 8014bd8:	e100      	b.n	8014ddc <check_behaviour+0x278>
		}
		if (!flags) continue;
 8014bda:	897b      	ldrh	r3, [r7, #10]
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	f000 80ff 	beq.w	8014de0 <check_behaviour+0x27c>

		tvars->behaviour_flags = 0;
 8014be2:	68fb      	ldr	r3, [r7, #12]
 8014be4:	2200      	movs	r2, #0
 8014be6:	819a      	strh	r2, [r3, #12]
		// ---- behave
		itm_debug3(DBG_CTRL, "hi f=", tidx, flags, tvars->canton1_addr);
 8014be8:	897a      	ldrh	r2, [r7, #10]
 8014bea:	68fb      	ldr	r3, [r7, #12]
 8014bec:	795b      	ldrb	r3, [r3, #5]
 8014bee:	9300      	str	r3, [sp, #0]
 8014bf0:	4613      	mov	r3, r2
 8014bf2:	697a      	ldr	r2, [r7, #20]
 8014bf4:	4982      	ldr	r1, [pc, #520]	; (8014e00 <check_behaviour+0x29c>)
 8014bf6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8014bfa:	f7fe fc09 	bl	8013410 <itm_debug3>
		if (tidx == 1) {
 8014bfe:	697b      	ldr	r3, [r7, #20]
 8014c00:	2b01      	cmp	r3, #1
 8014c02:	f040 8090 	bne.w	8014d26 <check_behaviour+0x1c2>
			if ((flags & BEHAVE_RESTARTBLK) && (tvars->canton1_addr == MA_CANTON(0,2))) {
 8014c06:	897b      	ldrh	r3, [r7, #10]
 8014c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d008      	beq.n	8014c22 <check_behaviour+0xbe>
 8014c10:	68fb      	ldr	r3, [r7, #12]
 8014c12:	795b      	ldrb	r3, [r3, #5]
 8014c14:	2b02      	cmp	r3, #2
 8014c16:	d104      	bne.n	8014c22 <check_behaviour+0xbe>
                set_turnout(0, 1);
 8014c18:	2101      	movs	r1, #1
 8014c1a:	2000      	movs	r0, #0
 8014c1c:	f7ff ff56 	bl	8014acc <set_turnout>
				continue;
 8014c20:	e0e1      	b.n	8014de6 <check_behaviour+0x282>
			}
			if ((flags & BEHAVE_EOT2) && (tvars->_dir > 0)) {
 8014c22:	897b      	ldrh	r3, [r7, #10]
 8014c24:	f003 0308 	and.w	r3, r3, #8
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	d014      	beq.n	8014c56 <check_behaviour+0xf2>
 8014c2c:	68fb      	ldr	r3, [r7, #12]
 8014c2e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014c32:	2b00      	cmp	r3, #0
 8014c34:	dd0f      	ble.n	8014c56 <check_behaviour+0xf2>
				set_timer(tidx, tvars, TBEHAVE, 1*60*1000);
 8014c36:	f64e 2360 	movw	r3, #60000	; 0xea60
 8014c3a:	2201      	movs	r2, #1
 8014c3c:	68f9      	ldr	r1, [r7, #12]
 8014c3e:	6978      	ldr	r0, [r7, #20]
 8014c40:	f7fe fe04 	bl	801384c <set_timer>
				evt_cmd_set_setdirspeed(tidx, tvars, 0, 0, 1);
 8014c44:	2301      	movs	r3, #1
 8014c46:	9300      	str	r3, [sp, #0]
 8014c48:	2300      	movs	r3, #0
 8014c4a:	2200      	movs	r2, #0
 8014c4c:	68f9      	ldr	r1, [r7, #12]
 8014c4e:	6978      	ldr	r0, [r7, #20]
 8014c50:	f7ff fa2e 	bl	80140b0 <evt_cmd_set_setdirspeed>
                //set_turnout(0, 1);
				return;
 8014c54:	e0ce      	b.n	8014df4 <check_behaviour+0x290>
			}
			if ((flags & BEHAVE_EOT2) && (tvars->_dir < 0)) {
 8014c56:	897b      	ldrh	r3, [r7, #10]
 8014c58:	f003 0308 	and.w	r3, r3, #8
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	d018      	beq.n	8014c92 <check_behaviour+0x12e>
 8014c60:	68fb      	ldr	r3, [r7, #12]
 8014c62:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014c66:	2b00      	cmp	r3, #0
 8014c68:	da13      	bge.n	8014c92 <check_behaviour+0x12e>
				set_timer(tidx, tvars, TBEHAVE, 300);
 8014c6a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8014c6e:	2201      	movs	r2, #1
 8014c70:	68f9      	ldr	r1, [r7, #12]
 8014c72:	6978      	ldr	r0, [r7, #20]
 8014c74:	f7fe fdea 	bl	801384c <set_timer>
				evt_cmd_set_setdirspeed(tidx, tvars, 0, 0, 1);
 8014c78:	2301      	movs	r3, #1
 8014c7a:	9300      	str	r3, [sp, #0]
 8014c7c:	2300      	movs	r3, #0
 8014c7e:	2200      	movs	r2, #0
 8014c80:	68f9      	ldr	r1, [r7, #12]
 8014c82:	6978      	ldr	r0, [r7, #20]
 8014c84:	f7ff fa14 	bl	80140b0 <evt_cmd_set_setdirspeed>
				set_turnout(0, 0);
 8014c88:	2100      	movs	r1, #0
 8014c8a:	2000      	movs	r0, #0
 8014c8c:	f7ff ff1e 	bl	8014acc <set_turnout>
				continue;
 8014c90:	e0a9      	b.n	8014de6 <check_behaviour+0x282>
			}
			if (flags & BEHAVE_EOT2) {
 8014c92:	897b      	ldrh	r3, [r7, #10]
 8014c94:	f003 0308 	and.w	r3, r3, #8
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	d015      	beq.n	8014cc8 <check_behaviour+0x164>
				itm_debug3(DBG_CTRL, "unex EOT2", tidx, tvars->_dir, tvars->canton1_addr);
 8014c9c:	68fb      	ldr	r3, [r7, #12]
 8014c9e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014ca2:	461a      	mov	r2, r3
 8014ca4:	68fb      	ldr	r3, [r7, #12]
 8014ca6:	795b      	ldrb	r3, [r3, #5]
 8014ca8:	9300      	str	r3, [sp, #0]
 8014caa:	4613      	mov	r3, r2
 8014cac:	697a      	ldr	r2, [r7, #20]
 8014cae:	4955      	ldr	r1, [pc, #340]	; (8014e04 <check_behaviour+0x2a0>)
 8014cb0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8014cb4:	f7fe fbac 	bl	8013410 <itm_debug3>
				set_timer(tidx, tvars, TBEHAVE, 300);
 8014cb8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8014cbc:	2201      	movs	r2, #1
 8014cbe:	68f9      	ldr	r1, [r7, #12]
 8014cc0:	6978      	ldr	r0, [r7, #20]
 8014cc2:	f7fe fdc3 	bl	801384c <set_timer>
				continue;
 8014cc6:	e08e      	b.n	8014de6 <check_behaviour+0x282>
			}
			if (flags & BEHAVE_TBEHAVE) {
 8014cc8:	897b      	ldrh	r3, [r7, #10]
 8014cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	d029      	beq.n	8014d26 <check_behaviour+0x1c2>
				if (tvars->canton1_addr == MA_CANTON(0,1)) {
 8014cd2:	68fb      	ldr	r3, [r7, #12]
 8014cd4:	795b      	ldrb	r3, [r3, #5]
 8014cd6:	2b01      	cmp	r3, #1
 8014cd8:	d109      	bne.n	8014cee <check_behaviour+0x18a>
					evt_cmd_set_setdirspeed(tidx, tvars, -1, 15, 1);
 8014cda:	2301      	movs	r3, #1
 8014cdc:	9300      	str	r3, [sp, #0]
 8014cde:	230f      	movs	r3, #15
 8014ce0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014ce4:	68f9      	ldr	r1, [r7, #12]
 8014ce6:	6978      	ldr	r0, [r7, #20]
 8014ce8:	f7ff f9e2 	bl	80140b0 <evt_cmd_set_setdirspeed>
				} else if (tvars->canton1_addr == MA_CANTON(0,2)) {
					evt_cmd_set_setdirspeed(tidx, tvars, 1, 15, 1);
				} else {
					itm_debug3(DBG_CTRL, "unex TB", tidx, tvars->_dir, tvars->canton1_addr);
				}
				continue;
 8014cec:	e07b      	b.n	8014de6 <check_behaviour+0x282>
				} else if (tvars->canton1_addr == MA_CANTON(0,2)) {
 8014cee:	68fb      	ldr	r3, [r7, #12]
 8014cf0:	795b      	ldrb	r3, [r3, #5]
 8014cf2:	2b02      	cmp	r3, #2
 8014cf4:	d108      	bne.n	8014d08 <check_behaviour+0x1a4>
					evt_cmd_set_setdirspeed(tidx, tvars, 1, 15, 1);
 8014cf6:	2301      	movs	r3, #1
 8014cf8:	9300      	str	r3, [sp, #0]
 8014cfa:	230f      	movs	r3, #15
 8014cfc:	2201      	movs	r2, #1
 8014cfe:	68f9      	ldr	r1, [r7, #12]
 8014d00:	6978      	ldr	r0, [r7, #20]
 8014d02:	f7ff f9d5 	bl	80140b0 <evt_cmd_set_setdirspeed>
				continue;
 8014d06:	e06e      	b.n	8014de6 <check_behaviour+0x282>
					itm_debug3(DBG_CTRL, "unex TB", tidx, tvars->_dir, tvars->canton1_addr);
 8014d08:	68fb      	ldr	r3, [r7, #12]
 8014d0a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014d0e:	461a      	mov	r2, r3
 8014d10:	68fb      	ldr	r3, [r7, #12]
 8014d12:	795b      	ldrb	r3, [r3, #5]
 8014d14:	9300      	str	r3, [sp, #0]
 8014d16:	4613      	mov	r3, r2
 8014d18:	697a      	ldr	r2, [r7, #20]
 8014d1a:	493b      	ldr	r1, [pc, #236]	; (8014e08 <check_behaviour+0x2a4>)
 8014d1c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8014d20:	f7fe fb76 	bl	8013410 <itm_debug3>
				continue;
 8014d24:	e05f      	b.n	8014de6 <check_behaviour+0x282>
			}
		}
		if (tidx == 0) {
 8014d26:	697b      	ldr	r3, [r7, #20]
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	d15c      	bne.n	8014de6 <check_behaviour+0x282>
			if (flags & BEHAVE_TBEHAVE) {
 8014d2c:	897b      	ldrh	r3, [r7, #10]
 8014d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014d32:	2b00      	cmp	r3, #0
 8014d34:	d027      	beq.n	8014d86 <check_behaviour+0x222>
				itm_debug2(DBG_CTRL, "TBehave", tidx, tvars->canton1_addr);
 8014d36:	68fb      	ldr	r3, [r7, #12]
 8014d38:	795b      	ldrb	r3, [r3, #5]
 8014d3a:	697a      	ldr	r2, [r7, #20]
 8014d3c:	4933      	ldr	r1, [pc, #204]	; (8014e0c <check_behaviour+0x2a8>)
 8014d3e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8014d42:	f7fe fb49 	bl	80133d8 <itm_debug2>
				if (tvars->canton1_addr == MA_CANTON(0,0)) {
 8014d46:	68fb      	ldr	r3, [r7, #12]
 8014d48:	795b      	ldrb	r3, [r3, #5]
 8014d4a:	2b00      	cmp	r3, #0
 8014d4c:	d108      	bne.n	8014d60 <check_behaviour+0x1fc>
					evt_cmd_set_setdirspeed(tidx, tvars, 1, 50, 1);
 8014d4e:	2301      	movs	r3, #1
 8014d50:	9300      	str	r3, [sp, #0]
 8014d52:	2332      	movs	r3, #50	; 0x32
 8014d54:	2201      	movs	r2, #1
 8014d56:	68f9      	ldr	r1, [r7, #12]
 8014d58:	6978      	ldr	r0, [r7, #20]
 8014d5a:	f7ff f9a9 	bl	80140b0 <evt_cmd_set_setdirspeed>
					evt_cmd_set_setdirspeed(tidx, tvars, -1, 95, 1);
				} else {
					// should not happen
					ctrl_set_mode(tidx, train_manual);
				}
				continue;
 8014d5e:	e042      	b.n	8014de6 <check_behaviour+0x282>
				} else if (tvars->canton1_addr == MA_CANTON(0,1)) {
 8014d60:	68fb      	ldr	r3, [r7, #12]
 8014d62:	795b      	ldrb	r3, [r3, #5]
 8014d64:	2b01      	cmp	r3, #1
 8014d66:	d109      	bne.n	8014d7c <check_behaviour+0x218>
					evt_cmd_set_setdirspeed(tidx, tvars, -1, 95, 1);
 8014d68:	2301      	movs	r3, #1
 8014d6a:	9300      	str	r3, [sp, #0]
 8014d6c:	235f      	movs	r3, #95	; 0x5f
 8014d6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014d72:	68f9      	ldr	r1, [r7, #12]
 8014d74:	6978      	ldr	r0, [r7, #20]
 8014d76:	f7ff f99b 	bl	80140b0 <evt_cmd_set_setdirspeed>
				continue;
 8014d7a:	e034      	b.n	8014de6 <check_behaviour+0x282>
					ctrl_set_mode(tidx, train_manual);
 8014d7c:	2101      	movs	r1, #1
 8014d7e:	6978      	ldr	r0, [r7, #20]
 8014d80:	f7fe fc9c 	bl	80136bc <ctrl_set_mode>
				continue;
 8014d84:	e02f      	b.n	8014de6 <check_behaviour+0x282>
			}
			if (flags & BEHAVE_EOT2)  {
 8014d86:	897b      	ldrh	r3, [r7, #10]
 8014d88:	f003 0308 	and.w	r3, r3, #8
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	d02a      	beq.n	8014de6 <check_behaviour+0x282>
				evt_cmd_set_setdirspeed(tidx, tvars, 0, 0, 1);
 8014d90:	2301      	movs	r3, #1
 8014d92:	9300      	str	r3, [sp, #0]
 8014d94:	2300      	movs	r3, #0
 8014d96:	2200      	movs	r2, #0
 8014d98:	68f9      	ldr	r1, [r7, #12]
 8014d9a:	6978      	ldr	r0, [r7, #20]
 8014d9c:	f7ff f988 	bl	80140b0 <evt_cmd_set_setdirspeed>
                if (tvars->canton1_addr == MA_CANTON(0,0)) {
 8014da0:	68fb      	ldr	r3, [r7, #12]
 8014da2:	795b      	ldrb	r3, [r3, #5]
 8014da4:	2b00      	cmp	r3, #0
 8014da6:	d10b      	bne.n	8014dc0 <check_behaviour+0x25c>
                    set_timer(tidx, tvars, TBEHAVE, 1000*5);
 8014da8:	f241 3388 	movw	r3, #5000	; 0x1388
 8014dac:	2201      	movs	r2, #1
 8014dae:	68f9      	ldr	r1, [r7, #12]
 8014db0:	6978      	ldr	r0, [r7, #20]
 8014db2:	f7fe fd4b 	bl	801384c <set_timer>
                    set_turnout(0, 1);
 8014db6:	2101      	movs	r1, #1
 8014db8:	2000      	movs	r0, #0
 8014dba:	f7ff fe87 	bl	8014acc <set_turnout>
                } else if (tvars->canton1_addr == MA_CANTON(0,1)) {
                    set_timer(tidx, tvars, TBEHAVE, 1000*60*1);
                }
				continue;
 8014dbe:	e011      	b.n	8014de4 <check_behaviour+0x280>
                } else if (tvars->canton1_addr == MA_CANTON(0,1)) {
 8014dc0:	68fb      	ldr	r3, [r7, #12]
 8014dc2:	795b      	ldrb	r3, [r3, #5]
 8014dc4:	2b01      	cmp	r3, #1
 8014dc6:	d10d      	bne.n	8014de4 <check_behaviour+0x280>
                    set_timer(tidx, tvars, TBEHAVE, 1000*60*1);
 8014dc8:	f64e 2360 	movw	r3, #60000	; 0xea60
 8014dcc:	2201      	movs	r2, #1
 8014dce:	68f9      	ldr	r1, [r7, #12]
 8014dd0:	6978      	ldr	r0, [r7, #20]
 8014dd2:	f7fe fd3b 	bl	801384c <set_timer>
				continue;
 8014dd6:	e005      	b.n	8014de4 <check_behaviour+0x280>
		if (!tconf->enabled) continue;
 8014dd8:	bf00      	nop
 8014dda:	e004      	b.n	8014de6 <check_behaviour+0x282>
			continue;
 8014ddc:	bf00      	nop
 8014dde:	e002      	b.n	8014de6 <check_behaviour+0x282>
		if (!flags) continue;
 8014de0:	bf00      	nop
 8014de2:	e000      	b.n	8014de6 <check_behaviour+0x282>
				continue;
 8014de4:	bf00      	nop
	for (int tidx = 0; tidx<NUM_TRAINS; tidx++) {
 8014de6:	697b      	ldr	r3, [r7, #20]
 8014de8:	3301      	adds	r3, #1
 8014dea:	617b      	str	r3, [r7, #20]
 8014dec:	697b      	ldr	r3, [r7, #20]
 8014dee:	2b07      	cmp	r3, #7
 8014df0:	f77f aebf 	ble.w	8014b72 <check_behaviour+0xe>
			}
		}
	}
}
 8014df4:	3718      	adds	r7, #24
 8014df6:	46bd      	mov	sp, r7
 8014df8:	bd80      	pop	{r7, pc}
 8014dfa:	bf00      	nop
 8014dfc:	20005258 	.word	0x20005258
 8014e00:	0801a12c 	.word	0x0801a12c
 8014e04:	0801a134 	.word	0x0801a134
 8014e08:	0801a140 	.word	0x0801a140
 8014e0c:	0801a148 	.word	0x0801a148

08014e10 <itm_debug1>:
{
 8014e10:	b580      	push	{r7, lr}
 8014e12:	b086      	sub	sp, #24
 8014e14:	af02      	add	r7, sp, #8
 8014e16:	60f8      	str	r0, [r7, #12]
 8014e18:	60b9      	str	r1, [r7, #8]
 8014e1a:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 8014e1c:	4b08      	ldr	r3, [pc, #32]	; (8014e40 <itm_debug1+0x30>)
 8014e1e:	681a      	ldr	r2, [r3, #0]
 8014e20:	68fb      	ldr	r3, [r7, #12]
 8014e22:	4013      	ands	r3, r2
 8014e24:	2b00      	cmp	r3, #0
 8014e26:	d007      	beq.n	8014e38 <itm_debug1+0x28>
 8014e28:	2301      	movs	r3, #1
 8014e2a:	9300      	str	r3, [sp, #0]
 8014e2c:	2300      	movs	r3, #0
 8014e2e:	2200      	movs	r2, #0
 8014e30:	6879      	ldr	r1, [r7, #4]
 8014e32:	68b8      	ldr	r0, [r7, #8]
 8014e34:	f004 fb86 	bl	8019544 <_itm_debug3>
}
 8014e38:	bf00      	nop
 8014e3a:	3710      	adds	r7, #16
 8014e3c:	46bd      	mov	sp, r7
 8014e3e:	bd80      	pop	{r7, pc}
 8014e40:	20000610 	.word	0x20000610

08014e44 <itm_debug3>:
{
 8014e44:	b580      	push	{r7, lr}
 8014e46:	b086      	sub	sp, #24
 8014e48:	af02      	add	r7, sp, #8
 8014e4a:	60f8      	str	r0, [r7, #12]
 8014e4c:	60b9      	str	r1, [r7, #8]
 8014e4e:	607a      	str	r2, [r7, #4]
 8014e50:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, v3, 3);
 8014e52:	4b09      	ldr	r3, [pc, #36]	; (8014e78 <itm_debug3+0x34>)
 8014e54:	681a      	ldr	r2, [r3, #0]
 8014e56:	68fb      	ldr	r3, [r7, #12]
 8014e58:	4013      	ands	r3, r2
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	d007      	beq.n	8014e6e <itm_debug3+0x2a>
 8014e5e:	2303      	movs	r3, #3
 8014e60:	9300      	str	r3, [sp, #0]
 8014e62:	69bb      	ldr	r3, [r7, #24]
 8014e64:	683a      	ldr	r2, [r7, #0]
 8014e66:	6879      	ldr	r1, [r7, #4]
 8014e68:	68b8      	ldr	r0, [r7, #8]
 8014e6a:	f004 fb6b 	bl	8019544 <_itm_debug3>
}
 8014e6e:	bf00      	nop
 8014e70:	3710      	adds	r7, #16
 8014e72:	46bd      	mov	sp, r7
 8014e74:	bd80      	pop	{r7, pc}
 8014e76:	bf00      	nop
 8014e78:	20000610 	.word	0x20000610

08014e7c <canton_error>:
#define ERR_STRANGE			-4242

int trainctl_error(char l, int code, const char *msg);

static inline int canton_error(int code, const char *msg)
{
 8014e7c:	b580      	push	{r7, lr}
 8014e7e:	b082      	sub	sp, #8
 8014e80:	af00      	add	r7, sp, #0
 8014e82:	6078      	str	r0, [r7, #4]
 8014e84:	6039      	str	r1, [r7, #0]
	return trainctl_error('C', code, msg);
 8014e86:	683a      	ldr	r2, [r7, #0]
 8014e88:	6879      	ldr	r1, [r7, #4]
 8014e8a:	2043      	movs	r0, #67	; 0x43
 8014e8c:	f001 f8e2 	bl	8016054 <trainctl_error>
 8014e90:	4603      	mov	r3, r0
}
 8014e92:	4618      	mov	r0, r3
 8014e94:	3708      	adds	r7, #8
 8014e96:	46bd      	mov	sp, r7
 8014e98:	bd80      	pop	{r7, pc}

08014e9a <canton_error_rc>:
static inline int canton_error_rc(int rc, int code, const char *msg)
{
 8014e9a:	b580      	push	{r7, lr}
 8014e9c:	b084      	sub	sp, #16
 8014e9e:	af00      	add	r7, sp, #0
 8014ea0:	60f8      	str	r0, [r7, #12]
 8014ea2:	60b9      	str	r1, [r7, #8]
 8014ea4:	607a      	str	r2, [r7, #4]
	trainctl_error('C', code, msg);
 8014ea6:	687a      	ldr	r2, [r7, #4]
 8014ea8:	68b9      	ldr	r1, [r7, #8]
 8014eaa:	2043      	movs	r0, #67	; 0x43
 8014eac:	f001 f8d2 	bl	8016054 <trainctl_error>
	return rc;
 8014eb0:	68fb      	ldr	r3, [r7, #12]
}
 8014eb2:	4618      	mov	r0, r3
 8014eb4:	3710      	adds	r7, #16
 8014eb6:	46bd      	mov	sp, r7
 8014eb8:	bd80      	pop	{r7, pc}
	...

08014ebc <mqf_read_to_canton>:
#define CMD_TURNOUT_B		0x32
#define CMD_TURNOUT_HI_A    0x33
#define CMD_TURNOUT_HI_B    0x34


LFMQUEUE_DEF_H(to_canton, msg_64_t)
 8014ebc:	b580      	push	{r7, lr}
 8014ebe:	b082      	sub	sp, #8
 8014ec0:	af00      	add	r7, sp, #0
 8014ec2:	6078      	str	r0, [r7, #4]
 8014ec4:	6879      	ldr	r1, [r7, #4]
 8014ec6:	4804      	ldr	r0, [pc, #16]	; (8014ed8 <mqf_read_to_canton+0x1c>)
 8014ec8:	f004 fcbe 	bl	8019848 <mqf_read>
 8014ecc:	4603      	mov	r3, r0
 8014ece:	4618      	mov	r0, r3
 8014ed0:	3708      	adds	r7, #8
 8014ed2:	46bd      	mov	sp, r7
 8014ed4:	bd80      	pop	{r7, pc}
 8014ed6:	bf00      	nop
 8014ed8:	2000053c 	.word	0x2000053c

08014edc <mqf_write_from_canton>:
LFMQUEUE_DEF_H(from_canton, msg_64_t)
 8014edc:	b580      	push	{r7, lr}
 8014ede:	b082      	sub	sp, #8
 8014ee0:	af00      	add	r7, sp, #0
 8014ee2:	6078      	str	r0, [r7, #4]
 8014ee4:	6879      	ldr	r1, [r7, #4]
 8014ee6:	4804      	ldr	r0, [pc, #16]	; (8014ef8 <mqf_write_from_canton+0x1c>)
 8014ee8:	f004 fc34 	bl	8019754 <mqf_write>
 8014eec:	4603      	mov	r3, r0
 8014eee:	4618      	mov	r0, r3
 8014ef0:	3708      	adds	r7, #8
 8014ef2:	46bd      	mov	sp, r7
 8014ef4:	bd80      	pop	{r7, pc}
 8014ef6:	bf00      	nop
 8014ef8:	20000548 	.word	0x20000548

08014efc <canton_reset>:
//--------------------------------------------



static void canton_reset(void)
{
 8014efc:	b580      	push	{r7, lr}
 8014efe:	b086      	sub	sp, #24
 8014f00:	af02      	add	r7, sp, #8
	for (int i = 0; i<NUM_LOCAL_CANTONS_SW; i++) {
 8014f02:	2300      	movs	r3, #0
 8014f04:	60fb      	str	r3, [r7, #12]
 8014f06:	e01c      	b.n	8014f42 <canton_reset+0x46>
		USE_CANTON(i)
 8014f08:	68f8      	ldr	r0, [r7, #12]
 8014f0a:	f001 fa2b 	bl	8016364 <get_canton_cnf>
 8014f0e:	60b8      	str	r0, [r7, #8]
 8014f10:	68fb      	ldr	r3, [r7, #12]
 8014f12:	00db      	lsls	r3, r3, #3
 8014f14:	4a0e      	ldr	r2, [pc, #56]	; (8014f50 <canton_reset+0x54>)
 8014f16:	4413      	add	r3, r2
 8014f18:	607b      	str	r3, [r7, #4]
		cvars->cur_dir = 99;
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	2263      	movs	r2, #99	; 0x63
 8014f1e:	701a      	strb	r2, [r3, #0]
		canton_set_pwm(i, cconf, cvars, 0, 0);
 8014f20:	2300      	movs	r3, #0
 8014f22:	9300      	str	r3, [sp, #0]
 8014f24:	2300      	movs	r3, #0
 8014f26:	687a      	ldr	r2, [r7, #4]
 8014f28:	68b9      	ldr	r1, [r7, #8]
 8014f2a:	68f8      	ldr	r0, [r7, #12]
 8014f2c:	f000 f98e 	bl	801524c <canton_set_pwm>
		canton_set_volt(i, cconf, cvars,  7);
 8014f30:	2307      	movs	r3, #7
 8014f32:	687a      	ldr	r2, [r7, #4]
 8014f34:	68b9      	ldr	r1, [r7, #8]
 8014f36:	68f8      	ldr	r0, [r7, #12]
 8014f38:	f000 fae4 	bl	8015504 <canton_set_volt>
	for (int i = 0; i<NUM_LOCAL_CANTONS_SW; i++) {
 8014f3c:	68fb      	ldr	r3, [r7, #12]
 8014f3e:	3301      	adds	r3, #1
 8014f40:	60fb      	str	r3, [r7, #12]
 8014f42:	68fb      	ldr	r3, [r7, #12]
 8014f44:	2b07      	cmp	r3, #7
 8014f46:	dddf      	ble.n	8014f08 <canton_reset+0xc>
	}
}
 8014f48:	bf00      	nop
 8014f4a:	3710      	adds	r7, #16
 8014f4c:	46bd      	mov	sp, r7
 8014f4e:	bd80      	pop	{r7, pc}
 8014f50:	2000534c 	.word	0x2000534c

08014f54 <handle_canton_cmd>:

static void handle_canton_cmd(int cidx, msg_64_t *m)
{
 8014f54:	b580      	push	{r7, lr}
 8014f56:	b086      	sub	sp, #24
 8014f58:	af02      	add	r7, sp, #8
 8014f5a:	6078      	str	r0, [r7, #4]
 8014f5c:	6039      	str	r1, [r7, #0]
	if (m->cmd & 0x40) {
 8014f5e:	683b      	ldr	r3, [r7, #0]
 8014f60:	789b      	ldrb	r3, [r3, #2]
 8014f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014f66:	2b00      	cmp	r3, #0
 8014f68:	d00b      	beq.n	8014f82 <handle_canton_cmd+0x2e>
		itm_debug1(DBG_LOWCTRL, "msg-bemf", m->to);
 8014f6a:	683b      	ldr	r3, [r7, #0]
 8014f6c:	781b      	ldrb	r3, [r3, #0]
 8014f6e:	461a      	mov	r2, r3
 8014f70:	493a      	ldr	r1, [pc, #232]	; (801505c <handle_canton_cmd+0x108>)
 8014f72:	f44f 7080 	mov.w	r0, #256	; 0x100
 8014f76:	f7ff ff4b 	bl	8014e10 <itm_debug1>
		bemf_msg(m);
 8014f7a:	6838      	ldr	r0, [r7, #0]
 8014f7c:	f000 fc52 	bl	8015824 <bemf_msg>
		return;
 8014f80:	e069      	b.n	8015056 <handle_canton_cmd+0x102>
	}


	USE_CANTON(cidx)
 8014f82:	6878      	ldr	r0, [r7, #4]
 8014f84:	f001 f9ee 	bl	8016364 <get_canton_cnf>
 8014f88:	60f8      	str	r0, [r7, #12]
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	00db      	lsls	r3, r3, #3
 8014f8e:	4a34      	ldr	r2, [pc, #208]	; (8015060 <handle_canton_cmd+0x10c>)
 8014f90:	4413      	add	r3, r2
 8014f92:	60bb      	str	r3, [r7, #8]
	if (!cvars) {
 8014f94:	68bb      	ldr	r3, [r7, #8]
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	d105      	bne.n	8014fa6 <handle_canton_cmd+0x52>
		itm_debug1(DBG_LOWCTRL|DBG_ERR, "no cvars", cidx);
 8014f9a:	687a      	ldr	r2, [r7, #4]
 8014f9c:	4931      	ldr	r1, [pc, #196]	; (8015064 <handle_canton_cmd+0x110>)
 8014f9e:	4832      	ldr	r0, [pc, #200]	; (8015068 <handle_canton_cmd+0x114>)
 8014fa0:	f7ff ff36 	bl	8014e10 <itm_debug1>
		return;
 8014fa4:	e057      	b.n	8015056 <handle_canton_cmd+0x102>
	}
	switch (m->cmd) {
 8014fa6:	683b      	ldr	r3, [r7, #0]
 8014fa8:	789b      	ldrb	r3, [r3, #2]
 8014faa:	2b01      	cmp	r3, #1
 8014fac:	d016      	beq.n	8014fdc <handle_canton_cmd+0x88>
 8014fae:	2b02      	cmp	r3, #2
 8014fb0:	d148      	bne.n	8015044 <handle_canton_cmd+0xf0>
	case CMD_STOP:
		itm_debug1(DBG_LOWCTRL, "CMD STOP", 0);
 8014fb2:	2200      	movs	r2, #0
 8014fb4:	492d      	ldr	r1, [pc, #180]	; (801506c <handle_canton_cmd+0x118>)
 8014fb6:	f44f 7080 	mov.w	r0, #256	; 0x100
 8014fba:	f7ff ff29 	bl	8014e10 <itm_debug1>
		canton_set_pwm(cidx, cconf, cvars, 0, 0);
 8014fbe:	2300      	movs	r3, #0
 8014fc0:	9300      	str	r3, [sp, #0]
 8014fc2:	2300      	movs	r3, #0
 8014fc4:	68ba      	ldr	r2, [r7, #8]
 8014fc6:	68f9      	ldr	r1, [r7, #12]
 8014fc8:	6878      	ldr	r0, [r7, #4]
 8014fca:	f000 f93f 	bl	801524c <canton_set_pwm>
		canton_set_volt(cidx, cconf, cvars,  7);
 8014fce:	2307      	movs	r3, #7
 8014fd0:	68ba      	ldr	r2, [r7, #8]
 8014fd2:	68f9      	ldr	r1, [r7, #12]
 8014fd4:	6878      	ldr	r0, [r7, #4]
 8014fd6:	f000 fa95 	bl	8015504 <canton_set_volt>
		break;
 8014fda:	e03c      	b.n	8015056 <handle_canton_cmd+0x102>
	case CMD_SETVPWM:
		itm_debug3(DBG_LOWCTRL, "SETVPWM", cidx, m->v1u, m->v2);
 8014fdc:	683b      	ldr	r3, [r7, #0]
 8014fde:	889b      	ldrh	r3, [r3, #4]
 8014fe0:	461a      	mov	r2, r3
 8014fe2:	683b      	ldr	r3, [r7, #0]
 8014fe4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8014fe8:	9300      	str	r3, [sp, #0]
 8014fea:	4613      	mov	r3, r2
 8014fec:	687a      	ldr	r2, [r7, #4]
 8014fee:	4920      	ldr	r1, [pc, #128]	; (8015070 <handle_canton_cmd+0x11c>)
 8014ff0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8014ff4:	f7ff ff26 	bl	8014e44 <itm_debug3>
		canton_set_pwm(cidx, cconf, cvars, SIGNOF0(m->v2), abs(m->v2));
 8014ff8:	683b      	ldr	r3, [r7, #0]
 8014ffa:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8014ffe:	2b00      	cmp	r3, #0
 8015000:	db09      	blt.n	8015016 <handle_canton_cmd+0xc2>
 8015002:	683b      	ldr	r3, [r7, #0]
 8015004:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8015008:	2b00      	cmp	r3, #0
 801500a:	bfcc      	ite	gt
 801500c:	2301      	movgt	r3, #1
 801500e:	2300      	movle	r3, #0
 8015010:	b2db      	uxtb	r3, r3
 8015012:	b25a      	sxtb	r2, r3
 8015014:	e001      	b.n	801501a <handle_canton_cmd+0xc6>
 8015016:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801501a:	683b      	ldr	r3, [r7, #0]
 801501c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8015020:	2b00      	cmp	r3, #0
 8015022:	bfb8      	it	lt
 8015024:	425b      	neglt	r3, r3
 8015026:	9300      	str	r3, [sp, #0]
 8015028:	4613      	mov	r3, r2
 801502a:	68ba      	ldr	r2, [r7, #8]
 801502c:	68f9      	ldr	r1, [r7, #12]
 801502e:	6878      	ldr	r0, [r7, #4]
 8015030:	f000 f90c 	bl	801524c <canton_set_pwm>
		canton_set_volt(cidx, cconf, cvars,  m->v1u);
 8015034:	683b      	ldr	r3, [r7, #0]
 8015036:	889b      	ldrh	r3, [r3, #4]
 8015038:	68ba      	ldr	r2, [r7, #8]
 801503a:	68f9      	ldr	r1, [r7, #12]
 801503c:	6878      	ldr	r0, [r7, #4]
 801503e:	f000 fa61 	bl	8015504 <canton_set_volt>
		break;
 8015042:	e008      	b.n	8015056 <handle_canton_cmd+0x102>
	default:
		itm_debug1(DBG_LOWCTRL, "not handled msg", m->cmd);
 8015044:	683b      	ldr	r3, [r7, #0]
 8015046:	789b      	ldrb	r3, [r3, #2]
 8015048:	461a      	mov	r2, r3
 801504a:	490a      	ldr	r1, [pc, #40]	; (8015074 <handle_canton_cmd+0x120>)
 801504c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8015050:	f7ff fede 	bl	8014e10 <itm_debug1>
		break;
 8015054:	bf00      	nop
	}
}
 8015056:	3710      	adds	r7, #16
 8015058:	46bd      	mov	sp, r7
 801505a:	bd80      	pop	{r7, pc}
 801505c:	0801a150 	.word	0x0801a150
 8015060:	2000534c 	.word	0x2000534c
 8015064:	0801a15c 	.word	0x0801a15c
 8015068:	80000100 	.word	0x80000100
 801506c:	0801a168 	.word	0x0801a168
 8015070:	0801a174 	.word	0x0801a174
 8015074:	0801a17c 	.word	0x0801a17c

08015078 <canton_tick>:
static void handle_msg_normal(msg_64_t *m);
static void handle_msg_cantontest(msg_64_t *m);
static void handle_msg_detect1(msg_64_t *m);

void canton_tick(_UNUSED_ uint32_t notif_flags, _UNUSED_ uint32_t tick, _UNUSED_ uint32_t dt)
{
 8015078:	b580      	push	{r7, lr}
 801507a:	b088      	sub	sp, #32
 801507c:	af00      	add	r7, sp, #0
 801507e:	60f8      	str	r0, [r7, #12]
 8015080:	60b9      	str	r1, [r7, #8]
 8015082:	607a      	str	r2, [r7, #4]
	static int first=1;
	if (first) {
 8015084:	4b31      	ldr	r3, [pc, #196]	; (801514c <canton_tick+0xd4>)
 8015086:	681b      	ldr	r3, [r3, #0]
 8015088:	2b00      	cmp	r3, #0
 801508a:	d006      	beq.n	801509a <canton_tick+0x22>
		first = 0;
 801508c:	4b2f      	ldr	r3, [pc, #188]	; (801514c <canton_tick+0xd4>)
 801508e:	2200      	movs	r2, #0
 8015090:	601a      	str	r2, [r3, #0]
		canton_reset();
 8015092:	f7ff ff33 	bl	8014efc <canton_reset>
		bemf_reset();
 8015096:	f000 fbab 	bl	80157f0 <bemf_reset>
	}
	for (;;) {
		msg_64_t m;
		int rc = mqf_read_to_canton(&m);
 801509a:	f107 0310 	add.w	r3, r7, #16
 801509e:	4618      	mov	r0, r3
 80150a0:	f7ff ff0c 	bl	8014ebc <mqf_read_to_canton>
 80150a4:	61f8      	str	r0, [r7, #28]
		if (rc) break;
 80150a6:	69fb      	ldr	r3, [r7, #28]
 80150a8:	2b00      	cmp	r3, #0
 80150aa:	d14b      	bne.n	8015144 <canton_tick+0xcc>
        switch (m.cmd) {
 80150ac:	7cbb      	ldrb	r3, [r7, #18]
 80150ae:	2bfc      	cmp	r3, #252	; 0xfc
 80150b0:	d009      	beq.n	80150c6 <canton_tick+0x4e>
 80150b2:	2bfc      	cmp	r3, #252	; 0xfc
 80150b4:	db1e      	blt.n	80150f4 <canton_tick+0x7c>
 80150b6:	3bfe      	subs	r3, #254	; 0xfe
 80150b8:	2b01      	cmp	r3, #1
 80150ba:	d81b      	bhi.n	80150f4 <canton_tick+0x7c>
        case CMD_RESET: // FALLTHRU
        case CMD_EMERGENCY_STOP:
            canton_reset();
 80150bc:	f7ff ff1e 	bl	8014efc <canton_reset>
            bemf_reset();
 80150c0:	f000 fb96 	bl	80157f0 <bemf_reset>
            break;
 80150c4:	e019      	b.n	80150fa <canton_tick+0x82>
        case CMD_SETRUN_MODE:
        	if (m.v1u != run_mode) {
 80150c6:	8aba      	ldrh	r2, [r7, #20]
 80150c8:	4b21      	ldr	r3, [pc, #132]	; (8015150 <canton_tick+0xd8>)
 80150ca:	781b      	ldrb	r3, [r3, #0]
 80150cc:	b29b      	uxth	r3, r3
 80150ce:	429a      	cmp	r2, r3
 80150d0:	d012      	beq.n	80150f8 <canton_tick+0x80>
        		run_mode = m.v1u;
 80150d2:	8abb      	ldrh	r3, [r7, #20]
 80150d4:	b2da      	uxtb	r2, r3
 80150d6:	4b1e      	ldr	r3, [pc, #120]	; (8015150 <canton_tick+0xd8>)
 80150d8:	701a      	strb	r2, [r3, #0]
        		testerAddr = m.from;
 80150da:	7c7a      	ldrb	r2, [r7, #17]
 80150dc:	4b1d      	ldr	r3, [pc, #116]	; (8015154 <canton_tick+0xdc>)
 80150de:	701a      	strb	r2, [r3, #0]
        		bemf_run_mode = run_mode; //(m.to == MA_BROADCAST) ? 1 : 0;
 80150e0:	4b1b      	ldr	r3, [pc, #108]	; (8015150 <canton_tick+0xd8>)
 80150e2:	781a      	ldrb	r2, [r3, #0]
 80150e4:	4b1c      	ldr	r3, [pc, #112]	; (8015158 <canton_tick+0xe0>)
 80150e6:	701a      	strb	r2, [r3, #0]
        		bemf_reset();
 80150e8:	f000 fb82 	bl	80157f0 <bemf_reset>
        		first = 1;
 80150ec:	4b17      	ldr	r3, [pc, #92]	; (801514c <canton_tick+0xd4>)
 80150ee:	2201      	movs	r2, #1
 80150f0:	601a      	str	r2, [r3, #0]
        	}
            break;
 80150f2:	e001      	b.n	80150f8 <canton_tick+0x80>
        default:
        	break;
 80150f4:	bf00      	nop
 80150f6:	e000      	b.n	80150fa <canton_tick+0x82>
            break;
 80150f8:	bf00      	nop
        }
        switch (run_mode) {
 80150fa:	4b15      	ldr	r3, [pc, #84]	; (8015150 <canton_tick+0xd8>)
 80150fc:	781b      	ldrb	r3, [r3, #0]
 80150fe:	2b04      	cmp	r3, #4
 8015100:	d81e      	bhi.n	8015140 <canton_tick+0xc8>
 8015102:	a201      	add	r2, pc, #4	; (adr r2, 8015108 <canton_tick+0x90>)
 8015104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015108:	08015141 	.word	0x08015141
 801510c:	0801511d 	.word	0x0801511d
 8015110:	08015135 	.word	0x08015135
 8015114:	08015129 	.word	0x08015129
 8015118:	08015141 	.word	0x08015141
        case runmode_off:
        	break;
        case runmode_normal:
        	handle_msg_normal(&m);
 801511c:	f107 0310 	add.w	r3, r7, #16
 8015120:	4618      	mov	r0, r3
 8015122:	f000 f81b 	bl	801515c <handle_msg_normal>
        	break;
 8015126:	e00c      	b.n	8015142 <canton_tick+0xca>
        case runmode_detect1:
        	handle_msg_detect1(&m);
 8015128:	f107 0310 	add.w	r3, r7, #16
 801512c:	4618      	mov	r0, r3
 801512e:	f000 f830 	bl	8015192 <handle_msg_detect1>
        	break;
 8015132:	e006      	b.n	8015142 <canton_tick+0xca>
        case runmode_detect:
        	break;
        case runmode_testcanton:
        	handle_msg_cantontest(&m);
 8015134:	f107 0310 	add.w	r3, r7, #16
 8015138:	4618      	mov	r0, r3
 801513a:	f000 f835 	bl	80151a8 <handle_msg_cantontest>
        	break;
 801513e:	e000      	b.n	8015142 <canton_tick+0xca>
        default:
        	break;
 8015140:	bf00      	nop
	for (;;) {
 8015142:	e7aa      	b.n	801509a <canton_tick+0x22>
        }
	}
}
 8015144:	bf00      	nop
 8015146:	3720      	adds	r7, #32
 8015148:	46bd      	mov	sp, r7
 801514a:	bd80      	pop	{r7, pc}
 801514c:	20000238 	.word	0x20000238
 8015150:	2000538c 	.word	0x2000538c
 8015154:	2000538d 	.word	0x2000538d
 8015158:	2000538e 	.word	0x2000538e

0801515c <handle_msg_normal>:


static void handle_msg_normal(msg_64_t *m)
{
 801515c:	b580      	push	{r7, lr}
 801515e:	b084      	sub	sp, #16
 8015160:	af00      	add	r7, sp, #0
 8015162:	6078      	str	r0, [r7, #4]
    int cidx = -1;
 8015164:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015168:	60fb      	str	r3, [r7, #12]
    if (!IS_CANTON(m->to)) return;
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	781b      	ldrb	r3, [r3, #0]
 801516e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8015172:	2b00      	cmp	r3, #0
 8015174:	d109      	bne.n	801518a <handle_msg_normal+0x2e>
    cidx = m->to & 0x07;
 8015176:	687b      	ldr	r3, [r7, #4]
 8015178:	781b      	ldrb	r3, [r3, #0]
 801517a:	f003 0307 	and.w	r3, r3, #7
 801517e:	60fb      	str	r3, [r7, #12]
    handle_canton_cmd(cidx, m);
 8015180:	6879      	ldr	r1, [r7, #4]
 8015182:	68f8      	ldr	r0, [r7, #12]
 8015184:	f7ff fee6 	bl	8014f54 <handle_canton_cmd>
 8015188:	e000      	b.n	801518c <handle_msg_normal+0x30>
    if (!IS_CANTON(m->to)) return;
 801518a:	bf00      	nop
}
 801518c:	3710      	adds	r7, #16
 801518e:	46bd      	mov	sp, r7
 8015190:	bd80      	pop	{r7, pc}

08015192 <handle_msg_detect1>:

static void handle_msg_detect1(msg_64_t *m)
{
 8015192:	b580      	push	{r7, lr}
 8015194:	b082      	sub	sp, #8
 8015196:	af00      	add	r7, sp, #0
 8015198:	6078      	str	r0, [r7, #4]
	handle_msg_normal(m);
 801519a:	6878      	ldr	r0, [r7, #4]
 801519c:	f7ff ffde 	bl	801515c <handle_msg_normal>
}
 80151a0:	bf00      	nop
 80151a2:	3708      	adds	r7, #8
 80151a4:	46bd      	mov	sp, r7
 80151a6:	bd80      	pop	{r7, pc}

080151a8 <handle_msg_cantontest>:

static void handle_msg_cantontest(msg_64_t *m)
{
 80151a8:	b580      	push	{r7, lr}
 80151aa:	b086      	sub	sp, #24
 80151ac:	af00      	add	r7, sp, #0
 80151ae:	6078      	str	r0, [r7, #4]
	int cidx = -1;
 80151b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80151b4:	617b      	str	r3, [r7, #20]
	if (IS_BROADCAST(m->to)) {
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	781b      	ldrb	r3, [r3, #0]
 80151ba:	2bff      	cmp	r3, #255	; 0xff
 80151bc:	d103      	bne.n	80151c6 <handle_msg_cantontest+0x1e>
		cidx = -1;
 80151be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80151c2:	617b      	str	r3, [r7, #20]
 80151c4:	e014      	b.n	80151f0 <handle_msg_cantontest+0x48>
	} else if (IS_CANTON(m->to)) {
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	781b      	ldrb	r3, [r3, #0]
 80151ca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	d105      	bne.n	80151de <handle_msg_cantontest+0x36>
		cidx = m->to & 0x07;
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	781b      	ldrb	r3, [r3, #0]
 80151d6:	f003 0307 	and.w	r3, r3, #7
 80151da:	617b      	str	r3, [r7, #20]
 80151dc:	e008      	b.n	80151f0 <handle_msg_cantontest+0x48>
	} else {
		itm_debug1(DBG_LOWCTRL, "not handled msg", m->cmd);
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	789b      	ldrb	r3, [r3, #2]
 80151e2:	461a      	mov	r2, r3
 80151e4:	4918      	ldr	r1, [pc, #96]	; (8015248 <handle_msg_cantontest+0xa0>)
 80151e6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80151ea:	f7ff fe11 	bl	8014e10 <itm_debug1>
		return;
 80151ee:	e028      	b.n	8015242 <handle_msg_cantontest+0x9a>
	}
    if (CMD_SETVPWM == m->cmd) {
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	789b      	ldrb	r3, [r3, #2]
 80151f4:	2b01      	cmp	r3, #1
 80151f6:	d10f      	bne.n	8015218 <handle_msg_cantontest+0x70>
    	// in test mode, forward CMD_SETVPWM to UI for display
    	msg_64_t m2 = *m;
 80151f8:	687a      	ldr	r2, [r7, #4]
 80151fa:	f107 0308 	add.w	r3, r7, #8
 80151fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015202:	e883 0003 	stmia.w	r3, {r0, r1}
    	m2.from = m2.to;
 8015206:	7a3b      	ldrb	r3, [r7, #8]
 8015208:	727b      	strb	r3, [r7, #9]
    	m2.to = MA_UI(UISUB_TFT);
 801520a:	2381      	movs	r3, #129	; 0x81
 801520c:	723b      	strb	r3, [r7, #8]
    	mqf_write_from_canton(&m2);
 801520e:	f107 0308 	add.w	r3, r7, #8
 8015212:	4618      	mov	r0, r3
 8015214:	f7ff fe62 	bl	8014edc <mqf_write_from_canton>
    }
    if (cidx>=0) handle_canton_cmd(cidx, m);
 8015218:	697b      	ldr	r3, [r7, #20]
 801521a:	2b00      	cmp	r3, #0
 801521c:	db04      	blt.n	8015228 <handle_msg_cantontest+0x80>
 801521e:	6879      	ldr	r1, [r7, #4]
 8015220:	6978      	ldr	r0, [r7, #20]
 8015222:	f7ff fe97 	bl	8014f54 <handle_canton_cmd>
 8015226:	e00c      	b.n	8015242 <handle_msg_cantontest+0x9a>
    else {
    	// broadcast
    	for (int i=0; i<NUM_LOCAL_CANTONS_HW; i++) {
 8015228:	2300      	movs	r3, #0
 801522a:	613b      	str	r3, [r7, #16]
 801522c:	e006      	b.n	801523c <handle_msg_cantontest+0x94>
    		handle_canton_cmd(i, m);
 801522e:	6879      	ldr	r1, [r7, #4]
 8015230:	6938      	ldr	r0, [r7, #16]
 8015232:	f7ff fe8f 	bl	8014f54 <handle_canton_cmd>
    	for (int i=0; i<NUM_LOCAL_CANTONS_HW; i++) {
 8015236:	693b      	ldr	r3, [r7, #16]
 8015238:	3301      	adds	r3, #1
 801523a:	613b      	str	r3, [r7, #16]
 801523c:	693b      	ldr	r3, [r7, #16]
 801523e:	2b04      	cmp	r3, #4
 8015240:	ddf5      	ble.n	801522e <handle_msg_cantontest+0x86>
    	}
    }
}
 8015242:	3718      	adds	r7, #24
 8015244:	46bd      	mov	sp, r7
 8015246:	bd80      	pop	{r7, pc}
 8015248:	0801a17c 	.word	0x0801a17c

0801524c <canton_set_pwm>:
#define USE_PWM_STOP 0
/*
 * it seems that output goes to high impedence when we stop pwm ????
 */
static void canton_set_pwm(int cidx, const canton_config_t *c, canton_vars_t *v,  int8_t dir, int duty)
{
 801524c:	b580      	push	{r7, lr}
 801524e:	b08a      	sub	sp, #40	; 0x28
 8015250:	af02      	add	r7, sp, #8
 8015252:	60f8      	str	r0, [r7, #12]
 8015254:	60b9      	str	r1, [r7, #8]
 8015256:	607a      	str	r2, [r7, #4]
 8015258:	70fb      	strb	r3, [r7, #3]
	itm_debug3(DBG_LOWCTRL, "c/set_pwm", cidx, dir, duty);
 801525a:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801525e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015260:	9300      	str	r3, [sp, #0]
 8015262:	4613      	mov	r3, r2
 8015264:	68fa      	ldr	r2, [r7, #12]
 8015266:	499c      	ldr	r1, [pc, #624]	; (80154d8 <canton_set_pwm+0x28c>)
 8015268:	f44f 7080 	mov.w	r0, #256	; 0x100
 801526c:	f7ff fdea 	bl	8014e44 <itm_debug3>
	int t = 2*duty; // with centered pwm (or normal)
 8015270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015272:	005b      	lsls	r3, r3, #1
 8015274:	617b      	str	r3, [r7, #20]

	if ((v->cur_dir == dir) && (v->cur_pwm_duty==duty)) {
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	f993 3000 	ldrsb.w	r3, [r3]
 801527c:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8015280:	429a      	cmp	r2, r3
 8015282:	d10c      	bne.n	801529e <canton_set_pwm+0x52>
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	885b      	ldrh	r3, [r3, #2]
 8015288:	461a      	mov	r2, r3
 801528a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801528c:	4293      	cmp	r3, r2
 801528e:	d106      	bne.n	801529e <canton_set_pwm+0x52>
		itm_debug1(DBG_LOWCTRL, "c/same", duty);
 8015290:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015292:	4992      	ldr	r1, [pc, #584]	; (80154dc <canton_set_pwm+0x290>)
 8015294:	f44f 7080 	mov.w	r0, #256	; 0x100
 8015298:	f7ff fdba 	bl	8014e10 <itm_debug1>
		return;
 801529c:	e118      	b.n	80154d0 <canton_set_pwm+0x284>
	}

	TIM_HandleTypeDef *pwm_timer = CantonTimerHandles[c->pwm_timer_num];
 801529e:	68bb      	ldr	r3, [r7, #8]
 80152a0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80152a4:	461a      	mov	r2, r3
 80152a6:	4b8e      	ldr	r3, [pc, #568]	; (80154e0 <canton_set_pwm+0x294>)
 80152a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80152ac:	613b      	str	r3, [r7, #16]
	if (!pwm_timer) {
 80152ae:	693b      	ldr	r3, [r7, #16]
 80152b0:	2b00      	cmp	r3, #0
 80152b2:	d108      	bne.n	80152c6 <canton_set_pwm+0x7a>
		itm_debug1(DBG_LOWCTRL|DBG_ERR, "c/notim", c->pwm_timer_num);
 80152b4:	68bb      	ldr	r3, [r7, #8]
 80152b6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80152ba:	461a      	mov	r2, r3
 80152bc:	4989      	ldr	r1, [pc, #548]	; (80154e4 <canton_set_pwm+0x298>)
 80152be:	488a      	ldr	r0, [pc, #552]	; (80154e8 <canton_set_pwm+0x29c>)
 80152c0:	f7ff fda6 	bl	8014e10 <itm_debug1>
		return;
 80152c4:	e104      	b.n	80154d0 <canton_set_pwm+0x284>
	}
	if (v->cur_dir != dir) {
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	f993 3000 	ldrsb.w	r3, [r3]
 80152cc:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80152d0:	429a      	cmp	r2, r3
 80152d2:	d03e      	beq.n	8015352 <canton_set_pwm+0x106>
		v->cur_dir = dir;
 80152d4:	687b      	ldr	r3, [r7, #4]
 80152d6:	78fa      	ldrb	r2, [r7, #3]
 80152d8:	701a      	strb	r2, [r3, #0]
		itm_debug3(DBG_LOWCTRL, "set dir", dir, c->ch0, c->ch1);
 80152da:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80152de:	68bb      	ldr	r3, [r7, #8]
 80152e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152e2:	4619      	mov	r1, r3
 80152e4:	68bb      	ldr	r3, [r7, #8]
 80152e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80152e8:	9300      	str	r3, [sp, #0]
 80152ea:	460b      	mov	r3, r1
 80152ec:	497f      	ldr	r1, [pc, #508]	; (80154ec <canton_set_pwm+0x2a0>)
 80152ee:	f44f 7080 	mov.w	r0, #256	; 0x100
 80152f2:	f7ff fda7 	bl	8014e44 <itm_debug3>
		if (dir>0) {
 80152f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	dd0c      	ble.n	8015318 <canton_set_pwm+0xcc>
			if (USE_PWM_STOP) my_HAL_TIM_PWM_Stop(pwm_timer, c->ch1);
			else HAL_TIM_PWM_Start(pwm_timer, c->ch1);
 80152fe:	68bb      	ldr	r3, [r7, #8]
 8015300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015302:	4619      	mov	r1, r3
 8015304:	6938      	ldr	r0, [r7, #16]
 8015306:	f7f2 fe9b 	bl	8008040 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(pwm_timer, c->ch0);
 801530a:	68bb      	ldr	r3, [r7, #8]
 801530c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801530e:	4619      	mov	r1, r3
 8015310:	6938      	ldr	r0, [r7, #16]
 8015312:	f7f2 fe95 	bl	8008040 <HAL_TIM_PWM_Start>
 8015316:	e01c      	b.n	8015352 <canton_set_pwm+0x106>
		} else if (dir<0) {
 8015318:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801531c:	2b00      	cmp	r3, #0
 801531e:	da0c      	bge.n	801533a <canton_set_pwm+0xee>
			if (USE_PWM_STOP) my_HAL_TIM_PWM_Stop(pwm_timer, c->ch0);
			else HAL_TIM_PWM_Start(pwm_timer, c->ch0);
 8015320:	68bb      	ldr	r3, [r7, #8]
 8015322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015324:	4619      	mov	r1, r3
 8015326:	6938      	ldr	r0, [r7, #16]
 8015328:	f7f2 fe8a 	bl	8008040 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(pwm_timer, c->ch1);
 801532c:	68bb      	ldr	r3, [r7, #8]
 801532e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015330:	4619      	mov	r1, r3
 8015332:	6938      	ldr	r0, [r7, #16]
 8015334:	f7f2 fe84 	bl	8008040 <HAL_TIM_PWM_Start>
 8015338:	e00b      	b.n	8015352 <canton_set_pwm+0x106>
		} else {
			if (USE_PWM_STOP) {
				my_HAL_TIM_PWM_Stop(pwm_timer, c->ch0);
				my_HAL_TIM_PWM_Stop(pwm_timer, c->ch1);
			} else {
				HAL_TIM_PWM_Start(pwm_timer, c->ch0);
 801533a:	68bb      	ldr	r3, [r7, #8]
 801533c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801533e:	4619      	mov	r1, r3
 8015340:	6938      	ldr	r0, [r7, #16]
 8015342:	f7f2 fe7d 	bl	8008040 <HAL_TIM_PWM_Start>
				HAL_TIM_PWM_Start(pwm_timer, c->ch1);
 8015346:	68bb      	ldr	r3, [r7, #8]
 8015348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801534a:	4619      	mov	r1, r3
 801534c:	6938      	ldr	r0, [r7, #16]
 801534e:	f7f2 fe77 	bl	8008040 <HAL_TIM_PWM_Start>
			}
		}
	}
	if (!dir) {
 8015352:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015356:	2b00      	cmp	r3, #0
 8015358:	d101      	bne.n	801535e <canton_set_pwm+0x112>
		duty = 0;
 801535a:	2300      	movs	r3, #0
 801535c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (USE_PWM_STOP) {
			v->cur_pwm_duty = 0;
			return;
		}
	}
	v->cur_pwm_duty = duty;
 801535e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015360:	b29a      	uxth	r2, r3
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	805a      	strh	r2, [r3, #2]
	uint32_t chon;
	uint32_t choff;
	if (dir>0) {
 8015366:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801536a:	2b00      	cmp	r3, #0
 801536c:	dd06      	ble.n	801537c <canton_set_pwm+0x130>
		chon = c->ch0;
 801536e:	68bb      	ldr	r3, [r7, #8]
 8015370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015372:	61bb      	str	r3, [r7, #24]
		choff = c->ch1;
 8015374:	68bb      	ldr	r3, [r7, #8]
 8015376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015378:	61fb      	str	r3, [r7, #28]
 801537a:	e005      	b.n	8015388 <canton_set_pwm+0x13c>
	} else {
		chon = c->ch1;
 801537c:	68bb      	ldr	r3, [r7, #8]
 801537e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015380:	61bb      	str	r3, [r7, #24]
		choff = c->ch0;
 8015382:	68bb      	ldr	r3, [r7, #8]
 8015384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015386:	61fb      	str	r3, [r7, #28]
	}
	if (!USE_PWM_STOP) {
		switch (choff) {
 8015388:	69fb      	ldr	r3, [r7, #28]
 801538a:	2b0c      	cmp	r3, #12
 801538c:	d848      	bhi.n	8015420 <canton_set_pwm+0x1d4>
 801538e:	a201      	add	r2, pc, #4	; (adr r2, 8015394 <canton_set_pwm+0x148>)
 8015390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015394:	080153c9 	.word	0x080153c9
 8015398:	08015421 	.word	0x08015421
 801539c:	08015421 	.word	0x08015421
 80153a0:	08015421 	.word	0x08015421
 80153a4:	080153df 	.word	0x080153df
 80153a8:	08015421 	.word	0x08015421
 80153ac:	08015421 	.word	0x08015421
 80153b0:	08015421 	.word	0x08015421
 80153b4:	080153f5 	.word	0x080153f5
 80153b8:	08015421 	.word	0x08015421
 80153bc:	08015421 	.word	0x08015421
 80153c0:	08015421 	.word	0x08015421
 80153c4:	0801540b 	.word	0x0801540b
		case TIM_CHANNEL_1:
			itm_debug1(DBG_LOWCTRL|DBG_TIM, "CH1/CCR1", 0);
 80153c8:	2200      	movs	r2, #0
 80153ca:	4949      	ldr	r1, [pc, #292]	; (80154f0 <canton_set_pwm+0x2a4>)
 80153cc:	f240 1001 	movw	r0, #257	; 0x101
 80153d0:	f7ff fd1e 	bl	8014e10 <itm_debug1>
			pwm_timer->Instance->CCR1 = 0;
 80153d4:	693b      	ldr	r3, [r7, #16]
 80153d6:	681b      	ldr	r3, [r3, #0]
 80153d8:	2200      	movs	r2, #0
 80153da:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 80153dc:	e026      	b.n	801542c <canton_set_pwm+0x1e0>
		case TIM_CHANNEL_2:
			itm_debug1(DBG_LOWCTRL|DBG_TIM, "CH2/CCR1", 0);
 80153de:	2200      	movs	r2, #0
 80153e0:	4944      	ldr	r1, [pc, #272]	; (80154f4 <canton_set_pwm+0x2a8>)
 80153e2:	f240 1001 	movw	r0, #257	; 0x101
 80153e6:	f7ff fd13 	bl	8014e10 <itm_debug1>
			pwm_timer->Instance->CCR2 = 0;
 80153ea:	693b      	ldr	r3, [r7, #16]
 80153ec:	681b      	ldr	r3, [r3, #0]
 80153ee:	2200      	movs	r2, #0
 80153f0:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 80153f2:	e01b      	b.n	801542c <canton_set_pwm+0x1e0>
		case TIM_CHANNEL_3:
			itm_debug1(DBG_LOWCTRL|DBG_TIM, "CH3/CCR1", 0);
 80153f4:	2200      	movs	r2, #0
 80153f6:	4940      	ldr	r1, [pc, #256]	; (80154f8 <canton_set_pwm+0x2ac>)
 80153f8:	f240 1001 	movw	r0, #257	; 0x101
 80153fc:	f7ff fd08 	bl	8014e10 <itm_debug1>
			pwm_timer->Instance->CCR3 = 0;
 8015400:	693b      	ldr	r3, [r7, #16]
 8015402:	681b      	ldr	r3, [r3, #0]
 8015404:	2200      	movs	r2, #0
 8015406:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8015408:	e010      	b.n	801542c <canton_set_pwm+0x1e0>
		case TIM_CHANNEL_4:
			itm_debug1(DBG_LOWCTRL|DBG_TIM, "CH4/CCR1", 0);
 801540a:	2200      	movs	r2, #0
 801540c:	493b      	ldr	r1, [pc, #236]	; (80154fc <canton_set_pwm+0x2b0>)
 801540e:	f240 1001 	movw	r0, #257	; 0x101
 8015412:	f7ff fcfd 	bl	8014e10 <itm_debug1>
			pwm_timer->Instance->CCR4 = 0;
 8015416:	693b      	ldr	r3, [r7, #16]
 8015418:	681b      	ldr	r3, [r3, #0]
 801541a:	2200      	movs	r2, #0
 801541c:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 801541e:	e005      	b.n	801542c <canton_set_pwm+0x1e0>
		default:
			canton_error(ERR_BAD_PARAM_TIM, "bad timer channel");
 8015420:	4937      	ldr	r1, [pc, #220]	; (8015500 <canton_set_pwm+0x2b4>)
 8015422:	f06f 0002 	mvn.w	r0, #2
 8015426:	f7ff fd29 	bl	8014e7c <canton_error>
			break;
 801542a:	bf00      	nop
		}
	}
	switch (chon) {
 801542c:	69bb      	ldr	r3, [r7, #24]
 801542e:	2b0c      	cmp	r3, #12
 8015430:	d848      	bhi.n	80154c4 <canton_set_pwm+0x278>
 8015432:	a201      	add	r2, pc, #4	; (adr r2, 8015438 <canton_set_pwm+0x1ec>)
 8015434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015438:	0801546d 	.word	0x0801546d
 801543c:	080154c5 	.word	0x080154c5
 8015440:	080154c5 	.word	0x080154c5
 8015444:	080154c5 	.word	0x080154c5
 8015448:	08015483 	.word	0x08015483
 801544c:	080154c5 	.word	0x080154c5
 8015450:	080154c5 	.word	0x080154c5
 8015454:	080154c5 	.word	0x080154c5
 8015458:	08015499 	.word	0x08015499
 801545c:	080154c5 	.word	0x080154c5
 8015460:	080154c5 	.word	0x080154c5
 8015464:	080154c5 	.word	0x080154c5
 8015468:	080154af 	.word	0x080154af
	case TIM_CHANNEL_1:
		itm_debug1(DBG_LOWCTRL|DBG_TIM, "CH1/CCR1", t);
 801546c:	697a      	ldr	r2, [r7, #20]
 801546e:	4920      	ldr	r1, [pc, #128]	; (80154f0 <canton_set_pwm+0x2a4>)
 8015470:	f240 1001 	movw	r0, #257	; 0x101
 8015474:	f7ff fccc 	bl	8014e10 <itm_debug1>
		pwm_timer->Instance->CCR1 = t;
 8015478:	693b      	ldr	r3, [r7, #16]
 801547a:	681b      	ldr	r3, [r3, #0]
 801547c:	697a      	ldr	r2, [r7, #20]
 801547e:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8015480:	e026      	b.n	80154d0 <canton_set_pwm+0x284>
	case TIM_CHANNEL_2:
		itm_debug1(DBG_LOWCTRL|DBG_TIM, "CH2/CCR1", t);
 8015482:	697a      	ldr	r2, [r7, #20]
 8015484:	491b      	ldr	r1, [pc, #108]	; (80154f4 <canton_set_pwm+0x2a8>)
 8015486:	f240 1001 	movw	r0, #257	; 0x101
 801548a:	f7ff fcc1 	bl	8014e10 <itm_debug1>
		pwm_timer->Instance->CCR2 = t;
 801548e:	693b      	ldr	r3, [r7, #16]
 8015490:	681b      	ldr	r3, [r3, #0]
 8015492:	697a      	ldr	r2, [r7, #20]
 8015494:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8015496:	e01b      	b.n	80154d0 <canton_set_pwm+0x284>
	case TIM_CHANNEL_3:
		itm_debug1(DBG_LOWCTRL|DBG_TIM, "CH3/CCR1", t);
 8015498:	697a      	ldr	r2, [r7, #20]
 801549a:	4917      	ldr	r1, [pc, #92]	; (80154f8 <canton_set_pwm+0x2ac>)
 801549c:	f240 1001 	movw	r0, #257	; 0x101
 80154a0:	f7ff fcb6 	bl	8014e10 <itm_debug1>
		pwm_timer->Instance->CCR3 = t;
 80154a4:	693b      	ldr	r3, [r7, #16]
 80154a6:	681b      	ldr	r3, [r3, #0]
 80154a8:	697a      	ldr	r2, [r7, #20]
 80154aa:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 80154ac:	e010      	b.n	80154d0 <canton_set_pwm+0x284>
	case TIM_CHANNEL_4:
		itm_debug1(DBG_LOWCTRL|DBG_TIM, "CH4/CCR1", t);
 80154ae:	697a      	ldr	r2, [r7, #20]
 80154b0:	4912      	ldr	r1, [pc, #72]	; (80154fc <canton_set_pwm+0x2b0>)
 80154b2:	f240 1001 	movw	r0, #257	; 0x101
 80154b6:	f7ff fcab 	bl	8014e10 <itm_debug1>
		pwm_timer->Instance->CCR4 = t;
 80154ba:	693b      	ldr	r3, [r7, #16]
 80154bc:	681b      	ldr	r3, [r3, #0]
 80154be:	697a      	ldr	r2, [r7, #20]
 80154c0:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 80154c2:	e005      	b.n	80154d0 <canton_set_pwm+0x284>
	default:
		canton_error(ERR_BAD_PARAM_TIM, "bad timer channel");
 80154c4:	490e      	ldr	r1, [pc, #56]	; (8015500 <canton_set_pwm+0x2b4>)
 80154c6:	f06f 0002 	mvn.w	r0, #2
 80154ca:	f7ff fcd7 	bl	8014e7c <canton_error>
		break;
 80154ce:	bf00      	nop
	}

}
 80154d0:	3720      	adds	r7, #32
 80154d2:	46bd      	mov	sp, r7
 80154d4:	bd80      	pop	{r7, pc}
 80154d6:	bf00      	nop
 80154d8:	0801a18c 	.word	0x0801a18c
 80154dc:	0801a198 	.word	0x0801a198
 80154e0:	2000532c 	.word	0x2000532c
 80154e4:	0801a1a0 	.word	0x0801a1a0
 80154e8:	80000100 	.word	0x80000100
 80154ec:	0801a1a8 	.word	0x0801a1a8
 80154f0:	0801a1b0 	.word	0x0801a1b0
 80154f4:	0801a1bc 	.word	0x0801a1bc
 80154f8:	0801a1c8 	.word	0x0801a1c8
 80154fc:	0801a1d4 	.word	0x0801a1d4
 8015500:	0801a1e0 	.word	0x0801a1e0

08015504 <canton_set_volt>:
void canton_set_volt(int cidx, const canton_config_t *c, canton_vars_t *v, int voltidx)
{
 8015504:	b580      	push	{r7, lr}
 8015506:	b086      	sub	sp, #24
 8015508:	af02      	add	r7, sp, #8
 801550a:	60f8      	str	r0, [r7, #12]
 801550c:	60b9      	str	r1, [r7, #8]
 801550e:	607a      	str	r2, [r7, #4]
 8015510:	603b      	str	r3, [r7, #0]
	v->cur_voltidx = voltidx;
 8015512:	683b      	ldr	r3, [r7, #0]
 8015514:	b2da      	uxtb	r2, r3
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	705a      	strb	r2, [r3, #1]
    v->selected_centivolt =  (c->volts_cv[v->cur_voltidx]);
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	785b      	ldrb	r3, [r3, #1]
 801551e:	461a      	mov	r2, r3
 8015520:	68bb      	ldr	r3, [r7, #8]
 8015522:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8015526:	461a      	mov	r2, r3
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	605a      	str	r2, [r3, #4]
	itm_debug3(DBG_LOWCTRL, "c/set_volt", cidx, voltidx, v->selected_centivolt);
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	685b      	ldr	r3, [r3, #4]
 8015530:	9300      	str	r3, [sp, #0]
 8015532:	683b      	ldr	r3, [r7, #0]
 8015534:	68fa      	ldr	r2, [r7, #12]
 8015536:	4917      	ldr	r1, [pc, #92]	; (8015594 <canton_set_volt+0x90>)
 8015538:	f44f 7080 	mov.w	r0, #256	; 0x100
 801553c:	f7ff fc82 	bl	8014e44 <itm_debug3>
    if ((0)) debug_info('C', 0, "SET VLT ", voltidx,  v->selected_centivolt,0);
    if ((0)) debug_info('C', 0, "VLT BIT ", (voltidx & 0x03) ? 1 : 0,
    				(voltidx & 0x02) ? 1 : 0,
    				(voltidx & 0x01) ? 1 : 0);

	HAL_GPIO_WritePin(c->volt_port_b0, c->volt_b0, (voltidx & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8015540:	68bb      	ldr	r3, [r7, #8]
 8015542:	6918      	ldr	r0, [r3, #16]
 8015544:	68bb      	ldr	r3, [r7, #8]
 8015546:	8b99      	ldrh	r1, [r3, #28]
 8015548:	683b      	ldr	r3, [r7, #0]
 801554a:	b2db      	uxtb	r3, r3
 801554c:	f003 0301 	and.w	r3, r3, #1
 8015550:	b2db      	uxtb	r3, r3
 8015552:	461a      	mov	r2, r3
 8015554:	f7ed fe8e 	bl	8003274 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(c->volt_port_b1, c->volt_b1, (voltidx & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8015558:	68bb      	ldr	r3, [r7, #8]
 801555a:	6958      	ldr	r0, [r3, #20]
 801555c:	68bb      	ldr	r3, [r7, #8]
 801555e:	8bd9      	ldrh	r1, [r3, #30]
 8015560:	683b      	ldr	r3, [r7, #0]
 8015562:	105b      	asrs	r3, r3, #1
 8015564:	b2db      	uxtb	r3, r3
 8015566:	f003 0301 	and.w	r3, r3, #1
 801556a:	b2db      	uxtb	r3, r3
 801556c:	461a      	mov	r2, r3
 801556e:	f7ed fe81 	bl	8003274 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(c->volt_port_b2, c->volt_b2, (voltidx & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8015572:	68bb      	ldr	r3, [r7, #8]
 8015574:	6998      	ldr	r0, [r3, #24]
 8015576:	68bb      	ldr	r3, [r7, #8]
 8015578:	8c19      	ldrh	r1, [r3, #32]
 801557a:	683b      	ldr	r3, [r7, #0]
 801557c:	109b      	asrs	r3, r3, #2
 801557e:	b2db      	uxtb	r3, r3
 8015580:	f003 0301 	and.w	r3, r3, #1
 8015584:	b2db      	uxtb	r3, r3
 8015586:	461a      	mov	r2, r3
 8015588:	f7ed fe74 	bl	8003274 <HAL_GPIO_WritePin>
	if (voltidx & 0x04) s |= VOLT_0_SEL2_Pin; else r |=  c->volt_b2;
	if (voltidx & 0x08) s |= VOLT_0_SEL3_Pin; else r |=  c->volt_b3;
	HAL_GPIO_WritePin(c->volt_port, s, GPIO_PIN_SET);
	HAL_GPIO_WritePin(c->volt_port, r, GPIO_PIN_RESET);
#endif
}
 801558c:	bf00      	nop
 801558e:	3710      	adds	r7, #16
 8015590:	46bd      	mov	sp, r7
 8015592:	bd80      	pop	{r7, pc}
 8015594:	0801a1f4 	.word	0x0801a1f4

08015598 <volt_index>:
int volt_index(uint16_t mili_power,
		const canton_config_t *c1, //canton_vars_t *v1,
		_UNUSED_ const canton_config_t *c2, //canton_vars_t *v2,
		int *pvi1, int *pvi2,
		train_volt_policy_t pol)
{
 8015598:	b580      	push	{r7, lr}
 801559a:	b08a      	sub	sp, #40	; 0x28
 801559c:	af00      	add	r7, sp, #0
 801559e:	60b9      	str	r1, [r7, #8]
 80155a0:	607a      	str	r2, [r7, #4]
 80155a2:	603b      	str	r3, [r7, #0]
 80155a4:	4603      	mov	r3, r0
 80155a6:	81fb      	strh	r3, [r7, #14]
	int duty=0;
 80155a8:	2300      	movs	r3, #0
 80155aa:	627b      	str	r3, [r7, #36]	; 0x24
	*pvi1 = MAX_PVI;
 80155ac:	683b      	ldr	r3, [r7, #0]
 80155ae:	2207      	movs	r2, #7
 80155b0:	601a      	str	r2, [r3, #0]
	*pvi2 = MAX_PVI;
 80155b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155b4:	2207      	movs	r2, #7
 80155b6:	601a      	str	r2, [r3, #0]

	//if (mili_power <0)    return canton_error_rc(0, ERR_BAD_PARAM_MPOW, "negative milipower");
	if (mili_power >1000) return canton_error_rc(0, ERR_BAD_PARAM_MPOW, "milipower should be 0-999");
 80155b8:	89fb      	ldrh	r3, [r7, #14]
 80155ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80155be:	d907      	bls.n	80155d0 <volt_index+0x38>
 80155c0:	4a54      	ldr	r2, [pc, #336]	; (8015714 <volt_index+0x17c>)
 80155c2:	f06f 0103 	mvn.w	r1, #3
 80155c6:	2000      	movs	r0, #0
 80155c8:	f7ff fc67 	bl	8014e9a <canton_error_rc>
 80155cc:	4603      	mov	r3, r0
 80155ce:	e09d      	b.n	801570c <volt_index+0x174>
	switch (pol) {
 80155d0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80155d4:	2b01      	cmp	r3, #1
 80155d6:	d00d      	beq.n	80155f4 <volt_index+0x5c>
 80155d8:	2b02      	cmp	r3, #2
 80155da:	d052      	beq.n	8015682 <volt_index+0xea>
 80155dc:	2b00      	cmp	r3, #0
 80155de:	d017      	beq.n	8015610 <volt_index+0x78>
	default :
        duty = 0;
 80155e0:	2300      	movs	r3, #0
 80155e2:	627b      	str	r3, [r7, #36]	; 0x24
		return canton_error_rc(0, ERR_BAD_PARAM_VPOL, "bad volt policy");
 80155e4:	4a4c      	ldr	r2, [pc, #304]	; (8015718 <volt_index+0x180>)
 80155e6:	f06f 0104 	mvn.w	r1, #4
 80155ea:	2000      	movs	r0, #0
 80155ec:	f7ff fc55 	bl	8014e9a <canton_error_rc>
 80155f0:	4603      	mov	r3, r0
 80155f2:	e08b      	b.n	801570c <volt_index+0x174>
		break;
	case vpolicy_pure_pwm:
		*pvi1 = 0;
 80155f4:	683b      	ldr	r3, [r7, #0]
 80155f6:	2200      	movs	r2, #0
 80155f8:	601a      	str	r2, [r3, #0]
		*pvi2 = 0;
 80155fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155fc:	2200      	movs	r2, #0
 80155fe:	601a      	str	r2, [r3, #0]
		duty = mili_power / 10;
 8015600:	89fb      	ldrh	r3, [r7, #14]
 8015602:	4a46      	ldr	r2, [pc, #280]	; (801571c <volt_index+0x184>)
 8015604:	fba2 2303 	umull	r2, r3, r2, r3
 8015608:	08db      	lsrs	r3, r3, #3
 801560a:	b29b      	uxth	r3, r3
 801560c:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 801560e:	e077      	b.n	8015700 <volt_index+0x168>
    case vpolicy_normal:
            // fall back to full volt +  pwm
            *pvi1 = *pvi2 = 0;
 8015610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015612:	2200      	movs	r2, #0
 8015614:	601a      	str	r2, [r3, #0]
 8015616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015618:	681a      	ldr	r2, [r3, #0]
 801561a:	683b      	ldr	r3, [r7, #0]
 801561c:	601a      	str	r2, [r3, #0]
            duty = mili_power / 10;
 801561e:	89fb      	ldrh	r3, [r7, #14]
 8015620:	4a3e      	ldr	r2, [pc, #248]	; (801571c <volt_index+0x184>)
 8015622:	fba2 2303 	umull	r2, r3, r2, r3
 8015626:	08db      	lsrs	r3, r3, #3
 8015628:	b29b      	uxth	r3, r3
 801562a:	627b      	str	r3, [r7, #36]	; 0x24
            for (int i=MAX_PVI; i>=0; i--) {
 801562c:	2307      	movs	r3, #7
 801562e:	623b      	str	r3, [r7, #32]
 8015630:	e023      	b.n	801567a <volt_index+0xe2>
                if (!c1->volts_cv[i]) continue;
 8015632:	68bb      	ldr	r3, [r7, #8]
 8015634:	6a3a      	ldr	r2, [r7, #32]
 8015636:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801563a:	2b00      	cmp	r3, #0
 801563c:	d017      	beq.n	801566e <volt_index+0xd6>
                // c1->volts in 0.01V unit
                int d = 100*mili_power / c1->volts_cv[i];
 801563e:	89fb      	ldrh	r3, [r7, #14]
 8015640:	2264      	movs	r2, #100	; 0x64
 8015642:	fb02 f303 	mul.w	r3, r2, r3
 8015646:	68ba      	ldr	r2, [r7, #8]
 8015648:	6a39      	ldr	r1, [r7, #32]
 801564a:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 801564e:	fb93 f3f2 	sdiv	r3, r3, r2
 8015652:	613b      	str	r3, [r7, #16]
                if (d>MAX_PWM) {
 8015654:	693b      	ldr	r3, [r7, #16]
 8015656:	2b5a      	cmp	r3, #90	; 0x5a
 8015658:	dc0b      	bgt.n	8015672 <volt_index+0xda>
                    continue;
                }
                // XXX for now we assume all canton have same board with same voltage level
                *pvi1 = *pvi2 = i;
 801565a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801565c:	6a3a      	ldr	r2, [r7, #32]
 801565e:	601a      	str	r2, [r3, #0]
 8015660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015662:	681a      	ldr	r2, [r3, #0]
 8015664:	683b      	ldr	r3, [r7, #0]
 8015666:	601a      	str	r2, [r3, #0]
                duty = d;
 8015668:	693b      	ldr	r3, [r7, #16]
 801566a:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 801566c:	e008      	b.n	8015680 <volt_index+0xe8>
                if (!c1->volts_cv[i]) continue;
 801566e:	bf00      	nop
 8015670:	e000      	b.n	8015674 <volt_index+0xdc>
                    continue;
 8015672:	bf00      	nop
            for (int i=MAX_PVI; i>=0; i--) {
 8015674:	6a3b      	ldr	r3, [r7, #32]
 8015676:	3b01      	subs	r3, #1
 8015678:	623b      	str	r3, [r7, #32]
 801567a:	6a3b      	ldr	r3, [r7, #32]
 801567c:	2b00      	cmp	r3, #0
 801567e:	dad8      	bge.n	8015632 <volt_index+0x9a>
            }
		break;
 8015680:	e03e      	b.n	8015700 <volt_index+0x168>
			break;
    	}
    	break;
#endif
	case vpolicy_pure_volt:
		duty = MAX_PWM;
 8015682:	235a      	movs	r3, #90	; 0x5a
 8015684:	627b      	str	r3, [r7, #36]	; 0x24
        int s = 0;
 8015686:	2300      	movs	r3, #0
 8015688:	61fb      	str	r3, [r7, #28]
		for (int i=MAX_PVI; i>=0; i--) {
 801568a:	2307      	movs	r3, #7
 801568c:	61bb      	str	r3, [r7, #24]
 801568e:	e031      	b.n	80156f4 <volt_index+0x15c>
			if (!c1->volts_cv[i]) continue;
 8015690:	68bb      	ldr	r3, [r7, #8]
 8015692:	69ba      	ldr	r2, [r7, #24]
 8015694:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8015698:	2b00      	cmp	r3, #0
 801569a:	d027      	beq.n	80156ec <volt_index+0x154>
			// c1->volts in 0.01V unit. 10V = 1000
			int p = c1->volts_cv[i]*MAX_PWM/100;  // 0.01V * % , ex : 345*90
 801569c:	68bb      	ldr	r3, [r7, #8]
 801569e:	69ba      	ldr	r2, [r7, #24]
 80156a0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80156a4:	461a      	mov	r2, r3
 80156a6:	235a      	movs	r3, #90	; 0x5a
 80156a8:	fb03 f302 	mul.w	r3, r3, r2
 80156ac:	4a1c      	ldr	r2, [pc, #112]	; (8015720 <volt_index+0x188>)
 80156ae:	fb82 1203 	smull	r1, r2, r2, r3
 80156b2:	1152      	asrs	r2, r2, #5
 80156b4:	17db      	asrs	r3, r3, #31
 80156b6:	1ad3      	subs	r3, r2, r3
 80156b8:	617b      	str	r3, [r7, #20]
			if (p <= mili_power) {
 80156ba:	89fb      	ldrh	r3, [r7, #14]
 80156bc:	697a      	ldr	r2, [r7, #20]
 80156be:	429a      	cmp	r2, r3
 80156c0:	dc08      	bgt.n	80156d4 <volt_index+0x13c>
                s = 1;
 80156c2:	2301      	movs	r3, #1
 80156c4:	61fb      	str	r3, [r7, #28]
				*pvi1 = i;
 80156c6:	683b      	ldr	r3, [r7, #0]
 80156c8:	69ba      	ldr	r2, [r7, #24]
 80156ca:	601a      	str	r2, [r3, #0]
				*pvi2 = i;
 80156cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156ce:	69ba      	ldr	r2, [r7, #24]
 80156d0:	601a      	str	r2, [r3, #0]
 80156d2:	e00c      	b.n	80156ee <volt_index+0x156>
			} else {
                if (!s) {
 80156d4:	69fb      	ldr	r3, [r7, #28]
 80156d6:	2b00      	cmp	r3, #0
 80156d8:	d110      	bne.n	80156fc <volt_index+0x164>
                    // lower than minimal power
                    *pvi1 = i;
 80156da:	683b      	ldr	r3, [r7, #0]
 80156dc:	69ba      	ldr	r2, [r7, #24]
 80156de:	601a      	str	r2, [r3, #0]
                    *pvi2 = i;
 80156e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156e2:	69ba      	ldr	r2, [r7, #24]
 80156e4:	601a      	str	r2, [r3, #0]
                    duty = 0;
 80156e6:	2300      	movs	r3, #0
 80156e8:	627b      	str	r3, [r7, #36]	; 0x24
                }
                // ok
				break;
 80156ea:	e007      	b.n	80156fc <volt_index+0x164>
			if (!c1->volts_cv[i]) continue;
 80156ec:	bf00      	nop
		for (int i=MAX_PVI; i>=0; i--) {
 80156ee:	69bb      	ldr	r3, [r7, #24]
 80156f0:	3b01      	subs	r3, #1
 80156f2:	61bb      	str	r3, [r7, #24]
 80156f4:	69bb      	ldr	r3, [r7, #24]
 80156f6:	2b00      	cmp	r3, #0
 80156f8:	daca      	bge.n	8015690 <volt_index+0xf8>
 80156fa:	e000      	b.n	80156fe <volt_index+0x166>
				break;
 80156fc:	bf00      	nop
			}
		}
		break;
 80156fe:	bf00      	nop
	}
    if (duty>MAX_PWM) {
 8015700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015702:	2b5a      	cmp	r3, #90	; 0x5a
 8015704:	dd01      	ble.n	801570a <volt_index+0x172>
        duty = MAX_PWM;
 8015706:	235a      	movs	r3, #90	; 0x5a
 8015708:	627b      	str	r3, [r7, #36]	; 0x24
        //canton_error(ERR_BAD_PARAM_MPOW, "test msg");
    }
	return duty;
 801570a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801570c:	4618      	mov	r0, r3
 801570e:	3728      	adds	r7, #40	; 0x28
 8015710:	46bd      	mov	sp, r7
 8015712:	bd80      	pop	{r7, pc}
 8015714:	0801a200 	.word	0x0801a200
 8015718:	0801a21c 	.word	0x0801a21c
 801571c:	cccccccd 	.word	0xcccccccd
 8015720:	51eb851f 	.word	0x51eb851f

08015724 <itm_debug1>:
{
 8015724:	b580      	push	{r7, lr}
 8015726:	b086      	sub	sp, #24
 8015728:	af02      	add	r7, sp, #8
 801572a:	60f8      	str	r0, [r7, #12]
 801572c:	60b9      	str	r1, [r7, #8]
 801572e:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 8015730:	4b08      	ldr	r3, [pc, #32]	; (8015754 <itm_debug1+0x30>)
 8015732:	681a      	ldr	r2, [r3, #0]
 8015734:	68fb      	ldr	r3, [r7, #12]
 8015736:	4013      	ands	r3, r2
 8015738:	2b00      	cmp	r3, #0
 801573a:	d007      	beq.n	801574c <itm_debug1+0x28>
 801573c:	2301      	movs	r3, #1
 801573e:	9300      	str	r3, [sp, #0]
 8015740:	2300      	movs	r3, #0
 8015742:	2200      	movs	r2, #0
 8015744:	6879      	ldr	r1, [r7, #4]
 8015746:	68b8      	ldr	r0, [r7, #8]
 8015748:	f003 fefc 	bl	8019544 <_itm_debug3>
}
 801574c:	bf00      	nop
 801574e:	3710      	adds	r7, #16
 8015750:	46bd      	mov	sp, r7
 8015752:	bd80      	pop	{r7, pc}
 8015754:	20000610 	.word	0x20000610

08015758 <itm_debug2>:
{
 8015758:	b580      	push	{r7, lr}
 801575a:	b086      	sub	sp, #24
 801575c:	af02      	add	r7, sp, #8
 801575e:	60f8      	str	r0, [r7, #12]
 8015760:	60b9      	str	r1, [r7, #8]
 8015762:	607a      	str	r2, [r7, #4]
 8015764:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, 0, 2);
 8015766:	4b09      	ldr	r3, [pc, #36]	; (801578c <itm_debug2+0x34>)
 8015768:	681a      	ldr	r2, [r3, #0]
 801576a:	68fb      	ldr	r3, [r7, #12]
 801576c:	4013      	ands	r3, r2
 801576e:	2b00      	cmp	r3, #0
 8015770:	d007      	beq.n	8015782 <itm_debug2+0x2a>
 8015772:	2302      	movs	r3, #2
 8015774:	9300      	str	r3, [sp, #0]
 8015776:	2300      	movs	r3, #0
 8015778:	683a      	ldr	r2, [r7, #0]
 801577a:	6879      	ldr	r1, [r7, #4]
 801577c:	68b8      	ldr	r0, [r7, #8]
 801577e:	f003 fee1 	bl	8019544 <_itm_debug3>
}
 8015782:	bf00      	nop
 8015784:	3710      	adds	r7, #16
 8015786:	46bd      	mov	sp, r7
 8015788:	bd80      	pop	{r7, pc}
 801578a:	bf00      	nop
 801578c:	20000610 	.word	0x20000610

08015790 <itm_debug3>:
{
 8015790:	b580      	push	{r7, lr}
 8015792:	b086      	sub	sp, #24
 8015794:	af02      	add	r7, sp, #8
 8015796:	60f8      	str	r0, [r7, #12]
 8015798:	60b9      	str	r1, [r7, #8]
 801579a:	607a      	str	r2, [r7, #4]
 801579c:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, v3, 3);
 801579e:	4b09      	ldr	r3, [pc, #36]	; (80157c4 <itm_debug3+0x34>)
 80157a0:	681a      	ldr	r2, [r3, #0]
 80157a2:	68fb      	ldr	r3, [r7, #12]
 80157a4:	4013      	ands	r3, r2
 80157a6:	2b00      	cmp	r3, #0
 80157a8:	d007      	beq.n	80157ba <itm_debug3+0x2a>
 80157aa:	2303      	movs	r3, #3
 80157ac:	9300      	str	r3, [sp, #0]
 80157ae:	69bb      	ldr	r3, [r7, #24]
 80157b0:	683a      	ldr	r2, [r7, #0]
 80157b2:	6879      	ldr	r1, [r7, #4]
 80157b4:	68b8      	ldr	r0, [r7, #8]
 80157b6:	f003 fec5 	bl	8019544 <_itm_debug3>
}
 80157ba:	bf00      	nop
 80157bc:	3710      	adds	r7, #16
 80157be:	46bd      	mov	sp, r7
 80157c0:	bd80      	pop	{r7, pc}
 80157c2:	bf00      	nop
 80157c4:	20000610 	.word	0x20000610

080157c8 <runtime_error>:
	trainctl_error('G', code, msg);
	return NULL;
}

static inline void *runtime_error(int code, const char *msg)
{
 80157c8:	b580      	push	{r7, lr}
 80157ca:	b082      	sub	sp, #8
 80157cc:	af00      	add	r7, sp, #0
 80157ce:	6078      	str	r0, [r7, #4]
 80157d0:	6039      	str	r1, [r7, #0]
	itm_debug1(DBG_CONFIG, msg, code);
 80157d2:	687a      	ldr	r2, [r7, #4]
 80157d4:	6839      	ldr	r1, [r7, #0]
 80157d6:	2080      	movs	r0, #128	; 0x80
 80157d8:	f7ff ffa4 	bl	8015724 <itm_debug1>
	trainctl_error('G', code, msg);
 80157dc:	683a      	ldr	r2, [r7, #0]
 80157de:	6879      	ldr	r1, [r7, #4]
 80157e0:	2047      	movs	r0, #71	; 0x47
 80157e2:	f000 fc37 	bl	8016054 <trainctl_error>
	return NULL;
 80157e6:	2300      	movs	r3, #0
}
 80157e8:	4618      	mov	r0, r3
 80157ea:	3708      	adds	r7, #8
 80157ec:	46bd      	mov	sp, r7
 80157ee:	bd80      	pop	{r7, pc}

080157f0 <bemf_reset>:
#define USE_CANTON(_idx) \
		const canton_config_t *cconf = get_canton_cnf(_idx); \
		//canton_vars_t         *cvars = &canton_vars[_idx];

void bemf_reset(void)
{
 80157f0:	b480      	push	{r7}
 80157f2:	b083      	sub	sp, #12
 80157f4:	af00      	add	r7, sp, #0
	for (int i=0; i<NUM_LOCAL_CANTONS_SW; i++) {
 80157f6:	2300      	movs	r3, #0
 80157f8:	607b      	str	r3, [r7, #4]
 80157fa:	e007      	b.n	801580c <bemf_reset+0x1c>
		bemf_to[i]=0xFF;
 80157fc:	4a08      	ldr	r2, [pc, #32]	; (8015820 <bemf_reset+0x30>)
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	4413      	add	r3, r2
 8015802:	22ff      	movs	r2, #255	; 0xff
 8015804:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<NUM_LOCAL_CANTONS_SW; i++) {
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	3301      	adds	r3, #1
 801580a:	607b      	str	r3, [r7, #4]
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	2b07      	cmp	r3, #7
 8015810:	ddf4      	ble.n	80157fc <bemf_reset+0xc>
	}
}
 8015812:	bf00      	nop
 8015814:	370c      	adds	r7, #12
 8015816:	46bd      	mov	sp, r7
 8015818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801581c:	4770      	bx	lr
 801581e:	bf00      	nop
 8015820:	2000023c 	.word	0x2000023c

08015824 <bemf_msg>:

void bemf_msg(msg_64_t *m)
{
 8015824:	b580      	push	{r7, lr}
 8015826:	b084      	sub	sp, #16
 8015828:	af00      	add	r7, sp, #0
 801582a:	6078      	str	r0, [r7, #4]
	if (!IS_CANTON(m->to)) {
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	781b      	ldrb	r3, [r3, #0]
 8015830:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8015834:	2b00      	cmp	r3, #0
 8015836:	d008      	beq.n	801584a <bemf_msg+0x26>
		// error
		itm_debug1(DBG_ERR, "bad bemf c", m->to);
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	781b      	ldrb	r3, [r3, #0]
 801583c:	461a      	mov	r2, r3
 801583e:	491c      	ldr	r1, [pc, #112]	; (80158b0 <bemf_msg+0x8c>)
 8015840:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8015844:	f7ff ff6e 	bl	8015724 <itm_debug1>
		return;
 8015848:	e02f      	b.n	80158aa <bemf_msg+0x86>
	}
	int idx = m->to & 0x07;
 801584a:	687b      	ldr	r3, [r7, #4]
 801584c:	781b      	ldrb	r3, [r3, #0]
 801584e:	f003 0307 	and.w	r3, r3, #7
 8015852:	60fb      	str	r3, [r7, #12]
	switch(m->cmd) {
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	789b      	ldrb	r3, [r3, #2]
 8015858:	2b40      	cmp	r3, #64	; 0x40
 801585a:	d00d      	beq.n	8015878 <bemf_msg+0x54>
 801585c:	2b41      	cmp	r3, #65	; 0x41
 801585e:	d11b      	bne.n	8015898 <bemf_msg+0x74>
	case CMD_BEMF_OFF:
		itm_debug1(DBG_SPDCTL|DBG_CTRL, "BEMF OFF", idx);
 8015860:	68fa      	ldr	r2, [r7, #12]
 8015862:	4914      	ldr	r1, [pc, #80]	; (80158b4 <bemf_msg+0x90>)
 8015864:	f44f 6082 	mov.w	r0, #1040	; 0x410
 8015868:	f7ff ff5c 	bl	8015724 <itm_debug1>
		bemf_to[idx] = 0xFF;
 801586c:	4a12      	ldr	r2, [pc, #72]	; (80158b8 <bemf_msg+0x94>)
 801586e:	68fb      	ldr	r3, [r7, #12]
 8015870:	4413      	add	r3, r2
 8015872:	22ff      	movs	r2, #255	; 0xff
 8015874:	701a      	strb	r2, [r3, #0]
		break;
 8015876:	e018      	b.n	80158aa <bemf_msg+0x86>
	case CMD_BEMF_ON:
		itm_debug2(DBG_SPDCTL|DBG_CTRL, "BEMF ON", idx, m->from);
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	785b      	ldrb	r3, [r3, #1]
 801587c:	68fa      	ldr	r2, [r7, #12]
 801587e:	490f      	ldr	r1, [pc, #60]	; (80158bc <bemf_msg+0x98>)
 8015880:	f44f 6082 	mov.w	r0, #1040	; 0x410
 8015884:	f7ff ff68 	bl	8015758 <itm_debug2>
		bemf_to[idx] = m->from;
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	7859      	ldrb	r1, [r3, #1]
 801588c:	4a0a      	ldr	r2, [pc, #40]	; (80158b8 <bemf_msg+0x94>)
 801588e:	68fb      	ldr	r3, [r7, #12]
 8015890:	4413      	add	r3, r2
 8015892:	460a      	mov	r2, r1
 8015894:	701a      	strb	r2, [r3, #0]
		break;
 8015896:	e008      	b.n	80158aa <bemf_msg+0x86>
	default:
		itm_debug1(DBG_ERR, "bad bemf c", m->to);
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	781b      	ldrb	r3, [r3, #0]
 801589c:	461a      	mov	r2, r3
 801589e:	4904      	ldr	r1, [pc, #16]	; (80158b0 <bemf_msg+0x8c>)
 80158a0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80158a4:	f7ff ff3e 	bl	8015724 <itm_debug1>
		break;
 80158a8:	bf00      	nop
	}
}
 80158aa:	3710      	adds	r7, #16
 80158ac:	46bd      	mov	sp, r7
 80158ae:	bd80      	pop	{r7, pc}
 80158b0:	0801a22c 	.word	0x0801a22c
 80158b4:	0801a238 	.word	0x0801a238
 80158b8:	2000023c 	.word	0x2000023c
 80158bc:	0801a244 	.word	0x0801a244

080158c0 <bemf_tick>:

void bemf_tick(uint32_t notif_flags, _UNUSED_ uint32_t tick, _UNUSED_ uint32_t dt)
{
 80158c0:	b580      	push	{r7, lr}
 80158c2:	b084      	sub	sp, #16
 80158c4:	af00      	add	r7, sp, #0
 80158c6:	60f8      	str	r0, [r7, #12]
 80158c8:	60b9      	str	r1, [r7, #8]
 80158ca:	607a      	str	r2, [r7, #4]
	if (bemf_run_mode == runmode_off) return;
 80158cc:	4b18      	ldr	r3, [pc, #96]	; (8015930 <bemf_tick+0x70>)
 80158ce:	781b      	ldrb	r3, [r3, #0]
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	d029      	beq.n	8015928 <bemf_tick+0x68>

	itm_debug1(DBG_ADC, "------- btk", (int) notif_flags);
 80158d4:	68fb      	ldr	r3, [r7, #12]
 80158d6:	461a      	mov	r2, r3
 80158d8:	4916      	ldr	r1, [pc, #88]	; (8015934 <bemf_tick+0x74>)
 80158da:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80158de:	f7ff ff21 	bl	8015724 <itm_debug1>
	if (notif_flags & NOTIF_NEW_ADC_1) {
 80158e2:	68fb      	ldr	r3, [r7, #12]
 80158e4:	f003 0301 	and.w	r3, r3, #1
 80158e8:	2b00      	cmp	r3, #0
 80158ea:	d013      	beq.n	8015914 <bemf_tick+0x54>
		if (notif_flags & NOTIF_NEW_ADC_2) {
 80158ec:	68fb      	ldr	r3, [r7, #12]
 80158ee:	f003 0302 	and.w	r3, r3, #2
 80158f2:	2b00      	cmp	r3, #0
 80158f4:	d00a      	beq.n	801590c <bemf_tick+0x4c>
			itm_debug1(DBG_ERR|DBG_LOWCTRL|DBG_TIM, "both", (int) notif_flags);
 80158f6:	68fb      	ldr	r3, [r7, #12]
 80158f8:	461a      	mov	r2, r3
 80158fa:	490f      	ldr	r1, [pc, #60]	; (8015938 <bemf_tick+0x78>)
 80158fc:	480f      	ldr	r0, [pc, #60]	; (801593c <bemf_tick+0x7c>)
 80158fe:	f7ff ff11 	bl	8015724 <itm_debug1>
			runtime_error(ERR_DMA, "both NEW_ADC1 and NEW_ADC2");
 8015902:	490f      	ldr	r1, [pc, #60]	; (8015940 <bemf_tick+0x80>)
 8015904:	f06f 000b 	mvn.w	r0, #11
 8015908:	f7ff ff5e 	bl	80157c8 <runtime_error>
		}
		process_adc(&train_adc_buf[0], dt);
 801590c:	6879      	ldr	r1, [r7, #4]
 801590e:	480d      	ldr	r0, [pc, #52]	; (8015944 <bemf_tick+0x84>)
 8015910:	f000 f836 	bl	8015980 <process_adc>
	}
	if (notif_flags & NOTIF_NEW_ADC_2) {
 8015914:	68fb      	ldr	r3, [r7, #12]
 8015916:	f003 0302 	and.w	r3, r3, #2
 801591a:	2b00      	cmp	r3, #0
 801591c:	d005      	beq.n	801592a <bemf_tick+0x6a>
		process_adc(&train_adc_buf[1], dt);
 801591e:	6879      	ldr	r1, [r7, #4]
 8015920:	4809      	ldr	r0, [pc, #36]	; (8015948 <bemf_tick+0x88>)
 8015922:	f000 f82d 	bl	8015980 <process_adc>
 8015926:	e000      	b.n	801592a <bemf_tick+0x6a>
	if (bemf_run_mode == runmode_off) return;
 8015928:	bf00      	nop
	}
}
 801592a:	3710      	adds	r7, #16
 801592c:	46bd      	mov	sp, r7
 801592e:	bd80      	pop	{r7, pc}
 8015930:	2000538e 	.word	0x2000538e
 8015934:	0801a24c 	.word	0x0801a24c
 8015938:	0801a258 	.word	0x0801a258
 801593c:	80000101 	.word	0x80000101
 8015940:	0801a260 	.word	0x0801a260
 8015944:	20008950 	.word	0x20008950
 8015948:	20008978 	.word	0x20008978

0801594c <bemf_convert_to_millivolt>:
}
#endif


static inline int32_t bemf_convert_to_millivolt(_UNUSED_ const canton_config_t *c, int32_t m)
{
 801594c:	b480      	push	{r7}
 801594e:	b083      	sub	sp, #12
 8015950:	af00      	add	r7, sp, #0
 8015952:	6078      	str	r0, [r7, #4]
 8015954:	6039      	str	r1, [r7, #0]
			m = 2200*m/2000;
		}
	}
#endif

	return ((m * 4545 * 33) / (4096*10));
 8015956:	683b      	ldr	r3, [r7, #0]
 8015958:	4a07      	ldr	r2, [pc, #28]	; (8015978 <bemf_convert_to_millivolt+0x2c>)
 801595a:	fb02 f303 	mul.w	r3, r2, r3
 801595e:	4a07      	ldr	r2, [pc, #28]	; (801597c <bemf_convert_to_millivolt+0x30>)
 8015960:	fb82 1203 	smull	r1, r2, r2, r3
 8015964:	1392      	asrs	r2, r2, #14
 8015966:	17db      	asrs	r3, r3, #31
 8015968:	1ad3      	subs	r3, r2, r3
}
 801596a:	4618      	mov	r0, r3
 801596c:	370c      	adds	r7, #12
 801596e:	46bd      	mov	sp, r7
 8015970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015974:	4770      	bx	lr
 8015976:	bf00      	nop
 8015978:	000249e1 	.word	0x000249e1
 801597c:	66666667 	.word	0x66666667

08015980 <process_adc>:

/// ---------------------------------------------------------------------------------------

static void process_adc(volatile adc_buf_t *buf, _UNUSED_ uint32_t deltaticks)
{
 8015980:	b580      	push	{r7, lr}
 8015982:	b092      	sub	sp, #72	; 0x48
 8015984:	af02      	add	r7, sp, #8
 8015986:	6078      	str	r0, [r7, #4]
 8015988:	6039      	str	r1, [r7, #0]
	for (int i=0; i<NUM_LOCAL_CANTONS_HW; i++) {
 801598a:	2300      	movs	r3, #0
 801598c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801598e:	e0ae      	b.n	8015aee <process_adc+0x16e>
		USE_CANTON(i)
 8015990:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015992:	f000 fce7 	bl	8016364 <get_canton_cnf>
 8015996:	6338      	str	r0, [r7, #48]	; 0x30
		// process BEMF
#ifndef USE_INA3221
	    canton_intensity(cconf, cvars, buf[i].intOff, buf[i].intOn);
#error ohla
#endif
		int skp = 0;
 8015998:	2300      	movs	r3, #0
 801599a:	63bb      	str	r3, [r7, #56]	; 0x38
		if ((bemf_run_mode == runmode_testcanton) && (i<3)) {
 801599c:	4b58      	ldr	r3, [pc, #352]	; (8015b00 <process_adc+0x180>)
 801599e:	781b      	ldrb	r3, [r3, #0]
 80159a0:	2b02      	cmp	r3, #2
 80159a2:	d105      	bne.n	80159b0 <process_adc+0x30>
 80159a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80159a6:	2b02      	cmp	r3, #2
 80159a8:	dc02      	bgt.n	80159b0 <process_adc+0x30>
			skp = 1;
 80159aa:	2301      	movs	r3, #1
 80159ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80159ae:	e006      	b.n	80159be <process_adc+0x3e>
		} else if (0xFF == bemf_to[i]) {
 80159b0:	4a54      	ldr	r2, [pc, #336]	; (8015b04 <process_adc+0x184>)
 80159b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80159b4:	4413      	add	r3, r2
 80159b6:	781b      	ldrb	r3, [r3, #0]
 80159b8:	2bff      	cmp	r3, #255	; 0xff
 80159ba:	f000 8092 	beq.w	8015ae2 <process_adc+0x162>
			continue;
		}

		const canton_config_t *c = get_canton_cnf(i);
 80159be:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80159c0:	f000 fcd0 	bl	8016364 <get_canton_cnf>
 80159c4:	62f8      	str	r0, [r7, #44]	; 0x2c

		int32_t voffa = bemf_convert_to_millivolt(c, buf->off[i].vA);
 80159c6:	687b      	ldr	r3, [r7, #4]
 80159c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80159ca:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 80159ce:	b29b      	uxth	r3, r3
 80159d0:	4619      	mov	r1, r3
 80159d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80159d4:	f7ff ffba 	bl	801594c <bemf_convert_to_millivolt>
 80159d8:	62b8      	str	r0, [r7, #40]	; 0x28
		int32_t voffb = bemf_convert_to_millivolt(c, buf->off[i].vB);
 80159da:	687a      	ldr	r2, [r7, #4]
 80159dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80159de:	009b      	lsls	r3, r3, #2
 80159e0:	4413      	add	r3, r2
 80159e2:	885b      	ldrh	r3, [r3, #2]
 80159e4:	b29b      	uxth	r3, r3
 80159e6:	4619      	mov	r1, r3
 80159e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80159ea:	f7ff ffaf 	bl	801594c <bemf_convert_to_millivolt>
 80159ee:	6278      	str	r0, [r7, #36]	; 0x24
		int32_t vona =  bemf_convert_to_millivolt(c, buf->on[i].vA);
 80159f0:	687a      	ldr	r2, [r7, #4]
 80159f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80159f4:	3304      	adds	r3, #4
 80159f6:	009b      	lsls	r3, r3, #2
 80159f8:	4413      	add	r3, r2
 80159fa:	889b      	ldrh	r3, [r3, #4]
 80159fc:	b29b      	uxth	r3, r3
 80159fe:	4619      	mov	r1, r3
 8015a00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015a02:	f7ff ffa3 	bl	801594c <bemf_convert_to_millivolt>
 8015a06:	6238      	str	r0, [r7, #32]
		int32_t vonb =  bemf_convert_to_millivolt(c, buf->on[i].vB);
 8015a08:	687a      	ldr	r2, [r7, #4]
 8015a0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015a0c:	3304      	adds	r3, #4
 8015a0e:	009b      	lsls	r3, r3, #2
 8015a10:	4413      	add	r3, r2
 8015a12:	88db      	ldrh	r3, [r3, #6]
 8015a14:	b29b      	uxth	r3, r3
 8015a16:	4619      	mov	r1, r3
 8015a18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015a1a:	f7ff ff97 	bl	801594c <bemf_convert_to_millivolt>
 8015a1e:	61f8      	str	r0, [r7, #28]

		int16_t voff = (int16_t)(voffb-voffa);
 8015a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a22:	b29a      	uxth	r2, r3
 8015a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a26:	b29b      	uxth	r3, r3
 8015a28:	1ad3      	subs	r3, r2, r3
 8015a2a:	b29b      	uxth	r3, r3
 8015a2c:	86fb      	strh	r3, [r7, #54]	; 0x36
		int16_t von  = (int16_t)(vonb-vona);
 8015a2e:	69fb      	ldr	r3, [r7, #28]
 8015a30:	b29a      	uxth	r2, r3
 8015a32:	6a3b      	ldr	r3, [r7, #32]
 8015a34:	b29b      	uxth	r3, r3
 8015a36:	1ad3      	subs	r3, r2, r3
 8015a38:	b29b      	uxth	r3, r3
 8015a3a:	86bb      	strh	r3, [r7, #52]	; 0x34

		if (cconf->reverse_bemf) {
 8015a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a3e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015a42:	f003 0302 	and.w	r3, r3, #2
 8015a46:	b2db      	uxtb	r3, r3
 8015a48:	2b00      	cmp	r3, #0
 8015a4a:	d007      	beq.n	8015a5c <process_adc+0xdc>
			voff = -voff;
 8015a4c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015a4e:	425b      	negs	r3, r3
 8015a50:	b29b      	uxth	r3, r3
 8015a52:	86fb      	strh	r3, [r7, #54]	; 0x36
			von = -von;
 8015a54:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015a56:	425b      	negs	r3, r3
 8015a58:	b29b      	uxth	r3, r3
 8015a5a:	86bb      	strh	r3, [r7, #52]	; 0x34
		}
		if ((1)) {
			itm_debug3(DBG_ADC|DBG_LOWCTRL, "ADC/Voff", i, voffa, voffb);
 8015a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a5e:	9300      	str	r3, [sp, #0]
 8015a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a62:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015a64:	4928      	ldr	r1, [pc, #160]	; (8015b08 <process_adc+0x188>)
 8015a66:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 8015a6a:	f7ff fe91 	bl	8015790 <itm_debug3>
			itm_debug3(DBG_ADC|DBG_LOWCTRL, "ADC/Von",  i, vona, vonb);
 8015a6e:	69fb      	ldr	r3, [r7, #28]
 8015a70:	9300      	str	r3, [sp, #0]
 8015a72:	6a3b      	ldr	r3, [r7, #32]
 8015a74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015a76:	4925      	ldr	r1, [pc, #148]	; (8015b0c <process_adc+0x18c>)
 8015a78:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 8015a7c:	f7ff fe88 	bl	8015790 <itm_debug3>
			itm_debug3(DBG_ADC|DBG_LOWCTRL, "ADCoi", i,  voff, von);
 8015a80:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8015a84:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8015a88:	9300      	str	r3, [sp, #0]
 8015a8a:	4613      	mov	r3, r2
 8015a8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015a8e:	4920      	ldr	r1, [pc, #128]	; (8015b10 <process_adc+0x190>)
 8015a90:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 8015a94:	f7ff fe7c 	bl	8015790 <itm_debug3>
		}
		if (skp) continue;
 8015a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a9a:	2b00      	cmp	r3, #0
 8015a9c:	d123      	bne.n	8015ae6 <process_adc+0x166>
				m.v2 = von;
				mqf_write(&from_canton, &m);
			}
		}
		msg_64_t m;
		m.from = MA_CANTON(localBoardNum, i);
 8015a9e:	4b1d      	ldr	r3, [pc, #116]	; (8015b14 <process_adc+0x194>)
 8015aa0:	781b      	ldrb	r3, [r3, #0]
 8015aa2:	00db      	lsls	r3, r3, #3
 8015aa4:	b25b      	sxtb	r3, r3
 8015aa6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8015aaa:	b25a      	sxtb	r2, r3
 8015aac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015aae:	b25b      	sxtb	r3, r3
 8015ab0:	f003 0307 	and.w	r3, r3, #7
 8015ab4:	b25b      	sxtb	r3, r3
 8015ab6:	4313      	orrs	r3, r2
 8015ab8:	b25b      	sxtb	r3, r3
 8015aba:	b2db      	uxtb	r3, r3
 8015abc:	747b      	strb	r3, [r7, #17]
		m.to = bemf_to[i];
 8015abe:	4a11      	ldr	r2, [pc, #68]	; (8015b04 <process_adc+0x184>)
 8015ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015ac2:	4413      	add	r3, r2
 8015ac4:	781b      	ldrb	r3, [r3, #0]
 8015ac6:	743b      	strb	r3, [r7, #16]
		m.cmd = CMD_BEMF_NOTIF;
 8015ac8:	2303      	movs	r3, #3
 8015aca:	74bb      	strb	r3, [r7, #18]
		m.v1 = voff;
 8015acc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015ace:	82bb      	strh	r3, [r7, #20]
		m.v2 = von;
 8015ad0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015ad2:	82fb      	strh	r3, [r7, #22]
		mqf_write(&from_canton, &m);
 8015ad4:	f107 0310 	add.w	r3, r7, #16
 8015ad8:	4619      	mov	r1, r3
 8015ada:	480f      	ldr	r0, [pc, #60]	; (8015b18 <process_adc+0x198>)
 8015adc:	f003 fe3a 	bl	8019754 <mqf_write>
 8015ae0:	e002      	b.n	8015ae8 <process_adc+0x168>
			continue;
 8015ae2:	bf00      	nop
 8015ae4:	e000      	b.n	8015ae8 <process_adc+0x168>
		if (skp) continue;
 8015ae6:	bf00      	nop
	for (int i=0; i<NUM_LOCAL_CANTONS_HW; i++) {
 8015ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015aea:	3301      	adds	r3, #1
 8015aec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015af0:	2b04      	cmp	r3, #4
 8015af2:	f77f af4d 	ble.w	8015990 <process_adc+0x10>
	}
}
 8015af6:	bf00      	nop
 8015af8:	3740      	adds	r7, #64	; 0x40
 8015afa:	46bd      	mov	sp, r7
 8015afc:	bd80      	pop	{r7, pc}
 8015afe:	bf00      	nop
 8015b00:	2000538e 	.word	0x2000538e
 8015b04:	2000023c 	.word	0x2000023c
 8015b08:	0801a27c 	.word	0x0801a27c
 8015b0c:	0801a288 	.word	0x0801a288
 8015b10:	0801a290 	.word	0x0801a290
 8015b14:	20005451 	.word	0x20005451
 8015b18:	20000548 	.word	0x20000548

08015b1c <presdect_tick>:
#include "railconfig.h"


#if INA3221_TASK
void presdect_tick(_UNUSED_ uint32_t notif_flags, _UNUSED_ uint32_t tick, _UNUSED_ uint32_t dt)
{
 8015b1c:	b480      	push	{r7}
 8015b1e:	b085      	sub	sp, #20
 8015b20:	af00      	add	r7, sp, #0
 8015b22:	60f8      	str	r0, [r7, #12]
 8015b24:	60b9      	str	r1, [r7, #8]
 8015b26:	607a      	str	r2, [r7, #4]
}
 8015b28:	bf00      	nop
 8015b2a:	3714      	adds	r7, #20
 8015b2c:	46bd      	mov	sp, r7
 8015b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b32:	4770      	bx	lr

08015b34 <itm_debug1>:
{
 8015b34:	b580      	push	{r7, lr}
 8015b36:	b086      	sub	sp, #24
 8015b38:	af02      	add	r7, sp, #8
 8015b3a:	60f8      	str	r0, [r7, #12]
 8015b3c:	60b9      	str	r1, [r7, #8]
 8015b3e:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 8015b40:	4b08      	ldr	r3, [pc, #32]	; (8015b64 <itm_debug1+0x30>)
 8015b42:	681a      	ldr	r2, [r3, #0]
 8015b44:	68fb      	ldr	r3, [r7, #12]
 8015b46:	4013      	ands	r3, r2
 8015b48:	2b00      	cmp	r3, #0
 8015b4a:	d007      	beq.n	8015b5c <itm_debug1+0x28>
 8015b4c:	2301      	movs	r3, #1
 8015b4e:	9300      	str	r3, [sp, #0]
 8015b50:	2300      	movs	r3, #0
 8015b52:	2200      	movs	r2, #0
 8015b54:	6879      	ldr	r1, [r7, #4]
 8015b56:	68b8      	ldr	r0, [r7, #8]
 8015b58:	f003 fcf4 	bl	8019544 <_itm_debug3>
}
 8015b5c:	bf00      	nop
 8015b5e:	3710      	adds	r7, #16
 8015b60:	46bd      	mov	sp, r7
 8015b62:	bd80      	pop	{r7, pc}
 8015b64:	20000610 	.word	0x20000610

08015b68 <itm_debug2>:
{
 8015b68:	b580      	push	{r7, lr}
 8015b6a:	b086      	sub	sp, #24
 8015b6c:	af02      	add	r7, sp, #8
 8015b6e:	60f8      	str	r0, [r7, #12]
 8015b70:	60b9      	str	r1, [r7, #8]
 8015b72:	607a      	str	r2, [r7, #4]
 8015b74:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, 0, 2);
 8015b76:	4b09      	ldr	r3, [pc, #36]	; (8015b9c <itm_debug2+0x34>)
 8015b78:	681a      	ldr	r2, [r3, #0]
 8015b7a:	68fb      	ldr	r3, [r7, #12]
 8015b7c:	4013      	ands	r3, r2
 8015b7e:	2b00      	cmp	r3, #0
 8015b80:	d007      	beq.n	8015b92 <itm_debug2+0x2a>
 8015b82:	2302      	movs	r3, #2
 8015b84:	9300      	str	r3, [sp, #0]
 8015b86:	2300      	movs	r3, #0
 8015b88:	683a      	ldr	r2, [r7, #0]
 8015b8a:	6879      	ldr	r1, [r7, #4]
 8015b8c:	68b8      	ldr	r0, [r7, #8]
 8015b8e:	f003 fcd9 	bl	8019544 <_itm_debug3>
}
 8015b92:	bf00      	nop
 8015b94:	3710      	adds	r7, #16
 8015b96:	46bd      	mov	sp, r7
 8015b98:	bd80      	pop	{r7, pc}
 8015b9a:	bf00      	nop
 8015b9c:	20000610 	.word	0x20000610

08015ba0 <turnout_error>:
{
 8015ba0:	b580      	push	{r7, lr}
 8015ba2:	b082      	sub	sp, #8
 8015ba4:	af00      	add	r7, sp, #0
 8015ba6:	6078      	str	r0, [r7, #4]
 8015ba8:	6039      	str	r1, [r7, #0]
	return trainctl_error('A', code, msg);
 8015baa:	683a      	ldr	r2, [r7, #0]
 8015bac:	6879      	ldr	r1, [r7, #4]
 8015bae:	2041      	movs	r0, #65	; 0x41
 8015bb0:	f000 fa50 	bl	8016054 <trainctl_error>
 8015bb4:	4603      	mov	r3, r0
}
 8015bb6:	4618      	mov	r0, r3
 8015bb8:	3708      	adds	r7, #8
 8015bba:	46bd      	mov	sp, r7
 8015bbc:	bd80      	pop	{r7, pc}

08015bbe <debug_info>:
{
	trainctl_notif('T', train_idx, cmd, dta, dtalen);
}

static inline void debug_info(uint32_t sel, uint32_t num, char *msg, int v1, int v2, int v3)
{
 8015bbe:	b580      	push	{r7, lr}
 8015bc0:	b088      	sub	sp, #32
 8015bc2:	af04      	add	r7, sp, #16
 8015bc4:	60f8      	str	r0, [r7, #12]
 8015bc6:	60b9      	str	r1, [r7, #8]
 8015bc8:	607a      	str	r2, [r7, #4]
 8015bca:	603b      	str	r3, [r7, #0]
	trainctl_notif2(sel, num, 'D', msg, v1, v2, v3);
 8015bcc:	68fb      	ldr	r3, [r7, #12]
 8015bce:	b2d8      	uxtb	r0, r3
 8015bd0:	68bb      	ldr	r3, [r7, #8]
 8015bd2:	b2d9      	uxtb	r1, r3
 8015bd4:	69fb      	ldr	r3, [r7, #28]
 8015bd6:	9302      	str	r3, [sp, #8]
 8015bd8:	69bb      	ldr	r3, [r7, #24]
 8015bda:	9301      	str	r3, [sp, #4]
 8015bdc:	683b      	ldr	r3, [r7, #0]
 8015bde:	9300      	str	r3, [sp, #0]
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	2244      	movs	r2, #68	; 0x44
 8015be4:	f001 f9ec 	bl	8016fc0 <trainctl_notif2>
}
 8015be8:	bf00      	nop
 8015bea:	3710      	adds	r7, #16
 8015bec:	46bd      	mov	sp, r7
 8015bee:	bd80      	pop	{r7, pc}

08015bf0 <mqf_read_to_turnout>:
LFMQUEUE_DEF_H(to_turnout, msg_64_t)
 8015bf0:	b580      	push	{r7, lr}
 8015bf2:	b082      	sub	sp, #8
 8015bf4:	af00      	add	r7, sp, #0
 8015bf6:	6078      	str	r0, [r7, #4]
 8015bf8:	6879      	ldr	r1, [r7, #4]
 8015bfa:	4804      	ldr	r0, [pc, #16]	; (8015c0c <mqf_read_to_turnout+0x1c>)
 8015bfc:	f003 fe24 	bl	8019848 <mqf_read>
 8015c00:	4603      	mov	r3, r0
 8015c02:	4618      	mov	r0, r3
 8015c04:	3708      	adds	r7, #8
 8015c06:	46bd      	mov	sp, r7
 8015c08:	bd80      	pop	{r7, pc}
 8015c0a:	bf00      	nop
 8015c0c:	20000524 	.word	0x20000524

08015c10 <turnout_tick>:
static void process_turnout_timers(uint32_t tick, uint32_t dt);
static void process_turnout_cmd(msg_64_t *m, uint32_t tick, uint32_t dt);


void turnout_tick(_UNUSED_ uint32_t notif_flags, uint32_t tick, uint32_t dt)
{
 8015c10:	b580      	push	{r7, lr}
 8015c12:	b088      	sub	sp, #32
 8015c14:	af00      	add	r7, sp, #0
 8015c16:	60f8      	str	r0, [r7, #12]
 8015c18:	60b9      	str	r1, [r7, #8]
 8015c1a:	607a      	str	r2, [r7, #4]
	static int first=1;
	if (first) {
 8015c1c:	4b20      	ldr	r3, [pc, #128]	; (8015ca0 <turnout_tick+0x90>)
 8015c1e:	681b      	ldr	r3, [r3, #0]
 8015c20:	2b00      	cmp	r3, #0
 8015c22:	d004      	beq.n	8015c2e <turnout_tick+0x1e>
		first = 0;
 8015c24:	4b1e      	ldr	r3, [pc, #120]	; (8015ca0 <turnout_tick+0x90>)
 8015c26:	2200      	movs	r2, #0
 8015c28:	601a      	str	r2, [r3, #0]
		turnout_reset();
 8015c2a:	f000 f8d3 	bl	8015dd4 <turnout_reset>
	}
	static int cnt = 0;
	cnt ++;
 8015c2e:	4b1d      	ldr	r3, [pc, #116]	; (8015ca4 <turnout_tick+0x94>)
 8015c30:	681b      	ldr	r3, [r3, #0]
 8015c32:	3301      	adds	r3, #1
 8015c34:	4a1b      	ldr	r2, [pc, #108]	; (8015ca4 <turnout_tick+0x94>)
 8015c36:	6013      	str	r3, [r2, #0]
	if (cnt%4) return; // half freq
 8015c38:	4b1a      	ldr	r3, [pc, #104]	; (8015ca4 <turnout_tick+0x94>)
 8015c3a:	681b      	ldr	r3, [r3, #0]
 8015c3c:	f003 0303 	and.w	r3, r3, #3
 8015c40:	2b00      	cmp	r3, #0
 8015c42:	d126      	bne.n	8015c92 <turnout_tick+0x82>
	// TODO we need a fixed freq for turnout

	process_turnout_timers(tick, dt);
 8015c44:	6879      	ldr	r1, [r7, #4]
 8015c46:	68b8      	ldr	r0, [r7, #8]
 8015c48:	f000 f920 	bl	8015e8c <process_turnout_timers>
	for (;;) {
		msg_64_t m;
		int rc = mqf_read_to_turnout(&m);
 8015c4c:	f107 0310 	add.w	r3, r7, #16
 8015c50:	4618      	mov	r0, r3
 8015c52:	f7ff ffcd 	bl	8015bf0 <mqf_read_to_turnout>
 8015c56:	61f8      	str	r0, [r7, #28]
		if (rc) break;
 8015c58:	69fb      	ldr	r3, [r7, #28]
 8015c5a:	2b00      	cmp	r3, #0
 8015c5c:	d11b      	bne.n	8015c96 <turnout_tick+0x86>
		if (IS_TURNOUT(m.to)) {
 8015c5e:	7c3b      	ldrb	r3, [r7, #16]
 8015c60:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8015c64:	2b40      	cmp	r3, #64	; 0x40
 8015c66:	d107      	bne.n	8015c78 <turnout_tick+0x68>
			process_turnout_cmd(&m, tick, dt);
 8015c68:	f107 0310 	add.w	r3, r7, #16
 8015c6c:	687a      	ldr	r2, [r7, #4]
 8015c6e:	68b9      	ldr	r1, [r7, #8]
 8015c70:	4618      	mov	r0, r3
 8015c72:	f000 f819 	bl	8015ca8 <process_turnout_cmd>
 8015c76:	e7e9      	b.n	8015c4c <turnout_tick+0x3c>
		} else if (IS_BROADCAST(m.to)) {
 8015c78:	7c3b      	ldrb	r3, [r7, #16]
 8015c7a:	2bff      	cmp	r3, #255	; 0xff
 8015c7c:	d1e6      	bne.n	8015c4c <turnout_tick+0x3c>
			switch (m.cmd) {
 8015c7e:	7cbb      	ldrb	r3, [r7, #18]
 8015c80:	3bfe      	subs	r3, #254	; 0xfe
 8015c82:	2b01      	cmp	r3, #1
 8015c84:	d803      	bhi.n	8015c8e <turnout_tick+0x7e>
			default:
				break;
			case CMD_RESET: // FALLTHRU
			case CMD_EMERGENCY_STOP:
				turnout_reset();
 8015c86:	f000 f8a5 	bl	8015dd4 <turnout_reset>
				break;
 8015c8a:	bf00      	nop
 8015c8c:	e000      	b.n	8015c90 <turnout_tick+0x80>
				break;
 8015c8e:	bf00      	nop
	for (;;) {
 8015c90:	e7dc      	b.n	8015c4c <turnout_tick+0x3c>
	if (cnt%4) return; // half freq
 8015c92:	bf00      	nop
 8015c94:	e000      	b.n	8015c98 <turnout_tick+0x88>
		if (rc) break;
 8015c96:	bf00      	nop
			}
		} else {
			// error
		}
	}
}
 8015c98:	3720      	adds	r7, #32
 8015c9a:	46bd      	mov	sp, r7
 8015c9c:	bd80      	pop	{r7, pc}
 8015c9e:	bf00      	nop
 8015ca0:	20000244 	.word	0x20000244
 8015ca4:	200053a0 	.word	0x200053a0

08015ca8 <process_turnout_cmd>:
		const turnout_config_t *aconf = get_turnout_cnf(_idx); \
		turnout_vars_t         *avars = &tvars[_idx];


static void process_turnout_cmd(msg_64_t *m, _UNUSED_ uint32_t tick, _UNUSED_ uint32_t dt)
{
 8015ca8:	b580      	push	{r7, lr}
 8015caa:	b08a      	sub	sp, #40	; 0x28
 8015cac:	af02      	add	r7, sp, #8
 8015cae:	60f8      	str	r0, [r7, #12]
 8015cb0:	60b9      	str	r1, [r7, #8]
 8015cb2:	607a      	str	r2, [r7, #4]
	uint8_t tidx = m->to & 0x07;
 8015cb4:	68fb      	ldr	r3, [r7, #12]
 8015cb6:	781b      	ldrb	r3, [r3, #0]
 8015cb8:	f003 0307 	and.w	r3, r3, #7
 8015cbc:	77fb      	strb	r3, [r7, #31]
	USE_TURNOUT(tidx)
 8015cbe:	7ffb      	ldrb	r3, [r7, #31]
 8015cc0:	4618      	mov	r0, r3
 8015cc2:	f000 fb9d 	bl	8016400 <get_turnout_cnf>
 8015cc6:	61b8      	str	r0, [r7, #24]
 8015cc8:	7ffb      	ldrb	r3, [r7, #31]
 8015cca:	005b      	lsls	r3, r3, #1
 8015ccc:	4a3a      	ldr	r2, [pc, #232]	; (8015db8 <process_turnout_cmd+0x110>)
 8015cce:	4413      	add	r3, r2
 8015cd0:	617b      	str	r3, [r7, #20]
	if (!aconf || !avars) {
 8015cd2:	69bb      	ldr	r3, [r7, #24]
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	d002      	beq.n	8015cde <process_turnout_cmd+0x36>
 8015cd8:	697b      	ldr	r3, [r7, #20]
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	d105      	bne.n	8015cea <process_turnout_cmd+0x42>
		turnout_error(ERR_BAD_PARAM, "bad idx");
 8015cde:	4937      	ldr	r1, [pc, #220]	; (8015dbc <process_turnout_cmd+0x114>)
 8015ce0:	f06f 0001 	mvn.w	r0, #1
 8015ce4:	f7ff ff5c 	bl	8015ba0 <turnout_error>
		return;
 8015ce8:	e063      	b.n	8015db2 <process_turnout_cmd+0x10a>
	}
	debug_info('A', 0, "CMD", tidx, m->cmd, avars->value);
 8015cea:	7ffa      	ldrb	r2, [r7, #31]
 8015cec:	68fb      	ldr	r3, [r7, #12]
 8015cee:	789b      	ldrb	r3, [r3, #2]
 8015cf0:	4619      	mov	r1, r3
 8015cf2:	697b      	ldr	r3, [r7, #20]
 8015cf4:	f993 3000 	ldrsb.w	r3, [r3]
 8015cf8:	9301      	str	r3, [sp, #4]
 8015cfa:	9100      	str	r1, [sp, #0]
 8015cfc:	4613      	mov	r3, r2
 8015cfe:	4a30      	ldr	r2, [pc, #192]	; (8015dc0 <process_turnout_cmd+0x118>)
 8015d00:	2100      	movs	r1, #0
 8015d02:	2041      	movs	r0, #65	; 0x41
 8015d04:	f7ff ff5b 	bl	8015bbe <debug_info>
#ifndef TRAIN_SIMU
	if (!aconf->cmd_port) return;
 8015d08:	69bb      	ldr	r3, [r7, #24]
 8015d0a:	681b      	ldr	r3, [r3, #0]
 8015d0c:	2b00      	cmp	r3, #0
 8015d0e:	d04f      	beq.n	8015db0 <process_turnout_cmd+0x108>
#endif
	switch (m->cmd) {
 8015d10:	68fb      	ldr	r3, [r7, #12]
 8015d12:	789b      	ldrb	r3, [r3, #2]
 8015d14:	2b31      	cmp	r3, #49	; 0x31
 8015d16:	d002      	beq.n	8015d1e <process_turnout_cmd+0x76>
 8015d18:	2b32      	cmp	r3, #50	; 0x32
 8015d1a:	d020      	beq.n	8015d5e <process_turnout_cmd+0xb6>
 8015d1c:	e03f      	b.n	8015d9e <process_turnout_cmd+0xf6>
	case CMD_TURNOUT_A:
		itm_debug2(DBG_TURNOUT, "TA", tidx, avars->value);
 8015d1e:	7ffa      	ldrb	r2, [r7, #31]
 8015d20:	697b      	ldr	r3, [r7, #20]
 8015d22:	f993 3000 	ldrsb.w	r3, [r3]
 8015d26:	4927      	ldr	r1, [pc, #156]	; (8015dc4 <process_turnout_cmd+0x11c>)
 8015d28:	f44f 7000 	mov.w	r0, #512	; 0x200
 8015d2c:	f7ff ff1c 	bl	8015b68 <itm_debug2>
		avars->value = -1;
 8015d30:	697b      	ldr	r3, [r7, #20]
 8015d32:	22ff      	movs	r2, #255	; 0xff
 8015d34:	701a      	strb	r2, [r3, #0]
#ifndef TRAIN_SIMU
	    HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinA, GPIO_PIN_RESET);
 8015d36:	69bb      	ldr	r3, [r7, #24]
 8015d38:	6818      	ldr	r0, [r3, #0]
 8015d3a:	69bb      	ldr	r3, [r7, #24]
 8015d3c:	889b      	ldrh	r3, [r3, #4]
 8015d3e:	2200      	movs	r2, #0
 8015d40:	4619      	mov	r1, r3
 8015d42:	f7ed fa97 	bl	8003274 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinB, GPIO_PIN_RESET);
 8015d46:	69bb      	ldr	r3, [r7, #24]
 8015d48:	6818      	ldr	r0, [r3, #0]
 8015d4a:	69bb      	ldr	r3, [r7, #24]
 8015d4c:	88db      	ldrh	r3, [r3, #6]
 8015d4e:	2200      	movs	r2, #0
 8015d50:	4619      	mov	r1, r3
 8015d52:	f7ed fa8f 	bl	8003274 <HAL_GPIO_WritePin>
#endif
		avars->st = ST_SETA;
 8015d56:	697b      	ldr	r3, [r7, #20]
 8015d58:	2201      	movs	r2, #1
 8015d5a:	705a      	strb	r2, [r3, #1]
		break;
 8015d5c:	e029      	b.n	8015db2 <process_turnout_cmd+0x10a>
	case CMD_TURNOUT_B:
		itm_debug2(DBG_TURNOUT, "TB", tidx, avars->value);
 8015d5e:	7ffa      	ldrb	r2, [r7, #31]
 8015d60:	697b      	ldr	r3, [r7, #20]
 8015d62:	f993 3000 	ldrsb.w	r3, [r3]
 8015d66:	4918      	ldr	r1, [pc, #96]	; (8015dc8 <process_turnout_cmd+0x120>)
 8015d68:	f44f 7000 	mov.w	r0, #512	; 0x200
 8015d6c:	f7ff fefc 	bl	8015b68 <itm_debug2>
		avars->value = -1;
 8015d70:	697b      	ldr	r3, [r7, #20]
 8015d72:	22ff      	movs	r2, #255	; 0xff
 8015d74:	701a      	strb	r2, [r3, #0]
#ifndef TRAIN_SIMU
	    HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinA, GPIO_PIN_RESET);
 8015d76:	69bb      	ldr	r3, [r7, #24]
 8015d78:	6818      	ldr	r0, [r3, #0]
 8015d7a:	69bb      	ldr	r3, [r7, #24]
 8015d7c:	889b      	ldrh	r3, [r3, #4]
 8015d7e:	2200      	movs	r2, #0
 8015d80:	4619      	mov	r1, r3
 8015d82:	f7ed fa77 	bl	8003274 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinB, GPIO_PIN_RESET);
 8015d86:	69bb      	ldr	r3, [r7, #24]
 8015d88:	6818      	ldr	r0, [r3, #0]
 8015d8a:	69bb      	ldr	r3, [r7, #24]
 8015d8c:	88db      	ldrh	r3, [r3, #6]
 8015d8e:	2200      	movs	r2, #0
 8015d90:	4619      	mov	r1, r3
 8015d92:	f7ed fa6f 	bl	8003274 <HAL_GPIO_WritePin>
#endif
		avars->st = ST_SETB;
 8015d96:	697b      	ldr	r3, [r7, #20]
 8015d98:	2203      	movs	r2, #3
 8015d9a:	705a      	strb	r2, [r3, #1]
		break;
 8015d9c:	e009      	b.n	8015db2 <process_turnout_cmd+0x10a>
	default:
		itm_debug1(DBG_ERR|DBG_TURNOUT, "inv cmd", m->cmd);
 8015d9e:	68fb      	ldr	r3, [r7, #12]
 8015da0:	789b      	ldrb	r3, [r3, #2]
 8015da2:	461a      	mov	r2, r3
 8015da4:	4909      	ldr	r1, [pc, #36]	; (8015dcc <process_turnout_cmd+0x124>)
 8015da6:	480a      	ldr	r0, [pc, #40]	; (8015dd0 <process_turnout_cmd+0x128>)
 8015da8:	f7ff fec4 	bl	8015b34 <itm_debug1>
		break;
 8015dac:	bf00      	nop
 8015dae:	e000      	b.n	8015db2 <process_turnout_cmd+0x10a>
	if (!aconf->cmd_port) return;
 8015db0:	bf00      	nop
	}
}
 8015db2:	3720      	adds	r7, #32
 8015db4:	46bd      	mov	sp, r7
 8015db6:	bd80      	pop	{r7, pc}
 8015db8:	20005390 	.word	0x20005390
 8015dbc:	0801a298 	.word	0x0801a298
 8015dc0:	0801a2a0 	.word	0x0801a2a0
 8015dc4:	0801a2a4 	.word	0x0801a2a4
 8015dc8:	0801a2a8 	.word	0x0801a2a8
 8015dcc:	0801a2ac 	.word	0x0801a2ac
 8015dd0:	80000200 	.word	0x80000200

08015dd4 <turnout_reset>:


static void turnout_reset(void)
{
 8015dd4:	b580      	push	{r7, lr}
 8015dd6:	b086      	sub	sp, #24
 8015dd8:	af02      	add	r7, sp, #8
	for (int tidx=0; tidx<NUM_LOCAL_TURNOUTS; tidx++) {
 8015dda:	2300      	movs	r3, #0
 8015ddc:	60fb      	str	r3, [r7, #12]
 8015dde:	e044      	b.n	8015e6a <turnout_reset+0x96>
		USE_TURNOUT(tidx) 	// aconf avars
 8015de0:	68f8      	ldr	r0, [r7, #12]
 8015de2:	f000 fb0d 	bl	8016400 <get_turnout_cnf>
 8015de6:	60b8      	str	r0, [r7, #8]
 8015de8:	68fb      	ldr	r3, [r7, #12]
 8015dea:	005b      	lsls	r3, r3, #1
 8015dec:	4a23      	ldr	r2, [pc, #140]	; (8015e7c <turnout_reset+0xa8>)
 8015dee:	4413      	add	r3, r2
 8015df0:	607b      	str	r3, [r7, #4]
		memset(avars, 0, sizeof(*avars));
 8015df2:	2202      	movs	r2, #2
 8015df4:	2100      	movs	r1, #0
 8015df6:	6878      	ldr	r0, [r7, #4]
 8015df8:	f003 fdcd 	bl	8019996 <memset>
		avars->value = 0;
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	2200      	movs	r2, #0
 8015e00:	701a      	strb	r2, [r3, #0]
		avars->st = ST_IDLE;
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	2200      	movs	r2, #0
 8015e06:	705a      	strb	r2, [r3, #1]
		if (!aconf) {
 8015e08:	68bb      	ldr	r3, [r7, #8]
 8015e0a:	2b00      	cmp	r3, #0
 8015e0c:	d106      	bne.n	8015e1c <turnout_reset+0x48>
			itm_debug1(DBG_TURNOUT, "tn skip", tidx);
 8015e0e:	68fa      	ldr	r2, [r7, #12]
 8015e10:	491b      	ldr	r1, [pc, #108]	; (8015e80 <turnout_reset+0xac>)
 8015e12:	f44f 7000 	mov.w	r0, #512	; 0x200
 8015e16:	f7ff fe8d 	bl	8015b34 <itm_debug1>
			continue;
 8015e1a:	e023      	b.n	8015e64 <turnout_reset+0x90>
		}
#ifndef TRAIN_SIMU
		if (!aconf->cmd_port) return;
 8015e1c:	68bb      	ldr	r3, [r7, #8]
 8015e1e:	681b      	ldr	r3, [r3, #0]
 8015e20:	2b00      	cmp	r3, #0
 8015e22:	d026      	beq.n	8015e72 <turnout_reset+0x9e>

		HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinA, GPIO_PIN_RESET);
 8015e24:	68bb      	ldr	r3, [r7, #8]
 8015e26:	6818      	ldr	r0, [r3, #0]
 8015e28:	68bb      	ldr	r3, [r7, #8]
 8015e2a:	889b      	ldrh	r3, [r3, #4]
 8015e2c:	2200      	movs	r2, #0
 8015e2e:	4619      	mov	r1, r3
 8015e30:	f7ed fa20 	bl	8003274 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinB, GPIO_PIN_RESET);
 8015e34:	68bb      	ldr	r3, [r7, #8]
 8015e36:	6818      	ldr	r0, [r3, #0]
 8015e38:	68bb      	ldr	r3, [r7, #8]
 8015e3a:	88db      	ldrh	r3, [r3, #6]
 8015e3c:	2200      	movs	r2, #0
 8015e3e:	4619      	mov	r1, r3
 8015e40:	f7ed fa18 	bl	8003274 <HAL_GPIO_WritePin>
#endif
		itm_debug1(DBG_TURNOUT, "A/RESET", tidx);
 8015e44:	68fa      	ldr	r2, [r7, #12]
 8015e46:	490f      	ldr	r1, [pc, #60]	; (8015e84 <turnout_reset+0xb0>)
 8015e48:	f44f 7000 	mov.w	r0, #512	; 0x200
 8015e4c:	f7ff fe72 	bl	8015b34 <itm_debug1>
		debug_info('A', 0, "RESET", 0, 0,0);
 8015e50:	2300      	movs	r3, #0
 8015e52:	9301      	str	r3, [sp, #4]
 8015e54:	2300      	movs	r3, #0
 8015e56:	9300      	str	r3, [sp, #0]
 8015e58:	2300      	movs	r3, #0
 8015e5a:	4a0b      	ldr	r2, [pc, #44]	; (8015e88 <turnout_reset+0xb4>)
 8015e5c:	2100      	movs	r1, #0
 8015e5e:	2041      	movs	r0, #65	; 0x41
 8015e60:	f7ff fead 	bl	8015bbe <debug_info>
	for (int tidx=0; tidx<NUM_LOCAL_TURNOUTS; tidx++) {
 8015e64:	68fb      	ldr	r3, [r7, #12]
 8015e66:	3301      	adds	r3, #1
 8015e68:	60fb      	str	r3, [r7, #12]
 8015e6a:	68fb      	ldr	r3, [r7, #12]
 8015e6c:	2b07      	cmp	r3, #7
 8015e6e:	ddb7      	ble.n	8015de0 <turnout_reset+0xc>
 8015e70:	e000      	b.n	8015e74 <turnout_reset+0xa0>
		if (!aconf->cmd_port) return;
 8015e72:	bf00      	nop
		(void)aconf; // unused
	}
}
 8015e74:	3710      	adds	r7, #16
 8015e76:	46bd      	mov	sp, r7
 8015e78:	bd80      	pop	{r7, pc}
 8015e7a:	bf00      	nop
 8015e7c:	20005390 	.word	0x20005390
 8015e80:	0801a2b4 	.word	0x0801a2b4
 8015e84:	0801a2bc 	.word	0x0801a2bc
 8015e88:	0801a2c4 	.word	0x0801a2c4

08015e8c <process_turnout_timers>:




static void process_turnout_timers(_UNUSED_ uint32_t tick, _UNUSED_ uint32_t dt)
{
 8015e8c:	b580      	push	{r7, lr}
 8015e8e:	b088      	sub	sp, #32
 8015e90:	af02      	add	r7, sp, #8
 8015e92:	6078      	str	r0, [r7, #4]
 8015e94:	6039      	str	r1, [r7, #0]
	for (int i=0; i<NUM_LOCAL_TURNOUTS; i++) {
 8015e96:	2300      	movs	r3, #0
 8015e98:	617b      	str	r3, [r7, #20]
 8015e9a:	e0a2      	b.n	8015fe2 <process_turnout_timers+0x156>
		USE_TURNOUT(i)		// aconf , avars
 8015e9c:	6978      	ldr	r0, [r7, #20]
 8015e9e:	f000 faaf 	bl	8016400 <get_turnout_cnf>
 8015ea2:	6138      	str	r0, [r7, #16]
 8015ea4:	697b      	ldr	r3, [r7, #20]
 8015ea6:	005b      	lsls	r3, r3, #1
 8015ea8:	4a52      	ldr	r2, [pc, #328]	; (8015ff4 <process_turnout_timers+0x168>)
 8015eaa:	4413      	add	r3, r2
 8015eac:	60fb      	str	r3, [r7, #12]
#ifndef TRAIN_SIMU
        if (!aconf->cmd_port) continue;
 8015eae:	693b      	ldr	r3, [r7, #16]
 8015eb0:	681b      	ldr	r3, [r3, #0]
 8015eb2:	2b00      	cmp	r3, #0
 8015eb4:	f000 808f 	beq.w	8015fd6 <process_turnout_timers+0x14a>
#endif
		switch (avars->st) {
 8015eb8:	68fb      	ldr	r3, [r7, #12]
 8015eba:	785b      	ldrb	r3, [r3, #1]
 8015ebc:	2b04      	cmp	r3, #4
 8015ebe:	d87d      	bhi.n	8015fbc <process_turnout_timers+0x130>
 8015ec0:	a201      	add	r2, pc, #4	; (adr r2, 8015ec8 <process_turnout_timers+0x3c>)
 8015ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015ec6:	bf00      	nop
 8015ec8:	08015fdb 	.word	0x08015fdb
 8015ecc:	08015edd 	.word	0x08015edd
 8015ed0:	08015f4d 	.word	0x08015f4d
 8015ed4:	08015f15 	.word	0x08015f15
 8015ed8:	08015f85 	.word	0x08015f85
		case ST_IDLE:
			break;
		case ST_SETA:
#ifndef TRAIN_SIMU
			HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinA, GPIO_PIN_SET);
 8015edc:	693b      	ldr	r3, [r7, #16]
 8015ede:	6818      	ldr	r0, [r3, #0]
 8015ee0:	693b      	ldr	r3, [r7, #16]
 8015ee2:	889b      	ldrh	r3, [r3, #4]
 8015ee4:	2201      	movs	r2, #1
 8015ee6:	4619      	mov	r1, r3
 8015ee8:	f7ed f9c4 	bl	8003274 <HAL_GPIO_WritePin>
#else
			(void)aconf; // unused in SIMU
#endif
			avars->st = ST_RESETA;
 8015eec:	68fb      	ldr	r3, [r7, #12]
 8015eee:	2202      	movs	r2, #2
 8015ef0:	705a      	strb	r2, [r3, #1]
			itm_debug1(DBG_TURNOUT, "A/SETA", i);
 8015ef2:	697a      	ldr	r2, [r7, #20]
 8015ef4:	4940      	ldr	r1, [pc, #256]	; (8015ff8 <process_turnout_timers+0x16c>)
 8015ef6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8015efa:	f7ff fe1b 	bl	8015b34 <itm_debug1>
			debug_info('A', 0, "A0/SETA", 0, 0,0);
 8015efe:	2300      	movs	r3, #0
 8015f00:	9301      	str	r3, [sp, #4]
 8015f02:	2300      	movs	r3, #0
 8015f04:	9300      	str	r3, [sp, #0]
 8015f06:	2300      	movs	r3, #0
 8015f08:	4a3c      	ldr	r2, [pc, #240]	; (8015ffc <process_turnout_timers+0x170>)
 8015f0a:	2100      	movs	r1, #0
 8015f0c:	2041      	movs	r0, #65	; 0x41
 8015f0e:	f7ff fe56 	bl	8015bbe <debug_info>
			break;
 8015f12:	e063      	b.n	8015fdc <process_turnout_timers+0x150>
		case ST_SETB:
#ifndef TRAIN_SIMU
			HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinB, GPIO_PIN_SET);
 8015f14:	693b      	ldr	r3, [r7, #16]
 8015f16:	6818      	ldr	r0, [r3, #0]
 8015f18:	693b      	ldr	r3, [r7, #16]
 8015f1a:	88db      	ldrh	r3, [r3, #6]
 8015f1c:	2201      	movs	r2, #1
 8015f1e:	4619      	mov	r1, r3
 8015f20:	f7ed f9a8 	bl	8003274 <HAL_GPIO_WritePin>
#endif
			avars->st = ST_RESETB;
 8015f24:	68fb      	ldr	r3, [r7, #12]
 8015f26:	2204      	movs	r2, #4
 8015f28:	705a      	strb	r2, [r3, #1]
			itm_debug1(DBG_TURNOUT, "A/SETB", i);
 8015f2a:	697a      	ldr	r2, [r7, #20]
 8015f2c:	4934      	ldr	r1, [pc, #208]	; (8016000 <process_turnout_timers+0x174>)
 8015f2e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8015f32:	f7ff fdff 	bl	8015b34 <itm_debug1>
			debug_info('A', 0, "A0/SETB", 0, 0,0);
 8015f36:	2300      	movs	r3, #0
 8015f38:	9301      	str	r3, [sp, #4]
 8015f3a:	2300      	movs	r3, #0
 8015f3c:	9300      	str	r3, [sp, #0]
 8015f3e:	2300      	movs	r3, #0
 8015f40:	4a30      	ldr	r2, [pc, #192]	; (8016004 <process_turnout_timers+0x178>)
 8015f42:	2100      	movs	r1, #0
 8015f44:	2041      	movs	r0, #65	; 0x41
 8015f46:	f7ff fe3a 	bl	8015bbe <debug_info>
			break;
 8015f4a:	e047      	b.n	8015fdc <process_turnout_timers+0x150>
		case ST_RESETA:
#ifndef TRAIN_SIMU
			HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinA, GPIO_PIN_RESET);
 8015f4c:	693b      	ldr	r3, [r7, #16]
 8015f4e:	6818      	ldr	r0, [r3, #0]
 8015f50:	693b      	ldr	r3, [r7, #16]
 8015f52:	889b      	ldrh	r3, [r3, #4]
 8015f54:	2200      	movs	r2, #0
 8015f56:	4619      	mov	r1, r3
 8015f58:	f7ed f98c 	bl	8003274 <HAL_GPIO_WritePin>
#endif
			avars->st = ST_IDLE;
 8015f5c:	68fb      	ldr	r3, [r7, #12]
 8015f5e:	2200      	movs	r2, #0
 8015f60:	705a      	strb	r2, [r3, #1]
			itm_debug1(DBG_TURNOUT, "A/RESETA", i);
 8015f62:	697a      	ldr	r2, [r7, #20]
 8015f64:	4928      	ldr	r1, [pc, #160]	; (8016008 <process_turnout_timers+0x17c>)
 8015f66:	f44f 7000 	mov.w	r0, #512	; 0x200
 8015f6a:	f7ff fde3 	bl	8015b34 <itm_debug1>
			debug_info('A', 0, "A0/RESETA", 0, 0,0);
 8015f6e:	2300      	movs	r3, #0
 8015f70:	9301      	str	r3, [sp, #4]
 8015f72:	2300      	movs	r3, #0
 8015f74:	9300      	str	r3, [sp, #0]
 8015f76:	2300      	movs	r3, #0
 8015f78:	4a24      	ldr	r2, [pc, #144]	; (801600c <process_turnout_timers+0x180>)
 8015f7a:	2100      	movs	r1, #0
 8015f7c:	2041      	movs	r0, #65	; 0x41
 8015f7e:	f7ff fe1e 	bl	8015bbe <debug_info>
			break;
 8015f82:	e02b      	b.n	8015fdc <process_turnout_timers+0x150>
		case ST_RESETB:
#ifndef TRAIN_SIMU
			HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinB, GPIO_PIN_RESET);
 8015f84:	693b      	ldr	r3, [r7, #16]
 8015f86:	6818      	ldr	r0, [r3, #0]
 8015f88:	693b      	ldr	r3, [r7, #16]
 8015f8a:	88db      	ldrh	r3, [r3, #6]
 8015f8c:	2200      	movs	r2, #0
 8015f8e:	4619      	mov	r1, r3
 8015f90:	f7ed f970 	bl	8003274 <HAL_GPIO_WritePin>
#endif
			avars->st = ST_IDLE;
 8015f94:	68fb      	ldr	r3, [r7, #12]
 8015f96:	2200      	movs	r2, #0
 8015f98:	705a      	strb	r2, [r3, #1]
			itm_debug1(DBG_TURNOUT, "A/RESETB", i);
 8015f9a:	697a      	ldr	r2, [r7, #20]
 8015f9c:	491c      	ldr	r1, [pc, #112]	; (8016010 <process_turnout_timers+0x184>)
 8015f9e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8015fa2:	f7ff fdc7 	bl	8015b34 <itm_debug1>
			debug_info('A', 0, "A0/RESETB", 0, 0,0);
 8015fa6:	2300      	movs	r3, #0
 8015fa8:	9301      	str	r3, [sp, #4]
 8015faa:	2300      	movs	r3, #0
 8015fac:	9300      	str	r3, [sp, #0]
 8015fae:	2300      	movs	r3, #0
 8015fb0:	4a18      	ldr	r2, [pc, #96]	; (8016014 <process_turnout_timers+0x188>)
 8015fb2:	2100      	movs	r1, #0
 8015fb4:	2041      	movs	r0, #65	; 0x41
 8015fb6:	f7ff fe02 	bl	8015bbe <debug_info>
			break;
 8015fba:	e00f      	b.n	8015fdc <process_turnout_timers+0x150>
			HAL_GPIO_TogglePin(aconf->cmd_port, aconf->pinB);
#endif
			break;
			 */
		default:
			itm_debug1(DBG_TURNOUT|DBG_ERR, "bad state", avars->st);
 8015fbc:	68fb      	ldr	r3, [r7, #12]
 8015fbe:	785b      	ldrb	r3, [r3, #1]
 8015fc0:	461a      	mov	r2, r3
 8015fc2:	4915      	ldr	r1, [pc, #84]	; (8016018 <process_turnout_timers+0x18c>)
 8015fc4:	4815      	ldr	r0, [pc, #84]	; (801601c <process_turnout_timers+0x190>)
 8015fc6:	f7ff fdb5 	bl	8015b34 <itm_debug1>
			turnout_error(ERR_BAD_STATE, "bad state");
 8015fca:	4913      	ldr	r1, [pc, #76]	; (8016018 <process_turnout_timers+0x18c>)
 8015fcc:	f06f 0008 	mvn.w	r0, #8
 8015fd0:	f7ff fde6 	bl	8015ba0 <turnout_error>
			break;
 8015fd4:	e002      	b.n	8015fdc <process_turnout_timers+0x150>
        if (!aconf->cmd_port) continue;
 8015fd6:	bf00      	nop
 8015fd8:	e000      	b.n	8015fdc <process_turnout_timers+0x150>
			break;
 8015fda:	bf00      	nop
	for (int i=0; i<NUM_LOCAL_TURNOUTS; i++) {
 8015fdc:	697b      	ldr	r3, [r7, #20]
 8015fde:	3301      	adds	r3, #1
 8015fe0:	617b      	str	r3, [r7, #20]
 8015fe2:	697b      	ldr	r3, [r7, #20]
 8015fe4:	2b07      	cmp	r3, #7
 8015fe6:	f77f af59 	ble.w	8015e9c <process_turnout_timers+0x10>
		}
	}
}
 8015fea:	bf00      	nop
 8015fec:	3718      	adds	r7, #24
 8015fee:	46bd      	mov	sp, r7
 8015ff0:	bd80      	pop	{r7, pc}
 8015ff2:	bf00      	nop
 8015ff4:	20005390 	.word	0x20005390
 8015ff8:	0801a2cc 	.word	0x0801a2cc
 8015ffc:	0801a2d4 	.word	0x0801a2d4
 8016000:	0801a2dc 	.word	0x0801a2dc
 8016004:	0801a2e4 	.word	0x0801a2e4
 8016008:	0801a2ec 	.word	0x0801a2ec
 801600c:	0801a2f8 	.word	0x0801a2f8
 8016010:	0801a304 	.word	0x0801a304
 8016014:	0801a310 	.word	0x0801a310
 8016018:	0801a31c 	.word	0x0801a31c
 801601c:	80000200 	.word	0x80000200

08016020 <itm_debug1>:
//void _itm_debug1(const char *msg, int v);
//void _itm_debug2(const char *msg, int v1, int v2);
void _itm_debug3(const char *msg, int32_t v1, int32_t v2, int32_t v3, int n);

static inline void itm_debug1(uint32_t f, const char *msg, int32_t v)
{
 8016020:	b580      	push	{r7, lr}
 8016022:	b086      	sub	sp, #24
 8016024:	af02      	add	r7, sp, #8
 8016026:	60f8      	str	r0, [r7, #12]
 8016028:	60b9      	str	r1, [r7, #8]
 801602a:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 801602c:	4b08      	ldr	r3, [pc, #32]	; (8016050 <itm_debug1+0x30>)
 801602e:	681a      	ldr	r2, [r3, #0]
 8016030:	68fb      	ldr	r3, [r7, #12]
 8016032:	4013      	ands	r3, r2
 8016034:	2b00      	cmp	r3, #0
 8016036:	d007      	beq.n	8016048 <itm_debug1+0x28>
 8016038:	2301      	movs	r3, #1
 801603a:	9300      	str	r3, [sp, #0]
 801603c:	2300      	movs	r3, #0
 801603e:	2200      	movs	r2, #0
 8016040:	6879      	ldr	r1, [r7, #4]
 8016042:	68b8      	ldr	r0, [r7, #8]
 8016044:	f003 fa7e 	bl	8019544 <_itm_debug3>
}
 8016048:	bf00      	nop
 801604a:	3710      	adds	r7, #16
 801604c:	46bd      	mov	sp, r7
 801604e:	bd80      	pop	{r7, pc}
 8016050:	20000610 	.word	0x20000610

08016054 <trainctl_error>:




int trainctl_error(_UNUSED_ char l, int code, _UNUSED_ const char *msg)
{
 8016054:	b580      	push	{r7, lr}
 8016056:	b088      	sub	sp, #32
 8016058:	af02      	add	r7, sp, #8
 801605a:	4603      	mov	r3, r0
 801605c:	60b9      	str	r1, [r7, #8]
 801605e:	607a      	str	r2, [r7, #4]
 8016060:	73fb      	strb	r3, [r7, #15]
	int16_t c = code;
 8016062:	68bb      	ldr	r3, [r7, #8]
 8016064:	b21b      	sxth	r3, r3
 8016066:	82fb      	strh	r3, [r7, #22]
	// add debug msg or notification here
	if (c >=0) c=-1;
 8016068:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801606c:	2b00      	cmp	r3, #0
 801606e:	db02      	blt.n	8016076 <trainctl_error+0x22>
 8016070:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016074:	82fb      	strh	r3, [r7, #22]
	trainctl_notif('G', 0, 'E', (void *)&c, sizeof(c));
 8016076:	f107 0216 	add.w	r2, r7, #22
 801607a:	2302      	movs	r3, #2
 801607c:	9300      	str	r3, [sp, #0]
 801607e:	4613      	mov	r3, r2
 8016080:	2245      	movs	r2, #69	; 0x45
 8016082:	2100      	movs	r1, #0
 8016084:	2047      	movs	r0, #71	; 0x47
 8016086:	f000 ff77 	bl	8016f78 <trainctl_notif>
	return code;
 801608a:	68bb      	ldr	r3, [r7, #8]
}
 801608c:	4618      	mov	r0, r3
 801608e:	3718      	adds	r7, #24
 8016090:	46bd      	mov	sp, r7
 8016092:	bd80      	pop	{r7, pc}

08016094 <long_isr>:
}



void long_isr(uint32_t dur)
{
 8016094:	b580      	push	{r7, lr}
 8016096:	b082      	sub	sp, #8
 8016098:	af00      	add	r7, sp, #0
 801609a:	6078      	str	r0, [r7, #4]
	itm_debug1(DBG_ERR, "long isr", dur);
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	461a      	mov	r2, r3
 80160a0:	4904      	ldr	r1, [pc, #16]	; (80160b4 <long_isr+0x20>)
 80160a2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80160a6:	f7ff ffbb 	bl	8016020 <itm_debug1>
	//for (int i=0; i<100; i++) {
	//	itm_debug1(DBG_ERR, "micro", GetCurrentMicro());
	//}
}
 80160aa:	bf00      	nop
 80160ac:	3708      	adds	r7, #8
 80160ae:	46bd      	mov	sp, r7
 80160b0:	bd80      	pop	{r7, pc}
 80160b2:	bf00      	nop
 80160b4:	0801a328 	.word	0x0801a328

080160b8 <GetCycleCount64>:
 */
volatile uint64_t last_cycle_count_64 = 0;

// Call at least every 2^32 cycles (every 59.6 seconds @ 72 MHz).
uint64_t GetCycleCount64(void)
{
 80160b8:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 80160bc:	b085      	sub	sp, #20
 80160be:	af00      	add	r7, sp, #0
#ifdef TRAIN_SIMU
    return 0;
#else
  uint32_t primask;
  asm volatile ("mrs %0, PRIMASK" : "=r"(primask));
 80160c0:	f3ef 8310 	mrs	r3, PRIMASK
 80160c4:	60fb      	str	r3, [r7, #12]
  asm volatile ("cpsid i");  // Disable interrupts.
 80160c6:	b672      	cpsid	i
  int64_t r = last_cycle_count_64;
 80160c8:	4b12      	ldr	r3, [pc, #72]	; (8016114 <GetCycleCount64+0x5c>)
 80160ca:	e9d3 3400 	ldrd	r3, r4, [r3]
 80160ce:	e9c7 3400 	strd	r3, r4, [r7]
  r += DWT->CYCCNT - (uint32_t)(r);
 80160d2:	4b11      	ldr	r3, [pc, #68]	; (8016118 <GetCycleCount64+0x60>)
 80160d4:	685a      	ldr	r2, [r3, #4]
 80160d6:	683b      	ldr	r3, [r7, #0]
 80160d8:	1ad3      	subs	r3, r2, r3
 80160da:	469b      	mov	fp, r3
 80160dc:	f04f 0c00 	mov.w	ip, #0
 80160e0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80160e4:	eb1b 0301 	adds.w	r3, fp, r1
 80160e8:	eb4c 0402 	adc.w	r4, ip, r2
 80160ec:	e9c7 3400 	strd	r3, r4, [r7]
  last_cycle_count_64 = r;
 80160f0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80160f4:	4a07      	ldr	r2, [pc, #28]	; (8016114 <GetCycleCount64+0x5c>)
 80160f6:	e9c2 3400 	strd	r3, r4, [r2]
  asm volatile ("msr PRIMASK, %0" : : "r"(primask));  // Restore interrupts.
 80160fa:	68fb      	ldr	r3, [r7, #12]
 80160fc:	f383 8810 	msr	PRIMASK, r3
  return r;
 8016100:	e9d7 3400 	ldrd	r3, r4, [r7]
#endif
}
 8016104:	4618      	mov	r0, r3
 8016106:	4621      	mov	r1, r4
 8016108:	3714      	adds	r7, #20
 801610a:	46bd      	mov	sp, r7
 801610c:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8016110:	4770      	bx	lr
 8016112:	bf00      	nop
 8016114:	200053a8 	.word	0x200053a8
 8016118:	e0001000 	.word	0xe0001000

0801611c <startCycleCounter>:

void startCycleCounter(void)
{
 801611c:	b480      	push	{r7}
 801611e:	af00      	add	r7, sp, #0
#ifndef TRAIN_SIMU
	DWT->CYCCNT |= DWT_CTRL_CYCCNTENA_Msk;  // Set bit 0.
 8016120:	4b05      	ldr	r3, [pc, #20]	; (8016138 <startCycleCounter+0x1c>)
 8016122:	685b      	ldr	r3, [r3, #4]
 8016124:	4a04      	ldr	r2, [pc, #16]	; (8016138 <startCycleCounter+0x1c>)
 8016126:	f043 0301 	orr.w	r3, r3, #1
 801612a:	6053      	str	r3, [r2, #4]
#endif
}
 801612c:	bf00      	nop
 801612e:	46bd      	mov	sp, r7
 8016130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016134:	4770      	bx	lr
 8016136:	bf00      	nop
 8016138:	e0001000 	.word	0xe0001000

0801613c <get_param_def>:
#include <stddef.h>
#include <string.h>
#include "param.h"

static param_t *get_param_def(const param_t *rgpar, const char *n)
{
 801613c:	b580      	push	{r7, lr}
 801613e:	b084      	sub	sp, #16
 8016140:	af00      	add	r7, sp, #0
 8016142:	6078      	str	r0, [r7, #4]
 8016144:	6039      	str	r1, [r7, #0]
	for (param_t *p = (param_t*) rgpar; p->name; p++) {
 8016146:	687b      	ldr	r3, [r7, #4]
 8016148:	60fb      	str	r3, [r7, #12]
 801614a:	e00d      	b.n	8016168 <get_param_def+0x2c>
		if (!strcmp(p->name, n)) return p;
 801614c:	68fb      	ldr	r3, [r7, #12]
 801614e:	681b      	ldr	r3, [r3, #0]
 8016150:	6839      	ldr	r1, [r7, #0]
 8016152:	4618      	mov	r0, r3
 8016154:	f7ea f83c 	bl	80001d0 <strcmp>
 8016158:	4603      	mov	r3, r0
 801615a:	2b00      	cmp	r3, #0
 801615c:	d101      	bne.n	8016162 <get_param_def+0x26>
 801615e:	68fb      	ldr	r3, [r7, #12]
 8016160:	e007      	b.n	8016172 <get_param_def+0x36>
	for (param_t *p = (param_t*) rgpar; p->name; p++) {
 8016162:	68fb      	ldr	r3, [r7, #12]
 8016164:	3324      	adds	r3, #36	; 0x24
 8016166:	60fb      	str	r3, [r7, #12]
 8016168:	68fb      	ldr	r3, [r7, #12]
 801616a:	681b      	ldr	r3, [r3, #0]
 801616c:	2b00      	cmp	r3, #0
 801616e:	d1ed      	bne.n	801614c <get_param_def+0x10>
	}
	return NULL;
 8016170:	2300      	movs	r3, #0
}
 8016172:	4618      	mov	r0, r3
 8016174:	3710      	adds	r7, #16
 8016176:	46bd      	mov	sp, r7
 8016178:	bd80      	pop	{r7, pc}

0801617a <param_get_value>:

int param_get_value(const param_t *params, void *ptr, const char *name, int32_t *pvalue, int32_t *pdef, int32_t *pmin, int32_t *pmax)
{
 801617a:	b580      	push	{r7, lr}
 801617c:	b088      	sub	sp, #32
 801617e:	af00      	add	r7, sp, #0
 8016180:	60f8      	str	r0, [r7, #12]
 8016182:	60b9      	str	r1, [r7, #8]
 8016184:	607a      	str	r2, [r7, #4]
 8016186:	603b      	str	r3, [r7, #0]
	param_t *prm = get_param_def(params, name);
 8016188:	6879      	ldr	r1, [r7, #4]
 801618a:	68f8      	ldr	r0, [r7, #12]
 801618c:	f7ff ffd6 	bl	801613c <get_param_def>
 8016190:	6178      	str	r0, [r7, #20]
	if (!prm) {
 8016192:	697b      	ldr	r3, [r7, #20]
 8016194:	2b00      	cmp	r3, #0
 8016196:	d101      	bne.n	801619c <param_get_value+0x22>
		return 10;
 8016198:	230a      	movs	r3, #10
 801619a:	e05c      	b.n	8016256 <param_get_value+0xdc>
	}
	if (pmin) *pmin = prm->min;
 801619c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801619e:	2b00      	cmp	r3, #0
 80161a0:	d003      	beq.n	80161aa <param_get_value+0x30>
 80161a2:	697b      	ldr	r3, [r7, #20]
 80161a4:	699a      	ldr	r2, [r3, #24]
 80161a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161a8:	601a      	str	r2, [r3, #0]
	if (pmax) *pmax = prm->max;
 80161aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161ac:	2b00      	cmp	r3, #0
 80161ae:	d003      	beq.n	80161b8 <param_get_value+0x3e>
 80161b0:	697b      	ldr	r3, [r7, #20]
 80161b2:	69da      	ldr	r2, [r3, #28]
 80161b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161b6:	601a      	str	r2, [r3, #0]
	if (pdef) *pdef = prm->def;
 80161b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	d003      	beq.n	80161c6 <param_get_value+0x4c>
 80161be:	697b      	ldr	r3, [r7, #20]
 80161c0:	6a1a      	ldr	r2, [r3, #32]
 80161c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161c4:	601a      	str	r2, [r3, #0]
	if (pvalue) {
 80161c6:	683b      	ldr	r3, [r7, #0]
 80161c8:	2b00      	cmp	r3, #0
 80161ca:	d043      	beq.n	8016254 <param_get_value+0xda>
		if (prm->getter) {
 80161cc:	697b      	ldr	r3, [r7, #20]
 80161ce:	68db      	ldr	r3, [r3, #12]
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	d007      	beq.n	80161e4 <param_get_value+0x6a>
			*pvalue = prm->getter(prm);
 80161d4:	697b      	ldr	r3, [r7, #20]
 80161d6:	68db      	ldr	r3, [r3, #12]
 80161d8:	6978      	ldr	r0, [r7, #20]
 80161da:	4798      	blx	r3
 80161dc:	4602      	mov	r2, r0
 80161de:	683b      	ldr	r3, [r7, #0]
 80161e0:	601a      	str	r2, [r3, #0]
 80161e2:	e037      	b.n	8016254 <param_get_value+0xda>
		} else {
			uint8_t *p = ptr;
 80161e4:	68bb      	ldr	r3, [r7, #8]
 80161e6:	61fb      	str	r3, [r7, #28]
			if (prm->ptr) p = prm->ptr;
 80161e8:	697b      	ldr	r3, [r7, #20]
 80161ea:	685b      	ldr	r3, [r3, #4]
 80161ec:	2b00      	cmp	r3, #0
 80161ee:	d002      	beq.n	80161f6 <param_get_value+0x7c>
 80161f0:	697b      	ldr	r3, [r7, #20]
 80161f2:	685b      	ldr	r3, [r3, #4]
 80161f4:	61fb      	str	r3, [r7, #28]
			p += prm->offset;
 80161f6:	697b      	ldr	r3, [r7, #20]
 80161f8:	689b      	ldr	r3, [r3, #8]
 80161fa:	461a      	mov	r2, r3
 80161fc:	69fb      	ldr	r3, [r7, #28]
 80161fe:	4413      	add	r3, r2
 8016200:	61fb      	str	r3, [r7, #28]
			if (!p) return 11;
 8016202:	69fb      	ldr	r3, [r7, #28]
 8016204:	2b00      	cmp	r3, #0
 8016206:	d101      	bne.n	801620c <param_get_value+0x92>
 8016208:	230b      	movs	r3, #11
 801620a:	e024      	b.n	8016256 <param_get_value+0xdc>
			if ((int)p<0x100) return 12; // probably an error if low ptr
 801620c:	69fb      	ldr	r3, [r7, #28]
 801620e:	2bff      	cmp	r3, #255	; 0xff
 8016210:	dc01      	bgt.n	8016216 <param_get_value+0x9c>
 8016212:	230c      	movs	r3, #12
 8016214:	e01f      	b.n	8016256 <param_get_value+0xdc>

			int8_t v8; int16_t v16; int32_t v32;
			switch (prm->size) {
 8016216:	697b      	ldr	r3, [r7, #20]
 8016218:	695b      	ldr	r3, [r3, #20]
 801621a:	2b02      	cmp	r3, #2
 801621c:	d00a      	beq.n	8016234 <param_get_value+0xba>
 801621e:	2b04      	cmp	r3, #4
 8016220:	d00f      	beq.n	8016242 <param_get_value+0xc8>
 8016222:	2b01      	cmp	r3, #1
 8016224:	d111      	bne.n	801624a <param_get_value+0xd0>
			case 1:
				v8 = *((int8_t *)p);
 8016226:	69fb      	ldr	r3, [r7, #28]
 8016228:	781b      	ldrb	r3, [r3, #0]
 801622a:	747b      	strb	r3, [r7, #17]
				v32 = (int32_t)v8;
 801622c:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8016230:	61bb      	str	r3, [r7, #24]
				break;
 8016232:	e00c      	b.n	801624e <param_get_value+0xd4>
			case 2:
				v16 = *((int16_t *)p);
 8016234:	69fb      	ldr	r3, [r7, #28]
 8016236:	881b      	ldrh	r3, [r3, #0]
 8016238:	827b      	strh	r3, [r7, #18]
				v32 = (int32_t)v16;
 801623a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801623e:	61bb      	str	r3, [r7, #24]
				break;
 8016240:	e005      	b.n	801624e <param_get_value+0xd4>
			case 4:
				v32 = *((int32_t *)p);
 8016242:	69fb      	ldr	r3, [r7, #28]
 8016244:	681b      	ldr	r3, [r3, #0]
 8016246:	61bb      	str	r3, [r7, #24]
				break;
 8016248:	e001      	b.n	801624e <param_get_value+0xd4>
			default:
				return 12;
 801624a:	230c      	movs	r3, #12
 801624c:	e003      	b.n	8016256 <param_get_value+0xdc>
			}
			*pvalue = v32;
 801624e:	683b      	ldr	r3, [r7, #0]
 8016250:	69ba      	ldr	r2, [r7, #24]
 8016252:	601a      	str	r2, [r3, #0]
		}
	}
	return 0;
 8016254:	2300      	movs	r3, #0
}
 8016256:	4618      	mov	r0, r3
 8016258:	3720      	adds	r7, #32
 801625a:	46bd      	mov	sp, r7
 801625c:	bd80      	pop	{r7, pc}

0801625e <param_set_value>:
int param_set_value(const param_t *params, void *ptr, const char *name, int32_t value)
{
 801625e:	b580      	push	{r7, lr}
 8016260:	b088      	sub	sp, #32
 8016262:	af00      	add	r7, sp, #0
 8016264:	60f8      	str	r0, [r7, #12]
 8016266:	60b9      	str	r1, [r7, #8]
 8016268:	607a      	str	r2, [r7, #4]
 801626a:	603b      	str	r3, [r7, #0]
	param_t *prm = get_param_def(params, name);
 801626c:	6879      	ldr	r1, [r7, #4]
 801626e:	68f8      	ldr	r0, [r7, #12]
 8016270:	f7ff ff64 	bl	801613c <get_param_def>
 8016274:	61b8      	str	r0, [r7, #24]
	if (!prm) {
 8016276:	69bb      	ldr	r3, [r7, #24]
 8016278:	2b00      	cmp	r3, #0
 801627a:	d101      	bne.n	8016280 <param_set_value+0x22>
		return 10;
 801627c:	230a      	movs	r3, #10
 801627e:	e03f      	b.n	8016300 <param_set_value+0xa2>
	}
	if (prm->setter) {
 8016280:	69bb      	ldr	r3, [r7, #24]
 8016282:	691b      	ldr	r3, [r3, #16]
 8016284:	2b00      	cmp	r3, #0
 8016286:	d005      	beq.n	8016294 <param_set_value+0x36>
		//if ((1)) return 42;
		prm->setter(prm, value);
 8016288:	69bb      	ldr	r3, [r7, #24]
 801628a:	691b      	ldr	r3, [r3, #16]
 801628c:	6839      	ldr	r1, [r7, #0]
 801628e:	69b8      	ldr	r0, [r7, #24]
 8016290:	4798      	blx	r3
 8016292:	e034      	b.n	80162fe <param_set_value+0xa0>
	} else {
		uint8_t *p = ptr;
 8016294:	68bb      	ldr	r3, [r7, #8]
 8016296:	61fb      	str	r3, [r7, #28]
		if (prm->ptr) p = prm->ptr;
 8016298:	69bb      	ldr	r3, [r7, #24]
 801629a:	685b      	ldr	r3, [r3, #4]
 801629c:	2b00      	cmp	r3, #0
 801629e:	d002      	beq.n	80162a6 <param_set_value+0x48>
 80162a0:	69bb      	ldr	r3, [r7, #24]
 80162a2:	685b      	ldr	r3, [r3, #4]
 80162a4:	61fb      	str	r3, [r7, #28]
		p += prm->offset;
 80162a6:	69bb      	ldr	r3, [r7, #24]
 80162a8:	689b      	ldr	r3, [r3, #8]
 80162aa:	461a      	mov	r2, r3
 80162ac:	69fb      	ldr	r3, [r7, #28]
 80162ae:	4413      	add	r3, r2
 80162b0:	61fb      	str	r3, [r7, #28]
		if (!p) return 11;
 80162b2:	69fb      	ldr	r3, [r7, #28]
 80162b4:	2b00      	cmp	r3, #0
 80162b6:	d101      	bne.n	80162bc <param_set_value+0x5e>
 80162b8:	230b      	movs	r3, #11
 80162ba:	e021      	b.n	8016300 <param_set_value+0xa2>
		if ((int)p<0x100) return 12; // probably an error if low ptr
 80162bc:	69fb      	ldr	r3, [r7, #28]
 80162be:	2bff      	cmp	r3, #255	; 0xff
 80162c0:	dc01      	bgt.n	80162c6 <param_set_value+0x68>
 80162c2:	230c      	movs	r3, #12
 80162c4:	e01c      	b.n	8016300 <param_set_value+0xa2>

		int8_t v8; int16_t v16; int32_t v32;
		v32 = value;
 80162c6:	683b      	ldr	r3, [r7, #0]
 80162c8:	617b      	str	r3, [r7, #20]
		switch (prm->size) {
 80162ca:	69bb      	ldr	r3, [r7, #24]
 80162cc:	695b      	ldr	r3, [r3, #20]
 80162ce:	2b02      	cmp	r3, #2
 80162d0:	d009      	beq.n	80162e6 <param_set_value+0x88>
 80162d2:	2b04      	cmp	r3, #4
 80162d4:	d00d      	beq.n	80162f2 <param_set_value+0x94>
 80162d6:	2b01      	cmp	r3, #1
 80162d8:	d10f      	bne.n	80162fa <param_set_value+0x9c>
		case 1:
			v8 = (int8_t) v32;
 80162da:	697b      	ldr	r3, [r7, #20]
 80162dc:	747b      	strb	r3, [r7, #17]
			*((int8_t *)p) = v8;
 80162de:	69fb      	ldr	r3, [r7, #28]
 80162e0:	7c7a      	ldrb	r2, [r7, #17]
 80162e2:	701a      	strb	r2, [r3, #0]
			break;
 80162e4:	e00b      	b.n	80162fe <param_set_value+0xa0>
		case 2:
			v16 = (int16_t) v32;
 80162e6:	697b      	ldr	r3, [r7, #20]
 80162e8:	827b      	strh	r3, [r7, #18]
			*((int16_t *)p) = v16;
 80162ea:	69fb      	ldr	r3, [r7, #28]
 80162ec:	8a7a      	ldrh	r2, [r7, #18]
 80162ee:	801a      	strh	r2, [r3, #0]
			break;
 80162f0:	e005      	b.n	80162fe <param_set_value+0xa0>
		case 4:
			*((int32_t *)p) = v32;
 80162f2:	69fb      	ldr	r3, [r7, #28]
 80162f4:	697a      	ldr	r2, [r7, #20]
 80162f6:	601a      	str	r2, [r3, #0]
			break;
 80162f8:	e001      	b.n	80162fe <param_set_value+0xa0>
		default:
			return 12;
 80162fa:	230c      	movs	r3, #12
 80162fc:	e000      	b.n	8016300 <param_set_value+0xa2>
		}
	}
	return 0;
 80162fe:	2300      	movs	r3, #0
}
 8016300:	4618      	mov	r0, r3
 8016302:	3720      	adds	r7, #32
 8016304:	46bd      	mov	sp, r7
 8016306:	bd80      	pop	{r7, pc}

08016308 <itm_debug1>:
{
 8016308:	b580      	push	{r7, lr}
 801630a:	b086      	sub	sp, #24
 801630c:	af02      	add	r7, sp, #8
 801630e:	60f8      	str	r0, [r7, #12]
 8016310:	60b9      	str	r1, [r7, #8]
 8016312:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 8016314:	4b08      	ldr	r3, [pc, #32]	; (8016338 <itm_debug1+0x30>)
 8016316:	681a      	ldr	r2, [r3, #0]
 8016318:	68fb      	ldr	r3, [r7, #12]
 801631a:	4013      	ands	r3, r2
 801631c:	2b00      	cmp	r3, #0
 801631e:	d007      	beq.n	8016330 <itm_debug1+0x28>
 8016320:	2301      	movs	r3, #1
 8016322:	9300      	str	r3, [sp, #0]
 8016324:	2300      	movs	r3, #0
 8016326:	2200      	movs	r2, #0
 8016328:	6879      	ldr	r1, [r7, #4]
 801632a:	68b8      	ldr	r0, [r7, #8]
 801632c:	f003 f90a 	bl	8019544 <_itm_debug3>
}
 8016330:	bf00      	nop
 8016332:	3710      	adds	r7, #16
 8016334:	46bd      	mov	sp, r7
 8016336:	bd80      	pop	{r7, pc}
 8016338:	20000610 	.word	0x20000610

0801633c <config_error>:
{
	return trainctl_error('A', code, msg);
}

static inline void *config_error(int code, const char *msg)
{
 801633c:	b580      	push	{r7, lr}
 801633e:	b082      	sub	sp, #8
 8016340:	af00      	add	r7, sp, #0
 8016342:	6078      	str	r0, [r7, #4]
 8016344:	6039      	str	r1, [r7, #0]
	itm_debug1(DBG_CONFIG, msg, code);
 8016346:	687a      	ldr	r2, [r7, #4]
 8016348:	6839      	ldr	r1, [r7, #0]
 801634a:	2080      	movs	r0, #128	; 0x80
 801634c:	f7ff ffdc 	bl	8016308 <itm_debug1>
	trainctl_error('G', code, msg);
 8016350:	683a      	ldr	r2, [r7, #0]
 8016352:	6879      	ldr	r1, [r7, #4]
 8016354:	2047      	movs	r0, #71	; 0x47
 8016356:	f7ff fe7d 	bl	8016054 <trainctl_error>
	return NULL;
 801635a:	2300      	movs	r3, #0
}
 801635c:	4618      	mov	r0, r3
 801635e:	3708      	adds	r7, #8
 8016360:	46bd      	mov	sp, r7
 8016362:	bd80      	pop	{r7, pc}

08016364 <get_canton_cnf>:


static int setup_done = 1;

const canton_config_t *get_canton_cnf(int idx)
{
 8016364:	b580      	push	{r7, lr}
 8016366:	b082      	sub	sp, #8
 8016368:	af00      	add	r7, sp, #0
 801636a:	6078      	str	r0, [r7, #4]
	if (!setup_done) return config_error(ERR_SETUP_KO, "railconfig_setup_default not called");
 801636c:	4b0e      	ldr	r3, [pc, #56]	; (80163a8 <get_canton_cnf+0x44>)
 801636e:	681b      	ldr	r3, [r3, #0]
 8016370:	2b00      	cmp	r3, #0
 8016372:	d106      	bne.n	8016382 <get_canton_cnf+0x1e>
 8016374:	490d      	ldr	r1, [pc, #52]	; (80163ac <get_canton_cnf+0x48>)
 8016376:	f06f 0009 	mvn.w	r0, #9
 801637a:	f7ff ffdf 	bl	801633c <config_error>
 801637e:	4603      	mov	r3, r0
 8016380:	e00e      	b.n	80163a0 <get_canton_cnf+0x3c>
	if ((idx<0) || (idx>= NUM_CANTONS)) return NULL;
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	2b00      	cmp	r3, #0
 8016386:	db02      	blt.n	801638e <get_canton_cnf+0x2a>
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	2b07      	cmp	r3, #7
 801638c:	dd01      	ble.n	8016392 <get_canton_cnf+0x2e>
 801638e:	2300      	movs	r3, #0
 8016390:	e006      	b.n	80163a0 <get_canton_cnf+0x3c>
	return &Cantons[idx];
 8016392:	687a      	ldr	r2, [r7, #4]
 8016394:	4613      	mov	r3, r2
 8016396:	005b      	lsls	r3, r3, #1
 8016398:	4413      	add	r3, r2
 801639a:	011b      	lsls	r3, r3, #4
 801639c:	4a04      	ldr	r2, [pc, #16]	; (80163b0 <get_canton_cnf+0x4c>)
 801639e:	4413      	add	r3, r2
}
 80163a0:	4618      	mov	r0, r3
 80163a2:	3708      	adds	r7, #8
 80163a4:	46bd      	mov	sp, r7
 80163a6:	bd80      	pop	{r7, pc}
 80163a8:	200004c8 	.word	0x200004c8
 80163ac:	0801a334 	.word	0x0801a334
 80163b0:	20000248 	.word	0x20000248

080163b4 <get_train_cnf>:


const train_config_t *get_train_cnf(int idx)
{
 80163b4:	b580      	push	{r7, lr}
 80163b6:	b082      	sub	sp, #8
 80163b8:	af00      	add	r7, sp, #0
 80163ba:	6078      	str	r0, [r7, #4]
	if (!setup_done) return config_error(ERR_SETUP_KO, "railconfig_setup_default not called");
 80163bc:	4b0d      	ldr	r3, [pc, #52]	; (80163f4 <get_train_cnf+0x40>)
 80163be:	681b      	ldr	r3, [r3, #0]
 80163c0:	2b00      	cmp	r3, #0
 80163c2:	d106      	bne.n	80163d2 <get_train_cnf+0x1e>
 80163c4:	490c      	ldr	r1, [pc, #48]	; (80163f8 <get_train_cnf+0x44>)
 80163c6:	f06f 0009 	mvn.w	r0, #9
 80163ca:	f7ff ffb7 	bl	801633c <config_error>
 80163ce:	4603      	mov	r3, r0
 80163d0:	e00b      	b.n	80163ea <get_train_cnf+0x36>
	if ((idx<0) || (idx>= NUM_TRAINS)) return NULL;
 80163d2:	687b      	ldr	r3, [r7, #4]
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	db02      	blt.n	80163de <get_train_cnf+0x2a>
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	2b07      	cmp	r3, #7
 80163dc:	dd01      	ble.n	80163e2 <get_train_cnf+0x2e>
 80163de:	2300      	movs	r3, #0
 80163e0:	e003      	b.n	80163ea <get_train_cnf+0x36>
	return &Trains[idx];
 80163e2:	687b      	ldr	r3, [r7, #4]
 80163e4:	015b      	lsls	r3, r3, #5
 80163e6:	4a05      	ldr	r2, [pc, #20]	; (80163fc <get_train_cnf+0x48>)
 80163e8:	4413      	add	r3, r2
}
 80163ea:	4618      	mov	r0, r3
 80163ec:	3708      	adds	r7, #8
 80163ee:	46bd      	mov	sp, r7
 80163f0:	bd80      	pop	{r7, pc}
 80163f2:	bf00      	nop
 80163f4:	200004c8 	.word	0x200004c8
 80163f8:	0801a334 	.word	0x0801a334
 80163fc:	200003c8 	.word	0x200003c8

08016400 <get_turnout_cnf>:


const turnout_config_t  *get_turnout_cnf(int idx)
{
 8016400:	b580      	push	{r7, lr}
 8016402:	b082      	sub	sp, #8
 8016404:	af00      	add	r7, sp, #0
 8016406:	6078      	str	r0, [r7, #4]
	if (!setup_done) return config_error(ERR_SETUP_KO, "railconfig_setup_default not called");
 8016408:	4b0d      	ldr	r3, [pc, #52]	; (8016440 <get_turnout_cnf+0x40>)
 801640a:	681b      	ldr	r3, [r3, #0]
 801640c:	2b00      	cmp	r3, #0
 801640e:	d106      	bne.n	801641e <get_turnout_cnf+0x1e>
 8016410:	490c      	ldr	r1, [pc, #48]	; (8016444 <get_turnout_cnf+0x44>)
 8016412:	f06f 0009 	mvn.w	r0, #9
 8016416:	f7ff ff91 	bl	801633c <config_error>
 801641a:	4603      	mov	r3, r0
 801641c:	e00b      	b.n	8016436 <get_turnout_cnf+0x36>
	if ((idx<0) || (idx>= NUM_TURNOUTS)) return NULL;
 801641e:	687b      	ldr	r3, [r7, #4]
 8016420:	2b00      	cmp	r3, #0
 8016422:	db02      	blt.n	801642a <get_turnout_cnf+0x2a>
 8016424:	687b      	ldr	r3, [r7, #4]
 8016426:	2b07      	cmp	r3, #7
 8016428:	dd01      	ble.n	801642e <get_turnout_cnf+0x2e>
 801642a:	2300      	movs	r3, #0
 801642c:	e003      	b.n	8016436 <get_turnout_cnf+0x36>
	return &Turnouts[idx];
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	00db      	lsls	r3, r3, #3
 8016432:	4a05      	ldr	r2, [pc, #20]	; (8016448 <get_turnout_cnf+0x48>)
 8016434:	4413      	add	r3, r2
}
 8016436:	4618      	mov	r0, r3
 8016438:	3708      	adds	r7, #8
 801643a:	46bd      	mov	sp, r7
 801643c:	bd80      	pop	{r7, pc}
 801643e:	bf00      	nop
 8016440:	200004c8 	.word	0x200004c8
 8016444:	0801a334 	.word	0x0801a334
 8016448:	0801c2b4 	.word	0x0801c2b4

0801644c <build_meta>:
    {NULL, 0, 0, 0}
};

static volatile int meta_ok = 0;
static void build_meta(void)
{
 801644c:	b480      	push	{r7}
 801644e:	b085      	sub	sp, #20
 8016450:	af00      	add	r7, sp, #0
    int ok = __sync_fetch_and_or(&meta_ok, 1);
 8016452:	4b1d      	ldr	r3, [pc, #116]	; (80164c8 <build_meta+0x7c>)
 8016454:	f3bf 8f5b 	dmb	ish
 8016458:	e853 2f00 	ldrex	r2, [r3]
 801645c:	f042 0101 	orr.w	r1, r2, #1
 8016460:	e843 1000 	strex	r0, r1, [r3]
 8016464:	2800      	cmp	r0, #0
 8016466:	d1f7      	bne.n	8016458 <build_meta+0xc>
 8016468:	f3bf 8f5b 	dmb	ish
 801646c:	603a      	str	r2, [r7, #0]
    if (ok) return;
 801646e:	683b      	ldr	r3, [r7, #0]
 8016470:	2b00      	cmp	r3, #0
 8016472:	d122      	bne.n	80164ba <build_meta+0x6e>
    
    meta_stat_t *m;
    for (m = &meta[0]; m->statval; m++) {
 8016474:	4b15      	ldr	r3, [pc, #84]	; (80164cc <build_meta+0x80>)
 8016476:	60fb      	str	r3, [r7, #12]
 8016478:	e01a      	b.n	80164b0 <build_meta+0x64>
        const stat_val_t *v;
        int n=0;
 801647a:	2300      	movs	r3, #0
 801647c:	607b      	str	r3, [r7, #4]
        for (v = &(m->statval[0]) ; v->ptr; v++) {
 801647e:	68fb      	ldr	r3, [r7, #12]
 8016480:	681b      	ldr	r3, [r3, #0]
 8016482:	60bb      	str	r3, [r7, #8]
 8016484:	e005      	b.n	8016492 <build_meta+0x46>
            n++;
 8016486:	687b      	ldr	r3, [r7, #4]
 8016488:	3301      	adds	r3, #1
 801648a:	607b      	str	r3, [r7, #4]
        for (v = &(m->statval[0]) ; v->ptr; v++) {
 801648c:	68bb      	ldr	r3, [r7, #8]
 801648e:	330c      	adds	r3, #12
 8016490:	60bb      	str	r3, [r7, #8]
 8016492:	68bb      	ldr	r3, [r7, #8]
 8016494:	681b      	ldr	r3, [r3, #0]
 8016496:	2b00      	cmp	r3, #0
 8016498:	d1f5      	bne.n	8016486 <build_meta+0x3a>
        }
        m->numelem = n;
 801649a:	68fb      	ldr	r3, [r7, #12]
 801649c:	687a      	ldr	r2, [r7, #4]
 801649e:	605a      	str	r2, [r3, #4]
        m->structsize = v->off;
 80164a0:	68bb      	ldr	r3, [r7, #8]
 80164a2:	685b      	ldr	r3, [r3, #4]
 80164a4:	461a      	mov	r2, r3
 80164a6:	68fb      	ldr	r3, [r7, #12]
 80164a8:	609a      	str	r2, [r3, #8]
    for (m = &meta[0]; m->statval; m++) {
 80164aa:	68fb      	ldr	r3, [r7, #12]
 80164ac:	3310      	adds	r3, #16
 80164ae:	60fb      	str	r3, [r7, #12]
 80164b0:	68fb      	ldr	r3, [r7, #12]
 80164b2:	681b      	ldr	r3, [r3, #0]
 80164b4:	2b00      	cmp	r3, #0
 80164b6:	d1e0      	bne.n	801647a <build_meta+0x2e>
 80164b8:	e000      	b.n	80164bc <build_meta+0x70>
    if (ok) return;
 80164ba:	bf00      	nop
    }
}
 80164bc:	3714      	adds	r7, #20
 80164be:	46bd      	mov	sp, r7
 80164c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164c4:	4770      	bx	lr
 80164c6:	bf00      	nop
 80164c8:	200053b0 	.word	0x200053b0
 80164cc:	200004cc 	.word	0x200004cc

080164d0 <_getval>:


_UNUSED_ static int32_t _getval(void *ptr, off_t offset, int l)
{
 80164d0:	b480      	push	{r7}
 80164d2:	b089      	sub	sp, #36	; 0x24
 80164d4:	af00      	add	r7, sp, #0
 80164d6:	60f8      	str	r0, [r7, #12]
 80164d8:	60b9      	str	r1, [r7, #8]
 80164da:	607a      	str	r2, [r7, #4]
	uint8_t *p8 = (uint8_t*)ptr;
 80164dc:	68fb      	ldr	r3, [r7, #12]
 80164de:	61fb      	str	r3, [r7, #28]
	int32_t v32=0;
 80164e0:	2300      	movs	r3, #0
 80164e2:	617b      	str	r3, [r7, #20]
    int16_t v16; int8_t v8;
	switch(l) {
 80164e4:	687b      	ldr	r3, [r7, #4]
 80164e6:	2b02      	cmp	r3, #2
 80164e8:	d00f      	beq.n	801650a <_getval+0x3a>
 80164ea:	2b04      	cmp	r3, #4
 80164ec:	d017      	beq.n	801651e <_getval+0x4e>
 80164ee:	2b01      	cmp	r3, #1
 80164f0:	d002      	beq.n	80164f8 <_getval+0x28>
	default:
		v32=0;
 80164f2:	2300      	movs	r3, #0
 80164f4:	617b      	str	r3, [r7, #20]
		break;
 80164f6:	e018      	b.n	801652a <_getval+0x5a>
	case 1:
		v8 = p8[offset];
 80164f8:	68bb      	ldr	r3, [r7, #8]
 80164fa:	69fa      	ldr	r2, [r7, #28]
 80164fc:	4413      	add	r3, r2
 80164fe:	781b      	ldrb	r3, [r3, #0]
 8016500:	76fb      	strb	r3, [r7, #27]
		v32 = (int32_t) v8;
 8016502:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8016506:	617b      	str	r3, [r7, #20]
		break;
 8016508:	e00f      	b.n	801652a <_getval+0x5a>
	case 2:
		memcpy(&v16, p8+offset, 2);
 801650a:	68bb      	ldr	r3, [r7, #8]
 801650c:	69fa      	ldr	r2, [r7, #28]
 801650e:	4413      	add	r3, r2
 8016510:	881b      	ldrh	r3, [r3, #0]
 8016512:	b29b      	uxth	r3, r3
 8016514:	827b      	strh	r3, [r7, #18]
		v32 = (int32_t) v16;
 8016516:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801651a:	617b      	str	r3, [r7, #20]
		break;
 801651c:	e005      	b.n	801652a <_getval+0x5a>
	case 4:
		memcpy(&v32, p8+offset, 4);
 801651e:	68bb      	ldr	r3, [r7, #8]
 8016520:	69fa      	ldr	r2, [r7, #28]
 8016522:	4413      	add	r3, r2
 8016524:	681b      	ldr	r3, [r3, #0]
 8016526:	617b      	str	r3, [r7, #20]
		break;
 8016528:	bf00      	nop
	}
	return v32;
 801652a:	697b      	ldr	r3, [r7, #20]
}
 801652c:	4618      	mov	r0, r3
 801652e:	3724      	adds	r7, #36	; 0x24
 8016530:	46bd      	mov	sp, r7
 8016532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016536:	4770      	bx	lr

08016538 <stat_iterator_reset>:


int stat_iterator_reset(stat_iterator_t *it)
{
 8016538:	b480      	push	{r7}
 801653a:	b083      	sub	sp, #12
 801653c:	af00      	add	r7, sp, #0
 801653e:	6078      	str	r0, [r7, #4]
    it->midx = 0;
 8016540:	687b      	ldr	r3, [r7, #4]
 8016542:	2200      	movs	r2, #0
 8016544:	601a      	str	r2, [r3, #0]
    it->tidx = 0;
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	2200      	movs	r2, #0
 801654a:	605a      	str	r2, [r3, #4]
    it->vidx = 0;
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	2200      	movs	r2, #0
 8016550:	609a      	str	r2, [r3, #8]
    if (!NUM_META) return -1;
    return 0;
 8016552:	2300      	movs	r3, #0
}
 8016554:	4618      	mov	r0, r3
 8016556:	370c      	adds	r7, #12
 8016558:	46bd      	mov	sp, r7
 801655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801655e:	4770      	bx	lr

08016560 <stat_iterator_next>:

int  stat_iterator_next(stat_iterator_t *it)
{
 8016560:	b480      	push	{r7}
 8016562:	b085      	sub	sp, #20
 8016564:	af00      	add	r7, sp, #0
 8016566:	6078      	str	r0, [r7, #4]
    meta_stat_t *m = &meta[it->midx];
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	681b      	ldr	r3, [r3, #0]
 801656c:	011b      	lsls	r3, r3, #4
 801656e:	4a19      	ldr	r2, [pc, #100]	; (80165d4 <stat_iterator_next+0x74>)
 8016570:	4413      	add	r3, r2
 8016572:	60fb      	str	r3, [r7, #12]
    it->vidx ++;
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	689b      	ldr	r3, [r3, #8]
 8016578:	1c5a      	adds	r2, r3, #1
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	609a      	str	r2, [r3, #8]
    if (it->vidx >= m->numelem) {
 801657e:	687b      	ldr	r3, [r7, #4]
 8016580:	689a      	ldr	r2, [r3, #8]
 8016582:	68fb      	ldr	r3, [r7, #12]
 8016584:	685b      	ldr	r3, [r3, #4]
 8016586:	429a      	cmp	r2, r3
 8016588:	db07      	blt.n	801659a <stat_iterator_next+0x3a>
        it->vidx = 0;
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	2200      	movs	r2, #0
 801658e:	609a      	str	r2, [r3, #8]
        it->tidx ++;
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	685b      	ldr	r3, [r3, #4]
 8016594:	1c5a      	adds	r2, r3, #1
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	605a      	str	r2, [r3, #4]
    }
    if (it->tidx >= m->numtrain) {
 801659a:	687b      	ldr	r3, [r7, #4]
 801659c:	685a      	ldr	r2, [r3, #4]
 801659e:	68fb      	ldr	r3, [r7, #12]
 80165a0:	68db      	ldr	r3, [r3, #12]
 80165a2:	429a      	cmp	r2, r3
 80165a4:	db07      	blt.n	80165b6 <stat_iterator_next+0x56>
        it->tidx = 0;
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	2200      	movs	r2, #0
 80165aa:	605a      	str	r2, [r3, #4]
        it->midx ++;
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	681b      	ldr	r3, [r3, #0]
 80165b0:	1c5a      	adds	r2, r3, #1
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	601a      	str	r2, [r3, #0]
    }
    if (it->midx >= NUM_META) return -1;
 80165b6:	687b      	ldr	r3, [r7, #4]
 80165b8:	681b      	ldr	r3, [r3, #0]
 80165ba:	2b03      	cmp	r3, #3
 80165bc:	dd02      	ble.n	80165c4 <stat_iterator_next+0x64>
 80165be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80165c2:	e000      	b.n	80165c6 <stat_iterator_next+0x66>
    return 0;
 80165c4:	2300      	movs	r3, #0
}
 80165c6:	4618      	mov	r0, r3
 80165c8:	3714      	adds	r7, #20
 80165ca:	46bd      	mov	sp, r7
 80165cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165d0:	4770      	bx	lr
 80165d2:	bf00      	nop
 80165d4:	200004cc 	.word	0x200004cc

080165d8 <stat_val_get>:

int32_t stat_val_get(stat_iterator_t *step, int *pdone)
{
 80165d8:	b580      	push	{r7, lr}
 80165da:	b086      	sub	sp, #24
 80165dc:	af00      	add	r7, sp, #0
 80165de:	6078      	str	r0, [r7, #4]
 80165e0:	6039      	str	r1, [r7, #0]
    static int first = 1;
    if (first) {
 80165e2:	4b1c      	ldr	r3, [pc, #112]	; (8016654 <stat_val_get+0x7c>)
 80165e4:	681b      	ldr	r3, [r3, #0]
 80165e6:	2b00      	cmp	r3, #0
 80165e8:	d004      	beq.n	80165f4 <stat_val_get+0x1c>
        build_meta();
 80165ea:	f7ff ff2f 	bl	801644c <build_meta>
        first=0;
 80165ee:	4b19      	ldr	r3, [pc, #100]	; (8016654 <stat_val_get+0x7c>)
 80165f0:	2200      	movs	r2, #0
 80165f2:	601a      	str	r2, [r3, #0]
    }
	*pdone = 0;
 80165f4:	683b      	ldr	r3, [r7, #0]
 80165f6:	2200      	movs	r2, #0
 80165f8:	601a      	str	r2, [r3, #0]
    meta_stat_t *m = &meta[step->midx];
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	681b      	ldr	r3, [r3, #0]
 80165fe:	011b      	lsls	r3, r3, #4
 8016600:	4a15      	ldr	r2, [pc, #84]	; (8016658 <stat_val_get+0x80>)
 8016602:	4413      	add	r3, r2
 8016604:	617b      	str	r3, [r7, #20]
    const stat_val_t *sv = &(m->statval[step->vidx]);
 8016606:	697b      	ldr	r3, [r7, #20]
 8016608:	681a      	ldr	r2, [r3, #0]
 801660a:	687b      	ldr	r3, [r7, #4]
 801660c:	689b      	ldr	r3, [r3, #8]
 801660e:	4619      	mov	r1, r3
 8016610:	460b      	mov	r3, r1
 8016612:	005b      	lsls	r3, r3, #1
 8016614:	440b      	add	r3, r1
 8016616:	009b      	lsls	r3, r3, #2
 8016618:	4413      	add	r3, r2
 801661a:	613b      	str	r3, [r7, #16]
    uint8_t *cptr = (uint8_t *)(sv->ptr);
 801661c:	693b      	ldr	r3, [r7, #16]
 801661e:	681b      	ldr	r3, [r3, #0]
 8016620:	60fb      	str	r3, [r7, #12]
    uint8_t *vars = cptr + step->tidx * m->structsize;
 8016622:	687b      	ldr	r3, [r7, #4]
 8016624:	685b      	ldr	r3, [r3, #4]
 8016626:	461a      	mov	r2, r3
 8016628:	697b      	ldr	r3, [r7, #20]
 801662a:	689b      	ldr	r3, [r3, #8]
 801662c:	fb03 f302 	mul.w	r3, r3, r2
 8016630:	68fa      	ldr	r2, [r7, #12]
 8016632:	4413      	add	r3, r2
 8016634:	60bb      	str	r3, [r7, #8]
    return _getval(vars, sv->off, sv->l);
 8016636:	693b      	ldr	r3, [r7, #16]
 8016638:	6859      	ldr	r1, [r3, #4]
 801663a:	693b      	ldr	r3, [r7, #16]
 801663c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8016640:	461a      	mov	r2, r3
 8016642:	68b8      	ldr	r0, [r7, #8]
 8016644:	f7ff ff44 	bl	80164d0 <_getval>
 8016648:	4603      	mov	r3, r0
	return 0;
}
 801664a:	4618      	mov	r0, r3
 801664c:	3718      	adds	r7, #24
 801664e:	46bd      	mov	sp, r7
 8016650:	bd80      	pop	{r7, pc}
 8016652:	bf00      	nop
 8016654:	2000051c 	.word	0x2000051c
 8016658:	200004cc 	.word	0x200004cc

0801665c <txframe_send_notif>:
	txframe_send(m, 0);
}


static inline void txframe_send_notif(frame_msg_t *m, int len)
{
 801665c:	b580      	push	{r7, lr}
 801665e:	b082      	sub	sp, #8
 8016660:	af00      	add	r7, sp, #0
 8016662:	6078      	str	r0, [r7, #4]
 8016664:	6039      	str	r1, [r7, #0]
	m->t = TXFRAME_TYPE_NOTIF;
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	2202      	movs	r2, #2
 801666a:	701a      	strb	r2, [r3, #0]
	if (len) m->len = len;
 801666c:	683b      	ldr	r3, [r7, #0]
 801666e:	2b00      	cmp	r3, #0
 8016670:	d003      	beq.n	801667a <txframe_send_notif+0x1e>
 8016672:	683b      	ldr	r3, [r7, #0]
 8016674:	b2da      	uxtb	r2, r3
 8016676:	687b      	ldr	r3, [r7, #4]
 8016678:	705a      	strb	r2, [r3, #1]
	txframe_send(m, 1);
 801667a:	2101      	movs	r1, #1
 801667c:	6878      	ldr	r0, [r7, #4]
 801667e:	f002 fcc9 	bl	8019014 <txframe_send>
}
 8016682:	bf00      	nop
 8016684:	3708      	adds	r7, #8
 8016686:	46bd      	mov	sp, r7
 8016688:	bd80      	pop	{r7, pc}
	...

0801668c <mqf_read_to_forward_usb>:
#define CMD_POSE_TRIGGERED			0x51

LFMQUEUE_DEF_H(to_forward, msg_64_t)
LFMQUEUE_DEF_H(from_forward, msg_64_t)

LFMQUEUE_DEF_H(to_forward_usb, msg_64_t)
 801668c:	b580      	push	{r7, lr}
 801668e:	b082      	sub	sp, #8
 8016690:	af00      	add	r7, sp, #0
 8016692:	6078      	str	r0, [r7, #4]
 8016694:	6879      	ldr	r1, [r7, #4]
 8016696:	4804      	ldr	r0, [pc, #16]	; (80166a8 <mqf_read_to_forward_usb+0x1c>)
 8016698:	f003 f8d6 	bl	8019848 <mqf_read>
 801669c:	4603      	mov	r3, r0
 801669e:	4618      	mov	r0, r3
 80166a0:	3708      	adds	r7, #8
 80166a2:	46bd      	mov	sp, r7
 80166a4:	bd80      	pop	{r7, pc}
 80166a6:	bf00      	nop
 80166a8:	20000584 	.word	0x20000584

080166ac <mqf_write_from_forward_usb>:
LFMQUEUE_DEF_H(from_forward_usb, msg_64_t)
 80166ac:	b580      	push	{r7, lr}
 80166ae:	b082      	sub	sp, #8
 80166b0:	af00      	add	r7, sp, #0
 80166b2:	6078      	str	r0, [r7, #4]
 80166b4:	6879      	ldr	r1, [r7, #4]
 80166b6:	4804      	ldr	r0, [pc, #16]	; (80166c8 <mqf_write_from_forward_usb+0x1c>)
 80166b8:	f003 f84c 	bl	8019754 <mqf_write>
 80166bc:	4603      	mov	r3, r0
 80166be:	4618      	mov	r0, r3
 80166c0:	3708      	adds	r7, #8
 80166c2:	46bd      	mov	sp, r7
 80166c4:	bd80      	pop	{r7, pc}
 80166c6:	bf00      	nop
 80166c8:	20000590 	.word	0x20000590

080166cc <_frm_escape>:

#define FRAME_DELIM '|'
#define FRAME_ESC   '\\'

static int _frm_escape(uint8_t *buf, int len, int maxlen)
{
 80166cc:	b480      	push	{r7}
 80166ce:	b089      	sub	sp, #36	; 0x24
 80166d0:	af00      	add	r7, sp, #0
 80166d2:	60f8      	str	r0, [r7, #12]
 80166d4:	60b9      	str	r1, [r7, #8]
 80166d6:	607a      	str	r2, [r7, #4]
    int ne = 0;
 80166d8:	2300      	movs	r3, #0
 80166da:	61fb      	str	r3, [r7, #28]
    for (int i=0; i<len; i++) {
 80166dc:	2300      	movs	r3, #0
 80166de:	61bb      	str	r3, [r7, #24]
 80166e0:	e011      	b.n	8016706 <_frm_escape+0x3a>
        if ((FRAME_ESC==buf[i]) || (FRAME_DELIM==buf[i])) {
 80166e2:	69bb      	ldr	r3, [r7, #24]
 80166e4:	68fa      	ldr	r2, [r7, #12]
 80166e6:	4413      	add	r3, r2
 80166e8:	781b      	ldrb	r3, [r3, #0]
 80166ea:	2b5c      	cmp	r3, #92	; 0x5c
 80166ec:	d005      	beq.n	80166fa <_frm_escape+0x2e>
 80166ee:	69bb      	ldr	r3, [r7, #24]
 80166f0:	68fa      	ldr	r2, [r7, #12]
 80166f2:	4413      	add	r3, r2
 80166f4:	781b      	ldrb	r3, [r3, #0]
 80166f6:	2b7c      	cmp	r3, #124	; 0x7c
 80166f8:	d102      	bne.n	8016700 <_frm_escape+0x34>
            ne++;
 80166fa:	69fb      	ldr	r3, [r7, #28]
 80166fc:	3301      	adds	r3, #1
 80166fe:	61fb      	str	r3, [r7, #28]
    for (int i=0; i<len; i++) {
 8016700:	69bb      	ldr	r3, [r7, #24]
 8016702:	3301      	adds	r3, #1
 8016704:	61bb      	str	r3, [r7, #24]
 8016706:	69ba      	ldr	r2, [r7, #24]
 8016708:	68bb      	ldr	r3, [r7, #8]
 801670a:	429a      	cmp	r2, r3
 801670c:	dbe9      	blt.n	80166e2 <_frm_escape+0x16>
        }
    }
    int nl = ne+len;
 801670e:	69fa      	ldr	r2, [r7, #28]
 8016710:	68bb      	ldr	r3, [r7, #8]
 8016712:	4413      	add	r3, r2
 8016714:	613b      	str	r3, [r7, #16]
    if (nl>maxlen) return -1;
 8016716:	693a      	ldr	r2, [r7, #16]
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	429a      	cmp	r2, r3
 801671c:	dd02      	ble.n	8016724 <_frm_escape+0x58>
 801671e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016722:	e02f      	b.n	8016784 <_frm_escape+0xb8>
    for (int i=len-1+ne; i>=0; i--) {
 8016724:	68bb      	ldr	r3, [r7, #8]
 8016726:	3b01      	subs	r3, #1
 8016728:	69fa      	ldr	r2, [r7, #28]
 801672a:	4413      	add	r3, r2
 801672c:	617b      	str	r3, [r7, #20]
 801672e:	e025      	b.n	801677c <_frm_escape+0xb0>
        buf[i] = buf[i-ne];
 8016730:	697a      	ldr	r2, [r7, #20]
 8016732:	69fb      	ldr	r3, [r7, #28]
 8016734:	1ad3      	subs	r3, r2, r3
 8016736:	461a      	mov	r2, r3
 8016738:	68fb      	ldr	r3, [r7, #12]
 801673a:	441a      	add	r2, r3
 801673c:	697b      	ldr	r3, [r7, #20]
 801673e:	68f9      	ldr	r1, [r7, #12]
 8016740:	440b      	add	r3, r1
 8016742:	7812      	ldrb	r2, [r2, #0]
 8016744:	701a      	strb	r2, [r3, #0]
        if ((FRAME_ESC==buf[i]) || (FRAME_DELIM==buf[i])) {
 8016746:	697b      	ldr	r3, [r7, #20]
 8016748:	68fa      	ldr	r2, [r7, #12]
 801674a:	4413      	add	r3, r2
 801674c:	781b      	ldrb	r3, [r3, #0]
 801674e:	2b5c      	cmp	r3, #92	; 0x5c
 8016750:	d005      	beq.n	801675e <_frm_escape+0x92>
 8016752:	697b      	ldr	r3, [r7, #20]
 8016754:	68fa      	ldr	r2, [r7, #12]
 8016756:	4413      	add	r3, r2
 8016758:	781b      	ldrb	r3, [r3, #0]
 801675a:	2b7c      	cmp	r3, #124	; 0x7c
 801675c:	d10b      	bne.n	8016776 <_frm_escape+0xaa>
            buf[i-1]=FRAME_ESC;
 801675e:	697b      	ldr	r3, [r7, #20]
 8016760:	3b01      	subs	r3, #1
 8016762:	68fa      	ldr	r2, [r7, #12]
 8016764:	4413      	add	r3, r2
 8016766:	225c      	movs	r2, #92	; 0x5c
 8016768:	701a      	strb	r2, [r3, #0]
            ne--;
 801676a:	69fb      	ldr	r3, [r7, #28]
 801676c:	3b01      	subs	r3, #1
 801676e:	61fb      	str	r3, [r7, #28]
            i--;
 8016770:	697b      	ldr	r3, [r7, #20]
 8016772:	3b01      	subs	r3, #1
 8016774:	617b      	str	r3, [r7, #20]
    for (int i=len-1+ne; i>=0; i--) {
 8016776:	697b      	ldr	r3, [r7, #20]
 8016778:	3b01      	subs	r3, #1
 801677a:	617b      	str	r3, [r7, #20]
 801677c:	697b      	ldr	r3, [r7, #20]
 801677e:	2b00      	cmp	r3, #0
 8016780:	dad6      	bge.n	8016730 <_frm_escape+0x64>
        }
    }
    return nl;
 8016782:	693b      	ldr	r3, [r7, #16]
}
 8016784:	4618      	mov	r0, r3
 8016786:	3724      	adds	r7, #36	; 0x24
 8016788:	46bd      	mov	sp, r7
 801678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801678e:	4770      	bx	lr

08016790 <_frm_escape2>:

static int _frm_escape2(uint8_t *buf,  uint8_t *org, int len, int maxlen)
{
 8016790:	b480      	push	{r7}
 8016792:	b087      	sub	sp, #28
 8016794:	af00      	add	r7, sp, #0
 8016796:	60f8      	str	r0, [r7, #12]
 8016798:	60b9      	str	r1, [r7, #8]
 801679a:	607a      	str	r2, [r7, #4]
 801679c:	603b      	str	r3, [r7, #0]
    int ne = 0;
 801679e:	2300      	movs	r3, #0
 80167a0:	617b      	str	r3, [r7, #20]
    for (int i=0; i<len; i++) {
 80167a2:	2300      	movs	r3, #0
 80167a4:	613b      	str	r3, [r7, #16]
 80167a6:	e02f      	b.n	8016808 <_frm_escape2+0x78>
    	if (ne>=maxlen) return -1;
 80167a8:	697a      	ldr	r2, [r7, #20]
 80167aa:	683b      	ldr	r3, [r7, #0]
 80167ac:	429a      	cmp	r2, r3
 80167ae:	db02      	blt.n	80167b6 <_frm_escape2+0x26>
 80167b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80167b4:	e02d      	b.n	8016812 <_frm_escape2+0x82>
        if ((FRAME_ESC==org[i]) || (FRAME_DELIM==org[i])) {
 80167b6:	693b      	ldr	r3, [r7, #16]
 80167b8:	68ba      	ldr	r2, [r7, #8]
 80167ba:	4413      	add	r3, r2
 80167bc:	781b      	ldrb	r3, [r3, #0]
 80167be:	2b5c      	cmp	r3, #92	; 0x5c
 80167c0:	d005      	beq.n	80167ce <_frm_escape2+0x3e>
 80167c2:	693b      	ldr	r3, [r7, #16]
 80167c4:	68ba      	ldr	r2, [r7, #8]
 80167c6:	4413      	add	r3, r2
 80167c8:	781b      	ldrb	r3, [r3, #0]
 80167ca:	2b7c      	cmp	r3, #124	; 0x7c
 80167cc:	d10e      	bne.n	80167ec <_frm_escape2+0x5c>
        	buf[ne++] = FRAME_ESC;
 80167ce:	697b      	ldr	r3, [r7, #20]
 80167d0:	1c5a      	adds	r2, r3, #1
 80167d2:	617a      	str	r2, [r7, #20]
 80167d4:	461a      	mov	r2, r3
 80167d6:	68fb      	ldr	r3, [r7, #12]
 80167d8:	4413      	add	r3, r2
 80167da:	225c      	movs	r2, #92	; 0x5c
 80167dc:	701a      	strb	r2, [r3, #0]
        	if (ne>=maxlen) return -1;
 80167de:	697a      	ldr	r2, [r7, #20]
 80167e0:	683b      	ldr	r3, [r7, #0]
 80167e2:	429a      	cmp	r2, r3
 80167e4:	db02      	blt.n	80167ec <_frm_escape2+0x5c>
 80167e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80167ea:	e012      	b.n	8016812 <_frm_escape2+0x82>
        }
        buf[ne++] = org[i];
 80167ec:	693b      	ldr	r3, [r7, #16]
 80167ee:	68ba      	ldr	r2, [r7, #8]
 80167f0:	441a      	add	r2, r3
 80167f2:	697b      	ldr	r3, [r7, #20]
 80167f4:	1c59      	adds	r1, r3, #1
 80167f6:	6179      	str	r1, [r7, #20]
 80167f8:	4619      	mov	r1, r3
 80167fa:	68fb      	ldr	r3, [r7, #12]
 80167fc:	440b      	add	r3, r1
 80167fe:	7812      	ldrb	r2, [r2, #0]
 8016800:	701a      	strb	r2, [r3, #0]
    for (int i=0; i<len; i++) {
 8016802:	693b      	ldr	r3, [r7, #16]
 8016804:	3301      	adds	r3, #1
 8016806:	613b      	str	r3, [r7, #16]
 8016808:	693a      	ldr	r2, [r7, #16]
 801680a:	687b      	ldr	r3, [r7, #4]
 801680c:	429a      	cmp	r2, r3
 801680e:	dbcb      	blt.n	80167a8 <_frm_escape2+0x18>
    }
    return ne;
 8016810:	697b      	ldr	r3, [r7, #20]
}
 8016812:	4618      	mov	r0, r3
 8016814:	371c      	adds	r7, #28
 8016816:	46bd      	mov	sp, r7
 8016818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801681c:	4770      	bx	lr

0801681e <frm_escape>:
static int frm_escape(uint8_t *buf, int len, int maxlen)
{
 801681e:	b580      	push	{r7, lr}
 8016820:	b086      	sub	sp, #24
 8016822:	af00      	add	r7, sp, #0
 8016824:	60f8      	str	r0, [r7, #12]
 8016826:	60b9      	str	r1, [r7, #8]
 8016828:	607a      	str	r2, [r7, #4]
	//configASSERT(buf[0]==FRAME_DELIM);
	//configASSERT(buf[len-1]==FRAME_DELIM);
    int l = _frm_escape(buf+1, len-2, maxlen-2);
 801682a:	68fb      	ldr	r3, [r7, #12]
 801682c:	1c58      	adds	r0, r3, #1
 801682e:	68bb      	ldr	r3, [r7, #8]
 8016830:	1e99      	subs	r1, r3, #2
 8016832:	687b      	ldr	r3, [r7, #4]
 8016834:	3b02      	subs	r3, #2
 8016836:	461a      	mov	r2, r3
 8016838:	f7ff ff48 	bl	80166cc <_frm_escape>
 801683c:	6178      	str	r0, [r7, #20]
    if (l<0) return l;
 801683e:	697b      	ldr	r3, [r7, #20]
 8016840:	2b00      	cmp	r3, #0
 8016842:	da01      	bge.n	8016848 <frm_escape+0x2a>
 8016844:	697b      	ldr	r3, [r7, #20]
 8016846:	e007      	b.n	8016858 <frm_escape+0x3a>
    buf[l+1]=FRAME_DELIM;
 8016848:	697b      	ldr	r3, [r7, #20]
 801684a:	3301      	adds	r3, #1
 801684c:	68fa      	ldr	r2, [r7, #12]
 801684e:	4413      	add	r3, r2
 8016850:	227c      	movs	r2, #124	; 0x7c
 8016852:	701a      	strb	r2, [r3, #0]
    return l+2;
 8016854:	697b      	ldr	r3, [r7, #20]
 8016856:	3302      	adds	r3, #2
}
 8016858:	4618      	mov	r0, r3
 801685a:	3718      	adds	r7, #24
 801685c:	46bd      	mov	sp, r7
 801685e:	bd80      	pop	{r7, pc}

08016860 <usbPollQueues>:
		uint8_t *param, int plen, uint8_t *rbuf, int rbuflen, int *prlen);

static void txframe_send_msg64(msg_64_t *msg);

void usbPollQueues(void)
{
 8016860:	b580      	push	{r7, lr}
 8016862:	b084      	sub	sp, #16
 8016864:	af00      	add	r7, sp, #0
    for (;;) {
        msg_64_t m;
        int rc = mqf_read_to_forward_usb(&m);
 8016866:	463b      	mov	r3, r7
 8016868:	4618      	mov	r0, r3
 801686a:	f7ff ff0f 	bl	801668c <mqf_read_to_forward_usb>
 801686e:	60f8      	str	r0, [r7, #12]
        if (rc) break;
 8016870:	68fb      	ldr	r3, [r7, #12]
 8016872:	2b00      	cmp	r3, #0
 8016874:	d104      	bne.n	8016880 <usbPollQueues+0x20>
        /*if (0xA2 == m.cmd) {
        	itm_debug1(DBG_USB, "Got A2", m.cmd);
        }*/
        txframe_send_msg64(&m);
 8016876:	463b      	mov	r3, r7
 8016878:	4618      	mov	r0, r3
 801687a:	f000 fc8d 	bl	8017198 <txframe_send_msg64>
    for (;;) {
 801687e:	e7f2      	b.n	8016866 <usbPollQueues+0x6>
    }
}
 8016880:	bf00      	nop
 8016882:	3710      	adds	r7, #16
 8016884:	46bd      	mov	sp, r7
 8016886:	bd80      	pop	{r7, pc}

08016888 <txrx_process_char>:

void txrx_process_char(uint8_t c, uint8_t *respbuf, int *replen)
{
 8016888:	b5f0      	push	{r4, r5, r6, r7, lr}
 801688a:	b08f      	sub	sp, #60	; 0x3c
 801688c:	af04      	add	r7, sp, #16
 801688e:	4603      	mov	r3, r0
 8016890:	60b9      	str	r1, [r7, #8]
 8016892:	607a      	str	r2, [r7, #4]
 8016894:	73fb      	strb	r3, [r7, #15]
	int buflen = *replen;
 8016896:	687b      	ldr	r3, [r7, #4]
 8016898:	681b      	ldr	r3, [r3, #0]
 801689a:	623b      	str	r3, [r7, #32]
	*replen = 0;
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	2200      	movs	r2, #0
 80168a0:	601a      	str	r2, [r3, #0]
	if ((c == FRAME_DELIM) && !frm.escape) {
 80168a2:	7bfb      	ldrb	r3, [r7, #15]
 80168a4:	2b7c      	cmp	r3, #124	; 0x7c
 80168a6:	f040 8097 	bne.w	80169d8 <txrx_process_char+0x150>
 80168aa:	4b88      	ldr	r3, [pc, #544]	; (8016acc <txrx_process_char+0x244>)
 80168ac:	781b      	ldrb	r3, [r3, #0]
 80168ae:	f003 0301 	and.w	r3, r3, #1
 80168b2:	b2db      	uxtb	r3, r3
 80168b4:	2b00      	cmp	r3, #0
 80168b6:	f040 808f 	bne.w	80169d8 <txrx_process_char+0x150>
		if (0 == frm.state) {
 80168ba:	4b84      	ldr	r3, [pc, #528]	; (8016acc <txrx_process_char+0x244>)
 80168bc:	781b      	ldrb	r3, [r3, #0]
 80168be:	f023 0301 	bic.w	r3, r3, #1
 80168c2:	b2db      	uxtb	r3, r3
 80168c4:	2b00      	cmp	r3, #0
 80168c6:	d10b      	bne.n	80168e0 <txrx_process_char+0x58>
			memset(&frm, 0, sizeof(frm));
 80168c8:	2226      	movs	r2, #38	; 0x26
 80168ca:	2100      	movs	r1, #0
 80168cc:	487f      	ldr	r0, [pc, #508]	; (8016acc <txrx_process_char+0x244>)
 80168ce:	f003 f862 	bl	8019996 <memset>
			frm.state = 1;
 80168d2:	4a7e      	ldr	r2, [pc, #504]	; (8016acc <txrx_process_char+0x244>)
 80168d4:	7813      	ldrb	r3, [r2, #0]
 80168d6:	2101      	movs	r1, #1
 80168d8:	f361 0347 	bfi	r3, r1, #1, #7
 80168dc:	7013      	strb	r3, [r2, #0]
			return;
 80168de:	e0f1      	b.n	8016ac4 <txrx_process_char+0x23c>
		} else if (5 == frm.state) {
 80168e0:	4b7a      	ldr	r3, [pc, #488]	; (8016acc <txrx_process_char+0x244>)
 80168e2:	781b      	ldrb	r3, [r3, #0]
 80168e4:	f023 0301 	bic.w	r3, r3, #1
 80168e8:	b2db      	uxtb	r3, r3
 80168ea:	2b0a      	cmp	r3, #10
 80168ec:	d168      	bne.n	80169c0 <txrx_process_char+0x138>
			frm.state = 0;
 80168ee:	4a77      	ldr	r2, [pc, #476]	; (8016acc <txrx_process_char+0x244>)
 80168f0:	7813      	ldrb	r3, [r2, #0]
 80168f2:	f36f 0347 	bfc	r3, #1, #7
 80168f6:	7013      	strb	r3, [r2, #0]
			frm.escape = 0;
 80168f8:	4a74      	ldr	r2, [pc, #464]	; (8016acc <txrx_process_char+0x244>)
 80168fa:	7813      	ldrb	r3, [r2, #0]
 80168fc:	f36f 0300 	bfc	r3, #0, #1
 8016900:	7013      	strb	r3, [r2, #0]
			// process frame
			int i = 0;
 8016902:	2300      	movs	r3, #0
 8016904:	61fb      	str	r3, [r7, #28]
			respbuf[i++] = FRAME_DELIM;
 8016906:	69fb      	ldr	r3, [r7, #28]
 8016908:	1c5a      	adds	r2, r3, #1
 801690a:	61fa      	str	r2, [r7, #28]
 801690c:	461a      	mov	r2, r3
 801690e:	68bb      	ldr	r3, [r7, #8]
 8016910:	4413      	add	r3, r2
 8016912:	227c      	movs	r2, #124	; 0x7c
 8016914:	701a      	strb	r2, [r3, #0]
			respbuf[i++] = frm.seqnum;
 8016916:	69fb      	ldr	r3, [r7, #28]
 8016918:	1c5a      	adds	r2, r3, #1
 801691a:	61fa      	str	r2, [r7, #28]
 801691c:	461a      	mov	r2, r3
 801691e:	68bb      	ldr	r3, [r7, #8]
 8016920:	4413      	add	r3, r2
 8016922:	4a6a      	ldr	r2, [pc, #424]	; (8016acc <txrx_process_char+0x244>)
 8016924:	7852      	ldrb	r2, [r2, #1]
 8016926:	701a      	strb	r2, [r3, #0]
			respbuf[i++] = 'R';
 8016928:	69fb      	ldr	r3, [r7, #28]
 801692a:	1c5a      	adds	r2, r3, #1
 801692c:	61fa      	str	r2, [r7, #28]
 801692e:	461a      	mov	r2, r3
 8016930:	68bb      	ldr	r3, [r7, #8]
 8016932:	4413      	add	r3, r2
 8016934:	2252      	movs	r2, #82	; 0x52
 8016936:	701a      	strb	r2, [r3, #0]
			int plen = 0;
 8016938:	2300      	movs	r3, #0
 801693a:	617b      	str	r3, [r7, #20]
			uint8_t rc = process_frame_cmd(frm.sel, frm.num, frm.cmd, frm.param, frm.pidx, respbuf+i+1, buflen-i-1, &plen);
 801693c:	4b63      	ldr	r3, [pc, #396]	; (8016acc <txrx_process_char+0x244>)
 801693e:	7898      	ldrb	r0, [r3, #2]
 8016940:	4b62      	ldr	r3, [pc, #392]	; (8016acc <txrx_process_char+0x244>)
 8016942:	78dc      	ldrb	r4, [r3, #3]
 8016944:	4b61      	ldr	r3, [pc, #388]	; (8016acc <txrx_process_char+0x244>)
 8016946:	791d      	ldrb	r5, [r3, #4]
 8016948:	4b60      	ldr	r3, [pc, #384]	; (8016acc <txrx_process_char+0x244>)
 801694a:	795b      	ldrb	r3, [r3, #5]
 801694c:	461e      	mov	r6, r3
 801694e:	69fb      	ldr	r3, [r7, #28]
 8016950:	3301      	adds	r3, #1
 8016952:	68ba      	ldr	r2, [r7, #8]
 8016954:	4413      	add	r3, r2
 8016956:	6a39      	ldr	r1, [r7, #32]
 8016958:	69fa      	ldr	r2, [r7, #28]
 801695a:	1a8a      	subs	r2, r1, r2
 801695c:	3a01      	subs	r2, #1
 801695e:	f107 0114 	add.w	r1, r7, #20
 8016962:	9103      	str	r1, [sp, #12]
 8016964:	9202      	str	r2, [sp, #8]
 8016966:	9301      	str	r3, [sp, #4]
 8016968:	9600      	str	r6, [sp, #0]
 801696a:	4b59      	ldr	r3, [pc, #356]	; (8016ad0 <txrx_process_char+0x248>)
 801696c:	462a      	mov	r2, r5
 801696e:	4621      	mov	r1, r4
 8016970:	f000 f8d2 	bl	8016b18 <process_frame_cmd>
 8016974:	4603      	mov	r3, r0
 8016976:	76fb      	strb	r3, [r7, #27]
			respbuf[i++] = rc;
 8016978:	69fb      	ldr	r3, [r7, #28]
 801697a:	1c5a      	adds	r2, r3, #1
 801697c:	61fa      	str	r2, [r7, #28]
 801697e:	461a      	mov	r2, r3
 8016980:	68bb      	ldr	r3, [r7, #8]
 8016982:	4413      	add	r3, r2
 8016984:	7efa      	ldrb	r2, [r7, #27]
 8016986:	701a      	strb	r2, [r3, #0]
			respbuf[i+plen] = FRAME_DELIM;
 8016988:	697a      	ldr	r2, [r7, #20]
 801698a:	69fb      	ldr	r3, [r7, #28]
 801698c:	4413      	add	r3, r2
 801698e:	461a      	mov	r2, r3
 8016990:	68bb      	ldr	r3, [r7, #8]
 8016992:	4413      	add	r3, r2
 8016994:	227c      	movs	r2, #124	; 0x7c
 8016996:	701a      	strb	r2, [r3, #0]
			int l = frm_escape(respbuf, i+plen+1, buflen);
 8016998:	697a      	ldr	r2, [r7, #20]
 801699a:	69fb      	ldr	r3, [r7, #28]
 801699c:	4413      	add	r3, r2
 801699e:	3301      	adds	r3, #1
 80169a0:	6a3a      	ldr	r2, [r7, #32]
 80169a2:	4619      	mov	r1, r3
 80169a4:	68b8      	ldr	r0, [r7, #8]
 80169a6:	f7ff ff3a 	bl	801681e <frm_escape>
 80169aa:	6278      	str	r0, [r7, #36]	; 0x24
			if (l<0) {
 80169ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169ae:	2b00      	cmp	r3, #0
 80169b0:	da01      	bge.n	80169b6 <txrx_process_char+0x12e>
				l = 0;
 80169b2:	2300      	movs	r3, #0
 80169b4:	627b      	str	r3, [r7, #36]	; 0x24
			}
			*replen = l;
 80169b6:	687b      	ldr	r3, [r7, #4]
 80169b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80169ba:	601a      	str	r2, [r3, #0]
			/*if ((0)) {
				static frame_msg_t m;
				m.len = 1+ sprintf(m.frm, "frm resp %d\r\n", *replen);
				txframe_send_debug(&m, 0);
			}*/
			return;
 80169bc:	bf00      	nop
 80169be:	e081      	b.n	8016ac4 <txrx_process_char+0x23c>
		} else {
			// short frame, ignore
			frm.state = 1;
 80169c0:	4a42      	ldr	r2, [pc, #264]	; (8016acc <txrx_process_char+0x244>)
 80169c2:	7813      	ldrb	r3, [r2, #0]
 80169c4:	2101      	movs	r1, #1
 80169c6:	f361 0347 	bfi	r3, r1, #1, #7
 80169ca:	7013      	strb	r3, [r2, #0]
			frm.escape = 0;
 80169cc:	4a3f      	ldr	r2, [pc, #252]	; (8016acc <txrx_process_char+0x244>)
 80169ce:	7813      	ldrb	r3, [r2, #0]
 80169d0:	f36f 0300 	bfc	r3, #0, #1
 80169d4:	7013      	strb	r3, [r2, #0]
			return;
 80169d6:	e075      	b.n	8016ac4 <txrx_process_char+0x23c>
		}
	}
	if (c==FRAME_ESC && !frm.escape) {
 80169d8:	7bfb      	ldrb	r3, [r7, #15]
 80169da:	2b5c      	cmp	r3, #92	; 0x5c
 80169dc:	d10c      	bne.n	80169f8 <txrx_process_char+0x170>
 80169de:	4b3b      	ldr	r3, [pc, #236]	; (8016acc <txrx_process_char+0x244>)
 80169e0:	781b      	ldrb	r3, [r3, #0]
 80169e2:	f003 0301 	and.w	r3, r3, #1
 80169e6:	b2db      	uxtb	r3, r3
 80169e8:	2b00      	cmp	r3, #0
 80169ea:	d105      	bne.n	80169f8 <txrx_process_char+0x170>
		// state is >0 here
		frm.escape = 1;
 80169ec:	4a37      	ldr	r2, [pc, #220]	; (8016acc <txrx_process_char+0x244>)
 80169ee:	7813      	ldrb	r3, [r2, #0]
 80169f0:	f043 0301 	orr.w	r3, r3, #1
 80169f4:	7013      	strb	r3, [r2, #0]
		return;
 80169f6:	e065      	b.n	8016ac4 <txrx_process_char+0x23c>
	}

	//  |sSNCvv...|
	switch (frm.state) {
 80169f8:	4b34      	ldr	r3, [pc, #208]	; (8016acc <txrx_process_char+0x244>)
 80169fa:	781b      	ldrb	r3, [r3, #0]
 80169fc:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8016a00:	b2db      	uxtb	r3, r3
 8016a02:	3b01      	subs	r3, #1
 8016a04:	2b04      	cmp	r3, #4
 8016a06:	d80d      	bhi.n	8016a24 <txrx_process_char+0x19c>
 8016a08:	a201      	add	r2, pc, #4	; (adr r2, 8016a10 <txrx_process_char+0x188>)
 8016a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016a0e:	bf00      	nop
 8016a10:	08016a31 	.word	0x08016a31
 8016a14:	08016a45 	.word	0x08016a45
 8016a18:	08016a59 	.word	0x08016a59
 8016a1c:	08016a6d 	.word	0x08016a6d
 8016a20:	08016a81 	.word	0x08016a81
	default:
		frm.escape = 0;
 8016a24:	4a29      	ldr	r2, [pc, #164]	; (8016acc <txrx_process_char+0x244>)
 8016a26:	7813      	ldrb	r3, [r2, #0]
 8016a28:	f36f 0300 	bfc	r3, #0, #1
 8016a2c:	7013      	strb	r3, [r2, #0]
		//configAssert(0);
		break;
 8016a2e:	e044      	b.n	8016aba <txrx_process_char+0x232>
	case 1:
		frm.seqnum = c;
 8016a30:	4a26      	ldr	r2, [pc, #152]	; (8016acc <txrx_process_char+0x244>)
 8016a32:	7bfb      	ldrb	r3, [r7, #15]
 8016a34:	7053      	strb	r3, [r2, #1]
		frm.state = 2;
 8016a36:	4a25      	ldr	r2, [pc, #148]	; (8016acc <txrx_process_char+0x244>)
 8016a38:	7813      	ldrb	r3, [r2, #0]
 8016a3a:	2102      	movs	r1, #2
 8016a3c:	f361 0347 	bfi	r3, r1, #1, #7
 8016a40:	7013      	strb	r3, [r2, #0]
		break;
 8016a42:	e03a      	b.n	8016aba <txrx_process_char+0x232>
	case 2:
		frm.sel = c;
 8016a44:	4a21      	ldr	r2, [pc, #132]	; (8016acc <txrx_process_char+0x244>)
 8016a46:	7bfb      	ldrb	r3, [r7, #15]
 8016a48:	7093      	strb	r3, [r2, #2]
		frm.state = 3;
 8016a4a:	4a20      	ldr	r2, [pc, #128]	; (8016acc <txrx_process_char+0x244>)
 8016a4c:	7813      	ldrb	r3, [r2, #0]
 8016a4e:	2103      	movs	r1, #3
 8016a50:	f361 0347 	bfi	r3, r1, #1, #7
 8016a54:	7013      	strb	r3, [r2, #0]
		break;
 8016a56:	e030      	b.n	8016aba <txrx_process_char+0x232>
	case 3:
		frm.num = c;
 8016a58:	4a1c      	ldr	r2, [pc, #112]	; (8016acc <txrx_process_char+0x244>)
 8016a5a:	7bfb      	ldrb	r3, [r7, #15]
 8016a5c:	70d3      	strb	r3, [r2, #3]
		frm.state = 4;
 8016a5e:	4a1b      	ldr	r2, [pc, #108]	; (8016acc <txrx_process_char+0x244>)
 8016a60:	7813      	ldrb	r3, [r2, #0]
 8016a62:	2104      	movs	r1, #4
 8016a64:	f361 0347 	bfi	r3, r1, #1, #7
 8016a68:	7013      	strb	r3, [r2, #0]
		break;
 8016a6a:	e026      	b.n	8016aba <txrx_process_char+0x232>
	case 4:
		frm.cmd = c;
 8016a6c:	4a17      	ldr	r2, [pc, #92]	; (8016acc <txrx_process_char+0x244>)
 8016a6e:	7bfb      	ldrb	r3, [r7, #15]
 8016a70:	7113      	strb	r3, [r2, #4]
		frm.state = 5;
 8016a72:	4a16      	ldr	r2, [pc, #88]	; (8016acc <txrx_process_char+0x244>)
 8016a74:	7813      	ldrb	r3, [r2, #0]
 8016a76:	2105      	movs	r1, #5
 8016a78:	f361 0347 	bfi	r3, r1, #1, #7
 8016a7c:	7013      	strb	r3, [r2, #0]
		break;
 8016a7e:	e01c      	b.n	8016aba <txrx_process_char+0x232>
	case 5:
		if (frm.pidx >= MAX_DATA_LEN) {
 8016a80:	4b12      	ldr	r3, [pc, #72]	; (8016acc <txrx_process_char+0x244>)
 8016a82:	795b      	ldrb	r3, [r3, #5]
 8016a84:	2b1f      	cmp	r3, #31
 8016a86:	d90a      	bls.n	8016a9e <txrx_process_char+0x216>
			frm.state = 0;
 8016a88:	4a10      	ldr	r2, [pc, #64]	; (8016acc <txrx_process_char+0x244>)
 8016a8a:	7813      	ldrb	r3, [r2, #0]
 8016a8c:	f36f 0347 	bfc	r3, #1, #7
 8016a90:	7013      	strb	r3, [r2, #0]
			frm.escape = 0;
 8016a92:	4a0e      	ldr	r2, [pc, #56]	; (8016acc <txrx_process_char+0x244>)
 8016a94:	7813      	ldrb	r3, [r2, #0]
 8016a96:	f36f 0300 	bfc	r3, #0, #1
 8016a9a:	7013      	strb	r3, [r2, #0]
			break;
 8016a9c:	e00d      	b.n	8016aba <txrx_process_char+0x232>
		}
		frm.param[frm.pidx] = c;
 8016a9e:	4b0b      	ldr	r3, [pc, #44]	; (8016acc <txrx_process_char+0x244>)
 8016aa0:	795b      	ldrb	r3, [r3, #5]
 8016aa2:	461a      	mov	r2, r3
 8016aa4:	4b09      	ldr	r3, [pc, #36]	; (8016acc <txrx_process_char+0x244>)
 8016aa6:	4413      	add	r3, r2
 8016aa8:	7bfa      	ldrb	r2, [r7, #15]
 8016aaa:	719a      	strb	r2, [r3, #6]
		frm.pidx ++;
 8016aac:	4b07      	ldr	r3, [pc, #28]	; (8016acc <txrx_process_char+0x244>)
 8016aae:	795b      	ldrb	r3, [r3, #5]
 8016ab0:	3301      	adds	r3, #1
 8016ab2:	b2da      	uxtb	r2, r3
 8016ab4:	4b05      	ldr	r3, [pc, #20]	; (8016acc <txrx_process_char+0x244>)
 8016ab6:	715a      	strb	r2, [r3, #5]
		break;
 8016ab8:	bf00      	nop
	}
        frm.escape = 0;
 8016aba:	4a04      	ldr	r2, [pc, #16]	; (8016acc <txrx_process_char+0x244>)
 8016abc:	7813      	ldrb	r3, [r2, #0]
 8016abe:	f36f 0300 	bfc	r3, #0, #1
 8016ac2:	7013      	strb	r3, [r2, #0]
}
 8016ac4:	372c      	adds	r7, #44	; 0x2c
 8016ac6:	46bd      	mov	sp, r7
 8016ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016aca:	bf00      	nop
 8016acc:	200053b4 	.word	0x200053b4
 8016ad0:	200053ba 	.word	0x200053ba

08016ad4 <param_set_pwm>:



// ---------------------------------------------------------------------------------
static void param_set_pwm(struct param *p, int32_t v) // XXX to be moved away
{
 8016ad4:	b580      	push	{r7, lr}
 8016ad6:	b082      	sub	sp, #8
 8016ad8:	af00      	add	r7, sp, #0
 8016ada:	6078      	str	r0, [r7, #4]
 8016adc:	6039      	str	r1, [r7, #0]
        set_pwm_freq(v);
 8016ade:	6838      	ldr	r0, [r7, #0]
 8016ae0:	f002 f83a 	bl	8018b58 <set_pwm_freq>
}
 8016ae4:	bf00      	nop
 8016ae6:	3708      	adds	r7, #8
 8016ae8:	46bd      	mov	sp, r7
 8016aea:	bd80      	pop	{r7, pc}

08016aec <param_get_numtrains>:
int32_t (*getter)(struct param *);
	void (*setter)(struct param *, int32_t);
*/

static int32_t param_get_numtrains(param_t *p)
{
 8016aec:	b480      	push	{r7}
 8016aee:	b083      	sub	sp, #12
 8016af0:	af00      	add	r7, sp, #0
 8016af2:	6078      	str	r0, [r7, #4]
	return NUM_TRAINS;
 8016af4:	2308      	movs	r3, #8
}
 8016af6:	4618      	mov	r0, r3
 8016af8:	370c      	adds	r7, #12
 8016afa:	46bd      	mov	sp, r7
 8016afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b00:	4770      	bx	lr

08016b02 <param_get_numcantons>:

static int32_t param_get_numcantons(param_t *p)
{
 8016b02:	b480      	push	{r7}
 8016b04:	b083      	sub	sp, #12
 8016b06:	af00      	add	r7, sp, #0
 8016b08:	6078      	str	r0, [r7, #4]
	return NUM_CANTONS;
 8016b0a:	2308      	movs	r3, #8
}
 8016b0c:	4618      	mov	r0, r3
 8016b0e:	370c      	adds	r7, #12
 8016b10:	46bd      	mov	sp, r7
 8016b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b16:	4770      	bx	lr

08016b18 <process_frame_cmd>:




static uint8_t process_frame_cmd(uint8_t sel, uint8_t num,  uint8_t cmd, uint8_t *param, int plen, uint8_t *rbuf, int rbuflen, int *prlen)
{
 8016b18:	b580      	push	{r7, lr}
 8016b1a:	b094      	sub	sp, #80	; 0x50
 8016b1c:	af04      	add	r7, sp, #16
 8016b1e:	603b      	str	r3, [r7, #0]
 8016b20:	4603      	mov	r3, r0
 8016b22:	71fb      	strb	r3, [r7, #7]
 8016b24:	460b      	mov	r3, r1
 8016b26:	71bb      	strb	r3, [r7, #6]
 8016b28:	4613      	mov	r3, r2
 8016b2a:	717b      	strb	r3, [r7, #5]
    //HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
	int16_t s;
	*prlen = 0;
 8016b2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016b2e:	2200      	movs	r2, #0
 8016b30:	601a      	str	r2, [r3, #0]
	int32_t v,d,min,max;
	int rc=-1;
 8016b32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016b36:	63fb      	str	r3, [r7, #60]	; 0x3c

	switch(sel) {
 8016b38:	79fb      	ldrb	r3, [r7, #7]
 8016b3a:	3b36      	subs	r3, #54	; 0x36
 8016b3c:	2b1e      	cmp	r3, #30
 8016b3e:	f200 81ff 	bhi.w	8016f40 <process_frame_cmd+0x428>
 8016b42:	a201      	add	r2, pc, #4	; (adr r2, 8016b48 <process_frame_cmd+0x30>)
 8016b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016b48:	08016bc5 	.word	0x08016bc5
 8016b4c:	08016f41 	.word	0x08016f41
 8016b50:	08016f41 	.word	0x08016f41
 8016b54:	08016f41 	.word	0x08016f41
 8016b58:	08016f41 	.word	0x08016f41
 8016b5c:	08016f41 	.word	0x08016f41
 8016b60:	08016f41 	.word	0x08016f41
 8016b64:	08016f41 	.word	0x08016f41
 8016b68:	08016f41 	.word	0x08016f41
 8016b6c:	08016f41 	.word	0x08016f41
 8016b70:	08016f41 	.word	0x08016f41
 8016b74:	08016be7 	.word	0x08016be7
 8016b78:	08016f41 	.word	0x08016f41
 8016b7c:	08016f41 	.word	0x08016f41
 8016b80:	08016f41 	.word	0x08016f41
 8016b84:	08016f41 	.word	0x08016f41
 8016b88:	08016f41 	.word	0x08016f41
 8016b8c:	08016bfd 	.word	0x08016bfd
 8016b90:	08016f41 	.word	0x08016f41
 8016b94:	08016f41 	.word	0x08016f41
 8016b98:	08016f41 	.word	0x08016f41
 8016b9c:	08016f41 	.word	0x08016f41
 8016ba0:	08016f41 	.word	0x08016f41
 8016ba4:	08016f41 	.word	0x08016f41
 8016ba8:	08016f41 	.word	0x08016f41
 8016bac:	08016f41 	.word	0x08016f41
 8016bb0:	08016f41 	.word	0x08016f41
 8016bb4:	08016f41 	.word	0x08016f41
 8016bb8:	08016f41 	.word	0x08016f41
 8016bbc:	08016f41 	.word	0x08016f41
 8016bc0:	08016d61 	.word	0x08016d61
    case '6': {
        msg_64_t m;
        m.to = num;
 8016bc4:	79bb      	ldrb	r3, [r7, #6]
 8016bc6:	743b      	strb	r3, [r7, #16]
        m.from = cmd;
 8016bc8:	797b      	ldrb	r3, [r7, #5]
 8016bca:	747b      	strb	r3, [r7, #17]
        memcpy(m.rbytes, param, 6);
 8016bcc:	683a      	ldr	r2, [r7, #0]
 8016bce:	f107 0312 	add.w	r3, r7, #18
 8016bd2:	6811      	ldr	r1, [r2, #0]
 8016bd4:	6019      	str	r1, [r3, #0]
 8016bd6:	8892      	ldrh	r2, [r2, #4]
 8016bd8:	809a      	strh	r2, [r3, #4]
        mqf_write_from_forward_usb(&m);
 8016bda:	f107 0310 	add.w	r3, r7, #16
 8016bde:	4618      	mov	r0, r3
 8016be0:	f7ff fd64 	bl	80166ac <mqf_write_from_forward_usb>
        }
        break;
 8016be4:	e1bc      	b.n	8016f60 <process_frame_cmd+0x448>
	case 'A':
		switch (cmd) {
 8016be6:	797b      	ldrb	r3, [r7, #5]
 8016be8:	2b57      	cmp	r3, #87	; 0x57
 8016bea:	d003      	beq.n	8016bf4 <process_frame_cmd+0xdc>
 8016bec:	2b73      	cmp	r3, #115	; 0x73
 8016bee:	d003      	beq.n	8016bf8 <process_frame_cmd+0xe0>
 8016bf0:	2b53      	cmp	r3, #83	; 0x53
		case 'S':
			//rc = turnout_cmd(num, 1);
			break;
 8016bf2:	e002      	b.n	8016bfa <process_frame_cmd+0xe2>
		case 's':
			//rc = turnout_cmd(num, -1);
			break;
		case 'W':
			//rc = turnout_test(num);
			break;
 8016bf4:	bf00      	nop
 8016bf6:	e1b3      	b.n	8016f60 <process_frame_cmd+0x448>
			break;
 8016bf8:	bf00      	nop
		}
		break;
 8016bfa:	e1b1      	b.n	8016f60 <process_frame_cmd+0x448>
	case 'G':
		switch (cmd) {
 8016bfc:	797b      	ldrb	r3, [r7, #5]
 8016bfe:	3b43      	subs	r3, #67	; 0x43
 8016c00:	2b2d      	cmp	r3, #45	; 0x2d
 8016c02:	f200 80ab 	bhi.w	8016d5c <process_frame_cmd+0x244>
 8016c06:	a201      	add	r2, pc, #4	; (adr r2, 8016c0c <process_frame_cmd+0xf4>)
 8016c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016c0c:	08016cc5 	.word	0x08016cc5
 8016c10:	08016d5d 	.word	0x08016d5d
 8016c14:	08016d5d 	.word	0x08016d5d
 8016c18:	08016d5d 	.word	0x08016d5d
 8016c1c:	08016d5d 	.word	0x08016d5d
 8016c20:	08016d5d 	.word	0x08016d5d
 8016c24:	08016d5d 	.word	0x08016d5d
 8016c28:	08016d5d 	.word	0x08016d5d
 8016c2c:	08016cd3 	.word	0x08016cd3
 8016c30:	08016d5d 	.word	0x08016d5d
 8016c34:	08016d5d 	.word	0x08016d5d
 8016c38:	08016d5d 	.word	0x08016d5d
 8016c3c:	08016d5d 	.word	0x08016d5d
 8016c40:	08016d37 	.word	0x08016d37
 8016c44:	08016d5d 	.word	0x08016d5d
 8016c48:	08016d5d 	.word	0x08016d5d
 8016c4c:	08016ccf 	.word	0x08016ccf
 8016c50:	08016d5d 	.word	0x08016d5d
 8016c54:	08016d5d 	.word	0x08016d5d
 8016c58:	08016d5d 	.word	0x08016d5d
 8016c5c:	08016d5d 	.word	0x08016d5d
 8016c60:	08016d5d 	.word	0x08016d5d
 8016c64:	08016d5d 	.word	0x08016d5d
 8016c68:	08016d5d 	.word	0x08016d5d
 8016c6c:	08016d5d 	.word	0x08016d5d
 8016c70:	08016d5d 	.word	0x08016d5d
 8016c74:	08016d5d 	.word	0x08016d5d
 8016c78:	08016d5d 	.word	0x08016d5d
 8016c7c:	08016d5d 	.word	0x08016d5d
 8016c80:	08016d5d 	.word	0x08016d5d
 8016c84:	08016d5d 	.word	0x08016d5d
 8016c88:	08016d5d 	.word	0x08016d5d
 8016c8c:	08016d5d 	.word	0x08016d5d
 8016c90:	08016d5d 	.word	0x08016d5d
 8016c94:	08016d5d 	.word	0x08016d5d
 8016c98:	08016d5d 	.word	0x08016d5d
 8016c9c:	08016d5d 	.word	0x08016d5d
 8016ca0:	08016d5d 	.word	0x08016d5d
 8016ca4:	08016d5d 	.word	0x08016d5d
 8016ca8:	08016d5d 	.word	0x08016d5d
 8016cac:	08016d5d 	.word	0x08016d5d
 8016cb0:	08016d5d 	.word	0x08016d5d
 8016cb4:	08016d5d 	.word	0x08016d5d
 8016cb8:	08016d5d 	.word	0x08016d5d
 8016cbc:	08016d5d 	.word	0x08016d5d
 8016cc0:	08016cd7 	.word	0x08016cd7
		case 'C':
			cli_frame_mode = 0;
 8016cc4:	4ba9      	ldr	r3, [pc, #676]	; (8016f6c <process_frame_cmd+0x454>)
 8016cc6:	2200      	movs	r2, #0
 8016cc8:	701a      	strb	r2, [r3, #0]
			return 0;
 8016cca:	2300      	movs	r3, #0
 8016ccc:	e149      	b.n	8016f62 <process_frame_cmd+0x44a>
			break;
		case 'S':
			// TODO train_stop_all();
			return 0;
 8016cce:	2300      	movs	r3, #0
 8016cd0:	e147      	b.n	8016f62 <process_frame_cmd+0x44a>
			break;
		case 'K':
			// TODO calibrate_bemf();
			return 0;
 8016cd2:	2300      	movs	r3, #0
 8016cd4:	e145      	b.n	8016f62 <process_frame_cmd+0x44a>
			break;
		case 'p':
			rc = param_get_value(glob_params, NULL, (char *)param, &v, &d, &min, &max);
 8016cd6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8016cda:	f107 031c 	add.w	r3, r7, #28
 8016cde:	9302      	str	r3, [sp, #8]
 8016ce0:	f107 0320 	add.w	r3, r7, #32
 8016ce4:	9301      	str	r3, [sp, #4]
 8016ce6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016cea:	9300      	str	r3, [sp, #0]
 8016cec:	4613      	mov	r3, r2
 8016cee:	683a      	ldr	r2, [r7, #0]
 8016cf0:	2100      	movs	r1, #0
 8016cf2:	489f      	ldr	r0, [pc, #636]	; (8016f70 <process_frame_cmd+0x458>)
 8016cf4:	f7ff fa41 	bl	801617a <param_get_value>
 8016cf8:	63f8      	str	r0, [r7, #60]	; 0x3c
			memcpy(rbuf, &v,   sizeof(int32_t)); rbuf += sizeof(int32_t);
 8016cfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016cfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016cfe:	601a      	str	r2, [r3, #0]
 8016d00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016d02:	3304      	adds	r3, #4
 8016d04:	64fb      	str	r3, [r7, #76]	; 0x4c
			memcpy(rbuf, &d,   sizeof(int32_t)); rbuf += sizeof(int32_t);
 8016d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016d08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016d0a:	601a      	str	r2, [r3, #0]
 8016d0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016d0e:	3304      	adds	r3, #4
 8016d10:	64fb      	str	r3, [r7, #76]	; 0x4c
			memcpy(rbuf, &min, sizeof(int32_t)); rbuf += sizeof(int32_t);
 8016d12:	6a3a      	ldr	r2, [r7, #32]
 8016d14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016d16:	601a      	str	r2, [r3, #0]
 8016d18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016d1a:	3304      	adds	r3, #4
 8016d1c:	64fb      	str	r3, [r7, #76]	; 0x4c
			memcpy(rbuf, &max, sizeof(int32_t)); rbuf += sizeof(int32_t);
 8016d1e:	69fa      	ldr	r2, [r7, #28]
 8016d20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016d22:	601a      	str	r2, [r3, #0]
 8016d24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016d26:	3304      	adds	r3, #4
 8016d28:	64fb      	str	r3, [r7, #76]	; 0x4c
			*prlen = 4*sizeof(int32_t);
 8016d2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016d2c:	2210      	movs	r2, #16
 8016d2e:	601a      	str	r2, [r3, #0]
			return rc;
 8016d30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016d32:	b2db      	uxtb	r3, r3
 8016d34:	e115      	b.n	8016f62 <process_frame_cmd+0x44a>
		case 'P': {
			if (plen < 4+1) return 1;
 8016d36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016d38:	2b04      	cmp	r3, #4
 8016d3a:	dc01      	bgt.n	8016d40 <process_frame_cmd+0x228>
 8016d3c:	2301      	movs	r3, #1
 8016d3e:	e110      	b.n	8016f62 <process_frame_cmd+0x44a>
			int32_t v;
			memcpy(&v, param, sizeof(int32_t));
 8016d40:	683b      	ldr	r3, [r7, #0]
 8016d42:	681b      	ldr	r3, [r3, #0]
 8016d44:	60fb      	str	r3, [r7, #12]
			int rc = param_set_value(glob_params, NULL, (char *)(param+sizeof(int32_t)), v);
 8016d46:	683b      	ldr	r3, [r7, #0]
 8016d48:	1d1a      	adds	r2, r3, #4
 8016d4a:	68fb      	ldr	r3, [r7, #12]
 8016d4c:	2100      	movs	r1, #0
 8016d4e:	4888      	ldr	r0, [pc, #544]	; (8016f70 <process_frame_cmd+0x458>)
 8016d50:	f7ff fa85 	bl	801625e <param_set_value>
 8016d54:	6338      	str	r0, [r7, #48]	; 0x30
			return rc;
 8016d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d58:	b2db      	uxtb	r3, r3
 8016d5a:	e102      	b.n	8016f62 <process_frame_cmd+0x44a>
		}
		default:
			return 3;
 8016d5c:	2303      	movs	r3, #3
 8016d5e:	e100      	b.n	8016f62 <process_frame_cmd+0x44a>
		}
		break;
	case 'T':
		//if (num == '0') num=0; // XXX hook for test
		//if (num != 0) return 4; // for now
		switch (cmd) {
 8016d60:	797b      	ldrb	r3, [r7, #5]
 8016d62:	3b41      	subs	r3, #65	; 0x41
 8016d64:	2b39      	cmp	r3, #57	; 0x39
 8016d66:	f200 80e7 	bhi.w	8016f38 <process_frame_cmd+0x420>
 8016d6a:	a201      	add	r2, pc, #4	; (adr r2, 8016d70 <process_frame_cmd+0x258>)
 8016d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016d70:	08016f3d 	.word	0x08016f3d
 8016d74:	08016f39 	.word	0x08016f39
 8016d78:	08016f39 	.word	0x08016f39
 8016d7c:	08016f39 	.word	0x08016f39
 8016d80:	08016f39 	.word	0x08016f39
 8016d84:	08016f39 	.word	0x08016f39
 8016d88:	08016f39 	.word	0x08016f39
 8016d8c:	08016f39 	.word	0x08016f39
 8016d90:	08016f39 	.word	0x08016f39
 8016d94:	08016f39 	.word	0x08016f39
 8016d98:	08016f39 	.word	0x08016f39
 8016d9c:	08016f39 	.word	0x08016f39
 8016da0:	08016f39 	.word	0x08016f39
 8016da4:	08016f39 	.word	0x08016f39
 8016da8:	08016f39 	.word	0x08016f39
 8016dac:	08016efd 	.word	0x08016efd
 8016db0:	08016f39 	.word	0x08016f39
 8016db4:	08016f39 	.word	0x08016f39
 8016db8:	08016f39 	.word	0x08016f39
 8016dbc:	08016f39 	.word	0x08016f39
 8016dc0:	08016f39 	.word	0x08016f39
 8016dc4:	08016e59 	.word	0x08016e59
 8016dc8:	08016f39 	.word	0x08016f39
 8016dcc:	08016f39 	.word	0x08016f39
 8016dd0:	08016f39 	.word	0x08016f39
 8016dd4:	08016f39 	.word	0x08016f39
 8016dd8:	08016f39 	.word	0x08016f39
 8016ddc:	08016f39 	.word	0x08016f39
 8016de0:	08016f39 	.word	0x08016f39
 8016de4:	08016f39 	.word	0x08016f39
 8016de8:	08016f39 	.word	0x08016f39
 8016dec:	08016f39 	.word	0x08016f39
 8016df0:	08016f3d 	.word	0x08016f3d
 8016df4:	08016f39 	.word	0x08016f39
 8016df8:	08016f39 	.word	0x08016f39
 8016dfc:	08016f39 	.word	0x08016f39
 8016e00:	08016f39 	.word	0x08016f39
 8016e04:	08016f39 	.word	0x08016f39
 8016e08:	08016f39 	.word	0x08016f39
 8016e0c:	08016f39 	.word	0x08016f39
 8016e10:	08016f39 	.word	0x08016f39
 8016e14:	08016f39 	.word	0x08016f39
 8016e18:	08016f39 	.word	0x08016f39
 8016e1c:	08016f39 	.word	0x08016f39
 8016e20:	08016f39 	.word	0x08016f39
 8016e24:	08016f39 	.word	0x08016f39
 8016e28:	08016f39 	.word	0x08016f39
 8016e2c:	08016e87 	.word	0x08016e87
 8016e30:	08016f39 	.word	0x08016f39
 8016e34:	08016f39 	.word	0x08016f39
 8016e38:	08016f39 	.word	0x08016f39
 8016e3c:	08016f39 	.word	0x08016f39
 8016e40:	08016f39 	.word	0x08016f39
 8016e44:	08016f39 	.word	0x08016f39
 8016e48:	08016f39 	.word	0x08016f39
 8016e4c:	08016f39 	.word	0x08016f39
 8016e50:	08016f39 	.word	0x08016f39
 8016e54:	08016e7d 	.word	0x08016e7d
		case 'V':
			if (plen !=2) return 1;
 8016e58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016e5a:	2b02      	cmp	r3, #2
 8016e5c:	d001      	beq.n	8016e62 <process_frame_cmd+0x34a>
 8016e5e:	2301      	movs	r3, #1
 8016e60:	e07f      	b.n	8016f62 <process_frame_cmd+0x44a>
			memcpy(&s, param, sizeof(s));
 8016e62:	683b      	ldr	r3, [r7, #0]
 8016e64:	881b      	ldrh	r3, [r3, #0]
 8016e66:	b29b      	uxth	r3, r3
 8016e68:	85fb      	strh	r3, [r7, #46]	; 0x2e
		    train_set_target_speed(num, s);
 8016e6a:	79bb      	ldrb	r3, [r7, #6]
 8016e6c:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8016e70:	4611      	mov	r1, r2
 8016e72:	4618      	mov	r0, r3
 8016e74:	f001 fcf6 	bl	8018864 <train_set_target_speed>
			return 0;
 8016e78:	2300      	movs	r3, #0
 8016e7a:	e072      	b.n	8016f62 <process_frame_cmd+0x44a>
			break;
		case 'a':
			//task_auto_stop_auto();
			break;
		case 'z':
			rc = 0; // TODO train_reset_pos_estimate(num);
 8016e7c:	2300      	movs	r3, #0
 8016e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
			return rc;
 8016e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016e82:	b2db      	uxtb	r3, r3
 8016e84:	e06d      	b.n	8016f62 <process_frame_cmd+0x44a>
			break;
		case 'p': {
			const train_config_t *tcnf = get_train_cnf(num);
 8016e86:	79bb      	ldrb	r3, [r7, #6]
 8016e88:	4618      	mov	r0, r3
 8016e8a:	f7ff fa93 	bl	80163b4 <get_train_cnf>
 8016e8e:	63b8      	str	r0, [r7, #56]	; 0x38
			if (tcnf) {
 8016e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e92:	2b00      	cmp	r3, #0
 8016e94:	d02d      	beq.n	8016ef2 <process_frame_cmd+0x3da>
				rc = param_get_value(train_params, (void *)tcnf, (char *)param, &v, &d, &min, &max);
 8016e96:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8016e9a:	f107 031c 	add.w	r3, r7, #28
 8016e9e:	9302      	str	r3, [sp, #8]
 8016ea0:	f107 0320 	add.w	r3, r7, #32
 8016ea4:	9301      	str	r3, [sp, #4]
 8016ea6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016eaa:	9300      	str	r3, [sp, #0]
 8016eac:	4613      	mov	r3, r2
 8016eae:	683a      	ldr	r2, [r7, #0]
 8016eb0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8016eb2:	4830      	ldr	r0, [pc, #192]	; (8016f74 <process_frame_cmd+0x45c>)
 8016eb4:	f7ff f961 	bl	801617a <param_get_value>
 8016eb8:	63f8      	str	r0, [r7, #60]	; 0x3c
				memcpy(rbuf, &v,   sizeof(int32_t)); rbuf += sizeof(int32_t);
 8016eba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016ebc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016ebe:	601a      	str	r2, [r3, #0]
 8016ec0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016ec2:	3304      	adds	r3, #4
 8016ec4:	64fb      	str	r3, [r7, #76]	; 0x4c
				memcpy(rbuf, &d,   sizeof(int32_t)); rbuf += sizeof(int32_t);
 8016ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016ec8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016eca:	601a      	str	r2, [r3, #0]
 8016ecc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016ece:	3304      	adds	r3, #4
 8016ed0:	64fb      	str	r3, [r7, #76]	; 0x4c
				memcpy(rbuf, &min, sizeof(int32_t)); rbuf += sizeof(int32_t);
 8016ed2:	6a3a      	ldr	r2, [r7, #32]
 8016ed4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016ed6:	601a      	str	r2, [r3, #0]
 8016ed8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016eda:	3304      	adds	r3, #4
 8016edc:	64fb      	str	r3, [r7, #76]	; 0x4c
				memcpy(rbuf, &max, sizeof(int32_t)); rbuf += sizeof(int32_t);
 8016ede:	69fa      	ldr	r2, [r7, #28]
 8016ee0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016ee2:	601a      	str	r2, [r3, #0]
 8016ee4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016ee6:	3304      	adds	r3, #4
 8016ee8:	64fb      	str	r3, [r7, #76]	; 0x4c
				*prlen = 4*sizeof(int32_t);
 8016eea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016eec:	2210      	movs	r2, #16
 8016eee:	601a      	str	r2, [r3, #0]
 8016ef0:	e001      	b.n	8016ef6 <process_frame_cmd+0x3de>
			} else {
				rc = 3;
 8016ef2:	2303      	movs	r3, #3
 8016ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
			return rc;
 8016ef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016ef8:	b2db      	uxtb	r3, r3
 8016efa:	e032      	b.n	8016f62 <process_frame_cmd+0x44a>
		}

		case 'P': {
			if (plen < 4+1) return 1;
 8016efc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016efe:	2b04      	cmp	r3, #4
 8016f00:	dc01      	bgt.n	8016f06 <process_frame_cmd+0x3ee>
 8016f02:	2301      	movs	r3, #1
 8016f04:	e02d      	b.n	8016f62 <process_frame_cmd+0x44a>
			const train_config_t *tcnf = get_train_cnf(num);
 8016f06:	79bb      	ldrb	r3, [r7, #6]
 8016f08:	4618      	mov	r0, r3
 8016f0a:	f7ff fa53 	bl	80163b4 <get_train_cnf>
 8016f0e:	6378      	str	r0, [r7, #52]	; 0x34
			if (tcnf) {
 8016f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016f12:	2b00      	cmp	r3, #0
 8016f14:	d00b      	beq.n	8016f2e <process_frame_cmd+0x416>
				int32_t v;
				memcpy(&v, param, sizeof(int32_t));
 8016f16:	683b      	ldr	r3, [r7, #0]
 8016f18:	681b      	ldr	r3, [r3, #0]
 8016f1a:	60bb      	str	r3, [r7, #8]
			    rc = param_set_value(train_params, (void *)tcnf, (char *)(param+sizeof(int32_t)), v);
 8016f1c:	683b      	ldr	r3, [r7, #0]
 8016f1e:	1d1a      	adds	r2, r3, #4
 8016f20:	68bb      	ldr	r3, [r7, #8]
 8016f22:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016f24:	4813      	ldr	r0, [pc, #76]	; (8016f74 <process_frame_cmd+0x45c>)
 8016f26:	f7ff f99a 	bl	801625e <param_set_value>
 8016f2a:	63f8      	str	r0, [r7, #60]	; 0x3c
 8016f2c:	e001      	b.n	8016f32 <process_frame_cmd+0x41a>
			} else {
				rc = 33;
 8016f2e:	2321      	movs	r3, #33	; 0x21
 8016f30:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
			return rc;
 8016f32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016f34:	b2db      	uxtb	r3, r3
 8016f36:	e014      	b.n	8016f62 <process_frame_cmd+0x44a>
		}

		default:
			return 33;
 8016f38:	2321      	movs	r3, #33	; 0x21
 8016f3a:	e012      	b.n	8016f62 <process_frame_cmd+0x44a>
			break;
 8016f3c:	bf00      	nop
		}
		break;
 8016f3e:	e00f      	b.n	8016f60 <process_frame_cmd+0x448>
	default:
		rbuf[0]=sel;
 8016f40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016f42:	79fa      	ldrb	r2, [r7, #7]
 8016f44:	701a      	strb	r2, [r3, #0]
		rbuf[1]=num;
 8016f46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016f48:	3301      	adds	r3, #1
 8016f4a:	79ba      	ldrb	r2, [r7, #6]
 8016f4c:	701a      	strb	r2, [r3, #0]
		rbuf[2]=cmd;
 8016f4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016f50:	3302      	adds	r3, #2
 8016f52:	797a      	ldrb	r2, [r7, #5]
 8016f54:	701a      	strb	r2, [r3, #0]
		*prlen = 3;
 8016f56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016f58:	2203      	movs	r2, #3
 8016f5a:	601a      	str	r2, [r3, #0]
		return 5;
 8016f5c:	2305      	movs	r3, #5
 8016f5e:	e000      	b.n	8016f62 <process_frame_cmd+0x44a>
		break;
	}
	return 0;
 8016f60:	2300      	movs	r3, #0
}
 8016f62:	4618      	mov	r0, r3
 8016f64:	3740      	adds	r7, #64	; 0x40
 8016f66:	46bd      	mov	sp, r7
 8016f68:	bd80      	pop	{r7, pc}
 8016f6a:	bf00      	nop
 8016f6c:	20000520 	.word	0x20000520
 8016f70:	0801c54c 	.word	0x0801c54c
 8016f74:	0801c30c 	.word	0x0801c30c

08016f78 <trainctl_notif>:

static int num_trainctl_notif = 0;

void trainctl_notif(uint8_t sel, uint8_t num, uint8_t cmd, uint8_t *dta, int dtalen)
{
 8016f78:	b580      	push	{r7, lr}
 8016f7a:	b084      	sub	sp, #16
 8016f7c:	af02      	add	r7, sp, #8
 8016f7e:	603b      	str	r3, [r7, #0]
 8016f80:	4603      	mov	r3, r0
 8016f82:	71fb      	strb	r3, [r7, #7]
 8016f84:	460b      	mov	r3, r1
 8016f86:	71bb      	strb	r3, [r7, #6]
 8016f88:	4613      	mov	r3, r2
 8016f8a:	717b      	strb	r3, [r7, #5]
	num_trainctl_notif++;
 8016f8c:	4b0a      	ldr	r3, [pc, #40]	; (8016fb8 <trainctl_notif+0x40>)
 8016f8e:	681b      	ldr	r3, [r3, #0]
 8016f90:	3301      	adds	r3, #1
 8016f92:	4a09      	ldr	r2, [pc, #36]	; (8016fb8 <trainctl_notif+0x40>)
 8016f94:	6013      	str	r3, [r2, #0]
	if (cli_frame_mode) {
 8016f96:	4b09      	ldr	r3, [pc, #36]	; (8016fbc <trainctl_notif+0x44>)
 8016f98:	781b      	ldrb	r3, [r3, #0]
 8016f9a:	2b00      	cmp	r3, #0
 8016f9c:	d007      	beq.n	8016fae <trainctl_notif+0x36>
		frame_send_notif(sel, num, cmd, dta, dtalen);
 8016f9e:	797a      	ldrb	r2, [r7, #5]
 8016fa0:	79b9      	ldrb	r1, [r7, #6]
 8016fa2:	79f8      	ldrb	r0, [r7, #7]
 8016fa4:	693b      	ldr	r3, [r7, #16]
 8016fa6:	9300      	str	r3, [sp, #0]
 8016fa8:	683b      	ldr	r3, [r7, #0]
 8016faa:	f000 f891 	bl	80170d0 <frame_send_notif>
	}
}
 8016fae:	bf00      	nop
 8016fb0:	3708      	adds	r7, #8
 8016fb2:	46bd      	mov	sp, r7
 8016fb4:	bd80      	pop	{r7, pc}
 8016fb6:	bf00      	nop
 8016fb8:	200053dc 	.word	0x200053dc
 8016fbc:	20000520 	.word	0x20000520

08016fc0 <trainctl_notif2>:

void trainctl_notif2(uint8_t sel, uint8_t num, uint8_t cmd, char *msg, int32_t v1, int32_t v2, int32_t v3)
{
 8016fc0:	b580      	push	{r7, lr}
 8016fc2:	b086      	sub	sp, #24
 8016fc4:	af00      	add	r7, sp, #0
 8016fc6:	603b      	str	r3, [r7, #0]
 8016fc8:	4603      	mov	r3, r0
 8016fca:	71fb      	strb	r3, [r7, #7]
 8016fcc:	460b      	mov	r3, r1
 8016fce:	71bb      	strb	r3, [r7, #6]
 8016fd0:	4613      	mov	r3, r2
 8016fd2:	717b      	strb	r3, [r7, #5]
	static frame_msg_t m;
	char *p;
	int i=0;
 8016fd4:	2300      	movs	r3, #0
 8016fd6:	617b      	str	r3, [r7, #20]
	m.frm[i++] = '|';
 8016fd8:	697b      	ldr	r3, [r7, #20]
 8016fda:	1c5a      	adds	r2, r3, #1
 8016fdc:	617a      	str	r2, [r7, #20]
 8016fde:	4a3a      	ldr	r2, [pc, #232]	; (80170c8 <trainctl_notif2+0x108>)
 8016fe0:	4413      	add	r3, r2
 8016fe2:	227c      	movs	r2, #124	; 0x7c
 8016fe4:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = '_';
 8016fe6:	697b      	ldr	r3, [r7, #20]
 8016fe8:	1c5a      	adds	r2, r3, #1
 8016fea:	617a      	str	r2, [r7, #20]
 8016fec:	4a36      	ldr	r2, [pc, #216]	; (80170c8 <trainctl_notif2+0x108>)
 8016fee:	4413      	add	r3, r2
 8016ff0:	225f      	movs	r2, #95	; 0x5f
 8016ff2:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = 'N';
 8016ff4:	697b      	ldr	r3, [r7, #20]
 8016ff6:	1c5a      	adds	r2, r3, #1
 8016ff8:	617a      	str	r2, [r7, #20]
 8016ffa:	4a33      	ldr	r2, [pc, #204]	; (80170c8 <trainctl_notif2+0x108>)
 8016ffc:	4413      	add	r3, r2
 8016ffe:	224e      	movs	r2, #78	; 0x4e
 8017000:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = sel;
 8017002:	697b      	ldr	r3, [r7, #20]
 8017004:	1c5a      	adds	r2, r3, #1
 8017006:	617a      	str	r2, [r7, #20]
 8017008:	4a2f      	ldr	r2, [pc, #188]	; (80170c8 <trainctl_notif2+0x108>)
 801700a:	4413      	add	r3, r2
 801700c:	79fa      	ldrb	r2, [r7, #7]
 801700e:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = num;
 8017010:	697b      	ldr	r3, [r7, #20]
 8017012:	1c5a      	adds	r2, r3, #1
 8017014:	617a      	str	r2, [r7, #20]
 8017016:	4a2c      	ldr	r2, [pc, #176]	; (80170c8 <trainctl_notif2+0x108>)
 8017018:	4413      	add	r3, r2
 801701a:	79ba      	ldrb	r2, [r7, #6]
 801701c:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = cmd;
 801701e:	697b      	ldr	r3, [r7, #20]
 8017020:	1c5a      	adds	r2, r3, #1
 8017022:	617a      	str	r2, [r7, #20]
 8017024:	4a28      	ldr	r2, [pc, #160]	; (80170c8 <trainctl_notif2+0x108>)
 8017026:	4413      	add	r3, r2
 8017028:	797a      	ldrb	r2, [r7, #5]
 801702a:	709a      	strb	r2, [r3, #2]
	i += strlen(p);
	m.frm[i++]= '/';
	p = itoa(v2, (char *)m.frm+i, 10);
	i += strlen(p);
#else
	memcpy(m.frm+i, &v1, sizeof(int32_t));
 801702c:	697b      	ldr	r3, [r7, #20]
 801702e:	4a27      	ldr	r2, [pc, #156]	; (80170cc <trainctl_notif2+0x10c>)
 8017030:	4413      	add	r3, r2
 8017032:	6a3a      	ldr	r2, [r7, #32]
 8017034:	601a      	str	r2, [r3, #0]
	i += sizeof(int32_t);
 8017036:	697b      	ldr	r3, [r7, #20]
 8017038:	3304      	adds	r3, #4
 801703a:	617b      	str	r3, [r7, #20]
	memcpy(m.frm+i, &v2, sizeof(int32_t));
 801703c:	697b      	ldr	r3, [r7, #20]
 801703e:	4a23      	ldr	r2, [pc, #140]	; (80170cc <trainctl_notif2+0x10c>)
 8017040:	4413      	add	r3, r2
 8017042:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017044:	601a      	str	r2, [r3, #0]
	i += sizeof(int32_t);
 8017046:	697b      	ldr	r3, [r7, #20]
 8017048:	3304      	adds	r3, #4
 801704a:	617b      	str	r3, [r7, #20]
	memcpy(m.frm+i, &v3, sizeof(int32_t));
 801704c:	697b      	ldr	r3, [r7, #20]
 801704e:	4a1f      	ldr	r2, [pc, #124]	; (80170cc <trainctl_notif2+0x10c>)
 8017050:	4413      	add	r3, r2
 8017052:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017054:	601a      	str	r2, [r3, #0]
	i += sizeof(int32_t);
 8017056:	697b      	ldr	r3, [r7, #20]
 8017058:	3304      	adds	r3, #4
 801705a:	617b      	str	r3, [r7, #20]
 	p = strncpy((char *)m.frm+i, msg, 10);
 801705c:	697b      	ldr	r3, [r7, #20]
 801705e:	4a1b      	ldr	r2, [pc, #108]	; (80170cc <trainctl_notif2+0x10c>)
 8017060:	4413      	add	r3, r2
 8017062:	220a      	movs	r2, #10
 8017064:	6839      	ldr	r1, [r7, #0]
 8017066:	4618      	mov	r0, r3
 8017068:	f002 fd9a 	bl	8019ba0 <strncpy>
 801706c:	6138      	str	r0, [r7, #16]
	m.frm[i+10]='\0';
 801706e:	697b      	ldr	r3, [r7, #20]
 8017070:	330a      	adds	r3, #10
 8017072:	4a15      	ldr	r2, [pc, #84]	; (80170c8 <trainctl_notif2+0x108>)
 8017074:	4413      	add	r3, r2
 8017076:	2200      	movs	r2, #0
 8017078:	709a      	strb	r2, [r3, #2]
	i += strlen(p);
 801707a:	6938      	ldr	r0, [r7, #16]
 801707c:	f7e9 f8b2 	bl	80001e4 <strlen>
 8017080:	4602      	mov	r2, r0
 8017082:	697b      	ldr	r3, [r7, #20]
 8017084:	4413      	add	r3, r2
 8017086:	617b      	str	r3, [r7, #20]
#endif
	m.frm[i++]= '\0';
 8017088:	697b      	ldr	r3, [r7, #20]
 801708a:	1c5a      	adds	r2, r3, #1
 801708c:	617a      	str	r2, [r7, #20]
 801708e:	4a0e      	ldr	r2, [pc, #56]	; (80170c8 <trainctl_notif2+0x108>)
 8017090:	4413      	add	r3, r2
 8017092:	2200      	movs	r2, #0
 8017094:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = '|';
 8017096:	697b      	ldr	r3, [r7, #20]
 8017098:	1c5a      	adds	r2, r3, #1
 801709a:	617a      	str	r2, [r7, #20]
 801709c:	4a0a      	ldr	r2, [pc, #40]	; (80170c8 <trainctl_notif2+0x108>)
 801709e:	4413      	add	r3, r2
 80170a0:	227c      	movs	r2, #124	; 0x7c
 80170a2:	709a      	strb	r2, [r3, #2]
	int l = frm_escape(m.frm, i, FRM_MAX_LEN);
 80170a4:	221f      	movs	r2, #31
 80170a6:	6979      	ldr	r1, [r7, #20]
 80170a8:	4808      	ldr	r0, [pc, #32]	; (80170cc <trainctl_notif2+0x10c>)
 80170aa:	f7ff fbb8 	bl	801681e <frm_escape>
 80170ae:	60f8      	str	r0, [r7, #12]
	if (l>0) txframe_send_notif(&m, l);
 80170b0:	68fb      	ldr	r3, [r7, #12]
 80170b2:	2b00      	cmp	r3, #0
 80170b4:	dd03      	ble.n	80170be <trainctl_notif2+0xfe>
 80170b6:	68f9      	ldr	r1, [r7, #12]
 80170b8:	4803      	ldr	r0, [pc, #12]	; (80170c8 <trainctl_notif2+0x108>)
 80170ba:	f7ff facf 	bl	801665c <txframe_send_notif>
}
 80170be:	bf00      	nop
 80170c0:	3718      	adds	r7, #24
 80170c2:	46bd      	mov	sp, r7
 80170c4:	bd80      	pop	{r7, pc}
 80170c6:	bf00      	nop
 80170c8:	200053e8 	.word	0x200053e8
 80170cc:	200053ea 	.word	0x200053ea

080170d0 <frame_send_notif>:


void frame_send_notif(uint8_t sel, uint8_t num, uint8_t cmd, uint8_t *dta, int dtalen)
{
 80170d0:	b580      	push	{r7, lr}
 80170d2:	b084      	sub	sp, #16
 80170d4:	af00      	add	r7, sp, #0
 80170d6:	603b      	str	r3, [r7, #0]
 80170d8:	4603      	mov	r3, r0
 80170da:	71fb      	strb	r3, [r7, #7]
 80170dc:	460b      	mov	r3, r1
 80170de:	71bb      	strb	r3, [r7, #6]
 80170e0:	4613      	mov	r3, r2
 80170e2:	717b      	strb	r3, [r7, #5]
	static frame_msg_t m;
	if (dtalen>FRM_MAX_LEN-8) dtalen=FRM_MAX_LEN-8;
 80170e4:	69bb      	ldr	r3, [r7, #24]
 80170e6:	2b17      	cmp	r3, #23
 80170e8:	dd01      	ble.n	80170ee <frame_send_notif+0x1e>
 80170ea:	2317      	movs	r3, #23
 80170ec:	61bb      	str	r3, [r7, #24]
	int i=0;
 80170ee:	2300      	movs	r3, #0
 80170f0:	60fb      	str	r3, [r7, #12]
	m.frm[i++] = '|';
 80170f2:	68fb      	ldr	r3, [r7, #12]
 80170f4:	1c5a      	adds	r2, r3, #1
 80170f6:	60fa      	str	r2, [r7, #12]
 80170f8:	4a25      	ldr	r2, [pc, #148]	; (8017190 <frame_send_notif+0xc0>)
 80170fa:	4413      	add	r3, r2
 80170fc:	227c      	movs	r2, #124	; 0x7c
 80170fe:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = '_';
 8017100:	68fb      	ldr	r3, [r7, #12]
 8017102:	1c5a      	adds	r2, r3, #1
 8017104:	60fa      	str	r2, [r7, #12]
 8017106:	4a22      	ldr	r2, [pc, #136]	; (8017190 <frame_send_notif+0xc0>)
 8017108:	4413      	add	r3, r2
 801710a:	225f      	movs	r2, #95	; 0x5f
 801710c:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = 'N';
 801710e:	68fb      	ldr	r3, [r7, #12]
 8017110:	1c5a      	adds	r2, r3, #1
 8017112:	60fa      	str	r2, [r7, #12]
 8017114:	4a1e      	ldr	r2, [pc, #120]	; (8017190 <frame_send_notif+0xc0>)
 8017116:	4413      	add	r3, r2
 8017118:	224e      	movs	r2, #78	; 0x4e
 801711a:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = sel;
 801711c:	68fb      	ldr	r3, [r7, #12]
 801711e:	1c5a      	adds	r2, r3, #1
 8017120:	60fa      	str	r2, [r7, #12]
 8017122:	4a1b      	ldr	r2, [pc, #108]	; (8017190 <frame_send_notif+0xc0>)
 8017124:	4413      	add	r3, r2
 8017126:	79fa      	ldrb	r2, [r7, #7]
 8017128:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = num;
 801712a:	68fb      	ldr	r3, [r7, #12]
 801712c:	1c5a      	adds	r2, r3, #1
 801712e:	60fa      	str	r2, [r7, #12]
 8017130:	4a17      	ldr	r2, [pc, #92]	; (8017190 <frame_send_notif+0xc0>)
 8017132:	4413      	add	r3, r2
 8017134:	79ba      	ldrb	r2, [r7, #6]
 8017136:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = cmd;
 8017138:	68fb      	ldr	r3, [r7, #12]
 801713a:	1c5a      	adds	r2, r3, #1
 801713c:	60fa      	str	r2, [r7, #12]
 801713e:	4a14      	ldr	r2, [pc, #80]	; (8017190 <frame_send_notif+0xc0>)
 8017140:	4413      	add	r3, r2
 8017142:	797a      	ldrb	r2, [r7, #5]
 8017144:	709a      	strb	r2, [r3, #2]
	memcpy(m.frm+i, dta, dtalen);
 8017146:	68fb      	ldr	r3, [r7, #12]
 8017148:	4a12      	ldr	r2, [pc, #72]	; (8017194 <frame_send_notif+0xc4>)
 801714a:	4413      	add	r3, r2
 801714c:	69ba      	ldr	r2, [r7, #24]
 801714e:	6839      	ldr	r1, [r7, #0]
 8017150:	4618      	mov	r0, r3
 8017152:	f002 fc15 	bl	8019980 <memcpy>
	i += dtalen;
 8017156:	68fa      	ldr	r2, [r7, #12]
 8017158:	69bb      	ldr	r3, [r7, #24]
 801715a:	4413      	add	r3, r2
 801715c:	60fb      	str	r3, [r7, #12]
	m.frm[i++] = '|';
 801715e:	68fb      	ldr	r3, [r7, #12]
 8017160:	1c5a      	adds	r2, r3, #1
 8017162:	60fa      	str	r2, [r7, #12]
 8017164:	4a0a      	ldr	r2, [pc, #40]	; (8017190 <frame_send_notif+0xc0>)
 8017166:	4413      	add	r3, r2
 8017168:	227c      	movs	r2, #124	; 0x7c
 801716a:	709a      	strb	r2, [r3, #2]
	int l = frm_escape(m.frm, i, FRM_MAX_LEN);
 801716c:	221f      	movs	r2, #31
 801716e:	68f9      	ldr	r1, [r7, #12]
 8017170:	4808      	ldr	r0, [pc, #32]	; (8017194 <frame_send_notif+0xc4>)
 8017172:	f7ff fb54 	bl	801681e <frm_escape>
 8017176:	60b8      	str	r0, [r7, #8]
	if (l>0) txframe_send_notif(&m, l);
 8017178:	68bb      	ldr	r3, [r7, #8]
 801717a:	2b00      	cmp	r3, #0
 801717c:	dd03      	ble.n	8017186 <frame_send_notif+0xb6>
 801717e:	68b9      	ldr	r1, [r7, #8]
 8017180:	4803      	ldr	r0, [pc, #12]	; (8017190 <frame_send_notif+0xc0>)
 8017182:	f7ff fa6b 	bl	801665c <txframe_send_notif>
}
 8017186:	bf00      	nop
 8017188:	3710      	adds	r7, #16
 801718a:	46bd      	mov	sp, r7
 801718c:	bd80      	pop	{r7, pc}
 801718e:	bf00      	nop
 8017190:	2000540c 	.word	0x2000540c
 8017194:	2000540e 	.word	0x2000540e

08017198 <txframe_send_msg64>:

static void txframe_send_msg64(msg_64_t *msg)
{
 8017198:	b580      	push	{r7, lr}
 801719a:	b084      	sub	sp, #16
 801719c:	af00      	add	r7, sp, #0
 801719e:	6078      	str	r0, [r7, #4]
    static frame_msg_t m;
    //int dtalen = 8;
    int i=0;
 80171a0:	2300      	movs	r3, #0
 80171a2:	60fb      	str	r3, [r7, #12]
    m.frm[i++] = '|';
 80171a4:	68fb      	ldr	r3, [r7, #12]
 80171a6:	1c5a      	adds	r2, r3, #1
 80171a8:	60fa      	str	r2, [r7, #12]
 80171aa:	4a39      	ldr	r2, [pc, #228]	; (8017290 <txframe_send_msg64+0xf8>)
 80171ac:	4413      	add	r3, r2
 80171ae:	227c      	movs	r2, #124	; 0x7c
 80171b0:	709a      	strb	r2, [r3, #2]
    m.frm[i++] = '_';
 80171b2:	68fb      	ldr	r3, [r7, #12]
 80171b4:	1c5a      	adds	r2, r3, #1
 80171b6:	60fa      	str	r2, [r7, #12]
 80171b8:	4a35      	ldr	r2, [pc, #212]	; (8017290 <txframe_send_msg64+0xf8>)
 80171ba:	4413      	add	r3, r2
 80171bc:	225f      	movs	r2, #95	; 0x5f
 80171be:	709a      	strb	r2, [r3, #2]
    m.frm[i++] = '6';
 80171c0:	68fb      	ldr	r3, [r7, #12]
 80171c2:	1c5a      	adds	r2, r3, #1
 80171c4:	60fa      	str	r2, [r7, #12]
 80171c6:	4a32      	ldr	r2, [pc, #200]	; (8017290 <txframe_send_msg64+0xf8>)
 80171c8:	4413      	add	r3, r2
 80171ca:	2236      	movs	r2, #54	; 0x36
 80171cc:	709a      	strb	r2, [r3, #2]
    m.frm[i++] = msg->to;
 80171ce:	68fb      	ldr	r3, [r7, #12]
 80171d0:	1c5a      	adds	r2, r3, #1
 80171d2:	60fa      	str	r2, [r7, #12]
 80171d4:	687a      	ldr	r2, [r7, #4]
 80171d6:	7811      	ldrb	r1, [r2, #0]
 80171d8:	4a2d      	ldr	r2, [pc, #180]	; (8017290 <txframe_send_msg64+0xf8>)
 80171da:	4413      	add	r3, r2
 80171dc:	460a      	mov	r2, r1
 80171de:	709a      	strb	r2, [r3, #2]
    m.frm[i++] = msg->from;
 80171e0:	68fb      	ldr	r3, [r7, #12]
 80171e2:	1c5a      	adds	r2, r3, #1
 80171e4:	60fa      	str	r2, [r7, #12]
 80171e6:	687a      	ldr	r2, [r7, #4]
 80171e8:	7851      	ldrb	r1, [r2, #1]
 80171ea:	4a29      	ldr	r2, [pc, #164]	; (8017290 <txframe_send_msg64+0xf8>)
 80171ec:	4413      	add	r3, r2
 80171ee:	460a      	mov	r2, r1
 80171f0:	709a      	strb	r2, [r3, #2]
    m.frm[i++] = msg->rbytes[0];
 80171f2:	68fb      	ldr	r3, [r7, #12]
 80171f4:	1c5a      	adds	r2, r3, #1
 80171f6:	60fa      	str	r2, [r7, #12]
 80171f8:	687a      	ldr	r2, [r7, #4]
 80171fa:	7891      	ldrb	r1, [r2, #2]
 80171fc:	4a24      	ldr	r2, [pc, #144]	; (8017290 <txframe_send_msg64+0xf8>)
 80171fe:	4413      	add	r3, r2
 8017200:	460a      	mov	r2, r1
 8017202:	709a      	strb	r2, [r3, #2]
    m.frm[i++] = msg->rbytes[1];
 8017204:	68fb      	ldr	r3, [r7, #12]
 8017206:	1c5a      	adds	r2, r3, #1
 8017208:	60fa      	str	r2, [r7, #12]
 801720a:	687a      	ldr	r2, [r7, #4]
 801720c:	78d1      	ldrb	r1, [r2, #3]
 801720e:	4a20      	ldr	r2, [pc, #128]	; (8017290 <txframe_send_msg64+0xf8>)
 8017210:	4413      	add	r3, r2
 8017212:	460a      	mov	r2, r1
 8017214:	709a      	strb	r2, [r3, #2]
    m.frm[i++] = msg->rbytes[2];
 8017216:	68fb      	ldr	r3, [r7, #12]
 8017218:	1c5a      	adds	r2, r3, #1
 801721a:	60fa      	str	r2, [r7, #12]
 801721c:	687a      	ldr	r2, [r7, #4]
 801721e:	7911      	ldrb	r1, [r2, #4]
 8017220:	4a1b      	ldr	r2, [pc, #108]	; (8017290 <txframe_send_msg64+0xf8>)
 8017222:	4413      	add	r3, r2
 8017224:	460a      	mov	r2, r1
 8017226:	709a      	strb	r2, [r3, #2]
    m.frm[i++] = msg->rbytes[3];
 8017228:	68fb      	ldr	r3, [r7, #12]
 801722a:	1c5a      	adds	r2, r3, #1
 801722c:	60fa      	str	r2, [r7, #12]
 801722e:	687a      	ldr	r2, [r7, #4]
 8017230:	7951      	ldrb	r1, [r2, #5]
 8017232:	4a17      	ldr	r2, [pc, #92]	; (8017290 <txframe_send_msg64+0xf8>)
 8017234:	4413      	add	r3, r2
 8017236:	460a      	mov	r2, r1
 8017238:	709a      	strb	r2, [r3, #2]
    m.frm[i++] = msg->rbytes[4];
 801723a:	68fb      	ldr	r3, [r7, #12]
 801723c:	1c5a      	adds	r2, r3, #1
 801723e:	60fa      	str	r2, [r7, #12]
 8017240:	687a      	ldr	r2, [r7, #4]
 8017242:	7991      	ldrb	r1, [r2, #6]
 8017244:	4a12      	ldr	r2, [pc, #72]	; (8017290 <txframe_send_msg64+0xf8>)
 8017246:	4413      	add	r3, r2
 8017248:	460a      	mov	r2, r1
 801724a:	709a      	strb	r2, [r3, #2]
    m.frm[i++] = msg->rbytes[5];
 801724c:	68fb      	ldr	r3, [r7, #12]
 801724e:	1c5a      	adds	r2, r3, #1
 8017250:	60fa      	str	r2, [r7, #12]
 8017252:	687a      	ldr	r2, [r7, #4]
 8017254:	79d1      	ldrb	r1, [r2, #7]
 8017256:	4a0e      	ldr	r2, [pc, #56]	; (8017290 <txframe_send_msg64+0xf8>)
 8017258:	4413      	add	r3, r2
 801725a:	460a      	mov	r2, r1
 801725c:	709a      	strb	r2, [r3, #2]
    //memcpy(m.frm+i, dta, dtalen);
    //i += dtalen;
    m.frm[i++] = '|';
 801725e:	68fb      	ldr	r3, [r7, #12]
 8017260:	1c5a      	adds	r2, r3, #1
 8017262:	60fa      	str	r2, [r7, #12]
 8017264:	4a0a      	ldr	r2, [pc, #40]	; (8017290 <txframe_send_msg64+0xf8>)
 8017266:	4413      	add	r3, r2
 8017268:	227c      	movs	r2, #124	; 0x7c
 801726a:	709a      	strb	r2, [r3, #2]
    int l = frm_escape(m.frm, i, FRM_MAX_LEN);
 801726c:	221f      	movs	r2, #31
 801726e:	68f9      	ldr	r1, [r7, #12]
 8017270:	4808      	ldr	r0, [pc, #32]	; (8017294 <txframe_send_msg64+0xfc>)
 8017272:	f7ff fad4 	bl	801681e <frm_escape>
 8017276:	60b8      	str	r0, [r7, #8]
    if (l>0) txframe_send_notif(&m, l);
 8017278:	68bb      	ldr	r3, [r7, #8]
 801727a:	2b00      	cmp	r3, #0
 801727c:	dd03      	ble.n	8017286 <txframe_send_msg64+0xee>
 801727e:	68b9      	ldr	r1, [r7, #8]
 8017280:	4803      	ldr	r0, [pc, #12]	; (8017290 <txframe_send_msg64+0xf8>)
 8017282:	f7ff f9eb 	bl	801665c <txframe_send_notif>
}
 8017286:	bf00      	nop
 8017288:	3710      	adds	r7, #16
 801728a:	46bd      	mov	sp, r7
 801728c:	bd80      	pop	{r7, pc}
 801728e:	bf00      	nop
 8017290:	20005430 	.word	0x20005430
 8017294:	20005432 	.word	0x20005432

08017298 <frame_gather_stat>:


// buf should be long enough to store a int32_t with escape, so 8 bytes

int frame_gather_stat(stat_iterator_t *step, uint8_t *buf)
{
 8017298:	b580      	push	{r7, lr}
 801729a:	b086      	sub	sp, #24
 801729c:	af00      	add	r7, sp, #0
 801729e:	6078      	str	r0, [r7, #4]
 80172a0:	6039      	str	r1, [r7, #0]
	int done;
	int32_t v = stat_val_get(step, &done);
 80172a2:	f107 0310 	add.w	r3, r7, #16
 80172a6:	4619      	mov	r1, r3
 80172a8:	6878      	ldr	r0, [r7, #4]
 80172aa:	f7ff f995 	bl	80165d8 <stat_val_get>
 80172ae:	4603      	mov	r3, r0
 80172b0:	60fb      	str	r3, [r7, #12]
	if (done) return 0;
 80172b2:	693b      	ldr	r3, [r7, #16]
 80172b4:	2b00      	cmp	r3, #0
 80172b6:	d001      	beq.n	80172bc <frame_gather_stat+0x24>
 80172b8:	2300      	movs	r3, #0
 80172ba:	e00e      	b.n	80172da <frame_gather_stat+0x42>

	int l = _frm_escape2(buf, (void *) &v, 4, 8);
 80172bc:	f107 010c 	add.w	r1, r7, #12
 80172c0:	2308      	movs	r3, #8
 80172c2:	2204      	movs	r2, #4
 80172c4:	6838      	ldr	r0, [r7, #0]
 80172c6:	f7ff fa63 	bl	8016790 <_frm_escape2>
 80172ca:	6178      	str	r0, [r7, #20]
	if (l<0) {
 80172cc:	697b      	ldr	r3, [r7, #20]
 80172ce:	2b00      	cmp	r3, #0
 80172d0:	da02      	bge.n	80172d8 <frame_gather_stat+0x40>
		return -1;
 80172d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80172d6:	e000      	b.n	80172da <frame_gather_stat+0x42>
	}
	return l;
 80172d8:	697b      	ldr	r3, [r7, #20]
}
 80172da:	4618      	mov	r0, r3
 80172dc:	3718      	adds	r7, #24
 80172de:	46bd      	mov	sp, r7
 80172e0:	bd80      	pop	{r7, pc}
	...

080172e4 <txframe_send_stat>:

volatile int stat_on_progress = 0;

void txframe_send_stat(void)
{
 80172e4:	b580      	push	{r7, lr}
 80172e6:	b08a      	sub	sp, #40	; 0x28
 80172e8:	af00      	add	r7, sp, #0
	if (stat_on_progress) return;
 80172ea:	4b08      	ldr	r3, [pc, #32]	; (801730c <txframe_send_stat+0x28>)
 80172ec:	681b      	ldr	r3, [r3, #0]
 80172ee:	2b00      	cmp	r3, #0
 80172f0:	d107      	bne.n	8017302 <txframe_send_stat+0x1e>
    frame_msg_t m;
    m.t = TXFRAME_TYPE_STAT;
 80172f2:	2304      	movs	r3, #4
 80172f4:	713b      	strb	r3, [r7, #4]
    txframe_send(&m, 1);
 80172f6:	1d3b      	adds	r3, r7, #4
 80172f8:	2101      	movs	r1, #1
 80172fa:	4618      	mov	r0, r3
 80172fc:	f001 fe8a 	bl	8019014 <txframe_send>
 8017300:	e000      	b.n	8017304 <txframe_send_stat+0x20>
	if (stat_on_progress) return;
 8017302:	bf00      	nop
}
 8017304:	3728      	adds	r7, #40	; 0x28
 8017306:	46bd      	mov	sp, r7
 8017308:	bd80      	pop	{r7, pc}
 801730a:	bf00      	nop
 801730c:	200053e0 	.word	0x200053e0

08017310 <frame_send_stat>:

uint32_t gtick = 0;

void frame_send_stat(void(*cb)(uint8_t *d, int l), uint32_t tick)
{
 8017310:	b580      	push	{r7, lr}
 8017312:	b08c      	sub	sp, #48	; 0x30
 8017314:	af00      	add	r7, sp, #0
 8017316:	6078      	str	r0, [r7, #4]
 8017318:	6039      	str	r1, [r7, #0]
	stat_on_progress = 1;
 801731a:	4b1d      	ldr	r3, [pc, #116]	; (8017390 <frame_send_stat+0x80>)
 801731c:	2201      	movs	r2, #1
 801731e:	601a      	str	r2, [r3, #0]
    //if ((1)) tick = 0xAA55AA55;
    //int l = _frm_escape2(buf, (void *) &tick, 4, 8); // tick now handld as normal stat
    //cb(buf, l);

	stat_iterator_t step;
    int eos = stat_iterator_reset(&step);
 8017320:	f107 030c 	add.w	r3, r7, #12
 8017324:	4618      	mov	r0, r3
 8017326:	f7ff f907 	bl	8016538 <stat_iterator_reset>
 801732a:	62f8      	str	r0, [r7, #44]	; 0x2c
    gtick = tick;
 801732c:	4a19      	ldr	r2, [pc, #100]	; (8017394 <frame_send_stat+0x84>)
 801732e:	683b      	ldr	r3, [r7, #0]
 8017330:	6013      	str	r3, [r2, #0]
    
    int nv = 0; // for debug only, num of val
 8017332:	2300      	movs	r3, #0
 8017334:	62bb      	str	r3, [r7, #40]	; 0x28
    int nb = 0; // and num of bytes
 8017336:	2300      	movs	r3, #0
 8017338:	627b      	str	r3, [r7, #36]	; 0x24
    for (;!eos; eos=stat_iterator_next(&step)) {
 801733a:	e01e      	b.n	801737a <frame_send_stat+0x6a>
		int l = frame_gather_stat(&step, buf);
 801733c:	f107 0218 	add.w	r2, r7, #24
 8017340:	f107 030c 	add.w	r3, r7, #12
 8017344:	4611      	mov	r1, r2
 8017346:	4618      	mov	r0, r3
 8017348:	f7ff ffa6 	bl	8017298 <frame_gather_stat>
 801734c:	6238      	str	r0, [r7, #32]
		if (l<=0) {
 801734e:	6a3b      	ldr	r3, [r7, #32]
 8017350:	2b00      	cmp	r3, #0
 8017352:	dd19      	ble.n	8017388 <frame_send_stat+0x78>
			return;
		}
        nv++;
 8017354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017356:	3301      	adds	r3, #1
 8017358:	62bb      	str	r3, [r7, #40]	; 0x28
        nb += l;
 801735a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801735c:	6a3b      	ldr	r3, [r7, #32]
 801735e:	4413      	add	r3, r2
 8017360:	627b      	str	r3, [r7, #36]	; 0x24
		cb(buf, l);
 8017362:	f107 0218 	add.w	r2, r7, #24
 8017366:	687b      	ldr	r3, [r7, #4]
 8017368:	6a39      	ldr	r1, [r7, #32]
 801736a:	4610      	mov	r0, r2
 801736c:	4798      	blx	r3
    for (;!eos; eos=stat_iterator_next(&step)) {
 801736e:	f107 030c 	add.w	r3, r7, #12
 8017372:	4618      	mov	r0, r3
 8017374:	f7ff f8f4 	bl	8016560 <stat_iterator_next>
 8017378:	62f8      	str	r0, [r7, #44]	; 0x2c
 801737a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801737c:	2b00      	cmp	r3, #0
 801737e:	d0dd      	beq.n	801733c <frame_send_stat+0x2c>
	}
    stat_on_progress = 0;
 8017380:	4b03      	ldr	r3, [pc, #12]	; (8017390 <frame_send_stat+0x80>)
 8017382:	2200      	movs	r2, #0
 8017384:	601a      	str	r2, [r3, #0]
 8017386:	e000      	b.n	801738a <frame_send_stat+0x7a>
			return;
 8017388:	bf00      	nop
}
 801738a:	3730      	adds	r7, #48	; 0x30
 801738c:	46bd      	mov	sp, r7
 801738e:	bd80      	pop	{r7, pc}
 8017390:	200053e0 	.word	0x200053e0
 8017394:	200053e4 	.word	0x200053e4

08017398 <itm_debug1>:
//void _itm_debug1(const char *msg, int v);
//void _itm_debug2(const char *msg, int v1, int v2);
void _itm_debug3(const char *msg, int32_t v1, int32_t v2, int32_t v3, int n);

static inline void itm_debug1(uint32_t f, const char *msg, int32_t v)
{
 8017398:	b580      	push	{r7, lr}
 801739a:	b086      	sub	sp, #24
 801739c:	af02      	add	r7, sp, #8
 801739e:	60f8      	str	r0, [r7, #12]
 80173a0:	60b9      	str	r1, [r7, #8]
 80173a2:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 80173a4:	4b08      	ldr	r3, [pc, #32]	; (80173c8 <itm_debug1+0x30>)
 80173a6:	681a      	ldr	r2, [r3, #0]
 80173a8:	68fb      	ldr	r3, [r7, #12]
 80173aa:	4013      	ands	r3, r2
 80173ac:	2b00      	cmp	r3, #0
 80173ae:	d007      	beq.n	80173c0 <itm_debug1+0x28>
 80173b0:	2301      	movs	r3, #1
 80173b2:	9300      	str	r3, [sp, #0]
 80173b4:	2300      	movs	r3, #0
 80173b6:	2200      	movs	r2, #0
 80173b8:	6879      	ldr	r1, [r7, #4]
 80173ba:	68b8      	ldr	r0, [r7, #8]
 80173bc:	f002 f8c2 	bl	8019544 <_itm_debug3>
}
 80173c0:	bf00      	nop
 80173c2:	3710      	adds	r7, #16
 80173c4:	46bd      	mov	sp, r7
 80173c6:	bd80      	pop	{r7, pc}
 80173c8:	20000610 	.word	0x20000610

080173cc <itm_debug2>:
static inline void itm_debug2(uint32_t f, const char *msg, int32_t v1, int32_t v2)
{
 80173cc:	b580      	push	{r7, lr}
 80173ce:	b086      	sub	sp, #24
 80173d0:	af02      	add	r7, sp, #8
 80173d2:	60f8      	str	r0, [r7, #12]
 80173d4:	60b9      	str	r1, [r7, #8]
 80173d6:	607a      	str	r2, [r7, #4]
 80173d8:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, 0, 2);
 80173da:	4b09      	ldr	r3, [pc, #36]	; (8017400 <itm_debug2+0x34>)
 80173dc:	681a      	ldr	r2, [r3, #0]
 80173de:	68fb      	ldr	r3, [r7, #12]
 80173e0:	4013      	ands	r3, r2
 80173e2:	2b00      	cmp	r3, #0
 80173e4:	d007      	beq.n	80173f6 <itm_debug2+0x2a>
 80173e6:	2302      	movs	r3, #2
 80173e8:	9300      	str	r3, [sp, #0]
 80173ea:	2300      	movs	r3, #0
 80173ec:	683a      	ldr	r2, [r7, #0]
 80173ee:	6879      	ldr	r1, [r7, #4]
 80173f0:	68b8      	ldr	r0, [r7, #8]
 80173f2:	f002 f8a7 	bl	8019544 <_itm_debug3>
}
 80173f6:	bf00      	nop
 80173f8:	3710      	adds	r7, #16
 80173fa:	46bd      	mov	sp, r7
 80173fc:	bd80      	pop	{r7, pc}
 80173fe:	bf00      	nop
 8017400:	20000610 	.word	0x20000610

08017404 <itm_debug3>:
static inline void itm_debug3(uint32_t f, const char *msg, int32_t v1, int32_t v2, int32_t v3)
{
 8017404:	b580      	push	{r7, lr}
 8017406:	b086      	sub	sp, #24
 8017408:	af02      	add	r7, sp, #8
 801740a:	60f8      	str	r0, [r7, #12]
 801740c:	60b9      	str	r1, [r7, #8]
 801740e:	607a      	str	r2, [r7, #4]
 8017410:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, v3, 3);
 8017412:	4b09      	ldr	r3, [pc, #36]	; (8017438 <itm_debug3+0x34>)
 8017414:	681a      	ldr	r2, [r3, #0]
 8017416:	68fb      	ldr	r3, [r7, #12]
 8017418:	4013      	ands	r3, r2
 801741a:	2b00      	cmp	r3, #0
 801741c:	d007      	beq.n	801742e <itm_debug3+0x2a>
 801741e:	2303      	movs	r3, #3
 8017420:	9300      	str	r3, [sp, #0]
 8017422:	69bb      	ldr	r3, [r7, #24]
 8017424:	683a      	ldr	r2, [r7, #0]
 8017426:	6879      	ldr	r1, [r7, #4]
 8017428:	68b8      	ldr	r0, [r7, #8]
 801742a:	f002 f88b 	bl	8019544 <_itm_debug3>
}
 801742e:	bf00      	nop
 8017430:	3710      	adds	r7, #16
 8017432:	46bd      	mov	sp, r7
 8017434:	bd80      	pop	{r7, pc}
 8017436:	bf00      	nop
 8017438:	20000610 	.word	0x20000610

0801743c <msg_error>:
		{MA_ADDR_MASK_5,						MA_ADDR_5_CTRL,			5}

};

static void msg_error(_UNUSED_ const char *msg)
{
 801743c:	b480      	push	{r7}
 801743e:	b083      	sub	sp, #12
 8017440:	af00      	add	r7, sp, #0
 8017442:	6078      	str	r0, [r7, #4]

}
 8017444:	bf00      	nop
 8017446:	370c      	adds	r7, #12
 8017448:	46bd      	mov	sp, r7
 801744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801744e:	4770      	bx	lr

08017450 <dispatch_m64>:


static void dispatch_m64(msg_64_t *m, int f)
{
 8017450:	b580      	push	{r7, lr}
 8017452:	b086      	sub	sp, #24
 8017454:	af00      	add	r7, sp, #0
 8017456:	6078      	str	r0, [r7, #4]
 8017458:	6039      	str	r1, [r7, #0]
	/* if (m->cmd == 0xA2) {
		itm_debug1(DBG_USB, "disp A2", m->cmd);
	}*/
    if (m->to == MA_BROADCAST) {
 801745a:	687b      	ldr	r3, [r7, #4]
 801745c:	781b      	ldrb	r3, [r3, #0]
 801745e:	2bff      	cmp	r3, #255	; 0xff
 8017460:	d11d      	bne.n	801749e <dispatch_m64+0x4e>
        for (int i=0; i<NQDEF; i++) {
 8017462:	2300      	movs	r3, #0
 8017464:	617b      	str	r3, [r7, #20]
 8017466:	e016      	b.n	8017496 <dispatch_m64+0x46>
            if (i == f) {
 8017468:	697a      	ldr	r2, [r7, #20]
 801746a:	683b      	ldr	r3, [r7, #0]
 801746c:	429a      	cmp	r2, r3
 801746e:	d00c      	beq.n	801748a <dispatch_m64+0x3a>
                continue;
            }
            mqf_t *q = qdef[i].to;
 8017470:	4a32      	ldr	r2, [pc, #200]	; (801753c <dispatch_m64+0xec>)
 8017472:	697b      	ldr	r3, [r7, #20]
 8017474:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8017478:	60bb      	str	r3, [r7, #8]
            if (!q) continue;
 801747a:	68bb      	ldr	r3, [r7, #8]
 801747c:	2b00      	cmp	r3, #0
 801747e:	d006      	beq.n	801748e <dispatch_m64+0x3e>
            mqf_write(q, m);
 8017480:	6879      	ldr	r1, [r7, #4]
 8017482:	68b8      	ldr	r0, [r7, #8]
 8017484:	f002 f966 	bl	8019754 <mqf_write>
 8017488:	e002      	b.n	8017490 <dispatch_m64+0x40>
                continue;
 801748a:	bf00      	nop
 801748c:	e000      	b.n	8017490 <dispatch_m64+0x40>
            if (!q) continue;
 801748e:	bf00      	nop
        for (int i=0; i<NQDEF; i++) {
 8017490:	697b      	ldr	r3, [r7, #20]
 8017492:	3301      	adds	r3, #1
 8017494:	617b      	str	r3, [r7, #20]
 8017496:	697b      	ldr	r3, [r7, #20]
 8017498:	2b09      	cmp	r3, #9
 801749a:	dde5      	ble.n	8017468 <dispatch_m64+0x18>
        }
        return;
 801749c:	e04b      	b.n	8017536 <dispatch_m64+0xe6>
    }
	for (int i=0; i<NROUTES; i++) {
 801749e:	2300      	movs	r3, #0
 80174a0:	613b      	str	r3, [r7, #16]
 80174a2:	e03b      	b.n	801751c <dispatch_m64+0xcc>
		if ((m->to & routes[i].mask) == routes[i].value) {
 80174a4:	687b      	ldr	r3, [r7, #4]
 80174a6:	7819      	ldrb	r1, [r3, #0]
 80174a8:	4825      	ldr	r0, [pc, #148]	; (8017540 <dispatch_m64+0xf0>)
 80174aa:	693a      	ldr	r2, [r7, #16]
 80174ac:	4613      	mov	r3, r2
 80174ae:	005b      	lsls	r3, r3, #1
 80174b0:	4413      	add	r3, r2
 80174b2:	4403      	add	r3, r0
 80174b4:	781b      	ldrb	r3, [r3, #0]
 80174b6:	400b      	ands	r3, r1
 80174b8:	b2d9      	uxtb	r1, r3
 80174ba:	4821      	ldr	r0, [pc, #132]	; (8017540 <dispatch_m64+0xf0>)
 80174bc:	693a      	ldr	r2, [r7, #16]
 80174be:	4613      	mov	r3, r2
 80174c0:	005b      	lsls	r3, r3, #1
 80174c2:	4413      	add	r3, r2
 80174c4:	4403      	add	r3, r0
 80174c6:	3301      	adds	r3, #1
 80174c8:	781b      	ldrb	r3, [r3, #0]
 80174ca:	4299      	cmp	r1, r3
 80174cc:	d123      	bne.n	8017516 <dispatch_m64+0xc6>
			if (f==routes[i].destq) {
 80174ce:	491c      	ldr	r1, [pc, #112]	; (8017540 <dispatch_m64+0xf0>)
 80174d0:	693a      	ldr	r2, [r7, #16]
 80174d2:	4613      	mov	r3, r2
 80174d4:	005b      	lsls	r3, r3, #1
 80174d6:	4413      	add	r3, r2
 80174d8:	440b      	add	r3, r1
 80174da:	3302      	adds	r3, #2
 80174dc:	781b      	ldrb	r3, [r3, #0]
 80174de:	461a      	mov	r2, r3
 80174e0:	683b      	ldr	r3, [r7, #0]
 80174e2:	4293      	cmp	r3, r2
 80174e4:	d105      	bne.n	80174f2 <dispatch_m64+0xa2>
				// loop
				itm_debug1(DBG_ERR|DBG_MSG, "loop", f);
 80174e6:	683a      	ldr	r2, [r7, #0]
 80174e8:	4916      	ldr	r1, [pc, #88]	; (8017544 <dispatch_m64+0xf4>)
 80174ea:	4817      	ldr	r0, [pc, #92]	; (8017548 <dispatch_m64+0xf8>)
 80174ec:	f7ff ff54 	bl	8017398 <itm_debug1>
				return;
 80174f0:	e021      	b.n	8017536 <dispatch_m64+0xe6>
			}
			mqf_t *q = qdef[routes[i].destq].to;
 80174f2:	4913      	ldr	r1, [pc, #76]	; (8017540 <dispatch_m64+0xf0>)
 80174f4:	693a      	ldr	r2, [r7, #16]
 80174f6:	4613      	mov	r3, r2
 80174f8:	005b      	lsls	r3, r3, #1
 80174fa:	4413      	add	r3, r2
 80174fc:	440b      	add	r3, r1
 80174fe:	3302      	adds	r3, #2
 8017500:	781b      	ldrb	r3, [r3, #0]
 8017502:	461a      	mov	r2, r3
 8017504:	4b0d      	ldr	r3, [pc, #52]	; (801753c <dispatch_m64+0xec>)
 8017506:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 801750a:	60fb      	str	r3, [r7, #12]
			mqf_write(q, m);
 801750c:	6879      	ldr	r1, [r7, #4]
 801750e:	68f8      	ldr	r0, [r7, #12]
 8017510:	f002 f920 	bl	8019754 <mqf_write>
			return;
 8017514:	e00f      	b.n	8017536 <dispatch_m64+0xe6>
	for (int i=0; i<NROUTES; i++) {
 8017516:	693b      	ldr	r3, [r7, #16]
 8017518:	3301      	adds	r3, #1
 801751a:	613b      	str	r3, [r7, #16]
 801751c:	693b      	ldr	r3, [r7, #16]
 801751e:	2b08      	cmp	r3, #8
 8017520:	ddc0      	ble.n	80174a4 <dispatch_m64+0x54>
		}
	}
	itm_debug1(DBG_ERR|DBG_MSG, "no route", m->to);
 8017522:	687b      	ldr	r3, [r7, #4]
 8017524:	781b      	ldrb	r3, [r3, #0]
 8017526:	461a      	mov	r2, r3
 8017528:	4908      	ldr	r1, [pc, #32]	; (801754c <dispatch_m64+0xfc>)
 801752a:	4807      	ldr	r0, [pc, #28]	; (8017548 <dispatch_m64+0xf8>)
 801752c:	f7ff ff34 	bl	8017398 <itm_debug1>
	msg_error("no route");
 8017530:	4806      	ldr	r0, [pc, #24]	; (801754c <dispatch_m64+0xfc>)
 8017532:	f7ff ff83 	bl	801743c <msg_error>
}
 8017536:	3718      	adds	r7, #24
 8017538:	46bd      	mov	sp, r7
 801753a:	bd80      	pop	{r7, pc}
 801753c:	0801c5dc 	.word	0x0801c5dc
 8017540:	0801c62c 	.word	0x0801c62c
 8017544:	0801a3f8 	.word	0x0801a3f8
 8017548:	80000002 	.word	0x80000002
 801754c:	0801a400 	.word	0x0801a400

08017550 <msgsrv_tick>:
	itm_debug3(DBG_ERR, "qu", d*100+i, q->maxuse, mqf_len(q));
	q->maxuse = 0;
}

void msgsrv_tick(_UNUSED_ uint32_t notif_flags, _UNUSED_ uint32_t tick, _UNUSED_ uint32_t dt)
{
 8017550:	b580      	push	{r7, lr}
 8017552:	b08c      	sub	sp, #48	; 0x30
 8017554:	af02      	add	r7, sp, #8
 8017556:	60f8      	str	r0, [r7, #12]
 8017558:	60b9      	str	r1, [r7, #8]
 801755a:	607a      	str	r2, [r7, #4]
        	itm_debug1(DBG_ERR|DBG_MSG, "bad size", sizeof(msg_64_t));
        	for (;;);
#endif
        }
    }
	for (int i=0; i<NQDEF; i++) {
 801755c:	2300      	movs	r3, #0
 801755e:	627b      	str	r3, [r7, #36]	; 0x24
 8017560:	e051      	b.n	8017606 <msgsrv_tick+0xb6>
		mqf_t *q = qdef[i].from;
 8017562:	4a2c      	ldr	r2, [pc, #176]	; (8017614 <msgsrv_tick+0xc4>)
 8017564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017566:	00db      	lsls	r3, r3, #3
 8017568:	4413      	add	r3, r2
 801756a:	685b      	ldr	r3, [r3, #4]
 801756c:	623b      	str	r3, [r7, #32]

		itm_debug2(DBG_MSG, "mlen1",i, mqf_len(q));
 801756e:	6a38      	ldr	r0, [r7, #32]
 8017570:	f002 f894 	bl	801969c <mqf_len>
 8017574:	4603      	mov	r3, r0
 8017576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017578:	4927      	ldr	r1, [pc, #156]	; (8017618 <msgsrv_tick+0xc8>)
 801757a:	2002      	movs	r0, #2
 801757c:	f7ff ff26 	bl	80173cc <itm_debug2>
		itm_debug3(DBG_MSG, "mth1 ", i, q->head, q->tail);
 8017580:	6a3b      	ldr	r3, [r7, #32]
 8017582:	881b      	ldrh	r3, [r3, #0]
 8017584:	b29b      	uxth	r3, r3
 8017586:	461a      	mov	r2, r3
 8017588:	6a3b      	ldr	r3, [r7, #32]
 801758a:	885b      	ldrh	r3, [r3, #2]
 801758c:	b29b      	uxth	r3, r3
 801758e:	9300      	str	r3, [sp, #0]
 8017590:	4613      	mov	r3, r2
 8017592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017594:	4921      	ldr	r1, [pc, #132]	; (801761c <msgsrv_tick+0xcc>)
 8017596:	2002      	movs	r0, #2
 8017598:	f7ff ff34 	bl	8017404 <itm_debug3>
		for (;;) {
				msg_64_t m;
				int rc = mqf_read(q, &m);
 801759c:	f107 0310 	add.w	r3, r7, #16
 80175a0:	4619      	mov	r1, r3
 80175a2:	6a38      	ldr	r0, [r7, #32]
 80175a4:	f002 f950 	bl	8019848 <mqf_read>
 80175a8:	61f8      	str	r0, [r7, #28]
				if (rc) break;
 80175aa:	69fb      	ldr	r3, [r7, #28]
 80175ac:	2b00      	cmp	r3, #0
 80175ae:	d01a      	beq.n	80175e6 <msgsrv_tick+0x96>
				if (i==5) {
					itm_debug1(DBG_MSG, "from ctrl", m.cmd);
				}
				dispatch_m64(&m, i);
			}
		itm_debug2(DBG_MSG, "mlen2",i, mqf_len(q));
 80175b0:	6a38      	ldr	r0, [r7, #32]
 80175b2:	f002 f873 	bl	801969c <mqf_len>
 80175b6:	4603      	mov	r3, r0
 80175b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80175ba:	4919      	ldr	r1, [pc, #100]	; (8017620 <msgsrv_tick+0xd0>)
 80175bc:	2002      	movs	r0, #2
 80175be:	f7ff ff05 	bl	80173cc <itm_debug2>
		itm_debug3(DBG_MSG, "mth2 ", i, q->head, q->tail);
 80175c2:	6a3b      	ldr	r3, [r7, #32]
 80175c4:	881b      	ldrh	r3, [r3, #0]
 80175c6:	b29b      	uxth	r3, r3
 80175c8:	461a      	mov	r2, r3
 80175ca:	6a3b      	ldr	r3, [r7, #32]
 80175cc:	885b      	ldrh	r3, [r3, #2]
 80175ce:	b29b      	uxth	r3, r3
 80175d0:	9300      	str	r3, [sp, #0]
 80175d2:	4613      	mov	r3, r2
 80175d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80175d6:	4913      	ldr	r1, [pc, #76]	; (8017624 <msgsrv_tick+0xd4>)
 80175d8:	2002      	movs	r0, #2
 80175da:	f7ff ff13 	bl	8017404 <itm_debug3>
	for (int i=0; i<NQDEF; i++) {
 80175de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175e0:	3301      	adds	r3, #1
 80175e2:	627b      	str	r3, [r7, #36]	; 0x24
 80175e4:	e00f      	b.n	8017606 <msgsrv_tick+0xb6>
				if (i==5) {
 80175e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175e8:	2b05      	cmp	r3, #5
 80175ea:	d105      	bne.n	80175f8 <msgsrv_tick+0xa8>
					itm_debug1(DBG_MSG, "from ctrl", m.cmd);
 80175ec:	7cbb      	ldrb	r3, [r7, #18]
 80175ee:	461a      	mov	r2, r3
 80175f0:	490d      	ldr	r1, [pc, #52]	; (8017628 <msgsrv_tick+0xd8>)
 80175f2:	2002      	movs	r0, #2
 80175f4:	f7ff fed0 	bl	8017398 <itm_debug1>
				dispatch_m64(&m, i);
 80175f8:	f107 0310 	add.w	r3, r7, #16
 80175fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80175fe:	4618      	mov	r0, r3
 8017600:	f7ff ff26 	bl	8017450 <dispatch_m64>
		for (;;) {
 8017604:	e7ca      	b.n	801759c <msgsrv_tick+0x4c>
	for (int i=0; i<NQDEF; i++) {
 8017606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017608:	2b09      	cmp	r3, #9
 801760a:	ddaa      	ble.n	8017562 <msgsrv_tick+0x12>
				dump_qusage(i, 1, qdef[i].to);
			}
			last = tick;
		}
	}
}
 801760c:	bf00      	nop
 801760e:	3728      	adds	r7, #40	; 0x28
 8017610:	46bd      	mov	sp, r7
 8017612:	bd80      	pop	{r7, pc}
 8017614:	0801c5dc 	.word	0x0801c5dc
 8017618:	0801a410 	.word	0x0801a410
 801761c:	0801a418 	.word	0x0801a418
 8017620:	0801a420 	.word	0x0801a420
 8017624:	0801a428 	.word	0x0801a428
 8017628:	0801a430 	.word	0x0801a430

0801762c <dump_msg>:


void dump_msg(mqf_t *mq, int n)
{
 801762c:	b580      	push	{r7, lr}
 801762e:	b086      	sub	sp, #24
 8017630:	af02      	add	r7, sp, #8
 8017632:	6078      	str	r0, [r7, #4]
 8017634:	6039      	str	r1, [r7, #0]
	int i = ( n + mq->tail ) % mq->num;
 8017636:	687b      	ldr	r3, [r7, #4]
 8017638:	885b      	ldrh	r3, [r3, #2]
 801763a:	b29b      	uxth	r3, r3
 801763c:	461a      	mov	r2, r3
 801763e:	683b      	ldr	r3, [r7, #0]
 8017640:	4413      	add	r3, r2
 8017642:	687a      	ldr	r2, [r7, #4]
 8017644:	7952      	ldrb	r2, [r2, #5]
 8017646:	fb93 f1f2 	sdiv	r1, r3, r2
 801764a:	fb02 f201 	mul.w	r2, r2, r1
 801764e:	1a9b      	subs	r3, r3, r2
 8017650:	60fb      	str	r3, [r7, #12]
	msg_64_t *msg = (msg_64_t *) &(mq->msgbuf[i*mq->msgsiz]);
 8017652:	687b      	ldr	r3, [r7, #4]
 8017654:	689b      	ldr	r3, [r3, #8]
 8017656:	687a      	ldr	r2, [r7, #4]
 8017658:	7912      	ldrb	r2, [r2, #4]
 801765a:	4611      	mov	r1, r2
 801765c:	68fa      	ldr	r2, [r7, #12]
 801765e:	fb02 f201 	mul.w	r2, r2, r1
 8017662:	4413      	add	r3, r2
 8017664:	60bb      	str	r3, [r7, #8]
	itm_debug3(DBG_ERR, "q", i, msg->cmd, msg->from);
 8017666:	68bb      	ldr	r3, [r7, #8]
 8017668:	789b      	ldrb	r3, [r3, #2]
 801766a:	461a      	mov	r2, r3
 801766c:	68bb      	ldr	r3, [r7, #8]
 801766e:	785b      	ldrb	r3, [r3, #1]
 8017670:	9300      	str	r3, [sp, #0]
 8017672:	4613      	mov	r3, r2
 8017674:	68fa      	ldr	r2, [r7, #12]
 8017676:	4904      	ldr	r1, [pc, #16]	; (8017688 <dump_msg+0x5c>)
 8017678:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 801767c:	f7ff fec2 	bl	8017404 <itm_debug3>
}
 8017680:	bf00      	nop
 8017682:	3710      	adds	r7, #16
 8017684:	46bd      	mov	sp, r7
 8017686:	bd80      	pop	{r7, pc}
 8017688:	0801a43c 	.word	0x0801a43c

0801768c <itm_debug1>:
{
 801768c:	b580      	push	{r7, lr}
 801768e:	b086      	sub	sp, #24
 8017690:	af02      	add	r7, sp, #8
 8017692:	60f8      	str	r0, [r7, #12]
 8017694:	60b9      	str	r1, [r7, #8]
 8017696:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 8017698:	4b08      	ldr	r3, [pc, #32]	; (80176bc <itm_debug1+0x30>)
 801769a:	681a      	ldr	r2, [r3, #0]
 801769c:	68fb      	ldr	r3, [r7, #12]
 801769e:	4013      	ands	r3, r2
 80176a0:	2b00      	cmp	r3, #0
 80176a2:	d007      	beq.n	80176b4 <itm_debug1+0x28>
 80176a4:	2301      	movs	r3, #1
 80176a6:	9300      	str	r3, [sp, #0]
 80176a8:	2300      	movs	r3, #0
 80176aa:	2200      	movs	r2, #0
 80176ac:	6879      	ldr	r1, [r7, #4]
 80176ae:	68b8      	ldr	r0, [r7, #8]
 80176b0:	f001 ff48 	bl	8019544 <_itm_debug3>
}
 80176b4:	bf00      	nop
 80176b6:	3710      	adds	r7, #16
 80176b8:	46bd      	mov	sp, r7
 80176ba:	bd80      	pop	{r7, pc}
 80176bc:	20000610 	.word	0x20000610

080176c0 <itm_debug2>:
{
 80176c0:	b580      	push	{r7, lr}
 80176c2:	b086      	sub	sp, #24
 80176c4:	af02      	add	r7, sp, #8
 80176c6:	60f8      	str	r0, [r7, #12]
 80176c8:	60b9      	str	r1, [r7, #8]
 80176ca:	607a      	str	r2, [r7, #4]
 80176cc:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, 0, 2);
 80176ce:	4b09      	ldr	r3, [pc, #36]	; (80176f4 <itm_debug2+0x34>)
 80176d0:	681a      	ldr	r2, [r3, #0]
 80176d2:	68fb      	ldr	r3, [r7, #12]
 80176d4:	4013      	ands	r3, r2
 80176d6:	2b00      	cmp	r3, #0
 80176d8:	d007      	beq.n	80176ea <itm_debug2+0x2a>
 80176da:	2302      	movs	r3, #2
 80176dc:	9300      	str	r3, [sp, #0]
 80176de:	2300      	movs	r3, #0
 80176e0:	683a      	ldr	r2, [r7, #0]
 80176e2:	6879      	ldr	r1, [r7, #4]
 80176e4:	68b8      	ldr	r0, [r7, #8]
 80176e6:	f001 ff2d 	bl	8019544 <_itm_debug3>
}
 80176ea:	bf00      	nop
 80176ec:	3710      	adds	r7, #16
 80176ee:	46bd      	mov	sp, r7
 80176f0:	bd80      	pop	{r7, pc}
 80176f2:	bf00      	nop
 80176f4:	20000610 	.word	0x20000610

080176f8 <inertia_value>:
	vars->target = 0;
	vars->cur = 0;
}

int16_t inertia_value(int tidx, const inertia_config_t *config, inertia_vars_t *vars, int *pchanged)
{
 80176f8:	b580      	push	{r7, lr}
 80176fa:	b08a      	sub	sp, #40	; 0x28
 80176fc:	af00      	add	r7, sp, #0
 80176fe:	60f8      	str	r0, [r7, #12]
 8017700:	60b9      	str	r1, [r7, #8]
 8017702:	607a      	str	r2, [r7, #4]
 8017704:	603b      	str	r3, [r7, #0]
	int st =  SIGNOF(vars->target);
 8017706:	687b      	ldr	r3, [r7, #4]
 8017708:	f9b3 3000 	ldrsh.w	r3, [r3]
 801770c:	2b00      	cmp	r3, #0
 801770e:	da02      	bge.n	8017716 <inertia_value+0x1e>
 8017710:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017714:	e000      	b.n	8017718 <inertia_value+0x20>
 8017716:	2301      	movs	r3, #1
 8017718:	623b      	str	r3, [r7, #32]
	int sc =  SIGNOF(vars->cur);
 801771a:	687b      	ldr	r3, [r7, #4]
 801771c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017720:	2b00      	cmp	r3, #0
 8017722:	da02      	bge.n	801772a <inertia_value+0x32>
 8017724:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017728:	e000      	b.n	801772c <inertia_value+0x34>
 801772a:	2301      	movs	r3, #1
 801772c:	61fb      	str	r3, [r7, #28]
	int inc;

	int32_t dt10 = (10*1000)/cur_freqhz;
 801772e:	4b83      	ldr	r3, [pc, #524]	; (801793c <inertia_value+0x244>)
 8017730:	681b      	ldr	r3, [r3, #0]
 8017732:	f242 7210 	movw	r2, #10000	; 0x2710
 8017736:	fb92 f3f3 	sdiv	r3, r2, r3
 801773a:	61bb      	str	r3, [r7, #24]

    if (pchanged) *pchanged = 0;
 801773c:	683b      	ldr	r3, [r7, #0]
 801773e:	2b00      	cmp	r3, #0
 8017740:	d002      	beq.n	8017748 <inertia_value+0x50>
 8017742:	683b      	ldr	r3, [r7, #0]
 8017744:	2200      	movs	r2, #0
 8017746:	601a      	str	r2, [r3, #0]
    if (vars->target == vars->cur/10) {
 8017748:	687b      	ldr	r3, [r7, #4]
 801774a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801774e:	687b      	ldr	r3, [r7, #4]
 8017750:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017754:	497a      	ldr	r1, [pc, #488]	; (8017940 <inertia_value+0x248>)
 8017756:	fb81 0103 	smull	r0, r1, r1, r3
 801775a:	1089      	asrs	r1, r1, #2
 801775c:	17db      	asrs	r3, r3, #31
 801775e:	1acb      	subs	r3, r1, r3
 8017760:	b21b      	sxth	r3, r3
 8017762:	429a      	cmp	r2, r3
 8017764:	d108      	bne.n	8017778 <inertia_value+0x80>
    	itm_debug1(DBG_INERTIA, "no chg", tidx);
 8017766:	68fa      	ldr	r2, [r7, #12]
 8017768:	4976      	ldr	r1, [pc, #472]	; (8017944 <inertia_value+0x24c>)
 801776a:	2008      	movs	r0, #8
 801776c:	f7ff ff8e 	bl	801768c <itm_debug1>
    	return vars->target;
 8017770:	687b      	ldr	r3, [r7, #4]
 8017772:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017776:	e0dc      	b.n	8017932 <inertia_value+0x23a>
    }


	if (st*sc >= 0) {
 8017778:	6a3b      	ldr	r3, [r7, #32]
 801777a:	69fa      	ldr	r2, [r7, #28]
 801777c:	fb02 f303 	mul.w	r3, r2, r3
 8017780:	2b00      	cmp	r3, #0
 8017782:	db78      	blt.n	8017876 <inertia_value+0x17e>
		// same direction
		if (abs(vars->target*10)>abs(vars->cur)) {
 8017784:	687b      	ldr	r3, [r7, #4]
 8017786:	f9b3 3000 	ldrsh.w	r3, [r3]
 801778a:	461a      	mov	r2, r3
 801778c:	4613      	mov	r3, r2
 801778e:	009b      	lsls	r3, r3, #2
 8017790:	4413      	add	r3, r2
 8017792:	005b      	lsls	r3, r3, #1
 8017794:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8017798:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 801779c:	687b      	ldr	r3, [r7, #4]
 801779e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80177a2:	2b00      	cmp	r3, #0
 80177a4:	bfb8      	it	lt
 80177a6:	425b      	neglt	r3, r3
 80177a8:	429a      	cmp	r2, r3
 80177aa:	dd31      	ble.n	8017810 <inertia_value+0x118>
			// acceleration
			inc = config->acc * dt10 / 10000;
 80177ac:	68bb      	ldr	r3, [r7, #8]
 80177ae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80177b2:	461a      	mov	r2, r3
 80177b4:	69bb      	ldr	r3, [r7, #24]
 80177b6:	fb03 f302 	mul.w	r3, r3, r2
 80177ba:	4a63      	ldr	r2, [pc, #396]	; (8017948 <inertia_value+0x250>)
 80177bc:	fb82 1203 	smull	r1, r2, r2, r3
 80177c0:	1312      	asrs	r2, r2, #12
 80177c2:	17db      	asrs	r3, r3, #31
 80177c4:	1ad3      	subs	r3, r2, r3
 80177c6:	627b      	str	r3, [r7, #36]	; 0x24
			inc = MIN(inc, abs(vars->target*10)-abs(vars->cur));
 80177c8:	687b      	ldr	r3, [r7, #4]
 80177ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80177ce:	461a      	mov	r2, r3
 80177d0:	4613      	mov	r3, r2
 80177d2:	009b      	lsls	r3, r3, #2
 80177d4:	4413      	add	r3, r2
 80177d6:	005b      	lsls	r3, r3, #1
 80177d8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80177dc:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80177e0:	687b      	ldr	r3, [r7, #4]
 80177e2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80177e6:	2b00      	cmp	r3, #0
 80177e8:	bfb8      	it	lt
 80177ea:	425b      	neglt	r3, r3
 80177ec:	1ad3      	subs	r3, r2, r3
 80177ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80177f0:	4293      	cmp	r3, r2
 80177f2:	bfa8      	it	ge
 80177f4:	4613      	movge	r3, r2
 80177f6:	627b      	str	r3, [r7, #36]	; 0x24
			inc = sc * inc;
 80177f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177fa:	69fa      	ldr	r2, [r7, #28]
 80177fc:	fb02 f303 	mul.w	r3, r2, r3
 8017800:	627b      	str	r3, [r7, #36]	; 0x24
	    	itm_debug2(DBG_INERTIA, "acc", tidx, inc);
 8017802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017804:	68fa      	ldr	r2, [r7, #12]
 8017806:	4951      	ldr	r1, [pc, #324]	; (801794c <inertia_value+0x254>)
 8017808:	2008      	movs	r0, #8
 801780a:	f7ff ff59 	bl	80176c0 <itm_debug2>
 801780e:	e060      	b.n	80178d2 <inertia_value+0x1da>
		} else {
			// deceleration
			inc = config->dec * dt10 / 10000;
 8017810:	68bb      	ldr	r3, [r7, #8]
 8017812:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017816:	461a      	mov	r2, r3
 8017818:	69bb      	ldr	r3, [r7, #24]
 801781a:	fb03 f302 	mul.w	r3, r3, r2
 801781e:	4a4a      	ldr	r2, [pc, #296]	; (8017948 <inertia_value+0x250>)
 8017820:	fb82 1203 	smull	r1, r2, r2, r3
 8017824:	1312      	asrs	r2, r2, #12
 8017826:	17db      	asrs	r3, r3, #31
 8017828:	1ad3      	subs	r3, r2, r3
 801782a:	627b      	str	r3, [r7, #36]	; 0x24
			inc = MIN(inc, -abs(vars->target*10)+abs(vars->cur));
 801782c:	687b      	ldr	r3, [r7, #4]
 801782e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017832:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8017836:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 801783a:	687b      	ldr	r3, [r7, #4]
 801783c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017840:	4619      	mov	r1, r3
 8017842:	460b      	mov	r3, r1
 8017844:	009b      	lsls	r3, r3, #2
 8017846:	440b      	add	r3, r1
 8017848:	005b      	lsls	r3, r3, #1
 801784a:	2b00      	cmp	r3, #0
 801784c:	bfb8      	it	lt
 801784e:	425b      	neglt	r3, r3
 8017850:	1ad3      	subs	r3, r2, r3
 8017852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017854:	4293      	cmp	r3, r2
 8017856:	bfa8      	it	ge
 8017858:	4613      	movge	r3, r2
 801785a:	627b      	str	r3, [r7, #36]	; 0x24
			inc = -sc * inc;
 801785c:	69fb      	ldr	r3, [r7, #28]
 801785e:	425a      	negs	r2, r3
 8017860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017862:	fb02 f303 	mul.w	r3, r2, r3
 8017866:	627b      	str	r3, [r7, #36]	; 0x24
	    	itm_debug2(DBG_INERTIA, "dec", tidx, inc);
 8017868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801786a:	68fa      	ldr	r2, [r7, #12]
 801786c:	4938      	ldr	r1, [pc, #224]	; (8017950 <inertia_value+0x258>)
 801786e:	2008      	movs	r0, #8
 8017870:	f7ff ff26 	bl	80176c0 <itm_debug2>
 8017874:	e02d      	b.n	80178d2 <inertia_value+0x1da>
		}
	} else {
		// dir change
		itm_debug1(DBG_INERTIA, "dir change", tidx);
 8017876:	68fa      	ldr	r2, [r7, #12]
 8017878:	4936      	ldr	r1, [pc, #216]	; (8017954 <inertia_value+0x25c>)
 801787a:	2008      	movs	r0, #8
 801787c:	f7ff ff06 	bl	801768c <itm_debug1>
		inc = config->dec * dt10 / 10000;
 8017880:	68bb      	ldr	r3, [r7, #8]
 8017882:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017886:	461a      	mov	r2, r3
 8017888:	69bb      	ldr	r3, [r7, #24]
 801788a:	fb03 f302 	mul.w	r3, r3, r2
 801788e:	4a2e      	ldr	r2, [pc, #184]	; (8017948 <inertia_value+0x250>)
 8017890:	fb82 1203 	smull	r1, r2, r2, r3
 8017894:	1312      	asrs	r2, r2, #12
 8017896:	17db      	asrs	r3, r3, #31
 8017898:	1ad3      	subs	r3, r2, r3
 801789a:	627b      	str	r3, [r7, #36]	; 0x24
        inc = MIN(inc, abs(vars->target*10-vars->cur));
 801789c:	687b      	ldr	r3, [r7, #4]
 801789e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80178a2:	461a      	mov	r2, r3
 80178a4:	4613      	mov	r3, r2
 80178a6:	009b      	lsls	r3, r3, #2
 80178a8:	4413      	add	r3, r2
 80178aa:	005b      	lsls	r3, r3, #1
 80178ac:	461a      	mov	r2, r3
 80178ae:	687b      	ldr	r3, [r7, #4]
 80178b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80178b4:	1ad3      	subs	r3, r2, r3
 80178b6:	2b00      	cmp	r3, #0
 80178b8:	bfb8      	it	lt
 80178ba:	425b      	neglt	r3, r3
 80178bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80178be:	4293      	cmp	r3, r2
 80178c0:	bfa8      	it	ge
 80178c2:	4613      	movge	r3, r2
 80178c4:	627b      	str	r3, [r7, #36]	; 0x24
        inc = -1 * sc * inc;
 80178c6:	69fb      	ldr	r3, [r7, #28]
 80178c8:	425a      	negs	r2, r3
 80178ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178cc:	fb02 f303 	mul.w	r3, r2, r3
 80178d0:	627b      	str	r3, [r7, #36]	; 0x24
	}
	int vold = vars->cur/10;
 80178d2:	687b      	ldr	r3, [r7, #4]
 80178d4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80178d8:	4a19      	ldr	r2, [pc, #100]	; (8017940 <inertia_value+0x248>)
 80178da:	fb82 1203 	smull	r1, r2, r2, r3
 80178de:	1092      	asrs	r2, r2, #2
 80178e0:	17db      	asrs	r3, r3, #31
 80178e2:	1ad3      	subs	r3, r2, r3
 80178e4:	b21b      	sxth	r3, r3
 80178e6:	617b      	str	r3, [r7, #20]
	vars->cur += inc;
 80178e8:	687b      	ldr	r3, [r7, #4]
 80178ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80178ee:	b29a      	uxth	r2, r3
 80178f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178f2:	b29b      	uxth	r3, r3
 80178f4:	4413      	add	r3, r2
 80178f6:	b29b      	uxth	r3, r3
 80178f8:	b21a      	sxth	r2, r3
 80178fa:	687b      	ldr	r3, [r7, #4]
 80178fc:	805a      	strh	r2, [r3, #2]
	int16_t vnew = vars->cur/10;
 80178fe:	687b      	ldr	r3, [r7, #4]
 8017900:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017904:	4a0e      	ldr	r2, [pc, #56]	; (8017940 <inertia_value+0x248>)
 8017906:	fb82 1203 	smull	r1, r2, r2, r3
 801790a:	1092      	asrs	r2, r2, #2
 801790c:	17db      	asrs	r3, r3, #31
 801790e:	1ad3      	subs	r3, r2, r3
 8017910:	827b      	strh	r3, [r7, #18]
    if (pchanged) *pchanged = (vnew==vold) ? 0 : 1;
 8017912:	683b      	ldr	r3, [r7, #0]
 8017914:	2b00      	cmp	r3, #0
 8017916:	d00a      	beq.n	801792e <inertia_value+0x236>
 8017918:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801791c:	697a      	ldr	r2, [r7, #20]
 801791e:	429a      	cmp	r2, r3
 8017920:	bf14      	ite	ne
 8017922:	2301      	movne	r3, #1
 8017924:	2300      	moveq	r3, #0
 8017926:	b2db      	uxtb	r3, r3
 8017928:	461a      	mov	r2, r3
 801792a:	683b      	ldr	r3, [r7, #0]
 801792c:	601a      	str	r2, [r3, #0]
	return vnew;
 801792e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
}
 8017932:	4618      	mov	r0, r3
 8017934:	3728      	adds	r7, #40	; 0x28
 8017936:	46bd      	mov	sp, r7
 8017938:	bd80      	pop	{r7, pc}
 801793a:	bf00      	nop
 801793c:	2000060c 	.word	0x2000060c
 8017940:	66666667 	.word	0x66666667
 8017944:	0801a44c 	.word	0x0801a44c
 8017948:	68db8bad 	.word	0x68db8bad
 801794c:	0801a454 	.word	0x0801a454
 8017950:	0801a458 	.word	0x0801a458
 8017954:	0801a45c 	.word	0x0801a45c

08017958 <itm_debug1>:
{
 8017958:	b580      	push	{r7, lr}
 801795a:	b086      	sub	sp, #24
 801795c:	af02      	add	r7, sp, #8
 801795e:	60f8      	str	r0, [r7, #12]
 8017960:	60b9      	str	r1, [r7, #8]
 8017962:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 8017964:	4b08      	ldr	r3, [pc, #32]	; (8017988 <itm_debug1+0x30>)
 8017966:	681a      	ldr	r2, [r3, #0]
 8017968:	68fb      	ldr	r3, [r7, #12]
 801796a:	4013      	ands	r3, r2
 801796c:	2b00      	cmp	r3, #0
 801796e:	d007      	beq.n	8017980 <itm_debug1+0x28>
 8017970:	2301      	movs	r3, #1
 8017972:	9300      	str	r3, [sp, #0]
 8017974:	2300      	movs	r3, #0
 8017976:	2200      	movs	r2, #0
 8017978:	6879      	ldr	r1, [r7, #4]
 801797a:	68b8      	ldr	r0, [r7, #8]
 801797c:	f001 fde2 	bl	8019544 <_itm_debug3>
}
 8017980:	bf00      	nop
 8017982:	3710      	adds	r7, #16
 8017984:	46bd      	mov	sp, r7
 8017986:	bd80      	pop	{r7, pc}
 8017988:	20000610 	.word	0x20000610

0801798c <itm_debug2>:
{
 801798c:	b580      	push	{r7, lr}
 801798e:	b086      	sub	sp, #24
 8017990:	af02      	add	r7, sp, #8
 8017992:	60f8      	str	r0, [r7, #12]
 8017994:	60b9      	str	r1, [r7, #8]
 8017996:	607a      	str	r2, [r7, #4]
 8017998:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, 0, 2);
 801799a:	4b09      	ldr	r3, [pc, #36]	; (80179c0 <itm_debug2+0x34>)
 801799c:	681a      	ldr	r2, [r3, #0]
 801799e:	68fb      	ldr	r3, [r7, #12]
 80179a0:	4013      	ands	r3, r2
 80179a2:	2b00      	cmp	r3, #0
 80179a4:	d007      	beq.n	80179b6 <itm_debug2+0x2a>
 80179a6:	2302      	movs	r3, #2
 80179a8:	9300      	str	r3, [sp, #0]
 80179aa:	2300      	movs	r3, #0
 80179ac:	683a      	ldr	r2, [r7, #0]
 80179ae:	6879      	ldr	r1, [r7, #4]
 80179b0:	68b8      	ldr	r0, [r7, #8]
 80179b2:	f001 fdc7 	bl	8019544 <_itm_debug3>
}
 80179b6:	bf00      	nop
 80179b8:	3710      	adds	r7, #16
 80179ba:	46bd      	mov	sp, r7
 80179bc:	bd80      	pop	{r7, pc}
 80179be:	bf00      	nop
 80179c0:	20000610 	.word	0x20000610

080179c4 <itm_debug3>:
{
 80179c4:	b580      	push	{r7, lr}
 80179c6:	b086      	sub	sp, #24
 80179c8:	af02      	add	r7, sp, #8
 80179ca:	60f8      	str	r0, [r7, #12]
 80179cc:	60b9      	str	r1, [r7, #8]
 80179ce:	607a      	str	r2, [r7, #4]
 80179d0:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, v3, 3);
 80179d2:	4b09      	ldr	r3, [pc, #36]	; (80179f8 <itm_debug3+0x34>)
 80179d4:	681a      	ldr	r2, [r3, #0]
 80179d6:	68fb      	ldr	r3, [r7, #12]
 80179d8:	4013      	ands	r3, r2
 80179da:	2b00      	cmp	r3, #0
 80179dc:	d007      	beq.n	80179ee <itm_debug3+0x2a>
 80179de:	2303      	movs	r3, #3
 80179e0:	9300      	str	r3, [sp, #0]
 80179e2:	69bb      	ldr	r3, [r7, #24]
 80179e4:	683a      	ldr	r2, [r7, #0]
 80179e6:	6879      	ldr	r1, [r7, #4]
 80179e8:	68b8      	ldr	r0, [r7, #8]
 80179ea:	f001 fdab 	bl	8019544 <_itm_debug3>
}
 80179ee:	bf00      	nop
 80179f0:	3710      	adds	r7, #16
 80179f2:	46bd      	mov	sp, r7
 80179f4:	bd80      	pop	{r7, pc}
 80179f6:	bf00      	nop
 80179f8:	20000610 	.word	0x20000610

080179fc <pidctl_reset>:
#include <memory.h>
#include "pidctl.h"
#include "misc.h"

void pidctl_reset(_UNUSED_ const pidctl_config_t *c, pidctl_vars_t *v)
{
 80179fc:	b480      	push	{r7}
 80179fe:	b083      	sub	sp, #12
 8017a00:	af00      	add	r7, sp, #0
 8017a02:	6078      	str	r0, [r7, #4]
 8017a04:	6039      	str	r1, [r7, #0]
    v->has_last = 0;
 8017a06:	683a      	ldr	r2, [r7, #0]
 8017a08:	7b13      	ldrb	r3, [r2, #12]
 8017a0a:	f36f 0300 	bfc	r3, #0, #1
 8017a0e:	7313      	strb	r3, [r2, #12]
	v->last_err = 0;
 8017a10:	683b      	ldr	r3, [r7, #0]
 8017a12:	2200      	movs	r2, #0
 8017a14:	601a      	str	r2, [r3, #0]
	v->sume     = 0;
 8017a16:	683b      	ldr	r3, [r7, #0]
 8017a18:	2200      	movs	r2, #0
 8017a1a:	605a      	str	r2, [r3, #4]
	v->target_v = 0;
 8017a1c:	683b      	ldr	r3, [r7, #0]
 8017a1e:	2200      	movs	r2, #0
 8017a20:	609a      	str	r2, [r3, #8]
	v->stopped = 1;
 8017a22:	683a      	ldr	r2, [r7, #0]
 8017a24:	7b13      	ldrb	r3, [r2, #12]
 8017a26:	f043 0302 	orr.w	r3, r3, #2
 8017a2a:	7313      	strb	r3, [r2, #12]
	v->has_last = 0;
 8017a2c:	683a      	ldr	r2, [r7, #0]
 8017a2e:	7b13      	ldrb	r3, [r2, #12]
 8017a30:	f36f 0300 	bfc	r3, #0, #1
 8017a34:	7313      	strb	r3, [r2, #12]
}
 8017a36:	bf00      	nop
 8017a38:	370c      	adds	r7, #12
 8017a3a:	46bd      	mov	sp, r7
 8017a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a40:	4770      	bx	lr
	...

08017a44 <pidctl_set_target>:

void pidctl_set_target(_UNUSED_ const pidctl_config_t *c, pidctl_vars_t *v, int32_t val)
{
 8017a44:	b580      	push	{r7, lr}
 8017a46:	b084      	sub	sp, #16
 8017a48:	af00      	add	r7, sp, #0
 8017a4a:	60f8      	str	r0, [r7, #12]
 8017a4c:	60b9      	str	r1, [r7, #8]
 8017a4e:	607a      	str	r2, [r7, #4]
	if ((0)) pidctl_reset(c,v);
    if ((0)) v->sume = val;
    itm_debug1(DBG_PID, "pid trg", val);
 8017a50:	687a      	ldr	r2, [r7, #4]
 8017a52:	4905      	ldr	r1, [pc, #20]	; (8017a68 <pidctl_set_target+0x24>)
 8017a54:	2004      	movs	r0, #4
 8017a56:	f7ff ff7f 	bl	8017958 <itm_debug1>
	v->target_v = val;
 8017a5a:	68bb      	ldr	r3, [r7, #8]
 8017a5c:	687a      	ldr	r2, [r7, #4]
 8017a5e:	609a      	str	r2, [r3, #8]
}
 8017a60:	bf00      	nop
 8017a62:	3710      	adds	r7, #16
 8017a64:	46bd      	mov	sp, r7
 8017a66:	bd80      	pop	{r7, pc}
 8017a68:	0801a468 	.word	0x0801a468

08017a6c <pidctl_value>:

#define MAX_I (250000)

int32_t pidctl_value(const pidctl_config_t *c, pidctl_vars_t *v, int32_t cur_v)
{
 8017a6c:	b580      	push	{r7, lr}
 8017a6e:	b08c      	sub	sp, #48	; 0x30
 8017a70:	af02      	add	r7, sp, #8
 8017a72:	60f8      	str	r0, [r7, #12]
 8017a74:	60b9      	str	r1, [r7, #8]
 8017a76:	607a      	str	r2, [r7, #4]
	// cuv in native BEMF value
	int32_t dt10 = 10000 / cur_freqhz; // dt*10 in ms
 8017a78:	4b49      	ldr	r3, [pc, #292]	; (8017ba0 <pidctl_value+0x134>)
 8017a7a:	681b      	ldr	r3, [r3, #0]
 8017a7c:	f242 7210 	movw	r2, #10000	; 0x2710
 8017a80:	fb92 f3f3 	sdiv	r3, r2, r3
 8017a84:	623b      	str	r3, [r7, #32]


	int32_t err = v->target_v - cur_v;
 8017a86:	68bb      	ldr	r3, [r7, #8]
 8017a88:	689a      	ldr	r2, [r3, #8]
 8017a8a:	687b      	ldr	r3, [r7, #4]
 8017a8c:	1ad3      	subs	r3, r2, r3
 8017a8e:	627b      	str	r3, [r7, #36]	; 0x24
    if (err> 2*MAX_PID_VALUE) err =  2*MAX_PID_VALUE;
 8017a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a92:	f241 7270 	movw	r2, #6000	; 0x1770
 8017a96:	4293      	cmp	r3, r2
 8017a98:	dd02      	ble.n	8017aa0 <pidctl_value+0x34>
 8017a9a:	f241 7370 	movw	r3, #6000	; 0x1770
 8017a9e:	627b      	str	r3, [r7, #36]	; 0x24
    if (err<-2*MAX_PID_VALUE) err = -2*MAX_PID_VALUE;
 8017aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017aa2:	4a40      	ldr	r2, [pc, #256]	; (8017ba4 <pidctl_value+0x138>)
 8017aa4:	4293      	cmp	r3, r2
 8017aa6:	da01      	bge.n	8017aac <pidctl_value+0x40>
 8017aa8:	4b3e      	ldr	r3, [pc, #248]	; (8017ba4 <pidctl_value+0x138>)
 8017aaa:	627b      	str	r3, [r7, #36]	; 0x24

    int32_t dv = (v->has_last) ? 1000*10*(err - v->last_err)/dt10 : 0; //XXX
 8017aac:	68bb      	ldr	r3, [r7, #8]
 8017aae:	7b1b      	ldrb	r3, [r3, #12]
 8017ab0:	f003 0301 	and.w	r3, r3, #1
 8017ab4:	b2db      	uxtb	r3, r3
 8017ab6:	2b00      	cmp	r3, #0
 8017ab8:	d00b      	beq.n	8017ad2 <pidctl_value+0x66>
 8017aba:	68bb      	ldr	r3, [r7, #8]
 8017abc:	681b      	ldr	r3, [r3, #0]
 8017abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017ac0:	1ad3      	subs	r3, r2, r3
 8017ac2:	f242 7210 	movw	r2, #10000	; 0x2710
 8017ac6:	fb02 f203 	mul.w	r2, r2, r3
 8017aca:	6a3b      	ldr	r3, [r7, #32]
 8017acc:	fb92 f3f3 	sdiv	r3, r2, r3
 8017ad0:	e000      	b.n	8017ad4 <pidctl_value+0x68>
 8017ad2:	2300      	movs	r3, #0
 8017ad4:	61fb      	str	r3, [r7, #28]
	v->last_err = err;
 8017ad6:	68bb      	ldr	r3, [r7, #8]
 8017ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017ada:	601a      	str	r2, [r3, #0]
    v->has_last = 1;
 8017adc:	68ba      	ldr	r2, [r7, #8]
 8017ade:	7b13      	ldrb	r3, [r2, #12]
 8017ae0:	f043 0301 	orr.w	r3, r3, #1
 8017ae4:	7313      	strb	r3, [r2, #12]
	if ((1)) v->sume += (err*dt10)/10;
 8017ae6:	68bb      	ldr	r3, [r7, #8]
 8017ae8:	685a      	ldr	r2, [r3, #4]
 8017aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017aec:	6a39      	ldr	r1, [r7, #32]
 8017aee:	fb01 f303 	mul.w	r3, r1, r3
 8017af2:	492d      	ldr	r1, [pc, #180]	; (8017ba8 <pidctl_value+0x13c>)
 8017af4:	fb81 0103 	smull	r0, r1, r1, r3
 8017af8:	1089      	asrs	r1, r1, #2
 8017afa:	17db      	asrs	r3, r3, #31
 8017afc:	1acb      	subs	r3, r1, r3
 8017afe:	441a      	add	r2, r3
 8017b00:	68bb      	ldr	r3, [r7, #8]
 8017b02:	605a      	str	r2, [r3, #4]
    else     v->sume = v->sume*.99 + (err*dt10)/10;
    if (v->sume>MAX_I) v->sume = MAX_I;
 8017b04:	68bb      	ldr	r3, [r7, #8]
 8017b06:	685b      	ldr	r3, [r3, #4]
 8017b08:	4a28      	ldr	r2, [pc, #160]	; (8017bac <pidctl_value+0x140>)
 8017b0a:	4293      	cmp	r3, r2
 8017b0c:	dd03      	ble.n	8017b16 <pidctl_value+0xaa>
 8017b0e:	68bb      	ldr	r3, [r7, #8]
 8017b10:	4a26      	ldr	r2, [pc, #152]	; (8017bac <pidctl_value+0x140>)
 8017b12:	605a      	str	r2, [r3, #4]
 8017b14:	e007      	b.n	8017b26 <pidctl_value+0xba>
    else if (v->sume<-MAX_I) v->sume = -MAX_I;
 8017b16:	68bb      	ldr	r3, [r7, #8]
 8017b18:	685b      	ldr	r3, [r3, #4]
 8017b1a:	4a25      	ldr	r2, [pc, #148]	; (8017bb0 <pidctl_value+0x144>)
 8017b1c:	4293      	cmp	r3, r2
 8017b1e:	da02      	bge.n	8017b26 <pidctl_value+0xba>
 8017b20:	68bb      	ldr	r3, [r7, #8]
 8017b22:	4a23      	ldr	r2, [pc, #140]	; (8017bb0 <pidctl_value+0x144>)
 8017b24:	605a      	str	r2, [r3, #4]

	int32_t iv = v->sume / 100;
 8017b26:	68bb      	ldr	r3, [r7, #8]
 8017b28:	685b      	ldr	r3, [r3, #4]
 8017b2a:	4a22      	ldr	r2, [pc, #136]	; (8017bb4 <pidctl_value+0x148>)
 8017b2c:	fb82 1203 	smull	r1, r2, r2, r3
 8017b30:	1152      	asrs	r2, r2, #5
 8017b32:	17db      	asrs	r3, r3, #31
 8017b34:	1ad3      	subs	r3, r2, r3
 8017b36:	61bb      	str	r3, [r7, #24]

	itm_debug2(DBG_PID, "pid tc", v->target_v, cur_v);
 8017b38:	68bb      	ldr	r3, [r7, #8]
 8017b3a:	689a      	ldr	r2, [r3, #8]
 8017b3c:	687b      	ldr	r3, [r7, #4]
 8017b3e:	491e      	ldr	r1, [pc, #120]	; (8017bb8 <pidctl_value+0x14c>)
 8017b40:	2004      	movs	r0, #4
 8017b42:	f7ff ff23 	bl	801798c <itm_debug2>
    itm_debug3(DBG_PID, "pid edi", err, dv, v->sume);
 8017b46:	68bb      	ldr	r3, [r7, #8]
 8017b48:	685b      	ldr	r3, [r3, #4]
 8017b4a:	9300      	str	r3, [sp, #0]
 8017b4c:	69fb      	ldr	r3, [r7, #28]
 8017b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017b50:	491a      	ldr	r1, [pc, #104]	; (8017bbc <pidctl_value+0x150>)
 8017b52:	2004      	movs	r0, #4
 8017b54:	f7ff ff36 	bl	80179c4 <itm_debug3>

	int32_t r = c->kP * err + (c->kD * dv)/1000 + c->kI * iv;
 8017b58:	68fb      	ldr	r3, [r7, #12]
 8017b5a:	681b      	ldr	r3, [r3, #0]
 8017b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017b5e:	fb02 f203 	mul.w	r2, r2, r3
 8017b62:	68fb      	ldr	r3, [r7, #12]
 8017b64:	689b      	ldr	r3, [r3, #8]
 8017b66:	69f9      	ldr	r1, [r7, #28]
 8017b68:	fb01 f303 	mul.w	r3, r1, r3
 8017b6c:	4914      	ldr	r1, [pc, #80]	; (8017bc0 <pidctl_value+0x154>)
 8017b6e:	fb81 0103 	smull	r0, r1, r1, r3
 8017b72:	1189      	asrs	r1, r1, #6
 8017b74:	17db      	asrs	r3, r3, #31
 8017b76:	1acb      	subs	r3, r1, r3
 8017b78:	441a      	add	r2, r3
 8017b7a:	68fb      	ldr	r3, [r7, #12]
 8017b7c:	685b      	ldr	r3, [r3, #4]
 8017b7e:	69b9      	ldr	r1, [r7, #24]
 8017b80:	fb01 f303 	mul.w	r3, r1, r3
 8017b84:	4413      	add	r3, r2
 8017b86:	617b      	str	r3, [r7, #20]

	return r/1000;
 8017b88:	697b      	ldr	r3, [r7, #20]
 8017b8a:	4a0d      	ldr	r2, [pc, #52]	; (8017bc0 <pidctl_value+0x154>)
 8017b8c:	fb82 1203 	smull	r1, r2, r2, r3
 8017b90:	1192      	asrs	r2, r2, #6
 8017b92:	17db      	asrs	r3, r3, #31
 8017b94:	1ad3      	subs	r3, r2, r3
}
 8017b96:	4618      	mov	r0, r3
 8017b98:	3728      	adds	r7, #40	; 0x28
 8017b9a:	46bd      	mov	sp, r7
 8017b9c:	bd80      	pop	{r7, pc}
 8017b9e:	bf00      	nop
 8017ba0:	2000060c 	.word	0x2000060c
 8017ba4:	ffffe890 	.word	0xffffe890
 8017ba8:	66666667 	.word	0x66666667
 8017bac:	0003d090 	.word	0x0003d090
 8017bb0:	fffc2f70 	.word	0xfffc2f70
 8017bb4:	51eb851f 	.word	0x51eb851f
 8017bb8:	0801a470 	.word	0x0801a470
 8017bbc:	0801a478 	.word	0x0801a478
 8017bc0:	10624dd3 	.word	0x10624dd3

08017bc4 <itm_debug1>:
{
 8017bc4:	b580      	push	{r7, lr}
 8017bc6:	b086      	sub	sp, #24
 8017bc8:	af02      	add	r7, sp, #8
 8017bca:	60f8      	str	r0, [r7, #12]
 8017bcc:	60b9      	str	r1, [r7, #8]
 8017bce:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 8017bd0:	4b08      	ldr	r3, [pc, #32]	; (8017bf4 <itm_debug1+0x30>)
 8017bd2:	681a      	ldr	r2, [r3, #0]
 8017bd4:	68fb      	ldr	r3, [r7, #12]
 8017bd6:	4013      	ands	r3, r2
 8017bd8:	2b00      	cmp	r3, #0
 8017bda:	d007      	beq.n	8017bec <itm_debug1+0x28>
 8017bdc:	2301      	movs	r3, #1
 8017bde:	9300      	str	r3, [sp, #0]
 8017be0:	2300      	movs	r3, #0
 8017be2:	2200      	movs	r2, #0
 8017be4:	6879      	ldr	r1, [r7, #4]
 8017be6:	68b8      	ldr	r0, [r7, #8]
 8017be8:	f001 fcac 	bl	8019544 <_itm_debug3>
}
 8017bec:	bf00      	nop
 8017bee:	3710      	adds	r7, #16
 8017bf0:	46bd      	mov	sp, r7
 8017bf2:	bd80      	pop	{r7, pc}
 8017bf4:	20000610 	.word	0x20000610

08017bf8 <itm_debug2>:
{
 8017bf8:	b580      	push	{r7, lr}
 8017bfa:	b086      	sub	sp, #24
 8017bfc:	af02      	add	r7, sp, #8
 8017bfe:	60f8      	str	r0, [r7, #12]
 8017c00:	60b9      	str	r1, [r7, #8]
 8017c02:	607a      	str	r2, [r7, #4]
 8017c04:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, 0, 2);
 8017c06:	4b09      	ldr	r3, [pc, #36]	; (8017c2c <itm_debug2+0x34>)
 8017c08:	681a      	ldr	r2, [r3, #0]
 8017c0a:	68fb      	ldr	r3, [r7, #12]
 8017c0c:	4013      	ands	r3, r2
 8017c0e:	2b00      	cmp	r3, #0
 8017c10:	d007      	beq.n	8017c22 <itm_debug2+0x2a>
 8017c12:	2302      	movs	r3, #2
 8017c14:	9300      	str	r3, [sp, #0]
 8017c16:	2300      	movs	r3, #0
 8017c18:	683a      	ldr	r2, [r7, #0]
 8017c1a:	6879      	ldr	r1, [r7, #4]
 8017c1c:	68b8      	ldr	r0, [r7, #8]
 8017c1e:	f001 fc91 	bl	8019544 <_itm_debug3>
}
 8017c22:	bf00      	nop
 8017c24:	3710      	adds	r7, #16
 8017c26:	46bd      	mov	sp, r7
 8017c28:	bd80      	pop	{r7, pc}
 8017c2a:	bf00      	nop
 8017c2c:	20000610 	.word	0x20000610

08017c30 <itm_debug3>:
{
 8017c30:	b580      	push	{r7, lr}
 8017c32:	b086      	sub	sp, #24
 8017c34:	af02      	add	r7, sp, #8
 8017c36:	60f8      	str	r0, [r7, #12]
 8017c38:	60b9      	str	r1, [r7, #8]
 8017c3a:	607a      	str	r2, [r7, #4]
 8017c3c:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, v3, 3);
 8017c3e:	4b09      	ldr	r3, [pc, #36]	; (8017c64 <itm_debug3+0x34>)
 8017c40:	681a      	ldr	r2, [r3, #0]
 8017c42:	68fb      	ldr	r3, [r7, #12]
 8017c44:	4013      	ands	r3, r2
 8017c46:	2b00      	cmp	r3, #0
 8017c48:	d007      	beq.n	8017c5a <itm_debug3+0x2a>
 8017c4a:	2303      	movs	r3, #3
 8017c4c:	9300      	str	r3, [sp, #0]
 8017c4e:	69bb      	ldr	r3, [r7, #24]
 8017c50:	683a      	ldr	r2, [r7, #0]
 8017c52:	6879      	ldr	r1, [r7, #4]
 8017c54:	68b8      	ldr	r0, [r7, #8]
 8017c56:	f001 fc75 	bl	8019544 <_itm_debug3>
}
 8017c5a:	bf00      	nop
 8017c5c:	3710      	adds	r7, #16
 8017c5e:	46bd      	mov	sp, r7
 8017c60:	bd80      	pop	{r7, pc}
 8017c62:	bf00      	nop
 8017c64:	20000610 	.word	0x20000610

08017c68 <train_error>:
{
 8017c68:	b580      	push	{r7, lr}
 8017c6a:	b082      	sub	sp, #8
 8017c6c:	af00      	add	r7, sp, #0
 8017c6e:	6078      	str	r0, [r7, #4]
 8017c70:	6039      	str	r1, [r7, #0]
	return trainctl_error('T', code, msg);
 8017c72:	683a      	ldr	r2, [r7, #0]
 8017c74:	6879      	ldr	r1, [r7, #4]
 8017c76:	2054      	movs	r0, #84	; 0x54
 8017c78:	f7fe f9ec 	bl	8016054 <trainctl_error>
 8017c7c:	4603      	mov	r3, r0
}
 8017c7e:	4618      	mov	r0, r3
 8017c80:	3708      	adds	r7, #8
 8017c82:	46bd      	mov	sp, r7
 8017c84:	bd80      	pop	{r7, pc}

08017c86 <train_notif>:
{
 8017c86:	b580      	push	{r7, lr}
 8017c88:	b086      	sub	sp, #24
 8017c8a:	af02      	add	r7, sp, #8
 8017c8c:	60ba      	str	r2, [r7, #8]
 8017c8e:	607b      	str	r3, [r7, #4]
 8017c90:	4603      	mov	r3, r0
 8017c92:	73fb      	strb	r3, [r7, #15]
 8017c94:	460b      	mov	r3, r1
 8017c96:	73bb      	strb	r3, [r7, #14]
	trainctl_notif('T', train_idx, cmd, dta, dtalen);
 8017c98:	7bba      	ldrb	r2, [r7, #14]
 8017c9a:	7bf9      	ldrb	r1, [r7, #15]
 8017c9c:	687b      	ldr	r3, [r7, #4]
 8017c9e:	9300      	str	r3, [sp, #0]
 8017ca0:	68bb      	ldr	r3, [r7, #8]
 8017ca2:	2054      	movs	r0, #84	; 0x54
 8017ca4:	f7ff f968 	bl	8016f78 <trainctl_notif>
}
 8017ca8:	bf00      	nop
 8017caa:	3710      	adds	r7, #16
 8017cac:	46bd      	mov	sp, r7
 8017cae:	bd80      	pop	{r7, pc}

08017cb0 <debug_info>:
{
 8017cb0:	b580      	push	{r7, lr}
 8017cb2:	b088      	sub	sp, #32
 8017cb4:	af04      	add	r7, sp, #16
 8017cb6:	60f8      	str	r0, [r7, #12]
 8017cb8:	60b9      	str	r1, [r7, #8]
 8017cba:	607a      	str	r2, [r7, #4]
 8017cbc:	603b      	str	r3, [r7, #0]
	trainctl_notif2(sel, num, 'D', msg, v1, v2, v3);
 8017cbe:	68fb      	ldr	r3, [r7, #12]
 8017cc0:	b2d8      	uxtb	r0, r3
 8017cc2:	68bb      	ldr	r3, [r7, #8]
 8017cc4:	b2d9      	uxtb	r1, r3
 8017cc6:	69fb      	ldr	r3, [r7, #28]
 8017cc8:	9302      	str	r3, [sp, #8]
 8017cca:	69bb      	ldr	r3, [r7, #24]
 8017ccc:	9301      	str	r3, [sp, #4]
 8017cce:	683b      	ldr	r3, [r7, #0]
 8017cd0:	9300      	str	r3, [sp, #0]
 8017cd2:	687b      	ldr	r3, [r7, #4]
 8017cd4:	2244      	movs	r2, #68	; 0x44
 8017cd6:	f7ff f973 	bl	8016fc0 <trainctl_notif2>
}
 8017cda:	bf00      	nop
 8017cdc:	3710      	adds	r7, #16
 8017cde:	46bd      	mov	sp, r7
 8017ce0:	bd80      	pop	{r7, pc}
	...

08017ce4 <mqf_read_to_spdctl>:
#define CMD_BEMF_OFF		0x41

#define CMD_SETVPWM			0x01
#define CMD_STOP			0x02

LFMQUEUE_DEF_H(to_spdctl, msg_64_t)
 8017ce4:	b580      	push	{r7, lr}
 8017ce6:	b082      	sub	sp, #8
 8017ce8:	af00      	add	r7, sp, #0
 8017cea:	6078      	str	r0, [r7, #4]
 8017cec:	6879      	ldr	r1, [r7, #4]
 8017cee:	4804      	ldr	r0, [pc, #16]	; (8017d00 <mqf_read_to_spdctl+0x1c>)
 8017cf0:	f001 fdaa 	bl	8019848 <mqf_read>
 8017cf4:	4603      	mov	r3, r0
 8017cf6:	4618      	mov	r0, r3
 8017cf8:	3708      	adds	r7, #8
 8017cfa:	46bd      	mov	sp, r7
 8017cfc:	bd80      	pop	{r7, pc}
 8017cfe:	bf00      	nop
 8017d00:	20000554 	.word	0x20000554

08017d04 <mqf_write_from_spdctl>:
LFMQUEUE_DEF_H(from_spdctl, msg_64_t)
 8017d04:	b580      	push	{r7, lr}
 8017d06:	b082      	sub	sp, #8
 8017d08:	af00      	add	r7, sp, #0
 8017d0a:	6078      	str	r0, [r7, #4]
 8017d0c:	6879      	ldr	r1, [r7, #4]
 8017d0e:	4804      	ldr	r0, [pc, #16]	; (8017d20 <mqf_write_from_spdctl+0x1c>)
 8017d10:	f001 fd20 	bl	8019754 <mqf_write>
 8017d14:	4603      	mov	r3, r0
 8017d16:	4618      	mov	r0, r3
 8017d18:	3708      	adds	r7, #8
 8017d1a:	46bd      	mov	sp, r7
 8017d1c:	bd80      	pop	{r7, pc}
 8017d1e:	bf00      	nop
 8017d20:	20000560 	.word	0x20000560

08017d24 <inertia_set_target>:

int16_t inertia_value(int tidx, const inertia_config_t *cnf, inertia_vars_t *var, int *pchanged);
void    inertia_reset(int tidx, const inertia_config_t *cnf, inertia_vars_t *var);

static inline void inertia_set_target(int tidx, _UNUSED_ const inertia_config_t *cnf, inertia_vars_t *vars, int16_t v)
{
 8017d24:	b580      	push	{r7, lr}
 8017d26:	b084      	sub	sp, #16
 8017d28:	af00      	add	r7, sp, #0
 8017d2a:	60f8      	str	r0, [r7, #12]
 8017d2c:	60b9      	str	r1, [r7, #8]
 8017d2e:	607a      	str	r2, [r7, #4]
 8017d30:	807b      	strh	r3, [r7, #2]
	itm_debug2(DBG_INERTIA, "iner targ", tidx, v);
 8017d32:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8017d36:	68fa      	ldr	r2, [r7, #12]
 8017d38:	4905      	ldr	r1, [pc, #20]	; (8017d50 <inertia_set_target+0x2c>)
 8017d3a:	2008      	movs	r0, #8
 8017d3c:	f7ff ff5c 	bl	8017bf8 <itm_debug2>
	vars->target = v;
 8017d40:	687b      	ldr	r3, [r7, #4]
 8017d42:	887a      	ldrh	r2, [r7, #2]
 8017d44:	801a      	strh	r2, [r3, #0]
}
 8017d46:	bf00      	nop
 8017d48:	3710      	adds	r7, #16
 8017d4a:	46bd      	mov	sp, r7
 8017d4c:	bd80      	pop	{r7, pc}
 8017d4e:	bf00      	nop
 8017d50:	0801a480 	.word	0x0801a480

08017d54 <spdctl_reset>:

static void pose_check_trig(int numtrain, train_vars_t *tvars, int32_t lastincr);


static void spdctl_reset(void)
{
 8017d54:	b580      	push	{r7, lr}
 8017d56:	b082      	sub	sp, #8
 8017d58:	af00      	add	r7, sp, #0
	memset(trspc_vars, 0, sizeof(trspc_vars));
 8017d5a:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8017d5e:	2100      	movs	r1, #0
 8017d60:	4811      	ldr	r0, [pc, #68]	; (8017da8 <spdctl_reset+0x54>)
 8017d62:	f001 fe18 	bl	8019996 <memset>
	for (int  i = 0; i<NUM_TRAINS; i++) {
 8017d66:	2300      	movs	r3, #0
 8017d68:	607b      	str	r3, [r7, #4]
 8017d6a:	e016      	b.n	8017d9a <spdctl_reset+0x46>
		trspc_vars[i].C1 = 0xFF;
 8017d6c:	490e      	ldr	r1, [pc, #56]	; (8017da8 <spdctl_reset+0x54>)
 8017d6e:	687a      	ldr	r2, [r7, #4]
 8017d70:	4613      	mov	r3, r2
 8017d72:	00db      	lsls	r3, r3, #3
 8017d74:	1a9b      	subs	r3, r3, r2
 8017d76:	00db      	lsls	r3, r3, #3
 8017d78:	440b      	add	r3, r1
 8017d7a:	331c      	adds	r3, #28
 8017d7c:	22ff      	movs	r2, #255	; 0xff
 8017d7e:	701a      	strb	r2, [r3, #0]
		trspc_vars[i].C2 = 0xFF;
 8017d80:	4909      	ldr	r1, [pc, #36]	; (8017da8 <spdctl_reset+0x54>)
 8017d82:	687a      	ldr	r2, [r7, #4]
 8017d84:	4613      	mov	r3, r2
 8017d86:	00db      	lsls	r3, r3, #3
 8017d88:	1a9b      	subs	r3, r3, r2
 8017d8a:	00db      	lsls	r3, r3, #3
 8017d8c:	440b      	add	r3, r1
 8017d8e:	331d      	adds	r3, #29
 8017d90:	22ff      	movs	r2, #255	; 0xff
 8017d92:	701a      	strb	r2, [r3, #0]
	for (int  i = 0; i<NUM_TRAINS; i++) {
 8017d94:	687b      	ldr	r3, [r7, #4]
 8017d96:	3301      	adds	r3, #1
 8017d98:	607b      	str	r3, [r7, #4]
 8017d9a:	687b      	ldr	r3, [r7, #4]
 8017d9c:	2b07      	cmp	r3, #7
 8017d9e:	dde5      	ble.n	8017d6c <spdctl_reset+0x18>
	}
}
 8017da0:	bf00      	nop
 8017da2:	3708      	adds	r7, #8
 8017da4:	46bd      	mov	sp, r7
 8017da6:	bd80      	pop	{r7, pc}
 8017da8:	20005464 	.word	0x20005464

08017dac <spdctl_run_tick>:


void spdctl_run_tick(_UNUSED_ uint32_t notif_flags, _UNUSED_ uint32_t tick, uint32_t dt)
{
 8017dac:	b580      	push	{r7, lr}
 8017dae:	b090      	sub	sp, #64	; 0x40
 8017db0:	af02      	add	r7, sp, #8
 8017db2:	60f8      	str	r0, [r7, #12]
 8017db4:	60b9      	str	r1, [r7, #8]
 8017db6:	607a      	str	r2, [r7, #4]
	train_tick_last_dt = dt;
 8017db8:	4aa3      	ldr	r2, [pc, #652]	; (8018048 <spdctl_run_tick+0x29c>)
 8017dba:	687b      	ldr	r3, [r7, #4]
 8017dbc:	6013      	str	r3, [r2, #0]
	train_ntick++;
 8017dbe:	4ba3      	ldr	r3, [pc, #652]	; (801804c <spdctl_run_tick+0x2a0>)
 8017dc0:	681b      	ldr	r3, [r3, #0]
 8017dc2:	3301      	adds	r3, #1
 8017dc4:	4aa1      	ldr	r2, [pc, #644]	; (801804c <spdctl_run_tick+0x2a0>)
 8017dc6:	6013      	str	r3, [r2, #0]

	itm_debug1(DBG_SPDCTL ,"------- tk", (int) notif_flags);
 8017dc8:	68fb      	ldr	r3, [r7, #12]
 8017dca:	461a      	mov	r2, r3
 8017dcc:	49a0      	ldr	r1, [pc, #640]	; (8018050 <spdctl_run_tick+0x2a4>)
 8017dce:	2010      	movs	r0, #16
 8017dd0:	f7ff fef8 	bl	8017bc4 <itm_debug1>
	static int first=1;
	if (first) {
 8017dd4:	4b9f      	ldr	r3, [pc, #636]	; (8018054 <spdctl_run_tick+0x2a8>)
 8017dd6:	681b      	ldr	r3, [r3, #0]
 8017dd8:	2b00      	cmp	r3, #0
 8017dda:	d004      	beq.n	8017de6 <spdctl_run_tick+0x3a>
		first = 0;
 8017ddc:	4b9d      	ldr	r3, [pc, #628]	; (8018054 <spdctl_run_tick+0x2a8>)
 8017dde:	2200      	movs	r2, #0
 8017de0:	601a      	str	r2, [r3, #0]
		spdctl_reset();
 8017de2:	f7ff ffb7 	bl	8017d54 <spdctl_reset>
       
	}
	/* process messages */
	for (;;) {
		msg_64_t m;
		int rc = mqf_read_to_spdctl(&m);
 8017de6:	f107 0318 	add.w	r3, r7, #24
 8017dea:	4618      	mov	r0, r3
 8017dec:	f7ff ff7a 	bl	8017ce4 <mqf_read_to_spdctl>
 8017df0:	6338      	str	r0, [r7, #48]	; 0x30
		if (rc) break;
 8017df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017df4:	2b00      	cmp	r3, #0
 8017df6:	d002      	beq.n	8017dfe <spdctl_run_tick+0x52>
                    break;
            }
        }
	}
	/* process trains */
	for (int i=0; i<NUM_TRAINS; i++) {
 8017df8:	2300      	movs	r3, #0
 8017dfa:	637b      	str	r3, [r7, #52]	; 0x34
 8017dfc:	e11d      	b.n	801803a <spdctl_run_tick+0x28e>
        switch (m.cmd) {
 8017dfe:	7ebb      	ldrb	r3, [r7, #26]
 8017e00:	2bfc      	cmp	r3, #252	; 0xfc
 8017e02:	d007      	beq.n	8017e14 <spdctl_run_tick+0x68>
 8017e04:	2bfc      	cmp	r3, #252	; 0xfc
 8017e06:	db16      	blt.n	8017e36 <spdctl_run_tick+0x8a>
 8017e08:	3bfe      	subs	r3, #254	; 0xfe
 8017e0a:	2b01      	cmp	r3, #1
 8017e0c:	d813      	bhi.n	8017e36 <spdctl_run_tick+0x8a>
            spdctl_reset();
 8017e0e:	f7ff ffa1 	bl	8017d54 <spdctl_reset>
            break;
 8017e12:	e013      	b.n	8017e3c <spdctl_run_tick+0x90>
        	if (m.v1u != run_mode) {
 8017e14:	8bba      	ldrh	r2, [r7, #28]
 8017e16:	4b90      	ldr	r3, [pc, #576]	; (8018058 <spdctl_run_tick+0x2ac>)
 8017e18:	781b      	ldrb	r3, [r3, #0]
 8017e1a:	b29b      	uxth	r3, r3
 8017e1c:	429a      	cmp	r2, r3
 8017e1e:	d00c      	beq.n	8017e3a <spdctl_run_tick+0x8e>
        		run_mode = (runmode_t) m.v1u;
 8017e20:	8bbb      	ldrh	r3, [r7, #28]
 8017e22:	b2da      	uxtb	r2, r3
 8017e24:	4b8c      	ldr	r3, [pc, #560]	; (8018058 <spdctl_run_tick+0x2ac>)
 8017e26:	701a      	strb	r2, [r3, #0]
        		testerAddr = m.from;
 8017e28:	7e7a      	ldrb	r2, [r7, #25]
 8017e2a:	4b8c      	ldr	r3, [pc, #560]	; (801805c <spdctl_run_tick+0x2b0>)
 8017e2c:	701a      	strb	r2, [r3, #0]
        		first = 1;
 8017e2e:	4b89      	ldr	r3, [pc, #548]	; (8018054 <spdctl_run_tick+0x2a8>)
 8017e30:	2201      	movs	r2, #1
 8017e32:	601a      	str	r2, [r3, #0]
            break;
 8017e34:	e001      	b.n	8017e3a <spdctl_run_tick+0x8e>
        	break;
 8017e36:	bf00      	nop
 8017e38:	e000      	b.n	8017e3c <spdctl_run_tick+0x90>
            break;
 8017e3a:	bf00      	nop
        switch (run_mode) {
 8017e3c:	4b86      	ldr	r3, [pc, #536]	; (8018058 <spdctl_run_tick+0x2ac>)
 8017e3e:	781b      	ldrb	r3, [r3, #0]
 8017e40:	2b00      	cmp	r3, #0
 8017e42:	f000 80eb 	beq.w	801801c <spdctl_run_tick+0x270>
 8017e46:	2b01      	cmp	r3, #1
 8017e48:	d000      	beq.n	8017e4c <spdctl_run_tick+0xa0>
        	continue;
 8017e4a:	e0ee      	b.n	801802a <spdctl_run_tick+0x27e>
        if (IS_TRAIN_SC(m.to)) {
 8017e4c:	7e3b      	ldrb	r3, [r7, #24]
 8017e4e:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8017e52:	2bc8      	cmp	r3, #200	; 0xc8
 8017e54:	f040 80e4 	bne.w	8018020 <spdctl_run_tick+0x274>
            int tidx = m.to & 0x7;
 8017e58:	7e3b      	ldrb	r3, [r7, #24]
 8017e5a:	f003 0307 	and.w	r3, r3, #7
 8017e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
            USE_TRAIN(tidx)
 8017e60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017e62:	f7fe faa7 	bl	80163b4 <get_train_cnf>
 8017e66:	62b8      	str	r0, [r7, #40]	; 0x28
 8017e68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017e6a:	4613      	mov	r3, r2
 8017e6c:	00db      	lsls	r3, r3, #3
 8017e6e:	1a9b      	subs	r3, r3, r2
 8017e70:	00db      	lsls	r3, r3, #3
 8017e72:	4a7b      	ldr	r2, [pc, #492]	; (8018060 <spdctl_run_tick+0x2b4>)
 8017e74:	4413      	add	r3, r2
 8017e76:	627b      	str	r3, [r7, #36]	; 0x24
            switch (m.cmd) {
 8017e78:	7ebb      	ldrb	r3, [r7, #26]
 8017e7a:	2b10      	cmp	r3, #16
 8017e7c:	f000 8094 	beq.w	8017fa8 <spdctl_run_tick+0x1fc>
 8017e80:	2b10      	cmp	r3, #16
 8017e82:	dc02      	bgt.n	8017e8a <spdctl_run_tick+0xde>
 8017e84:	2b03      	cmp	r3, #3
 8017e86:	d007      	beq.n	8017e98 <spdctl_run_tick+0xec>
                    break;
 8017e88:	e0cf      	b.n	801802a <spdctl_run_tick+0x27e>
            switch (m.cmd) {
 8017e8a:	2b11      	cmp	r3, #17
 8017e8c:	f000 8097 	beq.w	8017fbe <spdctl_run_tick+0x212>
 8017e90:	2b50      	cmp	r3, #80	; 0x50
 8017e92:	f000 80ae 	beq.w	8017ff2 <spdctl_run_tick+0x246>
                    break;
 8017e96:	e0c8      	b.n	801802a <spdctl_run_tick+0x27e>
                    if (m.from == tvars->C1) {
 8017e98:	7e7a      	ldrb	r2, [r7, #25]
 8017e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e9c:	7f1b      	ldrb	r3, [r3, #28]
 8017e9e:	429a      	cmp	r2, r3
 8017ea0:	d119      	bne.n	8017ed6 <spdctl_run_tick+0x12a>
                        itm_debug3(DBG_PID, "st bemf", tidx, m.v1, m.from);
 8017ea2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8017ea6:	461a      	mov	r2, r3
 8017ea8:	7e7b      	ldrb	r3, [r7, #25]
 8017eaa:	9300      	str	r3, [sp, #0]
 8017eac:	4613      	mov	r3, r2
 8017eae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017eb0:	496c      	ldr	r1, [pc, #432]	; (8018064 <spdctl_run_tick+0x2b8>)
 8017eb2:	2004      	movs	r0, #4
 8017eb4:	f7ff febc 	bl	8017c30 <itm_debug3>
                        if (!tvars->c2bemf) tvars->bemf_mv = m.v1;
 8017eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017eba:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8017ebe:	f003 0301 	and.w	r3, r3, #1
 8017ec2:	b2db      	uxtb	r3, r3
 8017ec4:	2b00      	cmp	r3, #0
 8017ec6:	f040 80ad 	bne.w	8018024 <spdctl_run_tick+0x278>
 8017eca:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8017ece:	461a      	mov	r2, r3
 8017ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ed2:	605a      	str	r2, [r3, #4]
                        break;
 8017ed4:	e0a6      	b.n	8018024 <spdctl_run_tick+0x278>
                    } else if (m.from == tvars->C2) {
 8017ed6:	7e7a      	ldrb	r2, [r7, #25]
 8017ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017eda:	7f5b      	ldrb	r3, [r3, #29]
 8017edc:	429a      	cmp	r2, r3
 8017ede:	d15a      	bne.n	8017f96 <spdctl_run_tick+0x1ea>
                        itm_debug3(DBG_PID, "c2 bemf", tidx, m.v1, m.from);
 8017ee0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8017ee4:	461a      	mov	r2, r3
 8017ee6:	7e7b      	ldrb	r3, [r7, #25]
 8017ee8:	9300      	str	r3, [sp, #0]
 8017eea:	4613      	mov	r3, r2
 8017eec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017eee:	495e      	ldr	r1, [pc, #376]	; (8018068 <spdctl_run_tick+0x2bc>)
 8017ef0:	2004      	movs	r0, #4
 8017ef2:	f7ff fe9d 	bl	8017c30 <itm_debug3>
                        if (tvars->c2bemf) tvars->bemf_mv = m.v1;
 8017ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ef8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8017efc:	f003 0301 	and.w	r3, r3, #1
 8017f00:	b2db      	uxtb	r3, r3
 8017f02:	2b00      	cmp	r3, #0
 8017f04:	d005      	beq.n	8017f12 <spdctl_run_tick+0x166>
 8017f06:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8017f0a:	461a      	mov	r2, r3
 8017f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f0e:	605a      	str	r2, [r3, #4]
                    break;
 8017f10:	e08a      	b.n	8018028 <spdctl_run_tick+0x27c>
                        else if (abs(m.v1) > abs(tvars->bemf_mv)+500) {
 8017f12:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8017f16:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8017f1a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8017f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f20:	685b      	ldr	r3, [r3, #4]
 8017f22:	2b00      	cmp	r3, #0
 8017f24:	bfb8      	it	lt
 8017f26:	425b      	neglt	r3, r3
 8017f28:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8017f2c:	429a      	cmp	r2, r3
 8017f2e:	dd7b      	ble.n	8018028 <spdctl_run_tick+0x27c>
                        	itm_debug3(DBG_SPDCTL|DBG_PRES, "c2_hi", tidx, m.v1, tvars->bemf_mv);
 8017f30:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8017f34:	461a      	mov	r2, r3
 8017f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f38:	685b      	ldr	r3, [r3, #4]
 8017f3a:	9300      	str	r3, [sp, #0]
 8017f3c:	4613      	mov	r3, r2
 8017f3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017f40:	494a      	ldr	r1, [pc, #296]	; (801806c <spdctl_run_tick+0x2c0>)
 8017f42:	2050      	movs	r0, #80	; 0x50
 8017f44:	f7ff fe74 	bl	8017c30 <itm_debug3>
                        	m.from = MA_TRAIN_SC(tidx);
 8017f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f4a:	b25b      	sxtb	r3, r3
 8017f4c:	f003 0307 	and.w	r3, r3, #7
 8017f50:	b25b      	sxtb	r3, r3
 8017f52:	f063 0337 	orn	r3, r3, #55	; 0x37
 8017f56:	b25b      	sxtb	r3, r3
 8017f58:	b2db      	uxtb	r3, r3
 8017f5a:	747b      	strb	r3, [r7, #17]
                        	m.to = MA_CONTROL_T(tidx);
 8017f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f5e:	b25b      	sxtb	r3, r3
 8017f60:	f003 0307 	and.w	r3, r3, #7
 8017f64:	b25b      	sxtb	r3, r3
 8017f66:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8017f6a:	b25b      	sxtb	r3, r3
 8017f6c:	b2db      	uxtb	r3, r3
 8017f6e:	743b      	strb	r3, [r7, #16]
                        	m.cmd = CMD_BEMF_DETECT_ON_C2;
 8017f70:	2313      	movs	r3, #19
 8017f72:	74bb      	strb	r3, [r7, #18]
                        	m.v1u = tvars->C2;
 8017f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f76:	7f5b      	ldrb	r3, [r3, #29]
 8017f78:	b29b      	uxth	r3, r3
 8017f7a:	82bb      	strh	r3, [r7, #20]
                            mqf_write_from_spdctl(&m);
 8017f7c:	f107 0310 	add.w	r3, r7, #16
 8017f80:	4618      	mov	r0, r3
 8017f82:	f7ff febf 	bl	8017d04 <mqf_write_from_spdctl>
                            tvars->c2bemf = 1;
 8017f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017f88:	f892 3036 	ldrb.w	r3, [r2, #54]	; 0x36
 8017f8c:	f043 0301 	orr.w	r3, r3, #1
 8017f90:	f882 3036 	strb.w	r3, [r2, #54]	; 0x36
                    break;
 8017f94:	e048      	b.n	8018028 <spdctl_run_tick+0x27c>
                        itm_debug2(DBG_ERR|DBG_PID, "unk bemf", m.v1, m.from);
 8017f96:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8017f9a:	461a      	mov	r2, r3
 8017f9c:	7e7b      	ldrb	r3, [r7, #25]
 8017f9e:	4934      	ldr	r1, [pc, #208]	; (8018070 <spdctl_run_tick+0x2c4>)
 8017fa0:	4834      	ldr	r0, [pc, #208]	; (8018074 <spdctl_run_tick+0x2c8>)
 8017fa2:	f7ff fe29 	bl	8017bf8 <itm_debug2>
                    break;
 8017fa6:	e03f      	b.n	8018028 <spdctl_run_tick+0x27c>
                    itm_debug1(DBG_SPDCTL, "set_t_spd", m.v1u);
 8017fa8:	8bbb      	ldrh	r3, [r7, #28]
 8017faa:	461a      	mov	r2, r3
 8017fac:	4932      	ldr	r1, [pc, #200]	; (8018078 <spdctl_run_tick+0x2cc>)
 8017fae:	2010      	movs	r0, #16
 8017fb0:	f7ff fe08 	bl	8017bc4 <itm_debug1>
                    tvars->target_speed = (int16_t) m.v1u;
 8017fb4:	8bbb      	ldrh	r3, [r7, #28]
 8017fb6:	b21a      	sxth	r2, r3
 8017fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fba:	801a      	strh	r2, [r3, #0]
                    break;
 8017fbc:	e035      	b.n	801802a <spdctl_run_tick+0x27e>
                    itm_debug3(DBG_SPDCTL|DBG_CTRL, "set_c1_c2", tidx, m.vbytes[0], m.vbytes[2]);
 8017fbe:	7f3b      	ldrb	r3, [r7, #28]
 8017fc0:	461a      	mov	r2, r3
 8017fc2:	7fbb      	ldrb	r3, [r7, #30]
 8017fc4:	9300      	str	r3, [sp, #0]
 8017fc6:	4613      	mov	r3, r2
 8017fc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017fca:	492c      	ldr	r1, [pc, #176]	; (801807c <spdctl_run_tick+0x2d0>)
 8017fcc:	f44f 6082 	mov.w	r0, #1040	; 0x410
 8017fd0:	f7ff fe2e 	bl	8017c30 <itm_debug3>
                    set_c1_c2(tidx, tvars, m.vbytes[0], m.vbytes[1], m.vbytes[2], m.vbytes[3]);
 8017fd4:	7f39      	ldrb	r1, [r7, #28]
 8017fd6:	7f7b      	ldrb	r3, [r7, #29]
 8017fd8:	b258      	sxtb	r0, r3
 8017fda:	7fbb      	ldrb	r3, [r7, #30]
 8017fdc:	7ffa      	ldrb	r2, [r7, #31]
 8017fde:	b252      	sxtb	r2, r2
 8017fe0:	9201      	str	r2, [sp, #4]
 8017fe2:	9300      	str	r3, [sp, #0]
 8017fe4:	4603      	mov	r3, r0
 8017fe6:	460a      	mov	r2, r1
 8017fe8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017fea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017fec:	f000 fac0 	bl	8018570 <set_c1_c2>
                    break;
 8017ff0:	e01b      	b.n	801802a <spdctl_run_tick+0x27e>
                	itm_debug2(DBG_POSEC, "POSE set", tidx, m.v32);
 8017ff2:	69fb      	ldr	r3, [r7, #28]
 8017ff4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017ff6:	4922      	ldr	r1, [pc, #136]	; (8018080 <spdctl_run_tick+0x2d4>)
 8017ff8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8017ffc:	f7ff fdfc 	bl	8017bf8 <itm_debug2>
                	tvars->pose_trig = m.v32*10;
 8018000:	69fa      	ldr	r2, [r7, #28]
 8018002:	4613      	mov	r3, r2
 8018004:	009b      	lsls	r3, r3, #2
 8018006:	4413      	add	r3, r2
 8018008:	005b      	lsls	r3, r3, #1
 801800a:	461a      	mov	r2, r3
 801800c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801800e:	62da      	str	r2, [r3, #44]	; 0x2c
                	pose_check_trig(tidx, tvars, 0);
 8018010:	2200      	movs	r2, #0
 8018012:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018014:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018016:	f000 fc4f 	bl	80188b8 <pose_check_trig>
                	break;
 801801a:	e006      	b.n	801802a <spdctl_run_tick+0x27e>
        	continue;
 801801c:	bf00      	nop
 801801e:	e6e2      	b.n	8017de6 <spdctl_run_tick+0x3a>
        }
 8018020:	bf00      	nop
 8018022:	e6e0      	b.n	8017de6 <spdctl_run_tick+0x3a>
                        break;
 8018024:	bf00      	nop
 8018026:	e6de      	b.n	8017de6 <spdctl_run_tick+0x3a>
                    break;
 8018028:	bf00      	nop
	for (;;) {
 801802a:	e6dc      	b.n	8017de6 <spdctl_run_tick+0x3a>
		//itm_debug1(DBG_SPDCTL, "------ pc", i);
		train_periodic_control(i, dt);
 801802c:	6879      	ldr	r1, [r7, #4]
 801802e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8018030:	f000 f828 	bl	8018084 <train_periodic_control>
	for (int i=0; i<NUM_TRAINS; i++) {
 8018034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018036:	3301      	adds	r3, #1
 8018038:	637b      	str	r3, [r7, #52]	; 0x34
 801803a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801803c:	2b07      	cmp	r3, #7
 801803e:	ddf5      	ble.n	801802c <spdctl_run_tick+0x280>
	}
}
 8018040:	bf00      	nop
 8018042:	3738      	adds	r7, #56	; 0x38
 8018044:	46bd      	mov	sp, r7
 8018046:	bd80      	pop	{r7, pc}
 8018048:	2000545c 	.word	0x2000545c
 801804c:	20005460 	.word	0x20005460
 8018050:	0801a48c 	.word	0x0801a48c
 8018054:	20000608 	.word	0x20000608
 8018058:	20005452 	.word	0x20005452
 801805c:	20005453 	.word	0x20005453
 8018060:	20005464 	.word	0x20005464
 8018064:	0801a498 	.word	0x0801a498
 8018068:	0801a4a0 	.word	0x0801a4a0
 801806c:	0801a4a8 	.word	0x0801a4a8
 8018070:	0801a4b0 	.word	0x0801a4b0
 8018074:	80000004 	.word	0x80000004
 8018078:	0801a4bc 	.word	0x0801a4bc
 801807c:	0801a4c8 	.word	0x0801a4c8
 8018080:	0801a4d4 	.word	0x0801a4d4

08018084 <train_periodic_control>:
    


static void train_periodic_control(int numtrain, uint32_t dt)
{
 8018084:	b580      	push	{r7, lr}
 8018086:	b096      	sub	sp, #88	; 0x58
 8018088:	af02      	add	r7, sp, #8
 801808a:	6078      	str	r0, [r7, #4]
 801808c:	6039      	str	r1, [r7, #0]
	if (stop_all) return;
 801808e:	4b73      	ldr	r3, [pc, #460]	; (801825c <train_periodic_control+0x1d8>)
 8018090:	681b      	ldr	r3, [r3, #0]
 8018092:	2b00      	cmp	r3, #0
 8018094:	f040 8250 	bne.w	8018538 <train_periodic_control+0x4b4>


	USE_TRAIN(numtrain)	// tconf tvars
 8018098:	6878      	ldr	r0, [r7, #4]
 801809a:	f7fe f98b 	bl	80163b4 <get_train_cnf>
 801809e:	6438      	str	r0, [r7, #64]	; 0x40
 80180a0:	687a      	ldr	r2, [r7, #4]
 80180a2:	4613      	mov	r3, r2
 80180a4:	00db      	lsls	r3, r3, #3
 80180a6:	1a9b      	subs	r3, r3, r2
 80180a8:	00db      	lsls	r3, r3, #3
 80180aa:	4a6d      	ldr	r2, [pc, #436]	; (8018260 <train_periodic_control+0x1dc>)
 80180ac:	4413      	add	r3, r2
 80180ae:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (!tconf) {
 80180b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80180b2:	2b00      	cmp	r3, #0
 80180b4:	f000 8242 	beq.w	801853c <train_periodic_control+0x4b8>
        if ((0)) itm_debug1(DBG_SPDCTL, "unconf tr", numtrain);
        return;
    }
	if (!tconf->enabled) {
 80180b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80180ba:	7c9b      	ldrb	r3, [r3, #18]
 80180bc:	2b00      	cmp	r3, #0
 80180be:	f000 823f 	beq.w	8018540 <train_periodic_control+0x4bc>
		//itm_debug1(DBG_SPDCTL, "disabled", numtrain);
		return;
	}
	int16_t v = tvars->target_speed;
 80180c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80180c4:	881b      	ldrh	r3, [r3, #0]
 80180c6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

	itm_debug2(DBG_SPDCTL, "target", numtrain, v);
 80180ca:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80180ce:	687a      	ldr	r2, [r7, #4]
 80180d0:	4964      	ldr	r1, [pc, #400]	; (8018264 <train_periodic_control+0x1e0>)
 80180d2:	2010      	movs	r0, #16
 80180d4:	f7ff fd90 	bl	8017bf8 <itm_debug2>


    // inertia before PID
	if (1==tconf->enable_inertia) {
 80180d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80180da:	7c5b      	ldrb	r3, [r3, #17]
 80180dc:	2b01      	cmp	r3, #1
 80180de:	d126      	bne.n	801812e <train_periodic_control+0xaa>
		int changed;
		inertia_set_target(numtrain, &tconf->inertiacnf, &tvars->inertiavars, tvars->target_speed);
 80180e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80180e2:	f103 010c 	add.w	r1, r3, #12
 80180e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80180e8:	f103 0218 	add.w	r2, r3, #24
 80180ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80180ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80180f2:	6878      	ldr	r0, [r7, #4]
 80180f4:	f7ff fe16 	bl	8017d24 <inertia_set_target>
		//tvars->inertiavars.target = tvars->target_speed;
		v = inertia_value(numtrain, &tconf->inertiacnf, &tvars->inertiavars, &changed);
 80180f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80180fa:	f103 010c 	add.w	r1, r3, #12
 80180fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018100:	f103 0218 	add.w	r2, r3, #24
 8018104:	f107 0318 	add.w	r3, r7, #24
 8018108:	6878      	ldr	r0, [r7, #4]
 801810a:	f7ff faf5 	bl	80176f8 <inertia_value>
 801810e:	4603      	mov	r3, r0
 8018110:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		itm_debug3(DBG_INERTIA, "inertia", numtrain, tvars->target_speed, v);
 8018114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018116:	f9b3 3000 	ldrsh.w	r3, [r3]
 801811a:	461a      	mov	r2, r3
 801811c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8018120:	9300      	str	r3, [sp, #0]
 8018122:	4613      	mov	r3, r2
 8018124:	687a      	ldr	r2, [r7, #4]
 8018126:	4950      	ldr	r1, [pc, #320]	; (8018268 <train_periodic_control+0x1e4>)
 8018128:	2008      	movs	r0, #8
 801812a:	f7ff fd81 	bl	8017c30 <itm_debug3>
	}
    

    if (tconf->enable_pid) {
 801812e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018130:	7cdb      	ldrb	r3, [r3, #19]
 8018132:	2b00      	cmp	r3, #0
 8018134:	d01e      	beq.n	8018174 <train_periodic_control+0xf0>
        // corresponding BEMF target
        // 100% = 1.5V
        int32_t tbemf = 1500*v/10 * tvars->C1_dir;
 8018136:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801813a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 801813e:	fb02 f303 	mul.w	r3, r2, r3
 8018142:	4a4a      	ldr	r2, [pc, #296]	; (801826c <train_periodic_control+0x1e8>)
 8018144:	fb82 1203 	smull	r1, r2, r2, r3
 8018148:	1092      	asrs	r2, r2, #2
 801814a:	17db      	asrs	r3, r3, #31
 801814c:	1ad3      	subs	r3, r2, r3
 801814e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018150:	f992 201e 	ldrsb.w	r2, [r2, #30]
 8018154:	fb02 f303 	mul.w	r3, r2, r3
 8018158:	63bb      	str	r3, [r7, #56]	; 0x38
        tbemf = tbemf / 4; //XXX why ?? new cables (more capacitance ?)
 801815a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801815c:	2b00      	cmp	r3, #0
 801815e:	da00      	bge.n	8018162 <train_periodic_control+0xde>
 8018160:	3303      	adds	r3, #3
 8018162:	109b      	asrs	r3, r3, #2
 8018164:	63bb      	str	r3, [r7, #56]	; 0x38
        // TODO make this divisor a parameter
        pidctl_set_target(&tconf->pidcnf, &tvars->pidvars, tbemf);
 8018166:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8018168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801816a:	3308      	adds	r3, #8
 801816c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801816e:	4619      	mov	r1, r3
 8018170:	f7ff fc68 	bl	8017a44 <pidctl_set_target>
        // XXXX notif_target_bemf(tconf, tvars, tbemf);
    }

    int32_t bemf_mv = tvars->bemf_mv;
 8018174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018176:	685b      	ldr	r3, [r3, #4]
 8018178:	64bb      	str	r3, [r7, #72]	; 0x48
    if (tconf->bemfIIR) {
 801817a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801817c:	7d9b      	ldrb	r3, [r3, #22]
 801817e:	2b00      	cmp	r3, #0
 8018180:	d017      	beq.n	80181b2 <train_periodic_control+0x12e>
    	tvars->bemfiir = (80*tvars->bemfiir + 20*bemf_mv)/100;
 8018182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018184:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8018186:	4613      	mov	r3, r2
 8018188:	009b      	lsls	r3, r3, #2
 801818a:	4413      	add	r3, r2
 801818c:	011b      	lsls	r3, r3, #4
 801818e:	4619      	mov	r1, r3
 8018190:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018192:	4613      	mov	r3, r2
 8018194:	009b      	lsls	r3, r3, #2
 8018196:	4413      	add	r3, r2
 8018198:	009b      	lsls	r3, r3, #2
 801819a:	440b      	add	r3, r1
 801819c:	4a34      	ldr	r2, [pc, #208]	; (8018270 <train_periodic_control+0x1ec>)
 801819e:	fb82 1203 	smull	r1, r2, r2, r3
 80181a2:	1152      	asrs	r2, r2, #5
 80181a4:	17db      	asrs	r3, r3, #31
 80181a6:	1ad2      	subs	r2, r2, r3
 80181a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80181aa:	631a      	str	r2, [r3, #48]	; 0x30
    	bemf_mv = tvars->bemfiir;
 80181ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80181ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80181b0:	64bb      	str	r3, [r7, #72]	; 0x48
    }
    if (tconf->enable_pid) {
 80181b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80181b4:	7cdb      	ldrb	r3, [r3, #19]
 80181b6:	2b00      	cmp	r3, #0
 80181b8:	f000 80b9 	beq.w	801832e <train_periodic_control+0x2aa>
    	if (tvars->target_speed) {
 80181bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80181be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80181c2:	2b00      	cmp	r3, #0
 80181c4:	d004      	beq.n	80181d0 <train_periodic_control+0x14c>
    		tvars->pidvars.stopped = 0;
 80181c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80181c8:	7d13      	ldrb	r3, [r2, #20]
 80181ca:	f36f 0341 	bfc	r3, #1, #1
 80181ce:	7513      	strb	r3, [r2, #20]
    	}
        if (!tvars->pidvars.stopped && (tvars->target_speed == 0) && (abs(tvars->bemf_mv)<100)) {
 80181d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80181d2:	7d1b      	ldrb	r3, [r3, #20]
 80181d4:	f003 0302 	and.w	r3, r3, #2
 80181d8:	b2db      	uxtb	r3, r3
 80181da:	2b00      	cmp	r3, #0
 80181dc:	d12c      	bne.n	8018238 <train_periodic_control+0x1b4>
 80181de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80181e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80181e4:	2b00      	cmp	r3, #0
 80181e6:	d127      	bne.n	8018238 <train_periodic_control+0x1b4>
 80181e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80181ea:	685b      	ldr	r3, [r3, #4]
 80181ec:	f113 0f63 	cmn.w	r3, #99	; 0x63
 80181f0:	db22      	blt.n	8018238 <train_periodic_control+0x1b4>
 80181f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80181f4:	685b      	ldr	r3, [r3, #4]
 80181f6:	2b63      	cmp	r3, #99	; 0x63
 80181f8:	dc1e      	bgt.n	8018238 <train_periodic_control+0x1b4>
    		itm_debug1(DBG_PID, "stop", 0);
 80181fa:	2200      	movs	r2, #0
 80181fc:	491d      	ldr	r1, [pc, #116]	; (8018274 <train_periodic_control+0x1f0>)
 80181fe:	2004      	movs	r0, #4
 8018200:	f7ff fce0 	bl	8017bc4 <itm_debug1>
			pidctl_reset(&tconf->pidcnf, &tvars->pidvars);
 8018204:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8018206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018208:	3308      	adds	r3, #8
 801820a:	4619      	mov	r1, r3
 801820c:	4610      	mov	r0, r2
 801820e:	f7ff fbf5 	bl	80179fc <pidctl_reset>
			debug_info('T', numtrain, "STOP_PID", 0,0, 0);
 8018212:	6879      	ldr	r1, [r7, #4]
 8018214:	2300      	movs	r3, #0
 8018216:	9301      	str	r3, [sp, #4]
 8018218:	2300      	movs	r3, #0
 801821a:	9300      	str	r3, [sp, #0]
 801821c:	2300      	movs	r3, #0
 801821e:	4a16      	ldr	r2, [pc, #88]	; (8018278 <train_periodic_control+0x1f4>)
 8018220:	2054      	movs	r0, #84	; 0x54
 8018222:	f7ff fd45 	bl	8017cb0 <debug_info>
			tvars->pidvars.stopped = 1;
 8018226:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018228:	7d13      	ldrb	r3, [r2, #20]
 801822a:	f043 0302 	orr.w	r3, r3, #2
 801822e:	7513      	strb	r3, [r2, #20]
        	v = 0;
 8018230:	2300      	movs	r3, #0
 8018232:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8018236:	e07a      	b.n	801832e <train_periodic_control+0x2aa>
        } else if (tvars->pidvars.stopped) {
 8018238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801823a:	7d1b      	ldrb	r3, [r3, #20]
 801823c:	f003 0302 	and.w	r3, r3, #2
 8018240:	b2db      	uxtb	r3, r3
 8018242:	2b00      	cmp	r3, #0
 8018244:	d01c      	beq.n	8018280 <train_periodic_control+0x1fc>
    		itm_debug2(DBG_PID, "stopped", numtrain, v);
 8018246:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801824a:	687a      	ldr	r2, [r7, #4]
 801824c:	490b      	ldr	r1, [pc, #44]	; (801827c <train_periodic_control+0x1f8>)
 801824e:	2004      	movs	r0, #4
 8018250:	f7ff fcd2 	bl	8017bf8 <itm_debug2>
        	v = 0;
 8018254:	2300      	movs	r3, #0
 8018256:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 801825a:	e068      	b.n	801832e <train_periodic_control+0x2aa>
 801825c:	20005454 	.word	0x20005454
 8018260:	20005464 	.word	0x20005464
 8018264:	0801a4e0 	.word	0x0801a4e0
 8018268:	0801a4e8 	.word	0x0801a4e8
 801826c:	66666667 	.word	0x66666667
 8018270:	51eb851f 	.word	0x51eb851f
 8018274:	0801a4f0 	.word	0x0801a4f0
 8018278:	0801a4f8 	.word	0x0801a4f8
 801827c:	0801a504 	.word	0x0801a504
        } else {
        	itm_debug3(DBG_PID, "pid", numtrain, bemf_mv, v);
 8018280:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8018284:	9300      	str	r3, [sp, #0]
 8018286:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018288:	687a      	ldr	r2, [r7, #4]
 801828a:	49af      	ldr	r1, [pc, #700]	; (8018548 <train_periodic_control+0x4c4>)
 801828c:	2004      	movs	r0, #4
 801828e:	f7ff fccf 	bl	8017c30 <itm_debug3>
        	if (bemf_mv>MAX_PID_VALUE)  {
 8018292:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018294:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8018298:	4293      	cmp	r3, r2
 801829a:	dd0b      	ble.n	80182b4 <train_periodic_control+0x230>
        		itm_debug3(DBG_PID|DBG_SPDCTL, "MAX_PID", numtrain, bemf_mv, MAX_PID_VALUE);
 801829c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80182a0:	9300      	str	r3, [sp, #0]
 80182a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80182a4:	687a      	ldr	r2, [r7, #4]
 80182a6:	49a9      	ldr	r1, [pc, #676]	; (801854c <train_periodic_control+0x4c8>)
 80182a8:	2014      	movs	r0, #20
 80182aa:	f7ff fcc1 	bl	8017c30 <itm_debug3>
        		bemf_mv = MAX_PID_VALUE; // XXX
 80182ae:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80182b2:	64bb      	str	r3, [r7, #72]	; 0x48
        	}
        	if (bemf_mv<-MAX_PID_VALUE) {
 80182b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80182b6:	4aa6      	ldr	r2, [pc, #664]	; (8018550 <train_periodic_control+0x4cc>)
 80182b8:	4293      	cmp	r3, r2
 80182ba:	da0a      	bge.n	80182d2 <train_periodic_control+0x24e>
        		itm_debug3(DBG_PID|DBG_SPDCTL, "MAX_PID", numtrain, bemf_mv, MAX_PID_VALUE);
 80182bc:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80182c0:	9300      	str	r3, [sp, #0]
 80182c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80182c4:	687a      	ldr	r2, [r7, #4]
 80182c6:	49a1      	ldr	r1, [pc, #644]	; (801854c <train_periodic_control+0x4c8>)
 80182c8:	2014      	movs	r0, #20
 80182ca:	f7ff fcb1 	bl	8017c30 <itm_debug3>
        		bemf_mv = -MAX_PID_VALUE;
 80182ce:	4ba0      	ldr	r3, [pc, #640]	; (8018550 <train_periodic_control+0x4cc>)
 80182d0:	64bb      	str	r3, [r7, #72]	; 0x48
        	}

        	int32_t v2 = pidctl_value(&tconf->pidcnf, &tvars->pidvars, bemf_mv)/10; //XXX
 80182d2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80182d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80182d6:	3308      	adds	r3, #8
 80182d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80182da:	4619      	mov	r1, r3
 80182dc:	f7ff fbc6 	bl	8017a6c <pidctl_value>
 80182e0:	4603      	mov	r3, r0
 80182e2:	4a9c      	ldr	r2, [pc, #624]	; (8018554 <train_periodic_control+0x4d0>)
 80182e4:	fb82 1203 	smull	r1, r2, r2, r3
 80182e8:	1092      	asrs	r2, r2, #2
 80182ea:	17db      	asrs	r3, r3, #31
 80182ec:	1ad3      	subs	r3, r2, r3
 80182ee:	637b      	str	r3, [r7, #52]	; 0x34
        	int32_t v3;
        	v3 = (v2>100) ? 100 : v2;
 80182f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80182f2:	2b64      	cmp	r3, #100	; 0x64
 80182f4:	bfa8      	it	ge
 80182f6:	2364      	movge	r3, #100	; 0x64
 80182f8:	633b      	str	r3, [r7, #48]	; 0x30
        	v3 = (v3<-100) ? -100: v3;
 80182fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182fc:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8018300:	4293      	cmp	r3, r2
 8018302:	bfb8      	it	lt
 8018304:	4613      	movlt	r3, r2
 8018306:	633b      	str	r3, [r7, #48]	; 0x30
        	itm_debug3(DBG_PID, "pid/r", numtrain, v3, v2);
 8018308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801830a:	9300      	str	r3, [sp, #0]
 801830c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801830e:	687a      	ldr	r2, [r7, #4]
 8018310:	4991      	ldr	r1, [pc, #580]	; (8018558 <train_periodic_control+0x4d4>)
 8018312:	2004      	movs	r0, #4
 8018314:	f7ff fc8c 	bl	8017c30 <itm_debug3>
        	v = (int16_t)v3 * tvars->C1_dir; // because it will be multiplied again when setting pwm
 8018318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801831a:	b29a      	uxth	r2, r3
 801831c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801831e:	f993 301e 	ldrsb.w	r3, [r3, #30]
 8018322:	b29b      	uxth	r3, r3
 8018324:	fb12 f303 	smulbb	r3, r2, r3
 8018328:	b29b      	uxth	r3, r3
 801832a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        }
    }
    if (tconf->postIIR) {
 801832e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018330:	7ddb      	ldrb	r3, [r3, #23]
 8018332:	2b00      	cmp	r3, #0
 8018334:	d01c      	beq.n	8018370 <train_periodic_control+0x2ec>
        tvars->v_iir = (80*tvars->v_iir+20*v)/100;
 8018336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018338:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 801833c:	461a      	mov	r2, r3
 801833e:	4613      	mov	r3, r2
 8018340:	009b      	lsls	r3, r3, #2
 8018342:	4413      	add	r3, r2
 8018344:	011b      	lsls	r3, r3, #4
 8018346:	4619      	mov	r1, r3
 8018348:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 801834c:	4613      	mov	r3, r2
 801834e:	009b      	lsls	r3, r3, #2
 8018350:	4413      	add	r3, r2
 8018352:	009b      	lsls	r3, r3, #2
 8018354:	440b      	add	r3, r1
 8018356:	4a81      	ldr	r2, [pc, #516]	; (801855c <train_periodic_control+0x4d8>)
 8018358:	fb82 1203 	smull	r1, r2, r2, r3
 801835c:	1152      	asrs	r2, r2, #5
 801835e:	17db      	asrs	r3, r3, #31
 8018360:	1ad3      	subs	r3, r2, r3
 8018362:	b21a      	sxth	r2, r3
 8018364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018366:	869a      	strh	r2, [r3, #52]	; 0x34
        v = tvars->v_iir;
 8018368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801836a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 801836c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    }
    // or inertia after PID
    if (2==tconf->enable_inertia) {
 8018370:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018372:	7c5b      	ldrb	r3, [r3, #17]
 8018374:	2b02      	cmp	r3, #2
 8018376:	d117      	bne.n	80183a8 <train_periodic_control+0x324>
		inertia_set_target(numtrain, &tconf->inertiacnf, &tvars->inertiavars, v);
 8018378:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801837a:	f103 010c 	add.w	r1, r3, #12
 801837e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018380:	f103 0218 	add.w	r2, r3, #24
 8018384:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8018388:	6878      	ldr	r0, [r7, #4]
 801838a:	f7ff fccb 	bl	8017d24 <inertia_set_target>
        //tvars->inertiavars.target = v;
        v = inertia_value(numtrain, &tconf->inertiacnf, &tvars->inertiavars, NULL);
 801838e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018390:	f103 010c 	add.w	r1, r3, #12
 8018394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018396:	f103 0218 	add.w	r2, r3, #24
 801839a:	2300      	movs	r3, #0
 801839c:	6878      	ldr	r0, [r7, #4]
 801839e:	f7ff f9ab 	bl	80176f8 <inertia_value>
 80183a2:	4603      	mov	r3, r0
 80183a4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    }

    if (tconf->en_spd2pow) {
 80183a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80183aa:	7e5b      	ldrb	r3, [r3, #25]
 80183ac:	2b00      	cmp	r3, #0
 80183ae:	d02d      	beq.n	801840c <train_periodic_control+0x388>
    	// [0-100] -> [min_pwm .. MAX_PWM]
    	int s = SIGNOF(v);
 80183b0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80183b4:	2b00      	cmp	r3, #0
 80183b6:	da02      	bge.n	80183be <train_periodic_control+0x33a>
 80183b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80183bc:	e000      	b.n	80183c0 <train_periodic_control+0x33c>
 80183be:	2301      	movs	r3, #1
 80183c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    	int a = abs(v);
 80183c2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80183c6:	2b00      	cmp	r3, #0
 80183c8:	bfb8      	it	lt
 80183ca:	425b      	neglt	r3, r3
 80183cc:	62bb      	str	r3, [r7, #40]	; 0x28
    	int v2 = (a>1) ? a * (MAX_PWM-tconf->min_power)/100 + tconf->min_power : 0;
 80183ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183d0:	2b01      	cmp	r3, #1
 80183d2:	dd10      	ble.n	80183f6 <train_periodic_control+0x372>
 80183d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80183d6:	7e9b      	ldrb	r3, [r3, #26]
 80183d8:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 80183dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80183de:	fb02 f303 	mul.w	r3, r2, r3
 80183e2:	4a5e      	ldr	r2, [pc, #376]	; (801855c <train_periodic_control+0x4d8>)
 80183e4:	fb82 1203 	smull	r1, r2, r2, r3
 80183e8:	1152      	asrs	r2, r2, #5
 80183ea:	17db      	asrs	r3, r3, #31
 80183ec:	1ad3      	subs	r3, r2, r3
 80183ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80183f0:	7e92      	ldrb	r2, [r2, #26]
 80183f2:	4413      	add	r3, r2
 80183f4:	e000      	b.n	80183f8 <train_periodic_control+0x374>
 80183f6:	2300      	movs	r3, #0
 80183f8:	627b      	str	r3, [r7, #36]	; 0x24
    	v = s * v2;
 80183fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183fc:	b29a      	uxth	r2, r3
 80183fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018400:	b29b      	uxth	r3, r3
 8018402:	fb12 f303 	smulbb	r3, r2, r3
 8018406:	b29b      	uxth	r3, r3
 8018408:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    }

    int changed = (tvars->last_speed != v);
 801840c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801840e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8018412:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8018416:	429a      	cmp	r2, r3
 8018418:	bf14      	ite	ne
 801841a:	2301      	movne	r3, #1
 801841c:	2300      	moveq	r3, #0
 801841e:	b2db      	uxtb	r3, r3
 8018420:	623b      	str	r3, [r7, #32]
    tvars->last_speed = v;
 8018422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018424:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8018428:	841a      	strh	r2, [r3, #32]

    itm_debug3(DBG_PID|DBG_SPDCTL, "spd", numtrain, v, changed);
 801842a:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 801842e:	6a3b      	ldr	r3, [r7, #32]
 8018430:	9300      	str	r3, [sp, #0]
 8018432:	4613      	mov	r3, r2
 8018434:	687a      	ldr	r2, [r7, #4]
 8018436:	494a      	ldr	r1, [pc, #296]	; (8018560 <train_periodic_control+0x4dc>)
 8018438:	2014      	movs	r0, #20
 801843a:	f7ff fbf9 	bl	8017c30 <itm_debug3>

    if (changed) {
 801843e:	6a3b      	ldr	r3, [r7, #32]
 8018440:	2b00      	cmp	r3, #0
 8018442:	d01a      	beq.n	801847a <train_periodic_control+0x3f6>
    	_set_speed(numtrain, tconf, tvars);
 8018444:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018446:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8018448:	6878      	ldr	r0, [r7, #4]
 801844a:	f000 f959 	bl	8018700 <_set_speed>
        if ((1)) { // TODO remove
            msg_64_t m;
            m.from = MA_TRAIN_SC(numtrain);
 801844e:	687b      	ldr	r3, [r7, #4]
 8018450:	b25b      	sxtb	r3, r3
 8018452:	f003 0307 	and.w	r3, r3, #7
 8018456:	b25b      	sxtb	r3, r3
 8018458:	f063 0337 	orn	r3, r3, #55	; 0x37
 801845c:	b25b      	sxtb	r3, r3
 801845e:	b2db      	uxtb	r3, r3
 8018460:	747b      	strb	r3, [r7, #17]
            m.to = MA_UI(UISUB_TFT);
 8018462:	2381      	movs	r3, #129	; 0x81
 8018464:	743b      	strb	r3, [r7, #16]
            m.cmd = CMD_NOTIF_SPEED;
 8018466:	23a0      	movs	r3, #160	; 0xa0
 8018468:	74bb      	strb	r3, [r7, #18]
            m.v1 = v;
 801846a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801846e:	82bb      	strh	r3, [r7, #20]
            mqf_write_from_spdctl(&m);
 8018470:	f107 0310 	add.w	r3, r7, #16
 8018474:	4618      	mov	r0, r3
 8018476:	f7ff fc45 	bl	8017d04 <mqf_write_from_spdctl>
        }
    }
    if (tconf->notify_speed) { // to be removed
 801847a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801847c:	7d1b      	ldrb	r3, [r3, #20]
 801847e:	2b00      	cmp	r3, #0
 8018480:	d017      	beq.n	80184b2 <train_periodic_control+0x42e>
    	struct spd_notif n;
    	n.sv100 = v;
 8018482:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8018486:	813b      	strh	r3, [r7, #8]
    	n.pid_target = tvars->pidvars.target_v;
 8018488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801848a:	691b      	ldr	r3, [r3, #16]
 801848c:	b21b      	sxth	r3, r3
 801848e:	817b      	strh	r3, [r7, #10]
    	//canton_vars_t *cv1 = get_canton_vars(tvars->current_canton);
    	n.bemf_centivolt = tvars->bemf_mv/10; //cv1->bemf_centivolt;
 8018490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018492:	685b      	ldr	r3, [r3, #4]
 8018494:	4a2f      	ldr	r2, [pc, #188]	; (8018554 <train_periodic_control+0x4d0>)
 8018496:	fb82 1203 	smull	r1, r2, r2, r3
 801849a:	1092      	asrs	r2, r2, #2
 801849c:	17db      	asrs	r3, r3, #31
 801849e:	1ad3      	subs	r3, r2, r3
 80184a0:	60fb      	str	r3, [r7, #12]
    	train_notif(numtrain, 'V', (void *)&n, sizeof(n));
 80184a2:	687b      	ldr	r3, [r7, #4]
 80184a4:	b2d8      	uxtb	r0, r3
 80184a6:	f107 0208 	add.w	r2, r7, #8
 80184aa:	2308      	movs	r3, #8
 80184ac:	2156      	movs	r1, #86	; 0x56
 80184ae:	f7ff fbea 	bl	8017c86 <train_notif>
    }

    /* estimate speed/position with bemf */
    if ((1)) {
        int32_t b = tvars->bemf_mv;
 80184b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80184b4:	685b      	ldr	r3, [r3, #4]
 80184b6:	647b      	str	r3, [r7, #68]	; 0x44
        if (abs(b)<100) b = 0; // XXX XXXX
 80184b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80184ba:	f113 0f63 	cmn.w	r3, #99	; 0x63
 80184be:	db04      	blt.n	80184ca <train_periodic_control+0x446>
 80184c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80184c2:	2b63      	cmp	r3, #99	; 0x63
 80184c4:	dc01      	bgt.n	80184ca <train_periodic_control+0x446>
 80184c6:	2300      	movs	r3, #0
 80184c8:	647b      	str	r3, [r7, #68]	; 0x44

        // TODO: BEMF to speed. currently part of it is done in convert_to_centivolt
        //       but we assume speed is really proportional to BEMF

        //  dt is not precise enough
        int32_t pi = (b*100)/cur_freqhz;
 80184ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80184cc:	2264      	movs	r2, #100	; 0x64
 80184ce:	fb02 f203 	mul.w	r2, r2, r3
 80184d2:	4b24      	ldr	r3, [pc, #144]	; (8018564 <train_periodic_control+0x4e0>)
 80184d4:	681b      	ldr	r3, [r3, #0]
 80184d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80184da:	61fb      	str	r3, [r7, #28]
        tvars->position_estimate += pi;
 80184dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80184de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80184e0:	69fb      	ldr	r3, [r7, #28]
 80184e2:	441a      	add	r2, r3
 80184e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80184e6:	629a      	str	r2, [r3, #40]	; 0x28
        itm_debug3(DBG_POSE, "pose", numtrain, tvars->position_estimate, b);
 80184e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80184ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80184ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80184ee:	9300      	str	r3, [sp, #0]
 80184f0:	4613      	mov	r3, r2
 80184f2:	687a      	ldr	r2, [r7, #4]
 80184f4:	491c      	ldr	r1, [pc, #112]	; (8018568 <train_periodic_control+0x4e4>)
 80184f6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80184fa:	f7ff fb99 	bl	8017c30 <itm_debug3>
        itm_debug3(DBG_POSE, "pi", b, dt,  pi);
 80184fe:	683a      	ldr	r2, [r7, #0]
 8018500:	69fb      	ldr	r3, [r7, #28]
 8018502:	9300      	str	r3, [sp, #0]
 8018504:	4613      	mov	r3, r2
 8018506:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8018508:	4918      	ldr	r1, [pc, #96]	; (801856c <train_periodic_control+0x4e8>)
 801850a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 801850e:	f7ff fb8f 	bl	8017c30 <itm_debug3>

        pose_check_trig(numtrain, tvars, b);
 8018512:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8018514:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8018516:	6878      	ldr	r0, [r7, #4]
 8018518:	f000 f9ce 	bl	80188b8 <pose_check_trig>
        if (tconf->notify_pose) {
 801851c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801851e:	7d5b      	ldrb	r3, [r3, #21]
 8018520:	2b00      	cmp	r3, #0
 8018522:	d00e      	beq.n	8018542 <train_periodic_control+0x4be>
    		train_notif(numtrain, 'i', (void *)&tvars->position_estimate, sizeof(int32_t));
 8018524:	687b      	ldr	r3, [r7, #4]
 8018526:	b2d8      	uxtb	r0, r3
 8018528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801852a:	f103 0228 	add.w	r2, r3, #40	; 0x28
 801852e:	2304      	movs	r3, #4
 8018530:	2169      	movs	r1, #105	; 0x69
 8018532:	f7ff fba8 	bl	8017c86 <train_notif>
 8018536:	e004      	b.n	8018542 <train_periodic_control+0x4be>
	if (stop_all) return;
 8018538:	bf00      	nop
 801853a:	e002      	b.n	8018542 <train_periodic_control+0x4be>
        return;
 801853c:	bf00      	nop
 801853e:	e000      	b.n	8018542 <train_periodic_control+0x4be>
		return;
 8018540:	bf00      	nop
        }
    }
}
 8018542:	3750      	adds	r7, #80	; 0x50
 8018544:	46bd      	mov	sp, r7
 8018546:	bd80      	pop	{r7, pc}
 8018548:	0801a50c 	.word	0x0801a50c
 801854c:	0801a510 	.word	0x0801a510
 8018550:	fffff448 	.word	0xfffff448
 8018554:	66666667 	.word	0x66666667
 8018558:	0801a518 	.word	0x0801a518
 801855c:	51eb851f 	.word	0x51eb851f
 8018560:	0801a520 	.word	0x0801a520
 8018564:	2000060c 	.word	0x2000060c
 8018568:	0801a524 	.word	0x0801a524
 801856c:	0801a52c 	.word	0x0801a52c

08018570 <set_c1_c2>:


static void set_c1_c2(int tidx, train_vars_t *tvars, uint8_t c1, int8_t dir1, uint8_t c2, int8_t dir2)
{
 8018570:	b580      	push	{r7, lr}
 8018572:	b088      	sub	sp, #32
 8018574:	af02      	add	r7, sp, #8
 8018576:	60f8      	str	r0, [r7, #12]
 8018578:	60b9      	str	r1, [r7, #8]
 801857a:	4611      	mov	r1, r2
 801857c:	461a      	mov	r2, r3
 801857e:	460b      	mov	r3, r1
 8018580:	71fb      	strb	r3, [r7, #7]
 8018582:	4613      	mov	r3, r2
 8018584:	71bb      	strb	r3, [r7, #6]
	msg_64_t m;
	m.from = MA_TRAIN_SC(tidx);
 8018586:	68fb      	ldr	r3, [r7, #12]
 8018588:	b25b      	sxtb	r3, r3
 801858a:	f003 0307 	and.w	r3, r3, #7
 801858e:	b25b      	sxtb	r3, r3
 8018590:	f063 0337 	orn	r3, r3, #55	; 0x37
 8018594:	b25b      	sxtb	r3, r3
 8018596:	b2db      	uxtb	r3, r3
 8018598:	747b      	strb	r3, [r7, #17]

	itm_debug3(DBG_SPDCTL, "s-c1", tidx, c1, dir1);
 801859a:	79fa      	ldrb	r2, [r7, #7]
 801859c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80185a0:	9300      	str	r3, [sp, #0]
 80185a2:	4613      	mov	r3, r2
 80185a4:	68fa      	ldr	r2, [r7, #12]
 80185a6:	4953      	ldr	r1, [pc, #332]	; (80186f4 <set_c1_c2+0x184>)
 80185a8:	2010      	movs	r0, #16
 80185aa:	f7ff fb41 	bl	8017c30 <itm_debug3>
	itm_debug3(DBG_SPDCTL, "s-c2", tidx, c2, dir2);
 80185ae:	f897 2020 	ldrb.w	r2, [r7, #32]
 80185b2:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 80185b6:	9300      	str	r3, [sp, #0]
 80185b8:	4613      	mov	r3, r2
 80185ba:	68fa      	ldr	r2, [r7, #12]
 80185bc:	494e      	ldr	r1, [pc, #312]	; (80186f8 <set_c1_c2+0x188>)
 80185be:	2010      	movs	r0, #16
 80185c0:	f7ff fb36 	bl	8017c30 <itm_debug3>

	tvars->c2bemf = 0;
 80185c4:	68ba      	ldr	r2, [r7, #8]
 80185c6:	f892 3036 	ldrb.w	r3, [r2, #54]	; 0x36
 80185ca:	f36f 0300 	bfc	r3, #0, #1
 80185ce:	f882 3036 	strb.w	r3, [r2, #54]	; 0x36

	if ((tvars->C1 != 0xFF) && (tvars->C1 != c1)  && (tvars->C1 != c2)) {
 80185d2:	68bb      	ldr	r3, [r7, #8]
 80185d4:	7f1b      	ldrb	r3, [r3, #28]
 80185d6:	2bff      	cmp	r3, #255	; 0xff
 80185d8:	d01b      	beq.n	8018612 <set_c1_c2+0xa2>
 80185da:	68bb      	ldr	r3, [r7, #8]
 80185dc:	7f1b      	ldrb	r3, [r3, #28]
 80185de:	79fa      	ldrb	r2, [r7, #7]
 80185e0:	429a      	cmp	r2, r3
 80185e2:	d016      	beq.n	8018612 <set_c1_c2+0xa2>
 80185e4:	68bb      	ldr	r3, [r7, #8]
 80185e6:	7f1b      	ldrb	r3, [r3, #28]
 80185e8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80185ec:	429a      	cmp	r2, r3
 80185ee:	d010      	beq.n	8018612 <set_c1_c2+0xa2>
		m.to = tvars->C1;
 80185f0:	68bb      	ldr	r3, [r7, #8]
 80185f2:	7f1b      	ldrb	r3, [r3, #28]
 80185f4:	743b      	strb	r3, [r7, #16]
		m.cmd = CMD_STOP;
 80185f6:	2302      	movs	r3, #2
 80185f8:	74bb      	strb	r3, [r7, #18]
		mqf_write_from_spdctl(&m);
 80185fa:	f107 0310 	add.w	r3, r7, #16
 80185fe:	4618      	mov	r0, r3
 8018600:	f7ff fb80 	bl	8017d04 <mqf_write_from_spdctl>
		m.cmd = CMD_BEMF_OFF;
 8018604:	2341      	movs	r3, #65	; 0x41
 8018606:	74bb      	strb	r3, [r7, #18]
		mqf_write_from_spdctl(&m);
 8018608:	f107 0310 	add.w	r3, r7, #16
 801860c:	4618      	mov	r0, r3
 801860e:	f7ff fb79 	bl	8017d04 <mqf_write_from_spdctl>
	}
	if ((tvars->C2 != 0xFF) && (tvars->C2 != c1)  && (tvars->C2 != c2)) {
 8018612:	68bb      	ldr	r3, [r7, #8]
 8018614:	7f5b      	ldrb	r3, [r3, #29]
 8018616:	2bff      	cmp	r3, #255	; 0xff
 8018618:	d01b      	beq.n	8018652 <set_c1_c2+0xe2>
 801861a:	68bb      	ldr	r3, [r7, #8]
 801861c:	7f5b      	ldrb	r3, [r3, #29]
 801861e:	79fa      	ldrb	r2, [r7, #7]
 8018620:	429a      	cmp	r2, r3
 8018622:	d016      	beq.n	8018652 <set_c1_c2+0xe2>
 8018624:	68bb      	ldr	r3, [r7, #8]
 8018626:	7f5b      	ldrb	r3, [r3, #29]
 8018628:	f897 2020 	ldrb.w	r2, [r7, #32]
 801862c:	429a      	cmp	r2, r3
 801862e:	d010      	beq.n	8018652 <set_c1_c2+0xe2>
		m.to = tvars->C2;
 8018630:	68bb      	ldr	r3, [r7, #8]
 8018632:	7f5b      	ldrb	r3, [r3, #29]
 8018634:	743b      	strb	r3, [r7, #16]
		m.cmd = CMD_STOP;
 8018636:	2302      	movs	r3, #2
 8018638:	74bb      	strb	r3, [r7, #18]
		mqf_write_from_spdctl(&m);
 801863a:	f107 0310 	add.w	r3, r7, #16
 801863e:	4618      	mov	r0, r3
 8018640:	f7ff fb60 	bl	8017d04 <mqf_write_from_spdctl>
		m.cmd = CMD_BEMF_OFF;
 8018644:	2341      	movs	r3, #65	; 0x41
 8018646:	74bb      	strb	r3, [r7, #18]
		mqf_write_from_spdctl(&m);
 8018648:	f107 0310 	add.w	r3, r7, #16
 801864c:	4618      	mov	r0, r3
 801864e:	f7ff fb59 	bl	8017d04 <mqf_write_from_spdctl>
	}
	if ((c1 != 0xFF) && (c1 != tvars->C1) && (c1 != tvars->C2)) {
 8018652:	79fb      	ldrb	r3, [r7, #7]
 8018654:	2bff      	cmp	r3, #255	; 0xff
 8018656:	d012      	beq.n	801867e <set_c1_c2+0x10e>
 8018658:	68bb      	ldr	r3, [r7, #8]
 801865a:	7f1b      	ldrb	r3, [r3, #28]
 801865c:	79fa      	ldrb	r2, [r7, #7]
 801865e:	429a      	cmp	r2, r3
 8018660:	d00d      	beq.n	801867e <set_c1_c2+0x10e>
 8018662:	68bb      	ldr	r3, [r7, #8]
 8018664:	7f5b      	ldrb	r3, [r3, #29]
 8018666:	79fa      	ldrb	r2, [r7, #7]
 8018668:	429a      	cmp	r2, r3
 801866a:	d008      	beq.n	801867e <set_c1_c2+0x10e>
		m.to = c1;
 801866c:	79fb      	ldrb	r3, [r7, #7]
 801866e:	743b      	strb	r3, [r7, #16]
		m.cmd = CMD_BEMF_ON;
 8018670:	2340      	movs	r3, #64	; 0x40
 8018672:	74bb      	strb	r3, [r7, #18]
		mqf_write_from_spdctl(&m);
 8018674:	f107 0310 	add.w	r3, r7, #16
 8018678:	4618      	mov	r0, r3
 801867a:	f7ff fb43 	bl	8017d04 <mqf_write_from_spdctl>
	}
	if ((c2 != 0xFF) && (c2 != tvars->C1) && (c2 != tvars->C2)) {
 801867e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018682:	2bff      	cmp	r3, #255	; 0xff
 8018684:	d015      	beq.n	80186b2 <set_c1_c2+0x142>
 8018686:	68bb      	ldr	r3, [r7, #8]
 8018688:	7f1b      	ldrb	r3, [r3, #28]
 801868a:	f897 2020 	ldrb.w	r2, [r7, #32]
 801868e:	429a      	cmp	r2, r3
 8018690:	d00f      	beq.n	80186b2 <set_c1_c2+0x142>
 8018692:	68bb      	ldr	r3, [r7, #8]
 8018694:	7f5b      	ldrb	r3, [r3, #29]
 8018696:	f897 2020 	ldrb.w	r2, [r7, #32]
 801869a:	429a      	cmp	r2, r3
 801869c:	d009      	beq.n	80186b2 <set_c1_c2+0x142>
		m.to = c2;
 801869e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80186a2:	743b      	strb	r3, [r7, #16]
		m.cmd = CMD_BEMF_ON;
 80186a4:	2340      	movs	r3, #64	; 0x40
 80186a6:	74bb      	strb	r3, [r7, #18]
		mqf_write_from_spdctl(&m);
 80186a8:	f107 0310 	add.w	r3, r7, #16
 80186ac:	4618      	mov	r0, r3
 80186ae:	f7ff fb29 	bl	8017d04 <mqf_write_from_spdctl>
	}
	tvars->C1 = c1;
 80186b2:	68bb      	ldr	r3, [r7, #8]
 80186b4:	79fa      	ldrb	r2, [r7, #7]
 80186b6:	771a      	strb	r2, [r3, #28]
	tvars->C1_dir = dir1;
 80186b8:	68bb      	ldr	r3, [r7, #8]
 80186ba:	79ba      	ldrb	r2, [r7, #6]
 80186bc:	779a      	strb	r2, [r3, #30]
	tvars->C2 = c2;
 80186be:	68bb      	ldr	r3, [r7, #8]
 80186c0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80186c4:	775a      	strb	r2, [r3, #29]
	tvars->C2_dir = dir2;
 80186c6:	68bb      	ldr	r3, [r7, #8]
 80186c8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80186cc:	77da      	strb	r2, [r3, #31]
	tvars->last_speed = 9000; // make sure cmd is sent
 80186ce:	68bb      	ldr	r3, [r7, #8]
 80186d0:	f242 3228 	movw	r2, #9000	; 0x2328
 80186d4:	841a      	strh	r2, [r3, #32]
	itm_debug2(DBG_POSEC, "POS reset", tidx, tvars->position_estimate);
 80186d6:	68bb      	ldr	r3, [r7, #8]
 80186d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80186da:	68fa      	ldr	r2, [r7, #12]
 80186dc:	4907      	ldr	r1, [pc, #28]	; (80186fc <set_c1_c2+0x18c>)
 80186de:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80186e2:	f7ff fa89 	bl	8017bf8 <itm_debug2>
	tvars->position_estimate = 0; // reset POSE
 80186e6:	68bb      	ldr	r3, [r7, #8]
 80186e8:	2200      	movs	r2, #0
 80186ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80186ec:	bf00      	nop
 80186ee:	3718      	adds	r7, #24
 80186f0:	46bd      	mov	sp, r7
 80186f2:	bd80      	pop	{r7, pc}
 80186f4:	0801a530 	.word	0x0801a530
 80186f8:	0801a538 	.word	0x0801a538
 80186fc:	0801a540 	.word	0x0801a540

08018700 <_set_speed>:



static void _set_speed(int tidx, const train_config_t *cnf, train_vars_t *vars)
{
 8018700:	b580      	push	{r7, lr}
 8018702:	b092      	sub	sp, #72	; 0x48
 8018704:	af02      	add	r7, sp, #8
 8018706:	60f8      	str	r0, [r7, #12]
 8018708:	60b9      	str	r1, [r7, #8]
 801870a:	607a      	str	r2, [r7, #4]
    const canton_config_t *c1;
    const canton_config_t *c2;


	int16_t sv100 = vars->last_speed;
 801870c:	687b      	ldr	r3, [r7, #4]
 801870e:	8c1b      	ldrh	r3, [r3, #32]
 8018710:	87fb      	strh	r3, [r7, #62]	; 0x3e

    c1 =  get_canton_cnf(vars->C1);
 8018712:	687b      	ldr	r3, [r7, #4]
 8018714:	7f1b      	ldrb	r3, [r3, #28]
 8018716:	4618      	mov	r0, r3
 8018718:	f7fd fe24 	bl	8016364 <get_canton_cnf>
 801871c:	63b8      	str	r0, [r7, #56]	; 0x38
    c2 =  get_canton_cnf(vars->C2);
 801871e:	687b      	ldr	r3, [r7, #4]
 8018720:	7f5b      	ldrb	r3, [r3, #29]
 8018722:	4618      	mov	r0, r3
 8018724:	f7fd fe1e 	bl	8016364 <get_canton_cnf>
 8018728:	6378      	str	r0, [r7, #52]	; 0x34
    
    if (!c1) {
 801872a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801872c:	2b00      	cmp	r3, #0
 801872e:	d10c      	bne.n	801874a <_set_speed+0x4a>
    	itm_debug1(DBG_ERR|DBG_SPDCTL, "no canton", sv100);
 8018730:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8018734:	461a      	mov	r2, r3
 8018736:	4947      	ldr	r1, [pc, #284]	; (8018854 <_set_speed+0x154>)
 8018738:	4847      	ldr	r0, [pc, #284]	; (8018858 <_set_speed+0x158>)
 801873a:	f7ff fa43 	bl	8017bc4 <itm_debug1>
        train_error(ERR_CANTON_NONE, "no canton");
 801873e:	4945      	ldr	r1, [pc, #276]	; (8018854 <_set_speed+0x154>)
 8018740:	f06f 0064 	mvn.w	r0, #100	; 0x64
 8018744:	f7ff fa90 	bl	8017c68 <train_error>
 8018748:	e080      	b.n	801884c <_set_speed+0x14c>
        return;
    }

    int pvi1, pvi2;
    int sig = SIGNOF(sv100);
 801874a:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801874e:	2b00      	cmp	r3, #0
 8018750:	da02      	bge.n	8018758 <_set_speed+0x58>
 8018752:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018756:	e000      	b.n	801875a <_set_speed+0x5a>
 8018758:	2301      	movs	r3, #1
 801875a:	633b      	str	r3, [r7, #48]	; 0x30
    uint16_t v = abs(sv100);
 801875c:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8018760:	2b00      	cmp	r3, #0
 8018762:	bfb8      	it	lt
 8018764:	425b      	neglt	r3, r3
 8018766:	85fb      	strh	r3, [r7, #46]	; 0x2e
    uint16_t pwm_duty = volt_index(v*10 /* mili*/,
 8018768:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801876a:	461a      	mov	r2, r3
 801876c:	0092      	lsls	r2, r2, #2
 801876e:	4413      	add	r3, r2
 8018770:	005b      	lsls	r3, r3, #1
 8018772:	b298      	uxth	r0, r3
 8018774:	68bb      	ldr	r3, [r7, #8]
 8018776:	7c1b      	ldrb	r3, [r3, #16]
 8018778:	f107 0220 	add.w	r2, r7, #32
 801877c:	9301      	str	r3, [sp, #4]
 801877e:	f107 031c 	add.w	r3, r7, #28
 8018782:	9300      	str	r3, [sp, #0]
 8018784:	4613      	mov	r3, r2
 8018786:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018788:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801878a:	f7fc ff05 	bl	8015598 <volt_index>
 801878e:	4603      	mov	r3, r0
 8018790:	85bb      	strh	r3, [r7, #44]	; 0x2c
                                   c1, c2,
                                   &pvi1, &pvi2, cnf->volt_policy);

	int dir1 = sig * vars->C1_dir;
 8018792:	687b      	ldr	r3, [r7, #4]
 8018794:	f993 301e 	ldrsb.w	r3, [r3, #30]
 8018798:	461a      	mov	r2, r3
 801879a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801879c:	fb02 f303 	mul.w	r3, r2, r3
 80187a0:	62bb      	str	r3, [r7, #40]	; 0x28
	int dir2 = sig * vars->C2_dir;
 80187a2:	687b      	ldr	r3, [r7, #4]
 80187a4:	f993 301f 	ldrsb.w	r3, [r3, #31]
 80187a8:	461a      	mov	r2, r3
 80187aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187ac:	fb02 f303 	mul.w	r3, r2, r3
 80187b0:	627b      	str	r3, [r7, #36]	; 0x24


    msg_64_t m;
    m.from = MA_TRAIN_SC(tidx);
 80187b2:	68fb      	ldr	r3, [r7, #12]
 80187b4:	b25b      	sxtb	r3, r3
 80187b6:	f003 0307 	and.w	r3, r3, #7
 80187ba:	b25b      	sxtb	r3, r3
 80187bc:	f063 0337 	orn	r3, r3, #55	; 0x37
 80187c0:	b25b      	sxtb	r3, r3
 80187c2:	b2db      	uxtb	r3, r3
 80187c4:	747b      	strb	r3, [r7, #17]
    m.cmd = CMD_SETVPWM;
 80187c6:	2301      	movs	r3, #1
 80187c8:	74bb      	strb	r3, [r7, #18]
    m.v1u = pvi1;
 80187ca:	6a3b      	ldr	r3, [r7, #32]
 80187cc:	b29b      	uxth	r3, r3
 80187ce:	82bb      	strh	r3, [r7, #20]
    m.v2 = dir1*pwm_duty;
 80187d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187d2:	b29b      	uxth	r3, r3
 80187d4:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80187d6:	fb12 f303 	smulbb	r3, r2, r3
 80187da:	b29b      	uxth	r3, r3
 80187dc:	b21b      	sxth	r3, r3
 80187de:	82fb      	strh	r3, [r7, #22]
    m.to = vars->C1;
 80187e0:	687b      	ldr	r3, [r7, #4]
 80187e2:	7f1b      	ldrb	r3, [r3, #28]
 80187e4:	743b      	strb	r3, [r7, #16]
	itm_debug3(DBG_SPDCTL, "setvpwm", m.v1u, m.v2, m.to);
 80187e6:	8abb      	ldrh	r3, [r7, #20]
 80187e8:	461a      	mov	r2, r3
 80187ea:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80187ee:	4619      	mov	r1, r3
 80187f0:	7c3b      	ldrb	r3, [r7, #16]
 80187f2:	9300      	str	r3, [sp, #0]
 80187f4:	460b      	mov	r3, r1
 80187f6:	4919      	ldr	r1, [pc, #100]	; (801885c <_set_speed+0x15c>)
 80187f8:	2010      	movs	r0, #16
 80187fa:	f7ff fa19 	bl	8017c30 <itm_debug3>
    mqf_write_from_spdctl(&m);
 80187fe:	f107 0310 	add.w	r3, r7, #16
 8018802:	4618      	mov	r0, r3
 8018804:	f7ff fa7e 	bl	8017d04 <mqf_write_from_spdctl>

    if (c2) {
 8018808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801880a:	2b00      	cmp	r3, #0
 801880c:	d01e      	beq.n	801884c <_set_speed+0x14c>
    	itm_debug3(DBG_SPDCTL, "setvpwm/c2", m.v1u, m.v2, m.to);
 801880e:	8abb      	ldrh	r3, [r7, #20]
 8018810:	461a      	mov	r2, r3
 8018812:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8018816:	4619      	mov	r1, r3
 8018818:	7c3b      	ldrb	r3, [r7, #16]
 801881a:	9300      	str	r3, [sp, #0]
 801881c:	460b      	mov	r3, r1
 801881e:	4910      	ldr	r1, [pc, #64]	; (8018860 <_set_speed+0x160>)
 8018820:	2010      	movs	r0, #16
 8018822:	f7ff fa05 	bl	8017c30 <itm_debug3>
    	m.v1u = pvi2;
 8018826:	69fb      	ldr	r3, [r7, #28]
 8018828:	b29b      	uxth	r3, r3
 801882a:	82bb      	strh	r3, [r7, #20]
    	m.v2 = dir2*pwm_duty;
 801882c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801882e:	b29b      	uxth	r3, r3
 8018830:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8018832:	fb12 f303 	smulbb	r3, r2, r3
 8018836:	b29b      	uxth	r3, r3
 8018838:	b21b      	sxth	r3, r3
 801883a:	82fb      	strh	r3, [r7, #22]
    	m.to = vars->C2;
 801883c:	687b      	ldr	r3, [r7, #4]
 801883e:	7f5b      	ldrb	r3, [r3, #29]
 8018840:	743b      	strb	r3, [r7, #16]
    	mqf_write_from_spdctl(&m);
 8018842:	f107 0310 	add.w	r3, r7, #16
 8018846:	4618      	mov	r0, r3
 8018848:	f7ff fa5c 	bl	8017d04 <mqf_write_from_spdctl>
    }
}
 801884c:	3740      	adds	r7, #64	; 0x40
 801884e:	46bd      	mov	sp, r7
 8018850:	bd80      	pop	{r7, pc}
 8018852:	bf00      	nop
 8018854:	0801a54c 	.word	0x0801a54c
 8018858:	80000010 	.word	0x80000010
 801885c:	0801a558 	.word	0x0801a558
 8018860:	0801a560 	.word	0x0801a560

08018864 <train_set_target_speed>:

/* =========================================================================== */


int train_set_target_speed(int numtrain, int16_t target)
{
 8018864:	b580      	push	{r7, lr}
 8018866:	b084      	sub	sp, #16
 8018868:	af00      	add	r7, sp, #0
 801886a:	6078      	str	r0, [r7, #4]
 801886c:	460b      	mov	r3, r1
 801886e:	807b      	strh	r3, [r7, #2]
	if (calibrating) return 1;
 8018870:	4b0f      	ldr	r3, [pc, #60]	; (80188b0 <train_set_target_speed+0x4c>)
 8018872:	681b      	ldr	r3, [r3, #0]
 8018874:	2b00      	cmp	r3, #0
 8018876:	d001      	beq.n	801887c <train_set_target_speed+0x18>
 8018878:	2301      	movs	r3, #1
 801887a:	e015      	b.n	80188a8 <train_set_target_speed+0x44>
	USE_TRAIN(numtrain) // tconf tvars
 801887c:	6878      	ldr	r0, [r7, #4]
 801887e:	f7fd fd99 	bl	80163b4 <get_train_cnf>
 8018882:	60f8      	str	r0, [r7, #12]
 8018884:	687a      	ldr	r2, [r7, #4]
 8018886:	4613      	mov	r3, r2
 8018888:	00db      	lsls	r3, r3, #3
 801888a:	1a9b      	subs	r3, r3, r2
 801888c:	00db      	lsls	r3, r3, #3
 801888e:	4a09      	ldr	r2, [pc, #36]	; (80188b4 <train_set_target_speed+0x50>)
 8018890:	4413      	add	r3, r2
 8018892:	60bb      	str	r3, [r7, #8]
	(void)tconf; // unused
	if (!tvars) return -1;
 8018894:	68bb      	ldr	r3, [r7, #8]
 8018896:	2b00      	cmp	r3, #0
 8018898:	d102      	bne.n	80188a0 <train_set_target_speed+0x3c>
 801889a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801889e:	e003      	b.n	80188a8 <train_set_target_speed+0x44>
	tvars->target_speed = target;
 80188a0:	68bb      	ldr	r3, [r7, #8]
 80188a2:	887a      	ldrh	r2, [r7, #2]
 80188a4:	801a      	strh	r2, [r3, #0]
		if (c->enable_pid) {
			pidctl_reset(&c->pidcnf, &vars->pidvars);
		}
	}*/

	return 0;
 80188a6:	2300      	movs	r3, #0
}
 80188a8:	4618      	mov	r0, r3
 80188aa:	3710      	adds	r7, #16
 80188ac:	46bd      	mov	sp, r7
 80188ae:	bd80      	pop	{r7, pc}
 80188b0:	20005458 	.word	0x20005458
 80188b4:	20005464 	.word	0x20005464

080188b8 <pose_check_trig>:


static void pose_check_trig(int numtrain, train_vars_t *tvars, int32_t lastincr)
{
 80188b8:	b580      	push	{r7, lr}
 80188ba:	b08a      	sub	sp, #40	; 0x28
 80188bc:	af02      	add	r7, sp, #8
 80188be:	60f8      	str	r0, [r7, #12]
 80188c0:	60b9      	str	r1, [r7, #8]
 80188c2:	607a      	str	r2, [r7, #4]
	if (!tvars->pose_trig) return;
 80188c4:	68bb      	ldr	r3, [r7, #8]
 80188c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80188c8:	2b00      	cmp	r3, #0
 80188ca:	d064      	beq.n	8018996 <pose_check_trig+0xde>
	int tr = 0;
 80188cc:	2300      	movs	r3, #0
 80188ce:	61fb      	str	r3, [r7, #28]
	if (tvars->pose_trig > 0) {
 80188d0:	68bb      	ldr	r3, [r7, #8]
 80188d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80188d4:	2b00      	cmp	r3, #0
 80188d6:	dd14      	ble.n	8018902 <pose_check_trig+0x4a>
		if (lastincr<0) itm_debug3(DBG_ERR|DBG_POSEC, "wrong incr", numtrain, lastincr, tvars->pose_trig);
 80188d8:	687b      	ldr	r3, [r7, #4]
 80188da:	2b00      	cmp	r3, #0
 80188dc:	da08      	bge.n	80188f0 <pose_check_trig+0x38>
 80188de:	68bb      	ldr	r3, [r7, #8]
 80188e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80188e2:	9300      	str	r3, [sp, #0]
 80188e4:	687b      	ldr	r3, [r7, #4]
 80188e6:	68fa      	ldr	r2, [r7, #12]
 80188e8:	492e      	ldr	r1, [pc, #184]	; (80189a4 <pose_check_trig+0xec>)
 80188ea:	482f      	ldr	r0, [pc, #188]	; (80189a8 <pose_check_trig+0xf0>)
 80188ec:	f7ff f9a0 	bl	8017c30 <itm_debug3>
		if (tvars->position_estimate >= tvars->pose_trig) {
 80188f0:	68bb      	ldr	r3, [r7, #8]
 80188f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80188f4:	68bb      	ldr	r3, [r7, #8]
 80188f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80188f8:	429a      	cmp	r2, r3
 80188fa:	db16      	blt.n	801892a <pose_check_trig+0x72>
			tr = 1;
 80188fc:	2301      	movs	r3, #1
 80188fe:	61fb      	str	r3, [r7, #28]
 8018900:	e013      	b.n	801892a <pose_check_trig+0x72>
		}
	} else { // pose_trig < 0
		if (lastincr>0) itm_debug3(DBG_ERR|DBG_POSEC, "wrong incr", numtrain, lastincr, tvars->pose_trig);
 8018902:	687b      	ldr	r3, [r7, #4]
 8018904:	2b00      	cmp	r3, #0
 8018906:	dd08      	ble.n	801891a <pose_check_trig+0x62>
 8018908:	68bb      	ldr	r3, [r7, #8]
 801890a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801890c:	9300      	str	r3, [sp, #0]
 801890e:	687b      	ldr	r3, [r7, #4]
 8018910:	68fa      	ldr	r2, [r7, #12]
 8018912:	4924      	ldr	r1, [pc, #144]	; (80189a4 <pose_check_trig+0xec>)
 8018914:	4824      	ldr	r0, [pc, #144]	; (80189a8 <pose_check_trig+0xf0>)
 8018916:	f7ff f98b 	bl	8017c30 <itm_debug3>
		if (tvars->position_estimate <= tvars->pose_trig) {
 801891a:	68bb      	ldr	r3, [r7, #8]
 801891c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801891e:	68bb      	ldr	r3, [r7, #8]
 8018920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018922:	429a      	cmp	r2, r3
 8018924:	dc01      	bgt.n	801892a <pose_check_trig+0x72>
			tr = 1;
 8018926:	2301      	movs	r3, #1
 8018928:	61fb      	str	r3, [r7, #28]
		}
	}
	if (!tr) return;
 801892a:	69fb      	ldr	r3, [r7, #28]
 801892c:	2b00      	cmp	r3, #0
 801892e:	d034      	beq.n	801899a <pose_check_trig+0xe2>
	itm_debug3(DBG_POSEC, "POSE trig", numtrain, tvars->position_estimate, tvars->pose_trig);
 8018930:	68bb      	ldr	r3, [r7, #8]
 8018932:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8018934:	68bb      	ldr	r3, [r7, #8]
 8018936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018938:	9300      	str	r3, [sp, #0]
 801893a:	4613      	mov	r3, r2
 801893c:	68fa      	ldr	r2, [r7, #12]
 801893e:	491b      	ldr	r1, [pc, #108]	; (80189ac <pose_check_trig+0xf4>)
 8018940:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8018944:	f7ff f974 	bl	8017c30 <itm_debug3>
	msg_64_t m;
	m.from = MA_TRAIN_SC(numtrain);
 8018948:	68fb      	ldr	r3, [r7, #12]
 801894a:	b25b      	sxtb	r3, r3
 801894c:	f003 0307 	and.w	r3, r3, #7
 8018950:	b25b      	sxtb	r3, r3
 8018952:	f063 0337 	orn	r3, r3, #55	; 0x37
 8018956:	b25b      	sxtb	r3, r3
 8018958:	b2db      	uxtb	r3, r3
 801895a:	747b      	strb	r3, [r7, #17]
	m.to = MA_CONTROL_T(numtrain);
 801895c:	68fb      	ldr	r3, [r7, #12]
 801895e:	b25b      	sxtb	r3, r3
 8018960:	f003 0307 	and.w	r3, r3, #7
 8018964:	b25b      	sxtb	r3, r3
 8018966:	f063 032f 	orn	r3, r3, #47	; 0x2f
 801896a:	b25b      	sxtb	r3, r3
 801896c:	b2db      	uxtb	r3, r3
 801896e:	743b      	strb	r3, [r7, #16]
	m.cmd = CMD_POSE_TRIGGERED;
 8018970:	2351      	movs	r3, #81	; 0x51
 8018972:	74bb      	strb	r3, [r7, #18]
	m.v1u = tvars->C1;
 8018974:	68bb      	ldr	r3, [r7, #8]
 8018976:	7f1b      	ldrb	r3, [r3, #28]
 8018978:	b29b      	uxth	r3, r3
 801897a:	82bb      	strh	r3, [r7, #20]
	m.v2 = (int16_t) tvars->position_estimate; // XXX TODO: problem here pose is > 16bits
 801897c:	68bb      	ldr	r3, [r7, #8]
 801897e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018980:	b21b      	sxth	r3, r3
 8018982:	82fb      	strh	r3, [r7, #22]
	mqf_write_from_spdctl(&m);
 8018984:	f107 0310 	add.w	r3, r7, #16
 8018988:	4618      	mov	r0, r3
 801898a:	f7ff f9bb 	bl	8017d04 <mqf_write_from_spdctl>

	// trig only once
	tvars->pose_trig = 0;
 801898e:	68bb      	ldr	r3, [r7, #8]
 8018990:	2200      	movs	r2, #0
 8018992:	62da      	str	r2, [r3, #44]	; 0x2c
 8018994:	e002      	b.n	801899c <pose_check_trig+0xe4>
	if (!tvars->pose_trig) return;
 8018996:	bf00      	nop
 8018998:	e000      	b.n	801899c <pose_check_trig+0xe4>
	if (!tr) return;
 801899a:	bf00      	nop
}
 801899c:	3720      	adds	r7, #32
 801899e:	46bd      	mov	sp, r7
 80189a0:	bd80      	pop	{r7, pc}
 80189a2:	bf00      	nop
 80189a4:	0801a56c 	.word	0x0801a56c
 80189a8:	80004000 	.word	0x80004000
 80189ac:	0801a578 	.word	0x0801a578

080189b0 <mqf_write_from_nowhere>:
void msgsrv_tick(uint32_t notif_flags, uint32_t tick, uint32_t dt);

// TODO
void purge_all_queue(void);

LFMQUEUE_DEF_H(from_nowhere, msg_64_t)
 80189b0:	b580      	push	{r7, lr}
 80189b2:	b082      	sub	sp, #8
 80189b4:	af00      	add	r7, sp, #0
 80189b6:	6078      	str	r0, [r7, #4]
 80189b8:	6879      	ldr	r1, [r7, #4]
 80189ba:	4804      	ldr	r0, [pc, #16]	; (80189cc <mqf_write_from_nowhere+0x1c>)
 80189bc:	f000 feca 	bl	8019754 <mqf_write>
 80189c0:	4603      	mov	r3, r0
 80189c2:	4618      	mov	r0, r3
 80189c4:	3708      	adds	r7, #8
 80189c6:	46bd      	mov	sp, r7
 80189c8:	bd80      	pop	{r7, pc}
 80189ca:	bf00      	nop
 80189cc:	200005e4 	.word	0x200005e4

080189d0 <itm_debug1>:
{
 80189d0:	b580      	push	{r7, lr}
 80189d2:	b086      	sub	sp, #24
 80189d4:	af02      	add	r7, sp, #8
 80189d6:	60f8      	str	r0, [r7, #12]
 80189d8:	60b9      	str	r1, [r7, #8]
 80189da:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 80189dc:	4b08      	ldr	r3, [pc, #32]	; (8018a00 <itm_debug1+0x30>)
 80189de:	681a      	ldr	r2, [r3, #0]
 80189e0:	68fb      	ldr	r3, [r7, #12]
 80189e2:	4013      	ands	r3, r2
 80189e4:	2b00      	cmp	r3, #0
 80189e6:	d007      	beq.n	80189f8 <itm_debug1+0x28>
 80189e8:	2301      	movs	r3, #1
 80189ea:	9300      	str	r3, [sp, #0]
 80189ec:	2300      	movs	r3, #0
 80189ee:	2200      	movs	r2, #0
 80189f0:	6879      	ldr	r1, [r7, #4]
 80189f2:	68b8      	ldr	r0, [r7, #8]
 80189f4:	f000 fda6 	bl	8019544 <_itm_debug3>
}
 80189f8:	bf00      	nop
 80189fa:	3710      	adds	r7, #16
 80189fc:	46bd      	mov	sp, r7
 80189fe:	bd80      	pop	{r7, pc}
 8018a00:	20000610 	.word	0x20000610

08018a04 <itm_debug2>:
{
 8018a04:	b580      	push	{r7, lr}
 8018a06:	b086      	sub	sp, #24
 8018a08:	af02      	add	r7, sp, #8
 8018a0a:	60f8      	str	r0, [r7, #12]
 8018a0c:	60b9      	str	r1, [r7, #8]
 8018a0e:	607a      	str	r2, [r7, #4]
 8018a10:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, 0, 2);
 8018a12:	4b09      	ldr	r3, [pc, #36]	; (8018a38 <itm_debug2+0x34>)
 8018a14:	681a      	ldr	r2, [r3, #0]
 8018a16:	68fb      	ldr	r3, [r7, #12]
 8018a18:	4013      	ands	r3, r2
 8018a1a:	2b00      	cmp	r3, #0
 8018a1c:	d007      	beq.n	8018a2e <itm_debug2+0x2a>
 8018a1e:	2302      	movs	r3, #2
 8018a20:	9300      	str	r3, [sp, #0]
 8018a22:	2300      	movs	r3, #0
 8018a24:	683a      	ldr	r2, [r7, #0]
 8018a26:	6879      	ldr	r1, [r7, #4]
 8018a28:	68b8      	ldr	r0, [r7, #8]
 8018a2a:	f000 fd8b 	bl	8019544 <_itm_debug3>
}
 8018a2e:	bf00      	nop
 8018a30:	3710      	adds	r7, #16
 8018a32:	46bd      	mov	sp, r7
 8018a34:	bd80      	pop	{r7, pc}
 8018a36:	bf00      	nop
 8018a38:	20000610 	.word	0x20000610

08018a3c <itm_debug3>:
{
 8018a3c:	b580      	push	{r7, lr}
 8018a3e:	b086      	sub	sp, #24
 8018a40:	af02      	add	r7, sp, #8
 8018a42:	60f8      	str	r0, [r7, #12]
 8018a44:	60b9      	str	r1, [r7, #8]
 8018a46:	607a      	str	r2, [r7, #4]
 8018a48:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, v3, 3);
 8018a4a:	4b09      	ldr	r3, [pc, #36]	; (8018a70 <itm_debug3+0x34>)
 8018a4c:	681a      	ldr	r2, [r3, #0]
 8018a4e:	68fb      	ldr	r3, [r7, #12]
 8018a50:	4013      	ands	r3, r2
 8018a52:	2b00      	cmp	r3, #0
 8018a54:	d007      	beq.n	8018a66 <itm_debug3+0x2a>
 8018a56:	2303      	movs	r3, #3
 8018a58:	9300      	str	r3, [sp, #0]
 8018a5a:	69bb      	ldr	r3, [r7, #24]
 8018a5c:	683a      	ldr	r2, [r7, #0]
 8018a5e:	6879      	ldr	r1, [r7, #4]
 8018a60:	68b8      	ldr	r0, [r7, #8]
 8018a62:	f000 fd6f 	bl	8019544 <_itm_debug3>
}
 8018a66:	bf00      	nop
 8018a68:	3710      	adds	r7, #16
 8018a6a:	46bd      	mov	sp, r7
 8018a6c:	bd80      	pop	{r7, pc}
 8018a6e:	bf00      	nop
 8018a70:	20000610 	.word	0x20000610

08018a74 <StartCtrlTask>:
static void run_task_ctrl(void);
extern DMA_HandleTypeDef hdma_i2c3_rx;
extern DMA_HandleTypeDef hdma_i2c3_tx;

void StartCtrlTask(_UNUSED_ void *argument)
{
 8018a74:	b580      	push	{r7, lr}
 8018a76:	b084      	sub	sp, #16
 8018a78:	af00      	add	r7, sp, #0
 8018a7a:	6078      	str	r0, [r7, #4]
	int nsmpl = sizeof(train_adc_buf)/sizeof(uint16_t);
 8018a7c:	2328      	movs	r3, #40	; 0x28
 8018a7e:	60fb      	str	r3, [r7, #12]

	if (sizeof(train_adc_buf) != sizeof(uint16_t)*NUM_LOCAL_CANTONS_HW*8) Error_Handler();
	if (nsmpl != 5*2*4) Error_Handler();
 8018a80:	68fb      	ldr	r3, [r7, #12]
 8018a82:	2b28      	cmp	r3, #40	; 0x28
 8018a84:	d001      	beq.n	8018a8a <StartCtrlTask+0x16>
 8018a86:	f7e8 fca1 	bl	80013cc <Error_Handler>
	//__HAL_DMA_ENABLE_IT(&hdma_i2c3_tx, DMA_IT_TC);

	//if (NUM_VAL_PER_CANTON != 4) Error_Handler();
	//if (ADC_HALF_BUFFER != 10*2) Error_Handler();

	if ((1)) set_pwm_freq(100);
 8018a8a:	2064      	movs	r0, #100	; 0x64
 8018a8c:	f000 f864 	bl	8018b58 <set_pwm_freq>
	CantonTimerHandles[1]=&htim1;
 8018a90:	4b2a      	ldr	r3, [pc, #168]	; (8018b3c <StartCtrlTask+0xc8>)
 8018a92:	4a2b      	ldr	r2, [pc, #172]	; (8018b40 <StartCtrlTask+0xcc>)
 8018a94:	605a      	str	r2, [r3, #4]
	CantonTimerHandles[2]=&htim2;
 8018a96:	4b29      	ldr	r3, [pc, #164]	; (8018b3c <StartCtrlTask+0xc8>)
 8018a98:	4a2a      	ldr	r2, [pc, #168]	; (8018b44 <StartCtrlTask+0xd0>)
 8018a9a:	609a      	str	r2, [r3, #8]
	CantonTimerHandles[3]=&htim3;
 8018a9c:	4b27      	ldr	r3, [pc, #156]	; (8018b3c <StartCtrlTask+0xc8>)
 8018a9e:	4a2a      	ldr	r2, [pc, #168]	; (8018b48 <StartCtrlTask+0xd4>)
 8018aa0:	60da      	str	r2, [r3, #12]
	CantonTimerHandles[4]=&htim12;
 8018aa2:	4b26      	ldr	r3, [pc, #152]	; (8018b3c <StartCtrlTask+0xc8>)
 8018aa4:	4a29      	ldr	r2, [pc, #164]	; (8018b4c <StartCtrlTask+0xd8>)
 8018aa6:	611a      	str	r2, [r3, #16]



	//HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
	//HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8018aa8:	2100      	movs	r1, #0
 8018aaa:	4825      	ldr	r0, [pc, #148]	; (8018b40 <StartCtrlTask+0xcc>)
 8018aac:	f7ef fb06 	bl	80080bc <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8018ab0:	2104      	movs	r1, #4
 8018ab2:	4823      	ldr	r0, [pc, #140]	; (8018b40 <StartCtrlTask+0xcc>)
 8018ab4:	f7ef fb02 	bl	80080bc <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8018ab8:	2108      	movs	r1, #8
 8018aba:	4821      	ldr	r0, [pc, #132]	; (8018b40 <StartCtrlTask+0xcc>)
 8018abc:	f7ef fafe 	bl	80080bc <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_4);
 8018ac0:	210c      	movs	r1, #12
 8018ac2:	481f      	ldr	r0, [pc, #124]	; (8018b40 <StartCtrlTask+0xcc>)
 8018ac4:	f7ef fafa 	bl	80080bc <HAL_TIM_PWM_Stop>

	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8018ac8:	2108      	movs	r1, #8
 8018aca:	481e      	ldr	r0, [pc, #120]	; (8018b44 <StartCtrlTask+0xd0>)
 8018acc:	f7ef faf6 	bl	80080bc <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 8018ad0:	210c      	movs	r1, #12
 8018ad2:	481c      	ldr	r0, [pc, #112]	; (8018b44 <StartCtrlTask+0xd0>)
 8018ad4:	f7ef faf2 	bl	80080bc <HAL_TIM_PWM_Stop>

	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8018ad8:	2100      	movs	r1, #0
 8018ada:	481b      	ldr	r0, [pc, #108]	; (8018b48 <StartCtrlTask+0xd4>)
 8018adc:	f7ef faee 	bl	80080bc <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8018ae0:	2104      	movs	r1, #4
 8018ae2:	4819      	ldr	r0, [pc, #100]	; (8018b48 <StartCtrlTask+0xd4>)
 8018ae4:	f7ef faea 	bl	80080bc <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8018ae8:	2108      	movs	r1, #8
 8018aea:	4817      	ldr	r0, [pc, #92]	; (8018b48 <StartCtrlTask+0xd4>)
 8018aec:	f7ef fae6 	bl	80080bc <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8018af0:	210c      	movs	r1, #12
 8018af2:	4815      	ldr	r0, [pc, #84]	; (8018b48 <StartCtrlTask+0xd4>)
 8018af4:	f7ef fae2 	bl	80080bc <HAL_TIM_PWM_Stop>

	HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_1);
 8018af8:	2100      	movs	r1, #0
 8018afa:	4814      	ldr	r0, [pc, #80]	; (8018b4c <StartCtrlTask+0xd8>)
 8018afc:	f7ef fade 	bl	80080bc <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_2);
 8018b00:	2104      	movs	r1, #4
 8018b02:	4812      	ldr	r0, [pc, #72]	; (8018b4c <StartCtrlTask+0xd8>)
 8018b04:	f7ef fada 	bl	80080bc <HAL_TIM_PWM_Stop>

	//HAL_TIM_Base_Start_IT(&htim8);
	HAL_TIM_Base_Start_IT(&htim1);
 8018b08:	480d      	ldr	r0, [pc, #52]	; (8018b40 <StartCtrlTask+0xcc>)
 8018b0a:	f7ef fa3f 	bl	8007f8c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim2);
 8018b0e:	480d      	ldr	r0, [pc, #52]	; (8018b44 <StartCtrlTask+0xd0>)
 8018b10:	f7ef fa18 	bl	8007f44 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim3);
 8018b14:	480c      	ldr	r0, [pc, #48]	; (8018b48 <StartCtrlTask+0xd4>)
 8018b16:	f7ef fa15 	bl	8007f44 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim12);
 8018b1a:	480c      	ldr	r0, [pc, #48]	; (8018b4c <StartCtrlTask+0xd8>)
 8018b1c:	f7ef fa12 	bl	8007f44 <HAL_TIM_Base_Start>

	HAL_ADC_Start_DMA(&hadc1,(uint32_t *)train_adc_buf, nsmpl);
 8018b20:	68fb      	ldr	r3, [r7, #12]
 8018b22:	461a      	mov	r2, r3
 8018b24:	490a      	ldr	r1, [pc, #40]	; (8018b50 <StartCtrlTask+0xdc>)
 8018b26:	480b      	ldr	r0, [pc, #44]	; (8018b54 <StartCtrlTask+0xe0>)
 8018b28:	f7e9 f9f8 	bl	8001f1c <HAL_ADC_Start_DMA>
	//HAL_ADC_Start_DMA(&hadc1,(uint32_t *)train_adc_buffer, NUM_ADC_SAMPLES);

	startCycleCounter();
 8018b2c:	f7fd faf6 	bl	801611c <startCycleCounter>
		p = t;
		//itm_debug1(DBG_ERR, "cycl", d);
	}
	itm_debug1(DBG_ERR, "tcycl", GetCycleCount64()-k);
	*/
	run_task_ctrl();
 8018b30:	f000 f858 	bl	8018be4 <run_task_ctrl>
}
 8018b34:	bf00      	nop
 8018b36:	3710      	adds	r7, #16
 8018b38:	46bd      	mov	sp, r7
 8018b3a:	bd80      	pop	{r7, pc}
 8018b3c:	2000532c 	.word	0x2000532c
 8018b40:	20006824 	.word	0x20006824
 8018b44:	20006d70 	.word	0x20006d70
 8018b48:	20006318 	.word	0x20006318
 8018b4c:	20006db4 	.word	0x20006db4
 8018b50:	20008950 	.word	0x20008950
 8018b54:	2000635c 	.word	0x2000635c

08018b58 <set_pwm_freq>:
int cur_freqhz = 350;
extern TIM_HandleTypeDef htim1;

// #define __HAL_TIM_SET_PRESCALER(__HANDLE__, __PRESC__)       ((__HANDLE__)->Instance->PSC = (__PRESC__))
void set_pwm_freq(int freqhz)
{
 8018b58:	b580      	push	{r7, lr}
 8018b5a:	b086      	sub	sp, #24
 8018b5c:	af02      	add	r7, sp, #8
 8018b5e:	6078      	str	r0, [r7, #4]
	// 12MHz / 200 -> 60000
	// 50Hz = 1200
	int ps = (60000/freqhz)-1;
 8018b60:	f64e 2260 	movw	r2, #60000	; 0xea60
 8018b64:	687b      	ldr	r3, [r7, #4]
 8018b66:	fb92 f3f3 	sdiv	r3, r2, r3
 8018b6a:	3b01      	subs	r3, #1
 8018b6c:	60fb      	str	r3, [r7, #12]
	if ((ps<1) || (ps>0xFFFF)) ps = 1200;
 8018b6e:	68fb      	ldr	r3, [r7, #12]
 8018b70:	2b00      	cmp	r3, #0
 8018b72:	dd03      	ble.n	8018b7c <set_pwm_freq+0x24>
 8018b74:	68fb      	ldr	r3, [r7, #12]
 8018b76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018b7a:	db02      	blt.n	8018b82 <set_pwm_freq+0x2a>
 8018b7c:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8018b80:	60fb      	str	r3, [r7, #12]
	ps = ps-1;
 8018b82:	68fb      	ldr	r3, [r7, #12]
 8018b84:	3b01      	subs	r3, #1
 8018b86:	60fb      	str	r3, [r7, #12]
	cur_freqhz = 60000/(ps+1);
 8018b88:	68fb      	ldr	r3, [r7, #12]
 8018b8a:	3301      	adds	r3, #1
 8018b8c:	f64e 2260 	movw	r2, #60000	; 0xea60
 8018b90:	fb92 f3f3 	sdiv	r3, r2, r3
 8018b94:	4a0d      	ldr	r2, [pc, #52]	; (8018bcc <set_pwm_freq+0x74>)
 8018b96:	6013      	str	r3, [r2, #0]
	// not an error but we want it in the log
	itm_debug3(DBG_ERR|DBG_CTRL, "FREQ", freqhz, ps, cur_freqhz);
 8018b98:	4b0c      	ldr	r3, [pc, #48]	; (8018bcc <set_pwm_freq+0x74>)
 8018b9a:	681b      	ldr	r3, [r3, #0]
 8018b9c:	9300      	str	r3, [sp, #0]
 8018b9e:	68fb      	ldr	r3, [r7, #12]
 8018ba0:	687a      	ldr	r2, [r7, #4]
 8018ba2:	490b      	ldr	r1, [pc, #44]	; (8018bd0 <set_pwm_freq+0x78>)
 8018ba4:	480b      	ldr	r0, [pc, #44]	; (8018bd4 <set_pwm_freq+0x7c>)
 8018ba6:	f7ff ff49 	bl	8018a3c <itm_debug3>
	__HAL_TIM_SET_PRESCALER(&htim1, ps);
 8018baa:	4b0b      	ldr	r3, [pc, #44]	; (8018bd8 <set_pwm_freq+0x80>)
 8018bac:	681b      	ldr	r3, [r3, #0]
 8018bae:	68fa      	ldr	r2, [r7, #12]
 8018bb0:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_PRESCALER(&htim2, ps);
 8018bb2:	4b0a      	ldr	r3, [pc, #40]	; (8018bdc <set_pwm_freq+0x84>)
 8018bb4:	681b      	ldr	r3, [r3, #0]
 8018bb6:	68fa      	ldr	r2, [r7, #12]
 8018bb8:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_PRESCALER(&htim8, ps);
 8018bba:	4b09      	ldr	r3, [pc, #36]	; (8018be0 <set_pwm_freq+0x88>)
 8018bbc:	681b      	ldr	r3, [r3, #0]
 8018bbe:	68fa      	ldr	r2, [r7, #12]
 8018bc0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8018bc2:	bf00      	nop
 8018bc4:	3710      	adds	r7, #16
 8018bc6:	46bd      	mov	sp, r7
 8018bc8:	bd80      	pop	{r7, pc}
 8018bca:	bf00      	nop
 8018bcc:	2000060c 	.word	0x2000060c
 8018bd0:	0801a584 	.word	0x0801a584
 8018bd4:	80000400 	.word	0x80000400
 8018bd8:	20006824 	.word	0x20006824
 8018bdc:	20006d70 	.word	0x20006d70
 8018be0:	20005d24 	.word	0x20005d24

08018be4 <run_task_ctrl>:

#define USE_NOTIF_TIM 0

volatile uint32_t t0ctrl;
static void run_task_ctrl(void)
{
 8018be4:	b580      	push	{r7, lr}
 8018be6:	b08a      	sub	sp, #40	; 0x28
 8018be8:	af00      	add	r7, sp, #0
	int cnt = 0;
 8018bea:	2300      	movs	r3, #0
 8018bec:	627b      	str	r3, [r7, #36]	; 0x24
	//if ((0))   calibrate_bemf(); //XXX

	if ((1)) {
		msg_64_t m;
		m.from = MA_BROADCAST;
 8018bee:	23ff      	movs	r3, #255	; 0xff
 8018bf0:	727b      	strb	r3, [r7, #9]
		m.to = MA_BROADCAST;
 8018bf2:	23ff      	movs	r3, #255	; 0xff
 8018bf4:	723b      	strb	r3, [r7, #8]
		m.cmd = CMD_SETRUN_MODE;
 8018bf6:	23fc      	movs	r3, #252	; 0xfc
 8018bf8:	72bb      	strb	r3, [r7, #10]
		//m.v1u = runmode_off;
		m.v1u = runmode_normal;
 8018bfa:	2301      	movs	r3, #1
 8018bfc:	81bb      	strh	r3, [r7, #12]
		//m.v1u = runmode_detect1;
		mqf_write_from_nowhere(&m); // XXX it wont be sent to ctl
 8018bfe:	f107 0308 	add.w	r3, r7, #8
 8018c02:	4618      	mov	r0, r3
 8018c04:	f7ff fed4 	bl	80189b0 <mqf_write_from_nowhere>
	}

	for (;;) {
		uint32_t notif;
		xTaskNotifyWait(0, 0xFFFFFFFF, &notif, portMAX_DELAY);
 8018c08:	1d3a      	adds	r2, r7, #4
 8018c0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018c0e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8018c12:	2000      	movs	r0, #0
 8018c14:	f7f6 f8dc 	bl	800edd0 <xTaskNotifyWait>
		if ((1)) {
			int n = 0;
 8018c18:	2300      	movs	r3, #0
 8018c1a:	623b      	str	r3, [r7, #32]
			if (notif & NOTIF_NEW_ADC_1)  n = 1;
 8018c1c:	687b      	ldr	r3, [r7, #4]
 8018c1e:	f003 0301 	and.w	r3, r3, #1
 8018c22:	2b00      	cmp	r3, #0
 8018c24:	d001      	beq.n	8018c2a <run_task_ctrl+0x46>
 8018c26:	2301      	movs	r3, #1
 8018c28:	623b      	str	r3, [r7, #32]
			if (notif & NOTIF_NEW_ADC_2)  n |= 2;
 8018c2a:	687b      	ldr	r3, [r7, #4]
 8018c2c:	f003 0302 	and.w	r3, r3, #2
 8018c30:	2b00      	cmp	r3, #0
 8018c32:	d003      	beq.n	8018c3c <run_task_ctrl+0x58>
 8018c34:	6a3b      	ldr	r3, [r7, #32]
 8018c36:	f043 0302 	orr.w	r3, r3, #2
 8018c3a:	623b      	str	r3, [r7, #32]
			itm_debug2(DBG_LOWCTRL, "-----", 0 /*(notif & NOTIF_TIM8) ? 1 : 0*/, n);
 8018c3c:	6a3b      	ldr	r3, [r7, #32]
 8018c3e:	2200      	movs	r2, #0
 8018c40:	494c      	ldr	r1, [pc, #304]	; (8018d74 <run_task_ctrl+0x190>)
 8018c42:	f44f 7080 	mov.w	r0, #256	; 0x100
 8018c46:	f7ff fedd 	bl	8018a04 <itm_debug2>
			if (n==3) {
 8018c4a:	6a3b      	ldr	r3, [r7, #32]
 8018c4c:	2b03      	cmp	r3, #3
 8018c4e:	d105      	bne.n	8018c5c <run_task_ctrl+0x78>
				itm_debug1(DBG_LOWCTRL|DBG_ERR, "both", n);
 8018c50:	6a3a      	ldr	r2, [r7, #32]
 8018c52:	4949      	ldr	r1, [pc, #292]	; (8018d78 <run_task_ctrl+0x194>)
 8018c54:	4849      	ldr	r0, [pc, #292]	; (8018d7c <run_task_ctrl+0x198>)
 8018c56:	f7ff febb 	bl	80189d0 <itm_debug1>
 8018c5a:	e7d5      	b.n	8018c08 <run_task_ctrl+0x24>
				if ((1)) continue; // skip this tick
			}
		}
		cnt++;
 8018c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c5e:	3301      	adds	r3, #1
 8018c60:	627b      	str	r3, [r7, #36]	; 0x24
		t0ctrl = HAL_GetTick();
 8018c62:	f7e9 f8e9 	bl	8001e38 <HAL_GetTick>
 8018c66:	4602      	mov	r2, r0
 8018c68:	4b45      	ldr	r3, [pc, #276]	; (8018d80 <run_task_ctrl+0x19c>)
 8018c6a:	601a      	str	r2, [r3, #0]
		if (0==(notif & (NOTIF_NEW_ADC_1|NOTIF_NEW_ADC_2))) continue;
#endif
		//debug_info('G', 0, "HOP", 0, 0, 0);
		static uint32_t oldt = 0;
		static uint32_t t0 = 0;
		uint32_t t = HAL_GetTick();
 8018c6c:	f7e9 f8e4 	bl	8001e38 <HAL_GetTick>
 8018c70:	61f8      	str	r0, [r7, #28]
		// XXX we should have a global t0
		if (!t0) t0 = t;
 8018c72:	4b44      	ldr	r3, [pc, #272]	; (8018d84 <run_task_ctrl+0x1a0>)
 8018c74:	681b      	ldr	r3, [r3, #0]
 8018c76:	2b00      	cmp	r3, #0
 8018c78:	d102      	bne.n	8018c80 <run_task_ctrl+0x9c>
 8018c7a:	4a42      	ldr	r2, [pc, #264]	; (8018d84 <run_task_ctrl+0x1a0>)
 8018c7c:	69fb      	ldr	r3, [r7, #28]
 8018c7e:	6013      	str	r3, [r2, #0]
		int32_t dt = (oldt) ? (t-oldt) : 1;
 8018c80:	4b41      	ldr	r3, [pc, #260]	; (8018d88 <run_task_ctrl+0x1a4>)
 8018c82:	681b      	ldr	r3, [r3, #0]
 8018c84:	2b00      	cmp	r3, #0
 8018c86:	d004      	beq.n	8018c92 <run_task_ctrl+0xae>
 8018c88:	4b3f      	ldr	r3, [pc, #252]	; (8018d88 <run_task_ctrl+0x1a4>)
 8018c8a:	681b      	ldr	r3, [r3, #0]
 8018c8c:	69fa      	ldr	r2, [r7, #28]
 8018c8e:	1ad3      	subs	r3, r2, r3
 8018c90:	e000      	b.n	8018c94 <run_task_ctrl+0xb0>
 8018c92:	2301      	movs	r3, #1
 8018c94:	61bb      	str	r3, [r7, #24]
		oldt = t;
 8018c96:	4a3c      	ldr	r2, [pc, #240]	; (8018d88 <run_task_ctrl+0x1a4>)
 8018c98:	69fb      	ldr	r3, [r7, #28]
 8018c9a:	6013      	str	r3, [r2, #0]
		ina3221
		void spdctl_run_tick(uint32_t notif_flags, uint32_t tick, uint32_t dt);
		void msgsrv_tick(uint32_t notif_flags, uint32_t tick, uint32_t dt);
		*/

		bemf_tick(notif, t, dt);
 8018c9c:	687b      	ldr	r3, [r7, #4]
 8018c9e:	69ba      	ldr	r2, [r7, #24]
 8018ca0:	69f9      	ldr	r1, [r7, #28]
 8018ca2:	4618      	mov	r0, r3
 8018ca4:	f7fc fe0c 	bl	80158c0 <bemf_tick>
		itm_debug1(DBG_LOWCTRL, "--msg", dt);
 8018ca8:	69ba      	ldr	r2, [r7, #24]
 8018caa:	4938      	ldr	r1, [pc, #224]	; (8018d8c <run_task_ctrl+0x1a8>)
 8018cac:	f44f 7080 	mov.w	r0, #256	; 0x100
 8018cb0:	f7ff fe8e 	bl	80189d0 <itm_debug1>
		msgsrv_tick(notif, t, dt);
 8018cb4:	687b      	ldr	r3, [r7, #4]
 8018cb6:	69ba      	ldr	r2, [r7, #24]
 8018cb8:	69f9      	ldr	r1, [r7, #28]
 8018cba:	4618      	mov	r0, r3
 8018cbc:	f7fe fc48 	bl	8017550 <msgsrv_tick>
		itm_debug1(DBG_LOWCTRL, "--spdctl", dt);
 8018cc0:	69ba      	ldr	r2, [r7, #24]
 8018cc2:	4933      	ldr	r1, [pc, #204]	; (8018d90 <run_task_ctrl+0x1ac>)
 8018cc4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8018cc8:	f7ff fe82 	bl	80189d0 <itm_debug1>
		spdctl_run_tick(notif, t, dt);
 8018ccc:	687b      	ldr	r3, [r7, #4]
 8018cce:	69ba      	ldr	r2, [r7, #24]
 8018cd0:	69f9      	ldr	r1, [r7, #28]
 8018cd2:	4618      	mov	r0, r3
 8018cd4:	f7ff f86a 	bl	8017dac <spdctl_run_tick>
		itm_debug1(DBG_LOWCTRL, "--canton", dt);
 8018cd8:	69ba      	ldr	r2, [r7, #24]
 8018cda:	492e      	ldr	r1, [pc, #184]	; (8018d94 <run_task_ctrl+0x1b0>)
 8018cdc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8018ce0:	f7ff fe76 	bl	80189d0 <itm_debug1>
		canton_tick(notif, t, dt);
 8018ce4:	687b      	ldr	r3, [r7, #4]
 8018ce6:	69ba      	ldr	r2, [r7, #24]
 8018ce8:	69f9      	ldr	r1, [r7, #28]
 8018cea:	4618      	mov	r0, r3
 8018cec:	f7fc f9c4 	bl	8015078 <canton_tick>
		itm_debug1(DBG_LOWCTRL, "--trnout", dt);
 8018cf0:	69ba      	ldr	r2, [r7, #24]
 8018cf2:	4929      	ldr	r1, [pc, #164]	; (8018d98 <run_task_ctrl+0x1b4>)
 8018cf4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8018cf8:	f7ff fe6a 	bl	80189d0 <itm_debug1>
		turnout_tick(notif, t, dt);
 8018cfc:	687b      	ldr	r3, [r7, #4]
 8018cfe:	69ba      	ldr	r2, [r7, #24]
 8018d00:	69f9      	ldr	r1, [r7, #28]
 8018d02:	4618      	mov	r0, r3
 8018d04:	f7fc ff84 	bl	8015c10 <turnout_tick>
		itm_debug1(DBG_LOWCTRL, "--ctrl", dt);
 8018d08:	69ba      	ldr	r2, [r7, #24]
 8018d0a:	4924      	ldr	r1, [pc, #144]	; (8018d9c <run_task_ctrl+0x1b8>)
 8018d0c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8018d10:	f7ff fe5e 	bl	80189d0 <itm_debug1>
		ctrl_run_tick(notif, t, dt);
 8018d14:	687b      	ldr	r3, [r7, #4]
 8018d16:	69ba      	ldr	r2, [r7, #24]
 8018d18:	69f9      	ldr	r1, [r7, #28]
 8018d1a:	4618      	mov	r0, r3
 8018d1c:	f7fa fec4 	bl	8013aa8 <ctrl_run_tick>
		_UNUSED_ uint32_t e1 = HAL_GetTick() - t;
 8018d20:	f7e9 f88a 	bl	8001e38 <HAL_GetTick>
 8018d24:	4602      	mov	r2, r0
 8018d26:	69fb      	ldr	r3, [r7, #28]
 8018d28:	1ad3      	subs	r3, r2, r3
 8018d2a:	617b      	str	r3, [r7, #20]
#if USE_NOTIF_TIM
#else
		//if (cnt>20) {
		itm_debug1(DBG_LOWCTRL, "--pres", dt);
 8018d2c:	69ba      	ldr	r2, [r7, #24]
 8018d2e:	491c      	ldr	r1, [pc, #112]	; (8018da0 <run_task_ctrl+0x1bc>)
 8018d30:	f44f 7080 	mov.w	r0, #256	; 0x100
 8018d34:	f7ff fe4c 	bl	80189d0 <itm_debug1>
		presdect_tick(notif, t, dt);
 8018d38:	687b      	ldr	r3, [r7, #4]
 8018d3a:	69ba      	ldr	r2, [r7, #24]
 8018d3c:	69f9      	ldr	r1, [r7, #28]
 8018d3e:	4618      	mov	r0, r3
 8018d40:	f7fc feec 	bl	8015b1c <presdect_tick>
		//}
#endif
		itm_debug1(DBG_LOWCTRL, "--done", dt);
 8018d44:	69ba      	ldr	r2, [r7, #24]
 8018d46:	4917      	ldr	r1, [pc, #92]	; (8018da4 <run_task_ctrl+0x1c0>)
 8018d48:	f44f 7080 	mov.w	r0, #256	; 0x100
 8018d4c:	f7ff fe40 	bl	80189d0 <itm_debug1>
		uint32_t et = HAL_GetTick() - t;
 8018d50:	f7e9 f872 	bl	8001e38 <HAL_GetTick>
 8018d54:	4602      	mov	r2, r0
 8018d56:	69fb      	ldr	r3, [r7, #28]
 8018d58:	1ad3      	subs	r3, r2, r3
 8018d5a:	613b      	str	r3, [r7, #16]
		if ((1)) {
			//itm_debug2(DBG_ERR, "ctrl tick", e1, et);
			if (et>9) {
 8018d5c:	693b      	ldr	r3, [r7, #16]
 8018d5e:	2b09      	cmp	r3, #9
 8018d60:	f67f af52 	bls.w	8018c08 <run_task_ctrl+0x24>
				itm_debug1(DBG_ERR, "long proc", et);
 8018d64:	693b      	ldr	r3, [r7, #16]
 8018d66:	461a      	mov	r2, r3
 8018d68:	490f      	ldr	r1, [pc, #60]	; (8018da8 <run_task_ctrl+0x1c4>)
 8018d6a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8018d6e:	f7ff fe2f 	bl	80189d0 <itm_debug1>
	for (;;) {
 8018d72:	e749      	b.n	8018c08 <run_task_ctrl+0x24>
 8018d74:	0801a58c 	.word	0x0801a58c
 8018d78:	0801a594 	.word	0x0801a594
 8018d7c:	80000100 	.word	0x80000100
 8018d80:	20009308 	.word	0x20009308
 8018d84:	2000562c 	.word	0x2000562c
 8018d88:	20005630 	.word	0x20005630
 8018d8c:	0801a59c 	.word	0x0801a59c
 8018d90:	0801a5a4 	.word	0x0801a5a4
 8018d94:	0801a5b0 	.word	0x0801a5b0
 8018d98:	0801a5bc 	.word	0x0801a5bc
 8018d9c:	0801a5c8 	.word	0x0801a5c8
 8018da0:	0801a5d0 	.word	0x0801a5d0
 8018da4:	0801a5d8 	.word	0x0801a5d8
 8018da8:	0801a5e0 	.word	0x0801a5e0

08018dac <HAL_ADC_ConvCpltCallback>:
static int nhalf=0;
static int nfull=0;


void HAL_ADC_ConvCpltCallback(_UNUSED_ ADC_HandleTypeDef* AdcHandle)
{
 8018dac:	b580      	push	{r7, lr}
 8018dae:	b086      	sub	sp, #24
 8018db0:	af02      	add	r7, sp, #8
 8018db2:	6078      	str	r0, [r7, #4]
	nfull++;
 8018db4:	4b0f      	ldr	r3, [pc, #60]	; (8018df4 <HAL_ADC_ConvCpltCallback+0x48>)
 8018db6:	681b      	ldr	r3, [r3, #0]
 8018db8:	3301      	adds	r3, #1
 8018dba:	4a0e      	ldr	r2, [pc, #56]	; (8018df4 <HAL_ADC_ConvCpltCallback+0x48>)
 8018dbc:	6013      	str	r3, [r2, #0]
	BaseType_t higher=0;
 8018dbe:	2300      	movs	r3, #0
 8018dc0:	60fb      	str	r3, [r7, #12]
	if ((0)) itm_debug1(DBG_TIM, "conv/f", HAL_GetTick());
	xTaskNotifyFromISR(ctrlTaskHandle, NOTIF_NEW_ADC_2, eSetBits, &higher);
 8018dc2:	4b0d      	ldr	r3, [pc, #52]	; (8018df8 <HAL_ADC_ConvCpltCallback+0x4c>)
 8018dc4:	6818      	ldr	r0, [r3, #0]
 8018dc6:	f107 030c 	add.w	r3, r7, #12
 8018dca:	9300      	str	r3, [sp, #0]
 8018dcc:	2300      	movs	r3, #0
 8018dce:	2201      	movs	r2, #1
 8018dd0:	2102      	movs	r1, #2
 8018dd2:	f7f6 f857 	bl	800ee84 <xTaskGenericNotifyFromISR>
	portYIELD_FROM_ISR(higher);
 8018dd6:	68fb      	ldr	r3, [r7, #12]
 8018dd8:	2b00      	cmp	r3, #0
 8018dda:	d007      	beq.n	8018dec <HAL_ADC_ConvCpltCallback+0x40>
 8018ddc:	4b07      	ldr	r3, [pc, #28]	; (8018dfc <HAL_ADC_ConvCpltCallback+0x50>)
 8018dde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018de2:	601a      	str	r2, [r3, #0]
 8018de4:	f3bf 8f4f 	dsb	sy
 8018de8:	f3bf 8f6f 	isb	sy
}
 8018dec:	bf00      	nop
 8018dee:	3710      	adds	r7, #16
 8018df0:	46bd      	mov	sp, r7
 8018df2:	bd80      	pop	{r7, pc}
 8018df4:	20005628 	.word	0x20005628
 8018df8:	20006358 	.word	0x20006358
 8018dfc:	e000ed04 	.word	0xe000ed04

08018e00 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(_UNUSED_ ADC_HandleTypeDef* hadc)
{
 8018e00:	b580      	push	{r7, lr}
 8018e02:	b086      	sub	sp, #24
 8018e04:	af02      	add	r7, sp, #8
 8018e06:	6078      	str	r0, [r7, #4]
	nhalf++;
 8018e08:	4b0f      	ldr	r3, [pc, #60]	; (8018e48 <HAL_ADC_ConvHalfCpltCallback+0x48>)
 8018e0a:	681b      	ldr	r3, [r3, #0]
 8018e0c:	3301      	adds	r3, #1
 8018e0e:	4a0e      	ldr	r2, [pc, #56]	; (8018e48 <HAL_ADC_ConvHalfCpltCallback+0x48>)
 8018e10:	6013      	str	r3, [r2, #0]
	BaseType_t higher=0;
 8018e12:	2300      	movs	r3, #0
 8018e14:	60fb      	str	r3, [r7, #12]
	if ((0)) itm_debug1(DBG_TIM, "conv/h", HAL_GetTick());
	xTaskNotifyFromISR(ctrlTaskHandle, NOTIF_NEW_ADC_1, eSetBits, &higher);
 8018e16:	4b0d      	ldr	r3, [pc, #52]	; (8018e4c <HAL_ADC_ConvHalfCpltCallback+0x4c>)
 8018e18:	6818      	ldr	r0, [r3, #0]
 8018e1a:	f107 030c 	add.w	r3, r7, #12
 8018e1e:	9300      	str	r3, [sp, #0]
 8018e20:	2300      	movs	r3, #0
 8018e22:	2201      	movs	r2, #1
 8018e24:	2101      	movs	r1, #1
 8018e26:	f7f6 f82d 	bl	800ee84 <xTaskGenericNotifyFromISR>
	portYIELD_FROM_ISR(higher);
 8018e2a:	68fb      	ldr	r3, [r7, #12]
 8018e2c:	2b00      	cmp	r3, #0
 8018e2e:	d007      	beq.n	8018e40 <HAL_ADC_ConvHalfCpltCallback+0x40>
 8018e30:	4b07      	ldr	r3, [pc, #28]	; (8018e50 <HAL_ADC_ConvHalfCpltCallback+0x50>)
 8018e32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018e36:	601a      	str	r2, [r3, #0]
 8018e38:	f3bf 8f4f 	dsb	sy
 8018e3c:	f3bf 8f6f 	isb	sy
}
 8018e40:	bf00      	nop
 8018e42:	3710      	adds	r7, #16
 8018e44:	46bd      	mov	sp, r7
 8018e46:	bd80      	pop	{r7, pc}
 8018e48:	20005624 	.word	0x20005624
 8018e4c:	20006358 	.word	0x20006358
 8018e50:	e000ed04 	.word	0xe000ed04

08018e54 <HAL_ADC_ErrorCallback>:
void HAL_ADC_LevelOutOfWindowCallback(_UNUSED_ ADC_HandleTypeDef* hadc)
{
	itm_debug1(DBG_ERR|DBG_TIM, "ADC ERR", 1);
}
void  HAL_ADC_ErrorCallback(_UNUSED_ ADC_HandleTypeDef *hadc)
{
 8018e54:	b580      	push	{r7, lr}
 8018e56:	b082      	sub	sp, #8
 8018e58:	af00      	add	r7, sp, #0
 8018e5a:	6078      	str	r0, [r7, #4]
	itm_debug1(DBG_ERR|DBG_TIM, "ADC ERR", 0);
 8018e5c:	2200      	movs	r2, #0
 8018e5e:	4904      	ldr	r1, [pc, #16]	; (8018e70 <HAL_ADC_ErrorCallback+0x1c>)
 8018e60:	4804      	ldr	r0, [pc, #16]	; (8018e74 <HAL_ADC_ErrorCallback+0x20>)
 8018e62:	f7ff fdb5 	bl	80189d0 <itm_debug1>
}
 8018e66:	bf00      	nop
 8018e68:	3708      	adds	r7, #8
 8018e6a:	46bd      	mov	sp, r7
 8018e6c:	bd80      	pop	{r7, pc}
 8018e6e:	bf00      	nop
 8018e70:	0801a5ec 	.word	0x0801a5ec
 8018e74:	80000001 	.word	0x80000001

08018e78 <i2c_ready>:

#endif
/// ----------------------------------

static void i2c_ready(_UNUSED_ int a)
{
 8018e78:	b480      	push	{r7}
 8018e7a:	b083      	sub	sp, #12
 8018e7c:	af00      	add	r7, sp, #0
 8018e7e:	6078      	str	r0, [r7, #4]

}
 8018e80:	bf00      	nop
 8018e82:	370c      	adds	r7, #12
 8018e84:	46bd      	mov	sp, r7
 8018e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e8a:	4770      	bx	lr

08018e8c <I2C_Scan>:
static void I2C_Scan(void)
{
 8018e8c:	b580      	push	{r7, lr}
 8018e8e:	b082      	sub	sp, #8
 8018e90:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef res;
    for(uint16_t i = 0; i < 128; i++) {
 8018e92:	2300      	movs	r3, #0
 8018e94:	80fb      	strh	r3, [r7, #6]
 8018e96:	e013      	b.n	8018ec0 <I2C_Scan+0x34>
        res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 8018e98:	88fb      	ldrh	r3, [r7, #6]
 8018e9a:	005b      	lsls	r3, r3, #1
 8018e9c:	b299      	uxth	r1, r3
 8018e9e:	230a      	movs	r3, #10
 8018ea0:	2201      	movs	r2, #1
 8018ea2:	480b      	ldr	r0, [pc, #44]	; (8018ed0 <I2C_Scan+0x44>)
 8018ea4:	f7ea ff16 	bl	8003cd4 <HAL_I2C_IsDeviceReady>
 8018ea8:	4603      	mov	r3, r0
 8018eaa:	717b      	strb	r3, [r7, #5]
        if(res == HAL_OK) {
 8018eac:	797b      	ldrb	r3, [r7, #5]
 8018eae:	2b00      	cmp	r3, #0
 8018eb0:	d103      	bne.n	8018eba <I2C_Scan+0x2e>
        	i2c_ready(i);
 8018eb2:	88fb      	ldrh	r3, [r7, #6]
 8018eb4:	4618      	mov	r0, r3
 8018eb6:	f7ff ffdf 	bl	8018e78 <i2c_ready>
    for(uint16_t i = 0; i < 128; i++) {
 8018eba:	88fb      	ldrh	r3, [r7, #6]
 8018ebc:	3301      	adds	r3, #1
 8018ebe:	80fb      	strh	r3, [r7, #6]
 8018ec0:	88fb      	ldrh	r3, [r7, #6]
 8018ec2:	2b7f      	cmp	r3, #127	; 0x7f
 8018ec4:	d9e8      	bls.n	8018e98 <I2C_Scan+0xc>
        } else {
        }
    }
}
 8018ec6:	bf00      	nop
 8018ec8:	3708      	adds	r7, #8
 8018eca:	46bd      	mov	sp, r7
 8018ecc:	bd80      	pop	{r7, pc}
 8018ece:	bf00      	nop
 8018ed0:	20005e0c 	.word	0x20005e0c

08018ed4 <StartUiTask>:
static int test_mode = 0;

*/

void StartUiTask(_UNUSED_ void *argument)
{
 8018ed4:	b580      	push	{r7, lr}
 8018ed6:	b084      	sub	sp, #16
 8018ed8:	af00      	add	r7, sp, #0
 8018eda:	6078      	str	r0, [r7, #4]
	// init
	extern TIM_HandleTypeDef htim4;

	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8018edc:	213c      	movs	r1, #60	; 0x3c
 8018ede:	480b      	ldr	r0, [pc, #44]	; (8018f0c <StartUiTask+0x38>)
 8018ee0:	f7ef f9d6 	bl	8008290 <HAL_TIM_Encoder_Start>


	for (int i=0; i<MAX_DISP; i++) {
 8018ee4:	2300      	movs	r3, #0
 8018ee6:	60fb      	str	r3, [r7, #12]
 8018ee8:	e006      	b.n	8018ef8 <StartUiTask+0x24>
		I2C_Scan();
 8018eea:	f7ff ffcf 	bl	8018e8c <I2C_Scan>
		ssd1306_Init();
 8018eee:	f7f7 fd89 	bl	8010a04 <ssd1306_Init>
	for (int i=0; i<MAX_DISP; i++) {
 8018ef2:	68fb      	ldr	r3, [r7, #12]
 8018ef4:	3301      	adds	r3, #1
 8018ef6:	60fb      	str	r3, [r7, #12]
 8018ef8:	68fb      	ldr	r3, [r7, #12]
 8018efa:	2b00      	cmp	r3, #0
 8018efc:	ddf5      	ble.n	8018eea <StartUiTask+0x16>
	}
	for (;;) {
		static TickType_t lasttick = 0;
		vTaskDelayUntil(&lasttick, 100);
 8018efe:	2164      	movs	r1, #100	; 0x64
 8018f00:	4803      	ldr	r0, [pc, #12]	; (8018f10 <StartUiTask+0x3c>)
 8018f02:	f7f5 f9d9 	bl	800e2b8 <vTaskDelayUntil>
		//lasttick = HAL_GetTick(); done by vTaskDelayUntil
		ihm_runtick();
 8018f06:	f7f9 fdef 	bl	8012ae8 <ihm_runtick>
	for (;;) {
 8018f0a:	e7f8      	b.n	8018efe <StartUiTask+0x2a>
 8018f0c:	20005dc8 	.word	0x20005dc8
 8018f10:	20005634 	.word	0x20005634

08018f14 <StartTxRxFrameTask>:

static void handleRxChars(frame_msg_t *m);
static void _send_bytes(uint8_t *b, int len);

void StartTxRxFrameTask(_UNUSED_ void *argument)
{
 8018f14:	b580      	push	{r7, lr}
 8018f16:	b090      	sub	sp, #64	; 0x40
 8018f18:	af00      	add	r7, sp, #0
 8018f1a:	6078      	str	r0, [r7, #4]
	  MX_USB_DEVICE_Init();
 8018f1c:	f7f7 f83e 	bl	800ff9c <MX_USB_DEVICE_Init>
		if ((0)) {
			osDelay(10000);
			continue;
		}
		uint8_t msg_prio;
		osStatus_t rc = osMessageQueueGet(frameQueueHandle, &m, &msg_prio, portMAX_DELAY);
 8018f20:	4b27      	ldr	r3, [pc, #156]	; (8018fc0 <StartTxRxFrameTask+0xac>)
 8018f22:	6818      	ldr	r0, [r3, #0]
 8018f24:	f107 0237 	add.w	r2, r7, #55	; 0x37
 8018f28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018f2c:	4925      	ldr	r1, [pc, #148]	; (8018fc4 <StartTxRxFrameTask+0xb0>)
 8018f2e:	f7f4 f8c9 	bl	800d0c4 <osMessageQueueGet>
 8018f32:	63f8      	str	r0, [r7, #60]	; 0x3c
		num_msg_get++;
 8018f34:	4b24      	ldr	r3, [pc, #144]	; (8018fc8 <StartTxRxFrameTask+0xb4>)
 8018f36:	681b      	ldr	r3, [r3, #0]
 8018f38:	3301      	adds	r3, #1
 8018f3a:	4a23      	ldr	r2, [pc, #140]	; (8018fc8 <StartTxRxFrameTask+0xb4>)
 8018f3c:	6013      	str	r3, [r2, #0]
		if ((0)) flash_led();
        usbPollQueues();
 8018f3e:	f7fd fc8f 	bl	8016860 <usbPollQueues>
        if (rc == osErrorTimeout) continue;
 8018f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018f44:	f113 0f02 	cmn.w	r3, #2
 8018f48:	d038      	beq.n	8018fbc <StartTxRxFrameTask+0xa8>
		if (rc != osOK) {
 8018f4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018f4c:	2b00      	cmp	r3, #0
 8018f4e:	d005      	beq.n	8018f5c <StartTxRxFrameTask+0x48>
			num_msg_get_err++;
 8018f50:	4b1e      	ldr	r3, [pc, #120]	; (8018fcc <StartTxRxFrameTask+0xb8>)
 8018f52:	681b      	ldr	r3, [r3, #0]
 8018f54:	3301      	adds	r3, #1
 8018f56:	4a1d      	ldr	r2, [pc, #116]	; (8018fcc <StartTxRxFrameTask+0xb8>)
 8018f58:	6013      	str	r3, [r2, #0]
			continue;
 8018f5a:	e030      	b.n	8018fbe <StartTxRxFrameTask+0xaa>
		}
		if (m.t == RXFRAME_CHARS) {
 8018f5c:	4b19      	ldr	r3, [pc, #100]	; (8018fc4 <StartTxRxFrameTask+0xb0>)
 8018f5e:	781b      	ldrb	r3, [r3, #0]
 8018f60:	2bff      	cmp	r3, #255	; 0xff
 8018f62:	d103      	bne.n	8018f6c <StartTxRxFrameTask+0x58>
			//debug_info('G', 0, "RXFRM", m.len,0, 0);
			handleRxChars(&m);
 8018f64:	4817      	ldr	r0, [pc, #92]	; (8018fc4 <StartTxRxFrameTask+0xb0>)
 8018f66:	f000 f89f 	bl	80190a8 <handleRxChars>
			continue;
 8018f6a:	e028      	b.n	8018fbe <StartTxRxFrameTask+0xaa>
		}
		if (m.t == TXFRAME_TYPE_STAT) {
 8018f6c:	4b15      	ldr	r3, [pc, #84]	; (8018fc4 <StartTxRxFrameTask+0xb0>)
 8018f6e:	781b      	ldrb	r3, [r3, #0]
 8018f70:	2b04      	cmp	r3, #4
 8018f72:	d11c      	bne.n	8018fae <StartTxRxFrameTask+0x9a>
			uint32_t t = HAL_GetTick();   // XXX t0
 8018f74:	f7e8 ff60 	bl	8001e38 <HAL_GetTick>
 8018f78:	63b8      	str	r0, [r7, #56]	; 0x38
			uint8_t b[]="|_NG\000X";
 8018f7a:	4a15      	ldr	r2, [pc, #84]	; (8018fd0 <StartTxRxFrameTask+0xbc>)
 8018f7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018f80:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018f84:	6018      	str	r0, [r3, #0]
 8018f86:	3304      	adds	r3, #4
 8018f88:	8019      	strh	r1, [r3, #0]
 8018f8a:	3302      	adds	r3, #2
 8018f8c:	0c0a      	lsrs	r2, r1, #16
 8018f8e:	701a      	strb	r2, [r3, #0]
			//memcpy(b+6, &t, 4);
			_send_bytes(b, 6);
 8018f90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018f94:	2106      	movs	r1, #6
 8018f96:	4618      	mov	r0, r3
 8018f98:	f000 f822 	bl	8018fe0 <_send_bytes>
			frame_send_stat(_send_bytes, t);
 8018f9c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8018f9e:	480d      	ldr	r0, [pc, #52]	; (8018fd4 <StartTxRxFrameTask+0xc0>)
 8018fa0:	f7fe f9b6 	bl	8017310 <frame_send_stat>
			_send_bytes((uint8_t *)"|", 1);
 8018fa4:	2101      	movs	r1, #1
 8018fa6:	480c      	ldr	r0, [pc, #48]	; (8018fd8 <StartTxRxFrameTask+0xc4>)
 8018fa8:	f000 f81a 	bl	8018fe0 <_send_bytes>
 8018fac:	e7b8      	b.n	8018f20 <StartTxRxFrameTask+0xc>
			continue;
		}
		_send_bytes(m.frm, m.len);
 8018fae:	4b05      	ldr	r3, [pc, #20]	; (8018fc4 <StartTxRxFrameTask+0xb0>)
 8018fb0:	785b      	ldrb	r3, [r3, #1]
 8018fb2:	4619      	mov	r1, r3
 8018fb4:	4809      	ldr	r0, [pc, #36]	; (8018fdc <StartTxRxFrameTask+0xc8>)
 8018fb6:	f000 f813 	bl	8018fe0 <_send_bytes>
 8018fba:	e7b1      	b.n	8018f20 <StartTxRxFrameTask+0xc>
        if (rc == osErrorTimeout) continue;
 8018fbc:	bf00      	nop
	for (;;) {
 8018fbe:	e7af      	b.n	8018f20 <StartTxRxFrameTask+0xc>
 8018fc0:	20005e08 	.word	0x20005e08
 8018fc4:	20005648 	.word	0x20005648
 8018fc8:	20005638 	.word	0x20005638
 8018fcc:	20005640 	.word	0x20005640
 8018fd0:	0801a5f8 	.word	0x0801a5f8
 8018fd4:	08018fe1 	.word	0x08018fe1
 8018fd8:	0801a5f4 	.word	0x0801a5f4
 8018fdc:	2000564a 	.word	0x2000564a

08018fe0 <_send_bytes>:
	}
}
//void frame_send_stat(void(*cb)(uint8_t *d, int l));

static void _send_bytes(uint8_t *b, int len)
{
 8018fe0:	b580      	push	{r7, lr}
 8018fe2:	b084      	sub	sp, #16
 8018fe4:	af00      	add	r7, sp, #0
 8018fe6:	6078      	str	r0, [r7, #4]
 8018fe8:	6039      	str	r1, [r7, #0]
	for (;;) {
		uint8_t rc = CDC_Transmit_FS(b, len);
 8018fea:	683b      	ldr	r3, [r7, #0]
 8018fec:	b29b      	uxth	r3, r3
 8018fee:	4619      	mov	r1, r3
 8018ff0:	6878      	ldr	r0, [r7, #4]
 8018ff2:	f7f7 f88b 	bl	801010c <CDC_Transmit_FS>
 8018ff6:	4603      	mov	r3, r0
 8018ff8:	73fb      	strb	r3, [r7, #15]
		if (rc != USBD_BUSY) break;
 8018ffa:	7bfb      	ldrb	r3, [r7, #15]
 8018ffc:	2b01      	cmp	r3, #1
 8018ffe:	d103      	bne.n	8019008 <_send_bytes+0x28>
		osDelay(1);
 8019000:	2001      	movs	r0, #1
 8019002:	f7f3 ff37 	bl	800ce74 <osDelay>
	for (;;) {
 8019006:	e7f0      	b.n	8018fea <_send_bytes+0xa>
		if (rc != USBD_BUSY) break;
 8019008:	bf00      	nop
	}
}
 801900a:	bf00      	nop
 801900c:	3710      	adds	r7, #16
 801900e:	46bd      	mov	sp, r7
 8019010:	bd80      	pop	{r7, pc}
	...

08019014 <txframe_send>:

int txframe_queue_full = 0;

void txframe_send(frame_msg_t *m, int discardable)
{
 8019014:	b580      	push	{r7, lr}
 8019016:	b084      	sub	sp, #16
 8019018:	af00      	add	r7, sp, #0
 801901a:	6078      	str	r0, [r7, #4]
 801901c:	6039      	str	r1, [r7, #0]
	int s = osMessageQueueGetSpace(frameQueueHandle);
 801901e:	4b1f      	ldr	r3, [pc, #124]	; (801909c <txframe_send+0x88>)
 8019020:	681b      	ldr	r3, [r3, #0]
 8019022:	4618      	mov	r0, r3
 8019024:	f7f4 f8c0 	bl	800d1a8 <osMessageQueueGetSpace>
 8019028:	4603      	mov	r3, r0
 801902a:	60fb      	str	r3, [r7, #12]
	if (s<=0) {
 801902c:	68fb      	ldr	r3, [r7, #12]
 801902e:	2b00      	cmp	r3, #0
 8019030:	dc07      	bgt.n	8019042 <txframe_send+0x2e>
		txframe_queue_full++;
 8019032:	4b1b      	ldr	r3, [pc, #108]	; (80190a0 <txframe_send+0x8c>)
 8019034:	681b      	ldr	r3, [r3, #0]
 8019036:	3301      	adds	r3, #1
 8019038:	4a19      	ldr	r2, [pc, #100]	; (80190a0 <txframe_send+0x8c>)
 801903a:	6013      	str	r3, [r2, #0]
		if (discardable) return;
 801903c:	683b      	ldr	r3, [r7, #0]
 801903e:	2b00      	cmp	r3, #0
 8019040:	d127      	bne.n	8019092 <txframe_send+0x7e>
	}
	if ((s<=20) && discardable) {
 8019042:	68fb      	ldr	r3, [r7, #12]
 8019044:	2b14      	cmp	r3, #20
 8019046:	dc08      	bgt.n	801905a <txframe_send+0x46>
 8019048:	683b      	ldr	r3, [r7, #0]
 801904a:	2b00      	cmp	r3, #0
 801904c:	d005      	beq.n	801905a <txframe_send+0x46>
		// we use a single queue, and no priority available with freertos
		// so we just keep some space for non discardable frames
		txframe_queue_full++;
 801904e:	4b14      	ldr	r3, [pc, #80]	; (80190a0 <txframe_send+0x8c>)
 8019050:	681b      	ldr	r3, [r3, #0]
 8019052:	3301      	adds	r3, #1
 8019054:	4a12      	ldr	r2, [pc, #72]	; (80190a0 <txframe_send+0x8c>)
 8019056:	6013      	str	r3, [r2, #0]
		return;
 8019058:	e01c      	b.n	8019094 <txframe_send+0x80>
	}
	uint32_t t = discardable ? 0 : portMAX_DELAY;
 801905a:	683b      	ldr	r3, [r7, #0]
 801905c:	2b00      	cmp	r3, #0
 801905e:	d001      	beq.n	8019064 <txframe_send+0x50>
 8019060:	2300      	movs	r3, #0
 8019062:	e001      	b.n	8019068 <txframe_send+0x54>
 8019064:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019068:	60bb      	str	r3, [r7, #8]
	if (m->len>FRM_MAX_LEN) m->len=FRM_MAX_LEN;
 801906a:	687b      	ldr	r3, [r7, #4]
 801906c:	785b      	ldrb	r3, [r3, #1]
 801906e:	2b1f      	cmp	r3, #31
 8019070:	d902      	bls.n	8019078 <txframe_send+0x64>
 8019072:	687b      	ldr	r3, [r7, #4]
 8019074:	221f      	movs	r2, #31
 8019076:	705a      	strb	r2, [r3, #1]
	num_msg_put++;
 8019078:	4b0a      	ldr	r3, [pc, #40]	; (80190a4 <txframe_send+0x90>)
 801907a:	681b      	ldr	r3, [r3, #0]
 801907c:	3301      	adds	r3, #1
 801907e:	4a09      	ldr	r2, [pc, #36]	; (80190a4 <txframe_send+0x90>)
 8019080:	6013      	str	r3, [r2, #0]
	osMessageQueuePut(frameQueueHandle, m, 0, t);
 8019082:	4b06      	ldr	r3, [pc, #24]	; (801909c <txframe_send+0x88>)
 8019084:	6818      	ldr	r0, [r3, #0]
 8019086:	68bb      	ldr	r3, [r7, #8]
 8019088:	2200      	movs	r2, #0
 801908a:	6879      	ldr	r1, [r7, #4]
 801908c:	f7f3 ffa6 	bl	800cfdc <osMessageQueuePut>
 8019090:	e000      	b.n	8019094 <txframe_send+0x80>
		if (discardable) return;
 8019092:	bf00      	nop
}
 8019094:	3710      	adds	r7, #16
 8019096:	46bd      	mov	sp, r7
 8019098:	bd80      	pop	{r7, pc}
 801909a:	bf00      	nop
 801909c:	20005e08 	.word	0x20005e08
 80190a0:	20005644 	.word	0x20005644
 80190a4:	2000563c 	.word	0x2000563c

080190a8 <handleRxChars>:

/* ------ RX ----- */

static void handleRxChars(frame_msg_t *m)
{
 80190a8:	b580      	push	{r7, lr}
 80190aa:	b08e      	sub	sp, #56	; 0x38
 80190ac:	af00      	add	r7, sp, #0
 80190ae:	6078      	str	r0, [r7, #4]
    frame_msg_t frresp;
	frresp.t = TXFRAME_TYPE_RESP;
 80190b0:	2301      	movs	r3, #1
 80190b2:	743b      	strb	r3, [r7, #16]
	/*
	 * int rlen = FRM_MAX_LEN;
	    	frame_process(cRxedChar,m.frm, &rlen);
	 */
	for (int i=0; i<m->len; i++) {
 80190b4:	2300      	movs	r3, #0
 80190b6:	637b      	str	r3, [r7, #52]	; 0x34
 80190b8:	e01c      	b.n	80190f4 <handleRxChars+0x4c>
		int rlen = FRM_MAX_LEN;
 80190ba:	231f      	movs	r3, #31
 80190bc:	60fb      	str	r3, [r7, #12]
		txrx_process_char(m->frm[i], frresp.frm, &rlen);
 80190be:	687a      	ldr	r2, [r7, #4]
 80190c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80190c2:	4413      	add	r3, r2
 80190c4:	3302      	adds	r3, #2
 80190c6:	7818      	ldrb	r0, [r3, #0]
 80190c8:	f107 020c 	add.w	r2, r7, #12
 80190cc:	f107 0310 	add.w	r3, r7, #16
 80190d0:	3302      	adds	r3, #2
 80190d2:	4619      	mov	r1, r3
 80190d4:	f7fd fbd8 	bl	8016888 <txrx_process_char>
		if (rlen>0) {
 80190d8:	68fb      	ldr	r3, [r7, #12]
 80190da:	2b00      	cmp	r3, #0
 80190dc:	dd07      	ble.n	80190ee <handleRxChars+0x46>
			//debug_info('G', 0, "RESP", rlen,0, 0);
			// would deadlock if we send (non discardable) through the queue
			//txframe_send_response(&frresp, rlen);
			_send_bytes(frresp.frm, rlen);
 80190de:	68fa      	ldr	r2, [r7, #12]
 80190e0:	f107 0310 	add.w	r3, r7, #16
 80190e4:	3302      	adds	r3, #2
 80190e6:	4611      	mov	r1, r2
 80190e8:	4618      	mov	r0, r3
 80190ea:	f7ff ff79 	bl	8018fe0 <_send_bytes>
	for (int i=0; i<m->len; i++) {
 80190ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80190f0:	3301      	adds	r3, #1
 80190f2:	637b      	str	r3, [r7, #52]	; 0x34
 80190f4:	687b      	ldr	r3, [r7, #4]
 80190f6:	785b      	ldrb	r3, [r3, #1]
 80190f8:	461a      	mov	r2, r3
 80190fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80190fc:	4293      	cmp	r3, r2
 80190fe:	dbdc      	blt.n	80190ba <handleRxChars+0x12>
			//frresp.len = rlen;
			//_send_frm(&frresp);
		}
	}
}
 8019100:	bf00      	nop
 8019102:	3738      	adds	r7, #56	; 0x38
 8019104:	46bd      	mov	sp, r7
 8019106:	bd80      	pop	{r7, pc}

08019108 <impl_CDC_Receive_FS>:

extern USBD_HandleTypeDef hUsbDeviceFS;


int8_t impl_CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8019108:	b580      	push	{r7, lr}
 801910a:	b086      	sub	sp, #24
 801910c:	af00      	add	r7, sp, #0
 801910e:	6078      	str	r0, [r7, #4]
 8019110:	6039      	str	r1, [r7, #0]
	if ((0)) {
		sprintf(str, "[B%d]\r\n", *Len);
		CDC_Transmit_FS(str, strlen(str));
	}
	*/
	uint8_t *p = Buf;
 8019112:	687b      	ldr	r3, [r7, #4]
 8019114:	617b      	str	r3, [r7, #20]
	int32_t rlen = *Len;
 8019116:	683b      	ldr	r3, [r7, #0]
 8019118:	681b      	ldr	r3, [r3, #0]
 801911a:	613b      	str	r3, [r7, #16]
	for (;;) {
		//BaseType_t xHigherPriorityTaskWoken = pdFALSE;
		frrx.t = RXFRAME_CHARS;
 801911c:	4b18      	ldr	r3, [pc, #96]	; (8019180 <impl_CDC_Receive_FS+0x78>)
 801911e:	22ff      	movs	r2, #255	; 0xff
 8019120:	701a      	strb	r2, [r3, #0]
		int l = MIN(rlen, RXFRAME_CHARS);
 8019122:	693b      	ldr	r3, [r7, #16]
 8019124:	2bff      	cmp	r3, #255	; 0xff
 8019126:	bfa8      	it	ge
 8019128:	23ff      	movge	r3, #255	; 0xff
 801912a:	60fb      	str	r3, [r7, #12]
		memcpy(frrx.frm, p, l);
 801912c:	68fb      	ldr	r3, [r7, #12]
 801912e:	461a      	mov	r2, r3
 8019130:	6979      	ldr	r1, [r7, #20]
 8019132:	4814      	ldr	r0, [pc, #80]	; (8019184 <impl_CDC_Receive_FS+0x7c>)
 8019134:	f000 fc24 	bl	8019980 <memcpy>
		rlen -= l;
 8019138:	693a      	ldr	r2, [r7, #16]
 801913a:	68fb      	ldr	r3, [r7, #12]
 801913c:	1ad3      	subs	r3, r2, r3
 801913e:	613b      	str	r3, [r7, #16]
		p += l;
 8019140:	68fb      	ldr	r3, [r7, #12]
 8019142:	697a      	ldr	r2, [r7, #20]
 8019144:	4413      	add	r3, r2
 8019146:	617b      	str	r3, [r7, #20]
		frrx.len = l;
 8019148:	68fb      	ldr	r3, [r7, #12]
 801914a:	b2da      	uxtb	r2, r3
 801914c:	4b0c      	ldr	r3, [pc, #48]	; (8019180 <impl_CDC_Receive_FS+0x78>)
 801914e:	705a      	strb	r2, [r3, #1]
		osMessageQueuePut(frameQueueHandle, &frrx, 0, 0);
 8019150:	4b0d      	ldr	r3, [pc, #52]	; (8019188 <impl_CDC_Receive_FS+0x80>)
 8019152:	6818      	ldr	r0, [r3, #0]
 8019154:	2300      	movs	r3, #0
 8019156:	2200      	movs	r2, #0
 8019158:	4909      	ldr	r1, [pc, #36]	; (8019180 <impl_CDC_Receive_FS+0x78>)
 801915a:	f7f3 ff3f 	bl	800cfdc <osMessageQueuePut>
		if (rlen <= 0) break;
 801915e:	693b      	ldr	r3, [r7, #16]
 8019160:	2b00      	cmp	r3, #0
 8019162:	dd00      	ble.n	8019166 <impl_CDC_Receive_FS+0x5e>
	for (;;) {
 8019164:	e7da      	b.n	801911c <impl_CDC_Receive_FS+0x14>
		if (rlen <= 0) break;
 8019166:	bf00      	nop
	}

	//CDC_Transmit_FS(Buf, *Len); // ADD THIS LINE to echo back all incoming data

	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8019168:	6879      	ldr	r1, [r7, #4]
 801916a:	4808      	ldr	r0, [pc, #32]	; (801918c <impl_CDC_Receive_FS+0x84>)
 801916c:	f7f2 fbf8 	bl	800b960 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8019170:	4806      	ldr	r0, [pc, #24]	; (801918c <impl_CDC_Receive_FS+0x84>)
 8019172:	f7f2 fc39 	bl	800b9e8 <USBD_CDC_ReceivePacket>

	return (USBD_OK);
 8019176:	2300      	movs	r3, #0
}
 8019178:	4618      	mov	r0, r3
 801917a:	3718      	adds	r7, #24
 801917c:	46bd      	mov	sp, r7
 801917e:	bd80      	pop	{r7, pc}
 8019180:	2000566c 	.word	0x2000566c
 8019184:	2000566e 	.word	0x2000566e
 8019188:	20005e08 	.word	0x20005e08
 801918c:	20007078 	.word	0x20007078

08019190 <itm_debug3>:
{
 8019190:	b580      	push	{r7, lr}
 8019192:	b086      	sub	sp, #24
 8019194:	af02      	add	r7, sp, #8
 8019196:	60f8      	str	r0, [r7, #12]
 8019198:	60b9      	str	r1, [r7, #8]
 801919a:	607a      	str	r2, [r7, #4]
 801919c:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, v3, 3);
 801919e:	4b09      	ldr	r3, [pc, #36]	; (80191c4 <itm_debug3+0x34>)
 80191a0:	681a      	ldr	r2, [r3, #0]
 80191a2:	68fb      	ldr	r3, [r7, #12]
 80191a4:	4013      	ands	r3, r2
 80191a6:	2b00      	cmp	r3, #0
 80191a8:	d007      	beq.n	80191ba <itm_debug3+0x2a>
 80191aa:	2303      	movs	r3, #3
 80191ac:	9300      	str	r3, [sp, #0]
 80191ae:	69bb      	ldr	r3, [r7, #24]
 80191b0:	683a      	ldr	r2, [r7, #0]
 80191b2:	6879      	ldr	r1, [r7, #4]
 80191b4:	68b8      	ldr	r0, [r7, #8]
 80191b6:	f000 f9c5 	bl	8019544 <_itm_debug3>
}
 80191ba:	bf00      	nop
 80191bc:	3710      	adds	r7, #16
 80191be:	46bd      	mov	sp, r7
 80191c0:	bd80      	pop	{r7, pc}
 80191c2:	bf00      	nop
 80191c4:	20000610 	.word	0x20000610

080191c8 <_blk_num_for_sub_num>:

#include "topology.h"


int _blk_num_for_sub_num(int subnum)
{
 80191c8:	b480      	push	{r7}
 80191ca:	b083      	sub	sp, #12
 80191cc:	af00      	add	r7, sp, #0
 80191ce:	6078      	str	r0, [r7, #4]
	if (subnum == 2) return 0;
 80191d0:	687b      	ldr	r3, [r7, #4]
 80191d2:	2b02      	cmp	r3, #2
 80191d4:	d101      	bne.n	80191da <_blk_num_for_sub_num+0x12>
 80191d6:	2300      	movs	r3, #0
 80191d8:	e00b      	b.n	80191f2 <_blk_num_for_sub_num+0x2a>
	if (subnum == 1) return 1;
 80191da:	687b      	ldr	r3, [r7, #4]
 80191dc:	2b01      	cmp	r3, #1
 80191de:	d101      	bne.n	80191e4 <_blk_num_for_sub_num+0x1c>
 80191e0:	2301      	movs	r3, #1
 80191e2:	e006      	b.n	80191f2 <_blk_num_for_sub_num+0x2a>
	if (subnum == 0) return 2;
 80191e4:	687b      	ldr	r3, [r7, #4]
 80191e6:	2b00      	cmp	r3, #0
 80191e8:	d101      	bne.n	80191ee <_blk_num_for_sub_num+0x26>
 80191ea:	2302      	movs	r3, #2
 80191ec:	e001      	b.n	80191f2 <_blk_num_for_sub_num+0x2a>
	return -1;
 80191ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80191f2:	4618      	mov	r0, r3
 80191f4:	370c      	adds	r7, #12
 80191f6:	46bd      	mov	sp, r7
 80191f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191fc:	4770      	bx	lr

080191fe <_next_block_num>:


int _next_block_num(int blknum, uint8_t left)
{
 80191fe:	b580      	push	{r7, lr}
 8019200:	b088      	sub	sp, #32
 8019202:	af02      	add	r7, sp, #8
 8019204:	6078      	str	r0, [r7, #4]
 8019206:	460b      	mov	r3, r1
 8019208:	70fb      	strb	r3, [r7, #3]
    int a,b,tn;
    next_blocks_nums(blknum, left, &a, &b, &tn);
 801920a:	f107 0010 	add.w	r0, r7, #16
 801920e:	f107 0214 	add.w	r2, r7, #20
 8019212:	78f9      	ldrb	r1, [r7, #3]
 8019214:	f107 030c 	add.w	r3, r7, #12
 8019218:	9300      	str	r3, [sp, #0]
 801921a:	4603      	mov	r3, r0
 801921c:	6878      	ldr	r0, [r7, #4]
 801921e:	f000 f813 	bl	8019248 <next_blocks_nums>
    if (tn>=0) {
 8019222:	68fb      	ldr	r3, [r7, #12]
 8019224:	2b00      	cmp	r3, #0
 8019226:	db0a      	blt.n	801923e <_next_block_num+0x40>
        a = topology_get_turnout(tn) ? b : a;
 8019228:	68fb      	ldr	r3, [r7, #12]
 801922a:	4618      	mov	r0, r3
 801922c:	f000 f8ee 	bl	801940c <topology_get_turnout>
 8019230:	4603      	mov	r3, r0
 8019232:	2b00      	cmp	r3, #0
 8019234:	d001      	beq.n	801923a <_next_block_num+0x3c>
 8019236:	693b      	ldr	r3, [r7, #16]
 8019238:	e000      	b.n	801923c <_next_block_num+0x3e>
 801923a:	697b      	ldr	r3, [r7, #20]
 801923c:	617b      	str	r3, [r7, #20]
    }
    return a;
 801923e:	697b      	ldr	r3, [r7, #20]
}
 8019240:	4618      	mov	r0, r3
 8019242:	3718      	adds	r7, #24
 8019244:	46bd      	mov	sp, r7
 8019246:	bd80      	pop	{r7, pc}

08019248 <next_blocks_nums>:
#error bad TOPOLOGY value
#endif
};

void next_blocks_nums(int blknum, uint8_t left, int *pb1, int *pb2, int *tn)
{
 8019248:	b580      	push	{r7, lr}
 801924a:	b084      	sub	sp, #16
 801924c:	af00      	add	r7, sp, #0
 801924e:	60f8      	str	r0, [r7, #12]
 8019250:	607a      	str	r2, [r7, #4]
 8019252:	603b      	str	r3, [r7, #0]
 8019254:	460b      	mov	r3, r1
 8019256:	72fb      	strb	r3, [r7, #11]
    *pb1 = -1;
 8019258:	687b      	ldr	r3, [r7, #4]
 801925a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801925e:	601a      	str	r2, [r3, #0]
    *pb2 = -1;
 8019260:	683b      	ldr	r3, [r7, #0]
 8019262:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019266:	601a      	str	r2, [r3, #0]
    *tn = -1;
 8019268:	69bb      	ldr	r3, [r7, #24]
 801926a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801926e:	601a      	str	r2, [r3, #0]
    if (blknum<0) {
 8019270:	68fb      	ldr	r3, [r7, #12]
 8019272:	2b00      	cmp	r3, #0
 8019274:	da01      	bge.n	801927a <next_blocks_nums+0x32>
        abort();
 8019276:	f000 fb28 	bl	80198ca <abort>
        return;
    }
    if (left) {
 801927a:	7afb      	ldrb	r3, [r7, #11]
 801927c:	2b00      	cmp	r3, #0
 801927e:	d021      	beq.n	80192c4 <next_blocks_nums+0x7c>
        *pb1 = Topology[blknum].left1;
 8019280:	492f      	ldr	r1, [pc, #188]	; (8019340 <next_blocks_nums+0xf8>)
 8019282:	68fa      	ldr	r2, [r7, #12]
 8019284:	4613      	mov	r3, r2
 8019286:	00db      	lsls	r3, r3, #3
 8019288:	1a9b      	subs	r3, r3, r2
 801928a:	440b      	add	r3, r1
 801928c:	3301      	adds	r3, #1
 801928e:	781b      	ldrb	r3, [r3, #0]
 8019290:	461a      	mov	r2, r3
 8019292:	687b      	ldr	r3, [r7, #4]
 8019294:	601a      	str	r2, [r3, #0]
        *pb2 = Topology[blknum].left2;
 8019296:	492a      	ldr	r1, [pc, #168]	; (8019340 <next_blocks_nums+0xf8>)
 8019298:	68fa      	ldr	r2, [r7, #12]
 801929a:	4613      	mov	r3, r2
 801929c:	00db      	lsls	r3, r3, #3
 801929e:	1a9b      	subs	r3, r3, r2
 80192a0:	440b      	add	r3, r1
 80192a2:	3302      	adds	r3, #2
 80192a4:	781b      	ldrb	r3, [r3, #0]
 80192a6:	461a      	mov	r2, r3
 80192a8:	683b      	ldr	r3, [r7, #0]
 80192aa:	601a      	str	r2, [r3, #0]
        *tn =  Topology[blknum].ltn;
 80192ac:	4924      	ldr	r1, [pc, #144]	; (8019340 <next_blocks_nums+0xf8>)
 80192ae:	68fa      	ldr	r2, [r7, #12]
 80192b0:	4613      	mov	r3, r2
 80192b2:	00db      	lsls	r3, r3, #3
 80192b4:	1a9b      	subs	r3, r3, r2
 80192b6:	440b      	add	r3, r1
 80192b8:	3303      	adds	r3, #3
 80192ba:	781b      	ldrb	r3, [r3, #0]
 80192bc:	461a      	mov	r2, r3
 80192be:	69bb      	ldr	r3, [r7, #24]
 80192c0:	601a      	str	r2, [r3, #0]
 80192c2:	e020      	b.n	8019306 <next_blocks_nums+0xbe>
    } else {
        *pb1 = Topology[blknum].right1;
 80192c4:	491e      	ldr	r1, [pc, #120]	; (8019340 <next_blocks_nums+0xf8>)
 80192c6:	68fa      	ldr	r2, [r7, #12]
 80192c8:	4613      	mov	r3, r2
 80192ca:	00db      	lsls	r3, r3, #3
 80192cc:	1a9b      	subs	r3, r3, r2
 80192ce:	440b      	add	r3, r1
 80192d0:	3304      	adds	r3, #4
 80192d2:	781b      	ldrb	r3, [r3, #0]
 80192d4:	461a      	mov	r2, r3
 80192d6:	687b      	ldr	r3, [r7, #4]
 80192d8:	601a      	str	r2, [r3, #0]
        *pb2 = Topology[blknum].right2;
 80192da:	4919      	ldr	r1, [pc, #100]	; (8019340 <next_blocks_nums+0xf8>)
 80192dc:	68fa      	ldr	r2, [r7, #12]
 80192de:	4613      	mov	r3, r2
 80192e0:	00db      	lsls	r3, r3, #3
 80192e2:	1a9b      	subs	r3, r3, r2
 80192e4:	440b      	add	r3, r1
 80192e6:	3305      	adds	r3, #5
 80192e8:	781b      	ldrb	r3, [r3, #0]
 80192ea:	461a      	mov	r2, r3
 80192ec:	683b      	ldr	r3, [r7, #0]
 80192ee:	601a      	str	r2, [r3, #0]
        *tn =  Topology[blknum].rtn;
 80192f0:	4913      	ldr	r1, [pc, #76]	; (8019340 <next_blocks_nums+0xf8>)
 80192f2:	68fa      	ldr	r2, [r7, #12]
 80192f4:	4613      	mov	r3, r2
 80192f6:	00db      	lsls	r3, r3, #3
 80192f8:	1a9b      	subs	r3, r3, r2
 80192fa:	440b      	add	r3, r1
 80192fc:	3306      	adds	r3, #6
 80192fe:	781b      	ldrb	r3, [r3, #0]
 8019300:	461a      	mov	r2, r3
 8019302:	69bb      	ldr	r3, [r7, #24]
 8019304:	601a      	str	r2, [r3, #0]
    }
    if (*pb1 == 0xFF) *pb1 = -1;
 8019306:	687b      	ldr	r3, [r7, #4]
 8019308:	681b      	ldr	r3, [r3, #0]
 801930a:	2bff      	cmp	r3, #255	; 0xff
 801930c:	d103      	bne.n	8019316 <next_blocks_nums+0xce>
 801930e:	687b      	ldr	r3, [r7, #4]
 8019310:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019314:	601a      	str	r2, [r3, #0]
    if (*pb2 == 0xFF) *pb2 = -1;
 8019316:	683b      	ldr	r3, [r7, #0]
 8019318:	681b      	ldr	r3, [r3, #0]
 801931a:	2bff      	cmp	r3, #255	; 0xff
 801931c:	d103      	bne.n	8019326 <next_blocks_nums+0xde>
 801931e:	683b      	ldr	r3, [r7, #0]
 8019320:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019324:	601a      	str	r2, [r3, #0]
    if (*tn  == 0xFF) *tn  = -1;
 8019326:	69bb      	ldr	r3, [r7, #24]
 8019328:	681b      	ldr	r3, [r3, #0]
 801932a:	2bff      	cmp	r3, #255	; 0xff
 801932c:	d103      	bne.n	8019336 <next_blocks_nums+0xee>
 801932e:	69bb      	ldr	r3, [r7, #24]
 8019330:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019334:	601a      	str	r2, [r3, #0]
}
 8019336:	bf00      	nop
 8019338:	3710      	adds	r7, #16
 801933a:	46bd      	mov	sp, r7
 801933c:	bd80      	pop	{r7, pc}
 801933e:	bf00      	nop
 8019340:	0801c6d8 	.word	0x0801c6d8

08019344 <get_blk_len>:

int get_blk_len(int blknum)
{
 8019344:	b480      	push	{r7}
 8019346:	b083      	sub	sp, #12
 8019348:	af00      	add	r7, sp, #0
 801934a:	6078      	str	r0, [r7, #4]
	return Topology[blknum].lencm;
 801934c:	4906      	ldr	r1, [pc, #24]	; (8019368 <get_blk_len+0x24>)
 801934e:	687a      	ldr	r2, [r7, #4]
 8019350:	4613      	mov	r3, r2
 8019352:	00db      	lsls	r3, r3, #3
 8019354:	1a9b      	subs	r3, r3, r2
 8019356:	440b      	add	r3, r1
 8019358:	781b      	ldrb	r3, [r3, #0]
		return 50;
	default:
		return 30;
	}
	*/
}
 801935a:	4618      	mov	r0, r3
 801935c:	370c      	adds	r7, #12
 801935e:	46bd      	mov	sp, r7
 8019360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019364:	4770      	bx	lr
 8019366:	bf00      	nop
 8019368:	0801c6d8 	.word	0x0801c6d8

0801936c <topolgy_set_turnout>:
// --------------------------------------------------------------------------------------

static volatile uint32_t turnoutvals = 0; // bit field

void topolgy_set_turnout(int tn, int v)
{
 801936c:	b580      	push	{r7, lr}
 801936e:	b084      	sub	sp, #16
 8019370:	af02      	add	r7, sp, #8
 8019372:	6078      	str	r0, [r7, #4]
 8019374:	6039      	str	r1, [r7, #0]
	if (tn >= NUM_TURNOUTS) return;
 8019376:	687b      	ldr	r3, [r7, #4]
 8019378:	2b07      	cmp	r3, #7
 801937a:	dc3b      	bgt.n	80193f4 <topolgy_set_turnout+0x88>
	if (tn<0) return;
 801937c:	687b      	ldr	r3, [r7, #4]
 801937e:	2b00      	cmp	r3, #0
 8019380:	db3a      	blt.n	80193f8 <topolgy_set_turnout+0x8c>
	if (tn>31) return;
 8019382:	687b      	ldr	r3, [r7, #4]
 8019384:	2b1f      	cmp	r3, #31
 8019386:	dc39      	bgt.n	80193fc <topolgy_set_turnout+0x90>

	if (v) {
 8019388:	683b      	ldr	r3, [r7, #0]
 801938a:	2b00      	cmp	r3, #0
 801938c:	d012      	beq.n	80193b4 <topolgy_set_turnout+0x48>
		__sync_fetch_and_or(&turnoutvals, (1<<tn));
 801938e:	2201      	movs	r2, #1
 8019390:	687b      	ldr	r3, [r7, #4]
 8019392:	fa02 f303 	lsl.w	r3, r2, r3
 8019396:	461a      	mov	r2, r3
 8019398:	4b1a      	ldr	r3, [pc, #104]	; (8019404 <topolgy_set_turnout+0x98>)
 801939a:	f3bf 8f5b 	dmb	ish
 801939e:	e853 1f00 	ldrex	r1, [r3]
 80193a2:	ea41 0102 	orr.w	r1, r1, r2
 80193a6:	e843 1000 	strex	r0, r1, [r3]
 80193aa:	2800      	cmp	r0, #0
 80193ac:	d1f7      	bne.n	801939e <topolgy_set_turnout+0x32>
 80193ae:	f3bf 8f5b 	dmb	ish
 80193b2:	e012      	b.n	80193da <topolgy_set_turnout+0x6e>
	} else {
		__sync_fetch_and_and(&turnoutvals, ~(1<<tn));
 80193b4:	2201      	movs	r2, #1
 80193b6:	687b      	ldr	r3, [r7, #4]
 80193b8:	fa02 f303 	lsl.w	r3, r2, r3
 80193bc:	43db      	mvns	r3, r3
 80193be:	461a      	mov	r2, r3
 80193c0:	4b10      	ldr	r3, [pc, #64]	; (8019404 <topolgy_set_turnout+0x98>)
 80193c2:	f3bf 8f5b 	dmb	ish
 80193c6:	e853 1f00 	ldrex	r1, [r3]
 80193ca:	ea01 0102 	and.w	r1, r1, r2
 80193ce:	e843 1000 	strex	r0, r1, [r3]
 80193d2:	2800      	cmp	r0, #0
 80193d4:	d1f7      	bne.n	80193c6 <topolgy_set_turnout+0x5a>
 80193d6:	f3bf 8f5b 	dmb	ish
	}
	itm_debug3(DBG_TURNOUT, "tt",tn,v, topology_get_turnout(tn));
 80193da:	6878      	ldr	r0, [r7, #4]
 80193dc:	f000 f816 	bl	801940c <topology_get_turnout>
 80193e0:	4603      	mov	r3, r0
 80193e2:	9300      	str	r3, [sp, #0]
 80193e4:	683b      	ldr	r3, [r7, #0]
 80193e6:	687a      	ldr	r2, [r7, #4]
 80193e8:	4907      	ldr	r1, [pc, #28]	; (8019408 <topolgy_set_turnout+0x9c>)
 80193ea:	f44f 7000 	mov.w	r0, #512	; 0x200
 80193ee:	f7ff fecf 	bl	8019190 <itm_debug3>
 80193f2:	e004      	b.n	80193fe <topolgy_set_turnout+0x92>
	if (tn >= NUM_TURNOUTS) return;
 80193f4:	bf00      	nop
 80193f6:	e002      	b.n	80193fe <topolgy_set_turnout+0x92>
	if (tn<0) return;
 80193f8:	bf00      	nop
 80193fa:	e000      	b.n	80193fe <topolgy_set_turnout+0x92>
	if (tn>31) return;
 80193fc:	bf00      	nop
}
 80193fe:	3708      	adds	r7, #8
 8019400:	46bd      	mov	sp, r7
 8019402:	bd80      	pop	{r7, pc}
 8019404:	20005690 	.word	0x20005690
 8019408:	0801a600 	.word	0x0801a600

0801940c <topology_get_turnout>:
int topology_get_turnout(int tn)
{
 801940c:	b480      	push	{r7}
 801940e:	b085      	sub	sp, #20
 8019410:	af00      	add	r7, sp, #0
 8019412:	6078      	str	r0, [r7, #4]
	if (tn >= NUM_TURNOUTS) return 0;
 8019414:	687b      	ldr	r3, [r7, #4]
 8019416:	2b07      	cmp	r3, #7
 8019418:	dd01      	ble.n	801941e <topology_get_turnout+0x12>
 801941a:	2300      	movs	r3, #0
 801941c:	e018      	b.n	8019450 <topology_get_turnout+0x44>
	if (tn<0) return 0;
 801941e:	687b      	ldr	r3, [r7, #4]
 8019420:	2b00      	cmp	r3, #0
 8019422:	da01      	bge.n	8019428 <topology_get_turnout+0x1c>
 8019424:	2300      	movs	r3, #0
 8019426:	e013      	b.n	8019450 <topology_get_turnout+0x44>
	if (tn>31) return 0;
 8019428:	687b      	ldr	r3, [r7, #4]
 801942a:	2b1f      	cmp	r3, #31
 801942c:	dd01      	ble.n	8019432 <topology_get_turnout+0x26>
 801942e:	2300      	movs	r3, #0
 8019430:	e00e      	b.n	8019450 <topology_get_turnout+0x44>

	uint32_t b = turnoutvals;
 8019432:	4b0a      	ldr	r3, [pc, #40]	; (801945c <topology_get_turnout+0x50>)
 8019434:	681b      	ldr	r3, [r3, #0]
 8019436:	60fb      	str	r3, [r7, #12]
	return (b & (1<<tn)) ? 1 : 0;
 8019438:	2201      	movs	r2, #1
 801943a:	687b      	ldr	r3, [r7, #4]
 801943c:	fa02 f303 	lsl.w	r3, r2, r3
 8019440:	461a      	mov	r2, r3
 8019442:	68fb      	ldr	r3, [r7, #12]
 8019444:	4013      	ands	r3, r2
 8019446:	2b00      	cmp	r3, #0
 8019448:	bf14      	ite	ne
 801944a:	2301      	movne	r3, #1
 801944c:	2300      	moveq	r3, #0
 801944e:	b2db      	uxtb	r3, r3
}
 8019450:	4618      	mov	r0, r3
 8019452:	3714      	adds	r7, #20
 8019454:	46bd      	mov	sp, r7
 8019456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801945a:	4770      	bx	lr
 801945c:	20005690 	.word	0x20005690

08019460 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8019460:	b480      	push	{r7}
 8019462:	b083      	sub	sp, #12
 8019464:	af00      	add	r7, sp, #0
 8019466:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8019468:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 801946c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8019470:	f003 0301 	and.w	r3, r3, #1
 8019474:	2b00      	cmp	r3, #0
 8019476:	d013      	beq.n	80194a0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8019478:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 801947c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8019480:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8019484:	2b00      	cmp	r3, #0
 8019486:	d00b      	beq.n	80194a0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8019488:	e000      	b.n	801948c <ITM_SendChar+0x2c>
    {
      __NOP();
 801948a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 801948c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8019490:	681b      	ldr	r3, [r3, #0]
 8019492:	2b00      	cmp	r3, #0
 8019494:	d0f9      	beq.n	801948a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8019496:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 801949a:	687a      	ldr	r2, [r7, #4]
 801949c:	b2d2      	uxtb	r2, r2
 801949e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80194a0:	687b      	ldr	r3, [r7, #4]
}
 80194a2:	4618      	mov	r0, r3
 80194a4:	370c      	adds	r7, #12
 80194a6:	46bd      	mov	sp, r7
 80194a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194ac:	4770      	bx	lr
	...

080194b0 <write_num>:




static void write_num(uint8_t *buf, uint32_t v, int ndigit)
{
 80194b0:	b480      	push	{r7}
 80194b2:	b085      	sub	sp, #20
 80194b4:	af00      	add	r7, sp, #0
 80194b6:	60f8      	str	r0, [r7, #12]
 80194b8:	60b9      	str	r1, [r7, #8]
 80194ba:	607a      	str	r2, [r7, #4]
	for (;ndigit>0; ndigit--) {
 80194bc:	e01a      	b.n	80194f4 <write_num+0x44>
		buf[ndigit-1] = '0'+ (v % 10);
 80194be:	68b9      	ldr	r1, [r7, #8]
 80194c0:	4b11      	ldr	r3, [pc, #68]	; (8019508 <write_num+0x58>)
 80194c2:	fba3 2301 	umull	r2, r3, r3, r1
 80194c6:	08da      	lsrs	r2, r3, #3
 80194c8:	4613      	mov	r3, r2
 80194ca:	009b      	lsls	r3, r3, #2
 80194cc:	4413      	add	r3, r2
 80194ce:	005b      	lsls	r3, r3, #1
 80194d0:	1aca      	subs	r2, r1, r3
 80194d2:	b2d2      	uxtb	r2, r2
 80194d4:	687b      	ldr	r3, [r7, #4]
 80194d6:	3b01      	subs	r3, #1
 80194d8:	68f9      	ldr	r1, [r7, #12]
 80194da:	440b      	add	r3, r1
 80194dc:	3230      	adds	r2, #48	; 0x30
 80194de:	b2d2      	uxtb	r2, r2
 80194e0:	701a      	strb	r2, [r3, #0]
		v = v/10;
 80194e2:	68bb      	ldr	r3, [r7, #8]
 80194e4:	4a08      	ldr	r2, [pc, #32]	; (8019508 <write_num+0x58>)
 80194e6:	fba2 2303 	umull	r2, r3, r2, r3
 80194ea:	08db      	lsrs	r3, r3, #3
 80194ec:	60bb      	str	r3, [r7, #8]
	for (;ndigit>0; ndigit--) {
 80194ee:	687b      	ldr	r3, [r7, #4]
 80194f0:	3b01      	subs	r3, #1
 80194f2:	607b      	str	r3, [r7, #4]
 80194f4:	687b      	ldr	r3, [r7, #4]
 80194f6:	2b00      	cmp	r3, #0
 80194f8:	dce1      	bgt.n	80194be <write_num+0xe>
	}
}
 80194fa:	bf00      	nop
 80194fc:	3714      	adds	r7, #20
 80194fe:	46bd      	mov	sp, r7
 8019500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019504:	4770      	bx	lr
 8019506:	bf00      	nop
 8019508:	cccccccd 	.word	0xcccccccd

0801950c <_write>:

#ifndef TRAIN_SIMU
int _write(_UNUSED_ int32_t file, uint8_t *ptr, int32_t len)
{
 801950c:	b580      	push	{r7, lr}
 801950e:	b086      	sub	sp, #24
 8019510:	af00      	add	r7, sp, #0
 8019512:	60f8      	str	r0, [r7, #12]
 8019514:	60b9      	str	r1, [r7, #8]
 8019516:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i++)
 8019518:	2300      	movs	r3, #0
 801951a:	617b      	str	r3, [r7, #20]
 801951c:	e009      	b.n	8019532 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 801951e:	68bb      	ldr	r3, [r7, #8]
 8019520:	1c5a      	adds	r2, r3, #1
 8019522:	60ba      	str	r2, [r7, #8]
 8019524:	781b      	ldrb	r3, [r3, #0]
 8019526:	4618      	mov	r0, r3
 8019528:	f7ff ff9a 	bl	8019460 <ITM_SendChar>
	for (int i = 0; i < len; i++)
 801952c:	697b      	ldr	r3, [r7, #20]
 801952e:	3301      	adds	r3, #1
 8019530:	617b      	str	r3, [r7, #20]
 8019532:	697a      	ldr	r2, [r7, #20]
 8019534:	687b      	ldr	r3, [r7, #4]
 8019536:	429a      	cmp	r2, r3
 8019538:	dbf1      	blt.n	801951e <_write+0x12>
	}
	return len;
 801953a:	687b      	ldr	r3, [r7, #4]
}
 801953c:	4618      	mov	r0, r3
 801953e:	3718      	adds	r7, #24
 8019540:	46bd      	mov	sp, r7
 8019542:	bd80      	pop	{r7, pc}

08019544 <_itm_debug3>:
#endif


void _itm_debug3(const char *msg, int32_t v1, int32_t v2, int32_t v3, int n)
{
 8019544:	b580      	push	{r7, lr}
 8019546:	b096      	sub	sp, #88	; 0x58
 8019548:	af00      	add	r7, sp, #0
 801954a:	60f8      	str	r0, [r7, #12]
 801954c:	60b9      	str	r1, [r7, #8]
 801954e:	607a      	str	r2, [r7, #4]
 8019550:	603b      	str	r3, [r7, #0]
	uint8_t buf[64];
	memset(buf, 0, sizeof(buf));
 8019552:	f107 0310 	add.w	r3, r7, #16
 8019556:	2240      	movs	r2, #64	; 0x40
 8019558:	2100      	movs	r1, #0
 801955a:	4618      	mov	r0, r3
 801955c:	f000 fa1b 	bl	8019996 <memset>
    uint32_t tck = HAL_GetTick();
 8019560:	f7e8 fc6a 	bl	8001e38 <HAL_GetTick>
 8019564:	6578      	str	r0, [r7, #84]	; 0x54
	write_num(buf, tck, 7);
 8019566:	f107 0310 	add.w	r3, r7, #16
 801956a:	2207      	movs	r2, #7
 801956c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801956e:	4618      	mov	r0, r3
 8019570:	f7ff ff9e 	bl	80194b0 <write_num>
	buf[7]=':';
 8019574:	233a      	movs	r3, #58	; 0x3a
 8019576:	75fb      	strb	r3, [r7, #23]
	strncpy((char *)buf+8, msg, 12);
 8019578:	f107 0310 	add.w	r3, r7, #16
 801957c:	3308      	adds	r3, #8
 801957e:	220c      	movs	r2, #12
 8019580:	68f9      	ldr	r1, [r7, #12]
 8019582:	4618      	mov	r0, r3
 8019584:	f000 fb0c 	bl	8019ba0 <strncpy>
	uint8_t *p = buf+strlen((char *)buf);
 8019588:	f107 0310 	add.w	r3, r7, #16
 801958c:	4618      	mov	r0, r3
 801958e:	f7e6 fe29 	bl	80001e4 <strlen>
 8019592:	4602      	mov	r2, r0
 8019594:	f107 0310 	add.w	r3, r7, #16
 8019598:	4413      	add	r3, r2
 801959a:	653b      	str	r3, [r7, #80]	; 0x50
	if (!n--) goto done;
 801959c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801959e:	1e5a      	subs	r2, r3, #1
 80195a0:	663a      	str	r2, [r7, #96]	; 0x60
 80195a2:	2b00      	cmp	r3, #0
 80195a4:	d03c      	beq.n	8019620 <_itm_debug3+0xdc>
	*p = '/';
 80195a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80195a8:	222f      	movs	r2, #47	; 0x2f
 80195aa:	701a      	strb	r2, [r3, #0]
	itoa(v1, (char *)p+1, 10);
 80195ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80195ae:	3301      	adds	r3, #1
 80195b0:	220a      	movs	r2, #10
 80195b2:	4619      	mov	r1, r3
 80195b4:	68b8      	ldr	r0, [r7, #8]
 80195b6:	f000 f9d1 	bl	801995c <itoa>
	p = buf+strlen((char *)buf);
 80195ba:	f107 0310 	add.w	r3, r7, #16
 80195be:	4618      	mov	r0, r3
 80195c0:	f7e6 fe10 	bl	80001e4 <strlen>
 80195c4:	4602      	mov	r2, r0
 80195c6:	f107 0310 	add.w	r3, r7, #16
 80195ca:	4413      	add	r3, r2
 80195cc:	653b      	str	r3, [r7, #80]	; 0x50
	if (!n--) goto done;
 80195ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80195d0:	1e5a      	subs	r2, r3, #1
 80195d2:	663a      	str	r2, [r7, #96]	; 0x60
 80195d4:	2b00      	cmp	r3, #0
 80195d6:	d025      	beq.n	8019624 <_itm_debug3+0xe0>
	*p = '/';
 80195d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80195da:	222f      	movs	r2, #47	; 0x2f
 80195dc:	701a      	strb	r2, [r3, #0]
	itoa(v2, (char *)p+1, 10);
 80195de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80195e0:	3301      	adds	r3, #1
 80195e2:	220a      	movs	r2, #10
 80195e4:	4619      	mov	r1, r3
 80195e6:	6878      	ldr	r0, [r7, #4]
 80195e8:	f000 f9b8 	bl	801995c <itoa>
	p = buf+strlen((char *)buf);
 80195ec:	f107 0310 	add.w	r3, r7, #16
 80195f0:	4618      	mov	r0, r3
 80195f2:	f7e6 fdf7 	bl	80001e4 <strlen>
 80195f6:	4602      	mov	r2, r0
 80195f8:	f107 0310 	add.w	r3, r7, #16
 80195fc:	4413      	add	r3, r2
 80195fe:	653b      	str	r3, [r7, #80]	; 0x50
	if (!n--) goto done;
 8019600:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019602:	1e5a      	subs	r2, r3, #1
 8019604:	663a      	str	r2, [r7, #96]	; 0x60
 8019606:	2b00      	cmp	r3, #0
 8019608:	d00e      	beq.n	8019628 <_itm_debug3+0xe4>
	*p = '/';
 801960a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801960c:	222f      	movs	r2, #47	; 0x2f
 801960e:	701a      	strb	r2, [r3, #0]
	itoa(v3, (char *)p+1, 10);
 8019610:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019612:	3301      	adds	r3, #1
 8019614:	220a      	movs	r2, #10
 8019616:	4619      	mov	r1, r3
 8019618:	6838      	ldr	r0, [r7, #0]
 801961a:	f000 f99f 	bl	801995c <itoa>
 801961e:	e004      	b.n	801962a <_itm_debug3+0xe6>
	if (!n--) goto done;
 8019620:	bf00      	nop
 8019622:	e002      	b.n	801962a <_itm_debug3+0xe6>
	if (!n--) goto done;
 8019624:	bf00      	nop
 8019626:	e000      	b.n	801962a <_itm_debug3+0xe6>
	if (!n--) goto done;
 8019628:	bf00      	nop
done:
	p = buf+strlen((char *)buf);
 801962a:	f107 0310 	add.w	r3, r7, #16
 801962e:	4618      	mov	r0, r3
 8019630:	f7e6 fdd8 	bl	80001e4 <strlen>
 8019634:	4602      	mov	r2, r0
 8019636:	f107 0310 	add.w	r3, r7, #16
 801963a:	4413      	add	r3, r2
 801963c:	653b      	str	r3, [r7, #80]	; 0x50
#ifndef TRAIN_SIMU
    *p = '\n';
 801963e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019640:	220a      	movs	r2, #10
 8019642:	701a      	strb	r2, [r3, #0]
	_write(0, buf, strlen((char *)buf));
 8019644:	f107 0310 	add.w	r3, r7, #16
 8019648:	4618      	mov	r0, r3
 801964a:	f7e6 fdcb 	bl	80001e4 <strlen>
 801964e:	4603      	mov	r3, r0
 8019650:	461a      	mov	r2, r3
 8019652:	f107 0310 	add.w	r3, r7, #16
 8019656:	4619      	mov	r1, r3
 8019658:	2000      	movs	r0, #0
 801965a:	f7ff ff57 	bl	801950c <_write>
#else
    puts((char*)buf);
    //write(0, buf, strlen((char *)buf));
#endif
}
 801965e:	bf00      	nop
 8019660:	3758      	adds	r7, #88	; 0x58
 8019662:	46bd      	mov	sp, r7
 8019664:	bd80      	pop	{r7, pc}
	...

08019668 <itm_debug1>:
{
 8019668:	b580      	push	{r7, lr}
 801966a:	b086      	sub	sp, #24
 801966c:	af02      	add	r7, sp, #8
 801966e:	60f8      	str	r0, [r7, #12]
 8019670:	60b9      	str	r1, [r7, #8]
 8019672:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 8019674:	4b08      	ldr	r3, [pc, #32]	; (8019698 <itm_debug1+0x30>)
 8019676:	681a      	ldr	r2, [r3, #0]
 8019678:	68fb      	ldr	r3, [r7, #12]
 801967a:	4013      	ands	r3, r2
 801967c:	2b00      	cmp	r3, #0
 801967e:	d007      	beq.n	8019690 <itm_debug1+0x28>
 8019680:	2301      	movs	r3, #1
 8019682:	9300      	str	r3, [sp, #0]
 8019684:	2300      	movs	r3, #0
 8019686:	2200      	movs	r2, #0
 8019688:	6879      	ldr	r1, [r7, #4]
 801968a:	68b8      	ldr	r0, [r7, #8]
 801968c:	f7ff ff5a 	bl	8019544 <_itm_debug3>
}
 8019690:	bf00      	nop
 8019692:	3710      	adds	r7, #16
 8019694:	46bd      	mov	sp, r7
 8019696:	bd80      	pop	{r7, pc}
 8019698:	20000610 	.word	0x20000610

0801969c <mqf_len>:
	m->tail = 0;
	m->maxuse = 0;
}

int mqf_len(mqf_t *m)
{
 801969c:	b580      	push	{r7, lr}
 801969e:	b084      	sub	sp, #16
 80196a0:	af00      	add	r7, sp, #0
 80196a2:	6078      	str	r0, [r7, #4]
	int l;
	if (m->head >= m->tail) {
 80196a4:	687b      	ldr	r3, [r7, #4]
 80196a6:	881b      	ldrh	r3, [r3, #0]
 80196a8:	b29a      	uxth	r2, r3
 80196aa:	687b      	ldr	r3, [r7, #4]
 80196ac:	885b      	ldrh	r3, [r3, #2]
 80196ae:	b29b      	uxth	r3, r3
 80196b0:	429a      	cmp	r2, r3
 80196b2:	d309      	bcc.n	80196c8 <mqf_len+0x2c>
		l = (m->head - m->tail);
 80196b4:	687b      	ldr	r3, [r7, #4]
 80196b6:	881b      	ldrh	r3, [r3, #0]
 80196b8:	b29b      	uxth	r3, r3
 80196ba:	461a      	mov	r2, r3
 80196bc:	687b      	ldr	r3, [r7, #4]
 80196be:	885b      	ldrh	r3, [r3, #2]
 80196c0:	b29b      	uxth	r3, r3
 80196c2:	1ad3      	subs	r3, r2, r3
 80196c4:	60fb      	str	r3, [r7, #12]
 80196c6:	e00b      	b.n	80196e0 <mqf_len+0x44>
	} else   {
		l = m->num + m->head - m->tail;
 80196c8:	687b      	ldr	r3, [r7, #4]
 80196ca:	795b      	ldrb	r3, [r3, #5]
 80196cc:	461a      	mov	r2, r3
 80196ce:	687b      	ldr	r3, [r7, #4]
 80196d0:	881b      	ldrh	r3, [r3, #0]
 80196d2:	b29b      	uxth	r3, r3
 80196d4:	4413      	add	r3, r2
 80196d6:	687a      	ldr	r2, [r7, #4]
 80196d8:	8852      	ldrh	r2, [r2, #2]
 80196da:	b292      	uxth	r2, r2
 80196dc:	1a9b      	subs	r3, r3, r2
 80196de:	60fb      	str	r3, [r7, #12]
	}
	if (l<0) {
 80196e0:	68fb      	ldr	r3, [r7, #12]
 80196e2:	2b00      	cmp	r3, #0
 80196e4:	da05      	bge.n	80196f2 <mqf_len+0x56>
		itm_debug1(DBG_MSG, "big pb", 1);
 80196e6:	2201      	movs	r2, #1
 80196e8:	4904      	ldr	r1, [pc, #16]	; (80196fc <mqf_len+0x60>)
 80196ea:	2002      	movs	r0, #2
 80196ec:	f7ff ffbc 	bl	8019668 <itm_debug1>
		for (;;);
 80196f0:	e7fe      	b.n	80196f0 <mqf_len+0x54>
	}
	return l;
 80196f2:	68fb      	ldr	r3, [r7, #12]
}
 80196f4:	4618      	mov	r0, r3
 80196f6:	3710      	adds	r7, #16
 80196f8:	46bd      	mov	sp, r7
 80196fa:	bd80      	pop	{r7, pc}
 80196fc:	0801a604 	.word	0x0801a604

08019700 <mqf_qfull>:

void dump_msg(mqf_t *mq, int n);

void mqf_qfull(mqf_t *m, _UNUSED_ int t)
{
 8019700:	b580      	push	{r7, lr}
 8019702:	b084      	sub	sp, #16
 8019704:	af00      	add	r7, sp, #0
 8019706:	6078      	str	r0, [r7, #4]
 8019708:	6039      	str	r1, [r7, #0]
	itm_debug1(DBG_ERR|DBG_MSG, "w/full", 0);
 801970a:	2200      	movs	r2, #0
 801970c:	490e      	ldr	r1, [pc, #56]	; (8019748 <mqf_qfull+0x48>)
 801970e:	480f      	ldr	r0, [pc, #60]	; (801974c <mqf_qfull+0x4c>)
 8019710:	f7ff ffaa 	bl	8019668 <itm_debug1>
	for (;;) {
		static uint8_t dmp = 0;
		if (dmp) {
 8019714:	4b0e      	ldr	r3, [pc, #56]	; (8019750 <mqf_qfull+0x50>)
 8019716:	781b      	ldrb	r3, [r3, #0]
 8019718:	2b00      	cmp	r3, #0
 801971a:	d0fb      	beq.n	8019714 <mqf_qfull+0x14>
			dmp = 0;
 801971c:	4b0c      	ldr	r3, [pc, #48]	; (8019750 <mqf_qfull+0x50>)
 801971e:	2200      	movs	r2, #0
 8019720:	701a      	strb	r2, [r3, #0]
			for (int i=0; i<mqf_len(m); i++) {
 8019722:	2300      	movs	r3, #0
 8019724:	60fb      	str	r3, [r7, #12]
 8019726:	e006      	b.n	8019736 <mqf_qfull+0x36>
				dump_msg(m, i);
 8019728:	68f9      	ldr	r1, [r7, #12]
 801972a:	6878      	ldr	r0, [r7, #4]
 801972c:	f7fd ff7e 	bl	801762c <dump_msg>
			for (int i=0; i<mqf_len(m); i++) {
 8019730:	68fb      	ldr	r3, [r7, #12]
 8019732:	3301      	adds	r3, #1
 8019734:	60fb      	str	r3, [r7, #12]
 8019736:	6878      	ldr	r0, [r7, #4]
 8019738:	f7ff ffb0 	bl	801969c <mqf_len>
 801973c:	4602      	mov	r2, r0
 801973e:	68fb      	ldr	r3, [r7, #12]
 8019740:	4293      	cmp	r3, r2
 8019742:	dbf1      	blt.n	8019728 <mqf_qfull+0x28>
	for (;;) {
 8019744:	e7e6      	b.n	8019714 <mqf_qfull+0x14>
 8019746:	bf00      	nop
 8019748:	0801a60c 	.word	0x0801a60c
 801974c:	80000002 	.word	0x80000002
 8019750:	20005694 	.word	0x20005694

08019754 <mqf_write>:
			}
		}
	}
}
int mqf_write(mqf_t *m, void *ptr)
{
 8019754:	b580      	push	{r7, lr}
 8019756:	b084      	sub	sp, #16
 8019758:	af00      	add	r7, sp, #0
 801975a:	6078      	str	r0, [r7, #4]
 801975c:	6039      	str	r1, [r7, #0]
	int l = mqf_len(m);
 801975e:	6878      	ldr	r0, [r7, #4]
 8019760:	f7ff ff9c 	bl	801969c <mqf_len>
 8019764:	60f8      	str	r0, [r7, #12]
	void Error_Handler(void);
	if (l<0) Error_Handler();
 8019766:	68fb      	ldr	r3, [r7, #12]
 8019768:	2b00      	cmp	r3, #0
 801976a:	da01      	bge.n	8019770 <mqf_write+0x1c>
 801976c:	f7e7 fe2e 	bl	80013cc <Error_Handler>
	if (l > m->maxuse) m->maxuse = (int8_t) l;
 8019770:	687b      	ldr	r3, [r7, #4]
 8019772:	799b      	ldrb	r3, [r3, #6]
 8019774:	461a      	mov	r2, r3
 8019776:	68fb      	ldr	r3, [r7, #12]
 8019778:	4293      	cmp	r3, r2
 801977a:	dd03      	ble.n	8019784 <mqf_write+0x30>
 801977c:	68fb      	ldr	r3, [r7, #12]
 801977e:	b2da      	uxtb	r2, r3
 8019780:	687b      	ldr	r3, [r7, #4]
 8019782:	719a      	strb	r2, [r3, #6]

    if (m->num == l) {
 8019784:	687b      	ldr	r3, [r7, #4]
 8019786:	795b      	ldrb	r3, [r3, #5]
 8019788:	461a      	mov	r2, r3
 801978a:	68fb      	ldr	r3, [r7, #12]
 801978c:	4293      	cmp	r3, r2
 801978e:	d10b      	bne.n	80197a8 <mqf_write+0x54>
		itm_debug1(DBG_ERR|DBG_MSG, "w/full", 0);
 8019790:	2200      	movs	r2, #0
 8019792:	492a      	ldr	r1, [pc, #168]	; (801983c <mqf_write+0xe8>)
 8019794:	482a      	ldr	r0, [pc, #168]	; (8019840 <mqf_write+0xec>)
 8019796:	f7ff ff67 	bl	8019668 <itm_debug1>
		mqf_qfull(m,0);
 801979a:	2100      	movs	r1, #0
 801979c:	6878      	ldr	r0, [r7, #4]
 801979e:	f7ff ffaf 	bl	8019700 <mqf_qfull>
        return -1;
 80197a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80197a6:	e045      	b.n	8019834 <mqf_write+0xe0>
    }
    if (m->num-1 == l) {
 80197a8:	687b      	ldr	r3, [r7, #4]
 80197aa:	795b      	ldrb	r3, [r3, #5]
 80197ac:	3b01      	subs	r3, #1
 80197ae:	68fa      	ldr	r2, [r7, #12]
 80197b0:	429a      	cmp	r2, r3
 80197b2:	d111      	bne.n	80197d8 <mqf_write+0x84>
    	itm_debug1(DBG_MSG, "w/full1", m->silentdrop);
 80197b4:	687b      	ldr	r3, [r7, #4]
 80197b6:	79db      	ldrb	r3, [r3, #7]
 80197b8:	461a      	mov	r2, r3
 80197ba:	4922      	ldr	r1, [pc, #136]	; (8019844 <mqf_write+0xf0>)
 80197bc:	2002      	movs	r0, #2
 80197be:	f7ff ff53 	bl	8019668 <itm_debug1>
    	if (!m->silentdrop) mqf_qfull(m,1);
 80197c2:	687b      	ldr	r3, [r7, #4]
 80197c4:	79db      	ldrb	r3, [r3, #7]
 80197c6:	2b00      	cmp	r3, #0
 80197c8:	d103      	bne.n	80197d2 <mqf_write+0x7e>
 80197ca:	2101      	movs	r1, #1
 80197cc:	6878      	ldr	r0, [r7, #4]
 80197ce:	f7ff ff97 	bl	8019700 <mqf_qfull>
        return -1;
 80197d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80197d6:	e02d      	b.n	8019834 <mqf_write+0xe0>
    }
	void *p = &(m->msgbuf[m->head*m->msgsiz]);
 80197d8:	687b      	ldr	r3, [r7, #4]
 80197da:	689b      	ldr	r3, [r3, #8]
 80197dc:	687a      	ldr	r2, [r7, #4]
 80197de:	8812      	ldrh	r2, [r2, #0]
 80197e0:	b292      	uxth	r2, r2
 80197e2:	4611      	mov	r1, r2
 80197e4:	687a      	ldr	r2, [r7, #4]
 80197e6:	7912      	ldrb	r2, [r2, #4]
 80197e8:	fb02 f201 	mul.w	r2, r2, r1
 80197ec:	4413      	add	r3, r2
 80197ee:	60bb      	str	r3, [r7, #8]
	memcpy(p, ptr, m->msgsiz);
 80197f0:	687b      	ldr	r3, [r7, #4]
 80197f2:	791b      	ldrb	r3, [r3, #4]
 80197f4:	461a      	mov	r2, r3
 80197f6:	6839      	ldr	r1, [r7, #0]
 80197f8:	68b8      	ldr	r0, [r7, #8]
 80197fa:	f000 f8c1 	bl	8019980 <memcpy>
	//__barrier();
    if (m->head == m->num-1) {
 80197fe:	687b      	ldr	r3, [r7, #4]
 8019800:	881b      	ldrh	r3, [r3, #0]
 8019802:	b29b      	uxth	r3, r3
 8019804:	461a      	mov	r2, r3
 8019806:	687b      	ldr	r3, [r7, #4]
 8019808:	795b      	ldrb	r3, [r3, #5]
 801980a:	3b01      	subs	r3, #1
 801980c:	429a      	cmp	r2, r3
 801980e:	d103      	bne.n	8019818 <mqf_write+0xc4>
        m->head = 0;
 8019810:	687b      	ldr	r3, [r7, #4]
 8019812:	2200      	movs	r2, #0
 8019814:	801a      	strh	r2, [r3, #0]
 8019816:	e00c      	b.n	8019832 <mqf_write+0xde>
    } else {
        __sync_fetch_and_add(&(m->head), 1);
 8019818:	687b      	ldr	r3, [r7, #4]
 801981a:	f3bf 8f5b 	dmb	ish
 801981e:	e8d3 2f5f 	ldrexh	r2, [r3]
 8019822:	f102 0201 	add.w	r2, r2, #1
 8019826:	e8c3 2f51 	strexh	r1, r2, [r3]
 801982a:	2900      	cmp	r1, #0
 801982c:	d1f7      	bne.n	801981e <mqf_write+0xca>
 801982e:	f3bf 8f5b 	dmb	ish
    }
	//AtomicInc(p->head);
	return 0;
 8019832:	2300      	movs	r3, #0
}
 8019834:	4618      	mov	r0, r3
 8019836:	3710      	adds	r7, #16
 8019838:	46bd      	mov	sp, r7
 801983a:	bd80      	pop	{r7, pc}
 801983c:	0801a60c 	.word	0x0801a60c
 8019840:	80000002 	.word	0x80000002
 8019844:	0801a614 	.word	0x0801a614

08019848 <mqf_read>:

int mqf_read(mqf_t *m, void *ptr)
{
 8019848:	b580      	push	{r7, lr}
 801984a:	b084      	sub	sp, #16
 801984c:	af00      	add	r7, sp, #0
 801984e:	6078      	str	r0, [r7, #4]
 8019850:	6039      	str	r1, [r7, #0]
	if (!mqf_len(m)) return -1;
 8019852:	6878      	ldr	r0, [r7, #4]
 8019854:	f7ff ff22 	bl	801969c <mqf_len>
 8019858:	4603      	mov	r3, r0
 801985a:	2b00      	cmp	r3, #0
 801985c:	d102      	bne.n	8019864 <mqf_read+0x1c>
 801985e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019862:	e02e      	b.n	80198c2 <mqf_read+0x7a>
    void *p = &(m->msgbuf[m->tail*m->msgsiz]);
 8019864:	687b      	ldr	r3, [r7, #4]
 8019866:	689b      	ldr	r3, [r3, #8]
 8019868:	687a      	ldr	r2, [r7, #4]
 801986a:	8852      	ldrh	r2, [r2, #2]
 801986c:	b292      	uxth	r2, r2
 801986e:	4611      	mov	r1, r2
 8019870:	687a      	ldr	r2, [r7, #4]
 8019872:	7912      	ldrb	r2, [r2, #4]
 8019874:	fb02 f201 	mul.w	r2, r2, r1
 8019878:	4413      	add	r3, r2
 801987a:	60fb      	str	r3, [r7, #12]
    memcpy(ptr, p, m->msgsiz);
 801987c:	687b      	ldr	r3, [r7, #4]
 801987e:	791b      	ldrb	r3, [r3, #4]
 8019880:	461a      	mov	r2, r3
 8019882:	68f9      	ldr	r1, [r7, #12]
 8019884:	6838      	ldr	r0, [r7, #0]
 8019886:	f000 f87b 	bl	8019980 <memcpy>
    //__barrier();
    if (m->tail == m->num-1) {
 801988a:	687b      	ldr	r3, [r7, #4]
 801988c:	885b      	ldrh	r3, [r3, #2]
 801988e:	b29b      	uxth	r3, r3
 8019890:	461a      	mov	r2, r3
 8019892:	687b      	ldr	r3, [r7, #4]
 8019894:	795b      	ldrb	r3, [r3, #5]
 8019896:	3b01      	subs	r3, #1
 8019898:	429a      	cmp	r2, r3
 801989a:	d103      	bne.n	80198a4 <mqf_read+0x5c>
        m->tail = 0;
 801989c:	687b      	ldr	r3, [r7, #4]
 801989e:	2200      	movs	r2, #0
 80198a0:	805a      	strh	r2, [r3, #2]
 80198a2:	e00d      	b.n	80198c0 <mqf_read+0x78>
    } else {
        __sync_fetch_and_add(&(m->tail), 1);
 80198a4:	687b      	ldr	r3, [r7, #4]
 80198a6:	3302      	adds	r3, #2
 80198a8:	f3bf 8f5b 	dmb	ish
 80198ac:	e8d3 2f5f 	ldrexh	r2, [r3]
 80198b0:	f102 0201 	add.w	r2, r2, #1
 80198b4:	e8c3 2f51 	strexh	r1, r2, [r3]
 80198b8:	2900      	cmp	r1, #0
 80198ba:	d1f7      	bne.n	80198ac <mqf_read+0x64>
 80198bc:	f3bf 8f5b 	dmb	ish
    }
    return 0;
 80198c0:	2300      	movs	r3, #0
}
 80198c2:	4618      	mov	r0, r3
 80198c4:	3710      	adds	r7, #16
 80198c6:	46bd      	mov	sp, r7
 80198c8:	bd80      	pop	{r7, pc}

080198ca <abort>:
 80198ca:	b508      	push	{r3, lr}
 80198cc:	2006      	movs	r0, #6
 80198ce:	f000 f94b 	bl	8019b68 <raise>
 80198d2:	2001      	movs	r0, #1
 80198d4:	f7e8 f9fa 	bl	8001ccc <_exit>

080198d8 <__errno>:
 80198d8:	4b01      	ldr	r3, [pc, #4]	; (80198e0 <__errno+0x8>)
 80198da:	6818      	ldr	r0, [r3, #0]
 80198dc:	4770      	bx	lr
 80198de:	bf00      	nop
 80198e0:	20000614 	.word	0x20000614

080198e4 <__libc_init_array>:
 80198e4:	b570      	push	{r4, r5, r6, lr}
 80198e6:	4e0d      	ldr	r6, [pc, #52]	; (801991c <__libc_init_array+0x38>)
 80198e8:	4c0d      	ldr	r4, [pc, #52]	; (8019920 <__libc_init_array+0x3c>)
 80198ea:	1ba4      	subs	r4, r4, r6
 80198ec:	10a4      	asrs	r4, r4, #2
 80198ee:	2500      	movs	r5, #0
 80198f0:	42a5      	cmp	r5, r4
 80198f2:	d109      	bne.n	8019908 <__libc_init_array+0x24>
 80198f4:	4e0b      	ldr	r6, [pc, #44]	; (8019924 <__libc_init_array+0x40>)
 80198f6:	4c0c      	ldr	r4, [pc, #48]	; (8019928 <__libc_init_array+0x44>)
 80198f8:	f000 f9a8 	bl	8019c4c <_init>
 80198fc:	1ba4      	subs	r4, r4, r6
 80198fe:	10a4      	asrs	r4, r4, #2
 8019900:	2500      	movs	r5, #0
 8019902:	42a5      	cmp	r5, r4
 8019904:	d105      	bne.n	8019912 <__libc_init_array+0x2e>
 8019906:	bd70      	pop	{r4, r5, r6, pc}
 8019908:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801990c:	4798      	blx	r3
 801990e:	3501      	adds	r5, #1
 8019910:	e7ee      	b.n	80198f0 <__libc_init_array+0xc>
 8019912:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8019916:	4798      	blx	r3
 8019918:	3501      	adds	r5, #1
 801991a:	e7f2      	b.n	8019902 <__libc_init_array+0x1e>
 801991c:	0801c788 	.word	0x0801c788
 8019920:	0801c788 	.word	0x0801c788
 8019924:	0801c788 	.word	0x0801c788
 8019928:	0801c78c 	.word	0x0801c78c

0801992c <__itoa>:
 801992c:	1e93      	subs	r3, r2, #2
 801992e:	2b22      	cmp	r3, #34	; 0x22
 8019930:	b510      	push	{r4, lr}
 8019932:	460c      	mov	r4, r1
 8019934:	d904      	bls.n	8019940 <__itoa+0x14>
 8019936:	2300      	movs	r3, #0
 8019938:	700b      	strb	r3, [r1, #0]
 801993a:	461c      	mov	r4, r3
 801993c:	4620      	mov	r0, r4
 801993e:	bd10      	pop	{r4, pc}
 8019940:	2a0a      	cmp	r2, #10
 8019942:	d109      	bne.n	8019958 <__itoa+0x2c>
 8019944:	2800      	cmp	r0, #0
 8019946:	da07      	bge.n	8019958 <__itoa+0x2c>
 8019948:	232d      	movs	r3, #45	; 0x2d
 801994a:	700b      	strb	r3, [r1, #0]
 801994c:	4240      	negs	r0, r0
 801994e:	2101      	movs	r1, #1
 8019950:	4421      	add	r1, r4
 8019952:	f000 f93b 	bl	8019bcc <__utoa>
 8019956:	e7f1      	b.n	801993c <__itoa+0x10>
 8019958:	2100      	movs	r1, #0
 801995a:	e7f9      	b.n	8019950 <__itoa+0x24>

0801995c <itoa>:
 801995c:	f7ff bfe6 	b.w	801992c <__itoa>

08019960 <malloc>:
 8019960:	4b02      	ldr	r3, [pc, #8]	; (801996c <malloc+0xc>)
 8019962:	4601      	mov	r1, r0
 8019964:	6818      	ldr	r0, [r3, #0]
 8019966:	f000 b86d 	b.w	8019a44 <_malloc_r>
 801996a:	bf00      	nop
 801996c:	20000614 	.word	0x20000614

08019970 <free>:
 8019970:	4b02      	ldr	r3, [pc, #8]	; (801997c <free+0xc>)
 8019972:	4601      	mov	r1, r0
 8019974:	6818      	ldr	r0, [r3, #0]
 8019976:	f000 b817 	b.w	80199a8 <_free_r>
 801997a:	bf00      	nop
 801997c:	20000614 	.word	0x20000614

08019980 <memcpy>:
 8019980:	b510      	push	{r4, lr}
 8019982:	1e43      	subs	r3, r0, #1
 8019984:	440a      	add	r2, r1
 8019986:	4291      	cmp	r1, r2
 8019988:	d100      	bne.n	801998c <memcpy+0xc>
 801998a:	bd10      	pop	{r4, pc}
 801998c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019990:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019994:	e7f7      	b.n	8019986 <memcpy+0x6>

08019996 <memset>:
 8019996:	4402      	add	r2, r0
 8019998:	4603      	mov	r3, r0
 801999a:	4293      	cmp	r3, r2
 801999c:	d100      	bne.n	80199a0 <memset+0xa>
 801999e:	4770      	bx	lr
 80199a0:	f803 1b01 	strb.w	r1, [r3], #1
 80199a4:	e7f9      	b.n	801999a <memset+0x4>
	...

080199a8 <_free_r>:
 80199a8:	b538      	push	{r3, r4, r5, lr}
 80199aa:	4605      	mov	r5, r0
 80199ac:	2900      	cmp	r1, #0
 80199ae:	d045      	beq.n	8019a3c <_free_r+0x94>
 80199b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80199b4:	1f0c      	subs	r4, r1, #4
 80199b6:	2b00      	cmp	r3, #0
 80199b8:	bfb8      	it	lt
 80199ba:	18e4      	addlt	r4, r4, r3
 80199bc:	f000 f944 	bl	8019c48 <__malloc_lock>
 80199c0:	4a1f      	ldr	r2, [pc, #124]	; (8019a40 <_free_r+0x98>)
 80199c2:	6813      	ldr	r3, [r2, #0]
 80199c4:	4610      	mov	r0, r2
 80199c6:	b933      	cbnz	r3, 80199d6 <_free_r+0x2e>
 80199c8:	6063      	str	r3, [r4, #4]
 80199ca:	6014      	str	r4, [r2, #0]
 80199cc:	4628      	mov	r0, r5
 80199ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80199d2:	f000 b93a 	b.w	8019c4a <__malloc_unlock>
 80199d6:	42a3      	cmp	r3, r4
 80199d8:	d90c      	bls.n	80199f4 <_free_r+0x4c>
 80199da:	6821      	ldr	r1, [r4, #0]
 80199dc:	1862      	adds	r2, r4, r1
 80199de:	4293      	cmp	r3, r2
 80199e0:	bf04      	itt	eq
 80199e2:	681a      	ldreq	r2, [r3, #0]
 80199e4:	685b      	ldreq	r3, [r3, #4]
 80199e6:	6063      	str	r3, [r4, #4]
 80199e8:	bf04      	itt	eq
 80199ea:	1852      	addeq	r2, r2, r1
 80199ec:	6022      	streq	r2, [r4, #0]
 80199ee:	6004      	str	r4, [r0, #0]
 80199f0:	e7ec      	b.n	80199cc <_free_r+0x24>
 80199f2:	4613      	mov	r3, r2
 80199f4:	685a      	ldr	r2, [r3, #4]
 80199f6:	b10a      	cbz	r2, 80199fc <_free_r+0x54>
 80199f8:	42a2      	cmp	r2, r4
 80199fa:	d9fa      	bls.n	80199f2 <_free_r+0x4a>
 80199fc:	6819      	ldr	r1, [r3, #0]
 80199fe:	1858      	adds	r0, r3, r1
 8019a00:	42a0      	cmp	r0, r4
 8019a02:	d10b      	bne.n	8019a1c <_free_r+0x74>
 8019a04:	6820      	ldr	r0, [r4, #0]
 8019a06:	4401      	add	r1, r0
 8019a08:	1858      	adds	r0, r3, r1
 8019a0a:	4282      	cmp	r2, r0
 8019a0c:	6019      	str	r1, [r3, #0]
 8019a0e:	d1dd      	bne.n	80199cc <_free_r+0x24>
 8019a10:	6810      	ldr	r0, [r2, #0]
 8019a12:	6852      	ldr	r2, [r2, #4]
 8019a14:	605a      	str	r2, [r3, #4]
 8019a16:	4401      	add	r1, r0
 8019a18:	6019      	str	r1, [r3, #0]
 8019a1a:	e7d7      	b.n	80199cc <_free_r+0x24>
 8019a1c:	d902      	bls.n	8019a24 <_free_r+0x7c>
 8019a1e:	230c      	movs	r3, #12
 8019a20:	602b      	str	r3, [r5, #0]
 8019a22:	e7d3      	b.n	80199cc <_free_r+0x24>
 8019a24:	6820      	ldr	r0, [r4, #0]
 8019a26:	1821      	adds	r1, r4, r0
 8019a28:	428a      	cmp	r2, r1
 8019a2a:	bf04      	itt	eq
 8019a2c:	6811      	ldreq	r1, [r2, #0]
 8019a2e:	6852      	ldreq	r2, [r2, #4]
 8019a30:	6062      	str	r2, [r4, #4]
 8019a32:	bf04      	itt	eq
 8019a34:	1809      	addeq	r1, r1, r0
 8019a36:	6021      	streq	r1, [r4, #0]
 8019a38:	605c      	str	r4, [r3, #4]
 8019a3a:	e7c7      	b.n	80199cc <_free_r+0x24>
 8019a3c:	bd38      	pop	{r3, r4, r5, pc}
 8019a3e:	bf00      	nop
 8019a40:	20005698 	.word	0x20005698

08019a44 <_malloc_r>:
 8019a44:	b570      	push	{r4, r5, r6, lr}
 8019a46:	1ccd      	adds	r5, r1, #3
 8019a48:	f025 0503 	bic.w	r5, r5, #3
 8019a4c:	3508      	adds	r5, #8
 8019a4e:	2d0c      	cmp	r5, #12
 8019a50:	bf38      	it	cc
 8019a52:	250c      	movcc	r5, #12
 8019a54:	2d00      	cmp	r5, #0
 8019a56:	4606      	mov	r6, r0
 8019a58:	db01      	blt.n	8019a5e <_malloc_r+0x1a>
 8019a5a:	42a9      	cmp	r1, r5
 8019a5c:	d903      	bls.n	8019a66 <_malloc_r+0x22>
 8019a5e:	230c      	movs	r3, #12
 8019a60:	6033      	str	r3, [r6, #0]
 8019a62:	2000      	movs	r0, #0
 8019a64:	bd70      	pop	{r4, r5, r6, pc}
 8019a66:	f000 f8ef 	bl	8019c48 <__malloc_lock>
 8019a6a:	4a21      	ldr	r2, [pc, #132]	; (8019af0 <_malloc_r+0xac>)
 8019a6c:	6814      	ldr	r4, [r2, #0]
 8019a6e:	4621      	mov	r1, r4
 8019a70:	b991      	cbnz	r1, 8019a98 <_malloc_r+0x54>
 8019a72:	4c20      	ldr	r4, [pc, #128]	; (8019af4 <_malloc_r+0xb0>)
 8019a74:	6823      	ldr	r3, [r4, #0]
 8019a76:	b91b      	cbnz	r3, 8019a80 <_malloc_r+0x3c>
 8019a78:	4630      	mov	r0, r6
 8019a7a:	f000 f83d 	bl	8019af8 <_sbrk_r>
 8019a7e:	6020      	str	r0, [r4, #0]
 8019a80:	4629      	mov	r1, r5
 8019a82:	4630      	mov	r0, r6
 8019a84:	f000 f838 	bl	8019af8 <_sbrk_r>
 8019a88:	1c43      	adds	r3, r0, #1
 8019a8a:	d124      	bne.n	8019ad6 <_malloc_r+0x92>
 8019a8c:	230c      	movs	r3, #12
 8019a8e:	6033      	str	r3, [r6, #0]
 8019a90:	4630      	mov	r0, r6
 8019a92:	f000 f8da 	bl	8019c4a <__malloc_unlock>
 8019a96:	e7e4      	b.n	8019a62 <_malloc_r+0x1e>
 8019a98:	680b      	ldr	r3, [r1, #0]
 8019a9a:	1b5b      	subs	r3, r3, r5
 8019a9c:	d418      	bmi.n	8019ad0 <_malloc_r+0x8c>
 8019a9e:	2b0b      	cmp	r3, #11
 8019aa0:	d90f      	bls.n	8019ac2 <_malloc_r+0x7e>
 8019aa2:	600b      	str	r3, [r1, #0]
 8019aa4:	50cd      	str	r5, [r1, r3]
 8019aa6:	18cc      	adds	r4, r1, r3
 8019aa8:	4630      	mov	r0, r6
 8019aaa:	f000 f8ce 	bl	8019c4a <__malloc_unlock>
 8019aae:	f104 000b 	add.w	r0, r4, #11
 8019ab2:	1d23      	adds	r3, r4, #4
 8019ab4:	f020 0007 	bic.w	r0, r0, #7
 8019ab8:	1ac3      	subs	r3, r0, r3
 8019aba:	d0d3      	beq.n	8019a64 <_malloc_r+0x20>
 8019abc:	425a      	negs	r2, r3
 8019abe:	50e2      	str	r2, [r4, r3]
 8019ac0:	e7d0      	b.n	8019a64 <_malloc_r+0x20>
 8019ac2:	428c      	cmp	r4, r1
 8019ac4:	684b      	ldr	r3, [r1, #4]
 8019ac6:	bf16      	itet	ne
 8019ac8:	6063      	strne	r3, [r4, #4]
 8019aca:	6013      	streq	r3, [r2, #0]
 8019acc:	460c      	movne	r4, r1
 8019ace:	e7eb      	b.n	8019aa8 <_malloc_r+0x64>
 8019ad0:	460c      	mov	r4, r1
 8019ad2:	6849      	ldr	r1, [r1, #4]
 8019ad4:	e7cc      	b.n	8019a70 <_malloc_r+0x2c>
 8019ad6:	1cc4      	adds	r4, r0, #3
 8019ad8:	f024 0403 	bic.w	r4, r4, #3
 8019adc:	42a0      	cmp	r0, r4
 8019ade:	d005      	beq.n	8019aec <_malloc_r+0xa8>
 8019ae0:	1a21      	subs	r1, r4, r0
 8019ae2:	4630      	mov	r0, r6
 8019ae4:	f000 f808 	bl	8019af8 <_sbrk_r>
 8019ae8:	3001      	adds	r0, #1
 8019aea:	d0cf      	beq.n	8019a8c <_malloc_r+0x48>
 8019aec:	6025      	str	r5, [r4, #0]
 8019aee:	e7db      	b.n	8019aa8 <_malloc_r+0x64>
 8019af0:	20005698 	.word	0x20005698
 8019af4:	2000569c 	.word	0x2000569c

08019af8 <_sbrk_r>:
 8019af8:	b538      	push	{r3, r4, r5, lr}
 8019afa:	4c06      	ldr	r4, [pc, #24]	; (8019b14 <_sbrk_r+0x1c>)
 8019afc:	2300      	movs	r3, #0
 8019afe:	4605      	mov	r5, r0
 8019b00:	4608      	mov	r0, r1
 8019b02:	6023      	str	r3, [r4, #0]
 8019b04:	f7e8 f8ec 	bl	8001ce0 <_sbrk>
 8019b08:	1c43      	adds	r3, r0, #1
 8019b0a:	d102      	bne.n	8019b12 <_sbrk_r+0x1a>
 8019b0c:	6823      	ldr	r3, [r4, #0]
 8019b0e:	b103      	cbz	r3, 8019b12 <_sbrk_r+0x1a>
 8019b10:	602b      	str	r3, [r5, #0]
 8019b12:	bd38      	pop	{r3, r4, r5, pc}
 8019b14:	2000930c 	.word	0x2000930c

08019b18 <_raise_r>:
 8019b18:	291f      	cmp	r1, #31
 8019b1a:	b538      	push	{r3, r4, r5, lr}
 8019b1c:	4604      	mov	r4, r0
 8019b1e:	460d      	mov	r5, r1
 8019b20:	d904      	bls.n	8019b2c <_raise_r+0x14>
 8019b22:	2316      	movs	r3, #22
 8019b24:	6003      	str	r3, [r0, #0]
 8019b26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019b2a:	bd38      	pop	{r3, r4, r5, pc}
 8019b2c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8019b2e:	b112      	cbz	r2, 8019b36 <_raise_r+0x1e>
 8019b30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019b34:	b94b      	cbnz	r3, 8019b4a <_raise_r+0x32>
 8019b36:	4620      	mov	r0, r4
 8019b38:	f000 f830 	bl	8019b9c <_getpid_r>
 8019b3c:	462a      	mov	r2, r5
 8019b3e:	4601      	mov	r1, r0
 8019b40:	4620      	mov	r0, r4
 8019b42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019b46:	f000 b817 	b.w	8019b78 <_kill_r>
 8019b4a:	2b01      	cmp	r3, #1
 8019b4c:	d00a      	beq.n	8019b64 <_raise_r+0x4c>
 8019b4e:	1c59      	adds	r1, r3, #1
 8019b50:	d103      	bne.n	8019b5a <_raise_r+0x42>
 8019b52:	2316      	movs	r3, #22
 8019b54:	6003      	str	r3, [r0, #0]
 8019b56:	2001      	movs	r0, #1
 8019b58:	e7e7      	b.n	8019b2a <_raise_r+0x12>
 8019b5a:	2400      	movs	r4, #0
 8019b5c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8019b60:	4628      	mov	r0, r5
 8019b62:	4798      	blx	r3
 8019b64:	2000      	movs	r0, #0
 8019b66:	e7e0      	b.n	8019b2a <_raise_r+0x12>

08019b68 <raise>:
 8019b68:	4b02      	ldr	r3, [pc, #8]	; (8019b74 <raise+0xc>)
 8019b6a:	4601      	mov	r1, r0
 8019b6c:	6818      	ldr	r0, [r3, #0]
 8019b6e:	f7ff bfd3 	b.w	8019b18 <_raise_r>
 8019b72:	bf00      	nop
 8019b74:	20000614 	.word	0x20000614

08019b78 <_kill_r>:
 8019b78:	b538      	push	{r3, r4, r5, lr}
 8019b7a:	4c07      	ldr	r4, [pc, #28]	; (8019b98 <_kill_r+0x20>)
 8019b7c:	2300      	movs	r3, #0
 8019b7e:	4605      	mov	r5, r0
 8019b80:	4608      	mov	r0, r1
 8019b82:	4611      	mov	r1, r2
 8019b84:	6023      	str	r3, [r4, #0]
 8019b86:	f7e8 f891 	bl	8001cac <_kill>
 8019b8a:	1c43      	adds	r3, r0, #1
 8019b8c:	d102      	bne.n	8019b94 <_kill_r+0x1c>
 8019b8e:	6823      	ldr	r3, [r4, #0]
 8019b90:	b103      	cbz	r3, 8019b94 <_kill_r+0x1c>
 8019b92:	602b      	str	r3, [r5, #0]
 8019b94:	bd38      	pop	{r3, r4, r5, pc}
 8019b96:	bf00      	nop
 8019b98:	2000930c 	.word	0x2000930c

08019b9c <_getpid_r>:
 8019b9c:	f7e8 b87e 	b.w	8001c9c <_getpid>

08019ba0 <strncpy>:
 8019ba0:	b570      	push	{r4, r5, r6, lr}
 8019ba2:	3901      	subs	r1, #1
 8019ba4:	4604      	mov	r4, r0
 8019ba6:	b902      	cbnz	r2, 8019baa <strncpy+0xa>
 8019ba8:	bd70      	pop	{r4, r5, r6, pc}
 8019baa:	4623      	mov	r3, r4
 8019bac:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8019bb0:	f803 5b01 	strb.w	r5, [r3], #1
 8019bb4:	1e56      	subs	r6, r2, #1
 8019bb6:	b92d      	cbnz	r5, 8019bc4 <strncpy+0x24>
 8019bb8:	4414      	add	r4, r2
 8019bba:	42a3      	cmp	r3, r4
 8019bbc:	d0f4      	beq.n	8019ba8 <strncpy+0x8>
 8019bbe:	f803 5b01 	strb.w	r5, [r3], #1
 8019bc2:	e7fa      	b.n	8019bba <strncpy+0x1a>
 8019bc4:	461c      	mov	r4, r3
 8019bc6:	4632      	mov	r2, r6
 8019bc8:	e7ed      	b.n	8019ba6 <strncpy+0x6>
	...

08019bcc <__utoa>:
 8019bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019bce:	4b1d      	ldr	r3, [pc, #116]	; (8019c44 <__utoa+0x78>)
 8019bd0:	b08b      	sub	sp, #44	; 0x2c
 8019bd2:	4605      	mov	r5, r0
 8019bd4:	460c      	mov	r4, r1
 8019bd6:	466e      	mov	r6, sp
 8019bd8:	f103 0c20 	add.w	ip, r3, #32
 8019bdc:	6818      	ldr	r0, [r3, #0]
 8019bde:	6859      	ldr	r1, [r3, #4]
 8019be0:	4637      	mov	r7, r6
 8019be2:	c703      	stmia	r7!, {r0, r1}
 8019be4:	3308      	adds	r3, #8
 8019be6:	4563      	cmp	r3, ip
 8019be8:	463e      	mov	r6, r7
 8019bea:	d1f7      	bne.n	8019bdc <__utoa+0x10>
 8019bec:	6818      	ldr	r0, [r3, #0]
 8019bee:	791b      	ldrb	r3, [r3, #4]
 8019bf0:	713b      	strb	r3, [r7, #4]
 8019bf2:	1e93      	subs	r3, r2, #2
 8019bf4:	2b22      	cmp	r3, #34	; 0x22
 8019bf6:	6038      	str	r0, [r7, #0]
 8019bf8:	f04f 0300 	mov.w	r3, #0
 8019bfc:	d904      	bls.n	8019c08 <__utoa+0x3c>
 8019bfe:	7023      	strb	r3, [r4, #0]
 8019c00:	461c      	mov	r4, r3
 8019c02:	4620      	mov	r0, r4
 8019c04:	b00b      	add	sp, #44	; 0x2c
 8019c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019c08:	1e66      	subs	r6, r4, #1
 8019c0a:	fbb5 f0f2 	udiv	r0, r5, r2
 8019c0e:	af0a      	add	r7, sp, #40	; 0x28
 8019c10:	fb02 5510 	mls	r5, r2, r0, r5
 8019c14:	443d      	add	r5, r7
 8019c16:	1c59      	adds	r1, r3, #1
 8019c18:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8019c1c:	f806 5f01 	strb.w	r5, [r6, #1]!
 8019c20:	4605      	mov	r5, r0
 8019c22:	b968      	cbnz	r0, 8019c40 <__utoa+0x74>
 8019c24:	5460      	strb	r0, [r4, r1]
 8019c26:	4423      	add	r3, r4
 8019c28:	4622      	mov	r2, r4
 8019c2a:	1b19      	subs	r1, r3, r4
 8019c2c:	1b10      	subs	r0, r2, r4
 8019c2e:	4281      	cmp	r1, r0
 8019c30:	dde7      	ble.n	8019c02 <__utoa+0x36>
 8019c32:	7811      	ldrb	r1, [r2, #0]
 8019c34:	7818      	ldrb	r0, [r3, #0]
 8019c36:	f802 0b01 	strb.w	r0, [r2], #1
 8019c3a:	f803 1901 	strb.w	r1, [r3], #-1
 8019c3e:	e7f4      	b.n	8019c2a <__utoa+0x5e>
 8019c40:	460b      	mov	r3, r1
 8019c42:	e7e2      	b.n	8019c0a <__utoa+0x3e>
 8019c44:	0801c6fb 	.word	0x0801c6fb

08019c48 <__malloc_lock>:
 8019c48:	4770      	bx	lr

08019c4a <__malloc_unlock>:
 8019c4a:	4770      	bx	lr

08019c4c <_init>:
 8019c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c4e:	bf00      	nop
 8019c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019c52:	bc08      	pop	{r3}
 8019c54:	469e      	mov	lr, r3
 8019c56:	4770      	bx	lr

08019c58 <_fini>:
 8019c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c5a:	bf00      	nop
 8019c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019c5e:	bc08      	pop	{r3}
 8019c60:	469e      	mov	lr, r3
 8019c62:	4770      	bx	lr
